
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022164  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08022348  08022348  00032348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022a70  08022a70  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08022a70  08022a70  00032a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022a78  08022a78  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022a78  08022a78  00032a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022a7c  08022a7c  00032a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08022a80  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000def8  200001fc  08022c7c  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e0f4  08022c7c  0004e0f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bef  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006024  00000000  00000000  00067e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  0006de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  0006fe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028533  00000000  00000000  00071b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031f5c  00000000  00000000  0009a033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2e5  00000000  00000000  000cbf8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009814  00000000  00000000  001b72c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802232c 	.word	0x0802232c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0802232c 	.word	0x0802232c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <reset_speed+0x44>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <reset_speed+0x48>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <reset_speed+0x4c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <reset_speed+0x50>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <reset_speed+0x54>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <reset_speed+0x58>)
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <reset_speed+0x5c>)
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <reset_speed+0x60>)
 8001050:	601a      	str	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000248 	.word	0x20000248
 8001060:	2000024c 	.word	0x2000024c
 8001064:	20000238 	.word	0x20000238
 8001068:	2000023c 	.word	0x2000023c
 800106c:	20000258 	.word	0x20000258
 8001070:	2000025c 	.word	0x2000025c
 8001074:	20000260 	.word	0x20000260
 8001078:	3f266666 	.word	0x3f266666
 800107c:	00000000 	.word	0x00000000

08001080 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 8001086:	4bd0      	ldr	r3, [pc, #832]	; (80013c8 <interupt_calEncoder+0x348>)
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	4bcf      	ldr	r3, [pc, #828]	; (80013cc <interupt_calEncoder+0x34c>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013d0 <interupt_calEncoder+0x350>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd07      	ble.n	80010bc <interupt_calEncoder+0x3c>
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80013d4 <interupt_calEncoder+0x354>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c0:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80013d8 <interupt_calEncoder+0x358>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d507      	bpl.n	80010de <interupt_calEncoder+0x5e>
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80013d4 <interupt_calEncoder+0x354>
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010de:	4bbf      	ldr	r3, [pc, #764]	; (80013dc <interupt_calEncoder+0x35c>)
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4bbe      	ldr	r3, [pc, #760]	; (80013e0 <interupt_calEncoder+0x360>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	eef1 7a67 	vneg.f32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013d0 <interupt_calEncoder+0x350>
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd07      	ble.n	8001118 <interupt_calEncoder+0x98>
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013d4 <interupt_calEncoder+0x354>
 8001110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001114:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001118:	edd7 7a00 	vldr	s15, [r7]
 800111c:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80013d8 <interupt_calEncoder+0x358>
 8001120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d507      	bpl.n	800113a <interupt_calEncoder+0xba>
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013d4 <interupt_calEncoder+0x354>
 8001132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001136:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	a391      	add	r3, pc, #580	; (adr r3, 8001388 <interupt_calEncoder+0x308>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa7f 	bl	8000648 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4ba3      	ldr	r3, [pc, #652]	; (80013e4 <interupt_calEncoder+0x364>)
 8001158:	f7ff fba0 	bl	800089c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	a38a      	add	r3, pc, #552	; (adr r3, 8001390 <interupt_calEncoder+0x310>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa6d 	bl	8000648 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a388      	add	r3, pc, #544	; (adr r3, 8001398 <interupt_calEncoder+0x318>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa64 	bl	8000648 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a385      	add	r3, pc, #532	; (adr r3, 80013a0 <interupt_calEncoder+0x320>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa5b 	bl	8000648 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a383      	add	r3, pc, #524	; (adr r3, 80013a8 <interupt_calEncoder+0x328>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb7c 	bl	800089c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <interupt_calEncoder+0x368>)
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	a37c      	add	r3, pc, #496	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fb6a 	bl	800089c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d8:	f7ff fb60 	bl	800089c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b80      	ldr	r3, [pc, #512]	; (80013ec <interupt_calEncoder+0x36c>)
 80011ea:	f7ff fa2d 	bl	8000648 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	a370      	add	r3, pc, #448	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb4e 	bl	800089c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fcf6 	bl	8000bf8 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	4a78      	ldr	r2, [pc, #480]	; (80013f0 <interupt_calEncoder+0x370>)
 8001210:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff f9c0 	bl	8000598 <__aeabi_f2d>
 8001218:	a35b      	add	r3, pc, #364	; (adr r3, 8001388 <interupt_calEncoder+0x308>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fa13 	bl	8000648 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <interupt_calEncoder+0x364>)
 8001230:	f7ff fb34 	bl	800089c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	a354      	add	r3, pc, #336	; (adr r3, 8001390 <interupt_calEncoder+0x310>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff fa01 	bl	8000648 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a352      	add	r3, pc, #328	; (adr r3, 8001398 <interupt_calEncoder+0x318>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f9f8 	bl	8000648 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	a34f      	add	r3, pc, #316	; (adr r3, 80013a0 <interupt_calEncoder+0x320>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9ef 	bl	8000648 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	a34d      	add	r3, pc, #308	; (adr r3, 80013a8 <interupt_calEncoder+0x328>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff fb10 	bl	800089c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <interupt_calEncoder+0x368>)
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a34a      	add	r3, pc, #296	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fafe 	bl	800089c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b0:	f7ff faf4 	bl	800089c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <interupt_calEncoder+0x36c>)
 80012c2:	f7ff f9c1 	bl	8000648 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	a33a      	add	r3, pc, #232	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff fae2 	bl	800089c <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc8a 	bl	8000bf8 <__aeabi_d2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a43      	ldr	r2, [pc, #268]	; (80013f4 <interupt_calEncoder+0x374>)
 80012e8:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <interupt_calEncoder+0x378>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f952 	bl	8000598 <__aeabi_f2d>
 80012f4:	4604      	mov	r4, r0
 80012f6:	460d      	mov	r5, r1
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <interupt_calEncoder+0x370>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f94b 	bl	8000598 <__aeabi_f2d>
 8001302:	a32d      	add	r3, pc, #180	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f99e 	bl	8000648 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7fe ffe2 	bl	80002dc <__adddf3>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fc6a 	bl	8000bf8 <__aeabi_d2f>
 8001324:	4603      	mov	r3, r0
 8001326:	4a34      	ldr	r2, [pc, #208]	; (80013f8 <interupt_calEncoder+0x378>)
 8001328:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <interupt_calEncoder+0x37c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f932 	bl	8000598 <__aeabi_f2d>
 8001334:	4604      	mov	r4, r0
 8001336:	460d      	mov	r5, r1
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <interupt_calEncoder+0x374>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f92b 	bl	8000598 <__aeabi_f2d>
 8001342:	a31d      	add	r3, pc, #116	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f97e 	bl	8000648 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7fe ffc2 	bl	80002dc <__adddf3>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc4a 	bl	8000bf8 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	4a25      	ldr	r2, [pc, #148]	; (80013fc <interupt_calEncoder+0x37c>)
 8001368:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <interupt_calEncoder+0x35c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <interupt_calEncoder+0x360>)
 8001370:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <interupt_calEncoder+0x348>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <interupt_calEncoder+0x34c>)
 8001378:	6013      	str	r3, [r2, #0]

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	f3af 8000 	nop.w
 8001388:	54411744 	.word	0x54411744
 800138c:	400921fb 	.word	0x400921fb
 8001390:	4e70a65b 	.word	0x4e70a65b
 8001394:	3f882f36 	.word	0x3f882f36
 8001398:	a858793e 	.word	0xa858793e
 800139c:	3ff1cd35 	.word	0x3ff1cd35
 80013a0:	00000000 	.word	0x00000000
 80013a4:	4078c000 	.word	0x4078c000
 80013a8:	147ae148 	.word	0x147ae148
 80013ac:	4078fbae 	.word	0x4078fbae
 80013b0:	0a3d70a4 	.word	0x0a3d70a4
 80013b4:	4078efd7 	.word	0x4078efd7
 80013b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013bc:	3f50624d 	.word	0x3f50624d
 80013c0:	5c28f5c3 	.word	0x5c28f5c3
 80013c4:	40792a8f 	.word	0x40792a8f
 80013c8:	200006d8 	.word	0x200006d8
 80013cc:	20000218 	.word	0x20000218
 80013d0:	43340000 	.word	0x43340000
 80013d4:	43b40000 	.word	0x43b40000
 80013d8:	c3340000 	.word	0xc3340000
 80013dc:	200006dc 	.word	0x200006dc
 80013e0:	2000021c 	.word	0x2000021c
 80013e4:	40668000 	.word	0x40668000
 80013e8:	40790000 	.word	0x40790000
 80013ec:	408f4000 	.word	0x408f4000
 80013f0:	20000228 	.word	0x20000228
 80013f4:	2000022c 	.word	0x2000022c
 80013f8:	20000220 	.word	0x20000220
 80013fc:	20000224 	.word	0x20000224

08001400 <interupt_calFusion>:


void interupt_calFusion(void) {
 8001400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001404:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 8001406:	4ba4      	ldr	r3, [pc, #656]	; (8001698 <interupt_calFusion+0x298>)
 8001408:	ed93 7a00 	vldr	s14, [r3]
 800140c:	4ba3      	ldr	r3, [pc, #652]	; (800169c <interupt_calFusion+0x29c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001416:	4ba0      	ldr	r3, [pc, #640]	; (8001698 <interupt_calFusion+0x298>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001420:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001424:	4b9e      	ldr	r3, [pc, #632]	; (80016a0 <interupt_calFusion+0x2a0>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	4b9a      	ldr	r3, [pc, #616]	; (800169c <interupt_calFusion+0x29c>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001438:	4b97      	ldr	r3, [pc, #604]	; (8001698 <interupt_calFusion+0x298>)
 800143a:	ed93 7a00 	vldr	s14, [r3]
 800143e:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <interupt_calFusion+0x2a4>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001448:	4b93      	ldr	r3, [pc, #588]	; (8001698 <interupt_calFusion+0x298>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001452:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001456:	4b94      	ldr	r3, [pc, #592]	; (80016a8 <interupt_calFusion+0x2a8>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <interupt_calFusion+0x2a4>)
 8001466:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800146a:	4b90      	ldr	r3, [pc, #576]	; (80016ac <interupt_calFusion+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f892 	bl	8000598 <__aeabi_f2d>
 8001474:	4604      	mov	r4, r0
 8001476:	460d      	mov	r5, r1
 8001478:	4b88      	ldr	r3, [pc, #544]	; (800169c <interupt_calFusion+0x29c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f88b 	bl	8000598 <__aeabi_f2d>
 8001482:	a383      	add	r3, pc, #524	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff f8de 	bl	8000648 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7fe ff22 	bl	80002dc <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fbaa 	bl	8000bf8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a81      	ldr	r2, [pc, #516]	; (80016ac <interupt_calFusion+0x2ac>)
 80014a8:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <interupt_calFusion+0x2b0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f872 	bl	8000598 <__aeabi_f2d>
 80014b4:	4604      	mov	r4, r0
 80014b6:	460d      	mov	r5, r1
 80014b8:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <interupt_calFusion+0x2a4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f86b 	bl	8000598 <__aeabi_f2d>
 80014c2:	a373      	add	r3, pc, #460	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f8be 	bl	8000648 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe ff02 	bl	80002dc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb8a 	bl	8000bf8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a72      	ldr	r2, [pc, #456]	; (80016b0 <interupt_calFusion+0x2b0>)
 80014e8:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 80014ea:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <interupt_calFusion+0x298>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f852 	bl	8000598 <__aeabi_f2d>
 80014f4:	4604      	mov	r4, r0
 80014f6:	460d      	mov	r5, r1
 80014f8:	4b6e      	ldr	r3, [pc, #440]	; (80016b4 <interupt_calFusion+0x2b4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f84b 	bl	8000598 <__aeabi_f2d>
 8001502:	4680      	mov	r8, r0
 8001504:	4689      	mov	r9, r1
 8001506:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <interupt_calFusion+0x2b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f844 	bl	8000598 <__aeabi_f2d>
 8001510:	a35f      	add	r3, pc, #380	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f897 	bl	8000648 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7fe fedb 	bl	80002dc <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f88b 	bl	8000648 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4614      	mov	r4, r2
 8001538:	461d      	mov	r5, r3
 800153a:	4b57      	ldr	r3, [pc, #348]	; (8001698 <interupt_calFusion+0x298>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001544:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <interupt_calFusion+0x2a0>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f7ff f81f 	bl	8000598 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe febb 	bl	80002dc <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb43 	bl	8000bf8 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <interupt_calFusion+0x2b4>)
 8001576:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <interupt_calFusion+0x298>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff f80b 	bl	8000598 <__aeabi_f2d>
 8001582:	4604      	mov	r4, r0
 8001584:	460d      	mov	r5, r1
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <interupt_calFusion+0x2b4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f804 	bl	8000598 <__aeabi_f2d>
 8001590:	4680      	mov	r8, r0
 8001592:	4689      	mov	r9, r1
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <interupt_calFusion+0x2b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fffd 	bl	8000598 <__aeabi_f2d>
 800159e:	a33c      	add	r3, pc, #240	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4640      	mov	r0, r8
 80015ae:	4649      	mov	r1, r9
 80015b0:	f7fe fe94 	bl	80002dc <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7ff f844 	bl	8000648 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4614      	mov	r4, r2
 80015c6:	461d      	mov	r5, r3
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <interupt_calFusion+0x298>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <interupt_calFusion+0x2a8>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e0:	ee17 0a90 	vmov	r0, s15
 80015e4:	f7fe ffd8 	bl	8000598 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe74 	bl	80002dc <__adddf3>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fafc 	bl	8000bf8 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <interupt_calFusion+0x2bc>)
 8001604:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <interupt_calFusion+0x2c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <interupt_calFusion+0x2b4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffbd 	bl	8000598 <__aeabi_f2d>
 800161e:	a31c      	add	r3, pc, #112	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f810 	bl	8000648 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4620      	mov	r0, r4
 800162e:	4629      	mov	r1, r5
 8001630:	f7fe fe54 	bl	80002dc <__adddf3>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fadc 	bl	8000bf8 <__aeabi_d2f>
 8001640:	4603      	mov	r3, r0
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <interupt_calFusion+0x2c0>)
 8001644:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <interupt_calFusion+0x2c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ffa4 	bl	8000598 <__aeabi_f2d>
 8001650:	4604      	mov	r4, r0
 8001652:	460d      	mov	r5, r1
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <interupt_calFusion+0x2bc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff9d 	bl	8000598 <__aeabi_f2d>
 800165e:	a30c      	add	r3, pc, #48	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fff0 	bl	8000648 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7fe fe34 	bl	80002dc <__adddf3>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fabc 	bl	8000bf8 <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <interupt_calFusion+0x2c4>)
 8001684:	6013      	str	r3, [r2, #0]

}
 8001686:	bf00      	nop
 8001688:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800168c:	f3af 8000 	nop.w
 8001690:	d2f1a9fc 	.word	0xd2f1a9fc
 8001694:	3f50624d 	.word	0x3f50624d
 8001698:	20000260 	.word	0x20000260
 800169c:	20000238 	.word	0x20000238
 80016a0:	20000228 	.word	0x20000228
 80016a4:	2000023c 	.word	0x2000023c
 80016a8:	2000022c 	.word	0x2000022c
 80016ac:	20000230 	.word	0x20000230
 80016b0:	20000234 	.word	0x20000234
 80016b4:	20000258 	.word	0x20000258
 80016b8:	20000280 	.word	0x20000280
 80016bc:	2000025c 	.word	0x2000025c
 80016c0:	20000250 	.word	0x20000250
 80016c4:	20000254 	.word	0x20000254

080016c8 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	int s = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
	angle = 0;
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <reset_gyro+0xfc>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <reset_gyro+0x100>)
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 80016e2:	2301      	movs	r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	e026      	b.n	8001736 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <reset_gyro+0x104>)
 80016ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <reset_gyro+0x100>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <reset_gyro+0x100>)
 80016fa:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <reset_gyro+0x104>)
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <reset_gyro+0x108>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <reset_gyro+0x108>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <reset_gyro+0x104>)
 8001716:	ed93 7a04 	vldr	s14, [r3, #16]
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <reset_gyro+0x10c>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <reset_gyro+0x10c>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f006 fcac 	bl	8008088 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3301      	adds	r3, #1
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800173c:	ddd4      	ble.n	80016e8 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <reset_gyro+0x100>)
 8001740:	ed93 7a00 	vldr	s14, [r3]
 8001744:	eddf 6a24 	vldr	s13, [pc, #144]	; 80017d8 <reset_gyro+0x110>
 8001748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <reset_gyro+0x100>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <reset_gyro+0x108>)
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80017d8 <reset_gyro+0x110>
 800175c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <reset_gyro+0x108>)
 8001762:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <reset_gyro+0x10c>)
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80017d8 <reset_gyro+0x110>
 8001770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <reset_gyro+0x10c>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <reset_gyro+0xfc>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <reset_gyro+0x114>)
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <reset_gyro+0x118>)
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <reset_gyro+0x11c>)
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e009      	b.n	80017b4 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <reset_gyro+0x120>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b09      	cmp	r3, #9
 80017b8:	ddf2      	ble.n	80017a0 <reset_gyro+0xd8>
	}
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000264 	.word	0x20000264
 80017c8:	20000288 	.word	0x20000288
 80017cc:	200006e4 	.word	0x200006e4
 80017d0:	20000284 	.word	0x20000284
 80017d4:	2000028c 	.word	0x2000028c
 80017d8:	447a0000 	.word	0x447a0000
 80017dc:	2000026c 	.word	0x2000026c
 80017e0:	20000278 	.word	0x20000278
 80017e4:	2000027c 	.word	0x2000027c
 80017e8:	20000290 	.word	0x20000290
 80017ec:	00000000 	.word	0x00000000

080017f0 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	int j = 9;
 80017f6:	2309      	movs	r3, #9
 80017f8:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 80017fa:	2309      	movs	r3, #9
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	e00d      	b.n	800181c <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	4aa6      	ldr	r2, [pc, #664]	; (8001aa0 <interrupt_calGyro+0x2b0>)
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	49a4      	ldr	r1, [pc, #656]	; (8001aa0 <interrupt_calGyro+0x2b0>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3b01      	subs	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	dcee      	bgt.n	8001800 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 8001822:	4ba0      	ldr	r3, [pc, #640]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 8001824:	ed93 7a02 	vldr	s14, [r3, #8]
 8001828:	4b9f      	ldr	r3, [pc, #636]	; (8001aa8 <interrupt_calGyro+0x2b8>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001832:	ee17 0a90 	vmov	r0, s15
 8001836:	f7fe feaf 	bl	8000598 <__aeabi_f2d>
 800183a:	a387      	add	r3, pc, #540	; (adr r3, 8001a58 <interrupt_calGyro+0x268>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe ff02 	bl	8000648 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	a384      	add	r3, pc, #528	; (adr r3, 8001a60 <interrupt_calGyro+0x270>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fef9 	bl	8000648 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	a382      	add	r3, pc, #520	; (adr r3, 8001a68 <interrupt_calGyro+0x278>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7ff f81a 	bl	800089c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f9c2 	bl	8000bf8 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4a8a      	ldr	r2, [pc, #552]	; (8001aa0 <interrupt_calGyro+0x2b0>)
 8001878:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 800187a:	4b89      	ldr	r3, [pc, #548]	; (8001aa0 <interrupt_calGyro+0x2b0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a8b      	ldr	r2, [pc, #556]	; (8001aac <interrupt_calGyro+0x2bc>)
 8001880:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a8a      	ldr	r2, [pc, #552]	; (8001ab0 <interrupt_calGyro+0x2c0>)
 8001888:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 800188a:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <interrupt_calGyro+0x2c4>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189a:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <interrupt_calGyro+0x2c8>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 80018a0:	4b86      	ldr	r3, [pc, #536]	; (8001abc <interrupt_calGyro+0x2cc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe77 	bl	8000598 <__aeabi_f2d>
 80018aa:	4604      	mov	r4, r0
 80018ac:	460d      	mov	r5, r1
 80018ae:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <interrupt_calGyro+0x2bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe70 	bl	8000598 <__aeabi_f2d>
 80018b8:	a36d      	add	r3, pc, #436	; (adr r3, 8001a70 <interrupt_calGyro+0x280>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fec3 	bl	8000648 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7fe fd07 	bl	80002dc <__adddf3>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f98f 	bl	8000bf8 <__aeabi_d2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a77      	ldr	r2, [pc, #476]	; (8001abc <interrupt_calGyro+0x2cc>)
 80018de:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 80018e0:	4b77      	ldr	r3, [pc, #476]	; (8001ac0 <interrupt_calGyro+0x2d0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe57 	bl	8000598 <__aeabi_f2d>
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
 80018ee:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 80018f0:	ed93 7a00 	vldr	s14, [r3]
 80018f4:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <interrupt_calGyro+0x2c4>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fe:	ee17 0a90 	vmov	r0, s15
 8001902:	f7fe fe49 	bl	8000598 <__aeabi_f2d>
 8001906:	a35a      	add	r3, pc, #360	; (adr r3, 8001a70 <interrupt_calGyro+0x280>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7fe fe9c 	bl	8000648 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fce0 	bl	80002dc <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f968 	bl	8000bf8 <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	4a65      	ldr	r2, [pc, #404]	; (8001ac0 <interrupt_calGyro+0x2d0>)
 800192c:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 8001930:	ed93 7a04 	vldr	s14, [r3, #16]
 8001934:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <interrupt_calGyro+0x2d4>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	ee17 0a90 	vmov	r0, s15
 8001942:	f7fe fe29 	bl	8000598 <__aeabi_f2d>
 8001946:	a34c      	add	r3, pc, #304	; (adr r3, 8001a78 <interrupt_calGyro+0x288>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fe7c 	bl	8000648 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	a349      	add	r3, pc, #292	; (adr r3, 8001a80 <interrupt_calGyro+0x290>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	a347      	add	r3, pc, #284	; (adr r3, 8001a88 <interrupt_calGyro+0x298>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe ff94 	bl	800089c <__aeabi_ddiv>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <interrupt_calGyro+0x2d8>)
 8001982:	f7fe fe61 	bl	8000648 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	a340      	add	r3, pc, #256	; (adr r3, 8001a90 <interrupt_calGyro+0x2a0>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe ff82 	bl	800089c <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b49      	ldr	r3, [pc, #292]	; (8001acc <interrupt_calGyro+0x2dc>)
 80019a6:	f7fe fe4f 	bl	8000648 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	a339      	add	r3, pc, #228	; (adr r3, 8001a98 <interrupt_calGyro+0x2a8>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fe46 	bl	8000648 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f918 	bl	8000bf8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <interrupt_calGyro+0x2e0>)
 80019cc:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 80019ce:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <interrupt_calGyro+0x2e4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fde0 	bl	8000598 <__aeabi_f2d>
 80019d8:	4604      	mov	r4, r0
 80019da:	460d      	mov	r5, r1
 80019dc:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <interrupt_calGyro+0x2e0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdd9 	bl	8000598 <__aeabi_f2d>
 80019e6:	a322      	add	r3, pc, #136	; (adr r3, 8001a70 <interrupt_calGyro+0x280>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe2c 	bl	8000648 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe fc70 	bl	80002dc <__adddf3>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8f8 	bl	8000bf8 <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a32      	ldr	r2, [pc, #200]	; (8001ad4 <interrupt_calGyro+0x2e4>)
 8001a0c:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <interrupt_calGyro+0x2e8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdc0 	bl	8000598 <__aeabi_f2d>
 8001a18:	4604      	mov	r4, r0
 8001a1a:	460d      	mov	r5, r1
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <interrupt_calGyro+0x2e4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fdb9 	bl	8000598 <__aeabi_f2d>
 8001a26:	a312      	add	r3, pc, #72	; (adr r3, 8001a70 <interrupt_calGyro+0x280>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fe0c 	bl	8000648 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fc50 	bl	80002dc <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f8d8 	bl	8000bf8 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <interrupt_calGyro+0x2e8>)
 8001a4c:	6013      	str	r3, [r2, #0]




}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bdb0      	pop	{r4, r5, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	70a3d70a 	.word	0x70a3d70a
 8001a5c:	3fef0a3d 	.word	0x3fef0a3d
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40acd400 	.word	0x40acd400
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40ac2000 	.word	0x40ac2000
 8001a70:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a74:	3f50624d 	.word	0x3f50624d
 8001a78:	0fcf80dc 	.word	0x0fcf80dc
 8001a7c:	3ff0a423 	.word	0x3ff0a423
 8001a80:	00000000 	.word	0x00000000
 8001a84:	4078c000 	.word	0x4078c000
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	4077d000 	.word	0x4077d000
 8001a90:	00000000 	.word	0x00000000
 8001a94:	407a7000 	.word	0x407a7000
 8001a98:	3a92a305 	.word	0x3a92a305
 8001a9c:	40239d01 	.word	0x40239d01
 8001aa0:	20000290 	.word	0x20000290
 8001aa4:	200006e4 	.word	0x200006e4
 8001aa8:	20000288 	.word	0x20000288
 8001aac:	20000268 	.word	0x20000268
 8001ab0:	20000270 	.word	0x20000270
 8001ab4:	20000284 	.word	0x20000284
 8001ab8:	20000274 	.word	0x20000274
 8001abc:	20000264 	.word	0x20000264
 8001ac0:	2000026c 	.word	0x2000026c
 8001ac4:	2000028c 	.word	0x2000028c
 8001ac8:	40790000 	.word	0x40790000
 8001acc:	408f4000 	.word	0x408f4000
 8001ad0:	20000280 	.word	0x20000280
 8001ad4:	20000278 	.word	0x20000278
 8001ad8:	2000027c 	.word	0x2000027c
 8001adc:	00000000 	.word	0x00000000

08001ae0 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	e00f      	b.n	8001b0c <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001aec:	f006 f870 	bl	8007bd0 <pl_getbatt>
 8001af0:	eef0 7a40 	vmov.f32	s15, s0
 8001af4:	4a34      	ldr	r2, [pc, #208]	; (8001bc8 <battcheak+0xe8>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001b00:	200a      	movs	r0, #10
 8001b02:	f006 fa7d 	bl	8008000 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b13      	cmp	r3, #19
 8001b10:	ddec      	ble.n	8001aec <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <battcheak+0xec>)
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e010      	b.n	8001b42 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001b20:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <battcheak+0xe8>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	ed93 7a00 	vldr	s14, [r3]
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <battcheak+0xec>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <battcheak+0xec>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b13      	cmp	r3, #19
 8001b46:	ddeb      	ble.n	8001b20 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <battcheak+0xec>)
 8001b4a:	ed93 7a00 	vldr	s14, [r3]
 8001b4e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <battcheak+0xec>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <battcheak+0xec>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fd19 	bl	8000598 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <battcheak+0xf0>)
 8001b6c:	f01d ffcc 	bl	801fb08 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <battcheak+0xec>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd0f 	bl	8000598 <__aeabi_f2d>
 8001b7a:	a311      	add	r3, pc, #68	; (adr r3, 8001bc0 <battcheak+0xe0>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe ffde 	bl	8000b40 <__aeabi_dcmple>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d100      	bne.n	8001b8c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001b8a:	e014      	b.n	8001bb6 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f005 faa7 	bl	80070e0 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f005 fab6 	bl	8007104 <pl_l_blue_LED>
		wait_ms(500);
 8001b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9c:	f006 fa30 	bl	8008000 <wait_ms>
		pl_r_blue_LED(OFF);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f005 fa9d 	bl	80070e0 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f005 faac 	bl	8007104 <pl_l_blue_LED>
		wait_ms(500);
 8001bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb0:	f006 fa26 	bl	8008000 <wait_ms>
		pl_r_blue_LED(ON);
 8001bb4:	e7ea      	b.n	8001b8c <battcheak+0xac>
}
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	9999999a 	.word	0x9999999a
 8001bc4:	400d9999 	.word	0x400d9999
 8001bc8:	20000484 	.word	0x20000484
 8001bcc:	200004d4 	.word	0x200004d4
 8001bd0:	08022348 	.word	0x08022348

08001bd4 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001bda:	f006 f997 	bl	8007f0c <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001bde:	2313      	movs	r3, #19
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	e037      	b.n	8001c54 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	4a56      	ldr	r2, [pc, #344]	; (8001d44 <interupt_calSensor+0x170>)
 8001bea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bee:	4955      	ldr	r1, [pc, #340]	; (8001d44 <interupt_calSensor+0x170>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <interupt_calSensor+0x170>)
 8001bfc:	3314      	adds	r3, #20
 8001bfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c02:	4950      	ldr	r1, [pc, #320]	; (8001d44 <interupt_calSensor+0x170>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3314      	adds	r3, #20
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <interupt_calSensor+0x170>)
 8001c12:	3328      	adds	r3, #40	; 0x28
 8001c14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c18:	494a      	ldr	r1, [pc, #296]	; (8001d44 <interupt_calSensor+0x170>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3328      	adds	r3, #40	; 0x28
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	4a47      	ldr	r2, [pc, #284]	; (8001d44 <interupt_calSensor+0x170>)
 8001c28:	333c      	adds	r3, #60	; 0x3c
 8001c2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c2e:	4945      	ldr	r1, [pc, #276]	; (8001d44 <interupt_calSensor+0x170>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	333c      	adds	r3, #60	; 0x3c
 8001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	4a41      	ldr	r2, [pc, #260]	; (8001d44 <interupt_calSensor+0x170>)
 8001c3e:	3350      	adds	r3, #80	; 0x50
 8001c40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c44:	493f      	ldr	r1, [pc, #252]	; (8001d44 <interupt_calSensor+0x170>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3350      	adds	r3, #80	; 0x50
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	dcc4      	bgt.n	8001be4 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <interupt_calSensor+0x174>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <interupt_calSensor+0x178>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a37      	ldr	r2, [pc, #220]	; (8001d44 <interupt_calSensor+0x170>)
 8001c68:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001c6a:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <interupt_calSensor+0x174>)
 8001c6c:	885b      	ldrh	r3, [r3, #2]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <interupt_calSensor+0x178>)
 8001c72:	885b      	ldrh	r3, [r3, #2]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	4a33      	ldr	r2, [pc, #204]	; (8001d44 <interupt_calSensor+0x170>)
 8001c78:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001c7a:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <interupt_calSensor+0x174>)
 8001c7c:	889b      	ldrh	r3, [r3, #4]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <interupt_calSensor+0x178>)
 8001c82:	889b      	ldrh	r3, [r3, #4]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <interupt_calSensor+0x170>)
 8001c88:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <interupt_calSensor+0x174>)
 8001c8e:	88db      	ldrh	r3, [r3, #6]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <interupt_calSensor+0x178>)
 8001c94:	88db      	ldrh	r3, [r3, #6]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <interupt_calSensor+0x170>)
 8001c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <interupt_calSensor+0x174>)
 8001ca0:	891b      	ldrh	r3, [r3, #8]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <interupt_calSensor+0x178>)
 8001ca6:	891b      	ldrh	r3, [r3, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <interupt_calSensor+0x170>)
 8001cac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	e03d      	b.n	8001d32 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001cb6:	4923      	ldr	r1, [pc, #140]	; (8001d44 <interupt_calSensor+0x170>)
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	440b      	add	r3, r1
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	481f      	ldr	r0, [pc, #124]	; (8001d44 <interupt_calSensor+0x170>)
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4403      	add	r3, r0
 8001cd4:	332c      	adds	r3, #44	; 0x2c
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	1aca      	subs	r2, r1, r3
 8001cda:	491d      	ldr	r1, [pc, #116]	; (8001d50 <interupt_calSensor+0x17c>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001ce2:	4918      	ldr	r1, [pc, #96]	; (8001d44 <interupt_calSensor+0x170>)
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	4814      	ldr	r0, [pc, #80]	; (8001d44 <interupt_calSensor+0x170>)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4403      	add	r3, r0
 8001d00:	3304      	adds	r3, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4419      	add	r1, r3
 8001d06:	480f      	ldr	r0, [pc, #60]	; (8001d44 <interupt_calSensor+0x170>)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4403      	add	r3, r0
 8001d14:	3308      	adds	r3, #8
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	440b      	add	r3, r1
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <interupt_calSensor+0x180>)
 8001d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d20:	17db      	asrs	r3, r3, #31
 8001d22:	1ad2      	subs	r2, r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <interupt_calSensor+0x184>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	ddbe      	ble.n	8001cb6 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200002b8 	.word	0x200002b8
 8001d48:	2000070c 	.word	0x2000070c
 8001d4c:	20000718 	.word	0x20000718
 8001d50:	20000448 	.word	0x20000448
 8001d54:	55555556 	.word	0x55555556
 8001d58:	20000470 	.word	0x20000470

08001d5c <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <Control_mode_Init+0x28>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <Control_mode_Init+0x2c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <Control_mode_Init+0x30>)
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <Control_mode_Init+0x34>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]

}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20000528 	.word	0x20000528
 8001d88:	20000805 	.word	0x20000805
 8001d8c:	20000800 	.word	0x20000800
 8001d90:	20000529 	.word	0x20000529

08001d94 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001da6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	db14      	blt.n	8001dde <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f005 fe41 	bl	8007a3c <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <get_duty+0x11c>)
 8001dbc:	ed93 7a00 	vldr	s14, [r3]
 8001dc0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001eb4 <get_duty+0x120>
 8001dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd4:	ee17 2a90 	vmov	r2, s15
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e015      	b.n	8001e0a <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001dde:	2002      	movs	r0, #2
 8001de0:	f005 fe2c 	bl	8007a3c <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de8:	eef1 6a67 	vneg.f32	s13, s15
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <get_duty+0x11c>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001eb4 <get_duty+0x120>
 8001dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e02:	ee17 2a90 	vmov	r2, s15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	db14      	blt.n	8001e42 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f005 fe37 	bl	8007a8c <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <get_duty+0x11c>)
 8001e20:	ed93 7a00 	vldr	s14, [r3]
 8001e24:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001eb4 <get_duty+0x120>
 8001e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e38:	ee17 2a90 	vmov	r2, s15
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e015      	b.n	8001e6e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001e42:	2002      	movs	r0, #2
 8001e44:	f005 fe22 	bl	8007a8c <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4c:	eef1 6a67 	vneg.f32	s13, s15
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <get_duty+0x11c>)
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e5a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001eb4 <get_duty+0x120>
 8001e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e66:	ee17 2a90 	vmov	r2, s15
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f240 628c 	movw	r2, #1676	; 0x68c
 8001e86:	4293      	cmp	r3, r2
 8001e88:	dd03      	ble.n	8001e92 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f240 628d 	movw	r2, #1677	; 0x68d
 8001e90:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f240 628c 	movw	r2, #1676	; 0x68c
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	dd03      	ble.n	8001ea6 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ea4:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200004d4 	.word	0x200004d4
 8001eb4:	44d1e000 	.word	0x44d1e000

08001eb8 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8001eb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ebc:	b08c      	sub	sp, #48	; 0x30
 8001ebe:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8001ee6:	4bd2      	ldr	r3, [pc, #840]	; (8002230 <interupt_DriveMotor+0x378>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8001eee:	4bd1      	ldr	r3, [pc, #836]	; (8002234 <interupt_DriveMotor+0x37c>)
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8001ef4:	4bd0      	ldr	r3, [pc, #832]	; (8002238 <interupt_DriveMotor+0x380>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8001efa:	4bd0      	ldr	r3, [pc, #832]	; (800223c <interupt_DriveMotor+0x384>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8001f00:	4bcb      	ldr	r3, [pc, #812]	; (8002230 <interupt_DriveMotor+0x378>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f040 828f 	bne.w	8002428 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8001f0a:	4bcc      	ldr	r3, [pc, #816]	; (800223c <interupt_DriveMotor+0x384>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8001f10:	4bcb      	ldr	r3, [pc, #812]	; (8002240 <interupt_DriveMotor+0x388>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4aca      	ldr	r2, [pc, #808]	; (8002240 <interupt_DriveMotor+0x388>)
 8001f18:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001f1a:	4bca      	ldr	r3, [pc, #808]	; (8002244 <interupt_DriveMotor+0x38c>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb3a 	bl	8000598 <__aeabi_f2d>
 8001f24:	4604      	mov	r4, r0
 8001f26:	460d      	mov	r5, r1
 8001f28:	4bc6      	ldr	r3, [pc, #792]	; (8002244 <interupt_DriveMotor+0x38c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fb33 	bl	8000598 <__aeabi_f2d>
 8001f32:	a3bb      	add	r3, pc, #748	; (adr r3, 8002220 <interupt_DriveMotor+0x368>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb86 	bl	8000648 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4690      	mov	r8, r2
 8001f42:	4699      	mov	r9, r3
 8001f44:	4bbf      	ldr	r3, [pc, #764]	; (8002244 <interupt_DriveMotor+0x38c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fb25 	bl	8000598 <__aeabi_f2d>
 8001f4e:	a3b4      	add	r3, pc, #720	; (adr r3, 8002220 <interupt_DriveMotor+0x368>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe fb78 	bl	8000648 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	a3af      	add	r3, pc, #700	; (adr r3, 8002220 <interupt_DriveMotor+0x368>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fb6f 	bl	8000648 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f7a:	f7fe fc8f 	bl	800089c <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4640      	mov	r0, r8
 8001f84:	4649      	mov	r1, r9
 8001f86:	f7fe f9a9 	bl	80002dc <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe f9a3 	bl	80002dc <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fe2b 	bl	8000bf8 <__aeabi_d2f>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4aa7      	ldr	r2, [pc, #668]	; (8002244 <interupt_DriveMotor+0x38c>)
 8001fa6:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8001fa8:	4ba6      	ldr	r3, [pc, #664]	; (8002244 <interupt_DriveMotor+0x38c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe faf3 	bl	8000598 <__aeabi_f2d>
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	460d      	mov	r5, r1
 8001fb6:	4ba3      	ldr	r3, [pc, #652]	; (8002244 <interupt_DriveMotor+0x38c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe faec 	bl	8000598 <__aeabi_f2d>
 8001fc0:	a397      	add	r3, pc, #604	; (adr r3, 8002220 <interupt_DriveMotor+0x368>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fb3f 	bl	8000648 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f7fe f983 	bl	80002dc <__adddf3>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7fe fe0b 	bl	8000bf8 <__aeabi_d2f>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a97      	ldr	r2, [pc, #604]	; (8002244 <interupt_DriveMotor+0x38c>)
 8001fe6:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001fe8:	4b97      	ldr	r3, [pc, #604]	; (8002248 <interupt_DriveMotor+0x390>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fad3 	bl	8000598 <__aeabi_f2d>
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	460d      	mov	r5, r1
 8001ff6:	4b94      	ldr	r3, [pc, #592]	; (8002248 <interupt_DriveMotor+0x390>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe facc 	bl	8000598 <__aeabi_f2d>
 8002000:	a387      	add	r3, pc, #540	; (adr r3, 8002220 <interupt_DriveMotor+0x368>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fb1f 	bl	8000648 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4690      	mov	r8, r2
 8002010:	4699      	mov	r9, r3
 8002012:	4b8d      	ldr	r3, [pc, #564]	; (8002248 <interupt_DriveMotor+0x390>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fabe 	bl	8000598 <__aeabi_f2d>
 800201c:	a380      	add	r3, pc, #512	; (adr r3, 8002220 <interupt_DriveMotor+0x368>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fb11 	bl	8000648 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	a37c      	add	r3, pc, #496	; (adr r3, 8002220 <interupt_DriveMotor+0x368>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe fb08 	bl	8000648 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002048:	f7fe fc28 	bl	800089c <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4640      	mov	r0, r8
 8002052:	4649      	mov	r1, r9
 8002054:	f7fe f942 	bl	80002dc <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4620      	mov	r0, r4
 800205e:	4629      	mov	r1, r5
 8002060:	f7fe f93c 	bl	80002dc <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fdc4 	bl	8000bf8 <__aeabi_d2f>
 8002070:	4603      	mov	r3, r0
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <interupt_DriveMotor+0x390>)
 8002074:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002076:	4b74      	ldr	r3, [pc, #464]	; (8002248 <interupt_DriveMotor+0x390>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fa8c 	bl	8000598 <__aeabi_f2d>
 8002080:	4604      	mov	r4, r0
 8002082:	460d      	mov	r5, r1
 8002084:	4b70      	ldr	r3, [pc, #448]	; (8002248 <interupt_DriveMotor+0x390>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa85 	bl	8000598 <__aeabi_f2d>
 800208e:	a364      	add	r3, pc, #400	; (adr r3, 8002220 <interupt_DriveMotor+0x368>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fad8 	bl	8000648 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe f91c 	bl	80002dc <__adddf3>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fda4 	bl	8000bf8 <__aeabi_d2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4a65      	ldr	r2, [pc, #404]	; (8002248 <interupt_DriveMotor+0x390>)
 80020b4:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 80020b6:	4b65      	ldr	r3, [pc, #404]	; (800224c <interupt_DriveMotor+0x394>)
 80020b8:	4a62      	ldr	r2, [pc, #392]	; (8002244 <interupt_DriveMotor+0x38c>)
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	9200      	str	r2, [sp, #0]
 80020c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c2:	f006 f99b 	bl	80083fc <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80020c6:	4b5f      	ldr	r3, [pc, #380]	; (8002244 <interupt_DriveMotor+0x38c>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <interupt_DriveMotor+0x390>)
 80020ce:	ed93 7a00 	vldr	s14, [r3]
 80020d2:	f107 020c 	add.w	r2, r7, #12
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	eef0 0a47 	vmov.f32	s1, s14
 80020de:	eeb0 0a67 	vmov.f32	s0, s15
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fb59 	bl	800479c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80020ea:	4b59      	ldr	r3, [pc, #356]	; (8002250 <interupt_DriveMotor+0x398>)
 80020ec:	ed93 7a00 	vldr	s14, [r3]
 80020f0:	4b58      	ldr	r3, [pc, #352]	; (8002254 <interupt_DriveMotor+0x39c>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002102:	4b50      	ldr	r3, [pc, #320]	; (8002244 <interupt_DriveMotor+0x38c>)
 8002104:	edd3 7a01 	vldr	s15, [r3, #4]
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <interupt_DriveMotor+0x3a0>)
 800210a:	edd3 6a00 	vldr	s13, [r3]
 800210e:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <interupt_DriveMotor+0x390>)
 8002110:	ed93 6a01 	vldr	s12, [r3, #4]
 8002114:	1d3a      	adds	r2, r7, #4
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	eef0 1a46 	vmov.f32	s3, s12
 800211e:	eeb0 1a66 	vmov.f32	s2, s13
 8002122:	4611      	mov	r1, r2
 8002124:	eef0 0a67 	vmov.f32	s1, s15
 8002128:	eeb0 0a47 	vmov.f32	s0, s14
 800212c:	4618      	mov	r0, r3
 800212e:	f002 f88f 	bl	8004250 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 8002132:	f002 fd29 	bl	8004b88 <calWallConrol>
 8002136:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 800213a:	ed97 7a04 	vldr	s14, [r7, #16]
 800213e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002142:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002146:	edd7 7a07 	vldr	s15, [r7, #28]
 800214a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800214e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002156:	edd7 7a01 	vldr	s15, [r7, #4]
 800215a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002162:	ed97 7a04 	vldr	s14, [r7, #16]
 8002166:	edd7 7a03 	vldr	s15, [r7, #12]
 800216a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002176:	edd7 7a02 	vldr	s15, [r7, #8]
 800217a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002186:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800218a:	ed97 7a04 	vldr	s14, [r7, #16]
 800218e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002196:	ee17 0a90 	vmov	r0, s15
 800219a:	f7fe f9fd 	bl	8000598 <__aeabi_f2d>
 800219e:	4604      	mov	r4, r0
 80021a0:	460d      	mov	r5, r1
 80021a2:	4b2e      	ldr	r3, [pc, #184]	; (800225c <interupt_DriveMotor+0x3a4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9f6 	bl	8000598 <__aeabi_f2d>
 80021ac:	a31e      	add	r3, pc, #120	; (adr r3, 8002228 <interupt_DriveMotor+0x370>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe fa49 	bl	8000648 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4620      	mov	r0, r4
 80021bc:	4629      	mov	r1, r5
 80021be:	f7fe fcd3 	bl	8000b68 <__aeabi_dcmpgt>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 808d 	beq.w	80022e4 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80021ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021cc:	f7fe f9e4 	bl	8000598 <__aeabi_f2d>
 80021d0:	4604      	mov	r4, r0
 80021d2:	460d      	mov	r5, r1
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <interupt_DriveMotor+0x3a4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f9dd 	bl	8000598 <__aeabi_f2d>
 80021de:	a312      	add	r3, pc, #72	; (adr r3, 8002228 <interupt_DriveMotor+0x370>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe fa30 	bl	8000648 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4690      	mov	r8, r2
 80021ee:	4699      	mov	r9, r3
 80021f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80021f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f9ca 	bl	8000598 <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4640      	mov	r0, r8
 800220a:	4649      	mov	r1, r9
 800220c:	f7fe f864 	bl	80002d8 <__aeabi_dsub>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	e022      	b.n	8002260 <interupt_DriveMotor+0x3a8>
 800221a:	bf00      	nop
 800221c:	f3af 8000 	nop.w
 8002220:	d2f1a9fc 	.word	0xd2f1a9fc
 8002224:	3f50624d 	.word	0x3f50624d
 8002228:	d916872b 	.word	0xd916872b
 800222c:	3feff7ce 	.word	0x3feff7ce
 8002230:	20000528 	.word	0x20000528
 8002234:	20000804 	.word	0x20000804
 8002238:	20000590 	.word	0x20000590
 800223c:	20000592 	.word	0x20000592
 8002240:	20000524 	.word	0x20000524
 8002244:	200004d8 	.word	0x200004d8
 8002248:	200004e4 	.word	0x200004e4
 800224c:	200004f0 	.word	0x200004f0
 8002250:	20000238 	.word	0x20000238
 8002254:	2000023c 	.word	0x2000023c
 8002258:	20000268 	.word	0x20000268
 800225c:	200004d4 	.word	0x200004d4
 8002260:	f7fe f83c 	bl	80002dc <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fcc4 	bl	8000bf8 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002274:	6a38      	ldr	r0, [r7, #32]
 8002276:	f7fe f98f 	bl	8000598 <__aeabi_f2d>
 800227a:	4604      	mov	r4, r0
 800227c:	460d      	mov	r5, r1
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <interupt_DriveMotor+0x428>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f988 	bl	8000598 <__aeabi_f2d>
 8002288:	a313      	add	r3, pc, #76	; (adr r3, 80022d8 <interupt_DriveMotor+0x420>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fe f9db 	bl	8000648 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4690      	mov	r8, r2
 8002298:	4699      	mov	r9, r3
 800229a:	ed97 7a04 	vldr	s14, [r7, #16]
 800229e:	edd7 7a02 	vldr	s15, [r7, #8]
 80022a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a6:	ee17 0a90 	vmov	r0, s15
 80022aa:	f7fe f975 	bl	8000598 <__aeabi_f2d>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4640      	mov	r0, r8
 80022b4:	4649      	mov	r1, r9
 80022b6:	f7fe f80f 	bl	80002d8 <__aeabi_dsub>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4620      	mov	r0, r4
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7fe f80b 	bl	80002dc <__adddf3>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f7fe fc93 	bl	8000bf8 <__aeabi_d2f>
 80022d2:	4603      	mov	r3, r0
 80022d4:	623b      	str	r3, [r7, #32]
 80022d6:	e095      	b.n	8002404 <interupt_DriveMotor+0x54c>
 80022d8:	d916872b 	.word	0xd916872b
 80022dc:	3feff7ce 	.word	0x3feff7ce
 80022e0:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80022e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80022e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	ee17 0a90 	vmov	r0, s15
 80022f4:	f7fe f950 	bl	8000598 <__aeabi_f2d>
 80022f8:	4604      	mov	r4, r0
 80022fa:	460d      	mov	r5, r1
 80022fc:	4bce      	ldr	r3, [pc, #824]	; (8002638 <interupt_DriveMotor+0x780>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	eef1 7a67 	vneg.f32	s15, s15
 8002306:	ee17 3a90 	vmov	r3, s15
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f944 	bl	8000598 <__aeabi_f2d>
 8002310:	a3c5      	add	r3, pc, #788	; (adr r3, 8002628 <interupt_DriveMotor+0x770>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe f997 	bl	8000648 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4620      	mov	r0, r4
 8002320:	4629      	mov	r1, r5
 8002322:	f7fe fc03 	bl	8000b2c <__aeabi_dcmplt>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d06b      	beq.n	8002404 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800232c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800232e:	f7fe f933 	bl	8000598 <__aeabi_f2d>
 8002332:	4604      	mov	r4, r0
 8002334:	460d      	mov	r5, r1
 8002336:	4bc0      	ldr	r3, [pc, #768]	; (8002638 <interupt_DriveMotor+0x780>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	eef1 7a67 	vneg.f32	s15, s15
 8002340:	ee17 3a90 	vmov	r3, s15
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f927 	bl	8000598 <__aeabi_f2d>
 800234a:	a3b7      	add	r3, pc, #732	; (adr r3, 8002628 <interupt_DriveMotor+0x770>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe f97a 	bl	8000648 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4690      	mov	r8, r2
 800235a:	4699      	mov	r9, r3
 800235c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002360:	edd7 7a02 	vldr	s15, [r7, #8]
 8002364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002368:	ee17 0a90 	vmov	r0, s15
 800236c:	f7fe f914 	bl	8000598 <__aeabi_f2d>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4640      	mov	r0, r8
 8002376:	4649      	mov	r1, r9
 8002378:	f7fd ffae 	bl	80002d8 <__aeabi_dsub>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4620      	mov	r0, r4
 8002382:	4629      	mov	r1, r5
 8002384:	f7fd ffaa 	bl	80002dc <__adddf3>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fc32 	bl	8000bf8 <__aeabi_d2f>
 8002394:	4603      	mov	r3, r0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002398:	6a38      	ldr	r0, [r7, #32]
 800239a:	f7fe f8fd 	bl	8000598 <__aeabi_f2d>
 800239e:	4604      	mov	r4, r0
 80023a0:	460d      	mov	r5, r1
 80023a2:	4ba5      	ldr	r3, [pc, #660]	; (8002638 <interupt_DriveMotor+0x780>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	eef1 7a67 	vneg.f32	s15, s15
 80023ac:	ee17 3a90 	vmov	r3, s15
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8f1 	bl	8000598 <__aeabi_f2d>
 80023b6:	a39c      	add	r3, pc, #624	; (adr r3, 8002628 <interupt_DriveMotor+0x770>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fe f944 	bl	8000648 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4690      	mov	r8, r2
 80023c6:	4699      	mov	r9, r3
 80023c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80023cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d4:	ee17 0a90 	vmov	r0, s15
 80023d8:	f7fe f8de 	bl	8000598 <__aeabi_f2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4640      	mov	r0, r8
 80023e2:	4649      	mov	r1, r9
 80023e4:	f7fd ff78 	bl	80002d8 <__aeabi_dsub>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4620      	mov	r0, r4
 80023ee:	4629      	mov	r1, r5
 80023f0:	f7fd ff74 	bl	80002dc <__adddf3>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7fe fbfc 	bl	8000bf8 <__aeabi_d2f>
 8002400:	4603      	mov	r3, r0
 8002402:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002404:	f107 0214 	add.w	r2, r7, #20
 8002408:	f107 0318 	add.w	r3, r7, #24
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	edd7 0a08 	vldr	s1, [r7, #32]
 8002414:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002418:	f7ff fcbc 	bl	8001d94 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f005 fb74 	bl	8007b10 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002428:	4b84      	ldr	r3, [pc, #528]	; (800263c <interupt_DriveMotor+0x784>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d004      	beq.n	800243a <interupt_DriveMotor+0x582>
 8002430:	4b82      	ldr	r3, [pc, #520]	; (800263c <interupt_DriveMotor+0x784>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b04      	cmp	r3, #4
 8002436:	f040 8287 	bne.w	8002948 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 800243a:	4b81      	ldr	r3, [pc, #516]	; (8002640 <interupt_DriveMotor+0x788>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002440:	4b80      	ldr	r3, [pc, #512]	; (8002644 <interupt_DriveMotor+0x78c>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002446:	4b80      	ldr	r3, [pc, #512]	; (8002648 <interupt_DriveMotor+0x790>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a7e      	ldr	r2, [pc, #504]	; (8002648 <interupt_DriveMotor+0x790>)
 800244e:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002450:	4b7e      	ldr	r3, [pc, #504]	; (800264c <interupt_DriveMotor+0x794>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f89f 	bl	8000598 <__aeabi_f2d>
 800245a:	4604      	mov	r4, r0
 800245c:	460d      	mov	r5, r1
 800245e:	4b7b      	ldr	r3, [pc, #492]	; (800264c <interupt_DriveMotor+0x794>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f898 	bl	8000598 <__aeabi_f2d>
 8002468:	a371      	add	r3, pc, #452	; (adr r3, 8002630 <interupt_DriveMotor+0x778>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fe f8eb 	bl	8000648 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4690      	mov	r8, r2
 8002478:	4699      	mov	r9, r3
 800247a:	4b74      	ldr	r3, [pc, #464]	; (800264c <interupt_DriveMotor+0x794>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f88a 	bl	8000598 <__aeabi_f2d>
 8002484:	a36a      	add	r3, pc, #424	; (adr r3, 8002630 <interupt_DriveMotor+0x778>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	f7fe f8dd 	bl	8000648 <__aeabi_dmul>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4610      	mov	r0, r2
 8002494:	4619      	mov	r1, r3
 8002496:	a366      	add	r3, pc, #408	; (adr r3, 8002630 <interupt_DriveMotor+0x778>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe f8d4 	bl	8000648 <__aeabi_dmul>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024b0:	f7fe f9f4 	bl	800089c <__aeabi_ddiv>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4640      	mov	r0, r8
 80024ba:	4649      	mov	r1, r9
 80024bc:	f7fd ff0e 	bl	80002dc <__adddf3>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4620      	mov	r0, r4
 80024c6:	4629      	mov	r1, r5
 80024c8:	f7fd ff08 	bl	80002dc <__adddf3>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7fe fb90 	bl	8000bf8 <__aeabi_d2f>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a5c      	ldr	r2, [pc, #368]	; (800264c <interupt_DriveMotor+0x794>)
 80024dc:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80024de:	4b5b      	ldr	r3, [pc, #364]	; (800264c <interupt_DriveMotor+0x794>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe f858 	bl	8000598 <__aeabi_f2d>
 80024e8:	4604      	mov	r4, r0
 80024ea:	460d      	mov	r5, r1
 80024ec:	4b57      	ldr	r3, [pc, #348]	; (800264c <interupt_DriveMotor+0x794>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f851 	bl	8000598 <__aeabi_f2d>
 80024f6:	a34e      	add	r3, pc, #312	; (adr r3, 8002630 <interupt_DriveMotor+0x778>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	f7fe f8a4 	bl	8000648 <__aeabi_dmul>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4620      	mov	r0, r4
 8002506:	4629      	mov	r1, r5
 8002508:	f7fd fee8 	bl	80002dc <__adddf3>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fe fb70 	bl	8000bf8 <__aeabi_d2f>
 8002518:	4603      	mov	r3, r0
 800251a:	4a4c      	ldr	r2, [pc, #304]	; (800264c <interupt_DriveMotor+0x794>)
 800251c:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800251e:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <interupt_DriveMotor+0x798>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f838 	bl	8000598 <__aeabi_f2d>
 8002528:	4604      	mov	r4, r0
 800252a:	460d      	mov	r5, r1
 800252c:	4b48      	ldr	r3, [pc, #288]	; (8002650 <interupt_DriveMotor+0x798>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f831 	bl	8000598 <__aeabi_f2d>
 8002536:	a33e      	add	r3, pc, #248	; (adr r3, 8002630 <interupt_DriveMotor+0x778>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f884 	bl	8000648 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4690      	mov	r8, r2
 8002546:	4699      	mov	r9, r3
 8002548:	4b41      	ldr	r3, [pc, #260]	; (8002650 <interupt_DriveMotor+0x798>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe f823 	bl	8000598 <__aeabi_f2d>
 8002552:	a337      	add	r3, pc, #220	; (adr r3, 8002630 <interupt_DriveMotor+0x778>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fe f876 	bl	8000648 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	a332      	add	r3, pc, #200	; (adr r3, 8002630 <interupt_DriveMotor+0x778>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fe f86d 	bl	8000648 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800257e:	f7fe f98d 	bl	800089c <__aeabi_ddiv>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4640      	mov	r0, r8
 8002588:	4649      	mov	r1, r9
 800258a:	f7fd fea7 	bl	80002dc <__adddf3>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fd fea1 	bl	80002dc <__adddf3>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe fb29 	bl	8000bf8 <__aeabi_d2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a29      	ldr	r2, [pc, #164]	; (8002650 <interupt_DriveMotor+0x798>)
 80025aa:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80025ac:	4b28      	ldr	r3, [pc, #160]	; (8002650 <interupt_DriveMotor+0x798>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fff1 	bl	8000598 <__aeabi_f2d>
 80025b6:	4604      	mov	r4, r0
 80025b8:	460d      	mov	r5, r1
 80025ba:	4b25      	ldr	r3, [pc, #148]	; (8002650 <interupt_DriveMotor+0x798>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ffea 	bl	8000598 <__aeabi_f2d>
 80025c4:	a31a      	add	r3, pc, #104	; (adr r3, 8002630 <interupt_DriveMotor+0x778>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f83d 	bl	8000648 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fe81 	bl	80002dc <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fb09 	bl	8000bf8 <__aeabi_d2f>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a19      	ldr	r2, [pc, #100]	; (8002650 <interupt_DriveMotor+0x798>)
 80025ea:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <interupt_DriveMotor+0x79c>)
 80025ee:	4a18      	ldr	r2, [pc, #96]	; (8002650 <interupt_DriveMotor+0x798>)
 80025f0:	9201      	str	r2, [sp, #4]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	9200      	str	r2, [sp, #0]
 80025f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f8:	f005 ff00 	bl	80083fc <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <interupt_DriveMotor+0x794>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <interupt_DriveMotor+0x798>)
 8002604:	ed93 7a00 	vldr	s14, [r3]
 8002608:	f107 020c 	add.w	r2, r7, #12
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	eef0 0a47 	vmov.f32	s1, s14
 8002614:	eeb0 0a67 	vmov.f32	s0, s15
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f002 f8be 	bl	800479c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <interupt_DriveMotor+0x7a0>)
 8002622:	ed93 7a00 	vldr	s14, [r3]
 8002626:	e019      	b.n	800265c <interupt_DriveMotor+0x7a4>
 8002628:	d916872b 	.word	0xd916872b
 800262c:	3feff7ce 	.word	0x3feff7ce
 8002630:	d2f1a9fc 	.word	0xd2f1a9fc
 8002634:	3f50624d 	.word	0x3f50624d
 8002638:	200004d4 	.word	0x200004d4
 800263c:	20000528 	.word	0x20000528
 8002640:	20000590 	.word	0x20000590
 8002644:	20000592 	.word	0x20000592
 8002648:	20000524 	.word	0x20000524
 800264c:	200004d8 	.word	0x200004d8
 8002650:	200004e4 	.word	0x200004e4
 8002654:	20000504 	.word	0x20000504
 8002658:	20000238 	.word	0x20000238
 800265c:	4b64      	ldr	r3, [pc, #400]	; (80027f0 <interupt_DriveMotor+0x938>)
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002666:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800266a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800266e:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <interupt_DriveMotor+0x93c>)
 8002670:	edd3 7a01 	vldr	s15, [r3, #4]
 8002674:	4b60      	ldr	r3, [pc, #384]	; (80027f8 <interupt_DriveMotor+0x940>)
 8002676:	edd3 6a00 	vldr	s13, [r3]
 800267a:	4b60      	ldr	r3, [pc, #384]	; (80027fc <interupt_DriveMotor+0x944>)
 800267c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002680:	1d3a      	adds	r2, r7, #4
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	eef0 1a46 	vmov.f32	s3, s12
 800268a:	eeb0 1a66 	vmov.f32	s2, s13
 800268e:	4611      	mov	r1, r2
 8002690:	eef0 0a67 	vmov.f32	s1, s15
 8002694:	eeb0 0a47 	vmov.f32	s0, s14
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fdd9 	bl	8004250 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800269e:	ed97 7a04 	vldr	s14, [r7, #16]
 80026a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80026be:	ed97 7a04 	vldr	s14, [r7, #16]
 80026c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026da:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80026de:	ed97 7a04 	vldr	s14, [r7, #16]
 80026e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	ee17 0a90 	vmov	r0, s15
 80026ee:	f7fd ff53 	bl	8000598 <__aeabi_f2d>
 80026f2:	4604      	mov	r4, r0
 80026f4:	460d      	mov	r5, r1
 80026f6:	4b42      	ldr	r3, [pc, #264]	; (8002800 <interupt_DriveMotor+0x948>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ff4c 	bl	8000598 <__aeabi_f2d>
 8002700:	a339      	add	r3, pc, #228	; (adr r3, 80027e8 <interupt_DriveMotor+0x930>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fd ff9f 	bl	8000648 <__aeabi_dmul>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4620      	mov	r0, r4
 8002710:	4629      	mov	r1, r5
 8002712:	f7fe fa29 	bl	8000b68 <__aeabi_dcmpgt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d073      	beq.n	8002804 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800271c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271e:	f7fd ff3b 	bl	8000598 <__aeabi_f2d>
 8002722:	4604      	mov	r4, r0
 8002724:	460d      	mov	r5, r1
 8002726:	4b36      	ldr	r3, [pc, #216]	; (8002800 <interupt_DriveMotor+0x948>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff34 	bl	8000598 <__aeabi_f2d>
 8002730:	a32d      	add	r3, pc, #180	; (adr r3, 80027e8 <interupt_DriveMotor+0x930>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f7fd ff87 	bl	8000648 <__aeabi_dmul>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4690      	mov	r8, r2
 8002740:	4699      	mov	r9, r3
 8002742:	ed97 7a04 	vldr	s14, [r7, #16]
 8002746:	edd7 7a02 	vldr	s15, [r7, #8]
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	ee17 0a90 	vmov	r0, s15
 8002752:	f7fd ff21 	bl	8000598 <__aeabi_f2d>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4640      	mov	r0, r8
 800275c:	4649      	mov	r1, r9
 800275e:	f7fd fdbb 	bl	80002d8 <__aeabi_dsub>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4620      	mov	r0, r4
 8002768:	4629      	mov	r1, r5
 800276a:	f7fd fdb7 	bl	80002dc <__adddf3>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe fa3f 	bl	8000bf8 <__aeabi_d2f>
 800277a:	4603      	mov	r3, r0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800277e:	6a38      	ldr	r0, [r7, #32]
 8002780:	f7fd ff0a 	bl	8000598 <__aeabi_f2d>
 8002784:	4604      	mov	r4, r0
 8002786:	460d      	mov	r5, r1
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <interupt_DriveMotor+0x948>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd ff03 	bl	8000598 <__aeabi_f2d>
 8002792:	a315      	add	r3, pc, #84	; (adr r3, 80027e8 <interupt_DriveMotor+0x930>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fd ff56 	bl	8000648 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4690      	mov	r8, r2
 80027a2:	4699      	mov	r9, r3
 80027a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80027a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b0:	ee17 0a90 	vmov	r0, s15
 80027b4:	f7fd fef0 	bl	8000598 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4640      	mov	r0, r8
 80027be:	4649      	mov	r1, r9
 80027c0:	f7fd fd8a 	bl	80002d8 <__aeabi_dsub>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4620      	mov	r0, r4
 80027ca:	4629      	mov	r1, r5
 80027cc:	f7fd fd86 	bl	80002dc <__adddf3>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe fa0e 	bl	8000bf8 <__aeabi_d2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	e0a0      	b.n	8002924 <interupt_DriveMotor+0xa6c>
 80027e2:	bf00      	nop
 80027e4:	f3af 8000 	nop.w
 80027e8:	d916872b 	.word	0xd916872b
 80027ec:	3feff7ce 	.word	0x3feff7ce
 80027f0:	2000023c 	.word	0x2000023c
 80027f4:	200004d8 	.word	0x200004d8
 80027f8:	20000268 	.word	0x20000268
 80027fc:	200004e4 	.word	0x200004e4
 8002800:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002804:	ed97 7a04 	vldr	s14, [r7, #16]
 8002808:	edd7 7a02 	vldr	s15, [r7, #8]
 800280c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002810:	ee17 0a90 	vmov	r0, s15
 8002814:	f7fd fec0 	bl	8000598 <__aeabi_f2d>
 8002818:	4604      	mov	r4, r0
 800281a:	460d      	mov	r5, r1
 800281c:	4bd6      	ldr	r3, [pc, #856]	; (8002b78 <interupt_DriveMotor+0xcc0>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	eef1 7a67 	vneg.f32	s15, s15
 8002826:	ee17 3a90 	vmov	r3, s15
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd feb4 	bl	8000598 <__aeabi_f2d>
 8002830:	a3cd      	add	r3, pc, #820	; (adr r3, 8002b68 <interupt_DriveMotor+0xcb0>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fd ff07 	bl	8000648 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4620      	mov	r0, r4
 8002840:	4629      	mov	r1, r5
 8002842:	f7fe f973 	bl	8000b2c <__aeabi_dcmplt>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d06b      	beq.n	8002924 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800284c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800284e:	f7fd fea3 	bl	8000598 <__aeabi_f2d>
 8002852:	4604      	mov	r4, r0
 8002854:	460d      	mov	r5, r1
 8002856:	4bc8      	ldr	r3, [pc, #800]	; (8002b78 <interupt_DriveMotor+0xcc0>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	eef1 7a67 	vneg.f32	s15, s15
 8002860:	ee17 3a90 	vmov	r3, s15
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe97 	bl	8000598 <__aeabi_f2d>
 800286a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002b68 <interupt_DriveMotor+0xcb0>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd feea 	bl	8000648 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4690      	mov	r8, r2
 800287a:	4699      	mov	r9, r3
 800287c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002880:	edd7 7a02 	vldr	s15, [r7, #8]
 8002884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002888:	ee17 0a90 	vmov	r0, s15
 800288c:	f7fd fe84 	bl	8000598 <__aeabi_f2d>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4640      	mov	r0, r8
 8002896:	4649      	mov	r1, r9
 8002898:	f7fd fd1e 	bl	80002d8 <__aeabi_dsub>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7fd fd1a 	bl	80002dc <__adddf3>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f9a2 	bl	8000bf8 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028b8:	6a38      	ldr	r0, [r7, #32]
 80028ba:	f7fd fe6d 	bl	8000598 <__aeabi_f2d>
 80028be:	4604      	mov	r4, r0
 80028c0:	460d      	mov	r5, r1
 80028c2:	4bad      	ldr	r3, [pc, #692]	; (8002b78 <interupt_DriveMotor+0xcc0>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	eef1 7a67 	vneg.f32	s15, s15
 80028cc:	ee17 3a90 	vmov	r3, s15
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe61 	bl	8000598 <__aeabi_f2d>
 80028d6:	a3a4      	add	r3, pc, #656	; (adr r3, 8002b68 <interupt_DriveMotor+0xcb0>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd feb4 	bl	8000648 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4690      	mov	r8, r2
 80028e6:	4699      	mov	r9, r3
 80028e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	ee17 0a90 	vmov	r0, s15
 80028f8:	f7fd fe4e 	bl	8000598 <__aeabi_f2d>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4640      	mov	r0, r8
 8002902:	4649      	mov	r1, r9
 8002904:	f7fd fce8 	bl	80002d8 <__aeabi_dsub>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4620      	mov	r0, r4
 800290e:	4629      	mov	r1, r5
 8002910:	f7fd fce4 	bl	80002dc <__adddf3>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f96c 	bl	8000bf8 <__aeabi_d2f>
 8002920:	4603      	mov	r3, r0
 8002922:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002924:	f107 0214 	add.w	r2, r7, #20
 8002928:	f107 0318 	add.w	r3, r7, #24
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	edd7 0a08 	vldr	s1, [r7, #32]
 8002934:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002938:	f7ff fa2c 	bl	8001d94 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f005 f8e4 	bl	8007b10 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002948:	4b8c      	ldr	r3, [pc, #560]	; (8002b7c <interupt_DriveMotor+0xcc4>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b03      	cmp	r3, #3
 800294e:	f040 8137 	bne.w	8002bc0 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 8002952:	4b8b      	ldr	r3, [pc, #556]	; (8002b80 <interupt_DriveMotor+0xcc8>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002958:	4b8a      	ldr	r3, [pc, #552]	; (8002b84 <interupt_DriveMotor+0xccc>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 800295e:	4b8a      	ldr	r3, [pc, #552]	; (8002b88 <interupt_DriveMotor+0xcd0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	4a88      	ldr	r2, [pc, #544]	; (8002b88 <interupt_DriveMotor+0xcd0>)
 8002966:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002968:	4b88      	ldr	r3, [pc, #544]	; (8002b8c <interupt_DriveMotor+0xcd4>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fe13 	bl	8000598 <__aeabi_f2d>
 8002972:	4604      	mov	r4, r0
 8002974:	460d      	mov	r5, r1
 8002976:	4b85      	ldr	r3, [pc, #532]	; (8002b8c <interupt_DriveMotor+0xcd4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fe0c 	bl	8000598 <__aeabi_f2d>
 8002980:	a37b      	add	r3, pc, #492	; (adr r3, 8002b70 <interupt_DriveMotor+0xcb8>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd fe5f 	bl	8000648 <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4690      	mov	r8, r2
 8002990:	4699      	mov	r9, r3
 8002992:	4b7e      	ldr	r3, [pc, #504]	; (8002b8c <interupt_DriveMotor+0xcd4>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fdfe 	bl	8000598 <__aeabi_f2d>
 800299c:	a374      	add	r3, pc, #464	; (adr r3, 8002b70 <interupt_DriveMotor+0xcb8>)
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	f7fd fe51 	bl	8000648 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	a370      	add	r3, pc, #448	; (adr r3, 8002b70 <interupt_DriveMotor+0xcb8>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fe48 	bl	8000648 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029c8:	f7fd ff68 	bl	800089c <__aeabi_ddiv>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4640      	mov	r0, r8
 80029d2:	4649      	mov	r1, r9
 80029d4:	f7fd fc82 	bl	80002dc <__adddf3>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fc7c 	bl	80002dc <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f904 	bl	8000bf8 <__aeabi_d2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a66      	ldr	r2, [pc, #408]	; (8002b8c <interupt_DriveMotor+0xcd4>)
 80029f4:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80029f6:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <interupt_DriveMotor+0xcd4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fdcc 	bl	8000598 <__aeabi_f2d>
 8002a00:	4604      	mov	r4, r0
 8002a02:	460d      	mov	r5, r1
 8002a04:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <interupt_DriveMotor+0xcd4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fdc5 	bl	8000598 <__aeabi_f2d>
 8002a0e:	a358      	add	r3, pc, #352	; (adr r3, 8002b70 <interupt_DriveMotor+0xcb8>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fe18 	bl	8000648 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fc5c 	bl	80002dc <__adddf3>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7fe f8e4 	bl	8000bf8 <__aeabi_d2f>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <interupt_DriveMotor+0xcd4>)
 8002a34:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a36:	4b56      	ldr	r3, [pc, #344]	; (8002b90 <interupt_DriveMotor+0xcd8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fdac 	bl	8000598 <__aeabi_f2d>
 8002a40:	4604      	mov	r4, r0
 8002a42:	460d      	mov	r5, r1
 8002a44:	4b52      	ldr	r3, [pc, #328]	; (8002b90 <interupt_DriveMotor+0xcd8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fda5 	bl	8000598 <__aeabi_f2d>
 8002a4e:	a348      	add	r3, pc, #288	; (adr r3, 8002b70 <interupt_DriveMotor+0xcb8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fdf8 	bl	8000648 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4690      	mov	r8, r2
 8002a5e:	4699      	mov	r9, r3
 8002a60:	4b4b      	ldr	r3, [pc, #300]	; (8002b90 <interupt_DriveMotor+0xcd8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd97 	bl	8000598 <__aeabi_f2d>
 8002a6a:	a341      	add	r3, pc, #260	; (adr r3, 8002b70 <interupt_DriveMotor+0xcb8>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fdea 	bl	8000648 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	a33c      	add	r3, pc, #240	; (adr r3, 8002b70 <interupt_DriveMotor+0xcb8>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fde1 	bl	8000648 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a96:	f7fd ff01 	bl	800089c <__aeabi_ddiv>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	f7fd fc1b 	bl	80002dc <__adddf3>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4620      	mov	r0, r4
 8002aac:	4629      	mov	r1, r5
 8002aae:	f7fd fc15 	bl	80002dc <__adddf3>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f7fe f89d 	bl	8000bf8 <__aeabi_d2f>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <interupt_DriveMotor+0xcd8>)
 8002ac2:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002ac4:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <interupt_DriveMotor+0xcd8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd65 	bl	8000598 <__aeabi_f2d>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	460d      	mov	r5, r1
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <interupt_DriveMotor+0xcd8>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fd5e 	bl	8000598 <__aeabi_f2d>
 8002adc:	a324      	add	r3, pc, #144	; (adr r3, 8002b70 <interupt_DriveMotor+0xcb8>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fdb1 	bl	8000648 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd fbf5 	bl	80002dc <__adddf3>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fe f87d 	bl	8000bf8 <__aeabi_d2f>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4a23      	ldr	r2, [pc, #140]	; (8002b90 <interupt_DriveMotor+0xcd8>)
 8002b02:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002b04:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <interupt_DriveMotor+0xcd4>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <interupt_DriveMotor+0xcd8>)
 8002b0c:	ed93 7a00 	vldr	s14, [r3]
 8002b10:	f107 020c 	add.w	r2, r7, #12
 8002b14:	f107 0310 	add.w	r3, r7, #16
 8002b18:	eef0 0a47 	vmov.f32	s1, s14
 8002b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 fe3a 	bl	800479c <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002b28:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002b48:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b60:	e018      	b.n	8002b94 <interupt_DriveMotor+0xcdc>
 8002b62:	bf00      	nop
 8002b64:	f3af 8000 	nop.w
 8002b68:	d916872b 	.word	0xd916872b
 8002b6c:	3feff7ce 	.word	0x3feff7ce
 8002b70:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b74:	3f50624d 	.word	0x3f50624d
 8002b78:	200004d4 	.word	0x200004d4
 8002b7c:	20000528 	.word	0x20000528
 8002b80:	20000590 	.word	0x20000590
 8002b84:	20000592 	.word	0x20000592
 8002b88:	20000524 	.word	0x20000524
 8002b8c:	200004d8 	.word	0x200004d8
 8002b90:	200004e4 	.word	0x200004e4
 8002b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b98:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002b9c:	f107 0214 	add.w	r2, r7, #20
 8002ba0:	f107 0318 	add.w	r3, r7, #24
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	edd7 0a08 	vldr	s1, [r7, #32]
 8002bac:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002bb0:	f7ff f8f0 	bl	8001d94 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f004 ffa8 	bl	8007b10 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002bc0:	4bd3      	ldr	r3, [pc, #844]	; (8002f10 <interupt_DriveMotor+0x1058>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d137      	bne.n	8002c38 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002bc8:	4bd2      	ldr	r3, [pc, #840]	; (8002f14 <interupt_DriveMotor+0x105c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002bce:	4bd2      	ldr	r3, [pc, #840]	; (8002f18 <interupt_DriveMotor+0x1060>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002bd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002be0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002bf4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c00:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c10:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c14:	f107 0214 	add.w	r2, r7, #20
 8002c18:	f107 0318 	add.w	r3, r7, #24
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c24:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c28:	f7ff f8b4 	bl	8001d94 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 ff6c 	bl	8007b10 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002c38:	4bb5      	ldr	r3, [pc, #724]	; (8002f10 <interupt_DriveMotor+0x1058>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	f040 8105 	bne.w	8002e4c <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002c42:	4bb4      	ldr	r3, [pc, #720]	; (8002f14 <interupt_DriveMotor+0x105c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002c48:	4bb3      	ldr	r3, [pc, #716]	; (8002f18 <interupt_DriveMotor+0x1060>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002c4e:	4bb3      	ldr	r3, [pc, #716]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fca0 	bl	8000598 <__aeabi_f2d>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	460d      	mov	r5, r1
 8002c5c:	4baf      	ldr	r3, [pc, #700]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fc99 	bl	8000598 <__aeabi_f2d>
 8002c66:	a3a8      	add	r3, pc, #672	; (adr r3, 8002f08 <interupt_DriveMotor+0x1050>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fcec 	bl	8000648 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4690      	mov	r8, r2
 8002c76:	4699      	mov	r9, r3
 8002c78:	4ba8      	ldr	r3, [pc, #672]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc8b 	bl	8000598 <__aeabi_f2d>
 8002c82:	a3a1      	add	r3, pc, #644	; (adr r3, 8002f08 <interupt_DriveMotor+0x1050>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fcde 	bl	8000648 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	a39c      	add	r3, pc, #624	; (adr r3, 8002f08 <interupt_DriveMotor+0x1050>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd fcd5 	bl	8000648 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cae:	f7fd fdf5 	bl	800089c <__aeabi_ddiv>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4640      	mov	r0, r8
 8002cb8:	4649      	mov	r1, r9
 8002cba:	f7fd fb0f 	bl	80002dc <__adddf3>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	f7fd fb09 	bl	80002dc <__adddf3>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd ff91 	bl	8000bf8 <__aeabi_d2f>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a90      	ldr	r2, [pc, #576]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002cda:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fc59 	bl	8000598 <__aeabi_f2d>
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	460d      	mov	r5, r1
 8002cea:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fc52 	bl	8000598 <__aeabi_f2d>
 8002cf4:	a384      	add	r3, pc, #528	; (adr r3, 8002f08 <interupt_DriveMotor+0x1050>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd fca5 	bl	8000648 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4620      	mov	r0, r4
 8002d04:	4629      	mov	r1, r5
 8002d06:	f7fd fae9 	bl	80002dc <__adddf3>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd ff71 	bl	8000bf8 <__aeabi_d2f>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4a80      	ldr	r2, [pc, #512]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002d1a:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002d1c:	4b80      	ldr	r3, [pc, #512]	; (8002f20 <interupt_DriveMotor+0x1068>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc39 	bl	8000598 <__aeabi_f2d>
 8002d26:	4604      	mov	r4, r0
 8002d28:	460d      	mov	r5, r1
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <interupt_DriveMotor+0x1068>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc32 	bl	8000598 <__aeabi_f2d>
 8002d34:	a374      	add	r3, pc, #464	; (adr r3, 8002f08 <interupt_DriveMotor+0x1050>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc85 	bl	8000648 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4620      	mov	r0, r4
 8002d44:	4629      	mov	r1, r5
 8002d46:	f7fd fac9 	bl	80002dc <__adddf3>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7fd ff51 	bl	8000bf8 <__aeabi_d2f>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a71      	ldr	r2, [pc, #452]	; (8002f20 <interupt_DriveMotor+0x1068>)
 8002d5a:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002d5c:	4b71      	ldr	r3, [pc, #452]	; (8002f24 <interupt_DriveMotor+0x106c>)
 8002d5e:	edd3 6a00 	vldr	s13, [r3]
 8002d62:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d6a:	486d      	ldr	r0, [pc, #436]	; (8002f20 <interupt_DriveMotor+0x1068>)
 8002d6c:	eeb0 0a66 	vmov.f32	s0, s13
 8002d70:	eef0 0a47 	vmov.f32	s1, s14
 8002d74:	eeb0 1a67 	vmov.f32	s2, s15
 8002d78:	f005 fe9a 	bl	8008ab0 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002d7c:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <interupt_DriveMotor+0x1068>)
 8002d84:	ed93 7a00 	vldr	s14, [r3]
 8002d88:	f107 020c 	add.w	r2, r7, #12
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	eef0 0a47 	vmov.f32	s1, s14
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 fcfe 	bl	800479c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002da0:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <interupt_DriveMotor+0x1070>)
 8002da2:	ed93 7a00 	vldr	s14, [r3]
 8002da6:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <interupt_DriveMotor+0x1074>)
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002db4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002db8:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002dba:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dbe:	4b5c      	ldr	r3, [pc, #368]	; (8002f30 <interupt_DriveMotor+0x1078>)
 8002dc0:	edd3 6a00 	vldr	s13, [r3]
 8002dc4:	4b56      	ldr	r3, [pc, #344]	; (8002f20 <interupt_DriveMotor+0x1068>)
 8002dc6:	ed93 6a01 	vldr	s12, [r3, #4]
 8002dca:	1d3a      	adds	r2, r7, #4
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	eef0 1a46 	vmov.f32	s3, s12
 8002dd4:	eeb0 1a66 	vmov.f32	s2, s13
 8002dd8:	4611      	mov	r1, r2
 8002dda:	eef0 0a67 	vmov.f32	s1, s15
 8002dde:	eeb0 0a47 	vmov.f32	s0, s14
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 fa34 	bl	8004250 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002de8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e04:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002e08:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e24:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002e28:	f107 0214 	add.w	r2, r7, #20
 8002e2c:	f107 0318 	add.w	r3, r7, #24
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	edd7 0a08 	vldr	s1, [r7, #32]
 8002e38:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e3c:	f7fe ffaa 	bl	8001d94 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 fe62 	bl	8007b10 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002e4c:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <interupt_DriveMotor+0x1058>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b64      	cmp	r3, #100	; 0x64
 8002e52:	d14b      	bne.n	8002eec <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002e54:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <interupt_DriveMotor+0x1068>)
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e64:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <interupt_DriveMotor+0x1064>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <interupt_DriveMotor+0x1068>)
 8002e6c:	ed93 7a00 	vldr	s14, [r3]
 8002e70:	f107 020c 	add.w	r2, r7, #12
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	eef0 0a47 	vmov.f32	s1, s14
 8002e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 fc8a 	bl	800479c <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002e88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ec8:	f107 0214 	add.w	r2, r7, #20
 8002ecc:	f107 0318 	add.w	r3, r7, #24
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ed8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002edc:	f7fe ff5a 	bl	8001d94 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fe12 	bl	8007b10 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8002eec:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <interupt_DriveMotor+0x107c>)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <interupt_DriveMotor+0x1080>)
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	6013      	str	r3, [r2, #0]



}
 8002ef8:	bf00      	nop
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f02:	bf00      	nop
 8002f04:	f3af 8000 	nop.w
 8002f08:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f0c:	3f50624d 	.word	0x3f50624d
 8002f10:	20000528 	.word	0x20000528
 8002f14:	20000590 	.word	0x20000590
 8002f18:	20000592 	.word	0x20000592
 8002f1c:	200004d8 	.word	0x200004d8
 8002f20:	200004e4 	.word	0x200004e4
 8002f24:	20000518 	.word	0x20000518
 8002f28:	20000238 	.word	0x20000238
 8002f2c:	2000023c 	.word	0x2000023c
 8002f30:	20000268 	.word	0x20000268
 8002f34:	2000052c 	.word	0x2000052c
 8002f38:	20000530 	.word	0x20000530

08002f3c <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	ed87 0a05 	vstr	s0, [r7, #20]
 8002f46:	edc7 0a04 	vstr	s1, [r7, #16]
 8002f4a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002f4e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002f52:	ed87 2a01 	vstr	s4, [r7, #4]
 8002f56:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8002f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f5c:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8002f60:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8002f6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f70:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8002f74:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f7c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8002f80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d505      	bpl.n	8002f9a <straight_table2+0x5e>
 8002f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f92:	eef1 7a67 	vneg.f32	s15, s15
 8002f96:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 8002f9a:	4bb4      	ldr	r3, [pc, #720]	; (800326c <straight_table2+0x330>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8002fa6:	4ab2      	ldr	r2, [pc, #712]	; (8003270 <straight_table2+0x334>)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8002fac:	4ab0      	ldr	r2, [pc, #704]	; (8003270 <straight_table2+0x334>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8002fb2:	4aaf      	ldr	r2, [pc, #700]	; (8003270 <straight_table2+0x334>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8002fb8:	4aad      	ldr	r2, [pc, #692]	; (8003270 <straight_table2+0x334>)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8002fbe:	4aac      	ldr	r2, [pc, #688]	; (8003270 <straight_table2+0x334>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8002fc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd0:	db03      	blt.n	8002fda <straight_table2+0x9e>
 8002fd2:	4aa8      	ldr	r2, [pc, #672]	; (8003274 <straight_table2+0x338>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6053      	str	r3, [r2, #4]
 8002fd8:	e006      	b.n	8002fe8 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 8002fda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fde:	eef1 7a67 	vneg.f32	s15, s15
 8002fe2:	4ba4      	ldr	r3, [pc, #656]	; (8003274 <straight_table2+0x338>)
 8002fe4:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8002fe8:	4aa2      	ldr	r2, [pc, #648]	; (8003274 <straight_table2+0x338>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8002fee:	4ba1      	ldr	r3, [pc, #644]	; (8003274 <straight_table2+0x338>)
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8002ff6:	4ba0      	ldr	r3, [pc, #640]	; (8003278 <straight_table2+0x33c>)
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8002ffe:	4b9e      	ldr	r3, [pc, #632]	; (8003278 <straight_table2+0x33c>)
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8003006:	4b9c      	ldr	r3, [pc, #624]	; (8003278 <straight_table2+0x33c>)
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800300e:	4b9b      	ldr	r3, [pc, #620]	; (800327c <straight_table2+0x340>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003014:	4b9a      	ldr	r3, [pc, #616]	; (8003280 <straight_table2+0x344>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800301a:	edd7 7a05 	vldr	s15, [r7, #20]
 800301e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	dd0e      	ble.n	8003046 <straight_table2+0x10a>
 8003028:	ed97 7a07 	vldr	s14, [r7, #28]
 800302c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003038:	dd05      	ble.n	8003046 <straight_table2+0x10a>
 800303a:	4b91      	ldr	r3, [pc, #580]	; (8003280 <straight_table2+0x344>)
 800303c:	2205      	movs	r2, #5
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	4a8c      	ldr	r2, [pc, #560]	; (8003274 <straight_table2+0x338>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003046:	edd7 7a05 	vldr	s15, [r7, #20]
 800304a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003052:	dd14      	ble.n	800307e <straight_table2+0x142>
 8003054:	edd7 7a05 	vldr	s15, [r7, #20]
 8003058:	eef1 7a67 	vneg.f32	s15, s15
 800305c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003068:	d509      	bpl.n	800307e <straight_table2+0x142>
 800306a:	4b85      	ldr	r3, [pc, #532]	; (8003280 <straight_table2+0x344>)
 800306c:	2206      	movs	r2, #6
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	edd7 7a01 	vldr	s15, [r7, #4]
 8003074:	eef1 7a67 	vneg.f32	s15, s15
 8003078:	4b7e      	ldr	r3, [pc, #504]	; (8003274 <straight_table2+0x338>)
 800307a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800307e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308a:	d514      	bpl.n	80030b6 <straight_table2+0x17a>
 800308c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003090:	eef1 7a67 	vneg.f32	s15, s15
 8003094:	ed97 7a07 	vldr	s14, [r7, #28]
 8003098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	dd09      	ble.n	80030b6 <straight_table2+0x17a>
 80030a2:	4b77      	ldr	r3, [pc, #476]	; (8003280 <straight_table2+0x344>)
 80030a4:	2205      	movs	r2, #5
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ac:	eef1 7a67 	vneg.f32	s15, s15
 80030b0:	4b70      	ldr	r3, [pc, #448]	; (8003274 <straight_table2+0x338>)
 80030b2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80030b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	d50e      	bpl.n	80030e2 <straight_table2+0x1a6>
 80030c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80030c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80030cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d4:	d505      	bpl.n	80030e2 <straight_table2+0x1a6>
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <straight_table2+0x344>)
 80030d8:	2206      	movs	r2, #6
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	4a65      	ldr	r2, [pc, #404]	; (8003274 <straight_table2+0x338>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80030e2:	4b68      	ldr	r3, [pc, #416]	; (8003284 <straight_table2+0x348>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 80030e8:	783a      	ldrb	r2, [r7, #0]
 80030ea:	4b67      	ldr	r3, [pc, #412]	; (8003288 <straight_table2+0x34c>)
 80030ec:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80030ee:	f004 fcf3 	bl	8007ad8 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 80d3 	bne.w	80032a0 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80030fa:	4b64      	ldr	r3, [pc, #400]	; (800328c <straight_table2+0x350>)
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003102:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <straight_table2+0x344>)
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003108:	4b5a      	ldr	r3, [pc, #360]	; (8003274 <straight_table2+0x338>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003110:	bf00      	nop
 8003112:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <straight_table2+0x354>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800311c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003124:	d409      	bmi.n	800313a <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003126:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <straight_table2+0x354>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 800312c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003294 <straight_table2+0x358>
 8003130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003138:	dd18      	ble.n	800316c <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 800313a:	4b57      	ldr	r3, [pc, #348]	; (8003298 <straight_table2+0x35c>)
 800313c:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003140:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	d409      	bmi.n	8003162 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 800314e:	4b52      	ldr	r3, [pc, #328]	; (8003298 <straight_table2+0x35c>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003154:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003294 <straight_table2+0x358>
 8003158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	dd04      	ble.n	800316c <straight_table2+0x230>
			  front_wall_break_90==0){}
 8003162:	4b4e      	ldr	r3, [pc, #312]	; (800329c <straight_table2+0x360>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0d2      	beq.n	8003112 <straight_table2+0x1d6>
		straight.displacement=0;
 800316c:	4b41      	ldr	r3, [pc, #260]	; (8003274 <straight_table2+0x338>)
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003174:	edd7 7a02 	vldr	s15, [r7, #8]
 8003178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	db03      	blt.n	800318a <straight_table2+0x24e>
 8003182:	4a3c      	ldr	r2, [pc, #240]	; (8003274 <straight_table2+0x338>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6053      	str	r3, [r2, #4]
 8003188:	e006      	b.n	8003198 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 800318a:	edd7 7a01 	vldr	s15, [r7, #4]
 800318e:	eef1 7a67 	vneg.f32	s15, s15
 8003192:	4b38      	ldr	r3, [pc, #224]	; (8003274 <straight_table2+0x338>)
 8003194:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003198:	4b39      	ldr	r3, [pc, #228]	; (8003280 <straight_table2+0x344>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800319e:	edd7 7a05 	vldr	s15, [r7, #20]
 80031a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	dd0e      	ble.n	80031ca <straight_table2+0x28e>
 80031ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80031b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031bc:	dd05      	ble.n	80031ca <straight_table2+0x28e>
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <straight_table2+0x344>)
 80031c0:	2205      	movs	r2, #5
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <straight_table2+0x338>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80031ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	dd14      	ble.n	8003202 <straight_table2+0x2c6>
 80031d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031dc:	eef1 7a67 	vneg.f32	s15, s15
 80031e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80031e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d509      	bpl.n	8003202 <straight_table2+0x2c6>
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <straight_table2+0x344>)
 80031f0:	2206      	movs	r2, #6
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80031f8:	eef1 7a67 	vneg.f32	s15, s15
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <straight_table2+0x338>)
 80031fe:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003202:	edd7 7a05 	vldr	s15, [r7, #20]
 8003206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800320a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320e:	d514      	bpl.n	800323a <straight_table2+0x2fe>
 8003210:	edd7 7a05 	vldr	s15, [r7, #20]
 8003214:	eef1 7a67 	vneg.f32	s15, s15
 8003218:	ed97 7a07 	vldr	s14, [r7, #28]
 800321c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	dd09      	ble.n	800323a <straight_table2+0x2fe>
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <straight_table2+0x344>)
 8003228:	2205      	movs	r2, #5
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003230:	eef1 7a67 	vneg.f32	s15, s15
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <straight_table2+0x338>)
 8003236:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800323a:	edd7 7a05 	vldr	s15, [r7, #20]
 800323e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	f140 825b 	bpl.w	8003700 <straight_table2+0x7c4>
 800324a:	ed97 7a07 	vldr	s14, [r7, #28]
 800324e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325a:	f140 8251 	bpl.w	8003700 <straight_table2+0x7c4>
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <straight_table2+0x344>)
 8003260:	2206      	movs	r2, #6
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	4a03      	ldr	r2, [pc, #12]	; (8003274 <straight_table2+0x338>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6053      	str	r3, [r2, #4]
 800326a:	e249      	b.n	8003700 <straight_table2+0x7c4>
 800326c:	20000529 	.word	0x20000529
 8003270:	200004f0 	.word	0x200004f0
 8003274:	200004d8 	.word	0x200004d8
 8003278:	200004e4 	.word	0x200004e4
 800327c:	20000805 	.word	0x20000805
 8003280:	20000804 	.word	0x20000804
 8003284:	20000528 	.word	0x20000528
 8003288:	20000590 	.word	0x20000590
 800328c:	20000534 	.word	0x20000534
 8003290:	200005cc 	.word	0x200005cc
 8003294:	425c0000 	.word	0x425c0000
 8003298:	200005d0 	.word	0x200005d0
 800329c:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	f040 80c9 	bne.w	800343a <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80032a8:	4bb8      	ldr	r3, [pc, #736]	; (800358c <straight_table2+0x650>)
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80032b0:	4bb7      	ldr	r3, [pc, #732]	; (8003590 <straight_table2+0x654>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80032b6:	4bb7      	ldr	r3, [pc, #732]	; (8003594 <straight_table2+0x658>)
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80032be:	bf00      	nop
 80032c0:	4bb5      	ldr	r3, [pc, #724]	; (8003598 <straight_table2+0x65c>)
 80032c2:	edd3 7a00 	vldr	s15, [r3]
 80032c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	d913      	bls.n	80032f8 <straight_table2+0x3bc>
 80032d0:	4bb1      	ldr	r3, [pc, #708]	; (8003598 <straight_table2+0x65c>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80032da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	d909      	bls.n	80032f8 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80032e4:	4bac      	ldr	r3, [pc, #688]	; (8003598 <straight_table2+0x65c>)
 80032e6:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80032ea:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800359c <straight_table2+0x660>
 80032ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f6:	db20      	blt.n	800333a <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80032f8:	4ba9      	ldr	r3, [pc, #676]	; (80035a0 <straight_table2+0x664>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80032fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003306:	d913      	bls.n	8003330 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003308:	4ba5      	ldr	r3, [pc, #660]	; (80035a0 <straight_table2+0x664>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	d909      	bls.n	8003330 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800331c:	4ba0      	ldr	r3, [pc, #640]	; (80035a0 <straight_table2+0x664>)
 800331e:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003322:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800359c <straight_table2+0x660>
 8003326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	db04      	blt.n	800333a <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 8003330:	4b9c      	ldr	r3, [pc, #624]	; (80035a4 <straight_table2+0x668>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0c2      	beq.n	80032c0 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 800333a:	4b96      	ldr	r3, [pc, #600]	; (8003594 <straight_table2+0x658>)
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003342:	edd7 7a02 	vldr	s15, [r7, #8]
 8003346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	db03      	blt.n	8003358 <straight_table2+0x41c>
 8003350:	4a90      	ldr	r2, [pc, #576]	; (8003594 <straight_table2+0x658>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6053      	str	r3, [r2, #4]
 8003356:	e006      	b.n	8003366 <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 8003358:	edd7 7a01 	vldr	s15, [r7, #4]
 800335c:	eef1 7a67 	vneg.f32	s15, s15
 8003360:	4b8c      	ldr	r3, [pc, #560]	; (8003594 <straight_table2+0x658>)
 8003362:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003366:	4b8a      	ldr	r3, [pc, #552]	; (8003590 <straight_table2+0x654>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800336c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	dd0e      	ble.n	8003398 <straight_table2+0x45c>
 800337a:	ed97 7a07 	vldr	s14, [r7, #28]
 800337e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	dd05      	ble.n	8003398 <straight_table2+0x45c>
 800338c:	4b80      	ldr	r3, [pc, #512]	; (8003590 <straight_table2+0x654>)
 800338e:	2205      	movs	r2, #5
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	4a80      	ldr	r2, [pc, #512]	; (8003594 <straight_table2+0x658>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003398:	edd7 7a05 	vldr	s15, [r7, #20]
 800339c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a4:	dd14      	ble.n	80033d0 <straight_table2+0x494>
 80033a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80033aa:	eef1 7a67 	vneg.f32	s15, s15
 80033ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80033b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	d509      	bpl.n	80033d0 <straight_table2+0x494>
 80033bc:	4b74      	ldr	r3, [pc, #464]	; (8003590 <straight_table2+0x654>)
 80033be:	2206      	movs	r2, #6
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c6:	eef1 7a67 	vneg.f32	s15, s15
 80033ca:	4b72      	ldr	r3, [pc, #456]	; (8003594 <straight_table2+0x658>)
 80033cc:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80033d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80033d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d514      	bpl.n	8003408 <straight_table2+0x4cc>
 80033de:	edd7 7a05 	vldr	s15, [r7, #20]
 80033e2:	eef1 7a67 	vneg.f32	s15, s15
 80033e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80033ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	dd09      	ble.n	8003408 <straight_table2+0x4cc>
 80033f4:	4b66      	ldr	r3, [pc, #408]	; (8003590 <straight_table2+0x654>)
 80033f6:	2205      	movs	r2, #5
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80033fe:	eef1 7a67 	vneg.f32	s15, s15
 8003402:	4b64      	ldr	r3, [pc, #400]	; (8003594 <straight_table2+0x658>)
 8003404:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003408:	edd7 7a05 	vldr	s15, [r7, #20]
 800340c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003414:	f140 8174 	bpl.w	8003700 <straight_table2+0x7c4>
 8003418:	ed97 7a07 	vldr	s14, [r7, #28]
 800341c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003428:	f140 816a 	bpl.w	8003700 <straight_table2+0x7c4>
 800342c:	4b58      	ldr	r3, [pc, #352]	; (8003590 <straight_table2+0x654>)
 800342e:	2206      	movs	r2, #6
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	4a58      	ldr	r2, [pc, #352]	; (8003594 <straight_table2+0x658>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6053      	str	r3, [r2, #4]
 8003438:	e162      	b.n	8003700 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	2b03      	cmp	r3, #3
 800343e:	f040 80b9 	bne.w	80035b4 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003442:	4b52      	ldr	r3, [pc, #328]	; (800358c <straight_table2+0x650>)
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <straight_table2+0x654>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003450:	4b50      	ldr	r3, [pc, #320]	; (8003594 <straight_table2+0x658>)
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003458:	bf00      	nop
 800345a:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <straight_table2+0x66c>)
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	d409      	bmi.n	8003482 <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800346e:	4b4e      	ldr	r3, [pc, #312]	; (80035a8 <straight_table2+0x66c>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003474:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80035ac <straight_table2+0x670>
 8003478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	dd04      	ble.n	800348c <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 8003482:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <straight_table2+0x674>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0e6      	beq.n	800345a <straight_table2+0x51e>
		straight.displacement=0;
 800348c:	4b41      	ldr	r3, [pc, #260]	; (8003594 <straight_table2+0x658>)
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003494:	edd7 7a02 	vldr	s15, [r7, #8]
 8003498:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a0:	db03      	blt.n	80034aa <straight_table2+0x56e>
 80034a2:	4a3c      	ldr	r2, [pc, #240]	; (8003594 <straight_table2+0x658>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6053      	str	r3, [r2, #4]
 80034a8:	e006      	b.n	80034b8 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 80034aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80034ae:	eef1 7a67 	vneg.f32	s15, s15
 80034b2:	4b38      	ldr	r3, [pc, #224]	; (8003594 <straight_table2+0x658>)
 80034b4:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <straight_table2+0x654>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80034be:	edd7 7a05 	vldr	s15, [r7, #20]
 80034c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	dd0e      	ble.n	80034ea <straight_table2+0x5ae>
 80034cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80034d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80034d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034dc:	dd05      	ble.n	80034ea <straight_table2+0x5ae>
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <straight_table2+0x654>)
 80034e0:	2205      	movs	r2, #5
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <straight_table2+0x658>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80034ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	dd14      	ble.n	8003522 <straight_table2+0x5e6>
 80034f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80034fc:	eef1 7a67 	vneg.f32	s15, s15
 8003500:	ed97 7a07 	vldr	s14, [r7, #28]
 8003504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	d509      	bpl.n	8003522 <straight_table2+0x5e6>
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <straight_table2+0x654>)
 8003510:	2206      	movs	r2, #6
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	edd7 7a01 	vldr	s15, [r7, #4]
 8003518:	eef1 7a67 	vneg.f32	s15, s15
 800351c:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <straight_table2+0x658>)
 800351e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003522:	edd7 7a05 	vldr	s15, [r7, #20]
 8003526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	d514      	bpl.n	800355a <straight_table2+0x61e>
 8003530:	edd7 7a05 	vldr	s15, [r7, #20]
 8003534:	eef1 7a67 	vneg.f32	s15, s15
 8003538:	ed97 7a07 	vldr	s14, [r7, #28]
 800353c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	dd09      	ble.n	800355a <straight_table2+0x61e>
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <straight_table2+0x654>)
 8003548:	2205      	movs	r2, #5
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003550:	eef1 7a67 	vneg.f32	s15, s15
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <straight_table2+0x658>)
 8003556:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800355a:	edd7 7a05 	vldr	s15, [r7, #20]
 800355e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	f140 80cb 	bpl.w	8003700 <straight_table2+0x7c4>
 800356a:	ed97 7a07 	vldr	s14, [r7, #28]
 800356e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357a:	f140 80c1 	bpl.w	8003700 <straight_table2+0x7c4>
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <straight_table2+0x654>)
 8003580:	2206      	movs	r2, #6
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	4a03      	ldr	r2, [pc, #12]	; (8003594 <straight_table2+0x658>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6053      	str	r3, [r2, #4]
 800358a:	e0b9      	b.n	8003700 <straight_table2+0x7c4>
 800358c:	20000534 	.word	0x20000534
 8003590:	20000804 	.word	0x20000804
 8003594:	200004d8 	.word	0x200004d8
 8003598:	200005d4 	.word	0x200005d4
 800359c:	42000000 	.word	0x42000000
 80035a0:	200005d8 	.word	0x200005d8
 80035a4:	200005f3 	.word	0x200005f3
 80035a8:	200005e4 	.word	0x200005e4
 80035ac:	420c0000 	.word	0x420c0000
 80035b0:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	f040 80a2 	bne.w	8003700 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035bc:	4ba6      	ldr	r3, [pc, #664]	; (8003858 <straight_table2+0x91c>)
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80035c4:	4ba5      	ldr	r3, [pc, #660]	; (800385c <straight_table2+0x920>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80035ca:	4ba5      	ldr	r3, [pc, #660]	; (8003860 <straight_table2+0x924>)
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 80035d2:	bf00      	nop
 80035d4:	4ba3      	ldr	r3, [pc, #652]	; (8003864 <straight_table2+0x928>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80035de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e6:	d409      	bmi.n	80035fc <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 80035e8:	4b9e      	ldr	r3, [pc, #632]	; (8003864 <straight_table2+0x928>)
 80035ea:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 80035ee:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003868 <straight_table2+0x92c>
 80035f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	dd04      	ble.n	8003606 <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 80035fc:	4b9b      	ldr	r3, [pc, #620]	; (800386c <straight_table2+0x930>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0e6      	beq.n	80035d4 <straight_table2+0x698>
		straight.displacement=0;
 8003606:	4b96      	ldr	r3, [pc, #600]	; (8003860 <straight_table2+0x924>)
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800360e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	db03      	blt.n	8003624 <straight_table2+0x6e8>
 800361c:	4a90      	ldr	r2, [pc, #576]	; (8003860 <straight_table2+0x924>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6053      	str	r3, [r2, #4]
 8003622:	e006      	b.n	8003632 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 8003624:	edd7 7a01 	vldr	s15, [r7, #4]
 8003628:	eef1 7a67 	vneg.f32	s15, s15
 800362c:	4b8c      	ldr	r3, [pc, #560]	; (8003860 <straight_table2+0x924>)
 800362e:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003632:	4b8a      	ldr	r3, [pc, #552]	; (800385c <straight_table2+0x920>)
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003638:	edd7 7a05 	vldr	s15, [r7, #20]
 800363c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	dd0e      	ble.n	8003664 <straight_table2+0x728>
 8003646:	ed97 7a07 	vldr	s14, [r7, #28]
 800364a:	edd7 7a05 	vldr	s15, [r7, #20]
 800364e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003656:	dd05      	ble.n	8003664 <straight_table2+0x728>
 8003658:	4b80      	ldr	r3, [pc, #512]	; (800385c <straight_table2+0x920>)
 800365a:	2205      	movs	r2, #5
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	4a80      	ldr	r2, [pc, #512]	; (8003860 <straight_table2+0x924>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003664:	edd7 7a05 	vldr	s15, [r7, #20]
 8003668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	dd14      	ble.n	800369c <straight_table2+0x760>
 8003672:	edd7 7a05 	vldr	s15, [r7, #20]
 8003676:	eef1 7a67 	vneg.f32	s15, s15
 800367a:	ed97 7a07 	vldr	s14, [r7, #28]
 800367e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d509      	bpl.n	800369c <straight_table2+0x760>
 8003688:	4b74      	ldr	r3, [pc, #464]	; (800385c <straight_table2+0x920>)
 800368a:	2206      	movs	r2, #6
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003692:	eef1 7a67 	vneg.f32	s15, s15
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <straight_table2+0x924>)
 8003698:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800369c:	edd7 7a05 	vldr	s15, [r7, #20]
 80036a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	d514      	bpl.n	80036d4 <straight_table2+0x798>
 80036aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ae:	eef1 7a67 	vneg.f32	s15, s15
 80036b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	dd09      	ble.n	80036d4 <straight_table2+0x798>
 80036c0:	4b66      	ldr	r3, [pc, #408]	; (800385c <straight_table2+0x920>)
 80036c2:	2205      	movs	r2, #5
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80036ca:	eef1 7a67 	vneg.f32	s15, s15
 80036ce:	4b64      	ldr	r3, [pc, #400]	; (8003860 <straight_table2+0x924>)
 80036d0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80036d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e0:	d50e      	bpl.n	8003700 <straight_table2+0x7c4>
 80036e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	d505      	bpl.n	8003700 <straight_table2+0x7c4>
 80036f4:	4b59      	ldr	r3, [pc, #356]	; (800385c <straight_table2+0x920>)
 80036f6:	2206      	movs	r2, #6
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	4a59      	ldr	r2, [pc, #356]	; (8003860 <straight_table2+0x924>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003700:	78bb      	ldrb	r3, [r7, #2]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 809e 	bne.w	8003844 <straight_table2+0x908>
	while (g_acc_flag!=4){
 8003708:	e074      	b.n	80037f4 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d120      	bne.n	8003752 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003710:	edd7 7a05 	vldr	s15, [r7, #20]
 8003714:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800371c:	4b54      	ldr	r3, [pc, #336]	; (8003870 <straight_table2+0x934>)
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372a:	d90e      	bls.n	800374a <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 800372c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003730:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003738:	4b4e      	ldr	r3, [pc, #312]	; (8003874 <straight_table2+0x938>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 800373e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	d900      	bls.n	800374a <straight_table2+0x80e>
 8003748:	e054      	b.n	80037f4 <straight_table2+0x8b8>
				g_acc_flag=4;
 800374a:	4b44      	ldr	r3, [pc, #272]	; (800385c <straight_table2+0x920>)
 800374c:	2204      	movs	r2, #4
 800374e:	701a      	strb	r2, [r3, #0]
				break;
 8003750:	e055      	b.n	80037fe <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d121      	bne.n	800379c <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003758:	edd7 7a05 	vldr	s15, [r7, #20]
 800375c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003764:	4b44      	ldr	r3, [pc, #272]	; (8003878 <straight_table2+0x93c>)
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003772:	d900      	bls.n	8003776 <straight_table2+0x83a>
 8003774:	e03e      	b.n	80037f4 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003776:	edd7 7a05 	vldr	s15, [r7, #20]
 800377a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800377e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003782:	4b3e      	ldr	r3, [pc, #248]	; (800387c <straight_table2+0x940>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	d900      	bls.n	8003794 <straight_table2+0x858>
 8003792:	e02f      	b.n	80037f4 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003794:	4b31      	ldr	r3, [pc, #196]	; (800385c <straight_table2+0x920>)
 8003796:	2204      	movs	r2, #4
 8003798:	701a      	strb	r2, [r3, #0]
				break;
 800379a:	e030      	b.n	80037fe <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d112      	bne.n	80037c8 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 80037a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80037aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037ae:	4b34      	ldr	r3, [pc, #208]	; (8003880 <straight_table2+0x944>)
 80037b0:	edd3 7a00 	vldr	s15, [r3]
 80037b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	d900      	bls.n	80037c0 <straight_table2+0x884>
 80037be:	e019      	b.n	80037f4 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037c0:	4b26      	ldr	r3, [pc, #152]	; (800385c <straight_table2+0x920>)
 80037c2:	2204      	movs	r2, #4
 80037c4:	701a      	strb	r2, [r3, #0]
				break;
 80037c6:	e01a      	b.n	80037fe <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d112      	bne.n	80037f4 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 80037ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80037d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <straight_table2+0x928>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e8:	d900      	bls.n	80037ec <straight_table2+0x8b0>
 80037ea:	e003      	b.n	80037f4 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <straight_table2+0x920>)
 80037ee:	2204      	movs	r2, #4
 80037f0:	701a      	strb	r2, [r3, #0]
				break;
 80037f2:	e004      	b.n	80037fe <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <straight_table2+0x920>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d185      	bne.n	800370a <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 80037fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003802:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380a:	d105      	bne.n	8003818 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 800380c:	2064      	movs	r0, #100	; 0x64
 800380e:	f004 fc3b 	bl	8008088 <wait_ms_NoReset>
		modeacc = 0;
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <straight_table2+0x948>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003818:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <straight_table2+0x94c>)
 800381a:	ed93 7a00 	vldr	s14, [r3]
 800381e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <straight_table2+0x94c>)
 8003828:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <straight_table2+0x950>)
 800382e:	ed93 7a00 	vldr	s14, [r3]
 8003832:	edd7 7a05 	vldr	s15, [r7, #20]
 8003836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <straight_table2+0x950>)
 800383c:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003840:	f004 f958 	bl	8007af4 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <straight_table2+0x924>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	ee07 3a90 	vmov	s15, r3



}
 800384c:	eeb0 0a67 	vmov.f32	s0, s15
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000534 	.word	0x20000534
 800385c:	20000804 	.word	0x20000804
 8003860:	200004d8 	.word	0x200004d8
 8003864:	200005e8 	.word	0x200005e8
 8003868:	420c0000 	.word	0x420c0000
 800386c:	200005f4 	.word	0x200005f4
 8003870:	200005d0 	.word	0x200005d0
 8003874:	200005cc 	.word	0x200005cc
 8003878:	200005d8 	.word	0x200005d8
 800387c:	200005d4 	.word	0x200005d4
 8003880:	200005e4 	.word	0x200005e4
 8003884:	20000528 	.word	0x20000528
 8003888:	20000220 	.word	0x20000220
 800388c:	20000224 	.word	0x20000224

08003890 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	ed87 0a03 	vstr	s0, [r7, #12]
 800389a:	60b8      	str	r0, [r7, #8]
 800389c:	460b      	mov	r3, r1
 800389e:	71fb      	strb	r3, [r7, #7]
 80038a0:	4613      	mov	r3, r2
 80038a2:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 80038a4:	e02f      	b.n	8003906 <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	f083 0301 	eor.w	r3, r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <End_straight+0x2e>
 80038b2:	79bb      	ldrb	r3, [r7, #6]
 80038b4:	f083 0301 	eor.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d023      	beq.n	8003906 <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d120      	bne.n	8003906 <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038c8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80038cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <End_straight+0xb4>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	d90e      	bls.n	80038fe <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 80038e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80038e4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80038e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ec:	4b16      	ldr	r3, [pc, #88]	; (8003948 <End_straight+0xb8>)
 80038ee:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fa:	d900      	bls.n	80038fe <End_straight+0x6e>
 80038fc:	e003      	b.n	8003906 <End_straight+0x76>
						g_acc_flag=4;
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <End_straight+0xbc>)
 8003900:	2204      	movs	r2, #4
 8003902:	701a      	strb	r2, [r3, #0]
						break;
 8003904:	e004      	b.n	8003910 <End_straight+0x80>
	while (g_acc_flag!=4){
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <End_straight+0xbc>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b04      	cmp	r3, #4
 800390e:	d1ca      	bne.n	80038a6 <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <End_straight+0xc0>)
 8003912:	ed93 7a00 	vldr	s14, [r3]
 8003916:	edd7 7a03 	vldr	s15, [r7, #12]
 800391a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <End_straight+0xc0>)
 8003920:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <End_straight+0xc4>)
 8003926:	ed93 7a00 	vldr	s14, [r3]
 800392a:	edd7 7a03 	vldr	s15, [r7, #12]
 800392e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <End_straight+0xc4>)
 8003934:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003938:	f004 f8dc 	bl	8007af4 <pl_DriveMotor_stop>
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	200005d0 	.word	0x200005d0
 8003948:	200005cc 	.word	0x200005cc
 800394c:	20000804 	.word	0x20000804
 8003950:	20000220 	.word	0x20000220
 8003954:	20000224 	.word	0x20000224

08003958 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003962:	edc7 0a04 	vstr	s1, [r7, #16]
 8003966:	ed87 1a03 	vstr	s2, [r7, #12]
 800396a:	edc7 1a02 	vstr	s3, [r7, #8]
 800396e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003972:	edd7 7a03 	vldr	s15, [r7, #12]
 8003976:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800397a:	edd7 7a04 	vldr	s15, [r7, #16]
 800397e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003982:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003986:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800398a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800398e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003996:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800399a:	edd7 7a01 	vldr	s15, [r7, #4]
 800399e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a6:	d505      	bpl.n	80039b4 <turning_table2+0x5c>
 80039a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ac:	eef1 7a67 	vneg.f32	s15, s15
 80039b0:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 80039b4:	4a69      	ldr	r2, [pc, #420]	; (8003b5c <turning_table2+0x204>)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 80039ba:	4a68      	ldr	r2, [pc, #416]	; (8003b5c <turning_table2+0x204>)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 80039c0:	4a66      	ldr	r2, [pc, #408]	; (8003b5c <turning_table2+0x204>)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 80039c6:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <turning_table2+0x204>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 80039cc:	4a63      	ldr	r2, [pc, #396]	; (8003b5c <turning_table2+0x204>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 80039d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80039d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	db03      	blt.n	80039e8 <turning_table2+0x90>
 80039e0:	4a5f      	ldr	r2, [pc, #380]	; (8003b60 <turning_table2+0x208>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6053      	str	r3, [r2, #4]
 80039e6:	e006      	b.n	80039f6 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 80039e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ec:	eef1 7a67 	vneg.f32	s15, s15
 80039f0:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <turning_table2+0x208>)
 80039f2:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 80039f6:	4a5a      	ldr	r2, [pc, #360]	; (8003b60 <turning_table2+0x208>)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 80039fc:	4b58      	ldr	r3, [pc, #352]	; (8003b60 <turning_table2+0x208>)
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003a04:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <turning_table2+0x20c>)
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003a0c:	4b55      	ldr	r3, [pc, #340]	; (8003b64 <turning_table2+0x20c>)
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003a14:	4b53      	ldr	r3, [pc, #332]	; (8003b64 <turning_table2+0x20c>)
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003a1c:	4b52      	ldr	r3, [pc, #328]	; (8003b68 <turning_table2+0x210>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003a22:	4b52      	ldr	r3, [pc, #328]	; (8003b6c <turning_table2+0x214>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	dd0e      	ble.n	8003a54 <turning_table2+0xfc>
 8003a36:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	dd05      	ble.n	8003a54 <turning_table2+0xfc>
 8003a48:	4b48      	ldr	r3, [pc, #288]	; (8003b6c <turning_table2+0x214>)
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	4a44      	ldr	r2, [pc, #272]	; (8003b60 <turning_table2+0x208>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a60:	dd14      	ble.n	8003a8c <turning_table2+0x134>
 8003a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a66:	eef1 7a67 	vneg.f32	s15, s15
 8003a6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a76:	d509      	bpl.n	8003a8c <turning_table2+0x134>
 8003a78:	4b3c      	ldr	r3, [pc, #240]	; (8003b6c <turning_table2+0x214>)
 8003a7a:	2206      	movs	r2, #6
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a82:	eef1 7a67 	vneg.f32	s15, s15
 8003a86:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <turning_table2+0x208>)
 8003a88:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003a8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	d514      	bpl.n	8003ac4 <turning_table2+0x16c>
 8003a9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a9e:	eef1 7a67 	vneg.f32	s15, s15
 8003aa2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aae:	dd09      	ble.n	8003ac4 <turning_table2+0x16c>
 8003ab0:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <turning_table2+0x214>)
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aba:	eef1 7a67 	vneg.f32	s15, s15
 8003abe:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <turning_table2+0x208>)
 8003ac0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003ac4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad0:	d50e      	bpl.n	8003af0 <turning_table2+0x198>
 8003ad2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ad6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae2:	d505      	bpl.n	8003af0 <turning_table2+0x198>
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <turning_table2+0x214>)
 8003ae6:	2206      	movs	r2, #6
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <turning_table2+0x208>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <turning_table2+0x218>)
 8003af2:	2202      	movs	r2, #2
 8003af4:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003af6:	f003 ffef 	bl	8007ad8 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003afa:	bf00      	nop
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <turning_table2+0x214>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d1fa      	bne.n	8003afc <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b12:	d106      	bne.n	8003b22 <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003b14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b18:	f004 fab6 	bl	8008088 <wait_ms_NoReset>
		modeacc = 0;
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <turning_table2+0x218>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <turning_table2+0x21c>)
 8003b24:	ed93 7a00 	vldr	s14, [r3]
 8003b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <turning_table2+0x21c>)
 8003b32:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003b36:	f003 ffdd 	bl	8007af4 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <turning_table2+0x220>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a0f      	ldr	r2, [pc, #60]	; (8003b7c <turning_table2+0x224>)
 8003b40:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <turning_table2+0x228>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <turning_table2+0x22c>)
 8003b48:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <turning_table2+0x208>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	ee07 3a90 	vmov	s15, r3
}
 8003b52:	eeb0 0a67 	vmov.f32	s0, s15
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000504 	.word	0x20000504
 8003b60:	200004e4 	.word	0x200004e4
 8003b64:	200004d8 	.word	0x200004d8
 8003b68:	20000805 	.word	0x20000805
 8003b6c:	20000804 	.word	0x20000804
 8003b70:	20000528 	.word	0x20000528
 8003b74:	20000264 	.word	0x20000264
 8003b78:	20000228 	.word	0x20000228
 8003b7c:	20000258 	.word	0x20000258
 8003b80:	2000022c 	.word	0x2000022c
 8003b84:	2000025c 	.word	0x2000025c

08003b88 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003b92:	edc7 0a04 	vstr	s1, [r7, #16]
 8003b96:	ed87 1a03 	vstr	s2, [r7, #12]
 8003b9a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003b9e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003ba2:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003ba6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003baa:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003bae:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bb2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003bba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003bbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003bc2:	ed97 7a00 	vldr	s14, [r7]
 8003bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bca:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003bce:	edd7 7a00 	vldr	s15, [r7]
 8003bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	d505      	bpl.n	8003be8 <slalom_table2+0x60>
 8003bdc:	edd7 7a00 	vldr	s15, [r7]
 8003be0:	eef1 7a67 	vneg.f32	s15, s15
 8003be4:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003be8:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <slalom_table2+0x1dc>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003bee:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <slalom_table2+0x1dc>)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003bf4:	4a5b      	ldr	r2, [pc, #364]	; (8003d64 <slalom_table2+0x1dc>)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003bfa:	4a5a      	ldr	r2, [pc, #360]	; (8003d64 <slalom_table2+0x1dc>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003c00:	4a58      	ldr	r2, [pc, #352]	; (8003d64 <slalom_table2+0x1dc>)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003c06:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c12:	db03      	blt.n	8003c1c <slalom_table2+0x94>
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <slalom_table2+0x1e0>)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6053      	str	r3, [r2, #4]
 8003c1a:	e006      	b.n	8003c2a <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003c1c:	edd7 7a00 	vldr	s15, [r7]
 8003c20:	eef1 7a67 	vneg.f32	s15, s15
 8003c24:	4b50      	ldr	r3, [pc, #320]	; (8003d68 <slalom_table2+0x1e0>)
 8003c26:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003c2a:	4a4f      	ldr	r2, [pc, #316]	; (8003d68 <slalom_table2+0x1e0>)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003c30:	4b4d      	ldr	r3, [pc, #308]	; (8003d68 <slalom_table2+0x1e0>)
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003c38:	4a4c      	ldr	r2, [pc, #304]	; (8003d6c <slalom_table2+0x1e4>)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003c3e:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <slalom_table2+0x1e4>)
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003c46:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <slalom_table2+0x1e4>)
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003c4e:	4b48      	ldr	r3, [pc, #288]	; (8003d70 <slalom_table2+0x1e8>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003c54:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <slalom_table2+0x1ec>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c66:	dd0e      	ble.n	8003c86 <slalom_table2+0xfe>
 8003c68:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	dd05      	ble.n	8003c86 <slalom_table2+0xfe>
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <slalom_table2+0x1ec>)
 8003c7c:	2205      	movs	r2, #5
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	4a39      	ldr	r2, [pc, #228]	; (8003d68 <slalom_table2+0x1e0>)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003c86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c92:	dd14      	ble.n	8003cbe <slalom_table2+0x136>
 8003c94:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c98:	eef1 7a67 	vneg.f32	s15, s15
 8003c9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca8:	d509      	bpl.n	8003cbe <slalom_table2+0x136>
 8003caa:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <slalom_table2+0x1ec>)
 8003cac:	2206      	movs	r2, #6
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	edd7 7a00 	vldr	s15, [r7]
 8003cb4:	eef1 7a67 	vneg.f32	s15, s15
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <slalom_table2+0x1e0>)
 8003cba:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cca:	d514      	bpl.n	8003cf6 <slalom_table2+0x16e>
 8003ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cd0:	eef1 7a67 	vneg.f32	s15, s15
 8003cd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce0:	dd09      	ble.n	8003cf6 <slalom_table2+0x16e>
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <slalom_table2+0x1ec>)
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	edd7 7a00 	vldr	s15, [r7]
 8003cec:	eef1 7a67 	vneg.f32	s15, s15
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <slalom_table2+0x1e0>)
 8003cf2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003cf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d50e      	bpl.n	8003d22 <slalom_table2+0x19a>
 8003d04:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d08:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d14:	d505      	bpl.n	8003d22 <slalom_table2+0x19a>
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <slalom_table2+0x1ec>)
 8003d18:	2206      	movs	r2, #6
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <slalom_table2+0x1e0>)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <slalom_table2+0x1f0>)
 8003d24:	2204      	movs	r2, #4
 8003d26:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003d28:	f003 fed6 	bl	8007ad8 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003d2c:	bf00      	nop
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <slalom_table2+0x1ec>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d1fa      	bne.n	8003d2e <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003d38:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <slalom_table2+0x1f4>)
 8003d3a:	ed93 7a00 	vldr	s14, [r3]
 8003d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <slalom_table2+0x1f4>)
 8003d48:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003d4c:	f003 fed2 	bl	8007af4 <pl_DriveMotor_stop>

	return turning.velocity;
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <slalom_table2+0x1e0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	ee07 3a90 	vmov	s15, r3
}
 8003d58:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000504 	.word	0x20000504
 8003d68:	200004e4 	.word	0x200004e4
 8003d6c:	200004d8 	.word	0x200004d8
 8003d70:	20000805 	.word	0x20000805
 8003d74:	20000804 	.word	0x20000804
 8003d78:	20000528 	.word	0x20000528
 8003d7c:	20000264 	.word	0x20000264

08003d80 <no_angle>:

void no_angle(void){
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003d84:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <no_angle+0x88>)
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <no_angle+0x88>)
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <no_angle+0x88>)
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <no_angle+0x8c>)
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003da4:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <no_angle+0x8c>)
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <no_angle+0x8c>)
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003db4:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <no_angle+0x90>)
 8003db6:	2203      	movs	r2, #3
 8003db8:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003dba:	f003 fe8d 	bl	8007ad8 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003dbe:	e002      	b.n	8003dc6 <no_angle+0x46>
		HAL_Delay(1);
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f013 ff4f 	bl	8017c64 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <no_angle+0x94>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003dce:	ddf7      	ble.n	8003dc0 <no_angle+0x40>
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <no_angle+0x94>)
 8003dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dd6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003dda:	ddf1      	ble.n	8003dc0 <no_angle+0x40>
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <no_angle+0x94>)
 8003dde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003de2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003de6:	ddeb      	ble.n	8003dc0 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <no_angle+0x90>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003dee:	f003 fe81 	bl	8007af4 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <no_angle+0x98>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <no_angle+0x9c>)
 8003df8:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <no_angle+0xa0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <no_angle+0xa4>)
 8003e00:	6013      	str	r3, [r2, #0]

}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	200004e4 	.word	0x200004e4
 8003e0c:	200004d8 	.word	0x200004d8
 8003e10:	20000528 	.word	0x20000528
 8003e14:	200002b8 	.word	0x200002b8
 8003e18:	20000228 	.word	0x20000228
 8003e1c:	20000258 	.word	0x20000258
 8003e20:	2000022c 	.word	0x2000022c
 8003e24:	2000025c 	.word	0x2000025c

08003e28 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003e28:	b5b0      	push	{r4, r5, r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e32:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e36:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <mollifier_slalom_table+0x108>)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003e40:	4a3b      	ldr	r2, [pc, #236]	; (8003f30 <mollifier_slalom_table+0x108>)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003e46:	4a3a      	ldr	r2, [pc, #232]	; (8003f30 <mollifier_slalom_table+0x108>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <mollifier_slalom_table+0x10c>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e54:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <mollifier_slalom_table+0x10c>)
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003e5c:	4a36      	ldr	r2, [pc, #216]	; (8003f38 <mollifier_slalom_table+0x110>)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003e62:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <mollifier_slalom_table+0x110>)
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e6a:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <mollifier_slalom_table+0x110>)
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003e72:	4b32      	ldr	r3, [pc, #200]	; (8003f3c <mollifier_slalom_table+0x114>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003e78:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <mollifier_slalom_table+0x118>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003e7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e82:	eef0 7ae7 	vabs.f32	s15, s15
 8003e86:	ee17 0a90 	vmov	r0, s15
 8003e8a:	f7fc fb85 	bl	8000598 <__aeabi_f2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4614      	mov	r4, r2
 8003e94:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003e98:	a321      	add	r3, pc, #132	; (adr r3, 8003f20 <mollifier_slalom_table+0xf8>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	f7fc fcfb 	bl	800089c <__aeabi_ddiv>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	a31e      	add	r3, pc, #120	; (adr r3, 8003f28 <mollifier_slalom_table+0x100>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc fbc8 	bl	8000648 <__aeabi_dmul>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	461d      	mov	r5, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fc fb69 	bl	8000598 <__aeabi_f2d>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4620      	mov	r0, r4
 8003ecc:	4629      	mov	r1, r5
 8003ece:	f7fc fce5 	bl	800089c <__aeabi_ddiv>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f7fc fe8d 	bl	8000bf8 <__aeabi_d2f>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <mollifier_slalom_table+0x11c>)
 8003ee2:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <mollifier_slalom_table+0x120>)
 8003ee6:	2206      	movs	r2, #6
 8003ee8:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003eea:	f003 fdf5 	bl	8007ad8 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003eee:	bf00      	nop
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <mollifier_slalom_table+0x118>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d1fa      	bne.n	8003ef0 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <mollifier_slalom_table+0x124>)
 8003efc:	ed93 7a00 	vldr	s14, [r3]
 8003f00:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <mollifier_slalom_table+0x124>)
 8003f0a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003f0e:	f003 fdf1 	bl	8007af4 <pl_DriveMotor_stop>

}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bdb0      	pop	{r4, r5, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	f3af 8000 	nop.w
 8003f20:	f9db22d1 	.word	0xf9db22d1
 8003f24:	3fdc6a7e 	.word	0x3fdc6a7e
 8003f28:	362cef38 	.word	0x362cef38
 8003f2c:	3fd78b56 	.word	0x3fd78b56
 8003f30:	20000518 	.word	0x20000518
 8003f34:	200004e4 	.word	0x200004e4
 8003f38:	200004d8 	.word	0x200004d8
 8003f3c:	20000805 	.word	0x20000805
 8003f40:	20000804 	.word	0x20000804
 8003f44:	20000800 	.word	0x20000800
 8003f48:	20000528 	.word	0x20000528
 8003f4c:	20000264 	.word	0x20000264

08003f50 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <no_frontwall_straight+0x70>)
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <no_frontwall_straight+0x70>)
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <no_frontwall_straight+0x70>)
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <no_frontwall_straight+0x74>)
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <no_frontwall_straight+0x74>)
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <no_frontwall_straight+0x74>)
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8003f84:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <no_frontwall_straight+0x78>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <no_frontwall_straight+0x7c>)
 8003f8c:	2205      	movs	r2, #5
 8003f8e:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f90:	f003 fda2 	bl	8007ad8 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8003f94:	2096      	movs	r0, #150	; 0x96
 8003f96:	f004 f877 	bl	8008088 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <no_frontwall_straight+0x78>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <no_frontwall_straight+0x7c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003fa6:	f003 fda5 	bl	8007af4 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <no_frontwall_straight+0x80>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <no_frontwall_straight+0x84>)
 8003fb0:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <no_frontwall_straight+0x88>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <no_frontwall_straight+0x8c>)
 8003fb8:	6013      	str	r3, [r2, #0]

}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200004e4 	.word	0x200004e4
 8003fc4:	200004d8 	.word	0x200004d8
 8003fc8:	20000591 	.word	0x20000591
 8003fcc:	20000528 	.word	0x20000528
 8003fd0:	20000228 	.word	0x20000228
 8003fd4:	20000258 	.word	0x20000258
 8003fd8:	2000022c 	.word	0x2000022c
 8003fdc:	2000025c 	.word	0x2000025c

08003fe0 <straight_table_ff>:




float straight_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003fea:	edc7 0a04 	vstr	s1, [r7, #16]
 8003fee:	ed87 1a03 	vstr	s2, [r7, #12]
 8003ff2:	edc7 1a02 	vstr	s3, [r7, #8]
 8003ff6:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003ffa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ffe:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8004002:	edd7 7a04 	vldr	s15, [r7, #16]
 8004006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800400a:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800400e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004012:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8004016:	ed97 7a01 	vldr	s14, [r7, #4]
 800401a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401e:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8004022:	edd7 7a01 	vldr	s15, [r7, #4]
 8004026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800402a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402e:	d505      	bpl.n	800403c <straight_table_ff+0x5c>
 8004030:	edd7 7a01 	vldr	s15, [r7, #4]
 8004034:	eef1 7a67 	vneg.f32	s15, s15
 8004038:	edc7 7a01 	vstr	s15, [r7, #4]
	Ksp = 0;//3//P項の制御量直進*****************************************************
 800403c:	4b76      	ldr	r3, [pc, #472]	; (8004218 <straight_table_ff+0x238>)
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
	Ksi = 0;//5//43//I項の制御量直進*****************************************************
 8004044:	4b75      	ldr	r3, [pc, #468]	; (800421c <straight_table_ff+0x23c>)
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
	Ksd = 0;//D項の制御量直進*****************************************************
 800404c:	4b74      	ldr	r3, [pc, #464]	; (8004220 <straight_table_ff+0x240>)
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
	Ktp = 0;//295//P項の制御量旋回*****************************************************
 8004054:	4b73      	ldr	r3, [pc, #460]	; (8004224 <straight_table_ff+0x244>)
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
	Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 800405c:	4b72      	ldr	r3, [pc, #456]	; (8004228 <straight_table_ff+0x248>)
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
	Ktd = 0;
 8004064:	4b71      	ldr	r3, [pc, #452]	; (800422c <straight_table_ff+0x24c>)
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	601a      	str	r2, [r3, #0]


	Trapezoid_straight.displacement = input_displacement;
 800406c:	4a70      	ldr	r2, [pc, #448]	; (8004230 <straight_table_ff+0x250>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8004072:	4a6f      	ldr	r2, [pc, #444]	; (8004230 <straight_table_ff+0x250>)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8004078:	4a6d      	ldr	r2, [pc, #436]	; (8004230 <straight_table_ff+0x250>)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 800407e:	4a6c      	ldr	r2, [pc, #432]	; (8004230 <straight_table_ff+0x250>)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8004084:	4a6a      	ldr	r2, [pc, #424]	; (8004230 <straight_table_ff+0x250>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800408a:	edd7 7a02 	vldr	s15, [r7, #8]
 800408e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004096:	db03      	blt.n	80040a0 <straight_table_ff+0xc0>
 8004098:	4a66      	ldr	r2, [pc, #408]	; (8004234 <straight_table_ff+0x254>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6053      	str	r3, [r2, #4]
 800409e:	e006      	b.n	80040ae <straight_table_ff+0xce>
	}else{straight.acceleration = -input_acceleration;}
 80040a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80040a4:	eef1 7a67 	vneg.f32	s15, s15
 80040a8:	4b62      	ldr	r3, [pc, #392]	; (8004234 <straight_table_ff+0x254>)
 80040aa:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 80040ae:	4a61      	ldr	r2, [pc, #388]	; (8004234 <straight_table_ff+0x254>)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 80040b4:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <straight_table_ff+0x254>)
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80040bc:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <straight_table_ff+0x258>)
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 80040c4:	4b5c      	ldr	r3, [pc, #368]	; (8004238 <straight_table_ff+0x258>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80040cc:	4b5a      	ldr	r3, [pc, #360]	; (8004238 <straight_table_ff+0x258>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <straight_table_ff+0x25c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80040da:	4b59      	ldr	r3, [pc, #356]	; (8004240 <straight_table_ff+0x260>)
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80040e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80040e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ec:	dd0e      	ble.n	800410c <straight_table_ff+0x12c>
 80040ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80040f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80040f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fe:	dd05      	ble.n	800410c <straight_table_ff+0x12c>
 8004100:	4b4f      	ldr	r3, [pc, #316]	; (8004240 <straight_table_ff+0x260>)
 8004102:	2205      	movs	r2, #5
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	4a4b      	ldr	r2, [pc, #300]	; (8004234 <straight_table_ff+0x254>)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800410c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004110:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004118:	dd14      	ble.n	8004144 <straight_table_ff+0x164>
 800411a:	edd7 7a05 	vldr	s15, [r7, #20]
 800411e:	eef1 7a67 	vneg.f32	s15, s15
 8004122:	ed97 7a07 	vldr	s14, [r7, #28]
 8004126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412e:	d509      	bpl.n	8004144 <straight_table_ff+0x164>
 8004130:	4b43      	ldr	r3, [pc, #268]	; (8004240 <straight_table_ff+0x260>)
 8004132:	2206      	movs	r2, #6
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	edd7 7a01 	vldr	s15, [r7, #4]
 800413a:	eef1 7a67 	vneg.f32	s15, s15
 800413e:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <straight_table_ff+0x254>)
 8004140:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004144:	edd7 7a05 	vldr	s15, [r7, #20]
 8004148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004150:	d514      	bpl.n	800417c <straight_table_ff+0x19c>
 8004152:	edd7 7a05 	vldr	s15, [r7, #20]
 8004156:	eef1 7a67 	vneg.f32	s15, s15
 800415a:	ed97 7a07 	vldr	s14, [r7, #28]
 800415e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004166:	dd09      	ble.n	800417c <straight_table_ff+0x19c>
 8004168:	4b35      	ldr	r3, [pc, #212]	; (8004240 <straight_table_ff+0x260>)
 800416a:	2205      	movs	r2, #5
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004172:	eef1 7a67 	vneg.f32	s15, s15
 8004176:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <straight_table_ff+0x254>)
 8004178:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800417c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004188:	d50e      	bpl.n	80041a8 <straight_table_ff+0x1c8>
 800418a:	ed97 7a07 	vldr	s14, [r7, #28]
 800418e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419a:	d505      	bpl.n	80041a8 <straight_table_ff+0x1c8>
 800419c:	4b28      	ldr	r3, [pc, #160]	; (8004240 <straight_table_ff+0x260>)
 800419e:	2206      	movs	r2, #6
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	4a24      	ldr	r2, [pc, #144]	; (8004234 <straight_table_ff+0x254>)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80041a8:	4b26      	ldr	r3, [pc, #152]	; (8004244 <straight_table_ff+0x264>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80041ae:	f003 fc93 	bl	8007ad8 <pl_DriveMotor_start>


	while (g_acc_flag!=4){
 80041b2:	bf00      	nop
 80041b4:	4b22      	ldr	r3, [pc, #136]	; (8004240 <straight_table_ff+0x260>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d1fa      	bne.n	80041b4 <straight_table_ff+0x1d4>


	}
	if(input_end_velocity==0){//BREAK
 80041be:	edd7 7a03 	vldr	s15, [r7, #12]
 80041c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ca:	d105      	bne.n	80041d8 <straight_table_ff+0x1f8>
		wait_ms_NoReset(100);
 80041cc:	2064      	movs	r0, #100	; 0x64
 80041ce:	f003 ff5b 	bl	8008088 <wait_ms_NoReset>
		modeacc = 0;
 80041d2:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <straight_table_ff+0x264>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <straight_table_ff+0x268>)
 80041da:	ed93 7a00 	vldr	s14, [r3]
 80041de:	edd7 7a05 	vldr	s15, [r7, #20]
 80041e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e6:	4b18      	ldr	r3, [pc, #96]	; (8004248 <straight_table_ff+0x268>)
 80041e8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <straight_table_ff+0x26c>)
 80041ee:	ed93 7a00 	vldr	s14, [r3]
 80041f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80041f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <straight_table_ff+0x26c>)
 80041fc:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004200:	f003 fc78 	bl	8007af4 <pl_DriveMotor_stop>



	return straight.velocity;
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <straight_table_ff+0x254>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	ee07 3a90 	vmov	s15, r3



}
 800420c:	eeb0 0a67 	vmov.f32	s0, s15
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000554 	.word	0x20000554
 800421c:	20000558 	.word	0x20000558
 8004220:	2000055c 	.word	0x2000055c
 8004224:	20000560 	.word	0x20000560
 8004228:	20000564 	.word	0x20000564
 800422c:	20000568 	.word	0x20000568
 8004230:	200004f0 	.word	0x200004f0
 8004234:	200004d8 	.word	0x200004d8
 8004238:	200004e4 	.word	0x200004e4
 800423c:	20000805 	.word	0x20000805
 8004240:	20000804 	.word	0x20000804
 8004244:	20000528 	.word	0x20000528
 8004248:	20000220 	.word	0x20000220
 800424c:	20000224 	.word	0x20000224

08004250 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004250:	b5b0      	push	{r4, r5, r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6178      	str	r0, [r7, #20]
 8004258:	ed87 0a04 	vstr	s0, [r7, #16]
 800425c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	ed87 1a01 	vstr	s2, [r7, #4]
 8004266:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 800426a:	edd7 7a04 	vldr	s15, [r7, #16]
 800426e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004276:	db7c      	blt.n	8004372 <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7fc f98d 	bl	8000598 <__aeabi_f2d>
 800427e:	a3c8      	add	r3, pc, #800	; (adr r3, 80045a0 <feedforward_const_accel+0x350>)
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f7fc f9e0 	bl	8000648 <__aeabi_dmul>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	4bc6      	ldr	r3, [pc, #792]	; (80045b0 <feedforward_const_accel+0x360>)
 8004296:	f7fc fb01 	bl	800089c <__aeabi_ddiv>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80042a2:	a3b5      	add	r3, pc, #724	; (adr r3, 8004578 <feedforward_const_accel+0x328>)
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f7fc faf8 	bl	800089c <__aeabi_ddiv>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042bc:	f7fc faee 	bl	800089c <__aeabi_ddiv>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	a3ad      	add	r3, pc, #692	; (adr r3, 8004580 <feedforward_const_accel+0x330>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fc f805 	bl	80002dc <__adddf3>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	a3ab      	add	r3, pc, #684	; (adr r3, 8004588 <feedforward_const_accel+0x338>)
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f7fc f9b2 	bl	8000648 <__aeabi_dmul>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	a3a8      	add	r3, pc, #672	; (adr r3, 8004590 <feedforward_const_accel+0x340>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f7fc fad3 	bl	800089c <__aeabi_ddiv>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4614      	mov	r4, r2
 80042fc:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80042fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8004302:	eddf 6aac 	vldr	s13, [pc, #688]	; 80045b4 <feedforward_const_accel+0x364>
 8004306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800430a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80045b8 <feedforward_const_accel+0x368>
 800430e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004312:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004316:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800431a:	ee16 0a90 	vmov	r0, s13
 800431e:	f7fc f93b 	bl	8000598 <__aeabi_f2d>
 8004322:	a39d      	add	r3, pc, #628	; (adr r3, 8004598 <feedforward_const_accel+0x348>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f7fc f98e 	bl	8000648 <__aeabi_dmul>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	a390      	add	r3, pc, #576	; (adr r3, 8004578 <feedforward_const_accel+0x328>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fc faaf 	bl	800089c <__aeabi_ddiv>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4610      	mov	r0, r2
 8004344:	4619      	mov	r1, r3
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800434e:	f7fc faa5 	bl	800089c <__aeabi_ddiv>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4620      	mov	r0, r4
 8004358:	4629      	mov	r1, r5
 800435a:	f7fb ffbf 	bl	80002dc <__adddf3>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	f7fc fc47 	bl	8000bf8 <__aeabi_d2f>
 800436a:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e07b      	b.n	800446a <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7fc f910 	bl	8000598 <__aeabi_f2d>
 8004378:	a389      	add	r3, pc, #548	; (adr r3, 80045a0 <feedforward_const_accel+0x350>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f7fc f963 	bl	8000648 <__aeabi_dmul>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <feedforward_const_accel+0x360>)
 8004390:	f7fc fa84 	bl	800089c <__aeabi_ddiv>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800439c:	a376      	add	r3, pc, #472	; (adr r3, 8004578 <feedforward_const_accel+0x328>)
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f7fc fa7b 	bl	800089c <__aeabi_ddiv>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b6:	f7fc fa71 	bl	800089c <__aeabi_ddiv>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	a36f      	add	r3, pc, #444	; (adr r3, 8004580 <feedforward_const_accel+0x330>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fb ff86 	bl	80002d8 <__aeabi_dsub>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	a36c      	add	r3, pc, #432	; (adr r3, 8004588 <feedforward_const_accel+0x338>)
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f7fc f935 	bl	8000648 <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	a36a      	add	r3, pc, #424	; (adr r3, 8004590 <feedforward_const_accel+0x340>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fc fa56 	bl	800089c <__aeabi_ddiv>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4614      	mov	r4, r2
 80043f6:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80043f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80043fc:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80045b4 <feedforward_const_accel+0x364>
 8004400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004404:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80045b8 <feedforward_const_accel+0x368>
 8004408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800440c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004410:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004414:	ee16 0a90 	vmov	r0, s13
 8004418:	f7fc f8be 	bl	8000598 <__aeabi_f2d>
 800441c:	a35e      	add	r3, pc, #376	; (adr r3, 8004598 <feedforward_const_accel+0x348>)
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f7fc f911 	bl	8000648 <__aeabi_dmul>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	a352      	add	r3, pc, #328	; (adr r3, 8004578 <feedforward_const_accel+0x328>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f7fc fa32 	bl	800089c <__aeabi_ddiv>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004448:	f7fc fa28 	bl	800089c <__aeabi_ddiv>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4620      	mov	r0, r4
 8004452:	4629      	mov	r1, r5
 8004454:	f7fb ff42 	bl	80002dc <__adddf3>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	f7fc fbca 	bl	8000bf8 <__aeabi_d2f>
 8004464:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 800446a:	edd7 7a01 	vldr	s15, [r7, #4]
 800446e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004476:	f2c0 80a1 	blt.w	80045bc <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800447a:	6838      	ldr	r0, [r7, #0]
 800447c:	f7fc f88c 	bl	8000598 <__aeabi_f2d>
 8004480:	a349      	add	r3, pc, #292	; (adr r3, 80045a8 <feedforward_const_accel+0x358>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fc f8df 	bl	8000648 <__aeabi_dmul>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <feedforward_const_accel+0x360>)
 8004498:	f7fc fa00 	bl	800089c <__aeabi_ddiv>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80044a4:	a334      	add	r3, pc, #208	; (adr r3, 8004578 <feedforward_const_accel+0x328>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f7fc f9f7 	bl	800089c <__aeabi_ddiv>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044be:	f7fc f9ed 	bl	800089c <__aeabi_ddiv>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	a32d      	add	r3, pc, #180	; (adr r3, 8004580 <feedforward_const_accel+0x330>)
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f7fb ff04 	bl	80002dc <__adddf3>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	a32a      	add	r3, pc, #168	; (adr r3, 8004588 <feedforward_const_accel+0x338>)
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f7fc f8b1 	bl	8000648 <__aeabi_dmul>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	a328      	add	r3, pc, #160	; (adr r3, 8004590 <feedforward_const_accel+0x340>)
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f7fc f9d2 	bl	800089c <__aeabi_ddiv>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004500:	ed97 7a01 	vldr	s14, [r7, #4]
 8004504:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80045b4 <feedforward_const_accel+0x364>
 8004508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800450c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80045b8 <feedforward_const_accel+0x368>
 8004510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004514:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004518:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800451c:	ee16 0a90 	vmov	r0, s13
 8004520:	f7fc f83a 	bl	8000598 <__aeabi_f2d>
 8004524:	a31c      	add	r3, pc, #112	; (adr r3, 8004598 <feedforward_const_accel+0x348>)
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f7fc f88d 	bl	8000648 <__aeabi_dmul>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	a310      	add	r3, pc, #64	; (adr r3, 8004578 <feedforward_const_accel+0x328>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fc f9ae 	bl	800089c <__aeabi_ddiv>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004550:	f7fc f9a4 	bl	800089c <__aeabi_ddiv>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fb febe 	bl	80002dc <__adddf3>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	f7fc fb46 	bl	8000bf8 <__aeabi_d2f>
 800456c:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 8004572:	e09f      	b.n	80046b4 <feedforward_const_accel+0x464>
 8004574:	f3af 8000 	nop.w
 8004578:	99e4ac6e 	.word	0x99e4ac6e
 800457c:	3f9a9a29 	.word	0x3f9a9a29
 8004580:	eb1c432d 	.word	0xeb1c432d
 8004584:	3f1a36e2 	.word	0x3f1a36e2
 8004588:	51eb851f 	.word	0x51eb851f
 800458c:	3ff11eb8 	.word	0x3ff11eb8
 8004590:	b7952d23 	.word	0xb7952d23
 8004594:	3f569c23 	.word	0x3f569c23
 8004598:	761b0f50 	.word	0x761b0f50
 800459c:	3f66bf29 	.word	0x3f66bf29
 80045a0:	7df8b79b 	.word	0x7df8b79b
 80045a4:	3ed5fdfc 	.word	0x3ed5fdfc
 80045a8:	1db94e6b 	.word	0x1db94e6b
 80045ac:	3eb5cf75 	.word	0x3eb5cf75
 80045b0:	408f4000 	.word	0x408f4000
 80045b4:	447a0000 	.word	0x447a0000
 80045b8:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80045bc:	6838      	ldr	r0, [r7, #0]
 80045be:	f7fb ffeb 	bl	8000598 <__aeabi_f2d>
 80045c2:	a34c      	add	r3, pc, #304	; (adr r3, 80046f4 <feedforward_const_accel+0x4a4>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f7fc f83e 	bl	8000648 <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <feedforward_const_accel+0x498>)
 80045da:	f7fc f95f 	bl	800089c <__aeabi_ddiv>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80045e6:	a336      	add	r3, pc, #216	; (adr r3, 80046c0 <feedforward_const_accel+0x470>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fc f956 	bl	800089c <__aeabi_ddiv>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004600:	f7fc f94c 	bl	800089c <__aeabi_ddiv>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	a32e      	add	r3, pc, #184	; (adr r3, 80046c8 <feedforward_const_accel+0x478>)
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f7fb fe61 	bl	80002d8 <__aeabi_dsub>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	a32c      	add	r3, pc, #176	; (adr r3, 80046d0 <feedforward_const_accel+0x480>)
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f7fc f810 	bl	8000648 <__aeabi_dmul>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	a329      	add	r3, pc, #164	; (adr r3, 80046d8 <feedforward_const_accel+0x488>)
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f7fc f931 	bl	800089c <__aeabi_ddiv>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4614      	mov	r4, r2
 8004640:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004642:	ed97 7a01 	vldr	s14, [r7, #4]
 8004646:	eddf 6a29 	vldr	s13, [pc, #164]	; 80046ec <feedforward_const_accel+0x49c>
 800464a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800464e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80046f0 <feedforward_const_accel+0x4a0>
 8004652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004656:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800465a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800465e:	ee16 0a90 	vmov	r0, s13
 8004662:	f7fb ff99 	bl	8000598 <__aeabi_f2d>
 8004666:	a31e      	add	r3, pc, #120	; (adr r3, 80046e0 <feedforward_const_accel+0x490>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fb ffec 	bl	8000648 <__aeabi_dmul>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	a311      	add	r3, pc, #68	; (adr r3, 80046c0 <feedforward_const_accel+0x470>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	f7fc f90d 	bl	800089c <__aeabi_ddiv>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004692:	f7fc f903 	bl	800089c <__aeabi_ddiv>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4620      	mov	r0, r4
 800469c:	4629      	mov	r1, r5
 800469e:	f7fb fe1d 	bl	80002dc <__adddf3>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	f7fc faa5 	bl	8000bf8 <__aeabi_d2f>
 80046ae:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bdb0      	pop	{r4, r5, r7, pc}
 80046bc:	f3af 8000 	nop.w
 80046c0:	99e4ac6e 	.word	0x99e4ac6e
 80046c4:	3f9a9a29 	.word	0x3f9a9a29
 80046c8:	eb1c432d 	.word	0xeb1c432d
 80046cc:	3f1a36e2 	.word	0x3f1a36e2
 80046d0:	51eb851f 	.word	0x51eb851f
 80046d4:	3ff11eb8 	.word	0x3ff11eb8
 80046d8:	b7952d23 	.word	0xb7952d23
 80046dc:	3f569c23 	.word	0x3f569c23
 80046e0:	761b0f50 	.word	0x761b0f50
 80046e4:	3f66bf29 	.word	0x3f66bf29
 80046e8:	408f4000 	.word	0x408f4000
 80046ec:	447a0000 	.word	0x447a0000
 80046f0:	421c0000 	.word	0x421c0000
 80046f4:	1db94e6b 	.word	0x1db94e6b
 80046f8:	3eb5cf75 	.word	0x3eb5cf75

080046fc <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8004700:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <PID_Init+0x44>)
 8004702:	4a10      	ldr	r2, [pc, #64]	; (8004744 <PID_Init+0x48>)
 8004704:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <PID_Init+0x4c>)
 8004708:	4a10      	ldr	r2, [pc, #64]	; (800474c <PID_Init+0x50>)
 800470a:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <PID_Init+0x54>)
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <PID_Init+0x58>)
 8004716:	4a10      	ldr	r2, [pc, #64]	; (8004758 <PID_Init+0x5c>)
 8004718:	601a      	str	r2, [r3, #0]
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <PID_Init+0x60>)
 800471c:	4a10      	ldr	r2, [pc, #64]	; (8004760 <PID_Init+0x64>)
 800471e:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004720:	4b10      	ldr	r3, [pc, #64]	; (8004764 <PID_Init+0x68>)
 8004722:	4a11      	ldr	r2, [pc, #68]	; (8004768 <PID_Init+0x6c>)
 8004724:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <PID_Init+0x70>)
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <PID_Init+0x74>)
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	609a      	str	r2, [r3, #8]

}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000554 	.word	0x20000554
 8004744:	40466666 	.word	0x40466666
 8004748:	20000558 	.word	0x20000558
 800474c:	3da3d70a 	.word	0x3da3d70a
 8004750:	2000055c 	.word	0x2000055c
 8004754:	20000560 	.word	0x20000560
 8004758:	3fcccccd 	.word	0x3fcccccd
 800475c:	20000564 	.word	0x20000564
 8004760:	3d4ccccd 	.word	0x3d4ccccd
 8004764:	20000568 	.word	0x20000568
 8004768:	3b03126f 	.word	0x3b03126f
 800476c:	20000534 	.word	0x20000534
 8004770:	20000544 	.word	0x20000544

08004774 <clear_Ierror>:

void clear_Ierror(void) {
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <clear_Ierror+0x20>)
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <clear_Ierror+0x24>)
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000534 	.word	0x20000534
 8004798:	20000544 	.word	0x20000544

0800479c <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80047aa:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 80047ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80047be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c6:	d101      	bne.n	80047cc <EncoderGyro_PID+0x30>
		reset_speed();
 80047c8:	f7fc fc26 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 80047cc:	4b70      	ldr	r3, [pc, #448]	; (8004990 <EncoderGyro_PID+0x1f4>)
 80047ce:	edd3 7a00 	vldr	s15, [r3]
 80047d2:	eef0 7ae7 	vabs.f32	s15, s15
 80047d6:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004994 <EncoderGyro_PID+0x1f8>
 80047da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	d520      	bpl.n	8004826 <EncoderGyro_PID+0x8a>
 80047e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80047e8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004998 <EncoderGyro_PID+0x1fc>
 80047ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f4:	db17      	blt.n	8004826 <EncoderGyro_PID+0x8a>
 80047f6:	4b69      	ldr	r3, [pc, #420]	; (800499c <EncoderGyro_PID+0x200>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d013      	beq.n	8004826 <EncoderGyro_PID+0x8a>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 80047fe:	4b68      	ldr	r3, [pc, #416]	; (80049a0 <EncoderGyro_PID+0x204>)
 8004800:	ed93 7a00 	vldr	s14, [r3]
 8004804:	4b67      	ldr	r3, [pc, #412]	; (80049a4 <EncoderGyro_PID+0x208>)
 8004806:	edd3 7a00 	vldr	s15, [r3]
 800480a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800480e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004816:	ed97 7a01 	vldr	s14, [r7, #4]
 800481a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481e:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <EncoderGyro_PID+0x20c>)
 8004820:	edc3 7a00 	vstr	s15, [r3]
 8004824:	e01a      	b.n	800485c <EncoderGyro_PID+0xc0>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004826:	4b61      	ldr	r3, [pc, #388]	; (80049ac <EncoderGyro_PID+0x210>)
 8004828:	ed93 7a00 	vldr	s14, [r3]
 800482c:	4b60      	ldr	r3, [pc, #384]	; (80049b0 <EncoderGyro_PID+0x214>)
 800482e:	edd3 7a00 	vldr	s15, [r3]
 8004832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004836:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800483a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800483e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004846:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <EncoderGyro_PID+0x20c>)
 8004848:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 800484c:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <EncoderGyro_PID+0x218>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a54      	ldr	r2, [pc, #336]	; (80049a4 <EncoderGyro_PID+0x208>)
 8004852:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 8004854:	4b58      	ldr	r3, [pc, #352]	; (80049b8 <EncoderGyro_PID+0x21c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a51      	ldr	r2, [pc, #324]	; (80049a0 <EncoderGyro_PID+0x204>)
 800485a:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 800485c:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <EncoderGyro_PID+0x20c>)
 800485e:	ed93 7a00 	vldr	s14, [r3]
 8004862:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <EncoderGyro_PID+0x20c>)
 8004864:	edd3 7a01 	vldr	s15, [r3, #4]
 8004868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800486c:	4b4e      	ldr	r3, [pc, #312]	; (80049a8 <EncoderGyro_PID+0x20c>)
 800486e:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 8004872:	4b4d      	ldr	r3, [pc, #308]	; (80049a8 <EncoderGyro_PID+0x20c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a4c      	ldr	r2, [pc, #304]	; (80049a8 <EncoderGyro_PID+0x20c>)
 8004878:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 800487a:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <EncoderGyro_PID+0x20c>)
 800487c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004880:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <EncoderGyro_PID+0x20c>)
 8004882:	edd3 7a00 	vldr	s15, [r3]
 8004886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800488a:	4b47      	ldr	r3, [pc, #284]	; (80049a8 <EncoderGyro_PID+0x20c>)
 800488c:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8004890:	4b45      	ldr	r3, [pc, #276]	; (80049a8 <EncoderGyro_PID+0x20c>)
 8004892:	ed93 7a00 	vldr	s14, [r3]
 8004896:	4b49      	ldr	r3, [pc, #292]	; (80049bc <EncoderGyro_PID+0x220>)
 8004898:	edd3 7a00 	vldr	s15, [r3]
 800489c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048a0:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <EncoderGyro_PID+0x20c>)
 80048a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80048a6:	4b46      	ldr	r3, [pc, #280]	; (80049c0 <EncoderGyro_PID+0x224>)
 80048a8:	edd3 7a00 	vldr	s15, [r3]
 80048ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048b4:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <EncoderGyro_PID+0x20c>)
 80048b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80048ba:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <EncoderGyro_PID+0x228>)
 80048bc:	edd3 7a00 	vldr	s15, [r3]
 80048c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c8:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 80048cc:	4b30      	ldr	r3, [pc, #192]	; (8004990 <EncoderGyro_PID+0x1f4>)
 80048ce:	edd3 7a00 	vldr	s15, [r3]
 80048d2:	ed97 7a00 	vldr	s14, [r7]
 80048d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048da:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <EncoderGyro_PID+0x22c>)
 80048dc:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <EncoderGyro_PID+0x22c>)
 80048e2:	ed93 7a00 	vldr	s14, [r3]
 80048e6:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <EncoderGyro_PID+0x22c>)
 80048e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80048ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <EncoderGyro_PID+0x22c>)
 80048f2:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 80048f6:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <EncoderGyro_PID+0x22c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a33      	ldr	r2, [pc, #204]	; (80049c8 <EncoderGyro_PID+0x22c>)
 80048fc:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 80048fe:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <EncoderGyro_PID+0x22c>)
 8004900:	ed93 7a02 	vldr	s14, [r3, #8]
 8004904:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <EncoderGyro_PID+0x22c>)
 8004906:	edd3 7a00 	vldr	s15, [r3]
 800490a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800490e:	4b2e      	ldr	r3, [pc, #184]	; (80049c8 <EncoderGyro_PID+0x22c>)
 8004910:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004914:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <EncoderGyro_PID+0x22c>)
 8004916:	ed93 7a00 	vldr	s14, [r3]
 800491a:	4b2c      	ldr	r3, [pc, #176]	; (80049cc <EncoderGyro_PID+0x230>)
 800491c:	edd3 7a00 	vldr	s15, [r3]
 8004920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004924:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <EncoderGyro_PID+0x22c>)
 8004926:	edd3 6a02 	vldr	s13, [r3, #8]
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <EncoderGyro_PID+0x234>)
 800492c:	edd3 7a00 	vldr	s15, [r3]
 8004930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004934:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004938:	4b23      	ldr	r3, [pc, #140]	; (80049c8 <EncoderGyro_PID+0x22c>)
 800493a:	edd3 6a03 	vldr	s13, [r3, #12]
 800493e:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <EncoderGyro_PID+0x238>)
 8004940:	edd3 7a00 	vldr	s15, [r3]
 8004944:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800494c:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004950:	edd7 7a05 	vldr	s15, [r7, #20]
 8004954:	eddf 6a20 	vldr	s13, [pc, #128]	; 80049d8 <EncoderGyro_PID+0x23c>
 8004958:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800495c:	4b1f      	ldr	r3, [pc, #124]	; (80049dc <EncoderGyro_PID+0x240>)
 800495e:	edd3 7a00 	vldr	s15, [r3]
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 800496c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004970:	eddf 6a19 	vldr	s13, [pc, #100]	; 80049d8 <EncoderGyro_PID+0x23c>
 8004974:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <EncoderGyro_PID+0x240>)
 800497a:	edd3 7a00 	vldr	s15, [r3]
 800497e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	edc3 7a00 	vstr	s15, [r3]

}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000268 	.word	0x20000268
 8004994:	42f00000 	.word	0x42f00000
 8004998:	42c80000 	.word	0x42c80000
 800499c:	20000528 	.word	0x20000528
 80049a0:	2000025c 	.word	0x2000025c
 80049a4:	20000258 	.word	0x20000258
 80049a8:	20000534 	.word	0x20000534
 80049ac:	2000022c 	.word	0x2000022c
 80049b0:	20000228 	.word	0x20000228
 80049b4:	20000238 	.word	0x20000238
 80049b8:	2000023c 	.word	0x2000023c
 80049bc:	20000554 	.word	0x20000554
 80049c0:	20000558 	.word	0x20000558
 80049c4:	2000055c 	.word	0x2000055c
 80049c8:	20000544 	.word	0x20000544
 80049cc:	20000560 	.word	0x20000560
 80049d0:	20000564 	.word	0x20000564
 80049d4:	20000568 	.word	0x20000568
 80049d8:	44d1e000 	.word	0x44d1e000
 80049dc:	200004d4 	.word	0x200004d4

080049e0 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 80049e4:	4b3f      	ldr	r3, [pc, #252]	; (8004ae4 <init_WallControl+0x104>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 80049ea:	4b3f      	ldr	r3, [pc, #252]	; (8004ae8 <init_WallControl+0x108>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 80049f0:	4b3e      	ldr	r3, [pc, #248]	; (8004aec <init_WallControl+0x10c>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 80049f6:	4b3e      	ldr	r3, [pc, #248]	; (8004af0 <init_WallControl+0x110>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 80049fc:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <init_WallControl+0x114>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004a02:	4b3d      	ldr	r3, [pc, #244]	; (8004af8 <init_WallControl+0x118>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004a08:	4b3c      	ldr	r3, [pc, #240]	; (8004afc <init_WallControl+0x11c>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004a0e:	4b3c      	ldr	r3, [pc, #240]	; (8004b00 <init_WallControl+0x120>)
 8004a10:	4a3c      	ldr	r2, [pc, #240]	; (8004b04 <init_WallControl+0x124>)
 8004a12:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004a14:	4b3c      	ldr	r3, [pc, #240]	; (8004b08 <init_WallControl+0x128>)
 8004a16:	4a3d      	ldr	r2, [pc, #244]	; (8004b0c <init_WallControl+0x12c>)
 8004a18:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <init_WallControl+0x130>)
 8004a1c:	4a3d      	ldr	r2, [pc, #244]	; (8004b14 <init_WallControl+0x134>)
 8004a1e:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004a20:	4b3d      	ldr	r3, [pc, #244]	; (8004b18 <init_WallControl+0x138>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004a26:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <init_WallControl+0x13c>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004a2c:	4b3c      	ldr	r3, [pc, #240]	; (8004b20 <init_WallControl+0x140>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004a32:	4b3c      	ldr	r3, [pc, #240]	; (8004b24 <init_WallControl+0x144>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <init_WallControl+0x148>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004a3e:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <init_WallControl+0x14c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004a44:	4b3a      	ldr	r3, [pc, #232]	; (8004b30 <init_WallControl+0x150>)
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <init_WallControl+0x154>)
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004a54:	4b38      	ldr	r3, [pc, #224]	; (8004b38 <init_WallControl+0x158>)
 8004a56:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004a5a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004a5c:	4b37      	ldr	r3, [pc, #220]	; (8004b3c <init_WallControl+0x15c>)
 8004a5e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004a62:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <init_WallControl+0x160>)
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004a6c:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <init_WallControl+0x164>)
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004a74:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <init_WallControl+0x168>)
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <init_WallControl+0x16c>)
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004a84:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <init_WallControl+0x170>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004a8a:	4b32      	ldr	r3, [pc, #200]	; (8004b54 <init_WallControl+0x174>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004a90:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <init_WallControl+0x178>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004a96:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <init_WallControl+0x17c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004a9c:	4b30      	ldr	r3, [pc, #192]	; (8004b60 <init_WallControl+0x180>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <init_WallControl+0x184>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004aa8:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <init_WallControl+0x188>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004aae:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <init_WallControl+0x18c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004ab4:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <init_WallControl+0x190>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <init_WallControl+0x194>)
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004ac2:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <init_WallControl+0x198>)
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004aca:	4b2c      	ldr	r3, [pc, #176]	; (8004b7c <init_WallControl+0x19c>)
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004ad2:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <init_WallControl+0x1a0>)
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000590 	.word	0x20000590
 8004ae8:	20000591 	.word	0x20000591
 8004aec:	20000593 	.word	0x20000593
 8004af0:	20000592 	.word	0x20000592
 8004af4:	20000595 	.word	0x20000595
 8004af8:	20000596 	.word	0x20000596
 8004afc:	20000597 	.word	0x20000597
 8004b00:	20000598 	.word	0x20000598
 8004b04:	44d2a000 	.word	0x44d2a000
 8004b08:	2000059c 	.word	0x2000059c
 8004b0c:	44b56000 	.word	0x44b56000
 8004b10:	200005a0 	.word	0x200005a0
 8004b14:	420c0000 	.word	0x420c0000
 8004b18:	200005b8 	.word	0x200005b8
 8004b1c:	200005b4 	.word	0x200005b4
 8004b20:	200005c0 	.word	0x200005c0
 8004b24:	200005bc 	.word	0x200005bc
 8004b28:	200005c8 	.word	0x200005c8
 8004b2c:	200005c4 	.word	0x200005c4
 8004b30:	200005d0 	.word	0x200005d0
 8004b34:	200005cc 	.word	0x200005cc
 8004b38:	200005d8 	.word	0x200005d8
 8004b3c:	200005d4 	.word	0x200005d4
 8004b40:	200005e0 	.word	0x200005e0
 8004b44:	200005dc 	.word	0x200005dc
 8004b48:	200005e8 	.word	0x200005e8
 8004b4c:	200005e4 	.word	0x200005e4
 8004b50:	200005ec 	.word	0x200005ec
 8004b54:	200005ed 	.word	0x200005ed
 8004b58:	200005ee 	.word	0x200005ee
 8004b5c:	200005ef 	.word	0x200005ef
 8004b60:	200005f0 	.word	0x200005f0
 8004b64:	200005f1 	.word	0x200005f1
 8004b68:	200005f2 	.word	0x200005f2
 8004b6c:	200005f3 	.word	0x200005f3
 8004b70:	200005f4 	.word	0x200005f4
 8004b74:	200005f8 	.word	0x200005f8
 8004b78:	200005fc 	.word	0x200005fc
 8004b7c:	20000600 	.word	0x20000600
 8004b80:	20000604 	.word	0x20000604
 8004b84:	00000000 	.word	0x00000000

08004b88 <calWallConrol>:


float calWallConrol(void) {
 8004b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b8c:	b0aa      	sub	sp, #168	; 0xa8
 8004b8e:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004b90:	4b9b      	ldr	r3, [pc, #620]	; (8004e00 <calWallConrol+0x278>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d13d      	bne.n	8004c14 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004b98:	4b9a      	ldr	r3, [pc, #616]	; (8004e04 <calWallConrol+0x27c>)
 8004b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004b9e:	4b9a      	ldr	r3, [pc, #616]	; (8004e08 <calWallConrol+0x280>)
 8004ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 2000) {
 8004ba4:	4b99      	ldr	r3, [pc, #612]	; (8004e0c <calWallConrol+0x284>)
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004e10 <calWallConrol+0x288>
 8004bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb6:	dd06      	ble.n	8004bc6 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 2000;
 8004bb8:	4b96      	ldr	r3, [pc, #600]	; (8004e14 <calWallConrol+0x28c>)
 8004bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 2000;
 8004bbe:	4b96      	ldr	r3, [pc, #600]	; (8004e18 <calWallConrol+0x290>)
 8004bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bc4:	e048      	b.n	8004c58 <calWallConrol+0xd0>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004bc6:	4b91      	ldr	r3, [pc, #580]	; (8004e0c <calWallConrol+0x284>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fb fce4 	bl	8000598 <__aeabi_f2d>
 8004bd0:	a385      	add	r3, pc, #532	; (adr r3, 8004de8 <calWallConrol+0x260>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb fd37 	bl	8000648 <__aeabi_dmul>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	f7fc f809 	bl	8000bf8 <__aeabi_d2f>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004bec:	4b87      	ldr	r3, [pc, #540]	; (8004e0c <calWallConrol+0x284>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fb fcd1 	bl	8000598 <__aeabi_f2d>
 8004bf6:	a37e      	add	r3, pc, #504	; (adr r3, 8004df0 <calWallConrol+0x268>)
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f7fb fd24 	bl	8000648 <__aeabi_dmul>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4610      	mov	r0, r2
 8004c06:	4619      	mov	r1, r3
 8004c08:	f7fb fff6 	bl	8000bf8 <__aeabi_d2f>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c12:	e021      	b.n	8004c58 <calWallConrol+0xd0>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004c14:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <calWallConrol+0x294>)
 8004c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004c1a:	4b81      	ldr	r3, [pc, #516]	; (8004e20 <calWallConrol+0x298>)
 8004c1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004c20:	4b7a      	ldr	r3, [pc, #488]	; (8004e0c <calWallConrol+0x284>)
 8004c22:	edd3 7a00 	vldr	s15, [r3]
 8004c26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c2e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004c32:	4b76      	ldr	r3, [pc, #472]	; (8004e0c <calWallConrol+0x284>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fb fcae 	bl	8000598 <__aeabi_f2d>
 8004c3c:	a36e      	add	r3, pc, #440	; (adr r3, 8004df8 <calWallConrol+0x270>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f7fb fd01 	bl	8000648 <__aeabi_dmul>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f7fb ffd3 	bl	8000bf8 <__aeabi_d2f>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004c58:	4b72      	ldr	r3, [pc, #456]	; (8004e24 <calWallConrol+0x29c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8004c60:	da03      	bge.n	8004c6a <calWallConrol+0xe2>
		sensorWall_L = SENSOR_L_MIN;
 8004c62:	4b71      	ldr	r3, [pc, #452]	; (8004e28 <calWallConrol+0x2a0>)
 8004c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c68:	e011      	b.n	8004c8e <calWallConrol+0x106>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004c6a:	4b6e      	ldr	r3, [pc, #440]	; (8004e24 <calWallConrol+0x29c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004c72:	4293      	cmp	r3, r2
 8004c74:	dd03      	ble.n	8004c7e <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MAX;
 8004c76:	4b6d      	ldr	r3, [pc, #436]	; (8004e2c <calWallConrol+0x2a4>)
 8004c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c7c:	e007      	b.n	8004c8e <calWallConrol+0x106>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004c7e:	4b69      	ldr	r3, [pc, #420]	; (8004e24 <calWallConrol+0x29c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <calWallConrol+0x29c>)
 8004c90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004c94:	f240 2289 	movw	r2, #649	; 0x289
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	dc03      	bgt.n	8004ca4 <calWallConrol+0x11c>
		sensorWall_R = SENSOR_R_MIN;
 8004c9c:	4b64      	ldr	r3, [pc, #400]	; (8004e30 <calWallConrol+0x2a8>)
 8004c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ca2:	e012      	b.n	8004cca <calWallConrol+0x142>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004ca4:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <calWallConrol+0x29c>)
 8004ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004caa:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004cae:	dd03      	ble.n	8004cb8 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MAX;
 8004cb0:	4b60      	ldr	r3, [pc, #384]	; (8004e34 <calWallConrol+0x2ac>)
 8004cb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cb6:	e008      	b.n	8004cca <calWallConrol+0x142>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004cb8:	4b5a      	ldr	r3, [pc, #360]	; (8004e24 <calWallConrol+0x29c>)
 8004cba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004cd8:	4b57      	ldr	r3, [pc, #348]	; (8004e38 <calWallConrol+0x2b0>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d11c      	bne.n	8004d1a <calWallConrol+0x192>
		g_WallControlStatus = 0;
 8004ce0:	4b56      	ldr	r3, [pc, #344]	; (8004e3c <calWallConrol+0x2b4>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004ce6:	4b56      	ldr	r3, [pc, #344]	; (8004e40 <calWallConrol+0x2b8>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004cec:	4b55      	ldr	r3, [pc, #340]	; (8004e44 <calWallConrol+0x2bc>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004cf2:	4b55      	ldr	r3, [pc, #340]	; (8004e48 <calWallConrol+0x2c0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004cf8:	4b54      	ldr	r3, [pc, #336]	; (8004e4c <calWallConrol+0x2c4>)
 8004cfa:	4a55      	ldr	r2, [pc, #340]	; (8004e50 <calWallConrol+0x2c8>)
 8004cfc:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004cfe:	4b55      	ldr	r3, [pc, #340]	; (8004e54 <calWallConrol+0x2cc>)
 8004d00:	4a55      	ldr	r2, [pc, #340]	; (8004e58 <calWallConrol+0x2d0>)
 8004d02:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004d04:	4b55      	ldr	r3, [pc, #340]	; (8004e5c <calWallConrol+0x2d4>)
 8004d06:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <calWallConrol+0x2d8>)
 8004d08:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004d12:	f002 f8fb 	bl	8006f0c <pl_yellow_LED_off>
 8004d16:	f001 ba46 	b.w	80061a6 <calWallConrol+0x161e>

	} else if (g_WallControl_mode == 1) {
 8004d1a:	4b47      	ldr	r3, [pc, #284]	; (8004e38 <calWallConrol+0x2b0>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	f040 82eb 	bne.w	80052fa <calWallConrol+0x772>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <calWallConrol+0x2b4>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 809b 	beq.w	8004e68 <calWallConrol+0x2e0>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004d32:	4b3c      	ldr	r3, [pc, #240]	; (8004e24 <calWallConrol+0x29c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004d3a:	db16      	blt.n	8004d6a <calWallConrol+0x1e2>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004d3c:	4b49      	ldr	r3, [pc, #292]	; (8004e64 <calWallConrol+0x2dc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fb fc17 	bl	8000574 <__aeabi_i2d>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4690      	mov	r8, r2
 8004d4c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004d50:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004d54:	f7fb fc20 	bl	8000598 <__aeabi_f2d>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4649      	mov	r1, r9
 8004d60:	f7fb ff02 	bl	8000b68 <__aeabi_dcmpgt>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d037      	beq.n	8004dda <calWallConrol+0x252>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004d6a:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <calWallConrol+0x2b4>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <calWallConrol+0x2b4>)
 8004d74:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004d76:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <calWallConrol+0x2c4>)
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d84:	e021      	b.n	8004dca <calWallConrol+0x242>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004d86:	4a27      	ldr	r2, [pc, #156]	; (8004e24 <calWallConrol+0x29c>)
 8004d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d98:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <calWallConrol+0x2c4>)
 8004d9a:	edd3 7a00 	vldr	s15, [r3]
 8004d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da6:	dd0b      	ble.n	8004dc0 <calWallConrol+0x238>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <calWallConrol+0x29c>)
 8004daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <calWallConrol+0x2c4>)
 8004dbc:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dce:	2b13      	cmp	r3, #19
 8004dd0:	ddd9      	ble.n	8004d86 <calWallConrol+0x1fe>
					}
				}
				g_skewer_displacement = 0;
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <calWallConrol+0x2d4>)
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004dda:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <calWallConrol+0x2bc>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e064      	b.n	8004eac <calWallConrol+0x324>
 8004de2:	bf00      	nop
 8004de4:	f3af 8000 	nop.w
 8004de8:	9999999a 	.word	0x9999999a
 8004dec:	3fd99999 	.word	0x3fd99999
 8004df0:	47ae147b 	.word	0x47ae147b
 8004df4:	bf847ae1 	.word	0xbf847ae1
 8004df8:	bc6a7efa 	.word	0xbc6a7efa
 8004dfc:	3f789374 	.word	0x3f789374
 8004e00:	20000808 	.word	0x20000808
 8004e04:	43340000 	.word	0x43340000
 8004e08:	43020000 	.word	0x43020000
 8004e0c:	200004d8 	.word	0x200004d8
 8004e10:	44fa0000 	.word	0x44fa0000
 8004e14:	44480000 	.word	0x44480000
 8004e18:	c1a00000 	.word	0xc1a00000
 8004e1c:	431d0000 	.word	0x431d0000
 8004e20:	42dc0000 	.word	0x42dc0000
 8004e24:	200002b8 	.word	0x200002b8
 8004e28:	44390000 	.word	0x44390000
 8004e2c:	450fc000 	.word	0x450fc000
 8004e30:	44228000 	.word	0x44228000
 8004e34:	44e10000 	.word	0x44e10000
 8004e38:	20000590 	.word	0x20000590
 8004e3c:	20000593 	.word	0x20000593
 8004e40:	20000595 	.word	0x20000595
 8004e44:	20000596 	.word	0x20000596
 8004e48:	20000597 	.word	0x20000597
 8004e4c:	20000598 	.word	0x20000598
 8004e50:	44d2a000 	.word	0x44d2a000
 8004e54:	2000059c 	.word	0x2000059c
 8004e58:	44b56000 	.word	0x44b56000
 8004e5c:	200005a0 	.word	0x200005a0
 8004e60:	420c0000 	.word	0x420c0000
 8004e64:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004e68:	4bbd      	ldr	r3, [pc, #756]	; (8005160 <calWallConrol+0x5d8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004e70:	dd1c      	ble.n	8004eac <calWallConrol+0x324>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004e72:	4bbc      	ldr	r3, [pc, #752]	; (8005164 <calWallConrol+0x5dc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fb fb7c 	bl	8000574 <__aeabi_i2d>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004e86:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004e8a:	f7fb fb85 	bl	8000598 <__aeabi_f2d>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4620      	mov	r0, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	f7fb fe49 	bl	8000b2c <__aeabi_dcmplt>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <calWallConrol+0x324>
				g_WallControlStatus = g_WallControlStatus + 1;
 8004ea0:	4bb1      	ldr	r3, [pc, #708]	; (8005168 <calWallConrol+0x5e0>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	4baf      	ldr	r3, [pc, #700]	; (8005168 <calWallConrol+0x5e0>)
 8004eaa:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8004eac:	4bae      	ldr	r3, [pc, #696]	; (8005168 <calWallConrol+0x5e0>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d05b      	beq.n	8004f74 <calWallConrol+0x3ec>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8004ebc:	4ba8      	ldr	r3, [pc, #672]	; (8005160 <calWallConrol+0x5d8>)
 8004ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ec2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004ec6:	db17      	blt.n	8004ef8 <calWallConrol+0x370>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004ec8:	4ba6      	ldr	r3, [pc, #664]	; (8005164 <calWallConrol+0x5dc>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fb fb51 	bl	8000574 <__aeabi_i2d>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	613a      	str	r2, [r7, #16]
 8004ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004edc:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8004ede:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004ee2:	f7fb fb59 	bl	8000598 <__aeabi_f2d>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004eea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eee:	f7fb fe3b 	bl	8000b68 <__aeabi_dcmpgt>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d039      	beq.n	8004f6c <calWallConrol+0x3e4>
				g_WallControlStatus = g_WallControlStatus - 2;
 8004ef8:	4b9b      	ldr	r3, [pc, #620]	; (8005168 <calWallConrol+0x5e0>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	3b02      	subs	r3, #2
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	4b99      	ldr	r3, [pc, #612]	; (8005168 <calWallConrol+0x5e0>)
 8004f02:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8004f04:	4b99      	ldr	r3, [pc, #612]	; (800516c <calWallConrol+0x5e4>)
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f12:	e023      	b.n	8004f5c <calWallConrol+0x3d4>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8004f14:	4a92      	ldr	r2, [pc, #584]	; (8005160 <calWallConrol+0x5d8>)
 8004f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f1a:	3350      	adds	r3, #80	; 0x50
 8004f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f28:	4b90      	ldr	r3, [pc, #576]	; (800516c <calWallConrol+0x5e4>)
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f36:	dd0c      	ble.n	8004f52 <calWallConrol+0x3ca>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8004f38:	4a89      	ldr	r2, [pc, #548]	; (8005160 <calWallConrol+0x5d8>)
 8004f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f3e:	3350      	adds	r3, #80	; 0x50
 8004f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f4c:	4b87      	ldr	r3, [pc, #540]	; (800516c <calWallConrol+0x5e4>)
 8004f4e:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f56:	3301      	adds	r3, #1
 8004f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f60:	2b13      	cmp	r3, #19
 8004f62:	ddd7      	ble.n	8004f14 <calWallConrol+0x38c>
					}
				}
				g_skewer_displacement = 0;
 8004f64:	4b82      	ldr	r3, [pc, #520]	; (8005170 <calWallConrol+0x5e8>)
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8004f6c:	4b81      	ldr	r3, [pc, #516]	; (8005174 <calWallConrol+0x5ec>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e023      	b.n	8004fbc <calWallConrol+0x434>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8004f74:	4b7a      	ldr	r3, [pc, #488]	; (8005160 <calWallConrol+0x5d8>)
 8004f76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f7a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004f7e:	dd1d      	ble.n	8004fbc <calWallConrol+0x434>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004f80:	4b78      	ldr	r3, [pc, #480]	; (8005164 <calWallConrol+0x5dc>)
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fb faf5 	bl	8000574 <__aeabi_i2d>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	60ba      	str	r2, [r7, #8]
 8004f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8004f96:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004f9a:	f7fb fafd 	bl	8000598 <__aeabi_f2d>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fa6:	f7fb fdc1 	bl	8000b2c <__aeabi_dcmplt>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <calWallConrol+0x434>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8004fb0:	4b6d      	ldr	r3, [pc, #436]	; (8005168 <calWallConrol+0x5e0>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	4b6b      	ldr	r3, [pc, #428]	; (8005168 <calWallConrol+0x5e0>)
 8004fba:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <calWallConrol+0x5e0>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	f201 80f0 	bhi.w	80061a6 <calWallConrol+0x161e>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <calWallConrol+0x444>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	080050e3 	.word	0x080050e3
 8004fd4:	08005191 	.word	0x08005191
 8004fd8:	080051fb 	.word	0x080051fb
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8004fdc:	4b64      	ldr	r3, [pc, #400]	; (8005170 <calWallConrol+0x5e8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fb fad9 	bl	8000598 <__aeabi_f2d>
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	460d      	mov	r5, r1
 8004fea:	4b63      	ldr	r3, [pc, #396]	; (8005178 <calWallConrol+0x5f0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fb fad2 	bl	8000598 <__aeabi_f2d>
 8004ff4:	a356      	add	r3, pc, #344	; (adr r3, 8005150 <calWallConrol+0x5c8>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb fb25 	bl	8000648 <__aeabi_dmul>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb f969 	bl	80002dc <__adddf3>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	f7fb fdf1 	bl	8000bf8 <__aeabi_d2f>
 8005016:	4603      	mov	r3, r0
 8005018:	4a55      	ldr	r2, [pc, #340]	; (8005170 <calWallConrol+0x5e8>)
 800501a:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 800501c:	4b54      	ldr	r3, [pc, #336]	; (8005170 <calWallConrol+0x5e8>)
 800501e:	edd3 7a00 	vldr	s15, [r3]
 8005022:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800517c <calWallConrol+0x5f4>
 8005026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502e:	d52e      	bpl.n	800508e <calWallConrol+0x506>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005030:	4b53      	ldr	r3, [pc, #332]	; (8005180 <calWallConrol+0x5f8>)
 8005032:	edd3 7a00 	vldr	s15, [r3]
 8005036:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005184 <calWallConrol+0x5fc>
 800503a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800503e:	eef1 6a67 	vneg.f32	s13, s15
 8005042:	4b4f      	ldr	r3, [pc, #316]	; (8005180 <calWallConrol+0x5f8>)
 8005044:	edd3 7a00 	vldr	s15, [r3]
 8005048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 800504c:	4b47      	ldr	r3, [pc, #284]	; (800516c <calWallConrol+0x5e4>)
 800504e:	edd3 7a00 	vldr	s15, [r3]
 8005052:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800518c <calWallConrol+0x604>
 8005056:	ee37 6ae6 	vsub.f32	s12, s15, s13
 800505a:	4b44      	ldr	r3, [pc, #272]	; (800516c <calWallConrol+0x5e4>)
 800505c:	edd3 6a00 	vldr	s13, [r3]
 8005060:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005068:	ee17 0a90 	vmov	r0, s15
 800506c:	f7fb fa94 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005070:	a339      	add	r3, pc, #228	; (adr r3, 8005158 <calWallConrol+0x5d0>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb fae7 	bl	8000648 <__aeabi_dmul>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	f7fb fdb9 	bl	8000bf8 <__aeabi_d2f>
 8005086:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8005088:	4a3f      	ldr	r2, [pc, #252]	; (8005188 <calWallConrol+0x600>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e003      	b.n	8005096 <calWallConrol+0x50e>
			} else {
				wall_normal.error = 0;
 800508e:	4b3e      	ldr	r3, [pc, #248]	; (8005188 <calWallConrol+0x600>)
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005096:	4b3c      	ldr	r3, [pc, #240]	; (8005188 <calWallConrol+0x600>)
 8005098:	ed93 7a00 	vldr	s14, [r3]
 800509c:	4b3a      	ldr	r3, [pc, #232]	; (8005188 <calWallConrol+0x600>)
 800509e:	edd3 7a01 	vldr	s15, [r3, #4]
 80050a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <calWallConrol+0x600>)
 80050a8:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80050ac:	4b36      	ldr	r3, [pc, #216]	; (8005188 <calWallConrol+0x600>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a35      	ldr	r2, [pc, #212]	; (8005188 <calWallConrol+0x600>)
 80050b2:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80050b4:	4b34      	ldr	r3, [pc, #208]	; (8005188 <calWallConrol+0x600>)
 80050b6:	ed93 7a00 	vldr	s14, [r3]
 80050ba:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80050be:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80050c2:	4b31      	ldr	r3, [pc, #196]	; (8005188 <calWallConrol+0x600>)
 80050c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80050c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80050cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80050d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 80050d8:	2000      	movs	r0, #0
 80050da:	f001 ff51 	bl	8006f80 <pl_yellow_LED_count>
			break;
 80050de:	f001 b862 	b.w	80061a6 <calWallConrol+0x161e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80050e2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80050e6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005184 <calWallConrol+0x5fc>
 80050ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050ee:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80050f2:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 80050f6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80050fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <calWallConrol+0x600>)
 8005100:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <calWallConrol+0x600>)
 8005106:	ed93 7a00 	vldr	s14, [r3]
 800510a:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <calWallConrol+0x600>)
 800510c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <calWallConrol+0x600>)
 8005116:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <calWallConrol+0x600>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <calWallConrol+0x600>)
 8005120:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005122:	4b19      	ldr	r3, [pc, #100]	; (8005188 <calWallConrol+0x600>)
 8005124:	ed93 7a00 	vldr	s14, [r3]
 8005128:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800512c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <calWallConrol+0x600>)
 8005132:	edd3 6a02 	vldr	s13, [r3, #8]
 8005136:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800513a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800513e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005142:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8005146:	2080      	movs	r0, #128	; 0x80
 8005148:	f001 ff1a 	bl	8006f80 <pl_yellow_LED_count>
			break;
 800514c:	f001 b82b 	b.w	80061a6 <calWallConrol+0x161e>
 8005150:	d2f1a9fc 	.word	0xd2f1a9fc
 8005154:	3f50624d 	.word	0x3f50624d
 8005158:	66666666 	.word	0x66666666
 800515c:	3fe66666 	.word	0x3fe66666
 8005160:	200002b8 	.word	0x200002b8
 8005164:	20000448 	.word	0x20000448
 8005168:	20000593 	.word	0x20000593
 800516c:	2000059c 	.word	0x2000059c
 8005170:	200005a0 	.word	0x200005a0
 8005174:	20000597 	.word	0x20000597
 8005178:	200004d8 	.word	0x200004d8
 800517c:	420c0000 	.word	0x420c0000
 8005180:	20000598 	.word	0x20000598
 8005184:	44d2a000 	.word	0x44d2a000
 8005188:	2000056c 	.word	0x2000056c
 800518c:	44b56000 	.word	0x44b56000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005190:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005194:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 800518c <calWallConrol+0x604>
 8005198:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800519c:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 80051a0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80051a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80051a8:	4ba9      	ldr	r3, [pc, #676]	; (8005450 <calWallConrol+0x8c8>)
 80051aa:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80051ae:	4ba8      	ldr	r3, [pc, #672]	; (8005450 <calWallConrol+0x8c8>)
 80051b0:	ed93 7a00 	vldr	s14, [r3]
 80051b4:	4ba6      	ldr	r3, [pc, #664]	; (8005450 <calWallConrol+0x8c8>)
 80051b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80051ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051be:	4ba4      	ldr	r3, [pc, #656]	; (8005450 <calWallConrol+0x8c8>)
 80051c0:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80051c4:	4ba2      	ldr	r3, [pc, #648]	; (8005450 <calWallConrol+0x8c8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4aa1      	ldr	r2, [pc, #644]	; (8005450 <calWallConrol+0x8c8>)
 80051ca:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80051cc:	4ba0      	ldr	r3, [pc, #640]	; (8005450 <calWallConrol+0x8c8>)
 80051ce:	ed93 7a00 	vldr	s14, [r3]
 80051d2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80051d6:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80051da:	4b9d      	ldr	r3, [pc, #628]	; (8005450 <calWallConrol+0x8c8>)
 80051dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80051e0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80051e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80051e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ec:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 80051f0:	2001      	movs	r0, #1
 80051f2:	f001 fec5 	bl	8006f80 <pl_yellow_LED_count>
			break;
 80051f6:	f000 bfd6 	b.w	80061a6 <calWallConrol+0x161e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 80051fa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80051fe:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8005454 <calWallConrol+0x8cc>
 8005202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005206:	eef1 6a67 	vneg.f32	s13, s15
 800520a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 8005212:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005216:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005458 <calWallConrol+0x8d0>
 800521a:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 800521e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005222:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 8005226:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 800522a:	4b89      	ldr	r3, [pc, #548]	; (8005450 <calWallConrol+0x8c8>)
 800522c:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005230:	4b87      	ldr	r3, [pc, #540]	; (8005450 <calWallConrol+0x8c8>)
 8005232:	ed93 7a00 	vldr	s14, [r3]
 8005236:	4b86      	ldr	r3, [pc, #536]	; (8005450 <calWallConrol+0x8c8>)
 8005238:	edd3 7a01 	vldr	s15, [r3, #4]
 800523c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005240:	4b83      	ldr	r3, [pc, #524]	; (8005450 <calWallConrol+0x8c8>)
 8005242:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005246:	4b82      	ldr	r3, [pc, #520]	; (8005450 <calWallConrol+0x8c8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a81      	ldr	r2, [pc, #516]	; (8005450 <calWallConrol+0x8c8>)
 800524c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800524e:	4b80      	ldr	r3, [pc, #512]	; (8005450 <calWallConrol+0x8c8>)
 8005250:	ed93 7a00 	vldr	s14, [r3]
 8005254:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005258:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800525c:	4b7c      	ldr	r3, [pc, #496]	; (8005450 <calWallConrol+0x8c8>)
 800525e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005262:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005266:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800526a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800526e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 8005272:	2081      	movs	r0, #129	; 0x81
 8005274:	f001 fe84 	bl	8006f80 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005278:	4b78      	ldr	r3, [pc, #480]	; (800545c <calWallConrol+0x8d4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7fb f979 	bl	8000574 <__aeabi_i2d>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	603a      	str	r2, [r7, #0]
 8005288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	4b73      	ldr	r3, [pc, #460]	; (8005460 <calWallConrol+0x8d8>)
 8005294:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005298:	f7fb fc48 	bl	8000b2c <__aeabi_dcmplt>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01a      	beq.n	80052d8 <calWallConrol+0x750>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 80052a2:	4b6e      	ldr	r3, [pc, #440]	; (800545c <calWallConrol+0x8d4>)
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fb f964 	bl	8000574 <__aeabi_i2d>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4692      	mov	sl, r2
 80052b2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	4b69      	ldr	r3, [pc, #420]	; (8005460 <calWallConrol+0x8d8>)
 80052bc:	4650      	mov	r0, sl
 80052be:	4659      	mov	r1, fp
 80052c0:	f7fb fc34 	bl	8000b2c <__aeabi_dcmplt>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d006      	beq.n	80052d8 <calWallConrol+0x750>
				StabilityCount_reset++;
 80052ca:	4b66      	ldr	r3, [pc, #408]	; (8005464 <calWallConrol+0x8dc>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	4b64      	ldr	r3, [pc, #400]	; (8005464 <calWallConrol+0x8dc>)
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e002      	b.n	80052de <calWallConrol+0x756>
			} else {
				StabilityCount_reset = 0;
 80052d8:	4b62      	ldr	r3, [pc, #392]	; (8005464 <calWallConrol+0x8dc>)
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 80052de:	4b61      	ldr	r3, [pc, #388]	; (8005464 <calWallConrol+0x8dc>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b18      	cmp	r3, #24
 80052e4:	f240 875e 	bls.w	80061a4 <calWallConrol+0x161c>
				Gyro.sigma_error = 0;
 80052e8:	4b5f      	ldr	r3, [pc, #380]	; (8005468 <calWallConrol+0x8e0>)
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 80052f0:	4b5c      	ldr	r3, [pc, #368]	; (8005464 <calWallConrol+0x8dc>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80052f6:	f000 bf55 	b.w	80061a4 <calWallConrol+0x161c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 80052fa:	4b5c      	ldr	r3, [pc, #368]	; (800546c <calWallConrol+0x8e4>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	f000 8751 	beq.w	80061a6 <calWallConrol+0x161e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005304:	4b59      	ldr	r3, [pc, #356]	; (800546c <calWallConrol+0x8e4>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b03      	cmp	r3, #3
 800530a:	f040 874c 	bne.w	80061a6 <calWallConrol+0x161e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 2000) {
 800530e:	4b58      	ldr	r3, [pc, #352]	; (8005470 <calWallConrol+0x8e8>)
 8005310:	edd3 7a00 	vldr	s15, [r3]
 8005314:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005474 <calWallConrol+0x8ec>
 8005318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005320:	dd05      	ble.n	800532e <calWallConrol+0x7a6>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 2000;
 8005322:	4b55      	ldr	r3, [pc, #340]	; (8005478 <calWallConrol+0x8f0>)
 8005324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 2000;
 8005328:	4b54      	ldr	r3, [pc, #336]	; (800547c <calWallConrol+0x8f4>)
 800532a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800532c:	e024      	b.n	8005378 <calWallConrol+0x7f0>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 800532e:	4b50      	ldr	r3, [pc, #320]	; (8005470 <calWallConrol+0x8e8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fb f930 	bl	8000598 <__aeabi_f2d>
 8005338:	a341      	add	r3, pc, #260	; (adr r3, 8005440 <calWallConrol+0x8b8>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fb f983 	bl	8000648 <__aeabi_dmul>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb fc55 	bl	8000bf8 <__aeabi_d2f>
 800534e:	4603      	mov	r3, r0
 8005350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 8005354:	4b46      	ldr	r3, [pc, #280]	; (8005470 <calWallConrol+0x8e8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f7fb f91d 	bl	8000598 <__aeabi_f2d>
 800535e:	a33a      	add	r3, pc, #232	; (adr r3, 8005448 <calWallConrol+0x8c0>)
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f7fb f970 	bl	8000648 <__aeabi_dmul>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4610      	mov	r0, r2
 800536e:	4619      	mov	r1, r3
 8005370:	f7fb fc42 	bl	8000bf8 <__aeabi_d2f>
 8005374:	4603      	mov	r3, r0
 8005376:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005378:	4b41      	ldr	r3, [pc, #260]	; (8005480 <calWallConrol+0x8f8>)
 800537a:	edd3 7a00 	vldr	s15, [r3]
 800537e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538a:	dd12      	ble.n	80053b2 <calWallConrol+0x82a>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 800538c:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <calWallConrol+0x8f8>)
 800538e:	edd3 7a00 	vldr	s15, [r3]
 8005392:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539e:	d808      	bhi.n	80053b2 <calWallConrol+0x82a>
			coefficientR[0] = COEFFICIENT_R0_0;
 80053a0:	4b38      	ldr	r3, [pc, #224]	; (8005484 <calWallConrol+0x8fc>)
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 80053a4:	4b38      	ldr	r3, [pc, #224]	; (8005488 <calWallConrol+0x900>)
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 80053a8:	4b38      	ldr	r3, [pc, #224]	; (800548c <calWallConrol+0x904>)
 80053aa:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 80053ac:	4b38      	ldr	r3, [pc, #224]	; (8005490 <calWallConrol+0x908>)
 80053ae:	657b      	str	r3, [r7, #84]	; 0x54
 80053b0:	e0a5      	b.n	80054fe <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 80053b2:	4b33      	ldr	r3, [pc, #204]	; (8005480 <calWallConrol+0x8f8>)
 80053b4:	edd3 7a00 	vldr	s15, [r3]
 80053b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005494 <calWallConrol+0x90c>
 80053bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c4:	dd12      	ble.n	80053ec <calWallConrol+0x864>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 80053c6:	4b2e      	ldr	r3, [pc, #184]	; (8005480 <calWallConrol+0x8f8>)
 80053c8:	edd3 7a00 	vldr	s15, [r3]
 80053cc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005498 <calWallConrol+0x910>
 80053d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d8:	d808      	bhi.n	80053ec <calWallConrol+0x864>
			coefficientR[0] = COEFFICIENT_R1_0;
 80053da:	4b30      	ldr	r3, [pc, #192]	; (800549c <calWallConrol+0x914>)
 80053dc:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 80053de:	4b30      	ldr	r3, [pc, #192]	; (80054a0 <calWallConrol+0x918>)
 80053e0:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 80053e2:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <calWallConrol+0x91c>)
 80053e4:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 80053e6:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <calWallConrol+0x920>)
 80053e8:	657b      	str	r3, [r7, #84]	; 0x54
 80053ea:	e088      	b.n	80054fe <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 80053ec:	4b24      	ldr	r3, [pc, #144]	; (8005480 <calWallConrol+0x8f8>)
 80053ee:	edd3 7a00 	vldr	s15, [r3]
 80053f2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80054ac <calWallConrol+0x924>
 80053f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	dd12      	ble.n	8005426 <calWallConrol+0x89e>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005400:	4b1f      	ldr	r3, [pc, #124]	; (8005480 <calWallConrol+0x8f8>)
 8005402:	edd3 7a00 	vldr	s15, [r3]
 8005406:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80054b0 <calWallConrol+0x928>
 800540a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	d808      	bhi.n	8005426 <calWallConrol+0x89e>
			coefficientR[0] = COEFFICIENT_R2_0;
 8005414:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <calWallConrol+0x92c>)
 8005416:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005418:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <calWallConrol+0x930>)
 800541a:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <calWallConrol+0x934>)
 800541e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <calWallConrol+0x938>)
 8005422:	657b      	str	r3, [r7, #84]	; 0x54
 8005424:	e06b      	b.n	80054fe <calWallConrol+0x976>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <calWallConrol+0x93c>)
 8005428:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800542c:	2b5a      	cmp	r3, #90	; 0x5a
 800542e:	dd4d      	ble.n	80054cc <calWallConrol+0x944>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <calWallConrol+0x940>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	b2da      	uxtb	r2, r3
 800543a:	4b23      	ldr	r3, [pc, #140]	; (80054c8 <calWallConrol+0x940>)
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e04c      	b.n	80054da <calWallConrol+0x952>
 8005440:	66666666 	.word	0x66666666
 8005444:	3fee6666 	.word	0x3fee6666
 8005448:	47ae147b 	.word	0x47ae147b
 800544c:	bfb47ae1 	.word	0xbfb47ae1
 8005450:	2000056c 	.word	0x2000056c
 8005454:	44d2a000 	.word	0x44d2a000
 8005458:	44b56000 	.word	0x44b56000
 800545c:	20000448 	.word	0x20000448
 8005460:	403e0000 	.word	0x403e0000
 8005464:	20000595 	.word	0x20000595
 8005468:	20000544 	.word	0x20000544
 800546c:	20000590 	.word	0x20000590
 8005470:	200004d8 	.word	0x200004d8
 8005474:	44fa0000 	.word	0x44fa0000
 8005478:	44ed8000 	.word	0x44ed8000
 800547c:	c3200000 	.word	0xc3200000
 8005480:	200005dc 	.word	0x200005dc
 8005484:	4414c13c 	.word	0x4414c13c
 8005488:	421e1fdd 	.word	0x421e1fdd
 800548c:	beb05045 	.word	0xbeb05045
 8005490:	3e051eb8 	.word	0x3e051eb8
 8005494:	420c0000 	.word	0x420c0000
 8005498:	42700000 	.word	0x42700000
 800549c:	45b20ce1 	.word	0x45b20ce1
 80054a0:	c393746d 	.word	0xc393746d
 80054a4:	40afa404 	.word	0x40afa404
 80054a8:	bd0f0328 	.word	0xbd0f0328
 80054ac:	42c80000 	.word	0x42c80000
 80054b0:	42f00000 	.word	0x42f00000
 80054b4:	46e1460a 	.word	0x46e1460a
 80054b8:	c43ee954 	.word	0xc43ee954
 80054bc:	40d673d9 	.word	0x40d673d9
 80054c0:	bc9d4952 	.word	0xbc9d4952
 80054c4:	200002b8 	.word	0x200002b8
 80054c8:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80054cc:	4b79      	ldr	r3, [pc, #484]	; (80056b4 <calWallConrol+0xb2c>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f023 0302 	bic.w	r3, r3, #2
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b77      	ldr	r3, [pc, #476]	; (80056b4 <calWallConrol+0xb2c>)
 80054d8:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 80054da:	4b77      	ldr	r3, [pc, #476]	; (80056b8 <calWallConrol+0xb30>)
 80054dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80054e0:	ee07 3a90 	vmov	s15, r3
 80054e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 80054fe:	4b6f      	ldr	r3, [pc, #444]	; (80056bc <calWallConrol+0xb34>)
 8005500:	edd3 7a00 	vldr	s15, [r3]
 8005504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800550c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005510:	dd12      	ble.n	8005538 <calWallConrol+0x9b0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 8005512:	4b6a      	ldr	r3, [pc, #424]	; (80056bc <calWallConrol+0xb34>)
 8005514:	edd3 7a00 	vldr	s15, [r3]
 8005518:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800551c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005524:	d808      	bhi.n	8005538 <calWallConrol+0x9b0>
			coefficientL[0] = COEFFICIENT_L0_0;
 8005526:	4b66      	ldr	r3, [pc, #408]	; (80056c0 <calWallConrol+0xb38>)
 8005528:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 800552a:	4b66      	ldr	r3, [pc, #408]	; (80056c4 <calWallConrol+0xb3c>)
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 800552e:	4b66      	ldr	r3, [pc, #408]	; (80056c8 <calWallConrol+0xb40>)
 8005530:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 8005532:	4b66      	ldr	r3, [pc, #408]	; (80056cc <calWallConrol+0xb44>)
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
 8005536:	e05d      	b.n	80055f4 <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 8005538:	4b60      	ldr	r3, [pc, #384]	; (80056bc <calWallConrol+0xb34>)
 800553a:	edd3 7a00 	vldr	s15, [r3]
 800553e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80056d0 <calWallConrol+0xb48>
 8005542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554a:	dd12      	ble.n	8005572 <calWallConrol+0x9ea>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 800554c:	4b5b      	ldr	r3, [pc, #364]	; (80056bc <calWallConrol+0xb34>)
 800554e:	edd3 7a00 	vldr	s15, [r3]
 8005552:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80056d4 <calWallConrol+0xb4c>
 8005556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	d808      	bhi.n	8005572 <calWallConrol+0x9ea>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005560:	4b5d      	ldr	r3, [pc, #372]	; (80056d8 <calWallConrol+0xb50>)
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 8005564:	4b5d      	ldr	r3, [pc, #372]	; (80056dc <calWallConrol+0xb54>)
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005568:	4b5d      	ldr	r3, [pc, #372]	; (80056e0 <calWallConrol+0xb58>)
 800556a:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 800556c:	4b5d      	ldr	r3, [pc, #372]	; (80056e4 <calWallConrol+0xb5c>)
 800556e:	647b      	str	r3, [r7, #68]	; 0x44
 8005570:	e040      	b.n	80055f4 <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 8005572:	4b52      	ldr	r3, [pc, #328]	; (80056bc <calWallConrol+0xb34>)
 8005574:	edd3 7a00 	vldr	s15, [r3]
 8005578:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80056e8 <calWallConrol+0xb60>
 800557c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005584:	dd12      	ble.n	80055ac <calWallConrol+0xa24>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 8005586:	4b4d      	ldr	r3, [pc, #308]	; (80056bc <calWallConrol+0xb34>)
 8005588:	edd3 7a00 	vldr	s15, [r3]
 800558c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80056ec <calWallConrol+0xb64>
 8005590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005598:	d808      	bhi.n	80055ac <calWallConrol+0xa24>
			coefficientL[0] = COEFFICIENT_L2_0;
 800559a:	4b55      	ldr	r3, [pc, #340]	; (80056f0 <calWallConrol+0xb68>)
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 800559e:	4b55      	ldr	r3, [pc, #340]	; (80056f4 <calWallConrol+0xb6c>)
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 80055a2:	4b55      	ldr	r3, [pc, #340]	; (80056f8 <calWallConrol+0xb70>)
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 80055a6:	4b55      	ldr	r3, [pc, #340]	; (80056fc <calWallConrol+0xb74>)
 80055a8:	647b      	str	r3, [r7, #68]	; 0x44
 80055aa:	e023      	b.n	80055f4 <calWallConrol+0xa6c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 80055ac:	4b42      	ldr	r3, [pc, #264]	; (80056b8 <calWallConrol+0xb30>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b5a      	cmp	r3, #90	; 0x5a
 80055b2:	dd07      	ble.n	80055c4 <calWallConrol+0xa3c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80055b4:	4b3f      	ldr	r3, [pc, #252]	; (80056b4 <calWallConrol+0xb2c>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	4b3d      	ldr	r3, [pc, #244]	; (80056b4 <calWallConrol+0xb2c>)
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e006      	b.n	80055d2 <calWallConrol+0xa4a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80055c4:	4b3b      	ldr	r3, [pc, #236]	; (80056b4 <calWallConrol+0xb2c>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	4b39      	ldr	r3, [pc, #228]	; (80056b4 <calWallConrol+0xb2c>)
 80055d0:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 80055d2:	4b39      	ldr	r3, [pc, #228]	; (80056b8 <calWallConrol+0xb30>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055de:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 80055f4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 80055f8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80055fc:	4b40      	ldr	r3, [pc, #256]	; (8005700 <calWallConrol+0xb78>)
 80055fe:	edd3 7a00 	vldr	s15, [r3]
 8005602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005606:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800560a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800560e:	4b3c      	ldr	r3, [pc, #240]	; (8005700 <calWallConrol+0xb78>)
 8005610:	edd3 7a00 	vldr	s15, [r3]
 8005614:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005618:	4b39      	ldr	r3, [pc, #228]	; (8005700 <calWallConrol+0xb78>)
 800561a:	edd3 7a00 	vldr	s15, [r3]
 800561e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8005622:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 8005626:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800562a:	4b35      	ldr	r3, [pc, #212]	; (8005700 <calWallConrol+0xb78>)
 800562c:	edd3 7a00 	vldr	s15, [r3]
 8005630:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005634:	4b32      	ldr	r3, [pc, #200]	; (8005700 <calWallConrol+0xb78>)
 8005636:	edd3 7a00 	vldr	s15, [r3]
 800563a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 800563e:	4b30      	ldr	r3, [pc, #192]	; (8005700 <calWallConrol+0xb78>)
 8005640:	edd3 7a00 	vldr	s15, [r3]
 8005644:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 8005648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800564c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 8005650:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 8005654:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005658:	4b18      	ldr	r3, [pc, #96]	; (80056bc <calWallConrol+0xb34>)
 800565a:	edd3 7a00 	vldr	s15, [r3]
 800565e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005662:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005666:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <calWallConrol+0xb34>)
 800566c:	edd3 7a00 	vldr	s15, [r3]
 8005670:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005674:	4b11      	ldr	r3, [pc, #68]	; (80056bc <calWallConrol+0xb34>)
 8005676:	edd3 7a00 	vldr	s15, [r3]
 800567a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 800567e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 8005682:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <calWallConrol+0xb34>)
 8005688:	edd3 7a00 	vldr	s15, [r3]
 800568c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <calWallConrol+0xb34>)
 8005692:	edd3 7a00 	vldr	s15, [r3]
 8005696:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <calWallConrol+0xb34>)
 800569c:	edd3 7a00 	vldr	s15, [r3]
 80056a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 80056a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056a8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 80056ac:	230b      	movs	r3, #11
 80056ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80056b0:	e041      	b.n	8005736 <calWallConrol+0xbae>
 80056b2:	bf00      	nop
 80056b4:	20000593 	.word	0x20000593
 80056b8:	200002b8 	.word	0x200002b8
 80056bc:	200005e0 	.word	0x200005e0
 80056c0:	4423732b 	.word	0x4423732b
 80056c4:	421079e6 	.word	0x421079e6
 80056c8:	bdf88e7f 	.word	0xbdf88e7f
 80056cc:	3e11c34f 	.word	0x3e11c34f
 80056d0:	420c0000 	.word	0x420c0000
 80056d4:	42700000 	.word	0x42700000
 80056d8:	45e16e07 	.word	0x45e16e07
 80056dc:	c39f206f 	.word	0xc39f206f
 80056e0:	40a20d2f 	.word	0x40a20d2f
 80056e4:	bce5a3f5 	.word	0xbce5a3f5
 80056e8:	42c80000 	.word	0x42c80000
 80056ec:	42f00000 	.word	0x42f00000
 80056f0:	459f8cbb 	.word	0x459f8cbb
 80056f4:	c2f1ade0 	.word	0xc2f1ade0
 80056f8:	3f6ae698 	.word	0x3f6ae698
 80056fc:	bafba882 	.word	0xbafba882
 8005700:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8005704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005706:	3b01      	subs	r3, #1
 8005708:	4a9c      	ldr	r2, [pc, #624]	; (800597c <calWallConrol+0xdf4>)
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	499a      	ldr	r1, [pc, #616]	; (800597c <calWallConrol+0xdf4>)
 8005712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 800571a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800571c:	3b01      	subs	r3, #1
 800571e:	4a98      	ldr	r2, [pc, #608]	; (8005980 <calWallConrol+0xdf8>)
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4996      	ldr	r1, [pc, #600]	; (8005980 <calWallConrol+0xdf8>)
 8005728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005732:	3b01      	subs	r3, #1
 8005734:	67bb      	str	r3, [r7, #120]	; 0x78
 8005736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005738:	2b00      	cmp	r3, #0
 800573a:	dce3      	bgt.n	8005704 <calWallConrol+0xb7c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 800573c:	4a8f      	ldr	r2, [pc, #572]	; (800597c <calWallConrol+0xdf4>)
 800573e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005740:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8005742:	4a8f      	ldr	r2, [pc, #572]	; (8005980 <calWallConrol+0xdf8>)
 8005744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005746:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005748:	4b8c      	ldr	r3, [pc, #560]	; (800597c <calWallConrol+0xdf4>)
 800574a:	ed93 7a00 	vldr	s14, [r3]
 800574e:	4b8b      	ldr	r3, [pc, #556]	; (800597c <calWallConrol+0xdf4>)
 8005750:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005758:	4b8a      	ldr	r3, [pc, #552]	; (8005984 <calWallConrol+0xdfc>)
 800575a:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 800575e:	4b88      	ldr	r3, [pc, #544]	; (8005980 <calWallConrol+0xdf8>)
 8005760:	ed93 7a00 	vldr	s14, [r3]
 8005764:	4b86      	ldr	r3, [pc, #536]	; (8005980 <calWallConrol+0xdf8>)
 8005766:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800576a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800576e:	4b86      	ldr	r3, [pc, #536]	; (8005988 <calWallConrol+0xe00>)
 8005770:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005774:	4b85      	ldr	r3, [pc, #532]	; (800598c <calWallConrol+0xe04>)
 8005776:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800577a:	2b5a      	cmp	r3, #90	; 0x5a
 800577c:	dd1a      	ble.n	80057b4 <calWallConrol+0xc2c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800577e:	4b84      	ldr	r3, [pc, #528]	; (8005990 <calWallConrol+0xe08>)
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800578a:	4b7e      	ldr	r3, [pc, #504]	; (8005984 <calWallConrol+0xdfc>)
 800578c:	edd3 7a00 	vldr	s15, [r3]
 8005790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005794:	eef0 7ae7 	vabs.f32	s15, s15
 8005798:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005994 <calWallConrol+0xe0c>
 800579c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a4:	d506      	bpl.n	80057b4 <calWallConrol+0xc2c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80057a6:	4b7c      	ldr	r3, [pc, #496]	; (8005998 <calWallConrol+0xe10>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f043 0302 	orr.w	r3, r3, #2
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	4b79      	ldr	r3, [pc, #484]	; (8005998 <calWallConrol+0xe10>)
 80057b2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 80057b4:	4b75      	ldr	r3, [pc, #468]	; (800598c <calWallConrol+0xe04>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b5a      	cmp	r3, #90	; 0x5a
 80057ba:	dd1a      	ble.n	80057f2 <calWallConrol+0xc6a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80057bc:	4b74      	ldr	r3, [pc, #464]	; (8005990 <calWallConrol+0xe08>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057c8:	4b6f      	ldr	r3, [pc, #444]	; (8005988 <calWallConrol+0xe00>)
 80057ca:	edd3 7a00 	vldr	s15, [r3]
 80057ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057d2:	eef0 7ae7 	vabs.f32	s15, s15
 80057d6:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005994 <calWallConrol+0xe0c>
 80057da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e2:	d506      	bpl.n	80057f2 <calWallConrol+0xc6a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80057e4:	4b6c      	ldr	r3, [pc, #432]	; (8005998 <calWallConrol+0xe10>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	4b6a      	ldr	r3, [pc, #424]	; (8005998 <calWallConrol+0xe10>)
 80057f0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 80057f2:	4b66      	ldr	r3, [pc, #408]	; (800598c <calWallConrol+0xe04>)
 80057f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80057f8:	2b59      	cmp	r3, #89	; 0x59
 80057fa:	dd13      	ble.n	8005824 <calWallConrol+0xc9c>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 80057fc:	4b64      	ldr	r3, [pc, #400]	; (8005990 <calWallConrol+0xe08>)
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005808:	4b5e      	ldr	r3, [pc, #376]	; (8005984 <calWallConrol+0xdfc>)
 800580a:	edd3 7a00 	vldr	s15, [r3]
 800580e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005812:	eef0 7ae7 	vabs.f32	s15, s15
 8005816:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005994 <calWallConrol+0xe0c>
 800581a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005822:	dd06      	ble.n	8005832 <calWallConrol+0xcaa>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005824:	4b5c      	ldr	r3, [pc, #368]	; (8005998 <calWallConrol+0xe10>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f023 0302 	bic.w	r3, r3, #2
 800582c:	b2da      	uxtb	r2, r3
 800582e:	4b5a      	ldr	r3, [pc, #360]	; (8005998 <calWallConrol+0xe10>)
 8005830:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005832:	4b56      	ldr	r3, [pc, #344]	; (800598c <calWallConrol+0xe04>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b59      	cmp	r3, #89	; 0x59
 8005838:	dd13      	ble.n	8005862 <calWallConrol+0xcda>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 800583a:	4b55      	ldr	r3, [pc, #340]	; (8005990 <calWallConrol+0xe08>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005846:	4b50      	ldr	r3, [pc, #320]	; (8005988 <calWallConrol+0xe00>)
 8005848:	edd3 7a00 	vldr	s15, [r3]
 800584c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005850:	eef0 7ae7 	vabs.f32	s15, s15
 8005854:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005994 <calWallConrol+0xe0c>
 8005858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800585c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005860:	dd06      	ble.n	8005870 <calWallConrol+0xce8>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005862:	4b4d      	ldr	r3, [pc, #308]	; (8005998 <calWallConrol+0xe10>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	b2da      	uxtb	r2, r3
 800586c:	4b4a      	ldr	r3, [pc, #296]	; (8005998 <calWallConrol+0xe10>)
 800586e:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005870:	4b49      	ldr	r3, [pc, #292]	; (8005998 <calWallConrol+0xe10>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b03      	cmp	r3, #3
 8005876:	f200 813d 	bhi.w	8005af4 <calWallConrol+0xf6c>
 800587a:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <calWallConrol+0xcf8>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	08005891 	.word	0x08005891
 8005884:	080058e5 	.word	0x080058e5
 8005888:	080059a9 	.word	0x080059a9
 800588c:	08005a3f 	.word	0x08005a3f
		case 0:			//両壁なし
			PID_wall = 0;
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005898:	2000      	movs	r0, #0
 800589a:	f001 faef 	bl	8006e7c <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800589e:	2000      	movs	r0, #0
 80058a0:	f001 fb22 	bl	8006ee8 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 80058a4:	4b39      	ldr	r3, [pc, #228]	; (800598c <calWallConrol+0xe04>)
 80058a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058b2:	4b3a      	ldr	r3, [pc, #232]	; (800599c <calWallConrol+0xe14>)
 80058b4:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 80058b8:	4b34      	ldr	r3, [pc, #208]	; (800598c <calWallConrol+0xe04>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	ee07 3a90 	vmov	s15, r3
 80058c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058c4:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <calWallConrol+0xe18>)
 80058c6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 80058ca:	4b36      	ldr	r3, [pc, #216]	; (80059a4 <calWallConrol+0xe1c>)
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 80058d2:	4b34      	ldr	r3, [pc, #208]	; (80059a4 <calWallConrol+0xe1c>)
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 80058da:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <calWallConrol+0xe1c>)
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
			break;
 80058e2:	e107      	b.n	8005af4 <calWallConrol+0xf6c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 80058e4:	2000      	movs	r0, #0
 80058e6:	f001 fac9 	bl	8006e7c <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 80058ea:	2001      	movs	r0, #1
 80058ec:	f001 fafc 	bl	8006ee8 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 80058f0:	4b26      	ldr	r3, [pc, #152]	; (800598c <calWallConrol+0xe04>)
 80058f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058fe:	4b27      	ldr	r3, [pc, #156]	; (800599c <calWallConrol+0xe14>)
 8005900:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005904:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <calWallConrol+0xe18>)
 8005906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005908:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800590a:	4b20      	ldr	r3, [pc, #128]	; (800598c <calWallConrol+0xe04>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005916:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800591a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800591e:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005922:	4b1a      	ldr	r3, [pc, #104]	; (800598c <calWallConrol+0xe04>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800592e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005932:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <calWallConrol+0xe1c>)
 8005934:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005938:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <calWallConrol+0xe1c>)
 800593a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 800593e:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <calWallConrol+0xe1c>)
 8005940:	edd3 7a01 	vldr	s15, [r3, #4]
 8005944:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005948:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <calWallConrol+0xe1c>)
 800594a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 800594e:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <calWallConrol+0xe1c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <calWallConrol+0xe1c>)
 8005954:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005956:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <calWallConrol+0xe1c>)
 8005958:	ed93 7a00 	vldr	s14, [r3]
 800595c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005960:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <calWallConrol+0xe1c>)
 8005966:	edd3 6a02 	vldr	s13, [r3, #8]
 800596a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800596e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005976:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800597a:	e0bb      	b.n	8005af4 <calWallConrol+0xf6c>
 800597c:	20000608 	.word	0x20000608
 8005980:	20000638 	.word	0x20000638
 8005984:	200006c8 	.word	0x200006c8
 8005988:	200006cc 	.word	0x200006cc
 800598c:	200002b8 	.word	0x200002b8
 8005990:	20000448 	.word	0x20000448
 8005994:	42a00000 	.word	0x42a00000
 8005998:	20000593 	.word	0x20000593
 800599c:	200005ac 	.word	0x200005ac
 80059a0:	200005b0 	.word	0x200005b0
 80059a4:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 80059a8:	2001      	movs	r0, #1
 80059aa:	f001 fa67 	bl	8006e7c <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 80059ae:	2000      	movs	r0, #0
 80059b0:	f001 fa9a 	bl	8006ee8 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80059b4:	4aa4      	ldr	r2, [pc, #656]	; (8005c48 <calWallConrol+0x10c0>)
 80059b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b8:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 80059ba:	4ba4      	ldr	r3, [pc, #656]	; (8005c4c <calWallConrol+0x10c4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059c6:	4ba2      	ldr	r3, [pc, #648]	; (8005c50 <calWallConrol+0x10c8>)
 80059c8:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 80059cc:	4b9f      	ldr	r3, [pc, #636]	; (8005c4c <calWallConrol+0x10c4>)
 80059ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059da:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80059de:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 80059e2:	4b9a      	ldr	r3, [pc, #616]	; (8005c4c <calWallConrol+0x10c4>)
 80059e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 80059f4:	4b97      	ldr	r3, [pc, #604]	; (8005c54 <calWallConrol+0x10cc>)
 80059f6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80059fa:	4b96      	ldr	r3, [pc, #600]	; (8005c54 <calWallConrol+0x10cc>)
 80059fc:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005a00:	4b94      	ldr	r3, [pc, #592]	; (8005c54 <calWallConrol+0x10cc>)
 8005a02:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a06:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005a0a:	4b92      	ldr	r3, [pc, #584]	; (8005c54 <calWallConrol+0x10cc>)
 8005a0c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005a10:	4b90      	ldr	r3, [pc, #576]	; (8005c54 <calWallConrol+0x10cc>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a8f      	ldr	r2, [pc, #572]	; (8005c54 <calWallConrol+0x10cc>)
 8005a16:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005a18:	4b8e      	ldr	r3, [pc, #568]	; (8005c54 <calWallConrol+0x10cc>)
 8005a1a:	ed93 7a00 	vldr	s14, [r3]
 8005a1e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005a22:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005a26:	4b8b      	ldr	r3, [pc, #556]	; (8005c54 <calWallConrol+0x10cc>)
 8005a28:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a2c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a38:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005a3c:	e05a      	b.n	8005af4 <calWallConrol+0xf6c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005a3e:	2001      	movs	r0, #1
 8005a40:	f001 fa1c 	bl	8006e7c <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005a44:	2001      	movs	r0, #1
 8005a46:	f001 fa4f 	bl	8006ee8 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005a4a:	4a7f      	ldr	r2, [pc, #508]	; (8005c48 <calWallConrol+0x10c0>)
 8005a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a4e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005a50:	4a7f      	ldr	r2, [pc, #508]	; (8005c50 <calWallConrol+0x10c8>)
 8005a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a54:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005a56:	4b7d      	ldr	r3, [pc, #500]	; (8005c4c <calWallConrol+0x10c4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a62:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a6a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005a6e:	4b77      	ldr	r3, [pc, #476]	; (8005c4c <calWallConrol+0x10c4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005a7e:	4b73      	ldr	r3, [pc, #460]	; (8005c4c <calWallConrol+0x10c4>)
 8005a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a84:	ee07 3a90 	vmov	s15, r3
 8005a88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a8c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005a90:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005a94:	4b6d      	ldr	r3, [pc, #436]	; (8005c4c <calWallConrol+0x10c4>)
 8005a96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005aa2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005aaa:	4b6a      	ldr	r3, [pc, #424]	; (8005c54 <calWallConrol+0x10cc>)
 8005aac:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005ab0:	4b68      	ldr	r3, [pc, #416]	; (8005c54 <calWallConrol+0x10cc>)
 8005ab2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005ab6:	4b67      	ldr	r3, [pc, #412]	; (8005c54 <calWallConrol+0x10cc>)
 8005ab8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005abc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005ac0:	4b64      	ldr	r3, [pc, #400]	; (8005c54 <calWallConrol+0x10cc>)
 8005ac2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005ac6:	4b63      	ldr	r3, [pc, #396]	; (8005c54 <calWallConrol+0x10cc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a62      	ldr	r2, [pc, #392]	; (8005c54 <calWallConrol+0x10cc>)
 8005acc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005ace:	4b61      	ldr	r3, [pc, #388]	; (8005c54 <calWallConrol+0x10cc>)
 8005ad0:	ed93 7a00 	vldr	s14, [r3]
 8005ad4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005adc:	4b5d      	ldr	r3, [pc, #372]	; (8005c54 <calWallConrol+0x10cc>)
 8005ade:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ae2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aee:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005af2:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005af4:	4b58      	ldr	r3, [pc, #352]	; (8005c58 <calWallConrol+0x10d0>)
 8005af6:	edd3 7a00 	vldr	s15, [r3]
 8005afa:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005c5c <calWallConrol+0x10d4>
 8005afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b06:	dd04      	ble.n	8005b12 <calWallConrol+0xf8a>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005b08:	4b55      	ldr	r3, [pc, #340]	; (8005c60 <calWallConrol+0x10d8>)
 8005b0a:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 8005b0c:	4b55      	ldr	r3, [pc, #340]	; (8005c64 <calWallConrol+0x10dc>)
 8005b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b10:	e023      	b.n	8005b5a <calWallConrol+0xfd2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005b12:	4b51      	ldr	r3, [pc, #324]	; (8005c58 <calWallConrol+0x10d0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fa fd3e 	bl	8000598 <__aeabi_f2d>
 8005b1c:	a346      	add	r3, pc, #280	; (adr r3, 8005c38 <calWallConrol+0x10b0>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fd91 	bl	8000648 <__aeabi_dmul>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f7fb f863 	bl	8000bf8 <__aeabi_d2f>
 8005b32:	4603      	mov	r3, r0
 8005b34:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005b36:	4b48      	ldr	r3, [pc, #288]	; (8005c58 <calWallConrol+0x10d0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fa fd2c 	bl	8000598 <__aeabi_f2d>
 8005b40:	a33f      	add	r3, pc, #252	; (adr r3, 8005c40 <calWallConrol+0x10b8>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f7fa fd7f 	bl	8000648 <__aeabi_dmul>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4610      	mov	r0, r2
 8005b50:	4619      	mov	r1, r3
 8005b52:	f7fb f851 	bl	8000bf8 <__aeabi_d2f>
 8005b56:	4603      	mov	r3, r0
 8005b58:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005b5a:	4b43      	ldr	r3, [pc, #268]	; (8005c68 <calWallConrol+0x10e0>)
 8005b5c:	edd3 7a00 	vldr	s15, [r3]
 8005b60:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6c:	dd12      	ble.n	8005b94 <calWallConrol+0x100c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005b6e:	4b3e      	ldr	r3, [pc, #248]	; (8005c68 <calWallConrol+0x10e0>)
 8005b70:	edd3 7a00 	vldr	s15, [r3]
 8005b74:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005c6c <calWallConrol+0x10e4>
 8005b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b80:	d808      	bhi.n	8005b94 <calWallConrol+0x100c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005b82:	4b3b      	ldr	r3, [pc, #236]	; (8005c70 <calWallConrol+0x10e8>)
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005b86:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <calWallConrol+0x10ec>)
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005b8a:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <calWallConrol+0x10f0>)
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <calWallConrol+0x10f4>)
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
 8005b92:	e025      	b.n	8005be0 <calWallConrol+0x1058>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005b94:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <calWallConrol+0x10c4>)
 8005b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b9a:	2b82      	cmp	r3, #130	; 0x82
 8005b9c:	dd07      	ble.n	8005bae <calWallConrol+0x1026>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005b9e:	4b38      	ldr	r3, [pc, #224]	; (8005c80 <calWallConrol+0x10f8>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f043 0302 	orr.w	r3, r3, #2
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	4b35      	ldr	r3, [pc, #212]	; (8005c80 <calWallConrol+0x10f8>)
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	e006      	b.n	8005bbc <calWallConrol+0x1034>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005bae:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <calWallConrol+0x10f8>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f023 0302 	bic.w	r3, r3, #2
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <calWallConrol+0x10f8>)
 8005bba:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005bbc:	4b23      	ldr	r3, [pc, #140]	; (8005c4c <calWallConrol+0x10c4>)
 8005bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005be0:	4b28      	ldr	r3, [pc, #160]	; (8005c84 <calWallConrol+0x10fc>)
 8005be2:	edd3 7a00 	vldr	s15, [r3]
 8005be6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf2:	dd12      	ble.n	8005c1a <calWallConrol+0x1092>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005bf4:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <calWallConrol+0x10fc>)
 8005bf6:	edd3 7a00 	vldr	s15, [r3]
 8005bfa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005c6c <calWallConrol+0x10e4>
 8005bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c06:	d808      	bhi.n	8005c1a <calWallConrol+0x1092>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005c08:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <calWallConrol+0x1100>)
 8005c0a:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005c0c:	4b1f      	ldr	r3, [pc, #124]	; (8005c8c <calWallConrol+0x1104>)
 8005c0e:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005c10:	4b1f      	ldr	r3, [pc, #124]	; (8005c90 <calWallConrol+0x1108>)
 8005c12:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005c14:	4b1f      	ldr	r3, [pc, #124]	; (8005c94 <calWallConrol+0x110c>)
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
 8005c18:	e056      	b.n	8005cc8 <calWallConrol+0x1140>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <calWallConrol+0x10c4>)
 8005c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1e:	2b82      	cmp	r3, #130	; 0x82
 8005c20:	dd3a      	ble.n	8005c98 <calWallConrol+0x1110>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005c22:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <calWallConrol+0x10f8>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <calWallConrol+0x10f8>)
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e039      	b.n	8005ca6 <calWallConrol+0x111e>
 8005c32:	bf00      	nop
 8005c34:	f3af 8000 	nop.w
 8005c38:	9999999a 	.word	0x9999999a
 8005c3c:	3fe99999 	.word	0x3fe99999
 8005c40:	47ae147b 	.word	0x47ae147b
 8005c44:	bfb47ae1 	.word	0xbfb47ae1
 8005c48:	200005ac 	.word	0x200005ac
 8005c4c:	200002b8 	.word	0x200002b8
 8005c50:	200005b0 	.word	0x200005b0
 8005c54:	20000578 	.word	0x20000578
 8005c58:	200004d8 	.word	0x200004d8
 8005c5c:	44fa0000 	.word	0x44fa0000
 8005c60:	44c80000 	.word	0x44c80000
 8005c64:	c3200000 	.word	0xc3200000
 8005c68:	200005dc 	.word	0x200005dc
 8005c6c:	42a00000 	.word	0x42a00000
 8005c70:	438d4c33 	.word	0x438d4c33
 8005c74:	bfa66ddb 	.word	0xbfa66ddb
 8005c78:	3d2e0737 	.word	0x3d2e0737
 8005c7c:	39c521de 	.word	0x39c521de
 8005c80:	20000594 	.word	0x20000594
 8005c84:	200005e0 	.word	0x200005e0
 8005c88:	43774cf8 	.word	0x43774cf8
 8005c8c:	3e27920b 	.word	0x3e27920b
 8005c90:	bd0ad094 	.word	0xbd0ad094
 8005c94:	3a5f1fa4 	.word	0x3a5f1fa4
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005c98:	4bb5      	ldr	r3, [pc, #724]	; (8005f70 <calWallConrol+0x13e8>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	4bb3      	ldr	r3, [pc, #716]	; (8005f70 <calWallConrol+0x13e8>)
 8005ca4:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005ca6:	4bb3      	ldr	r3, [pc, #716]	; (8005f74 <calWallConrol+0x13ec>)
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb2:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005cc8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005ccc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005cd0:	4ba9      	ldr	r3, [pc, #676]	; (8005f78 <calWallConrol+0x13f0>)
 8005cd2:	edd3 7a00 	vldr	s15, [r3]
 8005cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cda:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005cde:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005ce2:	4ba5      	ldr	r3, [pc, #660]	; (8005f78 <calWallConrol+0x13f0>)
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005cec:	4ba2      	ldr	r3, [pc, #648]	; (8005f78 <calWallConrol+0x13f0>)
 8005cee:	edd3 7a00 	vldr	s15, [r3]
 8005cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005cfa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005cfe:	4b9e      	ldr	r3, [pc, #632]	; (8005f78 <calWallConrol+0x13f0>)
 8005d00:	edd3 7a00 	vldr	s15, [r3]
 8005d04:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005d08:	4b9b      	ldr	r3, [pc, #620]	; (8005f78 <calWallConrol+0x13f0>)
 8005d0a:	edd3 7a00 	vldr	s15, [r3]
 8005d0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005d12:	4b99      	ldr	r3, [pc, #612]	; (8005f78 <calWallConrol+0x13f0>)
 8005d14:	edd3 7a00 	vldr	s15, [r3]
 8005d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d20:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005d24:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d2c:	4b93      	ldr	r3, [pc, #588]	; (8005f7c <calWallConrol+0x13f4>)
 8005d2e:	edd3 7a00 	vldr	s15, [r3]
 8005d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d36:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005d3a:	edd7 6a08 	vldr	s13, [r7, #32]
 8005d3e:	4b8f      	ldr	r3, [pc, #572]	; (8005f7c <calWallConrol+0x13f4>)
 8005d40:	edd3 7a00 	vldr	s15, [r3]
 8005d44:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005d48:	4b8c      	ldr	r3, [pc, #560]	; (8005f7c <calWallConrol+0x13f4>)
 8005d4a:	edd3 7a00 	vldr	s15, [r3]
 8005d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005d52:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005d56:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005d5a:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <calWallConrol+0x13f4>)
 8005d5c:	edd3 7a00 	vldr	s15, [r3]
 8005d60:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005d64:	4b85      	ldr	r3, [pc, #532]	; (8005f7c <calWallConrol+0x13f4>)
 8005d66:	edd3 7a00 	vldr	s15, [r3]
 8005d6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005d6e:	4b83      	ldr	r3, [pc, #524]	; (8005f7c <calWallConrol+0x13f4>)
 8005d70:	edd3 7a00 	vldr	s15, [r3]
 8005d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d7c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005d80:	230b      	movs	r3, #11
 8005d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d84:	e018      	b.n	8005db8 <calWallConrol+0x1230>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	4a7d      	ldr	r2, [pc, #500]	; (8005f80 <calWallConrol+0x13f8>)
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	497b      	ldr	r1, [pc, #492]	; (8005f80 <calWallConrol+0x13f8>)
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	4a78      	ldr	r2, [pc, #480]	; (8005f84 <calWallConrol+0x13fc>)
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4976      	ldr	r1, [pc, #472]	; (8005f84 <calWallConrol+0x13fc>)
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db4:	3b01      	subs	r3, #1
 8005db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	dce3      	bgt.n	8005d86 <calWallConrol+0x11fe>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005dbe:	4a70      	ldr	r2, [pc, #448]	; (8005f80 <calWallConrol+0x13f8>)
 8005dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc2:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005dc4:	4a6f      	ldr	r2, [pc, #444]	; (8005f84 <calWallConrol+0x13fc>)
 8005dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dc8:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005dca:	4b6d      	ldr	r3, [pc, #436]	; (8005f80 <calWallConrol+0x13f8>)
 8005dcc:	ed93 7a00 	vldr	s14, [r3]
 8005dd0:	4b6b      	ldr	r3, [pc, #428]	; (8005f80 <calWallConrol+0x13f8>)
 8005dd2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dda:	4b6b      	ldr	r3, [pc, #428]	; (8005f88 <calWallConrol+0x1400>)
 8005ddc:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005de0:	4b68      	ldr	r3, [pc, #416]	; (8005f84 <calWallConrol+0x13fc>)
 8005de2:	ed93 7a00 	vldr	s14, [r3]
 8005de6:	4b67      	ldr	r3, [pc, #412]	; (8005f84 <calWallConrol+0x13fc>)
 8005de8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df0:	4b66      	ldr	r3, [pc, #408]	; (8005f8c <calWallConrol+0x1404>)
 8005df2:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005df6:	4b5f      	ldr	r3, [pc, #380]	; (8005f74 <calWallConrol+0x13ec>)
 8005df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dfc:	2b82      	cmp	r3, #130	; 0x82
 8005dfe:	dd1a      	ble.n	8005e36 <calWallConrol+0x12ae>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005e00:	4b63      	ldr	r3, [pc, #396]	; (8005f90 <calWallConrol+0x1408>)
 8005e02:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e0c:	4b5e      	ldr	r3, [pc, #376]	; (8005f88 <calWallConrol+0x1400>)
 8005e0e:	edd3 7a00 	vldr	s15, [r3]
 8005e12:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005e16:	eef0 7ae7 	vabs.f32	s15, s15
 8005e1a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005f94 <calWallConrol+0x140c>
 8005e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e26:	d506      	bpl.n	8005e36 <calWallConrol+0x12ae>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005e28:	4b51      	ldr	r3, [pc, #324]	; (8005f70 <calWallConrol+0x13e8>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b4f      	ldr	r3, [pc, #316]	; (8005f70 <calWallConrol+0x13e8>)
 8005e34:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005e36:	4b4f      	ldr	r3, [pc, #316]	; (8005f74 <calWallConrol+0x13ec>)
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	2b82      	cmp	r3, #130	; 0x82
 8005e3c:	dd1a      	ble.n	8005e74 <calWallConrol+0x12ec>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005e3e:	4b54      	ldr	r3, [pc, #336]	; (8005f90 <calWallConrol+0x1408>)
 8005e40:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e4a:	4b50      	ldr	r3, [pc, #320]	; (8005f8c <calWallConrol+0x1404>)
 8005e4c:	edd3 7a00 	vldr	s15, [r3]
 8005e50:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005e54:	eef0 7ae7 	vabs.f32	s15, s15
 8005e58:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005f94 <calWallConrol+0x140c>
 8005e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e64:	d506      	bpl.n	8005e74 <calWallConrol+0x12ec>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005e66:	4b42      	ldr	r3, [pc, #264]	; (8005f70 <calWallConrol+0x13e8>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <calWallConrol+0x13e8>)
 8005e72:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005e74:	4b3f      	ldr	r3, [pc, #252]	; (8005f74 <calWallConrol+0x13ec>)
 8005e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e7a:	2b81      	cmp	r3, #129	; 0x81
 8005e7c:	dd13      	ble.n	8005ea6 <calWallConrol+0x131e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005e7e:	4b44      	ldr	r3, [pc, #272]	; (8005f90 <calWallConrol+0x1408>)
 8005e80:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8a:	4b3f      	ldr	r3, [pc, #252]	; (8005f88 <calWallConrol+0x1400>)
 8005e8c:	edd3 7a00 	vldr	s15, [r3]
 8005e90:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005e94:	eef0 7ae7 	vabs.f32	s15, s15
 8005e98:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005f94 <calWallConrol+0x140c>
 8005e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	dd06      	ble.n	8005eb4 <calWallConrol+0x132c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005ea6:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <calWallConrol+0x13e8>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f023 0302 	bic.w	r3, r3, #2
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <calWallConrol+0x13e8>)
 8005eb2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8005eb4:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <calWallConrol+0x13ec>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	2b81      	cmp	r3, #129	; 0x81
 8005eba:	dd13      	ble.n	8005ee4 <calWallConrol+0x135c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005ebc:	4b34      	ldr	r3, [pc, #208]	; (8005f90 <calWallConrol+0x1408>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005ec0:	ee07 3a90 	vmov	s15, r3
 8005ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ec8:	4b30      	ldr	r3, [pc, #192]	; (8005f8c <calWallConrol+0x1404>)
 8005eca:	edd3 7a00 	vldr	s15, [r3]
 8005ece:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005ed2:	eef0 7ae7 	vabs.f32	s15, s15
 8005ed6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005f94 <calWallConrol+0x140c>
 8005eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee2:	dd06      	ble.n	8005ef2 <calWallConrol+0x136a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005ee4:	4b22      	ldr	r3, [pc, #136]	; (8005f70 <calWallConrol+0x13e8>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <calWallConrol+0x13e8>)
 8005ef0:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8005ef2:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <calWallConrol+0x13e8>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	f200 8155 	bhi.w	80061a6 <calWallConrol+0x161e>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <calWallConrol+0x137c>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f15 	.word	0x08005f15
 8005f08:	08005fa9 	.word	0x08005fa9
 8005f0c:	08006049 	.word	0x08006049
 8005f10:	080060e7 	.word	0x080060e7
		case 0:			//両壁なし
			PID_wall += 0;
 8005f14:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005f18:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005f98 <calWallConrol+0x1410>
 8005f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f20:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8005f24:	2000      	movs	r0, #0
 8005f26:	f000 ffbb 	bl	8006ea0 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f000 ffca 	bl	8006ec4 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005f30:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <calWallConrol+0x13ec>)
 8005f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f3e:	4b17      	ldr	r3, [pc, #92]	; (8005f9c <calWallConrol+0x1414>)
 8005f40:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <calWallConrol+0x13ec>)
 8005f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f48:	ee07 3a90 	vmov	s15, r3
 8005f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f50:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <calWallConrol+0x1418>)
 8005f52:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8005f56:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <calWallConrol+0x141c>)
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8005f5e:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <calWallConrol+0x141c>)
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <calWallConrol+0x141c>)
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	605a      	str	r2, [r3, #4]
			break;
 8005f6e:	e11a      	b.n	80061a6 <calWallConrol+0x161e>
 8005f70:	20000594 	.word	0x20000594
 8005f74:	200002b8 	.word	0x200002b8
 8005f78:	200005dc 	.word	0x200005dc
 8005f7c:	200005e0 	.word	0x200005e0
 8005f80:	20000668 	.word	0x20000668
 8005f84:	20000698 	.word	0x20000698
 8005f88:	200006d0 	.word	0x200006d0
 8005f8c:	200006d4 	.word	0x200006d4
 8005f90:	20000448 	.word	0x20000448
 8005f94:	42a00000 	.word	0x42a00000
 8005f98:	00000000 	.word	0x00000000
 8005f9c:	200005a4 	.word	0x200005a4
 8005fa0:	200005a8 	.word	0x200005a8
 8005fa4:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8005fa8:	2000      	movs	r0, #0
 8005faa:	f000 ff79 	bl	8006ea0 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005fae:	2001      	movs	r0, #1
 8005fb0:	f000 ff88 	bl	8006ec4 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005fb4:	4b87      	ldr	r3, [pc, #540]	; (80061d4 <calWallConrol+0x164c>)
 8005fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fc2:	4b85      	ldr	r3, [pc, #532]	; (80061d8 <calWallConrol+0x1650>)
 8005fc4:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005fc8:	4a84      	ldr	r2, [pc, #528]	; (80061dc <calWallConrol+0x1654>)
 8005fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fcc:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8005fce:	4b81      	ldr	r3, [pc, #516]	; (80061d4 <calWallConrol+0x164c>)
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fda:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fe2:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8005fe6:	4b7b      	ldr	r3, [pc, #492]	; (80061d4 <calWallConrol+0x164c>)
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8005ff6:	4b7a      	ldr	r3, [pc, #488]	; (80061e0 <calWallConrol+0x1658>)
 8005ff8:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005ffc:	4b78      	ldr	r3, [pc, #480]	; (80061e0 <calWallConrol+0x1658>)
 8005ffe:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006002:	4b77      	ldr	r3, [pc, #476]	; (80061e0 <calWallConrol+0x1658>)
 8006004:	edd3 7a01 	vldr	s15, [r3, #4]
 8006008:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 800600c:	4b74      	ldr	r3, [pc, #464]	; (80061e0 <calWallConrol+0x1658>)
 800600e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006012:	4b73      	ldr	r3, [pc, #460]	; (80061e0 <calWallConrol+0x1658>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a72      	ldr	r2, [pc, #456]	; (80061e0 <calWallConrol+0x1658>)
 8006018:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800601a:	4b71      	ldr	r3, [pc, #452]	; (80061e0 <calWallConrol+0x1658>)
 800601c:	ed93 7a00 	vldr	s14, [r3]
 8006020:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006024:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006028:	4b6d      	ldr	r3, [pc, #436]	; (80061e0 <calWallConrol+0x1658>)
 800602a:	edd3 6a02 	vldr	s13, [r3, #8]
 800602e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006036:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800603a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800603e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006042:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006046:	e0ae      	b.n	80061a6 <calWallConrol+0x161e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006048:	2001      	movs	r0, #1
 800604a:	f000 ff29 	bl	8006ea0 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 800604e:	2000      	movs	r0, #0
 8006050:	f000 ff38 	bl	8006ec4 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006054:	4a60      	ldr	r2, [pc, #384]	; (80061d8 <calWallConrol+0x1650>)
 8006056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006058:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 800605a:	4b5e      	ldr	r3, [pc, #376]	; (80061d4 <calWallConrol+0x164c>)
 800605c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006066:	4b5d      	ldr	r3, [pc, #372]	; (80061dc <calWallConrol+0x1654>)
 8006068:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 800606c:	4b59      	ldr	r3, [pc, #356]	; (80061d4 <calWallConrol+0x164c>)
 800606e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800607a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800607e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006082:	4b54      	ldr	r3, [pc, #336]	; (80061d4 <calWallConrol+0x164c>)
 8006084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006090:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006094:	4b52      	ldr	r3, [pc, #328]	; (80061e0 <calWallConrol+0x1658>)
 8006096:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 800609a:	4b51      	ldr	r3, [pc, #324]	; (80061e0 <calWallConrol+0x1658>)
 800609c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80060a0:	4b4f      	ldr	r3, [pc, #316]	; (80061e0 <calWallConrol+0x1658>)
 80060a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80060a6:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80060aa:	4b4d      	ldr	r3, [pc, #308]	; (80061e0 <calWallConrol+0x1658>)
 80060ac:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80060b0:	4b4b      	ldr	r3, [pc, #300]	; (80061e0 <calWallConrol+0x1658>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a4a      	ldr	r2, [pc, #296]	; (80061e0 <calWallConrol+0x1658>)
 80060b6:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80060b8:	4b49      	ldr	r3, [pc, #292]	; (80061e0 <calWallConrol+0x1658>)
 80060ba:	ed93 7a00 	vldr	s14, [r3]
 80060be:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80060c2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80060c6:	4b46      	ldr	r3, [pc, #280]	; (80061e0 <calWallConrol+0x1658>)
 80060c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80060cc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80060d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060d4:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80060d8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80060dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060e0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80060e4:	e05f      	b.n	80061a6 <calWallConrol+0x161e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 80060e6:	2001      	movs	r0, #1
 80060e8:	f000 feda 	bl	8006ea0 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 80060ec:	2001      	movs	r0, #1
 80060ee:	f000 fee9 	bl	8006ec4 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 80060f2:	4a39      	ldr	r2, [pc, #228]	; (80061d8 <calWallConrol+0x1650>)
 80060f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 80060f8:	4a38      	ldr	r2, [pc, #224]	; (80061dc <calWallConrol+0x1654>)
 80060fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fc:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 80060fe:	4b35      	ldr	r3, [pc, #212]	; (80061d4 <calWallConrol+0x164c>)
 8006100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800610a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800610e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006112:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8006116:	4b2f      	ldr	r3, [pc, #188]	; (80061d4 <calWallConrol+0x164c>)
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006126:	4b2b      	ldr	r3, [pc, #172]	; (80061d4 <calWallConrol+0x164c>)
 8006128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006134:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006138:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800613c:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <calWallConrol+0x164c>)
 800613e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800614a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800614e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006152:	4b23      	ldr	r3, [pc, #140]	; (80061e0 <calWallConrol+0x1658>)
 8006154:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006158:	4b21      	ldr	r3, [pc, #132]	; (80061e0 <calWallConrol+0x1658>)
 800615a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <calWallConrol+0x1658>)
 8006160:	edd3 7a01 	vldr	s15, [r3, #4]
 8006164:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <calWallConrol+0x1658>)
 800616a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <calWallConrol+0x1658>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <calWallConrol+0x1658>)
 8006174:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006176:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <calWallConrol+0x1658>)
 8006178:	ed93 7a00 	vldr	s14, [r3]
 800617c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006180:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006184:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <calWallConrol+0x1658>)
 8006186:	edd3 6a02 	vldr	s13, [r3, #8]
 800618a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800618e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006192:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006196:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800619a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800619e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80061a2:	e000      	b.n	80061a6 <calWallConrol+0x161e>
			break;
 80061a4:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 80061a6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80061aa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80061e4 <calWallConrol+0x165c>
 80061ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061b2:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <calWallConrol+0x1660>)
 80061b4:	edd3 7a00 	vldr	s15, [r3]
 80061b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061bc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 80061c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061c2:	ee07 3a90 	vmov	s15, r3
}
 80061c6:	eeb0 0a67 	vmov.f32	s0, s15
 80061ca:	37a8      	adds	r7, #168	; 0xa8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d2:	bf00      	nop
 80061d4:	200002b8 	.word	0x200002b8
 80061d8:	200005a4 	.word	0x200005a4
 80061dc:	200005a8 	.word	0x200005a8
 80061e0:	20000584 	.word	0x20000584
 80061e4:	44d1e000 	.word	0x44d1e000
 80061e8:	200004d4 	.word	0x200004d4
 80061ec:	00000000 	.word	0x00000000

080061f0 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 80061f0:	b5b0      	push	{r4, r5, r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/straight.velocity);
 80061f6:	4b9e      	ldr	r3, [pc, #632]	; (8006470 <interrupt_WallCut+0x280>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fa f9cc 	bl	8000598 <__aeabi_f2d>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	a196      	add	r1, pc, #600	; (adr r1, 8006460 <interrupt_WallCut+0x270>)
 8006206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800620a:	f7fa fb47 	bl	800089c <__aeabi_ddiv>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	ec43 2b17 	vmov	d7, r2, r3
 8006216:	eeb0 0a47 	vmov.f32	s0, s14
 800621a:	eef0 0a67 	vmov.f32	s1, s15
 800621e:	f01b fdfb 	bl	8021e18 <ceil>
 8006222:	ec53 2b10 	vmov	r2, r3, d0
 8006226:	4610      	mov	r0, r2
 8006228:	4619      	mov	r1, r3
 800622a:	f7fa fcbd 	bl	8000ba8 <__aeabi_d2iz>
 800622e:	4603      	mov	r3, r0
 8006230:	617b      	str	r3, [r7, #20]
	if(del_time>=6){del_time=6;}
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b05      	cmp	r3, #5
 8006236:	dd01      	ble.n	800623c <interrupt_WallCut+0x4c>
 8006238:	2306      	movs	r3, #6
 800623a:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 800623c:	2300      	movs	r3, #0
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	e019      	b.n	8006276 <interrupt_WallCut+0x86>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 8006242:	498c      	ldr	r1, [pc, #560]	; (8006474 <interrupt_WallCut+0x284>)
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	440b      	add	r3, r1
 8006250:	6819      	ldr	r1, [r3, #0]
 8006252:	4888      	ldr	r0, [pc, #544]	; (8006474 <interrupt_WallCut+0x284>)
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006266:	1aca      	subs	r2, r1, r3
 8006268:	4983      	ldr	r1, [pc, #524]	; (8006478 <interrupt_WallCut+0x288>)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	3301      	adds	r3, #1
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b04      	cmp	r3, #4
 800627a:	dde2      	ble.n	8006242 <interrupt_WallCut+0x52>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 800627c:	4b7f      	ldr	r3, [pc, #508]	; (800647c <interrupt_WallCut+0x28c>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b01      	cmp	r3, #1
 8006282:	f040 8556 	bne.w	8006d32 <interrupt_WallCut+0xb42>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006286:	4b7b      	ldr	r3, [pc, #492]	; (8006474 <interrupt_WallCut+0x284>)
 8006288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800628c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006290:	dd03      	ble.n	800629a <interrupt_WallCut+0xaa>
			front_wall_break_90 = 1;
 8006292:	4b7b      	ldr	r3, [pc, #492]	; (8006480 <interrupt_WallCut+0x290>)
 8006294:	2201      	movs	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	e002      	b.n	80062a0 <interrupt_WallCut+0xb0>
		} else {
			front_wall_break_90 = 0;
 800629a:	4b79      	ldr	r3, [pc, #484]	; (8006480 <interrupt_WallCut+0x290>)
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 80062a0:	4b74      	ldr	r3, [pc, #464]	; (8006474 <interrupt_WallCut+0x284>)
 80062a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80062aa:	dd03      	ble.n	80062b4 <interrupt_WallCut+0xc4>
			front_wall_break_45 = 1;
 80062ac:	4b75      	ldr	r3, [pc, #468]	; (8006484 <interrupt_WallCut+0x294>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	e002      	b.n	80062ba <interrupt_WallCut+0xca>
		} else {
			front_wall_break_45 = 0;
 80062b4:	4b73      	ldr	r3, [pc, #460]	; (8006484 <interrupt_WallCut+0x294>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 80062ba:	4b6e      	ldr	r3, [pc, #440]	; (8006474 <interrupt_WallCut+0x284>)
 80062bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80062c4:	dd03      	ble.n	80062ce <interrupt_WallCut+0xde>
			front_wall_break_45slant = 1;
 80062c6:	4b70      	ldr	r3, [pc, #448]	; (8006488 <interrupt_WallCut+0x298>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e002      	b.n	80062d4 <interrupt_WallCut+0xe4>
		} else {
			front_wall_break_45slant = 0;
 80062ce:	4b6e      	ldr	r3, [pc, #440]	; (8006488 <interrupt_WallCut+0x298>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 80062d4:	4b67      	ldr	r3, [pc, #412]	; (8006474 <interrupt_WallCut+0x284>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80062dc:	da30      	bge.n	8006340 <interrupt_WallCut+0x150>
			NoWallCountL90++;
 80062de:	4b6b      	ldr	r3, [pc, #428]	; (800648c <interrupt_WallCut+0x29c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a69      	ldr	r2, [pc, #420]	; (800648c <interrupt_WallCut+0x29c>)
 80062e6:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80062e8:	4b69      	ldr	r3, [pc, #420]	; (8006490 <interrupt_WallCut+0x2a0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fa f953 	bl	8000598 <__aeabi_f2d>
 80062f2:	4604      	mov	r4, r0
 80062f4:	460d      	mov	r5, r1
 80062f6:	4b67      	ldr	r3, [pc, #412]	; (8006494 <interrupt_WallCut+0x2a4>)
 80062f8:	ed93 7a00 	vldr	s14, [r3]
 80062fc:	4b66      	ldr	r3, [pc, #408]	; (8006498 <interrupt_WallCut+0x2a8>)
 80062fe:	edd3 7a00 	vldr	s15, [r3]
 8006302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006306:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800630a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800630e:	ee16 0a90 	vmov	r0, s13
 8006312:	f7fa f941 	bl	8000598 <__aeabi_f2d>
 8006316:	a354      	add	r3, pc, #336	; (adr r3, 8006468 <interrupt_WallCut+0x278>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f7fa f994 	bl	8000648 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7f9 ffd8 	bl	80002dc <__adddf3>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4610      	mov	r0, r2
 8006332:	4619      	mov	r1, r3
 8006334:	f7fa fc60 	bl	8000bf8 <__aeabi_d2f>
 8006338:	4603      	mov	r3, r0
 800633a:	4a55      	ldr	r2, [pc, #340]	; (8006490 <interrupt_WallCut+0x2a0>)
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e006      	b.n	800634e <interrupt_WallCut+0x15e>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006340:	4b52      	ldr	r3, [pc, #328]	; (800648c <interrupt_WallCut+0x29c>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006346:	4b52      	ldr	r3, [pc, #328]	; (8006490 <interrupt_WallCut+0x2a0>)
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 800634e:	4b49      	ldr	r3, [pc, #292]	; (8006474 <interrupt_WallCut+0x284>)
 8006350:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006354:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006358:	da30      	bge.n	80063bc <interrupt_WallCut+0x1cc>
			NoWallCountR90++;
 800635a:	4b50      	ldr	r3, [pc, #320]	; (800649c <interrupt_WallCut+0x2ac>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	4a4e      	ldr	r2, [pc, #312]	; (800649c <interrupt_WallCut+0x2ac>)
 8006362:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006364:	4b4e      	ldr	r3, [pc, #312]	; (80064a0 <interrupt_WallCut+0x2b0>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fa f915 	bl	8000598 <__aeabi_f2d>
 800636e:	4604      	mov	r4, r0
 8006370:	460d      	mov	r5, r1
 8006372:	4b48      	ldr	r3, [pc, #288]	; (8006494 <interrupt_WallCut+0x2a4>)
 8006374:	ed93 7a00 	vldr	s14, [r3]
 8006378:	4b47      	ldr	r3, [pc, #284]	; (8006498 <interrupt_WallCut+0x2a8>)
 800637a:	edd3 7a00 	vldr	s15, [r3]
 800637e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006382:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006386:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800638a:	ee16 0a90 	vmov	r0, s13
 800638e:	f7fa f903 	bl	8000598 <__aeabi_f2d>
 8006392:	a335      	add	r3, pc, #212	; (adr r3, 8006468 <interrupt_WallCut+0x278>)
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f7fa f956 	bl	8000648 <__aeabi_dmul>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4620      	mov	r0, r4
 80063a2:	4629      	mov	r1, r5
 80063a4:	f7f9 ff9a 	bl	80002dc <__adddf3>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4610      	mov	r0, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	f7fa fc22 	bl	8000bf8 <__aeabi_d2f>
 80063b4:	4603      	mov	r3, r0
 80063b6:	4a3a      	ldr	r2, [pc, #232]	; (80064a0 <interrupt_WallCut+0x2b0>)
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e006      	b.n	80063ca <interrupt_WallCut+0x1da>
		} else {
			NoWallCountR90 = 0;
 80063bc:	4b37      	ldr	r3, [pc, #220]	; (800649c <interrupt_WallCut+0x2ac>)
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 80063c2:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <interrupt_WallCut+0x2b0>)
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80063ca:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <interrupt_WallCut+0x288>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80063d2:	da03      	bge.n	80063dc <interrupt_WallCut+0x1ec>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <interrupt_WallCut+0x284>)
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	2b70      	cmp	r3, #112	; 0x70
 80063da:	dd37      	ble.n	800644c <interrupt_WallCut+0x25c>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 80063dc:	4b31      	ldr	r3, [pc, #196]	; (80064a4 <interrupt_WallCut+0x2b4>)
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 80063e4:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <interrupt_WallCut+0x2b8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	4a2f      	ldr	r2, [pc, #188]	; (80064a8 <interrupt_WallCut+0x2b8>)
 80063ec:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 80063ee:	4b2f      	ldr	r3, [pc, #188]	; (80064ac <interrupt_WallCut+0x2bc>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80063f4:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <interrupt_WallCut+0x2c0>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fa f8cd 	bl	8000598 <__aeabi_f2d>
 80063fe:	4604      	mov	r4, r0
 8006400:	460d      	mov	r5, r1
 8006402:	4b24      	ldr	r3, [pc, #144]	; (8006494 <interrupt_WallCut+0x2a4>)
 8006404:	ed93 7a00 	vldr	s14, [r3]
 8006408:	4b23      	ldr	r3, [pc, #140]	; (8006498 <interrupt_WallCut+0x2a8>)
 800640a:	edd3 7a00 	vldr	s15, [r3]
 800640e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006412:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006416:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800641a:	ee16 0a90 	vmov	r0, s13
 800641e:	f7fa f8bb 	bl	8000598 <__aeabi_f2d>
 8006422:	a311      	add	r3, pc, #68	; (adr r3, 8006468 <interrupt_WallCut+0x278>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7fa f90e 	bl	8000648 <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4620      	mov	r0, r4
 8006432:	4629      	mov	r1, r5
 8006434:	f7f9 ff52 	bl	80002dc <__adddf3>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4610      	mov	r0, r2
 800643e:	4619      	mov	r1, r3
 8006440:	f7fa fbda 	bl	8000bf8 <__aeabi_d2f>
 8006444:	4603      	mov	r3, r0
 8006446:	4a1a      	ldr	r2, [pc, #104]	; (80064b0 <interrupt_WallCut+0x2c0>)
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e0a0      	b.n	800658e <interrupt_WallCut+0x39e>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 800644c:	4b17      	ldr	r3, [pc, #92]	; (80064ac <interrupt_WallCut+0x2bc>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d16c      	bne.n	800652e <interrupt_WallCut+0x33e>
				for (int i = 0; i <= 19; i++) {
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e04c      	b.n	80064f4 <interrupt_WallCut+0x304>
 800645a:	bf00      	nop
 800645c:	f3af 8000 	nop.w
 8006460:	00000000 	.word	0x00000000
 8006464:	40ab5800 	.word	0x40ab5800
 8006468:	d2f1a9fc 	.word	0xd2f1a9fc
 800646c:	3f50624d 	.word	0x3f50624d
 8006470:	200004d8 	.word	0x200004d8
 8006474:	200002b8 	.word	0x200002b8
 8006478:	2000045c 	.word	0x2000045c
 800647c:	20000592 	.word	0x20000592
 8006480:	200005f2 	.word	0x200005f2
 8006484:	200005f3 	.word	0x200005f3
 8006488:	200005f4 	.word	0x200005f4
 800648c:	200005b8 	.word	0x200005b8
 8006490:	200005d0 	.word	0x200005d0
 8006494:	20000258 	.word	0x20000258
 8006498:	2000025c 	.word	0x2000025c
 800649c:	200005b4 	.word	0x200005b4
 80064a0:	200005cc 	.word	0x200005cc
 80064a4:	200005f8 	.word	0x200005f8
 80064a8:	200005c0 	.word	0x200005c0
 80064ac:	200005ec 	.word	0x200005ec
 80064b0:	200005d8 	.word	0x200005d8
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80064b4:	4a7c      	ldr	r2, [pc, #496]	; (80066a8 <interrupt_WallCut+0x4b8>)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3314      	adds	r3, #20
 80064ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064c6:	4b79      	ldr	r3, [pc, #484]	; (80066ac <interrupt_WallCut+0x4bc>)
 80064c8:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 80064cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d4:	dd0b      	ble.n	80064ee <interrupt_WallCut+0x2fe>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80064d6:	4a74      	ldr	r2, [pc, #464]	; (80066a8 <interrupt_WallCut+0x4b8>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3314      	adds	r3, #20
 80064dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 80064e8:	4b70      	ldr	r3, [pc, #448]	; (80066ac <interrupt_WallCut+0x4bc>)
 80064ea:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b13      	cmp	r3, #19
 80064f8:	dddc      	ble.n	80064b4 <interrupt_WallCut+0x2c4>
					}
				}
				NoWallCountL45 = 0;
 80064fa:	4b6d      	ldr	r3, [pc, #436]	; (80066b0 <interrupt_WallCut+0x4c0>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006500:	4b6c      	ldr	r3, [pc, #432]	; (80066b4 <interrupt_WallCut+0x4c4>)
 8006502:	2201      	movs	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 8006506:	4b69      	ldr	r3, [pc, #420]	; (80066ac <interrupt_WallCut+0x4bc>)
 8006508:	edd3 7a00 	vldr	s15, [r3]
 800650c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80066b8 <interrupt_WallCut+0x4c8>
 8006510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006514:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80066bc <interrupt_WallCut+0x4cc>
 8006518:	ee67 6a87 	vmul.f32	s13, s15, s14
 800651c:	4b63      	ldr	r3, [pc, #396]	; (80066ac <interrupt_WallCut+0x4bc>)
 800651e:	ed93 7a00 	vldr	s14, [r3]
 8006522:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 8006526:	4b66      	ldr	r3, [pc, #408]	; (80066c0 <interrupt_WallCut+0x4d0>)
 8006528:	edc3 7a00 	vstr	s15, [r3]
 800652c:	e02f      	b.n	800658e <interrupt_WallCut+0x39e>
			} else {
				NoWallCountL45++;
 800652e:	4b60      	ldr	r3, [pc, #384]	; (80066b0 <interrupt_WallCut+0x4c0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	4a5e      	ldr	r2, [pc, #376]	; (80066b0 <interrupt_WallCut+0x4c0>)
 8006536:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006538:	4b61      	ldr	r3, [pc, #388]	; (80066c0 <interrupt_WallCut+0x4d0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f7fa f82b 	bl	8000598 <__aeabi_f2d>
 8006542:	4604      	mov	r4, r0
 8006544:	460d      	mov	r5, r1
 8006546:	4b5f      	ldr	r3, [pc, #380]	; (80066c4 <interrupt_WallCut+0x4d4>)
 8006548:	ed93 7a00 	vldr	s14, [r3]
 800654c:	4b5e      	ldr	r3, [pc, #376]	; (80066c8 <interrupt_WallCut+0x4d8>)
 800654e:	edd3 7a00 	vldr	s15, [r3]
 8006552:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006556:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800655a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800655e:	ee16 0a90 	vmov	r0, s13
 8006562:	f7fa f819 	bl	8000598 <__aeabi_f2d>
 8006566:	a34e      	add	r3, pc, #312	; (adr r3, 80066a0 <interrupt_WallCut+0x4b0>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f7fa f86c 	bl	8000648 <__aeabi_dmul>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	f7f9 feb0 	bl	80002dc <__adddf3>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4610      	mov	r0, r2
 8006582:	4619      	mov	r1, r3
 8006584:	f7fa fb38 	bl	8000bf8 <__aeabi_d2f>
 8006588:	4603      	mov	r3, r0
 800658a:	4a4d      	ldr	r2, [pc, #308]	; (80066c0 <interrupt_WallCut+0x4d0>)
 800658c:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 800658e:	4b4f      	ldr	r3, [pc, #316]	; (80066cc <interrupt_WallCut+0x4dc>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006596:	da04      	bge.n	80065a2 <interrupt_WallCut+0x3b2>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8006598:	4b43      	ldr	r3, [pc, #268]	; (80066a8 <interrupt_WallCut+0x4b8>)
 800659a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800659e:	2bc8      	cmp	r3, #200	; 0xc8
 80065a0:	dd37      	ble.n	8006612 <interrupt_WallCut+0x422>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 80065a2:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <interrupt_WallCut+0x4e0>)
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 80065aa:	4b4a      	ldr	r3, [pc, #296]	; (80066d4 <interrupt_WallCut+0x4e4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	4a48      	ldr	r2, [pc, #288]	; (80066d4 <interrupt_WallCut+0x4e4>)
 80065b2:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 80065b4:	4b48      	ldr	r3, [pc, #288]	; (80066d8 <interrupt_WallCut+0x4e8>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80065ba:	4b48      	ldr	r3, [pc, #288]	; (80066dc <interrupt_WallCut+0x4ec>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7f9 ffea 	bl	8000598 <__aeabi_f2d>
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	4b3e      	ldr	r3, [pc, #248]	; (80066c4 <interrupt_WallCut+0x4d4>)
 80065ca:	ed93 7a00 	vldr	s14, [r3]
 80065ce:	4b3e      	ldr	r3, [pc, #248]	; (80066c8 <interrupt_WallCut+0x4d8>)
 80065d0:	edd3 7a00 	vldr	s15, [r3]
 80065d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80065dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065e0:	ee16 0a90 	vmov	r0, s13
 80065e4:	f7f9 ffd8 	bl	8000598 <__aeabi_f2d>
 80065e8:	a32d      	add	r3, pc, #180	; (adr r3, 80066a0 <interrupt_WallCut+0x4b0>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7fa f82b 	bl	8000648 <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7f9 fe6f 	bl	80002dc <__adddf3>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4610      	mov	r0, r2
 8006604:	4619      	mov	r1, r3
 8006606:	f7fa faf7 	bl	8000bf8 <__aeabi_d2f>
 800660a:	4603      	mov	r3, r0
 800660c:	4a33      	ldr	r2, [pc, #204]	; (80066dc <interrupt_WallCut+0x4ec>)
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	e098      	b.n	8006744 <interrupt_WallCut+0x554>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <interrupt_WallCut+0x4e8>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d164      	bne.n	80066e4 <interrupt_WallCut+0x4f4>
				for (int i = 0; i <= 19; i++) {
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	e01f      	b.n	8006660 <interrupt_WallCut+0x470>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006620:	4a21      	ldr	r2, [pc, #132]	; (80066a8 <interrupt_WallCut+0x4b8>)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	333c      	adds	r3, #60	; 0x3c
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006632:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <interrupt_WallCut+0x4e0>)
 8006634:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 8006638:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006640:	dd0b      	ble.n	800665a <interrupt_WallCut+0x46a>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006642:	4a19      	ldr	r2, [pc, #100]	; (80066a8 <interrupt_WallCut+0x4b8>)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	333c      	adds	r3, #60	; 0x3c
 8006648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 8006654:	4b1e      	ldr	r3, [pc, #120]	; (80066d0 <interrupt_WallCut+0x4e0>)
 8006656:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	3301      	adds	r3, #1
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b13      	cmp	r3, #19
 8006664:	dddc      	ble.n	8006620 <interrupt_WallCut+0x430>
					}
				}
				NoWallCountR45 = 0;
 8006666:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <interrupt_WallCut+0x4e4>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 800666c:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <interrupt_WallCut+0x4e8>)
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 8006672:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <interrupt_WallCut+0x4e0>)
 8006674:	edd3 7a00 	vldr	s15, [r3]
 8006678:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80066e0 <interrupt_WallCut+0x4f0>
 800667c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006680:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80066bc <interrupt_WallCut+0x4cc>
 8006684:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006688:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <interrupt_WallCut+0x4e0>)
 800668a:	ed93 7a00 	vldr	s14, [r3]
 800668e:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 8006692:	4b12      	ldr	r3, [pc, #72]	; (80066dc <interrupt_WallCut+0x4ec>)
 8006694:	edc3 7a00 	vstr	s15, [r3]
 8006698:	e054      	b.n	8006744 <interrupt_WallCut+0x554>
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w
 80066a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80066a4:	3f50624d 	.word	0x3f50624d
 80066a8:	200002b8 	.word	0x200002b8
 80066ac:	200005f8 	.word	0x200005f8
 80066b0:	200005c0 	.word	0x200005c0
 80066b4:	200005ec 	.word	0x200005ec
 80066b8:	43f68000 	.word	0x43f68000
 80066bc:	00000000 	.word	0x00000000
 80066c0:	200005d8 	.word	0x200005d8
 80066c4:	20000258 	.word	0x20000258
 80066c8:	2000025c 	.word	0x2000025c
 80066cc:	2000045c 	.word	0x2000045c
 80066d0:	200005fc 	.word	0x200005fc
 80066d4:	200005bc 	.word	0x200005bc
 80066d8:	200005ed 	.word	0x200005ed
 80066dc:	200005d4 	.word	0x200005d4
 80066e0:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 80066e4:	4b94      	ldr	r3, [pc, #592]	; (8006938 <interrupt_WallCut+0x748>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	4a93      	ldr	r2, [pc, #588]	; (8006938 <interrupt_WallCut+0x748>)
 80066ec:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80066ee:	4b93      	ldr	r3, [pc, #588]	; (800693c <interrupt_WallCut+0x74c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7f9 ff50 	bl	8000598 <__aeabi_f2d>
 80066f8:	4604      	mov	r4, r0
 80066fa:	460d      	mov	r5, r1
 80066fc:	4b90      	ldr	r3, [pc, #576]	; (8006940 <interrupt_WallCut+0x750>)
 80066fe:	ed93 7a00 	vldr	s14, [r3]
 8006702:	4b90      	ldr	r3, [pc, #576]	; (8006944 <interrupt_WallCut+0x754>)
 8006704:	edd3 7a00 	vldr	s15, [r3]
 8006708:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 800670c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006710:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006714:	ee16 0a90 	vmov	r0, s13
 8006718:	f7f9 ff3e 	bl	8000598 <__aeabi_f2d>
 800671c:	a384      	add	r3, pc, #528	; (adr r3, 8006930 <interrupt_WallCut+0x740>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7f9 ff91 	bl	8000648 <__aeabi_dmul>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 800672a:	4620      	mov	r0, r4
 800672c:	4629      	mov	r1, r5
 800672e:	f7f9 fdd5 	bl	80002dc <__adddf3>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f7fa fa5d 	bl	8000bf8 <__aeabi_d2f>
 800673e:	4603      	mov	r3, r0
 8006740:	4a7e      	ldr	r2, [pc, #504]	; (800693c <interrupt_WallCut+0x74c>)
 8006742:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006744:	4b80      	ldr	r3, [pc, #512]	; (8006948 <interrupt_WallCut+0x758>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f113 0fef 	cmn.w	r3, #239	; 0xef
 800674c:	db5f      	blt.n	800680e <interrupt_WallCut+0x61e>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 800674e:	4b7f      	ldr	r3, [pc, #508]	; (800694c <interrupt_WallCut+0x75c>)
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8006756:	4b7e      	ldr	r3, [pc, #504]	; (8006950 <interrupt_WallCut+0x760>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3301      	adds	r3, #1
 800675c:	4a7c      	ldr	r2, [pc, #496]	; (8006950 <interrupt_WallCut+0x760>)
 800675e:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006760:	2000      	movs	r0, #0
 8006762:	f000 fccf 	bl	8007104 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8006766:	4b7b      	ldr	r3, [pc, #492]	; (8006954 <interrupt_WallCut+0x764>)
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800676c:	4b7a      	ldr	r3, [pc, #488]	; (8006958 <interrupt_WallCut+0x768>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f7f9 ff11 	bl	8000598 <__aeabi_f2d>
 8006776:	4604      	mov	r4, r0
 8006778:	460d      	mov	r5, r1
 800677a:	4b71      	ldr	r3, [pc, #452]	; (8006940 <interrupt_WallCut+0x750>)
 800677c:	ed93 7a00 	vldr	s14, [r3]
 8006780:	4b70      	ldr	r3, [pc, #448]	; (8006944 <interrupt_WallCut+0x754>)
 8006782:	edd3 7a00 	vldr	s15, [r3]
 8006786:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 800678a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800678e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006792:	ee16 0a90 	vmov	r0, s13
 8006796:	f7f9 feff 	bl	8000598 <__aeabi_f2d>
 800679a:	a365      	add	r3, pc, #404	; (adr r3, 8006930 <interrupt_WallCut+0x740>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f7f9 ff52 	bl	8000648 <__aeabi_dmul>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80067a8:	4620      	mov	r0, r4
 80067aa:	4629      	mov	r1, r5
 80067ac:	f7f9 fd96 	bl	80002dc <__adddf3>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4610      	mov	r0, r2
 80067b6:	4619      	mov	r1, r3
 80067b8:	f7fa fa1e 	bl	8000bf8 <__aeabi_d2f>
 80067bc:	4603      	mov	r3, r0
 80067be:	4a66      	ldr	r2, [pc, #408]	; (8006958 <interrupt_WallCut+0x768>)
 80067c0:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 80067c2:	4b66      	ldr	r3, [pc, #408]	; (800695c <interrupt_WallCut+0x76c>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	f040 812b 	bne.w	8006a22 <interrupt_WallCut+0x832>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 80067cc:	4b64      	ldr	r3, [pc, #400]	; (8006960 <interrupt_WallCut+0x770>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7f9 fee1 	bl	8000598 <__aeabi_f2d>
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4b62      	ldr	r3, [pc, #392]	; (8006964 <interrupt_WallCut+0x774>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7f9 feda 	bl	8000598 <__aeabi_f2d>
 80067e4:	a352      	add	r3, pc, #328	; (adr r3, 8006930 <interrupt_WallCut+0x740>)
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	f7f9 ff2d 	bl	8000648 <__aeabi_dmul>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7f9 fd71 	bl	80002dc <__adddf3>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	f7fa f9f9 	bl	8000bf8 <__aeabi_d2f>
 8006806:	4603      	mov	r3, r0
 8006808:	4a55      	ldr	r2, [pc, #340]	; (8006960 <interrupt_WallCut+0x770>)
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	e109      	b.n	8006a22 <interrupt_WallCut+0x832>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 800680e:	4b51      	ldr	r3, [pc, #324]	; (8006954 <interrupt_WallCut+0x764>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 80ae 	bne.w	8006974 <interrupt_WallCut+0x784>
				for (int i = 0; i <= 19; i++) {
 8006818:	2300      	movs	r3, #0
 800681a:	607b      	str	r3, [r7, #4]
 800681c:	e01f      	b.n	800685e <interrupt_WallCut+0x66e>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800681e:	4a52      	ldr	r2, [pc, #328]	; (8006968 <interrupt_WallCut+0x778>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3314      	adds	r3, #20
 8006824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006828:	ee07 3a90 	vmov	s15, r3
 800682c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006830:	4b46      	ldr	r3, [pc, #280]	; (800694c <interrupt_WallCut+0x75c>)
 8006832:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 8006836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800683a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683e:	dd0b      	ble.n	8006858 <interrupt_WallCut+0x668>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006840:	4a49      	ldr	r2, [pc, #292]	; (8006968 <interrupt_WallCut+0x778>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3314      	adds	r3, #20
 8006846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006852:	4b3e      	ldr	r3, [pc, #248]	; (800694c <interrupt_WallCut+0x75c>)
 8006854:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3301      	adds	r3, #1
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b13      	cmp	r3, #19
 8006862:	dddc      	ble.n	800681e <interrupt_WallCut+0x62e>
					}
				}
				NoWallCountL45slant = 0;
 8006864:	4b3a      	ldr	r3, [pc, #232]	; (8006950 <interrupt_WallCut+0x760>)
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 800686a:	4b3a      	ldr	r3, [pc, #232]	; (8006954 <interrupt_WallCut+0x764>)
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006870:	2001      	movs	r0, #1
 8006872:	f000 fc47 	bl	8007104 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006876:	4b35      	ldr	r3, [pc, #212]	; (800694c <interrupt_WallCut+0x75c>)
 8006878:	edd3 7a00 	vldr	s15, [r3]
 800687c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800696c <interrupt_WallCut+0x77c>
 8006880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688c:	db26      	blt.n	80068dc <interrupt_WallCut+0x6ec>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800688e:	4b2f      	ldr	r3, [pc, #188]	; (800694c <interrupt_WallCut+0x75c>)
 8006890:	edd3 7a00 	vldr	s15, [r3]
 8006894:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800696c <interrupt_WallCut+0x77c>
 8006898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800689c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006970 <interrupt_WallCut+0x780>
 80068a0:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80068a4:	4b29      	ldr	r3, [pc, #164]	; (800694c <interrupt_WallCut+0x75c>)
 80068a6:	ed93 7a00 	vldr	s14, [r3]
 80068aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 80068ae:	4b2c      	ldr	r3, [pc, #176]	; (8006960 <interrupt_WallCut+0x770>)
 80068b0:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80068b4:	4b25      	ldr	r3, [pc, #148]	; (800694c <interrupt_WallCut+0x75c>)
 80068b6:	edd3 7a00 	vldr	s15, [r3]
 80068ba:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800696c <interrupt_WallCut+0x77c>
 80068be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068c2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006970 <interrupt_WallCut+0x780>
 80068c6:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80068ca:	4b20      	ldr	r3, [pc, #128]	; (800694c <interrupt_WallCut+0x75c>)
 80068cc:	ed93 7a00 	vldr	s14, [r3]
 80068d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 80068d4:	4b20      	ldr	r3, [pc, #128]	; (8006958 <interrupt_WallCut+0x768>)
 80068d6:	edc3 7a00 	vstr	s15, [r3]
 80068da:	e09f      	b.n	8006a1c <interrupt_WallCut+0x82c>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80068dc:	4b1b      	ldr	r3, [pc, #108]	; (800694c <interrupt_WallCut+0x75c>)
 80068de:	edd3 7a00 	vldr	s15, [r3]
 80068e2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800696c <interrupt_WallCut+0x77c>
 80068e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068ea:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006970 <interrupt_WallCut+0x780>
 80068ee:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80068f2:	4b16      	ldr	r3, [pc, #88]	; (800694c <interrupt_WallCut+0x75c>)
 80068f4:	ed93 7a00 	vldr	s14, [r3]
 80068f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 80068fc:	4b18      	ldr	r3, [pc, #96]	; (8006960 <interrupt_WallCut+0x770>)
 80068fe:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <interrupt_WallCut+0x75c>)
 8006904:	edd3 7a00 	vldr	s15, [r3]
 8006908:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800696c <interrupt_WallCut+0x77c>
 800690c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006910:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006970 <interrupt_WallCut+0x780>
 8006914:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <interrupt_WallCut+0x75c>)
 800691a:	ed93 7a00 	vldr	s14, [r3]
 800691e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <interrupt_WallCut+0x768>)
 8006924:	edc3 7a00 	vstr	s15, [r3]
 8006928:	e078      	b.n	8006a1c <interrupt_WallCut+0x82c>
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w
 8006930:	d2f1a9fc 	.word	0xd2f1a9fc
 8006934:	3f50624d 	.word	0x3f50624d
 8006938:	200005bc 	.word	0x200005bc
 800693c:	200005d4 	.word	0x200005d4
 8006940:	20000258 	.word	0x20000258
 8006944:	2000025c 	.word	0x2000025c
 8006948:	2000045c 	.word	0x2000045c
 800694c:	20000600 	.word	0x20000600
 8006950:	200005c8 	.word	0x200005c8
 8006954:	200005ee 	.word	0x200005ee
 8006958:	200005e8 	.word	0x200005e8
 800695c:	200005f0 	.word	0x200005f0
 8006960:	200005e0 	.word	0x200005e0
 8006964:	200004d8 	.word	0x200004d8
 8006968:	200002b8 	.word	0x200002b8
 800696c:	455ac000 	.word	0x455ac000
 8006970:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 8006974:	4bac      	ldr	r3, [pc, #688]	; (8006c28 <interrupt_WallCut+0xa38>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	4aab      	ldr	r2, [pc, #684]	; (8006c28 <interrupt_WallCut+0xa38>)
 800697c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800697e:	4bab      	ldr	r3, [pc, #684]	; (8006c2c <interrupt_WallCut+0xa3c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4618      	mov	r0, r3
 8006984:	f7f9 fe08 	bl	8000598 <__aeabi_f2d>
 8006988:	4604      	mov	r4, r0
 800698a:	460d      	mov	r5, r1
 800698c:	4ba8      	ldr	r3, [pc, #672]	; (8006c30 <interrupt_WallCut+0xa40>)
 800698e:	ed93 7a00 	vldr	s14, [r3]
 8006992:	4ba8      	ldr	r3, [pc, #672]	; (8006c34 <interrupt_WallCut+0xa44>)
 8006994:	edd3 7a00 	vldr	s15, [r3]
 8006998:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 800699c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80069a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069a4:	ee16 0a90 	vmov	r0, s13
 80069a8:	f7f9 fdf6 	bl	8000598 <__aeabi_f2d>
 80069ac:	a39c      	add	r3, pc, #624	; (adr r3, 8006c20 <interrupt_WallCut+0xa30>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f7f9 fe49 	bl	8000648 <__aeabi_dmul>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80069ba:	4620      	mov	r0, r4
 80069bc:	4629      	mov	r1, r5
 80069be:	f7f9 fc8d 	bl	80002dc <__adddf3>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4610      	mov	r0, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	f7fa f915 	bl	8000bf8 <__aeabi_d2f>
 80069ce:	4603      	mov	r3, r0
 80069d0:	4a96      	ldr	r2, [pc, #600]	; (8006c2c <interrupt_WallCut+0xa3c>)
 80069d2:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 80069d4:	4b98      	ldr	r3, [pc, #608]	; (8006c38 <interrupt_WallCut+0xa48>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d11f      	bne.n	8006a1c <interrupt_WallCut+0x82c>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 80069dc:	4b97      	ldr	r3, [pc, #604]	; (8006c3c <interrupt_WallCut+0xa4c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7f9 fdd9 	bl	8000598 <__aeabi_f2d>
 80069e6:	4604      	mov	r4, r0
 80069e8:	460d      	mov	r5, r1
 80069ea:	4b95      	ldr	r3, [pc, #596]	; (8006c40 <interrupt_WallCut+0xa50>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7f9 fdd2 	bl	8000598 <__aeabi_f2d>
 80069f4:	a38a      	add	r3, pc, #552	; (adr r3, 8006c20 <interrupt_WallCut+0xa30>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f7f9 fe25 	bl	8000648 <__aeabi_dmul>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	f7f9 fc69 	bl	80002dc <__adddf3>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4610      	mov	r0, r2
 8006a10:	4619      	mov	r1, r3
 8006a12:	f7fa f8f1 	bl	8000bf8 <__aeabi_d2f>
 8006a16:	4603      	mov	r3, r0
 8006a18:	4a88      	ldr	r2, [pc, #544]	; (8006c3c <interrupt_WallCut+0xa4c>)
 8006a1a:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006a1c:	4b86      	ldr	r3, [pc, #536]	; (8006c38 <interrupt_WallCut+0xa48>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006a22:	4b88      	ldr	r3, [pc, #544]	; (8006c44 <interrupt_WallCut+0xa54>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006a2a:	db6a      	blt.n	8006b02 <interrupt_WallCut+0x912>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006a2c:	4b86      	ldr	r3, [pc, #536]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006a34:	4b85      	ldr	r3, [pc, #532]	; (8006c4c <interrupt_WallCut+0xa5c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a84      	ldr	r2, [pc, #528]	; (8006c4c <interrupt_WallCut+0xa5c>)
 8006a3c:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8006a3e:	2000      	movs	r0, #0
 8006a40:	f000 fb4e 	bl	80070e0 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8006a44:	4b82      	ldr	r3, [pc, #520]	; (8006c50 <interrupt_WallCut+0xa60>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006a4a:	4b82      	ldr	r3, [pc, #520]	; (8006c54 <interrupt_WallCut+0xa64>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7f9 fda2 	bl	8000598 <__aeabi_f2d>
 8006a54:	4604      	mov	r4, r0
 8006a56:	460d      	mov	r5, r1
 8006a58:	4b75      	ldr	r3, [pc, #468]	; (8006c30 <interrupt_WallCut+0xa40>)
 8006a5a:	ed93 7a00 	vldr	s14, [r3]
 8006a5e:	4b75      	ldr	r3, [pc, #468]	; (8006c34 <interrupt_WallCut+0xa44>)
 8006a60:	edd3 7a00 	vldr	s15, [r3]
 8006a64:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006a68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a70:	ee16 0a90 	vmov	r0, s13
 8006a74:	f7f9 fd90 	bl	8000598 <__aeabi_f2d>
 8006a78:	a369      	add	r3, pc, #420	; (adr r3, 8006c20 <interrupt_WallCut+0xa30>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7f9 fde3 	bl	8000648 <__aeabi_dmul>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006a86:	4620      	mov	r0, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f7f9 fc27 	bl	80002dc <__adddf3>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4610      	mov	r0, r2
 8006a94:	4619      	mov	r1, r3
 8006a96:	f7fa f8af 	bl	8000bf8 <__aeabi_d2f>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4a6d      	ldr	r2, [pc, #436]	; (8006c54 <interrupt_WallCut+0xa64>)
 8006a9e:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006aa0:	4b6d      	ldr	r3, [pc, #436]	; (8006c58 <interrupt_WallCut+0xa68>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 81a4 	bne.w	8006df2 <interrupt_WallCut+0xc02>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006aaa:	4b6c      	ldr	r3, [pc, #432]	; (8006c5c <interrupt_WallCut+0xa6c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7f9 fd72 	bl	8000598 <__aeabi_f2d>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	4b5d      	ldr	r3, [pc, #372]	; (8006c30 <interrupt_WallCut+0xa40>)
 8006aba:	ed93 7a00 	vldr	s14, [r3]
 8006abe:	4b5d      	ldr	r3, [pc, #372]	; (8006c34 <interrupt_WallCut+0xa44>)
 8006ac0:	edd3 7a00 	vldr	s15, [r3]
 8006ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006ac8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006acc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ad0:	ee16 0a90 	vmov	r0, s13
 8006ad4:	f7f9 fd60 	bl	8000598 <__aeabi_f2d>
 8006ad8:	a351      	add	r3, pc, #324	; (adr r3, 8006c20 <interrupt_WallCut+0xa30>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fdb3 	bl	8000648 <__aeabi_dmul>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7f9 fbf7 	bl	80002dc <__adddf3>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4610      	mov	r0, r2
 8006af4:	4619      	mov	r1, r3
 8006af6:	f7fa f87f 	bl	8000bf8 <__aeabi_d2f>
 8006afa:	4603      	mov	r3, r0
 8006afc:	4a57      	ldr	r2, [pc, #348]	; (8006c5c <interrupt_WallCut+0xa6c>)
 8006afe:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006b00:	e177      	b.n	8006df2 <interrupt_WallCut+0xc02>
			if (NoWallCountR45slant_flag == 0) {
 8006b02:	4b53      	ldr	r3, [pc, #332]	; (8006c50 <interrupt_WallCut+0xa60>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f040 80b0 	bne.w	8006c6c <interrupt_WallCut+0xa7c>
				for (int i = 0; i <= 19; i++) {
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	e01f      	b.n	8006b52 <interrupt_WallCut+0x962>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006b12:	4a53      	ldr	r2, [pc, #332]	; (8006c60 <interrupt_WallCut+0xa70>)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	333c      	adds	r3, #60	; 0x3c
 8006b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b1c:	ee07 3a90 	vmov	s15, r3
 8006b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b24:	4b48      	ldr	r3, [pc, #288]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006b26:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b32:	dd0b      	ble.n	8006b4c <interrupt_WallCut+0x95c>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006b34:	4a4a      	ldr	r2, [pc, #296]	; (8006c60 <interrupt_WallCut+0xa70>)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	333c      	adds	r3, #60	; 0x3c
 8006b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006b46:	4b40      	ldr	r3, [pc, #256]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006b48:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	603b      	str	r3, [r7, #0]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b13      	cmp	r3, #19
 8006b56:	dddc      	ble.n	8006b12 <interrupt_WallCut+0x922>
				NoWallCountR45slant = 0;
 8006b58:	4b3c      	ldr	r3, [pc, #240]	; (8006c4c <interrupt_WallCut+0xa5c>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006b5e:	4b3c      	ldr	r3, [pc, #240]	; (8006c50 <interrupt_WallCut+0xa60>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006b64:	2001      	movs	r0, #1
 8006b66:	f000 fabb 	bl	80070e0 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006b6a:	4b37      	ldr	r3, [pc, #220]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006b6c:	edd3 7a00 	vldr	s15, [r3]
 8006b70:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006c64 <interrupt_WallCut+0xa74>
 8006b74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b80:	db26      	blt.n	8006bd0 <interrupt_WallCut+0x9e0>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006b82:	4b31      	ldr	r3, [pc, #196]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006b84:	edd3 7a00 	vldr	s15, [r3]
 8006b88:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006c64 <interrupt_WallCut+0xa74>
 8006b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b90:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006c68 <interrupt_WallCut+0xa78>
 8006b94:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006b98:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006b9a:	ed93 7a00 	vldr	s14, [r3]
 8006b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006ba2:	4b2e      	ldr	r3, [pc, #184]	; (8006c5c <interrupt_WallCut+0xa6c>)
 8006ba4:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006baa:	edd3 7a00 	vldr	s15, [r3]
 8006bae:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006c64 <interrupt_WallCut+0xa74>
 8006bb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bb6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006c68 <interrupt_WallCut+0xa78>
 8006bba:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006bbe:	4b22      	ldr	r3, [pc, #136]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006bc0:	ed93 7a00 	vldr	s14, [r3]
 8006bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006bc8:	4b22      	ldr	r3, [pc, #136]	; (8006c54 <interrupt_WallCut+0xa64>)
 8006bca:	edc3 7a00 	vstr	s15, [r3]
 8006bce:	e0ac      	b.n	8006d2a <interrupt_WallCut+0xb3a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006bd0:	4b1d      	ldr	r3, [pc, #116]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006bd2:	edd3 7a00 	vldr	s15, [r3]
 8006bd6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006c64 <interrupt_WallCut+0xa74>
 8006bda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bde:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006c68 <interrupt_WallCut+0xa78>
 8006be2:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006be6:	4b18      	ldr	r3, [pc, #96]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006be8:	ed93 7a00 	vldr	s14, [r3]
 8006bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <interrupt_WallCut+0xa6c>)
 8006bf2:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006bf8:	edd3 7a00 	vldr	s15, [r3]
 8006bfc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006c64 <interrupt_WallCut+0xa74>
 8006c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c04:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006c68 <interrupt_WallCut+0xa78>
 8006c08:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <interrupt_WallCut+0xa58>)
 8006c0e:	ed93 7a00 	vldr	s14, [r3]
 8006c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006c16:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <interrupt_WallCut+0xa64>)
 8006c18:	edc3 7a00 	vstr	s15, [r3]
 8006c1c:	e085      	b.n	8006d2a <interrupt_WallCut+0xb3a>
 8006c1e:	bf00      	nop
 8006c20:	d2f1a9fc 	.word	0xd2f1a9fc
 8006c24:	3f50624d 	.word	0x3f50624d
 8006c28:	200005c8 	.word	0x200005c8
 8006c2c:	200005e8 	.word	0x200005e8
 8006c30:	20000258 	.word	0x20000258
 8006c34:	2000025c 	.word	0x2000025c
 8006c38:	200005f0 	.word	0x200005f0
 8006c3c:	200005e0 	.word	0x200005e0
 8006c40:	200004d8 	.word	0x200004d8
 8006c44:	2000045c 	.word	0x2000045c
 8006c48:	20000604 	.word	0x20000604
 8006c4c:	200005c4 	.word	0x200005c4
 8006c50:	200005ef 	.word	0x200005ef
 8006c54:	200005e4 	.word	0x200005e4
 8006c58:	200005f1 	.word	0x200005f1
 8006c5c:	200005dc 	.word	0x200005dc
 8006c60:	200002b8 	.word	0x200002b8
 8006c64:	455ac000 	.word	0x455ac000
 8006c68:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8006c6c:	4b66      	ldr	r3, [pc, #408]	; (8006e08 <interrupt_WallCut+0xc18>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	4a65      	ldr	r2, [pc, #404]	; (8006e08 <interrupt_WallCut+0xc18>)
 8006c74:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006c76:	4b65      	ldr	r3, [pc, #404]	; (8006e0c <interrupt_WallCut+0xc1c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7f9 fc8c 	bl	8000598 <__aeabi_f2d>
 8006c80:	4604      	mov	r4, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	4b62      	ldr	r3, [pc, #392]	; (8006e10 <interrupt_WallCut+0xc20>)
 8006c86:	ed93 7a00 	vldr	s14, [r3]
 8006c8a:	4b62      	ldr	r3, [pc, #392]	; (8006e14 <interrupt_WallCut+0xc24>)
 8006c8c:	edd3 7a00 	vldr	s15, [r3]
 8006c90:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006c94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c9c:	ee16 0a90 	vmov	r0, s13
 8006ca0:	f7f9 fc7a 	bl	8000598 <__aeabi_f2d>
 8006ca4:	a356      	add	r3, pc, #344	; (adr r3, 8006e00 <interrupt_WallCut+0xc10>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f7f9 fccd 	bl	8000648 <__aeabi_dmul>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	f7f9 fb11 	bl	80002dc <__adddf3>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f7f9 ff99 	bl	8000bf8 <__aeabi_d2f>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4a50      	ldr	r2, [pc, #320]	; (8006e0c <interrupt_WallCut+0xc1c>)
 8006cca:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006ccc:	4b52      	ldr	r3, [pc, #328]	; (8006e18 <interrupt_WallCut+0xc28>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d12a      	bne.n	8006d2a <interrupt_WallCut+0xb3a>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006cd4:	4b51      	ldr	r3, [pc, #324]	; (8006e1c <interrupt_WallCut+0xc2c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7f9 fc5d 	bl	8000598 <__aeabi_f2d>
 8006cde:	4604      	mov	r4, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	4b4b      	ldr	r3, [pc, #300]	; (8006e10 <interrupt_WallCut+0xc20>)
 8006ce4:	ed93 7a00 	vldr	s14, [r3]
 8006ce8:	4b4a      	ldr	r3, [pc, #296]	; (8006e14 <interrupt_WallCut+0xc24>)
 8006cea:	edd3 7a00 	vldr	s15, [r3]
 8006cee:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006cf2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006cf6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006cfa:	ee16 0a90 	vmov	r0, s13
 8006cfe:	f7f9 fc4b 	bl	8000598 <__aeabi_f2d>
 8006d02:	a33f      	add	r3, pc, #252	; (adr r3, 8006e00 <interrupt_WallCut+0xc10>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f7f9 fc9e 	bl	8000648 <__aeabi_dmul>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006d10:	4620      	mov	r0, r4
 8006d12:	4629      	mov	r1, r5
 8006d14:	f7f9 fae2 	bl	80002dc <__adddf3>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	f7f9 ff6a 	bl	8000bf8 <__aeabi_d2f>
 8006d24:	4603      	mov	r3, r0
 8006d26:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <interrupt_WallCut+0xc2c>)
 8006d28:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006d2a:	4b3b      	ldr	r3, [pc, #236]	; (8006e18 <interrupt_WallCut+0xc28>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	701a      	strb	r2, [r3, #0]
}
 8006d30:	e05f      	b.n	8006df2 <interrupt_WallCut+0xc02>
		NoWallCountL90 = 0;
 8006d32:	4b3b      	ldr	r3, [pc, #236]	; (8006e20 <interrupt_WallCut+0xc30>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006d38:	4b3a      	ldr	r3, [pc, #232]	; (8006e24 <interrupt_WallCut+0xc34>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006d3e:	4b3a      	ldr	r3, [pc, #232]	; (8006e28 <interrupt_WallCut+0xc38>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006d44:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <interrupt_WallCut+0xc3c>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006d4a:	4b39      	ldr	r3, [pc, #228]	; (8006e30 <interrupt_WallCut+0xc40>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006d50:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <interrupt_WallCut+0xc18>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006d56:	4b37      	ldr	r3, [pc, #220]	; (8006e34 <interrupt_WallCut+0xc44>)
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006d5e:	4b36      	ldr	r3, [pc, #216]	; (8006e38 <interrupt_WallCut+0xc48>)
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006d66:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <interrupt_WallCut+0xc4c>)
 8006d68:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006d6c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006d6e:	4b34      	ldr	r3, [pc, #208]	; (8006e40 <interrupt_WallCut+0xc50>)
 8006d70:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006d74:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006d76:	4b33      	ldr	r3, [pc, #204]	; (8006e44 <interrupt_WallCut+0xc54>)
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006d7e:	4b27      	ldr	r3, [pc, #156]	; (8006e1c <interrupt_WallCut+0xc2c>)
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006d86:	4b30      	ldr	r3, [pc, #192]	; (8006e48 <interrupt_WallCut+0xc58>)
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006d8e:	4b1f      	ldr	r3, [pc, #124]	; (8006e0c <interrupt_WallCut+0xc1c>)
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006d96:	4b2d      	ldr	r3, [pc, #180]	; (8006e4c <interrupt_WallCut+0xc5c>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006d9c:	4b2c      	ldr	r3, [pc, #176]	; (8006e50 <interrupt_WallCut+0xc60>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006da2:	4b2c      	ldr	r3, [pc, #176]	; (8006e54 <interrupt_WallCut+0xc64>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006da8:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <interrupt_WallCut+0xc68>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006dae:	4b2b      	ldr	r3, [pc, #172]	; (8006e5c <interrupt_WallCut+0xc6c>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006db4:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <interrupt_WallCut+0xc28>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006dba:	4b29      	ldr	r3, [pc, #164]	; (8006e60 <interrupt_WallCut+0xc70>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <interrupt_WallCut+0xc74>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006dc6:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <interrupt_WallCut+0xc78>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006dcc:	4b26      	ldr	r3, [pc, #152]	; (8006e68 <interrupt_WallCut+0xc78>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006dd2:	4b26      	ldr	r3, [pc, #152]	; (8006e6c <interrupt_WallCut+0xc7c>)
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006dda:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <interrupt_WallCut+0xc80>)
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <interrupt_WallCut+0xc84>)
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <interrupt_WallCut+0xc88>)
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bdb0      	pop	{r4, r5, r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	f3af 8000 	nop.w
 8006e00:	d2f1a9fc 	.word	0xd2f1a9fc
 8006e04:	3f50624d 	.word	0x3f50624d
 8006e08:	200005c4 	.word	0x200005c4
 8006e0c:	200005e4 	.word	0x200005e4
 8006e10:	20000258 	.word	0x20000258
 8006e14:	2000025c 	.word	0x2000025c
 8006e18:	200005f1 	.word	0x200005f1
 8006e1c:	200005dc 	.word	0x200005dc
 8006e20:	200005b8 	.word	0x200005b8
 8006e24:	200005b4 	.word	0x200005b4
 8006e28:	200005c0 	.word	0x200005c0
 8006e2c:	200005bc 	.word	0x200005bc
 8006e30:	200005c8 	.word	0x200005c8
 8006e34:	200005d0 	.word	0x200005d0
 8006e38:	200005cc 	.word	0x200005cc
 8006e3c:	200005d8 	.word	0x200005d8
 8006e40:	200005d4 	.word	0x200005d4
 8006e44:	200005e0 	.word	0x200005e0
 8006e48:	200005e8 	.word	0x200005e8
 8006e4c:	200005ec 	.word	0x200005ec
 8006e50:	200005ed 	.word	0x200005ed
 8006e54:	200005ee 	.word	0x200005ee
 8006e58:	200005ef 	.word	0x200005ef
 8006e5c:	200005f0 	.word	0x200005f0
 8006e60:	200005f2 	.word	0x200005f2
 8006e64:	200005f3 	.word	0x200005f3
 8006e68:	200005f4 	.word	0x200005f4
 8006e6c:	200005f8 	.word	0x200005f8
 8006e70:	200005fc 	.word	0x200005fc
 8006e74:	20000600 	.word	0x20000600
 8006e78:	20000604 	.word	0x20000604

08006e7c <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e92:	f014 f8a3 	bl	801afdc <HAL_GPIO_WritePin>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	2140      	movs	r1, #64	; 0x40
 8006eb0:	4803      	ldr	r0, [pc, #12]	; (8006ec0 <pl_yellow_LED_3+0x20>)
 8006eb2:	f014 f893 	bl	801afdc <HAL_GPIO_WritePin>
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	48000800 	.word	0x48000800

08006ec4 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ed6:	4803      	ldr	r0, [pc, #12]	; (8006ee4 <pl_yellow_LED_6+0x20>)
 8006ed8:	f014 f880 	bl	801afdc <HAL_GPIO_WritePin>
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	48000400 	.word	0x48000400

08006ee8 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006efa:	4803      	ldr	r0, [pc, #12]	; (8006f08 <pl_yellow_LED_8+0x20>)
 8006efc:	f014 f86e 	bl	801afdc <HAL_GPIO_WritePin>
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	48000400 	.word	0x48000400

08006f0c <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006f10:	2200      	movs	r2, #0
 8006f12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f1a:	f014 f85f 	bl	801afdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f28:	f014 f858 	bl	801afdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2140      	movs	r1, #64	; 0x40
 8006f30:	4811      	ldr	r0, [pc, #68]	; (8006f78 <pl_yellow_LED_off+0x6c>)
 8006f32:	f014 f853 	bl	801afdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006f36:	2200      	movs	r2, #0
 8006f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f3c:	480f      	ldr	r0, [pc, #60]	; (8006f7c <pl_yellow_LED_off+0x70>)
 8006f3e:	f014 f84d 	bl	801afdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006f42:	2200      	movs	r2, #0
 8006f44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f48:	480c      	ldr	r0, [pc, #48]	; (8006f7c <pl_yellow_LED_off+0x70>)
 8006f4a:	f014 f847 	bl	801afdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f54:	4809      	ldr	r0, [pc, #36]	; (8006f7c <pl_yellow_LED_off+0x70>)
 8006f56:	f014 f841 	bl	801afdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f60:	4806      	ldr	r0, [pc, #24]	; (8006f7c <pl_yellow_LED_off+0x70>)
 8006f62:	f014 f83b 	bl	801afdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006f66:	2200      	movs	r2, #0
 8006f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f6c:	4803      	ldr	r0, [pc, #12]	; (8006f7c <pl_yellow_LED_off+0x70>)
 8006f6e:	f014 f835 	bl	801afdc <HAL_GPIO_WritePin>
}
 8006f72:	bf00      	nop
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	48000800 	.word	0x48000800
 8006f7c:	48000400 	.word	0x48000400

08006f80 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	f003 0310 	and.w	r3, r3, #16
 8006fb0:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fc8:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fda:	f013 ffff 	bl	801afdc <HAL_GPIO_WritePin>
 8006fde:	e006      	b.n	8006fee <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fea:	f013 fff7 	bl	801afdc <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ffe:	f013 ffed 	bl	801afdc <HAL_GPIO_WritePin>
 8007002:	e006      	b.n	8007012 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007004:	2200      	movs	r2, #0
 8007006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800700a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800700e:	f013 ffe5 	bl	801afdc <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8007012:	7b7b      	ldrb	r3, [r7, #13]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8007018:	2201      	movs	r2, #1
 800701a:	2140      	movs	r1, #64	; 0x40
 800701c:	482e      	ldr	r0, [pc, #184]	; (80070d8 <pl_yellow_LED_count+0x158>)
 800701e:	f013 ffdd 	bl	801afdc <HAL_GPIO_WritePin>
 8007022:	e004      	b.n	800702e <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007024:	2200      	movs	r2, #0
 8007026:	2140      	movs	r1, #64	; 0x40
 8007028:	482b      	ldr	r0, [pc, #172]	; (80070d8 <pl_yellow_LED_count+0x158>)
 800702a:	f013 ffd7 	bl	801afdc <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 800702e:	7b3b      	ldrb	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8007034:	2201      	movs	r2, #1
 8007036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800703a:	4828      	ldr	r0, [pc, #160]	; (80070dc <pl_yellow_LED_count+0x15c>)
 800703c:	f013 ffce 	bl	801afdc <HAL_GPIO_WritePin>
 8007040:	e005      	b.n	800704e <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007042:	2200      	movs	r2, #0
 8007044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007048:	4824      	ldr	r0, [pc, #144]	; (80070dc <pl_yellow_LED_count+0x15c>)
 800704a:	f013 ffc7 	bl	801afdc <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8007054:	2201      	movs	r2, #1
 8007056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800705a:	4820      	ldr	r0, [pc, #128]	; (80070dc <pl_yellow_LED_count+0x15c>)
 800705c:	f013 ffbe 	bl	801afdc <HAL_GPIO_WritePin>
 8007060:	e005      	b.n	800706e <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007062:	2200      	movs	r2, #0
 8007064:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007068:	481c      	ldr	r0, [pc, #112]	; (80070dc <pl_yellow_LED_count+0x15c>)
 800706a:	f013 ffb7 	bl	801afdc <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 800706e:	7abb      	ldrb	r3, [r7, #10]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d006      	beq.n	8007082 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8007074:	2201      	movs	r2, #1
 8007076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800707a:	4818      	ldr	r0, [pc, #96]	; (80070dc <pl_yellow_LED_count+0x15c>)
 800707c:	f013 ffae 	bl	801afdc <HAL_GPIO_WritePin>
 8007080:	e005      	b.n	800708e <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007082:	2200      	movs	r2, #0
 8007084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007088:	4814      	ldr	r0, [pc, #80]	; (80070dc <pl_yellow_LED_count+0x15c>)
 800708a:	f013 ffa7 	bl	801afdc <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 800708e:	7a7b      	ldrb	r3, [r7, #9]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d006      	beq.n	80070a2 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8007094:	2201      	movs	r2, #1
 8007096:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800709a:	4810      	ldr	r0, [pc, #64]	; (80070dc <pl_yellow_LED_count+0x15c>)
 800709c:	f013 ff9e 	bl	801afdc <HAL_GPIO_WritePin>
 80070a0:	e005      	b.n	80070ae <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 80070a2:	2200      	movs	r2, #0
 80070a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070a8:	480c      	ldr	r0, [pc, #48]	; (80070dc <pl_yellow_LED_count+0x15c>)
 80070aa:	f013 ff97 	bl	801afdc <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 80070ae:	7a3b      	ldrb	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 80070b4:	2201      	movs	r2, #1
 80070b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070ba:	4808      	ldr	r0, [pc, #32]	; (80070dc <pl_yellow_LED_count+0x15c>)
 80070bc:	f013 ff8e 	bl	801afdc <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 80070c0:	e005      	b.n	80070ce <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 80070c2:	2200      	movs	r2, #0
 80070c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070c8:	4804      	ldr	r0, [pc, #16]	; (80070dc <pl_yellow_LED_count+0x15c>)
 80070ca:	f013 ff87 	bl	801afdc <HAL_GPIO_WritePin>
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	48000800 	.word	0x48000800
 80070dc:	48000400 	.word	0x48000400

080070e0 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80070f2:	4803      	ldr	r0, [pc, #12]	; (8007100 <pl_r_blue_LED+0x20>)
 80070f4:	f013 ff72 	bl	801afdc <HAL_GPIO_WritePin>
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	48000800 	.word	0x48000800

08007104 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	2104      	movs	r1, #4
 8007114:	4803      	ldr	r0, [pc, #12]	; (8007124 <pl_l_blue_LED+0x20>)
 8007116:	f013 ff61 	bl	801afdc <HAL_GPIO_WritePin>
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	48000400 	.word	0x48000400

08007128 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	460a      	mov	r2, r1
 8007132:	80fb      	strh	r3, [r7, #6]
 8007134:	4613      	mov	r3, r2
 8007136:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007138:	2200      	movs	r2, #0
 800713a:	2110      	movs	r1, #16
 800713c:	4833      	ldr	r0, [pc, #204]	; (800720c <encoder_read_byte_R+0xe4>)
 800713e:	f013 ff4d 	bl	801afdc <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007148:	80fb      	strh	r3, [r7, #6]
	parity=0;
 800714a:	2300      	movs	r3, #0
 800714c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800714e:	2300      	movs	r3, #0
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	e00d      	b.n	8007170 <encoder_read_byte_R+0x48>
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	fa42 f303 	asr.w	r3, r2, r3
 800715c:	b29b      	uxth	r3, r3
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	8bfb      	ldrh	r3, [r7, #30]
 8007166:	4413      	add	r3, r2
 8007168:	83fb      	strh	r3, [r7, #30]
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	3301      	adds	r3, #1
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b0e      	cmp	r3, #14
 8007174:	ddee      	ble.n	8007154 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007176:	8bfb      	ldrh	r3, [r7, #30]
 8007178:	03db      	lsls	r3, r3, #15
 800717a:	b21a      	sxth	r2, r3
 800717c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007180:	4313      	orrs	r3, r2
 8007182:	b21b      	sxth	r3, r3
 8007184:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	b29b      	uxth	r3, r3
 800718c:	b2db      	uxtb	r3, r3
 800718e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007196:	f107 0110 	add.w	r1, r7, #16
 800719a:	2364      	movs	r3, #100	; 0x64
 800719c:	2202      	movs	r2, #2
 800719e:	481c      	ldr	r0, [pc, #112]	; (8007210 <encoder_read_byte_R+0xe8>)
 80071a0:	f014 ffff 	bl	801c1a2 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80071a4:	2201      	movs	r2, #1
 80071a6:	2110      	movs	r1, #16
 80071a8:	4818      	ldr	r0, [pc, #96]	; (800720c <encoder_read_byte_R+0xe4>)
 80071aa:	f013 ff17 	bl	801afdc <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	e002      	b.n	80071ba <encoder_read_byte_R+0x92>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	3301      	adds	r3, #1
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b95      	cmp	r3, #149	; 0x95
 80071be:	ddf9      	ble.n	80071b4 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80071c0:	2200      	movs	r2, #0
 80071c2:	2110      	movs	r1, #16
 80071c4:	4811      	ldr	r0, [pc, #68]	; (800720c <encoder_read_byte_R+0xe4>)
 80071c6:	f013 ff09 	bl	801afdc <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 80071ca:	88bb      	ldrh	r3, [r7, #4]
 80071cc:	0a1b      	lsrs	r3, r3, #8
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 80071d4:	88bb      	ldrh	r3, [r7, #4]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 80071da:	f107 010c 	add.w	r1, r7, #12
 80071de:	2364      	movs	r3, #100	; 0x64
 80071e0:	2202      	movs	r2, #2
 80071e2:	480b      	ldr	r0, [pc, #44]	; (8007210 <encoder_read_byte_R+0xe8>)
 80071e4:	f015 f94b 	bl	801c47e <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 80071e8:	7b3b      	ldrb	r3, [r7, #12]
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	b21a      	sxth	r2, r3
 80071ee:	7b7b      	ldrb	r3, [r7, #13]
 80071f0:	b21b      	sxth	r3, r3
 80071f2:	4313      	orrs	r3, r2
 80071f4:	b21b      	sxth	r3, r3
 80071f6:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80071f8:	2201      	movs	r2, #1
 80071fa:	2110      	movs	r1, #16
 80071fc:	4803      	ldr	r0, [pc, #12]	; (800720c <encoder_read_byte_R+0xe4>)
 80071fe:	f013 feed 	bl	801afdc <HAL_GPIO_WritePin>

	return data;
 8007202:	88bb      	ldrh	r3, [r7, #4]

}
 8007204:	4618      	mov	r0, r3
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	48000400 	.word	0x48000400
 8007210:	2000d9e4 	.word	0x2000d9e4

08007214 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	460a      	mov	r2, r1
 800721e:	80fb      	strh	r3, [r7, #6]
 8007220:	4613      	mov	r3, r2
 8007222:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007224:	2200      	movs	r2, #0
 8007226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800722a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800722e:	f013 fed5 	bl	801afdc <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007238:	80fb      	strh	r3, [r7, #6]
	parity=0;
 800723a:	2300      	movs	r3, #0
 800723c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800723e:	2300      	movs	r3, #0
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	e00d      	b.n	8007260 <encoder_read_byte_L+0x4c>
 8007244:	88fa      	ldrh	r2, [r7, #6]
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	fa42 f303 	asr.w	r3, r2, r3
 800724c:	b29b      	uxth	r3, r3
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	8bfb      	ldrh	r3, [r7, #30]
 8007256:	4413      	add	r3, r2
 8007258:	83fb      	strh	r3, [r7, #30]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	3301      	adds	r3, #1
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b0e      	cmp	r3, #14
 8007264:	ddee      	ble.n	8007244 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007266:	8bfb      	ldrh	r3, [r7, #30]
 8007268:	03db      	lsls	r3, r3, #15
 800726a:	b21a      	sxth	r2, r3
 800726c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007270:	4313      	orrs	r3, r2
 8007272:	b21b      	sxth	r3, r3
 8007274:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	b29b      	uxth	r3, r3
 800727c:	b2db      	uxtb	r3, r3
 800727e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007286:	f107 0110 	add.w	r1, r7, #16
 800728a:	2364      	movs	r3, #100	; 0x64
 800728c:	2202      	movs	r2, #2
 800728e:	481e      	ldr	r0, [pc, #120]	; (8007308 <encoder_read_byte_L+0xf4>)
 8007290:	f014 ff87 	bl	801c1a2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007294:	2201      	movs	r2, #1
 8007296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800729a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800729e:	f013 fe9d 	bl	801afdc <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e002      	b.n	80072ae <encoder_read_byte_L+0x9a>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	3301      	adds	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b95      	cmp	r3, #149	; 0x95
 80072b2:	ddf9      	ble.n	80072a8 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80072b4:	2200      	movs	r2, #0
 80072b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072be:	f013 fe8d 	bl	801afdc <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 80072c2:	88bb      	ldrh	r3, [r7, #4]
 80072c4:	0a1b      	lsrs	r3, r3, #8
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 80072cc:	88bb      	ldrh	r3, [r7, #4]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 80072d2:	f107 010c 	add.w	r1, r7, #12
 80072d6:	2364      	movs	r3, #100	; 0x64
 80072d8:	2202      	movs	r2, #2
 80072da:	480b      	ldr	r0, [pc, #44]	; (8007308 <encoder_read_byte_L+0xf4>)
 80072dc:	f015 f8cf 	bl	801c47e <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 80072e0:	7b3b      	ldrb	r3, [r7, #12]
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	b21a      	sxth	r2, r3
 80072e6:	7b7b      	ldrb	r3, [r7, #13]
 80072e8:	b21b      	sxth	r3, r3
 80072ea:	4313      	orrs	r3, r2
 80072ec:	b21b      	sxth	r3, r3
 80072ee:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80072f0:	2201      	movs	r2, #1
 80072f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072fa:	f013 fe6f 	bl	801afdc <HAL_GPIO_WritePin>

	return data;
 80072fe:	88bb      	ldrh	r3, [r7, #4]

}
 8007300:	4618      	mov	r0, r3
 8007302:	3720      	adds	r7, #32
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	2000d9e4 	.word	0x2000d9e4

0800730c <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007310:	2100      	movs	r1, #0
 8007312:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007316:	f7ff ff07 	bl	8007128 <encoder_read_byte_R>
 800731a:	4603      	mov	r3, r0
 800731c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007328:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007370 <AS5047_DataUpdate+0x64>
 800732c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007330:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007374 <AS5047_DataUpdate+0x68>
 8007334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007338:	4b0f      	ldr	r3, [pc, #60]	; (8007378 <AS5047_DataUpdate+0x6c>)
 800733a:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 800733e:	2100      	movs	r1, #0
 8007340:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007344:	f7ff ff66 	bl	8007214 <encoder_read_byte_L>
 8007348:	4603      	mov	r3, r0
 800734a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007356:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007370 <AS5047_DataUpdate+0x64>
 800735a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800735e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007374 <AS5047_DataUpdate+0x68>
 8007362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <AS5047_DataUpdate+0x70>)
 8007368:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 800736c:	bf00      	nop
 800736e:	bd80      	pop	{r7, pc}
 8007370:	43b40000 	.word	0x43b40000
 8007374:	46800000 	.word	0x46800000
 8007378:	200006d8 	.word	0x200006d8
 800737c:	200006dc 	.word	0x200006dc

08007380 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
		  record_out();
 8007384:	f000 f91a 	bl	80075bc <record_out>
		  maze_display();
 8007388:	f00d f976 	bl	8014678 <maze_display>
		  flash_record_init();
 800738c:	f000 f9c2 	bl	8007714 <flash_record_init>
		  record_in();
 8007390:	f000 f858 	bl	8007444 <record_in>
}
 8007394:	bf00      	nop
 8007396:	bd80      	pop	{r7, pc}

08007398 <eraseFlash>:


void eraseFlash( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 80073a2:	2301      	movs	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 80073a6:	23fe      	movs	r3, #254	; 0xfe
 80073a8:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 80073aa:	2301      	movs	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 80073b2:	1d3a      	adds	r2, r7, #4
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f013 fb66 	bl	801aa8c <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 80073c0:	bf00      	nop
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 80073c8:	b5b0      	push	{r4, r5, r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 80073d6:	f013 fa6d 	bl	801a8b4 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <writeFlash+0x1c>
 80073e0:	f7ff ffda 	bl	8007398 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e00f      	b.n	800740a <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	17da      	asrs	r2, r3, #31
 80073ee:	461c      	mov	r4, r3
 80073f0:	4615      	mov	r5, r2
 80073f2:	4622      	mov	r2, r4
 80073f4:	462b      	mov	r3, r5
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	2000      	movs	r0, #0
 80073fa:	f013 fa05 	bl	801a808 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	3320      	adds	r3, #32
 8007402:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3308      	adds	r3, #8
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	429a      	cmp	r2, r3
 8007414:	d3e9      	bcc.n	80073ea <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 8007416:	f013 fa6f 	bl	801a8f8 <HAL_FLASH_Lock>

}
 800741a:	bf00      	nop
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bdb0      	pop	{r4, r5, r7, pc}

08007422 <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4619      	mov	r1, r3
 8007434:	68b8      	ldr	r0, [r7, #8]
 8007436:	f017 fee7 	bl	801f208 <memcpy>

}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <record_in>:


void record_in(void) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
	int t = 0;
 800744a:	2300      	movs	r3, #0
 800744c:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 800744e:	4b58      	ldr	r3, [pc, #352]	; (80075b0 <record_in+0x16c>)
 8007450:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 8007452:	e017      	b.n	8007484 <record_in+0x40>
		record.row[t] = wall.row[t];
 8007454:	4a57      	ldr	r2, [pc, #348]	; (80075b4 <record_in+0x170>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800745c:	4a56      	ldr	r2, [pc, #344]	; (80075b8 <record_in+0x174>)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 8007464:	4a53      	ldr	r2, [pc, #332]	; (80075b4 <record_in+0x170>)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	330c      	adds	r3, #12
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	4413      	add	r3, r2
 800746e:	88d9      	ldrh	r1, [r3, #6]
 8007470:	4a51      	ldr	r2, [pc, #324]	; (80075b8 <record_in+0x174>)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	330c      	adds	r3, #12
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4413      	add	r3, r2
 800747a:	460a      	mov	r2, r1
 800747c:	80da      	strh	r2, [r3, #6]
		t++;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3301      	adds	r3, #1
 8007482:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b0e      	cmp	r3, #14
 8007488:	dde4      	ble.n	8007454 <record_in+0x10>
	}
	t = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800748e:	e01c      	b.n	80074ca <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 8007490:	4a48      	ldr	r2, [pc, #288]	; (80075b4 <record_in+0x170>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	331c      	adds	r3, #28
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4413      	add	r3, r2
 800749a:	8899      	ldrh	r1, [r3, #4]
 800749c:	4a46      	ldr	r2, [pc, #280]	; (80075b8 <record_in+0x174>)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	331c      	adds	r3, #28
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	4413      	add	r3, r2
 80074a6:	460a      	mov	r2, r1
 80074a8:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 80074aa:	4a42      	ldr	r2, [pc, #264]	; (80075b4 <record_in+0x170>)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	332c      	adds	r3, #44	; 0x2c
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4413      	add	r3, r2
 80074b4:	8859      	ldrh	r1, [r3, #2]
 80074b6:	4a40      	ldr	r2, [pc, #256]	; (80075b8 <record_in+0x174>)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	332c      	adds	r3, #44	; 0x2c
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	460a      	mov	r2, r1
 80074c2:	805a      	strh	r2, [r3, #2]
		t++;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3301      	adds	r3, #1
 80074c8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b0e      	cmp	r3, #14
 80074ce:	dddf      	ble.n	8007490 <record_in+0x4c>
	}
	t = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 80074d4:	4b38      	ldr	r3, [pc, #224]	; (80075b8 <record_in+0x174>)
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	4619      	mov	r1, r3
 80074da:	2301      	movs	r3, #1
 80074dc:	2201      	movs	r2, #1
 80074de:	6838      	ldr	r0, [r7, #0]
 80074e0:	f7ff ff72 	bl	80073c8 <writeFlash>
	address+=16;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	3310      	adds	r3, #16
 80074e8:	603b      	str	r3, [r7, #0]
	t=1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 80074ee:	e00f      	b.n	8007510 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 80074f0:	4a31      	ldr	r2, [pc, #196]	; (80075b8 <record_in+0x174>)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f8:	4619      	mov	r1, r3
 80074fa:	2300      	movs	r3, #0
 80074fc:	2201      	movs	r2, #1
 80074fe:	6838      	ldr	r0, [r7, #0]
 8007500:	f7ff ff62 	bl	80073c8 <writeFlash>
	address+=16;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	3310      	adds	r3, #16
 8007508:	603b      	str	r3, [r7, #0]
	t++;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3301      	adds	r3, #1
 800750e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b0e      	cmp	r3, #14
 8007514:	ddec      	ble.n	80074f0 <record_in+0xac>
	}

	t=0;
 8007516:	2300      	movs	r3, #0
 8007518:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800751a:	e011      	b.n	8007540 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 800751c:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <record_in+0x174>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	330c      	adds	r3, #12
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	88db      	ldrh	r3, [r3, #6]
 8007528:	4619      	mov	r1, r3
 800752a:	2300      	movs	r3, #0
 800752c:	2201      	movs	r2, #1
 800752e:	6838      	ldr	r0, [r7, #0]
 8007530:	f7ff ff4a 	bl	80073c8 <writeFlash>
	address+=16;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	3310      	adds	r3, #16
 8007538:	603b      	str	r3, [r7, #0]
	t++;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3301      	adds	r3, #1
 800753e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b0e      	cmp	r3, #14
 8007544:	ddea      	ble.n	800751c <record_in+0xd8>
	}

	t=0;
 8007546:	2300      	movs	r3, #0
 8007548:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800754a:	e011      	b.n	8007570 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 800754c:	4a1a      	ldr	r2, [pc, #104]	; (80075b8 <record_in+0x174>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	331c      	adds	r3, #28
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	4413      	add	r3, r2
 8007556:	889b      	ldrh	r3, [r3, #4]
 8007558:	4619      	mov	r1, r3
 800755a:	2300      	movs	r3, #0
 800755c:	2201      	movs	r2, #1
 800755e:	6838      	ldr	r0, [r7, #0]
 8007560:	f7ff ff32 	bl	80073c8 <writeFlash>
	address+=16;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	3310      	adds	r3, #16
 8007568:	603b      	str	r3, [r7, #0]
	t++;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3301      	adds	r3, #1
 800756e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b0e      	cmp	r3, #14
 8007574:	ddea      	ble.n	800754c <record_in+0x108>
	}

	t=0;
 8007576:	2300      	movs	r3, #0
 8007578:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800757a:	e011      	b.n	80075a0 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 800757c:	4a0e      	ldr	r2, [pc, #56]	; (80075b8 <record_in+0x174>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	332c      	adds	r3, #44	; 0x2c
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	4413      	add	r3, r2
 8007586:	885b      	ldrh	r3, [r3, #2]
 8007588:	4619      	mov	r1, r3
 800758a:	2300      	movs	r3, #0
 800758c:	2201      	movs	r2, #1
 800758e:	6838      	ldr	r0, [r7, #0]
 8007590:	f7ff ff1a 	bl	80073c8 <writeFlash>
	address+=16;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	3310      	adds	r3, #16
 8007598:	603b      	str	r3, [r7, #0]
	t++;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3301      	adds	r3, #1
 800759e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b0e      	cmp	r3, #14
 80075a4:	ddea      	ble.n	800757c <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	0807f000 	.word	0x0807f000
 80075b4:	20000c3c 	.word	0x20000c3c
 80075b8:	20000cb4 	.word	0x20000cb4

080075bc <record_out>:


void record_out(void) {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80075c6:	4b50      	ldr	r3, [pc, #320]	; (8007708 <record_out+0x14c>)
 80075c8:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 80075ca:	e00e      	b.n	80075ea <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4a4e      	ldr	r2, [pc, #312]	; (800770c <record_out+0x150>)
 80075d2:	4413      	add	r3, r2
 80075d4:	2202      	movs	r2, #2
 80075d6:	4619      	mov	r1, r3
 80075d8:	6838      	ldr	r0, [r7, #0]
 80075da:	f7ff ff22 	bl	8007422 <loadFlash>
	address+=16;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	3310      	adds	r3, #16
 80075e2:	603b      	str	r3, [r7, #0]
	t++;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3301      	adds	r3, #1
 80075e8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b0e      	cmp	r3, #14
 80075ee:	dded      	ble.n	80075cc <record_out+0x10>
	}

	t=0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075f4:	e010      	b.n	8007618 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	330c      	adds	r3, #12
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	4a43      	ldr	r2, [pc, #268]	; (800770c <record_out+0x150>)
 80075fe:	4413      	add	r3, r2
 8007600:	3306      	adds	r3, #6
 8007602:	2202      	movs	r2, #2
 8007604:	4619      	mov	r1, r3
 8007606:	6838      	ldr	r0, [r7, #0]
 8007608:	f7ff ff0b 	bl	8007422 <loadFlash>
	address+=16;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	3310      	adds	r3, #16
 8007610:	603b      	str	r3, [r7, #0]
	t++;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3301      	adds	r3, #1
 8007616:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b0e      	cmp	r3, #14
 800761c:	ddeb      	ble.n	80075f6 <record_out+0x3a>
	}

	t=0;
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007622:	e010      	b.n	8007646 <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	331c      	adds	r3, #28
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4a38      	ldr	r2, [pc, #224]	; (800770c <record_out+0x150>)
 800762c:	4413      	add	r3, r2
 800762e:	3304      	adds	r3, #4
 8007630:	2202      	movs	r2, #2
 8007632:	4619      	mov	r1, r3
 8007634:	6838      	ldr	r0, [r7, #0]
 8007636:	f7ff fef4 	bl	8007422 <loadFlash>
		address+=16;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	3310      	adds	r3, #16
 800763e:	603b      	str	r3, [r7, #0]
		t++;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3301      	adds	r3, #1
 8007644:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b0e      	cmp	r3, #14
 800764a:	ddeb      	ble.n	8007624 <record_out+0x68>
	}

	t=0;
 800764c:	2300      	movs	r3, #0
 800764e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007650:	e010      	b.n	8007674 <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	332c      	adds	r3, #44	; 0x2c
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	4a2c      	ldr	r2, [pc, #176]	; (800770c <record_out+0x150>)
 800765a:	4413      	add	r3, r2
 800765c:	3302      	adds	r3, #2
 800765e:	2202      	movs	r2, #2
 8007660:	4619      	mov	r1, r3
 8007662:	6838      	ldr	r0, [r7, #0]
 8007664:	f7ff fedd 	bl	8007422 <loadFlash>
		address+=16;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	3310      	adds	r3, #16
 800766c:	603b      	str	r3, [r7, #0]
		t++;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3301      	adds	r3, #1
 8007672:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b0e      	cmp	r3, #14
 8007678:	ddeb      	ble.n	8007652 <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800767e:	e017      	b.n	80076b0 <record_out+0xf4>
		wall.row[t] = record.row[t];
 8007680:	4a22      	ldr	r2, [pc, #136]	; (800770c <record_out+0x150>)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007688:	4a21      	ldr	r2, [pc, #132]	; (8007710 <record_out+0x154>)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8007690:	4a1e      	ldr	r2, [pc, #120]	; (800770c <record_out+0x150>)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	330c      	adds	r3, #12
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	4413      	add	r3, r2
 800769a:	88d9      	ldrh	r1, [r3, #6]
 800769c:	4a1c      	ldr	r2, [pc, #112]	; (8007710 <record_out+0x154>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	330c      	adds	r3, #12
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	460a      	mov	r2, r1
 80076a8:	80da      	strh	r2, [r3, #6]
		t++;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3301      	adds	r3, #1
 80076ae:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b0e      	cmp	r3, #14
 80076b4:	dde4      	ble.n	8007680 <record_out+0xc4>
	}
	t = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076ba:	e01c      	b.n	80076f6 <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 80076bc:	4a13      	ldr	r2, [pc, #76]	; (800770c <record_out+0x150>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	331c      	adds	r3, #28
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	4413      	add	r3, r2
 80076c6:	8899      	ldrh	r1, [r3, #4]
 80076c8:	4a11      	ldr	r2, [pc, #68]	; (8007710 <record_out+0x154>)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	331c      	adds	r3, #28
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	4413      	add	r3, r2
 80076d2:	460a      	mov	r2, r1
 80076d4:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 80076d6:	4a0d      	ldr	r2, [pc, #52]	; (800770c <record_out+0x150>)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	332c      	adds	r3, #44	; 0x2c
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	8859      	ldrh	r1, [r3, #2]
 80076e2:	4a0b      	ldr	r2, [pc, #44]	; (8007710 <record_out+0x154>)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	332c      	adds	r3, #44	; 0x2c
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	4413      	add	r3, r2
 80076ec:	460a      	mov	r2, r1
 80076ee:	805a      	strh	r2, [r3, #2]
		t++;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3301      	adds	r3, #1
 80076f4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b0e      	cmp	r3, #14
 80076fa:	dddf      	ble.n	80076bc <record_out+0x100>
	}

	t = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	607b      	str	r3, [r7, #4]

}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	0807f000 	.word	0x0807f000
 800770c:	20000cb4 	.word	0x20000cb4
 8007710:	20000c3c 	.word	0x20000c3c

08007714 <flash_record_init>:

void flash_record_init(void){
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
	int t = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800771e:	e013      	b.n	8007748 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 8007720:	4a1e      	ldr	r2, [pc, #120]	; (800779c <flash_record_init+0x88>)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007728:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	b29b      	uxth	r3, r3
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	b299      	uxth	r1, r3
 8007734:	4a19      	ldr	r2, [pc, #100]	; (800779c <flash_record_init+0x88>)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	330c      	adds	r3, #12
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	4413      	add	r3, r2
 800773e:	460a      	mov	r2, r1
 8007740:	80da      	strh	r2, [r3, #6]
		t++;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3301      	adds	r3, #1
 8007746:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b0e      	cmp	r3, #14
 800774c:	dde8      	ble.n	8007720 <flash_record_init+0xc>
	}
	t = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007752:	e018      	b.n	8007786 <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	b29b      	uxth	r3, r3
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	b299      	uxth	r1, r3
 800775c:	4a0f      	ldr	r2, [pc, #60]	; (800779c <flash_record_init+0x88>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	331c      	adds	r3, #28
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	4413      	add	r3, r2
 8007766:	460a      	mov	r2, r1
 8007768:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	b29b      	uxth	r3, r3
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	b299      	uxth	r1, r3
 8007772:	4a0a      	ldr	r2, [pc, #40]	; (800779c <flash_record_init+0x88>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	332c      	adds	r3, #44	; 0x2c
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	4413      	add	r3, r2
 800777c:	460a      	mov	r2, r1
 800777e:	805a      	strh	r2, [r3, #2]
		t++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3301      	adds	r3, #1
 8007784:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b0e      	cmp	r3, #14
 800778a:	dde3      	ble.n	8007754 <flash_record_init+0x40>
	}

}
 800778c:	bf00      	nop
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20000c3c 	.word	0x20000c3c

080077a0 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80077aa:	2200      	movs	r2, #0
 80077ac:	2110      	movs	r1, #16
 80077ae:	4810      	ldr	r0, [pc, #64]	; (80077f0 <gyro_read_byte+0x50>)
 80077b0:	f013 fc14 	bl	801afdc <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80077be:	f107 010f 	add.w	r1, r7, #15
 80077c2:	2364      	movs	r3, #100	; 0x64
 80077c4:	2201      	movs	r2, #1
 80077c6:	480b      	ldr	r0, [pc, #44]	; (80077f4 <gyro_read_byte+0x54>)
 80077c8:	f014 fceb 	bl	801c1a2 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 80077cc:	f107 010e 	add.w	r1, r7, #14
 80077d0:	2364      	movs	r3, #100	; 0x64
 80077d2:	2201      	movs	r2, #1
 80077d4:	4807      	ldr	r0, [pc, #28]	; (80077f4 <gyro_read_byte+0x54>)
 80077d6:	f014 fe52 	bl	801c47e <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80077da:	2201      	movs	r2, #1
 80077dc:	2110      	movs	r1, #16
 80077de:	4804      	ldr	r0, [pc, #16]	; (80077f0 <gyro_read_byte+0x50>)
 80077e0:	f013 fbfc 	bl	801afdc <HAL_GPIO_WritePin>

	return val;
 80077e4:	7bbb      	ldrb	r3, [r7, #14]

}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	48000800 	.word	0x48000800
 80077f4:	2000d980 	.word	0x2000d980

080077f8 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	460a      	mov	r2, r1
 8007802:	71fb      	strb	r3, [r7, #7]
 8007804:	4613      	mov	r3, r2
 8007806:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780e:	b2db      	uxtb	r3, r3
 8007810:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8007812:	2200      	movs	r2, #0
 8007814:	2110      	movs	r1, #16
 8007816:	480c      	ldr	r0, [pc, #48]	; (8007848 <gyro_write_byte+0x50>)
 8007818:	f013 fbe0 	bl	801afdc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800781c:	f107 010f 	add.w	r1, r7, #15
 8007820:	2364      	movs	r3, #100	; 0x64
 8007822:	2201      	movs	r2, #1
 8007824:	4809      	ldr	r0, [pc, #36]	; (800784c <gyro_write_byte+0x54>)
 8007826:	f014 fcbc 	bl	801c1a2 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 800782a:	1db9      	adds	r1, r7, #6
 800782c:	2364      	movs	r3, #100	; 0x64
 800782e:	2201      	movs	r2, #1
 8007830:	4806      	ldr	r0, [pc, #24]	; (800784c <gyro_write_byte+0x54>)
 8007832:	f014 fcb6 	bl	801c1a2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8007836:	2201      	movs	r2, #1
 8007838:	2110      	movs	r1, #16
 800783a:	4803      	ldr	r0, [pc, #12]	; (8007848 <gyro_write_byte+0x50>)
 800783c:	f013 fbce 	bl	801afdc <HAL_GPIO_WritePin>

}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	48000800 	.word	0x48000800
 800784c:	2000d980 	.word	0x2000d980

08007850 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 800785a:	2075      	movs	r0, #117	; 0x75
 800785c:	f7ff ffa0 	bl	80077a0 <gyro_read_byte>
 8007860:	4603      	mov	r3, r0
 8007862:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	4619      	mov	r1, r3
 8007868:	481b      	ldr	r0, [pc, #108]	; (80078d8 <pl_gyro_init+0x88>)
 800786a:	f018 f94d 	bl	801fb08 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	2b98      	cmp	r3, #152	; 0x98
 8007872:	d00e      	beq.n	8007892 <pl_gyro_init+0x42>

		HAL_Delay(100);
 8007874:	2064      	movs	r0, #100	; 0x64
 8007876:	f010 f9f5 	bl	8017c64 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 800787a:	2075      	movs	r0, #117	; 0x75
 800787c:	f7ff ff90 	bl	80077a0 <gyro_read_byte>
 8007880:	4603      	mov	r3, r0
 8007882:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	2b98      	cmp	r3, #152	; 0x98
 8007888:	d003      	beq.n	8007892 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 800788a:	4814      	ldr	r0, [pc, #80]	; (80078dc <pl_gyro_init+0x8c>)
 800788c:	f018 f93c 	bl	801fb08 <iprintf>
 8007890:	e7fb      	b.n	800788a <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8007892:	2100      	movs	r1, #0
 8007894:	206b      	movs	r0, #107	; 0x6b
 8007896:	f7ff ffaf 	bl	80077f8 <gyro_write_byte>

	HAL_Delay(50);
 800789a:	2032      	movs	r0, #50	; 0x32
 800789c:	f010 f9e2 	bl	8017c64 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 80078a0:	2100      	movs	r1, #0
 80078a2:	206c      	movs	r0, #108	; 0x6c
 80078a4:	f7ff ffa8 	bl	80077f8 <gyro_write_byte>

	HAL_Delay(50);
 80078a8:	2032      	movs	r0, #50	; 0x32
 80078aa:	f010 f9db 	bl	8017c64 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 80078ae:	2118      	movs	r1, #24
 80078b0:	201b      	movs	r0, #27
 80078b2:	f7ff ffa1 	bl	80077f8 <gyro_write_byte>

	HAL_Delay(50);
 80078b6:	2032      	movs	r0, #50	; 0x32
 80078b8:	f010 f9d4 	bl	8017c64 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 80078bc:	2118      	movs	r1, #24
 80078be:	201c      	movs	r0, #28
 80078c0:	f7ff ff9a 	bl	80077f8 <gyro_write_byte>

	HAL_Delay(50);
 80078c4:	2032      	movs	r0, #50	; 0x32
 80078c6:	f010 f9cd 	bl	8017c64 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 80078ca:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <pl_gyro_init+0x90>)
 80078cc:	2201      	movs	r2, #1
 80078ce:	701a      	strb	r2, [r3, #0]

}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	080223a8 	.word	0x080223a8
 80078dc:	080223bc 	.word	0x080223bc
 80078e0:	200006e0 	.word	0x200006e0

080078e4 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 80078e4:	b590      	push	{r4, r7, lr}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff ff55 	bl	80077a0 <gyro_read_byte>
 80078f6:	4603      	mov	r3, r0
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	3301      	adds	r3, #1
 8007900:	b2db      	uxtb	r3, r3
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff ff4c 	bl	80077a0 <gyro_read_byte>
 8007908:	4603      	mov	r3, r0
 800790a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800790c:	4323      	orrs	r3, r4
 800790e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007914:	ee07 3a90 	vmov	s15, r3
 8007918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800791c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007938 <ICM20602_GYRO_READ+0x54>
 8007920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007924:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	ee07 3a90 	vmov	s15, r3

}
 800792e:	eeb0 0a67 	vmov.f32	s0, s15
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	bd90      	pop	{r4, r7, pc}
 8007938:	41833333 	.word	0x41833333

0800793c <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff ff29 	bl	80077a0 <gyro_read_byte>
 800794e:	4603      	mov	r3, r0
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	3301      	adds	r3, #1
 8007958:	b2db      	uxtb	r3, r3
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff ff20 	bl	80077a0 <gyro_read_byte>
 8007960:	4603      	mov	r3, r0
 8007962:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007964:	4323      	orrs	r3, r4
 8007966:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007974:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007990 <ICM20602_ACCEL_READ+0x54>
 8007978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800797c:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	ee07 3a90 	vmov	s15, r3

}
 8007986:	eeb0 0a67 	vmov.f32	s0, s15
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	bd90      	pop	{r4, r7, pc}
 8007990:	45000000 	.word	0x45000000

08007994 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007998:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <ICM20602_DataUpdate+0x40>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d117      	bne.n	80079d0 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 80079a0:	2045      	movs	r0, #69	; 0x45
 80079a2:	f7ff ff9f 	bl	80078e4 <ICM20602_GYRO_READ>
 80079a6:	eef0 7a40 	vmov.f32	s15, s0
 80079aa:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <ICM20602_DataUpdate+0x44>)
 80079ac:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 80079b0:	2047      	movs	r0, #71	; 0x47
 80079b2:	f7ff ff97 	bl	80078e4 <ICM20602_GYRO_READ>
 80079b6:	eef0 7a40 	vmov.f32	s15, s0
 80079ba:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <ICM20602_DataUpdate+0x44>)
 80079bc:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 80079c0:	203b      	movs	r0, #59	; 0x3b
 80079c2:	f7ff ffbb 	bl	800793c <ICM20602_ACCEL_READ>
 80079c6:	eef0 7a40 	vmov.f32	s15, s0
 80079ca:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <ICM20602_DataUpdate+0x44>)
 80079cc:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 80079d0:	bf00      	nop
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	200006e0 	.word	0x200006e0
 80079d8:	200006e4 	.word	0x200006e4

080079dc <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 80079e0:	480f      	ldr	r0, [pc, #60]	; (8007a20 <pl_motor_init+0x44>)
 80079e2:	f015 faa3 	bl	801cf2c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 80079e6:	480e      	ldr	r0, [pc, #56]	; (8007a20 <pl_motor_init+0x44>)
 80079e8:	f00f fb2a 	bl	8017040 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 80079ec:	480d      	ldr	r0, [pc, #52]	; (8007a24 <pl_motor_init+0x48>)
 80079ee:	f015 fa9d 	bl	801cf2c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 80079f2:	480c      	ldr	r0, [pc, #48]	; (8007a24 <pl_motor_init+0x48>)
 80079f4:	f00f fb24 	bl	8017040 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 80079f8:	2001      	movs	r0, #1
 80079fa:	f000 f81f 	bl	8007a3c <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <pl_motor_init+0x44>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	225a      	movs	r2, #90	; 0x5a
 8007a04:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8007a06:	2001      	movs	r0, #1
 8007a08:	f000 f840 	bl	8007a8c <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007a0c:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <pl_motor_init+0x44>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	225a      	movs	r2, #90	; 0x5a
 8007a12:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8007a14:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <pl_motor_init+0x48>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	221e      	movs	r2, #30
 8007a1a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007a1c:	bf00      	nop
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	2000da98 	.word	0x2000da98
 8007a24:	2000dae4 	.word	0x2000dae4

08007a28 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d819      	bhi.n	8007a7e <pl_L_DriveMotor_mode+0x42>
 8007a4a:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <pl_L_DriveMotor_mode+0x14>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a7d 	.word	0x08007a7d
 8007a54:	08007a61 	.word	0x08007a61
 8007a58:	08007a6f 	.word	0x08007a6f
 8007a5c:	08007a7d 	.word	0x08007a7d
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007a60:	2200      	movs	r2, #0
 8007a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a66:	4808      	ldr	r0, [pc, #32]	; (8007a88 <pl_L_DriveMotor_mode+0x4c>)
 8007a68:	f013 fab8 	bl	801afdc <HAL_GPIO_WritePin>
break;
 8007a6c:	e007      	b.n	8007a7e <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a74:	4804      	ldr	r0, [pc, #16]	; (8007a88 <pl_L_DriveMotor_mode+0x4c>)
 8007a76:	f013 fab1 	bl	801afdc <HAL_GPIO_WritePin>
break;
 8007a7a:	e000      	b.n	8007a7e <pl_L_DriveMotor_mode+0x42>
break;
 8007a7c:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	48000800 	.word	0x48000800

08007a8c <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d817      	bhi.n	8007aca <pl_R_DriveMotor_mode+0x3e>
 8007a9a:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <pl_R_DriveMotor_mode+0x14>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ab1 	.word	0x08007ab1
 8007aa8:	08007abd 	.word	0x08007abd
 8007aac:	08007ac9 	.word	0x08007ac9
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2180      	movs	r1, #128	; 0x80
 8007ab4:	4807      	ldr	r0, [pc, #28]	; (8007ad4 <pl_R_DriveMotor_mode+0x48>)
 8007ab6:	f013 fa91 	bl	801afdc <HAL_GPIO_WritePin>
break;
 8007aba:	e006      	b.n	8007aca <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007abc:	2200      	movs	r2, #0
 8007abe:	2180      	movs	r1, #128	; 0x80
 8007ac0:	4804      	ldr	r0, [pc, #16]	; (8007ad4 <pl_R_DriveMotor_mode+0x48>)
 8007ac2:	f013 fa8b 	bl	801afdc <HAL_GPIO_WritePin>
break;
 8007ac6:	e000      	b.n	8007aca <pl_R_DriveMotor_mode+0x3e>
break;
 8007ac8:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	48000400 	.word	0x48000400

08007ad8 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007adc:	2108      	movs	r1, #8
 8007ade:	4804      	ldr	r0, [pc, #16]	; (8007af0 <pl_DriveMotor_start+0x18>)
 8007ae0:	f015 faec 	bl	801d0bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4802      	ldr	r0, [pc, #8]	; (8007af0 <pl_DriveMotor_start+0x18>)
 8007ae8:	f015 fae8 	bl	801d0bc <HAL_TIM_PWM_Start>
}
 8007aec:	bf00      	nop
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	2000da98 	.word	0x2000da98

08007af4 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007af8:	2108      	movs	r1, #8
 8007afa:	4804      	ldr	r0, [pc, #16]	; (8007b0c <pl_DriveMotor_stop+0x18>)
 8007afc:	f015 fbea 	bl	801d2d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007b00:	2100      	movs	r1, #0
 8007b02:	4802      	ldr	r0, [pc, #8]	; (8007b0c <pl_DriveMotor_stop+0x18>)
 8007b04:	f015 fbe6 	bl	801d2d4 <HAL_TIM_PWM_Stop>
}
 8007b08:	bf00      	nop
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	2000da98 	.word	0x2000da98

08007b10 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8007b1a:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <pl_DriveMotor_duty+0x28>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <pl_DriveMotor_duty+0x28>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	2000da98 	.word	0x2000da98

08007b3c <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8007b40:	2100      	movs	r1, #0
 8007b42:	4802      	ldr	r0, [pc, #8]	; (8007b4c <pl_FunMotor_start+0x10>)
 8007b44:	f015 faba 	bl	801d0bc <HAL_TIM_PWM_Start>
}
 8007b48:	bf00      	nop
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	2000dae4 	.word	0x2000dae4

08007b50 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007b54:	2100      	movs	r1, #0
 8007b56:	4802      	ldr	r0, [pc, #8]	; (8007b60 <pl_FunMotor_stop+0x10>)
 8007b58:	f015 fbbc 	bl	801d2d4 <HAL_TIM_PWM_Stop>
}
 8007b5c:	bf00      	nop
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	2000dae4 	.word	0x2000dae4

08007b64 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b72:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007ba8 <pl_FunMotor_duty+0x44>
 8007b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b7e:	ee17 3a90 	vmov	r3, s15
 8007b82:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007b84:	4b09      	ldr	r3, [pc, #36]	; (8007bac <pl_FunMotor_duty+0x48>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2264      	movs	r2, #100	; 0x64
 8007b8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b8c:	4b07      	ldr	r3, [pc, #28]	; (8007bac <pl_FunMotor_duty+0x48>)
 8007b8e:	2264      	movs	r2, #100	; 0x64
 8007b90:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007b92:	4b06      	ldr	r3, [pc, #24]	; (8007bac <pl_FunMotor_duty+0x48>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	42c80000 	.word	0x42c80000
 8007bac:	2000dae4 	.word	0x2000dae4

08007bb0 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
	AD_step=0;
 8007bb4:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <pl_sensor_init+0x18>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007bba:	217f      	movs	r1, #127	; 0x7f
 8007bbc:	4803      	ldr	r0, [pc, #12]	; (8007bcc <pl_sensor_init+0x1c>)
 8007bbe:	f012 f8cb 	bl	8019d58 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007bc2:	bf00      	nop
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000708 	.word	0x20000708
 8007bcc:	20000734 	.word	0x20000734

08007bd0 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007bd6:	483c      	ldr	r0, [pc, #240]	; (8007cc8 <pl_getbatt+0xf8>)
 8007bd8:	f010 fcac 	bl	8018534 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007bdc:	2132      	movs	r1, #50	; 0x32
 8007bde:	483a      	ldr	r0, [pc, #232]	; (8007cc8 <pl_getbatt+0xf8>)
 8007be0:	f010 fda6 	bl	8018730 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007be4:	4838      	ldr	r0, [pc, #224]	; (8007cc8 <pl_getbatt+0xf8>)
 8007be6:	f010 ffc2 	bl	8018b6e <HAL_ADC_GetValue>
 8007bea:	4603      	mov	r3, r0
 8007bec:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007bee:	4836      	ldr	r0, [pc, #216]	; (8007cc8 <pl_getbatt+0xf8>)
 8007bf0:	f010 fd6a 	bl	80186c8 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfe:	ee17 0a90 	vmov	r0, s15
 8007c02:	f7f8 fcc9 	bl	8000598 <__aeabi_f2d>
 8007c06:	a326      	add	r3, pc, #152	; (adr r3, 8007ca0 <pl_getbatt+0xd0>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 fd1c 	bl	8000648 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4610      	mov	r0, r2
 8007c16:	4619      	mov	r1, r3
 8007c18:	a323      	add	r3, pc, #140	; (adr r3, 8007ca8 <pl_getbatt+0xd8>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fe3d 	bl	800089c <__aeabi_ddiv>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4610      	mov	r0, r2
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	4b27      	ldr	r3, [pc, #156]	; (8007ccc <pl_getbatt+0xfc>)
 8007c30:	f7f8 fd0a 	bl	8000648 <__aeabi_dmul>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	4b23      	ldr	r3, [pc, #140]	; (8007cd0 <pl_getbatt+0x100>)
 8007c42:	f7f8 fe2b 	bl	800089c <__aeabi_ddiv>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	a318      	add	r3, pc, #96	; (adr r3, 8007cb0 <pl_getbatt+0xe0>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f7f8 fcf8 	bl	8000648 <__aeabi_dmul>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4619      	mov	r1, r3
 8007c60:	a315      	add	r3, pc, #84	; (adr r3, 8007cb8 <pl_getbatt+0xe8>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fcef 	bl	8000648 <__aeabi_dmul>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	a313      	add	r3, pc, #76	; (adr r3, 8007cc0 <pl_getbatt+0xf0>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 fe10 	bl	800089c <__aeabi_ddiv>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4610      	mov	r0, r2
 8007c82:	4619      	mov	r1, r3
 8007c84:	f7f8 ffb8 	bl	8000bf8 <__aeabi_d2f>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	603b      	str	r3, [r7, #0]
return batt;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	ee07 3a90 	vmov	s15, r3
}
 8007c92:	eeb0 0a67 	vmov.f32	s0, s15
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	66666666 	.word	0x66666666
 8007ca4:	400a6666 	.word	0x400a6666
 8007ca8:	00000000 	.word	0x00000000
 8007cac:	40affe00 	.word	0x40affe00
 8007cb0:	66666666 	.word	0x66666666
 8007cb4:	3ff26666 	.word	0x3ff26666
 8007cb8:	9999999a 	.word	0x9999999a
 8007cbc:	400d9999 	.word	0x400d9999
 8007cc0:	ae147ae1 	.word	0xae147ae1
 8007cc4:	400ee147 	.word	0x400ee147
 8007cc8:	20000734 	.word	0x20000734
 8007ccc:	40340000 	.word	0x40340000
 8007cd0:	40240000 	.word	0x40240000
 8007cd4:	00000000 	.word	0x00000000

08007cd8 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007cde:	4882      	ldr	r0, [pc, #520]	; (8007ee8 <pl_callback_getSensor+0x210>)
 8007ce0:	f010 fee4 	bl	8018aac <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007ce4:	4b81      	ldr	r3, [pc, #516]	; (8007eec <pl_callback_getSensor+0x214>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	f200 80d9 	bhi.w	8007ea0 <pl_callback_getSensor+0x1c8>
 8007cee:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <pl_callback_getSensor+0x1c>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d09 	.word	0x08007d09
 8007cf8:	08007d41 	.word	0x08007d41
 8007cfc:	08007da1 	.word	0x08007da1
 8007d00:	08007de1 	.word	0x08007de1
 8007d04:	08007ea1 	.word	0x08007ea1
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007d08:	2201      	movs	r2, #1
 8007d0a:	2102      	movs	r1, #2
 8007d0c:	4878      	ldr	r0, [pc, #480]	; (8007ef0 <pl_callback_getSensor+0x218>)
 8007d0e:	f013 f965 	bl	801afdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007d12:	2200      	movs	r2, #0
 8007d14:	2110      	movs	r1, #16
 8007d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d1a:	f013 f95f 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d24:	4873      	ldr	r0, [pc, #460]	; (8007ef4 <pl_callback_getSensor+0x21c>)
 8007d26:	f013 f959 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007d2e:	e002      	b.n	8007d36 <pl_callback_getSensor+0x5e>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3301      	adds	r3, #1
 8007d34:	607b      	str	r3, [r7, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d3c:	ddf8      	ble.n	8007d30 <pl_callback_getSensor+0x58>
		break;
 8007d3e:	e0af      	b.n	8007ea0 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007d40:	4b6d      	ldr	r3, [pc, #436]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007d42:	885a      	ldrh	r2, [r3, #2]
 8007d44:	4b6d      	ldr	r3, [pc, #436]	; (8007efc <pl_callback_getSensor+0x224>)
 8007d46:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007d48:	4b6b      	ldr	r3, [pc, #428]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007d4a:	889a      	ldrh	r2, [r3, #4]
 8007d4c:	4b6b      	ldr	r3, [pc, #428]	; (8007efc <pl_callback_getSensor+0x224>)
 8007d4e:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007d50:	4b69      	ldr	r3, [pc, #420]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007d52:	88da      	ldrh	r2, [r3, #6]
 8007d54:	4b6a      	ldr	r3, [pc, #424]	; (8007f00 <pl_callback_getSensor+0x228>)
 8007d56:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007d58:	4b67      	ldr	r3, [pc, #412]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007d5a:	891a      	ldrh	r2, [r3, #8]
 8007d5c:	4b68      	ldr	r3, [pc, #416]	; (8007f00 <pl_callback_getSensor+0x228>)
 8007d5e:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007d60:	4b65      	ldr	r3, [pc, #404]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007d62:	895a      	ldrh	r2, [r3, #10]
 8007d64:	4b66      	ldr	r3, [pc, #408]	; (8007f00 <pl_callback_getSensor+0x228>)
 8007d66:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2102      	movs	r1, #2
 8007d6c:	4860      	ldr	r0, [pc, #384]	; (8007ef0 <pl_callback_getSensor+0x218>)
 8007d6e:	f013 f935 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007d72:	2201      	movs	r2, #1
 8007d74:	2110      	movs	r1, #16
 8007d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d7a:	f013 f92f 	bl	801afdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d84:	485b      	ldr	r0, [pc, #364]	; (8007ef4 <pl_callback_getSensor+0x21c>)
 8007d86:	f013 f929 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007d8e:	e002      	b.n	8007d96 <pl_callback_getSensor+0xbe>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3301      	adds	r3, #1
 8007d94:	607b      	str	r3, [r7, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d9c:	ddf8      	ble.n	8007d90 <pl_callback_getSensor+0xb8>
		break;
 8007d9e:	e07f      	b.n	8007ea0 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007da0:	4b55      	ldr	r3, [pc, #340]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007da2:	88da      	ldrh	r2, [r3, #6]
 8007da4:	4b55      	ldr	r3, [pc, #340]	; (8007efc <pl_callback_getSensor+0x224>)
 8007da6:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007da8:	2200      	movs	r2, #0
 8007daa:	2102      	movs	r1, #2
 8007dac:	4850      	ldr	r0, [pc, #320]	; (8007ef0 <pl_callback_getSensor+0x218>)
 8007dae:	f013 f915 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007db2:	2200      	movs	r2, #0
 8007db4:	2110      	movs	r1, #16
 8007db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dba:	f013 f90f 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dc4:	484b      	ldr	r0, [pc, #300]	; (8007ef4 <pl_callback_getSensor+0x21c>)
 8007dc6:	f013 f909 	bl	801afdc <HAL_GPIO_WritePin>
		j=0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007dce:	e002      	b.n	8007dd6 <pl_callback_getSensor+0xfe>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ddc:	ddf8      	ble.n	8007dd0 <pl_callback_getSensor+0xf8>
		break;
 8007dde:	e05f      	b.n	8007ea0 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007de0:	4b45      	ldr	r3, [pc, #276]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007de2:	885a      	ldrh	r2, [r3, #2]
 8007de4:	4b46      	ldr	r3, [pc, #280]	; (8007f00 <pl_callback_getSensor+0x228>)
 8007de6:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007de8:	4b43      	ldr	r3, [pc, #268]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007dea:	889a      	ldrh	r2, [r3, #4]
 8007dec:	4b44      	ldr	r3, [pc, #272]	; (8007f00 <pl_callback_getSensor+0x228>)
 8007dee:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007df0:	4b41      	ldr	r3, [pc, #260]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007df2:	891a      	ldrh	r2, [r3, #8]
 8007df4:	4b41      	ldr	r3, [pc, #260]	; (8007efc <pl_callback_getSensor+0x224>)
 8007df6:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007df8:	4b3f      	ldr	r3, [pc, #252]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007dfa:	895a      	ldrh	r2, [r3, #10]
 8007dfc:	4b3f      	ldr	r3, [pc, #252]	; (8007efc <pl_callback_getSensor+0x224>)
 8007dfe:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007e00:	2200      	movs	r2, #0
 8007e02:	2102      	movs	r1, #2
 8007e04:	483a      	ldr	r0, [pc, #232]	; (8007ef0 <pl_callback_getSensor+0x218>)
 8007e06:	f013 f8e9 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2110      	movs	r1, #16
 8007e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e12:	f013 f8e3 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007e16:	2200      	movs	r2, #0
 8007e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e1c:	4835      	ldr	r0, [pc, #212]	; (8007ef4 <pl_callback_getSensor+0x21c>)
 8007e1e:	f013 f8dd 	bl	801afdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007e26:	e002      	b.n	8007e2e <pl_callback_getSensor+0x156>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	607b      	str	r3, [r7, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b32      	cmp	r3, #50	; 0x32
 8007e32:	ddf9      	ble.n	8007e28 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007e34:	4b30      	ldr	r3, [pc, #192]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007e3a:	887b      	ldrh	r3, [r7, #2]
 8007e3c:	ee07 3a90 	vmov	s15, r3
 8007e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e44:	ee17 0a90 	vmov	r0, s15
 8007e48:	f7f8 fba6 	bl	8000598 <__aeabi_f2d>
 8007e4c:	a320      	add	r3, pc, #128	; (adr r3, 8007ed0 <pl_callback_getSensor+0x1f8>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f7f8 fbf9 	bl	8000648 <__aeabi_dmul>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	a31e      	add	r3, pc, #120	; (adr r3, 8007ed8 <pl_callback_getSensor+0x200>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f7f8 fd1a 	bl	800089c <__aeabi_ddiv>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4619      	mov	r1, r3
 8007e70:	a31b      	add	r3, pc, #108	; (adr r3, 8007ee0 <pl_callback_getSensor+0x208>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fbe7 	bl	8000648 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	4b1f      	ldr	r3, [pc, #124]	; (8007f04 <pl_callback_getSensor+0x22c>)
 8007e88:	f7f8 fd08 	bl	800089c <__aeabi_ddiv>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4610      	mov	r0, r2
 8007e92:	4619      	mov	r1, r3
 8007e94:	f7f8 feb0 	bl	8000bf8 <__aeabi_d2f>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	4a1b      	ldr	r2, [pc, #108]	; (8007f08 <pl_callback_getSensor+0x230>)
 8007e9c:	6013      	str	r3, [r2, #0]
		break;
 8007e9e:	bf00      	nop

		break;
	}


	AD_step++;
 8007ea0:	4b12      	ldr	r3, [pc, #72]	; (8007eec <pl_callback_getSensor+0x214>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	4b10      	ldr	r3, [pc, #64]	; (8007eec <pl_callback_getSensor+0x214>)
 8007eaa:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007eac:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <pl_callback_getSensor+0x214>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d005      	beq.n	8007ec0 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007eb4:	2206      	movs	r2, #6
 8007eb6:	4910      	ldr	r1, [pc, #64]	; (8007ef8 <pl_callback_getSensor+0x220>)
 8007eb8:	480b      	ldr	r0, [pc, #44]	; (8007ee8 <pl_callback_getSensor+0x210>)
 8007eba:	f010 fd2d 	bl	8018918 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007ebe:	e002      	b.n	8007ec6 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <pl_callback_getSensor+0x214>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	66666666 	.word	0x66666666
 8007ed4:	400a6666 	.word	0x400a6666
 8007ed8:	00000000 	.word	0x00000000
 8007edc:	40affe00 	.word	0x40affe00
 8007ee0:	00000000 	.word	0x00000000
 8007ee4:	4062c000 	.word	0x4062c000
 8007ee8:	20000734 	.word	0x20000734
 8007eec:	20000708 	.word	0x20000708
 8007ef0:	48000400 	.word	0x48000400
 8007ef4:	48000800 	.word	0x48000800
 8007ef8:	200006fc 	.word	0x200006fc
 8007efc:	2000070c 	.word	0x2000070c
 8007f00:	20000718 	.word	0x20000718
 8007f04:	40490000 	.word	0x40490000
 8007f08:	20000724 	.word	0x20000724

08007f0c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007f10:	2206      	movs	r2, #6
 8007f12:	4903      	ldr	r1, [pc, #12]	; (8007f20 <pl_interupt_getSensor+0x14>)
 8007f14:	4803      	ldr	r0, [pc, #12]	; (8007f24 <pl_interupt_getSensor+0x18>)
 8007f16:	f010 fcff 	bl	8018918 <HAL_ADC_Start_DMA>

}
 8007f1a:	bf00      	nop
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	200006fc 	.word	0x200006fc
 8007f24:	20000734 	.word	0x20000734

08007f28 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
	count_mode=0;
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <pl_timer_init+0x1c>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007f32:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <pl_timer_init+0x20>)
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007f3a:	4804      	ldr	r0, [pc, #16]	; (8007f4c <pl_timer_init+0x24>)
 8007f3c:	f014 fff6 	bl	801cf2c <HAL_TIM_Base_Start_IT>
}
 8007f40:	bf00      	nop
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000730 	.word	0x20000730
 8007f48:	2000072c 	.word	0x2000072c
 8007f4c:	2000da4c 	.word	0x2000da4c

08007f50 <interrupt_timer>:

void interrupt_timer(void){
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
	g_timCount++;
 8007f54:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <interrupt_timer+0x48>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	4a0f      	ldr	r2, [pc, #60]	; (8007f98 <interrupt_timer+0x48>)
 8007f5c:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007f5e:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <interrupt_timer+0x4c>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d112      	bne.n	8007f8c <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007f66:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <interrupt_timer+0x50>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7f8 fb14 	bl	8000598 <__aeabi_f2d>
 8007f70:	a307      	add	r3, pc, #28	; (adr r3, 8007f90 <interrupt_timer+0x40>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 f9b1 	bl	80002dc <__adddf3>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	f7f8 fe39 	bl	8000bf8 <__aeabi_d2f>
 8007f86:	4603      	mov	r3, r0
 8007f88:	4a05      	ldr	r2, [pc, #20]	; (8007fa0 <interrupt_timer+0x50>)
 8007f8a:	6013      	str	r3, [r2, #0]
	}

}
 8007f8c:	bf00      	nop
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f94:	3f50624d 	.word	0x3f50624d
 8007f98:	20000728 	.word	0x20000728
 8007f9c:	20000730 	.word	0x20000730
 8007fa0:	2000072c 	.word	0x2000072c

08007fa4 <tic_timer>:

void tic_timer(void){
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
	count_mode=1;
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <tic_timer+0x1c>)
 8007faa:	2201      	movs	r2, #1
 8007fac:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007fae:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <tic_timer+0x20>)
 8007fb0:	f04f 0200 	mov.w	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20000730 	.word	0x20000730
 8007fc4:	2000072c 	.word	0x2000072c

08007fc8 <toc_timer>:

float toc_timer(void){
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8007fce:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <toc_timer+0x30>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8007fd4:	4b09      	ldr	r3, [pc, #36]	; (8007ffc <toc_timer+0x34>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007fda:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <toc_timer+0x30>)
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
	return timer;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	ee07 3a90 	vmov	s15, r3
}
 8007fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	2000072c 	.word	0x2000072c
 8007ffc:	20000730 	.word	0x20000730

08008000 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8008000:	b5b0      	push	{r4, r5, r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008008:	4b1d      	ldr	r3, [pc, #116]	; (8008080 <wait_ms+0x80>)
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 800800e:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <wait_ms+0x84>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2200      	movs	r2, #0
 8008014:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008016:	bf00      	nop
 8008018:	4b19      	ldr	r3, [pc, #100]	; (8008080 <wait_ms+0x80>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008024:	ee17 0a90 	vmov	r0, s15
 8008028:	f7f8 fab6 	bl	8000598 <__aeabi_f2d>
 800802c:	a312      	add	r3, pc, #72	; (adr r3, 8008078 <wait_ms+0x78>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 fb09 	bl	8000648 <__aeabi_dmul>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4610      	mov	r0, r2
 800803c:	4619      	mov	r1, r3
 800803e:	a30e      	add	r3, pc, #56	; (adr r3, 8008078 <wait_ms+0x78>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f7f8 fc2a 	bl	800089c <__aeabi_ddiv>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4614      	mov	r4, r2
 800804e:	461d      	mov	r5, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7f8 fa7f 	bl	8000554 <__aeabi_ui2d>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4620      	mov	r0, r4
 800805c:	4629      	mov	r1, r5
 800805e:	f7f8 fd65 	bl	8000b2c <__aeabi_dcmplt>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1d7      	bne.n	8008018 <wait_ms+0x18>
        }

}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}
 8008072:	bf00      	nop
 8008074:	f3af 8000 	nop.w
 8008078:	d2f1a9fc 	.word	0xd2f1a9fc
 800807c:	3f50624d 	.word	0x3f50624d
 8008080:	20000728 	.word	0x20000728
 8008084:	2000da4c 	.word	0x2000da4c

08008088 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8008088:	b5b0      	push	{r4, r5, r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008090:	4b1b      	ldr	r3, [pc, #108]	; (8008100 <wait_ms_NoReset+0x78>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008096:	bf00      	nop
 8008098:	4b19      	ldr	r3, [pc, #100]	; (8008100 <wait_ms_NoReset+0x78>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	ee07 3a90 	vmov	s15, r3
 80080a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a4:	ee17 0a90 	vmov	r0, s15
 80080a8:	f7f8 fa76 	bl	8000598 <__aeabi_f2d>
 80080ac:	a312      	add	r3, pc, #72	; (adr r3, 80080f8 <wait_ms_NoReset+0x70>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 fac9 	bl	8000648 <__aeabi_dmul>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4610      	mov	r0, r2
 80080bc:	4619      	mov	r1, r3
 80080be:	a30e      	add	r3, pc, #56	; (adr r3, 80080f8 <wait_ms_NoReset+0x70>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f7f8 fbea 	bl	800089c <__aeabi_ddiv>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4614      	mov	r4, r2
 80080ce:	461d      	mov	r5, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7f8 fa3f 	bl	8000554 <__aeabi_ui2d>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4620      	mov	r0, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	f7f8 fd25 	bl	8000b2c <__aeabi_dcmplt>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1d7      	bne.n	8008098 <wait_ms_NoReset+0x10>
        }

}
 80080e8:	bf00      	nop
 80080ea:	bf00      	nop
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bdb0      	pop	{r4, r5, r7, pc}
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80080fc:	3f50624d 	.word	0x3f50624d
 8008100:	20000728 	.word	0x20000728

08008104 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08c      	sub	sp, #48	; 0x30
 8008108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800810a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	605a      	str	r2, [r3, #4]
 8008114:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008116:	1d3b      	adds	r3, r7, #4
 8008118:	2220      	movs	r2, #32
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f017 f881 	bl	801f224 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008122:	4b56      	ldr	r3, [pc, #344]	; (800827c <MX_ADC1_Init+0x178>)
 8008124:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008128:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800812a:	4b54      	ldr	r3, [pc, #336]	; (800827c <MX_ADC1_Init+0x178>)
 800812c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008130:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008132:	4b52      	ldr	r3, [pc, #328]	; (800827c <MX_ADC1_Init+0x178>)
 8008134:	2200      	movs	r2, #0
 8008136:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008138:	4b50      	ldr	r3, [pc, #320]	; (800827c <MX_ADC1_Init+0x178>)
 800813a:	2200      	movs	r2, #0
 800813c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800813e:	4b4f      	ldr	r3, [pc, #316]	; (800827c <MX_ADC1_Init+0x178>)
 8008140:	2200      	movs	r2, #0
 8008142:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008144:	4b4d      	ldr	r3, [pc, #308]	; (800827c <MX_ADC1_Init+0x178>)
 8008146:	2201      	movs	r2, #1
 8008148:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800814a:	4b4c      	ldr	r3, [pc, #304]	; (800827c <MX_ADC1_Init+0x178>)
 800814c:	2208      	movs	r2, #8
 800814e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008150:	4b4a      	ldr	r3, [pc, #296]	; (800827c <MX_ADC1_Init+0x178>)
 8008152:	2200      	movs	r2, #0
 8008154:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008156:	4b49      	ldr	r3, [pc, #292]	; (800827c <MX_ADC1_Init+0x178>)
 8008158:	2201      	movs	r2, #1
 800815a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 800815c:	4b47      	ldr	r3, [pc, #284]	; (800827c <MX_ADC1_Init+0x178>)
 800815e:	2206      	movs	r2, #6
 8008160:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008162:	4b46      	ldr	r3, [pc, #280]	; (800827c <MX_ADC1_Init+0x178>)
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800816a:	4b44      	ldr	r3, [pc, #272]	; (800827c <MX_ADC1_Init+0x178>)
 800816c:	2200      	movs	r2, #0
 800816e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008170:	4b42      	ldr	r3, [pc, #264]	; (800827c <MX_ADC1_Init+0x178>)
 8008172:	2200      	movs	r2, #0
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008176:	4b41      	ldr	r3, [pc, #260]	; (800827c <MX_ADC1_Init+0x178>)
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800817e:	4b3f      	ldr	r3, [pc, #252]	; (800827c <MX_ADC1_Init+0x178>)
 8008180:	2200      	movs	r2, #0
 8008182:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8008184:	4b3d      	ldr	r3, [pc, #244]	; (800827c <MX_ADC1_Init+0x178>)
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800818c:	483b      	ldr	r0, [pc, #236]	; (800827c <MX_ADC1_Init+0x178>)
 800818e:	f010 f81d 	bl	80181cc <HAL_ADC_Init>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008198:	f001 fecb 	bl	8009f32 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800819c:	2300      	movs	r3, #0
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80081a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081a4:	4619      	mov	r1, r3
 80081a6:	4835      	ldr	r0, [pc, #212]	; (800827c <MX_ADC1_Init+0x178>)
 80081a8:	f011 fe6a 	bl	8019e80 <HAL_ADCEx_MultiModeConfigChannel>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80081b2:	f001 febe 	bl	8009f32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80081b6:	4b32      	ldr	r3, [pc, #200]	; (8008280 <MX_ADC1_Init+0x17c>)
 80081b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80081ba:	2306      	movs	r3, #6
 80081bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80081be:	2301      	movs	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80081c2:	237f      	movs	r3, #127	; 0x7f
 80081c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80081c6:	2304      	movs	r3, #4
 80081c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ce:	1d3b      	adds	r3, r7, #4
 80081d0:	4619      	mov	r1, r3
 80081d2:	482a      	ldr	r0, [pc, #168]	; (800827c <MX_ADC1_Init+0x178>)
 80081d4:	f010 ff30 	bl	8019038 <HAL_ADC_ConfigChannel>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80081de:	f001 fea8 	bl	8009f32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80081e2:	4b28      	ldr	r3, [pc, #160]	; (8008284 <MX_ADC1_Init+0x180>)
 80081e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80081e6:	230c      	movs	r3, #12
 80081e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ea:	1d3b      	adds	r3, r7, #4
 80081ec:	4619      	mov	r1, r3
 80081ee:	4823      	ldr	r0, [pc, #140]	; (800827c <MX_ADC1_Init+0x178>)
 80081f0:	f010 ff22 	bl	8019038 <HAL_ADC_ConfigChannel>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80081fa:	f001 fe9a 	bl	8009f32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80081fe:	4b22      	ldr	r3, [pc, #136]	; (8008288 <MX_ADC1_Init+0x184>)
 8008200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008202:	2312      	movs	r3, #18
 8008204:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008206:	1d3b      	adds	r3, r7, #4
 8008208:	4619      	mov	r1, r3
 800820a:	481c      	ldr	r0, [pc, #112]	; (800827c <MX_ADC1_Init+0x178>)
 800820c:	f010 ff14 	bl	8019038 <HAL_ADC_ConfigChannel>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8008216:	f001 fe8c 	bl	8009f32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800821a:	4b1c      	ldr	r3, [pc, #112]	; (800828c <MX_ADC1_Init+0x188>)
 800821c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800821e:	2318      	movs	r3, #24
 8008220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008222:	1d3b      	adds	r3, r7, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4815      	ldr	r0, [pc, #84]	; (800827c <MX_ADC1_Init+0x178>)
 8008228:	f010 ff06 	bl	8019038 <HAL_ADC_ConfigChannel>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8008232:	f001 fe7e 	bl	8009f32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008236:	4b16      	ldr	r3, [pc, #88]	; (8008290 <MX_ADC1_Init+0x18c>)
 8008238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800823a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800823e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008240:	1d3b      	adds	r3, r7, #4
 8008242:	4619      	mov	r1, r3
 8008244:	480d      	ldr	r0, [pc, #52]	; (800827c <MX_ADC1_Init+0x178>)
 8008246:	f010 fef7 	bl	8019038 <HAL_ADC_ConfigChannel>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008250:	f001 fe6f 	bl	8009f32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008254:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <MX_ADC1_Init+0x190>)
 8008256:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008258:	f44f 7383 	mov.w	r3, #262	; 0x106
 800825c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800825e:	1d3b      	adds	r3, r7, #4
 8008260:	4619      	mov	r1, r3
 8008262:	4806      	ldr	r0, [pc, #24]	; (800827c <MX_ADC1_Init+0x178>)
 8008264:	f010 fee8 	bl	8019038 <HAL_ADC_ConfigChannel>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800826e:	f001 fe60 	bl	8009f32 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008272:	bf00      	nop
 8008274:	3730      	adds	r7, #48	; 0x30
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000734 	.word	0x20000734
 8008280:	2e300800 	.word	0x2e300800
 8008284:	3ef08000 	.word	0x3ef08000
 8008288:	10c00010 	.word	0x10c00010
 800828c:	0c900008 	.word	0x0c900008
 8008290:	08600004 	.word	0x08600004
 8008294:	04300002 	.word	0x04300002

08008298 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b09e      	sub	sp, #120	; 0x78
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	605a      	str	r2, [r3, #4]
 80082aa:	609a      	str	r2, [r3, #8]
 80082ac:	60da      	str	r2, [r3, #12]
 80082ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	2250      	movs	r2, #80	; 0x50
 80082b6:	2100      	movs	r1, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f016 ffb3 	bl	801f224 <memset>
  if(adcHandle->Instance==ADC1)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082c6:	f040 8082 	bne.w	80083ce <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80082ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80082d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80082d4:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082d6:	f107 0314 	add.w	r3, r7, #20
 80082da:	4618      	mov	r0, r3
 80082dc:	f013 fc7a 	bl	801bbd4 <HAL_RCCEx_PeriphCLKConfig>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80082e6:	f001 fe24 	bl	8009f32 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80082ea:	4b3b      	ldr	r3, [pc, #236]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 80082ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ee:	4a3a      	ldr	r2, [pc, #232]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 80082f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082f6:	4b38      	ldr	r3, [pc, #224]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 80082f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008302:	4b35      	ldr	r3, [pc, #212]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 8008304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008306:	4a34      	ldr	r2, [pc, #208]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 8008308:	f043 0301 	orr.w	r3, r3, #1
 800830c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800830e:	4b32      	ldr	r3, [pc, #200]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 8008310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800831a:	4b2f      	ldr	r3, [pc, #188]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 800831c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831e:	4a2e      	ldr	r2, [pc, #184]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 8008320:	f043 0302 	orr.w	r3, r3, #2
 8008324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008326:	4b2c      	ldr	r3, [pc, #176]	; (80083d8 <HAL_ADC_MspInit+0x140>)
 8008328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 8008332:	230f      	movs	r3, #15
 8008334:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008336:	2303      	movs	r3, #3
 8008338:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833a:	2300      	movs	r3, #0
 800833c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800833e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008342:	4619      	mov	r1, r3
 8008344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008348:	f012 fcc6 	bl	801acd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 800834c:	f241 0301 	movw	r3, #4097	; 0x1001
 8008350:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008352:	2303      	movs	r3, #3
 8008354:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008356:	2300      	movs	r3, #0
 8008358:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800835a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800835e:	4619      	mov	r1, r3
 8008360:	481e      	ldr	r0, [pc, #120]	; (80083dc <HAL_ADC_MspInit+0x144>)
 8008362:	f012 fcb9 	bl	801acd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008366:	4b1e      	ldr	r3, [pc, #120]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 8008368:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <HAL_ADC_MspInit+0x14c>)
 800836a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800836c:	4b1c      	ldr	r3, [pc, #112]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 800836e:	2205      	movs	r2, #5
 8008370:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008372:	4b1b      	ldr	r3, [pc, #108]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 8008374:	2200      	movs	r2, #0
 8008376:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008378:	4b19      	ldr	r3, [pc, #100]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 800837a:	2200      	movs	r2, #0
 800837c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800837e:	4b18      	ldr	r3, [pc, #96]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 8008380:	2280      	movs	r2, #128	; 0x80
 8008382:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008384:	4b16      	ldr	r3, [pc, #88]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 8008386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800838a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800838c:	4b14      	ldr	r3, [pc, #80]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 800838e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008392:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008394:	4b12      	ldr	r3, [pc, #72]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 8008396:	2220      	movs	r2, #32
 8008398:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800839a:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 800839c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80083a2:	480f      	ldr	r0, [pc, #60]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 80083a4:	f011 ff64 	bl	801a270 <HAL_DMA_Init>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80083ae:	f001 fdc0 	bl	8009f32 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a0a      	ldr	r2, [pc, #40]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 80083b6:	655a      	str	r2, [r3, #84]	; 0x54
 80083b8:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <HAL_ADC_MspInit+0x148>)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80083be:	2200      	movs	r2, #0
 80083c0:	2100      	movs	r1, #0
 80083c2:	2012      	movs	r0, #18
 80083c4:	f011 ff1f 	bl	801a206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80083c8:	2012      	movs	r0, #18
 80083ca:	f011 ff36 	bl	801a23a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80083ce:	bf00      	nop
 80083d0:	3778      	adds	r7, #120	; 0x78
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	40021000 	.word	0x40021000
 80083dc:	48000400 	.word	0x48000400
 80083e0:	200007a0 	.word	0x200007a0
 80083e4:	40020008 	.word	0x40020008

080083e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 80083f0:	f7ff fc72 	bl	8007cd8 <pl_callback_getSensor>
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 80083fc:	b084      	sub	sp, #16
 80083fe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	f107 0420 	add.w	r4, r7, #32
 800840a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 800840e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008412:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841a:	f2c0 819d 	blt.w	8008758 <cal_table+0x35c>
	switch (g_acc_flag) {
 800841e:	4bcd      	ldr	r3, [pc, #820]	; (8008754 <cal_table+0x358>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b06      	cmp	r3, #6
 8008426:	f200 833a 	bhi.w	8008a9e <cal_table+0x6a2>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <cal_table+0x34>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008a91 	.word	0x08008a91
 8008434:	0800844d 	.word	0x0800844d
 8008438:	080085bf 	.word	0x080085bf
 800843c:	080086dd 	.word	0x080086dd
 8008440:	08008a91 	.word	0x08008a91
 8008444:	08008709 	.word	0x08008709
 8008448:	0800872f 	.word	0x0800872f
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 800844c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844e:	ed93 7a00 	vldr	s14, [r3]
 8008452:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800845a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845e:	db0a      	blt.n	8008476 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800846e:	4bb9      	ldr	r3, [pc, #740]	; (8008754 <cal_table+0x358>)
 8008470:	2202      	movs	r2, #2
 8008472:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008474:	e313      	b.n	8008a9e <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008476:	ed97 7a08 	vldr	s14, [r7, #32]
 800847a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847c:	edd3 7a00 	vldr	s15, [r3]
 8008480:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008486:	edd3 7a00 	vldr	s15, [r3]
 800848a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800848e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008492:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008496:	ee66 7a27 	vmul.f32	s15, s12, s15
 800849a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800849e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80084a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80084aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80084ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80084b2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80084b6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 80084be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c6:	d900      	bls.n	80084ca <cal_table+0xce>
		break;
 80084c8:	e2e9      	b.n	8008a9e <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	edd3 7a00 	vldr	s15, [r3]
 80084d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80084d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d6:	edd3 7a00 	vldr	s15, [r3]
 80084da:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80084de:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80084e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80084e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084ea:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80084ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80084f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084fa:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80084fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008502:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008506:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008512:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008518:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800851c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008520:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	4618      	mov	r0, r3
 800852a:	f7f8 f835 	bl	8000598 <__aeabi_f2d>
 800852e:	4604      	mov	r4, r0
 8008530:	460d      	mov	r5, r1
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	4618      	mov	r0, r3
 8008536:	f7f8 f82f 	bl	8000598 <__aeabi_f2d>
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	f7f8 f881 	bl	8000648 <__aeabi_dmul>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4690      	mov	r8, r2
 800854c:	4699      	mov	r9, r3
 800854e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008552:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008556:	ee17 0a90 	vmov	r0, s15
 800855a:	f7f8 f81d 	bl	8000598 <__aeabi_f2d>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4640      	mov	r0, r8
 8008564:	4649      	mov	r1, r9
 8008566:	f7f8 f86f 	bl	8000648 <__aeabi_dmul>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f7 feb1 	bl	80002d8 <__aeabi_dsub>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4610      	mov	r0, r2
 800857c:	4619      	mov	r1, r3
 800857e:	f7f8 fb3b 	bl	8000bf8 <__aeabi_d2f>
 8008582:	4602      	mov	r2, r0
 8008584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008586:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	ed93 7a00 	vldr	s14, [r3]
 800858e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008592:	edd7 7a01 	vldr	s15, [r7, #4]
 8008596:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800859a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800859e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a4:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 80085a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80085ac:	eef1 7a67 	vneg.f32	s15, s15
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b2:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 80085b6:	4b67      	ldr	r3, [pc, #412]	; (8008754 <cal_table+0x358>)
 80085b8:	2203      	movs	r2, #3
 80085ba:	701a      	strb	r2, [r3, #0]
		break;
 80085bc:	e26f      	b.n	8008a9e <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 80085be:	ed97 7a08 	vldr	s14, [r7, #32]
 80085c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80085c8:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80085cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80085d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80085d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80085d8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80085dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80085e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80085e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80085e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80085ec:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80085f0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80085f4:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80085f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008600:	d900      	bls.n	8008604 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008602:	e24c      	b.n	8008a9e <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	ed93 7a02 	vldr	s14, [r3, #8]
 800860a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800860e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008612:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008616:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800861a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800861e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008622:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008626:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800862a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800862e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008632:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008636:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800863a:	edd7 7a08 	vldr	s15, [r7, #32]
 800863e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800864c:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	4618      	mov	r0, r3
 8008656:	f7f7 ff9f 	bl	8000598 <__aeabi_f2d>
 800865a:	4604      	mov	r4, r0
 800865c:	460d      	mov	r5, r1
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	4618      	mov	r0, r3
 8008662:	f7f7 ff99 	bl	8000598 <__aeabi_f2d>
 8008666:	f04f 0200 	mov.w	r2, #0
 800866a:	f04f 0300 	mov.w	r3, #0
 800866e:	f7f7 ffeb 	bl	8000648 <__aeabi_dmul>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4690      	mov	r8, r2
 8008678:	4699      	mov	r9, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7f7 ff8c 	bl	8000598 <__aeabi_f2d>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	4640      	mov	r0, r8
 8008686:	4649      	mov	r1, r9
 8008688:	f7f7 ffde 	bl	8000648 <__aeabi_dmul>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4620      	mov	r0, r4
 8008692:	4629      	mov	r1, r5
 8008694:	f7f7 fe20 	bl	80002d8 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4610      	mov	r0, r2
 800869e:	4619      	mov	r1, r3
 80086a0:	f7f8 faaa 	bl	8000bf8 <__aeabi_d2f>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	ed93 7a00 	vldr	s14, [r3]
 80086b0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80086b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80086b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80086c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80086ca:	eef1 7a67 	vneg.f32	s15, s15
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80086d4:	4b1f      	ldr	r3, [pc, #124]	; (8008754 <cal_table+0x358>)
 80086d6:	2203      	movs	r2, #3
 80086d8:	701a      	strb	r2, [r3, #0]
		break;
 80086da:	e1e0      	b.n	8008a9e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	ed93 7a00 	vldr	s14, [r3]
 80086e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ee:	d900      	bls.n	80086f2 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80086f0:	e1d5      	b.n	8008a9e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80086f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f6:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80086f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008700:	4b14      	ldr	r3, [pc, #80]	; (8008754 <cal_table+0x358>)
 8008702:	2204      	movs	r2, #4
 8008704:	701a      	strb	r2, [r3, #0]
		break;
 8008706:	e1ca      	b.n	8008a9e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	ed93 7a02 	vldr	s14, [r3, #8]
 800870e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800871a:	da00      	bge.n	800871e <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800871c:	e1bf      	b.n	8008a9e <cal_table+0x6a2>
			target->acceleration = 0;
 800871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008720:	f04f 0200 	mov.w	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008726:	4b0b      	ldr	r3, [pc, #44]	; (8008754 <cal_table+0x358>)
 8008728:	2204      	movs	r2, #4
 800872a:	701a      	strb	r2, [r3, #0]
		break;
 800872c:	e1b7      	b.n	8008a9e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008730:	ed93 7a02 	vldr	s14, [r3, #8]
 8008734:	edd7 7a08 	vldr	s15, [r7, #32]
 8008738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800873c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008740:	da00      	bge.n	8008744 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008742:	e1ac      	b.n	8008a9e <cal_table+0x6a2>
			target->acceleration = 0;
 8008744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800874c:	4b01      	ldr	r3, [pc, #4]	; (8008754 <cal_table+0x358>)
 800874e:	2204      	movs	r2, #4
 8008750:	701a      	strb	r2, [r3, #0]
		break;
 8008752:	e1a4      	b.n	8008a9e <cal_table+0x6a2>
 8008754:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 8008758:	4bce      	ldr	r3, [pc, #824]	; (8008a94 <cal_table+0x698>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b06      	cmp	r3, #6
 8008760:	f200 819d 	bhi.w	8008a9e <cal_table+0x6a2>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <cal_table+0x370>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	08008a9d 	.word	0x08008a9d
 8008770:	08008789 	.word	0x08008789
 8008774:	080088fb 	.word	0x080088fb
 8008778:	08008a11 	.word	0x08008a11
 800877c:	08008a3d 	.word	0x08008a3d
 8008780:	08008a45 	.word	0x08008a45
 8008784:	08008a6b 	.word	0x08008a6b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878a:	ed93 7a00 	vldr	s14, [r3]
 800878e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800879a:	d80a      	bhi.n	80087b2 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 800879c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a0:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80087a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80087aa:	4bba      	ldr	r3, [pc, #744]	; (8008a94 <cal_table+0x698>)
 80087ac:	2202      	movs	r2, #2
 80087ae:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 80087b0:	e175      	b.n	8008a9e <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80087b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80087b6:	eeb1 7a67 	vneg.f32	s14, s15
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087bc:	edd3 7a00 	vldr	s15, [r3]
 80087c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c6:	edd3 7a00 	vldr	s15, [r3]
 80087ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80087ce:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80087d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80087d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087da:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80087de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80087ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087f2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80087f6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80087fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008806:	d900      	bls.n	800880a <cal_table+0x40e>
		break;
 8008808:	e149      	b.n	8008a9e <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	edd3 7a00 	vldr	s15, [r3]
 8008810:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	edd3 7a00 	vldr	s15, [r3]
 800881a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800881e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008822:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800882a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800882e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008832:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800883a:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 800883e:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008842:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008846:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800884a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800884e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008852:	edd7 7a08 	vldr	s15, [r7, #32]
 8008856:	ee77 6a67 	vsub.f32	s13, s14, s15
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008864:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	4618      	mov	r0, r3
 800886e:	f7f7 fe93 	bl	8000598 <__aeabi_f2d>
 8008872:	4604      	mov	r4, r0
 8008874:	460d      	mov	r5, r1
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	4618      	mov	r0, r3
 800887a:	f7f7 fe8d 	bl	8000598 <__aeabi_f2d>
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	f7f7 fedf 	bl	8000648 <__aeabi_dmul>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4690      	mov	r8, r2
 8008890:	4699      	mov	r9, r3
 8008892:	edd7 7a01 	vldr	s15, [r7, #4]
 8008896:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800889a:	ee17 0a90 	vmov	r0, s15
 800889e:	f7f7 fe7b 	bl	8000598 <__aeabi_f2d>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f7 fecd 	bl	8000648 <__aeabi_dmul>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4620      	mov	r0, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7f7 fd11 	bl	80002dc <__adddf3>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4610      	mov	r0, r2
 80088c0:	4619      	mov	r1, r3
 80088c2:	f7f8 f999 	bl	8000bf8 <__aeabi_d2f>
 80088c6:	4602      	mov	r2, r0
 80088c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ca:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	ed93 7a00 	vldr	s14, [r3]
 80088d2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80088da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80088de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 80088ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f0:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80088f2:	4b68      	ldr	r3, [pc, #416]	; (8008a94 <cal_table+0x698>)
 80088f4:	2203      	movs	r2, #3
 80088f6:	701a      	strb	r2, [r3, #0]
		break;
 80088f8:	e0d1      	b.n	8008a9e <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8008900:	edd7 7a08 	vldr	s15, [r7, #32]
 8008904:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008908:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800890c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008910:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008914:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800891c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008920:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008924:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008928:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800892c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008930:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8008934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893c:	d900      	bls.n	8008940 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 800893e:	e0ae      	b.n	8008a9e <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008942:	ed93 7a02 	vldr	s14, [r3, #8]
 8008946:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800894a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800894e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008952:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008956:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800895a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800895e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008962:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008966:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800896a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800896e:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008972:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008976:	edd7 7a08 	vldr	s15, [r7, #32]
 800897a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800897e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008980:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008988:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	4618      	mov	r0, r3
 8008992:	f7f7 fe01 	bl	8000598 <__aeabi_f2d>
 8008996:	4604      	mov	r4, r0
 8008998:	460d      	mov	r5, r1
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	4618      	mov	r0, r3
 800899e:	f7f7 fdfb 	bl	8000598 <__aeabi_f2d>
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	f04f 0300 	mov.w	r3, #0
 80089aa:	f7f7 fe4d 	bl	8000648 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4690      	mov	r8, r2
 80089b4:	4699      	mov	r9, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7f7 fdee 	bl	8000598 <__aeabi_f2d>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	4640      	mov	r0, r8
 80089c2:	4649      	mov	r1, r9
 80089c4:	f7f7 fe40 	bl	8000648 <__aeabi_dmul>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4620      	mov	r0, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	f7f7 fc84 	bl	80002dc <__adddf3>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4610      	mov	r0, r2
 80089da:	4619      	mov	r1, r3
 80089dc:	f7f8 f90c 	bl	8000bf8 <__aeabi_d2f>
 80089e0:	4602      	mov	r2, r0
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e8:	ed93 7a00 	vldr	s14, [r3]
 80089ec:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80089f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80089f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8008a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a06:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008a08:	4b22      	ldr	r3, [pc, #136]	; (8008a94 <cal_table+0x698>)
 8008a0a:	2203      	movs	r2, #3
 8008a0c:	701a      	strb	r2, [r3, #0]
		break;
 8008a0e:	e046      	b.n	8008a9e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	ed93 7a00 	vldr	s14, [r3]
 8008a16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a22:	da00      	bge.n	8008a26 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a24:	e03b      	b.n	8008a9e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2a:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a34:	4b17      	ldr	r3, [pc, #92]	; (8008a94 <cal_table+0x698>)
 8008a36:	2204      	movs	r2, #4
 8008a38:	701a      	strb	r2, [r3, #0]
		break;
 8008a3a:	e030      	b.n	8008a9e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8008a3c:	4b16      	ldr	r3, [pc, #88]	; (8008a98 <cal_table+0x69c>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	701a      	strb	r2, [r3, #0]
		break;
 8008a42:	e02c      	b.n	8008a9e <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8008a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a46:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a56:	d900      	bls.n	8008a5a <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a58:	e021      	b.n	8008a9e <cal_table+0x6a2>
			target->acceleration = 0;
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5c:	f04f 0200 	mov.w	r2, #0
 8008a60:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a62:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <cal_table+0x698>)
 8008a64:	2204      	movs	r2, #4
 8008a66:	701a      	strb	r2, [r3, #0]
		break;
 8008a68:	e019      	b.n	8008a9e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a70:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7c:	d900      	bls.n	8008a80 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a7e:	e00e      	b.n	8008a9e <cal_table+0x6a2>
			target->acceleration = 0;
 8008a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <cal_table+0x698>)
 8008a8a:	2204      	movs	r2, #4
 8008a8c:	701a      	strb	r2, [r3, #0]
		break;
 8008a8e:	e006      	b.n	8008a9e <cal_table+0x6a2>
		break;
 8008a90:	bf00      	nop
 8008a92:	e004      	b.n	8008a9e <cal_table+0x6a2>
 8008a94:	20000804 	.word	0x20000804
 8008a98:	20000805 	.word	0x20000805
		break;
 8008a9c:	bf00      	nop
	}

}

}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008aa8:	b004      	add	sp, #16
 8008aaa:	4770      	bx	lr
 8008aac:	0000      	movs	r0, r0
	...

08008ab0 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab4:	b08c      	sub	sp, #48	; 0x30
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	eef0 6a40 	vmov.f32	s13, s0
 8008abc:	eeb0 7a60 	vmov.f32	s14, s1
 8008ac0:	eef0 7a41 	vmov.f32	s15, s2
 8008ac4:	6138      	str	r0, [r7, #16]
 8008ac6:	edc7 6a05 	vstr	s13, [r7, #20]
 8008aca:	ed87 7a06 	vstr	s14, [r7, #24]
 8008ace:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 8008ad2:	4be7      	ldr	r3, [pc, #924]	; (8008e70 <cal_mollifier_table+0x3c0>)
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 8008ad6:	4be7      	ldr	r3, [pc, #924]	; (8008e74 <cal_mollifier_table+0x3c4>)
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8008ada:	4be7      	ldr	r3, [pc, #924]	; (8008e78 <cal_mollifier_table+0x3c8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f7 fd5a 	bl	8000598 <__aeabi_f2d>
 8008ae4:	a3da      	add	r3, pc, #872	; (adr r3, 8008e50 <cal_mollifier_table+0x3a0>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	f7f7 fbf7 	bl	80002dc <__adddf3>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4610      	mov	r0, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	f7f8 f87f 	bl	8000bf8 <__aeabi_d2f>
 8008afa:	4603      	mov	r3, r0
 8008afc:	4ade      	ldr	r2, [pc, #888]	; (8008e78 <cal_mollifier_table+0x3c8>)
 8008afe:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008b00:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b04:	eef0 7ae7 	vabs.f32	s15, s15
 8008b08:	ee17 0a90 	vmov	r0, s15
 8008b0c:	f7f7 fd44 	bl	8000598 <__aeabi_f2d>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	f7f7 fbe2 	bl	80002dc <__adddf3>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4619      	mov	r1, r3
 8008b20:	a3cd      	add	r3, pc, #820	; (adr r3, 8008e58 <cal_mollifier_table+0x3a8>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 feb9 	bl	800089c <__aeabi_ddiv>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4619      	mov	r1, r3
 8008b32:	a3cb      	add	r3, pc, #812	; (adr r3, 8008e60 <cal_mollifier_table+0x3b0>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd86 	bl	8000648 <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	461d      	mov	r5, r3
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7f7 fd26 	bl	8000598 <__aeabi_f2d>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4620      	mov	r0, r4
 8008b52:	4629      	mov	r1, r5
 8008b54:	f7f7 fea2 	bl	800089c <__aeabi_ddiv>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4619      	mov	r1, r3
 8008b60:	f7f8 f84a 	bl	8000bf8 <__aeabi_d2f>
 8008b64:	4603      	mov	r3, r0
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008b68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b6c:	eef1 7a67 	vneg.f32	s15, s15
 8008b70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008b78:	4bbf      	ldr	r3, [pc, #764]	; (8008e78 <cal_mollifier_table+0x3c8>)
 8008b7a:	edd3 7a00 	vldr	s15, [r3]
 8008b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b86:	f140 8698 	bpl.w	80098ba <cal_mollifier_table+0xe0a>
 8008b8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008b96:	4bb8      	ldr	r3, [pc, #736]	; (8008e78 <cal_mollifier_table+0x3c8>)
 8008b98:	edd3 7a00 	vldr	s15, [r3]
 8008b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba4:	f340 8689 	ble.w	80098ba <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008bae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008bb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	ee17 0a90 	vmov	r0, s15
 8008bc6:	f7f7 fce7 	bl	8000598 <__aeabi_f2d>
 8008bca:	a3a3      	add	r3, pc, #652	; (adr r3, 8008e58 <cal_mollifier_table+0x3a8>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	f7f7 fe64 	bl	800089c <__aeabi_ddiv>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4614      	mov	r4, r2
 8008bda:	461d      	mov	r5, r3
 8008bdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008be0:	eeb1 7a67 	vneg.f32	s14, s15
 8008be4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bec:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008bf0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008bf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bfc:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008c00:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008c04:	4b9c      	ldr	r3, [pc, #624]	; (8008e78 <cal_mollifier_table+0x3c8>)
 8008c06:	ed93 6a00 	vldr	s12, [r3]
 8008c0a:	4b9b      	ldr	r3, [pc, #620]	; (8008e78 <cal_mollifier_table+0x3c8>)
 8008c0c:	edd3 7a00 	vldr	s15, [r3]
 8008c10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008c14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008c18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008c1c:	ee16 0a90 	vmov	r0, s13
 8008c20:	f7f7 fcba 	bl	8000598 <__aeabi_f2d>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	ec43 2b10 	vmov	d0, r2, r3
 8008c2c:	f019 f978 	bl	8021f20 <exp>
 8008c30:	ec53 2b10 	vmov	r2, r3, d0
 8008c34:	4620      	mov	r0, r4
 8008c36:	4629      	mov	r1, r5
 8008c38:	f7f7 fd06 	bl	8000648 <__aeabi_dmul>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4610      	mov	r0, r2
 8008c42:	4619      	mov	r1, r3
 8008c44:	f7f7 ffd8 	bl	8000bf8 <__aeabi_d2f>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008c4e:	4b8a      	ldr	r3, [pc, #552]	; (8008e78 <cal_mollifier_table+0x3c8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7f7 fca0 	bl	8000598 <__aeabi_f2d>
 8008c58:	4604      	mov	r4, r0
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c60:	eef1 7a67 	vneg.f32	s15, s15
 8008c64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c6c:	ee16 0a90 	vmov	r0, s13
 8008c70:	f7f7 fc92 	bl	8000598 <__aeabi_f2d>
 8008c74:	a37c      	add	r3, pc, #496	; (adr r3, 8008e68 <cal_mollifier_table+0x3b8>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fe0f 	bl	800089c <__aeabi_ddiv>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4690      	mov	r8, r2
 8008c84:	4699      	mov	r9, r3
 8008c86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c88:	f7f7 fc86 	bl	8000598 <__aeabi_f2d>
 8008c8c:	a370      	add	r3, pc, #448	; (adr r3, 8008e50 <cal_mollifier_table+0x3a0>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f7f7 fcd9 	bl	8000648 <__aeabi_dmul>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	f7f7 fb1d 	bl	80002dc <__adddf3>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 ff3f 	bl	8000b2c <__aeabi_dcmplt>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 8163 	beq.w	8008f7c <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008cb6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008cba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cca:	ee17 0a90 	vmov	r0, s15
 8008cce:	f7f7 fc63 	bl	8000598 <__aeabi_f2d>
 8008cd2:	a361      	add	r3, pc, #388	; (adr r3, 8008e58 <cal_mollifier_table+0x3a8>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 fde0 	bl	800089c <__aeabi_ddiv>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008ce4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ce8:	eeb1 7a67 	vneg.f32	s14, s15
 8008cec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008cf8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cfc:	ee16 0a90 	vmov	r0, s13
 8008d00:	f7f7 fc4a 	bl	8000598 <__aeabi_f2d>
 8008d04:	4604      	mov	r4, r0
 8008d06:	460d      	mov	r5, r1
 8008d08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d0c:	eef1 7a67 	vneg.f32	s15, s15
 8008d10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d18:	ee16 0a90 	vmov	r0, s13
 8008d1c:	f7f7 fc3c 	bl	8000598 <__aeabi_f2d>
 8008d20:	a351      	add	r3, pc, #324	; (adr r3, 8008e68 <cal_mollifier_table+0x3b8>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fdb9 	bl	800089c <__aeabi_ddiv>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	f7f7 fc89 	bl	8000648 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	4699      	mov	r9, r3
 8008d3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d46:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d4e:	ee16 0a90 	vmov	r0, s13
 8008d52:	f7f7 fc21 	bl	8000598 <__aeabi_f2d>
 8008d56:	4604      	mov	r4, r0
 8008d58:	460d      	mov	r5, r1
 8008d5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d5e:	eef1 7a67 	vneg.f32	s15, s15
 8008d62:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d6a:	ee16 0a90 	vmov	r0, s13
 8008d6e:	f7f7 fc13 	bl	8000598 <__aeabi_f2d>
 8008d72:	a33d      	add	r3, pc, #244	; (adr r3, 8008e68 <cal_mollifier_table+0x3b8>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f7f7 fd90 	bl	800089c <__aeabi_ddiv>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4692      	mov	sl, r2
 8008d82:	469b      	mov	fp, r3
 8008d84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d90:	ee16 0a90 	vmov	r0, s13
 8008d94:	f7f7 fc00 	bl	8000598 <__aeabi_f2d>
 8008d98:	a333      	add	r3, pc, #204	; (adr r3, 8008e68 <cal_mollifier_table+0x3b8>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fd7d 	bl	800089c <__aeabi_ddiv>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4650      	mov	r0, sl
 8008da8:	4659      	mov	r1, fp
 8008daa:	f7f7 fc4d 	bl	8000648 <__aeabi_dmul>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4620      	mov	r0, r4
 8008db4:	4629      	mov	r1, r5
 8008db6:	f7f7 fa91 	bl	80002dc <__adddf3>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	f7f7 fd6b 	bl	800089c <__aeabi_ddiv>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4690      	mov	r8, r2
 8008dcc:	4699      	mov	r9, r3
 8008dce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008dd6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008dda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008dde:	ee16 0a90 	vmov	r0, s13
 8008de2:	f7f7 fbd9 	bl	8000598 <__aeabi_f2d>
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dee:	eef1 7a67 	vneg.f32	s15, s15
 8008df2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008df6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008dfa:	ee16 0a90 	vmov	r0, s13
 8008dfe:	f7f7 fbcb 	bl	8000598 <__aeabi_f2d>
 8008e02:	a319      	add	r3, pc, #100	; (adr r3, 8008e68 <cal_mollifier_table+0x3b8>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 fd48 	bl	800089c <__aeabi_ddiv>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4692      	mov	sl, r2
 8008e12:	469b      	mov	fp, r3
 8008e14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e20:	ee16 0a90 	vmov	r0, s13
 8008e24:	f7f7 fbb8 	bl	8000598 <__aeabi_f2d>
 8008e28:	a30f      	add	r3, pc, #60	; (adr r3, 8008e68 <cal_mollifier_table+0x3b8>)
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	f7f7 fd35 	bl	800089c <__aeabi_ddiv>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4650      	mov	r0, sl
 8008e38:	4659      	mov	r1, fp
 8008e3a:	f7f7 fc05 	bl	8000648 <__aeabi_dmul>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7f7 fa49 	bl	80002dc <__adddf3>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	e016      	b.n	8008e7c <cal_mollifier_table+0x3cc>
 8008e4e:	bf00      	nop
 8008e50:	d2f1a9fc 	.word	0xd2f1a9fc
 8008e54:	3f50624d 	.word	0x3f50624d
 8008e58:	f9db22d1 	.word	0xf9db22d1
 8008e5c:	3fdc6a7e 	.word	0x3fdc6a7e
 8008e60:	362cef38 	.word	0x362cef38
 8008e64:	3fd78b56 	.word	0x3fd78b56
 8008e68:	04189375 	.word	0x04189375
 8008e6c:	3ff50e56 	.word	0x3ff50e56
 8008e70:	41700000 	.word	0x41700000
 8008e74:	c1700000 	.word	0xc1700000
 8008e78:	20000800 	.word	0x20000800
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	f7f7 fd0b 	bl	800089c <__aeabi_ddiv>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e8e:	f7f7 fbdb 	bl	8000648 <__aeabi_dmul>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4692      	mov	sl, r2
 8008e98:	469b      	mov	fp, r3
 8008e9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e9e:	eeb1 7a67 	vneg.f32	s14, s15
 8008ea2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eaa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008eae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008eb2:	ee16 0a90 	vmov	r0, s13
 8008eb6:	f7f7 fb6f 	bl	8000598 <__aeabi_f2d>
 8008eba:	4604      	mov	r4, r0
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ec2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ec6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008eca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ece:	ee16 0a90 	vmov	r0, s13
 8008ed2:	f7f7 fb61 	bl	8000598 <__aeabi_f2d>
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	4689      	mov	r9, r1
 8008eda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ede:	eef1 7a67 	vneg.f32	s15, s15
 8008ee2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ee6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008eea:	ee16 0a90 	vmov	r0, s13
 8008eee:	f7f7 fb53 	bl	8000598 <__aeabi_f2d>
 8008ef2:	a3e1      	add	r3, pc, #900	; (adr r3, 8009278 <cal_mollifier_table+0x7c8>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 fcd0 	bl	800089c <__aeabi_ddiv>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008f04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f10:	ee16 0a90 	vmov	r0, s13
 8008f14:	f7f7 fb40 	bl	8000598 <__aeabi_f2d>
 8008f18:	a3d7      	add	r3, pc, #860	; (adr r3, 8009278 <cal_mollifier_table+0x7c8>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f7f7 fcbd 	bl	800089c <__aeabi_ddiv>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f2a:	f7f7 fb8d 	bl	8000648 <__aeabi_dmul>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 f9d1 	bl	80002dc <__adddf3>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 fcab 	bl	800089c <__aeabi_ddiv>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	ec43 2b17 	vmov	d7, r2, r3
 8008f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8008f52:	eef0 0a67 	vmov.f32	s1, s15
 8008f56:	f018 ffe3 	bl	8021f20 <exp>
 8008f5a:	ec53 2b10 	vmov	r2, r3, d0
 8008f5e:	4650      	mov	r0, sl
 8008f60:	4659      	mov	r1, fp
 8008f62:	f7f7 fb71 	bl	8000648 <__aeabi_dmul>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	f7f7 fe43 	bl	8000bf8 <__aeabi_d2f>
 8008f72:	4602      	mov	r2, r0
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008f78:	f000 bcb4 	b.w	80098e4 <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008f7c:	4bc0      	ldr	r3, [pc, #768]	; (8009280 <cal_mollifier_table+0x7d0>)
 8008f7e:	edd3 7a00 	vldr	s15, [r3]
 8008f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8a:	f140 817b 	bpl.w	8009284 <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008f8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008f92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa2:	ee17 0a90 	vmov	r0, s15
 8008fa6:	f7f7 faf7 	bl	8000598 <__aeabi_f2d>
 8008faa:	a3af      	add	r3, pc, #700	; (adr r3, 8009268 <cal_mollifier_table+0x7b8>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 fc74 	bl	800089c <__aeabi_ddiv>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008fbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fc0:	eeb1 7a67 	vneg.f32	s14, s15
 8008fc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fcc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008fd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fd4:	ee16 0a90 	vmov	r0, s13
 8008fd8:	f7f7 fade 	bl	8000598 <__aeabi_f2d>
 8008fdc:	4604      	mov	r4, r0
 8008fde:	460d      	mov	r5, r1
 8008fe0:	4ba7      	ldr	r3, [pc, #668]	; (8009280 <cal_mollifier_table+0x7d0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7f7 fad7 	bl	8000598 <__aeabi_f2d>
 8008fea:	4680      	mov	r8, r0
 8008fec:	4689      	mov	r9, r1
 8008fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ff0:	f7f7 fad2 	bl	8000598 <__aeabi_f2d>
 8008ff4:	a39e      	add	r3, pc, #632	; (adr r3, 8009270 <cal_mollifier_table+0x7c0>)
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f7f7 fb25 	bl	8000648 <__aeabi_dmul>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4640      	mov	r0, r8
 8009004:	4649      	mov	r1, r9
 8009006:	f7f7 f967 	bl	80002d8 <__aeabi_dsub>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 fb19 	bl	8000648 <__aeabi_dmul>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	e9c7 2300 	strd	r2, r3, [r7]
 800901e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009022:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009026:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800902a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800902e:	ee16 0a90 	vmov	r0, s13
 8009032:	f7f7 fab1 	bl	8000598 <__aeabi_f2d>
 8009036:	4680      	mov	r8, r0
 8009038:	4689      	mov	r9, r1
 800903a:	4b91      	ldr	r3, [pc, #580]	; (8009280 <cal_mollifier_table+0x7d0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f7f7 faaa 	bl	8000598 <__aeabi_f2d>
 8009044:	4604      	mov	r4, r0
 8009046:	460d      	mov	r5, r1
 8009048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800904a:	f7f7 faa5 	bl	8000598 <__aeabi_f2d>
 800904e:	a388      	add	r3, pc, #544	; (adr r3, 8009270 <cal_mollifier_table+0x7c0>)
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	f7f7 faf8 	bl	8000648 <__aeabi_dmul>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4620      	mov	r0, r4
 800905e:	4629      	mov	r1, r5
 8009060:	f7f7 f93a 	bl	80002d8 <__aeabi_dsub>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4692      	mov	sl, r2
 800906a:	469b      	mov	fp, r3
 800906c:	4b84      	ldr	r3, [pc, #528]	; (8009280 <cal_mollifier_table+0x7d0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	f7f7 fa91 	bl	8000598 <__aeabi_f2d>
 8009076:	4604      	mov	r4, r0
 8009078:	460d      	mov	r5, r1
 800907a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800907c:	f7f7 fa8c 	bl	8000598 <__aeabi_f2d>
 8009080:	a37b      	add	r3, pc, #492	; (adr r3, 8009270 <cal_mollifier_table+0x7c0>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 fadf 	bl	8000648 <__aeabi_dmul>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7f7 f921 	bl	80002d8 <__aeabi_dsub>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4650      	mov	r0, sl
 800909c:	4659      	mov	r1, fp
 800909e:	f7f7 fad3 	bl	8000648 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 f915 	bl	80002d8 <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090b6:	f7f7 fbf1 	bl	800089c <__aeabi_ddiv>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	e9c7 2300 	strd	r2, r3, [r7]
 80090c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80090ca:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80090ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090d2:	ee16 0a90 	vmov	r0, s13
 80090d6:	f7f7 fa5f 	bl	8000598 <__aeabi_f2d>
 80090da:	4680      	mov	r8, r0
 80090dc:	4689      	mov	r9, r1
 80090de:	4b68      	ldr	r3, [pc, #416]	; (8009280 <cal_mollifier_table+0x7d0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f7 fa58 	bl	8000598 <__aeabi_f2d>
 80090e8:	4604      	mov	r4, r0
 80090ea:	460d      	mov	r5, r1
 80090ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090ee:	f7f7 fa53 	bl	8000598 <__aeabi_f2d>
 80090f2:	a35f      	add	r3, pc, #380	; (adr r3, 8009270 <cal_mollifier_table+0x7c0>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 faa6 	bl	8000648 <__aeabi_dmul>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4620      	mov	r0, r4
 8009102:	4629      	mov	r1, r5
 8009104:	f7f7 f8e8 	bl	80002d8 <__aeabi_dsub>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4692      	mov	sl, r2
 800910e:	469b      	mov	fp, r3
 8009110:	4b5b      	ldr	r3, [pc, #364]	; (8009280 <cal_mollifier_table+0x7d0>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f7f7 fa3f 	bl	8000598 <__aeabi_f2d>
 800911a:	4604      	mov	r4, r0
 800911c:	460d      	mov	r5, r1
 800911e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009120:	f7f7 fa3a 	bl	8000598 <__aeabi_f2d>
 8009124:	a352      	add	r3, pc, #328	; (adr r3, 8009270 <cal_mollifier_table+0x7c0>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 fa8d 	bl	8000648 <__aeabi_dmul>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 f8cf 	bl	80002d8 <__aeabi_dsub>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4650      	mov	r0, sl
 8009140:	4659      	mov	r1, fp
 8009142:	f7f7 fa81 	bl	8000648 <__aeabi_dmul>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 f8c3 	bl	80002d8 <__aeabi_dsub>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800915a:	f7f7 fb9f 	bl	800089c <__aeabi_ddiv>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009166:	f7f7 fa6f 	bl	8000648 <__aeabi_dmul>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009172:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009176:	eeb1 7a67 	vneg.f32	s14, s15
 800917a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800917e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009182:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009186:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800918a:	ee16 0a90 	vmov	r0, s13
 800918e:	f7f7 fa03 	bl	8000598 <__aeabi_f2d>
 8009192:	4680      	mov	r8, r0
 8009194:	4689      	mov	r9, r1
 8009196:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800919a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800919e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80091a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091a6:	ee16 0a90 	vmov	r0, s13
 80091aa:	f7f7 f9f5 	bl	8000598 <__aeabi_f2d>
 80091ae:	4682      	mov	sl, r0
 80091b0:	468b      	mov	fp, r1
 80091b2:	4b33      	ldr	r3, [pc, #204]	; (8009280 <cal_mollifier_table+0x7d0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f7 f9ee 	bl	8000598 <__aeabi_f2d>
 80091bc:	4604      	mov	r4, r0
 80091be:	460d      	mov	r5, r1
 80091c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091c2:	f7f7 f9e9 	bl	8000598 <__aeabi_f2d>
 80091c6:	a32a      	add	r3, pc, #168	; (adr r3, 8009270 <cal_mollifier_table+0x7c0>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f7f7 fa3c 	bl	8000648 <__aeabi_dmul>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4620      	mov	r0, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	f7f7 f87e 	bl	80002d8 <__aeabi_dsub>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	e9c7 2300 	strd	r2, r3, [r7]
 80091e4:	4b26      	ldr	r3, [pc, #152]	; (8009280 <cal_mollifier_table+0x7d0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7f7 f9d5 	bl	8000598 <__aeabi_f2d>
 80091ee:	4604      	mov	r4, r0
 80091f0:	460d      	mov	r5, r1
 80091f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091f4:	f7f7 f9d0 	bl	8000598 <__aeabi_f2d>
 80091f8:	a31d      	add	r3, pc, #116	; (adr r3, 8009270 <cal_mollifier_table+0x7c0>)
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	f7f7 fa23 	bl	8000648 <__aeabi_dmul>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	4620      	mov	r0, r4
 8009208:	4629      	mov	r1, r5
 800920a:	f7f7 f865 	bl	80002d8 <__aeabi_dsub>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009216:	f7f7 fa17 	bl	8000648 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4650      	mov	r0, sl
 8009220:	4659      	mov	r1, fp
 8009222:	f7f7 f859 	bl	80002d8 <__aeabi_dsub>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4640      	mov	r0, r8
 800922c:	4649      	mov	r1, r9
 800922e:	f7f7 fb35 	bl	800089c <__aeabi_ddiv>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	ec43 2b17 	vmov	d7, r2, r3
 800923a:	eeb0 0a47 	vmov.f32	s0, s14
 800923e:	eef0 0a67 	vmov.f32	s1, s15
 8009242:	f018 fe6d 	bl	8021f20 <exp>
 8009246:	ec53 2b10 	vmov	r2, r3, d0
 800924a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800924e:	f7f7 f9fb 	bl	8000648 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4610      	mov	r0, r2
 8009258:	4619      	mov	r1, r3
 800925a:	f7f7 fccd 	bl	8000bf8 <__aeabi_d2f>
 800925e:	4602      	mov	r2, r0
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009264:	e33e      	b.n	80098e4 <cal_mollifier_table+0xe34>
 8009266:	bf00      	nop
 8009268:	f9db22d1 	.word	0xf9db22d1
 800926c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009270:	d2f1a9fc 	.word	0xd2f1a9fc
 8009274:	3f50624d 	.word	0x3f50624d
 8009278:	04189375 	.word	0x04189375
 800927c:	3ff50e56 	.word	0x3ff50e56
 8009280:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009284:	4bd4      	ldr	r3, [pc, #848]	; (80095d8 <cal_mollifier_table+0xb28>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f7f7 f985 	bl	8000598 <__aeabi_f2d>
 800928e:	4604      	mov	r4, r0
 8009290:	460d      	mov	r5, r1
 8009292:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009296:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800929a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800929e:	ee16 0a90 	vmov	r0, s13
 80092a2:	f7f7 f979 	bl	8000598 <__aeabi_f2d>
 80092a6:	a3c6      	add	r3, pc, #792	; (adr r3, 80095c0 <cal_mollifier_table+0xb10>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f7 faf6 	bl	800089c <__aeabi_ddiv>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4690      	mov	r8, r2
 80092b6:	4699      	mov	r9, r3
 80092b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ba:	f7f7 f96d 	bl	8000598 <__aeabi_f2d>
 80092be:	a3c2      	add	r3, pc, #776	; (adr r3, 80095c8 <cal_mollifier_table+0xb18>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f7f7 f9c0 	bl	8000648 <__aeabi_dmul>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4640      	mov	r0, r8
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7f7 f804 	bl	80002dc <__adddf3>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4620      	mov	r0, r4
 80092da:	4629      	mov	r1, r5
 80092dc:	f7f7 fc26 	bl	8000b2c <__aeabi_dcmplt>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 817a 	beq.w	80095dc <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80092e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80092ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80092f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fc:	ee17 0a90 	vmov	r0, s15
 8009300:	f7f7 f94a 	bl	8000598 <__aeabi_f2d>
 8009304:	a3b2      	add	r3, pc, #712	; (adr r3, 80095d0 <cal_mollifier_table+0xb20>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f7 fac7 	bl	800089c <__aeabi_ddiv>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009316:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800931a:	eeb1 7a67 	vneg.f32	s14, s15
 800931e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009326:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800932a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800932e:	ee16 0a90 	vmov	r0, s13
 8009332:	f7f7 f931 	bl	8000598 <__aeabi_f2d>
 8009336:	4604      	mov	r4, r0
 8009338:	460d      	mov	r5, r1
 800933a:	4ba7      	ldr	r3, [pc, #668]	; (80095d8 <cal_mollifier_table+0xb28>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4618      	mov	r0, r3
 8009340:	f7f7 f92a 	bl	8000598 <__aeabi_f2d>
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800934a:	f7f7 f925 	bl	8000598 <__aeabi_f2d>
 800934e:	a39e      	add	r3, pc, #632	; (adr r3, 80095c8 <cal_mollifier_table+0xb18>)
 8009350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009354:	f7f7 f978 	bl	8000648 <__aeabi_dmul>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f6 ffba 	bl	80002d8 <__aeabi_dsub>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4620      	mov	r0, r4
 800936a:	4629      	mov	r1, r5
 800936c:	f7f7 f96c 	bl	8000648 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	e9c7 2300 	strd	r2, r3, [r7]
 8009378:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800937c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009380:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009384:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009388:	ee16 0a90 	vmov	r0, s13
 800938c:	f7f7 f904 	bl	8000598 <__aeabi_f2d>
 8009390:	4680      	mov	r8, r0
 8009392:	4689      	mov	r9, r1
 8009394:	4b90      	ldr	r3, [pc, #576]	; (80095d8 <cal_mollifier_table+0xb28>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f7f7 f8fd 	bl	8000598 <__aeabi_f2d>
 800939e:	4604      	mov	r4, r0
 80093a0:	460d      	mov	r5, r1
 80093a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093a4:	f7f7 f8f8 	bl	8000598 <__aeabi_f2d>
 80093a8:	a387      	add	r3, pc, #540	; (adr r3, 80095c8 <cal_mollifier_table+0xb18>)
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	f7f7 f94b 	bl	8000648 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f6 ff8d 	bl	80002d8 <__aeabi_dsub>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4692      	mov	sl, r2
 80093c4:	469b      	mov	fp, r3
 80093c6:	4b84      	ldr	r3, [pc, #528]	; (80095d8 <cal_mollifier_table+0xb28>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7f7 f8e4 	bl	8000598 <__aeabi_f2d>
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093d6:	f7f7 f8df 	bl	8000598 <__aeabi_f2d>
 80093da:	a37b      	add	r3, pc, #492	; (adr r3, 80095c8 <cal_mollifier_table+0xb18>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f7f7 f932 	bl	8000648 <__aeabi_dmul>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4620      	mov	r0, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f6 ff74 	bl	80002d8 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4650      	mov	r0, sl
 80093f6:	4659      	mov	r1, fp
 80093f8:	f7f7 f926 	bl	8000648 <__aeabi_dmul>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4640      	mov	r0, r8
 8009402:	4649      	mov	r1, r9
 8009404:	f7f6 ff68 	bl	80002d8 <__aeabi_dsub>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009410:	f7f7 fa44 	bl	800089c <__aeabi_ddiv>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	e9c7 2300 	strd	r2, r3, [r7]
 800941c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009420:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009424:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009428:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800942c:	ee16 0a90 	vmov	r0, s13
 8009430:	f7f7 f8b2 	bl	8000598 <__aeabi_f2d>
 8009434:	4680      	mov	r8, r0
 8009436:	4689      	mov	r9, r1
 8009438:	4b67      	ldr	r3, [pc, #412]	; (80095d8 <cal_mollifier_table+0xb28>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4618      	mov	r0, r3
 800943e:	f7f7 f8ab 	bl	8000598 <__aeabi_f2d>
 8009442:	4604      	mov	r4, r0
 8009444:	460d      	mov	r5, r1
 8009446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009448:	f7f7 f8a6 	bl	8000598 <__aeabi_f2d>
 800944c:	a35e      	add	r3, pc, #376	; (adr r3, 80095c8 <cal_mollifier_table+0xb18>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f7 f8f9 	bl	8000648 <__aeabi_dmul>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7f6 ff3b 	bl	80002d8 <__aeabi_dsub>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4692      	mov	sl, r2
 8009468:	469b      	mov	fp, r3
 800946a:	4b5b      	ldr	r3, [pc, #364]	; (80095d8 <cal_mollifier_table+0xb28>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4618      	mov	r0, r3
 8009470:	f7f7 f892 	bl	8000598 <__aeabi_f2d>
 8009474:	4604      	mov	r4, r0
 8009476:	460d      	mov	r5, r1
 8009478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800947a:	f7f7 f88d 	bl	8000598 <__aeabi_f2d>
 800947e:	a352      	add	r3, pc, #328	; (adr r3, 80095c8 <cal_mollifier_table+0xb18>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f7 f8e0 	bl	8000648 <__aeabi_dmul>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4620      	mov	r0, r4
 800948e:	4629      	mov	r1, r5
 8009490:	f7f6 ff22 	bl	80002d8 <__aeabi_dsub>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4650      	mov	r0, sl
 800949a:	4659      	mov	r1, fp
 800949c:	f7f7 f8d4 	bl	8000648 <__aeabi_dmul>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4640      	mov	r0, r8
 80094a6:	4649      	mov	r1, r9
 80094a8:	f7f6 ff16 	bl	80002d8 <__aeabi_dsub>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b4:	f7f7 f9f2 	bl	800089c <__aeabi_ddiv>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094c0:	f7f7 f8c2 	bl	8000648 <__aeabi_dmul>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80094cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094d0:	eeb1 7a67 	vneg.f32	s14, s15
 80094d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094dc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80094e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80094e4:	ee16 0a90 	vmov	r0, s13
 80094e8:	f7f7 f856 	bl	8000598 <__aeabi_f2d>
 80094ec:	4680      	mov	r8, r0
 80094ee:	4689      	mov	r9, r1
 80094f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80094f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80094fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009500:	ee16 0a90 	vmov	r0, s13
 8009504:	f7f7 f848 	bl	8000598 <__aeabi_f2d>
 8009508:	4682      	mov	sl, r0
 800950a:	468b      	mov	fp, r1
 800950c:	4b32      	ldr	r3, [pc, #200]	; (80095d8 <cal_mollifier_table+0xb28>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4618      	mov	r0, r3
 8009512:	f7f7 f841 	bl	8000598 <__aeabi_f2d>
 8009516:	4604      	mov	r4, r0
 8009518:	460d      	mov	r5, r1
 800951a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800951c:	f7f7 f83c 	bl	8000598 <__aeabi_f2d>
 8009520:	a329      	add	r3, pc, #164	; (adr r3, 80095c8 <cal_mollifier_table+0xb18>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f7 f88f 	bl	8000648 <__aeabi_dmul>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4620      	mov	r0, r4
 8009530:	4629      	mov	r1, r5
 8009532:	f7f6 fed1 	bl	80002d8 <__aeabi_dsub>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	e9c7 2300 	strd	r2, r3, [r7]
 800953e:	4b26      	ldr	r3, [pc, #152]	; (80095d8 <cal_mollifier_table+0xb28>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4618      	mov	r0, r3
 8009544:	f7f7 f828 	bl	8000598 <__aeabi_f2d>
 8009548:	4604      	mov	r4, r0
 800954a:	460d      	mov	r5, r1
 800954c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800954e:	f7f7 f823 	bl	8000598 <__aeabi_f2d>
 8009552:	a31d      	add	r3, pc, #116	; (adr r3, 80095c8 <cal_mollifier_table+0xb18>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f7 f876 	bl	8000648 <__aeabi_dmul>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7f6 feb8 	bl	80002d8 <__aeabi_dsub>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009570:	f7f7 f86a 	bl	8000648 <__aeabi_dmul>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4650      	mov	r0, sl
 800957a:	4659      	mov	r1, fp
 800957c:	f7f6 feac 	bl	80002d8 <__aeabi_dsub>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4640      	mov	r0, r8
 8009586:	4649      	mov	r1, r9
 8009588:	f7f7 f988 	bl	800089c <__aeabi_ddiv>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	ec43 2b17 	vmov	d7, r2, r3
 8009594:	eeb0 0a47 	vmov.f32	s0, s14
 8009598:	eef0 0a67 	vmov.f32	s1, s15
 800959c:	f018 fcc0 	bl	8021f20 <exp>
 80095a0:	ec53 2b10 	vmov	r2, r3, d0
 80095a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095a8:	f7f7 f84e 	bl	8000648 <__aeabi_dmul>
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4610      	mov	r0, r2
 80095b2:	4619      	mov	r1, r3
 80095b4:	f7f7 fb20 	bl	8000bf8 <__aeabi_d2f>
 80095b8:	4602      	mov	r2, r0
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80095be:	e191      	b.n	80098e4 <cal_mollifier_table+0xe34>
 80095c0:	04189375 	.word	0x04189375
 80095c4:	3ff50e56 	.word	0x3ff50e56
 80095c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80095cc:	3f50624d 	.word	0x3f50624d
 80095d0:	f9db22d1 	.word	0xf9db22d1
 80095d4:	3fdc6a7e 	.word	0x3fdc6a7e
 80095d8:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 80095dc:	f04f 0300 	mov.w	r3, #0
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80095e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80095e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80095f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f6:	ee17 0a90 	vmov	r0, s15
 80095fa:	f7f6 ffcd 	bl	8000598 <__aeabi_f2d>
 80095fe:	a3c0      	add	r3, pc, #768	; (adr r3, 8009900 <cal_mollifier_table+0xe50>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	f7f7 f94a 	bl	800089c <__aeabi_ddiv>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009610:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009614:	eeb1 7a67 	vneg.f32	s14, s15
 8009618:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800961c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009620:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009624:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009628:	ee16 0a90 	vmov	r0, s13
 800962c:	f7f6 ffb4 	bl	8000598 <__aeabi_f2d>
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	4bb0      	ldr	r3, [pc, #704]	; (80098f8 <cal_mollifier_table+0xe48>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4618      	mov	r0, r3
 800963a:	f7f6 ffad 	bl	8000598 <__aeabi_f2d>
 800963e:	4680      	mov	r8, r0
 8009640:	4689      	mov	r9, r1
 8009642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009644:	f7f6 ffa8 	bl	8000598 <__aeabi_f2d>
 8009648:	a3a9      	add	r3, pc, #676	; (adr r3, 80098f0 <cal_mollifier_table+0xe40>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 fffb 	bl	8000648 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4640      	mov	r0, r8
 8009658:	4649      	mov	r1, r9
 800965a:	f7f6 fe3d 	bl	80002d8 <__aeabi_dsub>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4620      	mov	r0, r4
 8009664:	4629      	mov	r1, r5
 8009666:	f7f6 ffef 	bl	8000648 <__aeabi_dmul>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	e9c7 2300 	strd	r2, r3, [r7]
 8009672:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009676:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800967a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800967e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009682:	ee16 0a90 	vmov	r0, s13
 8009686:	f7f6 ff87 	bl	8000598 <__aeabi_f2d>
 800968a:	4680      	mov	r8, r0
 800968c:	4689      	mov	r9, r1
 800968e:	4b9a      	ldr	r3, [pc, #616]	; (80098f8 <cal_mollifier_table+0xe48>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f7f6 ff80 	bl	8000598 <__aeabi_f2d>
 8009698:	4604      	mov	r4, r0
 800969a:	460d      	mov	r5, r1
 800969c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800969e:	f7f6 ff7b 	bl	8000598 <__aeabi_f2d>
 80096a2:	a393      	add	r3, pc, #588	; (adr r3, 80098f0 <cal_mollifier_table+0xe40>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f7f6 ffce 	bl	8000648 <__aeabi_dmul>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f6 fe10 	bl	80002d8 <__aeabi_dsub>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4692      	mov	sl, r2
 80096be:	469b      	mov	fp, r3
 80096c0:	4b8d      	ldr	r3, [pc, #564]	; (80098f8 <cal_mollifier_table+0xe48>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7f6 ff67 	bl	8000598 <__aeabi_f2d>
 80096ca:	4604      	mov	r4, r0
 80096cc:	460d      	mov	r5, r1
 80096ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096d0:	f7f6 ff62 	bl	8000598 <__aeabi_f2d>
 80096d4:	a386      	add	r3, pc, #536	; (adr r3, 80098f0 <cal_mollifier_table+0xe40>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f7f6 ffb5 	bl	8000648 <__aeabi_dmul>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 fdf7 	bl	80002d8 <__aeabi_dsub>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4650      	mov	r0, sl
 80096f0:	4659      	mov	r1, fp
 80096f2:	f7f6 ffa9 	bl	8000648 <__aeabi_dmul>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4640      	mov	r0, r8
 80096fc:	4649      	mov	r1, r9
 80096fe:	f7f6 fdeb 	bl	80002d8 <__aeabi_dsub>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800970a:	f7f7 f8c7 	bl	800089c <__aeabi_ddiv>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	e9c7 2300 	strd	r2, r3, [r7]
 8009716:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800971a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800971e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009722:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009726:	ee16 0a90 	vmov	r0, s13
 800972a:	f7f6 ff35 	bl	8000598 <__aeabi_f2d>
 800972e:	4680      	mov	r8, r0
 8009730:	4689      	mov	r9, r1
 8009732:	4b71      	ldr	r3, [pc, #452]	; (80098f8 <cal_mollifier_table+0xe48>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4618      	mov	r0, r3
 8009738:	f7f6 ff2e 	bl	8000598 <__aeabi_f2d>
 800973c:	4604      	mov	r4, r0
 800973e:	460d      	mov	r5, r1
 8009740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009742:	f7f6 ff29 	bl	8000598 <__aeabi_f2d>
 8009746:	a36a      	add	r3, pc, #424	; (adr r3, 80098f0 <cal_mollifier_table+0xe40>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f7f6 ff7c 	bl	8000648 <__aeabi_dmul>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4620      	mov	r0, r4
 8009756:	4629      	mov	r1, r5
 8009758:	f7f6 fdbe 	bl	80002d8 <__aeabi_dsub>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4692      	mov	sl, r2
 8009762:	469b      	mov	fp, r3
 8009764:	4b64      	ldr	r3, [pc, #400]	; (80098f8 <cal_mollifier_table+0xe48>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4618      	mov	r0, r3
 800976a:	f7f6 ff15 	bl	8000598 <__aeabi_f2d>
 800976e:	4604      	mov	r4, r0
 8009770:	460d      	mov	r5, r1
 8009772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009774:	f7f6 ff10 	bl	8000598 <__aeabi_f2d>
 8009778:	a35d      	add	r3, pc, #372	; (adr r3, 80098f0 <cal_mollifier_table+0xe40>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f6 ff63 	bl	8000648 <__aeabi_dmul>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4620      	mov	r0, r4
 8009788:	4629      	mov	r1, r5
 800978a:	f7f6 fda5 	bl	80002d8 <__aeabi_dsub>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4650      	mov	r0, sl
 8009794:	4659      	mov	r1, fp
 8009796:	f7f6 ff57 	bl	8000648 <__aeabi_dmul>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4640      	mov	r0, r8
 80097a0:	4649      	mov	r1, r9
 80097a2:	f7f6 fd99 	bl	80002d8 <__aeabi_dsub>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ae:	f7f7 f875 	bl	800089c <__aeabi_ddiv>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097ba:	f7f6 ff45 	bl	8000648 <__aeabi_dmul>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80097c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80097ca:	eeb1 7a67 	vneg.f32	s14, s15
 80097ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80097d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80097da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097de:	ee16 0a90 	vmov	r0, s13
 80097e2:	f7f6 fed9 	bl	8000598 <__aeabi_f2d>
 80097e6:	4680      	mov	r8, r0
 80097e8:	4689      	mov	r9, r1
 80097ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80097ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80097f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80097f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097fa:	ee16 0a90 	vmov	r0, s13
 80097fe:	f7f6 fecb 	bl	8000598 <__aeabi_f2d>
 8009802:	4682      	mov	sl, r0
 8009804:	468b      	mov	fp, r1
 8009806:	4b3c      	ldr	r3, [pc, #240]	; (80098f8 <cal_mollifier_table+0xe48>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f7f6 fec4 	bl	8000598 <__aeabi_f2d>
 8009810:	4604      	mov	r4, r0
 8009812:	460d      	mov	r5, r1
 8009814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009816:	f7f6 febf 	bl	8000598 <__aeabi_f2d>
 800981a:	a335      	add	r3, pc, #212	; (adr r3, 80098f0 <cal_mollifier_table+0xe40>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	f7f6 ff12 	bl	8000648 <__aeabi_dmul>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f6 fd54 	bl	80002d8 <__aeabi_dsub>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	e9c7 2300 	strd	r2, r3, [r7]
 8009838:	4b2f      	ldr	r3, [pc, #188]	; (80098f8 <cal_mollifier_table+0xe48>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4618      	mov	r0, r3
 800983e:	f7f6 feab 	bl	8000598 <__aeabi_f2d>
 8009842:	4604      	mov	r4, r0
 8009844:	460d      	mov	r5, r1
 8009846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009848:	f7f6 fea6 	bl	8000598 <__aeabi_f2d>
 800984c:	a328      	add	r3, pc, #160	; (adr r3, 80098f0 <cal_mollifier_table+0xe40>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fef9 	bl	8000648 <__aeabi_dmul>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f6 fd3b 	bl	80002d8 <__aeabi_dsub>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800986a:	f7f6 feed 	bl	8000648 <__aeabi_dmul>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4650      	mov	r0, sl
 8009874:	4659      	mov	r1, fp
 8009876:	f7f6 fd2f 	bl	80002d8 <__aeabi_dsub>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4640      	mov	r0, r8
 8009880:	4649      	mov	r1, r9
 8009882:	f7f7 f80b 	bl	800089c <__aeabi_ddiv>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	ec43 2b17 	vmov	d7, r2, r3
 800988e:	eeb0 0a47 	vmov.f32	s0, s14
 8009892:	eef0 0a67 	vmov.f32	s1, s15
 8009896:	f018 fb43 	bl	8021f20 <exp>
 800989a:	ec53 2b10 	vmov	r2, r3, d0
 800989e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098a2:	f7f6 fed1 	bl	8000648 <__aeabi_dmul>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4610      	mov	r0, r2
 80098ac:	4619      	mov	r1, r3
 80098ae:	f7f7 f9a3 	bl	8000bf8 <__aeabi_d2f>
 80098b2:	4602      	mov	r2, r0
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80098b8:	e014      	b.n	80098e4 <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f04f 0200 	mov.w	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	ed93 7a00 	vldr	s14, [r3]
 80098ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80098d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 80098dc:	4b07      	ldr	r3, [pc, #28]	; (80098fc <cal_mollifier_table+0xe4c>)
 80098de:	2204      	movs	r2, #4
 80098e0:	701a      	strb	r2, [r3, #0]
		}

}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	3730      	adds	r7, #48	; 0x30
 80098e8:	46bd      	mov	sp, r7
 80098ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098ee:	bf00      	nop
 80098f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80098f4:	3f50624d 	.word	0x3f50624d
 80098f8:	20000800 	.word	0x20000800
 80098fc:	20000804 	.word	0x20000804
 8009900:	f9db22d1 	.word	0xf9db22d1
 8009904:	3fdc6a7e 	.word	0x3fdc6a7e

08009908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800990e:	4b12      	ldr	r3, [pc, #72]	; (8009958 <MX_DMA_Init+0x50>)
 8009910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009912:	4a11      	ldr	r2, [pc, #68]	; (8009958 <MX_DMA_Init+0x50>)
 8009914:	f043 0304 	orr.w	r3, r3, #4
 8009918:	6493      	str	r3, [r2, #72]	; 0x48
 800991a:	4b0f      	ldr	r3, [pc, #60]	; (8009958 <MX_DMA_Init+0x50>)
 800991c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	607b      	str	r3, [r7, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009926:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <MX_DMA_Init+0x50>)
 8009928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800992a:	4a0b      	ldr	r2, [pc, #44]	; (8009958 <MX_DMA_Init+0x50>)
 800992c:	f043 0301 	orr.w	r3, r3, #1
 8009930:	6493      	str	r3, [r2, #72]	; 0x48
 8009932:	4b09      	ldr	r3, [pc, #36]	; (8009958 <MX_DMA_Init+0x50>)
 8009934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800993e:	2200      	movs	r2, #0
 8009940:	2100      	movs	r1, #0
 8009942:	200b      	movs	r0, #11
 8009944:	f010 fc5f 	bl	801a206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009948:	200b      	movs	r0, #11
 800994a:	f010 fc76 	bl	801a23a <HAL_NVIC_EnableIRQ>

}
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	40021000 	.word	0x40021000

0800995c <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
	error_mode=0;
 8009960:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <init_FailSafe+0x4c>)
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <init_FailSafe+0x50>)
 8009968:	2200      	movs	r2, #0
 800996a:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 800996c:	4b10      	ldr	r3, [pc, #64]	; (80099b0 <init_FailSafe+0x54>)
 800996e:	2200      	movs	r2, #0
 8009970:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 8009972:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <init_FailSafe+0x58>)
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009978:	4b0f      	ldr	r3, [pc, #60]	; (80099b8 <init_FailSafe+0x5c>)
 800997a:	4a10      	ldr	r2, [pc, #64]	; (80099bc <init_FailSafe+0x60>)
 800997c:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 800997e:	4b10      	ldr	r3, [pc, #64]	; (80099c0 <init_FailSafe+0x64>)
 8009980:	4a10      	ldr	r2, [pc, #64]	; (80099c4 <init_FailSafe+0x68>)
 8009982:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 8009984:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <init_FailSafe+0x6c>)
 8009986:	4a0d      	ldr	r2, [pc, #52]	; (80099bc <init_FailSafe+0x60>)
 8009988:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 800998a:	4b10      	ldr	r3, [pc, #64]	; (80099cc <init_FailSafe+0x70>)
 800998c:	4a10      	ldr	r2, [pc, #64]	; (80099d0 <init_FailSafe+0x74>)
 800998e:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009990:	4b10      	ldr	r3, [pc, #64]	; (80099d4 <init_FailSafe+0x78>)
 8009992:	4a11      	ldr	r2, [pc, #68]	; (80099d8 <init_FailSafe+0x7c>)
 8009994:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 8009996:	4b11      	ldr	r3, [pc, #68]	; (80099dc <init_FailSafe+0x80>)
 8009998:	4a0f      	ldr	r2, [pc, #60]	; (80099d8 <init_FailSafe+0x7c>)
 800999a:	601a      	str	r2, [r3, #0]
}
 800999c:	bf00      	nop
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	20000807 	.word	0x20000807
 80099ac:	20000806 	.word	0x20000806
 80099b0:	20000808 	.word	0x20000808
 80099b4:	20000824 	.word	0x20000824
 80099b8:	2000080c 	.word	0x2000080c
 80099bc:	44bb8000 	.word	0x44bb8000
 80099c0:	20000810 	.word	0x20000810
 80099c4:	44480000 	.word	0x44480000
 80099c8:	20000814 	.word	0x20000814
 80099cc:	20000818 	.word	0x20000818
 80099d0:	455ac000 	.word	0x455ac000
 80099d4:	2000081c 	.word	0x2000081c
 80099d8:	44ed8000 	.word	0x44ed8000
 80099dc:	20000820 	.word	0x20000820

080099e0 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 80099e6:	4b6e      	ldr	r3, [pc, #440]	; (8009ba0 <interrupt_FailSafe+0x1c0>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d109      	bne.n	8009a02 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 80099ee:	4b6d      	ldr	r3, [pc, #436]	; (8009ba4 <interrupt_FailSafe+0x1c4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 80099f4:	4b6c      	ldr	r3, [pc, #432]	; (8009ba8 <interrupt_FailSafe+0x1c8>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 80099fa:	4b6c      	ldr	r3, [pc, #432]	; (8009bac <interrupt_FailSafe+0x1cc>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	607b      	str	r3, [r7, #4]
 8009a00:	e008      	b.n	8009a14 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 8009a02:	4b6b      	ldr	r3, [pc, #428]	; (8009bb0 <interrupt_FailSafe+0x1d0>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009a08:	4b6a      	ldr	r3, [pc, #424]	; (8009bb4 <interrupt_FailSafe+0x1d4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009a0e:	4b6a      	ldr	r3, [pc, #424]	; (8009bb8 <interrupt_FailSafe+0x1d8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 8009a14:	4b69      	ldr	r3, [pc, #420]	; (8009bbc <interrupt_FailSafe+0x1dc>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d062      	beq.n	8009ae2 <interrupt_FailSafe+0x102>
 8009a1c:	4b67      	ldr	r3, [pc, #412]	; (8009bbc <interrupt_FailSafe+0x1dc>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d05e      	beq.n	8009ae2 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 8009a24:	4b66      	ldr	r3, [pc, #408]	; (8009bc0 <interrupt_FailSafe+0x1e0>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d15a      	bne.n	8009ae2 <interrupt_FailSafe+0x102>
 8009a2c:	4b65      	ldr	r3, [pc, #404]	; (8009bc4 <interrupt_FailSafe+0x1e4>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d156      	bne.n	8009ae2 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 8009a34:	4b64      	ldr	r3, [pc, #400]	; (8009bc8 <interrupt_FailSafe+0x1e8>)
 8009a36:	ed93 7a00 	vldr	s14, [r3]
 8009a3a:	4b64      	ldr	r3, [pc, #400]	; (8009bcc <interrupt_FailSafe+0x1ec>)
 8009a3c:	edd3 7a00 	vldr	s15, [r3]
 8009a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a44:	eef0 7ae7 	vabs.f32	s15, s15
 8009a48:	ed97 7a02 	vldr	s14, [r7, #8]
 8009a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a54:	d809      	bhi.n	8009a6a <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009a56:	f7fe f87b 	bl	8007b50 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	f7fd fa90 	bl	8006f80 <pl_yellow_LED_count>
						error_mode = 1;
 8009a60:	4b58      	ldr	r3, [pc, #352]	; (8009bc4 <interrupt_FailSafe+0x1e4>)
 8009a62:	2201      	movs	r2, #1
 8009a64:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009a66:	f7fa fe85 	bl	8004774 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 8009a6a:	4b59      	ldr	r3, [pc, #356]	; (8009bd0 <interrupt_FailSafe+0x1f0>)
 8009a6c:	edd3 7a00 	vldr	s15, [r3]
 8009a70:	ed97 7a01 	vldr	s14, [r7, #4]
 8009a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7c:	d809      	bhi.n	8009a92 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009a7e:	f7fe f867 	bl	8007b50 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 8009a82:	2002      	movs	r0, #2
 8009a84:	f7fd fa7c 	bl	8006f80 <pl_yellow_LED_count>
						error_mode = 1;
 8009a88:	4b4e      	ldr	r3, [pc, #312]	; (8009bc4 <interrupt_FailSafe+0x1e4>)
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009a8e:	f7fa fe71 	bl	8004774 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 8009a92:	4b50      	ldr	r3, [pc, #320]	; (8009bd4 <interrupt_FailSafe+0x1f4>)
 8009a94:	ed93 7a00 	vldr	s14, [r3]
 8009a98:	4b4f      	ldr	r3, [pc, #316]	; (8009bd8 <interrupt_FailSafe+0x1f8>)
 8009a9a:	edd3 6a00 	vldr	s13, [r3]
 8009a9e:	4b4f      	ldr	r3, [pc, #316]	; (8009bdc <interrupt_FailSafe+0x1fc>)
 8009aa0:	edd3 7a00 	vldr	s15, [r3]
 8009aa4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009aa8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009aac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ab4:	eef0 7ae7 	vabs.f32	s15, s15
 8009ab8:	ed97 7a03 	vldr	s14, [r7, #12]
 8009abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac4:	d80d      	bhi.n	8009ae2 <interrupt_FailSafe+0x102>
 8009ac6:	4b3d      	ldr	r3, [pc, #244]	; (8009bbc <interrupt_FailSafe+0x1dc>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d109      	bne.n	8009ae2 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009ace:	f7fe f83f 	bl	8007b50 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009ad2:	2004      	movs	r0, #4
 8009ad4:	f7fd fa54 	bl	8006f80 <pl_yellow_LED_count>
						error_mode = 1;
 8009ad8:	4b3a      	ldr	r3, [pc, #232]	; (8009bc4 <interrupt_FailSafe+0x1e4>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009ade:	f7fa fe49 	bl	8004774 <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009ae2:	4b38      	ldr	r3, [pc, #224]	; (8009bc4 <interrupt_FailSafe+0x1e4>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d153      	bne.n	8009b92 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8009aea:	4b3d      	ldr	r3, [pc, #244]	; (8009be0 <interrupt_FailSafe+0x200>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009af0:	4b3c      	ldr	r3, [pc, #240]	; (8009be4 <interrupt_FailSafe+0x204>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	4a3b      	ldr	r2, [pc, #236]	; (8009be4 <interrupt_FailSafe+0x204>)
 8009af8:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8009afa:	4b3a      	ldr	r3, [pc, #232]	; (8009be4 <interrupt_FailSafe+0x204>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b02:	dc05      	bgt.n	8009b10 <interrupt_FailSafe+0x130>
			init_WallControl();
 8009b04:	f7fa ff6c 	bl	80049e0 <init_WallControl>
			modeacc=100;//エラー用
 8009b08:	4b2c      	ldr	r3, [pc, #176]	; (8009bbc <interrupt_FailSafe+0x1dc>)
 8009b0a:	2264      	movs	r2, #100	; 0x64
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	e009      	b.n	8009b24 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009b10:	2000      	movs	r0, #0
 8009b12:	f7fd ff89 	bl	8007a28 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 8009b16:	f7fd ffed 	bl	8007af4 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 8009b1a:	f7fe f819 	bl	8007b50 <pl_FunMotor_stop>
			modeacc=0;
 8009b1e:	4b27      	ldr	r3, [pc, #156]	; (8009bbc <interrupt_FailSafe+0x1dc>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8009b24:	4b30      	ldr	r3, [pc, #192]	; (8009be8 <interrupt_FailSafe+0x208>)
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2a:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009b2c:	4b2f      	ldr	r3, [pc, #188]	; (8009bec <interrupt_FailSafe+0x20c>)
 8009b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b32:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8009b34:	4b2e      	ldr	r3, [pc, #184]	; (8009bf0 <interrupt_FailSafe+0x210>)
 8009b36:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3a:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8009b3c:	4b2d      	ldr	r3, [pc, #180]	; (8009bf4 <interrupt_FailSafe+0x214>)
 8009b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b42:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 8009b44:	4b2c      	ldr	r3, [pc, #176]	; (8009bf8 <interrupt_FailSafe+0x218>)
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8009b4c:	4b2b      	ldr	r3, [pc, #172]	; (8009bfc <interrupt_FailSafe+0x21c>)
 8009b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b52:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 8009b54:	4b2a      	ldr	r3, [pc, #168]	; (8009c00 <interrupt_FailSafe+0x220>)
 8009b56:	4a2b      	ldr	r2, [pc, #172]	; (8009c04 <interrupt_FailSafe+0x224>)
 8009b58:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 8009b5a:	4b2b      	ldr	r3, [pc, #172]	; (8009c08 <interrupt_FailSafe+0x228>)
 8009b5c:	4a29      	ldr	r2, [pc, #164]	; (8009c04 <interrupt_FailSafe+0x224>)
 8009b5e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009b60:	4b2a      	ldr	r3, [pc, #168]	; (8009c0c <interrupt_FailSafe+0x22c>)
 8009b62:	4a2b      	ldr	r2, [pc, #172]	; (8009c10 <interrupt_FailSafe+0x230>)
 8009b64:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 8009b66:	4b2b      	ldr	r3, [pc, #172]	; (8009c14 <interrupt_FailSafe+0x234>)
 8009b68:	4a29      	ldr	r2, [pc, #164]	; (8009c10 <interrupt_FailSafe+0x230>)
 8009b6a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009b6c:	4b2a      	ldr	r3, [pc, #168]	; (8009c18 <interrupt_FailSafe+0x238>)
 8009b6e:	4a2b      	ldr	r2, [pc, #172]	; (8009c1c <interrupt_FailSafe+0x23c>)
 8009b70:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 8009b72:	4b2b      	ldr	r3, [pc, #172]	; (8009c20 <interrupt_FailSafe+0x240>)
 8009b74:	4a29      	ldr	r2, [pc, #164]	; (8009c1c <interrupt_FailSafe+0x23c>)
 8009b76:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009b78:	4b2a      	ldr	r3, [pc, #168]	; (8009c24 <interrupt_FailSafe+0x244>)
 8009b7a:	4a28      	ldr	r2, [pc, #160]	; (8009c1c <interrupt_FailSafe+0x23c>)
 8009b7c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009b7e:	4b2a      	ldr	r3, [pc, #168]	; (8009c28 <interrupt_FailSafe+0x248>)
 8009b80:	4a26      	ldr	r2, [pc, #152]	; (8009c1c <interrupt_FailSafe+0x23c>)
 8009b82:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009b84:	4b29      	ldr	r3, [pc, #164]	; (8009c2c <interrupt_FailSafe+0x24c>)
 8009b86:	2204      	movs	r2, #4
 8009b88:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009b8a:	4b29      	ldr	r3, [pc, #164]	; (8009c30 <interrupt_FailSafe+0x250>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009b90:	e002      	b.n	8009b98 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009b92:	4b14      	ldr	r3, [pc, #80]	; (8009be4 <interrupt_FailSafe+0x204>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	601a      	str	r2, [r3, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000808 	.word	0x20000808
 8009ba4:	2000080c 	.word	0x2000080c
 8009ba8:	20000810 	.word	0x20000810
 8009bac:	20000814 	.word	0x20000814
 8009bb0:	20000818 	.word	0x20000818
 8009bb4:	2000081c 	.word	0x2000081c
 8009bb8:	20000820 	.word	0x20000820
 8009bbc:	20000528 	.word	0x20000528
 8009bc0:	20000806 	.word	0x20000806
 8009bc4:	20000807 	.word	0x20000807
 8009bc8:	200004e4 	.word	0x200004e4
 8009bcc:	20000268 	.word	0x20000268
 8009bd0:	20000274 	.word	0x20000274
 8009bd4:	200004d8 	.word	0x200004d8
 8009bd8:	2000025c 	.word	0x2000025c
 8009bdc:	20000258 	.word	0x20000258
 8009be0:	2000d970 	.word	0x2000d970
 8009be4:	20000824 	.word	0x20000824
 8009be8:	200005b8 	.word	0x200005b8
 8009bec:	200005b4 	.word	0x200005b4
 8009bf0:	200005c0 	.word	0x200005c0
 8009bf4:	200005bc 	.word	0x200005bc
 8009bf8:	200005c8 	.word	0x200005c8
 8009bfc:	200005c4 	.word	0x200005c4
 8009c00:	200005d0 	.word	0x200005d0
 8009c04:	42480000 	.word	0x42480000
 8009c08:	200005cc 	.word	0x200005cc
 8009c0c:	200005d8 	.word	0x200005d8
 8009c10:	41a00000 	.word	0x41a00000
 8009c14:	200005d4 	.word	0x200005d4
 8009c18:	200005e0 	.word	0x200005e0
 8009c1c:	420c0000 	.word	0x420c0000
 8009c20:	200005dc 	.word	0x200005dc
 8009c24:	200005e8 	.word	0x200005e8
 8009c28:	200005e4 	.word	0x200005e4
 8009c2c:	20000804 	.word	0x20000804
 8009c30:	20000592 	.word	0x20000592

08009c34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	; 0x28
 8009c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c3a:	f107 0314 	add.w	r3, r7, #20
 8009c3e:	2200      	movs	r2, #0
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	605a      	str	r2, [r3, #4]
 8009c44:	609a      	str	r2, [r3, #8]
 8009c46:	60da      	str	r2, [r3, #12]
 8009c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009c4a:	4b3a      	ldr	r3, [pc, #232]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4e:	4a39      	ldr	r2, [pc, #228]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c50:	f043 0304 	orr.w	r3, r3, #4
 8009c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c56:	4b37      	ldr	r3, [pc, #220]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c5a:	f003 0304 	and.w	r3, r3, #4
 8009c5e:	613b      	str	r3, [r7, #16]
 8009c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009c62:	4b34      	ldr	r3, [pc, #208]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c66:	4a33      	ldr	r2, [pc, #204]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c68:	f043 0320 	orr.w	r3, r3, #32
 8009c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c6e:	4b31      	ldr	r3, [pc, #196]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c7a:	4b2e      	ldr	r3, [pc, #184]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c7e:	4a2d      	ldr	r2, [pc, #180]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c80:	f043 0301 	orr.w	r3, r3, #1
 8009c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c86:	4b2b      	ldr	r3, [pc, #172]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	60bb      	str	r3, [r7, #8]
 8009c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c92:	4b28      	ldr	r3, [pc, #160]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c96:	4a27      	ldr	r2, [pc, #156]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009c98:	f043 0302 	orr.w	r3, r3, #2
 8009c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c9e:	4b25      	ldr	r3, [pc, #148]	; (8009d34 <MX_GPIO_Init+0x100>)
 8009ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	607b      	str	r3, [r7, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009caa:	2200      	movs	r2, #0
 8009cac:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009cb0:	4821      	ldr	r0, [pc, #132]	; (8009d38 <MX_GPIO_Init+0x104>)
 8009cb2:	f011 f993 	bl	801afdc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f648 1110 	movw	r1, #35088	; 0x8910
 8009cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009cc0:	f011 f98c 	bl	801afdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009cca:	481c      	ldr	r0, [pc, #112]	; (8009d3c <MX_GPIO_Init+0x108>)
 8009ccc:	f011 f986 	bl	801afdc <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009cd0:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009cd4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ce2:	f107 0314 	add.w	r3, r7, #20
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4813      	ldr	r0, [pc, #76]	; (8009d38 <MX_GPIO_Init+0x104>)
 8009cea:	f010 fff5 	bl	801acd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009cee:	f648 1310 	movw	r3, #35088	; 0x8910
 8009cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	4619      	mov	r1, r3
 8009d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d0a:	f010 ffe5 	bl	801acd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009d0e:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009d12:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d14:	2301      	movs	r3, #1
 8009d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d20:	f107 0314 	add.w	r3, r7, #20
 8009d24:	4619      	mov	r1, r3
 8009d26:	4805      	ldr	r0, [pc, #20]	; (8009d3c <MX_GPIO_Init+0x108>)
 8009d28:	f010 ffd6 	bl	801acd8 <HAL_GPIO_Init>

}
 8009d2c:	bf00      	nop
 8009d2e:	3728      	adds	r7, #40	; 0x28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	40021000 	.word	0x40021000
 8009d38:	48000800 	.word	0x48000800
 8009d3c:	48000400 	.word	0x48000400

08009d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009d46:	f00d ff15 	bl	8017b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009d4a:	f000 f8a7 	bl	8009e9c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009d4e:	f7ff fddb 	bl	8009908 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009d52:	f7ff ff6f 	bl	8009c34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009d56:	f7fe f9d5 	bl	8008104 <MX_ADC1_Init>
  MX_SPI1_Init();
 8009d5a:	f00c fd7b 	bl	8016854 <MX_SPI1_Init>
  MX_TIM6_Init();
 8009d5e:	f00c ffe7 	bl	8016d30 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009d62:	f00d f81b 	bl	8016d9c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009d66:	f00d fe37 	bl	80179d8 <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_SPI3_Init();
 8009d6a:	f00c fdb1 	bl	80168d0 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009d6e:	f00d f8b5 	bl	8016edc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009d72:	f7fe f8d9 	bl	8007f28 <pl_timer_init>
  pl_gyro_init();
 8009d76:	f7fd fd6b 	bl	8007850 <pl_gyro_init>
  pl_sensor_init();
 8009d7a:	f7fd ff19 	bl	8007bb0 <pl_sensor_init>
  reset_distance();
 8009d7e:	f7f7 f90d 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009d82:	f7f7 fca1 	bl	80016c8 <reset_gyro>
  reset_speed();
 8009d86:	f7f7 f947 	bl	8001018 <reset_speed>
  record_reset();
 8009d8a:	f00c faf1 	bl	8016370 <record_reset>
  pl_motor_init();
 8009d8e:	f7fd fe25 	bl	80079dc <pl_motor_init>
  PID_Init();
 8009d92:	f7fa fcb3 	bl	80046fc <PID_Init>
  init_WallControl();
 8009d96:	f7fa fe23 	bl	80049e0 <init_WallControl>
  Control_mode_Init();
 8009d9a:	f7f7 ffdf 	bl	8001d5c <Control_mode_Init>
  init_FailSafe();
 8009d9e:	f7ff fddd 	bl	800995c <init_FailSafe>
  input_parameter();
 8009da2:	f00d fa7b 	bl	801729c <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009daa:	4b37      	ldr	r3, [pc, #220]	; (8009e88 <main+0x148>)
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009db0:	4b35      	ldr	r3, [pc, #212]	; (8009e88 <main+0x148>)
 8009db2:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009db4:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009db6:	4b34      	ldr	r3, [pc, #208]	; (8009e88 <main+0x148>)
 8009db8:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009dba:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009dbc:	4b32      	ldr	r3, [pc, #200]	; (8009e88 <main+0x148>)
 8009dbe:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009dc0:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009dc2:	4b31      	ldr	r3, [pc, #196]	; (8009e88 <main+0x148>)
 8009dc4:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	9200      	str	r2, [sp, #0]
 8009dca:	4623      	mov	r3, r4
 8009dcc:	4602      	mov	r2, r0
 8009dce:	482f      	ldr	r0, [pc, #188]	; (8009e8c <main+0x14c>)
 8009dd0:	f015 fe9a 	bl	801fb08 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009dd4:	4b2e      	ldr	r3, [pc, #184]	; (8009e90 <main+0x150>)
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009dda:	4b2d      	ldr	r3, [pc, #180]	; (8009e90 <main+0x150>)
 8009ddc:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009dde:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009de0:	4b2b      	ldr	r3, [pc, #172]	; (8009e90 <main+0x150>)
 8009de2:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009de4:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009de6:	4b2a      	ldr	r3, [pc, #168]	; (8009e90 <main+0x150>)
 8009de8:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009dea:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009dec:	4b28      	ldr	r3, [pc, #160]	; (8009e90 <main+0x150>)
 8009dee:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	9200      	str	r2, [sp, #0]
 8009df4:	4623      	mov	r3, r4
 8009df6:	4602      	mov	r2, r0
 8009df8:	4826      	ldr	r0, [pc, #152]	; (8009e94 <main+0x154>)
 8009dfa:	f015 fe85 	bl	801fb08 <iprintf>
	battcheak();
 8009dfe:	f7f7 fe6f 	bl	8001ae0 <battcheak>

//起動cheak
	int yellow_count=1;
 8009e02:	2301      	movs	r3, #1
 8009e04:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009e06:	2300      	movs	r3, #0
 8009e08:	607b      	str	r3, [r7, #4]
 8009e0a:	e00d      	b.n	8009e28 <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fd f8b5 	bl	8006f80 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009e16:	2032      	movs	r0, #50	; 0x32
 8009e18:	f00d ff24 	bl	8017c64 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3301      	adds	r3, #1
 8009e26:	607b      	str	r3, [r7, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b07      	cmp	r3, #7
 8009e2c:	ddee      	ble.n	8009e0c <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009e2e:	2300      	movs	r3, #0
 8009e30:	603b      	str	r3, [r7, #0]
 8009e32:	e00f      	b.n	8009e54 <main+0x114>
			pl_yellow_LED_count(yellow_count);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fd f8a1 	bl	8006f80 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009e3e:	2032      	movs	r0, #50	; 0x32
 8009e40:	f00d ff10 	bl	8017c64 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	0fda      	lsrs	r2, r3, #31
 8009e48:	4413      	add	r3, r2
 8009e4a:	105b      	asrs	r3, r3, #1
 8009e4c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	3301      	adds	r3, #1
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b08      	cmp	r3, #8
 8009e58:	ddec      	ble.n	8009e34 <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f00a fe10 	bl	8014a84 <mode_decision>
 8009e64:	4603      	mov	r3, r0
 8009e66:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009e68:	f7f7 f898 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009e6c:	f7f7 fc2c 	bl	80016c8 <reset_gyro>
	  		reset_speed();
 8009e70:	f7f7 f8d2 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f00a fefd 	bl	8014c78 <mode_execution>

	  		error_mode = 0;
 8009e7e:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <main+0x158>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009e84:	e7e9      	b.n	8009e5a <main+0x11a>
 8009e86:	bf00      	nop
 8009e88:	2000070c 	.word	0x2000070c
 8009e8c:	080223c8 	.word	0x080223c8
 8009e90:	20000718 	.word	0x20000718
 8009e94:	080223f4 	.word	0x080223f4
 8009e98:	20000807 	.word	0x20000807

08009e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b094      	sub	sp, #80	; 0x50
 8009ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009ea2:	f107 0318 	add.w	r3, r7, #24
 8009ea6:	2238      	movs	r2, #56	; 0x38
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f015 f9ba 	bl	801f224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009eb0:	1d3b      	adds	r3, r7, #4
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	605a      	str	r2, [r3, #4]
 8009eb8:	609a      	str	r2, [r3, #8]
 8009eba:	60da      	str	r2, [r3, #12]
 8009ebc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	f011 f8a4 	bl	801b00c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ecc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009ed6:	2304      	movs	r3, #4
 8009ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009eda:	2355      	movs	r3, #85	; 0x55
 8009edc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009ede:	2302      	movs	r3, #2
 8009ee0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009eea:	f107 0318 	add.w	r3, r7, #24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f011 f940 	bl	801b174 <HAL_RCC_OscConfig>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009efa:	f000 f81a 	bl	8009f32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009efe:	230f      	movs	r3, #15
 8009f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f02:	2303      	movs	r3, #3
 8009f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009f0a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009f16:	1d3b      	adds	r3, r7, #4
 8009f18:	2104      	movs	r1, #4
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f011 fc42 	bl	801b7a4 <HAL_RCC_ClockConfig>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009f26:	f000 f804 	bl	8009f32 <Error_Handler>
  }
}
 8009f2a:	bf00      	nop
 8009f2c:	3750      	adds	r7, #80	; 0x50
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009f32:	b480      	push	{r7}
 8009f34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009f36:	b672      	cpsid	i
}
 8009f38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009f3a:	e7fe      	b.n	8009f3a <Error_Handler+0x8>

08009f3c <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	ed87 0a03 	vstr	s0, [r7, #12]
 8009f46:	edc7 0a02 	vstr	s1, [r7, #8]
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	71bb      	strb	r3, [r7, #6]
 8009f52:	4613      	mov	r3, r2
 8009f54:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009f5c:	f7f9 fff8 	bl	8003f50 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f60:	2003      	movs	r0, #3
 8009f62:	f7fd fd93 	bl	8007a8c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f66:	2003      	movs	r0, #3
 8009f68:	f7fd fd68 	bl	8007a3c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009f6c:	2032      	movs	r0, #50	; 0x32
 8009f6e:	f7fe f88b 	bl	8008088 <wait_ms_NoReset>
	}
	if(left_wall){
 8009f72:	79bb      	ldrb	r3, [r7, #6]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d02c      	beq.n	8009fd2 <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f78:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f7c:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f80:	ed9f 1a50 	vldr	s2, [pc, #320]	; 800a0c4 <backTurn_controlWall+0x188>
 8009f84:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800a0c4 <backTurn_controlWall+0x188>
 8009f88:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800a0c8 <backTurn_controlWall+0x18c>
 8009f8c:	f7f9 fce4 	bl	8003958 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f90:	2003      	movs	r0, #3
 8009f92:	f7fd fd7b 	bl	8007a8c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f96:	2003      	movs	r0, #3
 8009f98:	f7fd fd50 	bl	8007a3c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f9c:	2032      	movs	r0, #50	; 0x32
 8009f9e:	f7fe f873 	bl	8008088 <wait_ms_NoReset>
		no_frontwall_straight();
 8009fa2:	f7f9 ffd5 	bl	8003f50 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009fa6:	2003      	movs	r0, #3
 8009fa8:	f7fd fd70 	bl	8007a8c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009fac:	2003      	movs	r0, #3
 8009fae:	f7fd fd45 	bl	8007a3c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009fb2:	2032      	movs	r0, #50	; 0x32
 8009fb4:	f7fe f868 	bl	8008088 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009fb8:	ed97 2a02 	vldr	s4, [r7, #8]
 8009fbc:	edd7 1a03 	vldr	s3, [r7, #12]
 8009fc0:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800a0c4 <backTurn_controlWall+0x188>
 8009fc4:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800a0c4 <backTurn_controlWall+0x188>
 8009fc8:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800a0c8 <backTurn_controlWall+0x18c>
 8009fcc:	f7f9 fcc4 	bl	8003958 <turning_table2>
 8009fd0:	e06a      	b.n	800a0a8 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009fd2:	79bb      	ldrb	r3, [r7, #6]
 8009fd4:	f083 0301 	eor.w	r3, r3, #1
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d037      	beq.n	800a04e <backTurn_controlWall+0x112>
 8009fde:	797b      	ldrb	r3, [r7, #5]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d034      	beq.n	800a04e <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009fe4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fe8:	eef1 7a67 	vneg.f32	s15, s15
 8009fec:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ff0:	eef0 1a67 	vmov.f32	s3, s15
 8009ff4:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800a0c4 <backTurn_controlWall+0x188>
 8009ff8:	eddf 0a32 	vldr	s1, [pc, #200]	; 800a0c4 <backTurn_controlWall+0x188>
 8009ffc:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800a0cc <backTurn_controlWall+0x190>
 800a000:	f7f9 fcaa 	bl	8003958 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a004:	2003      	movs	r0, #3
 800a006:	f7fd fd41 	bl	8007a8c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a00a:	2003      	movs	r0, #3
 800a00c:	f7fd fd16 	bl	8007a3c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a010:	2032      	movs	r0, #50	; 0x32
 800a012:	f7fe f839 	bl	8008088 <wait_ms_NoReset>
		no_frontwall_straight();
 800a016:	f7f9 ff9b 	bl	8003f50 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a01a:	2003      	movs	r0, #3
 800a01c:	f7fd fd36 	bl	8007a8c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a020:	2003      	movs	r0, #3
 800a022:	f7fd fd0b 	bl	8007a3c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a026:	2032      	movs	r0, #50	; 0x32
 800a028:	f7fe f82e 	bl	8008088 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a02c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a030:	eef1 7a67 	vneg.f32	s15, s15
 800a034:	ed97 2a02 	vldr	s4, [r7, #8]
 800a038:	eef0 1a67 	vmov.f32	s3, s15
 800a03c:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800a0c4 <backTurn_controlWall+0x188>
 800a040:	eddf 0a20 	vldr	s1, [pc, #128]	; 800a0c4 <backTurn_controlWall+0x188>
 800a044:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800a0cc <backTurn_controlWall+0x190>
 800a048:	f7f9 fc86 	bl	8003958 <turning_table2>
 800a04c:	e02c      	b.n	800a0a8 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 800a04e:	79bb      	ldrb	r3, [r7, #6]
 800a050:	f083 0301 	eor.w	r3, r3, #1
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d026      	beq.n	800a0a8 <backTurn_controlWall+0x16c>
 800a05a:	797b      	ldrb	r3, [r7, #5]
 800a05c:	f083 0301 	eor.w	r3, r3, #1
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d020      	beq.n	800a0a8 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a066:	ed97 2a02 	vldr	s4, [r7, #8]
 800a06a:	edd7 1a03 	vldr	s3, [r7, #12]
 800a06e:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800a0c4 <backTurn_controlWall+0x188>
 800a072:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a0c4 <backTurn_controlWall+0x188>
 800a076:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a0c8 <backTurn_controlWall+0x18c>
 800a07a:	f7f9 fc6d 	bl	8003958 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a07e:	2003      	movs	r0, #3
 800a080:	f7fd fd04 	bl	8007a8c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a084:	2003      	movs	r0, #3
 800a086:	f7fd fcd9 	bl	8007a3c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a08a:	2032      	movs	r0, #50	; 0x32
 800a08c:	f7fd fffc 	bl	8008088 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a090:	ed97 2a02 	vldr	s4, [r7, #8]
 800a094:	edd7 1a03 	vldr	s3, [r7, #12]
 800a098:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800a0c4 <backTurn_controlWall+0x188>
 800a09c:	eddf 0a09 	vldr	s1, [pc, #36]	; 800a0c4 <backTurn_controlWall+0x188>
 800a0a0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a0c8 <backTurn_controlWall+0x18c>
 800a0a4:	f7f9 fc58 	bl	8003958 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a0a8:	2003      	movs	r0, #3
 800a0aa:	f7fd fcef 	bl	8007a8c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a0ae:	2003      	movs	r0, #3
 800a0b0:	f7fd fcc4 	bl	8007a3c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 800a0b4:	2032      	movs	r0, #50	; 0x32
 800a0b6:	f7fd ffe7 	bl	8008088 <wait_ms_NoReset>

}
 800a0ba:	bf00      	nop
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	00000000 	.word	0x00000000
 800a0c8:	42b40000 	.word	0x42b40000
 800a0cc:	c2b40000 	.word	0xc2b40000

0800a0d0 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	b5b0      	push	{r4, r5, r7, lr}
 800a0d4:	ed2d 8b02 	vpush	{d8}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a0e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a0e4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a0e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	f040 80f5 	bne.w	800a2dc <slalomR+0x20c>
		highspeed_mode = 0;
 800a0f2:	4bcd      	ldr	r3, [pc, #820]	; (800a428 <slalomR+0x358>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a104:	2300      	movs	r3, #0
 800a106:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a108:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d11f      	bne.n	800a150 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a110:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a114:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a118:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a11c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a120:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a124:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a128:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a12c:	eddf 5abf 	vldr	s11, [pc, #764]	; 800a42c <slalomR+0x35c>
 800a130:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	eeb0 2a47 	vmov.f32	s4, s14
 800a13a:	eef0 1a46 	vmov.f32	s3, s12
 800a13e:	eeb0 1a66 	vmov.f32	s2, s13
 800a142:	eddf 0abb 	vldr	s1, [pc, #748]	; 800a430 <slalomR+0x360>
 800a146:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800a434 <slalomR+0x364>
 800a14a:	f7f8 fef7 	bl	8002f3c <straight_table2>
 800a14e:	e01e      	b.n	800a18e <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a150:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a154:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a158:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a15c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a160:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a164:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a168:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a16c:	eddf 5aaf 	vldr	s11, [pc, #700]	; 800a42c <slalomR+0x35c>
 800a170:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	eeb0 2a47 	vmov.f32	s4, s14
 800a17a:	eef0 1a46 	vmov.f32	s3, s12
 800a17e:	eeb0 1a66 	vmov.f32	s2, s13
 800a182:	eddf 0aab 	vldr	s1, [pc, #684]	; 800a430 <slalomR+0x360>
 800a186:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a438 <slalomR+0x368>
 800a18a:	f7f8 fed7 	bl	8002f3c <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a18e:	2301      	movs	r3, #1
 800a190:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a192:	2300      	movs	r3, #0
 800a194:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a196:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d127      	bne.n	800a1ee <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a19e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a1a2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a1a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1b2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1c2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a1c6:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1ca:	eddf 4a98 	vldr	s9, [pc, #608]	; 800a42c <slalomR+0x35c>
 800a1ce:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	eeb0 2a47 	vmov.f32	s4, s14
 800a1d8:	eef0 1a45 	vmov.f32	s3, s10
 800a1dc:	eeb0 1a65 	vmov.f32	s2, s11
 800a1e0:	eef0 0a46 	vmov.f32	s1, s12
 800a1e4:	eeb0 0a66 	vmov.f32	s0, s13
 800a1e8:	f7f8 fea8 	bl	8002f3c <straight_table2>
 800a1ec:	e022      	b.n	800a234 <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1ee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a1f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1f6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1fa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a202:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a20a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a20e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a212:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a42c <slalomR+0x35c>
 800a216:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	eeb0 2a47 	vmov.f32	s4, s14
 800a220:	eef0 1a45 	vmov.f32	s3, s10
 800a224:	eeb0 1a65 	vmov.f32	s2, s11
 800a228:	eef0 0a46 	vmov.f32	s1, s12
 800a22c:	eeb0 0a66 	vmov.f32	s0, s13
 800a230:	f7f8 fe84 	bl	8002f3c <straight_table2>
		}
		if(mollifier_mode == ON){
 800a234:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d10c      	bne.n	800a256 <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a23c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a240:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a244:	eeb0 1a47 	vmov.f32	s2, s14
 800a248:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800a43c <slalomR+0x36c>
 800a24c:	eeb0 0a67 	vmov.f32	s0, s15
 800a250:	f7f9 fdea 	bl	8003e28 <mollifier_slalom_table>
 800a254:	e015      	b.n	800a282 <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a256:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a25a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a25e:	eef1 7a67 	vneg.f32	s15, s15
 800a262:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a266:	eef0 2a66 	vmov.f32	s5, s13
 800a26a:	eeb0 2a67 	vmov.f32	s4, s15
 800a26e:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a430 <slalomR+0x360>
 800a272:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a430 <slalomR+0x360>
 800a276:	eddf 0a71 	vldr	s1, [pc, #452]	; 800a43c <slalomR+0x36c>
 800a27a:	eeb0 0a47 	vmov.f32	s0, s14
 800a27e:	f7f9 fc83 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a282:	2300      	movs	r3, #0
 800a284:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a28a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a28e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a42c <slalomR+0x35c>
 800a292:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a296:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a29a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a29e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2aa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a2ae:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a2b2:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a42c <slalomR+0x35c>
 800a2b6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	eeb0 2a47 	vmov.f32	s4, s14
 800a2c0:	eef0 1a65 	vmov.f32	s3, s11
 800a2c4:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a430 <slalomR+0x360>
 800a2c8:	eef0 0a46 	vmov.f32	s1, s12
 800a2cc:	eeb0 0a66 	vmov.f32	s0, s13
 800a2d0:	f7f8 fe34 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800a2d4:	4b54      	ldr	r3, [pc, #336]	; (800a428 <slalomR+0x358>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a2da:	e09c      	b.n	800a416 <slalomR+0x346>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a2ec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a2f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a2f4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a2f8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a2fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a300:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a304:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a308:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a30c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a310:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a42c <slalomR+0x35c>
 800a314:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	eeb0 2a47 	vmov.f32	s4, s14
 800a31e:	eef0 1a45 	vmov.f32	s3, s10
 800a322:	eeb0 1a65 	vmov.f32	s2, s11
 800a326:	eef0 0a46 	vmov.f32	s1, s12
 800a32a:	eeb0 0a66 	vmov.f32	s0, s13
 800a32e:	f7f8 fe05 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800a332:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a336:	2b01      	cmp	r3, #1
 800a338:	d10c      	bne.n	800a354 <slalomR+0x284>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a33a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a33e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a342:	eeb0 1a47 	vmov.f32	s2, s14
 800a346:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a43c <slalomR+0x36c>
 800a34a:	eeb0 0a67 	vmov.f32	s0, s15
 800a34e:	f7f9 fd6b 	bl	8003e28 <mollifier_slalom_table>
 800a352:	e015      	b.n	800a380 <slalomR+0x2b0>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a354:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a358:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a35c:	eef1 7a67 	vneg.f32	s15, s15
 800a360:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a364:	eef0 2a66 	vmov.f32	s5, s13
 800a368:	eeb0 2a67 	vmov.f32	s4, s15
 800a36c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a430 <slalomR+0x360>
 800a370:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a430 <slalomR+0x360>
 800a374:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a43c <slalomR+0x36c>
 800a378:	eeb0 0a47 	vmov.f32	s0, s14
 800a37c:	f7f9 fc04 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a380:	2300      	movs	r3, #0
 800a382:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a388:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a38c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a390:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a394:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a39c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a3a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a3a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3a8:	eef0 7ae7 	vabs.f32	s15, s15
 800a3ac:	ee17 0a90 	vmov	r0, s15
 800a3b0:	f7f6 f8f2 	bl	8000598 <__aeabi_f2d>
 800a3b4:	f04f 0200 	mov.w	r2, #0
 800a3b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3bc:	f7f6 fa6e 	bl	800089c <__aeabi_ddiv>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	461d      	mov	r5, r3
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f6 f8e4 	bl	8000598 <__aeabi_f2d>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f6 fa60 	bl	800089c <__aeabi_ddiv>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	f04f 0200 	mov.w	r2, #0
 800a3e8:	4b15      	ldr	r3, [pc, #84]	; (800a440 <slalomR+0x370>)
 800a3ea:	f7f5 ff77 	bl	80002dc <__adddf3>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f7f6 fbff 	bl	8000bf8 <__aeabi_d2f>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	ee02 3a10 	vmov	s4, r3
 800a402:	edd7 1a01 	vldr	s3, [r7, #4]
 800a406:	ed97 1a01 	vldr	s2, [r7, #4]
 800a40a:	eef0 0a68 	vmov.f32	s1, s17
 800a40e:	eeb0 0a48 	vmov.f32	s0, s16
 800a412:	f7f8 fd93 	bl	8002f3c <straight_table2>
}
 800a416:	bf00      	nop
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	ecbd 8b02 	vpop	{d8}
 800a420:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a424:	b004      	add	sp, #16
 800a426:	4770      	bx	lr
 800a428:	20000808 	.word	0x20000808
 800a42c:	42340000 	.word	0x42340000
 800a430:	00000000 	.word	0x00000000
 800a434:	431b8000 	.word	0x431b8000
 800a438:	43138000 	.word	0x43138000
 800a43c:	c2b40000 	.word	0xc2b40000
 800a440:	408f4000 	.word	0x408f4000

0800a444 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a444:	b084      	sub	sp, #16
 800a446:	b5b0      	push	{r4, r5, r7, lr}
 800a448:	ed2d 8b02 	vpush	{d8}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a458:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a45c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a460:	2b01      	cmp	r3, #1
 800a462:	f040 80f3 	bne.w	800a64c <slalomL+0x208>
		highspeed_mode = 0;
 800a466:	4bcb      	ldr	r3, [pc, #812]	; (800a794 <slalomL+0x350>)
 800a468:	2200      	movs	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a46c:	2301      	movs	r3, #1
 800a46e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a470:	2300      	movs	r3, #0
 800a472:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a474:	2300      	movs	r3, #0
 800a476:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a478:	2300      	movs	r3, #0
 800a47a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a47c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	d11f      	bne.n	800a4c4 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a484:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a488:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a48c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a490:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a494:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a498:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a49c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a4a0:	eddf 5abd 	vldr	s11, [pc, #756]	; 800a798 <slalomL+0x354>
 800a4a4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	eeb0 2a47 	vmov.f32	s4, s14
 800a4ae:	eef0 1a46 	vmov.f32	s3, s12
 800a4b2:	eeb0 1a66 	vmov.f32	s2, s13
 800a4b6:	eddf 0ab9 	vldr	s1, [pc, #740]	; 800a79c <slalomL+0x358>
 800a4ba:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a7a0 <slalomL+0x35c>
 800a4be:	f7f8 fd3d 	bl	8002f3c <straight_table2>
 800a4c2:	e01e      	b.n	800a502 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a4c4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a4c8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4d8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a4dc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a4e0:	eddf 5aad 	vldr	s11, [pc, #692]	; 800a798 <slalomL+0x354>
 800a4e4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	eeb0 2a47 	vmov.f32	s4, s14
 800a4ee:	eef0 1a46 	vmov.f32	s3, s12
 800a4f2:	eeb0 1a66 	vmov.f32	s2, s13
 800a4f6:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800a79c <slalomL+0x358>
 800a4fa:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800a7a4 <slalomL+0x360>
 800a4fe:	f7f8 fd1d 	bl	8002f3c <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a502:	2300      	movs	r3, #0
 800a504:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a506:	2301      	movs	r3, #1
 800a508:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a50a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d127      	bne.n	800a562 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a512:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a516:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a51a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a51e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a522:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a526:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a52a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a52e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a532:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a536:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a53a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a53e:	eddf 4a96 	vldr	s9, [pc, #600]	; 800a798 <slalomL+0x354>
 800a542:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	eeb0 2a47 	vmov.f32	s4, s14
 800a54c:	eef0 1a45 	vmov.f32	s3, s10
 800a550:	eeb0 1a65 	vmov.f32	s2, s11
 800a554:	eef0 0a46 	vmov.f32	s1, s12
 800a558:	eeb0 0a66 	vmov.f32	s0, s13
 800a55c:	f7f8 fcee 	bl	8002f3c <straight_table2>
 800a560:	e022      	b.n	800a5a8 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a562:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a566:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a56a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a56e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a572:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a576:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a57a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a57e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a582:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a586:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a798 <slalomL+0x354>
 800a58a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	eeb0 2a47 	vmov.f32	s4, s14
 800a594:	eef0 1a45 	vmov.f32	s3, s10
 800a598:	eeb0 1a65 	vmov.f32	s2, s11
 800a59c:	eef0 0a46 	vmov.f32	s1, s12
 800a5a0:	eeb0 0a66 	vmov.f32	s0, s13
 800a5a4:	f7f8 fcca 	bl	8002f3c <straight_table2>
		}
		if(mollifier_mode == ON){
 800a5a8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d10c      	bne.n	800a5ca <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a5b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a5b8:	eeb0 1a47 	vmov.f32	s2, s14
 800a5bc:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800a7a8 <slalomL+0x364>
 800a5c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a5c4:	f7f9 fc30 	bl	8003e28 <mollifier_slalom_table>
 800a5c8:	e013      	b.n	800a5f2 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a5ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a5d2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a5d6:	eef0 2a66 	vmov.f32	s5, s13
 800a5da:	eeb0 2a47 	vmov.f32	s4, s14
 800a5de:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a79c <slalomL+0x358>
 800a5e2:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a79c <slalomL+0x358>
 800a5e6:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a7a8 <slalomL+0x364>
 800a5ea:	eeb0 0a67 	vmov.f32	s0, s15
 800a5ee:	f7f9 facb 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a5fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a5fe:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a798 <slalomL+0x354>
 800a602:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a606:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a60a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a60e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a612:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a61a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a61e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a622:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a798 <slalomL+0x354>
 800a626:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	eeb0 2a47 	vmov.f32	s4, s14
 800a630:	eef0 1a65 	vmov.f32	s3, s11
 800a634:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a79c <slalomL+0x358>
 800a638:	eef0 0a46 	vmov.f32	s1, s12
 800a63c:	eeb0 0a66 	vmov.f32	s0, s13
 800a640:	f7f8 fc7c 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800a644:	4b53      	ldr	r3, [pc, #332]	; (800a794 <slalomL+0x350>)
 800a646:	2200      	movs	r2, #0
 800a648:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a64a:	e09a      	b.n	800a782 <slalomL+0x33e>
		wallmode.WallControlMode=0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a650:	2300      	movs	r3, #0
 800a652:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a654:	2301      	movs	r3, #1
 800a656:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a658:	2300      	movs	r3, #0
 800a65a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a65c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a660:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a664:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a668:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a66c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a670:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a674:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a678:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a67c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a680:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a798 <slalomL+0x354>
 800a684:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	eeb0 2a47 	vmov.f32	s4, s14
 800a68e:	eef0 1a45 	vmov.f32	s3, s10
 800a692:	eeb0 1a65 	vmov.f32	s2, s11
 800a696:	eef0 0a46 	vmov.f32	s1, s12
 800a69a:	eeb0 0a66 	vmov.f32	s0, s13
 800a69e:	f7f8 fc4d 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800a6a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d10c      	bne.n	800a6c4 <slalomL+0x280>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a6aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a6b2:	eeb0 1a47 	vmov.f32	s2, s14
 800a6b6:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a7a8 <slalomL+0x364>
 800a6ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a6be:	f7f9 fbb3 	bl	8003e28 <mollifier_slalom_table>
 800a6c2:	e013      	b.n	800a6ec <slalomL+0x2a8>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a6c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a6cc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a6d0:	eef0 2a66 	vmov.f32	s5, s13
 800a6d4:	eeb0 2a47 	vmov.f32	s4, s14
 800a6d8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a79c <slalomL+0x358>
 800a6dc:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a79c <slalomL+0x358>
 800a6e0:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a7a8 <slalomL+0x364>
 800a6e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a6e8:	f7f9 fa4e 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a6f4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a6f8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a6fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a700:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a704:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a708:	edd7 7a01 	vldr	s15, [r7, #4]
 800a70c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a710:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a714:	eef0 7ae7 	vabs.f32	s15, s15
 800a718:	ee17 0a90 	vmov	r0, s15
 800a71c:	f7f5 ff3c 	bl	8000598 <__aeabi_f2d>
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a728:	f7f6 f8b8 	bl	800089c <__aeabi_ddiv>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4614      	mov	r4, r2
 800a732:	461d      	mov	r5, r3
 800a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a736:	4618      	mov	r0, r3
 800a738:	f7f5 ff2e 	bl	8000598 <__aeabi_f2d>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4620      	mov	r0, r4
 800a742:	4629      	mov	r1, r5
 800a744:	f7f6 f8aa 	bl	800089c <__aeabi_ddiv>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4610      	mov	r0, r2
 800a74e:	4619      	mov	r1, r3
 800a750:	f04f 0200 	mov.w	r2, #0
 800a754:	4b15      	ldr	r3, [pc, #84]	; (800a7ac <slalomL+0x368>)
 800a756:	f7f5 fdc1 	bl	80002dc <__adddf3>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a75e:	4610      	mov	r0, r2
 800a760:	4619      	mov	r1, r3
 800a762:	f7f6 fa49 	bl	8000bf8 <__aeabi_d2f>
 800a766:	4603      	mov	r3, r0
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	ee02 3a10 	vmov	s4, r3
 800a76e:	edd7 1a01 	vldr	s3, [r7, #4]
 800a772:	ed97 1a01 	vldr	s2, [r7, #4]
 800a776:	eef0 0a68 	vmov.f32	s1, s17
 800a77a:	eeb0 0a48 	vmov.f32	s0, s16
 800a77e:	f7f8 fbdd 	bl	8002f3c <straight_table2>
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	ecbd 8b02 	vpop	{d8}
 800a78c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a790:	b004      	add	sp, #16
 800a792:	4770      	bx	lr
 800a794:	20000808 	.word	0x20000808
 800a798:	42340000 	.word	0x42340000
 800a79c:	00000000 	.word	0x00000000
 800a7a0:	431b8000 	.word	0x431b8000
 800a7a4:	43138000 	.word	0x43138000
 800a7a8:	42b40000 	.word	0x42b40000
 800a7ac:	408f4000 	.word	0x408f4000

0800a7b0 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	b5b0      	push	{r4, r5, r7, lr}
 800a7b4:	ed2d 8b02 	vpush	{d8}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a7c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a7c4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a7c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	f040 80a5 	bne.w	800a91c <turn90R+0x16c>
		highspeed_mode = 1;
 800a7d2:	4ba5      	ldr	r3, [pc, #660]	; (800aa68 <turn90R+0x2b8>)
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a7e8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a7ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a7f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7fc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a800:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a804:	eddf 5a99 	vldr	s11, [pc, #612]	; 800aa6c <turn90R+0x2bc>
 800a808:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	eeb0 2a47 	vmov.f32	s4, s14
 800a812:	eef0 1a46 	vmov.f32	s3, s12
 800a816:	eeb0 1a66 	vmov.f32	s2, s13
 800a81a:	eddf 0a95 	vldr	s1, [pc, #596]	; 800aa70 <turn90R+0x2c0>
 800a81e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800aa74 <turn90R+0x2c4>
 800a822:	f7f8 fb8b 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800a826:	2300      	movs	r3, #0
 800a828:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a82a:	2302      	movs	r3, #2
 800a82c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a82e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a832:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a836:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a83a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a83e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a842:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a84a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a84e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a852:	eddf 4a86 	vldr	s9, [pc, #536]	; 800aa6c <turn90R+0x2bc>
 800a856:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	eeb0 2a47 	vmov.f32	s4, s14
 800a860:	eef0 1a45 	vmov.f32	s3, s10
 800a864:	eeb0 1a65 	vmov.f32	s2, s11
 800a868:	eef0 0a46 	vmov.f32	s1, s12
 800a86c:	eeb0 0a66 	vmov.f32	s0, s13
 800a870:	f7f8 fb64 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800a874:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d10c      	bne.n	800a896 <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a87c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a880:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a884:	eeb0 1a47 	vmov.f32	s2, s14
 800a888:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800aa78 <turn90R+0x2c8>
 800a88c:	eeb0 0a67 	vmov.f32	s0, s15
 800a890:	f7f9 faca 	bl	8003e28 <mollifier_slalom_table>
 800a894:	e015      	b.n	800a8c2 <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a896:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a89a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a89e:	eef1 7a67 	vneg.f32	s15, s15
 800a8a2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a8a6:	eef0 2a66 	vmov.f32	s5, s13
 800a8aa:	eeb0 2a67 	vmov.f32	s4, s15
 800a8ae:	eddf 1a70 	vldr	s3, [pc, #448]	; 800aa70 <turn90R+0x2c0>
 800a8b2:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800aa70 <turn90R+0x2c0>
 800a8b6:	eddf 0a70 	vldr	s1, [pc, #448]	; 800aa78 <turn90R+0x2c8>
 800a8ba:	eeb0 0a47 	vmov.f32	s0, s14
 800a8be:	f7f9 f963 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a8ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a8ce:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800aa7c <turn90R+0x2cc>
 800a8d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a8d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a8da:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a8de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8ea:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a8ee:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a8f2:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800aa6c <turn90R+0x2bc>
 800a8f6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	eeb0 2a47 	vmov.f32	s4, s14
 800a900:	eef0 1a65 	vmov.f32	s3, s11
 800a904:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800aa70 <turn90R+0x2c0>
 800a908:	eef0 0a46 	vmov.f32	s1, s12
 800a90c:	eeb0 0a66 	vmov.f32	s0, s13
 800a910:	f7f8 fb14 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800a914:	4b54      	ldr	r3, [pc, #336]	; (800aa68 <turn90R+0x2b8>)
 800a916:	2200      	movs	r2, #0
 800a918:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a91a:	e09c      	b.n	800aa56 <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a91c:	2300      	movs	r3, #0
 800a91e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a920:	2300      	movs	r3, #0
 800a922:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a924:	2302      	movs	r3, #2
 800a926:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a928:	2300      	movs	r3, #0
 800a92a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a92c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a930:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a934:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a938:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a93c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a940:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a944:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a948:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a94c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a950:	eddf 4a46 	vldr	s9, [pc, #280]	; 800aa6c <turn90R+0x2bc>
 800a954:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	eeb0 2a47 	vmov.f32	s4, s14
 800a95e:	eef0 1a45 	vmov.f32	s3, s10
 800a962:	eeb0 1a65 	vmov.f32	s2, s11
 800a966:	eef0 0a46 	vmov.f32	s1, s12
 800a96a:	eeb0 0a66 	vmov.f32	s0, s13
 800a96e:	f7f8 fae5 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800a972:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a976:	2b01      	cmp	r3, #1
 800a978:	d10c      	bne.n	800a994 <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a97a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a97e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a982:	eeb0 1a47 	vmov.f32	s2, s14
 800a986:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800aa78 <turn90R+0x2c8>
 800a98a:	eeb0 0a67 	vmov.f32	s0, s15
 800a98e:	f7f9 fa4b 	bl	8003e28 <mollifier_slalom_table>
 800a992:	e015      	b.n	800a9c0 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a994:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a998:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a99c:	eef1 7a67 	vneg.f32	s15, s15
 800a9a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a9a4:	eef0 2a66 	vmov.f32	s5, s13
 800a9a8:	eeb0 2a67 	vmov.f32	s4, s15
 800a9ac:	eddf 1a30 	vldr	s3, [pc, #192]	; 800aa70 <turn90R+0x2c0>
 800a9b0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800aa70 <turn90R+0x2c0>
 800a9b4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800aa78 <turn90R+0x2c8>
 800a9b8:	eeb0 0a47 	vmov.f32	s0, s14
 800a9bc:	f7f9 f8e4 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a9c8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a9cc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a9d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a9d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a9e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9e8:	eef0 7ae7 	vabs.f32	s15, s15
 800a9ec:	ee17 0a90 	vmov	r0, s15
 800a9f0:	f7f5 fdd2 	bl	8000598 <__aeabi_f2d>
 800a9f4:	f04f 0200 	mov.w	r2, #0
 800a9f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9fc:	f7f5 ff4e 	bl	800089c <__aeabi_ddiv>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4614      	mov	r4, r2
 800aa06:	461d      	mov	r5, r3
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7f5 fdc4 	bl	8000598 <__aeabi_f2d>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4620      	mov	r0, r4
 800aa16:	4629      	mov	r1, r5
 800aa18:	f7f5 ff40 	bl	800089c <__aeabi_ddiv>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4610      	mov	r0, r2
 800aa22:	4619      	mov	r1, r3
 800aa24:	f04f 0200 	mov.w	r2, #0
 800aa28:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <turn90R+0x2d0>)
 800aa2a:	f7f5 fc57 	bl	80002dc <__adddf3>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aa32:	4610      	mov	r0, r2
 800aa34:	4619      	mov	r1, r3
 800aa36:	f7f6 f8df 	bl	8000bf8 <__aeabi_d2f>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	ee02 3a10 	vmov	s4, r3
 800aa42:	edd7 1a01 	vldr	s3, [r7, #4]
 800aa46:	ed97 1a01 	vldr	s2, [r7, #4]
 800aa4a:	eef0 0a68 	vmov.f32	s1, s17
 800aa4e:	eeb0 0a48 	vmov.f32	s0, s16
 800aa52:	f7f8 fa73 	bl	8002f3c <straight_table2>
}
 800aa56:	bf00      	nop
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	ecbd 8b02 	vpop	{d8}
 800aa60:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800aa64:	b004      	add	sp, #16
 800aa66:	4770      	bx	lr
 800aa68:	20000808 	.word	0x20000808
 800aa6c:	42340000 	.word	0x42340000
 800aa70:	00000000 	.word	0x00000000
 800aa74:	42cd0000 	.word	0x42cd0000
 800aa78:	c2b40000 	.word	0xc2b40000
 800aa7c:	42b40000 	.word	0x42b40000
 800aa80:	408f4000 	.word	0x408f4000

0800aa84 <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800aa84:	b084      	sub	sp, #16
 800aa86:	b5b0      	push	{r4, r5, r7, lr}
 800aa88:	ed2d 8b02 	vpush	{d8}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aa94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aa98:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800aa9c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	f040 80a3 	bne.w	800abec <turn90L+0x168>
		highspeed_mode = 1;
 800aaa6:	4ba3      	ldr	r3, [pc, #652]	; (800ad34 <turn90L+0x2b0>)
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aaac:	2301      	movs	r3, #1
 800aaae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aabc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aac0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aac4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aac8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aacc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aad0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aad4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aad8:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ad38 <turn90L+0x2b4>
 800aadc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	eeb0 2a47 	vmov.f32	s4, s14
 800aae6:	eef0 1a46 	vmov.f32	s3, s12
 800aaea:	eeb0 1a66 	vmov.f32	s2, s13
 800aaee:	eddf 0a93 	vldr	s1, [pc, #588]	; 800ad3c <turn90L+0x2b8>
 800aaf2:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800ad40 <turn90L+0x2bc>
 800aaf6:	f7f8 fa21 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aafe:	2302      	movs	r3, #2
 800ab00:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab02:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab06:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab0a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab0e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab1e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab22:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab26:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ad38 <turn90L+0x2b4>
 800ab2a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	eeb0 2a47 	vmov.f32	s4, s14
 800ab34:	eef0 1a45 	vmov.f32	s3, s10
 800ab38:	eeb0 1a65 	vmov.f32	s2, s11
 800ab3c:	eef0 0a46 	vmov.f32	s1, s12
 800ab40:	eeb0 0a66 	vmov.f32	s0, s13
 800ab44:	f7f8 f9fa 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800ab48:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d10c      	bne.n	800ab6a <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800ab50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab58:	eeb0 1a47 	vmov.f32	s2, s14
 800ab5c:	eddf 0a79 	vldr	s1, [pc, #484]	; 800ad44 <turn90L+0x2c0>
 800ab60:	eeb0 0a67 	vmov.f32	s0, s15
 800ab64:	f7f9 f960 	bl	8003e28 <mollifier_slalom_table>
 800ab68:	e013      	b.n	800ab92 <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ab6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab6e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab72:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ab76:	eef0 2a66 	vmov.f32	s5, s13
 800ab7a:	eeb0 2a47 	vmov.f32	s4, s14
 800ab7e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ad3c <turn90L+0x2b8>
 800ab82:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ad3c <turn90L+0x2b8>
 800ab86:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ad44 <turn90L+0x2c0>
 800ab8a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab8e:	f7f8 fffb 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ab9e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ad44 <turn90L+0x2c0>
 800aba2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aba6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800abaa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800abae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abb2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abba:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800abbe:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800abc2:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ad38 <turn90L+0x2b4>
 800abc6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	eeb0 2a47 	vmov.f32	s4, s14
 800abd0:	eef0 1a65 	vmov.f32	s3, s11
 800abd4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ad3c <turn90L+0x2b8>
 800abd8:	eef0 0a46 	vmov.f32	s1, s12
 800abdc:	eeb0 0a66 	vmov.f32	s0, s13
 800abe0:	f7f8 f9ac 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800abe4:	4b53      	ldr	r3, [pc, #332]	; (800ad34 <turn90L+0x2b0>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800abea:	e09a      	b.n	800ad22 <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800abec:	2300      	movs	r3, #0
 800abee:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800abf4:	2302      	movs	r3, #2
 800abf6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800abfc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ac00:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ac04:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ac08:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac0c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac18:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ac1c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac20:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ad38 <turn90L+0x2b4>
 800ac24:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	eeb0 2a47 	vmov.f32	s4, s14
 800ac2e:	eef0 1a45 	vmov.f32	s3, s10
 800ac32:	eeb0 1a65 	vmov.f32	s2, s11
 800ac36:	eef0 0a46 	vmov.f32	s1, s12
 800ac3a:	eeb0 0a66 	vmov.f32	s0, s13
 800ac3e:	f7f8 f97d 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800ac42:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d10c      	bne.n	800ac64 <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800ac4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac4e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ac52:	eeb0 1a47 	vmov.f32	s2, s14
 800ac56:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800ad44 <turn90L+0x2c0>
 800ac5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ac5e:	f7f9 f8e3 	bl	8003e28 <mollifier_slalom_table>
 800ac62:	e013      	b.n	800ac8c <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ac64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac68:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ac6c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ac70:	eef0 2a66 	vmov.f32	s5, s13
 800ac74:	eeb0 2a47 	vmov.f32	s4, s14
 800ac78:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ad3c <turn90L+0x2b8>
 800ac7c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ad3c <turn90L+0x2b8>
 800ac80:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ad44 <turn90L+0x2c0>
 800ac84:	eeb0 0a67 	vmov.f32	s0, s15
 800ac88:	f7f8 ff7e 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac94:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ac98:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ac9c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aca0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aca8:	edd7 7a01 	vldr	s15, [r7, #4]
 800acac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800acb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acb4:	eef0 7ae7 	vabs.f32	s15, s15
 800acb8:	ee17 0a90 	vmov	r0, s15
 800acbc:	f7f5 fc6c 	bl	8000598 <__aeabi_f2d>
 800acc0:	f04f 0200 	mov.w	r2, #0
 800acc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acc8:	f7f5 fde8 	bl	800089c <__aeabi_ddiv>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4614      	mov	r4, r2
 800acd2:	461d      	mov	r5, r3
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7f5 fc5e 	bl	8000598 <__aeabi_f2d>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	4620      	mov	r0, r4
 800ace2:	4629      	mov	r1, r5
 800ace4:	f7f5 fdda 	bl	800089c <__aeabi_ddiv>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	4610      	mov	r0, r2
 800acee:	4619      	mov	r1, r3
 800acf0:	f04f 0200 	mov.w	r2, #0
 800acf4:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <turn90L+0x2c4>)
 800acf6:	f7f5 faf1 	bl	80002dc <__adddf3>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800acfe:	4610      	mov	r0, r2
 800ad00:	4619      	mov	r1, r3
 800ad02:	f7f5 ff79 	bl	8000bf8 <__aeabi_d2f>
 800ad06:	4603      	mov	r3, r0
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	ee02 3a10 	vmov	s4, r3
 800ad0e:	edd7 1a01 	vldr	s3, [r7, #4]
 800ad12:	ed97 1a01 	vldr	s2, [r7, #4]
 800ad16:	eef0 0a68 	vmov.f32	s1, s17
 800ad1a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad1e:	f7f8 f90d 	bl	8002f3c <straight_table2>
}
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	ecbd 8b02 	vpop	{d8}
 800ad2c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ad30:	b004      	add	sp, #16
 800ad32:	4770      	bx	lr
 800ad34:	20000808 	.word	0x20000808
 800ad38:	42340000 	.word	0x42340000
 800ad3c:	00000000 	.word	0x00000000
 800ad40:	42cd0000 	.word	0x42cd0000
 800ad44:	42b40000 	.word	0x42b40000
 800ad48:	408f4000 	.word	0x408f4000

0800ad4c <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	b5b0      	push	{r4, r5, r7, lr}
 800ad50:	ed2d 8b02 	vpush	{d8}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ad5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad60:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ad64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	f040 80a5 	bne.w	800aeb8 <turn180R+0x16c>
		highspeed_mode = 1;
 800ad6e:	4ba5      	ldr	r3, [pc, #660]	; (800b004 <turn180R+0x2b8>)
 800ad70:	2201      	movs	r2, #1
 800ad72:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ad74:	2301      	movs	r3, #1
 800ad76:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ad84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ad88:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad98:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ad9c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ada0:	eddf 5a99 	vldr	s11, [pc, #612]	; 800b008 <turn180R+0x2bc>
 800ada4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	eeb0 2a47 	vmov.f32	s4, s14
 800adae:	eef0 1a46 	vmov.f32	s3, s12
 800adb2:	eeb0 1a66 	vmov.f32	s2, s13
 800adb6:	eddf 0a95 	vldr	s1, [pc, #596]	; 800b00c <turn180R+0x2c0>
 800adba:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800b010 <turn180R+0x2c4>
 800adbe:	f7f8 f8bd 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800adc6:	2302      	movs	r3, #2
 800adc8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800adca:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800adce:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800add2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800add6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ade2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ade6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800adea:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800adee:	eddf 4a86 	vldr	s9, [pc, #536]	; 800b008 <turn180R+0x2bc>
 800adf2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	eeb0 2a47 	vmov.f32	s4, s14
 800adfc:	eef0 1a45 	vmov.f32	s3, s10
 800ae00:	eeb0 1a65 	vmov.f32	s2, s11
 800ae04:	eef0 0a46 	vmov.f32	s1, s12
 800ae08:	eeb0 0a66 	vmov.f32	s0, s13
 800ae0c:	f7f8 f896 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800ae10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d10c      	bne.n	800ae32 <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ae18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae1c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae20:	eeb0 1a47 	vmov.f32	s2, s14
 800ae24:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800b014 <turn180R+0x2c8>
 800ae28:	eeb0 0a67 	vmov.f32	s0, s15
 800ae2c:	f7f8 fffc 	bl	8003e28 <mollifier_slalom_table>
 800ae30:	e015      	b.n	800ae5e <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ae32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ae3a:	eef1 7a67 	vneg.f32	s15, s15
 800ae3e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae42:	eef0 2a66 	vmov.f32	s5, s13
 800ae46:	eeb0 2a67 	vmov.f32	s4, s15
 800ae4a:	eddf 1a70 	vldr	s3, [pc, #448]	; 800b00c <turn180R+0x2c0>
 800ae4e:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b00c <turn180R+0x2c0>
 800ae52:	eddf 0a70 	vldr	s1, [pc, #448]	; 800b014 <turn180R+0x2c8>
 800ae56:	eeb0 0a47 	vmov.f32	s0, s14
 800ae5a:	f7f8 fe95 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ae66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ae6a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800b018 <turn180R+0x2cc>
 800ae6e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ae72:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae76:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae86:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ae8a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ae8e:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800b008 <turn180R+0x2bc>
 800ae92:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	eeb0 2a47 	vmov.f32	s4, s14
 800ae9c:	eef0 1a65 	vmov.f32	s3, s11
 800aea0:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800b00c <turn180R+0x2c0>
 800aea4:	eef0 0a46 	vmov.f32	s1, s12
 800aea8:	eeb0 0a66 	vmov.f32	s0, s13
 800aeac:	f7f8 f846 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800aeb0:	4b54      	ldr	r3, [pc, #336]	; (800b004 <turn180R+0x2b8>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800aeb6:	e09c      	b.n	800aff2 <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800aec0:	2302      	movs	r3, #2
 800aec2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aec8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aecc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aed0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aed4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aed8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aedc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aee4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aee8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aeec:	eddf 4a46 	vldr	s9, [pc, #280]	; 800b008 <turn180R+0x2bc>
 800aef0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	eeb0 2a47 	vmov.f32	s4, s14
 800aefa:	eef0 1a45 	vmov.f32	s3, s10
 800aefe:	eeb0 1a65 	vmov.f32	s2, s11
 800af02:	eef0 0a46 	vmov.f32	s1, s12
 800af06:	eeb0 0a66 	vmov.f32	s0, s13
 800af0a:	f7f8 f817 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800af0e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800af12:	2b01      	cmp	r3, #1
 800af14:	d10c      	bne.n	800af30 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800af16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af1a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af1e:	eeb0 1a47 	vmov.f32	s2, s14
 800af22:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b014 <turn180R+0x2c8>
 800af26:	eeb0 0a67 	vmov.f32	s0, s15
 800af2a:	f7f8 ff7d 	bl	8003e28 <mollifier_slalom_table>
 800af2e:	e015      	b.n	800af5c <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800af30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800af38:	eef1 7a67 	vneg.f32	s15, s15
 800af3c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800af40:	eef0 2a66 	vmov.f32	s5, s13
 800af44:	eeb0 2a67 	vmov.f32	s4, s15
 800af48:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b00c <turn180R+0x2c0>
 800af4c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b00c <turn180R+0x2c0>
 800af50:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b014 <turn180R+0x2c8>
 800af54:	eeb0 0a47 	vmov.f32	s0, s14
 800af58:	f7f8 fe16 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800af5c:	2301      	movs	r3, #1
 800af5e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af64:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800af68:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800af6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af78:	edd7 7a01 	vldr	s15, [r7, #4]
 800af7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800af80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af84:	eef0 7ae7 	vabs.f32	s15, s15
 800af88:	ee17 0a90 	vmov	r0, s15
 800af8c:	f7f5 fb04 	bl	8000598 <__aeabi_f2d>
 800af90:	f04f 0200 	mov.w	r2, #0
 800af94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af98:	f7f5 fc80 	bl	800089c <__aeabi_ddiv>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4614      	mov	r4, r2
 800afa2:	461d      	mov	r5, r3
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7f5 faf6 	bl	8000598 <__aeabi_f2d>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4620      	mov	r0, r4
 800afb2:	4629      	mov	r1, r5
 800afb4:	f7f5 fc72 	bl	800089c <__aeabi_ddiv>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4610      	mov	r0, r2
 800afbe:	4619      	mov	r1, r3
 800afc0:	f04f 0200 	mov.w	r2, #0
 800afc4:	4b15      	ldr	r3, [pc, #84]	; (800b01c <turn180R+0x2d0>)
 800afc6:	f7f5 f989 	bl	80002dc <__adddf3>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800afce:	4610      	mov	r0, r2
 800afd0:	4619      	mov	r1, r3
 800afd2:	f7f5 fe11 	bl	8000bf8 <__aeabi_d2f>
 800afd6:	4603      	mov	r3, r0
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	ee02 3a10 	vmov	s4, r3
 800afde:	edd7 1a01 	vldr	s3, [r7, #4]
 800afe2:	ed97 1a01 	vldr	s2, [r7, #4]
 800afe6:	eef0 0a68 	vmov.f32	s1, s17
 800afea:	eeb0 0a48 	vmov.f32	s0, s16
 800afee:	f7f7 ffa5 	bl	8002f3c <straight_table2>
}
 800aff2:	bf00      	nop
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	ecbd 8b02 	vpop	{d8}
 800affc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b000:	b004      	add	sp, #16
 800b002:	4770      	bx	lr
 800b004:	20000808 	.word	0x20000808
 800b008:	42340000 	.word	0x42340000
 800b00c:	00000000 	.word	0x00000000
 800b010:	42cd0000 	.word	0x42cd0000
 800b014:	c3340000 	.word	0xc3340000
 800b018:	42b40000 	.word	0x42b40000
 800b01c:	408f4000 	.word	0x408f4000

0800b020 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b020:	b084      	sub	sp, #16
 800b022:	b5b0      	push	{r4, r5, r7, lr}
 800b024:	ed2d 8b02 	vpush	{d8}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b034:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b038:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	f040 80a3 	bne.w	800b188 <turn180L+0x168>
		highspeed_mode = 1;
 800b042:	4ba3      	ldr	r3, [pc, #652]	; (800b2d0 <turn180L+0x2b0>)
 800b044:	2201      	movs	r2, #1
 800b046:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b048:	2301      	movs	r3, #1
 800b04a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b054:	2300      	movs	r3, #0
 800b056:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b058:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b05c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b060:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b064:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b06c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b070:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b074:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b2d4 <turn180L+0x2b4>
 800b078:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	eeb0 2a47 	vmov.f32	s4, s14
 800b082:	eef0 1a46 	vmov.f32	s3, s12
 800b086:	eeb0 1a66 	vmov.f32	s2, s13
 800b08a:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b2d8 <turn180L+0x2b8>
 800b08e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b2dc <turn180L+0x2bc>
 800b092:	f7f7 ff53 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800b096:	2300      	movs	r3, #0
 800b098:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b09a:	2302      	movs	r3, #2
 800b09c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b09e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b0a2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0a6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b0aa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0ba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b0be:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0c2:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b2d4 <turn180L+0x2b4>
 800b0c6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	eeb0 2a47 	vmov.f32	s4, s14
 800b0d0:	eef0 1a45 	vmov.f32	s3, s10
 800b0d4:	eeb0 1a65 	vmov.f32	s2, s11
 800b0d8:	eef0 0a46 	vmov.f32	s1, s12
 800b0dc:	eeb0 0a66 	vmov.f32	s0, s13
 800b0e0:	f7f7 ff2c 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800b0e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d10c      	bne.n	800b106 <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b0ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0f4:	eeb0 1a47 	vmov.f32	s2, s14
 800b0f8:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b2e0 <turn180L+0x2c0>
 800b0fc:	eeb0 0a67 	vmov.f32	s0, s15
 800b100:	f7f8 fe92 	bl	8003e28 <mollifier_slalom_table>
 800b104:	e013      	b.n	800b12e <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b106:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b10a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b10e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b112:	eef0 2a66 	vmov.f32	s5, s13
 800b116:	eeb0 2a47 	vmov.f32	s4, s14
 800b11a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b2d8 <turn180L+0x2b8>
 800b11e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b2d8 <turn180L+0x2b8>
 800b122:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b2e0 <turn180L+0x2c0>
 800b126:	eeb0 0a67 	vmov.f32	s0, s15
 800b12a:	f7f8 fd2d 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b12e:	2300      	movs	r3, #0
 800b130:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b136:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b13a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b2e4 <turn180L+0x2c4>
 800b13e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b142:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b146:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b14a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b14e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b152:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b156:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b15a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b15e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b2d4 <turn180L+0x2b4>
 800b162:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	eeb0 2a47 	vmov.f32	s4, s14
 800b16c:	eef0 1a65 	vmov.f32	s3, s11
 800b170:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b2d8 <turn180L+0x2b8>
 800b174:	eef0 0a46 	vmov.f32	s1, s12
 800b178:	eeb0 0a66 	vmov.f32	s0, s13
 800b17c:	f7f7 fede 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800b180:	4b53      	ldr	r3, [pc, #332]	; (800b2d0 <turn180L+0x2b0>)
 800b182:	2200      	movs	r2, #0
 800b184:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b186:	e09a      	b.n	800b2be <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b188:	2300      	movs	r3, #0
 800b18a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b190:	2302      	movs	r3, #2
 800b192:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b194:	2300      	movs	r3, #0
 800b196:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b198:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b19c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b1a0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b1a4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b1a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1b4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b1b8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b1bc:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b2d4 <turn180L+0x2b4>
 800b1c0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	eeb0 2a47 	vmov.f32	s4, s14
 800b1ca:	eef0 1a45 	vmov.f32	s3, s10
 800b1ce:	eeb0 1a65 	vmov.f32	s2, s11
 800b1d2:	eef0 0a46 	vmov.f32	s1, s12
 800b1d6:	eeb0 0a66 	vmov.f32	s0, s13
 800b1da:	f7f7 feaf 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800b1de:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d10c      	bne.n	800b200 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b1e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b1ee:	eeb0 1a47 	vmov.f32	s2, s14
 800b1f2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b2e0 <turn180L+0x2c0>
 800b1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b1fa:	f7f8 fe15 	bl	8003e28 <mollifier_slalom_table>
 800b1fe:	e013      	b.n	800b228 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b200:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b204:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b208:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b20c:	eef0 2a66 	vmov.f32	s5, s13
 800b210:	eeb0 2a47 	vmov.f32	s4, s14
 800b214:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b2d8 <turn180L+0x2b8>
 800b218:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b2d8 <turn180L+0x2b8>
 800b21c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b2e0 <turn180L+0x2c0>
 800b220:	eeb0 0a67 	vmov.f32	s0, s15
 800b224:	f7f8 fcb0 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b228:	2301      	movs	r3, #1
 800b22a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b230:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b234:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b238:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b23c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b240:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b244:	edd7 7a01 	vldr	s15, [r7, #4]
 800b248:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b24c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b250:	eef0 7ae7 	vabs.f32	s15, s15
 800b254:	ee17 0a90 	vmov	r0, s15
 800b258:	f7f5 f99e 	bl	8000598 <__aeabi_f2d>
 800b25c:	f04f 0200 	mov.w	r2, #0
 800b260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b264:	f7f5 fb1a 	bl	800089c <__aeabi_ddiv>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4614      	mov	r4, r2
 800b26e:	461d      	mov	r5, r3
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	4618      	mov	r0, r3
 800b274:	f7f5 f990 	bl	8000598 <__aeabi_f2d>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4620      	mov	r0, r4
 800b27e:	4629      	mov	r1, r5
 800b280:	f7f5 fb0c 	bl	800089c <__aeabi_ddiv>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	4610      	mov	r0, r2
 800b28a:	4619      	mov	r1, r3
 800b28c:	f04f 0200 	mov.w	r2, #0
 800b290:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <turn180L+0x2c8>)
 800b292:	f7f5 f823 	bl	80002dc <__adddf3>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b29a:	4610      	mov	r0, r2
 800b29c:	4619      	mov	r1, r3
 800b29e:	f7f5 fcab 	bl	8000bf8 <__aeabi_d2f>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	ee02 3a10 	vmov	s4, r3
 800b2aa:	edd7 1a01 	vldr	s3, [r7, #4]
 800b2ae:	ed97 1a01 	vldr	s2, [r7, #4]
 800b2b2:	eef0 0a68 	vmov.f32	s1, s17
 800b2b6:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ba:	f7f7 fe3f 	bl	8002f3c <straight_table2>
}
 800b2be:	bf00      	nop
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	ecbd 8b02 	vpop	{d8}
 800b2c8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b2cc:	b004      	add	sp, #16
 800b2ce:	4770      	bx	lr
 800b2d0:	20000808 	.word	0x20000808
 800b2d4:	42340000 	.word	0x42340000
 800b2d8:	00000000 	.word	0x00000000
 800b2dc:	42cd0000 	.word	0x42cd0000
 800b2e0:	43340000 	.word	0x43340000
 800b2e4:	42b40000 	.word	0x42b40000
 800b2e8:	408f4000 	.word	0x408f4000
 800b2ec:	00000000 	.word	0x00000000

0800b2f0 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	b5b0      	push	{r4, r5, r7, lr}
 800b2f4:	ed2d 8b02 	vpush	{d8}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b304:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b308:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	f040 80ae 	bne.w	800b46e <turn45inR+0x17e>
		highspeed_mode = 1;
 800b312:	4bdd      	ldr	r3, [pc, #884]	; (800b688 <turn45inR+0x398>)
 800b314:	2201      	movs	r2, #1
 800b316:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b318:	2301      	movs	r3, #1
 800b31a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b324:	2300      	movs	r3, #0
 800b326:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b328:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b32c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b330:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b334:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b33c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b340:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b344:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b68c <turn45inR+0x39c>
 800b348:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	eeb0 2a47 	vmov.f32	s4, s14
 800b352:	eef0 1a46 	vmov.f32	s3, s12
 800b356:	eeb0 1a66 	vmov.f32	s2, s13
 800b35a:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b698 <turn45inR+0x3a8>
 800b35e:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b690 <turn45inR+0x3a0>
 800b362:	f7f7 fdeb 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800b366:	2300      	movs	r3, #0
 800b368:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b36a:	2302      	movs	r3, #2
 800b36c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b36e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b372:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b376:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b37a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b37e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b382:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b38a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b38e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b392:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b68c <turn45inR+0x39c>
 800b396:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	eeb0 2a47 	vmov.f32	s4, s14
 800b3a0:	eef0 1a45 	vmov.f32	s3, s10
 800b3a4:	eeb0 1a65 	vmov.f32	s2, s11
 800b3a8:	eef0 0a46 	vmov.f32	s1, s12
 800b3ac:	eeb0 0a66 	vmov.f32	s0, s13
 800b3b0:	f7f7 fdc4 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800b3b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d10c      	bne.n	800b3d6 <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b3bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b3c4:	eeb0 1a47 	vmov.f32	s2, s14
 800b3c8:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b69c <turn45inR+0x3ac>
 800b3cc:	eeb0 0a67 	vmov.f32	s0, s15
 800b3d0:	f7f8 fd2a 	bl	8003e28 <mollifier_slalom_table>
 800b3d4:	e015      	b.n	800b402 <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b3d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b3de:	eef1 7a67 	vneg.f32	s15, s15
 800b3e2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b3e6:	eef0 2a66 	vmov.f32	s5, s13
 800b3ea:	eeb0 2a67 	vmov.f32	s4, s15
 800b3ee:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b698 <turn45inR+0x3a8>
 800b3f2:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b698 <turn45inR+0x3a8>
 800b3f6:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b69c <turn45inR+0x3ac>
 800b3fa:	eeb0 0a47 	vmov.f32	s0, s14
 800b3fe:	f7f8 fbc3 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b402:	2300      	movs	r3, #0
 800b404:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7f5 f8c3 	bl	8000598 <__aeabi_f2d>
 800b412:	a39b      	add	r3, pc, #620	; (adr r3, 800b680 <turn45inR+0x390>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f7f4 ff60 	bl	80002dc <__adddf3>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	4610      	mov	r0, r2
 800b422:	4619      	mov	r1, r3
 800b424:	f7f5 fbe8 	bl	8000bf8 <__aeabi_d2f>
 800b428:	4603      	mov	r3, r0
 800b42a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b42e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b432:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b436:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b43a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b43e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b442:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b446:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b68c <turn45inR+0x39c>
 800b44a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	eeb0 2a47 	vmov.f32	s4, s14
 800b454:	eef0 1a46 	vmov.f32	s3, s12
 800b458:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b698 <turn45inR+0x3a8>
 800b45c:	eef0 0a66 	vmov.f32	s1, s13
 800b460:	ee00 3a10 	vmov	s0, r3
 800b464:	f7f7 fd6a 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800b468:	4b87      	ldr	r3, [pc, #540]	; (800b688 <turn45inR+0x398>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b46e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b472:	2b00      	cmp	r3, #0
 800b474:	f040 809d 	bne.w	800b5b2 <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b478:	2300      	movs	r3, #0
 800b47a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b480:	2302      	movs	r3, #2
 800b482:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b484:	2300      	movs	r3, #0
 800b486:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b488:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b48c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b490:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b494:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b498:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b49c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4a4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b4a8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4ac:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b68c <turn45inR+0x39c>
 800b4b0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	eeb0 2a47 	vmov.f32	s4, s14
 800b4ba:	eef0 1a45 	vmov.f32	s3, s10
 800b4be:	eeb0 1a65 	vmov.f32	s2, s11
 800b4c2:	eef0 0a46 	vmov.f32	s1, s12
 800b4c6:	eeb0 0a66 	vmov.f32	s0, s13
 800b4ca:	f7f7 fd37 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800b4ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d10c      	bne.n	800b4f0 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b4d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b4de:	eeb0 1a47 	vmov.f32	s2, s14
 800b4e2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b69c <turn45inR+0x3ac>
 800b4e6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ea:	f7f8 fc9d 	bl	8003e28 <mollifier_slalom_table>
 800b4ee:	e015      	b.n	800b51c <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b4f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b4f8:	eef1 7a67 	vneg.f32	s15, s15
 800b4fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b500:	eef0 2a66 	vmov.f32	s5, s13
 800b504:	eeb0 2a67 	vmov.f32	s4, s15
 800b508:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b698 <turn45inR+0x3a8>
 800b50c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b698 <turn45inR+0x3a8>
 800b510:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b69c <turn45inR+0x3ac>
 800b514:	eeb0 0a47 	vmov.f32	s0, s14
 800b518:	f7f8 fb36 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b520:	2300      	movs	r3, #0
 800b522:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b524:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b528:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b52c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b530:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b534:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b538:	edd7 7a01 	vldr	s15, [r7, #4]
 800b53c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b540:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b544:	eef0 7ae7 	vabs.f32	s15, s15
 800b548:	ee17 0a90 	vmov	r0, s15
 800b54c:	f7f5 f824 	bl	8000598 <__aeabi_f2d>
 800b550:	f04f 0200 	mov.w	r2, #0
 800b554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b558:	f7f5 f9a0 	bl	800089c <__aeabi_ddiv>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4614      	mov	r4, r2
 800b562:	461d      	mov	r5, r3
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	4618      	mov	r0, r3
 800b568:	f7f5 f816 	bl	8000598 <__aeabi_f2d>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4620      	mov	r0, r4
 800b572:	4629      	mov	r1, r5
 800b574:	f7f5 f992 	bl	800089c <__aeabi_ddiv>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4610      	mov	r0, r2
 800b57e:	4619      	mov	r1, r3
 800b580:	f04f 0200 	mov.w	r2, #0
 800b584:	4b43      	ldr	r3, [pc, #268]	; (800b694 <turn45inR+0x3a4>)
 800b586:	f7f4 fea9 	bl	80002dc <__adddf3>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b58e:	4610      	mov	r0, r2
 800b590:	4619      	mov	r1, r3
 800b592:	f7f5 fb31 	bl	8000bf8 <__aeabi_d2f>
 800b596:	4603      	mov	r3, r0
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	ee02 3a10 	vmov	s4, r3
 800b59e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b5a2:	ed97 1a01 	vldr	s2, [r7, #4]
 800b5a6:	eef0 0a68 	vmov.f32	s1, s17
 800b5aa:	eeb0 0a48 	vmov.f32	s0, s16
 800b5ae:	f7f7 fcc5 	bl	8002f3c <straight_table2>

	}
	if (test_mode >= 2) {
 800b5b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	f240 80d0 	bls.w	800b75c <turn45inR+0x46c>

		highspeed_mode = 1;
 800b5bc:	4b32      	ldr	r3, [pc, #200]	; (800b688 <turn45inR+0x398>)
 800b5be:	2201      	movs	r2, #1
 800b5c0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b5d2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b5d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b5da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5e6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b5ea:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b5ee:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b68c <turn45inR+0x39c>
 800b5f2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	eeb0 2a47 	vmov.f32	s4, s14
 800b5fc:	eef0 1a46 	vmov.f32	s3, s12
 800b600:	eeb0 1a66 	vmov.f32	s2, s13
 800b604:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b698 <turn45inR+0x3a8>
 800b608:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b690 <turn45inR+0x3a0>
 800b60c:	f7f7 fc96 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800b610:	2300      	movs	r3, #0
 800b612:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b614:	2302      	movs	r3, #2
 800b616:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b618:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b61c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b620:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b624:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b628:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b62c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b630:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b634:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b638:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b63c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b68c <turn45inR+0x39c>
 800b640:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	eeb0 2a47 	vmov.f32	s4, s14
 800b64a:	eef0 1a45 	vmov.f32	s3, s10
 800b64e:	eeb0 1a65 	vmov.f32	s2, s11
 800b652:	eef0 0a46 	vmov.f32	s1, s12
 800b656:	eeb0 0a66 	vmov.f32	s0, s13
 800b65a:	f7f7 fc6f 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800b65e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b662:	2b01      	cmp	r3, #1
 800b664:	d11c      	bne.n	800b6a0 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b666:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b66a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b66e:	eeb0 1a47 	vmov.f32	s2, s14
 800b672:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b69c <turn45inR+0x3ac>
 800b676:	eeb0 0a67 	vmov.f32	s0, s15
 800b67a:	f7f8 fbd5 	bl	8003e28 <mollifier_slalom_table>
 800b67e:	e025      	b.n	800b6cc <turn45inR+0x3dc>
 800b680:	c022ec18 	.word	0xc022ec18
 800b684:	405fd1de 	.word	0x405fd1de
 800b688:	20000808 	.word	0x20000808
 800b68c:	42340000 	.word	0x42340000
 800b690:	42cd0000 	.word	0x42cd0000
 800b694:	408f4000 	.word	0x408f4000
 800b698:	00000000 	.word	0x00000000
 800b69c:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b6a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b6a8:	eef1 7a67 	vneg.f32	s15, s15
 800b6ac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b6b0:	eef0 2a66 	vmov.f32	s5, s13
 800b6b4:	eeb0 2a67 	vmov.f32	s4, s15
 800b6b8:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b698 <turn45inR+0x3a8>
 800b6bc:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b698 <turn45inR+0x3a8>
 800b6c0:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b69c <turn45inR+0x3ac>
 800b6c4:	eeb0 0a47 	vmov.f32	s0, s14
 800b6c8:	f7f8 fa5e 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b6d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6d8:	3b02      	subs	r3, #2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7f4 ff4a 	bl	8000574 <__aeabi_i2d>
 800b6e0:	a325      	add	r3, pc, #148	; (adr r3, 800b778 <turn45inR+0x488>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 ffaf 	bl	8000648 <__aeabi_dmul>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4614      	mov	r4, r2
 800b6f0:	461d      	mov	r5, r3
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7f4 ff4f 	bl	8000598 <__aeabi_f2d>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4620      	mov	r0, r4
 800b700:	4629      	mov	r1, r5
 800b702:	f7f4 fdeb 	bl	80002dc <__adddf3>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4610      	mov	r0, r2
 800b70c:	4619      	mov	r1, r3
 800b70e:	f7f5 fa73 	bl	8000bf8 <__aeabi_d2f>
 800b712:	4603      	mov	r3, r0
 800b714:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b718:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b71c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b720:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b724:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b72c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b730:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b734:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b770 <turn45inR+0x480>
 800b738:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	eeb0 2a47 	vmov.f32	s4, s14
 800b742:	eef0 1a65 	vmov.f32	s3, s11
 800b746:	eeb0 1a46 	vmov.f32	s2, s12
 800b74a:	eef0 0a66 	vmov.f32	s1, s13
 800b74e:	ee00 3a10 	vmov	s0, r3
 800b752:	f7f7 fbf3 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800b756:	4b07      	ldr	r3, [pc, #28]	; (800b774 <turn45inR+0x484>)
 800b758:	2200      	movs	r2, #0
 800b75a:	701a      	strb	r2, [r3, #0]
	}

}
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	ecbd 8b02 	vpop	{d8}
 800b766:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b76a:	b004      	add	sp, #16
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	42340000 	.word	0x42340000
 800b774:	20000808 	.word	0x20000808
 800b778:	c022ec18 	.word	0xc022ec18
 800b77c:	404fd1de 	.word	0x404fd1de

0800b780 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b780:	b084      	sub	sp, #16
 800b782:	b5b0      	push	{r4, r5, r7, lr}
 800b784:	ed2d 8b02 	vpush	{d8}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b794:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b798:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	f040 80ac 	bne.w	800b8fa <turn45inL+0x17a>
		highspeed_mode = 1;
 800b7a2:	4bdb      	ldr	r3, [pc, #876]	; (800bb10 <turn45inL+0x390>)
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b7b8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b7bc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b7c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7cc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b7d0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b7d4:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800bb20 <turn45inL+0x3a0>
 800b7d8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	eeb0 2a47 	vmov.f32	s4, s14
 800b7e2:	eef0 1a46 	vmov.f32	s3, s12
 800b7e6:	eeb0 1a66 	vmov.f32	s2, s13
 800b7ea:	eddf 0acc 	vldr	s1, [pc, #816]	; 800bb1c <turn45inL+0x39c>
 800b7ee:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800bb14 <turn45inL+0x394>
 800b7f2:	f7f7 fba3 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b7fe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b802:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b806:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b80a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b80e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b812:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b81a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b81e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b822:	eddf 4abf 	vldr	s9, [pc, #764]	; 800bb20 <turn45inL+0x3a0>
 800b826:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	eeb0 2a47 	vmov.f32	s4, s14
 800b830:	eef0 1a45 	vmov.f32	s3, s10
 800b834:	eeb0 1a65 	vmov.f32	s2, s11
 800b838:	eef0 0a46 	vmov.f32	s1, s12
 800b83c:	eeb0 0a66 	vmov.f32	s0, s13
 800b840:	f7f7 fb7c 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800b844:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d10c      	bne.n	800b866 <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b84c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b850:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b854:	eeb0 1a47 	vmov.f32	s2, s14
 800b858:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800bb20 <turn45inL+0x3a0>
 800b85c:	eeb0 0a67 	vmov.f32	s0, s15
 800b860:	f7f8 fae2 	bl	8003e28 <mollifier_slalom_table>
 800b864:	e013      	b.n	800b88e <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b866:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b86a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b86e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b872:	eef0 2a66 	vmov.f32	s5, s13
 800b876:	eeb0 2a47 	vmov.f32	s4, s14
 800b87a:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800bb1c <turn45inL+0x39c>
 800b87e:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800bb1c <turn45inL+0x39c>
 800b882:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800bb20 <turn45inL+0x3a0>
 800b886:	eeb0 0a67 	vmov.f32	s0, s15
 800b88a:	f7f8 f97d 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b88e:	2300      	movs	r3, #0
 800b890:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b892:	2300      	movs	r3, #0
 800b894:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	4618      	mov	r0, r3
 800b89a:	f7f4 fe7d 	bl	8000598 <__aeabi_f2d>
 800b89e:	a39a      	add	r3, pc, #616	; (adr r3, 800bb08 <turn45inL+0x388>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f7f4 fd1a 	bl	80002dc <__adddf3>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	f7f5 f9a2 	bl	8000bf8 <__aeabi_d2f>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b8ba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b8be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8ca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b8ce:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b8d2:	eddf 5a93 	vldr	s11, [pc, #588]	; 800bb20 <turn45inL+0x3a0>
 800b8d6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	eeb0 2a47 	vmov.f32	s4, s14
 800b8e0:	eef0 1a46 	vmov.f32	s3, s12
 800b8e4:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800bb1c <turn45inL+0x39c>
 800b8e8:	eef0 0a66 	vmov.f32	s1, s13
 800b8ec:	ee00 3a10 	vmov	s0, r3
 800b8f0:	f7f7 fb24 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800b8f4:	4b86      	ldr	r3, [pc, #536]	; (800bb10 <turn45inL+0x390>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b8fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f040 809b 	bne.w	800ba3a <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b904:	2300      	movs	r3, #0
 800b906:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b908:	2300      	movs	r3, #0
 800b90a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b90c:	2302      	movs	r3, #2
 800b90e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b910:	2300      	movs	r3, #0
 800b912:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b914:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b918:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b91c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b920:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b924:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b92c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b930:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b934:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b938:	eddf 4a79 	vldr	s9, [pc, #484]	; 800bb20 <turn45inL+0x3a0>
 800b93c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	eeb0 2a47 	vmov.f32	s4, s14
 800b946:	eef0 1a45 	vmov.f32	s3, s10
 800b94a:	eeb0 1a65 	vmov.f32	s2, s11
 800b94e:	eef0 0a46 	vmov.f32	s1, s12
 800b952:	eeb0 0a66 	vmov.f32	s0, s13
 800b956:	f7f7 faf1 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800b95a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d10c      	bne.n	800b97c <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b962:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b966:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b96a:	eeb0 1a47 	vmov.f32	s2, s14
 800b96e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800bb20 <turn45inL+0x3a0>
 800b972:	eeb0 0a67 	vmov.f32	s0, s15
 800b976:	f7f8 fa57 	bl	8003e28 <mollifier_slalom_table>
 800b97a:	e013      	b.n	800b9a4 <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b97c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b980:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b984:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b988:	eef0 2a66 	vmov.f32	s5, s13
 800b98c:	eeb0 2a47 	vmov.f32	s4, s14
 800b990:	eddf 1a62 	vldr	s3, [pc, #392]	; 800bb1c <turn45inL+0x39c>
 800b994:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800bb1c <turn45inL+0x39c>
 800b998:	eddf 0a61 	vldr	s1, [pc, #388]	; 800bb20 <turn45inL+0x3a0>
 800b99c:	eeb0 0a67 	vmov.f32	s0, s15
 800b9a0:	f7f8 f8f2 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b9ac:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b9b0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b9b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b9c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b9c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9cc:	eef0 7ae7 	vabs.f32	s15, s15
 800b9d0:	ee17 0a90 	vmov	r0, s15
 800b9d4:	f7f4 fde0 	bl	8000598 <__aeabi_f2d>
 800b9d8:	f04f 0200 	mov.w	r2, #0
 800b9dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9e0:	f7f4 ff5c 	bl	800089c <__aeabi_ddiv>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	461d      	mov	r5, r3
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f4 fdd2 	bl	8000598 <__aeabi_f2d>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	f7f4 ff4e 	bl	800089c <__aeabi_ddiv>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4610      	mov	r0, r2
 800ba06:	4619      	mov	r1, r3
 800ba08:	f04f 0200 	mov.w	r2, #0
 800ba0c:	4b42      	ldr	r3, [pc, #264]	; (800bb18 <turn45inL+0x398>)
 800ba0e:	f7f4 fc65 	bl	80002dc <__adddf3>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ba16:	4610      	mov	r0, r2
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f7f5 f8ed 	bl	8000bf8 <__aeabi_d2f>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	ee02 3a10 	vmov	s4, r3
 800ba26:	edd7 1a01 	vldr	s3, [r7, #4]
 800ba2a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ba2e:	eef0 0a68 	vmov.f32	s1, s17
 800ba32:	eeb0 0a48 	vmov.f32	s0, s16
 800ba36:	f7f7 fa81 	bl	8002f3c <straight_table2>

	}
	if (test_mode >= 2) {
 800ba3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	f240 80cc 	bls.w	800bbdc <turn45inL+0x45c>

		highspeed_mode = 1;
 800ba44:	4b32      	ldr	r3, [pc, #200]	; (800bb10 <turn45inL+0x390>)
 800ba46:	2201      	movs	r2, #1
 800ba48:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ba5a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba5e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba6e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ba72:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ba76:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800bb20 <turn45inL+0x3a0>
 800ba7a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	eeb0 2a47 	vmov.f32	s4, s14
 800ba84:	eef0 1a46 	vmov.f32	s3, s12
 800ba88:	eeb0 1a66 	vmov.f32	s2, s13
 800ba8c:	eddf 0a23 	vldr	s1, [pc, #140]	; 800bb1c <turn45inL+0x39c>
 800ba90:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800bb14 <turn45inL+0x394>
 800ba94:	f7f7 fa52 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800baa0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800baa4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800baa8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800baac:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bab0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bab4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800babc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bac0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bac4:	eddf 4a16 	vldr	s9, [pc, #88]	; 800bb20 <turn45inL+0x3a0>
 800bac8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	eeb0 2a47 	vmov.f32	s4, s14
 800bad2:	eef0 1a45 	vmov.f32	s3, s10
 800bad6:	eeb0 1a65 	vmov.f32	s2, s11
 800bada:	eef0 0a46 	vmov.f32	s1, s12
 800bade:	eeb0 0a66 	vmov.f32	s0, s13
 800bae2:	f7f7 fa2b 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800bae6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800baea:	2b01      	cmp	r3, #1
 800baec:	d11a      	bne.n	800bb24 <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800baee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baf2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800baf6:	eeb0 1a47 	vmov.f32	s2, s14
 800bafa:	eddf 0a09 	vldr	s1, [pc, #36]	; 800bb20 <turn45inL+0x3a0>
 800bafe:	eeb0 0a67 	vmov.f32	s0, s15
 800bb02:	f7f8 f991 	bl	8003e28 <mollifier_slalom_table>
 800bb06:	e021      	b.n	800bb4c <turn45inL+0x3cc>
 800bb08:	c022ec18 	.word	0xc022ec18
 800bb0c:	405fd1de 	.word	0x405fd1de
 800bb10:	20000808 	.word	0x20000808
 800bb14:	42cd0000 	.word	0x42cd0000
 800bb18:	408f4000 	.word	0x408f4000
 800bb1c:	00000000 	.word	0x00000000
 800bb20:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bb24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb2c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bb30:	eef0 2a66 	vmov.f32	s5, s13
 800bb34:	eeb0 2a47 	vmov.f32	s4, s14
 800bb38:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800bb1c <turn45inL+0x39c>
 800bb3c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800bb1c <turn45inL+0x39c>
 800bb40:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800bb20 <turn45inL+0x3a0>
 800bb44:	eeb0 0a67 	vmov.f32	s0, s15
 800bb48:	f7f8 f81e 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb54:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb58:	3b02      	subs	r3, #2
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7f4 fd0a 	bl	8000574 <__aeabi_i2d>
 800bb60:	a325      	add	r3, pc, #148	; (adr r3, 800bbf8 <turn45inL+0x478>)
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	f7f4 fd6f 	bl	8000648 <__aeabi_dmul>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4614      	mov	r4, r2
 800bb70:	461d      	mov	r5, r3
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7f4 fd0f 	bl	8000598 <__aeabi_f2d>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7f4 fbab 	bl	80002dc <__adddf3>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	f7f5 f833 	bl	8000bf8 <__aeabi_d2f>
 800bb92:	4603      	mov	r3, r0
 800bb94:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb98:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bb9c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bba0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bba4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbac:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bbb0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbb4:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bbf0 <turn45inL+0x470>
 800bbb8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	eeb0 2a47 	vmov.f32	s4, s14
 800bbc2:	eef0 1a65 	vmov.f32	s3, s11
 800bbc6:	eeb0 1a46 	vmov.f32	s2, s12
 800bbca:	eef0 0a66 	vmov.f32	s1, s13
 800bbce:	ee00 3a10 	vmov	s0, r3
 800bbd2:	f7f7 f9b3 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800bbd6:	4b07      	ldr	r3, [pc, #28]	; (800bbf4 <turn45inL+0x474>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	701a      	strb	r2, [r3, #0]
	}

}
 800bbdc:	bf00      	nop
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	ecbd 8b02 	vpop	{d8}
 800bbe6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bbea:	b004      	add	sp, #16
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	42340000 	.word	0x42340000
 800bbf4:	20000808 	.word	0x20000808
 800bbf8:	c022ec18 	.word	0xc022ec18
 800bbfc:	404fd1de 	.word	0x404fd1de

0800bc00 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bc00:	b084      	sub	sp, #16
 800bc02:	b5b0      	push	{r4, r5, r7, lr}
 800bc04:	ed2d 8b02 	vpush	{d8}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bc10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc14:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bc18:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	f040 80ae 	bne.w	800bd7e <turn135inR+0x17e>
		highspeed_mode = 1;
 800bc22:	4bdd      	ldr	r3, [pc, #884]	; (800bf98 <turn135inR+0x398>)
 800bc24:	2201      	movs	r2, #1
 800bc26:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bc38:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc3c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc4c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bc50:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bc54:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bf9c <turn135inR+0x39c>
 800bc58:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	eeb0 2a47 	vmov.f32	s4, s14
 800bc62:	eef0 1a46 	vmov.f32	s3, s12
 800bc66:	eeb0 1a66 	vmov.f32	s2, s13
 800bc6a:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bfa8 <turn135inR+0x3a8>
 800bc6e:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bfa0 <turn135inR+0x3a0>
 800bc72:	f7f7 f963 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc7e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bc82:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bc86:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bc8a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc9a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bc9e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bca2:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bf9c <turn135inR+0x39c>
 800bca6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	eeb0 2a47 	vmov.f32	s4, s14
 800bcb0:	eef0 1a45 	vmov.f32	s3, s10
 800bcb4:	eeb0 1a65 	vmov.f32	s2, s11
 800bcb8:	eef0 0a46 	vmov.f32	s1, s12
 800bcbc:	eeb0 0a66 	vmov.f32	s0, s13
 800bcc0:	f7f7 f93c 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800bcc4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d10c      	bne.n	800bce6 <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bccc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcd0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bcd4:	eeb0 1a47 	vmov.f32	s2, s14
 800bcd8:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bfac <turn135inR+0x3ac>
 800bcdc:	eeb0 0a67 	vmov.f32	s0, s15
 800bce0:	f7f8 f8a2 	bl	8003e28 <mollifier_slalom_table>
 800bce4:	e015      	b.n	800bd12 <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bce6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bcee:	eef1 7a67 	vneg.f32	s15, s15
 800bcf2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bcf6:	eef0 2a66 	vmov.f32	s5, s13
 800bcfa:	eeb0 2a67 	vmov.f32	s4, s15
 800bcfe:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bfa8 <turn135inR+0x3a8>
 800bd02:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bfa8 <turn135inR+0x3a8>
 800bd06:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bfac <turn135inR+0x3ac>
 800bd0a:	eeb0 0a47 	vmov.f32	s0, s14
 800bd0e:	f7f7 ff3b 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7f4 fc3b 	bl	8000598 <__aeabi_f2d>
 800bd22:	a39b      	add	r3, pc, #620	; (adr r3, 800bf90 <turn135inR+0x390>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fad8 	bl	80002dc <__adddf3>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4610      	mov	r0, r2
 800bd32:	4619      	mov	r1, r3
 800bd34:	f7f4 ff60 	bl	8000bf8 <__aeabi_d2f>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd3e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd4e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bd52:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bd56:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bf9c <turn135inR+0x39c>
 800bd5a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	eeb0 2a47 	vmov.f32	s4, s14
 800bd64:	eef0 1a46 	vmov.f32	s3, s12
 800bd68:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bfa8 <turn135inR+0x3a8>
 800bd6c:	eef0 0a66 	vmov.f32	s1, s13
 800bd70:	ee00 3a10 	vmov	s0, r3
 800bd74:	f7f7 f8e2 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800bd78:	4b87      	ldr	r3, [pc, #540]	; (800bf98 <turn135inR+0x398>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bd7e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f040 809d 	bne.w	800bec2 <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bd90:	2302      	movs	r3, #2
 800bd92:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd9c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bda0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bda4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bda8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdb4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bdb8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdbc:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bf9c <turn135inR+0x39c>
 800bdc0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	eeb0 2a47 	vmov.f32	s4, s14
 800bdca:	eef0 1a45 	vmov.f32	s3, s10
 800bdce:	eeb0 1a65 	vmov.f32	s2, s11
 800bdd2:	eef0 0a46 	vmov.f32	s1, s12
 800bdd6:	eeb0 0a66 	vmov.f32	s0, s13
 800bdda:	f7f7 f8af 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800bdde:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d10c      	bne.n	800be00 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bde6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bdee:	eeb0 1a47 	vmov.f32	s2, s14
 800bdf2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bfac <turn135inR+0x3ac>
 800bdf6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdfa:	f7f8 f815 	bl	8003e28 <mollifier_slalom_table>
 800bdfe:	e015      	b.n	800be2c <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800be00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800be08:	eef1 7a67 	vneg.f32	s15, s15
 800be0c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800be10:	eef0 2a66 	vmov.f32	s5, s13
 800be14:	eeb0 2a67 	vmov.f32	s4, s15
 800be18:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bfa8 <turn135inR+0x3a8>
 800be1c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bfa8 <turn135inR+0x3a8>
 800be20:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bfac <turn135inR+0x3ac>
 800be24:	eeb0 0a47 	vmov.f32	s0, s14
 800be28:	f7f7 feae 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800be2c:	2303      	movs	r3, #3
 800be2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800be30:	2300      	movs	r3, #0
 800be32:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800be34:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800be38:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800be3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be48:	edd7 7a01 	vldr	s15, [r7, #4]
 800be4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800be50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be54:	eef0 7ae7 	vabs.f32	s15, s15
 800be58:	ee17 0a90 	vmov	r0, s15
 800be5c:	f7f4 fb9c 	bl	8000598 <__aeabi_f2d>
 800be60:	f04f 0200 	mov.w	r2, #0
 800be64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be68:	f7f4 fd18 	bl	800089c <__aeabi_ddiv>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4614      	mov	r4, r2
 800be72:	461d      	mov	r5, r3
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	4618      	mov	r0, r3
 800be78:	f7f4 fb8e 	bl	8000598 <__aeabi_f2d>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4620      	mov	r0, r4
 800be82:	4629      	mov	r1, r5
 800be84:	f7f4 fd0a 	bl	800089c <__aeabi_ddiv>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4610      	mov	r0, r2
 800be8e:	4619      	mov	r1, r3
 800be90:	f04f 0200 	mov.w	r2, #0
 800be94:	4b43      	ldr	r3, [pc, #268]	; (800bfa4 <turn135inR+0x3a4>)
 800be96:	f7f4 fa21 	bl	80002dc <__adddf3>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800be9e:	4610      	mov	r0, r2
 800bea0:	4619      	mov	r1, r3
 800bea2:	f7f4 fea9 	bl	8000bf8 <__aeabi_d2f>
 800bea6:	4603      	mov	r3, r0
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	ee02 3a10 	vmov	s4, r3
 800beae:	edd7 1a01 	vldr	s3, [r7, #4]
 800beb2:	ed97 1a01 	vldr	s2, [r7, #4]
 800beb6:	eef0 0a68 	vmov.f32	s1, s17
 800beba:	eeb0 0a48 	vmov.f32	s0, s16
 800bebe:	f7f7 f83d 	bl	8002f3c <straight_table2>

	}
	if (test_mode >= 2) {
 800bec2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	f240 80d0 	bls.w	800c06c <turn135inR+0x46c>

		highspeed_mode = 1;
 800becc:	4b32      	ldr	r3, [pc, #200]	; (800bf98 <turn135inR+0x398>)
 800bece:	2201      	movs	r2, #1
 800bed0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bed2:	2301      	movs	r3, #1
 800bed4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800beda:	2300      	movs	r3, #0
 800bedc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bede:	2300      	movs	r3, #0
 800bee0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bee2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bee6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800beea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800beee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bef6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800befa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800befe:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bf9c <turn135inR+0x39c>
 800bf02:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	eeb0 2a47 	vmov.f32	s4, s14
 800bf0c:	eef0 1a46 	vmov.f32	s3, s12
 800bf10:	eeb0 1a66 	vmov.f32	s2, s13
 800bf14:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bfa8 <turn135inR+0x3a8>
 800bf18:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bfa0 <turn135inR+0x3a0>
 800bf1c:	f7f7 f80e 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bf24:	2302      	movs	r3, #2
 800bf26:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bf2c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf30:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bf34:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf44:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bf48:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf4c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bf9c <turn135inR+0x39c>
 800bf50:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	eeb0 2a47 	vmov.f32	s4, s14
 800bf5a:	eef0 1a45 	vmov.f32	s3, s10
 800bf5e:	eeb0 1a65 	vmov.f32	s2, s11
 800bf62:	eef0 0a46 	vmov.f32	s1, s12
 800bf66:	eeb0 0a66 	vmov.f32	s0, s13
 800bf6a:	f7f6 ffe7 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800bf6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d11c      	bne.n	800bfb0 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bf76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf7e:	eeb0 1a47 	vmov.f32	s2, s14
 800bf82:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bfac <turn135inR+0x3ac>
 800bf86:	eeb0 0a67 	vmov.f32	s0, s15
 800bf8a:	f7f7 ff4d 	bl	8003e28 <mollifier_slalom_table>
 800bf8e:	e025      	b.n	800bfdc <turn135inR+0x3dc>
 800bf90:	c022ec18 	.word	0xc022ec18
 800bf94:	405fd1de 	.word	0x405fd1de
 800bf98:	20000808 	.word	0x20000808
 800bf9c:	42340000 	.word	0x42340000
 800bfa0:	42cd0000 	.word	0x42cd0000
 800bfa4:	408f4000 	.word	0x408f4000
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bfb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bfb4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bfb8:	eef1 7a67 	vneg.f32	s15, s15
 800bfbc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bfc0:	eef0 2a66 	vmov.f32	s5, s13
 800bfc4:	eeb0 2a67 	vmov.f32	s4, s15
 800bfc8:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bfa8 <turn135inR+0x3a8>
 800bfcc:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bfa8 <turn135inR+0x3a8>
 800bfd0:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bfac <turn135inR+0x3ac>
 800bfd4:	eeb0 0a47 	vmov.f32	s0, s14
 800bfd8:	f7f7 fdd6 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bfe4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bfe8:	3b02      	subs	r3, #2
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f4 fac2 	bl	8000574 <__aeabi_i2d>
 800bff0:	a325      	add	r3, pc, #148	; (adr r3, 800c088 <turn135inR+0x488>)
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	f7f4 fb27 	bl	8000648 <__aeabi_dmul>
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	4614      	mov	r4, r2
 800c000:	461d      	mov	r5, r3
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	4618      	mov	r0, r3
 800c006:	f7f4 fac7 	bl	8000598 <__aeabi_f2d>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4620      	mov	r0, r4
 800c010:	4629      	mov	r1, r5
 800c012:	f7f4 f963 	bl	80002dc <__adddf3>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4610      	mov	r0, r2
 800c01c:	4619      	mov	r1, r3
 800c01e:	f7f4 fdeb 	bl	8000bf8 <__aeabi_d2f>
 800c022:	4603      	mov	r3, r0
 800c024:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c028:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c02c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c030:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c034:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c03c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c040:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c044:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c080 <turn135inR+0x480>
 800c048:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	eeb0 2a47 	vmov.f32	s4, s14
 800c052:	eef0 1a65 	vmov.f32	s3, s11
 800c056:	eeb0 1a46 	vmov.f32	s2, s12
 800c05a:	eef0 0a66 	vmov.f32	s1, s13
 800c05e:	ee00 3a10 	vmov	s0, r3
 800c062:	f7f6 ff6b 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800c066:	4b07      	ldr	r3, [pc, #28]	; (800c084 <turn135inR+0x484>)
 800c068:	2200      	movs	r2, #0
 800c06a:	701a      	strb	r2, [r3, #0]
	}

}
 800c06c:	bf00      	nop
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	ecbd 8b02 	vpop	{d8}
 800c076:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c07a:	b004      	add	sp, #16
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	42340000 	.word	0x42340000
 800c084:	20000808 	.word	0x20000808
 800c088:	c022ec18 	.word	0xc022ec18
 800c08c:	404fd1de 	.word	0x404fd1de

0800c090 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c090:	b084      	sub	sp, #16
 800c092:	b5b0      	push	{r4, r5, r7, lr}
 800c094:	ed2d 8b02 	vpush	{d8}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c0a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c0a4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c0a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	f040 80ac 	bne.w	800c20a <turn135inL+0x17a>
		highspeed_mode = 1;
 800c0b2:	4bdb      	ldr	r3, [pc, #876]	; (800c420 <turn135inL+0x390>)
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c0c8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c0cc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c0d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0dc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c0e0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c0e4:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c424 <turn135inL+0x394>
 800c0e8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	eeb0 2a47 	vmov.f32	s4, s14
 800c0f2:	eef0 1a46 	vmov.f32	s3, s12
 800c0f6:	eeb0 1a66 	vmov.f32	s2, s13
 800c0fa:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c430 <turn135inL+0x3a0>
 800c0fe:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c428 <turn135inL+0x398>
 800c102:	f7f6 ff1b 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800c106:	2300      	movs	r3, #0
 800c108:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c10a:	2302      	movs	r3, #2
 800c10c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c10e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c112:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c116:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c11a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c11e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c122:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c12a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c12e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c132:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c424 <turn135inL+0x394>
 800c136:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	eeb0 2a47 	vmov.f32	s4, s14
 800c140:	eef0 1a45 	vmov.f32	s3, s10
 800c144:	eeb0 1a65 	vmov.f32	s2, s11
 800c148:	eef0 0a46 	vmov.f32	s1, s12
 800c14c:	eeb0 0a66 	vmov.f32	s0, s13
 800c150:	f7f6 fef4 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800c154:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d10c      	bne.n	800c176 <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c15c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c160:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c164:	eeb0 1a47 	vmov.f32	s2, s14
 800c168:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c434 <turn135inL+0x3a4>
 800c16c:	eeb0 0a67 	vmov.f32	s0, s15
 800c170:	f7f7 fe5a 	bl	8003e28 <mollifier_slalom_table>
 800c174:	e013      	b.n	800c19e <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c176:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c17a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c17e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c182:	eef0 2a66 	vmov.f32	s5, s13
 800c186:	eeb0 2a47 	vmov.f32	s4, s14
 800c18a:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c430 <turn135inL+0x3a0>
 800c18e:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c430 <turn135inL+0x3a0>
 800c192:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c434 <turn135inL+0x3a4>
 800c196:	eeb0 0a67 	vmov.f32	s0, s15
 800c19a:	f7f7 fcf5 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7f4 f9f5 	bl	8000598 <__aeabi_f2d>
 800c1ae:	a39a      	add	r3, pc, #616	; (adr r3, 800c418 <turn135inL+0x388>)
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	f7f4 f892 	bl	80002dc <__adddf3>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4610      	mov	r0, r2
 800c1be:	4619      	mov	r1, r3
 800c1c0:	f7f4 fd1a 	bl	8000bf8 <__aeabi_d2f>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c1ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1da:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c1de:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c1e2:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c424 <turn135inL+0x394>
 800c1e6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	eeb0 2a47 	vmov.f32	s4, s14
 800c1f0:	eef0 1a46 	vmov.f32	s3, s12
 800c1f4:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c430 <turn135inL+0x3a0>
 800c1f8:	eef0 0a66 	vmov.f32	s1, s13
 800c1fc:	ee00 3a10 	vmov	s0, r3
 800c200:	f7f6 fe9c 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800c204:	4b86      	ldr	r3, [pc, #536]	; (800c420 <turn135inL+0x390>)
 800c206:	2200      	movs	r2, #0
 800c208:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c20a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f040 809b 	bne.w	800c34a <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c214:	2300      	movs	r3, #0
 800c216:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c218:	2300      	movs	r3, #0
 800c21a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c21c:	2302      	movs	r3, #2
 800c21e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c220:	2300      	movs	r3, #0
 800c222:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c224:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c228:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c22c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c230:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c234:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c238:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c23c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c240:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c244:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c248:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c424 <turn135inL+0x394>
 800c24c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	eeb0 2a47 	vmov.f32	s4, s14
 800c256:	eef0 1a45 	vmov.f32	s3, s10
 800c25a:	eeb0 1a65 	vmov.f32	s2, s11
 800c25e:	eef0 0a46 	vmov.f32	s1, s12
 800c262:	eeb0 0a66 	vmov.f32	s0, s13
 800c266:	f7f6 fe69 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800c26a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d10c      	bne.n	800c28c <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c272:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c276:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c27a:	eeb0 1a47 	vmov.f32	s2, s14
 800c27e:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c434 <turn135inL+0x3a4>
 800c282:	eeb0 0a67 	vmov.f32	s0, s15
 800c286:	f7f7 fdcf 	bl	8003e28 <mollifier_slalom_table>
 800c28a:	e013      	b.n	800c2b4 <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c28c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c290:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c294:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c298:	eef0 2a66 	vmov.f32	s5, s13
 800c29c:	eeb0 2a47 	vmov.f32	s4, s14
 800c2a0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c430 <turn135inL+0x3a0>
 800c2a4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c430 <turn135inL+0x3a0>
 800c2a8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c434 <turn135inL+0x3a4>
 800c2ac:	eeb0 0a67 	vmov.f32	s0, s15
 800c2b0:	f7f7 fc6a 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c2bc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c2c0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c2c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c2d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c2d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2dc:	eef0 7ae7 	vabs.f32	s15, s15
 800c2e0:	ee17 0a90 	vmov	r0, s15
 800c2e4:	f7f4 f958 	bl	8000598 <__aeabi_f2d>
 800c2e8:	f04f 0200 	mov.w	r2, #0
 800c2ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2f0:	f7f4 fad4 	bl	800089c <__aeabi_ddiv>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4614      	mov	r4, r2
 800c2fa:	461d      	mov	r5, r3
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7f4 f94a 	bl	8000598 <__aeabi_f2d>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4620      	mov	r0, r4
 800c30a:	4629      	mov	r1, r5
 800c30c:	f7f4 fac6 	bl	800089c <__aeabi_ddiv>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4610      	mov	r0, r2
 800c316:	4619      	mov	r1, r3
 800c318:	f04f 0200 	mov.w	r2, #0
 800c31c:	4b43      	ldr	r3, [pc, #268]	; (800c42c <turn135inL+0x39c>)
 800c31e:	f7f3 ffdd 	bl	80002dc <__adddf3>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c326:	4610      	mov	r0, r2
 800c328:	4619      	mov	r1, r3
 800c32a:	f7f4 fc65 	bl	8000bf8 <__aeabi_d2f>
 800c32e:	4603      	mov	r3, r0
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	ee02 3a10 	vmov	s4, r3
 800c336:	edd7 1a01 	vldr	s3, [r7, #4]
 800c33a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c33e:	eef0 0a68 	vmov.f32	s1, s17
 800c342:	eeb0 0a48 	vmov.f32	s0, s16
 800c346:	f7f6 fdf9 	bl	8002f3c <straight_table2>

	}
	if (test_mode >= 2) {
 800c34a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c34e:	2b01      	cmp	r3, #1
 800c350:	f240 80ce 	bls.w	800c4f0 <turn135inL+0x460>

		highspeed_mode = 1;
 800c354:	4b32      	ldr	r3, [pc, #200]	; (800c420 <turn135inL+0x390>)
 800c356:	2201      	movs	r2, #1
 800c358:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c35a:	2301      	movs	r3, #1
 800c35c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c35e:	2300      	movs	r3, #0
 800c360:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c366:	2300      	movs	r3, #0
 800c368:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c36a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c36e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c372:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c376:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c37a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c37e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c382:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c386:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c424 <turn135inL+0x394>
 800c38a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	eeb0 2a47 	vmov.f32	s4, s14
 800c394:	eef0 1a46 	vmov.f32	s3, s12
 800c398:	eeb0 1a66 	vmov.f32	s2, s13
 800c39c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c430 <turn135inL+0x3a0>
 800c3a0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c428 <turn135inL+0x398>
 800c3a4:	f7f6 fdca 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3b0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c3b4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c3b8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c3bc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3cc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c3d0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3d4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c424 <turn135inL+0x394>
 800c3d8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	eeb0 2a47 	vmov.f32	s4, s14
 800c3e2:	eef0 1a45 	vmov.f32	s3, s10
 800c3e6:	eeb0 1a65 	vmov.f32	s2, s11
 800c3ea:	eef0 0a46 	vmov.f32	s1, s12
 800c3ee:	eeb0 0a66 	vmov.f32	s0, s13
 800c3f2:	f7f6 fda3 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800c3f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d11c      	bne.n	800c438 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c3fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c402:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c406:	eeb0 1a47 	vmov.f32	s2, s14
 800c40a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c434 <turn135inL+0x3a4>
 800c40e:	eeb0 0a67 	vmov.f32	s0, s15
 800c412:	f7f7 fd09 	bl	8003e28 <mollifier_slalom_table>
 800c416:	e023      	b.n	800c460 <turn135inL+0x3d0>
 800c418:	c022ec18 	.word	0xc022ec18
 800c41c:	405fd1de 	.word	0x405fd1de
 800c420:	20000808 	.word	0x20000808
 800c424:	42340000 	.word	0x42340000
 800c428:	42cd0000 	.word	0x42cd0000
 800c42c:	408f4000 	.word	0x408f4000
 800c430:	00000000 	.word	0x00000000
 800c434:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c438:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c43c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c440:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c444:	eef0 2a66 	vmov.f32	s5, s13
 800c448:	eeb0 2a47 	vmov.f32	s4, s14
 800c44c:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c430 <turn135inL+0x3a0>
 800c450:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c430 <turn135inL+0x3a0>
 800c454:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c434 <turn135inL+0x3a4>
 800c458:	eeb0 0a67 	vmov.f32	s0, s15
 800c45c:	f7f7 fb94 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c460:	2300      	movs	r3, #0
 800c462:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c464:	2300      	movs	r3, #0
 800c466:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c468:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c46c:	3b02      	subs	r3, #2
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f4 f880 	bl	8000574 <__aeabi_i2d>
 800c474:	a326      	add	r3, pc, #152	; (adr r3, 800c510 <turn135inL+0x480>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	f7f4 f8e5 	bl	8000648 <__aeabi_dmul>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4614      	mov	r4, r2
 800c484:	461d      	mov	r5, r3
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	4618      	mov	r0, r3
 800c48a:	f7f4 f885 	bl	8000598 <__aeabi_f2d>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	4620      	mov	r0, r4
 800c494:	4629      	mov	r1, r5
 800c496:	f7f3 ff21 	bl	80002dc <__adddf3>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4610      	mov	r0, r2
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	f7f4 fba9 	bl	8000bf8 <__aeabi_d2f>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4b0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c4c4:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4c8:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c508 <turn135inL+0x478>
 800c4cc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	eeb0 2a47 	vmov.f32	s4, s14
 800c4d6:	eef0 1a65 	vmov.f32	s3, s11
 800c4da:	eeb0 1a46 	vmov.f32	s2, s12
 800c4de:	eef0 0a66 	vmov.f32	s1, s13
 800c4e2:	ee00 3a10 	vmov	s0, r3
 800c4e6:	f7f6 fd29 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800c4ea:	4b08      	ldr	r3, [pc, #32]	; (800c50c <turn135inL+0x47c>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	701a      	strb	r2, [r3, #0]
	}

}
 800c4f0:	bf00      	nop
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	ecbd 8b02 	vpop	{d8}
 800c4fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c4fe:	b004      	add	sp, #16
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	f3af 8000 	nop.w
 800c508:	42340000 	.word	0x42340000
 800c50c:	20000808 	.word	0x20000808
 800c510:	c022ec18 	.word	0xc022ec18
 800c514:	404fd1de 	.word	0x404fd1de

0800c518 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c518:	b084      	sub	sp, #16
 800c51a:	b5b0      	push	{r4, r5, r7, lr}
 800c51c:	ed2d 8b02 	vpush	{d8}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c52c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c530:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c534:	2b01      	cmp	r3, #1
 800c536:	f040 80a5 	bne.w	800c684 <turn45outR+0x16c>
		highspeed_mode = 1;
 800c53a:	4be9      	ldr	r3, [pc, #932]	; (800c8e0 <turn45outR+0x3c8>)
 800c53c:	2201      	movs	r2, #1
 800c53e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c540:	2300      	movs	r3, #0
 800c542:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c544:	2300      	movs	r3, #0
 800c546:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c548:	2300      	movs	r3, #0
 800c54a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c550:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c554:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c558:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c55c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c560:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c564:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c568:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c56c:	eddf 5add 	vldr	s11, [pc, #884]	; 800c8e4 <turn45outR+0x3cc>
 800c570:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	eeb0 2a47 	vmov.f32	s4, s14
 800c57a:	eef0 1a46 	vmov.f32	s3, s12
 800c57e:	eeb0 1a66 	vmov.f32	s2, s13
 800c582:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c8e8 <turn45outR+0x3d0>
 800c586:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c8ec <turn45outR+0x3d4>
 800c58a:	f7f6 fcd7 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800c58e:	2300      	movs	r3, #0
 800c590:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c592:	2303      	movs	r3, #3
 800c594:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c596:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c59a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c59e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c5a2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5b2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c5b6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5ba:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c8e4 <turn45outR+0x3cc>
 800c5be:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	eeb0 2a47 	vmov.f32	s4, s14
 800c5c8:	eef0 1a45 	vmov.f32	s3, s10
 800c5cc:	eeb0 1a65 	vmov.f32	s2, s11
 800c5d0:	eef0 0a46 	vmov.f32	s1, s12
 800c5d4:	eeb0 0a66 	vmov.f32	s0, s13
 800c5d8:	f7f6 fcb0 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800c5dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d10c      	bne.n	800c5fe <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c5e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c5ec:	eeb0 1a47 	vmov.f32	s2, s14
 800c5f0:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c8f0 <turn45outR+0x3d8>
 800c5f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c5f8:	f7f7 fc16 	bl	8003e28 <mollifier_slalom_table>
 800c5fc:	e015      	b.n	800c62a <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c5fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c602:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c606:	eef1 7a67 	vneg.f32	s15, s15
 800c60a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c60e:	eef0 2a66 	vmov.f32	s5, s13
 800c612:	eeb0 2a67 	vmov.f32	s4, s15
 800c616:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c8e8 <turn45outR+0x3d0>
 800c61a:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c8e8 <turn45outR+0x3d0>
 800c61e:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c8f0 <turn45outR+0x3d8>
 800c622:	eeb0 0a47 	vmov.f32	s0, s14
 800c626:	f7f7 faaf 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c632:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c636:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c8f4 <turn45outR+0x3dc>
 800c63a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c63e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c642:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c646:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c64a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c64e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c652:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c656:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c65a:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c8e4 <turn45outR+0x3cc>
 800c65e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	eeb0 2a47 	vmov.f32	s4, s14
 800c668:	eef0 1a65 	vmov.f32	s3, s11
 800c66c:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c8e8 <turn45outR+0x3d0>
 800c670:	eef0 0a46 	vmov.f32	s1, s12
 800c674:	eeb0 0a66 	vmov.f32	s0, s13
 800c678:	f7f6 fc60 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800c67c:	4b98      	ldr	r3, [pc, #608]	; (800c8e0 <turn45outR+0x3c8>)
 800c67e:	2200      	movs	r2, #0
 800c680:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c682:	e123      	b.n	800c8cc <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c684:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c688:	2b01      	cmp	r3, #1
 800c68a:	f240 8082 	bls.w	800c792 <turn45outR+0x27a>
		highspeed_mode = 1;
 800c68e:	4b94      	ldr	r3, [pc, #592]	; (800c8e0 <turn45outR+0x3c8>)
 800c690:	2201      	movs	r2, #1
 800c692:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c694:	2300      	movs	r3, #0
 800c696:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c698:	2300      	movs	r3, #0
 800c69a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c69c:	2303      	movs	r3, #3
 800c69e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6a8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6ac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c6b0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6c0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c6c4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6c8:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c8e4 <turn45outR+0x3cc>
 800c6cc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	eeb0 2a47 	vmov.f32	s4, s14
 800c6d6:	eef0 1a45 	vmov.f32	s3, s10
 800c6da:	eeb0 1a65 	vmov.f32	s2, s11
 800c6de:	eef0 0a46 	vmov.f32	s1, s12
 800c6e2:	eeb0 0a66 	vmov.f32	s0, s13
 800c6e6:	f7f6 fc29 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800c6ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d10c      	bne.n	800c70c <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c6f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c6fa:	eeb0 1a47 	vmov.f32	s2, s14
 800c6fe:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c8f0 <turn45outR+0x3d8>
 800c702:	eeb0 0a67 	vmov.f32	s0, s15
 800c706:	f7f7 fb8f 	bl	8003e28 <mollifier_slalom_table>
 800c70a:	e015      	b.n	800c738 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c70c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c710:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c714:	eef1 7a67 	vneg.f32	s15, s15
 800c718:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c71c:	eef0 2a66 	vmov.f32	s5, s13
 800c720:	eeb0 2a67 	vmov.f32	s4, s15
 800c724:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c8e8 <turn45outR+0x3d0>
 800c728:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c8e8 <turn45outR+0x3d0>
 800c72c:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c8f0 <turn45outR+0x3d8>
 800c730:	eeb0 0a47 	vmov.f32	s0, s14
 800c734:	f7f7 fa28 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=0;
 800c738:	2300      	movs	r3, #0
 800c73a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c740:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c744:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c8f4 <turn45outR+0x3dc>
 800c748:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c74c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c750:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c754:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c758:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c75c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c760:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c764:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c768:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c8e4 <turn45outR+0x3cc>
 800c76c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	eeb0 2a47 	vmov.f32	s4, s14
 800c776:	eef0 1a65 	vmov.f32	s3, s11
 800c77a:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c8e8 <turn45outR+0x3d0>
 800c77e:	eef0 0a46 	vmov.f32	s1, s12
 800c782:	eeb0 0a66 	vmov.f32	s0, s13
 800c786:	f7f6 fbd9 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800c78a:	4b55      	ldr	r3, [pc, #340]	; (800c8e0 <turn45outR+0x3c8>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	701a      	strb	r2, [r3, #0]
}
 800c790:	e09c      	b.n	800c8cc <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c792:	2300      	movs	r3, #0
 800c794:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c796:	2300      	movs	r3, #0
 800c798:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c79a:	2303      	movs	r3, #3
 800c79c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7a2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c7a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c7aa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c7ae:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c7b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7be:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c7c2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7c6:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c8e4 <turn45outR+0x3cc>
 800c7ca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	eeb0 2a47 	vmov.f32	s4, s14
 800c7d4:	eef0 1a45 	vmov.f32	s3, s10
 800c7d8:	eeb0 1a65 	vmov.f32	s2, s11
 800c7dc:	eef0 0a46 	vmov.f32	s1, s12
 800c7e0:	eeb0 0a66 	vmov.f32	s0, s13
 800c7e4:	f7f6 fbaa 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800c7e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d10c      	bne.n	800c80a <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c7f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c7f8:	eeb0 1a47 	vmov.f32	s2, s14
 800c7fc:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c8f0 <turn45outR+0x3d8>
 800c800:	eeb0 0a67 	vmov.f32	s0, s15
 800c804:	f7f7 fb10 	bl	8003e28 <mollifier_slalom_table>
 800c808:	e015      	b.n	800c836 <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c80a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c80e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c812:	eef1 7a67 	vneg.f32	s15, s15
 800c816:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c81a:	eef0 2a66 	vmov.f32	s5, s13
 800c81e:	eeb0 2a67 	vmov.f32	s4, s15
 800c822:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c8e8 <turn45outR+0x3d0>
 800c826:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c8e8 <turn45outR+0x3d0>
 800c82a:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c8f0 <turn45outR+0x3d8>
 800c82e:	eeb0 0a47 	vmov.f32	s0, s14
 800c832:	f7f7 f9a9 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c836:	2301      	movs	r3, #1
 800c838:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c83e:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c842:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c846:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c84a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c84e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c852:	edd7 7a01 	vldr	s15, [r7, #4]
 800c856:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c85a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c85e:	eef0 7ae7 	vabs.f32	s15, s15
 800c862:	ee17 0a90 	vmov	r0, s15
 800c866:	f7f3 fe97 	bl	8000598 <__aeabi_f2d>
 800c86a:	f04f 0200 	mov.w	r2, #0
 800c86e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c872:	f7f4 f813 	bl	800089c <__aeabi_ddiv>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4614      	mov	r4, r2
 800c87c:	461d      	mov	r5, r3
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	4618      	mov	r0, r3
 800c882:	f7f3 fe89 	bl	8000598 <__aeabi_f2d>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4620      	mov	r0, r4
 800c88c:	4629      	mov	r1, r5
 800c88e:	f7f4 f805 	bl	800089c <__aeabi_ddiv>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4610      	mov	r0, r2
 800c898:	4619      	mov	r1, r3
 800c89a:	f04f 0200 	mov.w	r2, #0
 800c89e:	4b16      	ldr	r3, [pc, #88]	; (800c8f8 <turn45outR+0x3e0>)
 800c8a0:	f7f3 fd1c 	bl	80002dc <__adddf3>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	f7f4 f9a4 	bl	8000bf8 <__aeabi_d2f>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	ee02 3a10 	vmov	s4, r3
 800c8b8:	edd7 1a01 	vldr	s3, [r7, #4]
 800c8bc:	ed97 1a01 	vldr	s2, [r7, #4]
 800c8c0:	eef0 0a68 	vmov.f32	s1, s17
 800c8c4:	eeb0 0a48 	vmov.f32	s0, s16
 800c8c8:	f7f6 fb38 	bl	8002f3c <straight_table2>
}
 800c8cc:	bf00      	nop
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	ecbd 8b02 	vpop	{d8}
 800c8d6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c8da:	b004      	add	sp, #16
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	20000808 	.word	0x20000808
 800c8e4:	42340000 	.word	0x42340000
 800c8e8:	00000000 	.word	0x00000000
 800c8ec:	42c4477b 	.word	0x42c4477b
 800c8f0:	c2340000 	.word	0xc2340000
 800c8f4:	42b40000 	.word	0x42b40000
 800c8f8:	408f4000 	.word	0x408f4000

0800c8fc <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	b5b0      	push	{r4, r5, r7, lr}
 800c900:	ed2d 8b02 	vpush	{d8}
 800c904:	b084      	sub	sp, #16
 800c906:	af00      	add	r7, sp, #0
 800c908:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c90c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c910:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c914:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c918:	2b01      	cmp	r3, #1
 800c91a:	f040 80a3 	bne.w	800ca64 <turn45outL+0x168>
			highspeed_mode = 1;
 800c91e:	4be5      	ldr	r3, [pc, #916]	; (800ccb4 <turn45outL+0x3b8>)
 800c920:	2201      	movs	r2, #1
 800c922:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c924:	2300      	movs	r3, #0
 800c926:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c928:	2300      	movs	r3, #0
 800c92a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c930:	2300      	movs	r3, #0
 800c932:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c934:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c938:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c93c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c940:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c944:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c948:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c94c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c950:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800ccb8 <turn45outL+0x3bc>
 800c954:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	eeb0 2a47 	vmov.f32	s4, s14
 800c95e:	eef0 1a46 	vmov.f32	s3, s12
 800c962:	eeb0 1a66 	vmov.f32	s2, s13
 800c966:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800ccbc <turn45outL+0x3c0>
 800c96a:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800ccc0 <turn45outL+0x3c4>
 800c96e:	f7f6 fae5 	bl	8002f3c <straight_table2>
			wallmode.WallControlMode=0;
 800c972:	2300      	movs	r3, #0
 800c974:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c976:	2304      	movs	r3, #4
 800c978:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c97a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c97e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c982:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c986:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c98a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c98e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c992:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c996:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c99a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c99e:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800ccb8 <turn45outL+0x3bc>
 800c9a2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	eeb0 2a47 	vmov.f32	s4, s14
 800c9ac:	eef0 1a45 	vmov.f32	s3, s10
 800c9b0:	eeb0 1a65 	vmov.f32	s2, s11
 800c9b4:	eef0 0a46 	vmov.f32	s1, s12
 800c9b8:	eeb0 0a66 	vmov.f32	s0, s13
 800c9bc:	f7f6 fabe 	bl	8002f3c <straight_table2>
			if(mollifier_mode == ON){
 800c9c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d10c      	bne.n	800c9e2 <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c9c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9d0:	eeb0 1a47 	vmov.f32	s2, s14
 800c9d4:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800ccb8 <turn45outL+0x3bc>
 800c9d8:	eeb0 0a67 	vmov.f32	s0, s15
 800c9dc:	f7f7 fa24 	bl	8003e28 <mollifier_slalom_table>
 800c9e0:	e013      	b.n	800ca0a <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c9e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9ea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c9ee:	eef0 2a66 	vmov.f32	s5, s13
 800c9f2:	eeb0 2a47 	vmov.f32	s4, s14
 800c9f6:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800ccbc <turn45outL+0x3c0>
 800c9fa:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800ccbc <turn45outL+0x3c0>
 800c9fe:	eddf 0aae 	vldr	s1, [pc, #696]	; 800ccb8 <turn45outL+0x3bc>
 800ca02:	eeb0 0a67 	vmov.f32	s0, s15
 800ca06:	f7f7 f8bf 	bl	8003b88 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca16:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800ccc4 <turn45outL+0x3c8>
 800ca1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca22:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca32:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca36:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca3a:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800ccb8 <turn45outL+0x3bc>
 800ca3e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	eeb0 2a47 	vmov.f32	s4, s14
 800ca48:	eef0 1a65 	vmov.f32	s3, s11
 800ca4c:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800ccbc <turn45outL+0x3c0>
 800ca50:	eef0 0a46 	vmov.f32	s1, s12
 800ca54:	eeb0 0a66 	vmov.f32	s0, s13
 800ca58:	f7f6 fa70 	bl	8002f3c <straight_table2>
			highspeed_mode = 0;
 800ca5c:	4b95      	ldr	r3, [pc, #596]	; (800ccb4 <turn45outL+0x3b8>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ca62:	e11e      	b.n	800cca2 <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800ca64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d97f      	bls.n	800cb6c <turn45outL+0x270>
		highspeed_mode = 1;
 800ca6c:	4b91      	ldr	r3, [pc, #580]	; (800ccb4 <turn45outL+0x3b8>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800ca7a:	2304      	movs	r3, #4
 800ca7c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca82:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ca86:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca8a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ca8e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca9e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800caa2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800caa6:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ccb8 <turn45outL+0x3bc>
 800caaa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	eeb0 2a47 	vmov.f32	s4, s14
 800cab4:	eef0 1a45 	vmov.f32	s3, s10
 800cab8:	eeb0 1a65 	vmov.f32	s2, s11
 800cabc:	eef0 0a46 	vmov.f32	s1, s12
 800cac0:	eeb0 0a66 	vmov.f32	s0, s13
 800cac4:	f7f6 fa3a 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800cac8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d10c      	bne.n	800caea <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cad0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cad4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cad8:	eeb0 1a47 	vmov.f32	s2, s14
 800cadc:	eddf 0a76 	vldr	s1, [pc, #472]	; 800ccb8 <turn45outL+0x3bc>
 800cae0:	eeb0 0a67 	vmov.f32	s0, s15
 800cae4:	f7f7 f9a0 	bl	8003e28 <mollifier_slalom_table>
 800cae8:	e013      	b.n	800cb12 <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800caea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800caf2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800caf6:	eef0 2a66 	vmov.f32	s5, s13
 800cafa:	eeb0 2a47 	vmov.f32	s4, s14
 800cafe:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ccbc <turn45outL+0x3c0>
 800cb02:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ccbc <turn45outL+0x3c0>
 800cb06:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800ccb8 <turn45outL+0x3bc>
 800cb0a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb0e:	f7f7 f83b 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cb1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cb1e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ccc4 <turn45outL+0x3c8>
 800cb22:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cb26:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb2a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb2e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb3a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cb3e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cb42:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ccb8 <turn45outL+0x3bc>
 800cb46:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	eeb0 2a47 	vmov.f32	s4, s14
 800cb50:	eef0 1a65 	vmov.f32	s3, s11
 800cb54:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ccbc <turn45outL+0x3c0>
 800cb58:	eef0 0a46 	vmov.f32	s1, s12
 800cb5c:	eeb0 0a66 	vmov.f32	s0, s13
 800cb60:	f7f6 f9ec 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800cb64:	4b53      	ldr	r3, [pc, #332]	; (800ccb4 <turn45outL+0x3b8>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	701a      	strb	r2, [r3, #0]
}
 800cb6a:	e09a      	b.n	800cca2 <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cb74:	2304      	movs	r3, #4
 800cb76:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb7c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cb80:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb84:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb88:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb98:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb9c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cba0:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ccb8 <turn45outL+0x3bc>
 800cba4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	eeb0 2a47 	vmov.f32	s4, s14
 800cbae:	eef0 1a45 	vmov.f32	s3, s10
 800cbb2:	eeb0 1a65 	vmov.f32	s2, s11
 800cbb6:	eef0 0a46 	vmov.f32	s1, s12
 800cbba:	eeb0 0a66 	vmov.f32	s0, s13
 800cbbe:	f7f6 f9bd 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800cbc2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d10c      	bne.n	800cbe4 <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cbca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cbd2:	eeb0 1a47 	vmov.f32	s2, s14
 800cbd6:	eddf 0a38 	vldr	s1, [pc, #224]	; 800ccb8 <turn45outL+0x3bc>
 800cbda:	eeb0 0a67 	vmov.f32	s0, s15
 800cbde:	f7f7 f923 	bl	8003e28 <mollifier_slalom_table>
 800cbe2:	e013      	b.n	800cc0c <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cbe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbe8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cbec:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cbf0:	eef0 2a66 	vmov.f32	s5, s13
 800cbf4:	eeb0 2a47 	vmov.f32	s4, s14
 800cbf8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ccbc <turn45outL+0x3c0>
 800cbfc:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ccbc <turn45outL+0x3c0>
 800cc00:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800ccb8 <turn45outL+0x3bc>
 800cc04:	eeb0 0a67 	vmov.f32	s0, s15
 800cc08:	f7f6 ffbe 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cc14:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cc18:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cc1c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc28:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc34:	eef0 7ae7 	vabs.f32	s15, s15
 800cc38:	ee17 0a90 	vmov	r0, s15
 800cc3c:	f7f3 fcac 	bl	8000598 <__aeabi_f2d>
 800cc40:	f04f 0200 	mov.w	r2, #0
 800cc44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc48:	f7f3 fe28 	bl	800089c <__aeabi_ddiv>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	4614      	mov	r4, r2
 800cc52:	461d      	mov	r5, r3
 800cc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7f3 fc9e 	bl	8000598 <__aeabi_f2d>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4620      	mov	r0, r4
 800cc62:	4629      	mov	r1, r5
 800cc64:	f7f3 fe1a 	bl	800089c <__aeabi_ddiv>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	4619      	mov	r1, r3
 800cc70:	f04f 0200 	mov.w	r2, #0
 800cc74:	4b14      	ldr	r3, [pc, #80]	; (800ccc8 <turn45outL+0x3cc>)
 800cc76:	f7f3 fb31 	bl	80002dc <__adddf3>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cc7e:	4610      	mov	r0, r2
 800cc80:	4619      	mov	r1, r3
 800cc82:	f7f3 ffb9 	bl	8000bf8 <__aeabi_d2f>
 800cc86:	4603      	mov	r3, r0
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	ee02 3a10 	vmov	s4, r3
 800cc8e:	edd7 1a01 	vldr	s3, [r7, #4]
 800cc92:	ed97 1a01 	vldr	s2, [r7, #4]
 800cc96:	eef0 0a68 	vmov.f32	s1, s17
 800cc9a:	eeb0 0a48 	vmov.f32	s0, s16
 800cc9e:	f7f6 f94d 	bl	8002f3c <straight_table2>
}
 800cca2:	bf00      	nop
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	ecbd 8b02 	vpop	{d8}
 800ccac:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ccb0:	b004      	add	sp, #16
 800ccb2:	4770      	bx	lr
 800ccb4:	20000808 	.word	0x20000808
 800ccb8:	42340000 	.word	0x42340000
 800ccbc:	00000000 	.word	0x00000000
 800ccc0:	42c4477b 	.word	0x42c4477b
 800ccc4:	42b40000 	.word	0x42b40000
 800ccc8:	408f4000 	.word	0x408f4000

0800cccc <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cccc:	b084      	sub	sp, #16
 800ccce:	b5b0      	push	{r4, r5, r7, lr}
 800ccd0:	ed2d 8b02 	vpush	{d8}
 800ccd4:	b084      	sub	sp, #16
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ccdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cce0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cce4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	f040 80a5 	bne.w	800ce38 <turn135outR+0x16c>
			highspeed_mode = 1;
 800ccee:	4be9      	ldr	r3, [pc, #932]	; (800d094 <turn135outR+0x3c8>)
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cd00:	2300      	movs	r3, #0
 800cd02:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cd04:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cd08:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd0c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd18:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cd1c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cd20:	eddf 5add 	vldr	s11, [pc, #884]	; 800d098 <turn135outR+0x3cc>
 800cd24:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	eeb0 2a47 	vmov.f32	s4, s14
 800cd2e:	eef0 1a46 	vmov.f32	s3, s12
 800cd32:	eeb0 1a66 	vmov.f32	s2, s13
 800cd36:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800d09c <turn135outR+0x3d0>
 800cd3a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d0a0 <turn135outR+0x3d4>
 800cd3e:	f7f6 f8fd 	bl	8002f3c <straight_table2>
			wallmode.WallControlMode=0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800cd46:	2303      	movs	r3, #3
 800cd48:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd4a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cd4e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd52:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cd56:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd66:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cd6a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd6e:	eddf 4aca 	vldr	s9, [pc, #808]	; 800d098 <turn135outR+0x3cc>
 800cd72:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	eeb0 2a47 	vmov.f32	s4, s14
 800cd7c:	eef0 1a45 	vmov.f32	s3, s10
 800cd80:	eeb0 1a65 	vmov.f32	s2, s11
 800cd84:	eef0 0a46 	vmov.f32	s1, s12
 800cd88:	eeb0 0a66 	vmov.f32	s0, s13
 800cd8c:	f7f6 f8d6 	bl	8002f3c <straight_table2>
			if(mollifier_mode == ON){
 800cd90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d10c      	bne.n	800cdb2 <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cd98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd9c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cda0:	eeb0 1a47 	vmov.f32	s2, s14
 800cda4:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d0a4 <turn135outR+0x3d8>
 800cda8:	eeb0 0a67 	vmov.f32	s0, s15
 800cdac:	f7f7 f83c 	bl	8003e28 <mollifier_slalom_table>
 800cdb0:	e015      	b.n	800cdde <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cdb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdb6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cdba:	eef1 7a67 	vneg.f32	s15, s15
 800cdbe:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cdc2:	eef0 2a66 	vmov.f32	s5, s13
 800cdc6:	eeb0 2a67 	vmov.f32	s4, s15
 800cdca:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800d09c <turn135outR+0x3d0>
 800cdce:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800d09c <turn135outR+0x3d0>
 800cdd2:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d0a4 <turn135outR+0x3d8>
 800cdd6:	eeb0 0a47 	vmov.f32	s0, s14
 800cdda:	f7f6 fed5 	bl	8003b88 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cde6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cdea:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d0a8 <turn135outR+0x3dc>
 800cdee:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cdf2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdf6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdfa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce06:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce0a:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce0e:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800d098 <turn135outR+0x3cc>
 800ce12:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	eeb0 2a47 	vmov.f32	s4, s14
 800ce1c:	eef0 1a65 	vmov.f32	s3, s11
 800ce20:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800d09c <turn135outR+0x3d0>
 800ce24:	eef0 0a46 	vmov.f32	s1, s12
 800ce28:	eeb0 0a66 	vmov.f32	s0, s13
 800ce2c:	f7f6 f886 	bl	8002f3c <straight_table2>
			highspeed_mode = 0;
 800ce30:	4b98      	ldr	r3, [pc, #608]	; (800d094 <turn135outR+0x3c8>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ce36:	e123      	b.n	800d080 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800ce38:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	f240 8082 	bls.w	800cf46 <turn135outR+0x27a>
		highspeed_mode = 1;
 800ce42:	4b94      	ldr	r3, [pc, #592]	; (800d094 <turn135outR+0x3c8>)
 800ce44:	2201      	movs	r2, #1
 800ce46:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ce50:	2303      	movs	r3, #3
 800ce52:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ce5c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce60:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ce64:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce74:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ce78:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce7c:	eddf 4a86 	vldr	s9, [pc, #536]	; 800d098 <turn135outR+0x3cc>
 800ce80:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	eeb0 2a47 	vmov.f32	s4, s14
 800ce8a:	eef0 1a45 	vmov.f32	s3, s10
 800ce8e:	eeb0 1a65 	vmov.f32	s2, s11
 800ce92:	eef0 0a46 	vmov.f32	s1, s12
 800ce96:	eeb0 0a66 	vmov.f32	s0, s13
 800ce9a:	f7f6 f84f 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800ce9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d10c      	bne.n	800cec0 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cea6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ceaa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ceae:	eeb0 1a47 	vmov.f32	s2, s14
 800ceb2:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d0a4 <turn135outR+0x3d8>
 800ceb6:	eeb0 0a67 	vmov.f32	s0, s15
 800ceba:	f7f6 ffb5 	bl	8003e28 <mollifier_slalom_table>
 800cebe:	e015      	b.n	800ceec <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cec0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cec4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cec8:	eef1 7a67 	vneg.f32	s15, s15
 800cecc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ced0:	eef0 2a66 	vmov.f32	s5, s13
 800ced4:	eeb0 2a67 	vmov.f32	s4, s15
 800ced8:	eddf 1a70 	vldr	s3, [pc, #448]	; 800d09c <turn135outR+0x3d0>
 800cedc:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800d09c <turn135outR+0x3d0>
 800cee0:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d0a4 <turn135outR+0x3d8>
 800cee4:	eeb0 0a47 	vmov.f32	s0, s14
 800cee8:	f7f6 fe4e 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cef4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cef8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d0a8 <turn135outR+0x3dc>
 800cefc:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cf00:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf04:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf14:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cf18:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cf1c:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800d098 <turn135outR+0x3cc>
 800cf20:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	eeb0 2a47 	vmov.f32	s4, s14
 800cf2a:	eef0 1a65 	vmov.f32	s3, s11
 800cf2e:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800d09c <turn135outR+0x3d0>
 800cf32:	eef0 0a46 	vmov.f32	s1, s12
 800cf36:	eeb0 0a66 	vmov.f32	s0, s13
 800cf3a:	f7f5 ffff 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800cf3e:	4b55      	ldr	r3, [pc, #340]	; (800d094 <turn135outR+0x3c8>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	701a      	strb	r2, [r3, #0]
}
 800cf44:	e09c      	b.n	800d080 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cf46:	2300      	movs	r3, #0
 800cf48:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf56:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cf5a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf5e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cf62:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf72:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cf76:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf7a:	eddf 4a47 	vldr	s9, [pc, #284]	; 800d098 <turn135outR+0x3cc>
 800cf7e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	eeb0 2a47 	vmov.f32	s4, s14
 800cf88:	eef0 1a45 	vmov.f32	s3, s10
 800cf8c:	eeb0 1a65 	vmov.f32	s2, s11
 800cf90:	eef0 0a46 	vmov.f32	s1, s12
 800cf94:	eeb0 0a66 	vmov.f32	s0, s13
 800cf98:	f7f5 ffd0 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800cf9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d10c      	bne.n	800cfbe <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cfa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cfa8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cfac:	eeb0 1a47 	vmov.f32	s2, s14
 800cfb0:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d0a4 <turn135outR+0x3d8>
 800cfb4:	eeb0 0a67 	vmov.f32	s0, s15
 800cfb8:	f7f6 ff36 	bl	8003e28 <mollifier_slalom_table>
 800cfbc:	e015      	b.n	800cfea <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cfbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfc2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cfc6:	eef1 7a67 	vneg.f32	s15, s15
 800cfca:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cfce:	eef0 2a66 	vmov.f32	s5, s13
 800cfd2:	eeb0 2a67 	vmov.f32	s4, s15
 800cfd6:	eddf 1a31 	vldr	s3, [pc, #196]	; 800d09c <turn135outR+0x3d0>
 800cfda:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800d09c <turn135outR+0x3d0>
 800cfde:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d0a4 <turn135outR+0x3d8>
 800cfe2:	eeb0 0a47 	vmov.f32	s0, s14
 800cfe6:	f7f6 fdcf 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cfea:	2301      	movs	r3, #1
 800cfec:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cff2:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cff6:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cffa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cffe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d002:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d006:	edd7 7a01 	vldr	s15, [r7, #4]
 800d00a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d012:	eef0 7ae7 	vabs.f32	s15, s15
 800d016:	ee17 0a90 	vmov	r0, s15
 800d01a:	f7f3 fabd 	bl	8000598 <__aeabi_f2d>
 800d01e:	f04f 0200 	mov.w	r2, #0
 800d022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d026:	f7f3 fc39 	bl	800089c <__aeabi_ddiv>
 800d02a:	4602      	mov	r2, r0
 800d02c:	460b      	mov	r3, r1
 800d02e:	4614      	mov	r4, r2
 800d030:	461d      	mov	r5, r3
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	4618      	mov	r0, r3
 800d036:	f7f3 faaf 	bl	8000598 <__aeabi_f2d>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	4620      	mov	r0, r4
 800d040:	4629      	mov	r1, r5
 800d042:	f7f3 fc2b 	bl	800089c <__aeabi_ddiv>
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	4610      	mov	r0, r2
 800d04c:	4619      	mov	r1, r3
 800d04e:	f04f 0200 	mov.w	r2, #0
 800d052:	4b16      	ldr	r3, [pc, #88]	; (800d0ac <turn135outR+0x3e0>)
 800d054:	f7f3 f942 	bl	80002dc <__adddf3>
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d05c:	4610      	mov	r0, r2
 800d05e:	4619      	mov	r1, r3
 800d060:	f7f3 fdca 	bl	8000bf8 <__aeabi_d2f>
 800d064:	4603      	mov	r3, r0
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	ee02 3a10 	vmov	s4, r3
 800d06c:	edd7 1a01 	vldr	s3, [r7, #4]
 800d070:	ed97 1a01 	vldr	s2, [r7, #4]
 800d074:	eef0 0a68 	vmov.f32	s1, s17
 800d078:	eeb0 0a48 	vmov.f32	s0, s16
 800d07c:	f7f5 ff5e 	bl	8002f3c <straight_table2>
}
 800d080:	bf00      	nop
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	ecbd 8b02 	vpop	{d8}
 800d08a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d08e:	b004      	add	sp, #16
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	20000808 	.word	0x20000808
 800d098:	42340000 	.word	0x42340000
 800d09c:	00000000 	.word	0x00000000
 800d0a0:	42c4477b 	.word	0x42c4477b
 800d0a4:	c3070000 	.word	0xc3070000
 800d0a8:	42b40000 	.word	0x42b40000
 800d0ac:	408f4000 	.word	0x408f4000

0800d0b0 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d0b0:	b084      	sub	sp, #16
 800d0b2:	b5b0      	push	{r4, r5, r7, lr}
 800d0b4:	ed2d 8b02 	vpush	{d8}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d0c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d0c4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d0c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	f040 80a3 	bne.w	800d218 <turn135outL+0x168>
		highspeed_mode = 1;
 800d0d2:	4be5      	ldr	r3, [pc, #916]	; (800d468 <turn135outL+0x3b8>)
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d0e8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d0ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0fc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d100:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d104:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d46c <turn135outL+0x3bc>
 800d108:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	eeb0 2a47 	vmov.f32	s4, s14
 800d112:	eef0 1a46 	vmov.f32	s3, s12
 800d116:	eeb0 1a66 	vmov.f32	s2, s13
 800d11a:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d470 <turn135outL+0x3c0>
 800d11e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d474 <turn135outL+0x3c4>
 800d122:	f7f5 ff0b 	bl	8002f3c <straight_table2>
		wallmode.WallControlMode=0;
 800d126:	2300      	movs	r3, #0
 800d128:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d12a:	2304      	movs	r3, #4
 800d12c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d12e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d132:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d136:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d13a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d13e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d142:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d14a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d14e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d152:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d46c <turn135outL+0x3bc>
 800d156:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	eeb0 2a47 	vmov.f32	s4, s14
 800d160:	eef0 1a45 	vmov.f32	s3, s10
 800d164:	eeb0 1a65 	vmov.f32	s2, s11
 800d168:	eef0 0a46 	vmov.f32	s1, s12
 800d16c:	eeb0 0a66 	vmov.f32	s0, s13
 800d170:	f7f5 fee4 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800d174:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d10c      	bne.n	800d196 <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d17c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d180:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d184:	eeb0 1a47 	vmov.f32	s2, s14
 800d188:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d478 <turn135outL+0x3c8>
 800d18c:	eeb0 0a67 	vmov.f32	s0, s15
 800d190:	f7f6 fe4a 	bl	8003e28 <mollifier_slalom_table>
 800d194:	e013      	b.n	800d1be <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d196:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d19a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d19e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d1a2:	eef0 2a66 	vmov.f32	s5, s13
 800d1a6:	eeb0 2a47 	vmov.f32	s4, s14
 800d1aa:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d470 <turn135outL+0x3c0>
 800d1ae:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d470 <turn135outL+0x3c0>
 800d1b2:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d478 <turn135outL+0x3c8>
 800d1b6:	eeb0 0a67 	vmov.f32	s0, s15
 800d1ba:	f7f6 fce5 	bl	8003b88 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d1c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d1ca:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d47c <turn135outL+0x3cc>
 800d1ce:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d1d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d1d6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1e6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d1ea:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d1ee:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d46c <turn135outL+0x3bc>
 800d1f2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	eeb0 2a47 	vmov.f32	s4, s14
 800d1fc:	eef0 1a65 	vmov.f32	s3, s11
 800d200:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d470 <turn135outL+0x3c0>
 800d204:	eef0 0a46 	vmov.f32	s1, s12
 800d208:	eeb0 0a66 	vmov.f32	s0, s13
 800d20c:	f7f5 fe96 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800d210:	4b95      	ldr	r3, [pc, #596]	; (800d468 <turn135outL+0x3b8>)
 800d212:	2200      	movs	r2, #0
 800d214:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d216:	e11e      	b.n	800d456 <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d218:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d97f      	bls.n	800d320 <turn135outL+0x270>
		highspeed_mode = 1;
 800d220:	4b91      	ldr	r3, [pc, #580]	; (800d468 <turn135outL+0x3b8>)
 800d222:	2201      	movs	r2, #1
 800d224:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d226:	2300      	movs	r3, #0
 800d228:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d22a:	2300      	movs	r3, #0
 800d22c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d22e:	2304      	movs	r3, #4
 800d230:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d232:	2300      	movs	r3, #0
 800d234:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d236:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d23a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d23e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d242:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d246:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d24a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d24e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d252:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d256:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d25a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d46c <turn135outL+0x3bc>
 800d25e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	eeb0 2a47 	vmov.f32	s4, s14
 800d268:	eef0 1a45 	vmov.f32	s3, s10
 800d26c:	eeb0 1a65 	vmov.f32	s2, s11
 800d270:	eef0 0a46 	vmov.f32	s1, s12
 800d274:	eeb0 0a66 	vmov.f32	s0, s13
 800d278:	f7f5 fe60 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800d27c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d280:	2b01      	cmp	r3, #1
 800d282:	d10c      	bne.n	800d29e <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d284:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d288:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d28c:	eeb0 1a47 	vmov.f32	s2, s14
 800d290:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d478 <turn135outL+0x3c8>
 800d294:	eeb0 0a67 	vmov.f32	s0, s15
 800d298:	f7f6 fdc6 	bl	8003e28 <mollifier_slalom_table>
 800d29c:	e013      	b.n	800d2c6 <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d29e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2a6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d2aa:	eef0 2a66 	vmov.f32	s5, s13
 800d2ae:	eeb0 2a47 	vmov.f32	s4, s14
 800d2b2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d470 <turn135outL+0x3c0>
 800d2b6:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d470 <turn135outL+0x3c0>
 800d2ba:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d478 <turn135outL+0x3c8>
 800d2be:	eeb0 0a67 	vmov.f32	s0, s15
 800d2c2:	f7f6 fc61 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d2ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d2d2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d47c <turn135outL+0x3cc>
 800d2d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d2da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d2de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2ee:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d2f2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d2f6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d46c <turn135outL+0x3bc>
 800d2fa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	eeb0 2a47 	vmov.f32	s4, s14
 800d304:	eef0 1a65 	vmov.f32	s3, s11
 800d308:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d470 <turn135outL+0x3c0>
 800d30c:	eef0 0a46 	vmov.f32	s1, s12
 800d310:	eeb0 0a66 	vmov.f32	s0, s13
 800d314:	f7f5 fe12 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800d318:	4b53      	ldr	r3, [pc, #332]	; (800d468 <turn135outL+0x3b8>)
 800d31a:	2200      	movs	r2, #0
 800d31c:	701a      	strb	r2, [r3, #0]
}
 800d31e:	e09a      	b.n	800d456 <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d320:	2300      	movs	r3, #0
 800d322:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d324:	2300      	movs	r3, #0
 800d326:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d328:	2304      	movs	r3, #4
 800d32a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d32c:	2300      	movs	r3, #0
 800d32e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d330:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d334:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d338:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d33c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d340:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d344:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d34c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d350:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d354:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d46c <turn135outL+0x3bc>
 800d358:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	eeb0 2a47 	vmov.f32	s4, s14
 800d362:	eef0 1a45 	vmov.f32	s3, s10
 800d366:	eeb0 1a65 	vmov.f32	s2, s11
 800d36a:	eef0 0a46 	vmov.f32	s1, s12
 800d36e:	eeb0 0a66 	vmov.f32	s0, s13
 800d372:	f7f5 fde3 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800d376:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d10c      	bne.n	800d398 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d37e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d382:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d386:	eeb0 1a47 	vmov.f32	s2, s14
 800d38a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d478 <turn135outL+0x3c8>
 800d38e:	eeb0 0a67 	vmov.f32	s0, s15
 800d392:	f7f6 fd49 	bl	8003e28 <mollifier_slalom_table>
 800d396:	e013      	b.n	800d3c0 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d39c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d3a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d3a4:	eef0 2a66 	vmov.f32	s5, s13
 800d3a8:	eeb0 2a47 	vmov.f32	s4, s14
 800d3ac:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d470 <turn135outL+0x3c0>
 800d3b0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d470 <turn135outL+0x3c0>
 800d3b4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d478 <turn135outL+0x3c8>
 800d3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800d3bc:	f7f6 fbe4 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d3c8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d3cc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d3d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d3e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3e8:	eef0 7ae7 	vabs.f32	s15, s15
 800d3ec:	ee17 0a90 	vmov	r0, s15
 800d3f0:	f7f3 f8d2 	bl	8000598 <__aeabi_f2d>
 800d3f4:	f04f 0200 	mov.w	r2, #0
 800d3f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3fc:	f7f3 fa4e 	bl	800089c <__aeabi_ddiv>
 800d400:	4602      	mov	r2, r0
 800d402:	460b      	mov	r3, r1
 800d404:	4614      	mov	r4, r2
 800d406:	461d      	mov	r5, r3
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7f3 f8c4 	bl	8000598 <__aeabi_f2d>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4620      	mov	r0, r4
 800d416:	4629      	mov	r1, r5
 800d418:	f7f3 fa40 	bl	800089c <__aeabi_ddiv>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4610      	mov	r0, r2
 800d422:	4619      	mov	r1, r3
 800d424:	f04f 0200 	mov.w	r2, #0
 800d428:	4b15      	ldr	r3, [pc, #84]	; (800d480 <turn135outL+0x3d0>)
 800d42a:	f7f2 ff57 	bl	80002dc <__adddf3>
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d432:	4610      	mov	r0, r2
 800d434:	4619      	mov	r1, r3
 800d436:	f7f3 fbdf 	bl	8000bf8 <__aeabi_d2f>
 800d43a:	4603      	mov	r3, r0
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	ee02 3a10 	vmov	s4, r3
 800d442:	edd7 1a01 	vldr	s3, [r7, #4]
 800d446:	ed97 1a01 	vldr	s2, [r7, #4]
 800d44a:	eef0 0a68 	vmov.f32	s1, s17
 800d44e:	eeb0 0a48 	vmov.f32	s0, s16
 800d452:	f7f5 fd73 	bl	8002f3c <straight_table2>
}
 800d456:	bf00      	nop
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	ecbd 8b02 	vpop	{d8}
 800d460:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d464:	b004      	add	sp, #16
 800d466:	4770      	bx	lr
 800d468:	20000808 	.word	0x20000808
 800d46c:	42340000 	.word	0x42340000
 800d470:	00000000 	.word	0x00000000
 800d474:	42c4477b 	.word	0x42c4477b
 800d478:	43070000 	.word	0x43070000
 800d47c:	42b40000 	.word	0x42b40000
 800d480:	408f4000 	.word	0x408f4000
 800d484:	00000000 	.word	0x00000000

0800d488 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d488:	b084      	sub	sp, #16
 800d48a:	b5b0      	push	{r4, r5, r7, lr}
 800d48c:	ed2d 8b02 	vpush	{d8}
 800d490:	b084      	sub	sp, #16
 800d492:	af00      	add	r7, sp, #0
 800d494:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d49c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d4a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	f040 80af 	bne.w	800d608 <V90R+0x180>
			highspeed_mode = 1;
 800d4aa:	4bc1      	ldr	r3, [pc, #772]	; (800d7b0 <V90R+0x328>)
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d4c0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d4c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4d4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d4d8:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d4dc:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d7b4 <V90R+0x32c>
 800d4e0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	eeb0 2a47 	vmov.f32	s4, s14
 800d4ea:	eef0 1a46 	vmov.f32	s3, s12
 800d4ee:	eeb0 1a66 	vmov.f32	s2, s13
 800d4f2:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d7bc <V90R+0x334>
 800d4f6:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d7b8 <V90R+0x330>
 800d4fa:	f7f5 fd1f 	bl	8002f3c <straight_table2>
			wallmode.WallControlMode=0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d502:	2303      	movs	r3, #3
 800d504:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d506:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d50a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d50e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d512:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d516:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d51a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d51e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d522:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d526:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d52a:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d7b4 <V90R+0x32c>
 800d52e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	eeb0 2a47 	vmov.f32	s4, s14
 800d538:	eef0 1a45 	vmov.f32	s3, s10
 800d53c:	eeb0 1a65 	vmov.f32	s2, s11
 800d540:	eef0 0a46 	vmov.f32	s1, s12
 800d544:	eeb0 0a66 	vmov.f32	s0, s13
 800d548:	f7f5 fcf8 	bl	8002f3c <straight_table2>
			if(mollifier_mode == ON){
 800d54c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d550:	2b01      	cmp	r3, #1
 800d552:	d10c      	bne.n	800d56e <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d554:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d558:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d55c:	eeb0 1a47 	vmov.f32	s2, s14
 800d560:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d7c0 <V90R+0x338>
 800d564:	eeb0 0a67 	vmov.f32	s0, s15
 800d568:	f7f6 fc5e 	bl	8003e28 <mollifier_slalom_table>
 800d56c:	e015      	b.n	800d59a <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d56e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d572:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d576:	eef1 7a67 	vneg.f32	s15, s15
 800d57a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d57e:	eef0 2a66 	vmov.f32	s5, s13
 800d582:	eeb0 2a67 	vmov.f32	s4, s15
 800d586:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d7bc <V90R+0x334>
 800d58a:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d7bc <V90R+0x334>
 800d58e:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d7c0 <V90R+0x338>
 800d592:	eeb0 0a47 	vmov.f32	s0, s14
 800d596:	f7f6 faf7 	bl	8003b88 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d59a:	2300      	movs	r3, #0
 800d59c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7f2 fff7 	bl	8000598 <__aeabi_f2d>
 800d5aa:	a37f      	add	r3, pc, #508	; (adr r3, 800d7a8 <V90R+0x320>)
 800d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b0:	f7f2 fe94 	bl	80002dc <__adddf3>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	f7f3 fb1c 	bl	8000bf8 <__aeabi_d2f>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d5c6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5d6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d5da:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d5de:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d7b4 <V90R+0x32c>
 800d5e2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	eeb0 2a47 	vmov.f32	s4, s14
 800d5ec:	eef0 1a46 	vmov.f32	s3, s12
 800d5f0:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d7bc <V90R+0x334>
 800d5f4:	eef0 0a66 	vmov.f32	s1, s13
 800d5f8:	ee00 3a10 	vmov	s0, r3
 800d5fc:	f7f5 fc9e 	bl	8002f3c <straight_table2>
			highspeed_mode = 0;
 800d600:	4b6b      	ldr	r3, [pc, #428]	; (800d7b0 <V90R+0x328>)
 800d602:	2200      	movs	r2, #0
 800d604:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d606:	e13e      	b.n	800d886 <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d608:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	f240 808c 	bls.w	800d72a <V90R+0x2a2>
		highspeed_mode = 1;
 800d612:	4b67      	ldr	r3, [pc, #412]	; (800d7b0 <V90R+0x328>)
 800d614:	2201      	movs	r2, #1
 800d616:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d618:	2300      	movs	r3, #0
 800d61a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d620:	2303      	movs	r3, #3
 800d622:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d624:	2300      	movs	r3, #0
 800d626:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d628:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d62c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d630:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d634:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d638:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d63c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d640:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d644:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d648:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d64c:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d7b4 <V90R+0x32c>
 800d650:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	eeb0 2a47 	vmov.f32	s4, s14
 800d65a:	eef0 1a45 	vmov.f32	s3, s10
 800d65e:	eeb0 1a65 	vmov.f32	s2, s11
 800d662:	eef0 0a46 	vmov.f32	s1, s12
 800d666:	eeb0 0a66 	vmov.f32	s0, s13
 800d66a:	f7f5 fc67 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800d66e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d672:	2b01      	cmp	r3, #1
 800d674:	d10c      	bne.n	800d690 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d676:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d67a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d67e:	eeb0 1a47 	vmov.f32	s2, s14
 800d682:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d7c0 <V90R+0x338>
 800d686:	eeb0 0a67 	vmov.f32	s0, s15
 800d68a:	f7f6 fbcd 	bl	8003e28 <mollifier_slalom_table>
 800d68e:	e015      	b.n	800d6bc <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d690:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d694:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d698:	eef1 7a67 	vneg.f32	s15, s15
 800d69c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d6a0:	eef0 2a66 	vmov.f32	s5, s13
 800d6a4:	eeb0 2a67 	vmov.f32	s4, s15
 800d6a8:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d7bc <V90R+0x334>
 800d6ac:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d7bc <V90R+0x334>
 800d6b0:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d7c0 <V90R+0x338>
 800d6b4:	eeb0 0a47 	vmov.f32	s0, s14
 800d6b8:	f7f6 fa66 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7f2 ff66 	bl	8000598 <__aeabi_f2d>
 800d6cc:	a336      	add	r3, pc, #216	; (adr r3, 800d7a8 <V90R+0x320>)
 800d6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d2:	f7f2 fe03 	bl	80002dc <__adddf3>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4610      	mov	r0, r2
 800d6dc:	4619      	mov	r1, r3
 800d6de:	f7f3 fa8b 	bl	8000bf8 <__aeabi_d2f>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d6e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6f8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d6fc:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d700:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d7b4 <V90R+0x32c>
 800d704:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	eeb0 2a47 	vmov.f32	s4, s14
 800d70e:	eef0 1a46 	vmov.f32	s3, s12
 800d712:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d7bc <V90R+0x334>
 800d716:	eef0 0a66 	vmov.f32	s1, s13
 800d71a:	ee00 3a10 	vmov	s0, r3
 800d71e:	f7f5 fc0d 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800d722:	4b23      	ldr	r3, [pc, #140]	; (800d7b0 <V90R+0x328>)
 800d724:	2200      	movs	r2, #0
 800d726:	701a      	strb	r2, [r3, #0]
}
 800d728:	e0ad      	b.n	800d886 <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d72a:	2300      	movs	r3, #0
 800d72c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d72e:	2300      	movs	r3, #0
 800d730:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d732:	2303      	movs	r3, #3
 800d734:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d736:	2300      	movs	r3, #0
 800d738:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d73a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d73e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d742:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d746:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d74a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d74e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d752:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d756:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d75a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d75e:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d7b4 <V90R+0x32c>
 800d762:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	eeb0 2a47 	vmov.f32	s4, s14
 800d76c:	eef0 1a45 	vmov.f32	s3, s10
 800d770:	eeb0 1a65 	vmov.f32	s2, s11
 800d774:	eef0 0a46 	vmov.f32	s1, s12
 800d778:	eeb0 0a66 	vmov.f32	s0, s13
 800d77c:	f7f5 fbde 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800d780:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d784:	2b01      	cmp	r3, #1
 800d786:	d11d      	bne.n	800d7c4 <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d788:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d78c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d790:	eeb0 1a47 	vmov.f32	s2, s14
 800d794:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d7c0 <V90R+0x338>
 800d798:	eeb0 0a67 	vmov.f32	s0, s15
 800d79c:	f7f6 fb44 	bl	8003e28 <mollifier_slalom_table>
 800d7a0:	e026      	b.n	800d7f0 <V90R+0x368>
 800d7a2:	bf00      	nop
 800d7a4:	f3af 8000 	nop.w
 800d7a8:	c022ec18 	.word	0xc022ec18
 800d7ac:	405fd1de 	.word	0x405fd1de
 800d7b0:	20000808 	.word	0x20000808
 800d7b4:	42340000 	.word	0x42340000
 800d7b8:	42c4477b 	.word	0x42c4477b
 800d7bc:	00000000 	.word	0x00000000
 800d7c0:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d7c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d7cc:	eef1 7a67 	vneg.f32	s15, s15
 800d7d0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d7d4:	eef0 2a66 	vmov.f32	s5, s13
 800d7d8:	eeb0 2a67 	vmov.f32	s4, s15
 800d7dc:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d7bc <V90R+0x334>
 800d7e0:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d7bc <V90R+0x334>
 800d7e4:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d7c0 <V90R+0x338>
 800d7e8:	eeb0 0a47 	vmov.f32	s0, s14
 800d7ec:	f7f6 f9cc 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d7f0:	2303      	movs	r3, #3
 800d7f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d7f8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d7fc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d800:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d804:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d80c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d810:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d814:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d818:	eef0 7ae7 	vabs.f32	s15, s15
 800d81c:	ee17 0a90 	vmov	r0, s15
 800d820:	f7f2 feba 	bl	8000598 <__aeabi_f2d>
 800d824:	f04f 0200 	mov.w	r2, #0
 800d828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d82c:	f7f3 f836 	bl	800089c <__aeabi_ddiv>
 800d830:	4602      	mov	r2, r0
 800d832:	460b      	mov	r3, r1
 800d834:	4614      	mov	r4, r2
 800d836:	461d      	mov	r5, r3
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7f2 feac 	bl	8000598 <__aeabi_f2d>
 800d840:	4602      	mov	r2, r0
 800d842:	460b      	mov	r3, r1
 800d844:	4620      	mov	r0, r4
 800d846:	4629      	mov	r1, r5
 800d848:	f7f3 f828 	bl	800089c <__aeabi_ddiv>
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	4610      	mov	r0, r2
 800d852:	4619      	mov	r1, r3
 800d854:	f04f 0200 	mov.w	r2, #0
 800d858:	4b0f      	ldr	r3, [pc, #60]	; (800d898 <V90R+0x410>)
 800d85a:	f7f2 fd3f 	bl	80002dc <__adddf3>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d862:	4610      	mov	r0, r2
 800d864:	4619      	mov	r1, r3
 800d866:	f7f3 f9c7 	bl	8000bf8 <__aeabi_d2f>
 800d86a:	4603      	mov	r3, r0
 800d86c:	68f8      	ldr	r0, [r7, #12]
 800d86e:	ee02 3a10 	vmov	s4, r3
 800d872:	edd7 1a01 	vldr	s3, [r7, #4]
 800d876:	ed97 1a01 	vldr	s2, [r7, #4]
 800d87a:	eef0 0a68 	vmov.f32	s1, s17
 800d87e:	eeb0 0a48 	vmov.f32	s0, s16
 800d882:	f7f5 fb5b 	bl	8002f3c <straight_table2>
}
 800d886:	bf00      	nop
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	ecbd 8b02 	vpop	{d8}
 800d890:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d894:	b004      	add	sp, #16
 800d896:	4770      	bx	lr
 800d898:	408f4000 	.word	0x408f4000
 800d89c:	00000000 	.word	0x00000000

0800d8a0 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d8a0:	b084      	sub	sp, #16
 800d8a2:	b5b0      	push	{r4, r5, r7, lr}
 800d8a4:	ed2d 8b02 	vpush	{d8}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d8b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d8b4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d8b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	f040 80ad 	bne.w	800da1c <V90L+0x17c>
				highspeed_mode = 1;
 800d8c2:	4bbf      	ldr	r3, [pc, #764]	; (800dbc0 <V90L+0x320>)
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d8d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d8dc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d8e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8ec:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d8f0:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d8f4:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800dbc4 <V90L+0x324>
 800d8f8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	eeb0 2a47 	vmov.f32	s4, s14
 800d902:	eef0 1a46 	vmov.f32	s3, s12
 800d906:	eeb0 1a66 	vmov.f32	s2, s13
 800d90a:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800dbcc <V90L+0x32c>
 800d90e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800dbc8 <V90L+0x328>
 800d912:	f7f5 fb13 	bl	8002f3c <straight_table2>
				wallmode.WallControlMode=0;
 800d916:	2300      	movs	r3, #0
 800d918:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d91a:	2304      	movs	r3, #4
 800d91c:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d91e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d922:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d926:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d92a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d92e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d932:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d93a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d93e:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d942:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800dbc4 <V90L+0x324>
 800d946:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	eeb0 2a47 	vmov.f32	s4, s14
 800d950:	eef0 1a45 	vmov.f32	s3, s10
 800d954:	eeb0 1a65 	vmov.f32	s2, s11
 800d958:	eef0 0a46 	vmov.f32	s1, s12
 800d95c:	eeb0 0a66 	vmov.f32	s0, s13
 800d960:	f7f5 faec 	bl	8002f3c <straight_table2>
				if(mollifier_mode == ON){
 800d964:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d10c      	bne.n	800d986 <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d96c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d970:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d974:	eeb0 1a47 	vmov.f32	s2, s14
 800d978:	eddf 0a95 	vldr	s1, [pc, #596]	; 800dbd0 <V90L+0x330>
 800d97c:	eeb0 0a67 	vmov.f32	s0, s15
 800d980:	f7f6 fa52 	bl	8003e28 <mollifier_slalom_table>
 800d984:	e013      	b.n	800d9ae <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d986:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d98a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d98e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d992:	eef0 2a66 	vmov.f32	s5, s13
 800d996:	eeb0 2a47 	vmov.f32	s4, s14
 800d99a:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800dbcc <V90L+0x32c>
 800d99e:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800dbcc <V90L+0x32c>
 800d9a2:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800dbd0 <V90L+0x330>
 800d9a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d9aa:	f7f6 f8ed 	bl	8003b88 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7f2 fded 	bl	8000598 <__aeabi_f2d>
 800d9be:	a37e      	add	r3, pc, #504	; (adr r3, 800dbb8 <V90L+0x318>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f2 fc8a 	bl	80002dc <__adddf3>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4610      	mov	r0, r2
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	f7f3 f912 	bl	8000bf8 <__aeabi_d2f>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d9da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d9de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9ea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d9ee:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d9f2:	eddf 5a74 	vldr	s11, [pc, #464]	; 800dbc4 <V90L+0x324>
 800d9f6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	eeb0 2a47 	vmov.f32	s4, s14
 800da00:	eef0 1a46 	vmov.f32	s3, s12
 800da04:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800dbcc <V90L+0x32c>
 800da08:	eef0 0a66 	vmov.f32	s1, s13
 800da0c:	ee00 3a10 	vmov	s0, r3
 800da10:	f7f5 fa94 	bl	8002f3c <straight_table2>
				highspeed_mode = 0;
 800da14:	4b6a      	ldr	r3, [pc, #424]	; (800dbc0 <V90L+0x320>)
 800da16:	2200      	movs	r2, #0
 800da18:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800da1a:	e13a      	b.n	800dc92 <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800da1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800da20:	2b01      	cmp	r3, #1
 800da22:	f240 808a 	bls.w	800db3a <V90L+0x29a>
		highspeed_mode = 1;
 800da26:	4b66      	ldr	r3, [pc, #408]	; (800dbc0 <V90L+0x320>)
 800da28:	2201      	movs	r2, #1
 800da2a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da30:	2300      	movs	r3, #0
 800da32:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800da34:	2304      	movs	r3, #4
 800da36:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800da38:	2300      	movs	r3, #0
 800da3a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800da3c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800da40:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800da44:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800da48:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da58:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800da5c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800da60:	eddf 4a58 	vldr	s9, [pc, #352]	; 800dbc4 <V90L+0x324>
 800da64:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	eeb0 2a47 	vmov.f32	s4, s14
 800da6e:	eef0 1a45 	vmov.f32	s3, s10
 800da72:	eeb0 1a65 	vmov.f32	s2, s11
 800da76:	eef0 0a46 	vmov.f32	s1, s12
 800da7a:	eeb0 0a66 	vmov.f32	s0, s13
 800da7e:	f7f5 fa5d 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800da82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800da86:	2b01      	cmp	r3, #1
 800da88:	d10c      	bne.n	800daa4 <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800da8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da8e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da92:	eeb0 1a47 	vmov.f32	s2, s14
 800da96:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800dbd0 <V90L+0x330>
 800da9a:	eeb0 0a67 	vmov.f32	s0, s15
 800da9e:	f7f6 f9c3 	bl	8003e28 <mollifier_slalom_table>
 800daa2:	e013      	b.n	800dacc <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800daa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daa8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800daac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dab0:	eef0 2a66 	vmov.f32	s5, s13
 800dab4:	eeb0 2a47 	vmov.f32	s4, s14
 800dab8:	eddf 1a44 	vldr	s3, [pc, #272]	; 800dbcc <V90L+0x32c>
 800dabc:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800dbcc <V90L+0x32c>
 800dac0:	eddf 0a43 	vldr	s1, [pc, #268]	; 800dbd0 <V90L+0x330>
 800dac4:	eeb0 0a67 	vmov.f32	s0, s15
 800dac8:	f7f6 f85e 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=0;
 800dacc:	2300      	movs	r3, #0
 800dace:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7f2 fd5e 	bl	8000598 <__aeabi_f2d>
 800dadc:	a336      	add	r3, pc, #216	; (adr r3, 800dbb8 <V90L+0x318>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	f7f2 fbfb 	bl	80002dc <__adddf3>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4610      	mov	r0, r2
 800daec:	4619      	mov	r1, r3
 800daee:	f7f3 f883 	bl	8000bf8 <__aeabi_d2f>
 800daf2:	4603      	mov	r3, r0
 800daf4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800daf8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dafc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db08:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800db0c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800db10:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800dbc4 <V90L+0x324>
 800db14:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	eeb0 2a47 	vmov.f32	s4, s14
 800db1e:	eef0 1a46 	vmov.f32	s3, s12
 800db22:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800dbcc <V90L+0x32c>
 800db26:	eef0 0a66 	vmov.f32	s1, s13
 800db2a:	ee00 3a10 	vmov	s0, r3
 800db2e:	f7f5 fa05 	bl	8002f3c <straight_table2>
		highspeed_mode = 0;
 800db32:	4b23      	ldr	r3, [pc, #140]	; (800dbc0 <V90L+0x320>)
 800db34:	2200      	movs	r2, #0
 800db36:	701a      	strb	r2, [r3, #0]
}
 800db38:	e0ab      	b.n	800dc92 <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800db3a:	2300      	movs	r3, #0
 800db3c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800db3e:	2300      	movs	r3, #0
 800db40:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800db42:	2304      	movs	r3, #4
 800db44:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800db46:	2300      	movs	r3, #0
 800db48:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800db4a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800db4e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800db52:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800db56:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800db5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db66:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800db6a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800db6e:	eddf 4a15 	vldr	s9, [pc, #84]	; 800dbc4 <V90L+0x324>
 800db72:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	eeb0 2a47 	vmov.f32	s4, s14
 800db7c:	eef0 1a45 	vmov.f32	s3, s10
 800db80:	eeb0 1a65 	vmov.f32	s2, s11
 800db84:	eef0 0a46 	vmov.f32	s1, s12
 800db88:	eeb0 0a66 	vmov.f32	s0, s13
 800db8c:	f7f5 f9d6 	bl	8002f3c <straight_table2>
		if(mollifier_mode == ON){
 800db90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800db94:	2b01      	cmp	r3, #1
 800db96:	d11d      	bne.n	800dbd4 <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800db98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db9c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dba0:	eeb0 1a47 	vmov.f32	s2, s14
 800dba4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800dbd0 <V90L+0x330>
 800dba8:	eeb0 0a67 	vmov.f32	s0, s15
 800dbac:	f7f6 f93c 	bl	8003e28 <mollifier_slalom_table>
 800dbb0:	e024      	b.n	800dbfc <V90L+0x35c>
 800dbb2:	bf00      	nop
 800dbb4:	f3af 8000 	nop.w
 800dbb8:	c022ec18 	.word	0xc022ec18
 800dbbc:	405fd1de 	.word	0x405fd1de
 800dbc0:	20000808 	.word	0x20000808
 800dbc4:	42340000 	.word	0x42340000
 800dbc8:	42d4477b 	.word	0x42d4477b
 800dbcc:	00000000 	.word	0x00000000
 800dbd0:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dbd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbd8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dbdc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dbe0:	eef0 2a66 	vmov.f32	s5, s13
 800dbe4:	eeb0 2a47 	vmov.f32	s4, s14
 800dbe8:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800dbcc <V90L+0x32c>
 800dbec:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800dbcc <V90L+0x32c>
 800dbf0:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800dbd0 <V90L+0x330>
 800dbf4:	eeb0 0a67 	vmov.f32	s0, s15
 800dbf8:	f7f5 ffc6 	bl	8003b88 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800dbfc:	2303      	movs	r3, #3
 800dbfe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dc04:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800dc08:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800dc0c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc18:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dc20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc24:	eef0 7ae7 	vabs.f32	s15, s15
 800dc28:	ee17 0a90 	vmov	r0, s15
 800dc2c:	f7f2 fcb4 	bl	8000598 <__aeabi_f2d>
 800dc30:	f04f 0200 	mov.w	r2, #0
 800dc34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc38:	f7f2 fe30 	bl	800089c <__aeabi_ddiv>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4614      	mov	r4, r2
 800dc42:	461d      	mov	r5, r3
 800dc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7f2 fca6 	bl	8000598 <__aeabi_f2d>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	460b      	mov	r3, r1
 800dc50:	4620      	mov	r0, r4
 800dc52:	4629      	mov	r1, r5
 800dc54:	f7f2 fe22 	bl	800089c <__aeabi_ddiv>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	4619      	mov	r1, r3
 800dc60:	f04f 0200 	mov.w	r2, #0
 800dc64:	4b0f      	ldr	r3, [pc, #60]	; (800dca4 <V90L+0x404>)
 800dc66:	f7f2 fb39 	bl	80002dc <__adddf3>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dc6e:	4610      	mov	r0, r2
 800dc70:	4619      	mov	r1, r3
 800dc72:	f7f2 ffc1 	bl	8000bf8 <__aeabi_d2f>
 800dc76:	4603      	mov	r3, r0
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	ee02 3a10 	vmov	s4, r3
 800dc7e:	edd7 1a01 	vldr	s3, [r7, #4]
 800dc82:	ed97 1a01 	vldr	s2, [r7, #4]
 800dc86:	eef0 0a68 	vmov.f32	s1, s17
 800dc8a:	eeb0 0a48 	vmov.f32	s0, s16
 800dc8e:	f7f5 f955 	bl	8002f3c <straight_table2>
}
 800dc92:	bf00      	nop
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	ecbd 8b02 	vpop	{d8}
 800dc9c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dca0:	b004      	add	sp, #16
 800dca2:	4770      	bx	lr
 800dca4:	408f4000 	.word	0x408f4000

0800dca8 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dca8:	b084      	sub	sp, #16
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b086      	sub	sp, #24
 800dcae:	af04      	add	r7, sp, #16
 800dcb0:	f107 0c10 	add.w	ip, r7, #16
 800dcb4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dcb8:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dcbc:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d116      	bne.n	800dcf2 <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dcc4:	2001      	movs	r0, #1
 800dcc6:	f7f9 feaf 	bl	8007a28 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dcca:	2003      	movs	r0, #3
 800dccc:	f7f9 feb6 	bl	8007a3c <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dcd0:	ed97 0a01 	vldr	s0, [r7, #4]
 800dcd4:	f7f9 ff46 	bl	8007b64 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800dcd8:	f7f9 ff30 	bl	8007b3c <pl_FunMotor_start>
		HAL_Delay(600);
 800dcdc:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dce0:	f009 ffc0 	bl	8017c64 <HAL_Delay>
		reset_gyro();
 800dce4:	f7f3 fcf0 	bl	80016c8 <reset_gyro>
		reset_speed();
 800dce8:	f7f3 f996 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dcec:	f7f6 fd42 	bl	8004774 <clear_Ierror>
 800dcf0:	e00b      	b.n	800dd0a <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	f7f9 fe98 	bl	8007a28 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dcf8:	2003      	movs	r0, #3
 800dcfa:	f7f9 fe9f 	bl	8007a3c <pl_L_DriveMotor_mode>
		reset_gyro();
 800dcfe:	f7f3 fce3 	bl	80016c8 <reset_gyro>
		reset_speed();
 800dd02:	f7f3 f989 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dd06:	f7f6 fd35 	bl	8004774 <clear_Ierror>

	}
	record_mode=2;
 800dd0a:	4ba8      	ldr	r3, [pc, #672]	; (800dfac <testturning+0x304>)
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800dd10:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d110      	bne.n	800dd3a <testturning+0x92>
 800dd18:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd1c:	9303      	str	r3, [sp, #12]
 800dd1e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dd22:	9302      	str	r3, [sp, #8]
 800dd24:	2301      	movs	r3, #1
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	f107 0318 	add.w	r3, r7, #24
 800dd30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd32:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800dfb0 <testturning+0x308>
 800dd36:	f7fc f9cb 	bl	800a0d0 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800dd3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d110      	bne.n	800dd64 <testturning+0xbc>
 800dd42:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd46:	9303      	str	r3, [sp, #12]
 800dd48:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dd4c:	9302      	str	r3, [sp, #8]
 800dd4e:	2301      	movs	r3, #1
 800dd50:	9301      	str	r3, [sp, #4]
 800dd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd5c:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800dfb0 <testturning+0x308>
 800dd60:	f7fc fb70 	bl	800a444 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800dd64:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	d10d      	bne.n	800dd88 <testturning+0xe0>
 800dd6c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd70:	9302      	str	r3, [sp, #8]
 800dd72:	2301      	movs	r3, #1
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dd7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd80:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800dfb0 <testturning+0x308>
 800dd84:	f7fc fd14 	bl	800a7b0 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800dd88:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd8c:	2b03      	cmp	r3, #3
 800dd8e:	d10d      	bne.n	800ddac <testturning+0x104>
 800dd90:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd94:	9302      	str	r3, [sp, #8]
 800dd96:	2301      	movs	r3, #1
 800dd98:	9301      	str	r3, [sp, #4]
 800dd9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dda2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dda4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800dfb0 <testturning+0x308>
 800dda8:	f7fc fe6c 	bl	800aa84 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800ddac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddb0:	2b04      	cmp	r3, #4
 800ddb2:	d10d      	bne.n	800ddd0 <testturning+0x128>
 800ddb4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddb8:	9302      	str	r3, [sp, #8]
 800ddba:	2301      	movs	r3, #1
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ddc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddc8:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800dfb0 <testturning+0x308>
 800ddcc:	f7fc ffbe 	bl	800ad4c <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800ddd0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddd4:	2b05      	cmp	r3, #5
 800ddd6:	d10e      	bne.n	800ddf6 <testturning+0x14e>
 800ddd8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dddc:	9302      	str	r3, [sp, #8]
 800ddde:	2301      	movs	r3, #1
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ddec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddee:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800dfb0 <testturning+0x308>
 800ddf2:	f7fd f915 	bl	800b020 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800ddf6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddfa:	2b06      	cmp	r3, #6
 800ddfc:	d10e      	bne.n	800de1c <testturning+0x174>
 800ddfe:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de02:	9302      	str	r3, [sp, #8]
 800de04:	2301      	movs	r3, #1
 800de06:	9301      	str	r3, [sp, #4]
 800de08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800de12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de14:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800dfb0 <testturning+0x308>
 800de18:	f7fd fa6a 	bl	800b2f0 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800de1c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de20:	2b07      	cmp	r3, #7
 800de22:	d10e      	bne.n	800de42 <testturning+0x19a>
 800de24:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de28:	9302      	str	r3, [sp, #8]
 800de2a:	2301      	movs	r3, #1
 800de2c:	9301      	str	r3, [sp, #4]
 800de2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800de38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de3a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800dfb0 <testturning+0x308>
 800de3e:	f7fd fc9f 	bl	800b780 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800de42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de46:	2b08      	cmp	r3, #8
 800de48:	d10e      	bne.n	800de68 <testturning+0x1c0>
 800de4a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de4e:	9302      	str	r3, [sp, #8]
 800de50:	2301      	movs	r3, #1
 800de52:	9301      	str	r3, [sp, #4]
 800de54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800de5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de60:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800dfb0 <testturning+0x308>
 800de64:	f7fd fecc 	bl	800bc00 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800de68:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de6c:	2b09      	cmp	r3, #9
 800de6e:	d10e      	bne.n	800de8e <testturning+0x1e6>
 800de70:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de74:	9302      	str	r3, [sp, #8]
 800de76:	2301      	movs	r3, #1
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800de84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de86:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800dfb0 <testturning+0x308>
 800de8a:	f7fe f901 	bl	800c090 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800de8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de92:	2b0a      	cmp	r3, #10
 800de94:	d10e      	bne.n	800deb4 <testturning+0x20c>
 800de96:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de9a:	9302      	str	r3, [sp, #8]
 800de9c:	2301      	movs	r3, #1
 800de9e:	9301      	str	r3, [sp, #4]
 800dea0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800deaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800deac:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800dfb0 <testturning+0x308>
 800deb0:	f7fe fb32 	bl	800c518 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800deb4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800deb8:	2b0b      	cmp	r3, #11
 800deba:	d10e      	bne.n	800deda <testturning+0x232>
 800debc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dec0:	9302      	str	r3, [sp, #8]
 800dec2:	2301      	movs	r3, #1
 800dec4:	9301      	str	r3, [sp, #4]
 800dec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800ded0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ded2:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800dfb0 <testturning+0x308>
 800ded6:	f7fe fd11 	bl	800c8fc <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800deda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dede:	2b0c      	cmp	r3, #12
 800dee0:	d10e      	bne.n	800df00 <testturning+0x258>
 800dee2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dee6:	9302      	str	r3, [sp, #8]
 800dee8:	2301      	movs	r3, #1
 800deea:	9301      	str	r3, [sp, #4]
 800deec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800def6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800def8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800dfb0 <testturning+0x308>
 800defc:	f7fe fee6 	bl	800cccc <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800df00:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800df04:	2b0d      	cmp	r3, #13
 800df06:	d10e      	bne.n	800df26 <testturning+0x27e>
 800df08:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800df0c:	9302      	str	r3, [sp, #8]
 800df0e:	2301      	movs	r3, #1
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800df1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df1e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800dfb0 <testturning+0x308>
 800df22:	f7ff f8c5 	bl	800d0b0 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800df26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800df2a:	2b0e      	cmp	r3, #14
 800df2c:	d10e      	bne.n	800df4c <testturning+0x2a4>
 800df2e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800df32:	9302      	str	r3, [sp, #8]
 800df34:	2301      	movs	r3, #1
 800df36:	9301      	str	r3, [sp, #4]
 800df38:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df44:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800dfb0 <testturning+0x308>
 800df48:	f7ff fa9e 	bl	800d488 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800df4c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800df50:	2b0f      	cmp	r3, #15
 800df52:	d10e      	bne.n	800df72 <testturning+0x2ca>
 800df54:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800df58:	9302      	str	r3, [sp, #8]
 800df5a:	2301      	movs	r3, #1
 800df5c:	9301      	str	r3, [sp, #4]
 800df5e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800df68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df6a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800dfb0 <testturning+0x308>
 800df6e:	f7ff fc97 	bl	800d8a0 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800df72:	4b0e      	ldr	r3, [pc, #56]	; (800dfac <testturning+0x304>)
 800df74:	2200      	movs	r2, #0
 800df76:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800df78:	2003      	movs	r0, #3
 800df7a:	f7f9 fd87 	bl	8007a8c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800df7e:	2003      	movs	r0, #3
 800df80:	f7f9 fd5c 	bl	8007a3c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800df84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df88:	f7fa f87e 	bl	8008088 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800df8c:	f7f9 fde0 	bl	8007b50 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800df90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df94:	f7fa f878 	bl	8008088 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800df98:	2000      	movs	r0, #0
 800df9a:	f7f9 fd45 	bl	8007a28 <pl_DriveMotor_standby>

}
 800df9e:	bf00      	nop
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dfa8:	b004      	add	sp, #16
 800dfaa:	4770      	bx	lr
 800dfac:	2000d970 	.word	0x2000d970
 800dfb0:	c2c80000 	.word	0xc2c80000

0800dfb4 <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	2b03      	cmp	r3, #3
 800dfc6:	d823      	bhi.n	800e010 <update_coordinate+0x5c>
 800dfc8:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <update_coordinate+0x1c>)
 800dfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfce:	bf00      	nop
 800dfd0:	0800dfe1 	.word	0x0800dfe1
 800dfd4:	0800dfed 	.word	0x0800dfed
 800dfd8:	0800dff9 	.word	0x0800dff9
 800dfdc:	0800e005 	.word	0x0800e005
	case 1://北
		*y += 1;
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	1c5a      	adds	r2, r3, #1
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	601a      	str	r2, [r3, #0]
		break;
 800dfea:	e011      	b.n	800e010 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	601a      	str	r2, [r3, #0]
		break;
 800dff6:	e00b      	b.n	800e010 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	1e5a      	subs	r2, r3, #1
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	601a      	str	r2, [r3, #0]
		break;
 800e002:	e005      	b.n	800e010 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	1e5a      	subs	r2, r3, #1
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	601a      	str	r2, [r3, #0]
		break;
 800e00e:	bf00      	nop
	}



}
 800e010:	bf00      	nop
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800e01c:	b084      	sub	sp, #16
 800e01e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e020:	b091      	sub	sp, #68	; 0x44
 800e022:	af04      	add	r7, sp, #16
 800e024:	ed87 0a03 	vstr	s0, [r7, #12]
 800e028:	edc7 0a02 	vstr	s1, [r7, #8]
 800e02c:	ed87 1a01 	vstr	s2, [r7, #4]
 800e030:	edc7 1a00 	vstr	s3, [r7]
 800e034:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800e038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800e03c:	4b7d      	ldr	r3, [pc, #500]	; (800e234 <AdatiWayReturn+0x218>)
 800e03e:	2201      	movs	r2, #1
 800e040:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800e042:	2001      	movs	r0, #1
 800e044:	f7f9 fcf0 	bl	8007a28 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800e048:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e04c:	f009 fe0a 	bl	8017c64 <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800e050:	2300      	movs	r3, #0
 800e052:	623b      	str	r3, [r7, #32]
	int y=0;
 800e054:	2300      	movs	r3, #0
 800e056:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800e058:	2301      	movs	r3, #1
 800e05a:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800e05c:	2301      	movs	r3, #1
 800e05e:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800e060:	2300      	movs	r3, #0
 800e062:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800e064:	2300      	movs	r3, #0
 800e066:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800e068:	2300      	movs	r3, #0
 800e06a:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e06c:	4b72      	ldr	r3, [pc, #456]	; (800e238 <AdatiWayReturn+0x21c>)
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	2b95      	cmp	r3, #149	; 0x95
 800e072:	bfcc      	ite	gt
 800e074:	2301      	movgt	r3, #1
 800e076:	2300      	movle	r3, #0
 800e078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e07c:	4b6e      	ldr	r3, [pc, #440]	; (800e238 <AdatiWayReturn+0x21c>)
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e084:	4293      	cmp	r3, r2
 800e086:	bfcc      	ite	gt
 800e088:	2301      	movgt	r3, #1
 800e08a:	2300      	movle	r3, #0
 800e08c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e090:	4b69      	ldr	r3, [pc, #420]	; (800e238 <AdatiWayReturn+0x21c>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e098:	4293      	cmp	r3, r2
 800e09a:	bfcc      	ite	gt
 800e09c:	2301      	movgt	r3, #1
 800e09e:	2300      	movle	r3, #0
 800e0a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e0a4:	6a38      	ldr	r0, [r7, #32]
 800e0a6:	69f9      	ldr	r1, [r7, #28]
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e0ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0b2:	9301      	str	r3, [sp, #4]
 800e0b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	4623      	mov	r3, r4
 800e0bc:	f002 fcba 	bl	8010a34 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800e0c0:	f005 ff38 	bl	8013f34 <create_StepCountMap_queue>
	HAL_Delay(100);
 800e0c4:	2064      	movs	r0, #100	; 0x64
 800e0c6:	f009 fdcd 	bl	8017c64 <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e0ca:	6978      	ldr	r0, [r7, #20]
 800e0cc:	ed97 2a01 	vldr	s4, [r7, #4]
 800e0d0:	edd7 1a03 	vldr	s3, [r7, #12]
 800e0d4:	ed97 1a03 	vldr	s2, [r7, #12]
 800e0d8:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e23c <AdatiWayReturn+0x220>
 800e0dc:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e240 <AdatiWayReturn+0x224>
 800e0e0:	f7f4 ff2c 	bl	8002f3c <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e0e4:	69ba      	ldr	r2, [r7, #24]
 800e0e6:	f107 011c 	add.w	r1, r7, #28
 800e0ea:	f107 0320 	add.w	r3, r7, #32
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff ff60 	bl	800dfb4 <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e0f4:	4b50      	ldr	r3, [pc, #320]	; (800e238 <AdatiWayReturn+0x21c>)
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	2b95      	cmp	r3, #149	; 0x95
 800e0fa:	bfcc      	ite	gt
 800e0fc:	2301      	movgt	r3, #1
 800e0fe:	2300      	movle	r3, #0
 800e100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e104:	4b4c      	ldr	r3, [pc, #304]	; (800e238 <AdatiWayReturn+0x21c>)
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e10c:	4293      	cmp	r3, r2
 800e10e:	bfcc      	ite	gt
 800e110:	2301      	movgt	r3, #1
 800e112:	2300      	movle	r3, #0
 800e114:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e118:	4b47      	ldr	r3, [pc, #284]	; (800e238 <AdatiWayReturn+0x21c>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e120:	4293      	cmp	r3, r2
 800e122:	bfcc      	ite	gt
 800e124:	2301      	movgt	r3, #1
 800e126:	2300      	movle	r3, #0
 800e128:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e12c:	2301      	movs	r3, #1
 800e12e:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e130:	2301      	movs	r3, #1
 800e132:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e134:	2300      	movs	r3, #0
 800e136:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e138:	6978      	ldr	r0, [r7, #20]
 800e13a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e13e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e142:	ed97 1a03 	vldr	s2, [r7, #12]
 800e146:	edd7 0a03 	vldr	s1, [r7, #12]
 800e14a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e14e:	f7f4 fef5 	bl	8002f3c <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e152:	6a38      	ldr	r0, [r7, #32]
 800e154:	69f9      	ldr	r1, [r7, #28]
 800e156:	69ba      	ldr	r2, [r7, #24]
 800e158:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e15c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	4623      	mov	r3, r4
 800e16a:	f002 fc63 	bl	8010a34 <update_wall>
		if(Dijkstra_mode==2){
 800e16e:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e172:	2b02      	cmp	r3, #2
 800e174:	d104      	bne.n	800e180 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800e176:	f005 f82b 	bl	80131d0 <route_Dijkstra>
					create_StepCountMap_unknown();
 800e17a:	f005 fcfd 	bl	8013b78 <create_StepCountMap_unknown>
 800e17e:	e001      	b.n	800e184 <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800e180:	f005 fed8 	bl	8013f34 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	69fa      	ldr	r2, [r7, #28]
 800e188:	69b9      	ldr	r1, [r7, #24]
 800e18a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e18e:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e192:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e196:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e19a:	9102      	str	r1, [sp, #8]
 800e19c:	9201      	str	r2, [sp, #4]
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	4633      	mov	r3, r6
 800e1a2:	462a      	mov	r2, r5
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	f003 f9bf 	bl	8011528 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e1aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <AdatiWayReturn+0x19a>
 800e1b2:	23ff      	movs	r3, #255	; 0xff
 800e1b4:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e1b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d001      	beq.n	800e1c2 <AdatiWayReturn+0x1a6>
 800e1be:	23ff      	movs	r3, #255	; 0xff
 800e1c0:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e1c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <AdatiWayReturn+0x1b2>
 800e1ca:	23ff      	movs	r3, #255	; 0xff
 800e1cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e1ce:	6a38      	ldr	r0, [r7, #32]
 800e1d0:	69fc      	ldr	r4, [r7, #28]
 800e1d2:	69bd      	ldr	r5, [r7, #24]
 800e1d4:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e1d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e1d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e1da:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e1dc:	9102      	str	r1, [sp, #8]
 800e1de:	9201      	str	r2, [sp, #4]
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	4633      	mov	r3, r6
 800e1e4:	462a      	mov	r2, r5
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	f002 f9d0 	bl	801058c <decision_kitiku>
		mode.WallCutMode=1;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e1f0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e1f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6978      	ldr	r0, [r7, #20]
 800e1fc:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e200:	f7f5 fb46 	bl	8003890 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d103      	bne.n	800e212 <AdatiWayReturn+0x1f6>
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 827c 	beq.w	800e70a <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e212:	6a3b      	ldr	r3, [r7, #32]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d003      	beq.n	800e220 <AdatiWayReturn+0x204>
 800e218:	6a3b      	ldr	r3, [r7, #32]
 800e21a:	2b02      	cmp	r3, #2
 800e21c:	f040 810d 	bne.w	800e43a <AdatiWayReturn+0x41e>
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 809b 	beq.w	800e35e <AdatiWayReturn+0x342>
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	f040 8105 	bne.w	800e43a <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e230:	e095      	b.n	800e35e <AdatiWayReturn+0x342>
 800e232:	bf00      	nop
 800e234:	20000834 	.word	0x20000834
 800e238:	20000470 	.word	0x20000470
 800e23c:	00000000 	.word	0x00000000
 800e240:	42830000 	.word	0x42830000
 800e244:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e248:	2301      	movs	r3, #1
 800e24a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e250:	2300      	movs	r3, #0
 800e252:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e254:	6978      	ldr	r0, [r7, #20]
 800e256:	ed97 2a01 	vldr	s4, [r7, #4]
 800e25a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e25e:	ed97 1a03 	vldr	s2, [r7, #12]
 800e262:	edd7 0a03 	vldr	s1, [r7, #12]
 800e266:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e244 <AdatiWayReturn+0x228>
 800e26a:	f7f4 fe67 	bl	8002f3c <straight_table2>

				update_coordinate(&x,&y,direction);
 800e26e:	69ba      	ldr	r2, [r7, #24]
 800e270:	f107 011c 	add.w	r1, r7, #28
 800e274:	f107 0320 	add.w	r3, r7, #32
 800e278:	4618      	mov	r0, r3
 800e27a:	f7ff fe9b 	bl	800dfb4 <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e27e:	4b7f      	ldr	r3, [pc, #508]	; (800e47c <AdatiWayReturn+0x460>)
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	2b95      	cmp	r3, #149	; 0x95
 800e284:	bfcc      	ite	gt
 800e286:	2301      	movgt	r3, #1
 800e288:	2300      	movle	r3, #0
 800e28a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e28e:	4b7b      	ldr	r3, [pc, #492]	; (800e47c <AdatiWayReturn+0x460>)
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e296:	4293      	cmp	r3, r2
 800e298:	bfcc      	ite	gt
 800e29a:	2301      	movgt	r3, #1
 800e29c:	2300      	movle	r3, #0
 800e29e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e2a2:	4b76      	ldr	r3, [pc, #472]	; (800e47c <AdatiWayReturn+0x460>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	bfcc      	ite	gt
 800e2ae:	2301      	movgt	r3, #1
 800e2b0:	2300      	movle	r3, #0
 800e2b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2c2:	6978      	ldr	r0, [r7, #20]
 800e2c4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2c8:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2cc:	ed97 1a03 	vldr	s2, [r7, #12]
 800e2d0:	edd7 0a03 	vldr	s1, [r7, #12]
 800e2d4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e2d8:	f7f4 fe30 	bl	8002f3c <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e2dc:	6a38      	ldr	r0, [r7, #32]
 800e2de:	69f9      	ldr	r1, [r7, #28]
 800e2e0:	69ba      	ldr	r2, [r7, #24]
 800e2e2:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e2e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	4623      	mov	r3, r4
 800e2f4:	f002 fb9e 	bl	8010a34 <update_wall>
				create_StepCountMap_queue();
 800e2f8:	f005 fe1c 	bl	8013f34 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	69fa      	ldr	r2, [r7, #28]
 800e300:	69b9      	ldr	r1, [r7, #24]
 800e302:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e306:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e30a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e30e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e312:	9102      	str	r1, [sp, #8]
 800e314:	9201      	str	r2, [sp, #4]
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	4633      	mov	r3, r6
 800e31a:	462a      	mov	r2, r5
 800e31c:	4621      	mov	r1, r4
 800e31e:	f003 f903 	bl	8011528 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <AdatiWayReturn+0x312>
 800e32a:	23ff      	movs	r3, #255	; 0xff
 800e32c:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e32e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <AdatiWayReturn+0x31e>
 800e336:	23ff      	movs	r3, #255	; 0xff
 800e338:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e33a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <AdatiWayReturn+0x32a>
 800e342:	23ff      	movs	r3, #255	; 0xff
 800e344:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e346:	2301      	movs	r3, #1
 800e348:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e34a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e34e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e352:	4619      	mov	r1, r3
 800e354:	6978      	ldr	r0, [r7, #20]
 800e356:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e35a:	f7f5 fa99 	bl	8003890 <End_straight>
			while (front_wall==0) {
 800e35e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e362:	f083 0301 	eor.w	r3, r3, #1
 800e366:	b2db      	uxtb	r3, r3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f47f af6d 	bne.w	800e248 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e36e:	2300      	movs	r3, #0
 800e370:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e372:	2300      	movs	r3, #0
 800e374:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e376:	2300      	movs	r3, #0
 800e378:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e37a:	6978      	ldr	r0, [r7, #20]
 800e37c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e380:	edd7 1a03 	vldr	s3, [r7, #12]
 800e384:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e4a8 <AdatiWayReturn+0x48c>
 800e388:	edd7 0a03 	vldr	s1, [r7, #12]
 800e38c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e480 <AdatiWayReturn+0x464>
 800e390:	f7f4 fdd4 	bl	8002f3c <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e394:	2003      	movs	r0, #3
 800e396:	f7f9 fb79 	bl	8007a8c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e39a:	2003      	movs	r0, #3
 800e39c:	f7f9 fb4e 	bl	8007a3c <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e3a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e3a4:	f7f9 fe70 	bl	8008088 <wait_ms_NoReset>
			no_safty = 1;
 800e3a8:	4b36      	ldr	r3, [pc, #216]	; (800e484 <AdatiWayReturn+0x468>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e3ae:	ed97 2a00 	vldr	s4, [r7]
 800e3b2:	edd7 1a02 	vldr	s3, [r7, #8]
 800e3b6:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e4a8 <AdatiWayReturn+0x48c>
 800e3ba:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e4a8 <AdatiWayReturn+0x48c>
 800e3be:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e488 <AdatiWayReturn+0x46c>
 800e3c2:	f7f5 fac9 	bl	8003958 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e3c6:	2003      	movs	r0, #3
 800e3c8:	f7f9 fb60 	bl	8007a8c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e3cc:	2003      	movs	r0, #3
 800e3ce:	f7f9 fb35 	bl	8007a3c <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e3d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e3d6:	f7f9 fe57 	bl	8008088 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e3da:	6978      	ldr	r0, [r7, #20]
 800e3dc:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e48c <AdatiWayReturn+0x470>
 800e3e0:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e490 <AdatiWayReturn+0x474>
 800e3e4:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e4a8 <AdatiWayReturn+0x48c>
 800e3e8:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e4a8 <AdatiWayReturn+0x48c>
 800e3ec:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e494 <AdatiWayReturn+0x478>
 800e3f0:	f7f4 fda4 	bl	8002f3c <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e3f4:	2003      	movs	r0, #3
 800e3f6:	f7f9 fb49 	bl	8007a8c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e3fa:	2003      	movs	r0, #3
 800e3fc:	f7f9 fb1e 	bl	8007a3c <pl_L_DriveMotor_mode>
			no_safty = 0;
 800e400:	4b20      	ldr	r3, [pc, #128]	; (800e484 <AdatiWayReturn+0x468>)
 800e402:	2200      	movs	r2, #0
 800e404:	701a      	strb	r2, [r3, #0]
			wait_ms_NoReset(500);
 800e406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e40a:	f7f9 fe3d 	bl	8008088 <wait_ms_NoReset>
			clear_Ierror();
 800e40e:	f7f6 f9b1 	bl	8004774 <clear_Ierror>
			maze_mode = 0;
 800e412:	4b21      	ldr	r3, [pc, #132]	; (800e498 <AdatiWayReturn+0x47c>)
 800e414:	2200      	movs	r2, #0
 800e416:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	3302      	adds	r3, #2
 800e41c:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	2b04      	cmp	r3, #4
 800e422:	dd02      	ble.n	800e42a <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	3b04      	subs	r3, #4
 800e428:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f300 816e 	bgt.w	800e70e <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	3304      	adds	r3, #4
 800e436:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e438:	e169      	b.n	800e70e <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e43a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d102      	bne.n	800e448 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e442:	4b16      	ldr	r3, [pc, #88]	; (800e49c <AdatiWayReturn+0x480>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e448:	4b14      	ldr	r3, [pc, #80]	; (800e49c <AdatiWayReturn+0x480>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f040 80f8 	bne.w	800e642 <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e452:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e454:	2bff      	cmp	r3, #255	; 0xff
 800e456:	d12b      	bne.n	800e4b0 <AdatiWayReturn+0x494>
 800e458:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e45a:	2bff      	cmp	r3, #255	; 0xff
 800e45c:	d128      	bne.n	800e4b0 <AdatiWayReturn+0x494>
 800e45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e460:	2bff      	cmp	r3, #255	; 0xff
 800e462:	d125      	bne.n	800e4b0 <AdatiWayReturn+0x494>
 800e464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e466:	2bff      	cmp	r3, #255	; 0xff
 800e468:	d122      	bne.n	800e4b0 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e46a:	4b0d      	ldr	r3, [pc, #52]	; (800e4a0 <AdatiWayReturn+0x484>)
 800e46c:	2201      	movs	r2, #1
 800e46e:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e470:	f7f9 fb40 	bl	8007af4 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e474:	2000      	movs	r0, #0
 800e476:	f7f9 fad7 	bl	8007a28 <pl_DriveMotor_standby>

				break;
 800e47a:	e14b      	b.n	800e714 <AdatiWayReturn+0x6f8>
 800e47c:	20000470 	.word	0x20000470
 800e480:	42140000 	.word	0x42140000
 800e484:	20000806 	.word	0x20000806
 800e488:	43340000 	.word	0x43340000
 800e48c:	447a0000 	.word	0x447a0000
 800e490:	c3160000 	.word	0xc3160000
 800e494:	c1f40000 	.word	0xc1f40000
 800e498:	20000834 	.word	0x20000834
 800e49c:	20000838 	.word	0x20000838
 800e4a0:	20000807 	.word	0x20000807
 800e4a4:	42a40000 	.word	0x42a40000
 800e4a8:	00000000 	.word	0x00000000
 800e4ac:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e4b0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e4b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d81a      	bhi.n	800e4ee <AdatiWayReturn+0x4d2>
 800e4b8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e4ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d816      	bhi.n	800e4ee <AdatiWayReturn+0x4d2>
 800e4c0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e4c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d812      	bhi.n	800e4ee <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e4d4:	6978      	ldr	r0, [r7, #20]
 800e4d6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4da:	edd7 1a03 	vldr	s3, [r7, #12]
 800e4de:	ed97 1a03 	vldr	s2, [r7, #12]
 800e4e2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e4e6:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e4a4 <AdatiWayReturn+0x488>
 800e4ea:	f7f4 fd27 	bl	8002f3c <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e4ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e4f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d219      	bcs.n	800e52a <AdatiWayReturn+0x50e>
 800e4f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e4f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d815      	bhi.n	800e52a <AdatiWayReturn+0x50e>
 800e4fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e500:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e502:	429a      	cmp	r2, r3
 800e504:	d811      	bhi.n	800e52a <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e506:	2300      	movs	r3, #0
 800e508:	9303      	str	r3, [sp, #12]
 800e50a:	2300      	movs	r3, #0
 800e50c:	9302      	str	r3, [sp, #8]
 800e50e:	2300      	movs	r3, #0
 800e510:	9301      	str	r3, [sp, #4]
 800e512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e51a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e51c:	ed97 0a03 	vldr	s0, [r7, #12]
 800e520:	f7fb fdd6 	bl	800a0d0 <slalomR>
				direction++;
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	3301      	adds	r3, #1
 800e528:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e52a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e52c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e52e:	429a      	cmp	r2, r3
 800e530:	d219      	bcs.n	800e566 <AdatiWayReturn+0x54a>
 800e532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e536:	429a      	cmp	r2, r3
 800e538:	d215      	bcs.n	800e566 <AdatiWayReturn+0x54a>
 800e53a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e53c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e53e:	429a      	cmp	r2, r3
 800e540:	d811      	bhi.n	800e566 <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e542:	2300      	movs	r3, #0
 800e544:	9303      	str	r3, [sp, #12]
 800e546:	2300      	movs	r3, #0
 800e548:	9302      	str	r3, [sp, #8]
 800e54a:	2300      	movs	r3, #0
 800e54c:	9301      	str	r3, [sp, #4]
 800e54e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e558:	ed97 0a03 	vldr	s0, [r7, #12]
 800e55c:	f7fb ff72 	bl	800a444 <slalomL>
				direction--;
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	3b01      	subs	r3, #1
 800e564:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e566:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e568:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e56a:	429a      	cmp	r2, r3
 800e56c:	f080 80ac 	bcs.w	800e6c8 <AdatiWayReturn+0x6ac>
 800e570:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e574:	429a      	cmp	r2, r3
 800e576:	f080 80a7 	bcs.w	800e6c8 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e57a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e57c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e57e:	429a      	cmp	r2, r3
 800e580:	f080 80a2 	bcs.w	800e6c8 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e584:	2301      	movs	r3, #1
 800e586:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e588:	2300      	movs	r3, #0
 800e58a:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e58c:	2300      	movs	r3, #0
 800e58e:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e590:	6978      	ldr	r0, [r7, #20]
 800e592:	ed97 2a01 	vldr	s4, [r7, #4]
 800e596:	edd7 1a03 	vldr	s3, [r7, #12]
 800e59a:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e4a8 <AdatiWayReturn+0x48c>
 800e59e:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5a2:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e4ac <AdatiWayReturn+0x490>
 800e5a6:	f7f4 fcc9 	bl	8002f3c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e5aa:	2003      	movs	r0, #3
 800e5ac:	f7f9 fa6e 	bl	8007a8c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e5b0:	2003      	movs	r0, #3
 800e5b2:	f7f9 fa43 	bl	8007a3c <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e5b6:	2064      	movs	r0, #100	; 0x64
 800e5b8:	f7f9 fd66 	bl	8008088 <wait_ms_NoReset>
				no_safty = 1;
 800e5bc:	4b8a      	ldr	r3, [pc, #552]	; (800e7e8 <AdatiWayReturn+0x7cc>)
 800e5be:	2201      	movs	r2, #1
 800e5c0:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e5c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e5c6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e5ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	edd7 0a00 	vldr	s1, [r7]
 800e5d4:	ed97 0a02 	vldr	s0, [r7, #8]
 800e5d8:	f7fb fcb0 	bl	8009f3c <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				no_safty = 0;
 800e5dc:	4b82      	ldr	r3, [pc, #520]	; (800e7e8 <AdatiWayReturn+0x7cc>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(100);
 800e5e2:	2064      	movs	r0, #100	; 0x64
 800e5e4:	f7f9 fd50 	bl	8008088 <wait_ms_NoReset>
				//clear_Ierror();
				mode.WallControlMode=0;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e5ec:	6978      	ldr	r0, [r7, #20]
 800e5ee:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 800e7ec <AdatiWayReturn+0x7d0>
 800e5f2:	eddf 1a7f 	vldr	s3, [pc, #508]	; 800e7f0 <AdatiWayReturn+0x7d4>
 800e5f6:	ed9f 1a88 	vldr	s2, [pc, #544]	; 800e818 <AdatiWayReturn+0x7fc>
 800e5fa:	eddf 0a87 	vldr	s1, [pc, #540]	; 800e818 <AdatiWayReturn+0x7fc>
 800e5fe:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e7f4 <AdatiWayReturn+0x7d8>
 800e602:	f7f4 fc9b 	bl	8002f3c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e606:	2003      	movs	r0, #3
 800e608:	f7f9 fa40 	bl	8007a8c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e60c:	2003      	movs	r0, #3
 800e60e:	f7f9 fa15 	bl	8007a3c <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e612:	2064      	movs	r0, #100	; 0x64
 800e614:	f7f9 fd38 	bl	8008088 <wait_ms_NoReset>
				clear_Ierror();
 800e618:	f7f6 f8ac 	bl	8004774 <clear_Ierror>
				mode.WallControlMode=1;
 800e61c:	2301      	movs	r3, #1
 800e61e:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e620:	6978      	ldr	r0, [r7, #20]
 800e622:	ed97 2a01 	vldr	s4, [r7, #4]
 800e626:	edd7 1a03 	vldr	s3, [r7, #12]
 800e62a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e62e:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800e818 <AdatiWayReturn+0x7fc>
 800e632:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800e7f8 <AdatiWayReturn+0x7dc>
 800e636:	f7f4 fc81 	bl	8002f3c <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	3302      	adds	r3, #2
 800e63e:	61bb      	str	r3, [r7, #24]
 800e640:	e042      	b.n	800e6c8 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e642:	2301      	movs	r3, #1
 800e644:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e646:	2300      	movs	r3, #0
 800e648:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e64e:	6978      	ldr	r0, [r7, #20]
 800e650:	ed97 2a01 	vldr	s4, [r7, #4]
 800e654:	edd7 1a03 	vldr	s3, [r7, #12]
 800e658:	ed97 1a03 	vldr	s2, [r7, #12]
 800e65c:	edd7 0a03 	vldr	s1, [r7, #12]
 800e660:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800e81c <AdatiWayReturn+0x800>
 800e664:	f7f4 fc6a 	bl	8002f3c <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e668:	f107 0218 	add.w	r2, r7, #24
 800e66c:	f107 011c 	add.w	r1, r7, #28
 800e670:	f107 0320 	add.w	r3, r7, #32
 800e674:	4618      	mov	r0, r3
 800e676:	f001 fffb 	bl	8010670 <compress_kitiku>
			mode.WallCutMode=0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e67e:	2201      	movs	r2, #1
 800e680:	2101      	movs	r1, #1
 800e682:	6978      	ldr	r0, [r7, #20]
 800e684:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800e81c <AdatiWayReturn+0x800>
 800e688:	f7f5 f902 	bl	8003890 <End_straight>
			mode.WallControlMode=1;
 800e68c:	2301      	movs	r3, #1
 800e68e:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e690:	2300      	movs	r3, #0
 800e692:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e694:	2300      	movs	r3, #0
 800e696:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e698:	4b58      	ldr	r3, [pc, #352]	; (800e7fc <AdatiWayReturn+0x7e0>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	4613      	mov	r3, r2
 800e69e:	005b      	lsls	r3, r3, #1
 800e6a0:	4413      	add	r3, r2
 800e6a2:	011a      	lsls	r2, r3, #4
 800e6a4:	1ad3      	subs	r3, r2, r3
 800e6a6:	ee07 3a90 	vmov	s15, r3
 800e6aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6ae:	6978      	ldr	r0, [r7, #20]
 800e6b0:	ed97 2a01 	vldr	s4, [r7, #4]
 800e6b4:	eddf 1a52 	vldr	s3, [pc, #328]	; 800e800 <AdatiWayReturn+0x7e4>
 800e6b8:	ed97 1a03 	vldr	s2, [r7, #12]
 800e6bc:	edd7 0a03 	vldr	s1, [r7, #12]
 800e6c0:	eeb0 0a67 	vmov.f32	s0, s15
 800e6c4:	f7f4 fc3a 	bl	8002f3c <straight_table2>

		}

		if (direction >= 5) {
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	2b04      	cmp	r3, #4
 800e6cc:	dd02      	ble.n	800e6d4 <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	3b04      	subs	r3, #4
 800e6d2:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e6d4:	69bb      	ldr	r3, [r7, #24]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	dc02      	bgt.n	800e6e0 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	3304      	adds	r3, #4
 800e6de:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e6e0:	4b48      	ldr	r3, [pc, #288]	; (800e804 <AdatiWayReturn+0x7e8>)
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d014      	beq.n	800e712 <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e6e8:	4b47      	ldr	r3, [pc, #284]	; (800e808 <AdatiWayReturn+0x7ec>)
 800e6ea:	edd3 7a00 	vldr	s15, [r3]
 800e6ee:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e80c <AdatiWayReturn+0x7f0>
 800e6f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fa:	dd05      	ble.n	800e708 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e6fc:	f7f9 f9fa 	bl	8007af4 <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e700:	2000      	movs	r0, #0
 800e702:	f7f9 f991 	bl	8007a28 <pl_DriveMotor_standby>
						break;
 800e706:	e005      	b.n	800e714 <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800e708:	e4ec      	b.n	800e0e4 <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800e70a:	bf00      	nop
 800e70c:	e002      	b.n	800e714 <AdatiWayReturn+0x6f8>
			break;
 800e70e:	bf00      	nop
 800e710:	e000      	b.n	800e714 <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800e712:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e714:	4b3b      	ldr	r3, [pc, #236]	; (800e804 <AdatiWayReturn+0x7e8>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d101      	bne.n	800e720 <AdatiWayReturn+0x704>
	record_in();
 800e71c:	f7f8 fe92 	bl	8007444 <record_in>
	}
	create_DijkstraMap();
 800e720:	f003 f82a 	bl	8011778 <create_DijkstraMap>
	clear_Ierror();
 800e724:	f7f6 f826 	bl	8004774 <clear_Ierror>
	reset_gyro();
 800e728:	f7f2 ffce 	bl	80016c8 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e72c:	4b38      	ldr	r3, [pc, #224]	; (800e810 <AdatiWayReturn+0x7f4>)
 800e72e:	2201      	movs	r2, #1
 800e730:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e732:	6978      	ldr	r0, [r7, #20]
 800e734:	ed97 2a01 	vldr	s4, [r7, #4]
 800e738:	edd7 1a03 	vldr	s3, [r7, #12]
 800e73c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e740:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e818 <AdatiWayReturn+0x7fc>
 800e744:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e7f8 <AdatiWayReturn+0x7dc>
 800e748:	f7f4 fbf8 	bl	8002f3c <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e74c:	69ba      	ldr	r2, [r7, #24]
 800e74e:	f107 011c 	add.w	r1, r7, #28
 800e752:	f107 0320 	add.w	r3, r7, #32
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff fc2c 	bl	800dfb4 <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e75c:	4b2d      	ldr	r3, [pc, #180]	; (800e814 <AdatiWayReturn+0x7f8>)
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	2b95      	cmp	r3, #149	; 0x95
 800e762:	bfcc      	ite	gt
 800e764:	2301      	movgt	r3, #1
 800e766:	2300      	movle	r3, #0
 800e768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e76c:	4b29      	ldr	r3, [pc, #164]	; (800e814 <AdatiWayReturn+0x7f8>)
 800e76e:	691b      	ldr	r3, [r3, #16]
 800e770:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e774:	4293      	cmp	r3, r2
 800e776:	bfcc      	ite	gt
 800e778:	2301      	movgt	r3, #1
 800e77a:	2300      	movle	r3, #0
 800e77c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e780:	4b24      	ldr	r3, [pc, #144]	; (800e814 <AdatiWayReturn+0x7f8>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e788:	4293      	cmp	r3, r2
 800e78a:	bfcc      	ite	gt
 800e78c:	2301      	movgt	r3, #1
 800e78e:	2300      	movle	r3, #0
 800e790:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e794:	2301      	movs	r3, #1
 800e796:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e798:	2301      	movs	r3, #1
 800e79a:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e79c:	2300      	movs	r3, #0
 800e79e:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e7a0:	6978      	ldr	r0, [r7, #20]
 800e7a2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e7a6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e7aa:	ed97 1a03 	vldr	s2, [r7, #12]
 800e7ae:	edd7 0a03 	vldr	s1, [r7, #12]
 800e7b2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e7b6:	f7f4 fbc1 	bl	8002f3c <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e7ba:	6a38      	ldr	r0, [r7, #32]
 800e7bc:	69f9      	ldr	r1, [r7, #28]
 800e7be:	69ba      	ldr	r2, [r7, #24]
 800e7c0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e7c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7c8:	9301      	str	r3, [sp, #4]
 800e7ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	4623      	mov	r3, r4
 800e7d2:	f002 f92f 	bl	8010a34 <update_wall>
		if(Dijkstra_mode==1){
 800e7d6:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d120      	bne.n	800e820 <AdatiWayReturn+0x804>
			route_Dijkstra();//ダイクストラ法のマップを作成
 800e7de:	f004 fcf7 	bl	80131d0 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e7e2:	f005 f9c9 	bl	8013b78 <create_StepCountMap_unknown>
 800e7e6:	e01d      	b.n	800e824 <AdatiWayReturn+0x808>
 800e7e8:	20000806 	.word	0x20000806
 800e7ec:	447a0000 	.word	0x447a0000
 800e7f0:	c3160000 	.word	0xc3160000
 800e7f4:	c1a40000 	.word	0xc1a40000
 800e7f8:	42830000 	.word	0x42830000
 800e7fc:	2000082c 	.word	0x2000082c
 800e800:	44610000 	.word	0x44610000
 800e804:	20000807 	.word	0x20000807
 800e808:	2000072c 	.word	0x2000072c
 800e80c:	43700000 	.word	0x43700000
 800e810:	20000834 	.word	0x20000834
 800e814:	20000470 	.word	0x20000470
 800e818:	00000000 	.word	0x00000000
 800e81c:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e820:	f005 fd3e 	bl	80142a0 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e824:	6a3b      	ldr	r3, [r7, #32]
 800e826:	69fa      	ldr	r2, [r7, #28]
 800e828:	69b9      	ldr	r1, [r7, #24]
 800e82a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e82e:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e832:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e836:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e83a:	9102      	str	r1, [sp, #8]
 800e83c:	9201      	str	r2, [sp, #4]
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	4633      	mov	r3, r6
 800e842:	462a      	mov	r2, r5
 800e844:	4621      	mov	r1, r4
 800e846:	f002 fe6f 	bl	8011528 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e84a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d001      	beq.n	800e856 <AdatiWayReturn+0x83a>
 800e852:	23ff      	movs	r3, #255	; 0xff
 800e854:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e856:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <AdatiWayReturn+0x846>
 800e85e:	23ff      	movs	r3, #255	; 0xff
 800e860:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e862:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <AdatiWayReturn+0x852>
 800e86a:	23ff      	movs	r3, #255	; 0xff
 800e86c:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e86e:	6a38      	ldr	r0, [r7, #32]
 800e870:	69fc      	ldr	r4, [r7, #28]
 800e872:	69bd      	ldr	r5, [r7, #24]
 800e874:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e878:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e87a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e87c:	9102      	str	r1, [sp, #8]
 800e87e:	9201      	str	r2, [sp, #4]
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	4633      	mov	r3, r6
 800e884:	462a      	mov	r2, r5
 800e886:	4621      	mov	r1, r4
 800e888:	f001 fe80 	bl	801058c <decision_kitiku>
		mode.WallCutMode=1;
 800e88c:	2301      	movs	r3, #1
 800e88e:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e890:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e894:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e898:	4619      	mov	r1, r3
 800e89a:	6978      	ldr	r0, [r7, #20]
 800e89c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e8a0:	f7f4 fff6 	bl	8003890 <End_straight>


			if(x == 0 && y == 0) {
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d165      	bne.n	800e976 <AdatiWayReturn+0x95a>
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d162      	bne.n	800e976 <AdatiWayReturn+0x95a>

				mode.WallControlMode=0;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8bc:	6978      	ldr	r0, [r7, #20]
 800e8be:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8c2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e8c6:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e818 <AdatiWayReturn+0x7fc>
 800e8ca:	edd7 0a03 	vldr	s1, [r7, #12]
 800e8ce:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e81c <AdatiWayReturn+0x800>
 800e8d2:	f7f4 fb33 	bl	8002f3c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8d6:	2003      	movs	r0, #3
 800e8d8:	f7f9 f8d8 	bl	8007a8c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e8dc:	2003      	movs	r0, #3
 800e8de:	f7f9 f8ad 	bl	8007a3c <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e8e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e8e6:	f7f9 fbcf 	bl	8008088 <wait_ms_NoReset>
				no_safty = 1;
 800e8ea:	4bb8      	ldr	r3, [pc, #736]	; (800ebcc <AdatiWayReturn+0xbb0>)
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e8f0:	ed97 2a00 	vldr	s4, [r7]
 800e8f4:	edd7 1a02 	vldr	s3, [r7, #8]
 800e8f8:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800e8fc:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800e900:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 800ebd4 <AdatiWayReturn+0xbb8>
 800e904:	f7f5 f828 	bl	8003958 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e908:	2003      	movs	r0, #3
 800e90a:	f7f9 f8bf 	bl	8007a8c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e90e:	2003      	movs	r0, #3
 800e910:	f7f9 f894 	bl	8007a3c <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e918:	f7f9 fbb6 	bl	8008088 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e91c:	6978      	ldr	r0, [r7, #20]
 800e91e:	ed9f 2aae 	vldr	s4, [pc, #696]	; 800ebd8 <AdatiWayReturn+0xbbc>
 800e922:	eddf 1aae 	vldr	s3, [pc, #696]	; 800ebdc <AdatiWayReturn+0xbc0>
 800e926:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800e92a:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800e92e:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e932:	f7f4 fb03 	bl	8002f3c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e936:	2003      	movs	r0, #3
 800e938:	f7f9 f8a8 	bl	8007a8c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e93c:	2003      	movs	r0, #3
 800e93e:	f7f9 f87d 	bl	8007a3c <pl_L_DriveMotor_mode>
				no_safty = 0;
 800e942:	4ba2      	ldr	r3, [pc, #648]	; (800ebcc <AdatiWayReturn+0xbb0>)
 800e944:	2200      	movs	r2, #0
 800e946:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(500);
 800e948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e94c:	f7f9 fb9c 	bl	8008088 <wait_ms_NoReset>
				clear_Ierror();
 800e950:	f7f5 ff10 	bl	8004774 <clear_Ierror>

				direction = direction + 2;
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	3302      	adds	r3, #2
 800e958:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	2b04      	cmp	r3, #4
 800e95e:	dd02      	ble.n	800e966 <AdatiWayReturn+0x94a>
					direction = direction-4;
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	3b04      	subs	r3, #4
 800e964:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f300 82eb 	bgt.w	800ef44 <AdatiWayReturn+0xf28>
					direction = direction+4;
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	3304      	adds	r3, #4
 800e972:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e974:	e2e6      	b.n	800ef44 <AdatiWayReturn+0xf28>
			}


			if(Dijkstra_maker_flag==1){
 800e976:	4b9a      	ldr	r3, [pc, #616]	; (800ebe0 <AdatiWayReturn+0xbc4>)
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	f040 8140 	bne.w	800ec00 <AdatiWayReturn+0xbe4>
				// 移動の優先順位 ： 前→右→左→後
				mode.WallControlMode=1;
 800e980:	2301      	movs	r3, #1
 800e982:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e984:	2300      	movs	r3, #0
 800e986:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e988:	2300      	movs	r3, #0
 800e98a:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e98c:	6978      	ldr	r0, [r7, #20]
 800e98e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e992:	edd7 1a03 	vldr	s3, [r7, #12]
 800e996:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800e99a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e99e:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800ebe4 <AdatiWayReturn+0xbc8>
 800e9a2:	f7f4 facb 	bl	8002f3c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e9a6:	2003      	movs	r0, #3
 800e9a8:	f7f9 f870 	bl	8007a8c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e9ac:	2003      	movs	r0, #3
 800e9ae:	f7f9 f845 	bl	8007a3c <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e9b2:	2064      	movs	r0, #100	; 0x64
 800e9b4:	f7f9 fb68 	bl	8008088 <wait_ms_NoReset>
				create_DijkstraMap();
 800e9b8:	f002 fede 	bl	8011778 <create_DijkstraMap>
								if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e9bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9be:	2bff      	cmp	r3, #255	; 0xff
 800e9c0:	d10c      	bne.n	800e9dc <AdatiWayReturn+0x9c0>
 800e9c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e9c4:	2bff      	cmp	r3, #255	; 0xff
 800e9c6:	d109      	bne.n	800e9dc <AdatiWayReturn+0x9c0>
 800e9c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ca:	2bff      	cmp	r3, #255	; 0xff
 800e9cc:	d106      	bne.n	800e9dc <AdatiWayReturn+0x9c0>
 800e9ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9d0:	2bff      	cmp	r3, #255	; 0xff
 800e9d2:	d103      	bne.n	800e9dc <AdatiWayReturn+0x9c0>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e9d4:	4b84      	ldr	r3, [pc, #528]	; (800ebe8 <AdatiWayReturn+0xbcc>)
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	701a      	strb	r2, [r3, #0]
									break;
 800e9da:	e2b6      	b.n	800ef4a <AdatiWayReturn+0xf2e>
								}
								if (x<0 || y<0 || x>15 || y>15){
 800e9dc:	6a3b      	ldr	r3, [r7, #32]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	db08      	blt.n	800e9f4 <AdatiWayReturn+0x9d8>
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	db05      	blt.n	800e9f4 <AdatiWayReturn+0x9d8>
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	2b0f      	cmp	r3, #15
 800e9ec:	dc02      	bgt.n	800e9f4 <AdatiWayReturn+0x9d8>
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	2b0f      	cmp	r3, #15
 800e9f2:	dd03      	ble.n	800e9fc <AdatiWayReturn+0x9e0>
												// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
													error_mode=1;
 800e9f4:	4b7c      	ldr	r3, [pc, #496]	; (800ebe8 <AdatiWayReturn+0xbcc>)
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	701a      	strb	r2, [r3, #0]
													break;
 800e9fa:	e2a6      	b.n	800ef4a <AdatiWayReturn+0xf2e>
								}
								if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e9fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e9fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d814      	bhi.n	800ea2e <AdatiWayReturn+0xa12>
 800ea04:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ea06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d810      	bhi.n	800ea2e <AdatiWayReturn+0xa12>
 800ea0c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ea0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d80c      	bhi.n	800ea2e <AdatiWayReturn+0xa12>
									// 直進
									straight_table2(90/2, 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea14:	6978      	ldr	r0, [r7, #20]
 800ea16:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea1a:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea1e:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea22:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800ea26:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800ebec <AdatiWayReturn+0xbd0>
 800ea2a:	f7f4 fa87 	bl	8002f3c <straight_table2>
								}
								if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ea2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ea30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d230      	bcs.n	800ea98 <AdatiWayReturn+0xa7c>
 800ea36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ea38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d82c      	bhi.n	800ea98 <AdatiWayReturn+0xa7c>
 800ea3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ea40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d828      	bhi.n	800ea98 <AdatiWayReturn+0xa7c>
									// 右旋回
									turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800ea46:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea4a:	eef1 7a67 	vneg.f32	s15, s15
 800ea4e:	ed97 2a00 	vldr	s4, [r7]
 800ea52:	eef0 1a67 	vmov.f32	s3, s15
 800ea56:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800ea5a:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800ea5e:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800ebf0 <AdatiWayReturn+0xbd4>
 800ea62:	f7f4 ff79 	bl	8003958 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea66:	2003      	movs	r0, #3
 800ea68:	f7f9 f810 	bl	8007a8c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea6c:	2003      	movs	r0, #3
 800ea6e:	f7f8 ffe5 	bl	8007a3c <pl_L_DriveMotor_mode>
									wait_ms_NoReset(50);
 800ea72:	2032      	movs	r0, #50	; 0x32
 800ea74:	f7f9 fb08 	bl	8008088 <wait_ms_NoReset>
									straight_table2(90/2, 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea78:	6978      	ldr	r0, [r7, #20]
 800ea7a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea7e:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea82:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea86:	eddf 0a52 	vldr	s1, [pc, #328]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800ea8a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800ebec <AdatiWayReturn+0xbd0>
 800ea8e:	f7f4 fa55 	bl	8002f3c <straight_table2>
									direction++;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	3301      	adds	r3, #1
 800ea96:	61bb      	str	r3, [r7, #24]
								}
								if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ea98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d22c      	bcs.n	800eafa <AdatiWayReturn+0xade>
 800eaa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eaa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d228      	bcs.n	800eafa <AdatiWayReturn+0xade>
 800eaa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eaaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d824      	bhi.n	800eafa <AdatiWayReturn+0xade>
									// 左旋回
									turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800eab0:	ed97 2a00 	vldr	s4, [r7]
 800eab4:	edd7 1a02 	vldr	s3, [r7, #8]
 800eab8:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800eabc:	eddf 0a44 	vldr	s1, [pc, #272]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800eac0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800ebf4 <AdatiWayReturn+0xbd8>
 800eac4:	f7f4 ff48 	bl	8003958 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eac8:	2003      	movs	r0, #3
 800eaca:	f7f8 ffdf 	bl	8007a8c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eace:	2003      	movs	r0, #3
 800ead0:	f7f8 ffb4 	bl	8007a3c <pl_L_DriveMotor_mode>
									wait_ms_NoReset(50);
 800ead4:	2032      	movs	r0, #50	; 0x32
 800ead6:	f7f9 fad7 	bl	8008088 <wait_ms_NoReset>
									straight_table2(90/2, 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eada:	6978      	ldr	r0, [r7, #20]
 800eadc:	ed97 2a01 	vldr	s4, [r7, #4]
 800eae0:	edd7 1a03 	vldr	s3, [r7, #12]
 800eae4:	ed97 1a03 	vldr	s2, [r7, #12]
 800eae8:	eddf 0a39 	vldr	s1, [pc, #228]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800eaec:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800ebec <AdatiWayReturn+0xbd0>
 800eaf0:	f7f4 fa24 	bl	8002f3c <straight_table2>
									direction--;
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	61bb      	str	r3, [r7, #24]
								}
								if(back_count < front_count && back_count < right_count
 800eafa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eafc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eafe:	429a      	cmp	r2, r3
 800eb00:	f080 820f 	bcs.w	800ef22 <AdatiWayReturn+0xf06>
 800eb04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	f080 820a 	bcs.w	800ef22 <AdatiWayReturn+0xf06>
										&& back_count < left_count){
 800eb0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb12:	429a      	cmp	r2, r3
 800eb14:	f080 8205 	bcs.w	800ef22 <AdatiWayReturn+0xf06>
									//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
									no_safty = 1;
 800eb18:	4b2c      	ldr	r3, [pc, #176]	; (800ebcc <AdatiWayReturn+0xbb0>)
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	701a      	strb	r2, [r3, #0]
									backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800eb1e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800eb22:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800eb26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	edd7 0a00 	vldr	s1, [r7]
 800eb30:	ed97 0a02 	vldr	s0, [r7, #8]
 800eb34:	f7fb fa02 	bl	8009f3c <backTurn_controlWall>
									//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
									no_safty = 0;
 800eb38:	4b24      	ldr	r3, [pc, #144]	; (800ebcc <AdatiWayReturn+0xbb0>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	701a      	strb	r2, [r3, #0]
									wait_ms_NoReset(100);
 800eb3e:	2064      	movs	r0, #100	; 0x64
 800eb40:	f7f9 faa2 	bl	8008088 <wait_ms_NoReset>
									//clear_Ierror();
									mode.WallControlMode=0;
 800eb44:	2300      	movs	r3, #0
 800eb46:	753b      	strb	r3, [r7, #20]
									if(front_wall){
 800eb48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d027      	beq.n	800eba0 <AdatiWayReturn+0xb84>
									straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800eb50:	6978      	ldr	r0, [r7, #20]
 800eb52:	ed9f 2a21 	vldr	s4, [pc, #132]	; 800ebd8 <AdatiWayReturn+0xbbc>
 800eb56:	eddf 1a21 	vldr	s3, [pc, #132]	; 800ebdc <AdatiWayReturn+0xbc0>
 800eb5a:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800eb5e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800eb62:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800ebf8 <AdatiWayReturn+0xbdc>
 800eb66:	f7f4 f9e9 	bl	8002f3c <straight_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eb6a:	2003      	movs	r0, #3
 800eb6c:	f7f8 ff8e 	bl	8007a8c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eb70:	2003      	movs	r0, #3
 800eb72:	f7f8 ff63 	bl	8007a3c <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800eb76:	2064      	movs	r0, #100	; 0x64
 800eb78:	f7f9 fa86 	bl	8008088 <wait_ms_NoReset>

									clear_Ierror();
 800eb7c:	f7f5 fdfa 	bl	8004774 <clear_Ierror>
									mode.WallControlMode=1;
 800eb80:	2301      	movs	r3, #1
 800eb82:	753b      	strb	r3, [r7, #20]
									straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb84:	6978      	ldr	r0, [r7, #20]
 800eb86:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb8a:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb8e:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb92:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800eb96:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ebfc <AdatiWayReturn+0xbe0>
 800eb9a:	f7f4 f9cf 	bl	8002f3c <straight_table2>
 800eb9e:	e010      	b.n	800ebc2 <AdatiWayReturn+0xba6>
									}else{
										clear_Ierror();
 800eba0:	f7f5 fde8 	bl	8004774 <clear_Ierror>
										mode.WallControlMode=1;
 800eba4:	2301      	movs	r3, #1
 800eba6:	753b      	strb	r3, [r7, #20]
										straight_table2(90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eba8:	6978      	ldr	r0, [r7, #20]
 800ebaa:	ed97 2a01 	vldr	s4, [r7, #4]
 800ebae:	edd7 1a03 	vldr	s3, [r7, #12]
 800ebb2:	ed97 1a03 	vldr	s2, [r7, #12]
 800ebb6:	eddf 0a06 	vldr	s1, [pc, #24]	; 800ebd0 <AdatiWayReturn+0xbb4>
 800ebba:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800ebf4 <AdatiWayReturn+0xbd8>
 800ebbe:	f7f4 f9bd 	bl	8002f3c <straight_table2>

									}
									//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
									direction = direction + 2;
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	3302      	adds	r3, #2
 800ebc6:	61bb      	str	r3, [r7, #24]
 800ebc8:	e1ab      	b.n	800ef22 <AdatiWayReturn+0xf06>
 800ebca:	bf00      	nop
 800ebcc:	20000806 	.word	0x20000806
 800ebd0:	00000000 	.word	0x00000000
 800ebd4:	43340000 	.word	0x43340000
 800ebd8:	447a0000 	.word	0x447a0000
 800ebdc:	c3160000 	.word	0xc3160000
 800ebe0:	20000d2c 	.word	0x20000d2c
 800ebe4:	42140000 	.word	0x42140000
 800ebe8:	20000807 	.word	0x20000807
 800ebec:	42340000 	.word	0x42340000
 800ebf0:	c2b40000 	.word	0xc2b40000
 800ebf4:	42b40000 	.word	0x42b40000
 800ebf8:	c1a40000 	.word	0xc1a40000
 800ebfc:	42830000 	.word	0x42830000
								}


			}else{

				if(know_mode==0){
 800ec00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d102      	bne.n	800ec0e <AdatiWayReturn+0xbf2>
					kitikukan = 0;
 800ec08:	4b97      	ldr	r3, [pc, #604]	; (800ee68 <AdatiWayReturn+0xe4c>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	601a      	str	r2, [r3, #0]
				}
			if (kitikukan == OFF) {
 800ec0e:	4b96      	ldr	r3, [pc, #600]	; (800ee68 <AdatiWayReturn+0xe4c>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f040 8142 	bne.w	800ee9c <AdatiWayReturn+0xe80>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800ec18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec1a:	2bff      	cmp	r3, #255	; 0xff
 800ec1c:	d10c      	bne.n	800ec38 <AdatiWayReturn+0xc1c>
 800ec1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec20:	2bff      	cmp	r3, #255	; 0xff
 800ec22:	d109      	bne.n	800ec38 <AdatiWayReturn+0xc1c>
 800ec24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec26:	2bff      	cmp	r3, #255	; 0xff
 800ec28:	d106      	bne.n	800ec38 <AdatiWayReturn+0xc1c>
 800ec2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec2c:	2bff      	cmp	r3, #255	; 0xff
 800ec2e:	d103      	bne.n	800ec38 <AdatiWayReturn+0xc1c>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800ec30:	4b8e      	ldr	r3, [pc, #568]	; (800ee6c <AdatiWayReturn+0xe50>)
 800ec32:	2201      	movs	r2, #1
 800ec34:	701a      	strb	r2, [r3, #0]
					break;
 800ec36:	e188      	b.n	800ef4a <AdatiWayReturn+0xf2e>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800ec38:	6a3b      	ldr	r3, [r7, #32]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	db08      	blt.n	800ec50 <AdatiWayReturn+0xc34>
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	db05      	blt.n	800ec50 <AdatiWayReturn+0xc34>
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	2b0f      	cmp	r3, #15
 800ec48:	dc02      	bgt.n	800ec50 <AdatiWayReturn+0xc34>
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	2b0f      	cmp	r3, #15
 800ec4e:	dd03      	ble.n	800ec58 <AdatiWayReturn+0xc3c>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800ec50:	4b86      	ldr	r3, [pc, #536]	; (800ee6c <AdatiWayReturn+0xe50>)
 800ec52:	2201      	movs	r2, #1
 800ec54:	701a      	strb	r2, [r3, #0]
									break;
 800ec56:	e178      	b.n	800ef4a <AdatiWayReturn+0xf2e>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ec58:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ec5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d81a      	bhi.n	800ec96 <AdatiWayReturn+0xc7a>
 800ec60:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ec62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d816      	bhi.n	800ec96 <AdatiWayReturn+0xc7a>
 800ec68:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ec6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d812      	bhi.n	800ec96 <AdatiWayReturn+0xc7a>
					// 直進
					mode.WallControlMode=1;
 800ec70:	2301      	movs	r3, #1
 800ec72:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ec74:	2300      	movs	r3, #0
 800ec76:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ec7c:	6978      	ldr	r0, [r7, #20]
 800ec7e:	ed97 2a01 	vldr	s4, [r7, #4]
 800ec82:	edd7 1a03 	vldr	s3, [r7, #12]
 800ec86:	ed97 1a03 	vldr	s2, [r7, #12]
 800ec8a:	edd7 0a03 	vldr	s1, [r7, #12]
 800ec8e:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800ee70 <AdatiWayReturn+0xe54>
 800ec92:	f7f4 f953 	bl	8002f3c <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ec96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d22c      	bcs.n	800ecf8 <AdatiWayReturn+0xcdc>
 800ec9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800eca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d828      	bhi.n	800ecf8 <AdatiWayReturn+0xcdc>
 800eca6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800eca8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d824      	bhi.n	800ecf8 <AdatiWayReturn+0xcdc>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ecae:	6a3b      	ldr	r3, [r7, #32]
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d002      	beq.n	800ecba <AdatiWayReturn+0xc9e>
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d109      	bne.n	800ecce <AdatiWayReturn+0xcb2>
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d002      	beq.n	800ecc6 <AdatiWayReturn+0xcaa>
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d103      	bne.n	800ecce <AdatiWayReturn+0xcb2>
						noGoalPillarMode=1;
 800ecc6:	4b6b      	ldr	r3, [pc, #428]	; (800ee74 <AdatiWayReturn+0xe58>)
 800ecc8:	2201      	movs	r2, #1
 800ecca:	701a      	strb	r2, [r3, #0]
 800eccc:	e002      	b.n	800ecd4 <AdatiWayReturn+0xcb8>
					}else{
						noGoalPillarMode=0;
 800ecce:	4b69      	ldr	r3, [pc, #420]	; (800ee74 <AdatiWayReturn+0xe58>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800ecd4:	4b68      	ldr	r3, [pc, #416]	; (800ee78 <AdatiWayReturn+0xe5c>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	9203      	str	r2, [sp, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	9202      	str	r2, [sp, #8]
 800ecde:	2200      	movs	r2, #0
 800ece0:	9201      	str	r2, [sp, #4]
 800ece2:	699a      	ldr	r2, [r3, #24]
 800ece4:	9200      	str	r2, [sp, #0]
 800ece6:	3308      	adds	r3, #8
 800ece8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ecea:	ed97 0a03 	vldr	s0, [r7, #12]
 800ecee:	f7fb f9ef 	bl	800a0d0 <slalomR>
					direction++;
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ecf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ecfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d22c      	bcs.n	800ed5a <AdatiWayReturn+0xd3e>
 800ed00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d228      	bcs.n	800ed5a <AdatiWayReturn+0xd3e>
 800ed08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d824      	bhi.n	800ed5a <AdatiWayReturn+0xd3e>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ed10:	6a3b      	ldr	r3, [r7, #32]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d002      	beq.n	800ed1c <AdatiWayReturn+0xd00>
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d109      	bne.n	800ed30 <AdatiWayReturn+0xd14>
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d002      	beq.n	800ed28 <AdatiWayReturn+0xd0c>
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d103      	bne.n	800ed30 <AdatiWayReturn+0xd14>
						noGoalPillarMode=1;
 800ed28:	4b52      	ldr	r3, [pc, #328]	; (800ee74 <AdatiWayReturn+0xe58>)
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	701a      	strb	r2, [r3, #0]
 800ed2e:	e002      	b.n	800ed36 <AdatiWayReturn+0xd1a>
					}else{
						noGoalPillarMode=0;
 800ed30:	4b50      	ldr	r3, [pc, #320]	; (800ee74 <AdatiWayReturn+0xe58>)
 800ed32:	2200      	movs	r2, #0
 800ed34:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800ed36:	4b50      	ldr	r3, [pc, #320]	; (800ee78 <AdatiWayReturn+0xe5c>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	9203      	str	r2, [sp, #12]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	9202      	str	r2, [sp, #8]
 800ed40:	2200      	movs	r2, #0
 800ed42:	9201      	str	r2, [sp, #4]
 800ed44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed46:	9200      	str	r2, [sp, #0]
 800ed48:	331c      	adds	r3, #28
 800ed4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed4c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ed50:	f7fb fb78 	bl	800a444 <slalomL>
					direction--;
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	3b01      	subs	r3, #1
 800ed58:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800ed5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ed5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	f080 80df 	bcs.w	800ef22 <AdatiWayReturn+0xf06>
 800ed64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ed66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	f080 80da 	bcs.w	800ef22 <AdatiWayReturn+0xf06>
						&& back_count < left_count){
 800ed6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ed70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed72:	429a      	cmp	r2, r3
 800ed74:	f080 80d5 	bcs.w	800ef22 <AdatiWayReturn+0xf06>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ed84:	6978      	ldr	r0, [r7, #20]
 800ed86:	ed97 2a01 	vldr	s4, [r7, #4]
 800ed8a:	edd7 1a03 	vldr	s3, [r7, #12]
 800ed8e:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 800ee7c <AdatiWayReturn+0xe60>
 800ed92:	edd7 0a03 	vldr	s1, [r7, #12]
 800ed96:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ee98 <AdatiWayReturn+0xe7c>
 800ed9a:	f7f4 f8cf 	bl	8002f3c <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ed9e:	2003      	movs	r0, #3
 800eda0:	f7f8 fe74 	bl	8007a8c <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eda4:	2003      	movs	r0, #3
 800eda6:	f7f8 fe49 	bl	8007a3c <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800edaa:	2064      	movs	r0, #100	; 0x64
 800edac:	f7f9 f96c 	bl	8008088 <wait_ms_NoReset>
					create_DijkstraMap();
 800edb0:	f002 fce2 	bl	8011778 <create_DijkstraMap>
					no_safty = 1;
 800edb4:	4b32      	ldr	r3, [pc, #200]	; (800ee80 <AdatiWayReturn+0xe64>)
 800edb6:	2201      	movs	r2, #1
 800edb8:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800edba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800edbe:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800edc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edc6:	4618      	mov	r0, r3
 800edc8:	edd7 0a00 	vldr	s1, [r7]
 800edcc:	ed97 0a02 	vldr	s0, [r7, #8]
 800edd0:	f7fb f8b4 	bl	8009f3c <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					no_safty = 0;
 800edd4:	4b2a      	ldr	r3, [pc, #168]	; (800ee80 <AdatiWayReturn+0xe64>)
 800edd6:	2200      	movs	r2, #0
 800edd8:	701a      	strb	r2, [r3, #0]
					wait_ms_NoReset(100);
 800edda:	2064      	movs	r0, #100	; 0x64
 800eddc:	f7f9 f954 	bl	8008088 <wait_ms_NoReset>
					//clear_Ierror();
					mode.WallControlMode=0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ede4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d027      	beq.n	800ee3c <AdatiWayReturn+0xe20>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800edec:	6978      	ldr	r0, [r7, #20]
 800edee:	ed9f 2a25 	vldr	s4, [pc, #148]	; 800ee84 <AdatiWayReturn+0xe68>
 800edf2:	eddf 1a25 	vldr	s3, [pc, #148]	; 800ee88 <AdatiWayReturn+0xe6c>
 800edf6:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800ee7c <AdatiWayReturn+0xe60>
 800edfa:	eddf 0a20 	vldr	s1, [pc, #128]	; 800ee7c <AdatiWayReturn+0xe60>
 800edfe:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800ee8c <AdatiWayReturn+0xe70>
 800ee02:	f7f4 f89b 	bl	8002f3c <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ee06:	2003      	movs	r0, #3
 800ee08:	f7f8 fe40 	bl	8007a8c <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ee0c:	2003      	movs	r0, #3
 800ee0e:	f7f8 fe15 	bl	8007a3c <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ee12:	2064      	movs	r0, #100	; 0x64
 800ee14:	f7f9 f938 	bl	8008088 <wait_ms_NoReset>

					clear_Ierror();
 800ee18:	f7f5 fcac 	bl	8004774 <clear_Ierror>
					mode.WallControlMode=1;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ee20:	6978      	ldr	r0, [r7, #20]
 800ee22:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee26:	edd7 1a03 	vldr	s3, [r7, #12]
 800ee2a:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee2e:	eddf 0a13 	vldr	s1, [pc, #76]	; 800ee7c <AdatiWayReturn+0xe60>
 800ee32:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800ee90 <AdatiWayReturn+0xe74>
 800ee36:	f7f4 f881 	bl	8002f3c <straight_table2>
 800ee3a:	e010      	b.n	800ee5e <AdatiWayReturn+0xe42>
					}else{
						clear_Ierror();
 800ee3c:	f7f5 fc9a 	bl	8004774 <clear_Ierror>
						mode.WallControlMode=1;
 800ee40:	2301      	movs	r3, #1
 800ee42:	753b      	strb	r3, [r7, #20]
						straight_table2(90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ee44:	6978      	ldr	r0, [r7, #20]
 800ee46:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee4a:	edd7 1a03 	vldr	s3, [r7, #12]
 800ee4e:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee52:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800ee7c <AdatiWayReturn+0xe60>
 800ee56:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800ee94 <AdatiWayReturn+0xe78>
 800ee5a:	f7f4 f86f 	bl	8002f3c <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	3302      	adds	r3, #2
 800ee62:	61bb      	str	r3, [r7, #24]
 800ee64:	e05d      	b.n	800ef22 <AdatiWayReturn+0xf06>
 800ee66:	bf00      	nop
 800ee68:	20000838 	.word	0x20000838
 800ee6c:	20000807 	.word	0x20000807
 800ee70:	42a40000 	.word	0x42a40000
 800ee74:	20000529 	.word	0x20000529
 800ee78:	2000db30 	.word	0x2000db30
 800ee7c:	00000000 	.word	0x00000000
 800ee80:	20000806 	.word	0x20000806
 800ee84:	447a0000 	.word	0x447a0000
 800ee88:	c3160000 	.word	0xc3160000
 800ee8c:	c1a40000 	.word	0xc1a40000
 800ee90:	42830000 	.word	0x42830000
 800ee94:	42b40000 	.word	0x42b40000
 800ee98:	42140000 	.word	0x42140000

				}

			} else {
				mode.WallControlMode=1;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800eea0:	2301      	movs	r3, #1
 800eea2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eea8:	6978      	ldr	r0, [r7, #20]
 800eeaa:	ed97 2a01 	vldr	s4, [r7, #4]
 800eeae:	edd7 1a03 	vldr	s3, [r7, #12]
 800eeb2:	ed97 1a03 	vldr	s2, [r7, #12]
 800eeb6:	edd7 0a03 	vldr	s1, [r7, #12]
 800eeba:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800ee98 <AdatiWayReturn+0xe7c>
 800eebe:	f7f4 f83d 	bl	8002f3c <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800eec2:	f107 0218 	add.w	r2, r7, #24
 800eec6:	f107 011c 	add.w	r1, r7, #28
 800eeca:	f107 0320 	add.w	r3, r7, #32
 800eece:	4618      	mov	r0, r3
 800eed0:	f001 fbce 	bl	8010670 <compress_kitiku>
				mode.WallCutMode=0;
 800eed4:	2300      	movs	r3, #0
 800eed6:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800eed8:	2201      	movs	r2, #1
 800eeda:	2101      	movs	r1, #1
 800eedc:	6978      	ldr	r0, [r7, #20]
 800eede:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 800ee98 <AdatiWayReturn+0xe7c>
 800eee2:	f7f4 fcd5 	bl	8003890 <End_straight>
				mode.WallControlMode=1;
 800eee6:	2301      	movs	r3, #1
 800eee8:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800eef2:	4b28      	ldr	r3, [pc, #160]	; (800ef94 <AdatiWayReturn+0xf78>)
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	4613      	mov	r3, r2
 800eef8:	005b      	lsls	r3, r3, #1
 800eefa:	4413      	add	r3, r2
 800eefc:	011a      	lsls	r2, r3, #4
 800eefe:	1ad3      	subs	r3, r2, r3
 800ef00:	ee07 3a90 	vmov	s15, r3
 800ef04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef08:	6978      	ldr	r0, [r7, #20]
 800ef0a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ef0e:	eddf 1a22 	vldr	s3, [pc, #136]	; 800ef98 <AdatiWayReturn+0xf7c>
 800ef12:	ed97 1a03 	vldr	s2, [r7, #12]
 800ef16:	edd7 0a03 	vldr	s1, [r7, #12]
 800ef1a:	eeb0 0a67 	vmov.f32	s0, s15
 800ef1e:	f7f4 f80d 	bl	8002f3c <straight_table2>

			}
			}

			if (direction >= 5) {
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	dd02      	ble.n	800ef2e <AdatiWayReturn+0xf12>
				direction = direction-4;
 800ef28:	69bb      	ldr	r3, [r7, #24]
 800ef2a:	3b04      	subs	r3, #4
 800ef2c:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dc02      	bgt.n	800ef3a <AdatiWayReturn+0xf1e>
				direction = direction+4;
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	3304      	adds	r3, #4
 800ef38:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800ef3a:	4b18      	ldr	r3, [pc, #96]	; (800ef9c <AdatiWayReturn+0xf80>)
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d002      	beq.n	800ef48 <AdatiWayReturn+0xf2c>
		update_coordinate(&x,&y,direction);
 800ef42:	e403      	b.n	800e74c <AdatiWayReturn+0x730>
				break;
 800ef44:	bf00      	nop
 800ef46:	e000      	b.n	800ef4a <AdatiWayReturn+0xf2e>
			if(error_mode==1){break;}
 800ef48:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	f7f8 fd6c 	bl	8007a28 <pl_DriveMotor_standby>
	maze_mode = 0;
 800ef50:	4b13      	ldr	r3, [pc, #76]	; (800efa0 <AdatiWayReturn+0xf84>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800ef56:	2064      	movs	r0, #100	; 0x64
 800ef58:	f008 fe84 	bl	8017c64 <HAL_Delay>
	maze_display();
 800ef5c:	f005 fb8c 	bl	8014678 <maze_display>
	create_StepCountMap_queue();
 800ef60:	f004 ffe8 	bl	8013f34 <create_StepCountMap_queue>
	if(walk_count[0] == 255){
 800ef64:	4b0f      	ldr	r3, [pc, #60]	; (800efa4 <AdatiWayReturn+0xf88>)
 800ef66:	881b      	ldrh	r3, [r3, #0]
 800ef68:	2bff      	cmp	r3, #255	; 0xff
 800ef6a:	d102      	bne.n	800ef72 <AdatiWayReturn+0xf56>
		error_mode = 1;
 800ef6c:	4b0b      	ldr	r3, [pc, #44]	; (800ef9c <AdatiWayReturn+0xf80>)
 800ef6e:	2201      	movs	r2, #1
 800ef70:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800ef72:	4b0a      	ldr	r3, [pc, #40]	; (800ef9c <AdatiWayReturn+0xf80>)
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d102      	bne.n	800ef80 <AdatiWayReturn+0xf64>
		record_in();
 800ef7a:	f7f8 fa63 	bl	8007444 <record_in>
	} else {
		record_out();
	}

}
 800ef7e:	e001      	b.n	800ef84 <AdatiWayReturn+0xf68>
		record_out();
 800ef80:	f7f8 fb1c 	bl	80075bc <record_out>
}
 800ef84:	bf00      	nop
 800ef86:	3734      	adds	r7, #52	; 0x34
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ef8e:	b004      	add	sp, #16
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	2000082c 	.word	0x2000082c
 800ef98:	447a0000 	.word	0x447a0000
 800ef9c:	20000807 	.word	0x20000807
 800efa0:	20000834 	.word	0x20000834
 800efa4:	20000d30 	.word	0x20000d30

0800efa8 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800efa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efaa:	b08b      	sub	sp, #44	; 0x2c
 800efac:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	607b      	str	r3, [r7, #4]
	int y = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800efb6:	2301      	movs	r3, #1
 800efb8:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800efba:	4b8b      	ldr	r3, [pc, #556]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800efbc:	2200      	movs	r2, #0
 800efbe:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800efc0:	f002 fbda 	bl	8011778 <create_DijkstraMap>
	maze_display_Dijkstra();
 800efc4:	f005 fc76 	bl	80148b4 <maze_display_Dijkstra>
	pass[0] = 1;
 800efc8:	4b88      	ldr	r3, [pc, #544]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800efca:	2201      	movs	r2, #1
 800efcc:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800efce:	4639      	mov	r1, r7
 800efd0:	1d3b      	adds	r3, r7, #4
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7fe ffed 	bl	800dfb4 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d002      	beq.n	800efe6 <pass_maker_Dijkstra+0x3e>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2b02      	cmp	r3, #2
 800efe4:	d13a      	bne.n	800f05c <pass_maker_Dijkstra+0xb4>
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <pass_maker_Dijkstra+0x4a>
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	2b01      	cmp	r3, #1
 800eff0:	d134      	bne.n	800f05c <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800eff2:	4b7d      	ldr	r3, [pc, #500]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	461a      	mov	r2, r3
 800eff8:	4b7c      	ldr	r3, [pc, #496]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800effa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effe:	2b00      	cmp	r3, #0
 800f000:	da05      	bge.n	800f00e <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800f002:	4b79      	ldr	r3, [pc, #484]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	3301      	adds	r3, #1
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	4b77      	ldr	r3, [pc, #476]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f00c:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800f00e:	4b76      	ldr	r3, [pc, #472]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	461a      	mov	r2, r3
 800f014:	4b75      	ldr	r3, [pc, #468]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800f016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01a:	4a73      	ldr	r2, [pc, #460]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f01c:	7812      	ldrb	r2, [r2, #0]
 800f01e:	4611      	mov	r1, r2
 800f020:	3301      	adds	r3, #1
 800f022:	4a72      	ldr	r2, [pc, #456]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800f024:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	3302      	adds	r3, #2
 800f02c:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	2b05      	cmp	r3, #5
 800f032:	d101      	bne.n	800f038 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800f034:	2301      	movs	r3, #1
 800f036:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	2b06      	cmp	r3, #6
 800f03c:	d101      	bne.n	800f042 <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800f03e:	2302      	movs	r3, #2
 800f040:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d101      	bne.n	800f04c <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800f048:	2304      	movs	r3, #4
 800f04a:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f052:	f040 80c2 	bne.w	800f1da <pass_maker_Dijkstra+0x232>
						direction = 3;
 800f056:	2303      	movs	r3, #3
 800f058:	617b      	str	r3, [r7, #20]
					}
					break;
 800f05a:	e0be      	b.n	800f1da <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	6839      	ldr	r1, [r7, #0]
 800f060:	f107 020b 	add.w	r2, r7, #11
 800f064:	f107 0309 	add.w	r3, r7, #9
 800f068:	9301      	str	r3, [sp, #4]
 800f06a:	f107 030a 	add.w	r3, r7, #10
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	4613      	mov	r3, r2
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	f001 ff64 	bl	8010f40 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	f107 060c 	add.w	r6, r7, #12
 800f080:	f107 050e 	add.w	r5, r7, #14
 800f084:	f107 0410 	add.w	r4, r7, #16
 800f088:	f107 0012 	add.w	r0, r7, #18
 800f08c:	6979      	ldr	r1, [r7, #20]
 800f08e:	9102      	str	r1, [sp, #8]
 800f090:	9201      	str	r2, [sp, #4]
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	4633      	mov	r3, r6
 800f096:	462a      	mov	r2, r5
 800f098:	4621      	mov	r1, r4
 800f09a:	f002 fad3 	bl	8011644 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f09e:	7afb      	ldrb	r3, [r7, #11]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d002      	beq.n	800f0aa <pass_maker_Dijkstra+0x102>
 800f0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0a8:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f0aa:	7abb      	ldrb	r3, [r7, #10]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d002      	beq.n	800f0b6 <pass_maker_Dijkstra+0x10e>
 800f0b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0b4:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f0b6:	7a7b      	ldrb	r3, [r7, #9]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d002      	beq.n	800f0c2 <pass_maker_Dijkstra+0x11a>
 800f0bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0c0:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f0c2:	8a7b      	ldrh	r3, [r7, #18]
 800f0c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d10e      	bne.n	800f0ea <pass_maker_Dijkstra+0x142>
 800f0cc:	8a3b      	ldrh	r3, [r7, #16]
 800f0ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d109      	bne.n	800f0ea <pass_maker_Dijkstra+0x142>
 800f0d6:	89bb      	ldrh	r3, [r7, #12]
 800f0d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d104      	bne.n	800f0ea <pass_maker_Dijkstra+0x142>
 800f0e0:	89fb      	ldrh	r3, [r7, #14]
 800f0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d079      	beq.n	800f1de <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f0ea:	8a7a      	ldrh	r2, [r7, #18]
 800f0ec:	8a3b      	ldrh	r3, [r7, #16]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d822      	bhi.n	800f138 <pass_maker_Dijkstra+0x190>
 800f0f2:	8a7a      	ldrh	r2, [r7, #18]
 800f0f4:	89bb      	ldrh	r3, [r7, #12]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d81e      	bhi.n	800f138 <pass_maker_Dijkstra+0x190>
 800f0fa:	8a7a      	ldrh	r2, [r7, #18]
 800f0fc:	89fb      	ldrh	r3, [r7, #14]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d81a      	bhi.n	800f138 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f102:	4b39      	ldr	r3, [pc, #228]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	461a      	mov	r2, r3
 800f108:	4b38      	ldr	r3, [pc, #224]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800f10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	da05      	bge.n	800f11e <pass_maker_Dijkstra+0x176>
 800f112:	4b35      	ldr	r3, [pc, #212]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	3301      	adds	r3, #1
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	4b33      	ldr	r3, [pc, #204]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f11c:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f11e:	4b32      	ldr	r3, [pc, #200]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	4b31      	ldr	r3, [pc, #196]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800f126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f12a:	4a2f      	ldr	r2, [pc, #188]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f12c:	7812      	ldrb	r2, [r2, #0]
 800f12e:	4611      	mov	r1, r2
 800f130:	3302      	adds	r3, #2
 800f132:	4a2e      	ldr	r2, [pc, #184]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800f134:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f138:	8a3a      	ldrh	r2, [r7, #16]
 800f13a:	8a7b      	ldrh	r3, [r7, #18]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d218      	bcs.n	800f172 <pass_maker_Dijkstra+0x1ca>
 800f140:	8a3a      	ldrh	r2, [r7, #16]
 800f142:	89bb      	ldrh	r3, [r7, #12]
 800f144:	429a      	cmp	r2, r3
 800f146:	d814      	bhi.n	800f172 <pass_maker_Dijkstra+0x1ca>
 800f148:	8a3a      	ldrh	r2, [r7, #16]
 800f14a:	89fb      	ldrh	r3, [r7, #14]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d810      	bhi.n	800f172 <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f150:	4b25      	ldr	r3, [pc, #148]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	3301      	adds	r3, #1
 800f156:	b2da      	uxtb	r2, r3
 800f158:	4b23      	ldr	r3, [pc, #140]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f15a:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800f15c:	4b22      	ldr	r3, [pc, #136]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	4619      	mov	r1, r3
 800f162:	4b22      	ldr	r3, [pc, #136]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800f164:	f06f 0201 	mvn.w	r2, #1
 800f168:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	3301      	adds	r3, #1
 800f170:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f172:	89ba      	ldrh	r2, [r7, #12]
 800f174:	8a7b      	ldrh	r3, [r7, #18]
 800f176:	429a      	cmp	r2, r3
 800f178:	d218      	bcs.n	800f1ac <pass_maker_Dijkstra+0x204>
 800f17a:	89ba      	ldrh	r2, [r7, #12]
 800f17c:	8a3b      	ldrh	r3, [r7, #16]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d214      	bcs.n	800f1ac <pass_maker_Dijkstra+0x204>
 800f182:	89ba      	ldrh	r2, [r7, #12]
 800f184:	89fb      	ldrh	r3, [r7, #14]
 800f186:	429a      	cmp	r2, r3
 800f188:	d810      	bhi.n	800f1ac <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f18a:	4b17      	ldr	r3, [pc, #92]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	3301      	adds	r3, #1
 800f190:	b2da      	uxtb	r2, r3
 800f192:	4b15      	ldr	r3, [pc, #84]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f194:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800f196:	4b14      	ldr	r3, [pc, #80]	; (800f1e8 <pass_maker_Dijkstra+0x240>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	4619      	mov	r1, r3
 800f19c:	4b13      	ldr	r3, [pc, #76]	; (800f1ec <pass_maker_Dijkstra+0x244>)
 800f19e:	f06f 0202 	mvn.w	r2, #2
 800f1a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	2b05      	cmp	r3, #5
 800f1b0:	d101      	bne.n	800f1b6 <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	2b06      	cmp	r3, #6
 800f1ba:	d101      	bne.n	800f1c0 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f1bc:	2302      	movs	r3, #2
 800f1be:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d101      	bne.n	800f1ca <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f1c6:	2304      	movs	r3, #4
 800f1c8:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d0:	f47f aefd 	bne.w	800efce <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f1d4:	2303      	movs	r3, #3
 800f1d6:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f1d8:	e6f9      	b.n	800efce <pass_maker_Dijkstra+0x26>
					break;
 800f1da:	bf00      	nop
 800f1dc:	e000      	b.n	800f1e0 <pass_maker_Dijkstra+0x238>
			break;
 800f1de:	bf00      	nop
		}

	}
}
 800f1e0:	bf00      	nop
 800f1e2:	371c      	adds	r7, #28
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1e8:	20000828 	.word	0x20000828
 800f1ec:	2000083c 	.word	0x2000083c

0800f1f0 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f1f0:	b5b0      	push	{r4, r5, r7, lr}
 800f1f2:	b0e0      	sub	sp, #384	; 0x180
 800f1f4:	af50      	add	r7, sp, #320	; 0x140
 800f1f6:	ed87 0a05 	vstr	s0, [r7, #20]
 800f1fa:	edc7 0a04 	vstr	s1, [r7, #16]
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	4608      	mov	r0, r1
 800f202:	4611      	mov	r1, r2
 800f204:	461a      	mov	r2, r3
 800f206:	ed87 1a01 	vstr	s2, [r7, #4]
 800f20a:	4603      	mov	r3, r0
 800f20c:	72fb      	strb	r3, [r7, #11]
 800f20e:	460b      	mov	r3, r1
 800f210:	72bb      	strb	r3, [r7, #10]
 800f212:	4613      	mov	r3, r2
 800f214:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f216:	f06f 0301 	mvn.w	r3, #1
 800f21a:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f21c:	2301      	movs	r3, #1
 800f21e:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800f220:	2300      	movs	r3, #0
 800f222:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800f224:	2300      	movs	r3, #0
 800f226:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800f228:	2300      	movs	r3, #0
 800f22a:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f22c:	2300      	movs	r3, #0
 800f22e:	633b      	str	r3, [r7, #48]	; 0x30
 800f230:	e007      	b.n	800f242 <run_shortest+0x52>
 800f232:	4a07      	ldr	r2, [pc, #28]	; (800f250 <run_shortest+0x60>)
 800f234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f236:	2100      	movs	r1, #0
 800f238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	3301      	adds	r3, #1
 800f240:	633b      	str	r3, [r7, #48]	; 0x30
 800f242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f244:	2bfe      	cmp	r3, #254	; 0xfe
 800f246:	ddf4      	ble.n	800f232 <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f248:	2300      	movs	r3, #0
 800f24a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f24c:	e077      	b.n	800f33e <run_shortest+0x14e>
 800f24e:	bf00      	nop
 800f250:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f254:	4aa9      	ldr	r2, [pc, #676]	; (800f4fc <run_shortest+0x30c>)
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f25c:	4aa8      	ldr	r2, [pc, #672]	; (800f500 <run_shortest+0x310>)
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800f264:	4aa5      	ldr	r2, [pc, #660]	; (800f4fc <run_shortest+0x30c>)
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	330c      	adds	r3, #12
 800f26a:	005b      	lsls	r3, r3, #1
 800f26c:	4413      	add	r3, r2
 800f26e:	88d9      	ldrh	r1, [r3, #6]
 800f270:	4aa3      	ldr	r2, [pc, #652]	; (800f500 <run_shortest+0x310>)
 800f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f274:	330c      	adds	r3, #12
 800f276:	005b      	lsls	r3, r3, #1
 800f278:	4413      	add	r3, r2
 800f27a:	460a      	mov	r2, r1
 800f27c:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800f27e:	4a9f      	ldr	r2, [pc, #636]	; (800f4fc <run_shortest+0x30c>)
 800f280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f282:	331c      	adds	r3, #28
 800f284:	005b      	lsls	r3, r3, #1
 800f286:	4413      	add	r3, r2
 800f288:	8899      	ldrh	r1, [r3, #4]
 800f28a:	4a9d      	ldr	r2, [pc, #628]	; (800f500 <run_shortest+0x310>)
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	331c      	adds	r3, #28
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	4413      	add	r3, r2
 800f294:	460a      	mov	r2, r1
 800f296:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800f298:	4a98      	ldr	r2, [pc, #608]	; (800f4fc <run_shortest+0x30c>)
 800f29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29c:	332c      	adds	r3, #44	; 0x2c
 800f29e:	005b      	lsls	r3, r3, #1
 800f2a0:	4413      	add	r3, r2
 800f2a2:	8859      	ldrh	r1, [r3, #2]
 800f2a4:	4a96      	ldr	r2, [pc, #600]	; (800f500 <run_shortest+0x310>)
 800f2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a8:	332c      	adds	r3, #44	; 0x2c
 800f2aa:	005b      	lsls	r3, r3, #1
 800f2ac:	4413      	add	r3, r2
 800f2ae:	460a      	mov	r2, r1
 800f2b0:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800f2b2:	4a92      	ldr	r2, [pc, #584]	; (800f4fc <run_shortest+0x30c>)
 800f2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b6:	331c      	adds	r3, #28
 800f2b8:	005b      	lsls	r3, r3, #1
 800f2ba:	4413      	add	r3, r2
 800f2bc:	889b      	ldrh	r3, [r3, #4]
 800f2be:	43db      	mvns	r3, r3
 800f2c0:	b299      	uxth	r1, r3
 800f2c2:	4a8e      	ldr	r2, [pc, #568]	; (800f4fc <run_shortest+0x30c>)
 800f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c6:	331c      	adds	r3, #28
 800f2c8:	005b      	lsls	r3, r3, #1
 800f2ca:	4413      	add	r3, r2
 800f2cc:	460a      	mov	r2, r1
 800f2ce:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800f2d0:	4a8a      	ldr	r2, [pc, #552]	; (800f4fc <run_shortest+0x30c>)
 800f2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d4:	332c      	adds	r3, #44	; 0x2c
 800f2d6:	005b      	lsls	r3, r3, #1
 800f2d8:	4413      	add	r3, r2
 800f2da:	885b      	ldrh	r3, [r3, #2]
 800f2dc:	43db      	mvns	r3, r3
 800f2de:	b299      	uxth	r1, r3
 800f2e0:	4a86      	ldr	r2, [pc, #536]	; (800f4fc <run_shortest+0x30c>)
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	332c      	adds	r3, #44	; 0x2c
 800f2e6:	005b      	lsls	r3, r3, #1
 800f2e8:	4413      	add	r3, r2
 800f2ea:	460a      	mov	r2, r1
 800f2ec:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800f2ee:	4a83      	ldr	r2, [pc, #524]	; (800f4fc <run_shortest+0x30c>)
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f2f6:	4981      	ldr	r1, [pc, #516]	; (800f4fc <run_shortest+0x30c>)
 800f2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fa:	331c      	adds	r3, #28
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	440b      	add	r3, r1
 800f300:	889b      	ldrh	r3, [r3, #4]
 800f302:	4313      	orrs	r3, r2
 800f304:	b299      	uxth	r1, r3
 800f306:	4a7d      	ldr	r2, [pc, #500]	; (800f4fc <run_shortest+0x30c>)
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f30e:	4a7b      	ldr	r2, [pc, #492]	; (800f4fc <run_shortest+0x30c>)
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	330c      	adds	r3, #12
 800f314:	005b      	lsls	r3, r3, #1
 800f316:	4413      	add	r3, r2
 800f318:	88da      	ldrh	r2, [r3, #6]
 800f31a:	4978      	ldr	r1, [pc, #480]	; (800f4fc <run_shortest+0x30c>)
 800f31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31e:	332c      	adds	r3, #44	; 0x2c
 800f320:	005b      	lsls	r3, r3, #1
 800f322:	440b      	add	r3, r1
 800f324:	885b      	ldrh	r3, [r3, #2]
 800f326:	4313      	orrs	r3, r2
 800f328:	b299      	uxth	r1, r3
 800f32a:	4a74      	ldr	r2, [pc, #464]	; (800f4fc <run_shortest+0x30c>)
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	330c      	adds	r3, #12
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	4413      	add	r3, r2
 800f334:	460a      	mov	r2, r1
 800f336:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33a:	3301      	adds	r3, #1
 800f33c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f340:	2b0e      	cmp	r3, #14
 800f342:	dd87      	ble.n	800f254 <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f344:	f7ff fe30 	bl	800efa8 <pass_maker_Dijkstra>

	pass_count = 1;
 800f348:	4b6e      	ldr	r3, [pc, #440]	; (800f504 <run_shortest+0x314>)
 800f34a:	2201      	movs	r2, #1
 800f34c:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f34e:	7afb      	ldrb	r3, [r7, #11]
 800f350:	2b01      	cmp	r3, #1
 800f352:	f040 84b5 	bne.w	800fcc0 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f356:	4b6b      	ldr	r3, [pc, #428]	; (800f504 <run_shortest+0x314>)
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	461a      	mov	r2, r3
 800f35c:	4b6a      	ldr	r3, [pc, #424]	; (800f508 <run_shortest+0x318>)
 800f35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f362:	2b00      	cmp	r3, #0
 800f364:	f000 813a 	beq.w	800f5dc <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f368:	4b66      	ldr	r3, [pc, #408]	; (800f504 <run_shortest+0x314>)
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	461a      	mov	r2, r3
 800f36e:	4b66      	ldr	r3, [pc, #408]	; (800f508 <run_shortest+0x318>)
 800f370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f374:	f113 0f02 	cmn.w	r3, #2
 800f378:	d131      	bne.n	800f3de <run_shortest+0x1ee>
 800f37a:	4b62      	ldr	r3, [pc, #392]	; (800f504 <run_shortest+0x314>)
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	3b01      	subs	r3, #1
 800f380:	4a61      	ldr	r2, [pc, #388]	; (800f508 <run_shortest+0x318>)
 800f382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f386:	2b00      	cmp	r3, #0
 800f388:	dd29      	ble.n	800f3de <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f38a:	4b5e      	ldr	r3, [pc, #376]	; (800f504 <run_shortest+0x314>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	3301      	adds	r3, #1
 800f390:	4a5d      	ldr	r2, [pc, #372]	; (800f508 <run_shortest+0x318>)
 800f392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f396:	2b00      	cmp	r3, #0
 800f398:	dd21      	ble.n	800f3de <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f39a:	4b5a      	ldr	r3, [pc, #360]	; (800f504 <run_shortest+0x314>)
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	3b01      	subs	r3, #1
 800f3a0:	4a59      	ldr	r2, [pc, #356]	; (800f508 <run_shortest+0x318>)
 800f3a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3a6:	4b57      	ldr	r3, [pc, #348]	; (800f504 <run_shortest+0x314>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	3a01      	subs	r2, #1
 800f3ae:	4956      	ldr	r1, [pc, #344]	; (800f508 <run_shortest+0x318>)
 800f3b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f3b4:	4b53      	ldr	r3, [pc, #332]	; (800f504 <run_shortest+0x314>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	4a53      	ldr	r2, [pc, #332]	; (800f508 <run_shortest+0x318>)
 800f3bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3c0:	4b50      	ldr	r3, [pc, #320]	; (800f504 <run_shortest+0x314>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	3a01      	subs	r2, #1
 800f3c8:	494f      	ldr	r1, [pc, #316]	; (800f508 <run_shortest+0x318>)
 800f3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f3ce:	4b4d      	ldr	r3, [pc, #308]	; (800f504 <run_shortest+0x314>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	4b4c      	ldr	r3, [pc, #304]	; (800f508 <run_shortest+0x318>)
 800f3d6:	f06f 0203 	mvn.w	r2, #3
 800f3da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f3de:	4b49      	ldr	r3, [pc, #292]	; (800f504 <run_shortest+0x314>)
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	4b48      	ldr	r3, [pc, #288]	; (800f508 <run_shortest+0x318>)
 800f3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ea:	f113 0f03 	cmn.w	r3, #3
 800f3ee:	d131      	bne.n	800f454 <run_shortest+0x264>
 800f3f0:	4b44      	ldr	r3, [pc, #272]	; (800f504 <run_shortest+0x314>)
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	4a44      	ldr	r2, [pc, #272]	; (800f508 <run_shortest+0x318>)
 800f3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	dd29      	ble.n	800f454 <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f400:	4b40      	ldr	r3, [pc, #256]	; (800f504 <run_shortest+0x314>)
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	3301      	adds	r3, #1
 800f406:	4a40      	ldr	r2, [pc, #256]	; (800f508 <run_shortest+0x318>)
 800f408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	dd21      	ble.n	800f454 <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f410:	4b3c      	ldr	r3, [pc, #240]	; (800f504 <run_shortest+0x314>)
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	3b01      	subs	r3, #1
 800f416:	4a3c      	ldr	r2, [pc, #240]	; (800f508 <run_shortest+0x318>)
 800f418:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f41c:	4b39      	ldr	r3, [pc, #228]	; (800f504 <run_shortest+0x314>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	3b01      	subs	r3, #1
 800f422:	3a01      	subs	r2, #1
 800f424:	4938      	ldr	r1, [pc, #224]	; (800f508 <run_shortest+0x318>)
 800f426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f42a:	4b36      	ldr	r3, [pc, #216]	; (800f504 <run_shortest+0x314>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	3301      	adds	r3, #1
 800f430:	4a35      	ldr	r2, [pc, #212]	; (800f508 <run_shortest+0x318>)
 800f432:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f436:	4b33      	ldr	r3, [pc, #204]	; (800f504 <run_shortest+0x314>)
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	3301      	adds	r3, #1
 800f43c:	3a01      	subs	r2, #1
 800f43e:	4932      	ldr	r1, [pc, #200]	; (800f508 <run_shortest+0x318>)
 800f440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f444:	4b2f      	ldr	r3, [pc, #188]	; (800f504 <run_shortest+0x314>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	4619      	mov	r1, r3
 800f44a:	4b2f      	ldr	r3, [pc, #188]	; (800f508 <run_shortest+0x318>)
 800f44c:	f06f 0204 	mvn.w	r2, #4
 800f450:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f454:	4b2b      	ldr	r3, [pc, #172]	; (800f504 <run_shortest+0x314>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	3b01      	subs	r3, #1
 800f45a:	4a2b      	ldr	r2, [pc, #172]	; (800f508 <run_shortest+0x318>)
 800f45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f460:	2b00      	cmp	r3, #0
 800f462:	dd43      	ble.n	800f4ec <run_shortest+0x2fc>
 800f464:	4b27      	ldr	r3, [pc, #156]	; (800f504 <run_shortest+0x314>)
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	461a      	mov	r2, r3
 800f46a:	4b27      	ldr	r3, [pc, #156]	; (800f508 <run_shortest+0x318>)
 800f46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f470:	f113 0f02 	cmn.w	r3, #2
 800f474:	d13a      	bne.n	800f4ec <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f476:	4b23      	ldr	r3, [pc, #140]	; (800f504 <run_shortest+0x314>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	3301      	adds	r3, #1
 800f47c:	4a22      	ldr	r2, [pc, #136]	; (800f508 <run_shortest+0x318>)
 800f47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f482:	f113 0f02 	cmn.w	r3, #2
 800f486:	d131      	bne.n	800f4ec <run_shortest+0x2fc>
 800f488:	4b1e      	ldr	r3, [pc, #120]	; (800f504 <run_shortest+0x314>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	3302      	adds	r3, #2
 800f48e:	4a1e      	ldr	r2, [pc, #120]	; (800f508 <run_shortest+0x318>)
 800f490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f494:	2b00      	cmp	r3, #0
 800f496:	dd29      	ble.n	800f4ec <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f498:	4b1a      	ldr	r3, [pc, #104]	; (800f504 <run_shortest+0x314>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	3b01      	subs	r3, #1
 800f49e:	4a1a      	ldr	r2, [pc, #104]	; (800f508 <run_shortest+0x318>)
 800f4a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4a4:	4b17      	ldr	r3, [pc, #92]	; (800f504 <run_shortest+0x314>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	3a01      	subs	r2, #1
 800f4ac:	4916      	ldr	r1, [pc, #88]	; (800f508 <run_shortest+0x318>)
 800f4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f4b2:	4b14      	ldr	r3, [pc, #80]	; (800f504 <run_shortest+0x314>)
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	4b13      	ldr	r3, [pc, #76]	; (800f508 <run_shortest+0x318>)
 800f4ba:	f06f 0205 	mvn.w	r2, #5
 800f4be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f4c2:	4b10      	ldr	r3, [pc, #64]	; (800f504 <run_shortest+0x314>)
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	4a0f      	ldr	r2, [pc, #60]	; (800f508 <run_shortest+0x318>)
 800f4ca:	f04f 31ff 	mov.w	r1, #4294967295
 800f4ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f4d2:	4b0c      	ldr	r3, [pc, #48]	; (800f504 <run_shortest+0x314>)
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	3302      	adds	r3, #2
 800f4d8:	4a0b      	ldr	r2, [pc, #44]	; (800f508 <run_shortest+0x318>)
 800f4da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4de:	4b09      	ldr	r3, [pc, #36]	; (800f504 <run_shortest+0x314>)
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	3302      	adds	r3, #2
 800f4e4:	3a01      	subs	r2, #1
 800f4e6:	4908      	ldr	r1, [pc, #32]	; (800f508 <run_shortest+0x318>)
 800f4e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f4ec:	4b05      	ldr	r3, [pc, #20]	; (800f504 <run_shortest+0x314>)
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	4a05      	ldr	r2, [pc, #20]	; (800f508 <run_shortest+0x318>)
 800f4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	e007      	b.n	800f50c <run_shortest+0x31c>
 800f4fc:	20000c3c 	.word	0x20000c3c
 800f500:	20000cb4 	.word	0x20000cb4
 800f504:	20000828 	.word	0x20000828
 800f508:	2000083c 	.word	0x2000083c
 800f50c:	dd43      	ble.n	800f596 <run_shortest+0x3a6>
 800f50e:	4b31      	ldr	r3, [pc, #196]	; (800f5d4 <run_shortest+0x3e4>)
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	4b30      	ldr	r3, [pc, #192]	; (800f5d8 <run_shortest+0x3e8>)
 800f516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f51a:	f113 0f03 	cmn.w	r3, #3
 800f51e:	d13a      	bne.n	800f596 <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f520:	4b2c      	ldr	r3, [pc, #176]	; (800f5d4 <run_shortest+0x3e4>)
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	3301      	adds	r3, #1
 800f526:	4a2c      	ldr	r2, [pc, #176]	; (800f5d8 <run_shortest+0x3e8>)
 800f528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f52c:	f113 0f03 	cmn.w	r3, #3
 800f530:	d131      	bne.n	800f596 <run_shortest+0x3a6>
 800f532:	4b28      	ldr	r3, [pc, #160]	; (800f5d4 <run_shortest+0x3e4>)
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	3302      	adds	r3, #2
 800f538:	4a27      	ldr	r2, [pc, #156]	; (800f5d8 <run_shortest+0x3e8>)
 800f53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	dd29      	ble.n	800f596 <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f542:	4b24      	ldr	r3, [pc, #144]	; (800f5d4 <run_shortest+0x3e4>)
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	3b01      	subs	r3, #1
 800f548:	4a23      	ldr	r2, [pc, #140]	; (800f5d8 <run_shortest+0x3e8>)
 800f54a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f54e:	4b21      	ldr	r3, [pc, #132]	; (800f5d4 <run_shortest+0x3e4>)
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	3b01      	subs	r3, #1
 800f554:	3a01      	subs	r2, #1
 800f556:	4920      	ldr	r1, [pc, #128]	; (800f5d8 <run_shortest+0x3e8>)
 800f558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f55c:	4b1d      	ldr	r3, [pc, #116]	; (800f5d4 <run_shortest+0x3e4>)
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	4619      	mov	r1, r3
 800f562:	4b1d      	ldr	r3, [pc, #116]	; (800f5d8 <run_shortest+0x3e8>)
 800f564:	f06f 0206 	mvn.w	r2, #6
 800f568:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f56c:	4b19      	ldr	r3, [pc, #100]	; (800f5d4 <run_shortest+0x3e4>)
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	3301      	adds	r3, #1
 800f572:	4a19      	ldr	r2, [pc, #100]	; (800f5d8 <run_shortest+0x3e8>)
 800f574:	f04f 31ff 	mov.w	r1, #4294967295
 800f578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f57c:	4b15      	ldr	r3, [pc, #84]	; (800f5d4 <run_shortest+0x3e4>)
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	3302      	adds	r3, #2
 800f582:	4a15      	ldr	r2, [pc, #84]	; (800f5d8 <run_shortest+0x3e8>)
 800f584:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f588:	4b12      	ldr	r3, [pc, #72]	; (800f5d4 <run_shortest+0x3e4>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	3302      	adds	r3, #2
 800f58e:	3a01      	subs	r2, #1
 800f590:	4911      	ldr	r1, [pc, #68]	; (800f5d8 <run_shortest+0x3e8>)
 800f592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f596:	4b0f      	ldr	r3, [pc, #60]	; (800f5d4 <run_shortest+0x3e4>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	461a      	mov	r2, r3
 800f59c:	4b0e      	ldr	r3, [pc, #56]	; (800f5d8 <run_shortest+0x3e8>)
 800f59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a2:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f5a6:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <run_shortest+0x3e4>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	3b01      	subs	r3, #1
 800f5ac:	4a0a      	ldr	r2, [pc, #40]	; (800f5d8 <run_shortest+0x3e8>)
 800f5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d107      	bne.n	800f5c6 <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f5b6:	4b07      	ldr	r3, [pc, #28]	; (800f5d4 <run_shortest+0x3e4>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	4a06      	ldr	r2, [pc, #24]	; (800f5d8 <run_shortest+0x3e8>)
 800f5be:	f04f 31ff 	mov.w	r1, #4294967295
 800f5c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f5c6:	4b03      	ldr	r3, [pc, #12]	; (800f5d4 <run_shortest+0x3e4>)
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	b2da      	uxtb	r2, r3
 800f5ce:	4b01      	ldr	r3, [pc, #4]	; (800f5d4 <run_shortest+0x3e4>)
 800f5d0:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f5d2:	e6c0      	b.n	800f356 <run_shortest+0x166>
 800f5d4:	20000828 	.word	0x20000828
 800f5d8:	2000083c 	.word	0x2000083c
			break;
 800f5dc:	bf00      	nop
	}

	pass_count = 1;
 800f5de:	4b8c      	ldr	r3, [pc, #560]	; (800f810 <run_shortest+0x620>)
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f5e4:	7a7b      	ldrb	r3, [r7, #9]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	f040 836a 	bne.w	800fcc0 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f5ec:	4b88      	ldr	r3, [pc, #544]	; (800f810 <run_shortest+0x620>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	4b88      	ldr	r3, [pc, #544]	; (800f814 <run_shortest+0x624>)
 800f5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f000 81f1 	beq.w	800f9e0 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f5fe:	4b84      	ldr	r3, [pc, #528]	; (800f810 <run_shortest+0x620>)
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	3b01      	subs	r3, #1
 800f604:	4a83      	ldr	r2, [pc, #524]	; (800f814 <run_shortest+0x624>)
 800f606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f340 81dc 	ble.w	800f9c8 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f610:	4b7f      	ldr	r3, [pc, #508]	; (800f810 <run_shortest+0x620>)
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	461a      	mov	r2, r3
 800f616:	4b7f      	ldr	r3, [pc, #508]	; (800f814 <run_shortest+0x624>)
 800f618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f61c:	f113 0f02 	cmn.w	r3, #2
 800f620:	d009      	beq.n	800f636 <run_shortest+0x446>
 800f622:	4b7b      	ldr	r3, [pc, #492]	; (800f810 <run_shortest+0x620>)
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	461a      	mov	r2, r3
 800f628:	4b7a      	ldr	r3, [pc, #488]	; (800f814 <run_shortest+0x624>)
 800f62a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f62e:	f113 0f03 	cmn.w	r3, #3
 800f632:	f040 81c9 	bne.w	800f9c8 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f636:	4b76      	ldr	r3, [pc, #472]	; (800f810 <run_shortest+0x620>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	461a      	mov	r2, r3
 800f63c:	4b75      	ldr	r3, [pc, #468]	; (800f814 <run_shortest+0x624>)
 800f63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f642:	f113 0f02 	cmn.w	r3, #2
 800f646:	d12d      	bne.n	800f6a4 <run_shortest+0x4b4>
 800f648:	4b71      	ldr	r3, [pc, #452]	; (800f810 <run_shortest+0x620>)
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	3301      	adds	r3, #1
 800f64e:	4a71      	ldr	r2, [pc, #452]	; (800f814 <run_shortest+0x624>)
 800f650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f654:	f113 0f03 	cmn.w	r3, #3
 800f658:	d124      	bne.n	800f6a4 <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f65a:	4b6d      	ldr	r3, [pc, #436]	; (800f810 <run_shortest+0x620>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	3b01      	subs	r3, #1
 800f660:	4a6c      	ldr	r2, [pc, #432]	; (800f814 <run_shortest+0x624>)
 800f662:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f666:	4b6a      	ldr	r3, [pc, #424]	; (800f810 <run_shortest+0x620>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	3b01      	subs	r3, #1
 800f66c:	3a01      	subs	r2, #1
 800f66e:	4969      	ldr	r1, [pc, #420]	; (800f814 <run_shortest+0x624>)
 800f670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f674:	4b66      	ldr	r3, [pc, #408]	; (800f810 <run_shortest+0x620>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	3b01      	subs	r3, #1
 800f67a:	4a66      	ldr	r2, [pc, #408]	; (800f814 <run_shortest+0x624>)
 800f67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d107      	bne.n	800f694 <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f684:	4b62      	ldr	r3, [pc, #392]	; (800f810 <run_shortest+0x620>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	3b01      	subs	r3, #1
 800f68a:	4a62      	ldr	r2, [pc, #392]	; (800f814 <run_shortest+0x624>)
 800f68c:	f04f 31ff 	mov.w	r1, #4294967295
 800f690:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f694:	4b5e      	ldr	r3, [pc, #376]	; (800f810 <run_shortest+0x620>)
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	4619      	mov	r1, r3
 800f69a:	4b5e      	ldr	r3, [pc, #376]	; (800f814 <run_shortest+0x624>)
 800f69c:	f06f 0207 	mvn.w	r2, #7
 800f6a0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f6a4:	4b5a      	ldr	r3, [pc, #360]	; (800f810 <run_shortest+0x620>)
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	4b5a      	ldr	r3, [pc, #360]	; (800f814 <run_shortest+0x624>)
 800f6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b0:	f113 0f03 	cmn.w	r3, #3
 800f6b4:	d12d      	bne.n	800f712 <run_shortest+0x522>
 800f6b6:	4b56      	ldr	r3, [pc, #344]	; (800f810 <run_shortest+0x620>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	4a55      	ldr	r2, [pc, #340]	; (800f814 <run_shortest+0x624>)
 800f6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6c2:	f113 0f02 	cmn.w	r3, #2
 800f6c6:	d124      	bne.n	800f712 <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f6c8:	4b51      	ldr	r3, [pc, #324]	; (800f810 <run_shortest+0x620>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	4a51      	ldr	r2, [pc, #324]	; (800f814 <run_shortest+0x624>)
 800f6d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f6d4:	4b4e      	ldr	r3, [pc, #312]	; (800f810 <run_shortest+0x620>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	3a01      	subs	r2, #1
 800f6dc:	494d      	ldr	r1, [pc, #308]	; (800f814 <run_shortest+0x624>)
 800f6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f6e2:	4b4b      	ldr	r3, [pc, #300]	; (800f810 <run_shortest+0x620>)
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	3b01      	subs	r3, #1
 800f6e8:	4a4a      	ldr	r2, [pc, #296]	; (800f814 <run_shortest+0x624>)
 800f6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d107      	bne.n	800f702 <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f6f2:	4b47      	ldr	r3, [pc, #284]	; (800f810 <run_shortest+0x620>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	3b01      	subs	r3, #1
 800f6f8:	4a46      	ldr	r2, [pc, #280]	; (800f814 <run_shortest+0x624>)
 800f6fa:	f04f 31ff 	mov.w	r1, #4294967295
 800f6fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f702:	4b43      	ldr	r3, [pc, #268]	; (800f810 <run_shortest+0x620>)
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	4619      	mov	r1, r3
 800f708:	4b42      	ldr	r3, [pc, #264]	; (800f814 <run_shortest+0x624>)
 800f70a:	f06f 0208 	mvn.w	r2, #8
 800f70e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f712:	4b3f      	ldr	r3, [pc, #252]	; (800f810 <run_shortest+0x620>)
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	461a      	mov	r2, r3
 800f718:	4b3e      	ldr	r3, [pc, #248]	; (800f814 <run_shortest+0x624>)
 800f71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f71e:	f113 0f02 	cmn.w	r3, #2
 800f722:	d135      	bne.n	800f790 <run_shortest+0x5a0>
 800f724:	4b3a      	ldr	r3, [pc, #232]	; (800f810 <run_shortest+0x620>)
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	3301      	adds	r3, #1
 800f72a:	4a3a      	ldr	r2, [pc, #232]	; (800f814 <run_shortest+0x624>)
 800f72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f730:	f113 0f02 	cmn.w	r3, #2
 800f734:	d12c      	bne.n	800f790 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f736:	4b36      	ldr	r3, [pc, #216]	; (800f810 <run_shortest+0x620>)
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	3b01      	subs	r3, #1
 800f73c:	4a35      	ldr	r2, [pc, #212]	; (800f814 <run_shortest+0x624>)
 800f73e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f742:	4b33      	ldr	r3, [pc, #204]	; (800f810 <run_shortest+0x620>)
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	3b01      	subs	r3, #1
 800f748:	3a01      	subs	r2, #1
 800f74a:	4932      	ldr	r1, [pc, #200]	; (800f814 <run_shortest+0x624>)
 800f74c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f750:	4b2f      	ldr	r3, [pc, #188]	; (800f810 <run_shortest+0x620>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	3b01      	subs	r3, #1
 800f756:	4a2f      	ldr	r2, [pc, #188]	; (800f814 <run_shortest+0x624>)
 800f758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d107      	bne.n	800f770 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f760:	4b2b      	ldr	r3, [pc, #172]	; (800f810 <run_shortest+0x620>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	3b01      	subs	r3, #1
 800f766:	4a2b      	ldr	r2, [pc, #172]	; (800f814 <run_shortest+0x624>)
 800f768:	f04f 31ff 	mov.w	r1, #4294967295
 800f76c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f770:	4b27      	ldr	r3, [pc, #156]	; (800f810 <run_shortest+0x620>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	4619      	mov	r1, r3
 800f776:	4b27      	ldr	r3, [pc, #156]	; (800f814 <run_shortest+0x624>)
 800f778:	f06f 0209 	mvn.w	r2, #9
 800f77c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f780:	4b23      	ldr	r3, [pc, #140]	; (800f810 <run_shortest+0x620>)
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	3301      	adds	r3, #1
 800f786:	4a23      	ldr	r2, [pc, #140]	; (800f814 <run_shortest+0x624>)
 800f788:	f04f 31ff 	mov.w	r1, #4294967295
 800f78c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f790:	4b1f      	ldr	r3, [pc, #124]	; (800f810 <run_shortest+0x620>)
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	461a      	mov	r2, r3
 800f796:	4b1f      	ldr	r3, [pc, #124]	; (800f814 <run_shortest+0x624>)
 800f798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79c:	f113 0f03 	cmn.w	r3, #3
 800f7a0:	d140      	bne.n	800f824 <run_shortest+0x634>
 800f7a2:	4b1b      	ldr	r3, [pc, #108]	; (800f810 <run_shortest+0x620>)
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	4a1a      	ldr	r2, [pc, #104]	; (800f814 <run_shortest+0x624>)
 800f7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7ae:	f113 0f03 	cmn.w	r3, #3
 800f7b2:	d137      	bne.n	800f824 <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f7b4:	4b16      	ldr	r3, [pc, #88]	; (800f810 <run_shortest+0x620>)
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	4a16      	ldr	r2, [pc, #88]	; (800f814 <run_shortest+0x624>)
 800f7bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f7c0:	4b13      	ldr	r3, [pc, #76]	; (800f810 <run_shortest+0x620>)
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	3a01      	subs	r2, #1
 800f7c8:	4912      	ldr	r1, [pc, #72]	; (800f814 <run_shortest+0x624>)
 800f7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f7ce:	4b10      	ldr	r3, [pc, #64]	; (800f810 <run_shortest+0x620>)
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	4a0f      	ldr	r2, [pc, #60]	; (800f814 <run_shortest+0x624>)
 800f7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d107      	bne.n	800f7ee <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f7de:	4b0c      	ldr	r3, [pc, #48]	; (800f810 <run_shortest+0x620>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	3b01      	subs	r3, #1
 800f7e4:	4a0b      	ldr	r2, [pc, #44]	; (800f814 <run_shortest+0x624>)
 800f7e6:	f04f 31ff 	mov.w	r1, #4294967295
 800f7ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f7ee:	4b08      	ldr	r3, [pc, #32]	; (800f810 <run_shortest+0x620>)
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	4b07      	ldr	r3, [pc, #28]	; (800f814 <run_shortest+0x624>)
 800f7f6:	f06f 020a 	mvn.w	r2, #10
 800f7fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f7fe:	4b04      	ldr	r3, [pc, #16]	; (800f810 <run_shortest+0x620>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	3301      	adds	r3, #1
 800f804:	4a03      	ldr	r2, [pc, #12]	; (800f814 <run_shortest+0x624>)
 800f806:	f04f 31ff 	mov.w	r1, #4294967295
 800f80a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f80e:	e009      	b.n	800f824 <run_shortest+0x634>
 800f810:	20000828 	.word	0x20000828
 800f814:	2000083c 	.word	0x2000083c
						pass_count++;
 800f818:	4b6f      	ldr	r3, [pc, #444]	; (800f9d8 <run_shortest+0x7e8>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	3301      	adds	r3, #1
 800f81e:	b2da      	uxtb	r2, r3
 800f820:	4b6d      	ldr	r3, [pc, #436]	; (800f9d8 <run_shortest+0x7e8>)
 800f822:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f824:	4b6c      	ldr	r3, [pc, #432]	; (800f9d8 <run_shortest+0x7e8>)
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	461a      	mov	r2, r3
 800f82a:	4b6c      	ldr	r3, [pc, #432]	; (800f9dc <run_shortest+0x7ec>)
 800f82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f830:	2b00      	cmp	r3, #0
 800f832:	dbf1      	blt.n	800f818 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f834:	4b68      	ldr	r3, [pc, #416]	; (800f9d8 <run_shortest+0x7e8>)
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	3b01      	subs	r3, #1
 800f83a:	4a68      	ldr	r2, [pc, #416]	; (800f9dc <run_shortest+0x7ec>)
 800f83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f840:	f113 0f02 	cmn.w	r3, #2
 800f844:	d15b      	bne.n	800f8fe <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f846:	4b64      	ldr	r3, [pc, #400]	; (800f9d8 <run_shortest+0x7e8>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	3b02      	subs	r3, #2
 800f84c:	4a63      	ldr	r2, [pc, #396]	; (800f9dc <run_shortest+0x7ec>)
 800f84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f852:	f113 0f02 	cmn.w	r3, #2
 800f856:	d12d      	bne.n	800f8b4 <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f858:	4b5f      	ldr	r3, [pc, #380]	; (800f9d8 <run_shortest+0x7e8>)
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	461a      	mov	r2, r3
 800f85e:	4b5f      	ldr	r3, [pc, #380]	; (800f9dc <run_shortest+0x7ec>)
 800f860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f864:	4a5c      	ldr	r2, [pc, #368]	; (800f9d8 <run_shortest+0x7e8>)
 800f866:	7812      	ldrb	r2, [r2, #0]
 800f868:	4611      	mov	r1, r2
 800f86a:	3b01      	subs	r3, #1
 800f86c:	4a5b      	ldr	r2, [pc, #364]	; (800f9dc <run_shortest+0x7ec>)
 800f86e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f872:	4b59      	ldr	r3, [pc, #356]	; (800f9d8 <run_shortest+0x7e8>)
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	461a      	mov	r2, r3
 800f878:	4b58      	ldr	r3, [pc, #352]	; (800f9dc <run_shortest+0x7ec>)
 800f87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d107      	bne.n	800f892 <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f882:	4b55      	ldr	r3, [pc, #340]	; (800f9d8 <run_shortest+0x7e8>)
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	4619      	mov	r1, r3
 800f888:	4b54      	ldr	r3, [pc, #336]	; (800f9dc <run_shortest+0x7ec>)
 800f88a:	f04f 32ff 	mov.w	r2, #4294967295
 800f88e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f892:	4b51      	ldr	r3, [pc, #324]	; (800f9d8 <run_shortest+0x7e8>)
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	3b01      	subs	r3, #1
 800f898:	4a50      	ldr	r2, [pc, #320]	; (800f9dc <run_shortest+0x7ec>)
 800f89a:	f06f 010d 	mvn.w	r1, #13
 800f89e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f8a2:	4b4d      	ldr	r3, [pc, #308]	; (800f9d8 <run_shortest+0x7e8>)
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	3b02      	subs	r3, #2
 800f8a8:	4a4c      	ldr	r2, [pc, #304]	; (800f9dc <run_shortest+0x7ec>)
 800f8aa:	f04f 31ff 	mov.w	r1, #4294967295
 800f8ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f8b2:	e024      	b.n	800f8fe <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f8b4:	4b48      	ldr	r3, [pc, #288]	; (800f9d8 <run_shortest+0x7e8>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4b48      	ldr	r3, [pc, #288]	; (800f9dc <run_shortest+0x7ec>)
 800f8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8c0:	4a45      	ldr	r2, [pc, #276]	; (800f9d8 <run_shortest+0x7e8>)
 800f8c2:	7812      	ldrb	r2, [r2, #0]
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	4a44      	ldr	r2, [pc, #272]	; (800f9dc <run_shortest+0x7ec>)
 800f8ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f8ce:	4b42      	ldr	r3, [pc, #264]	; (800f9d8 <run_shortest+0x7e8>)
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	4b41      	ldr	r3, [pc, #260]	; (800f9dc <run_shortest+0x7ec>)
 800f8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d107      	bne.n	800f8ee <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f8de:	4b3e      	ldr	r3, [pc, #248]	; (800f9d8 <run_shortest+0x7e8>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	4b3d      	ldr	r3, [pc, #244]	; (800f9dc <run_shortest+0x7ec>)
 800f8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f8ee:	4b3a      	ldr	r3, [pc, #232]	; (800f9d8 <run_shortest+0x7e8>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	4a39      	ldr	r2, [pc, #228]	; (800f9dc <run_shortest+0x7ec>)
 800f8f6:	f06f 010b 	mvn.w	r1, #11
 800f8fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f8fe:	4b36      	ldr	r3, [pc, #216]	; (800f9d8 <run_shortest+0x7e8>)
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	3b01      	subs	r3, #1
 800f904:	4a35      	ldr	r2, [pc, #212]	; (800f9dc <run_shortest+0x7ec>)
 800f906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f90a:	f113 0f03 	cmn.w	r3, #3
 800f90e:	d15b      	bne.n	800f9c8 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f910:	4b31      	ldr	r3, [pc, #196]	; (800f9d8 <run_shortest+0x7e8>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	3b02      	subs	r3, #2
 800f916:	4a31      	ldr	r2, [pc, #196]	; (800f9dc <run_shortest+0x7ec>)
 800f918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f91c:	f113 0f03 	cmn.w	r3, #3
 800f920:	d12d      	bne.n	800f97e <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f922:	4b2d      	ldr	r3, [pc, #180]	; (800f9d8 <run_shortest+0x7e8>)
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	461a      	mov	r2, r3
 800f928:	4b2c      	ldr	r3, [pc, #176]	; (800f9dc <run_shortest+0x7ec>)
 800f92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f92e:	4a2a      	ldr	r2, [pc, #168]	; (800f9d8 <run_shortest+0x7e8>)
 800f930:	7812      	ldrb	r2, [r2, #0]
 800f932:	4611      	mov	r1, r2
 800f934:	3b01      	subs	r3, #1
 800f936:	4a29      	ldr	r2, [pc, #164]	; (800f9dc <run_shortest+0x7ec>)
 800f938:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f93c:	4b26      	ldr	r3, [pc, #152]	; (800f9d8 <run_shortest+0x7e8>)
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	461a      	mov	r2, r3
 800f942:	4b26      	ldr	r3, [pc, #152]	; (800f9dc <run_shortest+0x7ec>)
 800f944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d107      	bne.n	800f95c <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f94c:	4b22      	ldr	r3, [pc, #136]	; (800f9d8 <run_shortest+0x7e8>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	4619      	mov	r1, r3
 800f952:	4b22      	ldr	r3, [pc, #136]	; (800f9dc <run_shortest+0x7ec>)
 800f954:	f04f 32ff 	mov.w	r2, #4294967295
 800f958:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f95c:	4b1e      	ldr	r3, [pc, #120]	; (800f9d8 <run_shortest+0x7e8>)
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	3b01      	subs	r3, #1
 800f962:	4a1e      	ldr	r2, [pc, #120]	; (800f9dc <run_shortest+0x7ec>)
 800f964:	f06f 010e 	mvn.w	r1, #14
 800f968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f96c:	4b1a      	ldr	r3, [pc, #104]	; (800f9d8 <run_shortest+0x7e8>)
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	3b02      	subs	r3, #2
 800f972:	4a1a      	ldr	r2, [pc, #104]	; (800f9dc <run_shortest+0x7ec>)
 800f974:	f04f 31ff 	mov.w	r1, #4294967295
 800f978:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f97c:	e024      	b.n	800f9c8 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f97e:	4b16      	ldr	r3, [pc, #88]	; (800f9d8 <run_shortest+0x7e8>)
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	4b15      	ldr	r3, [pc, #84]	; (800f9dc <run_shortest+0x7ec>)
 800f986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f98a:	4a13      	ldr	r2, [pc, #76]	; (800f9d8 <run_shortest+0x7e8>)
 800f98c:	7812      	ldrb	r2, [r2, #0]
 800f98e:	4611      	mov	r1, r2
 800f990:	3b01      	subs	r3, #1
 800f992:	4a12      	ldr	r2, [pc, #72]	; (800f9dc <run_shortest+0x7ec>)
 800f994:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f998:	4b0f      	ldr	r3, [pc, #60]	; (800f9d8 <run_shortest+0x7e8>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	461a      	mov	r2, r3
 800f99e:	4b0f      	ldr	r3, [pc, #60]	; (800f9dc <run_shortest+0x7ec>)
 800f9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d107      	bne.n	800f9b8 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f9a8:	4b0b      	ldr	r3, [pc, #44]	; (800f9d8 <run_shortest+0x7e8>)
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	4b0b      	ldr	r3, [pc, #44]	; (800f9dc <run_shortest+0x7ec>)
 800f9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f9b8:	4b07      	ldr	r3, [pc, #28]	; (800f9d8 <run_shortest+0x7e8>)
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	3b01      	subs	r3, #1
 800f9be:	4a07      	ldr	r2, [pc, #28]	; (800f9dc <run_shortest+0x7ec>)
 800f9c0:	f06f 010c 	mvn.w	r1, #12
 800f9c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f9c8:	4b03      	ldr	r3, [pc, #12]	; (800f9d8 <run_shortest+0x7e8>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	4b01      	ldr	r3, [pc, #4]	; (800f9d8 <run_shortest+0x7e8>)
 800f9d2:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f9d4:	e60a      	b.n	800f5ec <run_shortest+0x3fc>
 800f9d6:	bf00      	nop
 800f9d8:	20000828 	.word	0x20000828
 800f9dc:	2000083c 	.word	0x2000083c
				break;
 800f9e0:	bf00      	nop
		}

		pass_count = 1;
 800f9e2:	4ba3      	ldr	r3, [pc, #652]	; (800fc70 <run_shortest+0xa80>)
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f9e8:	4ba1      	ldr	r3, [pc, #644]	; (800fc70 <run_shortest+0xa80>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4ba1      	ldr	r3, [pc, #644]	; (800fc74 <run_shortest+0xa84>)
 800f9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f000 813f 	beq.w	800fc78 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f9fa:	4b9d      	ldr	r3, [pc, #628]	; (800fc70 <run_shortest+0xa80>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	461a      	mov	r2, r3
 800fa00:	4b9c      	ldr	r3, [pc, #624]	; (800fc74 <run_shortest+0xa84>)
 800fa02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa06:	f113 0f08 	cmn.w	r3, #8
 800fa0a:	d01b      	beq.n	800fa44 <run_shortest+0x854>
 800fa0c:	4b98      	ldr	r3, [pc, #608]	; (800fc70 <run_shortest+0xa80>)
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	461a      	mov	r2, r3
 800fa12:	4b98      	ldr	r3, [pc, #608]	; (800fc74 <run_shortest+0xa84>)
 800fa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa18:	f113 0f09 	cmn.w	r3, #9
 800fa1c:	d012      	beq.n	800fa44 <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800fa1e:	4b94      	ldr	r3, [pc, #592]	; (800fc70 <run_shortest+0xa80>)
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	461a      	mov	r2, r3
 800fa24:	4b93      	ldr	r3, [pc, #588]	; (800fc74 <run_shortest+0xa84>)
 800fa26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2a:	f113 0f0a 	cmn.w	r3, #10
 800fa2e:	d009      	beq.n	800fa44 <run_shortest+0x854>
 800fa30:	4b8f      	ldr	r3, [pc, #572]	; (800fc70 <run_shortest+0xa80>)
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	461a      	mov	r2, r3
 800fa36:	4b8f      	ldr	r3, [pc, #572]	; (800fc74 <run_shortest+0xa84>)
 800fa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa3c:	f113 0f0b 	cmn.w	r3, #11
 800fa40:	f040 810f 	bne.w	800fc62 <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800fa44:	4b8a      	ldr	r3, [pc, #552]	; (800fc70 <run_shortest+0xa80>)
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	4b8a      	ldr	r3, [pc, #552]	; (800fc74 <run_shortest+0xa84>)
 800fa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa50:	f113 0f08 	cmn.w	r3, #8
 800fa54:	d008      	beq.n	800fa68 <run_shortest+0x878>
 800fa56:	4b86      	ldr	r3, [pc, #536]	; (800fc70 <run_shortest+0xa80>)
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4b85      	ldr	r3, [pc, #532]	; (800fc74 <run_shortest+0xa84>)
 800fa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa62:	f113 0f0a 	cmn.w	r3, #10
 800fa66:	d102      	bne.n	800fa6e <run_shortest+0x87e>
					slant_direction = -3;
 800fa68:	f06f 0302 	mvn.w	r3, #2
 800fa6c:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800fa6e:	4b80      	ldr	r3, [pc, #512]	; (800fc70 <run_shortest+0xa80>)
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	4b7f      	ldr	r3, [pc, #508]	; (800fc74 <run_shortest+0xa84>)
 800fa76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa7a:	f113 0f09 	cmn.w	r3, #9
 800fa7e:	d008      	beq.n	800fa92 <run_shortest+0x8a2>
 800fa80:	4b7b      	ldr	r3, [pc, #492]	; (800fc70 <run_shortest+0xa80>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	461a      	mov	r2, r3
 800fa86:	4b7b      	ldr	r3, [pc, #492]	; (800fc74 <run_shortest+0xa84>)
 800fa88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa8c:	f113 0f0b 	cmn.w	r3, #11
 800fa90:	d102      	bne.n	800fa98 <run_shortest+0x8a8>
					slant_direction = -2;
 800fa92:	f06f 0301 	mvn.w	r3, #1
 800fa96:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800fa98:	4b75      	ldr	r3, [pc, #468]	; (800fc70 <run_shortest+0xa80>)
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	4b73      	ldr	r3, [pc, #460]	; (800fc70 <run_shortest+0xa80>)
 800faa2:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800faa4:	4b72      	ldr	r3, [pc, #456]	; (800fc70 <run_shortest+0xa80>)
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	461a      	mov	r2, r3
 800faaa:	4b72      	ldr	r3, [pc, #456]	; (800fc74 <run_shortest+0xa84>)
 800faac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fab4:	d105      	bne.n	800fac2 <run_shortest+0x8d2>
					pass_count++;
 800fab6:	4b6e      	ldr	r3, [pc, #440]	; (800fc70 <run_shortest+0xa80>)
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	3301      	adds	r3, #1
 800fabc:	b2da      	uxtb	r2, r3
 800fabe:	4b6c      	ldr	r3, [pc, #432]	; (800fc70 <run_shortest+0xa80>)
 800fac0:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fac2:	4b6b      	ldr	r3, [pc, #428]	; (800fc70 <run_shortest+0xa80>)
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	461a      	mov	r2, r3
 800fac8:	4b6a      	ldr	r3, [pc, #424]	; (800fc74 <run_shortest+0xa84>)
 800faca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800face:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad2:	d105      	bne.n	800fae0 <run_shortest+0x8f0>
					pass_count++;
 800fad4:	4b66      	ldr	r3, [pc, #408]	; (800fc70 <run_shortest+0xa80>)
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	3301      	adds	r3, #1
 800fada:	b2da      	uxtb	r2, r3
 800fadc:	4b64      	ldr	r3, [pc, #400]	; (800fc70 <run_shortest+0xa80>)
 800fade:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800fae0:	4b63      	ldr	r3, [pc, #396]	; (800fc70 <run_shortest+0xa80>)
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	461a      	mov	r2, r3
 800fae6:	4b63      	ldr	r3, [pc, #396]	; (800fc74 <run_shortest+0xa84>)
 800fae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faec:	f113 0f03 	cmn.w	r3, #3
 800faf0:	f2c0 80ad 	blt.w	800fc4e <run_shortest+0xa5e>
					slant_count = pass_count;
 800faf4:	4b5e      	ldr	r3, [pc, #376]	; (800fc70 <run_shortest+0xa80>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800fafc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb00:	4a5c      	ldr	r2, [pc, #368]	; (800fc74 <run_shortest+0xa84>)
 800fb02:	2133      	movs	r1, #51	; 0x33
 800fb04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800fb08:	4b59      	ldr	r3, [pc, #356]	; (800fc70 <run_shortest+0xa80>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	4b57      	ldr	r3, [pc, #348]	; (800fc70 <run_shortest+0xa80>)
 800fb12:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800fb14:	e09b      	b.n	800fc4e <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fb16:	4b56      	ldr	r3, [pc, #344]	; (800fc70 <run_shortest+0xa80>)
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	4b55      	ldr	r3, [pc, #340]	; (800fc74 <run_shortest+0xa84>)
 800fb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb26:	d105      	bne.n	800fb34 <run_shortest+0x944>
						pass_count++;
 800fb28:	4b51      	ldr	r3, [pc, #324]	; (800fc70 <run_shortest+0xa80>)
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	4b4f      	ldr	r3, [pc, #316]	; (800fc70 <run_shortest+0xa80>)
 800fb32:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800fb34:	4b4e      	ldr	r3, [pc, #312]	; (800fc70 <run_shortest+0xa80>)
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	4b4e      	ldr	r3, [pc, #312]	; (800fc74 <run_shortest+0xa84>)
 800fb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb40:	f113 0f0c 	cmn.w	r3, #12
 800fb44:	f000 808d 	beq.w	800fc62 <run_shortest+0xa72>
 800fb48:	4b49      	ldr	r3, [pc, #292]	; (800fc70 <run_shortest+0xa80>)
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	4b49      	ldr	r3, [pc, #292]	; (800fc74 <run_shortest+0xa84>)
 800fb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb54:	f113 0f0d 	cmn.w	r3, #13
 800fb58:	f000 8083 	beq.w	800fc62 <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800fb5c:	4b44      	ldr	r3, [pc, #272]	; (800fc70 <run_shortest+0xa80>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	461a      	mov	r2, r3
 800fb62:	4b44      	ldr	r3, [pc, #272]	; (800fc74 <run_shortest+0xa84>)
 800fb64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb68:	f113 0f0e 	cmn.w	r3, #14
 800fb6c:	d079      	beq.n	800fc62 <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800fb6e:	4b40      	ldr	r3, [pc, #256]	; (800fc70 <run_shortest+0xa80>)
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	461a      	mov	r2, r3
 800fb74:	4b3f      	ldr	r3, [pc, #252]	; (800fc74 <run_shortest+0xa84>)
 800fb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb7a:	f113 0f0f 	cmn.w	r3, #15
 800fb7e:	d070      	beq.n	800fc62 <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800fb80:	4b3b      	ldr	r3, [pc, #236]	; (800fc70 <run_shortest+0xa80>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	461a      	mov	r2, r3
 800fb86:	4b3b      	ldr	r3, [pc, #236]	; (800fc74 <run_shortest+0xa84>)
 800fb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d127      	bne.n	800fbe2 <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800fb92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb96:	4a37      	ldr	r2, [pc, #220]	; (800fc74 <run_shortest+0xa84>)
 800fb98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fba0:	3a01      	subs	r2, #1
 800fba2:	4934      	ldr	r1, [pc, #208]	; (800fc74 <run_shortest+0xa84>)
 800fba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800fba8:	4b31      	ldr	r3, [pc, #196]	; (800fc70 <run_shortest+0xa80>)
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb2:	f113 0f02 	cmn.w	r3, #2
 800fbb6:	d107      	bne.n	800fbc8 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800fbb8:	4b2d      	ldr	r3, [pc, #180]	; (800fc70 <run_shortest+0xa80>)
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	4b2d      	ldr	r3, [pc, #180]	; (800fc74 <run_shortest+0xa84>)
 800fbc0:	f06f 020f 	mvn.w	r2, #15
 800fbc4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800fbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbca:	f113 0f03 	cmn.w	r3, #3
 800fbce:	d138      	bne.n	800fc42 <run_shortest+0xa52>
							pass[pass_count] = -17;
 800fbd0:	4b27      	ldr	r3, [pc, #156]	; (800fc70 <run_shortest+0xa80>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4b27      	ldr	r3, [pc, #156]	; (800fc74 <run_shortest+0xa84>)
 800fbd8:	f06f 0210 	mvn.w	r2, #16
 800fbdc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fbe0:	e02f      	b.n	800fc42 <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800fbe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbe6:	4a23      	ldr	r2, [pc, #140]	; (800fc74 <run_shortest+0xa84>)
 800fbe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbec:	2b31      	cmp	r3, #49	; 0x31
 800fbee:	dd08      	ble.n	800fc02 <run_shortest+0xa12>
							pass[pass_count] = -1;
 800fbf0:	4b1f      	ldr	r3, [pc, #124]	; (800fc70 <run_shortest+0xa80>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	4b1f      	ldr	r3, [pc, #124]	; (800fc74 <run_shortest+0xa84>)
 800fbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbfc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fc00:	e009      	b.n	800fc16 <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800fc02:	4b1b      	ldr	r3, [pc, #108]	; (800fc70 <run_shortest+0xa80>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800fc0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc0e:	4a19      	ldr	r2, [pc, #100]	; (800fc74 <run_shortest+0xa84>)
 800fc10:	2132      	movs	r1, #50	; 0x32
 800fc12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800fc16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc1a:	4a16      	ldr	r2, [pc, #88]	; (800fc74 <run_shortest+0xa84>)
 800fc1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc24:	3201      	adds	r2, #1
 800fc26:	4913      	ldr	r1, [pc, #76]	; (800fc74 <run_shortest+0xa84>)
 800fc28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800fc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2e:	f113 0f02 	cmn.w	r3, #2
 800fc32:	d103      	bne.n	800fc3c <run_shortest+0xa4c>
							slant_direction = -3;
 800fc34:	f06f 0302 	mvn.w	r3, #2
 800fc38:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc3a:	e002      	b.n	800fc42 <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800fc3c:	f06f 0301 	mvn.w	r3, #1
 800fc40:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800fc42:	4b0b      	ldr	r3, [pc, #44]	; (800fc70 <run_shortest+0xa80>)
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	3301      	adds	r3, #1
 800fc48:	b2da      	uxtb	r2, r3
 800fc4a:	4b09      	ldr	r3, [pc, #36]	; (800fc70 <run_shortest+0xa80>)
 800fc4c:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800fc4e:	4b08      	ldr	r3, [pc, #32]	; (800fc70 <run_shortest+0xa80>)
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	461a      	mov	r2, r3
 800fc54:	4b07      	ldr	r3, [pc, #28]	; (800fc74 <run_shortest+0xa84>)
 800fc56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5a:	f113 0f03 	cmn.w	r3, #3
 800fc5e:	f6bf af5a 	bge.w	800fb16 <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800fc62:	4b03      	ldr	r3, [pc, #12]	; (800fc70 <run_shortest+0xa80>)
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	3301      	adds	r3, #1
 800fc68:	b2da      	uxtb	r2, r3
 800fc6a:	4b01      	ldr	r3, [pc, #4]	; (800fc70 <run_shortest+0xa80>)
 800fc6c:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fc6e:	e6bb      	b.n	800f9e8 <run_shortest+0x7f8>
 800fc70:	20000828 	.word	0x20000828
 800fc74:	2000083c 	.word	0x2000083c
				break;
 800fc78:	bf00      	nop
		}
		pass_count=0;
 800fc7a:	4bb3      	ldr	r3, [pc, #716]	; (800ff48 <run_shortest+0xd58>)
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800fc80:	4bb1      	ldr	r3, [pc, #708]	; (800ff48 <run_shortest+0xd58>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	461a      	mov	r2, r3
 800fc86:	4bb1      	ldr	r3, [pc, #708]	; (800ff4c <run_shortest+0xd5c>)
 800fc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc8c:	2b32      	cmp	r3, #50	; 0x32
 800fc8e:	d107      	bne.n	800fca0 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800fc90:	4bad      	ldr	r3, [pc, #692]	; (800ff48 <run_shortest+0xd58>)
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	4619      	mov	r1, r3
 800fc96:	4bad      	ldr	r3, [pc, #692]	; (800ff4c <run_shortest+0xd5c>)
 800fc98:	f04f 32ff 	mov.w	r2, #4294967295
 800fc9c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800fca0:	4ba9      	ldr	r3, [pc, #676]	; (800ff48 <run_shortest+0xd58>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	461a      	mov	r2, r3
 800fca6:	4ba9      	ldr	r3, [pc, #676]	; (800ff4c <run_shortest+0xd5c>)
 800fca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d006      	beq.n	800fcbe <run_shortest+0xace>
				break;
			}
			pass_count++;
 800fcb0:	4ba5      	ldr	r3, [pc, #660]	; (800ff48 <run_shortest+0xd58>)
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	4ba3      	ldr	r3, [pc, #652]	; (800ff48 <run_shortest+0xd58>)
 800fcba:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800fcbc:	e7e0      	b.n	800fc80 <run_shortest+0xa90>
				break;
 800fcbe:	bf00      	nop
		}

	}
}
	int j = 0;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fcc4:	e00b      	b.n	800fcde <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800fcc6:	4aa1      	ldr	r2, [pc, #644]	; (800ff4c <run_shortest+0xd5c>)
 800fcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcd2:	489f      	ldr	r0, [pc, #636]	; (800ff50 <run_shortest+0xd60>)
 800fcd4:	f00f ff18 	bl	801fb08 <iprintf>
		j++;
 800fcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcda:	3301      	adds	r3, #1
 800fcdc:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fcde:	4a9b      	ldr	r2, [pc, #620]	; (800ff4c <run_shortest+0xd5c>)
 800fce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1ed      	bne.n	800fcc6 <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fcee:	e002      	b.n	800fcf6 <run_shortest+0xb06>
		pass_count2++;
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fcf6:	4a95      	ldr	r2, [pc, #596]	; (800ff4c <run_shortest+0xd5c>)
 800fcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd02:	d0f5      	beq.n	800fcf0 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fd04:	4a91      	ldr	r2, [pc, #580]	; (800ff4c <run_shortest+0xd5c>)
 800fd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd0c:	934e      	str	r3, [sp, #312]	; 0x138
 800fd0e:	4668      	mov	r0, sp
 800fd10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fd14:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fd18:	4619      	mov	r1, r3
 800fd1a:	f00f fa75 	bl	801f208 <memcpy>
 800fd1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fd22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd24:	f007 fa1a 	bl	801715c <get_center_velocity>
 800fd28:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fd2c:	6a38      	ldr	r0, [r7, #32]
 800fd2e:	f7f0 fc33 	bl	8000598 <__aeabi_f2d>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd38:	4886      	ldr	r0, [pc, #536]	; (800ff54 <run_shortest+0xd64>)
 800fd3a:	f00f fee5 	bl	801fb08 <iprintf>

	HAL_Delay(500);
 800fd3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fd42:	f007 ff8f 	bl	8017c64 <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fd46:	2001      	movs	r0, #1
 800fd48:	f7f7 fe6e 	bl	8007a28 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fd4c:	2003      	movs	r0, #3
 800fd4e:	f7f7 fe9d 	bl	8007a8c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fd52:	2003      	movs	r0, #3
 800fd54:	f7f7 fe72 	bl	8007a3c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fd58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fd5c:	f7f8 f994 	bl	8008088 <wait_ms_NoReset>
	no_safty = 1;
 800fd60:	4b7d      	ldr	r3, [pc, #500]	; (800ff58 <run_shortest+0xd68>)
 800fd62:	2201      	movs	r2, #1
 800fd64:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fd66:	4b7c      	ldr	r3, [pc, #496]	; (800ff58 <run_shortest+0xd68>)
 800fd68:	2200      	movs	r2, #0
 800fd6a:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fd6c:	f7f4 fd02 	bl	8004774 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fd70:	7abb      	ldrb	r3, [r7, #10]
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d12d      	bne.n	800fdd2 <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f7f0 fc0e 	bl	8000598 <__aeabi_f2d>
 800fd7c:	a370      	add	r3, pc, #448	; (adr r3, 800ff40 <run_shortest+0xd50>)
 800fd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd82:	f7f0 fc61 	bl	8000648 <__aeabi_dmul>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4614      	mov	r4, r2
 800fd8c:	461d      	mov	r5, r3
 800fd8e:	4b73      	ldr	r3, [pc, #460]	; (800ff5c <run_shortest+0xd6c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7f0 fc00 	bl	8000598 <__aeabi_f2d>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	4629      	mov	r1, r5
 800fda0:	f7f0 fd7c 	bl	800089c <__aeabi_ddiv>
 800fda4:	4602      	mov	r2, r0
 800fda6:	460b      	mov	r3, r1
 800fda8:	4610      	mov	r0, r2
 800fdaa:	4619      	mov	r1, r3
 800fdac:	f7f0 ff24 	bl	8000bf8 <__aeabi_d2f>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	ee00 3a10 	vmov	s0, r3
 800fdb6:	f7f7 fed5 	bl	8007b64 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fdba:	f7f7 febf 	bl	8007b3c <pl_FunMotor_start>
		HAL_Delay(600);
 800fdbe:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fdc2:	f007 ff4f 	bl	8017c64 <HAL_Delay>
		reset_gyro();
 800fdc6:	f7f1 fc7f 	bl	80016c8 <reset_gyro>
		reset_speed();
 800fdca:	f7f1 f925 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fdce:	f7f4 fcd1 	bl	8004774 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fdd2:	4b63      	ldr	r3, [pc, #396]	; (800ff60 <run_shortest+0xd70>)
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fdd8:	4b62      	ldr	r3, [pc, #392]	; (800ff64 <run_shortest+0xd74>)
 800fdda:	2201      	movs	r2, #1
 800fddc:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fdde:	4b62      	ldr	r3, [pc, #392]	; (800ff68 <run_shortest+0xd78>)
 800fde0:	2212      	movs	r2, #18
 800fde2:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fde4:	4b61      	ldr	r3, [pc, #388]	; (800ff6c <run_shortest+0xd7c>)
 800fde6:	2200      	movs	r2, #0
 800fde8:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fdea:	4b57      	ldr	r3, [pc, #348]	; (800ff48 <run_shortest+0xd58>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fe00:	2300      	movs	r3, #0
 800fe02:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fe04:	e002      	b.n	800fe0c <run_shortest+0xc1c>
		pass_count2++;
 800fe06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe08:	3301      	adds	r3, #1
 800fe0a:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fe0c:	4a4f      	ldr	r2, [pc, #316]	; (800ff4c <run_shortest+0xd5c>)
 800fe0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe18:	d0f5      	beq.n	800fe06 <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fe1a:	4a4c      	ldr	r2, [pc, #304]	; (800ff4c <run_shortest+0xd5c>)
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe22:	934e      	str	r3, [sp, #312]	; 0x138
 800fe24:	4668      	mov	r0, sp
 800fe26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fe2a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fe2e:	4619      	mov	r1, r3
 800fe30:	f00f f9ea 	bl	801f208 <memcpy>
 800fe34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe3a:	f007 f98f 	bl	801715c <get_center_velocity>
 800fe3e:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fe42:	edd7 7a08 	vldr	s15, [r7, #32]
 800fe46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fe4a:	ee17 0a90 	vmov	r0, s15
 800fe4e:	f7f0 fba3 	bl	8000598 <__aeabi_f2d>
 800fe52:	f04f 0200 	mov.w	r2, #0
 800fe56:	4b46      	ldr	r3, [pc, #280]	; (800ff70 <run_shortest+0xd80>)
 800fe58:	f7f0 fd20 	bl	800089c <__aeabi_ddiv>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	460b      	mov	r3, r1
 800fe60:	4610      	mov	r0, r2
 800fe62:	4619      	mov	r1, r3
 800fe64:	f04f 0200 	mov.w	r2, #0
 800fe68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe6c:	f7f0 fd16 	bl	800089c <__aeabi_ddiv>
 800fe70:	4602      	mov	r2, r0
 800fe72:	460b      	mov	r3, r1
 800fe74:	4610      	mov	r0, r2
 800fe76:	4619      	mov	r1, r3
 800fe78:	f7f0 febe 	bl	8000bf8 <__aeabi_d2f>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	69b8      	ldr	r0, [r7, #24]
 800fe80:	ee02 3a10 	vmov	s4, r3
 800fe84:	edd7 1a08 	vldr	s3, [r7, #32]
 800fe88:	ed97 1a08 	vldr	s2, [r7, #32]
 800fe8c:	eddf 0a39 	vldr	s1, [pc, #228]	; 800ff74 <run_shortest+0xd84>
 800fe90:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fe94:	f7f3 f852 	bl	8002f3c <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fe98:	4b2b      	ldr	r3, [pc, #172]	; (800ff48 <run_shortest+0xd58>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fea0:	e002      	b.n	800fea8 <run_shortest+0xcb8>
			pass_count2++;
 800fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea4:	3301      	adds	r3, #1
 800fea6:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fea8:	4a28      	ldr	r2, [pc, #160]	; (800ff4c <run_shortest+0xd5c>)
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feb4:	d0f5      	beq.n	800fea2 <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800feb6:	4a25      	ldr	r2, [pc, #148]	; (800ff4c <run_shortest+0xd5c>)
 800feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800febe:	934e      	str	r3, [sp, #312]	; 0x138
 800fec0:	4668      	mov	r0, sp
 800fec2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fec6:	f44f 729c 	mov.w	r2, #312	; 0x138
 800feca:	4619      	mov	r1, r3
 800fecc:	f00f f99c 	bl	801f208 <memcpy>
 800fed0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fed6:	f007 f941 	bl	801715c <get_center_velocity>
 800feda:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fede:	4b1a      	ldr	r3, [pc, #104]	; (800ff48 <run_shortest+0xd58>)
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	461a      	mov	r2, r3
 800fee4:	4b19      	ldr	r3, [pc, #100]	; (800ff4c <run_shortest+0xd5c>)
 800fee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feee:	d106      	bne.n	800fefe <run_shortest+0xd0e>
			pass_count++;
 800fef0:	4b15      	ldr	r3, [pc, #84]	; (800ff48 <run_shortest+0xd58>)
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	3301      	adds	r3, #1
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	4b13      	ldr	r3, [pc, #76]	; (800ff48 <run_shortest+0xd58>)
 800fefa:	701a      	strb	r2, [r3, #0]
 800fefc:	e2a1      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fefe:	4b12      	ldr	r3, [pc, #72]	; (800ff48 <run_shortest+0xd58>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	461a      	mov	r2, r3
 800ff04:	4b11      	ldr	r3, [pc, #68]	; (800ff4c <run_shortest+0xd5c>)
 800ff06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff0a:	f113 0f02 	cmn.w	r3, #2
 800ff0e:	d133      	bne.n	800ff78 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800ff10:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff14:	9303      	str	r3, [sp, #12]
 800ff16:	2301      	movs	r3, #1
 800ff18:	9302      	str	r3, [sp, #8]
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	9301      	str	r3, [sp, #4]
 800ff1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ff26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff28:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff2c:	f7fa f8d0 	bl	800a0d0 <slalomR>

			pass_count++;
 800ff30:	4b05      	ldr	r3, [pc, #20]	; (800ff48 <run_shortest+0xd58>)
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	3301      	adds	r3, #1
 800ff36:	b2da      	uxtb	r2, r3
 800ff38:	4b03      	ldr	r3, [pc, #12]	; (800ff48 <run_shortest+0xd58>)
 800ff3a:	701a      	strb	r2, [r3, #0]
 800ff3c:	e281      	b.n	8010442 <run_shortest+0x1252>
 800ff3e:	bf00      	nop
 800ff40:	cccccccd 	.word	0xcccccccd
 800ff44:	4010cccc 	.word	0x4010cccc
 800ff48:	20000828 	.word	0x20000828
 800ff4c:	2000083c 	.word	0x2000083c
 800ff50:	08022424 	.word	0x08022424
 800ff54:	0802243c 	.word	0x0802243c
 800ff58:	20000806 	.word	0x20000806
 800ff5c:	200004d4 	.word	0x200004d4
 800ff60:	20000834 	.word	0x20000834
 800ff64:	20000808 	.word	0x20000808
 800ff68:	2000d970 	.word	0x2000d970
 800ff6c:	20000830 	.word	0x20000830
 800ff70:	40290000 	.word	0x40290000
 800ff74:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800ff78:	4baa      	ldr	r3, [pc, #680]	; (8010224 <run_shortest+0x1034>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	4baa      	ldr	r3, [pc, #680]	; (8010228 <run_shortest+0x1038>)
 800ff80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff84:	f113 0f03 	cmn.w	r3, #3
 800ff88:	d116      	bne.n	800ffb8 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800ff8a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff8e:	9303      	str	r3, [sp, #12]
 800ff90:	2301      	movs	r3, #1
 800ff92:	9302      	str	r3, [sp, #8]
 800ff94:	2300      	movs	r3, #0
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff9a:	9300      	str	r3, [sp, #0]
 800ff9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ffa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffa2:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffa6:	f7fa fa4d 	bl	800a444 <slalomL>

			pass_count++;
 800ffaa:	4b9e      	ldr	r3, [pc, #632]	; (8010224 <run_shortest+0x1034>)
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	b2da      	uxtb	r2, r3
 800ffb2:	4b9c      	ldr	r3, [pc, #624]	; (8010224 <run_shortest+0x1034>)
 800ffb4:	701a      	strb	r2, [r3, #0]
 800ffb6:	e244      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800ffb8:	4b9a      	ldr	r3, [pc, #616]	; (8010224 <run_shortest+0x1034>)
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	4b9a      	ldr	r3, [pc, #616]	; (8010228 <run_shortest+0x1038>)
 800ffc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffc4:	f113 0f04 	cmn.w	r3, #4
 800ffc8:	d115      	bne.n	800fff6 <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800ffca:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffce:	9302      	str	r3, [sp, #8]
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	9301      	str	r3, [sp, #4]
 800ffd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffd8:	9300      	str	r3, [sp, #0]
 800ffda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ffde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffe0:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffe4:	f7fa fbe4 	bl	800a7b0 <turn90R>
			pass_count++;
 800ffe8:	4b8e      	ldr	r3, [pc, #568]	; (8010224 <run_shortest+0x1034>)
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	3301      	adds	r3, #1
 800ffee:	b2da      	uxtb	r2, r3
 800fff0:	4b8c      	ldr	r3, [pc, #560]	; (8010224 <run_shortest+0x1034>)
 800fff2:	701a      	strb	r2, [r3, #0]
 800fff4:	e225      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800fff6:	4b8b      	ldr	r3, [pc, #556]	; (8010224 <run_shortest+0x1034>)
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	461a      	mov	r2, r3
 800fffc:	4b8a      	ldr	r3, [pc, #552]	; (8010228 <run_shortest+0x1038>)
 800fffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010002:	f113 0f05 	cmn.w	r3, #5
 8010006:	d115      	bne.n	8010034 <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 8010008:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801000c:	9302      	str	r3, [sp, #8]
 801000e:	2300      	movs	r3, #0
 8010010:	9301      	str	r3, [sp, #4]
 8010012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801001c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801001e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010022:	f7fa fd2f 	bl	800aa84 <turn90L>
			pass_count++;
 8010026:	4b7f      	ldr	r3, [pc, #508]	; (8010224 <run_shortest+0x1034>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	3301      	adds	r3, #1
 801002c:	b2da      	uxtb	r2, r3
 801002e:	4b7d      	ldr	r3, [pc, #500]	; (8010224 <run_shortest+0x1034>)
 8010030:	701a      	strb	r2, [r3, #0]
 8010032:	e206      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 8010034:	4b7b      	ldr	r3, [pc, #492]	; (8010224 <run_shortest+0x1034>)
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	461a      	mov	r2, r3
 801003a:	4b7b      	ldr	r3, [pc, #492]	; (8010228 <run_shortest+0x1038>)
 801003c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010040:	f113 0f06 	cmn.w	r3, #6
 8010044:	d115      	bne.n	8010072 <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 8010046:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801004a:	9302      	str	r3, [sp, #8]
 801004c:	2300      	movs	r3, #0
 801004e:	9301      	str	r3, [sp, #4]
 8010050:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801005a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801005c:	ed97 0a08 	vldr	s0, [r7, #32]
 8010060:	f7fa fe74 	bl	800ad4c <turn180R>
			pass_count++;
 8010064:	4b6f      	ldr	r3, [pc, #444]	; (8010224 <run_shortest+0x1034>)
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	3301      	adds	r3, #1
 801006a:	b2da      	uxtb	r2, r3
 801006c:	4b6d      	ldr	r3, [pc, #436]	; (8010224 <run_shortest+0x1034>)
 801006e:	701a      	strb	r2, [r3, #0]
 8010070:	e1e7      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 8010072:	4b6c      	ldr	r3, [pc, #432]	; (8010224 <run_shortest+0x1034>)
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	461a      	mov	r2, r3
 8010078:	4b6b      	ldr	r3, [pc, #428]	; (8010228 <run_shortest+0x1038>)
 801007a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801007e:	f113 0f07 	cmn.w	r3, #7
 8010082:	d115      	bne.n	80100b0 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 8010084:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010088:	9302      	str	r3, [sp, #8]
 801008a:	2300      	movs	r3, #0
 801008c:	9301      	str	r3, [sp, #4]
 801008e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801009a:	ed97 0a08 	vldr	s0, [r7, #32]
 801009e:	f7fa ffbf 	bl	800b020 <turn180L>
			pass_count++;
 80100a2:	4b60      	ldr	r3, [pc, #384]	; (8010224 <run_shortest+0x1034>)
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	3301      	adds	r3, #1
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	4b5e      	ldr	r3, [pc, #376]	; (8010224 <run_shortest+0x1034>)
 80100ac:	701a      	strb	r2, [r3, #0]
 80100ae:	e1c8      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 80100b0:	4b5c      	ldr	r3, [pc, #368]	; (8010224 <run_shortest+0x1034>)
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	461a      	mov	r2, r3
 80100b6:	4b5c      	ldr	r3, [pc, #368]	; (8010228 <run_shortest+0x1038>)
 80100b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100bc:	f113 0f08 	cmn.w	r3, #8
 80100c0:	d115      	bne.n	80100ee <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 80100c2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100c6:	9302      	str	r3, [sp, #8]
 80100c8:	2300      	movs	r3, #0
 80100ca:	9301      	str	r3, [sp, #4]
 80100cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100d0:	9300      	str	r3, [sp, #0]
 80100d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80100d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100d8:	ed97 0a08 	vldr	s0, [r7, #32]
 80100dc:	f7fb f908 	bl	800b2f0 <turn45inR>
			pass_count++;
 80100e0:	4b50      	ldr	r3, [pc, #320]	; (8010224 <run_shortest+0x1034>)
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	3301      	adds	r3, #1
 80100e6:	b2da      	uxtb	r2, r3
 80100e8:	4b4e      	ldr	r3, [pc, #312]	; (8010224 <run_shortest+0x1034>)
 80100ea:	701a      	strb	r2, [r3, #0]
 80100ec:	e1a9      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 80100ee:	4b4d      	ldr	r3, [pc, #308]	; (8010224 <run_shortest+0x1034>)
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	461a      	mov	r2, r3
 80100f4:	4b4c      	ldr	r3, [pc, #304]	; (8010228 <run_shortest+0x1038>)
 80100f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100fa:	f113 0f09 	cmn.w	r3, #9
 80100fe:	d115      	bne.n	801012c <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 8010100:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010104:	9302      	str	r3, [sp, #8]
 8010106:	2300      	movs	r3, #0
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010114:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010116:	ed97 0a08 	vldr	s0, [r7, #32]
 801011a:	f7fb fb31 	bl	800b780 <turn45inL>
			pass_count++;
 801011e:	4b41      	ldr	r3, [pc, #260]	; (8010224 <run_shortest+0x1034>)
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	3301      	adds	r3, #1
 8010124:	b2da      	uxtb	r2, r3
 8010126:	4b3f      	ldr	r3, [pc, #252]	; (8010224 <run_shortest+0x1034>)
 8010128:	701a      	strb	r2, [r3, #0]
 801012a:	e18a      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 801012c:	4b3d      	ldr	r3, [pc, #244]	; (8010224 <run_shortest+0x1034>)
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	461a      	mov	r2, r3
 8010132:	4b3d      	ldr	r3, [pc, #244]	; (8010228 <run_shortest+0x1038>)
 8010134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010138:	f113 0f0a 	cmn.w	r3, #10
 801013c:	d115      	bne.n	801016a <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 801013e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010142:	9302      	str	r3, [sp, #8]
 8010144:	2300      	movs	r3, #0
 8010146:	9301      	str	r3, [sp, #4]
 8010148:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8010152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010154:	ed97 0a08 	vldr	s0, [r7, #32]
 8010158:	f7fb fd52 	bl	800bc00 <turn135inR>
			pass_count++;
 801015c:	4b31      	ldr	r3, [pc, #196]	; (8010224 <run_shortest+0x1034>)
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	3301      	adds	r3, #1
 8010162:	b2da      	uxtb	r2, r3
 8010164:	4b2f      	ldr	r3, [pc, #188]	; (8010224 <run_shortest+0x1034>)
 8010166:	701a      	strb	r2, [r3, #0]
 8010168:	e16b      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 801016a:	4b2e      	ldr	r3, [pc, #184]	; (8010224 <run_shortest+0x1034>)
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	461a      	mov	r2, r3
 8010170:	4b2d      	ldr	r3, [pc, #180]	; (8010228 <run_shortest+0x1038>)
 8010172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010176:	f113 0f0b 	cmn.w	r3, #11
 801017a:	d115      	bne.n	80101a8 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 801017c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010180:	9302      	str	r3, [sp, #8]
 8010182:	2300      	movs	r3, #0
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010192:	ed97 0a08 	vldr	s0, [r7, #32]
 8010196:	f7fb ff7b 	bl	800c090 <turn135inL>
			pass_count++;
 801019a:	4b22      	ldr	r3, [pc, #136]	; (8010224 <run_shortest+0x1034>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	3301      	adds	r3, #1
 80101a0:	b2da      	uxtb	r2, r3
 80101a2:	4b20      	ldr	r3, [pc, #128]	; (8010224 <run_shortest+0x1034>)
 80101a4:	701a      	strb	r2, [r3, #0]
 80101a6:	e14c      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 80101a8:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <run_shortest+0x1034>)
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	461a      	mov	r2, r3
 80101ae:	4b1e      	ldr	r3, [pc, #120]	; (8010228 <run_shortest+0x1038>)
 80101b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b4:	f113 0f0c 	cmn.w	r3, #12
 80101b8:	d115      	bne.n	80101e6 <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 80101ba:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101be:	9302      	str	r3, [sp, #8]
 80101c0:	2300      	movs	r3, #0
 80101c2:	9301      	str	r3, [sp, #4]
 80101c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80101ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101d0:	ed97 0a08 	vldr	s0, [r7, #32]
 80101d4:	f7fc f9a0 	bl	800c518 <turn45outR>
			pass_count++;
 80101d8:	4b12      	ldr	r3, [pc, #72]	; (8010224 <run_shortest+0x1034>)
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	3301      	adds	r3, #1
 80101de:	b2da      	uxtb	r2, r3
 80101e0:	4b10      	ldr	r3, [pc, #64]	; (8010224 <run_shortest+0x1034>)
 80101e2:	701a      	strb	r2, [r3, #0]
 80101e4:	e12d      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 80101e6:	4b0f      	ldr	r3, [pc, #60]	; (8010224 <run_shortest+0x1034>)
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	461a      	mov	r2, r3
 80101ec:	4b0e      	ldr	r3, [pc, #56]	; (8010228 <run_shortest+0x1038>)
 80101ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101f2:	f113 0f0d 	cmn.w	r3, #13
 80101f6:	d119      	bne.n	801022c <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 80101f8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101fc:	9302      	str	r3, [sp, #8]
 80101fe:	2300      	movs	r3, #0
 8010200:	9301      	str	r3, [sp, #4]
 8010202:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801020c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801020e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010212:	f7fc fb73 	bl	800c8fc <turn45outL>
			pass_count++;
 8010216:	4b03      	ldr	r3, [pc, #12]	; (8010224 <run_shortest+0x1034>)
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	3301      	adds	r3, #1
 801021c:	b2da      	uxtb	r2, r3
 801021e:	4b01      	ldr	r3, [pc, #4]	; (8010224 <run_shortest+0x1034>)
 8010220:	701a      	strb	r2, [r3, #0]
 8010222:	e10e      	b.n	8010442 <run_shortest+0x1252>
 8010224:	20000828 	.word	0x20000828
 8010228:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 801022c:	4ba0      	ldr	r3, [pc, #640]	; (80104b0 <run_shortest+0x12c0>)
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	461a      	mov	r2, r3
 8010232:	4ba0      	ldr	r3, [pc, #640]	; (80104b4 <run_shortest+0x12c4>)
 8010234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010238:	f113 0f0e 	cmn.w	r3, #14
 801023c:	d115      	bne.n	801026a <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 801023e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010242:	9302      	str	r3, [sp, #8]
 8010244:	2300      	movs	r3, #0
 8010246:	9301      	str	r3, [sp, #4]
 8010248:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801024c:	9300      	str	r3, [sp, #0]
 801024e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8010252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010254:	ed97 0a08 	vldr	s0, [r7, #32]
 8010258:	f7fc fd38 	bl	800cccc <turn135outR>
			pass_count++;
 801025c:	4b94      	ldr	r3, [pc, #592]	; (80104b0 <run_shortest+0x12c0>)
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	3301      	adds	r3, #1
 8010262:	b2da      	uxtb	r2, r3
 8010264:	4b92      	ldr	r3, [pc, #584]	; (80104b0 <run_shortest+0x12c0>)
 8010266:	701a      	strb	r2, [r3, #0]
 8010268:	e0eb      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 801026a:	4b91      	ldr	r3, [pc, #580]	; (80104b0 <run_shortest+0x12c0>)
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	461a      	mov	r2, r3
 8010270:	4b90      	ldr	r3, [pc, #576]	; (80104b4 <run_shortest+0x12c4>)
 8010272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010276:	f113 0f0f 	cmn.w	r3, #15
 801027a:	d115      	bne.n	80102a8 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 801027c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010280:	9302      	str	r3, [sp, #8]
 8010282:	2300      	movs	r3, #0
 8010284:	9301      	str	r3, [sp, #4]
 8010286:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801028a:	9300      	str	r3, [sp, #0]
 801028c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8010290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010292:	ed97 0a08 	vldr	s0, [r7, #32]
 8010296:	f7fc ff0b 	bl	800d0b0 <turn135outL>
			pass_count++;
 801029a:	4b85      	ldr	r3, [pc, #532]	; (80104b0 <run_shortest+0x12c0>)
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	3301      	adds	r3, #1
 80102a0:	b2da      	uxtb	r2, r3
 80102a2:	4b83      	ldr	r3, [pc, #524]	; (80104b0 <run_shortest+0x12c0>)
 80102a4:	701a      	strb	r2, [r3, #0]
 80102a6:	e0cc      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 80102a8:	4b81      	ldr	r3, [pc, #516]	; (80104b0 <run_shortest+0x12c0>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	461a      	mov	r2, r3
 80102ae:	4b81      	ldr	r3, [pc, #516]	; (80104b4 <run_shortest+0x12c4>)
 80102b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b4:	f113 0f10 	cmn.w	r3, #16
 80102b8:	d115      	bne.n	80102e6 <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 80102ba:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80102be:	9302      	str	r3, [sp, #8]
 80102c0:	2300      	movs	r3, #0
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80102ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80102d0:	ed97 0a08 	vldr	s0, [r7, #32]
 80102d4:	f7fd f8d8 	bl	800d488 <V90R>
			pass_count++;
 80102d8:	4b75      	ldr	r3, [pc, #468]	; (80104b0 <run_shortest+0x12c0>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	3301      	adds	r3, #1
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	4b73      	ldr	r3, [pc, #460]	; (80104b0 <run_shortest+0x12c0>)
 80102e2:	701a      	strb	r2, [r3, #0]
 80102e4:	e0ad      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 80102e6:	4b72      	ldr	r3, [pc, #456]	; (80104b0 <run_shortest+0x12c0>)
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	461a      	mov	r2, r3
 80102ec:	4b71      	ldr	r3, [pc, #452]	; (80104b4 <run_shortest+0x12c4>)
 80102ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102f2:	f113 0f11 	cmn.w	r3, #17
 80102f6:	d115      	bne.n	8010324 <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 80102f8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80102fc:	9302      	str	r3, [sp, #8]
 80102fe:	2300      	movs	r3, #0
 8010300:	9301      	str	r3, [sp, #4]
 8010302:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801030c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801030e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010312:	f7fd fac5 	bl	800d8a0 <V90L>
			pass_count++;
 8010316:	4b66      	ldr	r3, [pc, #408]	; (80104b0 <run_shortest+0x12c0>)
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	3301      	adds	r3, #1
 801031c:	b2da      	uxtb	r2, r3
 801031e:	4b64      	ldr	r3, [pc, #400]	; (80104b0 <run_shortest+0x12c0>)
 8010320:	701a      	strb	r2, [r3, #0]
 8010322:	e08e      	b.n	8010442 <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 8010324:	4b62      	ldr	r3, [pc, #392]	; (80104b0 <run_shortest+0x12c0>)
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	461a      	mov	r2, r3
 801032a:	4b62      	ldr	r3, [pc, #392]	; (80104b4 <run_shortest+0x12c4>)
 801032c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010330:	2b00      	cmp	r3, #0
 8010332:	f340 8086 	ble.w	8010442 <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 8010336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010338:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 801033a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801033c:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 801033e:	4b5c      	ldr	r3, [pc, #368]	; (80104b0 <run_shortest+0x12c0>)
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d013      	beq.n	801036e <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 8010346:	4b5a      	ldr	r3, [pc, #360]	; (80104b0 <run_shortest+0x12c0>)
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	3b01      	subs	r3, #1
 801034c:	4a59      	ldr	r2, [pc, #356]	; (80104b4 <run_shortest+0x12c4>)
 801034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010352:	f113 0f02 	cmn.w	r3, #2
 8010356:	d008      	beq.n	801036a <run_shortest+0x117a>
 8010358:	4b55      	ldr	r3, [pc, #340]	; (80104b0 <run_shortest+0x12c0>)
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	3b01      	subs	r3, #1
 801035e:	4a55      	ldr	r2, [pc, #340]	; (80104b4 <run_shortest+0x12c4>)
 8010360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010364:	f113 0f03 	cmn.w	r3, #3
 8010368:	d101      	bne.n	801036e <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 801036a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801036c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 801036e:	4b50      	ldr	r3, [pc, #320]	; (80104b0 <run_shortest+0x12c0>)
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	3301      	adds	r3, #1
 8010374:	4a4f      	ldr	r2, [pc, #316]	; (80104b4 <run_shortest+0x12c4>)
 8010376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801037a:	f113 0f02 	cmn.w	r3, #2
 801037e:	d008      	beq.n	8010392 <run_shortest+0x11a2>
 8010380:	4b4b      	ldr	r3, [pc, #300]	; (80104b0 <run_shortest+0x12c0>)
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	3301      	adds	r3, #1
 8010386:	4a4b      	ldr	r2, [pc, #300]	; (80104b4 <run_shortest+0x12c4>)
 8010388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801038c:	f113 0f03 	cmn.w	r3, #3
 8010390:	d101      	bne.n	8010396 <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 8010392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010394:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 8010396:	4b46      	ldr	r3, [pc, #280]	; (80104b0 <run_shortest+0x12c0>)
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	461a      	mov	r2, r3
 801039c:	4b45      	ldr	r3, [pc, #276]	; (80104b4 <run_shortest+0x12c4>)
 801039e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a2:	2b31      	cmp	r3, #49	; 0x31
 80103a4:	dd27      	ble.n	80103f6 <run_shortest+0x1206>
				mode.WallControlMode=3;
 80103a6:	2303      	movs	r3, #3
 80103a8:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80103aa:	2300      	movs	r3, #0
 80103ac:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 80103ae:	4b40      	ldr	r3, [pc, #256]	; (80104b0 <run_shortest+0x12c0>)
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	461a      	mov	r2, r3
 80103b4:	4b3f      	ldr	r3, [pc, #252]	; (80104b4 <run_shortest+0x12c4>)
 80103b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ba:	3b32      	subs	r3, #50	; 0x32
 80103bc:	4618      	mov	r0, r3
 80103be:	f7f0 f8d9 	bl	8000574 <__aeabi_i2d>
 80103c2:	a339      	add	r3, pc, #228	; (adr r3, 80104a8 <run_shortest+0x12b8>)
 80103c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c8:	f7f0 f93e 	bl	8000648 <__aeabi_dmul>
 80103cc:	4602      	mov	r2, r0
 80103ce:	460b      	mov	r3, r1
 80103d0:	4610      	mov	r0, r2
 80103d2:	4619      	mov	r1, r3
 80103d4:	f7f0 fc10 	bl	8000bf8 <__aeabi_d2f>
 80103d8:	4603      	mov	r3, r0
 80103da:	69b8      	ldr	r0, [r7, #24]
 80103dc:	ed97 2a04 	vldr	s4, [r7, #16]
 80103e0:	edd7 1a05 	vldr	s3, [r7, #20]
 80103e4:	ed97 1a08 	vldr	s2, [r7, #32]
 80103e8:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80103ec:	ee00 3a10 	vmov	s0, r3
 80103f0:	f7f2 fda4 	bl	8002f3c <straight_table2>
 80103f4:	e01f      	b.n	8010436 <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 80103f6:	2301      	movs	r3, #1
 80103f8:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80103fa:	2300      	movs	r3, #0
 80103fc:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 80103fe:	4b2c      	ldr	r3, [pc, #176]	; (80104b0 <run_shortest+0x12c0>)
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	4b2b      	ldr	r3, [pc, #172]	; (80104b4 <run_shortest+0x12c4>)
 8010406:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801040a:	4613      	mov	r3, r2
 801040c:	005b      	lsls	r3, r3, #1
 801040e:	4413      	add	r3, r2
 8010410:	011a      	lsls	r2, r3, #4
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	ee07 3a90 	vmov	s15, r3
 8010418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801041c:	69b8      	ldr	r0, [r7, #24]
 801041e:	ed97 2a04 	vldr	s4, [r7, #16]
 8010422:	edd7 1a05 	vldr	s3, [r7, #20]
 8010426:	ed97 1a08 	vldr	s2, [r7, #32]
 801042a:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801042e:	eeb0 0a67 	vmov.f32	s0, s15
 8010432:	f7f2 fd83 	bl	8002f3c <straight_table2>
			}

			pass_count++;
 8010436:	4b1e      	ldr	r3, [pc, #120]	; (80104b0 <run_shortest+0x12c0>)
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	3301      	adds	r3, #1
 801043c:	b2da      	uxtb	r2, r3
 801043e:	4b1c      	ldr	r3, [pc, #112]	; (80104b0 <run_shortest+0x12c0>)
 8010440:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 8010442:	4b1b      	ldr	r3, [pc, #108]	; (80104b0 <run_shortest+0x12c0>)
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	461a      	mov	r2, r3
 8010448:	4b1a      	ldr	r3, [pc, #104]	; (80104b4 <run_shortest+0x12c4>)
 801044a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d000      	beq.n	8010454 <run_shortest+0x1264>
		pass_count2=pass_count+1;
 8010452:	e521      	b.n	800fe98 <run_shortest+0xca8>
			break;
 8010454:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 8010456:	2301      	movs	r3, #1
 8010458:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 801045a:	2300      	movs	r3, #0
 801045c:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 801045e:	69b8      	ldr	r0, [r7, #24]
 8010460:	ed97 2a04 	vldr	s4, [r7, #16]
 8010464:	edd7 1a05 	vldr	s3, [r7, #20]
 8010468:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80104b8 <run_shortest+0x12c8>
 801046c:	edd7 0a08 	vldr	s1, [r7, #32]
 8010470:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80104bc <run_shortest+0x12cc>
 8010474:	f7f2 fd62 	bl	8002f3c <straight_table2>
		HAL_Delay(700);
 8010478:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 801047c:	f007 fbf2 	bl	8017c64 <HAL_Delay>
		pl_FunMotor_stop();
 8010480:	f7f7 fb66 	bl	8007b50 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 8010484:	4b0e      	ldr	r3, [pc, #56]	; (80104c0 <run_shortest+0x12d0>)
 8010486:	2200      	movs	r2, #0
 8010488:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 801048a:	4b0e      	ldr	r3, [pc, #56]	; (80104c4 <run_shortest+0x12d4>)
 801048c:	2200      	movs	r2, #0
 801048e:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010490:	4b0d      	ldr	r3, [pc, #52]	; (80104c8 <run_shortest+0x12d8>)
 8010492:	2200      	movs	r2, #0
 8010494:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 8010496:	2000      	movs	r0, #0
 8010498:	f7f7 fac6 	bl	8007a28 <pl_DriveMotor_standby>
	t = 0;
 801049c:	4b0b      	ldr	r3, [pc, #44]	; (80104cc <run_shortest+0x12dc>)
 801049e:	2200      	movs	r2, #0
 80104a0:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 80104a2:	e034      	b.n	801050e <run_shortest+0x131e>
 80104a4:	f3af 8000 	nop.w
 80104a8:	c022ec18 	.word	0xc022ec18
 80104ac:	404fd1de 	.word	0x404fd1de
 80104b0:	20000828 	.word	0x20000828
 80104b4:	2000083c 	.word	0x2000083c
 80104b8:	00000000 	.word	0x00000000
 80104bc:	42b40000 	.word	0x42b40000
 80104c0:	20000834 	.word	0x20000834
 80104c4:	20000808 	.word	0x20000808
 80104c8:	2000d970 	.word	0x2000d970
 80104cc:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 80104d0:	4b2b      	ldr	r3, [pc, #172]	; (8010580 <run_shortest+0x1390>)
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	4b2a      	ldr	r3, [pc, #168]	; (8010580 <run_shortest+0x1390>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	492a      	ldr	r1, [pc, #168]	; (8010584 <run_shortest+0x1394>)
 80104da:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80104de:	4a2a      	ldr	r2, [pc, #168]	; (8010588 <run_shortest+0x1398>)
 80104e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80104e4:	4b26      	ldr	r3, [pc, #152]	; (8010580 <run_shortest+0x1390>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4a25      	ldr	r2, [pc, #148]	; (8010580 <run_shortest+0x1390>)
 80104ea:	6812      	ldr	r2, [r2, #0]
 80104ec:	4925      	ldr	r1, [pc, #148]	; (8010584 <run_shortest+0x1394>)
 80104ee:	330c      	adds	r3, #12
 80104f0:	005b      	lsls	r3, r3, #1
 80104f2:	440b      	add	r3, r1
 80104f4:	88d8      	ldrh	r0, [r3, #6]
 80104f6:	4924      	ldr	r1, [pc, #144]	; (8010588 <run_shortest+0x1398>)
 80104f8:	f102 030c 	add.w	r3, r2, #12
 80104fc:	005b      	lsls	r3, r3, #1
 80104fe:	440b      	add	r3, r1
 8010500:	4602      	mov	r2, r0
 8010502:	80da      	strh	r2, [r3, #6]
		t++;
 8010504:	4b1e      	ldr	r3, [pc, #120]	; (8010580 <run_shortest+0x1390>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	3301      	adds	r3, #1
 801050a:	4a1d      	ldr	r2, [pc, #116]	; (8010580 <run_shortest+0x1390>)
 801050c:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 801050e:	4b1c      	ldr	r3, [pc, #112]	; (8010580 <run_shortest+0x1390>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2b0e      	cmp	r3, #14
 8010514:	dddc      	ble.n	80104d0 <run_shortest+0x12e0>
	}
	t = 0;
 8010516:	4b1a      	ldr	r3, [pc, #104]	; (8010580 <run_shortest+0x1390>)
 8010518:	2200      	movs	r2, #0
 801051a:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 801051c:	e026      	b.n	801056c <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 801051e:	4b18      	ldr	r3, [pc, #96]	; (8010580 <run_shortest+0x1390>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a19      	ldr	r2, [pc, #100]	; (8010588 <run_shortest+0x1398>)
 8010524:	331c      	adds	r3, #28
 8010526:	005b      	lsls	r3, r3, #1
 8010528:	4413      	add	r3, r2
 801052a:	889a      	ldrh	r2, [r3, #4]
 801052c:	4b14      	ldr	r3, [pc, #80]	; (8010580 <run_shortest+0x1390>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	43d2      	mvns	r2, r2
 8010532:	b291      	uxth	r1, r2
 8010534:	4a14      	ldr	r2, [pc, #80]	; (8010588 <run_shortest+0x1398>)
 8010536:	331c      	adds	r3, #28
 8010538:	005b      	lsls	r3, r3, #1
 801053a:	4413      	add	r3, r2
 801053c:	460a      	mov	r2, r1
 801053e:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 8010540:	4b0f      	ldr	r3, [pc, #60]	; (8010580 <run_shortest+0x1390>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a10      	ldr	r2, [pc, #64]	; (8010588 <run_shortest+0x1398>)
 8010546:	332c      	adds	r3, #44	; 0x2c
 8010548:	005b      	lsls	r3, r3, #1
 801054a:	4413      	add	r3, r2
 801054c:	885a      	ldrh	r2, [r3, #2]
 801054e:	4b0c      	ldr	r3, [pc, #48]	; (8010580 <run_shortest+0x1390>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	43d2      	mvns	r2, r2
 8010554:	b291      	uxth	r1, r2
 8010556:	4a0c      	ldr	r2, [pc, #48]	; (8010588 <run_shortest+0x1398>)
 8010558:	332c      	adds	r3, #44	; 0x2c
 801055a:	005b      	lsls	r3, r3, #1
 801055c:	4413      	add	r3, r2
 801055e:	460a      	mov	r2, r1
 8010560:	805a      	strh	r2, [r3, #2]
		t++;
 8010562:	4b07      	ldr	r3, [pc, #28]	; (8010580 <run_shortest+0x1390>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	3301      	adds	r3, #1
 8010568:	4a05      	ldr	r2, [pc, #20]	; (8010580 <run_shortest+0x1390>)
 801056a:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 801056c:	4b04      	ldr	r3, [pc, #16]	; (8010580 <run_shortest+0x1390>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2b0e      	cmp	r3, #14
 8010572:	ddd4      	ble.n	801051e <run_shortest+0x132e>
	}

}
 8010574:	bf00      	nop
 8010576:	bf00      	nop
 8010578:	3740      	adds	r7, #64	; 0x40
 801057a:	46bd      	mov	sp, r7
 801057c:	bdb0      	pop	{r4, r5, r7, pc}
 801057e:	bf00      	nop
 8010580:	20000c38 	.word	0x20000c38
 8010584:	20000cb4 	.word	0x20000cb4
 8010588:	20000c3c 	.word	0x20000c3c

0801058c <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 801058c:	b580      	push	{r7, lr}
 801058e:	b08a      	sub	sp, #40	; 0x28
 8010590:	af02      	add	r7, sp, #8
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
 8010598:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 801059a:	2301      	movs	r3, #1
 801059c:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 801059e:	2301      	movs	r3, #1
 80105a0:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 80105a2:	2301      	movs	r3, #1
 80105a4:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 80105ae:	f107 0114 	add.w	r1, r7, #20
 80105b2:	f107 0318 	add.w	r3, r7, #24
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7fd fcfb 	bl	800dfb4 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 80105be:	69b8      	ldr	r0, [r7, #24]
 80105c0:	6979      	ldr	r1, [r7, #20]
 80105c2:	f107 021e 	add.w	r2, r7, #30
 80105c6:	f107 031c 	add.w	r3, r7, #28
 80105ca:	9301      	str	r3, [sp, #4]
 80105cc:	f107 031d 	add.w	r3, r7, #29
 80105d0:	9300      	str	r3, [sp, #0]
 80105d2:	4613      	mov	r3, r2
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	f000 fe27 	bl	8011228 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 80105da:	7fbb      	ldrb	r3, [r7, #30]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d007      	beq.n	80105f0 <decision_kitiku+0x64>
 80105e0:	7f7b      	ldrb	r3, [r7, #29]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d004      	beq.n	80105f0 <decision_kitiku+0x64>
 80105e6:	7f3b      	ldrb	r3, [r7, #28]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d001      	beq.n	80105f0 <decision_kitiku+0x64>
 80105ec:	2301      	movs	r3, #1
 80105ee:	e000      	b.n	80105f2 <decision_kitiku+0x66>
 80105f0:	2300      	movs	r3, #0
 80105f2:	77fb      	strb	r3, [r7, #31]
 80105f4:	7ffb      	ldrb	r3, [r7, #31]
 80105f6:	f003 0301 	and.w	r3, r3, #1
 80105fa:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 80105fc:	7ffb      	ldrb	r3, [r7, #31]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d02b      	beq.n	801065a <decision_kitiku+0xce>
 8010602:	887a      	ldrh	r2, [r7, #2]
 8010604:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010606:	429a      	cmp	r2, r3
 8010608:	d827      	bhi.n	801065a <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 801060a:	887a      	ldrh	r2, [r7, #2]
 801060c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801060e:	429a      	cmp	r2, r3
 8010610:	d823      	bhi.n	801065a <decision_kitiku+0xce>
 8010612:	887a      	ldrh	r2, [r7, #2]
 8010614:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010616:	429a      	cmp	r2, r3
 8010618:	d81f      	bhi.n	801065a <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2b01      	cmp	r3, #1
 801061e:	d102      	bne.n	8010626 <decision_kitiku+0x9a>
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	2b0d      	cmp	r3, #13
 8010624:	dc11      	bgt.n	801064a <decision_kitiku+0xbe>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2b02      	cmp	r3, #2
 801062a:	d102      	bne.n	8010632 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2b0d      	cmp	r3, #13
 8010630:	dc0b      	bgt.n	801064a <decision_kitiku+0xbe>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b03      	cmp	r3, #3
 8010636:	d102      	bne.n	801063e <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	2b01      	cmp	r3, #1
 801063c:	dd05      	ble.n	801064a <decision_kitiku+0xbe>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2b04      	cmp	r3, #4
 8010642:	d106      	bne.n	8010652 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	2b01      	cmp	r3, #1
 8010648:	dc03      	bgt.n	8010652 <decision_kitiku+0xc6>
			kitikukan = 0;
 801064a:	4b08      	ldr	r3, [pc, #32]	; (801066c <decision_kitiku+0xe0>)
 801064c:	2200      	movs	r2, #0
 801064e:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010650:	e007      	b.n	8010662 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 8010652:	4b06      	ldr	r3, [pc, #24]	; (801066c <decision_kitiku+0xe0>)
 8010654:	2201      	movs	r2, #1
 8010656:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010658:	e003      	b.n	8010662 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 801065a:	4b04      	ldr	r3, [pc, #16]	; (801066c <decision_kitiku+0xe0>)
 801065c:	2200      	movs	r2, #0
 801065e:	601a      	str	r2, [r3, #0]
	}


}
 8010660:	bf00      	nop
 8010662:	bf00      	nop
 8010664:	3720      	adds	r7, #32
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	20000838 	.word	0x20000838

08010670 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 8010670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010672:	b099      	sub	sp, #100	; 0x64
 8010674:	af04      	add	r7, sp, #16
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 801067c:	4b9f      	ldr	r3, [pc, #636]	; (80108fc <compress_kitiku+0x28c>)
 801067e:	2201      	movs	r2, #1
 8010680:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 8010682:	4b9f      	ldr	r3, [pc, #636]	; (8010900 <compress_kitiku+0x290>)
 8010684:	2201      	movs	r2, #1
 8010686:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	637b      	str	r3, [r7, #52]	; 0x34
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	633b      	str	r3, [r7, #48]	; 0x30
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 801069a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801069e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80106a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7fd fc85 	bl	800dfb4 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 80106aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80106b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b4:	627b      	str	r3, [r7, #36]	; 0x24
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	623b      	str	r3, [r7, #32]
 80106ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106bc:	61fb      	str	r3, [r7, #28]
 80106be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c0:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 80106c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80106c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fd fc71 	bl	800dfb4 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 80106d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106d6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80106da:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80106de:	9301      	str	r3, [sp, #4]
 80106e0:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	4613      	mov	r3, r2
 80106e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106ea:	f000 fd9d 	bl	8011228 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 80106ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d009      	beq.n	801070a <compress_kitiku+0x9a>
 80106f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d005      	beq.n	801070a <compress_kitiku+0x9a>
 80106fe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <compress_kitiku+0x9a>
 8010706:	2301      	movs	r3, #1
 8010708:	e000      	b.n	801070c <compress_kitiku+0x9c>
 801070a:	2300      	movs	r3, #0
 801070c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 801071c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801071e:	2b04      	cmp	r3, #4
 8010720:	d102      	bne.n	8010728 <compress_kitiku+0xb8>
 8010722:	2301      	movs	r3, #1
 8010724:	64bb      	str	r3, [r7, #72]	; 0x48
 8010726:	e002      	b.n	801072e <compress_kitiku+0xbe>
 8010728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801072a:	3301      	adds	r3, #1
 801072c:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 801072e:	f107 0120 	add.w	r1, r7, #32
 8010732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010738:	4618      	mov	r0, r3
 801073a:	f7fd fc3b 	bl	800dfb4 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 801073e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010740:	6a39      	ldr	r1, [r7, #32]
 8010742:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010746:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801074a:	9301      	str	r3, [sp, #4]
 801074c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010750:	9300      	str	r3, [sp, #0]
 8010752:	4613      	mov	r3, r2
 8010754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010756:	f000 fd67 	bl	8011228 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 801075a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801075e:	2b00      	cmp	r3, #0
 8010760:	d009      	beq.n	8010776 <compress_kitiku+0x106>
 8010762:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010766:	2b00      	cmp	r3, #0
 8010768:	d005      	beq.n	8010776 <compress_kitiku+0x106>
 801076a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801076e:	2b00      	cmp	r3, #0
 8010770:	d001      	beq.n	8010776 <compress_kitiku+0x106>
 8010772:	2301      	movs	r3, #1
 8010774:	e000      	b.n	8010778 <compress_kitiku+0x108>
 8010776:	2300      	movs	r3, #0
 8010778:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 801077c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010780:	f003 0301 	and.w	r3, r3, #1
 8010784:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078a:	2b01      	cmp	r3, #1
 801078c:	d102      	bne.n	8010794 <compress_kitiku+0x124>
 801078e:	2304      	movs	r3, #4
 8010790:	647b      	str	r3, [r7, #68]	; 0x44
 8010792:	e002      	b.n	801079a <compress_kitiku+0x12a>
 8010794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010796:	3b01      	subs	r3, #1
 8010798:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 801079a:	f107 0118 	add.w	r1, r7, #24
 801079e:	f107 031c 	add.w	r3, r7, #28
 80107a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fd fc05 	bl	800dfb4 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 80107aa:	69f8      	ldr	r0, [r7, #28]
 80107ac:	69b9      	ldr	r1, [r7, #24]
 80107ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80107b2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80107b6:	9301      	str	r3, [sp, #4]
 80107b8:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	4613      	mov	r3, r2
 80107c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107c2:	f000 fd31 	bl	8011228 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 80107c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d009      	beq.n	80107e2 <compress_kitiku+0x172>
 80107ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d005      	beq.n	80107e2 <compress_kitiku+0x172>
 80107d6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <compress_kitiku+0x172>
 80107de:	2301      	movs	r3, #1
 80107e0:	e000      	b.n	80107e4 <compress_kitiku+0x174>
 80107e2:	2300      	movs	r3, #0
 80107e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80107e8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107ec:	f003 0301 	and.w	r3, r3, #1
 80107f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 80107f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80107f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80107fc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010800:	9301      	str	r3, [sp, #4]
 8010802:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	4613      	mov	r3, r2
 801080a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801080c:	f000 fb98 	bl	8010f40 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010814:	f107 0610 	add.w	r6, r7, #16
 8010818:	f107 0512 	add.w	r5, r7, #18
 801081c:	f107 0414 	add.w	r4, r7, #20
 8010820:	f107 0016 	add.w	r0, r7, #22
 8010824:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010826:	9102      	str	r1, [sp, #8]
 8010828:	9201      	str	r2, [sp, #4]
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	4633      	mov	r3, r6
 801082e:	462a      	mov	r2, r5
 8010830:	4621      	mov	r1, r4
 8010832:	f000 fe79 	bl	8011528 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 8010836:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801083a:	2b00      	cmp	r3, #0
 801083c:	d001      	beq.n	8010842 <compress_kitiku+0x1d2>
 801083e:	23ff      	movs	r3, #255	; 0xff
 8010840:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 8010842:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010846:	2b00      	cmp	r3, #0
 8010848:	d001      	beq.n	801084e <compress_kitiku+0x1de>
 801084a:	23ff      	movs	r3, #255	; 0xff
 801084c:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 801084e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010852:	2b00      	cmp	r3, #0
 8010854:	d001      	beq.n	801085a <compress_kitiku+0x1ea>
 8010856:	23ff      	movs	r3, #255	; 0xff
 8010858:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[16 * x_now + y_now] <= 1) {
 801085a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801085c:	011a      	lsls	r2, r3, #4
 801085e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010860:	4413      	add	r3, r2
 8010862:	4a28      	ldr	r2, [pc, #160]	; (8010904 <compress_kitiku+0x294>)
 8010864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010868:	2b01      	cmp	r3, #1
 801086a:	f240 80a9 	bls.w	80109c0 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 801086e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010870:	2b01      	cmp	r3, #1
 8010872:	d103      	bne.n	801087c <compress_kitiku+0x20c>
 8010874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010876:	2b0d      	cmp	r3, #13
 8010878:	f300 80a4 	bgt.w	80109c4 <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 801087c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801087e:	2b02      	cmp	r3, #2
 8010880:	d103      	bne.n	801088a <compress_kitiku+0x21a>
 8010882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010884:	2b0d      	cmp	r3, #13
 8010886:	f300 809f 	bgt.w	80109c8 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 801088a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801088c:	2b03      	cmp	r3, #3
 801088e:	d103      	bne.n	8010898 <compress_kitiku+0x228>
 8010890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010892:	2b01      	cmp	r3, #1
 8010894:	f340 809a 	ble.w	80109cc <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 8010898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801089a:	2b04      	cmp	r3, #4
 801089c:	d103      	bne.n	80108a6 <compress_kitiku+0x236>
 801089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	f340 8095 	ble.w	80109d0 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80108a6:	8afb      	ldrh	r3, [r7, #22]
 80108a8:	2bff      	cmp	r3, #255	; 0xff
 80108aa:	d10c      	bne.n	80108c6 <compress_kitiku+0x256>
 80108ac:	8abb      	ldrh	r3, [r7, #20]
 80108ae:	2bff      	cmp	r3, #255	; 0xff
 80108b0:	d109      	bne.n	80108c6 <compress_kitiku+0x256>
 80108b2:	8a3b      	ldrh	r3, [r7, #16]
 80108b4:	2bff      	cmp	r3, #255	; 0xff
 80108b6:	d106      	bne.n	80108c6 <compress_kitiku+0x256>
 80108b8:	8a7b      	ldrh	r3, [r7, #18]
 80108ba:	2bff      	cmp	r3, #255	; 0xff
 80108bc:	d103      	bne.n	80108c6 <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 80108be:	4b12      	ldr	r3, [pc, #72]	; (8010908 <compress_kitiku+0x298>)
 80108c0:	2201      	movs	r2, #1
 80108c2:	701a      	strb	r2, [r3, #0]
		break;
 80108c4:	e087      	b.n	80109d6 <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80108c6:	8afa      	ldrh	r2, [r7, #22]
 80108c8:	8abb      	ldrh	r3, [r7, #20]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d81e      	bhi.n	801090c <compress_kitiku+0x29c>
 80108ce:	8afa      	ldrh	r2, [r7, #22]
 80108d0:	8a3b      	ldrh	r3, [r7, #16]
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d81a      	bhi.n	801090c <compress_kitiku+0x29c>
 80108d6:	8afa      	ldrh	r2, [r7, #22]
 80108d8:	8a7b      	ldrh	r3, [r7, #18]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d816      	bhi.n	801090c <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 80108de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d005      	beq.n	80108f2 <compress_kitiku+0x282>
				kitiku_distance += 2;
 80108e6:	4b05      	ldr	r3, [pc, #20]	; (80108fc <compress_kitiku+0x28c>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	3302      	adds	r3, #2
 80108ec:	4a03      	ldr	r2, [pc, #12]	; (80108fc <compress_kitiku+0x28c>)
 80108ee:	6013      	str	r3, [r2, #0]
 80108f0:	e00c      	b.n	801090c <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 80108f2:	4b03      	ldr	r3, [pc, #12]	; (8010900 <compress_kitiku+0x290>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	701a      	strb	r2, [r3, #0]
				break;
 80108f8:	e06d      	b.n	80109d6 <compress_kitiku+0x366>
 80108fa:	bf00      	nop
 80108fc:	2000082c 	.word	0x2000082c
 8010900:	20000829 	.word	0x20000829
 8010904:	20000d30 	.word	0x20000d30
 8010908:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801090c:	8aba      	ldrh	r2, [r7, #20]
 801090e:	8afb      	ldrh	r3, [r7, #22]
 8010910:	429a      	cmp	r2, r3
 8010912:	d213      	bcs.n	801093c <compress_kitiku+0x2cc>
 8010914:	8aba      	ldrh	r2, [r7, #20]
 8010916:	8a3b      	ldrh	r3, [r7, #16]
 8010918:	429a      	cmp	r2, r3
 801091a:	d80f      	bhi.n	801093c <compress_kitiku+0x2cc>
 801091c:	8aba      	ldrh	r2, [r7, #20]
 801091e:	8a7b      	ldrh	r3, [r7, #18]
 8010920:	429a      	cmp	r2, r3
 8010922:	d80b      	bhi.n	801093c <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 8010924:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010928:	2b00      	cmp	r3, #0
 801092a:	d003      	beq.n	8010934 <compress_kitiku+0x2c4>
				kitiku = 0;
 801092c:	4b40      	ldr	r3, [pc, #256]	; (8010a30 <compress_kitiku+0x3c0>)
 801092e:	2200      	movs	r2, #0
 8010930:	701a      	strb	r2, [r3, #0]
				break;
 8010932:	e050      	b.n	80109d6 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 8010934:	4b3e      	ldr	r3, [pc, #248]	; (8010a30 <compress_kitiku+0x3c0>)
 8010936:	2200      	movs	r2, #0
 8010938:	701a      	strb	r2, [r3, #0]
				break;
 801093a:	e04c      	b.n	80109d6 <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801093c:	8a3a      	ldrh	r2, [r7, #16]
 801093e:	8afb      	ldrh	r3, [r7, #22]
 8010940:	429a      	cmp	r2, r3
 8010942:	d213      	bcs.n	801096c <compress_kitiku+0x2fc>
 8010944:	8a3a      	ldrh	r2, [r7, #16]
 8010946:	8abb      	ldrh	r3, [r7, #20]
 8010948:	429a      	cmp	r2, r3
 801094a:	d20f      	bcs.n	801096c <compress_kitiku+0x2fc>
 801094c:	8a3a      	ldrh	r2, [r7, #16]
 801094e:	8a7b      	ldrh	r3, [r7, #18]
 8010950:	429a      	cmp	r2, r3
 8010952:	d80b      	bhi.n	801096c <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 8010954:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010958:	2b00      	cmp	r3, #0
 801095a:	d003      	beq.n	8010964 <compress_kitiku+0x2f4>
				kitiku = 0;
 801095c:	4b34      	ldr	r3, [pc, #208]	; (8010a30 <compress_kitiku+0x3c0>)
 801095e:	2200      	movs	r2, #0
 8010960:	701a      	strb	r2, [r3, #0]
				break;
 8010962:	e038      	b.n	80109d6 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 8010964:	4b32      	ldr	r3, [pc, #200]	; (8010a30 <compress_kitiku+0x3c0>)
 8010966:	2200      	movs	r2, #0
 8010968:	701a      	strb	r2, [r3, #0]
				break;
 801096a:	e034      	b.n	80109d6 <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 801096c:	8a7a      	ldrh	r2, [r7, #18]
 801096e:	8afb      	ldrh	r3, [r7, #22]
 8010970:	429a      	cmp	r2, r3
 8010972:	d20b      	bcs.n	801098c <compress_kitiku+0x31c>
 8010974:	8a7a      	ldrh	r2, [r7, #18]
 8010976:	8abb      	ldrh	r3, [r7, #20]
 8010978:	429a      	cmp	r2, r3
 801097a:	d207      	bcs.n	801098c <compress_kitiku+0x31c>
								&& back_count < left_count){
 801097c:	8a7a      	ldrh	r2, [r7, #18]
 801097e:	8a3b      	ldrh	r3, [r7, #16]
 8010980:	429a      	cmp	r2, r3
 8010982:	d203      	bcs.n	801098c <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 8010984:	4b2a      	ldr	r3, [pc, #168]	; (8010a30 <compress_kitiku+0x3c0>)
 8010986:	2200      	movs	r2, #0
 8010988:	701a      	strb	r2, [r3, #0]
			break;
 801098a:	e024      	b.n	80109d6 <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 801098c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801098e:	2b05      	cmp	r3, #5
 8010990:	d101      	bne.n	8010996 <compress_kitiku+0x326>
			direction_now = 1;
 8010992:	2301      	movs	r3, #1
 8010994:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 8010996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010998:	2b06      	cmp	r3, #6
 801099a:	d101      	bne.n	80109a0 <compress_kitiku+0x330>
			direction_now = 2;
 801099c:	2302      	movs	r3, #2
 801099e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 80109a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d101      	bne.n	80109aa <compress_kitiku+0x33a>
			direction_now = 4;
 80109a6:	2304      	movs	r3, #4
 80109a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 80109aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b0:	d101      	bne.n	80109b6 <compress_kitiku+0x346>
			direction_now = 3;
 80109b2:	2303      	movs	r3, #3
 80109b4:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 80109b6:	4b1e      	ldr	r3, [pc, #120]	; (8010a30 <compress_kitiku+0x3c0>)
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00a      	beq.n	80109d4 <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 80109be:	e66c      	b.n	801069a <compress_kitiku+0x2a>
			break;
 80109c0:	bf00      	nop
 80109c2:	e008      	b.n	80109d6 <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 80109c4:	bf00      	nop
 80109c6:	e006      	b.n	80109d6 <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 80109c8:	bf00      	nop
 80109ca:	e004      	b.n	80109d6 <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 80109cc:	bf00      	nop
 80109ce:	e002      	b.n	80109d6 <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 80109d0:	bf00      	nop
 80109d2:	e000      	b.n	80109d6 <compress_kitiku+0x366>

			break;
 80109d4:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 80109d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109d8:	3302      	adds	r3, #2
 80109da:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 80109dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109de:	2b05      	cmp	r3, #5
 80109e0:	d101      	bne.n	80109e6 <compress_kitiku+0x376>
				direction2 = 1;
 80109e2:	2301      	movs	r3, #1
 80109e4:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 80109e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109e8:	2b06      	cmp	r3, #6
 80109ea:	d101      	bne.n	80109f0 <compress_kitiku+0x380>
				direction2 = 2;
 80109ec:	2302      	movs	r3, #2
 80109ee:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 80109f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d101      	bne.n	80109fa <compress_kitiku+0x38a>
				direction2 = 4;
 80109f6:	2304      	movs	r3, #4
 80109f8:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 80109fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a00:	d101      	bne.n	8010a06 <compress_kitiku+0x396>
				direction2 = 3;
 8010a02:	2303      	movs	r3, #3
 8010a04:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 8010a06:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010a0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7fd facf 	bl	800dfb4 <update_coordinate>

	*x=x_now;
 8010a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8010a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a26:	601a      	str	r2, [r3, #0]

}
 8010a28:	bf00      	nop
 8010a2a:	3754      	adds	r7, #84	; 0x54
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a30:	20000829 	.word	0x20000829

08010a34 <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
 8010a40:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	3b01      	subs	r3, #1
 8010a46:	2b03      	cmp	r3, #3
 8010a48:	f200 8272 	bhi.w	8010f30 <update_wall+0x4fc>
 8010a4c:	a201      	add	r2, pc, #4	; (adr r2, 8010a54 <update_wall+0x20>)
 8010a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a52:	bf00      	nop
 8010a54:	08010a65 	.word	0x08010a65
 8010a58:	08010b8b 	.word	0x08010b8b
 8010a5c:	08010cc1 	.word	0x08010cc1
 8010a60:	08010def 	.word	0x08010def
	case 1:
		if (y <= 14) {
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	2b0e      	cmp	r3, #14
 8010a68:	dc2e      	bgt.n	8010ac8 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010a6a:	4a94      	ldr	r2, [pc, #592]	; (8010cbc <update_wall+0x288>)
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	332c      	adds	r3, #44	; 0x2c
 8010a70:	005b      	lsls	r3, r3, #1
 8010a72:	4413      	add	r3, r2
 8010a74:	885b      	ldrh	r3, [r3, #2]
 8010a76:	b21a      	sxth	r2, r3
 8010a78:	2101      	movs	r1, #1
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a80:	b21b      	sxth	r3, r3
 8010a82:	4313      	orrs	r3, r2
 8010a84:	b21b      	sxth	r3, r3
 8010a86:	b299      	uxth	r1, r3
 8010a88:	4a8c      	ldr	r2, [pc, #560]	; (8010cbc <update_wall+0x288>)
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	332c      	adds	r3, #44	; 0x2c
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	4413      	add	r3, r2
 8010a92:	460a      	mov	r2, r1
 8010a94:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010a96:	78fb      	ldrb	r3, [r7, #3]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d015      	beq.n	8010ac8 <update_wall+0x94>
 8010a9c:	4a87      	ldr	r2, [pc, #540]	; (8010cbc <update_wall+0x288>)
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	330c      	adds	r3, #12
 8010aa2:	005b      	lsls	r3, r3, #1
 8010aa4:	4413      	add	r3, r2
 8010aa6:	88db      	ldrh	r3, [r3, #6]
 8010aa8:	b21a      	sxth	r2, r3
 8010aaa:	2101      	movs	r1, #1
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	fa01 f303 	lsl.w	r3, r1, r3
 8010ab2:	b21b      	sxth	r3, r3
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	b21b      	sxth	r3, r3
 8010ab8:	b299      	uxth	r1, r3
 8010aba:	4a80      	ldr	r2, [pc, #512]	; (8010cbc <update_wall+0x288>)
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	330c      	adds	r3, #12
 8010ac0:	005b      	lsls	r3, r3, #1
 8010ac2:	4413      	add	r3, r2
 8010ac4:	460a      	mov	r2, r1
 8010ac6:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	dd2d      	ble.n	8010b2a <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	4a7a      	ldr	r2, [pc, #488]	; (8010cbc <update_wall+0x288>)
 8010ad4:	331c      	adds	r3, #28
 8010ad6:	005b      	lsls	r3, r3, #1
 8010ad8:	4413      	add	r3, r2
 8010ada:	889b      	ldrh	r3, [r3, #4]
 8010adc:	b21a      	sxth	r2, r3
 8010ade:	2101      	movs	r1, #1
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ae6:	b21b      	sxth	r3, r3
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	b21a      	sxth	r2, r3
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	3b01      	subs	r3, #1
 8010af0:	b291      	uxth	r1, r2
 8010af2:	4a72      	ldr	r2, [pc, #456]	; (8010cbc <update_wall+0x288>)
 8010af4:	331c      	adds	r3, #28
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	4413      	add	r3, r2
 8010afa:	460a      	mov	r2, r1
 8010afc:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010afe:	7f3b      	ldrb	r3, [r7, #28]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d012      	beq.n	8010b2a <update_wall+0xf6>
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	3b01      	subs	r3, #1
 8010b08:	4a6c      	ldr	r2, [pc, #432]	; (8010cbc <update_wall+0x288>)
 8010b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b0e:	b21a      	sxth	r2, r3
 8010b10:	2101      	movs	r1, #1
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	fa01 f303 	lsl.w	r3, r1, r3
 8010b18:	b21b      	sxth	r3, r3
 8010b1a:	4313      	orrs	r3, r2
 8010b1c:	b21a      	sxth	r2, r3
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	3b01      	subs	r3, #1
 8010b22:	b291      	uxth	r1, r2
 8010b24:	4a65      	ldr	r2, [pc, #404]	; (8010cbc <update_wall+0x288>)
 8010b26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	2b0e      	cmp	r3, #14
 8010b2e:	f300 81f8 	bgt.w	8010f22 <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010b32:	4a62      	ldr	r2, [pc, #392]	; (8010cbc <update_wall+0x288>)
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	331c      	adds	r3, #28
 8010b38:	005b      	lsls	r3, r3, #1
 8010b3a:	4413      	add	r3, r2
 8010b3c:	889b      	ldrh	r3, [r3, #4]
 8010b3e:	b21a      	sxth	r2, r3
 8010b40:	2101      	movs	r1, #1
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	fa01 f303 	lsl.w	r3, r1, r3
 8010b48:	b21b      	sxth	r3, r3
 8010b4a:	4313      	orrs	r3, r2
 8010b4c:	b21b      	sxth	r3, r3
 8010b4e:	b299      	uxth	r1, r3
 8010b50:	4a5a      	ldr	r2, [pc, #360]	; (8010cbc <update_wall+0x288>)
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	331c      	adds	r3, #28
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	4413      	add	r3, r2
 8010b5a:	460a      	mov	r2, r1
 8010b5c:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010b5e:	7e3b      	ldrb	r3, [r7, #24]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f000 81de 	beq.w	8010f22 <update_wall+0x4ee>
 8010b66:	4a55      	ldr	r2, [pc, #340]	; (8010cbc <update_wall+0x288>)
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b6e:	b21a      	sxth	r2, r3
 8010b70:	2101      	movs	r1, #1
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	fa01 f303 	lsl.w	r3, r1, r3
 8010b78:	b21b      	sxth	r3, r3
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	b21b      	sxth	r3, r3
 8010b7e:	b299      	uxth	r1, r3
 8010b80:	4a4e      	ldr	r2, [pc, #312]	; (8010cbc <update_wall+0x288>)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010b88:	e1cb      	b.n	8010f22 <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2b0e      	cmp	r3, #14
 8010b8e:	dc29      	bgt.n	8010be4 <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010b90:	4a4a      	ldr	r2, [pc, #296]	; (8010cbc <update_wall+0x288>)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	331c      	adds	r3, #28
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	4413      	add	r3, r2
 8010b9a:	889b      	ldrh	r3, [r3, #4]
 8010b9c:	b21a      	sxth	r2, r3
 8010b9e:	2101      	movs	r1, #1
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ba6:	b21b      	sxth	r3, r3
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	b21b      	sxth	r3, r3
 8010bac:	b299      	uxth	r1, r3
 8010bae:	4a43      	ldr	r2, [pc, #268]	; (8010cbc <update_wall+0x288>)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	331c      	adds	r3, #28
 8010bb4:	005b      	lsls	r3, r3, #1
 8010bb6:	4413      	add	r3, r2
 8010bb8:	460a      	mov	r2, r1
 8010bba:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010bbc:	78fb      	ldrb	r3, [r7, #3]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d010      	beq.n	8010be4 <update_wall+0x1b0>
 8010bc2:	4a3e      	ldr	r2, [pc, #248]	; (8010cbc <update_wall+0x288>)
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bca:	b21a      	sxth	r2, r3
 8010bcc:	2101      	movs	r1, #1
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8010bd4:	b21b      	sxth	r3, r3
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	b21b      	sxth	r3, r3
 8010bda:	b299      	uxth	r1, r3
 8010bdc:	4a37      	ldr	r2, [pc, #220]	; (8010cbc <update_wall+0x288>)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	2b0e      	cmp	r3, #14
 8010be8:	dc2e      	bgt.n	8010c48 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010bea:	4a34      	ldr	r2, [pc, #208]	; (8010cbc <update_wall+0x288>)
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	332c      	adds	r3, #44	; 0x2c
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	885b      	ldrh	r3, [r3, #2]
 8010bf6:	b21a      	sxth	r2, r3
 8010bf8:	2101      	movs	r1, #1
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8010c00:	b21b      	sxth	r3, r3
 8010c02:	4313      	orrs	r3, r2
 8010c04:	b21b      	sxth	r3, r3
 8010c06:	b299      	uxth	r1, r3
 8010c08:	4a2c      	ldr	r2, [pc, #176]	; (8010cbc <update_wall+0x288>)
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	332c      	adds	r3, #44	; 0x2c
 8010c0e:	005b      	lsls	r3, r3, #1
 8010c10:	4413      	add	r3, r2
 8010c12:	460a      	mov	r2, r1
 8010c14:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010c16:	7f3b      	ldrb	r3, [r7, #28]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d015      	beq.n	8010c48 <update_wall+0x214>
 8010c1c:	4a27      	ldr	r2, [pc, #156]	; (8010cbc <update_wall+0x288>)
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	330c      	adds	r3, #12
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	4413      	add	r3, r2
 8010c26:	88db      	ldrh	r3, [r3, #6]
 8010c28:	b21a      	sxth	r2, r3
 8010c2a:	2101      	movs	r1, #1
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8010c32:	b21b      	sxth	r3, r3
 8010c34:	4313      	orrs	r3, r2
 8010c36:	b21b      	sxth	r3, r3
 8010c38:	b299      	uxth	r1, r3
 8010c3a:	4a20      	ldr	r2, [pc, #128]	; (8010cbc <update_wall+0x288>)
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	330c      	adds	r3, #12
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	4413      	add	r3, r2
 8010c44:	460a      	mov	r2, r1
 8010c46:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f340 816b 	ble.w	8010f26 <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	3b01      	subs	r3, #1
 8010c54:	4a19      	ldr	r2, [pc, #100]	; (8010cbc <update_wall+0x288>)
 8010c56:	332c      	adds	r3, #44	; 0x2c
 8010c58:	005b      	lsls	r3, r3, #1
 8010c5a:	4413      	add	r3, r2
 8010c5c:	885b      	ldrh	r3, [r3, #2]
 8010c5e:	b21a      	sxth	r2, r3
 8010c60:	2101      	movs	r1, #1
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	fa01 f303 	lsl.w	r3, r1, r3
 8010c68:	b21b      	sxth	r3, r3
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	b21a      	sxth	r2, r3
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	3b01      	subs	r3, #1
 8010c72:	b291      	uxth	r1, r2
 8010c74:	4a11      	ldr	r2, [pc, #68]	; (8010cbc <update_wall+0x288>)
 8010c76:	332c      	adds	r3, #44	; 0x2c
 8010c78:	005b      	lsls	r3, r3, #1
 8010c7a:	4413      	add	r3, r2
 8010c7c:	460a      	mov	r2, r1
 8010c7e:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010c80:	7e3b      	ldrb	r3, [r7, #24]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	f000 814f 	beq.w	8010f26 <update_wall+0x4f2>
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	4a0b      	ldr	r2, [pc, #44]	; (8010cbc <update_wall+0x288>)
 8010c8e:	330c      	adds	r3, #12
 8010c90:	005b      	lsls	r3, r3, #1
 8010c92:	4413      	add	r3, r2
 8010c94:	88db      	ldrh	r3, [r3, #6]
 8010c96:	b21a      	sxth	r2, r3
 8010c98:	2101      	movs	r1, #1
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca0:	b21b      	sxth	r3, r3
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	b21a      	sxth	r2, r3
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	b291      	uxth	r1, r2
 8010cac:	4a03      	ldr	r2, [pc, #12]	; (8010cbc <update_wall+0x288>)
 8010cae:	330c      	adds	r3, #12
 8010cb0:	005b      	lsls	r3, r3, #1
 8010cb2:	4413      	add	r3, r2
 8010cb4:	460a      	mov	r2, r1
 8010cb6:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010cb8:	e135      	b.n	8010f26 <update_wall+0x4f2>
 8010cba:	bf00      	nop
 8010cbc:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	dd32      	ble.n	8010d2c <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	4a9c      	ldr	r2, [pc, #624]	; (8010f3c <update_wall+0x508>)
 8010ccc:	332c      	adds	r3, #44	; 0x2c
 8010cce:	005b      	lsls	r3, r3, #1
 8010cd0:	4413      	add	r3, r2
 8010cd2:	885b      	ldrh	r3, [r3, #2]
 8010cd4:	b21a      	sxth	r2, r3
 8010cd6:	2101      	movs	r1, #1
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	fa01 f303 	lsl.w	r3, r1, r3
 8010cde:	b21b      	sxth	r3, r3
 8010ce0:	4313      	orrs	r3, r2
 8010ce2:	b21a      	sxth	r2, r3
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	b291      	uxth	r1, r2
 8010cea:	4a94      	ldr	r2, [pc, #592]	; (8010f3c <update_wall+0x508>)
 8010cec:	332c      	adds	r3, #44	; 0x2c
 8010cee:	005b      	lsls	r3, r3, #1
 8010cf0:	4413      	add	r3, r2
 8010cf2:	460a      	mov	r2, r1
 8010cf4:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010cf6:	78fb      	ldrb	r3, [r7, #3]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d017      	beq.n	8010d2c <update_wall+0x2f8>
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	3b01      	subs	r3, #1
 8010d00:	4a8e      	ldr	r2, [pc, #568]	; (8010f3c <update_wall+0x508>)
 8010d02:	330c      	adds	r3, #12
 8010d04:	005b      	lsls	r3, r3, #1
 8010d06:	4413      	add	r3, r2
 8010d08:	88db      	ldrh	r3, [r3, #6]
 8010d0a:	b21a      	sxth	r2, r3
 8010d0c:	2101      	movs	r1, #1
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	fa01 f303 	lsl.w	r3, r1, r3
 8010d14:	b21b      	sxth	r3, r3
 8010d16:	4313      	orrs	r3, r2
 8010d18:	b21a      	sxth	r2, r3
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	b291      	uxth	r1, r2
 8010d20:	4a86      	ldr	r2, [pc, #536]	; (8010f3c <update_wall+0x508>)
 8010d22:	330c      	adds	r3, #12
 8010d24:	005b      	lsls	r3, r3, #1
 8010d26:	4413      	add	r3, r2
 8010d28:	460a      	mov	r2, r1
 8010d2a:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2b0e      	cmp	r3, #14
 8010d30:	dc29      	bgt.n	8010d86 <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010d32:	4a82      	ldr	r2, [pc, #520]	; (8010f3c <update_wall+0x508>)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	331c      	adds	r3, #28
 8010d38:	005b      	lsls	r3, r3, #1
 8010d3a:	4413      	add	r3, r2
 8010d3c:	889b      	ldrh	r3, [r3, #4]
 8010d3e:	b21a      	sxth	r2, r3
 8010d40:	2101      	movs	r1, #1
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	fa01 f303 	lsl.w	r3, r1, r3
 8010d48:	b21b      	sxth	r3, r3
 8010d4a:	4313      	orrs	r3, r2
 8010d4c:	b21b      	sxth	r3, r3
 8010d4e:	b299      	uxth	r1, r3
 8010d50:	4a7a      	ldr	r2, [pc, #488]	; (8010f3c <update_wall+0x508>)
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	331c      	adds	r3, #28
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	4413      	add	r3, r2
 8010d5a:	460a      	mov	r2, r1
 8010d5c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010d5e:	7f3b      	ldrb	r3, [r7, #28]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d010      	beq.n	8010d86 <update_wall+0x352>
 8010d64:	4a75      	ldr	r2, [pc, #468]	; (8010f3c <update_wall+0x508>)
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d6c:	b21a      	sxth	r2, r3
 8010d6e:	2101      	movs	r1, #1
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	fa01 f303 	lsl.w	r3, r1, r3
 8010d76:	b21b      	sxth	r3, r3
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	b21b      	sxth	r3, r3
 8010d7c:	b299      	uxth	r1, r3
 8010d7e:	4a6f      	ldr	r2, [pc, #444]	; (8010f3c <update_wall+0x508>)
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	f340 80ce 	ble.w	8010f2a <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	3b01      	subs	r3, #1
 8010d92:	4a6a      	ldr	r2, [pc, #424]	; (8010f3c <update_wall+0x508>)
 8010d94:	331c      	adds	r3, #28
 8010d96:	005b      	lsls	r3, r3, #1
 8010d98:	4413      	add	r3, r2
 8010d9a:	889b      	ldrh	r3, [r3, #4]
 8010d9c:	b21a      	sxth	r2, r3
 8010d9e:	2101      	movs	r1, #1
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	fa01 f303 	lsl.w	r3, r1, r3
 8010da6:	b21b      	sxth	r3, r3
 8010da8:	4313      	orrs	r3, r2
 8010daa:	b21a      	sxth	r2, r3
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	3b01      	subs	r3, #1
 8010db0:	b291      	uxth	r1, r2
 8010db2:	4a62      	ldr	r2, [pc, #392]	; (8010f3c <update_wall+0x508>)
 8010db4:	331c      	adds	r3, #28
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	4413      	add	r3, r2
 8010dba:	460a      	mov	r2, r1
 8010dbc:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010dbe:	7e3b      	ldrb	r3, [r7, #24]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 80b2 	beq.w	8010f2a <update_wall+0x4f6>
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	3b01      	subs	r3, #1
 8010dca:	4a5c      	ldr	r2, [pc, #368]	; (8010f3c <update_wall+0x508>)
 8010dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dd0:	b21a      	sxth	r2, r3
 8010dd2:	2101      	movs	r1, #1
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8010dda:	b21b      	sxth	r3, r3
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	b21a      	sxth	r2, r3
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	3b01      	subs	r3, #1
 8010de4:	b291      	uxth	r1, r2
 8010de6:	4a55      	ldr	r2, [pc, #340]	; (8010f3c <update_wall+0x508>)
 8010de8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010dec:	e09d      	b.n	8010f2a <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	dd2d      	ble.n	8010e50 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	3b01      	subs	r3, #1
 8010df8:	4a50      	ldr	r2, [pc, #320]	; (8010f3c <update_wall+0x508>)
 8010dfa:	331c      	adds	r3, #28
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	4413      	add	r3, r2
 8010e00:	889b      	ldrh	r3, [r3, #4]
 8010e02:	b21a      	sxth	r2, r3
 8010e04:	2101      	movs	r1, #1
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	fa01 f303 	lsl.w	r3, r1, r3
 8010e0c:	b21b      	sxth	r3, r3
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	b21a      	sxth	r2, r3
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	3b01      	subs	r3, #1
 8010e16:	b291      	uxth	r1, r2
 8010e18:	4a48      	ldr	r2, [pc, #288]	; (8010f3c <update_wall+0x508>)
 8010e1a:	331c      	adds	r3, #28
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	4413      	add	r3, r2
 8010e20:	460a      	mov	r2, r1
 8010e22:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010e24:	78fb      	ldrb	r3, [r7, #3]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d012      	beq.n	8010e50 <update_wall+0x41c>
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	3b01      	subs	r3, #1
 8010e2e:	4a43      	ldr	r2, [pc, #268]	; (8010f3c <update_wall+0x508>)
 8010e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e34:	b21a      	sxth	r2, r3
 8010e36:	2101      	movs	r1, #1
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8010e3e:	b21b      	sxth	r3, r3
 8010e40:	4313      	orrs	r3, r2
 8010e42:	b21a      	sxth	r2, r3
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	3b01      	subs	r3, #1
 8010e48:	b291      	uxth	r1, r2
 8010e4a:	4a3c      	ldr	r2, [pc, #240]	; (8010f3c <update_wall+0x508>)
 8010e4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	dd32      	ble.n	8010ebc <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	3b01      	subs	r3, #1
 8010e5a:	4a38      	ldr	r2, [pc, #224]	; (8010f3c <update_wall+0x508>)
 8010e5c:	332c      	adds	r3, #44	; 0x2c
 8010e5e:	005b      	lsls	r3, r3, #1
 8010e60:	4413      	add	r3, r2
 8010e62:	885b      	ldrh	r3, [r3, #2]
 8010e64:	b21a      	sxth	r2, r3
 8010e66:	2101      	movs	r1, #1
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8010e6e:	b21b      	sxth	r3, r3
 8010e70:	4313      	orrs	r3, r2
 8010e72:	b21a      	sxth	r2, r3
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	3b01      	subs	r3, #1
 8010e78:	b291      	uxth	r1, r2
 8010e7a:	4a30      	ldr	r2, [pc, #192]	; (8010f3c <update_wall+0x508>)
 8010e7c:	332c      	adds	r3, #44	; 0x2c
 8010e7e:	005b      	lsls	r3, r3, #1
 8010e80:	4413      	add	r3, r2
 8010e82:	460a      	mov	r2, r1
 8010e84:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010e86:	7f3b      	ldrb	r3, [r7, #28]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d017      	beq.n	8010ebc <update_wall+0x488>
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	4a2a      	ldr	r2, [pc, #168]	; (8010f3c <update_wall+0x508>)
 8010e92:	330c      	adds	r3, #12
 8010e94:	005b      	lsls	r3, r3, #1
 8010e96:	4413      	add	r3, r2
 8010e98:	88db      	ldrh	r3, [r3, #6]
 8010e9a:	b21a      	sxth	r2, r3
 8010e9c:	2101      	movs	r1, #1
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ea4:	b21b      	sxth	r3, r3
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	b21a      	sxth	r2, r3
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	3b01      	subs	r3, #1
 8010eae:	b291      	uxth	r1, r2
 8010eb0:	4a22      	ldr	r2, [pc, #136]	; (8010f3c <update_wall+0x508>)
 8010eb2:	330c      	adds	r3, #12
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	4413      	add	r3, r2
 8010eb8:	460a      	mov	r2, r1
 8010eba:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	2b0e      	cmp	r3, #14
 8010ec0:	dc35      	bgt.n	8010f2e <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010ec2:	4a1e      	ldr	r2, [pc, #120]	; (8010f3c <update_wall+0x508>)
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	332c      	adds	r3, #44	; 0x2c
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	4413      	add	r3, r2
 8010ecc:	885b      	ldrh	r3, [r3, #2]
 8010ece:	b21a      	sxth	r2, r3
 8010ed0:	2101      	movs	r1, #1
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ed8:	b21b      	sxth	r3, r3
 8010eda:	4313      	orrs	r3, r2
 8010edc:	b21b      	sxth	r3, r3
 8010ede:	b299      	uxth	r1, r3
 8010ee0:	4a16      	ldr	r2, [pc, #88]	; (8010f3c <update_wall+0x508>)
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	332c      	adds	r3, #44	; 0x2c
 8010ee6:	005b      	lsls	r3, r3, #1
 8010ee8:	4413      	add	r3, r2
 8010eea:	460a      	mov	r2, r1
 8010eec:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010eee:	7e3b      	ldrb	r3, [r7, #24]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d01c      	beq.n	8010f2e <update_wall+0x4fa>
 8010ef4:	4a11      	ldr	r2, [pc, #68]	; (8010f3c <update_wall+0x508>)
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	330c      	adds	r3, #12
 8010efa:	005b      	lsls	r3, r3, #1
 8010efc:	4413      	add	r3, r2
 8010efe:	88db      	ldrh	r3, [r3, #6]
 8010f00:	b21a      	sxth	r2, r3
 8010f02:	2101      	movs	r1, #1
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	fa01 f303 	lsl.w	r3, r1, r3
 8010f0a:	b21b      	sxth	r3, r3
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	b21b      	sxth	r3, r3
 8010f10:	b299      	uxth	r1, r3
 8010f12:	4a0a      	ldr	r2, [pc, #40]	; (8010f3c <update_wall+0x508>)
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	330c      	adds	r3, #12
 8010f18:	005b      	lsls	r3, r3, #1
 8010f1a:	4413      	add	r3, r2
 8010f1c:	460a      	mov	r2, r1
 8010f1e:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010f20:	e005      	b.n	8010f2e <update_wall+0x4fa>
		break;
 8010f22:	bf00      	nop
 8010f24:	e004      	b.n	8010f30 <update_wall+0x4fc>
		break;
 8010f26:	bf00      	nop
 8010f28:	e002      	b.n	8010f30 <update_wall+0x4fc>
		break;
 8010f2a:	bf00      	nop
 8010f2c:	e000      	b.n	8010f30 <update_wall+0x4fc>
		break;
 8010f2e:	bf00      	nop

	}


}
 8010f30:	bf00      	nop
 8010f32:	3714      	adds	r7, #20
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	20000c3c 	.word	0x20000c3c

08010f40 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010f40:	b480      	push	{r7}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
 8010f4c:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	2201      	movs	r2, #1
 8010f52:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	2201      	movs	r2, #1
 8010f58:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	3b01      	subs	r3, #1
 8010f64:	2b03      	cmp	r3, #3
 8010f66:	f200 8156 	bhi.w	8011216 <get_wall+0x2d6>
 8010f6a:	a201      	add	r2, pc, #4	; (adr r2, 8010f70 <get_wall+0x30>)
 8010f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f70:	08010f81 	.word	0x08010f81
 8010f74:	08011021 	.word	0x08011021
 8010f78:	080110c5 	.word	0x080110c5
 8010f7c:	08011165 	.word	0x08011165
	case 1:
		if (y <= 14) {
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	2b0e      	cmp	r3, #14
 8010f84:	dc17      	bgt.n	8010fb6 <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010f86:	4aa7      	ldr	r2, [pc, #668]	; (8011224 <get_wall+0x2e4>)
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	330c      	adds	r3, #12
 8010f8c:	005b      	lsls	r3, r3, #1
 8010f8e:	4413      	add	r3, r2
 8010f90:	88db      	ldrh	r3, [r3, #6]
 8010f92:	4619      	mov	r1, r3
 8010f94:	2201      	movs	r2, #1
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	fa02 f303 	lsl.w	r3, r2, r3
 8010f9c:	ea01 0203 	and.w	r2, r1, r3
 8010fa0:	2101      	movs	r1, #1
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	bf0c      	ite	eq
 8010fac:	2301      	moveq	r3, #1
 8010fae:	2300      	movne	r3, #0
 8010fb0:	b2da      	uxtb	r2, r3
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	dd16      	ble.n	8010fea <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	3b01      	subs	r3, #1
 8010fc0:	4a98      	ldr	r2, [pc, #608]	; (8011224 <get_wall+0x2e4>)
 8010fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	2201      	movs	r2, #1
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8010fd0:	ea01 0203 	and.w	r2, r1, r3
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	bf0c      	ite	eq
 8010fe0:	2301      	moveq	r3, #1
 8010fe2:	2300      	movne	r3, #0
 8010fe4:	b2da      	uxtb	r2, r3
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2b0e      	cmp	r3, #14
 8010fee:	f300 810b 	bgt.w	8011208 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010ff2:	4a8c      	ldr	r2, [pc, #560]	; (8011224 <get_wall+0x2e4>)
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	fa02 f303 	lsl.w	r3, r2, r3
 8011004:	ea01 0203 	and.w	r2, r1, r3
 8011008:	2101      	movs	r1, #1
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	fa01 f303 	lsl.w	r3, r1, r3
 8011010:	429a      	cmp	r2, r3
 8011012:	bf0c      	ite	eq
 8011014:	2301      	moveq	r3, #1
 8011016:	2300      	movne	r3, #0
 8011018:	b2da      	uxtb	r2, r3
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801101e:	e0f3      	b.n	8011208 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2b0e      	cmp	r3, #14
 8011024:	dc15      	bgt.n	8011052 <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8011026:	4a7f      	ldr	r2, [pc, #508]	; (8011224 <get_wall+0x2e4>)
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801102e:	4619      	mov	r1, r3
 8011030:	2201      	movs	r2, #1
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	fa02 f303 	lsl.w	r3, r2, r3
 8011038:	ea01 0203 	and.w	r2, r1, r3
 801103c:	2101      	movs	r1, #1
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	fa01 f303 	lsl.w	r3, r1, r3
 8011044:	429a      	cmp	r2, r3
 8011046:	bf0c      	ite	eq
 8011048:	2301      	moveq	r3, #1
 801104a:	2300      	movne	r3, #0
 801104c:	b2da      	uxtb	r2, r3
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	2b0e      	cmp	r3, #14
 8011056:	dc17      	bgt.n	8011088 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8011058:	4a72      	ldr	r2, [pc, #456]	; (8011224 <get_wall+0x2e4>)
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	330c      	adds	r3, #12
 801105e:	005b      	lsls	r3, r3, #1
 8011060:	4413      	add	r3, r2
 8011062:	88db      	ldrh	r3, [r3, #6]
 8011064:	4619      	mov	r1, r3
 8011066:	2201      	movs	r2, #1
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	fa02 f303 	lsl.w	r3, r2, r3
 801106e:	ea01 0203 	and.w	r2, r1, r3
 8011072:	2101      	movs	r1, #1
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	fa01 f303 	lsl.w	r3, r1, r3
 801107a:	429a      	cmp	r2, r3
 801107c:	bf0c      	ite	eq
 801107e:	2301      	moveq	r3, #1
 8011080:	2300      	movne	r3, #0
 8011082:	b2da      	uxtb	r2, r3
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	2b00      	cmp	r3, #0
 801108c:	f340 80be 	ble.w	801120c <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	3b01      	subs	r3, #1
 8011094:	4a63      	ldr	r2, [pc, #396]	; (8011224 <get_wall+0x2e4>)
 8011096:	330c      	adds	r3, #12
 8011098:	005b      	lsls	r3, r3, #1
 801109a:	4413      	add	r3, r2
 801109c:	88db      	ldrh	r3, [r3, #6]
 801109e:	4619      	mov	r1, r3
 80110a0:	2201      	movs	r2, #1
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	fa02 f303 	lsl.w	r3, r2, r3
 80110a8:	ea01 0203 	and.w	r2, r1, r3
 80110ac:	2101      	movs	r1, #1
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	fa01 f303 	lsl.w	r3, r1, r3
 80110b4:	429a      	cmp	r2, r3
 80110b6:	bf0c      	ite	eq
 80110b8:	2301      	moveq	r3, #1
 80110ba:	2300      	movne	r3, #0
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	69bb      	ldr	r3, [r7, #24]
 80110c0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80110c2:	e0a3      	b.n	801120c <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	dd18      	ble.n	80110fc <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	3b01      	subs	r3, #1
 80110ce:	4a55      	ldr	r2, [pc, #340]	; (8011224 <get_wall+0x2e4>)
 80110d0:	330c      	adds	r3, #12
 80110d2:	005b      	lsls	r3, r3, #1
 80110d4:	4413      	add	r3, r2
 80110d6:	88db      	ldrh	r3, [r3, #6]
 80110d8:	4619      	mov	r1, r3
 80110da:	2201      	movs	r2, #1
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	fa02 f303 	lsl.w	r3, r2, r3
 80110e2:	ea01 0203 	and.w	r2, r1, r3
 80110e6:	2101      	movs	r1, #1
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	fa01 f303 	lsl.w	r3, r1, r3
 80110ee:	429a      	cmp	r2, r3
 80110f0:	bf0c      	ite	eq
 80110f2:	2301      	moveq	r3, #1
 80110f4:	2300      	movne	r3, #0
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b0e      	cmp	r3, #14
 8011100:	dc15      	bgt.n	801112e <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8011102:	4a48      	ldr	r2, [pc, #288]	; (8011224 <get_wall+0x2e4>)
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801110a:	4619      	mov	r1, r3
 801110c:	2201      	movs	r2, #1
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	fa02 f303 	lsl.w	r3, r2, r3
 8011114:	ea01 0203 	and.w	r2, r1, r3
 8011118:	2101      	movs	r1, #1
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	fa01 f303 	lsl.w	r3, r1, r3
 8011120:	429a      	cmp	r2, r3
 8011122:	bf0c      	ite	eq
 8011124:	2301      	moveq	r3, #1
 8011126:	2300      	movne	r3, #0
 8011128:	b2da      	uxtb	r2, r3
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2b00      	cmp	r3, #0
 8011132:	dd6d      	ble.n	8011210 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	3b01      	subs	r3, #1
 8011138:	4a3a      	ldr	r2, [pc, #232]	; (8011224 <get_wall+0x2e4>)
 801113a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801113e:	4619      	mov	r1, r3
 8011140:	2201      	movs	r2, #1
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	fa02 f303 	lsl.w	r3, r2, r3
 8011148:	ea01 0203 	and.w	r2, r1, r3
 801114c:	2101      	movs	r1, #1
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	fa01 f303 	lsl.w	r3, r1, r3
 8011154:	429a      	cmp	r2, r3
 8011156:	bf0c      	ite	eq
 8011158:	2301      	moveq	r3, #1
 801115a:	2300      	movne	r3, #0
 801115c:	b2da      	uxtb	r2, r3
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011162:	e055      	b.n	8011210 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2b00      	cmp	r3, #0
 8011168:	dd16      	ble.n	8011198 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	3b01      	subs	r3, #1
 801116e:	4a2d      	ldr	r2, [pc, #180]	; (8011224 <get_wall+0x2e4>)
 8011170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011174:	4619      	mov	r1, r3
 8011176:	2201      	movs	r2, #1
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	fa02 f303 	lsl.w	r3, r2, r3
 801117e:	ea01 0203 	and.w	r2, r1, r3
 8011182:	2101      	movs	r1, #1
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	fa01 f303 	lsl.w	r3, r1, r3
 801118a:	429a      	cmp	r2, r3
 801118c:	bf0c      	ite	eq
 801118e:	2301      	moveq	r3, #1
 8011190:	2300      	movne	r3, #0
 8011192:	b2da      	uxtb	r2, r3
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	2b00      	cmp	r3, #0
 801119c:	dd18      	ble.n	80111d0 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	3b01      	subs	r3, #1
 80111a2:	4a20      	ldr	r2, [pc, #128]	; (8011224 <get_wall+0x2e4>)
 80111a4:	330c      	adds	r3, #12
 80111a6:	005b      	lsls	r3, r3, #1
 80111a8:	4413      	add	r3, r2
 80111aa:	88db      	ldrh	r3, [r3, #6]
 80111ac:	4619      	mov	r1, r3
 80111ae:	2201      	movs	r2, #1
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	fa02 f303 	lsl.w	r3, r2, r3
 80111b6:	ea01 0203 	and.w	r2, r1, r3
 80111ba:	2101      	movs	r1, #1
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	fa01 f303 	lsl.w	r3, r1, r3
 80111c2:	429a      	cmp	r2, r3
 80111c4:	bf0c      	ite	eq
 80111c6:	2301      	moveq	r3, #1
 80111c8:	2300      	movne	r3, #0
 80111ca:	b2da      	uxtb	r2, r3
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	2b0e      	cmp	r3, #14
 80111d4:	dc1e      	bgt.n	8011214 <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 80111d6:	4a13      	ldr	r2, [pc, #76]	; (8011224 <get_wall+0x2e4>)
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	330c      	adds	r3, #12
 80111dc:	005b      	lsls	r3, r3, #1
 80111de:	4413      	add	r3, r2
 80111e0:	88db      	ldrh	r3, [r3, #6]
 80111e2:	4619      	mov	r1, r3
 80111e4:	2201      	movs	r2, #1
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	fa02 f303 	lsl.w	r3, r2, r3
 80111ec:	ea01 0203 	and.w	r2, r1, r3
 80111f0:	2101      	movs	r1, #1
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	fa01 f303 	lsl.w	r3, r1, r3
 80111f8:	429a      	cmp	r2, r3
 80111fa:	bf0c      	ite	eq
 80111fc:	2301      	moveq	r3, #1
 80111fe:	2300      	movne	r3, #0
 8011200:	b2da      	uxtb	r2, r3
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011206:	e005      	b.n	8011214 <get_wall+0x2d4>
		break;
 8011208:	bf00      	nop
 801120a:	e004      	b.n	8011216 <get_wall+0x2d6>
		break;
 801120c:	bf00      	nop
 801120e:	e002      	b.n	8011216 <get_wall+0x2d6>
		break;
 8011210:	bf00      	nop
 8011212:	e000      	b.n	8011216 <get_wall+0x2d6>
		break;
 8011214:	bf00      	nop
	}

}
 8011216:	bf00      	nop
 8011218:	3714      	adds	r7, #20
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop
 8011224:	20000c3c 	.word	0x20000c3c

08011228 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011228:	b480      	push	{r7}
 801122a:	b085      	sub	sp, #20
 801122c:	af00      	add	r7, sp, #0
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	607a      	str	r2, [r7, #4]
 8011234:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	2201      	movs	r2, #1
 801123a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	2201      	movs	r2, #1
 8011240:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8011242:	69fb      	ldr	r3, [r7, #28]
 8011244:	2201      	movs	r2, #1
 8011246:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	3b01      	subs	r3, #1
 801124c:	2b03      	cmp	r3, #3
 801124e:	f200 8162 	bhi.w	8011516 <get_wall_look+0x2ee>
 8011252:	a201      	add	r2, pc, #4	; (adr r2, 8011258 <get_wall_look+0x30>)
 8011254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011258:	08011269 	.word	0x08011269
 801125c:	08011311 	.word	0x08011311
 8011260:	080113b9 	.word	0x080113b9
 8011264:	08011461 	.word	0x08011461
	case 1:
		if (y <= 14) {
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	2b0e      	cmp	r3, #14
 801126c:	dc17      	bgt.n	801129e <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 801126e:	4aad      	ldr	r2, [pc, #692]	; (8011524 <get_wall_look+0x2fc>)
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	332c      	adds	r3, #44	; 0x2c
 8011274:	005b      	lsls	r3, r3, #1
 8011276:	4413      	add	r3, r2
 8011278:	885b      	ldrh	r3, [r3, #2]
 801127a:	4619      	mov	r1, r3
 801127c:	2201      	movs	r2, #1
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	fa02 f303 	lsl.w	r3, r2, r3
 8011284:	ea01 0203 	and.w	r2, r1, r3
 8011288:	2101      	movs	r1, #1
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	fa01 f303 	lsl.w	r3, r1, r3
 8011290:	429a      	cmp	r2, r3
 8011292:	bf0c      	ite	eq
 8011294:	2301      	moveq	r3, #1
 8011296:	2300      	movne	r3, #0
 8011298:	b2da      	uxtb	r2, r3
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	dd18      	ble.n	80112d6 <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	3b01      	subs	r3, #1
 80112a8:	4a9e      	ldr	r2, [pc, #632]	; (8011524 <get_wall_look+0x2fc>)
 80112aa:	331c      	adds	r3, #28
 80112ac:	005b      	lsls	r3, r3, #1
 80112ae:	4413      	add	r3, r2
 80112b0:	889b      	ldrh	r3, [r3, #4]
 80112b2:	4619      	mov	r1, r3
 80112b4:	2201      	movs	r2, #1
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	fa02 f303 	lsl.w	r3, r2, r3
 80112bc:	ea01 0203 	and.w	r2, r1, r3
 80112c0:	2101      	movs	r1, #1
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	fa01 f303 	lsl.w	r3, r1, r3
 80112c8:	429a      	cmp	r2, r3
 80112ca:	bf0c      	ite	eq
 80112cc:	2301      	moveq	r3, #1
 80112ce:	2300      	movne	r3, #0
 80112d0:	b2da      	uxtb	r2, r3
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2b0e      	cmp	r3, #14
 80112da:	f300 8115 	bgt.w	8011508 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 80112de:	4a91      	ldr	r2, [pc, #580]	; (8011524 <get_wall_look+0x2fc>)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	331c      	adds	r3, #28
 80112e4:	005b      	lsls	r3, r3, #1
 80112e6:	4413      	add	r3, r2
 80112e8:	889b      	ldrh	r3, [r3, #4]
 80112ea:	4619      	mov	r1, r3
 80112ec:	2201      	movs	r2, #1
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	fa02 f303 	lsl.w	r3, r2, r3
 80112f4:	ea01 0203 	and.w	r2, r1, r3
 80112f8:	2101      	movs	r1, #1
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	fa01 f303 	lsl.w	r3, r1, r3
 8011300:	429a      	cmp	r2, r3
 8011302:	bf0c      	ite	eq
 8011304:	2301      	moveq	r3, #1
 8011306:	2300      	movne	r3, #0
 8011308:	b2da      	uxtb	r2, r3
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801130e:	e0fb      	b.n	8011508 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2b0e      	cmp	r3, #14
 8011314:	dc17      	bgt.n	8011346 <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011316:	4a83      	ldr	r2, [pc, #524]	; (8011524 <get_wall_look+0x2fc>)
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	331c      	adds	r3, #28
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	4413      	add	r3, r2
 8011320:	889b      	ldrh	r3, [r3, #4]
 8011322:	4619      	mov	r1, r3
 8011324:	2201      	movs	r2, #1
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	fa02 f303 	lsl.w	r3, r2, r3
 801132c:	ea01 0203 	and.w	r2, r1, r3
 8011330:	2101      	movs	r1, #1
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	fa01 f303 	lsl.w	r3, r1, r3
 8011338:	429a      	cmp	r2, r3
 801133a:	bf0c      	ite	eq
 801133c:	2301      	moveq	r3, #1
 801133e:	2300      	movne	r3, #0
 8011340:	b2da      	uxtb	r2, r3
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	2b0e      	cmp	r3, #14
 801134a:	dc17      	bgt.n	801137c <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 801134c:	4a75      	ldr	r2, [pc, #468]	; (8011524 <get_wall_look+0x2fc>)
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	332c      	adds	r3, #44	; 0x2c
 8011352:	005b      	lsls	r3, r3, #1
 8011354:	4413      	add	r3, r2
 8011356:	885b      	ldrh	r3, [r3, #2]
 8011358:	4619      	mov	r1, r3
 801135a:	2201      	movs	r2, #1
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	fa02 f303 	lsl.w	r3, r2, r3
 8011362:	ea01 0203 	and.w	r2, r1, r3
 8011366:	2101      	movs	r1, #1
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	fa01 f303 	lsl.w	r3, r1, r3
 801136e:	429a      	cmp	r2, r3
 8011370:	bf0c      	ite	eq
 8011372:	2301      	moveq	r3, #1
 8011374:	2300      	movne	r3, #0
 8011376:	b2da      	uxtb	r2, r3
 8011378:	69fb      	ldr	r3, [r7, #28]
 801137a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	2b00      	cmp	r3, #0
 8011380:	f340 80c4 	ble.w	801150c <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	3b01      	subs	r3, #1
 8011388:	4a66      	ldr	r2, [pc, #408]	; (8011524 <get_wall_look+0x2fc>)
 801138a:	332c      	adds	r3, #44	; 0x2c
 801138c:	005b      	lsls	r3, r3, #1
 801138e:	4413      	add	r3, r2
 8011390:	885b      	ldrh	r3, [r3, #2]
 8011392:	4619      	mov	r1, r3
 8011394:	2201      	movs	r2, #1
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	fa02 f303 	lsl.w	r3, r2, r3
 801139c:	ea01 0203 	and.w	r2, r1, r3
 80113a0:	2101      	movs	r1, #1
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	fa01 f303 	lsl.w	r3, r1, r3
 80113a8:	429a      	cmp	r2, r3
 80113aa:	bf0c      	ite	eq
 80113ac:	2301      	moveq	r3, #1
 80113ae:	2300      	movne	r3, #0
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80113b6:	e0a9      	b.n	801150c <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	dd18      	ble.n	80113f0 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	3b01      	subs	r3, #1
 80113c2:	4a58      	ldr	r2, [pc, #352]	; (8011524 <get_wall_look+0x2fc>)
 80113c4:	332c      	adds	r3, #44	; 0x2c
 80113c6:	005b      	lsls	r3, r3, #1
 80113c8:	4413      	add	r3, r2
 80113ca:	885b      	ldrh	r3, [r3, #2]
 80113cc:	4619      	mov	r1, r3
 80113ce:	2201      	movs	r2, #1
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	fa02 f303 	lsl.w	r3, r2, r3
 80113d6:	ea01 0203 	and.w	r2, r1, r3
 80113da:	2101      	movs	r1, #1
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	fa01 f303 	lsl.w	r3, r1, r3
 80113e2:	429a      	cmp	r2, r3
 80113e4:	bf0c      	ite	eq
 80113e6:	2301      	moveq	r3, #1
 80113e8:	2300      	movne	r3, #0
 80113ea:	b2da      	uxtb	r2, r3
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2b0e      	cmp	r3, #14
 80113f4:	dc17      	bgt.n	8011426 <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 80113f6:	4a4b      	ldr	r2, [pc, #300]	; (8011524 <get_wall_look+0x2fc>)
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	331c      	adds	r3, #28
 80113fc:	005b      	lsls	r3, r3, #1
 80113fe:	4413      	add	r3, r2
 8011400:	889b      	ldrh	r3, [r3, #4]
 8011402:	4619      	mov	r1, r3
 8011404:	2201      	movs	r2, #1
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	fa02 f303 	lsl.w	r3, r2, r3
 801140c:	ea01 0203 	and.w	r2, r1, r3
 8011410:	2101      	movs	r1, #1
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	fa01 f303 	lsl.w	r3, r1, r3
 8011418:	429a      	cmp	r2, r3
 801141a:	bf0c      	ite	eq
 801141c:	2301      	moveq	r3, #1
 801141e:	2300      	movne	r3, #0
 8011420:	b2da      	uxtb	r2, r3
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	dd71      	ble.n	8011510 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	3b01      	subs	r3, #1
 8011430:	4a3c      	ldr	r2, [pc, #240]	; (8011524 <get_wall_look+0x2fc>)
 8011432:	331c      	adds	r3, #28
 8011434:	005b      	lsls	r3, r3, #1
 8011436:	4413      	add	r3, r2
 8011438:	889b      	ldrh	r3, [r3, #4]
 801143a:	4619      	mov	r1, r3
 801143c:	2201      	movs	r2, #1
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	fa02 f303 	lsl.w	r3, r2, r3
 8011444:	ea01 0203 	and.w	r2, r1, r3
 8011448:	2101      	movs	r1, #1
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	fa01 f303 	lsl.w	r3, r1, r3
 8011450:	429a      	cmp	r2, r3
 8011452:	bf0c      	ite	eq
 8011454:	2301      	moveq	r3, #1
 8011456:	2300      	movne	r3, #0
 8011458:	b2da      	uxtb	r2, r3
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801145e:	e057      	b.n	8011510 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2b00      	cmp	r3, #0
 8011464:	dd18      	ble.n	8011498 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	3b01      	subs	r3, #1
 801146a:	4a2e      	ldr	r2, [pc, #184]	; (8011524 <get_wall_look+0x2fc>)
 801146c:	331c      	adds	r3, #28
 801146e:	005b      	lsls	r3, r3, #1
 8011470:	4413      	add	r3, r2
 8011472:	889b      	ldrh	r3, [r3, #4]
 8011474:	4619      	mov	r1, r3
 8011476:	2201      	movs	r2, #1
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	fa02 f303 	lsl.w	r3, r2, r3
 801147e:	ea01 0203 	and.w	r2, r1, r3
 8011482:	2101      	movs	r1, #1
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	fa01 f303 	lsl.w	r3, r1, r3
 801148a:	429a      	cmp	r2, r3
 801148c:	bf0c      	ite	eq
 801148e:	2301      	moveq	r3, #1
 8011490:	2300      	movne	r3, #0
 8011492:	b2da      	uxtb	r2, r3
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	2b00      	cmp	r3, #0
 801149c:	dd18      	ble.n	80114d0 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	3b01      	subs	r3, #1
 80114a2:	4a20      	ldr	r2, [pc, #128]	; (8011524 <get_wall_look+0x2fc>)
 80114a4:	332c      	adds	r3, #44	; 0x2c
 80114a6:	005b      	lsls	r3, r3, #1
 80114a8:	4413      	add	r3, r2
 80114aa:	885b      	ldrh	r3, [r3, #2]
 80114ac:	4619      	mov	r1, r3
 80114ae:	2201      	movs	r2, #1
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	fa02 f303 	lsl.w	r3, r2, r3
 80114b6:	ea01 0203 	and.w	r2, r1, r3
 80114ba:	2101      	movs	r1, #1
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	fa01 f303 	lsl.w	r3, r1, r3
 80114c2:	429a      	cmp	r2, r3
 80114c4:	bf0c      	ite	eq
 80114c6:	2301      	moveq	r3, #1
 80114c8:	2300      	movne	r3, #0
 80114ca:	b2da      	uxtb	r2, r3
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	2b0e      	cmp	r3, #14
 80114d4:	dc1e      	bgt.n	8011514 <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80114d6:	4a13      	ldr	r2, [pc, #76]	; (8011524 <get_wall_look+0x2fc>)
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	332c      	adds	r3, #44	; 0x2c
 80114dc:	005b      	lsls	r3, r3, #1
 80114de:	4413      	add	r3, r2
 80114e0:	885b      	ldrh	r3, [r3, #2]
 80114e2:	4619      	mov	r1, r3
 80114e4:	2201      	movs	r2, #1
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	fa02 f303 	lsl.w	r3, r2, r3
 80114ec:	ea01 0203 	and.w	r2, r1, r3
 80114f0:	2101      	movs	r1, #1
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	fa01 f303 	lsl.w	r3, r1, r3
 80114f8:	429a      	cmp	r2, r3
 80114fa:	bf0c      	ite	eq
 80114fc:	2301      	moveq	r3, #1
 80114fe:	2300      	movne	r3, #0
 8011500:	b2da      	uxtb	r2, r3
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011506:	e005      	b.n	8011514 <get_wall_look+0x2ec>
		break;
 8011508:	bf00      	nop
 801150a:	e004      	b.n	8011516 <get_wall_look+0x2ee>
		break;
 801150c:	bf00      	nop
 801150e:	e002      	b.n	8011516 <get_wall_look+0x2ee>
		break;
 8011510:	bf00      	nop
 8011512:	e000      	b.n	8011516 <get_wall_look+0x2ee>
		break;
 8011514:	bf00      	nop
	}

}
 8011516:	bf00      	nop
 8011518:	3714      	adds	r7, #20
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	20000c3c 	.word	0x20000c3c

08011528 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011528:	b480      	push	{r7}
 801152a:	b087      	sub	sp, #28
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
 8011534:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8011536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011538:	2b0e      	cmp	r3, #14
 801153a:	dd02      	ble.n	8011542 <search_AroundWalkCount+0x1a>
 801153c:	23ff      	movs	r3, #255	; 0xff
 801153e:	82fb      	strh	r3, [r7, #22]
 8011540:	e008      	b.n	8011554 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[16 * x + y + 1];}
 8011542:	6a3b      	ldr	r3, [r7, #32]
 8011544:	011a      	lsls	r2, r3, #4
 8011546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011548:	4413      	add	r3, r2
 801154a:	3301      	adds	r3, #1
 801154c:	4a3c      	ldr	r2, [pc, #240]	; (8011640 <search_AroundWalkCount+0x118>)
 801154e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011552:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8011554:	6a3b      	ldr	r3, [r7, #32]
 8011556:	2b0e      	cmp	r3, #14
 8011558:	dd02      	ble.n	8011560 <search_AroundWalkCount+0x38>
 801155a:	23ff      	movs	r3, #255	; 0xff
 801155c:	82bb      	strh	r3, [r7, #20]
 801155e:	e008      	b.n	8011572 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[16 * (x + 1) + y];}
 8011560:	6a3b      	ldr	r3, [r7, #32]
 8011562:	3301      	adds	r3, #1
 8011564:	011a      	lsls	r2, r3, #4
 8011566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011568:	4413      	add	r3, r2
 801156a:	4a35      	ldr	r2, [pc, #212]	; (8011640 <search_AroundWalkCount+0x118>)
 801156c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011570:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 8011572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011574:	2b00      	cmp	r3, #0
 8011576:	dc02      	bgt.n	801157e <search_AroundWalkCount+0x56>
 8011578:	23ff      	movs	r3, #255	; 0xff
 801157a:	827b      	strh	r3, [r7, #18]
 801157c:	e008      	b.n	8011590 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[16 * x + y - 1];}
 801157e:	6a3b      	ldr	r3, [r7, #32]
 8011580:	011a      	lsls	r2, r3, #4
 8011582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011584:	4413      	add	r3, r2
 8011586:	3b01      	subs	r3, #1
 8011588:	4a2d      	ldr	r2, [pc, #180]	; (8011640 <search_AroundWalkCount+0x118>)
 801158a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801158e:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011590:	6a3b      	ldr	r3, [r7, #32]
 8011592:	2b00      	cmp	r3, #0
 8011594:	dc02      	bgt.n	801159c <search_AroundWalkCount+0x74>
 8011596:	23ff      	movs	r3, #255	; 0xff
 8011598:	823b      	strh	r3, [r7, #16]
 801159a:	e008      	b.n	80115ae <search_AroundWalkCount+0x86>
	else {west_count = walk_count[16 * (x - 1) + y];}
 801159c:	6a3b      	ldr	r3, [r7, #32]
 801159e:	3b01      	subs	r3, #1
 80115a0:	011a      	lsls	r2, r3, #4
 80115a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a4:	4413      	add	r3, r2
 80115a6:	4a26      	ldr	r2, [pc, #152]	; (8011640 <search_AroundWalkCount+0x118>)
 80115a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115ac:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80115ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b0:	3b01      	subs	r3, #1
 80115b2:	2b03      	cmp	r3, #3
 80115b4:	d83e      	bhi.n	8011634 <search_AroundWalkCount+0x10c>
 80115b6:	a201      	add	r2, pc, #4	; (adr r2, 80115bc <search_AroundWalkCount+0x94>)
 80115b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115bc:	080115cd 	.word	0x080115cd
 80115c0:	080115e7 	.word	0x080115e7
 80115c4:	08011601 	.word	0x08011601
 80115c8:	0801161b 	.word	0x0801161b
	case 1:
		*front_count = north_count;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	8afa      	ldrh	r2, [r7, #22]
 80115d0:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	8aba      	ldrh	r2, [r7, #20]
 80115d6:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	8a7a      	ldrh	r2, [r7, #18]
 80115dc:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	8a3a      	ldrh	r2, [r7, #16]
 80115e2:	801a      	strh	r2, [r3, #0]
		break;
 80115e4:	e026      	b.n	8011634 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	8aba      	ldrh	r2, [r7, #20]
 80115ea:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	8a7a      	ldrh	r2, [r7, #18]
 80115f0:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	8a3a      	ldrh	r2, [r7, #16]
 80115f6:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	8afa      	ldrh	r2, [r7, #22]
 80115fc:	801a      	strh	r2, [r3, #0]
		break;
 80115fe:	e019      	b.n	8011634 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	8a7a      	ldrh	r2, [r7, #18]
 8011604:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	8a3a      	ldrh	r2, [r7, #16]
 801160a:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	8afa      	ldrh	r2, [r7, #22]
 8011610:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	8aba      	ldrh	r2, [r7, #20]
 8011616:	801a      	strh	r2, [r3, #0]
		break;
 8011618:	e00c      	b.n	8011634 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	8a3a      	ldrh	r2, [r7, #16]
 801161e:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	8afa      	ldrh	r2, [r7, #22]
 8011624:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	8aba      	ldrh	r2, [r7, #20]
 801162a:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	8a7a      	ldrh	r2, [r7, #18]
 8011630:	801a      	strh	r2, [r3, #0]
		break;
 8011632:	bf00      	nop

	}


}
 8011634:	bf00      	nop
 8011636:	371c      	adds	r7, #28
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr
 8011640:	20000d30 	.word	0x20000d30

08011644 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011644:	b480      	push	{r7}
 8011646:	b087      	sub	sp, #28
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
 8011650:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 8011652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011654:	2b0e      	cmp	r3, #14
 8011656:	dd03      	ble.n	8011660 <search_AroundDijkstraCount+0x1c>
 8011658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801165c:	82fb      	strh	r3, [r7, #22]
 801165e:	e00a      	b.n	8011676 <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 8011660:	4944      	ldr	r1, [pc, #272]	; (8011774 <search_AroundDijkstraCount+0x130>)
 8011662:	6a3a      	ldr	r2, [r7, #32]
 8011664:	4613      	mov	r3, r2
 8011666:	011b      	lsls	r3, r3, #4
 8011668:	1a9b      	subs	r3, r3, r2
 801166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801166c:	4413      	add	r3, r2
 801166e:	33f0      	adds	r3, #240	; 0xf0
 8011670:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011674:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 8011676:	6a3b      	ldr	r3, [r7, #32]
 8011678:	2b0e      	cmp	r3, #14
 801167a:	dd03      	ble.n	8011684 <search_AroundDijkstraCount+0x40>
 801167c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011680:	82bb      	strh	r3, [r7, #20]
 8011682:	e009      	b.n	8011698 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 8011684:	493b      	ldr	r1, [pc, #236]	; (8011774 <search_AroundDijkstraCount+0x130>)
 8011686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011688:	4613      	mov	r3, r2
 801168a:	011b      	lsls	r3, r3, #4
 801168c:	1a9b      	subs	r3, r3, r2
 801168e:	6a3a      	ldr	r2, [r7, #32]
 8011690:	4413      	add	r3, r2
 8011692:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011696:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 8011698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169a:	2b00      	cmp	r3, #0
 801169c:	dc03      	bgt.n	80116a6 <search_AroundDijkstraCount+0x62>
 801169e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116a2:	827b      	strh	r3, [r7, #18]
 80116a4:	e00b      	b.n	80116be <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 80116a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a8:	1e59      	subs	r1, r3, #1
 80116aa:	4832      	ldr	r0, [pc, #200]	; (8011774 <search_AroundDijkstraCount+0x130>)
 80116ac:	6a3a      	ldr	r2, [r7, #32]
 80116ae:	4613      	mov	r3, r2
 80116b0:	011b      	lsls	r3, r3, #4
 80116b2:	1a9b      	subs	r3, r3, r2
 80116b4:	440b      	add	r3, r1
 80116b6:	33f0      	adds	r3, #240	; 0xf0
 80116b8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80116bc:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 80116be:	6a3b      	ldr	r3, [r7, #32]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	dc03      	bgt.n	80116cc <search_AroundDijkstraCount+0x88>
 80116c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116c8:	823b      	strh	r3, [r7, #16]
 80116ca:	e00a      	b.n	80116e2 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 80116cc:	6a3b      	ldr	r3, [r7, #32]
 80116ce:	1e59      	subs	r1, r3, #1
 80116d0:	4828      	ldr	r0, [pc, #160]	; (8011774 <search_AroundDijkstraCount+0x130>)
 80116d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116d4:	4613      	mov	r3, r2
 80116d6:	011b      	lsls	r3, r3, #4
 80116d8:	1a9b      	subs	r3, r3, r2
 80116da:	440b      	add	r3, r1
 80116dc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80116e0:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80116e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e4:	3b01      	subs	r3, #1
 80116e6:	2b03      	cmp	r3, #3
 80116e8:	d83e      	bhi.n	8011768 <search_AroundDijkstraCount+0x124>
 80116ea:	a201      	add	r2, pc, #4	; (adr r2, 80116f0 <search_AroundDijkstraCount+0xac>)
 80116ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f0:	08011701 	.word	0x08011701
 80116f4:	0801171b 	.word	0x0801171b
 80116f8:	08011735 	.word	0x08011735
 80116fc:	0801174f 	.word	0x0801174f
	case 1:
		*front_count = north_count;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	8afa      	ldrh	r2, [r7, #22]
 8011704:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	8aba      	ldrh	r2, [r7, #20]
 801170a:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	8a7a      	ldrh	r2, [r7, #18]
 8011710:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	8a3a      	ldrh	r2, [r7, #16]
 8011716:	801a      	strh	r2, [r3, #0]
		break;
 8011718:	e026      	b.n	8011768 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	8aba      	ldrh	r2, [r7, #20]
 801171e:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	8a7a      	ldrh	r2, [r7, #18]
 8011724:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	8a3a      	ldrh	r2, [r7, #16]
 801172a:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	8afa      	ldrh	r2, [r7, #22]
 8011730:	801a      	strh	r2, [r3, #0]
		break;
 8011732:	e019      	b.n	8011768 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	8a7a      	ldrh	r2, [r7, #18]
 8011738:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	8a3a      	ldrh	r2, [r7, #16]
 801173e:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	8afa      	ldrh	r2, [r7, #22]
 8011744:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	8aba      	ldrh	r2, [r7, #20]
 801174a:	801a      	strh	r2, [r3, #0]
		break;
 801174c:	e00c      	b.n	8011768 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	8a3a      	ldrh	r2, [r7, #16]
 8011752:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	8afa      	ldrh	r2, [r7, #22]
 8011758:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	8aba      	ldrh	r2, [r7, #20]
 801175e:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	8a7a      	ldrh	r2, [r7, #18]
 8011764:	801a      	strh	r2, [r3, #0]
		break;
 8011766:	bf00      	nop

	}


}
 8011768:	bf00      	nop
 801176a:	371c      	adds	r7, #28
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr
 8011774:	20000f30 	.word	0x20000f30

08011778 <create_DijkstraMap>:
		}

}


void create_DijkstraMap(void){
 8011778:	b590      	push	{r4, r7, lr}
 801177a:	f5ad 5ddd 	sub.w	sp, sp, #7072	; 0x1ba0
 801177e:	b087      	sub	sp, #28
 8011780:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 8011782:	23b4      	movs	r3, #180	; 0xb4
 8011784:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011788:	f102 0216 	add.w	r2, r2, #22
 801178c:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 801178e:	237f      	movs	r3, #127	; 0x7f
 8011790:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011794:	f102 0214 	add.w	r2, r2, #20
 8011798:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 801179a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801179e:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80117a2:	4adf      	ldr	r2, [pc, #892]	; (8011b20 <create_DijkstraMap+0x3a8>)
 80117a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80117a6:	c303      	stmia	r3!, {r0, r1}
 80117a8:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 80117aa:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80117ae:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80117b2:	4adc      	ldr	r2, [pc, #880]	; (8011b24 <create_DijkstraMap+0x3ac>)
 80117b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80117b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 80117ba:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80117be:	f103 031c 	add.w	r3, r3, #28
 80117c2:	4618      	mov	r0, r3
 80117c4:	f002 fef4 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_y);
 80117c8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80117cc:	f103 031c 	add.w	r3, r3, #28
 80117d0:	4618      	mov	r0, r3
 80117d2:	f002 feed 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_matrix);
 80117d6:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80117da:	3b1c      	subs	r3, #28
 80117dc:	4618      	mov	r0, r3
 80117de:	f002 fee7 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_direction);
 80117e2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80117e6:	3b1c      	subs	r3, #28
 80117e8:	4618      	mov	r0, r3
 80117ea:	f002 fee1 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_cost);
 80117ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80117f2:	3b1c      	subs	r3, #28
 80117f4:	4618      	mov	r0, r3
 80117f6:	f002 fedb 	bl	80145b0 <initStack_walk>
	for(int i=0;i<=15;i++){
 80117fa:	2300      	movs	r3, #0
 80117fc:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011800:	f102 020c 	add.w	r2, r2, #12
 8011804:	6013      	str	r3, [r2, #0]
 8011806:	e04a      	b.n	801189e <create_DijkstraMap+0x126>
		for(int j=0;j<=14;j++){
 8011808:	2300      	movs	r3, #0
 801180a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801180e:	f102 0208 	add.w	r2, r2, #8
 8011812:	6013      	str	r3, [r2, #0]
 8011814:	e031      	b.n	801187a <create_DijkstraMap+0x102>
			Dijkstra.column_count[i][j]=65535;
 8011816:	49c4      	ldr	r1, [pc, #784]	; (8011b28 <create_DijkstraMap+0x3b0>)
 8011818:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801181c:	f103 030c 	add.w	r3, r3, #12
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	4613      	mov	r3, r2
 8011824:	011b      	lsls	r3, r3, #4
 8011826:	1a9b      	subs	r3, r3, r2
 8011828:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801182c:	f102 0208 	add.w	r2, r2, #8
 8011830:	6812      	ldr	r2, [r2, #0]
 8011832:	4413      	add	r3, r2
 8011834:	33f0      	adds	r3, #240	; 0xf0
 8011836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801183a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 801183e:	49ba      	ldr	r1, [pc, #744]	; (8011b28 <create_DijkstraMap+0x3b0>)
 8011840:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011844:	f103 030c 	add.w	r3, r3, #12
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	4613      	mov	r3, r2
 801184c:	011b      	lsls	r3, r3, #4
 801184e:	1a9b      	subs	r3, r3, r2
 8011850:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011854:	f102 0208 	add.w	r2, r2, #8
 8011858:	6812      	ldr	r2, [r2, #0]
 801185a:	4413      	add	r3, r2
 801185c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011860:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 8011864:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011868:	f103 0308 	add.w	r3, r3, #8
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	3301      	adds	r3, #1
 8011870:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011874:	f102 0208 	add.w	r2, r2, #8
 8011878:	6013      	str	r3, [r2, #0]
 801187a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801187e:	f103 0308 	add.w	r3, r3, #8
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2b0e      	cmp	r3, #14
 8011886:	ddc6      	ble.n	8011816 <create_DijkstraMap+0x9e>
	for(int i=0;i<=15;i++){
 8011888:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801188c:	f103 030c 	add.w	r3, r3, #12
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	3301      	adds	r3, #1
 8011894:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011898:	f102 020c 	add.w	r2, r2, #12
 801189c:	6013      	str	r3, [r2, #0]
 801189e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118a2:	f103 030c 	add.w	r3, r3, #12
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2b0f      	cmp	r3, #15
 80118aa:	ddad      	ble.n	8011808 <create_DijkstraMap+0x90>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 80118ac:	4b9e      	ldr	r3, [pc, #632]	; (8011b28 <create_DijkstraMap+0x3b0>)
 80118ae:	2200      	movs	r2, #0
 80118b0:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 80118b4:	4b9c      	ldr	r3, [pc, #624]	; (8011b28 <create_DijkstraMap+0x3b0>)
 80118b6:	2200      	movs	r2, #0
 80118b8:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 80118bc:	4b9a      	ldr	r3, [pc, #616]	; (8011b28 <create_DijkstraMap+0x3b0>)
 80118be:	2200      	movs	r2, #0
 80118c0:	805a      	strh	r2, [r3, #2]
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 80118c2:	4b99      	ldr	r3, [pc, #612]	; (8011b28 <create_DijkstraMap+0x3b0>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	841a      	strh	r2, [r3, #32]
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80118c8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80118cc:	f103 031c 	add.w	r3, r3, #28
 80118d0:	2101      	movs	r1, #1
 80118d2:	4618      	mov	r0, r3
 80118d4:	f002 fe7c 	bl	80145d0 <pushStack_walk>
 80118d8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80118dc:	f103 031c 	add.w	r3, r3, #28
 80118e0:	2100      	movs	r1, #0
 80118e2:	4618      	mov	r0, r3
 80118e4:	f002 fe74 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118e8:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80118ec:	3b1c      	subs	r3, #28
 80118ee:	2100      	movs	r1, #0
 80118f0:	4618      	mov	r0, r3
 80118f2:	f002 fe6d 	bl	80145d0 <pushStack_walk>
 80118f6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80118fa:	3b1c      	subs	r3, #28
 80118fc:	2108      	movs	r1, #8
 80118fe:	4618      	mov	r0, r3
 8011900:	f002 fe66 	bl	80145d0 <pushStack_walk>
 8011904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011908:	3b1c      	subs	r3, #28
 801190a:	2100      	movs	r1, #0
 801190c:	4618      	mov	r0, r3
 801190e:	f002 fe5f 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 8011912:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011916:	f103 031c 	add.w	r3, r3, #28
 801191a:	2102      	movs	r1, #2
 801191c:	4618      	mov	r0, r3
 801191e:	f002 fe57 	bl	80145d0 <pushStack_walk>
 8011922:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011926:	f103 031c 	add.w	r3, r3, #28
 801192a:	2100      	movs	r1, #0
 801192c:	4618      	mov	r0, r3
 801192e:	f002 fe4f 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011932:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011936:	3b1c      	subs	r3, #28
 8011938:	2100      	movs	r1, #0
 801193a:	4618      	mov	r0, r3
 801193c:	f002 fe48 	bl	80145d0 <pushStack_walk>
 8011940:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011944:	3b1c      	subs	r3, #28
 8011946:	2108      	movs	r1, #8
 8011948:	4618      	mov	r0, r3
 801194a:	f002 fe41 	bl	80145d0 <pushStack_walk>
 801194e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011952:	3b1c      	subs	r3, #28
 8011954:	2100      	movs	r1, #0
 8011956:	4618      	mov	r0, r3
 8011958:	f002 fe3a 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801195c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011960:	f103 031c 	add.w	r3, r3, #28
 8011964:	2101      	movs	r1, #1
 8011966:	4618      	mov	r0, r3
 8011968:	f002 fe32 	bl	80145d0 <pushStack_walk>
 801196c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011970:	f103 031c 	add.w	r3, r3, #28
 8011974:	2100      	movs	r1, #0
 8011976:	4618      	mov	r0, r3
 8011978:	f002 fe2a 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801197c:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011980:	3b1c      	subs	r3, #28
 8011982:	2101      	movs	r1, #1
 8011984:	4618      	mov	r0, r3
 8011986:	f002 fe23 	bl	80145d0 <pushStack_walk>
 801198a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801198e:	3b1c      	subs	r3, #28
 8011990:	2108      	movs	r1, #8
 8011992:	4618      	mov	r0, r3
 8011994:	f002 fe1c 	bl	80145d0 <pushStack_walk>
 8011998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801199c:	3b1c      	subs	r3, #28
 801199e:	2100      	movs	r1, #0
 80119a0:	4618      	mov	r0, r3
 80119a2:	f002 fe15 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 80119a6:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80119aa:	f103 031c 	add.w	r3, r3, #28
 80119ae:	2101      	movs	r1, #1
 80119b0:	4618      	mov	r0, r3
 80119b2:	f002 fe0d 	bl	80145d0 <pushStack_walk>
 80119b6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80119ba:	f103 031c 	add.w	r3, r3, #28
 80119be:	2101      	movs	r1, #1
 80119c0:	4618      	mov	r0, r3
 80119c2:	f002 fe05 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80119c6:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80119ca:	3b1c      	subs	r3, #28
 80119cc:	2101      	movs	r1, #1
 80119ce:	4618      	mov	r0, r3
 80119d0:	f002 fdfe 	bl	80145d0 <pushStack_walk>
 80119d4:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80119d8:	3b1c      	subs	r3, #28
 80119da:	2108      	movs	r1, #8
 80119dc:	4618      	mov	r0, r3
 80119de:	f002 fdf7 	bl	80145d0 <pushStack_walk>
 80119e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80119e6:	3b1c      	subs	r3, #28
 80119e8:	2100      	movs	r1, #0
 80119ea:	4618      	mov	r0, r3
 80119ec:	f002 fdf0 	bl	80145d0 <pushStack_walk>



	unsigned short count_number = 1;
 80119f0:	2301      	movs	r3, #1
 80119f2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80119f6:	f102 0206 	add.w	r2, r2, #6
 80119fa:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 80119fc:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011a00:	f103 031c 	add.w	r3, r3, #28
 8011a04:	4618      	mov	r0, r3
 8011a06:	f002 fe0d 	bl	8014624 <popStack_walk>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a10:	f102 0204 	add.w	r2, r2, #4
 8011a14:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8011a16:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011a1a:	f103 031c 	add.w	r3, r3, #28
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f002 fe00 	bl	8014624 <popStack_walk>
 8011a24:	4603      	mov	r3, r0
 8011a26:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a2a:	f102 0202 	add.w	r2, r2, #2
 8011a2e:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 8011a30:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011a34:	3b1c      	subs	r3, #28
 8011a36:	4618      	mov	r0, r3
 8011a38:	f002 fdf4 	bl	8014624 <popStack_walk>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a42:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8011a44:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011a48:	3b1c      	subs	r3, #28
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f002 fdea 	bl	8014624 <popStack_walk>
 8011a50:	4603      	mov	r3, r0
 8011a52:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 8011a56:	f102 021e 	add.w	r2, r2, #30
 8011a5a:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 8011a5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011a60:	3b1c      	subs	r3, #28
 8011a62:	4618      	mov	r0, r3
 8011a64:	f002 fdde 	bl	8014624 <popStack_walk>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 8011a6e:	f102 021c 	add.w	r2, r2, #28
 8011a72:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8011a74:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a78:	f103 0304 	add.w	r3, r3, #4
 8011a7c:	881b      	ldrh	r3, [r3, #0]
 8011a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a82:	4293      	cmp	r3, r2
 8011a84:	f001 8399 	beq.w	80131ba <create_DijkstraMap+0x1a42>
 8011a88:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a8c:	f103 0302 	add.w	r3, r3, #2
 8011a90:	881b      	ldrh	r3, [r3, #0]
 8011a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a96:	4293      	cmp	r3, r2
 8011a98:	f001 838f 	beq.w	80131ba <create_DijkstraMap+0x1a42>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 8011a9c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	f040 85c0 	bne.w	8012628 <create_DijkstraMap+0xeb0>
			if(Ycoordinate <= 13){
 8011aa8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011aac:	f103 0302 	add.w	r3, r3, #2
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	2b0d      	cmp	r3, #13
 8011ab4:	f200 80f5 	bhi.w	8011ca2 <create_DijkstraMap+0x52a>
				if(Direction==SLANT_NORTH){
 8011ab8:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011abc:	f103 031e 	add.w	r3, r3, #30
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d132      	bne.n	8011b2c <create_DijkstraMap+0x3b4>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011ac6:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011aca:	f103 031c 	add.w	r3, r3, #28
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ad8:	f102 0212 	add.w	r2, r2, #18
 8011adc:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011ade:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ae2:	f103 0312 	add.w	r3, r3, #18
 8011ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011aea:	2b04      	cmp	r3, #4
 8011aec:	dd05      	ble.n	8011afa <create_DijkstraMap+0x382>
 8011aee:	2304      	movs	r3, #4
 8011af0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011af4:	f102 0212 	add.w	r2, r2, #18
 8011af8:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011afa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011afe:	f103 0312 	add.w	r3, r3, #18
 8011b02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b06:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011b0a:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011b0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011b12:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011b16:	f102 0216 	add.w	r2, r2, #22
 8011b1a:	8013      	strh	r3, [r2, #0]
 8011b1c:	e016      	b.n	8011b4c <create_DijkstraMap+0x3d4>
 8011b1e:	bf00      	nop
 8011b20:	08022444 	.word	0x08022444
 8011b24:	08022450 	.word	0x08022450
 8011b28:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011b2c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011b30:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011b34:	881b      	ldrh	r3, [r3, #0]
 8011b36:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011b3a:	f102 0216 	add.w	r2, r2, #22
 8011b3e:	8013      	strh	r3, [r2, #0]
 8011b40:	2300      	movs	r3, #0
 8011b42:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011b46:	f102 0212 	add.w	r2, r2, #18
 8011b4a:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011b4c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b50:	f103 0302 	add.w	r3, r3, #2
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	3301      	adds	r3, #1
 8011b58:	4a6f      	ldr	r2, [pc, #444]	; (8011d18 <create_DijkstraMap+0x5a0>)
 8011b5a:	330c      	adds	r3, #12
 8011b5c:	005b      	lsls	r3, r3, #1
 8011b5e:	4413      	add	r3, r2
 8011b60:	88db      	ldrh	r3, [r3, #6]
 8011b62:	461a      	mov	r2, r3
 8011b64:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b68:	f103 0304 	add.w	r3, r3, #4
 8011b6c:	881b      	ldrh	r3, [r3, #0]
 8011b6e:	fa42 f303 	asr.w	r3, r2, r3
 8011b72:	f003 0301 	and.w	r3, r3, #1
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	f040 8093 	bne.w	8011ca2 <create_DijkstraMap+0x52a>
 8011b7c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b80:	f103 0304 	add.w	r3, r3, #4
 8011b84:	881a      	ldrh	r2, [r3, #0]
 8011b86:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b8a:	f103 0302 	add.w	r3, r3, #2
 8011b8e:	881b      	ldrh	r3, [r3, #0]
 8011b90:	1c59      	adds	r1, r3, #1
 8011b92:	4862      	ldr	r0, [pc, #392]	; (8011d1c <create_DijkstraMap+0x5a4>)
 8011b94:	4613      	mov	r3, r2
 8011b96:	011b      	lsls	r3, r3, #4
 8011b98:	1a9b      	subs	r3, r3, r2
 8011b9a:	440b      	add	r3, r1
 8011b9c:	33f0      	adds	r3, #240	; 0xf0
 8011b9e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ba2:	461c      	mov	r4, r3
 8011ba4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ba8:	f103 0304 	add.w	r3, r3, #4
 8011bac:	881a      	ldrh	r2, [r3, #0]
 8011bae:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bb2:	f103 0302 	add.w	r3, r3, #2
 8011bb6:	8819      	ldrh	r1, [r3, #0]
 8011bb8:	4858      	ldr	r0, [pc, #352]	; (8011d1c <create_DijkstraMap+0x5a4>)
 8011bba:	4613      	mov	r3, r2
 8011bbc:	011b      	lsls	r3, r3, #4
 8011bbe:	1a9b      	subs	r3, r3, r2
 8011bc0:	440b      	add	r3, r1
 8011bc2:	33f0      	adds	r3, #240	; 0xf0
 8011bc4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bce:	f103 0316 	add.w	r3, r3, #22
 8011bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	429c      	cmp	r4, r3
 8011bda:	dd62      	ble.n	8011ca2 <create_DijkstraMap+0x52a>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011bdc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011be0:	f103 0304 	add.w	r3, r3, #4
 8011be4:	881a      	ldrh	r2, [r3, #0]
 8011be6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bea:	f103 0302 	add.w	r3, r3, #2
 8011bee:	8819      	ldrh	r1, [r3, #0]
 8011bf0:	484a      	ldr	r0, [pc, #296]	; (8011d1c <create_DijkstraMap+0x5a4>)
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	011b      	lsls	r3, r3, #4
 8011bf6:	1a9b      	subs	r3, r3, r2
 8011bf8:	440b      	add	r3, r1
 8011bfa:	33f0      	adds	r3, #240	; 0xf0
 8011bfc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011c00:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c04:	f103 0316 	add.w	r3, r3, #22
 8011c08:	881b      	ldrh	r3, [r3, #0]
 8011c0a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c0e:	f102 0204 	add.w	r2, r2, #4
 8011c12:	8812      	ldrh	r2, [r2, #0]
 8011c14:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011c18:	f101 0102 	add.w	r1, r1, #2
 8011c1c:	8809      	ldrh	r1, [r1, #0]
 8011c1e:	3101      	adds	r1, #1
 8011c20:	4403      	add	r3, r0
 8011c22:	b29c      	uxth	r4, r3
 8011c24:	483d      	ldr	r0, [pc, #244]	; (8011d1c <create_DijkstraMap+0x5a4>)
 8011c26:	4613      	mov	r3, r2
 8011c28:	011b      	lsls	r3, r3, #4
 8011c2a:	1a9b      	subs	r3, r3, r2
 8011c2c:	440b      	add	r3, r1
 8011c2e:	33f0      	adds	r3, #240	; 0xf0
 8011c30:	4622      	mov	r2, r4
 8011c32:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011c36:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c3a:	f103 0304 	add.w	r3, r3, #4
 8011c3e:	881a      	ldrh	r2, [r3, #0]
 8011c40:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011c44:	f103 031c 	add.w	r3, r3, #28
 8011c48:	4611      	mov	r1, r2
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f002 fcc0 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011c50:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c54:	f103 0302 	add.w	r3, r3, #2
 8011c58:	881b      	ldrh	r3, [r3, #0]
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	b29a      	uxth	r2, r3
 8011c5e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011c62:	f103 031c 	add.w	r3, r3, #28
 8011c66:	4611      	mov	r1, r2
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f002 fcb1 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011c6e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011c72:	3b1c      	subs	r3, #28
 8011c74:	2100      	movs	r1, #0
 8011c76:	4618      	mov	r0, r3
 8011c78:	f002 fcaa 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011c7c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011c80:	3b1c      	subs	r3, #28
 8011c82:	2100      	movs	r1, #0
 8011c84:	4618      	mov	r0, r3
 8011c86:	f002 fca3 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011c8a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c8e:	f103 0312 	add.w	r3, r3, #18
 8011c92:	881a      	ldrh	r2, [r3, #0]
 8011c94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011c98:	3b1c      	subs	r3, #28
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f002 fc97 	bl	80145d0 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011ca2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ca6:	f103 0302 	add.w	r3, r3, #2
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f000 80f2 	beq.w	8011e96 <create_DijkstraMap+0x71e>
				if(Direction==SLANT_SOUTH){
 8011cb2:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011cb6:	f103 031e 	add.w	r3, r3, #30
 8011cba:	881b      	ldrh	r3, [r3, #0]
 8011cbc:	2b04      	cmp	r3, #4
 8011cbe:	d12f      	bne.n	8011d20 <create_DijkstraMap+0x5a8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011cc0:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011cc4:	f103 031c 	add.w	r3, r3, #28
 8011cc8:	881b      	ldrh	r3, [r3, #0]
 8011cca:	3301      	adds	r3, #1
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011cd2:	f102 0212 	add.w	r2, r2, #18
 8011cd6:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011cd8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cdc:	f103 0312 	add.w	r3, r3, #18
 8011ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ce4:	2b04      	cmp	r3, #4
 8011ce6:	dd05      	ble.n	8011cf4 <create_DijkstraMap+0x57c>
 8011ce8:	2304      	movs	r3, #4
 8011cea:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011cee:	f102 0212 	add.w	r2, r2, #18
 8011cf2:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011cf4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cf8:	f103 0312 	add.w	r3, r3, #18
 8011cfc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d00:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011d04:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011d08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011d0c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011d10:	f102 0216 	add.w	r2, r2, #22
 8011d14:	8013      	strh	r3, [r2, #0]
 8011d16:	e013      	b.n	8011d40 <create_DijkstraMap+0x5c8>
 8011d18:	20000c3c 	.word	0x20000c3c
 8011d1c:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011d20:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011d24:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011d28:	881b      	ldrh	r3, [r3, #0]
 8011d2a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011d2e:	f102 0216 	add.w	r2, r2, #22
 8011d32:	8013      	strh	r3, [r2, #0]
 8011d34:	2300      	movs	r3, #0
 8011d36:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011d3a:	f102 0212 	add.w	r2, r2, #18
 8011d3e:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011d40:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d44:	f103 0302 	add.w	r3, r3, #2
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	4a6f      	ldr	r2, [pc, #444]	; (8011f0c <create_DijkstraMap+0x794>)
 8011d4e:	330c      	adds	r3, #12
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	4413      	add	r3, r2
 8011d54:	88db      	ldrh	r3, [r3, #6]
 8011d56:	461a      	mov	r2, r3
 8011d58:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d5c:	f103 0304 	add.w	r3, r3, #4
 8011d60:	881b      	ldrh	r3, [r3, #0]
 8011d62:	fa42 f303 	asr.w	r3, r2, r3
 8011d66:	f003 0301 	and.w	r3, r3, #1
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	f040 8093 	bne.w	8011e96 <create_DijkstraMap+0x71e>
 8011d70:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d74:	f103 0304 	add.w	r3, r3, #4
 8011d78:	881a      	ldrh	r2, [r3, #0]
 8011d7a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d7e:	f103 0302 	add.w	r3, r3, #2
 8011d82:	881b      	ldrh	r3, [r3, #0]
 8011d84:	1e59      	subs	r1, r3, #1
 8011d86:	4862      	ldr	r0, [pc, #392]	; (8011f10 <create_DijkstraMap+0x798>)
 8011d88:	4613      	mov	r3, r2
 8011d8a:	011b      	lsls	r3, r3, #4
 8011d8c:	1a9b      	subs	r3, r3, r2
 8011d8e:	440b      	add	r3, r1
 8011d90:	33f0      	adds	r3, #240	; 0xf0
 8011d92:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011d96:	461c      	mov	r4, r3
 8011d98:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d9c:	f103 0304 	add.w	r3, r3, #4
 8011da0:	881a      	ldrh	r2, [r3, #0]
 8011da2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011da6:	f103 0302 	add.w	r3, r3, #2
 8011daa:	8819      	ldrh	r1, [r3, #0]
 8011dac:	4858      	ldr	r0, [pc, #352]	; (8011f10 <create_DijkstraMap+0x798>)
 8011dae:	4613      	mov	r3, r2
 8011db0:	011b      	lsls	r3, r3, #4
 8011db2:	1a9b      	subs	r3, r3, r2
 8011db4:	440b      	add	r3, r1
 8011db6:	33f0      	adds	r3, #240	; 0xf0
 8011db8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011dc2:	f103 0316 	add.w	r3, r3, #22
 8011dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dca:	4413      	add	r3, r2
 8011dcc:	429c      	cmp	r4, r3
 8011dce:	dd62      	ble.n	8011e96 <create_DijkstraMap+0x71e>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011dd0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011dd4:	f103 0304 	add.w	r3, r3, #4
 8011dd8:	881a      	ldrh	r2, [r3, #0]
 8011dda:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011dde:	f103 0302 	add.w	r3, r3, #2
 8011de2:	8819      	ldrh	r1, [r3, #0]
 8011de4:	484a      	ldr	r0, [pc, #296]	; (8011f10 <create_DijkstraMap+0x798>)
 8011de6:	4613      	mov	r3, r2
 8011de8:	011b      	lsls	r3, r3, #4
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	440b      	add	r3, r1
 8011dee:	33f0      	adds	r3, #240	; 0xf0
 8011df0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011df4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011df8:	f103 0316 	add.w	r3, r3, #22
 8011dfc:	881b      	ldrh	r3, [r3, #0]
 8011dfe:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e02:	f102 0204 	add.w	r2, r2, #4
 8011e06:	8812      	ldrh	r2, [r2, #0]
 8011e08:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011e0c:	f101 0102 	add.w	r1, r1, #2
 8011e10:	8809      	ldrh	r1, [r1, #0]
 8011e12:	3901      	subs	r1, #1
 8011e14:	4403      	add	r3, r0
 8011e16:	b29c      	uxth	r4, r3
 8011e18:	483d      	ldr	r0, [pc, #244]	; (8011f10 <create_DijkstraMap+0x798>)
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	011b      	lsls	r3, r3, #4
 8011e1e:	1a9b      	subs	r3, r3, r2
 8011e20:	440b      	add	r3, r1
 8011e22:	33f0      	adds	r3, #240	; 0xf0
 8011e24:	4622      	mov	r2, r4
 8011e26:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011e2a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e2e:	f103 0304 	add.w	r3, r3, #4
 8011e32:	881a      	ldrh	r2, [r3, #0]
 8011e34:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011e38:	f103 031c 	add.w	r3, r3, #28
 8011e3c:	4611      	mov	r1, r2
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f002 fbc6 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011e44:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e48:	f103 0302 	add.w	r3, r3, #2
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011e56:	f103 031c 	add.w	r3, r3, #28
 8011e5a:	4611      	mov	r1, r2
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f002 fbb7 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011e62:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011e66:	3b1c      	subs	r3, #28
 8011e68:	2100      	movs	r1, #0
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f002 fbb0 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011e70:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011e74:	3b1c      	subs	r3, #28
 8011e76:	2104      	movs	r1, #4
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f002 fba9 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011e7e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e82:	f103 0312 	add.w	r3, r3, #18
 8011e86:	881a      	ldrh	r2, [r3, #0]
 8011e88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011e8c:	3b1c      	subs	r3, #28
 8011e8e:	4611      	mov	r1, r2
 8011e90:	4618      	mov	r0, r3
 8011e92:	f002 fb9d 	bl	80145d0 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011e96:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e9a:	f103 0304 	add.w	r3, r3, #4
 8011e9e:	881b      	ldrh	r3, [r3, #0]
 8011ea0:	2b0e      	cmp	r3, #14
 8011ea2:	f200 81d8 	bhi.w	8012256 <create_DijkstraMap+0xade>
				if(Direction==SLANT_SOUTH_EAST){
 8011ea6:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011eaa:	f103 031e 	add.w	r3, r3, #30
 8011eae:	881b      	ldrh	r3, [r3, #0]
 8011eb0:	2b03      	cmp	r3, #3
 8011eb2:	d12f      	bne.n	8011f14 <create_DijkstraMap+0x79c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011eb4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011eb8:	f103 031c 	add.w	r3, r3, #28
 8011ebc:	881b      	ldrh	r3, [r3, #0]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ec6:	f102 0212 	add.w	r2, r2, #18
 8011eca:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011ecc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ed0:	f103 0312 	add.w	r3, r3, #18
 8011ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ed8:	2b05      	cmp	r3, #5
 8011eda:	dd05      	ble.n	8011ee8 <create_DijkstraMap+0x770>
 8011edc:	2305      	movs	r3, #5
 8011ede:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ee2:	f102 0212 	add.w	r2, r2, #18
 8011ee6:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011ee8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011eec:	f103 0312 	add.w	r3, r3, #18
 8011ef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ef4:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011ef8:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011efc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011f00:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f04:	f102 0214 	add.w	r2, r2, #20
 8011f08:	8013      	strh	r3, [r2, #0]
 8011f0a:	e013      	b.n	8011f34 <create_DijkstraMap+0x7bc>
 8011f0c:	20000c3c 	.word	0x20000c3c
 8011f10:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011f14:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011f18:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011f1c:	881b      	ldrh	r3, [r3, #0]
 8011f1e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f22:	f102 0214 	add.w	r2, r2, #20
 8011f26:	8013      	strh	r3, [r2, #0]
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f2e:	f102 0212 	add.w	r2, r2, #18
 8011f32:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011f34:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f38:	f103 0304 	add.w	r3, r3, #4
 8011f3c:	881b      	ldrh	r3, [r3, #0]
 8011f3e:	4a68      	ldr	r2, [pc, #416]	; (80120e0 <create_DijkstraMap+0x968>)
 8011f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f44:	461a      	mov	r2, r3
 8011f46:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f4a:	f103 0302 	add.w	r3, r3, #2
 8011f4e:	881b      	ldrh	r3, [r3, #0]
 8011f50:	fa42 f303 	asr.w	r3, r2, r3
 8011f54:	f003 0301 	and.w	r3, r3, #1
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f040 808d 	bne.w	8012078 <create_DijkstraMap+0x900>
 8011f5e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f62:	f103 0302 	add.w	r3, r3, #2
 8011f66:	881a      	ldrh	r2, [r3, #0]
 8011f68:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f6c:	f103 0304 	add.w	r3, r3, #4
 8011f70:	8819      	ldrh	r1, [r3, #0]
 8011f72:	485c      	ldr	r0, [pc, #368]	; (80120e4 <create_DijkstraMap+0x96c>)
 8011f74:	4613      	mov	r3, r2
 8011f76:	011b      	lsls	r3, r3, #4
 8011f78:	1a9b      	subs	r3, r3, r2
 8011f7a:	440b      	add	r3, r1
 8011f7c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011f80:	461c      	mov	r4, r3
 8011f82:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f86:	f103 0304 	add.w	r3, r3, #4
 8011f8a:	881a      	ldrh	r2, [r3, #0]
 8011f8c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f90:	f103 0302 	add.w	r3, r3, #2
 8011f94:	8819      	ldrh	r1, [r3, #0]
 8011f96:	4853      	ldr	r0, [pc, #332]	; (80120e4 <create_DijkstraMap+0x96c>)
 8011f98:	4613      	mov	r3, r2
 8011f9a:	011b      	lsls	r3, r3, #4
 8011f9c:	1a9b      	subs	r3, r3, r2
 8011f9e:	440b      	add	r3, r1
 8011fa0:	33f0      	adds	r3, #240	; 0xf0
 8011fa2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fac:	f103 0314 	add.w	r3, r3, #20
 8011fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fb4:	4413      	add	r3, r2
 8011fb6:	429c      	cmp	r4, r3
 8011fb8:	dd5e      	ble.n	8012078 <create_DijkstraMap+0x900>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011fba:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fbe:	f103 0304 	add.w	r3, r3, #4
 8011fc2:	881a      	ldrh	r2, [r3, #0]
 8011fc4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fc8:	f103 0302 	add.w	r3, r3, #2
 8011fcc:	8819      	ldrh	r1, [r3, #0]
 8011fce:	4845      	ldr	r0, [pc, #276]	; (80120e4 <create_DijkstraMap+0x96c>)
 8011fd0:	4613      	mov	r3, r2
 8011fd2:	011b      	lsls	r3, r3, #4
 8011fd4:	1a9b      	subs	r3, r3, r2
 8011fd6:	440b      	add	r3, r1
 8011fd8:	33f0      	adds	r3, #240	; 0xf0
 8011fda:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011fde:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fe2:	f103 0314 	add.w	r3, r3, #20
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fec:	f102 0202 	add.w	r2, r2, #2
 8011ff0:	8812      	ldrh	r2, [r2, #0]
 8011ff2:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011ff6:	f101 0104 	add.w	r1, r1, #4
 8011ffa:	8809      	ldrh	r1, [r1, #0]
 8011ffc:	4403      	add	r3, r0
 8011ffe:	b29c      	uxth	r4, r3
 8012000:	4838      	ldr	r0, [pc, #224]	; (80120e4 <create_DijkstraMap+0x96c>)
 8012002:	4613      	mov	r3, r2
 8012004:	011b      	lsls	r3, r3, #4
 8012006:	1a9b      	subs	r3, r3, r2
 8012008:	440b      	add	r3, r1
 801200a:	4622      	mov	r2, r4
 801200c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012010:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012014:	f103 0304 	add.w	r3, r3, #4
 8012018:	881a      	ldrh	r2, [r3, #0]
 801201a:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801201e:	f103 031c 	add.w	r3, r3, #28
 8012022:	4611      	mov	r1, r2
 8012024:	4618      	mov	r0, r3
 8012026:	f002 fad3 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 801202a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801202e:	f103 0302 	add.w	r3, r3, #2
 8012032:	881a      	ldrh	r2, [r3, #0]
 8012034:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012038:	f103 031c 	add.w	r3, r3, #28
 801203c:	4611      	mov	r1, r2
 801203e:	4618      	mov	r0, r3
 8012040:	f002 fac6 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012044:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012048:	3b1c      	subs	r3, #28
 801204a:	2101      	movs	r1, #1
 801204c:	4618      	mov	r0, r3
 801204e:	f002 fabf 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012052:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012056:	3b1c      	subs	r3, #28
 8012058:	2103      	movs	r1, #3
 801205a:	4618      	mov	r0, r3
 801205c:	f002 fab8 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012060:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012064:	f103 0312 	add.w	r3, r3, #18
 8012068:	881a      	ldrh	r2, [r3, #0]
 801206a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801206e:	3b1c      	subs	r3, #28
 8012070:	4611      	mov	r1, r2
 8012072:	4618      	mov	r0, r3
 8012074:	f002 faac 	bl	80145d0 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8012078:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801207c:	f103 031e 	add.w	r3, r3, #30
 8012080:	881b      	ldrh	r3, [r3, #0]
 8012082:	2b01      	cmp	r3, #1
 8012084:	d130      	bne.n	80120e8 <create_DijkstraMap+0x970>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012086:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801208a:	f103 031c 	add.w	r3, r3, #28
 801208e:	881b      	ldrh	r3, [r3, #0]
 8012090:	3301      	adds	r3, #1
 8012092:	b29b      	uxth	r3, r3
 8012094:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012098:	f102 0212 	add.w	r2, r2, #18
 801209c:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801209e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120a2:	f103 0312 	add.w	r3, r3, #18
 80120a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120aa:	2b05      	cmp	r3, #5
 80120ac:	dd05      	ble.n	80120ba <create_DijkstraMap+0x942>
 80120ae:	2305      	movs	r3, #5
 80120b0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80120b4:	f102 0212 	add.w	r2, r2, #18
 80120b8:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80120ba:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120be:	f103 0312 	add.w	r3, r3, #18
 80120c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80120c6:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80120ca:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80120ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80120d2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80120d6:	f102 0214 	add.w	r2, r2, #20
 80120da:	8013      	strh	r3, [r2, #0]
 80120dc:	e014      	b.n	8012108 <create_DijkstraMap+0x990>
 80120de:	bf00      	nop
 80120e0:	20000c3c 	.word	0x20000c3c
 80120e4:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80120e8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80120ec:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80120f0:	881b      	ldrh	r3, [r3, #0]
 80120f2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80120f6:	f102 0214 	add.w	r2, r2, #20
 80120fa:	8013      	strh	r3, [r2, #0]
 80120fc:	2300      	movs	r3, #0
 80120fe:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012102:	f102 0212 	add.w	r2, r2, #18
 8012106:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012108:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801210c:	f103 0304 	add.w	r3, r3, #4
 8012110:	881b      	ldrh	r3, [r3, #0]
 8012112:	4a6e      	ldr	r2, [pc, #440]	; (80122cc <create_DijkstraMap+0xb54>)
 8012114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012118:	461a      	mov	r2, r3
 801211a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801211e:	f103 0302 	add.w	r3, r3, #2
 8012122:	881b      	ldrh	r3, [r3, #0]
 8012124:	3301      	adds	r3, #1
 8012126:	fa42 f303 	asr.w	r3, r2, r3
 801212a:	f003 0301 	and.w	r3, r3, #1
 801212e:	2b00      	cmp	r3, #0
 8012130:	f040 8091 	bne.w	8012256 <create_DijkstraMap+0xade>
 8012134:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012138:	f103 0302 	add.w	r3, r3, #2
 801213c:	881b      	ldrh	r3, [r3, #0]
 801213e:	1c5a      	adds	r2, r3, #1
 8012140:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012144:	f103 0304 	add.w	r3, r3, #4
 8012148:	8819      	ldrh	r1, [r3, #0]
 801214a:	4861      	ldr	r0, [pc, #388]	; (80122d0 <create_DijkstraMap+0xb58>)
 801214c:	4613      	mov	r3, r2
 801214e:	011b      	lsls	r3, r3, #4
 8012150:	1a9b      	subs	r3, r3, r2
 8012152:	440b      	add	r3, r1
 8012154:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012158:	461c      	mov	r4, r3
 801215a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801215e:	f103 0304 	add.w	r3, r3, #4
 8012162:	881a      	ldrh	r2, [r3, #0]
 8012164:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012168:	f103 0302 	add.w	r3, r3, #2
 801216c:	8819      	ldrh	r1, [r3, #0]
 801216e:	4858      	ldr	r0, [pc, #352]	; (80122d0 <create_DijkstraMap+0xb58>)
 8012170:	4613      	mov	r3, r2
 8012172:	011b      	lsls	r3, r3, #4
 8012174:	1a9b      	subs	r3, r3, r2
 8012176:	440b      	add	r3, r1
 8012178:	33f0      	adds	r3, #240	; 0xf0
 801217a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801217e:	461a      	mov	r2, r3
 8012180:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012184:	f103 0314 	add.w	r3, r3, #20
 8012188:	f9b3 3000 	ldrsh.w	r3, [r3]
 801218c:	4413      	add	r3, r2
 801218e:	429c      	cmp	r4, r3
 8012190:	dd61      	ble.n	8012256 <create_DijkstraMap+0xade>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012192:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012196:	f103 0304 	add.w	r3, r3, #4
 801219a:	881a      	ldrh	r2, [r3, #0]
 801219c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121a0:	f103 0302 	add.w	r3, r3, #2
 80121a4:	8819      	ldrh	r1, [r3, #0]
 80121a6:	484a      	ldr	r0, [pc, #296]	; (80122d0 <create_DijkstraMap+0xb58>)
 80121a8:	4613      	mov	r3, r2
 80121aa:	011b      	lsls	r3, r3, #4
 80121ac:	1a9b      	subs	r3, r3, r2
 80121ae:	440b      	add	r3, r1
 80121b0:	33f0      	adds	r3, #240	; 0xf0
 80121b2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80121b6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121ba:	f103 0314 	add.w	r3, r3, #20
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121c4:	f102 0202 	add.w	r2, r2, #2
 80121c8:	8812      	ldrh	r2, [r2, #0]
 80121ca:	3201      	adds	r2, #1
 80121cc:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80121d0:	f101 0104 	add.w	r1, r1, #4
 80121d4:	8809      	ldrh	r1, [r1, #0]
 80121d6:	4403      	add	r3, r0
 80121d8:	b29c      	uxth	r4, r3
 80121da:	483d      	ldr	r0, [pc, #244]	; (80122d0 <create_DijkstraMap+0xb58>)
 80121dc:	4613      	mov	r3, r2
 80121de:	011b      	lsls	r3, r3, #4
 80121e0:	1a9b      	subs	r3, r3, r2
 80121e2:	440b      	add	r3, r1
 80121e4:	4622      	mov	r2, r4
 80121e6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80121ea:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121ee:	f103 0304 	add.w	r3, r3, #4
 80121f2:	881a      	ldrh	r2, [r3, #0]
 80121f4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80121f8:	f103 031c 	add.w	r3, r3, #28
 80121fc:	4611      	mov	r1, r2
 80121fe:	4618      	mov	r0, r3
 8012200:	f002 f9e6 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012204:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012208:	f103 0302 	add.w	r3, r3, #2
 801220c:	881b      	ldrh	r3, [r3, #0]
 801220e:	3301      	adds	r3, #1
 8012210:	b29a      	uxth	r2, r3
 8012212:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012216:	f103 031c 	add.w	r3, r3, #28
 801221a:	4611      	mov	r1, r2
 801221c:	4618      	mov	r0, r3
 801221e:	f002 f9d7 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012222:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012226:	3b1c      	subs	r3, #28
 8012228:	2101      	movs	r1, #1
 801222a:	4618      	mov	r0, r3
 801222c:	f002 f9d0 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012230:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012234:	3b1c      	subs	r3, #28
 8012236:	2101      	movs	r1, #1
 8012238:	4618      	mov	r0, r3
 801223a:	f002 f9c9 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801223e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012242:	f103 0312 	add.w	r3, r3, #18
 8012246:	881a      	ldrh	r2, [r3, #0]
 8012248:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801224c:	3b1c      	subs	r3, #28
 801224e:	4611      	mov	r1, r2
 8012250:	4618      	mov	r0, r3
 8012252:	f002 f9bd 	bl	80145d0 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8012256:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801225a:	f103 0304 	add.w	r3, r3, #4
 801225e:	881b      	ldrh	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	f000 81e1 	beq.w	8012628 <create_DijkstraMap+0xeb0>
				if(Direction==SLANT_SOUTH_WEST){
 8012266:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801226a:	f103 031e 	add.w	r3, r3, #30
 801226e:	881b      	ldrh	r3, [r3, #0]
 8012270:	2b05      	cmp	r3, #5
 8012272:	d12f      	bne.n	80122d4 <create_DijkstraMap+0xb5c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012274:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012278:	f103 031c 	add.w	r3, r3, #28
 801227c:	881b      	ldrh	r3, [r3, #0]
 801227e:	3301      	adds	r3, #1
 8012280:	b29b      	uxth	r3, r3
 8012282:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012286:	f102 0212 	add.w	r2, r2, #18
 801228a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801228c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012290:	f103 0312 	add.w	r3, r3, #18
 8012294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012298:	2b05      	cmp	r3, #5
 801229a:	dd05      	ble.n	80122a8 <create_DijkstraMap+0xb30>
 801229c:	2305      	movs	r3, #5
 801229e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80122a2:	f102 0212 	add.w	r2, r2, #18
 80122a6:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80122a8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122ac:	f103 0312 	add.w	r3, r3, #18
 80122b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80122b4:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80122b8:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80122bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80122c0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80122c4:	f102 0214 	add.w	r2, r2, #20
 80122c8:	8013      	strh	r3, [r2, #0]
 80122ca:	e013      	b.n	80122f4 <create_DijkstraMap+0xb7c>
 80122cc:	20000c3c 	.word	0x20000c3c
 80122d0:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80122d4:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80122d8:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80122dc:	881b      	ldrh	r3, [r3, #0]
 80122de:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80122e2:	f102 0214 	add.w	r2, r2, #20
 80122e6:	8013      	strh	r3, [r2, #0]
 80122e8:	2300      	movs	r3, #0
 80122ea:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80122ee:	f102 0212 	add.w	r2, r2, #18
 80122f2:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80122f4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122f8:	f103 0304 	add.w	r3, r3, #4
 80122fc:	881b      	ldrh	r3, [r3, #0]
 80122fe:	3b01      	subs	r3, #1
 8012300:	4a69      	ldr	r2, [pc, #420]	; (80124a8 <create_DijkstraMap+0xd30>)
 8012302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012306:	461a      	mov	r2, r3
 8012308:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801230c:	f103 0302 	add.w	r3, r3, #2
 8012310:	881b      	ldrh	r3, [r3, #0]
 8012312:	fa42 f303 	asr.w	r3, r2, r3
 8012316:	f003 0301 	and.w	r3, r3, #1
 801231a:	2b00      	cmp	r3, #0
 801231c:	f040 8091 	bne.w	8012442 <create_DijkstraMap+0xcca>
 8012320:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012324:	f103 0302 	add.w	r3, r3, #2
 8012328:	881a      	ldrh	r2, [r3, #0]
 801232a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801232e:	f103 0304 	add.w	r3, r3, #4
 8012332:	881b      	ldrh	r3, [r3, #0]
 8012334:	1e59      	subs	r1, r3, #1
 8012336:	485d      	ldr	r0, [pc, #372]	; (80124ac <create_DijkstraMap+0xd34>)
 8012338:	4613      	mov	r3, r2
 801233a:	011b      	lsls	r3, r3, #4
 801233c:	1a9b      	subs	r3, r3, r2
 801233e:	440b      	add	r3, r1
 8012340:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012344:	461c      	mov	r4, r3
 8012346:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801234a:	f103 0304 	add.w	r3, r3, #4
 801234e:	881a      	ldrh	r2, [r3, #0]
 8012350:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012354:	f103 0302 	add.w	r3, r3, #2
 8012358:	8819      	ldrh	r1, [r3, #0]
 801235a:	4854      	ldr	r0, [pc, #336]	; (80124ac <create_DijkstraMap+0xd34>)
 801235c:	4613      	mov	r3, r2
 801235e:	011b      	lsls	r3, r3, #4
 8012360:	1a9b      	subs	r3, r3, r2
 8012362:	440b      	add	r3, r1
 8012364:	33f0      	adds	r3, #240	; 0xf0
 8012366:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801236a:	461a      	mov	r2, r3
 801236c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012370:	f103 0314 	add.w	r3, r3, #20
 8012374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012378:	4413      	add	r3, r2
 801237a:	429c      	cmp	r4, r3
 801237c:	dd61      	ble.n	8012442 <create_DijkstraMap+0xcca>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801237e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012382:	f103 0304 	add.w	r3, r3, #4
 8012386:	881a      	ldrh	r2, [r3, #0]
 8012388:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801238c:	f103 0302 	add.w	r3, r3, #2
 8012390:	8819      	ldrh	r1, [r3, #0]
 8012392:	4846      	ldr	r0, [pc, #280]	; (80124ac <create_DijkstraMap+0xd34>)
 8012394:	4613      	mov	r3, r2
 8012396:	011b      	lsls	r3, r3, #4
 8012398:	1a9b      	subs	r3, r3, r2
 801239a:	440b      	add	r3, r1
 801239c:	33f0      	adds	r3, #240	; 0xf0
 801239e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80123a2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123a6:	f103 0314 	add.w	r3, r3, #20
 80123aa:	881b      	ldrh	r3, [r3, #0]
 80123ac:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123b0:	f102 0202 	add.w	r2, r2, #2
 80123b4:	8812      	ldrh	r2, [r2, #0]
 80123b6:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80123ba:	f101 0104 	add.w	r1, r1, #4
 80123be:	8809      	ldrh	r1, [r1, #0]
 80123c0:	3901      	subs	r1, #1
 80123c2:	4403      	add	r3, r0
 80123c4:	b29c      	uxth	r4, r3
 80123c6:	4839      	ldr	r0, [pc, #228]	; (80124ac <create_DijkstraMap+0xd34>)
 80123c8:	4613      	mov	r3, r2
 80123ca:	011b      	lsls	r3, r3, #4
 80123cc:	1a9b      	subs	r3, r3, r2
 80123ce:	440b      	add	r3, r1
 80123d0:	4622      	mov	r2, r4
 80123d2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80123d6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123da:	f103 0304 	add.w	r3, r3, #4
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	3b01      	subs	r3, #1
 80123e2:	b29a      	uxth	r2, r3
 80123e4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80123e8:	f103 031c 	add.w	r3, r3, #28
 80123ec:	4611      	mov	r1, r2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f002 f8ee 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 80123f4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123f8:	f103 0302 	add.w	r3, r3, #2
 80123fc:	881a      	ldrh	r2, [r3, #0]
 80123fe:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012402:	f103 031c 	add.w	r3, r3, #28
 8012406:	4611      	mov	r1, r2
 8012408:	4618      	mov	r0, r3
 801240a:	f002 f8e1 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801240e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012412:	3b1c      	subs	r3, #28
 8012414:	2101      	movs	r1, #1
 8012416:	4618      	mov	r0, r3
 8012418:	f002 f8da 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 801241c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012420:	3b1c      	subs	r3, #28
 8012422:	2105      	movs	r1, #5
 8012424:	4618      	mov	r0, r3
 8012426:	f002 f8d3 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801242a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801242e:	f103 0312 	add.w	r3, r3, #18
 8012432:	881a      	ldrh	r2, [r3, #0]
 8012434:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012438:	3b1c      	subs	r3, #28
 801243a:	4611      	mov	r1, r2
 801243c:	4618      	mov	r0, r3
 801243e:	f002 f8c7 	bl	80145d0 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 8012442:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012446:	f103 031e 	add.w	r3, r3, #30
 801244a:	881b      	ldrh	r3, [r3, #0]
 801244c:	2b07      	cmp	r3, #7
 801244e:	d12f      	bne.n	80124b0 <create_DijkstraMap+0xd38>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012450:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012454:	f103 031c 	add.w	r3, r3, #28
 8012458:	881b      	ldrh	r3, [r3, #0]
 801245a:	3301      	adds	r3, #1
 801245c:	b29b      	uxth	r3, r3
 801245e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012462:	f102 0212 	add.w	r2, r2, #18
 8012466:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012468:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801246c:	f103 0312 	add.w	r3, r3, #18
 8012470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012474:	2b05      	cmp	r3, #5
 8012476:	dd05      	ble.n	8012484 <create_DijkstraMap+0xd0c>
 8012478:	2305      	movs	r3, #5
 801247a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801247e:	f102 0212 	add.w	r2, r2, #18
 8012482:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012484:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012488:	f103 0312 	add.w	r3, r3, #18
 801248c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012490:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012494:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012498:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801249c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80124a0:	f102 0214 	add.w	r2, r2, #20
 80124a4:	8013      	strh	r3, [r2, #0]
 80124a6:	e013      	b.n	80124d0 <create_DijkstraMap+0xd58>
 80124a8:	20000c3c 	.word	0x20000c3c
 80124ac:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80124b0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80124b4:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80124be:	f102 0214 	add.w	r2, r2, #20
 80124c2:	8013      	strh	r3, [r2, #0]
 80124c4:	2300      	movs	r3, #0
 80124c6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80124ca:	f102 0212 	add.w	r2, r2, #18
 80124ce:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80124d0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124d4:	f103 0304 	add.w	r3, r3, #4
 80124d8:	881b      	ldrh	r3, [r3, #0]
 80124da:	3b01      	subs	r3, #1
 80124dc:	4a73      	ldr	r2, [pc, #460]	; (80126ac <create_DijkstraMap+0xf34>)
 80124de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124e2:	461a      	mov	r2, r3
 80124e4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124e8:	f103 0302 	add.w	r3, r3, #2
 80124ec:	881b      	ldrh	r3, [r3, #0]
 80124ee:	3301      	adds	r3, #1
 80124f0:	fa42 f303 	asr.w	r3, r2, r3
 80124f4:	f003 0301 	and.w	r3, r3, #1
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	f040 8095 	bne.w	8012628 <create_DijkstraMap+0xeb0>
 80124fe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012502:	f103 0302 	add.w	r3, r3, #2
 8012506:	881b      	ldrh	r3, [r3, #0]
 8012508:	1c5a      	adds	r2, r3, #1
 801250a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801250e:	f103 0304 	add.w	r3, r3, #4
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	1e59      	subs	r1, r3, #1
 8012516:	4866      	ldr	r0, [pc, #408]	; (80126b0 <create_DijkstraMap+0xf38>)
 8012518:	4613      	mov	r3, r2
 801251a:	011b      	lsls	r3, r3, #4
 801251c:	1a9b      	subs	r3, r3, r2
 801251e:	440b      	add	r3, r1
 8012520:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012524:	461c      	mov	r4, r3
 8012526:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801252a:	f103 0304 	add.w	r3, r3, #4
 801252e:	881a      	ldrh	r2, [r3, #0]
 8012530:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012534:	f103 0302 	add.w	r3, r3, #2
 8012538:	8819      	ldrh	r1, [r3, #0]
 801253a:	485d      	ldr	r0, [pc, #372]	; (80126b0 <create_DijkstraMap+0xf38>)
 801253c:	4613      	mov	r3, r2
 801253e:	011b      	lsls	r3, r3, #4
 8012540:	1a9b      	subs	r3, r3, r2
 8012542:	440b      	add	r3, r1
 8012544:	33f0      	adds	r3, #240	; 0xf0
 8012546:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801254a:	461a      	mov	r2, r3
 801254c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012550:	f103 0314 	add.w	r3, r3, #20
 8012554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012558:	4413      	add	r3, r2
 801255a:	429c      	cmp	r4, r3
 801255c:	dd64      	ble.n	8012628 <create_DijkstraMap+0xeb0>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801255e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012562:	f103 0304 	add.w	r3, r3, #4
 8012566:	881a      	ldrh	r2, [r3, #0]
 8012568:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801256c:	f103 0302 	add.w	r3, r3, #2
 8012570:	8819      	ldrh	r1, [r3, #0]
 8012572:	484f      	ldr	r0, [pc, #316]	; (80126b0 <create_DijkstraMap+0xf38>)
 8012574:	4613      	mov	r3, r2
 8012576:	011b      	lsls	r3, r3, #4
 8012578:	1a9b      	subs	r3, r3, r2
 801257a:	440b      	add	r3, r1
 801257c:	33f0      	adds	r3, #240	; 0xf0
 801257e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012582:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012586:	f103 0314 	add.w	r3, r3, #20
 801258a:	881b      	ldrh	r3, [r3, #0]
 801258c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012590:	f102 0202 	add.w	r2, r2, #2
 8012594:	8812      	ldrh	r2, [r2, #0]
 8012596:	3201      	adds	r2, #1
 8012598:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 801259c:	f101 0104 	add.w	r1, r1, #4
 80125a0:	8809      	ldrh	r1, [r1, #0]
 80125a2:	3901      	subs	r1, #1
 80125a4:	4403      	add	r3, r0
 80125a6:	b29c      	uxth	r4, r3
 80125a8:	4841      	ldr	r0, [pc, #260]	; (80126b0 <create_DijkstraMap+0xf38>)
 80125aa:	4613      	mov	r3, r2
 80125ac:	011b      	lsls	r3, r3, #4
 80125ae:	1a9b      	subs	r3, r3, r2
 80125b0:	440b      	add	r3, r1
 80125b2:	4622      	mov	r2, r4
 80125b4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80125b8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125bc:	f103 0304 	add.w	r3, r3, #4
 80125c0:	881b      	ldrh	r3, [r3, #0]
 80125c2:	3b01      	subs	r3, #1
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80125ca:	f103 031c 	add.w	r3, r3, #28
 80125ce:	4611      	mov	r1, r2
 80125d0:	4618      	mov	r0, r3
 80125d2:	f001 fffd 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 80125d6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125da:	f103 0302 	add.w	r3, r3, #2
 80125de:	881b      	ldrh	r3, [r3, #0]
 80125e0:	3301      	adds	r3, #1
 80125e2:	b29a      	uxth	r2, r3
 80125e4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80125e8:	f103 031c 	add.w	r3, r3, #28
 80125ec:	4611      	mov	r1, r2
 80125ee:	4618      	mov	r0, r3
 80125f0:	f001 ffee 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80125f4:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80125f8:	3b1c      	subs	r3, #28
 80125fa:	2101      	movs	r1, #1
 80125fc:	4618      	mov	r0, r3
 80125fe:	f001 ffe7 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012602:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012606:	3b1c      	subs	r3, #28
 8012608:	2107      	movs	r1, #7
 801260a:	4618      	mov	r0, r3
 801260c:	f001 ffe0 	bl	80145d0 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012610:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012614:	f103 0312 	add.w	r3, r3, #18
 8012618:	881a      	ldrh	r2, [r3, #0]
 801261a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801261e:	3b1c      	subs	r3, #28
 8012620:	4611      	mov	r1, r2
 8012622:	4618      	mov	r0, r3
 8012624:	f001 ffd4 	bl	80145d0 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 8012628:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801262c:	881b      	ldrh	r3, [r3, #0]
 801262e:	2b01      	cmp	r3, #1
 8012630:	f040 85b6 	bne.w	80131a0 <create_DijkstraMap+0x1a28>
					if(Xcoordinate <= 13){
 8012634:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012638:	f103 0304 	add.w	r3, r3, #4
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	2b0d      	cmp	r3, #13
 8012640:	f200 80ed 	bhi.w	801281e <create_DijkstraMap+0x10a6>
						if(Direction==SLANT_EAST){
 8012644:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012648:	f103 031e 	add.w	r3, r3, #30
 801264c:	881b      	ldrh	r3, [r3, #0]
 801264e:	2b02      	cmp	r3, #2
 8012650:	d130      	bne.n	80126b4 <create_DijkstraMap+0xf3c>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012652:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012656:	f103 031c 	add.w	r3, r3, #28
 801265a:	881b      	ldrh	r3, [r3, #0]
 801265c:	3301      	adds	r3, #1
 801265e:	b29b      	uxth	r3, r3
 8012660:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012664:	f102 0212 	add.w	r2, r2, #18
 8012668:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801266a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801266e:	f103 0312 	add.w	r3, r3, #18
 8012672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012676:	2b04      	cmp	r3, #4
 8012678:	dd05      	ble.n	8012686 <create_DijkstraMap+0xf0e>
 801267a:	2304      	movs	r3, #4
 801267c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012680:	f102 0212 	add.w	r2, r2, #18
 8012684:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012686:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801268a:	f103 0312 	add.w	r3, r3, #18
 801268e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012692:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012696:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801269a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801269e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80126a2:	f102 0216 	add.w	r2, r2, #22
 80126a6:	8013      	strh	r3, [r2, #0]
 80126a8:	e014      	b.n	80126d4 <create_DijkstraMap+0xf5c>
 80126aa:	bf00      	nop
 80126ac:	20000c3c 	.word	0x20000c3c
 80126b0:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80126b4:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80126b8:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80126bc:	881b      	ldrh	r3, [r3, #0]
 80126be:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80126c2:	f102 0216 	add.w	r2, r2, #22
 80126c6:	8013      	strh	r3, [r2, #0]
 80126c8:	2300      	movs	r3, #0
 80126ca:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80126ce:	f102 0212 	add.w	r2, r2, #18
 80126d2:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80126d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126d8:	f103 0304 	add.w	r3, r3, #4
 80126dc:	881b      	ldrh	r3, [r3, #0]
 80126de:	3301      	adds	r3, #1
 80126e0:	4a6c      	ldr	r2, [pc, #432]	; (8012894 <create_DijkstraMap+0x111c>)
 80126e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126e6:	461a      	mov	r2, r3
 80126e8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126ec:	f103 0302 	add.w	r3, r3, #2
 80126f0:	881b      	ldrh	r3, [r3, #0]
 80126f2:	fa42 f303 	asr.w	r3, r2, r3
 80126f6:	f003 0301 	and.w	r3, r3, #1
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f040 808f 	bne.w	801281e <create_DijkstraMap+0x10a6>
 8012700:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012704:	f103 0302 	add.w	r3, r3, #2
 8012708:	881a      	ldrh	r2, [r3, #0]
 801270a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801270e:	f103 0304 	add.w	r3, r3, #4
 8012712:	881b      	ldrh	r3, [r3, #0]
 8012714:	1c59      	adds	r1, r3, #1
 8012716:	4860      	ldr	r0, [pc, #384]	; (8012898 <create_DijkstraMap+0x1120>)
 8012718:	4613      	mov	r3, r2
 801271a:	011b      	lsls	r3, r3, #4
 801271c:	1a9b      	subs	r3, r3, r2
 801271e:	440b      	add	r3, r1
 8012720:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012724:	461c      	mov	r4, r3
 8012726:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801272a:	f103 0302 	add.w	r3, r3, #2
 801272e:	881a      	ldrh	r2, [r3, #0]
 8012730:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012734:	f103 0304 	add.w	r3, r3, #4
 8012738:	8819      	ldrh	r1, [r3, #0]
 801273a:	4857      	ldr	r0, [pc, #348]	; (8012898 <create_DijkstraMap+0x1120>)
 801273c:	4613      	mov	r3, r2
 801273e:	011b      	lsls	r3, r3, #4
 8012740:	1a9b      	subs	r3, r3, r2
 8012742:	440b      	add	r3, r1
 8012744:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012748:	461a      	mov	r2, r3
 801274a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801274e:	f103 0316 	add.w	r3, r3, #22
 8012752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012756:	4413      	add	r3, r2
 8012758:	429c      	cmp	r4, r3
 801275a:	dd60      	ble.n	801281e <create_DijkstraMap+0x10a6>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 801275c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012760:	f103 0302 	add.w	r3, r3, #2
 8012764:	881a      	ldrh	r2, [r3, #0]
 8012766:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801276a:	f103 0304 	add.w	r3, r3, #4
 801276e:	8819      	ldrh	r1, [r3, #0]
 8012770:	4849      	ldr	r0, [pc, #292]	; (8012898 <create_DijkstraMap+0x1120>)
 8012772:	4613      	mov	r3, r2
 8012774:	011b      	lsls	r3, r3, #4
 8012776:	1a9b      	subs	r3, r3, r2
 8012778:	440b      	add	r3, r1
 801277a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801277e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012782:	f103 0316 	add.w	r3, r3, #22
 8012786:	881b      	ldrh	r3, [r3, #0]
 8012788:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801278c:	f102 0202 	add.w	r2, r2, #2
 8012790:	8812      	ldrh	r2, [r2, #0]
 8012792:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012796:	f101 0104 	add.w	r1, r1, #4
 801279a:	8809      	ldrh	r1, [r1, #0]
 801279c:	3101      	adds	r1, #1
 801279e:	4403      	add	r3, r0
 80127a0:	b29c      	uxth	r4, r3
 80127a2:	483d      	ldr	r0, [pc, #244]	; (8012898 <create_DijkstraMap+0x1120>)
 80127a4:	4613      	mov	r3, r2
 80127a6:	011b      	lsls	r3, r3, #4
 80127a8:	1a9b      	subs	r3, r3, r2
 80127aa:	440b      	add	r3, r1
 80127ac:	4622      	mov	r2, r4
 80127ae:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 80127b2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127b6:	f103 0304 	add.w	r3, r3, #4
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	3301      	adds	r3, #1
 80127be:	b29a      	uxth	r2, r3
 80127c0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80127c4:	f103 031c 	add.w	r3, r3, #28
 80127c8:	4611      	mov	r1, r2
 80127ca:	4618      	mov	r0, r3
 80127cc:	f001 ff00 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80127d0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127d4:	f103 0302 	add.w	r3, r3, #2
 80127d8:	881a      	ldrh	r2, [r3, #0]
 80127da:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80127de:	f103 031c 	add.w	r3, r3, #28
 80127e2:	4611      	mov	r1, r2
 80127e4:	4618      	mov	r0, r3
 80127e6:	f001 fef3 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80127ea:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80127ee:	3b1c      	subs	r3, #28
 80127f0:	2101      	movs	r1, #1
 80127f2:	4618      	mov	r0, r3
 80127f4:	f001 feec 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 80127f8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80127fc:	3b1c      	subs	r3, #28
 80127fe:	2102      	movs	r1, #2
 8012800:	4618      	mov	r0, r3
 8012802:	f001 fee5 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012806:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801280a:	f103 0312 	add.w	r3, r3, #18
 801280e:	881a      	ldrh	r2, [r3, #0]
 8012810:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012814:	3b1c      	subs	r3, #28
 8012816:	4611      	mov	r1, r2
 8012818:	4618      	mov	r0, r3
 801281a:	f001 fed9 	bl	80145d0 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 801281e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012822:	f103 0304 	add.w	r3, r3, #4
 8012826:	881b      	ldrh	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	f000 80ec 	beq.w	8012a06 <create_DijkstraMap+0x128e>
						if(Direction==SLANT_WEST){
 801282e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012832:	f103 031e 	add.w	r3, r3, #30
 8012836:	881b      	ldrh	r3, [r3, #0]
 8012838:	2b06      	cmp	r3, #6
 801283a:	d12f      	bne.n	801289c <create_DijkstraMap+0x1124>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801283c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012840:	f103 031c 	add.w	r3, r3, #28
 8012844:	881b      	ldrh	r3, [r3, #0]
 8012846:	3301      	adds	r3, #1
 8012848:	b29b      	uxth	r3, r3
 801284a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801284e:	f102 0212 	add.w	r2, r2, #18
 8012852:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012854:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012858:	f103 0312 	add.w	r3, r3, #18
 801285c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012860:	2b04      	cmp	r3, #4
 8012862:	dd05      	ble.n	8012870 <create_DijkstraMap+0x10f8>
 8012864:	2304      	movs	r3, #4
 8012866:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801286a:	f102 0212 	add.w	r2, r2, #18
 801286e:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012870:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012874:	f103 0312 	add.w	r3, r3, #18
 8012878:	f9b3 2000 	ldrsh.w	r2, [r3]
 801287c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012880:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8012884:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012888:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801288c:	f102 0216 	add.w	r2, r2, #22
 8012890:	8013      	strh	r3, [r2, #0]
 8012892:	e013      	b.n	80128bc <create_DijkstraMap+0x1144>
 8012894:	20000c3c 	.word	0x20000c3c
 8012898:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 801289c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80128a0:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80128aa:	f102 0216 	add.w	r2, r2, #22
 80128ae:	8013      	strh	r3, [r2, #0]
 80128b0:	2300      	movs	r3, #0
 80128b2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80128b6:	f102 0212 	add.w	r2, r2, #18
 80128ba:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80128bc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128c0:	f103 0304 	add.w	r3, r3, #4
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	3b01      	subs	r3, #1
 80128c8:	4a6c      	ldr	r2, [pc, #432]	; (8012a7c <create_DijkstraMap+0x1304>)
 80128ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80128ce:	461a      	mov	r2, r3
 80128d0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128d4:	f103 0302 	add.w	r3, r3, #2
 80128d8:	881b      	ldrh	r3, [r3, #0]
 80128da:	fa42 f303 	asr.w	r3, r2, r3
 80128de:	f003 0301 	and.w	r3, r3, #1
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	f040 808f 	bne.w	8012a06 <create_DijkstraMap+0x128e>
 80128e8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128ec:	f103 0302 	add.w	r3, r3, #2
 80128f0:	881a      	ldrh	r2, [r3, #0]
 80128f2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128f6:	f103 0304 	add.w	r3, r3, #4
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	1e59      	subs	r1, r3, #1
 80128fe:	4860      	ldr	r0, [pc, #384]	; (8012a80 <create_DijkstraMap+0x1308>)
 8012900:	4613      	mov	r3, r2
 8012902:	011b      	lsls	r3, r3, #4
 8012904:	1a9b      	subs	r3, r3, r2
 8012906:	440b      	add	r3, r1
 8012908:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801290c:	461c      	mov	r4, r3
 801290e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012912:	f103 0302 	add.w	r3, r3, #2
 8012916:	881a      	ldrh	r2, [r3, #0]
 8012918:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801291c:	f103 0304 	add.w	r3, r3, #4
 8012920:	8819      	ldrh	r1, [r3, #0]
 8012922:	4857      	ldr	r0, [pc, #348]	; (8012a80 <create_DijkstraMap+0x1308>)
 8012924:	4613      	mov	r3, r2
 8012926:	011b      	lsls	r3, r3, #4
 8012928:	1a9b      	subs	r3, r3, r2
 801292a:	440b      	add	r3, r1
 801292c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012930:	461a      	mov	r2, r3
 8012932:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012936:	f103 0316 	add.w	r3, r3, #22
 801293a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801293e:	4413      	add	r3, r2
 8012940:	429c      	cmp	r4, r3
 8012942:	dd60      	ble.n	8012a06 <create_DijkstraMap+0x128e>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012944:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012948:	f103 0302 	add.w	r3, r3, #2
 801294c:	881a      	ldrh	r2, [r3, #0]
 801294e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012952:	f103 0304 	add.w	r3, r3, #4
 8012956:	8819      	ldrh	r1, [r3, #0]
 8012958:	4849      	ldr	r0, [pc, #292]	; (8012a80 <create_DijkstraMap+0x1308>)
 801295a:	4613      	mov	r3, r2
 801295c:	011b      	lsls	r3, r3, #4
 801295e:	1a9b      	subs	r3, r3, r2
 8012960:	440b      	add	r3, r1
 8012962:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012966:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801296a:	f103 0316 	add.w	r3, r3, #22
 801296e:	881b      	ldrh	r3, [r3, #0]
 8012970:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012974:	f102 0202 	add.w	r2, r2, #2
 8012978:	8812      	ldrh	r2, [r2, #0]
 801297a:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 801297e:	f101 0104 	add.w	r1, r1, #4
 8012982:	8809      	ldrh	r1, [r1, #0]
 8012984:	3901      	subs	r1, #1
 8012986:	4403      	add	r3, r0
 8012988:	b29c      	uxth	r4, r3
 801298a:	483d      	ldr	r0, [pc, #244]	; (8012a80 <create_DijkstraMap+0x1308>)
 801298c:	4613      	mov	r3, r2
 801298e:	011b      	lsls	r3, r3, #4
 8012990:	1a9b      	subs	r3, r3, r2
 8012992:	440b      	add	r3, r1
 8012994:	4622      	mov	r2, r4
 8012996:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 801299a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801299e:	f103 0304 	add.w	r3, r3, #4
 80129a2:	881b      	ldrh	r3, [r3, #0]
 80129a4:	3b01      	subs	r3, #1
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80129ac:	f103 031c 	add.w	r3, r3, #28
 80129b0:	4611      	mov	r1, r2
 80129b2:	4618      	mov	r0, r3
 80129b4:	f001 fe0c 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80129b8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129bc:	f103 0302 	add.w	r3, r3, #2
 80129c0:	881a      	ldrh	r2, [r3, #0]
 80129c2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80129c6:	f103 031c 	add.w	r3, r3, #28
 80129ca:	4611      	mov	r1, r2
 80129cc:	4618      	mov	r0, r3
 80129ce:	f001 fdff 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80129d2:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80129d6:	3b1c      	subs	r3, #28
 80129d8:	2101      	movs	r1, #1
 80129da:	4618      	mov	r0, r3
 80129dc:	f001 fdf8 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 80129e0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80129e4:	3b1c      	subs	r3, #28
 80129e6:	2106      	movs	r1, #6
 80129e8:	4618      	mov	r0, r3
 80129ea:	f001 fdf1 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80129ee:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129f2:	f103 0312 	add.w	r3, r3, #18
 80129f6:	881a      	ldrh	r2, [r3, #0]
 80129f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80129fc:	3b1c      	subs	r3, #28
 80129fe:	4611      	mov	r1, r2
 8012a00:	4618      	mov	r0, r3
 8012a02:	f001 fde5 	bl	80145d0 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 8012a06:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a0a:	f103 0302 	add.w	r3, r3, #2
 8012a0e:	881b      	ldrh	r3, [r3, #0]
 8012a10:	2b0e      	cmp	r3, #14
 8012a12:	f200 81dc 	bhi.w	8012dce <create_DijkstraMap+0x1656>
						if(Direction==SLANT_NORTH_WEST){
 8012a16:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012a1a:	f103 031e 	add.w	r3, r3, #30
 8012a1e:	881b      	ldrh	r3, [r3, #0]
 8012a20:	2b07      	cmp	r3, #7
 8012a22:	d12f      	bne.n	8012a84 <create_DijkstraMap+0x130c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012a24:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012a28:	f103 031c 	add.w	r3, r3, #28
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	3301      	adds	r3, #1
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012a36:	f102 0212 	add.w	r2, r2, #18
 8012a3a:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012a3c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a40:	f103 0312 	add.w	r3, r3, #18
 8012a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a48:	2b05      	cmp	r3, #5
 8012a4a:	dd05      	ble.n	8012a58 <create_DijkstraMap+0x12e0>
 8012a4c:	2305      	movs	r3, #5
 8012a4e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012a52:	f102 0212 	add.w	r2, r2, #18
 8012a56:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012a58:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a5c:	f103 0312 	add.w	r3, r3, #18
 8012a60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012a64:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012a68:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012a6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012a70:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012a74:	f102 0214 	add.w	r2, r2, #20
 8012a78:	8013      	strh	r3, [r2, #0]
 8012a7a:	e013      	b.n	8012aa4 <create_DijkstraMap+0x132c>
 8012a7c:	20000c3c 	.word	0x20000c3c
 8012a80:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012a84:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012a88:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012a92:	f102 0214 	add.w	r2, r2, #20
 8012a96:	8013      	strh	r3, [r2, #0]
 8012a98:	2300      	movs	r3, #0
 8012a9a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012a9e:	f102 0212 	add.w	r2, r2, #18
 8012aa2:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012aa4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012aa8:	f103 0302 	add.w	r3, r3, #2
 8012aac:	881b      	ldrh	r3, [r3, #0]
 8012aae:	4a69      	ldr	r2, [pc, #420]	; (8012c54 <create_DijkstraMap+0x14dc>)
 8012ab0:	330c      	adds	r3, #12
 8012ab2:	005b      	lsls	r3, r3, #1
 8012ab4:	4413      	add	r3, r2
 8012ab6:	88db      	ldrh	r3, [r3, #6]
 8012ab8:	461a      	mov	r2, r3
 8012aba:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012abe:	f103 0304 	add.w	r3, r3, #4
 8012ac2:	881b      	ldrh	r3, [r3, #0]
 8012ac4:	fa42 f303 	asr.w	r3, r2, r3
 8012ac8:	f003 0301 	and.w	r3, r3, #1
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	f040 808d 	bne.w	8012bec <create_DijkstraMap+0x1474>
 8012ad2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ad6:	f103 0304 	add.w	r3, r3, #4
 8012ada:	881a      	ldrh	r2, [r3, #0]
 8012adc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ae0:	f103 0302 	add.w	r3, r3, #2
 8012ae4:	8819      	ldrh	r1, [r3, #0]
 8012ae6:	485c      	ldr	r0, [pc, #368]	; (8012c58 <create_DijkstraMap+0x14e0>)
 8012ae8:	4613      	mov	r3, r2
 8012aea:	011b      	lsls	r3, r3, #4
 8012aec:	1a9b      	subs	r3, r3, r2
 8012aee:	440b      	add	r3, r1
 8012af0:	33f0      	adds	r3, #240	; 0xf0
 8012af2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012af6:	461c      	mov	r4, r3
 8012af8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012afc:	f103 0302 	add.w	r3, r3, #2
 8012b00:	881a      	ldrh	r2, [r3, #0]
 8012b02:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b06:	f103 0304 	add.w	r3, r3, #4
 8012b0a:	8819      	ldrh	r1, [r3, #0]
 8012b0c:	4852      	ldr	r0, [pc, #328]	; (8012c58 <create_DijkstraMap+0x14e0>)
 8012b0e:	4613      	mov	r3, r2
 8012b10:	011b      	lsls	r3, r3, #4
 8012b12:	1a9b      	subs	r3, r3, r2
 8012b14:	440b      	add	r3, r1
 8012b16:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b20:	f103 0314 	add.w	r3, r3, #20
 8012b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b28:	4413      	add	r3, r2
 8012b2a:	429c      	cmp	r4, r3
 8012b2c:	dd5e      	ble.n	8012bec <create_DijkstraMap+0x1474>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012b2e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b32:	f103 0302 	add.w	r3, r3, #2
 8012b36:	881a      	ldrh	r2, [r3, #0]
 8012b38:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b3c:	f103 0304 	add.w	r3, r3, #4
 8012b40:	8819      	ldrh	r1, [r3, #0]
 8012b42:	4845      	ldr	r0, [pc, #276]	; (8012c58 <create_DijkstraMap+0x14e0>)
 8012b44:	4613      	mov	r3, r2
 8012b46:	011b      	lsls	r3, r3, #4
 8012b48:	1a9b      	subs	r3, r3, r2
 8012b4a:	440b      	add	r3, r1
 8012b4c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012b50:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b54:	f103 0314 	add.w	r3, r3, #20
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b5e:	f102 0204 	add.w	r2, r2, #4
 8012b62:	8812      	ldrh	r2, [r2, #0]
 8012b64:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012b68:	f101 0102 	add.w	r1, r1, #2
 8012b6c:	8809      	ldrh	r1, [r1, #0]
 8012b6e:	4403      	add	r3, r0
 8012b70:	b29c      	uxth	r4, r3
 8012b72:	4839      	ldr	r0, [pc, #228]	; (8012c58 <create_DijkstraMap+0x14e0>)
 8012b74:	4613      	mov	r3, r2
 8012b76:	011b      	lsls	r3, r3, #4
 8012b78:	1a9b      	subs	r3, r3, r2
 8012b7a:	440b      	add	r3, r1
 8012b7c:	33f0      	adds	r3, #240	; 0xf0
 8012b7e:	4622      	mov	r2, r4
 8012b80:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012b84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b88:	f103 0304 	add.w	r3, r3, #4
 8012b8c:	881a      	ldrh	r2, [r3, #0]
 8012b8e:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012b92:	f103 031c 	add.w	r3, r3, #28
 8012b96:	4611      	mov	r1, r2
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f001 fd19 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012b9e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ba2:	f103 0302 	add.w	r3, r3, #2
 8012ba6:	881a      	ldrh	r2, [r3, #0]
 8012ba8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012bac:	f103 031c 	add.w	r3, r3, #28
 8012bb0:	4611      	mov	r1, r2
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f001 fd0c 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012bb8:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012bbc:	3b1c      	subs	r3, #28
 8012bbe:	2100      	movs	r1, #0
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f001 fd05 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012bc6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012bca:	3b1c      	subs	r3, #28
 8012bcc:	2107      	movs	r1, #7
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f001 fcfe 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012bd4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bd8:	f103 0312 	add.w	r3, r3, #18
 8012bdc:	881a      	ldrh	r2, [r3, #0]
 8012bde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012be2:	3b1c      	subs	r3, #28
 8012be4:	4611      	mov	r1, r2
 8012be6:	4618      	mov	r0, r3
 8012be8:	f001 fcf2 	bl	80145d0 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8012bec:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012bf0:	f103 031e 	add.w	r3, r3, #30
 8012bf4:	881b      	ldrh	r3, [r3, #0]
 8012bf6:	2b01      	cmp	r3, #1
 8012bf8:	d130      	bne.n	8012c5c <create_DijkstraMap+0x14e4>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012bfa:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012bfe:	f103 031c 	add.w	r3, r3, #28
 8012c02:	881b      	ldrh	r3, [r3, #0]
 8012c04:	3301      	adds	r3, #1
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c0c:	f102 0212 	add.w	r2, r2, #18
 8012c10:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012c12:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c16:	f103 0312 	add.w	r3, r3, #18
 8012c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c1e:	2b05      	cmp	r3, #5
 8012c20:	dd05      	ble.n	8012c2e <create_DijkstraMap+0x14b6>
 8012c22:	2305      	movs	r3, #5
 8012c24:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c28:	f102 0212 	add.w	r2, r2, #18
 8012c2c:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012c2e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c32:	f103 0312 	add.w	r3, r3, #18
 8012c36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c3a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012c3e:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012c42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012c46:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c4a:	f102 0214 	add.w	r2, r2, #20
 8012c4e:	8013      	strh	r3, [r2, #0]
 8012c50:	e014      	b.n	8012c7c <create_DijkstraMap+0x1504>
 8012c52:	bf00      	nop
 8012c54:	20000c3c 	.word	0x20000c3c
 8012c58:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012c5c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012c60:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012c64:	881b      	ldrh	r3, [r3, #0]
 8012c66:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c6a:	f102 0214 	add.w	r2, r2, #20
 8012c6e:	8013      	strh	r3, [r2, #0]
 8012c70:	2300      	movs	r3, #0
 8012c72:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c76:	f102 0212 	add.w	r2, r2, #18
 8012c7a:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012c7c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c80:	f103 0302 	add.w	r3, r3, #2
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	4a6f      	ldr	r2, [pc, #444]	; (8012e44 <create_DijkstraMap+0x16cc>)
 8012c88:	330c      	adds	r3, #12
 8012c8a:	005b      	lsls	r3, r3, #1
 8012c8c:	4413      	add	r3, r2
 8012c8e:	88db      	ldrh	r3, [r3, #6]
 8012c90:	461a      	mov	r2, r3
 8012c92:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c96:	f103 0304 	add.w	r3, r3, #4
 8012c9a:	881b      	ldrh	r3, [r3, #0]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	fa42 f303 	asr.w	r3, r2, r3
 8012ca2:	f003 0301 	and.w	r3, r3, #1
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f040 8091 	bne.w	8012dce <create_DijkstraMap+0x1656>
 8012cac:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cb0:	f103 0304 	add.w	r3, r3, #4
 8012cb4:	881b      	ldrh	r3, [r3, #0]
 8012cb6:	1c5a      	adds	r2, r3, #1
 8012cb8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cbc:	f103 0302 	add.w	r3, r3, #2
 8012cc0:	8819      	ldrh	r1, [r3, #0]
 8012cc2:	4861      	ldr	r0, [pc, #388]	; (8012e48 <create_DijkstraMap+0x16d0>)
 8012cc4:	4613      	mov	r3, r2
 8012cc6:	011b      	lsls	r3, r3, #4
 8012cc8:	1a9b      	subs	r3, r3, r2
 8012cca:	440b      	add	r3, r1
 8012ccc:	33f0      	adds	r3, #240	; 0xf0
 8012cce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012cd2:	461c      	mov	r4, r3
 8012cd4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cd8:	f103 0302 	add.w	r3, r3, #2
 8012cdc:	881a      	ldrh	r2, [r3, #0]
 8012cde:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ce2:	f103 0304 	add.w	r3, r3, #4
 8012ce6:	8819      	ldrh	r1, [r3, #0]
 8012ce8:	4857      	ldr	r0, [pc, #348]	; (8012e48 <create_DijkstraMap+0x16d0>)
 8012cea:	4613      	mov	r3, r2
 8012cec:	011b      	lsls	r3, r3, #4
 8012cee:	1a9b      	subs	r3, r3, r2
 8012cf0:	440b      	add	r3, r1
 8012cf2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cfc:	f103 0314 	add.w	r3, r3, #20
 8012d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d04:	4413      	add	r3, r2
 8012d06:	429c      	cmp	r4, r3
 8012d08:	dd61      	ble.n	8012dce <create_DijkstraMap+0x1656>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012d0a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d0e:	f103 0302 	add.w	r3, r3, #2
 8012d12:	881a      	ldrh	r2, [r3, #0]
 8012d14:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d18:	f103 0304 	add.w	r3, r3, #4
 8012d1c:	8819      	ldrh	r1, [r3, #0]
 8012d1e:	484a      	ldr	r0, [pc, #296]	; (8012e48 <create_DijkstraMap+0x16d0>)
 8012d20:	4613      	mov	r3, r2
 8012d22:	011b      	lsls	r3, r3, #4
 8012d24:	1a9b      	subs	r3, r3, r2
 8012d26:	440b      	add	r3, r1
 8012d28:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012d2c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d30:	f103 0314 	add.w	r3, r3, #20
 8012d34:	881b      	ldrh	r3, [r3, #0]
 8012d36:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d3a:	f102 0204 	add.w	r2, r2, #4
 8012d3e:	8812      	ldrh	r2, [r2, #0]
 8012d40:	3201      	adds	r2, #1
 8012d42:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012d46:	f101 0102 	add.w	r1, r1, #2
 8012d4a:	8809      	ldrh	r1, [r1, #0]
 8012d4c:	4403      	add	r3, r0
 8012d4e:	b29c      	uxth	r4, r3
 8012d50:	483d      	ldr	r0, [pc, #244]	; (8012e48 <create_DijkstraMap+0x16d0>)
 8012d52:	4613      	mov	r3, r2
 8012d54:	011b      	lsls	r3, r3, #4
 8012d56:	1a9b      	subs	r3, r3, r2
 8012d58:	440b      	add	r3, r1
 8012d5a:	33f0      	adds	r3, #240	; 0xf0
 8012d5c:	4622      	mov	r2, r4
 8012d5e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012d62:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d66:	f103 0304 	add.w	r3, r3, #4
 8012d6a:	881b      	ldrh	r3, [r3, #0]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	b29a      	uxth	r2, r3
 8012d70:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012d74:	f103 031c 	add.w	r3, r3, #28
 8012d78:	4611      	mov	r1, r2
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f001 fc28 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012d80:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d84:	f103 0302 	add.w	r3, r3, #2
 8012d88:	881a      	ldrh	r2, [r3, #0]
 8012d8a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012d8e:	f103 031c 	add.w	r3, r3, #28
 8012d92:	4611      	mov	r1, r2
 8012d94:	4618      	mov	r0, r3
 8012d96:	f001 fc1b 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012d9a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012d9e:	3b1c      	subs	r3, #28
 8012da0:	2100      	movs	r1, #0
 8012da2:	4618      	mov	r0, r3
 8012da4:	f001 fc14 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012da8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012dac:	3b1c      	subs	r3, #28
 8012dae:	2101      	movs	r1, #1
 8012db0:	4618      	mov	r0, r3
 8012db2:	f001 fc0d 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012db6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dba:	f103 0312 	add.w	r3, r3, #18
 8012dbe:	881a      	ldrh	r2, [r3, #0]
 8012dc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012dc4:	3b1c      	subs	r3, #28
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f001 fc01 	bl	80145d0 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012dce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dd2:	f103 0302 	add.w	r3, r3, #2
 8012dd6:	881b      	ldrh	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	f000 81e1 	beq.w	80131a0 <create_DijkstraMap+0x1a28>
						if(Direction==SLANT_SOUTH_WEST){
 8012dde:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012de2:	f103 031e 	add.w	r3, r3, #30
 8012de6:	881b      	ldrh	r3, [r3, #0]
 8012de8:	2b05      	cmp	r3, #5
 8012dea:	d12f      	bne.n	8012e4c <create_DijkstraMap+0x16d4>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012dec:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012df0:	f103 031c 	add.w	r3, r3, #28
 8012df4:	881b      	ldrh	r3, [r3, #0]
 8012df6:	3301      	adds	r3, #1
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012dfe:	f102 0212 	add.w	r2, r2, #18
 8012e02:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012e04:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e08:	f103 0312 	add.w	r3, r3, #18
 8012e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e10:	2b05      	cmp	r3, #5
 8012e12:	dd05      	ble.n	8012e20 <create_DijkstraMap+0x16a8>
 8012e14:	2305      	movs	r3, #5
 8012e16:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012e1a:	f102 0212 	add.w	r2, r2, #18
 8012e1e:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012e20:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e24:	f103 0312 	add.w	r3, r3, #18
 8012e28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e2c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012e30:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012e34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012e38:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012e3c:	f102 0214 	add.w	r2, r2, #20
 8012e40:	8013      	strh	r3, [r2, #0]
 8012e42:	e013      	b.n	8012e6c <create_DijkstraMap+0x16f4>
 8012e44:	20000c3c 	.word	0x20000c3c
 8012e48:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012e4c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012e50:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012e5a:	f102 0214 	add.w	r2, r2, #20
 8012e5e:	8013      	strh	r3, [r2, #0]
 8012e60:	2300      	movs	r3, #0
 8012e62:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012e66:	f102 0212 	add.w	r2, r2, #18
 8012e6a:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012e6c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e70:	f103 0302 	add.w	r3, r3, #2
 8012e74:	881b      	ldrh	r3, [r3, #0]
 8012e76:	3b01      	subs	r3, #1
 8012e78:	4ad3      	ldr	r2, [pc, #844]	; (80131c8 <create_DijkstraMap+0x1a50>)
 8012e7a:	330c      	adds	r3, #12
 8012e7c:	005b      	lsls	r3, r3, #1
 8012e7e:	4413      	add	r3, r2
 8012e80:	88db      	ldrh	r3, [r3, #6]
 8012e82:	461a      	mov	r2, r3
 8012e84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e88:	f103 0304 	add.w	r3, r3, #4
 8012e8c:	881b      	ldrh	r3, [r3, #0]
 8012e8e:	fa42 f303 	asr.w	r3, r2, r3
 8012e92:	f003 0301 	and.w	r3, r3, #1
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	f040 8091 	bne.w	8012fbe <create_DijkstraMap+0x1846>
 8012e9c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ea0:	f103 0304 	add.w	r3, r3, #4
 8012ea4:	881a      	ldrh	r2, [r3, #0]
 8012ea6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012eaa:	f103 0302 	add.w	r3, r3, #2
 8012eae:	881b      	ldrh	r3, [r3, #0]
 8012eb0:	1e59      	subs	r1, r3, #1
 8012eb2:	48c6      	ldr	r0, [pc, #792]	; (80131cc <create_DijkstraMap+0x1a54>)
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	011b      	lsls	r3, r3, #4
 8012eb8:	1a9b      	subs	r3, r3, r2
 8012eba:	440b      	add	r3, r1
 8012ebc:	33f0      	adds	r3, #240	; 0xf0
 8012ebe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012ec2:	461c      	mov	r4, r3
 8012ec4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ec8:	f103 0302 	add.w	r3, r3, #2
 8012ecc:	881a      	ldrh	r2, [r3, #0]
 8012ece:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ed2:	f103 0304 	add.w	r3, r3, #4
 8012ed6:	8819      	ldrh	r1, [r3, #0]
 8012ed8:	48bc      	ldr	r0, [pc, #752]	; (80131cc <create_DijkstraMap+0x1a54>)
 8012eda:	4613      	mov	r3, r2
 8012edc:	011b      	lsls	r3, r3, #4
 8012ede:	1a9b      	subs	r3, r3, r2
 8012ee0:	440b      	add	r3, r1
 8012ee2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012eec:	f103 0314 	add.w	r3, r3, #20
 8012ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	429c      	cmp	r4, r3
 8012ef8:	dd61      	ble.n	8012fbe <create_DijkstraMap+0x1846>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012efa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012efe:	f103 0302 	add.w	r3, r3, #2
 8012f02:	881a      	ldrh	r2, [r3, #0]
 8012f04:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f08:	f103 0304 	add.w	r3, r3, #4
 8012f0c:	8819      	ldrh	r1, [r3, #0]
 8012f0e:	48af      	ldr	r0, [pc, #700]	; (80131cc <create_DijkstraMap+0x1a54>)
 8012f10:	4613      	mov	r3, r2
 8012f12:	011b      	lsls	r3, r3, #4
 8012f14:	1a9b      	subs	r3, r3, r2
 8012f16:	440b      	add	r3, r1
 8012f18:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012f1c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f20:	f103 0314 	add.w	r3, r3, #20
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f2a:	f102 0204 	add.w	r2, r2, #4
 8012f2e:	8812      	ldrh	r2, [r2, #0]
 8012f30:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012f34:	f101 0102 	add.w	r1, r1, #2
 8012f38:	8809      	ldrh	r1, [r1, #0]
 8012f3a:	3901      	subs	r1, #1
 8012f3c:	4403      	add	r3, r0
 8012f3e:	b29c      	uxth	r4, r3
 8012f40:	48a2      	ldr	r0, [pc, #648]	; (80131cc <create_DijkstraMap+0x1a54>)
 8012f42:	4613      	mov	r3, r2
 8012f44:	011b      	lsls	r3, r3, #4
 8012f46:	1a9b      	subs	r3, r3, r2
 8012f48:	440b      	add	r3, r1
 8012f4a:	33f0      	adds	r3, #240	; 0xf0
 8012f4c:	4622      	mov	r2, r4
 8012f4e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012f52:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f56:	f103 0304 	add.w	r3, r3, #4
 8012f5a:	881a      	ldrh	r2, [r3, #0]
 8012f5c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012f60:	f103 031c 	add.w	r3, r3, #28
 8012f64:	4611      	mov	r1, r2
 8012f66:	4618      	mov	r0, r3
 8012f68:	f001 fb32 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012f6c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f70:	f103 0302 	add.w	r3, r3, #2
 8012f74:	881b      	ldrh	r3, [r3, #0]
 8012f76:	3b01      	subs	r3, #1
 8012f78:	b29a      	uxth	r2, r3
 8012f7a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012f7e:	f103 031c 	add.w	r3, r3, #28
 8012f82:	4611      	mov	r1, r2
 8012f84:	4618      	mov	r0, r3
 8012f86:	f001 fb23 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012f8a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012f8e:	3b1c      	subs	r3, #28
 8012f90:	2100      	movs	r1, #0
 8012f92:	4618      	mov	r0, r3
 8012f94:	f001 fb1c 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012f98:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012f9c:	3b1c      	subs	r3, #28
 8012f9e:	2105      	movs	r1, #5
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f001 fb15 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012fa6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012faa:	f103 0312 	add.w	r3, r3, #18
 8012fae:	881a      	ldrh	r2, [r3, #0]
 8012fb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012fb4:	3b1c      	subs	r3, #28
 8012fb6:	4611      	mov	r1, r2
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f001 fb09 	bl	80145d0 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012fbe:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012fc2:	f103 031e 	add.w	r3, r3, #30
 8012fc6:	881b      	ldrh	r3, [r3, #0]
 8012fc8:	2b03      	cmp	r3, #3
 8012fca:	d12b      	bne.n	8013024 <create_DijkstraMap+0x18ac>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012fcc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012fd0:	f103 031c 	add.w	r3, r3, #28
 8012fd4:	881b      	ldrh	r3, [r3, #0]
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012fde:	f102 0212 	add.w	r2, r2, #18
 8012fe2:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012fe4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012fe8:	f103 0312 	add.w	r3, r3, #18
 8012fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ff0:	2b05      	cmp	r3, #5
 8012ff2:	dd05      	ble.n	8013000 <create_DijkstraMap+0x1888>
 8012ff4:	2305      	movs	r3, #5
 8012ff6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012ffa:	f102 0212 	add.w	r2, r2, #18
 8012ffe:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013000:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013004:	f103 0312 	add.w	r3, r3, #18
 8013008:	f9b3 2000 	ldrsh.w	r2, [r3]
 801300c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8013010:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8013014:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013018:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801301c:	f102 0214 	add.w	r2, r2, #20
 8013020:	8013      	strh	r3, [r2, #0]
 8013022:	e00f      	b.n	8013044 <create_DijkstraMap+0x18cc>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013024:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8013028:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8013032:	f102 0214 	add.w	r2, r2, #20
 8013036:	8013      	strh	r3, [r2, #0]
 8013038:	2300      	movs	r3, #0
 801303a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801303e:	f102 0212 	add.w	r2, r2, #18
 8013042:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8013044:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013048:	f103 0302 	add.w	r3, r3, #2
 801304c:	881b      	ldrh	r3, [r3, #0]
 801304e:	3b01      	subs	r3, #1
 8013050:	4a5d      	ldr	r2, [pc, #372]	; (80131c8 <create_DijkstraMap+0x1a50>)
 8013052:	330c      	adds	r3, #12
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	4413      	add	r3, r2
 8013058:	88db      	ldrh	r3, [r3, #6]
 801305a:	461a      	mov	r2, r3
 801305c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013060:	f103 0304 	add.w	r3, r3, #4
 8013064:	881b      	ldrh	r3, [r3, #0]
 8013066:	3301      	adds	r3, #1
 8013068:	fa42 f303 	asr.w	r3, r2, r3
 801306c:	f003 0301 	and.w	r3, r3, #1
 8013070:	2b00      	cmp	r3, #0
 8013072:	f040 8095 	bne.w	80131a0 <create_DijkstraMap+0x1a28>
 8013076:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801307a:	f103 0304 	add.w	r3, r3, #4
 801307e:	881b      	ldrh	r3, [r3, #0]
 8013080:	1c5a      	adds	r2, r3, #1
 8013082:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013086:	f103 0302 	add.w	r3, r3, #2
 801308a:	881b      	ldrh	r3, [r3, #0]
 801308c:	1e59      	subs	r1, r3, #1
 801308e:	484f      	ldr	r0, [pc, #316]	; (80131cc <create_DijkstraMap+0x1a54>)
 8013090:	4613      	mov	r3, r2
 8013092:	011b      	lsls	r3, r3, #4
 8013094:	1a9b      	subs	r3, r3, r2
 8013096:	440b      	add	r3, r1
 8013098:	33f0      	adds	r3, #240	; 0xf0
 801309a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801309e:	461c      	mov	r4, r3
 80130a0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130a4:	f103 0302 	add.w	r3, r3, #2
 80130a8:	881a      	ldrh	r2, [r3, #0]
 80130aa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130ae:	f103 0304 	add.w	r3, r3, #4
 80130b2:	8819      	ldrh	r1, [r3, #0]
 80130b4:	4845      	ldr	r0, [pc, #276]	; (80131cc <create_DijkstraMap+0x1a54>)
 80130b6:	4613      	mov	r3, r2
 80130b8:	011b      	lsls	r3, r3, #4
 80130ba:	1a9b      	subs	r3, r3, r2
 80130bc:	440b      	add	r3, r1
 80130be:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80130c2:	461a      	mov	r2, r3
 80130c4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130c8:	f103 0314 	add.w	r3, r3, #20
 80130cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130d0:	4413      	add	r3, r2
 80130d2:	429c      	cmp	r4, r3
 80130d4:	dd64      	ble.n	80131a0 <create_DijkstraMap+0x1a28>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80130d6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130da:	f103 0302 	add.w	r3, r3, #2
 80130de:	881a      	ldrh	r2, [r3, #0]
 80130e0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130e4:	f103 0304 	add.w	r3, r3, #4
 80130e8:	8819      	ldrh	r1, [r3, #0]
 80130ea:	4838      	ldr	r0, [pc, #224]	; (80131cc <create_DijkstraMap+0x1a54>)
 80130ec:	4613      	mov	r3, r2
 80130ee:	011b      	lsls	r3, r3, #4
 80130f0:	1a9b      	subs	r3, r3, r2
 80130f2:	440b      	add	r3, r1
 80130f4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80130f8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130fc:	f103 0314 	add.w	r3, r3, #20
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8013106:	f102 0204 	add.w	r2, r2, #4
 801310a:	8812      	ldrh	r2, [r2, #0]
 801310c:	3201      	adds	r2, #1
 801310e:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8013112:	f101 0102 	add.w	r1, r1, #2
 8013116:	8809      	ldrh	r1, [r1, #0]
 8013118:	3901      	subs	r1, #1
 801311a:	4403      	add	r3, r0
 801311c:	b29c      	uxth	r4, r3
 801311e:	482b      	ldr	r0, [pc, #172]	; (80131cc <create_DijkstraMap+0x1a54>)
 8013120:	4613      	mov	r3, r2
 8013122:	011b      	lsls	r3, r3, #4
 8013124:	1a9b      	subs	r3, r3, r2
 8013126:	440b      	add	r3, r1
 8013128:	33f0      	adds	r3, #240	; 0xf0
 801312a:	4622      	mov	r2, r4
 801312c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8013130:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013134:	f103 0304 	add.w	r3, r3, #4
 8013138:	881b      	ldrh	r3, [r3, #0]
 801313a:	3301      	adds	r3, #1
 801313c:	b29a      	uxth	r2, r3
 801313e:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013142:	f103 031c 	add.w	r3, r3, #28
 8013146:	4611      	mov	r1, r2
 8013148:	4618      	mov	r0, r3
 801314a:	f001 fa41 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 801314e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013152:	f103 0302 	add.w	r3, r3, #2
 8013156:	881b      	ldrh	r3, [r3, #0]
 8013158:	3b01      	subs	r3, #1
 801315a:	b29a      	uxth	r2, r3
 801315c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8013160:	f103 031c 	add.w	r3, r3, #28
 8013164:	4611      	mov	r1, r2
 8013166:	4618      	mov	r0, r3
 8013168:	f001 fa32 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 801316c:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8013170:	3b1c      	subs	r3, #28
 8013172:	2100      	movs	r1, #0
 8013174:	4618      	mov	r0, r3
 8013176:	f001 fa2b 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 801317a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801317e:	3b1c      	subs	r3, #28
 8013180:	2103      	movs	r1, #3
 8013182:	4618      	mov	r0, r3
 8013184:	f001 fa24 	bl	80145d0 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013188:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801318c:	f103 0312 	add.w	r3, r3, #18
 8013190:	881a      	ldrh	r2, [r3, #0]
 8013192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013196:	3b1c      	subs	r3, #28
 8013198:	4611      	mov	r1, r2
 801319a:	4618      	mov	r0, r3
 801319c:	f001 fa18 	bl	80145d0 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 80131a0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80131a4:	f103 0306 	add.w	r3, r3, #6
 80131a8:	881b      	ldrh	r3, [r3, #0]
 80131aa:	3301      	adds	r3, #1
 80131ac:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80131b0:	f102 0206 	add.w	r2, r2, #6
 80131b4:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 80131b6:	f7fe bc21 	b.w	80119fc <create_DijkstraMap+0x284>

		}



}
 80131ba:	bf00      	nop
 80131bc:	f507 57dd 	add.w	r7, r7, #7072	; 0x1ba0
 80131c0:	371c      	adds	r7, #28
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd90      	pop	{r4, r7, pc}
 80131c6:	bf00      	nop
 80131c8:	20000c3c 	.word	0x20000c3c
 80131cc:	20000f30 	.word	0x20000f30

080131d0 <route_Dijkstra>:





void route_Dijkstra(void){
 80131d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131d2:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 80131d6:	b08d      	sub	sp, #52	; 0x34
 80131d8:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 80131da:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80131de:	f103 0314 	add.w	r3, r3, #20
 80131e2:	4618      	mov	r0, r3
 80131e4:	f001 f9e4 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_y);
 80131e8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80131ec:	f103 0314 	add.w	r3, r3, #20
 80131f0:	4618      	mov	r0, r3
 80131f2:	f001 f9dd 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_matrix);
 80131f6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80131fa:	3b0c      	subs	r3, #12
 80131fc:	4618      	mov	r0, r3
 80131fe:	f001 f9d7 	bl	80145b0 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8013202:	48c8      	ldr	r0, [pc, #800]	; (8013524 <route_Dijkstra+0x354>)
 8013204:	f001 f9d4 	bl	80145b0 <initStack_walk>
	initStack_walk(&g_Goal_y);
 8013208:	48c7      	ldr	r0, [pc, #796]	; (8013528 <route_Dijkstra+0x358>)
 801320a:	f001 f9d1 	bl	80145b0 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 801320e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013212:	f103 0314 	add.w	r3, r3, #20
 8013216:	2100      	movs	r1, #0
 8013218:	4618      	mov	r0, r3
 801321a:	f001 f9d9 	bl	80145d0 <pushStack_walk>
 801321e:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013222:	f103 0314 	add.w	r3, r3, #20
 8013226:	2100      	movs	r1, #0
 8013228:	4618      	mov	r0, r3
 801322a:	f001 f9d1 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 801322e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013232:	3b0c      	subs	r3, #12
 8013234:	2100      	movs	r1, #0
 8013236:	4618      	mov	r0, r3
 8013238:	f001 f9ca 	bl	80145d0 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 801323c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013240:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013244:	2200      	movs	r2, #0
 8013246:	601a      	str	r2, [r3, #0]
	int y = 0;
 8013248:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801324c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013250:	2200      	movs	r2, #0
 8013252:	601a      	str	r2, [r3, #0]
	int direction = 1;
 8013254:	2301      	movs	r3, #1
 8013256:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 801325a:	f102 021c 	add.w	r2, r2, #28
 801325e:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8013260:	f107 0120 	add.w	r1, r7, #32
 8013264:	3920      	subs	r1, #32
 8013266:	f107 0320 	add.w	r3, r7, #32
 801326a:	3b1c      	subs	r3, #28
 801326c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013270:	f102 021c 	add.w	r2, r2, #28
 8013274:	6812      	ldr	r2, [r2, #0]
 8013276:	4618      	mov	r0, r3
 8013278:	f7fa fe9c 	bl	800dfb4 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 801327c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013280:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	2b01      	cmp	r3, #1
 8013288:	d006      	beq.n	8013298 <route_Dijkstra+0xc8>
 801328a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801328e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b02      	cmp	r3, #2
 8013296:	d10f      	bne.n	80132b8 <route_Dijkstra+0xe8>
 8013298:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801329c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f000 8355 	beq.w	8013952 <route_Dijkstra+0x782>
 80132a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2b01      	cmp	r3, #1
 80132b4:	f000 834d 	beq.w	8013952 <route_Dijkstra+0x782>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 80132b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80132c0:	6818      	ldr	r0, [r3, #0]
 80132c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80132ca:	6819      	ldr	r1, [r3, #0]
 80132cc:	f107 0220 	add.w	r2, r7, #32
 80132d0:	3a15      	subs	r2, #21
 80132d2:	f107 0320 	add.w	r3, r7, #32
 80132d6:	3b17      	subs	r3, #23
 80132d8:	9301      	str	r3, [sp, #4]
 80132da:	f107 0320 	add.w	r3, r7, #32
 80132de:	3b16      	subs	r3, #22
 80132e0:	9300      	str	r3, [sp, #0]
 80132e2:	4613      	mov	r3, r2
 80132e4:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80132e8:	f102 021c 	add.w	r2, r2, #28
 80132ec:	6812      	ldr	r2, [r2, #0]
 80132ee:	f7fd fe27 	bl	8010f40 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 80132f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80132fa:	681c      	ldr	r4, [r3, #0]
 80132fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013300:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013304:	681d      	ldr	r5, [r3, #0]
 8013306:	f107 0320 	add.w	r3, r7, #32
 801330a:	3b14      	subs	r3, #20
 801330c:	f107 0220 	add.w	r2, r7, #32
 8013310:	3a12      	subs	r2, #18
 8013312:	f107 0120 	add.w	r1, r7, #32
 8013316:	3910      	subs	r1, #16
 8013318:	f107 0020 	add.w	r0, r7, #32
 801331c:	380e      	subs	r0, #14
 801331e:	f507 5604 	add.w	r6, r7, #8448	; 0x2100
 8013322:	f106 061c 	add.w	r6, r6, #28
 8013326:	6836      	ldr	r6, [r6, #0]
 8013328:	9602      	str	r6, [sp, #8]
 801332a:	9501      	str	r5, [sp, #4]
 801332c:	9400      	str	r4, [sp, #0]
 801332e:	f7fe f989 	bl	8011644 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013332:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013336:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d006      	beq.n	801334e <route_Dijkstra+0x17e>
 8013340:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013344:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801334c:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 801334e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013352:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d006      	beq.n	801336a <route_Dijkstra+0x19a>
 801335c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013360:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013368:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 801336a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801336e:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d006      	beq.n	8013386 <route_Dijkstra+0x1b6>
 8013378:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801337c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013384:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8013386:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801338a:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 801338e:	881b      	ldrh	r3, [r3, #0]
 8013390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013394:	4293      	cmp	r3, r2
 8013396:	d11b      	bne.n	80133d0 <route_Dijkstra+0x200>
 8013398:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801339c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80133a0:	881b      	ldrh	r3, [r3, #0]
 80133a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d112      	bne.n	80133d0 <route_Dijkstra+0x200>
 80133aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80133b2:	881b      	ldrh	r3, [r3, #0]
 80133b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133b8:	4293      	cmp	r3, r2
 80133ba:	d109      	bne.n	80133d0 <route_Dijkstra+0x200>
 80133bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133c0:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80133c4:	881b      	ldrh	r3, [r3, #0]
 80133c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133ca:	4293      	cmp	r3, r2
 80133cc:	f000 82c0 	beq.w	8013950 <route_Dijkstra+0x780>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80133d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133d4:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80133d8:	881a      	ldrh	r2, [r3, #0]
 80133da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80133e2:	881b      	ldrh	r3, [r3, #0]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	f200 80c7 	bhi.w	8013578 <route_Dijkstra+0x3a8>
 80133ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133ee:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80133f2:	881a      	ldrh	r2, [r3, #0]
 80133f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80133fc:	881b      	ldrh	r3, [r3, #0]
 80133fe:	429a      	cmp	r2, r3
 8013400:	f200 80ba 	bhi.w	8013578 <route_Dijkstra+0x3a8>
 8013404:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013408:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 801340c:	881a      	ldrh	r2, [r3, #0]
 801340e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013412:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8013416:	881b      	ldrh	r3, [r3, #0]
 8013418:	429a      	cmp	r2, r3
 801341a:	f200 80ad 	bhi.w	8013578 <route_Dijkstra+0x3a8>
			// 直進
			switch (direction) {		//
 801341e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013422:	f103 031c 	add.w	r3, r3, #28
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	3b01      	subs	r3, #1
 801342a:	2b03      	cmp	r3, #3
 801342c:	f200 80a5 	bhi.w	801357a <route_Dijkstra+0x3aa>
 8013430:	a201      	add	r2, pc, #4	; (adr r2, 8013438 <route_Dijkstra+0x268>)
 8013432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013436:	bf00      	nop
 8013438:	08013449 	.word	0x08013449
 801343c:	08013491 	.word	0x08013491
 8013440:	080134d9 	.word	0x080134d9
 8013444:	0801352d 	.word	0x0801352d
			case 1:
				pushStack_walk(&stack_x,x);
 8013448:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801344c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	b29a      	uxth	r2, r3
 8013454:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013458:	f103 0314 	add.w	r3, r3, #20
 801345c:	4611      	mov	r1, r2
 801345e:	4618      	mov	r0, r3
 8013460:	f001 f8b6 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013464:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013468:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	b29a      	uxth	r2, r3
 8013470:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013474:	f103 0314 	add.w	r3, r3, #20
 8013478:	4611      	mov	r1, r2
 801347a:	4618      	mov	r0, r3
 801347c:	f001 f8a8 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013480:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013484:	3b0c      	subs	r3, #12
 8013486:	2100      	movs	r1, #0
 8013488:	4618      	mov	r0, r3
 801348a:	f001 f8a1 	bl	80145d0 <pushStack_walk>
				break;
 801348e:	e074      	b.n	801357a <route_Dijkstra+0x3aa>
			case 2:
				pushStack_walk(&stack_x,x);
 8013490:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013494:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	b29a      	uxth	r2, r3
 801349c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80134a0:	f103 0314 	add.w	r3, r3, #20
 80134a4:	4611      	mov	r1, r2
 80134a6:	4618      	mov	r0, r3
 80134a8:	f001 f892 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80134ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80134bc:	f103 0314 	add.w	r3, r3, #20
 80134c0:	4611      	mov	r1, r2
 80134c2:	4618      	mov	r0, r3
 80134c4:	f001 f884 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80134c8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80134cc:	3b0c      	subs	r3, #12
 80134ce:	2101      	movs	r1, #1
 80134d0:	4618      	mov	r0, r3
 80134d2:	f001 f87d 	bl	80145d0 <pushStack_walk>
				break;
 80134d6:	e050      	b.n	801357a <route_Dijkstra+0x3aa>
			case 3:
				pushStack_walk(&stack_x,x);
 80134d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	b29a      	uxth	r2, r3
 80134e4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80134e8:	f103 0314 	add.w	r3, r3, #20
 80134ec:	4611      	mov	r1, r2
 80134ee:	4618      	mov	r0, r3
 80134f0:	f001 f86e 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80134f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	b29b      	uxth	r3, r3
 8013500:	3b01      	subs	r3, #1
 8013502:	b29a      	uxth	r2, r3
 8013504:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013508:	f103 0314 	add.w	r3, r3, #20
 801350c:	4611      	mov	r1, r2
 801350e:	4618      	mov	r0, r3
 8013510:	f001 f85e 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013514:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013518:	3b0c      	subs	r3, #12
 801351a:	2100      	movs	r1, #0
 801351c:	4618      	mov	r0, r3
 801351e:	f001 f857 	bl	80145d0 <pushStack_walk>
				break;
 8013522:	e02a      	b.n	801357a <route_Dijkstra+0x3aa>
 8013524:	200012f0 	.word	0x200012f0
 8013528:	20001870 	.word	0x20001870
			case 4:
				pushStack_walk(&stack_x,x-1);
 801352c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013530:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	b29b      	uxth	r3, r3
 8013538:	3b01      	subs	r3, #1
 801353a:	b29a      	uxth	r2, r3
 801353c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013540:	f103 0314 	add.w	r3, r3, #20
 8013544:	4611      	mov	r1, r2
 8013546:	4618      	mov	r0, r3
 8013548:	f001 f842 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801354c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013550:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	b29a      	uxth	r2, r3
 8013558:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801355c:	f103 0314 	add.w	r3, r3, #20
 8013560:	4611      	mov	r1, r2
 8013562:	4618      	mov	r0, r3
 8013564:	f001 f834 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013568:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801356c:	3b0c      	subs	r3, #12
 801356e:	2101      	movs	r1, #1
 8013570:	4618      	mov	r0, r3
 8013572:	f001 f82d 	bl	80145d0 <pushStack_walk>
				break;
 8013576:	e000      	b.n	801357a <route_Dijkstra+0x3aa>
			}

		}
 8013578:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801357a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801357e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013582:	881a      	ldrh	r2, [r3, #0]
 8013584:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013588:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 801358c:	881b      	ldrh	r3, [r3, #0]
 801358e:	429a      	cmp	r2, r3
 8013590:	f080 80cd 	bcs.w	801372e <route_Dijkstra+0x55e>
 8013594:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013598:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801359c:	881a      	ldrh	r2, [r3, #0]
 801359e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80135a6:	881b      	ldrh	r3, [r3, #0]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	f200 80c0 	bhi.w	801372e <route_Dijkstra+0x55e>
 80135ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80135b6:	881a      	ldrh	r2, [r3, #0]
 80135b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135bc:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80135c0:	881b      	ldrh	r3, [r3, #0]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	f200 80b3 	bhi.w	801372e <route_Dijkstra+0x55e>
			// 右旋回
			switch (direction) {		//
 80135c8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80135cc:	f103 031c 	add.w	r3, r3, #28
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	3b01      	subs	r3, #1
 80135d4:	2b03      	cmp	r3, #3
 80135d6:	f200 809f 	bhi.w	8013718 <route_Dijkstra+0x548>
 80135da:	a201      	add	r2, pc, #4	; (adr r2, 80135e0 <route_Dijkstra+0x410>)
 80135dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e0:	080135f1 	.word	0x080135f1
 80135e4:	08013639 	.word	0x08013639
 80135e8:	08013685 	.word	0x08013685
 80135ec:	080136d1 	.word	0x080136d1
			case 1:
				pushStack_walk(&stack_x,x);
 80135f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013600:	f103 0314 	add.w	r3, r3, #20
 8013604:	4611      	mov	r1, r2
 8013606:	4618      	mov	r0, r3
 8013608:	f000 ffe2 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801360c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013610:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	b29a      	uxth	r2, r3
 8013618:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801361c:	f103 0314 	add.w	r3, r3, #20
 8013620:	4611      	mov	r1, r2
 8013622:	4618      	mov	r0, r3
 8013624:	f000 ffd4 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013628:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801362c:	3b0c      	subs	r3, #12
 801362e:	2101      	movs	r1, #1
 8013630:	4618      	mov	r0, r3
 8013632:	f000 ffcd 	bl	80145d0 <pushStack_walk>
				break;
 8013636:	e06f      	b.n	8013718 <route_Dijkstra+0x548>
			case 2:
				pushStack_walk(&stack_x,x);
 8013638:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801363c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	b29a      	uxth	r2, r3
 8013644:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013648:	f103 0314 	add.w	r3, r3, #20
 801364c:	4611      	mov	r1, r2
 801364e:	4618      	mov	r0, r3
 8013650:	f000 ffbe 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013654:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013658:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	b29b      	uxth	r3, r3
 8013660:	3b01      	subs	r3, #1
 8013662:	b29a      	uxth	r2, r3
 8013664:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013668:	f103 0314 	add.w	r3, r3, #20
 801366c:	4611      	mov	r1, r2
 801366e:	4618      	mov	r0, r3
 8013670:	f000 ffae 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013674:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013678:	3b0c      	subs	r3, #12
 801367a:	2100      	movs	r1, #0
 801367c:	4618      	mov	r0, r3
 801367e:	f000 ffa7 	bl	80145d0 <pushStack_walk>
				break;
 8013682:	e049      	b.n	8013718 <route_Dijkstra+0x548>
			case 3:
				pushStack_walk(&stack_x,x-1);
 8013684:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013688:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	b29b      	uxth	r3, r3
 8013690:	3b01      	subs	r3, #1
 8013692:	b29a      	uxth	r2, r3
 8013694:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013698:	f103 0314 	add.w	r3, r3, #20
 801369c:	4611      	mov	r1, r2
 801369e:	4618      	mov	r0, r3
 80136a0:	f000 ff96 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80136a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	b29a      	uxth	r2, r3
 80136b0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80136b4:	f103 0314 	add.w	r3, r3, #20
 80136b8:	4611      	mov	r1, r2
 80136ba:	4618      	mov	r0, r3
 80136bc:	f000 ff88 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80136c0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80136c4:	3b0c      	subs	r3, #12
 80136c6:	2101      	movs	r1, #1
 80136c8:	4618      	mov	r0, r3
 80136ca:	f000 ff81 	bl	80145d0 <pushStack_walk>
				break;
 80136ce:	e023      	b.n	8013718 <route_Dijkstra+0x548>
			case 4:
				pushStack_walk(&stack_x,x);
 80136d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	b29a      	uxth	r2, r3
 80136dc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80136e0:	f103 0314 	add.w	r3, r3, #20
 80136e4:	4611      	mov	r1, r2
 80136e6:	4618      	mov	r0, r3
 80136e8:	f000 ff72 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80136ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	b29a      	uxth	r2, r3
 80136f8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80136fc:	f103 0314 	add.w	r3, r3, #20
 8013700:	4611      	mov	r1, r2
 8013702:	4618      	mov	r0, r3
 8013704:	f000 ff64 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013708:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801370c:	3b0c      	subs	r3, #12
 801370e:	2100      	movs	r1, #0
 8013710:	4618      	mov	r0, r3
 8013712:	f000 ff5d 	bl	80145d0 <pushStack_walk>
				break;
 8013716:	bf00      	nop
			}
			direction++;
 8013718:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801371c:	f103 031c 	add.w	r3, r3, #28
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	3301      	adds	r3, #1
 8013724:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013728:	f102 021c 	add.w	r2, r2, #28
 801372c:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801372e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013736:	881a      	ldrh	r2, [r3, #0]
 8013738:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801373c:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013740:	881b      	ldrh	r3, [r3, #0]
 8013742:	429a      	cmp	r2, r3
 8013744:	f080 80cd 	bcs.w	80138e2 <route_Dijkstra+0x712>
 8013748:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801374c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013750:	881a      	ldrh	r2, [r3, #0]
 8013752:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013756:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801375a:	881b      	ldrh	r3, [r3, #0]
 801375c:	429a      	cmp	r2, r3
 801375e:	f080 80c0 	bcs.w	80138e2 <route_Dijkstra+0x712>
 8013762:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013766:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801376a:	881a      	ldrh	r2, [r3, #0]
 801376c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013770:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	429a      	cmp	r2, r3
 8013778:	f200 80b3 	bhi.w	80138e2 <route_Dijkstra+0x712>
			// 左旋回
			switch (direction) {		//
 801377c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013780:	f103 031c 	add.w	r3, r3, #28
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	3b01      	subs	r3, #1
 8013788:	2b03      	cmp	r3, #3
 801378a:	f200 809f 	bhi.w	80138cc <route_Dijkstra+0x6fc>
 801378e:	a201      	add	r2, pc, #4	; (adr r2, 8013794 <route_Dijkstra+0x5c4>)
 8013790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013794:	080137a5 	.word	0x080137a5
 8013798:	080137f1 	.word	0x080137f1
 801379c:	08013839 	.word	0x08013839
 80137a0:	08013881 	.word	0x08013881
			case 1:
				pushStack_walk(&stack_x,x-1);
 80137a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80137a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	3b01      	subs	r3, #1
 80137b2:	b29a      	uxth	r2, r3
 80137b4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80137b8:	f103 0314 	add.w	r3, r3, #20
 80137bc:	4611      	mov	r1, r2
 80137be:	4618      	mov	r0, r3
 80137c0:	f000 ff06 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80137c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80137c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	b29a      	uxth	r2, r3
 80137d0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80137d4:	f103 0314 	add.w	r3, r3, #20
 80137d8:	4611      	mov	r1, r2
 80137da:	4618      	mov	r0, r3
 80137dc:	f000 fef8 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80137e0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80137e4:	3b0c      	subs	r3, #12
 80137e6:	2101      	movs	r1, #1
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 fef1 	bl	80145d0 <pushStack_walk>
				break;
 80137ee:	e06d      	b.n	80138cc <route_Dijkstra+0x6fc>
			case 2:
				pushStack_walk(&stack_x,x);
 80137f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80137f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013800:	f103 0314 	add.w	r3, r3, #20
 8013804:	4611      	mov	r1, r2
 8013806:	4618      	mov	r0, r3
 8013808:	f000 fee2 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801380c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013810:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	b29a      	uxth	r2, r3
 8013818:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801381c:	f103 0314 	add.w	r3, r3, #20
 8013820:	4611      	mov	r1, r2
 8013822:	4618      	mov	r0, r3
 8013824:	f000 fed4 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013828:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801382c:	3b0c      	subs	r3, #12
 801382e:	2100      	movs	r1, #0
 8013830:	4618      	mov	r0, r3
 8013832:	f000 fecd 	bl	80145d0 <pushStack_walk>
				break;
 8013836:	e049      	b.n	80138cc <route_Dijkstra+0x6fc>
			case 3:
				pushStack_walk(&stack_x,x);
 8013838:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801383c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	b29a      	uxth	r2, r3
 8013844:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013848:	f103 0314 	add.w	r3, r3, #20
 801384c:	4611      	mov	r1, r2
 801384e:	4618      	mov	r0, r3
 8013850:	f000 febe 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013854:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013858:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	b29a      	uxth	r2, r3
 8013860:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013864:	f103 0314 	add.w	r3, r3, #20
 8013868:	4611      	mov	r1, r2
 801386a:	4618      	mov	r0, r3
 801386c:	f000 feb0 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013870:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013874:	3b0c      	subs	r3, #12
 8013876:	2101      	movs	r1, #1
 8013878:	4618      	mov	r0, r3
 801387a:	f000 fea9 	bl	80145d0 <pushStack_walk>
				break;
 801387e:	e025      	b.n	80138cc <route_Dijkstra+0x6fc>
			case 4:
				pushStack_walk(&stack_x,x);
 8013880:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013884:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	b29a      	uxth	r2, r3
 801388c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013890:	f103 0314 	add.w	r3, r3, #20
 8013894:	4611      	mov	r1, r2
 8013896:	4618      	mov	r0, r3
 8013898:	f000 fe9a 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801389c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	3b01      	subs	r3, #1
 80138aa:	b29a      	uxth	r2, r3
 80138ac:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80138b0:	f103 0314 	add.w	r3, r3, #20
 80138b4:	4611      	mov	r1, r2
 80138b6:	4618      	mov	r0, r3
 80138b8:	f000 fe8a 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80138bc:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80138c0:	3b0c      	subs	r3, #12
 80138c2:	2100      	movs	r1, #0
 80138c4:	4618      	mov	r0, r3
 80138c6:	f000 fe83 	bl	80145d0 <pushStack_walk>
				break;
 80138ca:	bf00      	nop
			}
			direction--;
 80138cc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80138d0:	f103 031c 	add.w	r3, r3, #28
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	3b01      	subs	r3, #1
 80138d8:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80138dc:	f102 021c 	add.w	r2, r2, #28
 80138e0:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 80138e2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80138e6:	f103 031c 	add.w	r3, r3, #28
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2b05      	cmp	r3, #5
 80138ee:	d105      	bne.n	80138fc <route_Dijkstra+0x72c>
			direction = 1;
 80138f0:	2301      	movs	r3, #1
 80138f2:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80138f6:	f102 021c 	add.w	r2, r2, #28
 80138fa:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 80138fc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013900:	f103 031c 	add.w	r3, r3, #28
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	2b06      	cmp	r3, #6
 8013908:	d105      	bne.n	8013916 <route_Dijkstra+0x746>
			direction = 2;
 801390a:	2302      	movs	r3, #2
 801390c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013910:	f102 021c 	add.w	r2, r2, #28
 8013914:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 8013916:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801391a:	f103 031c 	add.w	r3, r3, #28
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d105      	bne.n	8013930 <route_Dijkstra+0x760>
			direction = 4;
 8013924:	2304      	movs	r3, #4
 8013926:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 801392a:	f102 021c 	add.w	r2, r2, #28
 801392e:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013930:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013934:	f103 031c 	add.w	r3, r3, #28
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393e:	f47f ac8f 	bne.w	8013260 <route_Dijkstra+0x90>
			direction = 3;
 8013942:	2303      	movs	r3, #3
 8013944:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013948:	f102 021c 	add.w	r2, r2, #28
 801394c:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 801394e:	e487      	b.n	8013260 <route_Dijkstra+0x90>
			break;
 8013950:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 8013952:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013956:	f103 0314 	add.w	r3, r3, #20
 801395a:	4618      	mov	r0, r3
 801395c:	f000 fe62 	bl	8014624 <popStack_walk>
 8013960:	4603      	mov	r3, r0
 8013962:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013966:	f102 021a 	add.w	r2, r2, #26
 801396a:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 801396c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013970:	f103 0314 	add.w	r3, r3, #20
 8013974:	4618      	mov	r0, r3
 8013976:	f000 fe55 	bl	8014624 <popStack_walk>
 801397a:	4603      	mov	r3, r0
 801397c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013980:	f102 0218 	add.w	r2, r2, #24
 8013984:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8013986:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801398a:	3b0c      	subs	r3, #12
 801398c:	4618      	mov	r0, r3
 801398e:	f000 fe49 	bl	8014624 <popStack_walk>
 8013992:	4603      	mov	r3, r0
 8013994:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013998:	f102 0216 	add.w	r2, r2, #22
 801399c:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801399e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139a2:	f103 031a 	add.w	r3, r3, #26
 80139a6:	881b      	ldrh	r3, [r3, #0]
 80139a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139ac:	4293      	cmp	r3, r2
 80139ae:	f000 80d5 	beq.w	8013b5c <route_Dijkstra+0x98c>
 80139b2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139b6:	f103 0318 	add.w	r3, r3, #24
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139c0:	4293      	cmp	r3, r2
 80139c2:	f000 80cb 	beq.w	8013b5c <route_Dijkstra+0x98c>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 80139c6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139ca:	f103 0316 	add.w	r3, r3, #22
 80139ce:	881b      	ldrh	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d15c      	bne.n	8013a8e <route_Dijkstra+0x8be>
 80139d4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139d8:	f103 0318 	add.w	r3, r3, #24
 80139dc:	881b      	ldrh	r3, [r3, #0]
 80139de:	4a62      	ldr	r2, [pc, #392]	; (8013b68 <route_Dijkstra+0x998>)
 80139e0:	332c      	adds	r3, #44	; 0x2c
 80139e2:	005b      	lsls	r3, r3, #1
 80139e4:	4413      	add	r3, r2
 80139e6:	885b      	ldrh	r3, [r3, #2]
 80139e8:	461a      	mov	r2, r3
 80139ea:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139ee:	f103 031a 	add.w	r3, r3, #26
 80139f2:	881b      	ldrh	r3, [r3, #0]
 80139f4:	fa42 f303 	asr.w	r3, r2, r3
 80139f8:	f003 0301 	and.w	r3, r3, #1
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d146      	bne.n	8013a8e <route_Dijkstra+0x8be>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 8013a00:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a04:	f103 031a 	add.w	r3, r3, #26
 8013a08:	881b      	ldrh	r3, [r3, #0]
 8013a0a:	011a      	lsls	r2, r3, #4
 8013a0c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a10:	f103 0318 	add.w	r3, r3, #24
 8013a14:	881b      	ldrh	r3, [r3, #0]
 8013a16:	4413      	add	r3, r2
 8013a18:	4a54      	ldr	r2, [pc, #336]	; (8013b6c <route_Dijkstra+0x99c>)
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[(Xcoordinate * 16) + Ycoordinate+1] = 0;
 8013a20:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a24:	f103 031a 	add.w	r3, r3, #26
 8013a28:	881b      	ldrh	r3, [r3, #0]
 8013a2a:	011a      	lsls	r2, r3, #4
 8013a2c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a30:	f103 0318 	add.w	r3, r3, #24
 8013a34:	881b      	ldrh	r3, [r3, #0]
 8013a36:	4413      	add	r3, r2
 8013a38:	3301      	adds	r3, #1
 8013a3a:	4a4c      	ldr	r2, [pc, #304]	; (8013b6c <route_Dijkstra+0x99c>)
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013a42:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a46:	f103 031a 	add.w	r3, r3, #26
 8013a4a:	881b      	ldrh	r3, [r3, #0]
 8013a4c:	4619      	mov	r1, r3
 8013a4e:	4848      	ldr	r0, [pc, #288]	; (8013b70 <route_Dijkstra+0x9a0>)
 8013a50:	f000 fdbe 	bl	80145d0 <pushStack_walk>
 8013a54:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a58:	f103 0318 	add.w	r3, r3, #24
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	4619      	mov	r1, r3
 8013a60:	4844      	ldr	r0, [pc, #272]	; (8013b74 <route_Dijkstra+0x9a4>)
 8013a62:	f000 fdb5 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013a66:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a6a:	f103 031a 	add.w	r3, r3, #26
 8013a6e:	881b      	ldrh	r3, [r3, #0]
 8013a70:	4619      	mov	r1, r3
 8013a72:	483f      	ldr	r0, [pc, #252]	; (8013b70 <route_Dijkstra+0x9a0>)
 8013a74:	f000 fdac 	bl	80145d0 <pushStack_walk>
 8013a78:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a7c:	f103 0318 	add.w	r3, r3, #24
 8013a80:	881b      	ldrh	r3, [r3, #0]
 8013a82:	3301      	adds	r3, #1
 8013a84:	b29b      	uxth	r3, r3
 8013a86:	4619      	mov	r1, r3
 8013a88:	483a      	ldr	r0, [pc, #232]	; (8013b74 <route_Dijkstra+0x9a4>)
 8013a8a:	f000 fda1 	bl	80145d0 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8013a8e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a92:	f103 0316 	add.w	r3, r3, #22
 8013a96:	881b      	ldrh	r3, [r3, #0]
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	f47f af5a 	bne.w	8013952 <route_Dijkstra+0x782>
 8013a9e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013aa2:	f103 031a 	add.w	r3, r3, #26
 8013aa6:	881b      	ldrh	r3, [r3, #0]
 8013aa8:	4a2f      	ldr	r2, [pc, #188]	; (8013b68 <route_Dijkstra+0x998>)
 8013aaa:	331c      	adds	r3, #28
 8013aac:	005b      	lsls	r3, r3, #1
 8013aae:	4413      	add	r3, r2
 8013ab0:	889b      	ldrh	r3, [r3, #4]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013ab8:	f103 0318 	add.w	r3, r3, #24
 8013abc:	881b      	ldrh	r3, [r3, #0]
 8013abe:	fa42 f303 	asr.w	r3, r2, r3
 8013ac2:	f003 0301 	and.w	r3, r3, #1
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f47f af43 	bne.w	8013952 <route_Dijkstra+0x782>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 8013acc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013ad0:	f103 031a 	add.w	r3, r3, #26
 8013ad4:	881b      	ldrh	r3, [r3, #0]
 8013ad6:	011a      	lsls	r2, r3, #4
 8013ad8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013adc:	f103 0318 	add.w	r3, r3, #24
 8013ae0:	881b      	ldrh	r3, [r3, #0]
 8013ae2:	4413      	add	r3, r2
 8013ae4:	4a21      	ldr	r2, [pc, #132]	; (8013b6c <route_Dijkstra+0x99c>)
 8013ae6:	2100      	movs	r1, #0
 8013ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[((Xcoordinate+1) * 16) + Ycoordinate] = 0;
 8013aec:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013af0:	f103 031a 	add.w	r3, r3, #26
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	3301      	adds	r3, #1
 8013af8:	011a      	lsls	r2, r3, #4
 8013afa:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013afe:	f103 0318 	add.w	r3, r3, #24
 8013b02:	881b      	ldrh	r3, [r3, #0]
 8013b04:	4413      	add	r3, r2
 8013b06:	4a19      	ldr	r2, [pc, #100]	; (8013b6c <route_Dijkstra+0x99c>)
 8013b08:	2100      	movs	r1, #0
 8013b0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b0e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b12:	f103 031a 	add.w	r3, r3, #26
 8013b16:	881b      	ldrh	r3, [r3, #0]
 8013b18:	4619      	mov	r1, r3
 8013b1a:	4815      	ldr	r0, [pc, #84]	; (8013b70 <route_Dijkstra+0x9a0>)
 8013b1c:	f000 fd58 	bl	80145d0 <pushStack_walk>
 8013b20:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b24:	f103 0318 	add.w	r3, r3, #24
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	4811      	ldr	r0, [pc, #68]	; (8013b74 <route_Dijkstra+0x9a4>)
 8013b2e:	f000 fd4f 	bl	80145d0 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b32:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b36:	f103 031a 	add.w	r3, r3, #26
 8013b3a:	881b      	ldrh	r3, [r3, #0]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	4619      	mov	r1, r3
 8013b42:	480b      	ldr	r0, [pc, #44]	; (8013b70 <route_Dijkstra+0x9a0>)
 8013b44:	f000 fd44 	bl	80145d0 <pushStack_walk>
 8013b48:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b4c:	f103 0318 	add.w	r3, r3, #24
 8013b50:	881b      	ldrh	r3, [r3, #0]
 8013b52:	4619      	mov	r1, r3
 8013b54:	4807      	ldr	r0, [pc, #28]	; (8013b74 <route_Dijkstra+0x9a4>)
 8013b56:	f000 fd3b 	bl	80145d0 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013b5a:	e6fa      	b.n	8013952 <route_Dijkstra+0x782>
			}
	}


}
 8013b5c:	bf00      	nop
 8013b5e:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 8013b62:	3724      	adds	r7, #36	; 0x24
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b68:	20000c3c 	.word	0x20000c3c
 8013b6c:	20000d30 	.word	0x20000d30
 8013b70:	200012f0 	.word	0x200012f0
 8013b74:	20001870 	.word	0x20001870

08013b78 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013b7e:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013b80:	2300      	movs	r3, #0
 8013b82:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013b86:	e00a      	b.n	8013b9e <create_StepCountMap_unknown+0x26>
 8013b88:	4a41      	ldr	r2, [pc, #260]	; (8013c90 <create_StepCountMap_unknown+0x118>)
 8013b8a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013b8e:	21ff      	movs	r1, #255	; 0xff
 8013b90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013b94:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013b98:	3301      	adds	r3, #1
 8013b9a:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013b9e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013ba2:	2bff      	cmp	r3, #255	; 0xff
 8013ba4:	ddf0      	ble.n	8013b88 <create_StepCountMap_unknown+0x10>

	initStack_walk(&stack_x);
 8013ba6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013baa:	4618      	mov	r0, r3
 8013bac:	f000 fd00 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_y);
 8013bb0:	463b      	mov	r3, r7
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f000 fcfc 	bl	80145b0 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013bb8:	4836      	ldr	r0, [pc, #216]	; (8013c94 <create_StepCountMap_unknown+0x11c>)
 8013bba:	f000 fd33 	bl	8014624 <popStack_walk>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
			goalY = popStack_walk(&g_Goal_y);
 8013bc4:	4834      	ldr	r0, [pc, #208]	; (8013c98 <create_StepCountMap_unknown+0x120>)
 8013bc6:	f000 fd2d 	bl	8014624 <popStack_walk>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 8013bd0:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	d01f      	beq.n	8013c1c <create_StepCountMap_unknown+0xa4>
 8013bdc:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d019      	beq.n	8013c1c <create_StepCountMap_unknown+0xa4>
				//printf("stack_end\n");
				break;
			}
			walk_count[(goalX * 16) + goalY] = 0;
 8013be8:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013bec:	011a      	lsls	r2, r3, #4
 8013bee:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013bf2:	4413      	add	r3, r2
 8013bf4:	4a26      	ldr	r2, [pc, #152]	; (8013c90 <create_StepCountMap_unknown+0x118>)
 8013bf6:	2100      	movs	r1, #0
 8013bf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013bfc:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8013c00:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c04:	4611      	mov	r1, r2
 8013c06:	4618      	mov	r0, r3
 8013c08:	f000 fce2 	bl	80145d0 <pushStack_walk>
 8013c0c:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8013c10:	463b      	mov	r3, r7
 8013c12:	4611      	mov	r1, r2
 8013c14:	4618      	mov	r0, r3
 8013c16:	f000 fcdb 	bl	80145d0 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013c1a:	e7cd      	b.n	8013bb8 <create_StepCountMap_unknown+0x40>
	}
	if(stack_x.tail == stack_x.head){
 8013c1c:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013c20:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013c24:	685a      	ldr	r2, [r3, #4]
 8013c26:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013c2a:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d119      	bne.n	8013c68 <create_StepCountMap_unknown+0xf0>
		walk_count[0] = 0;
 8013c34:	4b16      	ldr	r3, [pc, #88]	; (8013c90 <create_StepCountMap_unknown+0x118>)
 8013c36:	2200      	movs	r2, #0
 8013c38:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013c3a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013c3e:	2100      	movs	r1, #0
 8013c40:	4618      	mov	r0, r3
 8013c42:	f000 fcc5 	bl	80145d0 <pushStack_walk>
 8013c46:	463b      	mov	r3, r7
 8013c48:	2100      	movs	r1, #0
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f000 fcc0 	bl	80145d0 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 8013c50:	4b12      	ldr	r3, [pc, #72]	; (8013c9c <create_StepCountMap_unknown+0x124>)
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d003      	beq.n	8013c60 <create_StepCountMap_unknown+0xe8>
			Dijkstra_maker_flag=2;
 8013c58:	4b10      	ldr	r3, [pc, #64]	; (8013c9c <create_StepCountMap_unknown+0x124>)
 8013c5a:	2202      	movs	r2, #2
 8013c5c:	701a      	strb	r2, [r3, #0]
 8013c5e:	e006      	b.n	8013c6e <create_StepCountMap_unknown+0xf6>
		}else{
			Dijkstra_maker_flag=1;
 8013c60:	4b0e      	ldr	r3, [pc, #56]	; (8013c9c <create_StepCountMap_unknown+0x124>)
 8013c62:	2201      	movs	r2, #1
 8013c64:	701a      	strb	r2, [r3, #0]
 8013c66:	e002      	b.n	8013c6e <create_StepCountMap_unknown+0xf6>
		}
	}else{
		Dijkstra_maker_flag=0;
 8013c68:	4b0c      	ldr	r3, [pc, #48]	; (8013c9c <create_StepCountMap_unknown+0x124>)
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013c6e:	2301      	movs	r3, #1
 8013c70:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013c74:	2301      	movs	r3, #1
 8013c76:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013c80:	2301      	movs	r3, #1
 8013c82:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013c86:	2301      	movs	r3, #1
 8013c88:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013c8c:	e144      	b.n	8013f18 <create_StepCountMap_unknown+0x3a0>
 8013c8e:	bf00      	nop
 8013c90:	20000d30 	.word	0x20000d30
 8013c94:	200012f0 	.word	0x200012f0
 8013c98:	20001870 	.word	0x20001870
 8013c9c:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013ca0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f000 fcbd 	bl	8014624 <popStack_walk>
 8013caa:	4603      	mov	r3, r0
 8013cac:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		Ycoordinate = popStack_walk(&stack_y);
 8013cb0:	463b      	mov	r3, r7
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f000 fcb6 	bl	8014624 <popStack_walk>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	f8a7 3b02 	strh.w	r3, [r7, #2818]	; 0xb02
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013cbe:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	f000 812b 	beq.w	8013f22 <create_StepCountMap_unknown+0x3aa>
 8013ccc:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	f000 8124 	beq.w	8013f22 <create_StepCountMap_unknown+0x3aa>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8013cda:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013cde:	011b      	lsls	r3, r3, #4
 8013ce0:	b29a      	uxth	r2, r3
 8013ce2:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013ce6:	4413      	add	r3, r2
 8013ce8:	f8a7 3b00 	strh.w	r3, [r7, #2816]	; 0xb00
		if (Ycoordinate <= 14) {
 8013cec:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013cf0:	2b0e      	cmp	r3, #14
 8013cf2:	d811      	bhi.n	8013d18 <create_StepCountMap_unknown+0x1a0>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013cf4:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013cf8:	4a8c      	ldr	r2, [pc, #560]	; (8013f2c <create_StepCountMap_unknown+0x3b4>)
 8013cfa:	330c      	adds	r3, #12
 8013cfc:	005b      	lsls	r3, r3, #1
 8013cfe:	4413      	add	r3, r2
 8013d00:	88db      	ldrh	r3, [r3, #6]
 8013d02:	b21a      	sxth	r2, r3
 8013d04:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013d08:	2101      	movs	r1, #1
 8013d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8013d0e:	b21b      	sxth	r3, r3
 8013d10:	4013      	ands	r3, r2
 8013d12:	b21b      	sxth	r3, r3
 8013d14:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8013d18:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d012      	beq.n	8013d46 <create_StepCountMap_unknown+0x1ce>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013d20:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013d24:	3b01      	subs	r3, #1
 8013d26:	4a81      	ldr	r2, [pc, #516]	; (8013f2c <create_StepCountMap_unknown+0x3b4>)
 8013d28:	330c      	adds	r3, #12
 8013d2a:	005b      	lsls	r3, r3, #1
 8013d2c:	4413      	add	r3, r2
 8013d2e:	88db      	ldrh	r3, [r3, #6]
 8013d30:	b21a      	sxth	r2, r3
 8013d32:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013d36:	2101      	movs	r1, #1
 8013d38:	fa01 f303 	lsl.w	r3, r1, r3
 8013d3c:	b21b      	sxth	r3, r3
 8013d3e:	4013      	ands	r3, r2
 8013d40:	b21b      	sxth	r3, r3
 8013d42:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8013d46:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013d4a:	2b0e      	cmp	r3, #14
 8013d4c:	d80f      	bhi.n	8013d6e <create_StepCountMap_unknown+0x1f6>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013d4e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013d52:	4a76      	ldr	r2, [pc, #472]	; (8013f2c <create_StepCountMap_unknown+0x3b4>)
 8013d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d58:	b21a      	sxth	r2, r3
 8013d5a:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013d5e:	2101      	movs	r1, #1
 8013d60:	fa01 f303 	lsl.w	r3, r1, r3
 8013d64:	b21b      	sxth	r3, r3
 8013d66:	4013      	ands	r3, r2
 8013d68:	b21b      	sxth	r3, r3
 8013d6a:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8013d6e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d010      	beq.n	8013d98 <create_StepCountMap_unknown+0x220>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013d76:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013d7a:	3b01      	subs	r3, #1
 8013d7c:	4a6b      	ldr	r2, [pc, #428]	; (8013f2c <create_StepCountMap_unknown+0x3b4>)
 8013d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d82:	b21a      	sxth	r2, r3
 8013d84:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013d88:	2101      	movs	r1, #1
 8013d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8013d8e:	b21b      	sxth	r3, r3
 8013d90:	4013      	ands	r3, r2
 8013d92:	b21b      	sxth	r3, r3
 8013d94:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013d98:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	4a64      	ldr	r2, [pc, #400]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013da4:	2bff      	cmp	r3, #255	; 0xff
 8013da6:	d125      	bne.n	8013df4 <create_StepCountMap_unknown+0x27c>
 8013da8:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013dac:	2b0f      	cmp	r3, #15
 8013dae:	d021      	beq.n	8013df4 <create_StepCountMap_unknown+0x27c>
 8013db0:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d11d      	bne.n	8013df4 <create_StepCountMap_unknown+0x27c>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8013db8:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013dbc:	4a5c      	ldr	r2, [pc, #368]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013dbe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013dc2:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	3201      	adds	r2, #1
 8013dca:	b291      	uxth	r1, r2
 8013dcc:	4a58      	ldr	r2, [pc, #352]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013dce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013dd2:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013dd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013dda:	4611      	mov	r1, r2
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f000 fbf7 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013de2:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013de6:	3301      	adds	r3, #1
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	463b      	mov	r3, r7
 8013dec:	4611      	mov	r1, r2
 8013dee:	4618      	mov	r0, r3
 8013df0:	f000 fbee 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013df4:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013df8:	3b01      	subs	r3, #1
 8013dfa:	4a4d      	ldr	r2, [pc, #308]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e00:	2bff      	cmp	r3, #255	; 0xff
 8013e02:	d125      	bne.n	8013e50 <create_StepCountMap_unknown+0x2d8>
 8013e04:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d021      	beq.n	8013e50 <create_StepCountMap_unknown+0x2d8>
 8013e0c:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d11d      	bne.n	8013e50 <create_StepCountMap_unknown+0x2d8>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8013e14:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013e18:	4a45      	ldr	r2, [pc, #276]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013e1a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013e1e:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013e22:	3b01      	subs	r3, #1
 8013e24:	3201      	adds	r2, #1
 8013e26:	b291      	uxth	r1, r2
 8013e28:	4a41      	ldr	r2, [pc, #260]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013e2e:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013e32:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e36:	4611      	mov	r1, r2
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f000 fbc9 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013e3e:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013e42:	3b01      	subs	r3, #1
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	463b      	mov	r3, r7
 8013e48:	4611      	mov	r1, r2
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f000 fbc0 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013e50:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013e54:	3310      	adds	r3, #16
 8013e56:	4a36      	ldr	r2, [pc, #216]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e5c:	2bff      	cmp	r3, #255	; 0xff
 8013e5e:	d125      	bne.n	8013eac <create_StepCountMap_unknown+0x334>
 8013e60:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e64:	2b0f      	cmp	r3, #15
 8013e66:	d021      	beq.n	8013eac <create_StepCountMap_unknown+0x334>
 8013e68:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d11d      	bne.n	8013eac <create_StepCountMap_unknown+0x334>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 8013e70:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013e74:	4a2e      	ldr	r2, [pc, #184]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013e76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013e7a:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013e7e:	3310      	adds	r3, #16
 8013e80:	3201      	adds	r2, #1
 8013e82:	b291      	uxth	r1, r2
 8013e84:	4a2a      	ldr	r2, [pc, #168]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013e86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013e8a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e8e:	3301      	adds	r3, #1
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e96:	4611      	mov	r1, r2
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f000 fb99 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013e9e:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013ea2:	463b      	mov	r3, r7
 8013ea4:	4611      	mov	r1, r2
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f000 fb92 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013eac:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013eb0:	3b10      	subs	r3, #16
 8013eb2:	4a1f      	ldr	r2, [pc, #124]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013eb8:	2bff      	cmp	r3, #255	; 0xff
 8013eba:	d125      	bne.n	8013f08 <create_StepCountMap_unknown+0x390>
 8013ebc:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d021      	beq.n	8013f08 <create_StepCountMap_unknown+0x390>
 8013ec4:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d11d      	bne.n	8013f08 <create_StepCountMap_unknown+0x390>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8013ecc:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013ed0:	4a17      	ldr	r2, [pc, #92]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013ed2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013ed6:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013eda:	3b10      	subs	r3, #16
 8013edc:	3201      	adds	r2, #1
 8013ede:	b291      	uxth	r1, r2
 8013ee0:	4a13      	ldr	r2, [pc, #76]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013ee2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013ee6:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013eea:	3b01      	subs	r3, #1
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ef2:	4611      	mov	r1, r2
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 fb6b 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013efa:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013efe:	463b      	mov	r3, r7
 8013f00:	4611      	mov	r1, r2
 8013f02:	4618      	mov	r0, r3
 8013f04:	f000 fb64 	bl	80145d0 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8013f08:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013f0c:	4a08      	ldr	r2, [pc, #32]	; (8013f30 <create_StepCountMap_unknown+0x3b8>)
 8013f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013f12:	3301      	adds	r3, #1
 8013f14:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8013f18:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8013f1c:	2bfe      	cmp	r3, #254	; 0xfe
 8013f1e:	f67f aebf 	bls.w	8013ca0 <create_StepCountMap_unknown+0x128>

		}

}
 8013f22:	bf00      	nop
 8013f24:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	20000c3c 	.word	0x20000c3c
 8013f30:	20000d30 	.word	0x20000d30

08013f34 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8013f34:	b580      	push	{r7, lr}
 8013f36:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013f3a:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013f42:	e00a      	b.n	8013f5a <create_StepCountMap_queue+0x26>
 8013f44:	4a30      	ldr	r2, [pc, #192]	; (8014008 <create_StepCountMap_queue+0xd4>)
 8013f46:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f4a:	21ff      	movs	r1, #255	; 0xff
 8013f4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013f50:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f54:	3301      	adds	r3, #1
 8013f56:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013f5a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f5e:	2bff      	cmp	r3, #255	; 0xff
 8013f60:	ddf0      	ble.n	8013f44 <create_StepCountMap_queue+0x10>
	initStack_walk(&stack_x);
 8013f62:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013f66:	4618      	mov	r0, r3
 8013f68:	f000 fb22 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_y);
 8013f6c:	1d3b      	adds	r3, r7, #4
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f000 fb1e 	bl	80145b0 <initStack_walk>


	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8013f74:	4b24      	ldr	r3, [pc, #144]	; (8014008 <create_StepCountMap_queue+0xd4>)
 8013f76:	2200      	movs	r2, #0
 8013f78:	841a      	strh	r2, [r3, #32]
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 8013f7a:	4b23      	ldr	r3, [pc, #140]	; (8014008 <create_StepCountMap_queue+0xd4>)
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 8013f82:	4b21      	ldr	r3, [pc, #132]	; (8014008 <create_StepCountMap_queue+0xd4>)
 8013f84:	2200      	movs	r2, #0
 8013f86:	845a      	strh	r2, [r3, #34]	; 0x22
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 8013f88:	4b1f      	ldr	r3, [pc, #124]	; (8014008 <create_StepCountMap_queue+0xd4>)
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8013f90:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013f94:	2101      	movs	r1, #1
 8013f96:	4618      	mov	r0, r3
 8013f98:	f000 fb1a 	bl	80145d0 <pushStack_walk>
 8013f9c:	1d3b      	adds	r3, r7, #4
 8013f9e:	2100      	movs	r1, #0
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f000 fb15 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8013fa6:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013faa:	2102      	movs	r1, #2
 8013fac:	4618      	mov	r0, r3
 8013fae:	f000 fb0f 	bl	80145d0 <pushStack_walk>
 8013fb2:	1d3b      	adds	r3, r7, #4
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f000 fb0a 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013fbc:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013fc0:	2101      	movs	r1, #1
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f000 fb04 	bl	80145d0 <pushStack_walk>
 8013fc8:	1d3b      	adds	r3, r7, #4
 8013fca:	2101      	movs	r1, #1
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f000 faff 	bl	80145d0 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013fd2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013fd6:	2102      	movs	r1, #2
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f000 faf9 	bl	80145d0 <pushStack_walk>
 8013fde:	1d3b      	adds	r3, r7, #4
 8013fe0:	2101      	movs	r1, #1
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f000 faf4 	bl	80145d0 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013fe8:	2301      	movs	r3, #1
 8013fea:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013fee:	2301      	movs	r3, #1
 8013ff0:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8014000:	2301      	movs	r3, #1
 8014002:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8014006:	e13d      	b.n	8014284 <create_StepCountMap_queue+0x350>
 8014008:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 801400c:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014010:	4618      	mov	r0, r3
 8014012:	f000 fb07 	bl	8014624 <popStack_walk>
 8014016:	4603      	mov	r3, r0
 8014018:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 801401c:	1d3b      	adds	r3, r7, #4
 801401e:	4618      	mov	r0, r3
 8014020:	f000 fb00 	bl	8014624 <popStack_walk>
 8014024:	4603      	mov	r3, r0
 8014026:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801402a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801402e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014032:	4293      	cmp	r3, r2
 8014034:	f000 812b 	beq.w	801428e <create_StepCountMap_queue+0x35a>
 8014038:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801403c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014040:	4293      	cmp	r3, r2
 8014042:	f000 8124 	beq.w	801428e <create_StepCountMap_queue+0x35a>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8014046:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801404a:	011b      	lsls	r3, r3, #4
 801404c:	b29a      	uxth	r2, r3
 801404e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014052:	4413      	add	r3, r2
 8014054:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8014058:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801405c:	2b0e      	cmp	r3, #14
 801405e:	d811      	bhi.n	8014084 <create_StepCountMap_queue+0x150>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014060:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014064:	4a8c      	ldr	r2, [pc, #560]	; (8014298 <create_StepCountMap_queue+0x364>)
 8014066:	330c      	adds	r3, #12
 8014068:	005b      	lsls	r3, r3, #1
 801406a:	4413      	add	r3, r2
 801406c:	88db      	ldrh	r3, [r3, #6]
 801406e:	b21a      	sxth	r2, r3
 8014070:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014074:	2101      	movs	r1, #1
 8014076:	fa01 f303 	lsl.w	r3, r1, r3
 801407a:	b21b      	sxth	r3, r3
 801407c:	4013      	ands	r3, r2
 801407e:	b21b      	sxth	r3, r3
 8014080:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8014084:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014088:	2b00      	cmp	r3, #0
 801408a:	d012      	beq.n	80140b2 <create_StepCountMap_queue+0x17e>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 801408c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014090:	3b01      	subs	r3, #1
 8014092:	4a81      	ldr	r2, [pc, #516]	; (8014298 <create_StepCountMap_queue+0x364>)
 8014094:	330c      	adds	r3, #12
 8014096:	005b      	lsls	r3, r3, #1
 8014098:	4413      	add	r3, r2
 801409a:	88db      	ldrh	r3, [r3, #6]
 801409c:	b21a      	sxth	r2, r3
 801409e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140a2:	2101      	movs	r1, #1
 80140a4:	fa01 f303 	lsl.w	r3, r1, r3
 80140a8:	b21b      	sxth	r3, r3
 80140aa:	4013      	ands	r3, r2
 80140ac:	b21b      	sxth	r3, r3
 80140ae:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 80140b2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140b6:	2b0e      	cmp	r3, #14
 80140b8:	d80f      	bhi.n	80140da <create_StepCountMap_queue+0x1a6>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80140ba:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140be:	4a76      	ldr	r2, [pc, #472]	; (8014298 <create_StepCountMap_queue+0x364>)
 80140c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140c4:	b21a      	sxth	r2, r3
 80140c6:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80140ca:	2101      	movs	r1, #1
 80140cc:	fa01 f303 	lsl.w	r3, r1, r3
 80140d0:	b21b      	sxth	r3, r3
 80140d2:	4013      	ands	r3, r2
 80140d4:	b21b      	sxth	r3, r3
 80140d6:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 80140da:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d010      	beq.n	8014104 <create_StepCountMap_queue+0x1d0>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80140e2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140e6:	3b01      	subs	r3, #1
 80140e8:	4a6b      	ldr	r2, [pc, #428]	; (8014298 <create_StepCountMap_queue+0x364>)
 80140ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140ee:	b21a      	sxth	r2, r3
 80140f0:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80140f4:	2101      	movs	r1, #1
 80140f6:	fa01 f303 	lsl.w	r3, r1, r3
 80140fa:	b21b      	sxth	r3, r3
 80140fc:	4013      	ands	r3, r2
 80140fe:	b21b      	sxth	r3, r3
 8014100:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014104:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014108:	3301      	adds	r3, #1
 801410a:	4a64      	ldr	r2, [pc, #400]	; (801429c <create_StepCountMap_queue+0x368>)
 801410c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014110:	2bff      	cmp	r3, #255	; 0xff
 8014112:	d125      	bne.n	8014160 <create_StepCountMap_queue+0x22c>
 8014114:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014118:	2b0f      	cmp	r3, #15
 801411a:	d021      	beq.n	8014160 <create_StepCountMap_queue+0x22c>
 801411c:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8014120:	2b00      	cmp	r3, #0
 8014122:	d11d      	bne.n	8014160 <create_StepCountMap_queue+0x22c>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8014124:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014128:	4a5c      	ldr	r2, [pc, #368]	; (801429c <create_StepCountMap_queue+0x368>)
 801412a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801412e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014132:	3301      	adds	r3, #1
 8014134:	3201      	adds	r2, #1
 8014136:	b291      	uxth	r1, r2
 8014138:	4a58      	ldr	r2, [pc, #352]	; (801429c <create_StepCountMap_queue+0x368>)
 801413a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801413e:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8014142:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014146:	4611      	mov	r1, r2
 8014148:	4618      	mov	r0, r3
 801414a:	f000 fa41 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 801414e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014152:	3301      	adds	r3, #1
 8014154:	b29a      	uxth	r2, r3
 8014156:	1d3b      	adds	r3, r7, #4
 8014158:	4611      	mov	r1, r2
 801415a:	4618      	mov	r0, r3
 801415c:	f000 fa38 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014160:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014164:	3b01      	subs	r3, #1
 8014166:	4a4d      	ldr	r2, [pc, #308]	; (801429c <create_StepCountMap_queue+0x368>)
 8014168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801416c:	2bff      	cmp	r3, #255	; 0xff
 801416e:	d125      	bne.n	80141bc <create_StepCountMap_queue+0x288>
 8014170:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014174:	2b00      	cmp	r3, #0
 8014176:	d021      	beq.n	80141bc <create_StepCountMap_queue+0x288>
 8014178:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 801417c:	2b00      	cmp	r3, #0
 801417e:	d11d      	bne.n	80141bc <create_StepCountMap_queue+0x288>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8014180:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014184:	4a45      	ldr	r2, [pc, #276]	; (801429c <create_StepCountMap_queue+0x368>)
 8014186:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801418a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801418e:	3b01      	subs	r3, #1
 8014190:	3201      	adds	r2, #1
 8014192:	b291      	uxth	r1, r2
 8014194:	4a41      	ldr	r2, [pc, #260]	; (801429c <create_StepCountMap_queue+0x368>)
 8014196:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801419a:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 801419e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80141a2:	4611      	mov	r1, r2
 80141a4:	4618      	mov	r0, r3
 80141a6:	f000 fa13 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80141aa:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80141ae:	3b01      	subs	r3, #1
 80141b0:	b29a      	uxth	r2, r3
 80141b2:	1d3b      	adds	r3, r7, #4
 80141b4:	4611      	mov	r1, r2
 80141b6:	4618      	mov	r0, r3
 80141b8:	f000 fa0a 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80141bc:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141c0:	3310      	adds	r3, #16
 80141c2:	4a36      	ldr	r2, [pc, #216]	; (801429c <create_StepCountMap_queue+0x368>)
 80141c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141c8:	2bff      	cmp	r3, #255	; 0xff
 80141ca:	d125      	bne.n	8014218 <create_StepCountMap_queue+0x2e4>
 80141cc:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141d0:	2b0f      	cmp	r3, #15
 80141d2:	d021      	beq.n	8014218 <create_StepCountMap_queue+0x2e4>
 80141d4:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d11d      	bne.n	8014218 <create_StepCountMap_queue+0x2e4>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 80141dc:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141e0:	4a2e      	ldr	r2, [pc, #184]	; (801429c <create_StepCountMap_queue+0x368>)
 80141e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80141e6:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141ea:	3310      	adds	r3, #16
 80141ec:	3201      	adds	r2, #1
 80141ee:	b291      	uxth	r1, r2
 80141f0:	4a2a      	ldr	r2, [pc, #168]	; (801429c <create_StepCountMap_queue+0x368>)
 80141f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80141f6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141fa:	3301      	adds	r3, #1
 80141fc:	b29a      	uxth	r2, r3
 80141fe:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014202:	4611      	mov	r1, r2
 8014204:	4618      	mov	r0, r3
 8014206:	f000 f9e3 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801420a:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 801420e:	1d3b      	adds	r3, r7, #4
 8014210:	4611      	mov	r1, r2
 8014212:	4618      	mov	r0, r3
 8014214:	f000 f9dc 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014218:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801421c:	3b10      	subs	r3, #16
 801421e:	4a1f      	ldr	r2, [pc, #124]	; (801429c <create_StepCountMap_queue+0x368>)
 8014220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014224:	2bff      	cmp	r3, #255	; 0xff
 8014226:	d125      	bne.n	8014274 <create_StepCountMap_queue+0x340>
 8014228:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801422c:	2b00      	cmp	r3, #0
 801422e:	d021      	beq.n	8014274 <create_StepCountMap_queue+0x340>
 8014230:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8014234:	2b00      	cmp	r3, #0
 8014236:	d11d      	bne.n	8014274 <create_StepCountMap_queue+0x340>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8014238:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801423c:	4a17      	ldr	r2, [pc, #92]	; (801429c <create_StepCountMap_queue+0x368>)
 801423e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014242:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014246:	3b10      	subs	r3, #16
 8014248:	3201      	adds	r2, #1
 801424a:	b291      	uxth	r1, r2
 801424c:	4a13      	ldr	r2, [pc, #76]	; (801429c <create_StepCountMap_queue+0x368>)
 801424e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014252:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014256:	3b01      	subs	r3, #1
 8014258:	b29a      	uxth	r2, r3
 801425a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801425e:	4611      	mov	r1, r2
 8014260:	4618      	mov	r0, r3
 8014262:	f000 f9b5 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014266:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 801426a:	1d3b      	adds	r3, r7, #4
 801426c:	4611      	mov	r1, r2
 801426e:	4618      	mov	r0, r3
 8014270:	f000 f9ae 	bl	80145d0 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8014274:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014278:	4a08      	ldr	r2, [pc, #32]	; (801429c <create_StepCountMap_queue+0x368>)
 801427a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801427e:	3301      	adds	r3, #1
 8014280:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8014284:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8014288:	2bfe      	cmp	r3, #254	; 0xfe
 801428a:	f67f aebf 	bls.w	801400c <create_StepCountMap_queue+0xd8>

		}

}
 801428e:	bf00      	nop
 8014290:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}
 8014298:	20000c3c 	.word	0x20000c3c
 801429c:	20000d30 	.word	0x20000d30

080142a0 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 80142a0:	b580      	push	{r7, lr}
 80142a2:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 80142a6:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 80142a8:	2300      	movs	r3, #0
 80142aa:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 80142ae:	e00a      	b.n	80142c6 <create_StepCountMapBack_queue+0x26>
 80142b0:	4abd      	ldr	r2, [pc, #756]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 80142b2:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80142b6:	21ff      	movs	r1, #255	; 0xff
 80142b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80142bc:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80142c0:	3301      	adds	r3, #1
 80142c2:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 80142c6:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80142ca:	2bff      	cmp	r3, #255	; 0xff
 80142cc:	ddf0      	ble.n	80142b0 <create_StepCountMapBack_queue+0x10>
	initStack_walk(&stack_x);
 80142ce:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80142d2:	4618      	mov	r0, r3
 80142d4:	f000 f96c 	bl	80145b0 <initStack_walk>
	initStack_walk(&stack_y);
 80142d8:	1d3b      	adds	r3, r7, #4
 80142da:	4618      	mov	r0, r3
 80142dc:	f000 f968 	bl	80145b0 <initStack_walk>


	walk_count[0] = 0;
 80142e0:	4bb1      	ldr	r3, [pc, #708]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 80142e2:	2200      	movs	r2, #0
 80142e4:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80142e6:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80142ea:	2100      	movs	r1, #0
 80142ec:	4618      	mov	r0, r3
 80142ee:	f000 f96f 	bl	80145d0 <pushStack_walk>
 80142f2:	1d3b      	adds	r3, r7, #4
 80142f4:	2100      	movs	r1, #0
 80142f6:	4618      	mov	r0, r3
 80142f8:	f000 f96a 	bl	80145d0 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 80142fc:	2301      	movs	r3, #1
 80142fe:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014302:	2301      	movs	r3, #1
 8014304:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8014308:	2301      	movs	r3, #1
 801430a:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 801430e:	2301      	movs	r3, #1
 8014310:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8014314:	2301      	movs	r3, #1
 8014316:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 801431a:	e13b      	b.n	8014594 <create_StepCountMapBack_queue+0x2f4>

		Xcoordinate = popStack_walk(&stack_x);
 801431c:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014320:	4618      	mov	r0, r3
 8014322:	f000 f97f 	bl	8014624 <popStack_walk>
 8014326:	4603      	mov	r3, r0
 8014328:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 801432c:	1d3b      	adds	r3, r7, #4
 801432e:	4618      	mov	r0, r3
 8014330:	f000 f978 	bl	8014624 <popStack_walk>
 8014334:	4603      	mov	r3, r0
 8014336:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801433a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801433e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014342:	4293      	cmp	r3, r2
 8014344:	f000 812b 	beq.w	801459e <create_StepCountMapBack_queue+0x2fe>
 8014348:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801434c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014350:	4293      	cmp	r3, r2
 8014352:	f000 8124 	beq.w	801459e <create_StepCountMapBack_queue+0x2fe>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8014356:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801435a:	011b      	lsls	r3, r3, #4
 801435c:	b29a      	uxth	r2, r3
 801435e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014362:	4413      	add	r3, r2
 8014364:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8014368:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801436c:	2b0e      	cmp	r3, #14
 801436e:	d811      	bhi.n	8014394 <create_StepCountMapBack_queue+0xf4>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014370:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014374:	4a8d      	ldr	r2, [pc, #564]	; (80145ac <create_StepCountMapBack_queue+0x30c>)
 8014376:	330c      	adds	r3, #12
 8014378:	005b      	lsls	r3, r3, #1
 801437a:	4413      	add	r3, r2
 801437c:	88db      	ldrh	r3, [r3, #6]
 801437e:	b21a      	sxth	r2, r3
 8014380:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014384:	2101      	movs	r1, #1
 8014386:	fa01 f303 	lsl.w	r3, r1, r3
 801438a:	b21b      	sxth	r3, r3
 801438c:	4013      	ands	r3, r2
 801438e:	b21b      	sxth	r3, r3
 8014390:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8014394:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014398:	2b00      	cmp	r3, #0
 801439a:	d012      	beq.n	80143c2 <create_StepCountMapBack_queue+0x122>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 801439c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80143a0:	3b01      	subs	r3, #1
 80143a2:	4a82      	ldr	r2, [pc, #520]	; (80145ac <create_StepCountMapBack_queue+0x30c>)
 80143a4:	330c      	adds	r3, #12
 80143a6:	005b      	lsls	r3, r3, #1
 80143a8:	4413      	add	r3, r2
 80143aa:	88db      	ldrh	r3, [r3, #6]
 80143ac:	b21a      	sxth	r2, r3
 80143ae:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80143b2:	2101      	movs	r1, #1
 80143b4:	fa01 f303 	lsl.w	r3, r1, r3
 80143b8:	b21b      	sxth	r3, r3
 80143ba:	4013      	ands	r3, r2
 80143bc:	b21b      	sxth	r3, r3
 80143be:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 80143c2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80143c6:	2b0e      	cmp	r3, #14
 80143c8:	d80f      	bhi.n	80143ea <create_StepCountMapBack_queue+0x14a>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80143ca:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80143ce:	4a77      	ldr	r2, [pc, #476]	; (80145ac <create_StepCountMapBack_queue+0x30c>)
 80143d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143d4:	b21a      	sxth	r2, r3
 80143d6:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80143da:	2101      	movs	r1, #1
 80143dc:	fa01 f303 	lsl.w	r3, r1, r3
 80143e0:	b21b      	sxth	r3, r3
 80143e2:	4013      	ands	r3, r2
 80143e4:	b21b      	sxth	r3, r3
 80143e6:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 80143ea:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d010      	beq.n	8014414 <create_StepCountMapBack_queue+0x174>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80143f2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80143f6:	3b01      	subs	r3, #1
 80143f8:	4a6c      	ldr	r2, [pc, #432]	; (80145ac <create_StepCountMapBack_queue+0x30c>)
 80143fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143fe:	b21a      	sxth	r2, r3
 8014400:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014404:	2101      	movs	r1, #1
 8014406:	fa01 f303 	lsl.w	r3, r1, r3
 801440a:	b21b      	sxth	r3, r3
 801440c:	4013      	ands	r3, r2
 801440e:	b21b      	sxth	r3, r3
 8014410:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014414:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014418:	3301      	adds	r3, #1
 801441a:	4a63      	ldr	r2, [pc, #396]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 801441c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014420:	2bff      	cmp	r3, #255	; 0xff
 8014422:	d125      	bne.n	8014470 <create_StepCountMapBack_queue+0x1d0>
 8014424:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014428:	2b0f      	cmp	r3, #15
 801442a:	d021      	beq.n	8014470 <create_StepCountMapBack_queue+0x1d0>
 801442c:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8014430:	2b00      	cmp	r3, #0
 8014432:	d11d      	bne.n	8014470 <create_StepCountMapBack_queue+0x1d0>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8014434:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014438:	4a5b      	ldr	r2, [pc, #364]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 801443a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801443e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014442:	3301      	adds	r3, #1
 8014444:	3201      	adds	r2, #1
 8014446:	b291      	uxth	r1, r2
 8014448:	4a57      	ldr	r2, [pc, #348]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 801444a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801444e:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8014452:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014456:	4611      	mov	r1, r2
 8014458:	4618      	mov	r0, r3
 801445a:	f000 f8b9 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 801445e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014462:	3301      	adds	r3, #1
 8014464:	b29a      	uxth	r2, r3
 8014466:	1d3b      	adds	r3, r7, #4
 8014468:	4611      	mov	r1, r2
 801446a:	4618      	mov	r0, r3
 801446c:	f000 f8b0 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014470:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014474:	3b01      	subs	r3, #1
 8014476:	4a4c      	ldr	r2, [pc, #304]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 8014478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801447c:	2bff      	cmp	r3, #255	; 0xff
 801447e:	d125      	bne.n	80144cc <create_StepCountMapBack_queue+0x22c>
 8014480:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014484:	2b00      	cmp	r3, #0
 8014486:	d021      	beq.n	80144cc <create_StepCountMapBack_queue+0x22c>
 8014488:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 801448c:	2b00      	cmp	r3, #0
 801448e:	d11d      	bne.n	80144cc <create_StepCountMapBack_queue+0x22c>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8014490:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014494:	4a44      	ldr	r2, [pc, #272]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 8014496:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801449a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801449e:	3b01      	subs	r3, #1
 80144a0:	3201      	adds	r2, #1
 80144a2:	b291      	uxth	r1, r2
 80144a4:	4a40      	ldr	r2, [pc, #256]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 80144a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80144aa:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 80144ae:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80144b2:	4611      	mov	r1, r2
 80144b4:	4618      	mov	r0, r3
 80144b6:	f000 f88b 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80144ba:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80144be:	3b01      	subs	r3, #1
 80144c0:	b29a      	uxth	r2, r3
 80144c2:	1d3b      	adds	r3, r7, #4
 80144c4:	4611      	mov	r1, r2
 80144c6:	4618      	mov	r0, r3
 80144c8:	f000 f882 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80144cc:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80144d0:	3310      	adds	r3, #16
 80144d2:	4a35      	ldr	r2, [pc, #212]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 80144d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144d8:	2bff      	cmp	r3, #255	; 0xff
 80144da:	d125      	bne.n	8014528 <create_StepCountMapBack_queue+0x288>
 80144dc:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80144e0:	2b0f      	cmp	r3, #15
 80144e2:	d021      	beq.n	8014528 <create_StepCountMapBack_queue+0x288>
 80144e4:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d11d      	bne.n	8014528 <create_StepCountMapBack_queue+0x288>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 80144ec:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80144f0:	4a2d      	ldr	r2, [pc, #180]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 80144f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80144f6:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80144fa:	3310      	adds	r3, #16
 80144fc:	3201      	adds	r2, #1
 80144fe:	b291      	uxth	r1, r2
 8014500:	4a29      	ldr	r2, [pc, #164]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 8014502:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014506:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801450a:	3301      	adds	r3, #1
 801450c:	b29a      	uxth	r2, r3
 801450e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014512:	4611      	mov	r1, r2
 8014514:	4618      	mov	r0, r3
 8014516:	f000 f85b 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801451a:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 801451e:	1d3b      	adds	r3, r7, #4
 8014520:	4611      	mov	r1, r2
 8014522:	4618      	mov	r0, r3
 8014524:	f000 f854 	bl	80145d0 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014528:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801452c:	3b10      	subs	r3, #16
 801452e:	4a1e      	ldr	r2, [pc, #120]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 8014530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014534:	2bff      	cmp	r3, #255	; 0xff
 8014536:	d125      	bne.n	8014584 <create_StepCountMapBack_queue+0x2e4>
 8014538:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801453c:	2b00      	cmp	r3, #0
 801453e:	d021      	beq.n	8014584 <create_StepCountMapBack_queue+0x2e4>
 8014540:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8014544:	2b00      	cmp	r3, #0
 8014546:	d11d      	bne.n	8014584 <create_StepCountMapBack_queue+0x2e4>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8014548:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801454c:	4a16      	ldr	r2, [pc, #88]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 801454e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014552:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014556:	3b10      	subs	r3, #16
 8014558:	3201      	adds	r2, #1
 801455a:	b291      	uxth	r1, r2
 801455c:	4a12      	ldr	r2, [pc, #72]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 801455e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014562:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014566:	3b01      	subs	r3, #1
 8014568:	b29a      	uxth	r2, r3
 801456a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801456e:	4611      	mov	r1, r2
 8014570:	4618      	mov	r0, r3
 8014572:	f000 f82d 	bl	80145d0 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014576:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 801457a:	1d3b      	adds	r3, r7, #4
 801457c:	4611      	mov	r1, r2
 801457e:	4618      	mov	r0, r3
 8014580:	f000 f826 	bl	80145d0 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8014584:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014588:	4a07      	ldr	r2, [pc, #28]	; (80145a8 <create_StepCountMapBack_queue+0x308>)
 801458a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801458e:	3301      	adds	r3, #1
 8014590:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8014594:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8014598:	2bfe      	cmp	r3, #254	; 0xfe
 801459a:	f67f aebf 	bls.w	801431c <create_StepCountMapBack_queue+0x7c>

		}

}
 801459e:	bf00      	nop
 80145a0:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	20000d30 	.word	0x20000d30
 80145ac:	20000c3c 	.word	0x20000c3c

080145b0 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 80145b0:	b480      	push	{r7}
 80145b2:	b083      	sub	sp, #12
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2200      	movs	r2, #0
 80145bc:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2200      	movs	r2, #0
 80145c2:	605a      	str	r2, [r3, #4]
}
 80145c4:	bf00      	nop
 80145c6:	370c      	adds	r7, #12
 80145c8:	46bd      	mov	sp, r7
 80145ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ce:	4770      	bx	lr

080145d0 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	460b      	mov	r3, r1
 80145da:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	685a      	ldr	r2, [r3, #4]
 80145e0:	8879      	ldrh	r1, [r7, #2]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	3202      	adds	r2, #2
 80145e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	1c5a      	adds	r2, r3, #1
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	685b      	ldr	r3, [r3, #4]
 80145f8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80145fc:	d102      	bne.n	8014604 <pushStack_walk+0x34>
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2200      	movs	r2, #0
 8014602:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	685a      	ldr	r2, [r3, #4]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	429a      	cmp	r2, r3
 801460e:	d103      	bne.n	8014618 <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014610:	4803      	ldr	r0, [pc, #12]	; (8014620 <pushStack_walk+0x50>)
 8014612:	f00b fb15 	bl	801fc40 <puts>
        return;
 8014616:	bf00      	nop
    }
}
 8014618:	3708      	adds	r7, #8
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	0802245c 	.word	0x0802245c

08014624 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014624:	b480      	push	{r7}
 8014626:	b085      	sub	sp, #20
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 801462c:	2300      	movs	r3, #0
 801462e:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	685a      	ldr	r2, [r3, #4]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	429a      	cmp	r2, r3
 801463a:	d102      	bne.n	8014642 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 801463c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014640:	e014      	b.n	801466c <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	3202      	adds	r2, #2
 801464a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801464e:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	1c5a      	adds	r2, r3, #1
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8014662:	d102      	bne.n	801466a <popStack_walk+0x46>
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2200      	movs	r2, #0
 8014668:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 801466a:	89fb      	ldrh	r3, [r7, #14]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3714      	adds	r7, #20
 8014670:	46bd      	mov	sp, r7
 8014672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014676:	4770      	bx	lr

08014678 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0

	int tt = 14;
 801467e:	230e      	movs	r3, #14
 8014680:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014682:	2300      	movs	r3, #0
 8014684:	603b      	str	r3, [r7, #0]

	printf(
 8014686:	4881      	ldr	r0, [pc, #516]	; (801488c <maze_display+0x214>)
 8014688:	f00b fada 	bl	801fc40 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 801468c:	230e      	movs	r3, #14
 801468e:	607b      	str	r3, [r7, #4]
 8014690:	e06e      	b.n	8014770 <maze_display+0xf8>

		printf("|%5d", walk_count[tt + 1]);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	3301      	adds	r3, #1
 8014696:	4a7e      	ldr	r2, [pc, #504]	; (8014890 <maze_display+0x218>)
 8014698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801469c:	4619      	mov	r1, r3
 801469e:	487d      	ldr	r0, [pc, #500]	; (8014894 <maze_display+0x21c>)
 80146a0:	f00b fa32 	bl	801fb08 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80146a4:	2300      	movs	r3, #0
 80146a6:	603b      	str	r3, [r7, #0]
 80146a8:	e030      	b.n	801470c <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80146aa:	4a7b      	ldr	r2, [pc, #492]	; (8014898 <maze_display+0x220>)
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146b2:	4619      	mov	r1, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	3301      	adds	r3, #1
 80146b8:	2201      	movs	r2, #1
 80146ba:	fa02 f303 	lsl.w	r3, r2, r3
 80146be:	ea01 0203 	and.w	r2, r1, r3
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	3301      	adds	r3, #1
 80146c6:	2101      	movs	r1, #1
 80146c8:	fa01 f303 	lsl.w	r3, r1, r3
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d10d      	bne.n	80146ec <maze_display+0x74>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	1c5a      	adds	r2, r3, #1
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	3301      	adds	r3, #1
 80146d8:	011b      	lsls	r3, r3, #4
 80146da:	4413      	add	r3, r2
 80146dc:	4a6c      	ldr	r2, [pc, #432]	; (8014890 <maze_display+0x218>)
 80146de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146e2:	4619      	mov	r1, r3
 80146e4:	486b      	ldr	r0, [pc, #428]	; (8014894 <maze_display+0x21c>)
 80146e6:	f00b fa0f 	bl	801fb08 <iprintf>
 80146ea:	e00c      	b.n	8014706 <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	1c5a      	adds	r2, r3, #1
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	3301      	adds	r3, #1
 80146f4:	011b      	lsls	r3, r3, #4
 80146f6:	4413      	add	r3, r2
 80146f8:	4a65      	ldr	r2, [pc, #404]	; (8014890 <maze_display+0x218>)
 80146fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146fe:	4619      	mov	r1, r3
 8014700:	4866      	ldr	r0, [pc, #408]	; (801489c <maze_display+0x224>)
 8014702:	f00b fa01 	bl	801fb08 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	3301      	adds	r3, #1
 801470a:	603b      	str	r3, [r7, #0]
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	2b0e      	cmp	r3, #14
 8014710:	ddcb      	ble.n	80146aa <maze_display+0x32>
			}
		}
		printf("|\n");
 8014712:	4863      	ldr	r0, [pc, #396]	; (80148a0 <maze_display+0x228>)
 8014714:	f00b fa94 	bl	801fc40 <puts>
		if (tt <= -1) {
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2b00      	cmp	r3, #0
 801471c:	db2d      	blt.n	801477a <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801471e:	2300      	movs	r3, #0
 8014720:	603b      	str	r3, [r7, #0]
 8014722:	e01c      	b.n	801475e <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014724:	4a5c      	ldr	r2, [pc, #368]	; (8014898 <maze_display+0x220>)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	330c      	adds	r3, #12
 801472a:	005b      	lsls	r3, r3, #1
 801472c:	4413      	add	r3, r2
 801472e:	88db      	ldrh	r3, [r3, #6]
 8014730:	4619      	mov	r1, r3
 8014732:	2201      	movs	r2, #1
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	fa02 f303 	lsl.w	r3, r2, r3
 801473a:	ea01 0203 	and.w	r2, r1, r3
 801473e:	2101      	movs	r1, #1
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	fa01 f303 	lsl.w	r3, r1, r3
 8014746:	429a      	cmp	r2, r3
 8014748:	d103      	bne.n	8014752 <maze_display+0xda>
				printf("+-----");
 801474a:	4856      	ldr	r0, [pc, #344]	; (80148a4 <maze_display+0x22c>)
 801474c:	f00b f9dc 	bl	801fb08 <iprintf>
 8014750:	e002      	b.n	8014758 <maze_display+0xe0>
			}else{
				printf("+     ");
 8014752:	4855      	ldr	r0, [pc, #340]	; (80148a8 <maze_display+0x230>)
 8014754:	f00b f9d8 	bl	801fb08 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	3301      	adds	r3, #1
 801475c:	603b      	str	r3, [r7, #0]
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	2b0f      	cmp	r3, #15
 8014762:	dddf      	ble.n	8014724 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014764:	4851      	ldr	r0, [pc, #324]	; (80148ac <maze_display+0x234>)
 8014766:	f00b fa6b 	bl	801fc40 <puts>
	for (tt = 14;tt >= -1;tt--){
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	3b01      	subs	r3, #1
 801476e:	607b      	str	r3, [r7, #4]
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014776:	da8c      	bge.n	8014692 <maze_display+0x1a>
 8014778:	e000      	b.n	801477c <maze_display+0x104>
			break;
 801477a:	bf00      	nop

	}

	printf(
 801477c:	484c      	ldr	r0, [pc, #304]	; (80148b0 <maze_display+0x238>)
 801477e:	f00b fa5f 	bl	801fc40 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014782:	4842      	ldr	r0, [pc, #264]	; (801488c <maze_display+0x214>)
 8014784:	f00b fa5c 	bl	801fc40 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014788:	230e      	movs	r3, #14
 801478a:	607b      	str	r3, [r7, #4]
 801478c:	e070      	b.n	8014870 <maze_display+0x1f8>
		printf("|%5d", walk_count[tt + 1]);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	3301      	adds	r3, #1
 8014792:	4a3f      	ldr	r2, [pc, #252]	; (8014890 <maze_display+0x218>)
 8014794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014798:	4619      	mov	r1, r3
 801479a:	483e      	ldr	r0, [pc, #248]	; (8014894 <maze_display+0x21c>)
 801479c:	f00b f9b4 	bl	801fb08 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80147a0:	2300      	movs	r3, #0
 80147a2:	603b      	str	r3, [r7, #0]
 80147a4:	e032      	b.n	801480c <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80147a6:	4a3c      	ldr	r2, [pc, #240]	; (8014898 <maze_display+0x220>)
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	331c      	adds	r3, #28
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	4413      	add	r3, r2
 80147b0:	889b      	ldrh	r3, [r3, #4]
 80147b2:	4619      	mov	r1, r3
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	3301      	adds	r3, #1
 80147b8:	2201      	movs	r2, #1
 80147ba:	fa02 f303 	lsl.w	r3, r2, r3
 80147be:	ea01 0203 	and.w	r2, r1, r3
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	3301      	adds	r3, #1
 80147c6:	2101      	movs	r1, #1
 80147c8:	fa01 f303 	lsl.w	r3, r1, r3
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d10d      	bne.n	80147ec <maze_display+0x174>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	1c5a      	adds	r2, r3, #1
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	3301      	adds	r3, #1
 80147d8:	011b      	lsls	r3, r3, #4
 80147da:	4413      	add	r3, r2
 80147dc:	4a2c      	ldr	r2, [pc, #176]	; (8014890 <maze_display+0x218>)
 80147de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147e2:	4619      	mov	r1, r3
 80147e4:	482b      	ldr	r0, [pc, #172]	; (8014894 <maze_display+0x21c>)
 80147e6:	f00b f98f 	bl	801fb08 <iprintf>
 80147ea:	e00c      	b.n	8014806 <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	1c5a      	adds	r2, r3, #1
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	3301      	adds	r3, #1
 80147f4:	011b      	lsls	r3, r3, #4
 80147f6:	4413      	add	r3, r2
 80147f8:	4a25      	ldr	r2, [pc, #148]	; (8014890 <maze_display+0x218>)
 80147fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147fe:	4619      	mov	r1, r3
 8014800:	4826      	ldr	r0, [pc, #152]	; (801489c <maze_display+0x224>)
 8014802:	f00b f981 	bl	801fb08 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	3301      	adds	r3, #1
 801480a:	603b      	str	r3, [r7, #0]
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	2b0e      	cmp	r3, #14
 8014810:	ddc9      	ble.n	80147a6 <maze_display+0x12e>
			}
		}
		printf("|\n");
 8014812:	4823      	ldr	r0, [pc, #140]	; (80148a0 <maze_display+0x228>)
 8014814:	f00b fa14 	bl	801fc40 <puts>
		if (tt <= -1) {
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	db2d      	blt.n	801487a <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801481e:	2300      	movs	r3, #0
 8014820:	603b      	str	r3, [r7, #0]
 8014822:	e01c      	b.n	801485e <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8014824:	4a1c      	ldr	r2, [pc, #112]	; (8014898 <maze_display+0x220>)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	332c      	adds	r3, #44	; 0x2c
 801482a:	005b      	lsls	r3, r3, #1
 801482c:	4413      	add	r3, r2
 801482e:	885b      	ldrh	r3, [r3, #2]
 8014830:	4619      	mov	r1, r3
 8014832:	2201      	movs	r2, #1
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	fa02 f303 	lsl.w	r3, r2, r3
 801483a:	ea01 0203 	and.w	r2, r1, r3
 801483e:	2101      	movs	r1, #1
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	fa01 f303 	lsl.w	r3, r1, r3
 8014846:	429a      	cmp	r2, r3
 8014848:	d103      	bne.n	8014852 <maze_display+0x1da>
				printf("+-----");
 801484a:	4816      	ldr	r0, [pc, #88]	; (80148a4 <maze_display+0x22c>)
 801484c:	f00b f95c 	bl	801fb08 <iprintf>
 8014850:	e002      	b.n	8014858 <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014852:	4815      	ldr	r0, [pc, #84]	; (80148a8 <maze_display+0x230>)
 8014854:	f00b f958 	bl	801fb08 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	3301      	adds	r3, #1
 801485c:	603b      	str	r3, [r7, #0]
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	2b0f      	cmp	r3, #15
 8014862:	dddf      	ble.n	8014824 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8014864:	4811      	ldr	r0, [pc, #68]	; (80148ac <maze_display+0x234>)
 8014866:	f00b f9eb 	bl	801fc40 <puts>
	for (tt = 14;tt >= -1;tt--){
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	3b01      	subs	r3, #1
 801486e:	607b      	str	r3, [r7, #4]
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014876:	da8a      	bge.n	801478e <maze_display+0x116>
 8014878:	e000      	b.n	801487c <maze_display+0x204>
			break;
 801487a:	bf00      	nop
	}

	printf(
 801487c:	480c      	ldr	r0, [pc, #48]	; (80148b0 <maze_display+0x238>)
 801487e:	f00b f9df 	bl	801fc40 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8014882:	bf00      	nop
 8014884:	3708      	adds	r7, #8
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}
 801488a:	bf00      	nop
 801488c:	08022468 	.word	0x08022468
 8014890:	20000d30 	.word	0x20000d30
 8014894:	080224cc 	.word	0x080224cc
 8014898:	20000c3c 	.word	0x20000c3c
 801489c:	080224d4 	.word	0x080224d4
 80148a0:	080224dc 	.word	0x080224dc
 80148a4:	080224e0 	.word	0x080224e0
 80148a8:	080224e8 	.word	0x080224e8
 80148ac:	080224f0 	.word	0x080224f0
 80148b0:	080224f4 	.word	0x080224f4

080148b4 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0

	int tt = 14;
 80148ba:	230e      	movs	r3, #14
 80148bc:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80148be:	2300      	movs	r3, #0
 80148c0:	603b      	str	r3, [r7, #0]

	printf(
 80148c2:	4865      	ldr	r0, [pc, #404]	; (8014a58 <maze_display_Dijkstra+0x1a4>)
 80148c4:	f00b f9bc 	bl	801fc40 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80148c8:	230e      	movs	r3, #14
 80148ca:	607b      	str	r3, [r7, #4]
 80148cc:	e06a      	b.n	80149a4 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 80148ce:	4863      	ldr	r0, [pc, #396]	; (8014a5c <maze_display_Dijkstra+0x1a8>)
 80148d0:	f00b f91a 	bl	801fb08 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80148d4:	2300      	movs	r3, #0
 80148d6:	603b      	str	r3, [r7, #0]
 80148d8:	e027      	b.n	801492a <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80148da:	4a61      	ldr	r2, [pc, #388]	; (8014a60 <maze_display_Dijkstra+0x1ac>)
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148e2:	4619      	mov	r1, r3
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	3301      	adds	r3, #1
 80148e8:	2201      	movs	r2, #1
 80148ea:	fa02 f303 	lsl.w	r3, r2, r3
 80148ee:	ea01 0203 	and.w	r2, r1, r3
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	3301      	adds	r3, #1
 80148f6:	2101      	movs	r1, #1
 80148f8:	fa01 f303 	lsl.w	r3, r1, r3
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d103      	bne.n	8014908 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8014900:	4858      	ldr	r0, [pc, #352]	; (8014a64 <maze_display_Dijkstra+0x1b0>)
 8014902:	f00b f901 	bl	801fb08 <iprintf>
 8014906:	e00d      	b.n	8014924 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	1c5a      	adds	r2, r3, #1
 801490c:	4956      	ldr	r1, [pc, #344]	; (8014a68 <maze_display_Dijkstra+0x1b4>)
 801490e:	4613      	mov	r3, r2
 8014910:	011b      	lsls	r3, r3, #4
 8014912:	1a9b      	subs	r3, r3, r2
 8014914:	683a      	ldr	r2, [r7, #0]
 8014916:	4413      	add	r3, r2
 8014918:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801491c:	4619      	mov	r1, r3
 801491e:	4853      	ldr	r0, [pc, #332]	; (8014a6c <maze_display_Dijkstra+0x1b8>)
 8014920:	f00b f8f2 	bl	801fb08 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	3301      	adds	r3, #1
 8014928:	603b      	str	r3, [r7, #0]
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	2b0e      	cmp	r3, #14
 801492e:	ddd4      	ble.n	80148da <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8014930:	484f      	ldr	r0, [pc, #316]	; (8014a70 <maze_display_Dijkstra+0x1bc>)
 8014932:	f00b f985 	bl	801fc40 <puts>
		if (tt <= -1) {
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2b00      	cmp	r3, #0
 801493a:	db38      	blt.n	80149ae <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801493c:	2300      	movs	r3, #0
 801493e:	603b      	str	r3, [r7, #0]
 8014940:	e027      	b.n	8014992 <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014942:	4a47      	ldr	r2, [pc, #284]	; (8014a60 <maze_display_Dijkstra+0x1ac>)
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	330c      	adds	r3, #12
 8014948:	005b      	lsls	r3, r3, #1
 801494a:	4413      	add	r3, r2
 801494c:	88db      	ldrh	r3, [r3, #6]
 801494e:	4619      	mov	r1, r3
 8014950:	2201      	movs	r2, #1
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	fa02 f303 	lsl.w	r3, r2, r3
 8014958:	ea01 0203 	and.w	r2, r1, r3
 801495c:	2101      	movs	r1, #1
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	fa01 f303 	lsl.w	r3, r1, r3
 8014964:	429a      	cmp	r2, r3
 8014966:	d103      	bne.n	8014970 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 8014968:	4842      	ldr	r0, [pc, #264]	; (8014a74 <maze_display_Dijkstra+0x1c0>)
 801496a:	f00b f8cd 	bl	801fb08 <iprintf>
 801496e:	e00d      	b.n	801498c <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014970:	493d      	ldr	r1, [pc, #244]	; (8014a68 <maze_display_Dijkstra+0x1b4>)
 8014972:	683a      	ldr	r2, [r7, #0]
 8014974:	4613      	mov	r3, r2
 8014976:	011b      	lsls	r3, r3, #4
 8014978:	1a9b      	subs	r3, r3, r2
 801497a:	687a      	ldr	r2, [r7, #4]
 801497c:	4413      	add	r3, r2
 801497e:	33f0      	adds	r3, #240	; 0xf0
 8014980:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014984:	4619      	mov	r1, r3
 8014986:	483c      	ldr	r0, [pc, #240]	; (8014a78 <maze_display_Dijkstra+0x1c4>)
 8014988:	f00b f8be 	bl	801fb08 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	3301      	adds	r3, #1
 8014990:	603b      	str	r3, [r7, #0]
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	2b0f      	cmp	r3, #15
 8014996:	ddd4      	ble.n	8014942 <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 8014998:	4838      	ldr	r0, [pc, #224]	; (8014a7c <maze_display_Dijkstra+0x1c8>)
 801499a:	f00b f951 	bl	801fc40 <puts>
	for (tt = 14;tt >= -1;tt--){
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	3b01      	subs	r3, #1
 80149a2:	607b      	str	r3, [r7, #4]
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149aa:	da90      	bge.n	80148ce <maze_display_Dijkstra+0x1a>
 80149ac:	e000      	b.n	80149b0 <maze_display_Dijkstra+0xfc>
			break;
 80149ae:	bf00      	nop

	}

	printf(
 80149b0:	4833      	ldr	r0, [pc, #204]	; (8014a80 <maze_display_Dijkstra+0x1cc>)
 80149b2:	f00b f945 	bl	801fc40 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 80149b6:	4828      	ldr	r0, [pc, #160]	; (8014a58 <maze_display_Dijkstra+0x1a4>)
 80149b8:	f00b f942 	bl	801fc40 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80149bc:	230e      	movs	r3, #14
 80149be:	607b      	str	r3, [r7, #4]
 80149c0:	e03c      	b.n	8014a3c <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 80149c2:	4826      	ldr	r0, [pc, #152]	; (8014a5c <maze_display_Dijkstra+0x1a8>)
 80149c4:	f00b f8a0 	bl	801fb08 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80149c8:	2300      	movs	r3, #0
 80149ca:	603b      	str	r3, [r7, #0]
 80149cc:	e010      	b.n	80149f0 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	1c5a      	adds	r2, r3, #1
 80149d2:	4925      	ldr	r1, [pc, #148]	; (8014a68 <maze_display_Dijkstra+0x1b4>)
 80149d4:	4613      	mov	r3, r2
 80149d6:	011b      	lsls	r3, r3, #4
 80149d8:	1a9b      	subs	r3, r3, r2
 80149da:	683a      	ldr	r2, [r7, #0]
 80149dc:	4413      	add	r3, r2
 80149de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80149e2:	4619      	mov	r1, r3
 80149e4:	4821      	ldr	r0, [pc, #132]	; (8014a6c <maze_display_Dijkstra+0x1b8>)
 80149e6:	f00b f88f 	bl	801fb08 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	3301      	adds	r3, #1
 80149ee:	603b      	str	r3, [r7, #0]
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	2b0e      	cmp	r3, #14
 80149f4:	ddeb      	ble.n	80149ce <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 80149f6:	481e      	ldr	r0, [pc, #120]	; (8014a70 <maze_display_Dijkstra+0x1bc>)
 80149f8:	f00b f922 	bl	801fc40 <puts>
		if (tt <= -1) {
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	db21      	blt.n	8014a46 <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014a02:	2300      	movs	r3, #0
 8014a04:	603b      	str	r3, [r7, #0]
 8014a06:	e010      	b.n	8014a2a <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014a08:	4917      	ldr	r1, [pc, #92]	; (8014a68 <maze_display_Dijkstra+0x1b4>)
 8014a0a:	683a      	ldr	r2, [r7, #0]
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	011b      	lsls	r3, r3, #4
 8014a10:	1a9b      	subs	r3, r3, r2
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	4413      	add	r3, r2
 8014a16:	33f0      	adds	r3, #240	; 0xf0
 8014a18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	4816      	ldr	r0, [pc, #88]	; (8014a78 <maze_display_Dijkstra+0x1c4>)
 8014a20:	f00b f872 	bl	801fb08 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	3301      	adds	r3, #1
 8014a28:	603b      	str	r3, [r7, #0]
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	2b0f      	cmp	r3, #15
 8014a2e:	ddeb      	ble.n	8014a08 <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 8014a30:	4812      	ldr	r0, [pc, #72]	; (8014a7c <maze_display_Dijkstra+0x1c8>)
 8014a32:	f00b f905 	bl	801fc40 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	3b01      	subs	r3, #1
 8014a3a:	607b      	str	r3, [r7, #4]
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a42:	dabe      	bge.n	80149c2 <maze_display_Dijkstra+0x10e>
 8014a44:	e000      	b.n	8014a48 <maze_display_Dijkstra+0x194>
			break;
 8014a46:	bf00      	nop

	}

	printf(
 8014a48:	480d      	ldr	r0, [pc, #52]	; (8014a80 <maze_display_Dijkstra+0x1cc>)
 8014a4a:	f00b f8f9 	bl	801fc40 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 8014a4e:	bf00      	nop
 8014a50:	3708      	adds	r7, #8
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	08022468 	.word	0x08022468
 8014a5c:	08022558 	.word	0x08022558
 8014a60:	20000c3c 	.word	0x20000c3c
 8014a64:	08022560 	.word	0x08022560
 8014a68:	20000f30 	.word	0x20000f30
 8014a6c:	08022568 	.word	0x08022568
 8014a70:	08022570 	.word	0x08022570
 8014a74:	080224e0 	.word	0x080224e0
 8014a78:	08022578 	.word	0x08022578
 8014a7c:	080224f0 	.word	0x080224f0
 8014a80:	080224f4 	.word	0x080224f4

08014a84 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b084      	sub	sp, #16
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8014a96:	2300      	movs	r3, #0
 8014a98:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8014a9a:	4b71      	ldr	r3, [pc, #452]	; (8014c60 <mode_decision+0x1dc>)
 8014a9c:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8014a9e:	79fb      	ldrb	r3, [r7, #7]
 8014aa0:	f003 030f 	and.w	r3, r3, #15
 8014aa4:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014aa6:	79fb      	ldrb	r3, [r7, #7]
 8014aa8:	091b      	lsrs	r3, r3, #4
 8014aaa:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014aac:	7bbb      	ldrb	r3, [r7, #14]
 8014aae:	011b      	lsls	r3, r3, #4
 8014ab0:	b2da      	uxtb	r2, r3
 8014ab2:	7bfb      	ldrb	r3, [r7, #15]
 8014ab4:	4413      	add	r3, r2
 8014ab6:	b2db      	uxtb	r3, r3
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7f2 fa61 	bl	8006f80 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8014abe:	e07f      	b.n	8014bc0 <mode_decision+0x13c>
				HAL_Delay(1);
 8014ac0:	2001      	movs	r0, #1
 8014ac2:	f003 f8cf 	bl	8017c64 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8014ac6:	4b67      	ldr	r3, [pc, #412]	; (8014c64 <mode_decision+0x1e0>)
 8014ac8:	edd3 7a00 	vldr	s15, [r3]
 8014acc:	ed97 7a02 	vldr	s14, [r7, #8]
 8014ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad8:	d813      	bhi.n	8014b02 <mode_decision+0x7e>
					if (main_modeR == 15) {
 8014ada:	7bfb      	ldrb	r3, [r7, #15]
 8014adc:	2b0f      	cmp	r3, #15
 8014ade:	d102      	bne.n	8014ae6 <mode_decision+0x62>
						main_modeR = 0;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	73fb      	strb	r3, [r7, #15]
 8014ae4:	e002      	b.n	8014aec <mode_decision+0x68>
					} else {
						main_modeR++;
 8014ae6:	7bfb      	ldrb	r3, [r7, #15]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014aec:	f7ec fa56 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014af0:	7bbb      	ldrb	r3, [r7, #14]
 8014af2:	011b      	lsls	r3, r3, #4
 8014af4:	b2da      	uxtb	r2, r3
 8014af6:	7bfb      	ldrb	r3, [r7, #15]
 8014af8:	4413      	add	r3, r2
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7f2 fa3f 	bl	8006f80 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8014b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8014b06:	eeb1 7a67 	vneg.f32	s14, s15
 8014b0a:	4b56      	ldr	r3, [pc, #344]	; (8014c64 <mode_decision+0x1e0>)
 8014b0c:	edd3 7a00 	vldr	s15, [r3]
 8014b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	db13      	blt.n	8014b42 <mode_decision+0xbe>
					if (main_modeR == 0) {
 8014b1a:	7bfb      	ldrb	r3, [r7, #15]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d102      	bne.n	8014b26 <mode_decision+0xa2>
						main_modeR = 15;
 8014b20:	230f      	movs	r3, #15
 8014b22:	73fb      	strb	r3, [r7, #15]
 8014b24:	e002      	b.n	8014b2c <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8014b26:	7bfb      	ldrb	r3, [r7, #15]
 8014b28:	3b01      	subs	r3, #1
 8014b2a:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014b2c:	f7ec fa36 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014b30:	7bbb      	ldrb	r3, [r7, #14]
 8014b32:	011b      	lsls	r3, r3, #4
 8014b34:	b2da      	uxtb	r2, r3
 8014b36:	7bfb      	ldrb	r3, [r7, #15]
 8014b38:	4413      	add	r3, r2
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7f2 fa1f 	bl	8006f80 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8014b42:	4b49      	ldr	r3, [pc, #292]	; (8014c68 <mode_decision+0x1e4>)
 8014b44:	edd3 7a00 	vldr	s15, [r3]
 8014b48:	ed97 7a02 	vldr	s14, [r7, #8]
 8014b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b54:	d813      	bhi.n	8014b7e <mode_decision+0xfa>
					if (main_modeL == 15) {
 8014b56:	7bbb      	ldrb	r3, [r7, #14]
 8014b58:	2b0f      	cmp	r3, #15
 8014b5a:	d102      	bne.n	8014b62 <mode_decision+0xde>
						main_modeL = 0;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	73bb      	strb	r3, [r7, #14]
 8014b60:	e002      	b.n	8014b68 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8014b62:	7bbb      	ldrb	r3, [r7, #14]
 8014b64:	3301      	adds	r3, #1
 8014b66:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014b68:	f7ec fa18 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014b6c:	7bbb      	ldrb	r3, [r7, #14]
 8014b6e:	011b      	lsls	r3, r3, #4
 8014b70:	b2da      	uxtb	r2, r3
 8014b72:	7bfb      	ldrb	r3, [r7, #15]
 8014b74:	4413      	add	r3, r2
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7f2 fa01 	bl	8006f80 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8014b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8014b82:	eeb1 7a67 	vneg.f32	s14, s15
 8014b86:	4b38      	ldr	r3, [pc, #224]	; (8014c68 <mode_decision+0x1e4>)
 8014b88:	edd3 7a00 	vldr	s15, [r3]
 8014b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b94:	da00      	bge.n	8014b98 <mode_decision+0x114>
 8014b96:	e013      	b.n	8014bc0 <mode_decision+0x13c>
					if (main_modeL == 0) {
 8014b98:	7bbb      	ldrb	r3, [r7, #14]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d102      	bne.n	8014ba4 <mode_decision+0x120>
						main_modeL = 15;
 8014b9e:	230f      	movs	r3, #15
 8014ba0:	73bb      	strb	r3, [r7, #14]
 8014ba2:	e002      	b.n	8014baa <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8014ba4:	7bbb      	ldrb	r3, [r7, #14]
 8014ba6:	3b01      	subs	r3, #1
 8014ba8:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014baa:	f7ec f9f7 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014bae:	7bbb      	ldrb	r3, [r7, #14]
 8014bb0:	011b      	lsls	r3, r3, #4
 8014bb2:	b2da      	uxtb	r2, r3
 8014bb4:	7bfb      	ldrb	r3, [r7, #15]
 8014bb6:	4413      	add	r3, r2
 8014bb8:	b2db      	uxtb	r3, r3
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7f2 f9e0 	bl	8006f80 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8014bc0:	4b2a      	ldr	r3, [pc, #168]	; (8014c6c <mode_decision+0x1e8>)
 8014bc2:	edd3 7a00 	vldr	s15, [r3]
 8014bc6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8014c70 <mode_decision+0x1ec>
 8014bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd2:	f67f af75 	bls.w	8014ac0 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8014bd6:	f7f2 f999 	bl	8006f0c <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8014bda:	2001      	movs	r0, #1
 8014bdc:	f7f2 fa80 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014be0:	2001      	movs	r0, #1
 8014be2:	f7f2 fa8f 	bl	8007104 <pl_l_blue_LED>
			HAL_Delay(1000);
 8014be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014bea:	f003 f83b 	bl	8017c64 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8014bee:	e011      	b.n	8014c14 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8014bf0:	4b1e      	ldr	r3, [pc, #120]	; (8014c6c <mode_decision+0x1e8>)
 8014bf2:	edd3 7a00 	vldr	s15, [r3]
 8014bf6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8014c70 <mode_decision+0x1ec>
 8014bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c02:	db04      	blt.n	8014c0e <mode_decision+0x18a>
					main_modeL = 0;
 8014c04:	2300      	movs	r3, #0
 8014c06:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	73fb      	strb	r3, [r7, #15]
					break;
 8014c0c:	e013      	b.n	8014c36 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8014c0e:	2001      	movs	r0, #1
 8014c10:	f003 f828 	bl	8017c64 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8014c14:	4b17      	ldr	r3, [pc, #92]	; (8014c74 <mode_decision+0x1f0>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c1c:	dde8      	ble.n	8014bf0 <mode_decision+0x16c>
 8014c1e:	4b15      	ldr	r3, [pc, #84]	; (8014c74 <mode_decision+0x1f0>)
 8014c20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014c24:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c28:	dde2      	ble.n	8014bf0 <mode_decision+0x16c>
 8014c2a:	4b12      	ldr	r3, [pc, #72]	; (8014c74 <mode_decision+0x1f0>)
 8014c2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014c30:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c34:	dddc      	ble.n	8014bf0 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8014c36:	2000      	movs	r0, #0
 8014c38:	f7f2 fa52 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014c3c:	2000      	movs	r0, #0
 8014c3e:	f7f2 fa61 	bl	8007104 <pl_l_blue_LED>
			pl_yellow_LED_off();
 8014c42:	f7f2 f963 	bl	8006f0c <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8014c46:	7bbb      	ldrb	r3, [r7, #14]
 8014c48:	011b      	lsls	r3, r3, #4
 8014c4a:	b25a      	sxtb	r2, r3
 8014c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c50:	4313      	orrs	r3, r2
 8014c52:	b25b      	sxtb	r3, r3
 8014c54:	737b      	strb	r3, [r7, #13]

return main_mode;
 8014c56:	7b7b      	ldrb	r3, [r7, #13]
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3710      	adds	r7, #16
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}
 8014c60:	41200000 	.word	0x41200000
 8014c64:	20000224 	.word	0x20000224
 8014c68:	20000220 	.word	0x20000220
 8014c6c:	20000270 	.word	0x20000270
 8014c70:	43c80000 	.word	0x43c80000
 8014c74:	200002b8 	.word	0x200002b8

08014c78 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8014c78:	b590      	push	{r4, r7, lr}
 8014c7a:	b0d7      	sub	sp, #348	; 0x15c
 8014c7c:	af52      	add	r7, sp, #328	; 0x148
 8014c7e:	4603      	mov	r3, r0
 8014c80:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014c82:	2300      	movs	r3, #0
 8014c84:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014c86:	2300      	movs	r3, #0
 8014c88:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8014c8a:	79fb      	ldrb	r3, [r7, #7]
 8014c8c:	f003 030f 	and.w	r3, r3, #15
 8014c90:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014c92:	79fb      	ldrb	r3, [r7, #7]
 8014c94:	091b      	lsrs	r3, r3, #4
 8014c96:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8014c98:	7bbb      	ldrb	r3, [r7, #14]
 8014c9a:	2b0f      	cmp	r3, #15
 8014c9c:	d86c      	bhi.n	8014d78 <mode_execution+0x100>
 8014c9e:	a201      	add	r2, pc, #4	; (adr r2, 8014ca4 <mode_execution+0x2c>)
 8014ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ca4:	08014ce5 	.word	0x08014ce5
 8014ca8:	08014cef 	.word	0x08014cef
 8014cac:	08014d77 	.word	0x08014d77
 8014cb0:	08014cf9 	.word	0x08014cf9
 8014cb4:	08014d03 	.word	0x08014d03
 8014cb8:	08014d0d 	.word	0x08014d0d
 8014cbc:	08014d3d 	.word	0x08014d3d
 8014cc0:	08014d47 	.word	0x08014d47
 8014cc4:	08014d77 	.word	0x08014d77
 8014cc8:	08014d77 	.word	0x08014d77
 8014ccc:	08014d77 	.word	0x08014d77
 8014cd0:	08014d77 	.word	0x08014d77
 8014cd4:	08014d77 	.word	0x08014d77
 8014cd8:	08014d77 	.word	0x08014d77
 8014cdc:	08014d77 	.word	0x08014d77
 8014ce0:	08014d77 	.word	0x08014d77
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8014ce4:	7bfb      	ldrb	r3, [r7, #15]
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f000 f84e 	bl	8014d88 <mode_PLtest>
	break;
 8014cec:	e044      	b.n	8014d78 <mode_execution+0x100>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8014cee:	7bfb      	ldrb	r3, [r7, #15]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f000 fa09 	bl	8015108 <mode_Running>
	break;
 8014cf6:	e03f      	b.n	8014d78 <mode_execution+0x100>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8014cf8:	7bfb      	ldrb	r3, [r7, #15]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f000 fb86 	bl	801540c <mode_Tuning0>
	break;
 8014d00:	e03a      	b.n	8014d78 <mode_execution+0x100>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8014d02:	7bfb      	ldrb	r3, [r7, #15]
 8014d04:	4618      	mov	r0, r3
 8014d06:	f000 fe9f 	bl	8015a48 <mode_WallSensorTuning>
	break;
 8014d0a:	e035      	b.n	8014d78 <mode_execution+0x100>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8014d0c:	7bfb      	ldrb	r3, [r7, #15]
 8014d0e:	4c1c      	ldr	r4, [pc, #112]	; (8014d80 <mode_execution+0x108>)
 8014d10:	2201      	movs	r2, #1
 8014d12:	9251      	str	r2, [sp, #324]	; 0x144
 8014d14:	2200      	movs	r2, #0
 8014d16:	9250      	str	r2, [sp, #320]	; 0x140
 8014d18:	2201      	movs	r2, #1
 8014d1a:	924f      	str	r2, [sp, #316]	; 0x13c
 8014d1c:	934e      	str	r3, [sp, #312]	; 0x138
 8014d1e:	4668      	mov	r0, sp
 8014d20:	f104 0310 	add.w	r3, r4, #16
 8014d24:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014d28:	4619      	mov	r1, r3
 8014d2a:	f00a fa6d 	bl	801f208 <memcpy>
 8014d2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d32:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8014d84 <mode_execution+0x10c>
 8014d36:	f7f8 ffb7 	bl	800dca8 <testturning>
	break;
 8014d3a:	e01d      	b.n	8014d78 <mode_execution+0x100>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8014d3c:	7bfb      	ldrb	r3, [r7, #15]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f001 f8c0 	bl	8015ec4 <mode_WallSensorTuning_fast>
	break;
 8014d44:	e018      	b.n	8014d78 <mode_execution+0x100>
	case 0b0111:
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8014d46:	7bfb      	ldrb	r3, [r7, #15]
 8014d48:	4c0d      	ldr	r4, [pc, #52]	; (8014d80 <mode_execution+0x108>)
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	9251      	str	r2, [sp, #324]	; 0x144
 8014d4e:	2200      	movs	r2, #0
 8014d50:	9250      	str	r2, [sp, #320]	; 0x140
 8014d52:	2201      	movs	r2, #1
 8014d54:	924f      	str	r2, [sp, #316]	; 0x13c
 8014d56:	934e      	str	r3, [sp, #312]	; 0x138
 8014d58:	4668      	mov	r0, sp
 8014d5a:	f104 0310 	add.w	r3, r4, #16
 8014d5e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014d62:	4619      	mov	r1, r3
 8014d64:	f00a fa50 	bl	801f208 <memcpy>
 8014d68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d6c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8014d84 <mode_execution+0x10c>
 8014d70:	f7f8 ff9a 	bl	800dca8 <testturning>
	break;
 8014d74:	e000      	b.n	8014d78 <mode_execution+0x100>
	break;
 8014d76:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8014d78:	bf00      	nop
 8014d7a:	3714      	adds	r7, #20
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bd90      	pop	{r4, r7, pc}
 8014d80:	2000df08 	.word	0x2000df08
 8014d84:	3f028f5c 	.word	0x3f028f5c

08014d88 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8014d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014d8c:	b092      	sub	sp, #72	; 0x48
 8014d8e:	af0a      	add	r7, sp, #40	; 0x28
 8014d90:	4603      	mov	r3, r0
 8014d92:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8014d94:	2300      	movs	r3, #0
 8014d96:	61fb      	str	r3, [r7, #28]
 8014d98:	2300      	movs	r3, #0
 8014d9a:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8014d9c:	7dfb      	ldrb	r3, [r7, #23]
 8014d9e:	2b0f      	cmp	r3, #15
 8014da0:	f200 819f 	bhi.w	80150e2 <mode_PLtest+0x35a>
 8014da4:	a201      	add	r2, pc, #4	; (adr r2, 8014dac <mode_PLtest+0x24>)
 8014da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014daa:	bf00      	nop
 8014dac:	080150e1 	.word	0x080150e1
 8014db0:	08014ded 	.word	0x08014ded
 8014db4:	08014e1f 	.word	0x08014e1f
 8014db8:	08014e9b 	.word	0x08014e9b
 8014dbc:	08014eff 	.word	0x08014eff
 8014dc0:	08014f7f 	.word	0x08014f7f
 8014dc4:	08014f85 	.word	0x08014f85
 8014dc8:	080150e3 	.word	0x080150e3
 8014dcc:	080150e3 	.word	0x080150e3
 8014dd0:	0801500b 	.word	0x0801500b
 8014dd4:	08015073 	.word	0x08015073
 8014dd8:	080150e3 	.word	0x080150e3
 8014ddc:	080150e3 	.word	0x080150e3
 8014de0:	080150e3 	.word	0x080150e3
 8014de4:	080150e3 	.word	0x080150e3
 8014de8:	080150db 	.word	0x080150db
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014dec:	4bbf      	ldr	r3, [pc, #764]	; (80150ec <mode_PLtest+0x364>)
 8014dee:	6819      	ldr	r1, [r3, #0]
 8014df0:	4bbe      	ldr	r3, [pc, #760]	; (80150ec <mode_PLtest+0x364>)
 8014df2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014df4:	4bbd      	ldr	r3, [pc, #756]	; (80150ec <mode_PLtest+0x364>)
 8014df6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8014dfa:	4bbc      	ldr	r3, [pc, #752]	; (80150ec <mode_PLtest+0x364>)
 8014dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014e00:	4aba      	ldr	r2, [pc, #744]	; (80150ec <mode_PLtest+0x364>)
 8014e02:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8014e06:	9201      	str	r2, [sp, #4]
 8014e08:	9300      	str	r3, [sp, #0]
 8014e0a:	4623      	mov	r3, r4
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	48b8      	ldr	r0, [pc, #736]	; (80150f0 <mode_PLtest+0x368>)
 8014e10:	f00a fe7a 	bl	801fb08 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8014e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014e18:	f7f3 f8f2 	bl	8008000 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014e1c:	e7e6      	b.n	8014dec <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8014e1e:	2001      	movs	r0, #1
 8014e20:	f7f2 f95e 	bl	80070e0 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014e24:	2001      	movs	r0, #1
 8014e26:	f7f2 f96d 	bl	8007104 <pl_l_blue_LED>
		record_mode = 1;
 8014e2a:	4bb2      	ldr	r3, [pc, #712]	; (80150f4 <mode_PLtest+0x36c>)
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8014e30:	f44f 7161 	mov.w	r1, #900	; 0x384
 8014e34:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014e38:	f7f2 fe6a 	bl	8007b10 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8014e3c:	2001      	movs	r0, #1
 8014e3e:	f7f2 fe25 	bl	8007a8c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8014e42:	2001      	movs	r0, #1
 8014e44:	f7f2 fdfa 	bl	8007a3c <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8014e48:	f7f2 fe46 	bl	8007ad8 <pl_DriveMotor_start>
		wait_ms(2500);
 8014e4c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014e50:	f7f3 f8d6 	bl	8008000 <wait_ms>
		pl_DriveMotor_stop();
 8014e54:	f7f2 fe4e 	bl	8007af4 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014e58:	2000      	movs	r0, #0
 8014e5a:	f7f2 f941 	bl	80070e0 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014e5e:	2000      	movs	r0, #0
 8014e60:	f7f2 f950 	bl	8007104 <pl_l_blue_LED>
		record_mode = 0;
 8014e64:	4ba3      	ldr	r3, [pc, #652]	; (80150f4 <mode_PLtest+0x36c>)
 8014e66:	2200      	movs	r2, #0
 8014e68:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014e6a:	e002      	b.n	8014e72 <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014e6c:	2001      	movs	r0, #1
 8014e6e:	f7f3 f8c7 	bl	8008000 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014e72:	4b9e      	ldr	r3, [pc, #632]	; (80150ec <mode_PLtest+0x364>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014e7a:	ddf7      	ble.n	8014e6c <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014e7c:	4b9b      	ldr	r3, [pc, #620]	; (80150ec <mode_PLtest+0x364>)
 8014e7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014e82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014e86:	ddf1      	ble.n	8014e6c <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014e88:	4b98      	ldr	r3, [pc, #608]	; (80150ec <mode_PLtest+0x364>)
 8014e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014e8e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014e92:	ddeb      	ble.n	8014e6c <mode_PLtest+0xe4>
		}
		record_print();
 8014e94:	f001 fac8 	bl	8016428 <record_print>
		break;
 8014e98:	e123      	b.n	80150e2 <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 8014e9a:	f7ec fc15 	bl	80016c8 <reset_gyro>
		reset_speed();
 8014e9e:	f7ec f8bb 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 8014ea2:	2001      	movs	r0, #1
 8014ea4:	f7f2 f91c 	bl	80070e0 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014ea8:	2001      	movs	r0, #1
 8014eaa:	f7f2 f92b 	bl	8007104 <pl_l_blue_LED>
		record_mode = 2;
 8014eae:	4b91      	ldr	r3, [pc, #580]	; (80150f4 <mode_PLtest+0x36c>)
 8014eb0:	2202      	movs	r2, #2
 8014eb2:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8014eb4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014eb8:	f7f3 f8a2 	bl	8008000 <wait_ms>
		pl_r_blue_LED(OFF);
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	f7f2 f90f 	bl	80070e0 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014ec2:	2000      	movs	r0, #0
 8014ec4:	f7f2 f91e 	bl	8007104 <pl_l_blue_LED>
		record_mode = 0;
 8014ec8:	4b8a      	ldr	r3, [pc, #552]	; (80150f4 <mode_PLtest+0x36c>)
 8014eca:	2200      	movs	r2, #0
 8014ecc:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014ece:	e002      	b.n	8014ed6 <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014ed0:	2001      	movs	r0, #1
 8014ed2:	f7f3 f895 	bl	8008000 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014ed6:	4b85      	ldr	r3, [pc, #532]	; (80150ec <mode_PLtest+0x364>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014ede:	ddf7      	ble.n	8014ed0 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014ee0:	4b82      	ldr	r3, [pc, #520]	; (80150ec <mode_PLtest+0x364>)
 8014ee2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014ee6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014eea:	ddf1      	ble.n	8014ed0 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014eec:	4b7f      	ldr	r3, [pc, #508]	; (80150ec <mode_PLtest+0x364>)
 8014eee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014ef2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014ef6:	ddeb      	ble.n	8014ed0 <mode_PLtest+0x148>
		}
		record_print();
 8014ef8:	f001 fa96 	bl	8016428 <record_print>
		break;
 8014efc:	e0f1      	b.n	80150e2 <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014efe:	4b7e      	ldr	r3, [pc, #504]	; (80150f8 <mode_PLtest+0x370>)
 8014f00:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7eb fb48 	bl	8000598 <__aeabi_f2d>
 8014f08:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014f0c:	4b7a      	ldr	r3, [pc, #488]	; (80150f8 <mode_PLtest+0x370>)
 8014f0e:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7eb fb41 	bl	8000598 <__aeabi_f2d>
 8014f16:	4604      	mov	r4, r0
 8014f18:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014f1a:	4b77      	ldr	r3, [pc, #476]	; (80150f8 <mode_PLtest+0x370>)
 8014f1c:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7eb fb3a 	bl	8000598 <__aeabi_f2d>
 8014f24:	4680      	mov	r8, r0
 8014f26:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014f28:	4b73      	ldr	r3, [pc, #460]	; (80150f8 <mode_PLtest+0x370>)
 8014f2a:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7eb fb33 	bl	8000598 <__aeabi_f2d>
 8014f32:	4682      	mov	sl, r0
 8014f34:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014f36:	4b70      	ldr	r3, [pc, #448]	; (80150f8 <mode_PLtest+0x370>)
 8014f38:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7eb fb2c 	bl	8000598 <__aeabi_f2d>
 8014f40:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014f44:	4b6c      	ldr	r3, [pc, #432]	; (80150f8 <mode_PLtest+0x370>)
 8014f46:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7eb fb25 	bl	8000598 <__aeabi_f2d>
 8014f4e:	4602      	mov	r2, r0
 8014f50:	460b      	mov	r3, r1
 8014f52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014f56:	ed97 7b00 	vldr	d7, [r7]
 8014f5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014f5e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8014f62:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014f66:	e9cd 4500 	strd	r4, r5, [sp]
 8014f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014f6e:	4863      	ldr	r0, [pc, #396]	; (80150fc <mode_PLtest+0x374>)
 8014f70:	f00a fdca 	bl	801fb08 <iprintf>
			wait_ms(500);
 8014f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014f78:	f7f3 f842 	bl	8008000 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014f7c:	e7bf      	b.n	8014efe <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8014f7e:	f7f2 f9ff 	bl	8007380 <test_flash>
		break;
 8014f82:	e0ae      	b.n	80150e2 <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 8014f84:	4b5b      	ldr	r3, [pc, #364]	; (80150f4 <mode_PLtest+0x36c>)
 8014f86:	2206      	movs	r2, #6
 8014f88:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8014f8a:	2001      	movs	r0, #1
 8014f8c:	f7f2 f8a8 	bl	80070e0 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014f90:	2001      	movs	r0, #1
 8014f92:	f7f2 f8b7 	bl	8007104 <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8014f96:	f107 0218 	add.w	r2, r7, #24
 8014f9a:	f107 031c 	add.w	r3, r7, #28
 8014f9e:	4611      	mov	r1, r2
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8014fa6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014faa:	f7ec fef3 	bl	8001d94 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	69ba      	ldr	r2, [r7, #24]
 8014fb2:	4611      	mov	r1, r2
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7f2 fdab 	bl	8007b10 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8014fba:	f7f2 fd8d 	bl	8007ad8 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014fbe:	e00a      	b.n	8014fd6 <mode_PLtest+0x24e>
			wait_ms(1);
 8014fc0:	2001      	movs	r0, #1
 8014fc2:	f7f3 f81d 	bl	8008000 <wait_ms>
			if(record_rupe_flag==1){
 8014fc6:	4b4e      	ldr	r3, [pc, #312]	; (8015100 <mode_PLtest+0x378>)
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	2b01      	cmp	r3, #1
 8014fcc:	d103      	bne.n	8014fd6 <mode_PLtest+0x24e>
				record_mode=0;
 8014fce:	4b49      	ldr	r3, [pc, #292]	; (80150f4 <mode_PLtest+0x36c>)
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	701a      	strb	r2, [r3, #0]
				break;
 8014fd4:	e010      	b.n	8014ff8 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014fd6:	4b45      	ldr	r3, [pc, #276]	; (80150ec <mode_PLtest+0x364>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014fde:	ddef      	ble.n	8014fc0 <mode_PLtest+0x238>
 8014fe0:	4b42      	ldr	r3, [pc, #264]	; (80150ec <mode_PLtest+0x364>)
 8014fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014fe6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014fea:	dde9      	ble.n	8014fc0 <mode_PLtest+0x238>
 8014fec:	4b3f      	ldr	r3, [pc, #252]	; (80150ec <mode_PLtest+0x364>)
 8014fee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014ff2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014ff6:	dde3      	ble.n	8014fc0 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8014ff8:	f7f2 fd7c 	bl	8007af4 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014ffc:	2000      	movs	r0, #0
 8014ffe:	f7f2 f86f 	bl	80070e0 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015002:	2000      	movs	r0, #0
 8015004:	f7f2 f87e 	bl	8007104 <pl_l_blue_LED>

		break;
 8015008:	e06b      	b.n	80150e2 <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 801500a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801500e:	f7f2 fda9 	bl	8007b64 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015012:	f7f2 fd93 	bl	8007b3c <pl_FunMotor_start>
			HAL_Delay(2000);
 8015016:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801501a:	f002 fe23 	bl	8017c64 <HAL_Delay>
			reset_gyro();
 801501e:	f7ec fb53 	bl	80016c8 <reset_gyro>
			reset_speed();
 8015022:	f7eb fff9 	bl	8001018 <reset_speed>
			clear_Ierror();
 8015026:	f7ef fba5 	bl	8004774 <clear_Ierror>
			pl_r_blue_LED(ON);
 801502a:	2001      	movs	r0, #1
 801502c:	f7f2 f858 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015030:	2001      	movs	r0, #1
 8015032:	f7f2 f867 	bl	8007104 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015036:	e002      	b.n	801503e <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8015038:	2001      	movs	r0, #1
 801503a:	f002 fe13 	bl	8017c64 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801503e:	4b2b      	ldr	r3, [pc, #172]	; (80150ec <mode_PLtest+0x364>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015046:	ddf7      	ble.n	8015038 <mode_PLtest+0x2b0>
 8015048:	4b28      	ldr	r3, [pc, #160]	; (80150ec <mode_PLtest+0x364>)
 801504a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801504e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015052:	ddf1      	ble.n	8015038 <mode_PLtest+0x2b0>
 8015054:	4b25      	ldr	r3, [pc, #148]	; (80150ec <mode_PLtest+0x364>)
 8015056:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801505a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801505e:	ddeb      	ble.n	8015038 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8015060:	2000      	movs	r0, #0
 8015062:	f7f2 f83d 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015066:	2000      	movs	r0, #0
 8015068:	f7f2 f84c 	bl	8007104 <pl_l_blue_LED>
			pl_FunMotor_stop();
 801506c:	f7f2 fd70 	bl	8007b50 <pl_FunMotor_stop>
		break;
 8015070:	e037      	b.n	80150e2 <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8015072:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8015104 <mode_PLtest+0x37c>
 8015076:	f7f2 fd75 	bl	8007b64 <pl_FunMotor_duty>
			pl_FunMotor_start();
 801507a:	f7f2 fd5f 	bl	8007b3c <pl_FunMotor_start>
			HAL_Delay(2000);
 801507e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015082:	f002 fdef 	bl	8017c64 <HAL_Delay>
			reset_gyro();
 8015086:	f7ec fb1f 	bl	80016c8 <reset_gyro>
			reset_speed();
 801508a:	f7eb ffc5 	bl	8001018 <reset_speed>
			clear_Ierror();
 801508e:	f7ef fb71 	bl	8004774 <clear_Ierror>
			pl_r_blue_LED(ON);
 8015092:	2001      	movs	r0, #1
 8015094:	f7f2 f824 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015098:	2001      	movs	r0, #1
 801509a:	f7f2 f833 	bl	8007104 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801509e:	e002      	b.n	80150a6 <mode_PLtest+0x31e>
				HAL_Delay(1);
 80150a0:	2001      	movs	r0, #1
 80150a2:	f002 fddf 	bl	8017c64 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80150a6:	4b11      	ldr	r3, [pc, #68]	; (80150ec <mode_PLtest+0x364>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80150ae:	ddf7      	ble.n	80150a0 <mode_PLtest+0x318>
 80150b0:	4b0e      	ldr	r3, [pc, #56]	; (80150ec <mode_PLtest+0x364>)
 80150b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80150b6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80150ba:	ddf1      	ble.n	80150a0 <mode_PLtest+0x318>
 80150bc:	4b0b      	ldr	r3, [pc, #44]	; (80150ec <mode_PLtest+0x364>)
 80150be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80150c2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80150c6:	ddeb      	ble.n	80150a0 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 80150c8:	2000      	movs	r0, #0
 80150ca:	f7f2 f809 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80150ce:	2000      	movs	r0, #0
 80150d0:	f7f2 f818 	bl	8007104 <pl_l_blue_LED>
			pl_FunMotor_stop();
 80150d4:	f7f2 fd3c 	bl	8007b50 <pl_FunMotor_stop>
		break;
 80150d8:	e003      	b.n	80150e2 <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 80150da:	f001 f9a5 	bl	8016428 <record_print>
		break;
 80150de:	e000      	b.n	80150e2 <mode_PLtest+0x35a>
		break;
 80150e0:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 80150e2:	bf00      	nop
 80150e4:	3720      	adds	r7, #32
 80150e6:	46bd      	mov	sp, r7
 80150e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80150ec:	200002b8 	.word	0x200002b8
 80150f0:	08022580 	.word	0x08022580
 80150f4:	2000d970 	.word	0x2000d970
 80150f8:	200006e4 	.word	0x200006e4
 80150fc:	080225ac 	.word	0x080225ac
 8015100:	2000d97c 	.word	0x2000d97c
 8015104:	3f7d70a4 	.word	0x3f7d70a4

08015108 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8015108:	b5b0      	push	{r4, r5, r7, lr}
 801510a:	b0da      	sub	sp, #360	; 0x168
 801510c:	af54      	add	r7, sp, #336	; 0x150
 801510e:	4603      	mov	r3, r0
 8015110:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015112:	2003      	movs	r0, #3
 8015114:	f7f2 fc92 	bl	8007a3c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015118:	2003      	movs	r0, #3
 801511a:	f7f2 fcb7 	bl	8007a8c <pl_R_DriveMotor_mode>
	reset_gyro();
 801511e:	f7ec fad3 	bl	80016c8 <reset_gyro>
	reset_speed();
 8015122:	f7eb ff79 	bl	8001018 <reset_speed>
	reset_distance();
 8015126:	f7eb ff39 	bl	8000f9c <reset_distance>
	clear_Ierror();
 801512a:	f7ef fb23 	bl	8004774 <clear_Ierror>
	switch (main_modeR) {
 801512e:	79fb      	ldrb	r3, [r7, #7]
 8015130:	2b0f      	cmp	r3, #15
 8015132:	f200 8149 	bhi.w	80153c8 <mode_Running+0x2c0>
 8015136:	a201      	add	r2, pc, #4	; (adr r2, 801513c <mode_Running+0x34>)
 8015138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801513c:	0801517d 	.word	0x0801517d
 8015140:	0801522d 	.word	0x0801522d
 8015144:	08015265 	.word	0x08015265
 8015148:	0801526b 	.word	0x0801526b
 801514c:	080152a3 	.word	0x080152a3
 8015150:	080152d5 	.word	0x080152d5
 8015154:	08015307 	.word	0x08015307
 8015158:	08015339 	.word	0x08015339
 801515c:	0801536b 	.word	0x0801536b
 8015160:	08015371 	.word	0x08015371
 8015164:	08015377 	.word	0x08015377
 8015168:	0801537d 	.word	0x0801537d
 801516c:	08015383 	.word	0x08015383
 8015170:	08015389 	.word	0x08015389
 8015174:	0801538f 	.word	0x0801538f
 8015178:	08015395 	.word	0x08015395
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 801517c:	f7fe feda 	bl	8013f34 <create_StepCountMap_queue>
			maze_display();
 8015180:	f7ff fa7a 	bl	8014678 <maze_display>

			create_DijkstraMap();
 8015184:	f7fc faf8 	bl	8011778 <create_DijkstraMap>
			maze_display_Dijkstra();
 8015188:	f7ff fb94 	bl	80148b4 <maze_display_Dijkstra>

			route_Dijkstra();
 801518c:	f7fe f820 	bl	80131d0 <route_Dijkstra>
			create_StepCountMap_unknown();
 8015190:	f7fe fcf2 	bl	8013b78 <create_StepCountMap_unknown>
			maze_display();
 8015194:	f7ff fa70 	bl	8014678 <maze_display>

			tic_timer();
 8015198:	f7f2 ff04 	bl	8007fa4 <tic_timer>
			for(int j=0;j<5000;j++){
 801519c:	2300      	movs	r3, #0
 801519e:	617b      	str	r3, [r7, #20]
 80151a0:	e004      	b.n	80151ac <mode_Running+0xa4>
			create_StepCountMap_queue();
 80151a2:	f7fe fec7 	bl	8013f34 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	3301      	adds	r3, #1
 80151aa:	617b      	str	r3, [r7, #20]
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	f241 3287 	movw	r2, #4999	; 0x1387
 80151b2:	4293      	cmp	r3, r2
 80151b4:	ddf5      	ble.n	80151a2 <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 80151b6:	f7f2 ff07 	bl	8007fc8 <toc_timer>
 80151ba:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 80151be:	f7ff fa5b 	bl	8014678 <maze_display>
			printf("tim2=%f\n", tim2);
 80151c2:	68f8      	ldr	r0, [r7, #12]
 80151c4:	f7eb f9e8 	bl	8000598 <__aeabi_f2d>
 80151c8:	4602      	mov	r2, r0
 80151ca:	460b      	mov	r3, r1
 80151cc:	4880      	ldr	r0, [pc, #512]	; (80153d0 <mode_Running+0x2c8>)
 80151ce:	f00a fc9b 	bl	801fb08 <iprintf>
			tic_timer();
 80151d2:	f7f2 fee7 	bl	8007fa4 <tic_timer>
			create_DijkstraMap();
 80151d6:	f7fc facf 	bl	8011778 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 80151da:	2300      	movs	r3, #0
 80151dc:	613b      	str	r3, [r7, #16]
 80151de:	e006      	b.n	80151ee <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 80151e0:	f7fd fff6 	bl	80131d0 <route_Dijkstra>
			create_StepCountMap_unknown();
 80151e4:	f7fe fcc8 	bl	8013b78 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	3301      	adds	r3, #1
 80151ec:	613b      	str	r3, [r7, #16]
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80151f4:	4293      	cmp	r3, r2
 80151f6:	ddf3      	ble.n	80151e0 <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 80151f8:	f7f2 fee6 	bl	8007fc8 <toc_timer>
 80151fc:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8015200:	f7ff fa3a 	bl	8014678 <maze_display>
			maze_display_Dijkstra();
 8015204:	f7ff fb56 	bl	80148b4 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8015208:	68b8      	ldr	r0, [r7, #8]
 801520a:	f7eb f9c5 	bl	8000598 <__aeabi_f2d>
 801520e:	4604      	mov	r4, r0
 8015210:	460d      	mov	r5, r1
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f7eb f9c0 	bl	8000598 <__aeabi_f2d>
 8015218:	4602      	mov	r2, r0
 801521a:	460b      	mov	r3, r1
 801521c:	e9cd 2300 	strd	r2, r3, [sp]
 8015220:	4622      	mov	r2, r4
 8015222:	462b      	mov	r3, r5
 8015224:	486b      	ldr	r0, [pc, #428]	; (80153d4 <mode_Running+0x2cc>)
 8015226:	f00a fc6f 	bl	801fb08 <iprintf>
		break;
 801522a:	e0cd      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b0001://足立法(遅い)
			tic_timer();
 801522c:	f7f2 feba 	bl	8007fa4 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8015230:	4c69      	ldr	r4, [pc, #420]	; (80153d8 <mode_Running+0x2d0>)
 8015232:	2300      	movs	r3, #0
 8015234:	934f      	str	r3, [sp, #316]	; 0x13c
 8015236:	2301      	movs	r3, #1
 8015238:	934e      	str	r3, [sp, #312]	; 0x138
 801523a:	4668      	mov	r0, sp
 801523c:	f104 0310 	add.w	r3, r4, #16
 8015240:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015244:	4619      	mov	r1, r3
 8015246:	f009 ffdf 	bl	801f208 <memcpy>
 801524a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801524e:	eddf 1a63 	vldr	s3, [pc, #396]	; 80153dc <mode_Running+0x2d4>
 8015252:	ed9f 1a63 	vldr	s2, [pc, #396]	; 80153e0 <mode_Running+0x2d8>
 8015256:	eddf 0a63 	vldr	s1, [pc, #396]	; 80153e4 <mode_Running+0x2dc>
 801525a:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80153e8 <mode_Running+0x2e0>
 801525e:	f7f8 fedd 	bl	800e01c <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8015262:	e0b1      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b0010://Flashから
			record_out();
 8015264:	f7f2 f9aa 	bl	80075bc <record_out>
		break;
 8015268:	e0ae      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b0011://ゴミ
			tic_timer();
 801526a:	f7f2 fe9b 	bl	8007fa4 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 801526e:	4c5a      	ldr	r4, [pc, #360]	; (80153d8 <mode_Running+0x2d0>)
 8015270:	2301      	movs	r3, #1
 8015272:	934f      	str	r3, [sp, #316]	; 0x13c
 8015274:	2301      	movs	r3, #1
 8015276:	934e      	str	r3, [sp, #312]	; 0x138
 8015278:	4668      	mov	r0, sp
 801527a:	f104 0310 	add.w	r3, r4, #16
 801527e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015282:	4619      	mov	r1, r3
 8015284:	f009 ffc0 	bl	801f208 <memcpy>
 8015288:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801528c:	eddf 1a53 	vldr	s3, [pc, #332]	; 80153dc <mode_Running+0x2d4>
 8015290:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80153e0 <mode_Running+0x2d8>
 8015294:	eddf 0a53 	vldr	s1, [pc, #332]	; 80153e4 <mode_Running+0x2dc>
 8015298:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80153e8 <mode_Running+0x2e0>
 801529c:	f7f8 febe 	bl	800e01c <AdatiWayReturn>
		break;
 80152a0:	e092      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b0100://ゴミ
			record_out();
 80152a2:	f7f2 f98b 	bl	80075bc <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 80152a6:	2300      	movs	r3, #0
 80152a8:	9352      	str	r3, [sp, #328]	; 0x148
 80152aa:	4a50      	ldr	r2, [pc, #320]	; (80153ec <mode_Running+0x2e4>)
 80152ac:	466b      	mov	r3, sp
 80152ae:	4611      	mov	r1, r2
 80152b0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80152b4:	4618      	mov	r0, r3
 80152b6:	f009 ffa7 	bl	801f208 <memcpy>
 80152ba:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80153f0 <mode_Running+0x2e8>
 80152be:	2300      	movs	r3, #0
 80152c0:	2200      	movs	r2, #0
 80152c2:	2100      	movs	r1, #0
 80152c4:	2000      	movs	r0, #0
 80152c6:	eddf 0a45 	vldr	s1, [pc, #276]	; 80153dc <mode_Running+0x2d4>
 80152ca:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80153f4 <mode_Running+0x2ec>
 80152ce:	f7f9 ff8f 	bl	800f1f0 <run_shortest>
		break;
 80152d2:	e079      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b0101://
			record_out();
 80152d4:	f7f2 f972 	bl	80075bc <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 80152d8:	2301      	movs	r3, #1
 80152da:	9352      	str	r3, [sp, #328]	; 0x148
 80152dc:	4a46      	ldr	r2, [pc, #280]	; (80153f8 <mode_Running+0x2f0>)
 80152de:	466b      	mov	r3, sp
 80152e0:	4611      	mov	r1, r2
 80152e2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80152e6:	4618      	mov	r0, r3
 80152e8:	f009 ff8e 	bl	801f208 <memcpy>
 80152ec:	ed9f 1a40 	vldr	s2, [pc, #256]	; 80153f0 <mode_Running+0x2e8>
 80152f0:	2300      	movs	r3, #0
 80152f2:	2200      	movs	r2, #0
 80152f4:	2101      	movs	r1, #1
 80152f6:	2000      	movs	r0, #0
 80152f8:	eddf 0a38 	vldr	s1, [pc, #224]	; 80153dc <mode_Running+0x2d4>
 80152fc:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80153f4 <mode_Running+0x2ec>
 8015300:	f7f9 ff76 	bl	800f1f0 <run_shortest>
		break;
 8015304:	e060      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8015306:	f7f2 f959 	bl	80075bc <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 801530a:	2301      	movs	r3, #1
 801530c:	9352      	str	r3, [sp, #328]	; 0x148
 801530e:	4a3a      	ldr	r2, [pc, #232]	; (80153f8 <mode_Running+0x2f0>)
 8015310:	466b      	mov	r3, sp
 8015312:	4611      	mov	r1, r2
 8015314:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015318:	4618      	mov	r0, r3
 801531a:	f009 ff75 	bl	801f208 <memcpy>
 801531e:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80153f0 <mode_Running+0x2e8>
 8015322:	2301      	movs	r3, #1
 8015324:	2200      	movs	r2, #0
 8015326:	2101      	movs	r1, #1
 8015328:	2000      	movs	r0, #0
 801532a:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80153dc <mode_Running+0x2d4>
 801532e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80153f4 <mode_Running+0x2ec>
 8015332:	f7f9 ff5d 	bl	800f1f0 <run_shortest>
		break;
 8015336:	e047      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8015338:	f7f2 f940 	bl	80075bc <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed600_shortest_mollifier,0.99,1);
 801533c:	2301      	movs	r3, #1
 801533e:	9352      	str	r3, [sp, #328]	; 0x148
 8015340:	4a2d      	ldr	r2, [pc, #180]	; (80153f8 <mode_Running+0x2f0>)
 8015342:	466b      	mov	r3, sp
 8015344:	4611      	mov	r1, r2
 8015346:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801534a:	4618      	mov	r0, r3
 801534c:	f009 ff5c 	bl	801f208 <memcpy>
 8015350:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 80153fc <mode_Running+0x2f4>
 8015354:	2301      	movs	r3, #1
 8015356:	2201      	movs	r2, #1
 8015358:	2101      	movs	r1, #1
 801535a:	2000      	movs	r0, #0
 801535c:	eddf 0a28 	vldr	s1, [pc, #160]	; 8015400 <mode_Running+0x2f8>
 8015360:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80153dc <mode_Running+0x2d4>
 8015364:	f7f9 ff44 	bl	800f1f0 <run_shortest>
		break;
 8015368:	e02e      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b1000://
			record_out();
 801536a:	f7f2 f927 	bl	80075bc <record_out>
			//run_shortest(2000,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed500_shortest,0.3,0);
		break;
 801536e:	e02b      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b1001:
			record_out();
 8015370:	f7f2 f924 	bl	80075bc <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015374:	e028      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b1010:
			record_out();
 8015376:	f7f2 f921 	bl	80075bc <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 801537a:	e025      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b1011:
			record_out();
 801537c:	f7f2 f91e 	bl	80075bc <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015380:	e022      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b1100:
			record_out();
 8015382:	f7f2 f91b 	bl	80075bc <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015386:	e01f      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b1101:
			record_out();
 8015388:	f7f2 f918 	bl	80075bc <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 801538c:	e01c      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b1110:
			record_out();
 801538e:	f7f2 f915 	bl	80075bc <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015392:	e019      	b.n	80153c8 <mode_Running+0x2c0>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015394:	4c1b      	ldr	r4, [pc, #108]	; (8015404 <mode_Running+0x2fc>)
 8015396:	2300      	movs	r3, #0
 8015398:	934f      	str	r3, [sp, #316]	; 0x13c
 801539a:	2301      	movs	r3, #1
 801539c:	934e      	str	r3, [sp, #312]	; 0x138
 801539e:	4668      	mov	r0, sp
 80153a0:	f104 0310 	add.w	r3, r4, #16
 80153a4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80153a8:	4619      	mov	r1, r3
 80153aa:	f009 ff2d 	bl	801f208 <memcpy>
 80153ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80153b2:	eddf 1a0a 	vldr	s3, [pc, #40]	; 80153dc <mode_Running+0x2d4>
 80153b6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80153e0 <mode_Running+0x2d8>
 80153ba:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80153e4 <mode_Running+0x2dc>
 80153be:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8015408 <mode_Running+0x300>
 80153c2:	f7f8 fe2b 	bl	800e01c <AdatiWayReturn>
		break;
 80153c6:	bf00      	nop
	}


}
 80153c8:	bf00      	nop
 80153ca:	3718      	adds	r7, #24
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bdb0      	pop	{r4, r5, r7, pc}
 80153d0:	080225f8 	.word	0x080225f8
 80153d4:	08022604 	.word	0x08022604
 80153d8:	2000db30 	.word	0x2000db30
 80153dc:	453b8000 	.word	0x453b8000
 80153e0:	44fa0000 	.word	0x44fa0000
 80153e4:	43c80000 	.word	0x43c80000
 80153e8:	43960000 	.word	0x43960000
 80153ec:	2000ddc0 	.word	0x2000ddc0
 80153f0:	3e99999a 	.word	0x3e99999a
 80153f4:	447a0000 	.word	0x447a0000
 80153f8:	2000df08 	.word	0x2000df08
 80153fc:	3f7d70a4 	.word	0x3f7d70a4
 8015400:	461c4000 	.word	0x461c4000
 8015404:	2000dc78 	.word	0x2000dc78
 8015408:	437a0000 	.word	0x437a0000

0801540c <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 801540c:	b590      	push	{r4, r7, lr}
 801540e:	b0db      	sub	sp, #364	; 0x16c
 8015410:	af52      	add	r7, sp, #328	; 0x148
 8015412:	4603      	mov	r3, r0
 8015414:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8015416:	2300      	movs	r3, #0
 8015418:	613b      	str	r3, [r7, #16]
 801541a:	2300      	movs	r3, #0
 801541c:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 801541e:	2300      	movs	r3, #0
 8015420:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8015422:	2300      	movs	r3, #0
 8015424:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8015426:	2300      	movs	r3, #0
 8015428:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 801542a:	2300      	movs	r3, #0
 801542c:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801542e:	2003      	movs	r0, #3
 8015430:	f7f2 fb04 	bl	8007a3c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015434:	2003      	movs	r0, #3
 8015436:	f7f2 fb29 	bl	8007a8c <pl_R_DriveMotor_mode>
	reset_gyro();
 801543a:	f7ec f945 	bl	80016c8 <reset_gyro>
	reset_speed();
 801543e:	f7eb fdeb 	bl	8001018 <reset_speed>
	reset_distance();
 8015442:	f7eb fdab 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015446:	f7ef f995 	bl	8004774 <clear_Ierror>

	switch (main_modeR) {
 801544a:	79fb      	ldrb	r3, [r7, #7]
 801544c:	2b0f      	cmp	r3, #15
 801544e:	f200 82a3 	bhi.w	8015998 <mode_Tuning0+0x58c>
 8015452:	a201      	add	r2, pc, #4	; (adr r2, 8015458 <mode_Tuning0+0x4c>)
 8015454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015458:	08015499 	.word	0x08015499
 801545c:	08015523 	.word	0x08015523
 8015460:	08015549 	.word	0x08015549
 8015464:	0801556f 	.word	0x0801556f
 8015468:	0801559f 	.word	0x0801559f
 801546c:	080155cf 	.word	0x080155cf
 8015470:	080155f5 	.word	0x080155f5
 8015474:	0801561b 	.word	0x0801561b
 8015478:	08015641 	.word	0x08015641
 801547c:	08015665 	.word	0x08015665
 8015480:	080156e5 	.word	0x080156e5
 8015484:	0801576b 	.word	0x0801576b
 8015488:	08015791 	.word	0x08015791
 801548c:	08015831 	.word	0x08015831
 8015490:	080158fd 	.word	0x080158fd
 8015494:	0801594d 	.word	0x0801594d
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015498:	4bca      	ldr	r3, [pc, #808]	; (80157c4 <mode_Tuning0+0x3b8>)
 801549a:	2203      	movs	r2, #3
 801549c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801549e:	2300      	movs	r3, #0
 80154a0:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 80154a2:	6978      	ldr	r0, [r7, #20]
 80154a4:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 80157c8 <mode_Tuning0+0x3bc>
 80154a8:	eddf 1ac8 	vldr	s3, [pc, #800]	; 80157cc <mode_Tuning0+0x3c0>
 80154ac:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 80157d0 <mode_Tuning0+0x3c4>
 80154b0:	eddf 0ac7 	vldr	s1, [pc, #796]	; 80157d0 <mode_Tuning0+0x3c4>
 80154b4:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 80157d4 <mode_Tuning0+0x3c8>
 80154b8:	f7ed fd40 	bl	8002f3c <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 80154bc:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 80157d8 <mode_Tuning0+0x3cc>
 80154c0:	eddf 1ac6 	vldr	s3, [pc, #792]	; 80157dc <mode_Tuning0+0x3d0>
 80154c4:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 80157d0 <mode_Tuning0+0x3c4>
 80154c8:	eddf 0ac1 	vldr	s1, [pc, #772]	; 80157d0 <mode_Tuning0+0x3c4>
 80154cc:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 80157e0 <mode_Tuning0+0x3d4>
 80154d0:	f7ee fa42 	bl	8003958 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 80154d4:	6978      	ldr	r0, [r7, #20]
 80154d6:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 80157e4 <mode_Tuning0+0x3d8>
 80154da:	eddf 1ac3 	vldr	s3, [pc, #780]	; 80157e8 <mode_Tuning0+0x3dc>
 80154de:	ed9f 1abc 	vldr	s2, [pc, #752]	; 80157d0 <mode_Tuning0+0x3c4>
 80154e2:	eddf 0abb 	vldr	s1, [pc, #748]	; 80157d0 <mode_Tuning0+0x3c4>
 80154e6:	ed9f 0abb 	vldr	s0, [pc, #748]	; 80157d4 <mode_Tuning0+0x3c8>
 80154ea:	f7ed fd27 	bl	8002f3c <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 80154ee:	ed9f 2aba 	vldr	s4, [pc, #744]	; 80157d8 <mode_Tuning0+0x3cc>
 80154f2:	eddf 1aba 	vldr	s3, [pc, #744]	; 80157dc <mode_Tuning0+0x3d0>
 80154f6:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 80157d0 <mode_Tuning0+0x3c4>
 80154fa:	eddf 0ab5 	vldr	s1, [pc, #724]	; 80157d0 <mode_Tuning0+0x3c4>
 80154fe:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 80157e0 <mode_Tuning0+0x3d4>
 8015502:	f7ee fa29 	bl	8003958 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015506:	6978      	ldr	r0, [r7, #20]
 8015508:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 80157ec <mode_Tuning0+0x3e0>
 801550c:	eddf 1ab8 	vldr	s3, [pc, #736]	; 80157f0 <mode_Tuning0+0x3e4>
 8015510:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 80157d0 <mode_Tuning0+0x3c4>
 8015514:	eddf 0aae 	vldr	s1, [pc, #696]	; 80157d0 <mode_Tuning0+0x3c4>
 8015518:	ed9f 0aae 	vldr	s0, [pc, #696]	; 80157d4 <mode_Tuning0+0x3c8>
 801551c:	f7ed fd0e 	bl	8002f3c <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015520:	e23a      	b.n	8015998 <mode_Tuning0+0x58c>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8015522:	4ba8      	ldr	r3, [pc, #672]	; (80157c4 <mode_Tuning0+0x3b8>)
 8015524:	2205      	movs	r2, #5
 8015526:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015528:	2300      	movs	r3, #0
 801552a:	753b      	strb	r3, [r7, #20]
			straight_table2(400, 0, 0, 400, 3000,mode);
 801552c:	6978      	ldr	r0, [r7, #20]
 801552e:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 80157f4 <mode_Tuning0+0x3e8>
 8015532:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80157dc <mode_Tuning0+0x3d0>
 8015536:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 80157d0 <mode_Tuning0+0x3c4>
 801553a:	eddf 0aa5 	vldr	s1, [pc, #660]	; 80157d0 <mode_Tuning0+0x3c4>
 801553e:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 80157dc <mode_Tuning0+0x3d0>
 8015542:	f7ed fcfb 	bl	8002f3c <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8015546:	e227      	b.n	8015998 <mode_Tuning0+0x58c>
		case 2://壁制御
			record_mode=6;
 8015548:	4b9e      	ldr	r3, [pc, #632]	; (80157c4 <mode_Tuning0+0x3b8>)
 801554a:	2206      	movs	r2, #6
 801554c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801554e:	2301      	movs	r3, #1
 8015550:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 8015552:	6978      	ldr	r0, [r7, #20]
 8015554:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 80157f8 <mode_Tuning0+0x3ec>
 8015558:	eddf 1aa8 	vldr	s3, [pc, #672]	; 80157fc <mode_Tuning0+0x3f0>
 801555c:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 80157d0 <mode_Tuning0+0x3c4>
 8015560:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80157d0 <mode_Tuning0+0x3c4>
 8015564:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8015800 <mode_Tuning0+0x3f4>
 8015568:	f7ed fce8 	bl	8002f3c <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 801556c:	e214      	b.n	8015998 <mode_Tuning0+0x58c>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 801556e:	4ca5      	ldr	r4, [pc, #660]	; (8015804 <mode_Tuning0+0x3f8>)
 8015570:	2300      	movs	r3, #0
 8015572:	9351      	str	r3, [sp, #324]	; 0x144
 8015574:	2300      	movs	r3, #0
 8015576:	9350      	str	r3, [sp, #320]	; 0x140
 8015578:	2300      	movs	r3, #0
 801557a:	934f      	str	r3, [sp, #316]	; 0x13c
 801557c:	2300      	movs	r3, #0
 801557e:	934e      	str	r3, [sp, #312]	; 0x138
 8015580:	4668      	mov	r0, sp
 8015582:	f104 0310 	add.w	r3, r4, #16
 8015586:	f44f 729c 	mov.w	r2, #312	; 0x138
 801558a:	4619      	mov	r1, r3
 801558c:	f009 fe3c 	bl	801f208 <memcpy>
 8015590:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015594:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80157d0 <mode_Tuning0+0x3c4>
 8015598:	f7f8 fb86 	bl	800dca8 <testturning>
		break;
 801559c:	e1fc      	b.n	8015998 <mode_Tuning0+0x58c>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 801559e:	4c99      	ldr	r4, [pc, #612]	; (8015804 <mode_Tuning0+0x3f8>)
 80155a0:	2300      	movs	r3, #0
 80155a2:	9351      	str	r3, [sp, #324]	; 0x144
 80155a4:	2300      	movs	r3, #0
 80155a6:	9350      	str	r3, [sp, #320]	; 0x140
 80155a8:	2300      	movs	r3, #0
 80155aa:	934f      	str	r3, [sp, #316]	; 0x13c
 80155ac:	2301      	movs	r3, #1
 80155ae:	934e      	str	r3, [sp, #312]	; 0x138
 80155b0:	4668      	mov	r0, sp
 80155b2:	f104 0310 	add.w	r3, r4, #16
 80155b6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80155ba:	4619      	mov	r1, r3
 80155bc:	f009 fe24 	bl	801f208 <memcpy>
 80155c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80155c4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80157d0 <mode_Tuning0+0x3c4>
 80155c8:	f7f8 fb6e 	bl	800dca8 <testturning>
		break;
 80155cc:	e1e4      	b.n	8015998 <mode_Tuning0+0x58c>
		case 5://直進(制御なし)
			record_mode=7;
 80155ce:	4b7d      	ldr	r3, [pc, #500]	; (80157c4 <mode_Tuning0+0x3b8>)
 80155d0:	2207      	movs	r2, #7
 80155d2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80155d4:	2300      	movs	r3, #0
 80155d6:	753b      	strb	r3, [r7, #20]
			straight_table2(180, 0, 0, 300, 6000,mode);
 80155d8:	6978      	ldr	r0, [r7, #20]
 80155da:	ed9f 2a87 	vldr	s4, [pc, #540]	; 80157f8 <mode_Tuning0+0x3ec>
 80155de:	eddf 1a87 	vldr	s3, [pc, #540]	; 80157fc <mode_Tuning0+0x3f0>
 80155e2:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 80157d0 <mode_Tuning0+0x3c4>
 80155e6:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80157d0 <mode_Tuning0+0x3c4>
 80155ea:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80157e0 <mode_Tuning0+0x3d4>
 80155ee:	f7ed fca5 	bl	8002f3c <straight_table2>
		break;
 80155f2:	e1d1      	b.n	8015998 <mode_Tuning0+0x58c>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 80155f4:	4b73      	ldr	r3, [pc, #460]	; (80157c4 <mode_Tuning0+0x3b8>)
 80155f6:	2207      	movs	r2, #7
 80155f8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80155fa:	2300      	movs	r3, #0
 80155fc:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 80155fe:	6978      	ldr	r0, [r7, #20]
 8015600:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 80157f8 <mode_Tuning0+0x3ec>
 8015604:	eddf 1a80 	vldr	s3, [pc, #512]	; 8015808 <mode_Tuning0+0x3fc>
 8015608:	ed9f 1a71 	vldr	s2, [pc, #452]	; 80157d0 <mode_Tuning0+0x3c4>
 801560c:	eddf 0a70 	vldr	s1, [pc, #448]	; 80157d0 <mode_Tuning0+0x3c4>
 8015610:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 801580c <mode_Tuning0+0x400>
 8015614:	f7ed fc92 	bl	8002f3c <straight_table2>
		break;
 8015618:	e1be      	b.n	8015998 <mode_Tuning0+0x58c>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 801561a:	4b6a      	ldr	r3, [pc, #424]	; (80157c4 <mode_Tuning0+0x3b8>)
 801561c:	2207      	movs	r2, #7
 801561e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015620:	2303      	movs	r3, #3
 8015622:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8015624:	6978      	ldr	r0, [r7, #20]
 8015626:	ed9f 2a74 	vldr	s4, [pc, #464]	; 80157f8 <mode_Tuning0+0x3ec>
 801562a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 80157e8 <mode_Tuning0+0x3dc>
 801562e:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80157d0 <mode_Tuning0+0x3c4>
 8015632:	eddf 0a67 	vldr	s1, [pc, #412]	; 80157d0 <mode_Tuning0+0x3c4>
 8015636:	ed9f 0a75 	vldr	s0, [pc, #468]	; 801580c <mode_Tuning0+0x400>
 801563a:	f7ed fc7f 	bl	8002f3c <straight_table2>
		break;
 801563e:	e1ab      	b.n	8015998 <mode_Tuning0+0x58c>
		case 8://宴会芸
			record_mode=2;
 8015640:	4b60      	ldr	r3, [pc, #384]	; (80157c4 <mode_Tuning0+0x3b8>)
 8015642:	2202      	movs	r2, #2
 8015644:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015646:	2001      	movs	r0, #1
 8015648:	f7f1 fd4a 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801564c:	2001      	movs	r0, #1
 801564e:	f7f1 fd59 	bl	8007104 <pl_l_blue_LED>
			no_angle();
 8015652:	f7ee fb95 	bl	8003d80 <no_angle>
			pl_r_blue_LED(OFF);
 8015656:	2000      	movs	r0, #0
 8015658:	f7f1 fd42 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801565c:	2000      	movs	r0, #0
 801565e:	f7f1 fd51 	bl	8007104 <pl_l_blue_LED>
		break;
 8015662:	e199      	b.n	8015998 <mode_Tuning0+0x58c>
		case 9://システム同定enc
			record_mode=6;
 8015664:	4b57      	ldr	r3, [pc, #348]	; (80157c4 <mode_Tuning0+0x3b8>)
 8015666:	2206      	movs	r2, #6
 8015668:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 801566a:	2001      	movs	r0, #1
 801566c:	f7f1 fd38 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015670:	2001      	movs	r0, #1
 8015672:	f7f1 fd47 	bl	8007104 <pl_l_blue_LED>
			straight_table_ff(90, 0, 300, 300, 500);
 8015676:	ed9f 2a64 	vldr	s4, [pc, #400]	; 8015808 <mode_Tuning0+0x3fc>
 801567a:	eddf 1a60 	vldr	s3, [pc, #384]	; 80157fc <mode_Tuning0+0x3f0>
 801567e:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 80157fc <mode_Tuning0+0x3f0>
 8015682:	eddf 0a53 	vldr	s1, [pc, #332]	; 80157d0 <mode_Tuning0+0x3c4>
 8015686:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8015810 <mode_Tuning0+0x404>
 801568a:	f7ee fca9 	bl	8003fe0 <straight_table_ff>
			straight_table_ff(90, 300, 600, 600, 1500);
 801568e:	ed9f 2a61 	vldr	s4, [pc, #388]	; 8015814 <mode_Tuning0+0x408>
 8015692:	eddf 1a61 	vldr	s3, [pc, #388]	; 8015818 <mode_Tuning0+0x40c>
 8015696:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8015818 <mode_Tuning0+0x40c>
 801569a:	eddf 0a58 	vldr	s1, [pc, #352]	; 80157fc <mode_Tuning0+0x3f0>
 801569e:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8015810 <mode_Tuning0+0x404>
 80156a2:	f7ee fc9d 	bl	8003fe0 <straight_table_ff>
			straight_table_ff(90, 600, 300, 600, 1500);
 80156a6:	ed9f 2a5b 	vldr	s4, [pc, #364]	; 8015814 <mode_Tuning0+0x408>
 80156aa:	eddf 1a5b 	vldr	s3, [pc, #364]	; 8015818 <mode_Tuning0+0x40c>
 80156ae:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80157fc <mode_Tuning0+0x3f0>
 80156b2:	eddf 0a59 	vldr	s1, [pc, #356]	; 8015818 <mode_Tuning0+0x40c>
 80156b6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8015810 <mode_Tuning0+0x404>
 80156ba:	f7ee fc91 	bl	8003fe0 <straight_table_ff>
			straight_table_ff(90, 300, 0, 300, 500);
 80156be:	ed9f 2a52 	vldr	s4, [pc, #328]	; 8015808 <mode_Tuning0+0x3fc>
 80156c2:	eddf 1a4e 	vldr	s3, [pc, #312]	; 80157fc <mode_Tuning0+0x3f0>
 80156c6:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80157d0 <mode_Tuning0+0x3c4>
 80156ca:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80157fc <mode_Tuning0+0x3f0>
 80156ce:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8015810 <mode_Tuning0+0x404>
 80156d2:	f7ee fc85 	bl	8003fe0 <straight_table_ff>
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 80156d6:	2000      	movs	r0, #0
 80156d8:	f7f1 fd02 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80156dc:	2000      	movs	r0, #0
 80156de:	f7f1 fd11 	bl	8007104 <pl_l_blue_LED>
		break;
 80156e2:	e159      	b.n	8015998 <mode_Tuning0+0x58c>
		case 10://システム同定gyro
			record_mode=6;
 80156e4:	4b37      	ldr	r3, [pc, #220]	; (80157c4 <mode_Tuning0+0x3b8>)
 80156e6:	2206      	movs	r2, #6
 80156e8:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80156ea:	2001      	movs	r0, #1
 80156ec:	f7f1 fcf8 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80156f0:	2001      	movs	r0, #1
 80156f2:	f7f1 fd07 	bl	8007104 <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 80156f6:	f107 020c 	add.w	r2, r7, #12
 80156fa:	f107 0310 	add.w	r3, r7, #16
 80156fe:	4611      	mov	r1, r2
 8015700:	4618      	mov	r0, r3
 8015702:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015706:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801570a:	f7ec fb43 	bl	8001d94 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 801570e:	693b      	ldr	r3, [r7, #16]
 8015710:	68fa      	ldr	r2, [r7, #12]
 8015712:	4611      	mov	r1, r2
 8015714:	4618      	mov	r0, r3
 8015716:	f7f2 f9fb 	bl	8007b10 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 801571a:	f7f2 f9dd 	bl	8007ad8 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801571e:	e00a      	b.n	8015736 <mode_Tuning0+0x32a>
				wait_ms(1);
 8015720:	2001      	movs	r0, #1
 8015722:	f7f2 fc6d 	bl	8008000 <wait_ms>
				if(record_rupe_flag==1){
 8015726:	4b3d      	ldr	r3, [pc, #244]	; (801581c <mode_Tuning0+0x410>)
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	2b01      	cmp	r3, #1
 801572c:	d103      	bne.n	8015736 <mode_Tuning0+0x32a>
					record_mode=0;
 801572e:	4b25      	ldr	r3, [pc, #148]	; (80157c4 <mode_Tuning0+0x3b8>)
 8015730:	2200      	movs	r2, #0
 8015732:	701a      	strb	r2, [r3, #0]
					break;
 8015734:	e010      	b.n	8015758 <mode_Tuning0+0x34c>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015736:	4b3a      	ldr	r3, [pc, #232]	; (8015820 <mode_Tuning0+0x414>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801573e:	ddef      	ble.n	8015720 <mode_Tuning0+0x314>
 8015740:	4b37      	ldr	r3, [pc, #220]	; (8015820 <mode_Tuning0+0x414>)
 8015742:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015746:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801574a:	dde9      	ble.n	8015720 <mode_Tuning0+0x314>
 801574c:	4b34      	ldr	r3, [pc, #208]	; (8015820 <mode_Tuning0+0x414>)
 801574e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015752:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015756:	dde3      	ble.n	8015720 <mode_Tuning0+0x314>
				}
			}
			pl_DriveMotor_stop();
 8015758:	f7f2 f9cc 	bl	8007af4 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 801575c:	2000      	movs	r0, #0
 801575e:	f7f1 fcbf 	bl	80070e0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015762:	2000      	movs	r0, #0
 8015764:	f7f1 fcce 	bl	8007104 <pl_l_blue_LED>
		break;
 8015768:	e116      	b.n	8015998 <mode_Tuning0+0x58c>
		case 11:
		record_mode=1;
 801576a:	4b16      	ldr	r3, [pc, #88]	; (80157c4 <mode_Tuning0+0x3b8>)
 801576c:	2201      	movs	r2, #1
 801576e:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8015770:	2300      	movs	r3, #0
 8015772:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8015774:	6978      	ldr	r0, [r7, #20]
 8015776:	ed9f 2a20 	vldr	s4, [pc, #128]	; 80157f8 <mode_Tuning0+0x3ec>
 801577a:	eddf 1a20 	vldr	s3, [pc, #128]	; 80157fc <mode_Tuning0+0x3f0>
 801577e:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80157d0 <mode_Tuning0+0x3c4>
 8015782:	eddf 0a13 	vldr	s1, [pc, #76]	; 80157d0 <mode_Tuning0+0x3c4>
 8015786:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8015824 <mode_Tuning0+0x418>
 801578a:	f7ed fbd7 	bl	8002f3c <straight_table2>
		break;
 801578e:	e103      	b.n	8015998 <mode_Tuning0+0x58c>
		case 12:
		record_mode=2;
 8015790:	4b0c      	ldr	r3, [pc, #48]	; (80157c4 <mode_Tuning0+0x3b8>)
 8015792:	2202      	movs	r2, #2
 8015794:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8015796:	2300      	movs	r3, #0
 8015798:	61fb      	str	r3, [r7, #28]
 801579a:	e00e      	b.n	80157ba <mode_Tuning0+0x3ae>
		turning_table2(90, 0, 0, 930, 11000);
 801579c:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8015828 <mode_Tuning0+0x41c>
 80157a0:	eddf 1a22 	vldr	s3, [pc, #136]	; 801582c <mode_Tuning0+0x420>
 80157a4:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80157d0 <mode_Tuning0+0x3c4>
 80157a8:	eddf 0a09 	vldr	s1, [pc, #36]	; 80157d0 <mode_Tuning0+0x3c4>
 80157ac:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8015810 <mode_Tuning0+0x404>
 80157b0:	f7ee f8d2 	bl	8003958 <turning_table2>
		for(int i=0;i<40;i++){
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	3301      	adds	r3, #1
 80157b8:	61fb      	str	r3, [r7, #28]
 80157ba:	69fb      	ldr	r3, [r7, #28]
 80157bc:	2b27      	cmp	r3, #39	; 0x27
 80157be:	dded      	ble.n	801579c <mode_Tuning0+0x390>
		}
		break;
 80157c0:	e0ea      	b.n	8015998 <mode_Tuning0+0x58c>
 80157c2:	bf00      	nop
 80157c4:	2000d970 	.word	0x2000d970
 80157c8:	464b2000 	.word	0x464b2000
 80157cc:	44c80000 	.word	0x44c80000
 80157d0:	00000000 	.word	0x00000000
 80157d4:	44070000 	.word	0x44070000
 80157d8:	457a0000 	.word	0x457a0000
 80157dc:	43c80000 	.word	0x43c80000
 80157e0:	43340000 	.word	0x43340000
 80157e4:	466a6000 	.word	0x466a6000
 80157e8:	44fa0000 	.word	0x44fa0000
 80157ec:	469c4000 	.word	0x469c4000
 80157f0:	45160000 	.word	0x45160000
 80157f4:	453b8000 	.word	0x453b8000
 80157f8:	45bb8000 	.word	0x45bb8000
 80157fc:	43960000 	.word	0x43960000
 8015800:	44340000 	.word	0x44340000
 8015804:	2000db30 	.word	0x2000db30
 8015808:	43fa0000 	.word	0x43fa0000
 801580c:	443eeb39 	.word	0x443eeb39
 8015810:	42b40000 	.word	0x42b40000
 8015814:	44bb8000 	.word	0x44bb8000
 8015818:	44160000 	.word	0x44160000
 801581c:	2000d97c 	.word	0x2000d97c
 8015820:	200002b8 	.word	0x200002b8
 8015824:	420a0000 	.word	0x420a0000
 8015828:	462be000 	.word	0x462be000
 801582c:	44688000 	.word	0x44688000
		case 13:
			record_mode=2;
 8015830:	4b76      	ldr	r3, [pc, #472]	; (8015a0c <mode_Tuning0+0x600>)
 8015832:	2202      	movs	r2, #2
 8015834:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015836:	2301      	movs	r3, #1
 8015838:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 801583a:	4b75      	ldr	r3, [pc, #468]	; (8015a10 <mode_Tuning0+0x604>)
 801583c:	edd3 6a02 	vldr	s13, [r3, #8]
 8015840:	4b73      	ldr	r3, [pc, #460]	; (8015a10 <mode_Tuning0+0x604>)
 8015842:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015846:	4b72      	ldr	r3, [pc, #456]	; (8015a10 <mode_Tuning0+0x604>)
 8015848:	ed93 7a02 	vldr	s14, [r3, #8]
 801584c:	4b70      	ldr	r3, [pc, #448]	; (8015a10 <mode_Tuning0+0x604>)
 801584e:	edd3 7a02 	vldr	s15, [r3, #8]
 8015852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015856:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801585a:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 801585e:	eddf 5a6d 	vldr	s11, [pc, #436]	; 8015a14 <mode_Tuning0+0x608>
 8015862:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8015866:	6978      	ldr	r0, [r7, #20]
 8015868:	eeb0 2a47 	vmov.f32	s4, s14
 801586c:	eef0 1a46 	vmov.f32	s3, s12
 8015870:	eeb0 1a66 	vmov.f32	s2, s13
 8015874:	eddf 0a68 	vldr	s1, [pc, #416]	; 8015a18 <mode_Tuning0+0x60c>
 8015878:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8015a1c <mode_Tuning0+0x610>
 801587c:	f7ed fb5e 	bl	8002f3c <straight_table2>
			for(int i=0;i<40;i++){
 8015880:	2300      	movs	r3, #0
 8015882:	61bb      	str	r3, [r7, #24]
 8015884:	e011      	b.n	80158aa <mode_Tuning0+0x49e>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8015886:	4b62      	ldr	r3, [pc, #392]	; (8015a10 <mode_Tuning0+0x604>)
 8015888:	2200      	movs	r2, #0
 801588a:	9203      	str	r2, [sp, #12]
 801588c:	2200      	movs	r2, #0
 801588e:	9202      	str	r2, [sp, #8]
 8015890:	2200      	movs	r2, #0
 8015892:	9201      	str	r2, [sp, #4]
 8015894:	699a      	ldr	r2, [r3, #24]
 8015896:	9200      	str	r2, [sp, #0]
 8015898:	3308      	adds	r3, #8
 801589a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801589c:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8015a20 <mode_Tuning0+0x614>
 80158a0:	f7f4 fc16 	bl	800a0d0 <slalomR>
			for(int i=0;i<40;i++){
 80158a4:	69bb      	ldr	r3, [r7, #24]
 80158a6:	3301      	adds	r3, #1
 80158a8:	61bb      	str	r3, [r7, #24]
 80158aa:	69bb      	ldr	r3, [r7, #24]
 80158ac:	2b27      	cmp	r3, #39	; 0x27
 80158ae:	ddea      	ble.n	8015886 <mode_Tuning0+0x47a>
			}
			mode.WallControlMode=0;
 80158b0:	2300      	movs	r3, #0
 80158b2:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 80158b4:	4b56      	ldr	r3, [pc, #344]	; (8015a10 <mode_Tuning0+0x604>)
 80158b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80158ba:	4b55      	ldr	r3, [pc, #340]	; (8015a10 <mode_Tuning0+0x604>)
 80158bc:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80158c0:	4b53      	ldr	r3, [pc, #332]	; (8015a10 <mode_Tuning0+0x604>)
 80158c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80158c6:	4b52      	ldr	r3, [pc, #328]	; (8015a10 <mode_Tuning0+0x604>)
 80158c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80158cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80158d0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80158d4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 80158d8:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8015a14 <mode_Tuning0+0x608>
 80158dc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80158e0:	6978      	ldr	r0, [r7, #20]
 80158e2:	eeb0 2a47 	vmov.f32	s4, s14
 80158e6:	eef0 1a46 	vmov.f32	s3, s12
 80158ea:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8015a18 <mode_Tuning0+0x60c>
 80158ee:	eef0 0a66 	vmov.f32	s1, s13
 80158f2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015a14 <mode_Tuning0+0x608>
 80158f6:	f7ed fb21 	bl	8002f3c <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 80158fa:	e04d      	b.n	8015998 <mode_Tuning0+0x58c>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 80158fc:	4b49      	ldr	r3, [pc, #292]	; (8015a24 <mode_Tuning0+0x618>)
 80158fe:	2201      	movs	r2, #1
 8015900:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8015902:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8015a28 <mode_Tuning0+0x61c>
 8015906:	f7f2 f92d 	bl	8007b64 <pl_FunMotor_duty>
			pl_FunMotor_start();
 801590a:	f7f2 f917 	bl	8007b3c <pl_FunMotor_start>
			HAL_Delay(600);
 801590e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015912:	f002 f9a7 	bl	8017c64 <HAL_Delay>
			reset_gyro();
 8015916:	f7eb fed7 	bl	80016c8 <reset_gyro>
			reset_speed();
 801591a:	f7eb fb7d 	bl	8001018 <reset_speed>
			reset_distance();
 801591e:	f7eb fb3d 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8015922:	f7ee ff27 	bl	8004774 <clear_Ierror>
			record_mode=3;
 8015926:	4b39      	ldr	r3, [pc, #228]	; (8015a0c <mode_Tuning0+0x600>)
 8015928:	2203      	movs	r2, #3
 801592a:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 801592c:	2301      	movs	r3, #1
 801592e:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 3000, 12000,mode);
 8015930:	6978      	ldr	r0, [r7, #20]
 8015932:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8015a2c <mode_Tuning0+0x620>
 8015936:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8015a30 <mode_Tuning0+0x624>
 801593a:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8015a18 <mode_Tuning0+0x60c>
 801593e:	eddf 0a36 	vldr	s1, [pc, #216]	; 8015a18 <mode_Tuning0+0x60c>
 8015942:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8015a34 <mode_Tuning0+0x628>
 8015946:	f7ed faf9 	bl	8002f3c <straight_table2>
		break;
 801594a:	e025      	b.n	8015998 <mode_Tuning0+0x58c>
		case 15:
			highspeed_mode = 1;
 801594c:	4b35      	ldr	r3, [pc, #212]	; (8015a24 <mode_Tuning0+0x618>)
 801594e:	2201      	movs	r2, #1
 8015950:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 8015952:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8015a38 <mode_Tuning0+0x62c>
 8015956:	f7f2 f905 	bl	8007b64 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 801595a:	f44f 7016 	mov.w	r0, #600	; 0x258
 801595e:	f002 f981 	bl	8017c64 <HAL_Delay>
						reset_gyro();
 8015962:	f7eb feb1 	bl	80016c8 <reset_gyro>
						reset_speed();
 8015966:	f7eb fb57 	bl	8001018 <reset_speed>
						reset_distance();
 801596a:	f7eb fb17 	bl	8000f9c <reset_distance>
						clear_Ierror();
 801596e:	f7ee ff01 	bl	8004774 <clear_Ierror>
						record_mode=3;
 8015972:	4b26      	ldr	r3, [pc, #152]	; (8015a0c <mode_Tuning0+0x600>)
 8015974:	2203      	movs	r2, #3
 8015976:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 8015978:	2301      	movs	r3, #1
 801597a:	753b      	strb	r3, [r7, #20]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 801597c:	6978      	ldr	r0, [r7, #20]
 801597e:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 8015a3c <mode_Tuning0+0x630>
 8015982:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8015a40 <mode_Tuning0+0x634>
 8015986:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015a18 <mode_Tuning0+0x60c>
 801598a:	eddf 0a23 	vldr	s1, [pc, #140]	; 8015a18 <mode_Tuning0+0x60c>
 801598e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8015a34 <mode_Tuning0+0x628>
 8015992:	f7ed fad3 	bl	8002f3c <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8015996:	bf00      	nop
	}
	record_mode=0;
 8015998:	4b1c      	ldr	r3, [pc, #112]	; (8015a0c <mode_Tuning0+0x600>)
 801599a:	2200      	movs	r2, #0
 801599c:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801599e:	2003      	movs	r0, #3
 80159a0:	f7f2 f874 	bl	8007a8c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80159a4:	2003      	movs	r0, #3
 80159a6:	f7f2 f849 	bl	8007a3c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80159aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80159ae:	f7f2 fb6b 	bl	8008088 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80159b2:	f7f2 f8cd 	bl	8007b50 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 80159b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80159ba:	f7f2 fb65 	bl	8008088 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80159be:	2000      	movs	r0, #0
 80159c0:	f7f2 f832 	bl	8007a28 <pl_DriveMotor_standby>
	record_mode=0;
 80159c4:	4b11      	ldr	r3, [pc, #68]	; (8015a0c <mode_Tuning0+0x600>)
 80159c6:	2200      	movs	r2, #0
 80159c8:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80159ca:	e002      	b.n	80159d2 <mode_Tuning0+0x5c6>
		HAL_Delay(1);
 80159cc:	2001      	movs	r0, #1
 80159ce:	f002 f949 	bl	8017c64 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80159d2:	4b1c      	ldr	r3, [pc, #112]	; (8015a44 <mode_Tuning0+0x638>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80159da:	ddf7      	ble.n	80159cc <mode_Tuning0+0x5c0>
 80159dc:	4b19      	ldr	r3, [pc, #100]	; (8015a44 <mode_Tuning0+0x638>)
 80159de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80159e2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80159e6:	ddf1      	ble.n	80159cc <mode_Tuning0+0x5c0>
 80159e8:	4b16      	ldr	r3, [pc, #88]	; (8015a44 <mode_Tuning0+0x638>)
 80159ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80159ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80159f2:	ddeb      	ble.n	80159cc <mode_Tuning0+0x5c0>
	}
	pl_r_blue_LED(ON);
 80159f4:	2001      	movs	r0, #1
 80159f6:	f7f1 fb73 	bl	80070e0 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80159fa:	2001      	movs	r0, #1
 80159fc:	f7f1 fb82 	bl	8007104 <pl_l_blue_LED>
	record_print();
 8015a00:	f000 fd12 	bl	8016428 <record_print>



}
 8015a04:	bf00      	nop
 8015a06:	3724      	adds	r7, #36	; 0x24
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd90      	pop	{r4, r7, pc}
 8015a0c:	2000d970 	.word	0x2000d970
 8015a10:	2000db30 	.word	0x2000db30
 8015a14:	42340000 	.word	0x42340000
 8015a18:	00000000 	.word	0x00000000
 8015a1c:	431b8000 	.word	0x431b8000
 8015a20:	43960000 	.word	0x43960000
 8015a24:	20000808 	.word	0x20000808
 8015a28:	3f7d70a4 	.word	0x3f7d70a4
 8015a2c:	463b8000 	.word	0x463b8000
 8015a30:	453b8000 	.word	0x453b8000
 8015a34:	44340000 	.word	0x44340000
 8015a38:	3f733333 	.word	0x3f733333
 8015a3c:	45dac000 	.word	0x45dac000
 8015a40:	447a0000 	.word	0x447a0000
 8015a44:	200002b8 	.word	0x200002b8

08015a48 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b084      	sub	sp, #16
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	4603      	mov	r3, r0
 8015a50:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8015a52:	2300      	movs	r3, #0
 8015a54:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8015a56:	2300      	movs	r3, #0
 8015a58:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8015a62:	2001      	movs	r0, #1
 8015a64:	f7f1 ffe0 	bl	8007a28 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015a68:	2003      	movs	r0, #3
 8015a6a:	f7f1 ffe7 	bl	8007a3c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015a6e:	2003      	movs	r0, #3
 8015a70:	f7f2 f80c 	bl	8007a8c <pl_R_DriveMotor_mode>
	reset_gyro();
 8015a74:	f7eb fe28 	bl	80016c8 <reset_gyro>
	reset_speed();
 8015a78:	f7eb face 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015a7c:	f7ee fe7a 	bl	8004774 <clear_Ierror>

	switch (main_modeR) {
 8015a80:	79fb      	ldrb	r3, [r7, #7]
 8015a82:	2b0f      	cmp	r3, #15
 8015a84:	f200 81b0 	bhi.w	8015de8 <mode_WallSensorTuning+0x3a0>
 8015a88:	a201      	add	r2, pc, #4	; (adr r2, 8015a90 <mode_WallSensorTuning+0x48>)
 8015a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a8e:	bf00      	nop
 8015a90:	08015ad1 	.word	0x08015ad1
 8015a94:	08015af7 	.word	0x08015af7
 8015a98:	08015b0f 	.word	0x08015b0f
 8015a9c:	08015b85 	.word	0x08015b85
 8015aa0:	08015bfb 	.word	0x08015bfb
 8015aa4:	08015c71 	.word	0x08015c71
 8015aa8:	08015ce1 	.word	0x08015ce1
 8015aac:	08015d07 	.word	0x08015d07
 8015ab0:	08015d2d 	.word	0x08015d2d
 8015ab4:	08015d53 	.word	0x08015d53
 8015ab8:	08015de9 	.word	0x08015de9
 8015abc:	08015de9 	.word	0x08015de9
 8015ac0:	08015de9 	.word	0x08015de9
 8015ac4:	08015de9 	.word	0x08015de9
 8015ac8:	08015de9 	.word	0x08015de9
 8015acc:	08015d79 	.word	0x08015d79
		case 0://横壁追従制御
			record_mode=16;
 8015ad0:	4bd2      	ldr	r3, [pc, #840]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015ad2:	2210      	movs	r2, #16
 8015ad4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 8015ada:	68b8      	ldr	r0, [r7, #8]
 8015adc:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8015e20 <mode_WallSensorTuning+0x3d8>
 8015ae0:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8015e24 <mode_WallSensorTuning+0x3dc>
 8015ae4:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015ae8:	eddf 0acf 	vldr	s1, [pc, #828]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015aec:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8015e2c <mode_WallSensorTuning+0x3e4>
 8015af0:	f7ed fa24 	bl	8002f3c <straight_table2>
		break;
 8015af4:	e178      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 8015af6:	2300      	movs	r3, #0
 8015af8:	60fb      	str	r3, [r7, #12]
 8015afa:	e004      	b.n	8015b06 <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 8015afc:	f7ee fa28 	bl	8003f50 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	3301      	adds	r3, #1
 8015b04:	60fb      	str	r3, [r7, #12]
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	2b14      	cmp	r3, #20
 8015b0a:	ddf7      	ble.n	8015afc <mode_WallSensorTuning+0xb4>
			}
		break;
 8015b0c:	e16c      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8015b0e:	4bc3      	ldr	r3, [pc, #780]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015b10:	2207      	movs	r2, #7
 8015b12:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015b14:	2300      	movs	r3, #0
 8015b16:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015b20:	2300      	movs	r3, #0
 8015b22:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8015b24:	68b8      	ldr	r0, [r7, #8]
 8015b26:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015b2a:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015b2e:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015b32:	eddf 0abd 	vldr	s1, [pc, #756]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015b36:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8015e38 <mode_WallSensorTuning+0x3f0>
 8015b3a:	f7ed f9ff 	bl	8002f3c <straight_table2>
			mode.WallCutMode=1;
 8015b3e:	2301      	movs	r3, #1
 8015b40:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8015b46:	68b8      	ldr	r0, [r7, #8]
 8015b48:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015b4c:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015b50:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015b54:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015b58:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015e3c <mode_WallSensorTuning+0x3f4>
 8015b5c:	f7ed f9ee 	bl	8002f3c <straight_table2>
			mode.WallControlMode=0;
 8015b60:	2300      	movs	r3, #0
 8015b62:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015b64:	2300      	movs	r3, #0
 8015b66:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8015b68:	68b8      	ldr	r0, [r7, #8]
 8015b6a:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015b6e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015b72:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015b76:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015b7a:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8015e40 <mode_WallSensorTuning+0x3f8>
 8015b7e:	f7ed f9dd 	bl	8002f3c <straight_table2>
		break;
 8015b82:	e131      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8015b84:	4ba5      	ldr	r3, [pc, #660]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015b86:	2208      	movs	r2, #8
 8015b88:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015b92:	2300      	movs	r3, #0
 8015b94:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015b96:	2300      	movs	r3, #0
 8015b98:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 8015b9a:	68b8      	ldr	r0, [r7, #8]
 8015b9c:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015ba0:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015ba4:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015ba8:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015bac:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8015e44 <mode_WallSensorTuning+0x3fc>
 8015bb0:	f7ed f9c4 	bl	8002f3c <straight_table2>
			mode.WallCutMode=2;
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8015bbc:	68b8      	ldr	r0, [r7, #8]
 8015bbe:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015bc2:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015bc6:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015bca:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015bce:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8015e3c <mode_WallSensorTuning+0x3f4>
 8015bd2:	f7ed f9b3 	bl	8002f3c <straight_table2>
			mode.WallControlMode=0;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8015bde:	68b8      	ldr	r0, [r7, #8]
 8015be0:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015be4:	eddf 1a93 	vldr	s3, [pc, #588]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015be8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015bec:	eddf 0a91 	vldr	s1, [pc, #580]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015bf0:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8015e40 <mode_WallSensorTuning+0x3f8>
 8015bf4:	f7ed f9a2 	bl	8002f3c <straight_table2>
		break;
 8015bf8:	e0f6      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 8015bfa:	4b88      	ldr	r3, [pc, #544]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015bfc:	2208      	movs	r2, #8
 8015bfe:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015c00:	2300      	movs	r3, #0
 8015c02:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015c04:	2300      	movs	r3, #0
 8015c06:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8015c10:	68b8      	ldr	r0, [r7, #8]
 8015c12:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015c16:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c1a:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c1e:	eddf 0a82 	vldr	s1, [pc, #520]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015c22:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8015e48 <mode_WallSensorTuning+0x400>
 8015c26:	f7ed f989 	bl	8002f3c <straight_table2>
			mode.WallCutMode=3;
 8015c2a:	2303      	movs	r3, #3
 8015c2c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8015c32:	68b8      	ldr	r0, [r7, #8]
 8015c34:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015c38:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c3c:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c40:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c44:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8015e4c <mode_WallSensorTuning+0x404>
 8015c48:	f7ed f978 	bl	8002f3c <straight_table2>
			mode.WallControlMode=0;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015c50:	2300      	movs	r3, #0
 8015c52:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8015c54:	68b8      	ldr	r0, [r7, #8]
 8015c56:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015c5a:	eddf 1a76 	vldr	s3, [pc, #472]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c5e:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015c62:	eddf 0a74 	vldr	s1, [pc, #464]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c66:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8015e50 <mode_WallSensorTuning+0x408>
 8015c6a:	f7ed f967 	bl	8002f3c <straight_table2>
		break;
 8015c6e:	e0bb      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8015c70:	2300      	movs	r3, #0
 8015c72:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015c74:	2300      	movs	r3, #0
 8015c76:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8015c80:	68b8      	ldr	r0, [r7, #8]
 8015c82:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015c86:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c8a:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015c8e:	eddf 0a66 	vldr	s1, [pc, #408]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015c92:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015e48 <mode_WallSensorTuning+0x400>
 8015c96:	f7ed f951 	bl	8002f3c <straight_table2>
			mode.WallCutMode=4;
 8015c9a:	2304      	movs	r3, #4
 8015c9c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8015ca2:	68b8      	ldr	r0, [r7, #8]
 8015ca4:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015ca8:	eddf 1a62 	vldr	s3, [pc, #392]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015cac:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015cb0:	eddf 0a60 	vldr	s1, [pc, #384]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015cb4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8015e4c <mode_WallSensorTuning+0x404>
 8015cb8:	f7ed f940 	bl	8002f3c <straight_table2>
			mode.WallControlMode=0;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8015cc4:	68b8      	ldr	r0, [r7, #8]
 8015cc6:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015cca:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015cce:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015cd2:	eddf 0a58 	vldr	s1, [pc, #352]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015cd6:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8015e50 <mode_WallSensorTuning+0x408>
 8015cda:	f7ed f92f 	bl	8002f3c <straight_table2>
		break;
 8015cde:	e083      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(制御あり)
			record_mode=9;
 8015ce0:	4b4e      	ldr	r3, [pc, #312]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015ce2:	2209      	movs	r2, #9
 8015ce4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8015cea:	68b8      	ldr	r0, [r7, #8]
 8015cec:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015cf0:	eddf 1a50 	vldr	s3, [pc, #320]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015cf4:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015cf8:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015cfc:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8015e54 <mode_WallSensorTuning+0x40c>
 8015d00:	f7ed f91c 	bl	8002f3c <straight_table2>
		break;
 8015d04:	e070      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=10;
 8015d06:	4b45      	ldr	r3, [pc, #276]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015d08:	220a      	movs	r2, #10
 8015d0a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8015d10:	68b8      	ldr	r0, [r7, #8]
 8015d12:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015e30 <mode_WallSensorTuning+0x3e8>
 8015d16:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015e34 <mode_WallSensorTuning+0x3ec>
 8015d1a:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015d1e:	eddf 0a42 	vldr	s1, [pc, #264]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015d22:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8015e54 <mode_WallSensorTuning+0x40c>
 8015d26:	f7ed f909 	bl	8002f3c <straight_table2>

		break;
 8015d2a:	e05d      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015d2c:	4b3b      	ldr	r3, [pc, #236]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015d2e:	2207      	movs	r2, #7
 8015d30:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015d32:	2303      	movs	r3, #3
 8015d34:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 15000,mode);
 8015d36:	68b8      	ldr	r0, [r7, #8]
 8015d38:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015e58 <mode_WallSensorTuning+0x410>
 8015d3c:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015e5c <mode_WallSensorTuning+0x414>
 8015d40:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015d44:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015d48:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8015e60 <mode_WallSensorTuning+0x418>
 8015d4c:	f7ed f8f6 	bl	8002f3c <straight_table2>
		break;
 8015d50:	e04a      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8015d52:	4b32      	ldr	r3, [pc, #200]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015d54:	2208      	movs	r2, #8
 8015d56:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015d58:	2303      	movs	r3, #3
 8015d5a:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8015d5c:	68b8      	ldr	r0, [r7, #8]
 8015d5e:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8015e64 <mode_WallSensorTuning+0x41c>
 8015d62:	eddf 1a41 	vldr	s3, [pc, #260]	; 8015e68 <mode_WallSensorTuning+0x420>
 8015d66:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015d6a:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015d6e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8015e6c <mode_WallSensorTuning+0x424>
 8015d72:	f7ed f8e3 	bl	8002f3c <straight_table2>
		break;
 8015d76:	e037      	b.n	8015de8 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8015d78:	2305      	movs	r3, #5
 8015d7a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015d80:	2300      	movs	r3, #0
 8015d82:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015d84:	2300      	movs	r3, #0
 8015d86:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 8015d88:	68b8      	ldr	r0, [r7, #8]
 8015d8a:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8015e70 <mode_WallSensorTuning+0x428>
 8015d8e:	eddf 1a25 	vldr	s3, [pc, #148]	; 8015e24 <mode_WallSensorTuning+0x3dc>
 8015d92:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015e24 <mode_WallSensorTuning+0x3dc>
 8015d96:	eddf 0a24 	vldr	s1, [pc, #144]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015d9a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8015e74 <mode_WallSensorTuning+0x42c>
 8015d9e:	f7ed f8cd 	bl	8002f3c <straight_table2>
			mode.WallCutMode=2;
 8015da2:	2302      	movs	r3, #2
 8015da4:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015da6:	2300      	movs	r3, #0
 8015da8:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 8015daa:	68b8      	ldr	r0, [r7, #8]
 8015dac:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8015e70 <mode_WallSensorTuning+0x428>
 8015db0:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8015e24 <mode_WallSensorTuning+0x3dc>
 8015db4:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8015e24 <mode_WallSensorTuning+0x3dc>
 8015db8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015e24 <mode_WallSensorTuning+0x3dc>
 8015dbc:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015e78 <mode_WallSensorTuning+0x430>
 8015dc0:	f7ed f8bc 	bl	8002f3c <straight_table2>
			mode.WallControlMode=0;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 8015dcc:	68b8      	ldr	r0, [r7, #8]
 8015dce:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8015e70 <mode_WallSensorTuning+0x428>
 8015dd2:	eddf 1a14 	vldr	s3, [pc, #80]	; 8015e24 <mode_WallSensorTuning+0x3dc>
 8015dd6:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8015e28 <mode_WallSensorTuning+0x3e0>
 8015dda:	eddf 0a12 	vldr	s1, [pc, #72]	; 8015e24 <mode_WallSensorTuning+0x3dc>
 8015dde:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8015e7c <mode_WallSensorTuning+0x434>
 8015de2:	f7ed f8ab 	bl	8002f3c <straight_table2>
		break;
 8015de6:	bf00      	nop
	}
	record_mode=0;
 8015de8:	4b0c      	ldr	r3, [pc, #48]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015dea:	2200      	movs	r2, #0
 8015dec:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015dee:	2003      	movs	r0, #3
 8015df0:	f7f1 fe4c 	bl	8007a8c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015df4:	2003      	movs	r0, #3
 8015df6:	f7f1 fe21 	bl	8007a3c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015dfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015dfe:	f7f2 f943 	bl	8008088 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015e02:	f7f1 fea5 	bl	8007b50 <pl_FunMotor_stop>
	record_mode=0;
 8015e06:	4b05      	ldr	r3, [pc, #20]	; (8015e1c <mode_WallSensorTuning+0x3d4>)
 8015e08:	2200      	movs	r2, #0
 8015e0a:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8015e0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015e10:	f7f2 f93a 	bl	8008088 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015e14:	2000      	movs	r0, #0
 8015e16:	f7f1 fe07 	bl	8007a28 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015e1a:	e034      	b.n	8015e86 <mode_WallSensorTuning+0x43e>
 8015e1c:	2000d970 	.word	0x2000d970
 8015e20:	459c4000 	.word	0x459c4000
 8015e24:	43fa0000 	.word	0x43fa0000
 8015e28:	00000000 	.word	0x00000000
 8015e2c:	44b40000 	.word	0x44b40000
 8015e30:	453b8000 	.word	0x453b8000
 8015e34:	43960000 	.word	0x43960000
 8015e38:	431b8000 	.word	0x431b8000
 8015e3c:	41b40000 	.word	0x41b40000
 8015e40:	42870000 	.word	0x42870000
 8015e44:	42cd0000 	.word	0x42cd0000
 8015e48:	4329c77b 	.word	0x4329c77b
 8015e4c:	41fe8ef6 	.word	0x41fe8ef6
 8015e50:	42beeb39 	.word	0x42beeb39
 8015e54:	43beeb39 	.word	0x43beeb39
 8015e58:	466a6000 	.word	0x466a6000
 8015e5c:	44fa0000 	.word	0x44fa0000
 8015e60:	443eeb39 	.word	0x443eeb39
 8015e64:	461c4000 	.word	0x461c4000
 8015e68:	442f0000 	.word	0x442f0000
 8015e6c:	4484977b 	.word	0x4484977b
 8015e70:	44bb8000 	.word	0x44bb8000
 8015e74:	43488000 	.word	0x43488000
 8015e78:	42340000 	.word	0x42340000
 8015e7c:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8015e80:	2001      	movs	r0, #1
 8015e82:	f001 feef 	bl	8017c64 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015e86:	4b0e      	ldr	r3, [pc, #56]	; (8015ec0 <mode_WallSensorTuning+0x478>)
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e8e:	ddf7      	ble.n	8015e80 <mode_WallSensorTuning+0x438>
 8015e90:	4b0b      	ldr	r3, [pc, #44]	; (8015ec0 <mode_WallSensorTuning+0x478>)
 8015e92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e96:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e9a:	ddf1      	ble.n	8015e80 <mode_WallSensorTuning+0x438>
 8015e9c:	4b08      	ldr	r3, [pc, #32]	; (8015ec0 <mode_WallSensorTuning+0x478>)
 8015e9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015ea2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015ea6:	ddeb      	ble.n	8015e80 <mode_WallSensorTuning+0x438>
	}
	pl_r_blue_LED(ON);
 8015ea8:	2001      	movs	r0, #1
 8015eaa:	f7f1 f919 	bl	80070e0 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015eae:	2001      	movs	r0, #1
 8015eb0:	f7f1 f928 	bl	8007104 <pl_l_blue_LED>
	record_print();
 8015eb4:	f000 fab8 	bl	8016428 <record_print>



}
 8015eb8:	bf00      	nop
 8015eba:	3710      	adds	r7, #16
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}
 8015ec0:	200002b8 	.word	0x200002b8

08015ec4 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	4603      	mov	r3, r0
 8015ecc:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 8015eda:	2300      	movs	r3, #0
 8015edc:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8015ede:	2001      	movs	r0, #1
 8015ee0:	f7f1 fda2 	bl	8007a28 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015ee4:	2003      	movs	r0, #3
 8015ee6:	f7f1 fda9 	bl	8007a3c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015eea:	2003      	movs	r0, #3
 8015eec:	f7f1 fdce 	bl	8007a8c <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.56);
 8015ef0:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8016258 <mode_WallSensorTuning_fast+0x394>
 8015ef4:	f7f1 fe36 	bl	8007b64 <pl_FunMotor_duty>
	pl_FunMotor_start();
 8015ef8:	f7f1 fe20 	bl	8007b3c <pl_FunMotor_start>
	HAL_Delay(600);
 8015efc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015f00:	f001 feb0 	bl	8017c64 <HAL_Delay>
	reset_gyro();
 8015f04:	f7eb fbe0 	bl	80016c8 <reset_gyro>
	reset_speed();
 8015f08:	f7eb f886 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015f0c:	f7ee fc32 	bl	8004774 <clear_Ierror>
	angle=0;
 8015f10:	4bd2      	ldr	r3, [pc, #840]	; (801625c <mode_WallSensorTuning_fast+0x398>)
 8015f12:	f04f 0200 	mov.w	r2, #0
 8015f16:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8015f18:	79fb      	ldrb	r3, [r7, #7]
 8015f1a:	2b0f      	cmp	r3, #15
 8015f1c:	f200 81e1 	bhi.w	80162e2 <mode_WallSensorTuning_fast+0x41e>
 8015f20:	a201      	add	r2, pc, #4	; (adr r2, 8015f28 <mode_WallSensorTuning_fast+0x64>)
 8015f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f26:	bf00      	nop
 8015f28:	08015f69 	.word	0x08015f69
 8015f2c:	080162e3 	.word	0x080162e3
 8015f30:	08015f9b 	.word	0x08015f9b
 8015f34:	08016011 	.word	0x08016011
 8015f38:	08016087 	.word	0x08016087
 8015f3c:	080160fd 	.word	0x080160fd
 8015f40:	08016173 	.word	0x08016173
 8015f44:	08016199 	.word	0x08016199
 8015f48:	080161bf 	.word	0x080161bf
 8015f4c:	080161e5 	.word	0x080161e5
 8015f50:	0801620b 	.word	0x0801620b
 8015f54:	08016231 	.word	0x08016231
 8015f58:	080162bd 	.word	0x080162bd
 8015f5c:	080162e3 	.word	0x080162e3
 8015f60:	080162e3 	.word	0x080162e3
 8015f64:	080162e3 	.word	0x080162e3
		case 0://横壁追従制御
			record_mode=15;
 8015f68:	4bbd      	ldr	r3, [pc, #756]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 8015f6a:	220f      	movs	r2, #15
 8015f6c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015f6e:	2301      	movs	r3, #1
 8015f70:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 8015f72:	4bbc      	ldr	r3, [pc, #752]	; (8016264 <mode_WallSensorTuning_fast+0x3a0>)
 8015f74:	2201      	movs	r2, #1
 8015f76:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8015f78:	68f8      	ldr	r0, [r7, #12]
 8015f7a:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8016268 <mode_WallSensorTuning_fast+0x3a4>
 8015f7e:	eddf 1abb 	vldr	s3, [pc, #748]	; 801626c <mode_WallSensorTuning_fast+0x3a8>
 8015f82:	ed9f 1abb 	vldr	s2, [pc, #748]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8015f86:	eddf 0aba 	vldr	s1, [pc, #744]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8015f8a:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8016274 <mode_WallSensorTuning_fast+0x3b0>
 8015f8e:	f7ec ffd5 	bl	8002f3c <straight_table2>
			highspeed_mode=0;
 8015f92:	4bb4      	ldr	r3, [pc, #720]	; (8016264 <mode_WallSensorTuning_fast+0x3a0>)
 8015f94:	2200      	movs	r2, #0
 8015f96:	701a      	strb	r2, [r3, #0]
		break;
 8015f98:	e1a3      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 1://なし
		break;
		case 2://なし
			record_mode=8;
 8015f9a:	4bb1      	ldr	r3, [pc, #708]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 8015f9c:	2208      	movs	r2, #8
 8015f9e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015fa8:	2300      	movs	r3, #0
 8015faa:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015fac:	2300      	movs	r3, #0
 8015fae:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,15000,mode);
 8015fb0:	68f8      	ldr	r0, [r7, #12]
 8015fb2:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8016278 <mode_WallSensorTuning_fast+0x3b4>
 8015fb6:	eddf 1ab1 	vldr	s3, [pc, #708]	; 801627c <mode_WallSensorTuning_fast+0x3b8>
 8015fba:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 801627c <mode_WallSensorTuning_fast+0x3b8>
 8015fbe:	eddf 0aac 	vldr	s1, [pc, #688]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8015fc2:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8016280 <mode_WallSensorTuning_fast+0x3bc>
 8015fc6:	f7ec ffb9 	bl	8002f3c <straight_table2>
			mode.WallCutMode=2;
 8015fca:	2302      	movs	r3, #2
 8015fcc:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,15000,mode);
 8015fd2:	68f8      	ldr	r0, [r7, #12]
 8015fd4:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 8016278 <mode_WallSensorTuning_fast+0x3b4>
 8015fd8:	eddf 1aa8 	vldr	s3, [pc, #672]	; 801627c <mode_WallSensorTuning_fast+0x3b8>
 8015fdc:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 801627c <mode_WallSensorTuning_fast+0x3b8>
 8015fe0:	eddf 0aa6 	vldr	s1, [pc, #664]	; 801627c <mode_WallSensorTuning_fast+0x3b8>
 8015fe4:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8016284 <mode_WallSensorTuning_fast+0x3c0>
 8015fe8:	f7ec ffa8 	bl	8002f3c <straight_table2>
			mode.WallControlMode=1;
 8015fec:	2301      	movs	r3, #1
 8015fee:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,15000,mode);
 8015ff4:	68f8      	ldr	r0, [r7, #12]
 8015ff6:	ed9f 2aa0 	vldr	s4, [pc, #640]	; 8016278 <mode_WallSensorTuning_fast+0x3b4>
 8015ffa:	eddf 1aa0 	vldr	s3, [pc, #640]	; 801627c <mode_WallSensorTuning_fast+0x3b8>
 8015ffe:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016002:	eddf 0a9e 	vldr	s1, [pc, #632]	; 801627c <mode_WallSensorTuning_fast+0x3b8>
 8016006:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8016288 <mode_WallSensorTuning_fast+0x3c4>
 801600a:	f7ec ff97 	bl	8002f3c <straight_table2>
		break;
 801600e:	e168      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8016010:	4b93      	ldr	r3, [pc, #588]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 8016012:	2208      	movs	r2, #8
 8016014:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016016:	2301      	movs	r3, #1
 8016018:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801601a:	2300      	movs	r3, #0
 801601c:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801601e:	2300      	movs	r3, #0
 8016020:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016022:	2300      	movs	r3, #0
 8016024:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 600, 600,15000,mode);
 8016026:	68f8      	ldr	r0, [r7, #12]
 8016028:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8016278 <mode_WallSensorTuning_fast+0x3b4>
 801602c:	eddf 1a97 	vldr	s3, [pc, #604]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016030:	ed9f 1a96 	vldr	s2, [pc, #600]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016034:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016038:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8016280 <mode_WallSensorTuning_fast+0x3bc>
 801603c:	f7ec ff7e 	bl	8002f3c <straight_table2>
			mode.WallCutMode=2;
 8016040:	2302      	movs	r3, #2
 8016042:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016044:	2300      	movs	r3, #0
 8016046:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 600, 600, 600,15000,mode);
 8016048:	68f8      	ldr	r0, [r7, #12]
 801604a:	ed9f 2a8b 	vldr	s4, [pc, #556]	; 8016278 <mode_WallSensorTuning_fast+0x3b4>
 801604e:	eddf 1a8f 	vldr	s3, [pc, #572]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016052:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016056:	eddf 0a8d 	vldr	s1, [pc, #564]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 801605a:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8016284 <mode_WallSensorTuning_fast+0x3c0>
 801605e:	f7ec ff6d 	bl	8002f3c <straight_table2>
			mode.WallControlMode=1;
 8016062:	2301      	movs	r3, #1
 8016064:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016066:	2300      	movs	r3, #0
 8016068:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 600, 0, 600,15000,mode);
 801606a:	68f8      	ldr	r0, [r7, #12]
 801606c:	ed9f 2a82 	vldr	s4, [pc, #520]	; 8016278 <mode_WallSensorTuning_fast+0x3b4>
 8016070:	eddf 1a86 	vldr	s3, [pc, #536]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016074:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016078:	eddf 0a84 	vldr	s1, [pc, #528]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 801607c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8016288 <mode_WallSensorTuning_fast+0x3c4>
 8016080:	f7ec ff5c 	bl	8002f3c <straight_table2>
		break;
 8016084:	e12d      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8016086:	4b76      	ldr	r3, [pc, #472]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 8016088:	2208      	movs	r2, #8
 801608a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 801608c:	2300      	movs	r3, #0
 801608e:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016090:	2300      	movs	r3, #0
 8016092:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016094:	2300      	movs	r3, #0
 8016096:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016098:	2300      	movs	r3, #0
 801609a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 600, 600,10000,mode);
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	ed9f 2a7c 	vldr	s4, [pc, #496]	; 8016290 <mode_WallSensorTuning_fast+0x3cc>
 80160a2:	eddf 1a7a 	vldr	s3, [pc, #488]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 80160a6:	ed9f 1a79 	vldr	s2, [pc, #484]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 80160aa:	eddf 0a71 	vldr	s1, [pc, #452]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 80160ae:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8016294 <mode_WallSensorTuning_fast+0x3d0>
 80160b2:	f7ec ff43 	bl	8002f3c <straight_table2>
			mode.WallCutMode=3;
 80160b6:	2303      	movs	r3, #3
 80160b8:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80160ba:	2300      	movs	r3, #0
 80160bc:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 80160be:	68f8      	ldr	r0, [r7, #12]
 80160c0:	ed9f 2a73 	vldr	s4, [pc, #460]	; 8016290 <mode_WallSensorTuning_fast+0x3cc>
 80160c4:	eddf 1a71 	vldr	s3, [pc, #452]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 80160c8:	ed9f 1a70 	vldr	s2, [pc, #448]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 80160cc:	eddf 0a6f 	vldr	s1, [pc, #444]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 80160d0:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8016298 <mode_WallSensorTuning_fast+0x3d4>
 80160d4:	f7ec ff32 	bl	8002f3c <straight_table2>
			mode.WallControlMode=0;
 80160d8:	2300      	movs	r3, #0
 80160da:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80160dc:	2300      	movs	r3, #0
 80160de:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 80160e0:	68f8      	ldr	r0, [r7, #12]
 80160e2:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8016290 <mode_WallSensorTuning_fast+0x3cc>
 80160e6:	eddf 1a69 	vldr	s3, [pc, #420]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 80160ea:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 80160ee:	eddf 0a67 	vldr	s1, [pc, #412]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 80160f2:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 801629c <mode_WallSensorTuning_fast+0x3d8>
 80160f6:	f7ec ff21 	bl	8002f3c <straight_table2>
		break;
 80160fa:	e0f2      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 80160fc:	4b58      	ldr	r3, [pc, #352]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 80160fe:	2208      	movs	r2, #8
 8016100:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016102:	2300      	movs	r3, #0
 8016104:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016106:	2300      	movs	r3, #0
 8016108:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801610a:	2300      	movs	r3, #0
 801610c:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801610e:	2300      	movs	r3, #0
 8016110:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 600, 600,10000,mode);
 8016112:	68f8      	ldr	r0, [r7, #12]
 8016114:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8016290 <mode_WallSensorTuning_fast+0x3cc>
 8016118:	eddf 1a5c 	vldr	s3, [pc, #368]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 801611c:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016120:	eddf 0a53 	vldr	s1, [pc, #332]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016124:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8016294 <mode_WallSensorTuning_fast+0x3d0>
 8016128:	f7ec ff08 	bl	8002f3c <straight_table2>
			mode.WallCutMode=4;
 801612c:	2304      	movs	r3, #4
 801612e:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016130:	2300      	movs	r3, #0
 8016132:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8016134:	68f8      	ldr	r0, [r7, #12]
 8016136:	ed9f 2a56 	vldr	s4, [pc, #344]	; 8016290 <mode_WallSensorTuning_fast+0x3cc>
 801613a:	eddf 1a54 	vldr	s3, [pc, #336]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 801613e:	ed9f 1a53 	vldr	s2, [pc, #332]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016142:	eddf 0a52 	vldr	s1, [pc, #328]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016146:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8016298 <mode_WallSensorTuning_fast+0x3d4>
 801614a:	f7ec fef7 	bl	8002f3c <straight_table2>
			mode.WallControlMode=0;
 801614e:	2300      	movs	r3, #0
 8016150:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016152:	2300      	movs	r3, #0
 8016154:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8016156:	68f8      	ldr	r0, [r7, #12]
 8016158:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 8016290 <mode_WallSensorTuning_fast+0x3cc>
 801615c:	eddf 1a4b 	vldr	s3, [pc, #300]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016160:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016164:	eddf 0a49 	vldr	s1, [pc, #292]	; 801628c <mode_WallSensorTuning_fast+0x3c8>
 8016168:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 801629c <mode_WallSensorTuning_fast+0x3d8>
 801616c:	f7ec fee6 	bl	8002f3c <straight_table2>
		break;
 8016170:	e0b7      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 6://斜め直進(制御あり)
			record_mode=7;
 8016172:	4b3b      	ldr	r3, [pc, #236]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 8016174:	2207      	movs	r2, #7
 8016176:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016178:	2300      	movs	r3, #0
 801617a:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 801617c:	68f8      	ldr	r0, [r7, #12]
 801617e:	ed9f 2a48 	vldr	s4, [pc, #288]	; 80162a0 <mode_WallSensorTuning_fast+0x3dc>
 8016182:	eddf 1a48 	vldr	s3, [pc, #288]	; 80162a4 <mode_WallSensorTuning_fast+0x3e0>
 8016186:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 801618a:	eddf 0a39 	vldr	s1, [pc, #228]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 801618e:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80162a8 <mode_WallSensorTuning_fast+0x3e4>
 8016192:	f7ec fed3 	bl	8002f3c <straight_table2>
		break;
 8016196:	e0a4      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 8016198:	4b31      	ldr	r3, [pc, #196]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 801619a:	2209      	movs	r2, #9
 801619c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801619e:	2300      	movs	r3, #0
 80161a0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 80161a2:	68f8      	ldr	r0, [r7, #12]
 80161a4:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 80162a0 <mode_WallSensorTuning_fast+0x3dc>
 80161a8:	eddf 1a3e 	vldr	s3, [pc, #248]	; 80162a4 <mode_WallSensorTuning_fast+0x3e0>
 80161ac:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 80161b0:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 80161b4:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80162a8 <mode_WallSensorTuning_fast+0x3e4>
 80161b8:	f7ec fec0 	bl	8002f3c <straight_table2>

		break;
 80161bc:	e091      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 80161be:	4b28      	ldr	r3, [pc, #160]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 80161c0:	2207      	movs	r2, #7
 80161c2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80161c4:	2303      	movs	r3, #3
 80161c6:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 80161c8:	68f8      	ldr	r0, [r7, #12]
 80161ca:	ed9f 2a35 	vldr	s4, [pc, #212]	; 80162a0 <mode_WallSensorTuning_fast+0x3dc>
 80161ce:	eddf 1a37 	vldr	s3, [pc, #220]	; 80162ac <mode_WallSensorTuning_fast+0x3e8>
 80161d2:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 80161d6:	eddf 0a26 	vldr	s1, [pc, #152]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 80161da:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80162b0 <mode_WallSensorTuning_fast+0x3ec>
 80161de:	f7ec fead 	bl	8002f3c <straight_table2>
		break;
 80161e2:	e07e      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 9:
			record_mode=8;
 80161e4:	4b1e      	ldr	r3, [pc, #120]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 80161e6:	2208      	movs	r2, #8
 80161e8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80161ea:	2303      	movs	r3, #3
 80161ec:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 80161ee:	68f8      	ldr	r0, [r7, #12]
 80161f0:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 80162a0 <mode_WallSensorTuning_fast+0x3dc>
 80161f4:	eddf 1a2d 	vldr	s3, [pc, #180]	; 80162ac <mode_WallSensorTuning_fast+0x3e8>
 80161f8:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 80161fc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016200:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80162b4 <mode_WallSensorTuning_fast+0x3f0>
 8016204:	f7ec fe9a 	bl	8002f3c <straight_table2>
		break;
 8016208:	e06b      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 10:
			record_mode=10;
 801620a:	4b15      	ldr	r3, [pc, #84]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 801620c:	220a      	movs	r2, #10
 801620e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016210:	2303      	movs	r3, #3
 8016212:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016214:	68f8      	ldr	r0, [r7, #12]
 8016216:	ed9f 2a22 	vldr	s4, [pc, #136]	; 80162a0 <mode_WallSensorTuning_fast+0x3dc>
 801621a:	eddf 1a24 	vldr	s3, [pc, #144]	; 80162ac <mode_WallSensorTuning_fast+0x3e8>
 801621e:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016222:	eddf 0a13 	vldr	s1, [pc, #76]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016226:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80162b0 <mode_WallSensorTuning_fast+0x3ec>
 801622a:	f7ec fe87 	bl	8002f3c <straight_table2>
		break;
 801622e:	e058      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
		case 11:
			record_mode=11;
 8016230:	4b0b      	ldr	r3, [pc, #44]	; (8016260 <mode_WallSensorTuning_fast+0x39c>)
 8016232:	220b      	movs	r2, #11
 8016234:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016236:	2303      	movs	r3, #3
 8016238:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 801623a:	68f8      	ldr	r0, [r7, #12]
 801623c:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8016278 <mode_WallSensorTuning_fast+0x3b4>
 8016240:	eddf 1a1d 	vldr	s3, [pc, #116]	; 80162b8 <mode_WallSensorTuning_fast+0x3f4>
 8016244:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 8016248:	eddf 0a09 	vldr	s1, [pc, #36]	; 8016270 <mode_WallSensorTuning_fast+0x3ac>
 801624c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80162b0 <mode_WallSensorTuning_fast+0x3ec>
 8016250:	f7ec fe74 	bl	8002f3c <straight_table2>
		break;
 8016254:	e045      	b.n	80162e2 <mode_WallSensorTuning_fast+0x41e>
 8016256:	bf00      	nop
 8016258:	3f0f5c29 	.word	0x3f0f5c29
 801625c:	20000264 	.word	0x20000264
 8016260:	2000d970 	.word	0x2000d970
 8016264:	20000808 	.word	0x20000808
 8016268:	46bb8000 	.word	0x46bb8000
 801626c:	459c4000 	.word	0x459c4000
 8016270:	00000000 	.word	0x00000000
 8016274:	44e39000 	.word	0x44e39000
 8016278:	466a6000 	.word	0x466a6000
 801627c:	447a0000 	.word	0x447a0000
 8016280:	42cd0000 	.word	0x42cd0000
 8016284:	41b40000 	.word	0x41b40000
 8016288:	42e10000 	.word	0x42e10000
 801628c:	44160000 	.word	0x44160000
 8016290:	461c4000 	.word	0x461c4000
 8016294:	4321c77b 	.word	0x4321c77b
 8016298:	41fe8ef6 	.word	0x41fe8ef6
 801629c:	42beeb39 	.word	0x42beeb39
 80162a0:	469c4000 	.word	0x469c4000
 80162a4:	44fa0000 	.word	0x44fa0000
 80162a8:	445ebd17 	.word	0x445ebd17
 80162ac:	455ac000 	.word	0x455ac000
 80162b0:	443eeb39 	.word	0x443eeb39
 80162b4:	4484977b 	.word	0x4484977b
 80162b8:	453b8000 	.word	0x453b8000
		case 12:
			record_mode=12;
 80162bc:	4b26      	ldr	r3, [pc, #152]	; (8016358 <mode_WallSensorTuning_fast+0x494>)
 80162be:	220c      	movs	r2, #12
 80162c0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80162c2:	2303      	movs	r3, #3
 80162c4:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 80162c6:	68f8      	ldr	r0, [r7, #12]
 80162c8:	ed9f 2a24 	vldr	s4, [pc, #144]	; 801635c <mode_WallSensorTuning_fast+0x498>
 80162cc:	eddf 1a24 	vldr	s3, [pc, #144]	; 8016360 <mode_WallSensorTuning_fast+0x49c>
 80162d0:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016364 <mode_WallSensorTuning_fast+0x4a0>
 80162d4:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016364 <mode_WallSensorTuning_fast+0x4a0>
 80162d8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016368 <mode_WallSensorTuning_fast+0x4a4>
 80162dc:	f7ec fe2e 	bl	8002f3c <straight_table2>
		break;
 80162e0:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 80162e2:	4b1d      	ldr	r3, [pc, #116]	; (8016358 <mode_WallSensorTuning_fast+0x494>)
 80162e4:	2200      	movs	r2, #0
 80162e6:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80162e8:	2003      	movs	r0, #3
 80162ea:	f7f1 fbcf 	bl	8007a8c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80162ee:	2003      	movs	r0, #3
 80162f0:	f7f1 fba4 	bl	8007a3c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80162f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80162f8:	f7f1 fec6 	bl	8008088 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80162fc:	f7f1 fc28 	bl	8007b50 <pl_FunMotor_stop>
	record_mode=0;
 8016300:	4b15      	ldr	r3, [pc, #84]	; (8016358 <mode_WallSensorTuning_fast+0x494>)
 8016302:	2200      	movs	r2, #0
 8016304:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801630a:	f7f1 febd 	bl	8008088 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801630e:	2000      	movs	r0, #0
 8016310:	f7f1 fb8a 	bl	8007a28 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016314:	e002      	b.n	801631c <mode_WallSensorTuning_fast+0x458>
		HAL_Delay(1);
 8016316:	2001      	movs	r0, #1
 8016318:	f001 fca4 	bl	8017c64 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801631c:	4b13      	ldr	r3, [pc, #76]	; (801636c <mode_WallSensorTuning_fast+0x4a8>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016324:	ddf7      	ble.n	8016316 <mode_WallSensorTuning_fast+0x452>
 8016326:	4b11      	ldr	r3, [pc, #68]	; (801636c <mode_WallSensorTuning_fast+0x4a8>)
 8016328:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801632c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016330:	ddf1      	ble.n	8016316 <mode_WallSensorTuning_fast+0x452>
 8016332:	4b0e      	ldr	r3, [pc, #56]	; (801636c <mode_WallSensorTuning_fast+0x4a8>)
 8016334:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016338:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801633c:	ddeb      	ble.n	8016316 <mode_WallSensorTuning_fast+0x452>
	}
	pl_r_blue_LED(ON);
 801633e:	2001      	movs	r0, #1
 8016340:	f7f0 fece 	bl	80070e0 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016344:	2001      	movs	r0, #1
 8016346:	f7f0 fedd 	bl	8007104 <pl_l_blue_LED>
	record_print();
 801634a:	f000 f86d 	bl	8016428 <record_print>



}
 801634e:	bf00      	nop
 8016350:	3710      	adds	r7, #16
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}
 8016356:	bf00      	nop
 8016358:	2000d970 	.word	0x2000d970
 801635c:	466a6000 	.word	0x466a6000
 8016360:	453b8000 	.word	0x453b8000
 8016364:	00000000 	.word	0x00000000
 8016368:	443eeb39 	.word	0x443eeb39
 801636c:	200002b8 	.word	0x200002b8

08016370 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8016370:	b480      	push	{r7}
 8016372:	af00      	add	r7, sp, #0
	record_mode = 0;
 8016374:	4b06      	ldr	r3, [pc, #24]	; (8016390 <record_reset+0x20>)
 8016376:	2200      	movs	r2, #0
 8016378:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 801637a:	4b06      	ldr	r3, [pc, #24]	; (8016394 <record_reset+0x24>)
 801637c:	2200      	movs	r2, #0
 801637e:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8016380:	4b05      	ldr	r3, [pc, #20]	; (8016398 <record_reset+0x28>)
 8016382:	2200      	movs	r2, #0
 8016384:	701a      	strb	r2, [r3, #0]
}
 8016386:	bf00      	nop
 8016388:	46bd      	mov	sp, r7
 801638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638e:	4770      	bx	lr
 8016390:	2000d970 	.word	0x2000d970
 8016394:	2000d974 	.word	0x2000d974
 8016398:	2000d97c 	.word	0x2000d97c

0801639c <record_data>:

void record_data(float *input_record_data, int numlen) {
 801639c:	b490      	push	{r4, r7}
 801639e:	b084      	sub	sp, #16
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
 80163a4:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 80163a6:	2300      	movs	r3, #0
 80163a8:	60fb      	str	r3, [r7, #12]
 80163aa:	e013      	b.n	80163d4 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	009b      	lsls	r3, r3, #2
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 80163b4:	4b18      	ldr	r3, [pc, #96]	; (8016418 <record_data+0x7c>)
 80163b6:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 80163b8:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 80163ba:	4818      	ldr	r0, [pc, #96]	; (801641c <record_data+0x80>)
 80163bc:	68f9      	ldr	r1, [r7, #12]
 80163be:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80163c2:	fb04 f101 	mul.w	r1, r4, r1
 80163c6:	440b      	add	r3, r1
 80163c8:	009b      	lsls	r3, r3, #2
 80163ca:	4403      	add	r3, r0
 80163cc:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	3301      	adds	r3, #1
 80163d2:	60fb      	str	r3, [r7, #12]
 80163d4:	68fa      	ldr	r2, [r7, #12]
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	429a      	cmp	r2, r3
 80163da:	dbe7      	blt.n	80163ac <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 80163dc:	4b10      	ldr	r3, [pc, #64]	; (8016420 <record_data+0x84>)
 80163de:	781b      	ldrb	r3, [r3, #0]
 80163e0:	2b01      	cmp	r3, #1
 80163e2:	d103      	bne.n	80163ec <record_data+0x50>
		record_end_point = record_time;
 80163e4:	4b0c      	ldr	r3, [pc, #48]	; (8016418 <record_data+0x7c>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	4a0e      	ldr	r2, [pc, #56]	; (8016424 <record_data+0x88>)
 80163ea:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 80163ec:	4b0a      	ldr	r3, [pc, #40]	; (8016418 <record_data+0x7c>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	3301      	adds	r3, #1
 80163f2:	4a09      	ldr	r2, [pc, #36]	; (8016418 <record_data+0x7c>)
 80163f4:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 80163f6:	4b08      	ldr	r3, [pc, #32]	; (8016418 <record_data+0x7c>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80163fe:	4293      	cmp	r3, r2
 8016400:	dd05      	ble.n	801640e <record_data+0x72>
		record_time = 0;
 8016402:	4b05      	ldr	r3, [pc, #20]	; (8016418 <record_data+0x7c>)
 8016404:	2200      	movs	r2, #0
 8016406:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016408:	4b05      	ldr	r3, [pc, #20]	; (8016420 <record_data+0x84>)
 801640a:	2201      	movs	r2, #1
 801640c:	701a      	strb	r2, [r3, #0]
	}

}
 801640e:	bf00      	nop
 8016410:	3710      	adds	r7, #16
 8016412:	46bd      	mov	sp, r7
 8016414:	bc90      	pop	{r4, r7}
 8016416:	4770      	bx	lr
 8016418:	2000d974 	.word	0x2000d974
 801641c:	20001df0 	.word	0x20001df0
 8016420:	2000d97c 	.word	0x2000d97c
 8016424:	2000d978 	.word	0x2000d978

08016428 <record_print>:

void record_print(void) {
 8016428:	b580      	push	{r7, lr}
 801642a:	b084      	sub	sp, #16
 801642c:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 801642e:	4b3a      	ldr	r3, [pc, #232]	; (8016518 <record_print+0xf0>)
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d12e      	bne.n	8016494 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016436:	2300      	movs	r3, #0
 8016438:	60fb      	str	r3, [r7, #12]
 801643a:	e025      	b.n	8016488 <record_print+0x60>

			printf("%d", a);
 801643c:	68f9      	ldr	r1, [r7, #12]
 801643e:	4837      	ldr	r0, [pc, #220]	; (801651c <record_print+0xf4>)
 8016440:	f009 fb62 	bl	801fb08 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016444:	2300      	movs	r3, #0
 8016446:	607b      	str	r3, [r7, #4]
 8016448:	e015      	b.n	8016476 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 801644a:	4935      	ldr	r1, [pc, #212]	; (8016520 <record_print+0xf8>)
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016452:	fb03 f202 	mul.w	r2, r3, r2
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	4413      	add	r3, r2
 801645a:	009b      	lsls	r3, r3, #2
 801645c:	440b      	add	r3, r1
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	4618      	mov	r0, r3
 8016462:	f7ea f899 	bl	8000598 <__aeabi_f2d>
 8016466:	4602      	mov	r2, r0
 8016468:	460b      	mov	r3, r1
 801646a:	482e      	ldr	r0, [pc, #184]	; (8016524 <record_print+0xfc>)
 801646c:	f009 fb4c 	bl	801fb08 <iprintf>
					record_count++) {
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	3301      	adds	r3, #1
 8016474:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2b03      	cmp	r3, #3
 801647a:	dde6      	ble.n	801644a <record_print+0x22>
			}
			printf("\n");
 801647c:	200a      	movs	r0, #10
 801647e:	f009 fb5b 	bl	801fb38 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	3301      	adds	r3, #1
 8016486:	60fb      	str	r3, [r7, #12]
 8016488:	4b27      	ldr	r3, [pc, #156]	; (8016528 <record_print+0x100>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	68fa      	ldr	r2, [r7, #12]
 801648e:	429a      	cmp	r2, r3
 8016490:	dbd4      	blt.n	801643c <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016492:	e03c      	b.n	801650e <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016494:	2300      	movs	r3, #0
 8016496:	60fb      	str	r3, [r7, #12]
 8016498:	e034      	b.n	8016504 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 801649a:	4b24      	ldr	r3, [pc, #144]	; (801652c <record_print+0x104>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	3301      	adds	r3, #1
 80164a0:	68fa      	ldr	r2, [r7, #12]
 80164a2:	4413      	add	r3, r2
 80164a4:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80164ac:	4293      	cmp	r3, r2
 80164ae:	dd03      	ble.n	80164b8 <record_print+0x90>
				time_index -= max_record_time;
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 80164b6:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 80164b8:	68f9      	ldr	r1, [r7, #12]
 80164ba:	4818      	ldr	r0, [pc, #96]	; (801651c <record_print+0xf4>)
 80164bc:	f009 fb24 	bl	801fb08 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 80164c0:	2300      	movs	r3, #0
 80164c2:	603b      	str	r3, [r7, #0]
 80164c4:	e015      	b.n	80164f2 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 80164c6:	4916      	ldr	r1, [pc, #88]	; (8016520 <record_print+0xf8>)
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80164ce:	fb03 f202 	mul.w	r2, r3, r2
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	4413      	add	r3, r2
 80164d6:	009b      	lsls	r3, r3, #2
 80164d8:	440b      	add	r3, r1
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	4618      	mov	r0, r3
 80164de:	f7ea f85b 	bl	8000598 <__aeabi_f2d>
 80164e2:	4602      	mov	r2, r0
 80164e4:	460b      	mov	r3, r1
 80164e6:	480f      	ldr	r0, [pc, #60]	; (8016524 <record_print+0xfc>)
 80164e8:	f009 fb0e 	bl	801fb08 <iprintf>
					record_count++) {
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	3301      	adds	r3, #1
 80164f0:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	2b03      	cmp	r3, #3
 80164f6:	dde6      	ble.n	80164c6 <record_print+0x9e>
			printf("\n");
 80164f8:	200a      	movs	r0, #10
 80164fa:	f009 fb1d 	bl	801fb38 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	3301      	adds	r3, #1
 8016502:	60fb      	str	r3, [r7, #12]
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801650a:	4293      	cmp	r3, r2
 801650c:	ddc5      	ble.n	801649a <record_print+0x72>
}
 801650e:	bf00      	nop
 8016510:	3710      	adds	r7, #16
 8016512:	46bd      	mov	sp, r7
 8016514:	bd80      	pop	{r7, pc}
 8016516:	bf00      	nop
 8016518:	2000d97c 	.word	0x2000d97c
 801651c:	08022618 	.word	0x08022618
 8016520:	20001df0 	.word	0x20001df0
 8016524:	0802261c 	.word	0x0802261c
 8016528:	2000d974 	.word	0x2000d974
 801652c:	2000d978 	.word	0x2000d978

08016530 <interrupt_record>:

void interrupt_record(void) {
 8016530:	b580      	push	{r7, lr}
 8016532:	b084      	sub	sp, #16
 8016534:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016536:	4baf      	ldr	r3, [pc, #700]	; (80167f4 <interrupt_record+0x2c4>)
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2b01      	cmp	r3, #1
 801653c:	d110      	bne.n	8016560 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 801653e:	4bae      	ldr	r3, [pc, #696]	; (80167f8 <interrupt_record+0x2c8>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016544:	4bad      	ldr	r3, [pc, #692]	; (80167fc <interrupt_record+0x2cc>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 801654a:	4bad      	ldr	r3, [pc, #692]	; (8016800 <interrupt_record+0x2d0>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016550:	4bac      	ldr	r3, [pc, #688]	; (8016804 <interrupt_record+0x2d4>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016556:	463b      	mov	r3, r7
 8016558:	2104      	movs	r1, #4
 801655a:	4618      	mov	r0, r3
 801655c:	f7ff ff1e 	bl	801639c <record_data>
		}
	if (record_mode == 2) {
 8016560:	4ba4      	ldr	r3, [pc, #656]	; (80167f4 <interrupt_record+0x2c4>)
 8016562:	781b      	ldrb	r3, [r3, #0]
 8016564:	2b02      	cmp	r3, #2
 8016566:	d11b      	bne.n	80165a0 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016568:	4ba7      	ldr	r3, [pc, #668]	; (8016808 <interrupt_record+0x2d8>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 801656e:	4ba7      	ldr	r3, [pc, #668]	; (801680c <interrupt_record+0x2dc>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016574:	4ba6      	ldr	r3, [pc, #664]	; (8016810 <interrupt_record+0x2e0>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 801657a:	4ba6      	ldr	r3, [pc, #664]	; (8016814 <interrupt_record+0x2e4>)
 801657c:	ed93 7a00 	vldr	s14, [r3]
 8016580:	4ba5      	ldr	r3, [pc, #660]	; (8016818 <interrupt_record+0x2e8>)
 8016582:	edd3 7a00 	vldr	s15, [r3]
 8016586:	ee37 7a27 	vadd.f32	s14, s14, s15
 801658a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801658e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016592:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8016596:	463b      	mov	r3, r7
 8016598:	2104      	movs	r1, #4
 801659a:	4618      	mov	r0, r3
 801659c:	f7ff fefe 	bl	801639c <record_data>
		}
	if (record_mode == 3) {
 80165a0:	4b94      	ldr	r3, [pc, #592]	; (80167f4 <interrupt_record+0x2c4>)
 80165a2:	781b      	ldrb	r3, [r3, #0]
 80165a4:	2b03      	cmp	r3, #3
 80165a6:	d126      	bne.n	80165f6 <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 80165a8:	4b99      	ldr	r3, [pc, #612]	; (8016810 <interrupt_record+0x2e0>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 80165ae:	4b98      	ldr	r3, [pc, #608]	; (8016810 <interrupt_record+0x2e0>)
 80165b0:	689b      	ldr	r3, [r3, #8]
 80165b2:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 80165b4:	4b97      	ldr	r3, [pc, #604]	; (8016814 <interrupt_record+0x2e4>)
 80165b6:	ed93 7a00 	vldr	s14, [r3]
 80165ba:	4b97      	ldr	r3, [pc, #604]	; (8016818 <interrupt_record+0x2e8>)
 80165bc:	edd3 7a00 	vldr	s15, [r3]
 80165c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80165c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80165c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80165cc:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 80165d0:	4b92      	ldr	r3, [pc, #584]	; (801681c <interrupt_record+0x2ec>)
 80165d2:	ed93 7a00 	vldr	s14, [r3]
 80165d6:	4b92      	ldr	r3, [pc, #584]	; (8016820 <interrupt_record+0x2f0>)
 80165d8:	edd3 7a00 	vldr	s15, [r3]
 80165dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80165e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80165e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80165e8:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80165ec:	463b      	mov	r3, r7
 80165ee:	2104      	movs	r1, #4
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7ff fed3 	bl	801639c <record_data>
		}
	if (record_mode == 4) { //距離の比較
 80165f6:	4b7f      	ldr	r3, [pc, #508]	; (80167f4 <interrupt_record+0x2c4>)
 80165f8:	781b      	ldrb	r3, [r3, #0]
 80165fa:	2b04      	cmp	r3, #4
 80165fc:	d126      	bne.n	801664c <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 80165fe:	4b84      	ldr	r3, [pc, #528]	; (8016810 <interrupt_record+0x2e0>)
 8016600:	689b      	ldr	r3, [r3, #8]
 8016602:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8016604:	4b7e      	ldr	r3, [pc, #504]	; (8016800 <interrupt_record+0x2d0>)
 8016606:	ed93 7a00 	vldr	s14, [r3]
 801660a:	4b7e      	ldr	r3, [pc, #504]	; (8016804 <interrupt_record+0x2d4>)
 801660c:	edd3 7a00 	vldr	s15, [r3]
 8016610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016614:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801661c:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8016620:	4b80      	ldr	r3, [pc, #512]	; (8016824 <interrupt_record+0x2f4>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016626:	4b7d      	ldr	r3, [pc, #500]	; (801681c <interrupt_record+0x2ec>)
 8016628:	ed93 7a00 	vldr	s14, [r3]
 801662c:	4b7c      	ldr	r3, [pc, #496]	; (8016820 <interrupt_record+0x2f0>)
 801662e:	edd3 7a00 	vldr	s15, [r3]
 8016632:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016636:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801663a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801663e:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016642:	463b      	mov	r3, r7
 8016644:	2104      	movs	r1, #4
 8016646:	4618      	mov	r0, r3
 8016648:	f7ff fea8 	bl	801639c <record_data>
		}
	if (record_mode == 5) { //距離の比較
 801664c:	4b69      	ldr	r3, [pc, #420]	; (80167f4 <interrupt_record+0x2c4>)
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	2b05      	cmp	r3, #5
 8016652:	d110      	bne.n	8016676 <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8016654:	4b6e      	ldr	r3, [pc, #440]	; (8016810 <interrupt_record+0x2e0>)
 8016656:	689b      	ldr	r3, [r3, #8]
 8016658:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 801665a:	4b69      	ldr	r3, [pc, #420]	; (8016800 <interrupt_record+0x2d0>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016660:	4b68      	ldr	r3, [pc, #416]	; (8016804 <interrupt_record+0x2d4>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016666:	4b6f      	ldr	r3, [pc, #444]	; (8016824 <interrupt_record+0x2f4>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801666c:	463b      	mov	r3, r7
 801666e:	2104      	movs	r1, #4
 8016670:	4618      	mov	r0, r3
 8016672:	f7ff fe93 	bl	801639c <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016676:	4b5f      	ldr	r3, [pc, #380]	; (80167f4 <interrupt_record+0x2c4>)
 8016678:	781b      	ldrb	r3, [r3, #0]
 801667a:	2b05      	cmp	r3, #5
 801667c:	d110      	bne.n	80166a0 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 801667e:	4b6a      	ldr	r3, [pc, #424]	; (8016828 <interrupt_record+0x2f8>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016684:	4b5e      	ldr	r3, [pc, #376]	; (8016800 <interrupt_record+0x2d0>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 801668a:	4b5e      	ldr	r3, [pc, #376]	; (8016804 <interrupt_record+0x2d4>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016690:	4b64      	ldr	r3, [pc, #400]	; (8016824 <interrupt_record+0x2f4>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016696:	463b      	mov	r3, r7
 8016698:	2104      	movs	r1, #4
 801669a:	4618      	mov	r0, r3
 801669c:	f7ff fe7e 	bl	801639c <record_data>
		}
	if (record_mode == 6) { //距離の比較
 80166a0:	4b54      	ldr	r3, [pc, #336]	; (80167f4 <interrupt_record+0x2c4>)
 80166a2:	781b      	ldrb	r3, [r3, #0]
 80166a4:	2b06      	cmp	r3, #6
 80166a6:	d110      	bne.n	80166ca <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 80166a8:	4b59      	ldr	r3, [pc, #356]	; (8016810 <interrupt_record+0x2e0>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 80166ae:	4b5f      	ldr	r3, [pc, #380]	; (801682c <interrupt_record+0x2fc>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 80166b4:	4b5e      	ldr	r3, [pc, #376]	; (8016830 <interrupt_record+0x300>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 80166ba:	4b5e      	ldr	r3, [pc, #376]	; (8016834 <interrupt_record+0x304>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 80166c0:	463b      	mov	r3, r7
 80166c2:	2104      	movs	r1, #4
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7ff fe69 	bl	801639c <record_data>
			}
	if (record_mode == 7) {
 80166ca:	4b4a      	ldr	r3, [pc, #296]	; (80167f4 <interrupt_record+0x2c4>)
 80166cc:	781b      	ldrb	r3, [r3, #0]
 80166ce:	2b07      	cmp	r3, #7
 80166d0:	d125      	bne.n	801671e <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80166d2:	4b59      	ldr	r3, [pc, #356]	; (8016838 <interrupt_record+0x308>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	ee07 3a90 	vmov	s15, r3
 80166da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166de:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 80166e2:	4b56      	ldr	r3, [pc, #344]	; (801683c <interrupt_record+0x30c>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	ee07 3a90 	vmov	s15, r3
 80166ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166ee:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 80166f2:	4b51      	ldr	r3, [pc, #324]	; (8016838 <interrupt_record+0x308>)
 80166f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80166f8:	ee07 3a90 	vmov	s15, r3
 80166fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016700:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8016704:	4b4d      	ldr	r3, [pc, #308]	; (801683c <interrupt_record+0x30c>)
 8016706:	691b      	ldr	r3, [r3, #16]
 8016708:	ee07 3a90 	vmov	s15, r3
 801670c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016710:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016714:	463b      	mov	r3, r7
 8016716:	2104      	movs	r1, #4
 8016718:	4618      	mov	r0, r3
 801671a:	f7ff fe3f 	bl	801639c <record_data>
		}
	if (record_mode == 8) {
 801671e:	4b35      	ldr	r3, [pc, #212]	; (80167f4 <interrupt_record+0x2c4>)
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	2b08      	cmp	r3, #8
 8016724:	d125      	bne.n	8016772 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016726:	4b44      	ldr	r3, [pc, #272]	; (8016838 <interrupt_record+0x308>)
 8016728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801672a:	ee07 3a90 	vmov	s15, r3
 801672e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016732:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8016736:	4b42      	ldr	r3, [pc, #264]	; (8016840 <interrupt_record+0x310>)
 8016738:	685b      	ldr	r3, [r3, #4]
 801673a:	ee07 3a90 	vmov	s15, r3
 801673e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016742:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016746:	4b3c      	ldr	r3, [pc, #240]	; (8016838 <interrupt_record+0x308>)
 8016748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801674c:	ee07 3a90 	vmov	s15, r3
 8016750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016754:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8016758:	4b39      	ldr	r3, [pc, #228]	; (8016840 <interrupt_record+0x310>)
 801675a:	68db      	ldr	r3, [r3, #12]
 801675c:	ee07 3a90 	vmov	s15, r3
 8016760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016764:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016768:	463b      	mov	r3, r7
 801676a:	2104      	movs	r1, #4
 801676c:	4618      	mov	r0, r3
 801676e:	f7ff fe15 	bl	801639c <record_data>
		}
	if (record_mode == 9) { //90
 8016772:	4b20      	ldr	r3, [pc, #128]	; (80167f4 <interrupt_record+0x2c4>)
 8016774:	781b      	ldrb	r3, [r3, #0]
 8016776:	2b09      	cmp	r3, #9
 8016778:	d11b      	bne.n	80167b2 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 801677a:	4b2f      	ldr	r3, [pc, #188]	; (8016838 <interrupt_record+0x308>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	ee07 3a90 	vmov	s15, r3
 8016782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016786:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 801678a:	4b2b      	ldr	r3, [pc, #172]	; (8016838 <interrupt_record+0x308>)
 801678c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016790:	ee07 3a90 	vmov	s15, r3
 8016794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016798:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 801679c:	4b29      	ldr	r3, [pc, #164]	; (8016844 <interrupt_record+0x314>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80167a2:	4b29      	ldr	r3, [pc, #164]	; (8016848 <interrupt_record+0x318>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80167a8:	463b      	mov	r3, r7
 80167aa:	2104      	movs	r1, #4
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7ff fdf5 	bl	801639c <record_data>
		}
	if (record_mode == 10) { //90
 80167b2:	4b10      	ldr	r3, [pc, #64]	; (80167f4 <interrupt_record+0x2c4>)
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	2b0a      	cmp	r3, #10
 80167b8:	d148      	bne.n	801684c <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 80167ba:	4b1f      	ldr	r3, [pc, #124]	; (8016838 <interrupt_record+0x308>)
 80167bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80167be:	ee07 3a90 	vmov	s15, r3
 80167c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167c6:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 80167ca:	4b1b      	ldr	r3, [pc, #108]	; (8016838 <interrupt_record+0x308>)
 80167cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80167d0:	ee07 3a90 	vmov	s15, r3
 80167d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167d8:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80167dc:	4b19      	ldr	r3, [pc, #100]	; (8016844 <interrupt_record+0x314>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80167e2:	4b19      	ldr	r3, [pc, #100]	; (8016848 <interrupt_record+0x318>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80167e8:	463b      	mov	r3, r7
 80167ea:	2104      	movs	r1, #4
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7ff fdd5 	bl	801639c <record_data>
 80167f2:	e02b      	b.n	801684c <interrupt_record+0x31c>
 80167f4:	2000d970 	.word	0x2000d970
 80167f8:	2000022c 	.word	0x2000022c
 80167fc:	20000228 	.word	0x20000228
 8016800:	20000224 	.word	0x20000224
 8016804:	20000220 	.word	0x20000220
 8016808:	200004e4 	.word	0x200004e4
 801680c:	20000268 	.word	0x20000268
 8016810:	200004d8 	.word	0x200004d8
 8016814:	2000025c 	.word	0x2000025c
 8016818:	20000258 	.word	0x20000258
 801681c:	20000254 	.word	0x20000254
 8016820:	20000250 	.word	0x20000250
 8016824:	2000027c 	.word	0x2000027c
 8016828:	2000052c 	.word	0x2000052c
 801682c:	20000238 	.word	0x20000238
 8016830:	2000023c 	.word	0x2000023c
 8016834:	20000278 	.word	0x20000278
 8016838:	200002b8 	.word	0x200002b8
 801683c:	20000448 	.word	0x20000448
 8016840:	2000045c 	.word	0x2000045c
 8016844:	200005e0 	.word	0x200005e0
 8016848:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 801684c:	bf00      	nop
 801684e:	3710      	adds	r7, #16
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}

08016854 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8016858:	4b1b      	ldr	r3, [pc, #108]	; (80168c8 <MX_SPI1_Init+0x74>)
 801685a:	4a1c      	ldr	r2, [pc, #112]	; (80168cc <MX_SPI1_Init+0x78>)
 801685c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801685e:	4b1a      	ldr	r3, [pc, #104]	; (80168c8 <MX_SPI1_Init+0x74>)
 8016860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8016866:	4b18      	ldr	r3, [pc, #96]	; (80168c8 <MX_SPI1_Init+0x74>)
 8016868:	2200      	movs	r2, #0
 801686a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801686c:	4b16      	ldr	r3, [pc, #88]	; (80168c8 <MX_SPI1_Init+0x74>)
 801686e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8016872:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016874:	4b14      	ldr	r3, [pc, #80]	; (80168c8 <MX_SPI1_Init+0x74>)
 8016876:	2200      	movs	r2, #0
 8016878:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801687a:	4b13      	ldr	r3, [pc, #76]	; (80168c8 <MX_SPI1_Init+0x74>)
 801687c:	2200      	movs	r2, #0
 801687e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8016880:	4b11      	ldr	r3, [pc, #68]	; (80168c8 <MX_SPI1_Init+0x74>)
 8016882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016886:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016888:	4b0f      	ldr	r3, [pc, #60]	; (80168c8 <MX_SPI1_Init+0x74>)
 801688a:	2210      	movs	r2, #16
 801688c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801688e:	4b0e      	ldr	r3, [pc, #56]	; (80168c8 <MX_SPI1_Init+0x74>)
 8016890:	2200      	movs	r2, #0
 8016892:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8016894:	4b0c      	ldr	r3, [pc, #48]	; (80168c8 <MX_SPI1_Init+0x74>)
 8016896:	2200      	movs	r2, #0
 8016898:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801689a:	4b0b      	ldr	r3, [pc, #44]	; (80168c8 <MX_SPI1_Init+0x74>)
 801689c:	2200      	movs	r2, #0
 801689e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80168a0:	4b09      	ldr	r3, [pc, #36]	; (80168c8 <MX_SPI1_Init+0x74>)
 80168a2:	2207      	movs	r2, #7
 80168a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80168a6:	4b08      	ldr	r3, [pc, #32]	; (80168c8 <MX_SPI1_Init+0x74>)
 80168a8:	2200      	movs	r2, #0
 80168aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80168ac:	4b06      	ldr	r3, [pc, #24]	; (80168c8 <MX_SPI1_Init+0x74>)
 80168ae:	2208      	movs	r2, #8
 80168b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80168b2:	4805      	ldr	r0, [pc, #20]	; (80168c8 <MX_SPI1_Init+0x74>)
 80168b4:	f005 fbca 	bl	801c04c <HAL_SPI_Init>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d001      	beq.n	80168c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80168be:	f7f3 fb38 	bl	8009f32 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80168c2:	bf00      	nop
 80168c4:	bd80      	pop	{r7, pc}
 80168c6:	bf00      	nop
 80168c8:	2000d980 	.word	0x2000d980
 80168cc:	40013000 	.word	0x40013000

080168d0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80168d4:	4b1b      	ldr	r3, [pc, #108]	; (8016944 <MX_SPI3_Init+0x74>)
 80168d6:	4a1c      	ldr	r2, [pc, #112]	; (8016948 <MX_SPI3_Init+0x78>)
 80168d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80168da:	4b1a      	ldr	r3, [pc, #104]	; (8016944 <MX_SPI3_Init+0x74>)
 80168dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80168e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80168e2:	4b18      	ldr	r3, [pc, #96]	; (8016944 <MX_SPI3_Init+0x74>)
 80168e4:	2200      	movs	r2, #0
 80168e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80168e8:	4b16      	ldr	r3, [pc, #88]	; (8016944 <MX_SPI3_Init+0x74>)
 80168ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80168ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80168f0:	4b14      	ldr	r3, [pc, #80]	; (8016944 <MX_SPI3_Init+0x74>)
 80168f2:	2200      	movs	r2, #0
 80168f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80168f6:	4b13      	ldr	r3, [pc, #76]	; (8016944 <MX_SPI3_Init+0x74>)
 80168f8:	2201      	movs	r2, #1
 80168fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80168fc:	4b11      	ldr	r3, [pc, #68]	; (8016944 <MX_SPI3_Init+0x74>)
 80168fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016902:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8016904:	4b0f      	ldr	r3, [pc, #60]	; (8016944 <MX_SPI3_Init+0x74>)
 8016906:	2208      	movs	r2, #8
 8016908:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801690a:	4b0e      	ldr	r3, [pc, #56]	; (8016944 <MX_SPI3_Init+0x74>)
 801690c:	2200      	movs	r2, #0
 801690e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8016910:	4b0c      	ldr	r3, [pc, #48]	; (8016944 <MX_SPI3_Init+0x74>)
 8016912:	2200      	movs	r2, #0
 8016914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016916:	4b0b      	ldr	r3, [pc, #44]	; (8016944 <MX_SPI3_Init+0x74>)
 8016918:	2200      	movs	r2, #0
 801691a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 801691c:	4b09      	ldr	r3, [pc, #36]	; (8016944 <MX_SPI3_Init+0x74>)
 801691e:	2207      	movs	r2, #7
 8016920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016922:	4b08      	ldr	r3, [pc, #32]	; (8016944 <MX_SPI3_Init+0x74>)
 8016924:	2200      	movs	r2, #0
 8016926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8016928:	4b06      	ldr	r3, [pc, #24]	; (8016944 <MX_SPI3_Init+0x74>)
 801692a:	2200      	movs	r2, #0
 801692c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801692e:	4805      	ldr	r0, [pc, #20]	; (8016944 <MX_SPI3_Init+0x74>)
 8016930:	f005 fb8c 	bl	801c04c <HAL_SPI_Init>
 8016934:	4603      	mov	r3, r0
 8016936:	2b00      	cmp	r3, #0
 8016938:	d001      	beq.n	801693e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 801693a:	f7f3 fafa 	bl	8009f32 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801693e:	bf00      	nop
 8016940:	bd80      	pop	{r7, pc}
 8016942:	bf00      	nop
 8016944:	2000d9e4 	.word	0x2000d9e4
 8016948:	40003c00 	.word	0x40003c00

0801694c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b08c      	sub	sp, #48	; 0x30
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016954:	f107 031c 	add.w	r3, r7, #28
 8016958:	2200      	movs	r2, #0
 801695a:	601a      	str	r2, [r3, #0]
 801695c:	605a      	str	r2, [r3, #4]
 801695e:	609a      	str	r2, [r3, #8]
 8016960:	60da      	str	r2, [r3, #12]
 8016962:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	4a3d      	ldr	r2, [pc, #244]	; (8016a60 <HAL_SPI_MspInit+0x114>)
 801696a:	4293      	cmp	r3, r2
 801696c:	d129      	bne.n	80169c2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801696e:	4b3d      	ldr	r3, [pc, #244]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 8016970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016972:	4a3c      	ldr	r2, [pc, #240]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 8016974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016978:	6613      	str	r3, [r2, #96]	; 0x60
 801697a:	4b3a      	ldr	r3, [pc, #232]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 801697c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801697e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016982:	61bb      	str	r3, [r7, #24]
 8016984:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016986:	4b37      	ldr	r3, [pc, #220]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 8016988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801698a:	4a36      	ldr	r2, [pc, #216]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 801698c:	f043 0301 	orr.w	r3, r3, #1
 8016990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016992:	4b34      	ldr	r3, [pc, #208]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 8016994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016996:	f003 0301 	and.w	r3, r3, #1
 801699a:	617b      	str	r3, [r7, #20]
 801699c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 801699e:	23e0      	movs	r3, #224	; 0xe0
 80169a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80169a2:	2302      	movs	r3, #2
 80169a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169a6:	2300      	movs	r3, #0
 80169a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80169aa:	2300      	movs	r3, #0
 80169ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80169ae:	2305      	movs	r3, #5
 80169b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80169b2:	f107 031c 	add.w	r3, r7, #28
 80169b6:	4619      	mov	r1, r3
 80169b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80169bc:	f004 f98c 	bl	801acd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80169c0:	e049      	b.n	8016a56 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	4a28      	ldr	r2, [pc, #160]	; (8016a68 <HAL_SPI_MspInit+0x11c>)
 80169c8:	4293      	cmp	r3, r2
 80169ca:	d144      	bne.n	8016a56 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80169cc:	4b25      	ldr	r3, [pc, #148]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 80169ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169d0:	4a24      	ldr	r2, [pc, #144]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 80169d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80169d6:	6593      	str	r3, [r2, #88]	; 0x58
 80169d8:	4b22      	ldr	r3, [pc, #136]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 80169da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80169e0:	613b      	str	r3, [r7, #16]
 80169e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80169e4:	4b1f      	ldr	r3, [pc, #124]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 80169e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169e8:	4a1e      	ldr	r2, [pc, #120]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 80169ea:	f043 0304 	orr.w	r3, r3, #4
 80169ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80169f0:	4b1c      	ldr	r3, [pc, #112]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 80169f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169f4:	f003 0304 	and.w	r3, r3, #4
 80169f8:	60fb      	str	r3, [r7, #12]
 80169fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80169fc:	4b19      	ldr	r3, [pc, #100]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 80169fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a00:	4a18      	ldr	r2, [pc, #96]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 8016a02:	f043 0302 	orr.w	r3, r3, #2
 8016a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016a08:	4b16      	ldr	r3, [pc, #88]	; (8016a64 <HAL_SPI_MspInit+0x118>)
 8016a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a0c:	f003 0302 	and.w	r3, r3, #2
 8016a10:	60bb      	str	r3, [r7, #8]
 8016a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8016a14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8016a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a1a:	2302      	movs	r3, #2
 8016a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016a22:	2300      	movs	r3, #0
 8016a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8016a26:	2306      	movs	r3, #6
 8016a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016a2a:	f107 031c 	add.w	r3, r7, #28
 8016a2e:	4619      	mov	r1, r3
 8016a30:	480e      	ldr	r0, [pc, #56]	; (8016a6c <HAL_SPI_MspInit+0x120>)
 8016a32:	f004 f951 	bl	801acd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8016a36:	2320      	movs	r3, #32
 8016a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a3a:	2302      	movs	r3, #2
 8016a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016a42:	2300      	movs	r3, #0
 8016a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8016a46:	2306      	movs	r3, #6
 8016a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016a4a:	f107 031c 	add.w	r3, r7, #28
 8016a4e:	4619      	mov	r1, r3
 8016a50:	4807      	ldr	r0, [pc, #28]	; (8016a70 <HAL_SPI_MspInit+0x124>)
 8016a52:	f004 f941 	bl	801acd8 <HAL_GPIO_Init>
}
 8016a56:	bf00      	nop
 8016a58:	3730      	adds	r7, #48	; 0x30
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	40013000 	.word	0x40013000
 8016a64:	40021000 	.word	0x40021000
 8016a68:	40003c00 	.word	0x40003c00
 8016a6c:	48000800 	.word	0x48000800
 8016a70:	48000400 	.word	0x48000400

08016a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b082      	sub	sp, #8
 8016a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016a7a:	4b0f      	ldr	r3, [pc, #60]	; (8016ab8 <HAL_MspInit+0x44>)
 8016a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016a7e:	4a0e      	ldr	r2, [pc, #56]	; (8016ab8 <HAL_MspInit+0x44>)
 8016a80:	f043 0301 	orr.w	r3, r3, #1
 8016a84:	6613      	str	r3, [r2, #96]	; 0x60
 8016a86:	4b0c      	ldr	r3, [pc, #48]	; (8016ab8 <HAL_MspInit+0x44>)
 8016a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016a8a:	f003 0301 	and.w	r3, r3, #1
 8016a8e:	607b      	str	r3, [r7, #4]
 8016a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8016a92:	4b09      	ldr	r3, [pc, #36]	; (8016ab8 <HAL_MspInit+0x44>)
 8016a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a96:	4a08      	ldr	r2, [pc, #32]	; (8016ab8 <HAL_MspInit+0x44>)
 8016a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8016a9e:	4b06      	ldr	r3, [pc, #24]	; (8016ab8 <HAL_MspInit+0x44>)
 8016aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016aa6:	603b      	str	r3, [r7, #0]
 8016aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8016aaa:	f004 fb53 	bl	801b154 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016aae:	bf00      	nop
 8016ab0:	3708      	adds	r7, #8
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}
 8016ab6:	bf00      	nop
 8016ab8:	40021000 	.word	0x40021000

08016abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016abc:	b480      	push	{r7}
 8016abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016ac0:	e7fe      	b.n	8016ac0 <NMI_Handler+0x4>

08016ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016ac2:	b480      	push	{r7}
 8016ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016ac6:	e7fe      	b.n	8016ac6 <HardFault_Handler+0x4>

08016ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016ac8:	b480      	push	{r7}
 8016aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016acc:	e7fe      	b.n	8016acc <MemManage_Handler+0x4>

08016ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016ace:	b480      	push	{r7}
 8016ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016ad2:	e7fe      	b.n	8016ad2 <BusFault_Handler+0x4>

08016ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016ad8:	e7fe      	b.n	8016ad8 <UsageFault_Handler+0x4>

08016ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016ada:	b480      	push	{r7}
 8016adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016ade:	bf00      	nop
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae6:	4770      	bx	lr

08016ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016ae8:	b480      	push	{r7}
 8016aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016aec:	bf00      	nop
 8016aee:	46bd      	mov	sp, r7
 8016af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af4:	4770      	bx	lr

08016af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8016af6:	b480      	push	{r7}
 8016af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016afa:	bf00      	nop
 8016afc:	46bd      	mov	sp, r7
 8016afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b02:	4770      	bx	lr

08016b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016b08:	f001 f88e 	bl	8017c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016b0c:	bf00      	nop
 8016b0e:	bd80      	pop	{r7, pc}

08016b10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8016b14:	4802      	ldr	r0, [pc, #8]	; (8016b20 <DMA1_Channel1_IRQHandler+0x10>)
 8016b16:	f003 fd27 	bl	801a568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8016b1a:	bf00      	nop
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	200007a0 	.word	0x200007a0

08016b24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8016b28:	4802      	ldr	r0, [pc, #8]	; (8016b34 <ADC1_2_IRQHandler+0x10>)
 8016b2a:	f002 f82d 	bl	8018b88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8016b2e:	bf00      	nop
 8016b30:	bd80      	pop	{r7, pc}
 8016b32:	bf00      	nop
 8016b34:	20000734 	.word	0x20000734

08016b38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8016b3c:	480d      	ldr	r0, [pc, #52]	; (8016b74 <TIM6_DAC_IRQHandler+0x3c>)
 8016b3e:	f006 fc65 	bl	801d40c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8016b42:	f7f1 fa05 	bl	8007f50 <interrupt_timer>
  interupt_calSensor();
 8016b46:	f7eb f845 	bl	8001bd4 <interupt_calSensor>
  ICM20602_DataUpdate();
 8016b4a:	f7f0 ff23 	bl	8007994 <ICM20602_DataUpdate>
  interrupt_calGyro();
 8016b4e:	f7ea fe4f 	bl	80017f0 <interrupt_calGyro>
  AS5047_DataUpdate();
 8016b52:	f7f0 fbdb 	bl	800730c <AS5047_DataUpdate>
  interupt_calEncoder();
 8016b56:	f7ea fa93 	bl	8001080 <interupt_calEncoder>
  interupt_calFusion();
 8016b5a:	f7ea fc51 	bl	8001400 <interupt_calFusion>
  interrupt_WallCut();
 8016b5e:	f7ef fb47 	bl	80061f0 <interrupt_WallCut>
  interupt_DriveMotor();
 8016b62:	f7eb f9a9 	bl	8001eb8 <interupt_DriveMotor>

  interrupt_FailSafe();
 8016b66:	f7f2 ff3b 	bl	80099e0 <interrupt_FailSafe>
  interrupt_record();
 8016b6a:	f7ff fce1 	bl	8016530 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8016b6e:	bf00      	nop
 8016b70:	bd80      	pop	{r7, pc}
 8016b72:	bf00      	nop
 8016b74:	2000da4c 	.word	0x2000da4c

08016b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8016b78:	b480      	push	{r7}
 8016b7a:	af00      	add	r7, sp, #0
	return 1;
 8016b7c:	2301      	movs	r3, #1
}
 8016b7e:	4618      	mov	r0, r3
 8016b80:	46bd      	mov	sp, r7
 8016b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b86:	4770      	bx	lr

08016b88 <_kill>:

int _kill(int pid, int sig)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8016b92:	f008 fb0f 	bl	801f1b4 <__errno>
 8016b96:	4603      	mov	r3, r0
 8016b98:	2216      	movs	r2, #22
 8016b9a:	601a      	str	r2, [r3, #0]
	return -1;
 8016b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3708      	adds	r7, #8
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}

08016ba8 <_exit>:

void _exit (int status)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b082      	sub	sp, #8
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8016bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f7ff ffe7 	bl	8016b88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8016bba:	e7fe      	b.n	8016bba <_exit+0x12>

08016bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b086      	sub	sp, #24
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	60f8      	str	r0, [r7, #12]
 8016bc4:	60b9      	str	r1, [r7, #8]
 8016bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016bc8:	2300      	movs	r3, #0
 8016bca:	617b      	str	r3, [r7, #20]
 8016bcc:	e00a      	b.n	8016be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8016bce:	f3af 8000 	nop.w
 8016bd2:	4601      	mov	r1, r0
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	1c5a      	adds	r2, r3, #1
 8016bd8:	60ba      	str	r2, [r7, #8]
 8016bda:	b2ca      	uxtb	r2, r1
 8016bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016bde:	697b      	ldr	r3, [r7, #20]
 8016be0:	3301      	adds	r3, #1
 8016be2:	617b      	str	r3, [r7, #20]
 8016be4:	697a      	ldr	r2, [r7, #20]
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	429a      	cmp	r2, r3
 8016bea:	dbf0      	blt.n	8016bce <_read+0x12>
	}

return len;
 8016bec:	687b      	ldr	r3, [r7, #4]
}
 8016bee:	4618      	mov	r0, r3
 8016bf0:	3718      	adds	r7, #24
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
	...

08016bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b086      	sub	sp, #24
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	60f8      	str	r0, [r7, #12]
 8016c00:	60b9      	str	r1, [r7, #8]
 8016c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016c04:	2300      	movs	r3, #0
 8016c06:	617b      	str	r3, [r7, #20]
 8016c08:	e00a      	b.n	8016c20 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8016c0a:	68b9      	ldr	r1, [r7, #8]
 8016c0c:	1c4b      	adds	r3, r1, #1
 8016c0e:	60bb      	str	r3, [r7, #8]
 8016c10:	2301      	movs	r3, #1
 8016c12:	2201      	movs	r2, #1
 8016c14:	4807      	ldr	r0, [pc, #28]	; (8016c34 <_write+0x3c>)
 8016c16:	f007 fc83 	bl	801e520 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016c1a:	697b      	ldr	r3, [r7, #20]
 8016c1c:	3301      	adds	r3, #1
 8016c1e:	617b      	str	r3, [r7, #20]
 8016c20:	697a      	ldr	r2, [r7, #20]
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	429a      	cmp	r2, r3
 8016c26:	dbf0      	blt.n	8016c0a <_write+0x12>
	}
	return len;
 8016c28:	687b      	ldr	r3, [r7, #4]
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3718      	adds	r7, #24
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	bf00      	nop
 8016c34:	2000e050 	.word	0x2000e050

08016c38 <_close>:

int _close(int file)
{
 8016c38:	b480      	push	{r7}
 8016c3a:	b083      	sub	sp, #12
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
	return -1;
 8016c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	370c      	adds	r7, #12
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4e:	4770      	bx	lr

08016c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016c50:	b480      	push	{r7}
 8016c52:	b083      	sub	sp, #12
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016c5a:	683b      	ldr	r3, [r7, #0]
 8016c5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016c60:	605a      	str	r2, [r3, #4]
	return 0;
 8016c62:	2300      	movs	r3, #0
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	370c      	adds	r7, #12
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6e:	4770      	bx	lr

08016c70 <_isatty>:

int _isatty(int file)
{
 8016c70:	b480      	push	{r7}
 8016c72:	b083      	sub	sp, #12
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
	return 1;
 8016c78:	2301      	movs	r3, #1
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	370c      	adds	r7, #12
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c84:	4770      	bx	lr

08016c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8016c86:	b480      	push	{r7}
 8016c88:	b085      	sub	sp, #20
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	60f8      	str	r0, [r7, #12]
 8016c8e:	60b9      	str	r1, [r7, #8]
 8016c90:	607a      	str	r2, [r7, #4]
	return 0;
 8016c92:	2300      	movs	r3, #0
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3714      	adds	r7, #20
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9e:	4770      	bx	lr

08016ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b086      	sub	sp, #24
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8016ca8:	4a14      	ldr	r2, [pc, #80]	; (8016cfc <_sbrk+0x5c>)
 8016caa:	4b15      	ldr	r3, [pc, #84]	; (8016d00 <_sbrk+0x60>)
 8016cac:	1ad3      	subs	r3, r2, r3
 8016cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016cb0:	697b      	ldr	r3, [r7, #20]
 8016cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016cb4:	4b13      	ldr	r3, [pc, #76]	; (8016d04 <_sbrk+0x64>)
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d102      	bne.n	8016cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016cbc:	4b11      	ldr	r3, [pc, #68]	; (8016d04 <_sbrk+0x64>)
 8016cbe:	4a12      	ldr	r2, [pc, #72]	; (8016d08 <_sbrk+0x68>)
 8016cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8016cc2:	4b10      	ldr	r3, [pc, #64]	; (8016d04 <_sbrk+0x64>)
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	4413      	add	r3, r2
 8016cca:	693a      	ldr	r2, [r7, #16]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d207      	bcs.n	8016ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8016cd0:	f008 fa70 	bl	801f1b4 <__errno>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	220c      	movs	r2, #12
 8016cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8016cda:	f04f 33ff 	mov.w	r3, #4294967295
 8016cde:	e009      	b.n	8016cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8016ce0:	4b08      	ldr	r3, [pc, #32]	; (8016d04 <_sbrk+0x64>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016ce6:	4b07      	ldr	r3, [pc, #28]	; (8016d04 <_sbrk+0x64>)
 8016ce8:	681a      	ldr	r2, [r3, #0]
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	4413      	add	r3, r2
 8016cee:	4a05      	ldr	r2, [pc, #20]	; (8016d04 <_sbrk+0x64>)
 8016cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016cf2:	68fb      	ldr	r3, [r7, #12]
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3718      	adds	r7, #24
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}
 8016cfc:	2001c000 	.word	0x2001c000
 8016d00:	00000400 	.word	0x00000400
 8016d04:	2000da48 	.word	0x2000da48
 8016d08:	2000e0f8 	.word	0x2000e0f8

08016d0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8016d0c:	b480      	push	{r7}
 8016d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8016d10:	4b06      	ldr	r3, [pc, #24]	; (8016d2c <SystemInit+0x20>)
 8016d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016d16:	4a05      	ldr	r2, [pc, #20]	; (8016d2c <SystemInit+0x20>)
 8016d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016d20:	bf00      	nop
 8016d22:	46bd      	mov	sp, r7
 8016d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d28:	4770      	bx	lr
 8016d2a:	bf00      	nop
 8016d2c:	e000ed00 	.word	0xe000ed00

08016d30 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b084      	sub	sp, #16
 8016d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016d36:	1d3b      	adds	r3, r7, #4
 8016d38:	2200      	movs	r2, #0
 8016d3a:	601a      	str	r2, [r3, #0]
 8016d3c:	605a      	str	r2, [r3, #4]
 8016d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8016d40:	4b14      	ldr	r3, [pc, #80]	; (8016d94 <MX_TIM6_Init+0x64>)
 8016d42:	4a15      	ldr	r2, [pc, #84]	; (8016d98 <MX_TIM6_Init+0x68>)
 8016d44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 8016d46:	4b13      	ldr	r3, [pc, #76]	; (8016d94 <MX_TIM6_Init+0x64>)
 8016d48:	2254      	movs	r2, #84	; 0x54
 8016d4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016d4c:	4b11      	ldr	r3, [pc, #68]	; (8016d94 <MX_TIM6_Init+0x64>)
 8016d4e:	2200      	movs	r2, #0
 8016d50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8016d52:	4b10      	ldr	r3, [pc, #64]	; (8016d94 <MX_TIM6_Init+0x64>)
 8016d54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8016d58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016d5a:	4b0e      	ldr	r3, [pc, #56]	; (8016d94 <MX_TIM6_Init+0x64>)
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8016d60:	480c      	ldr	r0, [pc, #48]	; (8016d94 <MX_TIM6_Init+0x64>)
 8016d62:	f006 f88b 	bl	801ce7c <HAL_TIM_Base_Init>
 8016d66:	4603      	mov	r3, r0
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d001      	beq.n	8016d70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8016d6c:	f7f3 f8e1 	bl	8009f32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016d70:	2300      	movs	r3, #0
 8016d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016d74:	2300      	movs	r3, #0
 8016d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8016d78:	1d3b      	adds	r3, r7, #4
 8016d7a:	4619      	mov	r1, r3
 8016d7c:	4805      	ldr	r0, [pc, #20]	; (8016d94 <MX_TIM6_Init+0x64>)
 8016d7e:	f007 f9f9 	bl	801e174 <HAL_TIMEx_MasterConfigSynchronization>
 8016d82:	4603      	mov	r3, r0
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d001      	beq.n	8016d8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8016d88:	f7f3 f8d3 	bl	8009f32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8016d8c:	bf00      	nop
 8016d8e:	3710      	adds	r7, #16
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd80      	pop	{r7, pc}
 8016d94:	2000da4c 	.word	0x2000da4c
 8016d98:	40001000 	.word	0x40001000

08016d9c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b098      	sub	sp, #96	; 0x60
 8016da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016da2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016da6:	2200      	movs	r2, #0
 8016da8:	601a      	str	r2, [r3, #0]
 8016daa:	605a      	str	r2, [r3, #4]
 8016dac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016dae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016db2:	2200      	movs	r2, #0
 8016db4:	601a      	str	r2, [r3, #0]
 8016db6:	605a      	str	r2, [r3, #4]
 8016db8:	609a      	str	r2, [r3, #8]
 8016dba:	60da      	str	r2, [r3, #12]
 8016dbc:	611a      	str	r2, [r3, #16]
 8016dbe:	615a      	str	r2, [r3, #20]
 8016dc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016dc2:	1d3b      	adds	r3, r7, #4
 8016dc4:	2234      	movs	r2, #52	; 0x34
 8016dc6:	2100      	movs	r1, #0
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f008 fa2b 	bl	801f224 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8016dce:	4b41      	ldr	r3, [pc, #260]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016dd0:	4a41      	ldr	r2, [pc, #260]	; (8016ed8 <MX_TIM8_Init+0x13c>)
 8016dd2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8016dd4:	4b3f      	ldr	r3, [pc, #252]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016dd6:	2201      	movs	r2, #1
 8016dd8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016dda:	4b3e      	ldr	r3, [pc, #248]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016ddc:	2200      	movs	r2, #0
 8016dde:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8016de0:	4b3c      	ldr	r3, [pc, #240]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016de2:	f240 628f 	movw	r2, #1679	; 0x68f
 8016de6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016de8:	4b3a      	ldr	r3, [pc, #232]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016dea:	2200      	movs	r2, #0
 8016dec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8016dee:	4b39      	ldr	r3, [pc, #228]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016df0:	2200      	movs	r2, #0
 8016df2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016df4:	4b37      	ldr	r3, [pc, #220]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016df6:	2200      	movs	r2, #0
 8016df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8016dfa:	4836      	ldr	r0, [pc, #216]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016dfc:	f006 f906 	bl	801d00c <HAL_TIM_PWM_Init>
 8016e00:	4603      	mov	r3, r0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d001      	beq.n	8016e0a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8016e06:	f7f3 f894 	bl	8009f32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016e12:	2300      	movs	r3, #0
 8016e14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8016e16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016e1a:	4619      	mov	r1, r3
 8016e1c:	482d      	ldr	r0, [pc, #180]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016e1e:	f007 f9a9 	bl	801e174 <HAL_TIMEx_MasterConfigSynchronization>
 8016e22:	4603      	mov	r3, r0
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d001      	beq.n	8016e2c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8016e28:	f7f3 f883 	bl	8009f32 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016e2c:	2360      	movs	r3, #96	; 0x60
 8016e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8016e30:	f240 13a3 	movw	r3, #419	; 0x1a3
 8016e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016e36:	2300      	movs	r3, #0
 8016e38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016e3e:	2300      	movs	r3, #0
 8016e40:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016e42:	2300      	movs	r3, #0
 8016e44:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016e46:	2300      	movs	r3, #0
 8016e48:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016e4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016e4e:	2200      	movs	r2, #0
 8016e50:	4619      	mov	r1, r3
 8016e52:	4820      	ldr	r0, [pc, #128]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016e54:	f006 fc5a 	bl	801d70c <HAL_TIM_PWM_ConfigChannel>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d001      	beq.n	8016e62 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8016e5e:	f7f3 f868 	bl	8009f32 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8016e62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016e66:	2208      	movs	r2, #8
 8016e68:	4619      	mov	r1, r3
 8016e6a:	481a      	ldr	r0, [pc, #104]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016e6c:	f006 fc4e 	bl	801d70c <HAL_TIM_PWM_ConfigChannel>
 8016e70:	4603      	mov	r3, r0
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d001      	beq.n	8016e7a <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8016e76:	f7f3 f85c 	bl	8009f32 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016e82:	2300      	movs	r3, #0
 8016e84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016e86:	2300      	movs	r3, #0
 8016e88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016e92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016e94:	2300      	movs	r3, #0
 8016e96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8016ea0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8016eb2:	1d3b      	adds	r3, r7, #4
 8016eb4:	4619      	mov	r1, r3
 8016eb6:	4807      	ldr	r0, [pc, #28]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016eb8:	f007 f9ea 	bl	801e290 <HAL_TIMEx_ConfigBreakDeadTime>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d001      	beq.n	8016ec6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8016ec2:	f7f3 f836 	bl	8009f32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8016ec6:	4803      	ldr	r0, [pc, #12]	; (8016ed4 <MX_TIM8_Init+0x138>)
 8016ec8:	f000 f8da 	bl	8017080 <HAL_TIM_MspPostInit>

}
 8016ecc:	bf00      	nop
 8016ece:	3760      	adds	r7, #96	; 0x60
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}
 8016ed4:	2000da98 	.word	0x2000da98
 8016ed8:	40013400 	.word	0x40013400

08016edc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b094      	sub	sp, #80	; 0x50
 8016ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8016ee2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	601a      	str	r2, [r3, #0]
 8016eea:	605a      	str	r2, [r3, #4]
 8016eec:	609a      	str	r2, [r3, #8]
 8016eee:	60da      	str	r2, [r3, #12]
 8016ef0:	611a      	str	r2, [r3, #16]
 8016ef2:	615a      	str	r2, [r3, #20]
 8016ef4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016ef6:	463b      	mov	r3, r7
 8016ef8:	2234      	movs	r2, #52	; 0x34
 8016efa:	2100      	movs	r1, #0
 8016efc:	4618      	mov	r0, r3
 8016efe:	f008 f991 	bl	801f224 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8016f02:	4b30      	ldr	r3, [pc, #192]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f04:	4a30      	ldr	r2, [pc, #192]	; (8016fc8 <MX_TIM16_Init+0xec>)
 8016f06:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8016f08:	4b2e      	ldr	r3, [pc, #184]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f0a:	2201      	movs	r2, #1
 8016f0c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016f0e:	4b2d      	ldr	r3, [pc, #180]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f10:	2200      	movs	r2, #0
 8016f12:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8016f14:	4b2b      	ldr	r3, [pc, #172]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f16:	2264      	movs	r2, #100	; 0x64
 8016f18:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016f1a:	4b2a      	ldr	r3, [pc, #168]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8016f20:	4b28      	ldr	r3, [pc, #160]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f22:	2200      	movs	r2, #0
 8016f24:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016f26:	4b27      	ldr	r3, [pc, #156]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f28:	2200      	movs	r2, #0
 8016f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8016f2c:	4825      	ldr	r0, [pc, #148]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f2e:	f005 ffa5 	bl	801ce7c <HAL_TIM_Base_Init>
 8016f32:	4603      	mov	r3, r0
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d001      	beq.n	8016f3c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8016f38:	f7f2 fffb 	bl	8009f32 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8016f3c:	4821      	ldr	r0, [pc, #132]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f3e:	f006 f865 	bl	801d00c <HAL_TIM_PWM_Init>
 8016f42:	4603      	mov	r3, r0
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d001      	beq.n	8016f4c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8016f48:	f7f2 fff3 	bl	8009f32 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016f4c:	2360      	movs	r3, #96	; 0x60
 8016f4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8016f50:	231e      	movs	r3, #30
 8016f52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016f54:	2300      	movs	r3, #0
 8016f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016f58:	2300      	movs	r3, #0
 8016f5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016f60:	2300      	movs	r3, #0
 8016f62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016f64:	2300      	movs	r3, #0
 8016f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016f68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	4619      	mov	r1, r3
 8016f70:	4814      	ldr	r0, [pc, #80]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016f72:	f006 fbcb 	bl	801d70c <HAL_TIM_PWM_ConfigChannel>
 8016f76:	4603      	mov	r3, r0
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d001      	beq.n	8016f80 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8016f7c:	f7f2 ffd9 	bl	8009f32 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016f80:	2300      	movs	r3, #0
 8016f82:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016f84:	2300      	movs	r3, #0
 8016f86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016f88:	2300      	movs	r3, #0
 8016f8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016f90:	2300      	movs	r3, #0
 8016f92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016f98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8016fa2:	463b      	mov	r3, r7
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	4807      	ldr	r0, [pc, #28]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016fa8:	f007 f972 	bl	801e290 <HAL_TIMEx_ConfigBreakDeadTime>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d001      	beq.n	8016fb6 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8016fb2:	f7f2 ffbe 	bl	8009f32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8016fb6:	4803      	ldr	r0, [pc, #12]	; (8016fc4 <MX_TIM16_Init+0xe8>)
 8016fb8:	f000 f862 	bl	8017080 <HAL_TIM_MspPostInit>

}
 8016fbc:	bf00      	nop
 8016fbe:	3750      	adds	r7, #80	; 0x50
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}
 8016fc4:	2000dae4 	.word	0x2000dae4
 8016fc8:	40014400 	.word	0x40014400

08016fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b084      	sub	sp, #16
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	4a16      	ldr	r2, [pc, #88]	; (8017034 <HAL_TIM_Base_MspInit+0x68>)
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	d114      	bne.n	8017008 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8016fde:	4b16      	ldr	r3, [pc, #88]	; (8017038 <HAL_TIM_Base_MspInit+0x6c>)
 8016fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fe2:	4a15      	ldr	r2, [pc, #84]	; (8017038 <HAL_TIM_Base_MspInit+0x6c>)
 8016fe4:	f043 0310 	orr.w	r3, r3, #16
 8016fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8016fea:	4b13      	ldr	r3, [pc, #76]	; (8017038 <HAL_TIM_Base_MspInit+0x6c>)
 8016fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fee:	f003 0310 	and.w	r3, r3, #16
 8016ff2:	60fb      	str	r3, [r7, #12]
 8016ff4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	2103      	movs	r1, #3
 8016ffa:	2036      	movs	r0, #54	; 0x36
 8016ffc:	f003 f903 	bl	801a206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017000:	2036      	movs	r0, #54	; 0x36
 8017002:	f003 f91a 	bl	801a23a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8017006:	e010      	b.n	801702a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	4a0b      	ldr	r2, [pc, #44]	; (801703c <HAL_TIM_Base_MspInit+0x70>)
 801700e:	4293      	cmp	r3, r2
 8017010:	d10b      	bne.n	801702a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8017012:	4b09      	ldr	r3, [pc, #36]	; (8017038 <HAL_TIM_Base_MspInit+0x6c>)
 8017014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017016:	4a08      	ldr	r2, [pc, #32]	; (8017038 <HAL_TIM_Base_MspInit+0x6c>)
 8017018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801701c:	6613      	str	r3, [r2, #96]	; 0x60
 801701e:	4b06      	ldr	r3, [pc, #24]	; (8017038 <HAL_TIM_Base_MspInit+0x6c>)
 8017020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017026:	60bb      	str	r3, [r7, #8]
 8017028:	68bb      	ldr	r3, [r7, #8]
}
 801702a:	bf00      	nop
 801702c:	3710      	adds	r7, #16
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
 8017032:	bf00      	nop
 8017034:	40001000 	.word	0x40001000
 8017038:	40021000 	.word	0x40021000
 801703c:	40014400 	.word	0x40014400

08017040 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8017040:	b480      	push	{r7}
 8017042:	b085      	sub	sp, #20
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	4a0a      	ldr	r2, [pc, #40]	; (8017078 <HAL_TIM_PWM_MspInit+0x38>)
 801704e:	4293      	cmp	r3, r2
 8017050:	d10b      	bne.n	801706a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8017052:	4b0a      	ldr	r3, [pc, #40]	; (801707c <HAL_TIM_PWM_MspInit+0x3c>)
 8017054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017056:	4a09      	ldr	r2, [pc, #36]	; (801707c <HAL_TIM_PWM_MspInit+0x3c>)
 8017058:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801705c:	6613      	str	r3, [r2, #96]	; 0x60
 801705e:	4b07      	ldr	r3, [pc, #28]	; (801707c <HAL_TIM_PWM_MspInit+0x3c>)
 8017060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017066:	60fb      	str	r3, [r7, #12]
 8017068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801706a:	bf00      	nop
 801706c:	3714      	adds	r7, #20
 801706e:	46bd      	mov	sp, r7
 8017070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017074:	4770      	bx	lr
 8017076:	bf00      	nop
 8017078:	40013400 	.word	0x40013400
 801707c:	40021000 	.word	0x40021000

08017080 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b08a      	sub	sp, #40	; 0x28
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017088:	f107 0314 	add.w	r3, r7, #20
 801708c:	2200      	movs	r2, #0
 801708e:	601a      	str	r2, [r3, #0]
 8017090:	605a      	str	r2, [r3, #4]
 8017092:	609a      	str	r2, [r3, #8]
 8017094:	60da      	str	r2, [r3, #12]
 8017096:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	4a2b      	ldr	r2, [pc, #172]	; (801714c <HAL_TIM_MspPostInit+0xcc>)
 801709e:	4293      	cmp	r3, r2
 80170a0:	d12d      	bne.n	80170fe <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80170a2:	4b2b      	ldr	r3, [pc, #172]	; (8017150 <HAL_TIM_MspPostInit+0xd0>)
 80170a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80170a6:	4a2a      	ldr	r2, [pc, #168]	; (8017150 <HAL_TIM_MspPostInit+0xd0>)
 80170a8:	f043 0302 	orr.w	r3, r3, #2
 80170ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80170ae:	4b28      	ldr	r3, [pc, #160]	; (8017150 <HAL_TIM_MspPostInit+0xd0>)
 80170b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80170b2:	f003 0302 	and.w	r3, r3, #2
 80170b6:	613b      	str	r3, [r7, #16]
 80170b8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 80170ba:	2340      	movs	r3, #64	; 0x40
 80170bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80170be:	2302      	movs	r3, #2
 80170c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170c2:	2300      	movs	r3, #0
 80170c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80170c6:	2300      	movs	r3, #0
 80170c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80170ca:	2305      	movs	r3, #5
 80170cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80170ce:	f107 0314 	add.w	r3, r7, #20
 80170d2:	4619      	mov	r1, r3
 80170d4:	481f      	ldr	r0, [pc, #124]	; (8017154 <HAL_TIM_MspPostInit+0xd4>)
 80170d6:	f003 fdff 	bl	801acd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 80170da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80170de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80170e0:	2302      	movs	r3, #2
 80170e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170e4:	2300      	movs	r3, #0
 80170e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80170e8:	2300      	movs	r3, #0
 80170ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80170ec:	230a      	movs	r3, #10
 80170ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80170f0:	f107 0314 	add.w	r3, r7, #20
 80170f4:	4619      	mov	r1, r3
 80170f6:	4817      	ldr	r0, [pc, #92]	; (8017154 <HAL_TIM_MspPostInit+0xd4>)
 80170f8:	f003 fdee 	bl	801acd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80170fc:	e022      	b.n	8017144 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	4a15      	ldr	r2, [pc, #84]	; (8017158 <HAL_TIM_MspPostInit+0xd8>)
 8017104:	4293      	cmp	r3, r2
 8017106:	d11d      	bne.n	8017144 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017108:	4b11      	ldr	r3, [pc, #68]	; (8017150 <HAL_TIM_MspPostInit+0xd0>)
 801710a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801710c:	4a10      	ldr	r2, [pc, #64]	; (8017150 <HAL_TIM_MspPostInit+0xd0>)
 801710e:	f043 0301 	orr.w	r3, r3, #1
 8017112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017114:	4b0e      	ldr	r3, [pc, #56]	; (8017150 <HAL_TIM_MspPostInit+0xd0>)
 8017116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017118:	f003 0301 	and.w	r3, r3, #1
 801711c:	60fb      	str	r3, [r7, #12]
 801711e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8017120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017126:	2302      	movs	r3, #2
 8017128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801712a:	2300      	movs	r3, #0
 801712c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801712e:	2300      	movs	r3, #0
 8017130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8017132:	2301      	movs	r3, #1
 8017134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8017136:	f107 0314 	add.w	r3, r7, #20
 801713a:	4619      	mov	r1, r3
 801713c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017140:	f003 fdca 	bl	801acd8 <HAL_GPIO_Init>
}
 8017144:	bf00      	nop
 8017146:	3728      	adds	r7, #40	; 0x28
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}
 801714c:	40013400 	.word	0x40013400
 8017150:	40021000 	.word	0x40021000
 8017154:	48000400 	.word	0x48000400
 8017158:	40014400 	.word	0x40014400

0801715c <get_center_velocity>:

parameter_speed speed600_shortest;

parameter_speed speed600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 801715c:	b084      	sub	sp, #16
 801715e:	b480      	push	{r7}
 8017160:	b083      	sub	sp, #12
 8017162:	af00      	add	r7, sp, #0
 8017164:	f107 0c10 	add.w	ip, r7, #16
 8017168:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 801716c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017170:	f113 0f02 	cmn.w	r3, #2
 8017174:	d102      	bne.n	801717c <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8017176:	69bb      	ldr	r3, [r7, #24]
 8017178:	607b      	str	r3, [r7, #4]
 801717a:	e083      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 801717c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017180:	f113 0f03 	cmn.w	r3, #3
 8017184:	d102      	bne.n	801718c <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8017186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017188:	607b      	str	r3, [r7, #4]
 801718a:	e07b      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 801718c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017190:	f113 0f04 	cmn.w	r3, #4
 8017194:	d102      	bne.n	801719c <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8017196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017198:	607b      	str	r3, [r7, #4]
 801719a:	e073      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 801719c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80171a0:	f113 0f05 	cmn.w	r3, #5
 80171a4:	d102      	bne.n	80171ac <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 80171a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171a8:	607b      	str	r3, [r7, #4]
 80171aa:	e06b      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 80171ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80171b0:	f113 0f06 	cmn.w	r3, #6
 80171b4:	d102      	bne.n	80171bc <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 80171b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80171b8:	607b      	str	r3, [r7, #4]
 80171ba:	e063      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 80171bc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80171c0:	f113 0f07 	cmn.w	r3, #7
 80171c4:	d102      	bne.n	80171cc <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 80171c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80171c8:	607b      	str	r3, [r7, #4]
 80171ca:	e05b      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 80171cc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80171d0:	f113 0f08 	cmn.w	r3, #8
 80171d4:	d103      	bne.n	80171de <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 80171d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80171da:	607b      	str	r3, [r7, #4]
 80171dc:	e052      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 80171de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80171e2:	f113 0f09 	cmn.w	r3, #9
 80171e6:	d103      	bne.n	80171f0 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 80171e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80171ec:	607b      	str	r3, [r7, #4]
 80171ee:	e049      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 80171f0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80171f4:	f113 0f0a 	cmn.w	r3, #10
 80171f8:	d103      	bne.n	8017202 <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 80171fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80171fe:	607b      	str	r3, [r7, #4]
 8017200:	e040      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 8017202:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017206:	f113 0f0b 	cmn.w	r3, #11
 801720a:	d103      	bne.n	8017214 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 801720c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017210:	607b      	str	r3, [r7, #4]
 8017212:	e037      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8017214:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017218:	f113 0f0c 	cmn.w	r3, #12
 801721c:	d103      	bne.n	8017226 <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 801721e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017222:	607b      	str	r3, [r7, #4]
 8017224:	e02e      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8017226:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801722a:	f113 0f0d 	cmn.w	r3, #13
 801722e:	d103      	bne.n	8017238 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8017230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017234:	607b      	str	r3, [r7, #4]
 8017236:	e025      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8017238:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801723c:	f113 0f0e 	cmn.w	r3, #14
 8017240:	d103      	bne.n	801724a <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 8017242:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8017246:	607b      	str	r3, [r7, #4]
 8017248:	e01c      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 801724a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801724e:	f113 0f0f 	cmn.w	r3, #15
 8017252:	d103      	bne.n	801725c <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8017254:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017258:	607b      	str	r3, [r7, #4]
 801725a:	e013      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 801725c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017260:	f113 0f10 	cmn.w	r3, #16
 8017264:	d103      	bne.n	801726e <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8017266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801726a:	607b      	str	r3, [r7, #4]
 801726c:	e00a      	b.n	8017284 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 801726e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017272:	f113 0f11 	cmn.w	r3, #17
 8017276:	d103      	bne.n	8017280 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8017278:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801727c:	607b      	str	r3, [r7, #4]
 801727e:	e001      	b.n	8017284 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	ee07 3a90 	vmov	s15, r3
}
 801728a:	eeb0 0a67 	vmov.f32	s0, s15
 801728e:	370c      	adds	r7, #12
 8017290:	46bd      	mov	sp, r7
 8017292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017296:	b004      	add	sp, #16
 8017298:	4770      	bx	lr
	...

0801729c <input_parameter>:

void input_parameter(void) {
 801729c:	b480      	push	{r7}
 801729e:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 80172a0:	4b8f      	ldr	r3, [pc, #572]	; (80174e0 <input_parameter+0x244>)
 80172a2:	4a90      	ldr	r2, [pc, #576]	; (80174e4 <input_parameter+0x248>)
 80172a4:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 80172a6:	4b8e      	ldr	r3, [pc, #568]	; (80174e0 <input_parameter+0x244>)
 80172a8:	4a8e      	ldr	r2, [pc, #568]	; (80174e4 <input_parameter+0x248>)
 80172aa:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 80172ac:	4b8c      	ldr	r3, [pc, #560]	; (80174e0 <input_parameter+0x244>)
 80172ae:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 80172b0:	4a8b      	ldr	r2, [pc, #556]	; (80174e0 <input_parameter+0x244>)
 80172b2:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 930; //550
 80172b4:	4b8a      	ldr	r3, [pc, #552]	; (80174e0 <input_parameter+0x244>)
 80172b6:	4a8c      	ldr	r2, [pc, #560]	; (80174e8 <input_parameter+0x24c>)
 80172b8:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 11000; //10000
 80172ba:	4b89      	ldr	r3, [pc, #548]	; (80174e0 <input_parameter+0x244>)
 80172bc:	4a8b      	ldr	r2, [pc, #556]	; (80174ec <input_parameter+0x250>)
 80172be:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 0.5; //55;
 80172c0:	4b87      	ldr	r3, [pc, #540]	; (80174e0 <input_parameter+0x244>)
 80172c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80172c6:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 80172c8:	4b85      	ldr	r3, [pc, #532]	; (80174e0 <input_parameter+0x244>)
 80172ca:	4a89      	ldr	r2, [pc, #548]	; (80174f0 <input_parameter+0x254>)
 80172cc:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 80172ce:	4b84      	ldr	r3, [pc, #528]	; (80174e0 <input_parameter+0x244>)
 80172d0:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 80172d2:	4a83      	ldr	r2, [pc, #524]	; (80174e0 <input_parameter+0x244>)
 80172d4:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 930;
 80172d6:	4b82      	ldr	r3, [pc, #520]	; (80174e0 <input_parameter+0x244>)
 80172d8:	4a83      	ldr	r2, [pc, #524]	; (80174e8 <input_parameter+0x24c>)
 80172da:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 11000;
 80172dc:	4b80      	ldr	r3, [pc, #512]	; (80174e0 <input_parameter+0x244>)
 80172de:	4a83      	ldr	r2, [pc, #524]	; (80174ec <input_parameter+0x250>)
 80172e0:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 0.5; //50;
 80172e2:	4b7f      	ldr	r3, [pc, #508]	; (80174e0 <input_parameter+0x244>)
 80172e4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80172e8:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 80172ea:	4b7d      	ldr	r3, [pc, #500]	; (80174e0 <input_parameter+0x244>)
 80172ec:	4a81      	ldr	r2, [pc, #516]	; (80174f4 <input_parameter+0x258>)
 80172ee:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 80172f0:	4b81      	ldr	r3, [pc, #516]	; (80174f8 <input_parameter+0x25c>)
 80172f2:	4a82      	ldr	r2, [pc, #520]	; (80174fc <input_parameter+0x260>)
 80172f4:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 80172f6:	4b80      	ldr	r3, [pc, #512]	; (80174f8 <input_parameter+0x25c>)
 80172f8:	4a80      	ldr	r2, [pc, #512]	; (80174fc <input_parameter+0x260>)
 80172fa:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 80172fc:	4b7e      	ldr	r3, [pc, #504]	; (80174f8 <input_parameter+0x25c>)
 80172fe:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8017300:	4a7d      	ldr	r2, [pc, #500]	; (80174f8 <input_parameter+0x25c>)
 8017302:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8017304:	4b7c      	ldr	r3, [pc, #496]	; (80174f8 <input_parameter+0x25c>)
 8017306:	4a7e      	ldr	r2, [pc, #504]	; (8017500 <input_parameter+0x264>)
 8017308:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 801730a:	4b7b      	ldr	r3, [pc, #492]	; (80174f8 <input_parameter+0x25c>)
 801730c:	4a7d      	ldr	r2, [pc, #500]	; (8017504 <input_parameter+0x268>)
 801730e:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8017310:	4b79      	ldr	r3, [pc, #484]	; (80174f8 <input_parameter+0x25c>)
 8017312:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017316:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017318:	4b77      	ldr	r3, [pc, #476]	; (80174f8 <input_parameter+0x25c>)
 801731a:	4a75      	ldr	r2, [pc, #468]	; (80174f0 <input_parameter+0x254>)
 801731c:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 801731e:	4b76      	ldr	r3, [pc, #472]	; (80174f8 <input_parameter+0x25c>)
 8017320:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8017322:	4a75      	ldr	r2, [pc, #468]	; (80174f8 <input_parameter+0x25c>)
 8017324:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017326:	4b74      	ldr	r3, [pc, #464]	; (80174f8 <input_parameter+0x25c>)
 8017328:	4a77      	ldr	r2, [pc, #476]	; (8017508 <input_parameter+0x26c>)
 801732a:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 801732c:	4b72      	ldr	r3, [pc, #456]	; (80174f8 <input_parameter+0x25c>)
 801732e:	4a75      	ldr	r2, [pc, #468]	; (8017504 <input_parameter+0x268>)
 8017330:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8017332:	4b71      	ldr	r3, [pc, #452]	; (80174f8 <input_parameter+0x25c>)
 8017334:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017338:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 801733a:	4b6f      	ldr	r3, [pc, #444]	; (80174f8 <input_parameter+0x25c>)
 801733c:	4a6d      	ldr	r2, [pc, #436]	; (80174f4 <input_parameter+0x258>)
 801733e:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8017340:	4b67      	ldr	r3, [pc, #412]	; (80174e0 <input_parameter+0x244>)
 8017342:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8017344:	4a71      	ldr	r2, [pc, #452]	; (801750c <input_parameter+0x270>)
 8017346:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8017348:	4b65      	ldr	r3, [pc, #404]	; (80174e0 <input_parameter+0x244>)
 801734a:	edd3 7a01 	vldr	s15, [r3, #4]
 801734e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8017510 <input_parameter+0x274>
 8017352:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8017356:	4b6d      	ldr	r3, [pc, #436]	; (801750c <input_parameter+0x270>)
 8017358:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 801735c:	4b60      	ldr	r3, [pc, #384]	; (80174e0 <input_parameter+0x244>)
 801735e:	689b      	ldr	r3, [r3, #8]
 8017360:	4a6a      	ldr	r2, [pc, #424]	; (801750c <input_parameter+0x270>)
 8017362:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8017364:	4b5e      	ldr	r3, [pc, #376]	; (80174e0 <input_parameter+0x244>)
 8017366:	695b      	ldr	r3, [r3, #20]
 8017368:	4a68      	ldr	r2, [pc, #416]	; (801750c <input_parameter+0x270>)
 801736a:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 801736c:	4b5c      	ldr	r3, [pc, #368]	; (80174e0 <input_parameter+0x244>)
 801736e:	699b      	ldr	r3, [r3, #24]
 8017370:	4a66      	ldr	r2, [pc, #408]	; (801750c <input_parameter+0x270>)
 8017372:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017374:	4b5a      	ldr	r3, [pc, #360]	; (80174e0 <input_parameter+0x244>)
 8017376:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 801737a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801737e:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017382:	4b62      	ldr	r3, [pc, #392]	; (801750c <input_parameter+0x270>)
 8017384:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8017388:	4b55      	ldr	r3, [pc, #340]	; (80174e0 <input_parameter+0x244>)
 801738a:	691b      	ldr	r3, [r3, #16]
 801738c:	4a5f      	ldr	r2, [pc, #380]	; (801750c <input_parameter+0x270>)
 801738e:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8017390:	4b53      	ldr	r3, [pc, #332]	; (80174e0 <input_parameter+0x244>)
 8017392:	69db      	ldr	r3, [r3, #28]
 8017394:	4a5d      	ldr	r2, [pc, #372]	; (801750c <input_parameter+0x270>)
 8017396:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8017398:	4b51      	ldr	r3, [pc, #324]	; (80174e0 <input_parameter+0x244>)
 801739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801739c:	4a5b      	ldr	r2, [pc, #364]	; (801750c <input_parameter+0x270>)
 801739e:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 80173a0:	4b4f      	ldr	r3, [pc, #316]	; (80174e0 <input_parameter+0x244>)
 80173a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173a4:	4a59      	ldr	r2, [pc, #356]	; (801750c <input_parameter+0x270>)
 80173a6:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 80173a8:	4b4d      	ldr	r3, [pc, #308]	; (80174e0 <input_parameter+0x244>)
 80173aa:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 80173ae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80173b2:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 80173b6:	4b55      	ldr	r3, [pc, #340]	; (801750c <input_parameter+0x270>)
 80173b8:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 80173bc:	4b48      	ldr	r3, [pc, #288]	; (80174e0 <input_parameter+0x244>)
 80173be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c0:	4a52      	ldr	r2, [pc, #328]	; (801750c <input_parameter+0x270>)
 80173c2:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 80173c4:	4b51      	ldr	r3, [pc, #324]	; (801750c <input_parameter+0x270>)
 80173c6:	685b      	ldr	r3, [r3, #4]
 80173c8:	4a50      	ldr	r2, [pc, #320]	; (801750c <input_parameter+0x270>)
 80173ca:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 80173cc:	4b4f      	ldr	r3, [pc, #316]	; (801750c <input_parameter+0x270>)
 80173ce:	4a51      	ldr	r2, [pc, #324]	; (8017514 <input_parameter+0x278>)
 80173d0:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 80173d2:	4b4e      	ldr	r3, [pc, #312]	; (801750c <input_parameter+0x270>)
 80173d4:	4a50      	ldr	r2, [pc, #320]	; (8017518 <input_parameter+0x27c>)
 80173d6:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 80173d8:	4b4c      	ldr	r3, [pc, #304]	; (801750c <input_parameter+0x270>)
 80173da:	4a50      	ldr	r2, [pc, #320]	; (801751c <input_parameter+0x280>)
 80173dc:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 80173de:	4b4b      	ldr	r3, [pc, #300]	; (801750c <input_parameter+0x270>)
 80173e0:	4a4f      	ldr	r2, [pc, #316]	; (8017520 <input_parameter+0x284>)
 80173e2:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 80173e4:	4b49      	ldr	r3, [pc, #292]	; (801750c <input_parameter+0x270>)
 80173e6:	685b      	ldr	r3, [r3, #4]
 80173e8:	4a48      	ldr	r2, [pc, #288]	; (801750c <input_parameter+0x270>)
 80173ea:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 80173ec:	4b47      	ldr	r3, [pc, #284]	; (801750c <input_parameter+0x270>)
 80173ee:	4a49      	ldr	r2, [pc, #292]	; (8017514 <input_parameter+0x278>)
 80173f0:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 80173f2:	4b46      	ldr	r3, [pc, #280]	; (801750c <input_parameter+0x270>)
 80173f4:	4a48      	ldr	r2, [pc, #288]	; (8017518 <input_parameter+0x27c>)
 80173f6:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 80173f8:	4b44      	ldr	r3, [pc, #272]	; (801750c <input_parameter+0x270>)
 80173fa:	4a4a      	ldr	r2, [pc, #296]	; (8017524 <input_parameter+0x288>)
 80173fc:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 80173fe:	4b43      	ldr	r3, [pc, #268]	; (801750c <input_parameter+0x270>)
 8017400:	4a49      	ldr	r2, [pc, #292]	; (8017528 <input_parameter+0x28c>)
 8017402:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017404:	4b41      	ldr	r3, [pc, #260]	; (801750c <input_parameter+0x270>)
 8017406:	685b      	ldr	r3, [r3, #4]
 8017408:	4a40      	ldr	r2, [pc, #256]	; (801750c <input_parameter+0x270>)
 801740a:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 801740c:	4b3f      	ldr	r3, [pc, #252]	; (801750c <input_parameter+0x270>)
 801740e:	4a47      	ldr	r2, [pc, #284]	; (801752c <input_parameter+0x290>)
 8017410:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017412:	4b3e      	ldr	r3, [pc, #248]	; (801750c <input_parameter+0x270>)
 8017414:	4a46      	ldr	r2, [pc, #280]	; (8017530 <input_parameter+0x294>)
 8017416:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017418:	4b3c      	ldr	r3, [pc, #240]	; (801750c <input_parameter+0x270>)
 801741a:	4a46      	ldr	r2, [pc, #280]	; (8017534 <input_parameter+0x298>)
 801741c:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 801741e:	4b3b      	ldr	r3, [pc, #236]	; (801750c <input_parameter+0x270>)
 8017420:	4a45      	ldr	r2, [pc, #276]	; (8017538 <input_parameter+0x29c>)
 8017422:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017424:	4b39      	ldr	r3, [pc, #228]	; (801750c <input_parameter+0x270>)
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	4a38      	ldr	r2, [pc, #224]	; (801750c <input_parameter+0x270>)
 801742a:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 801742c:	4b37      	ldr	r3, [pc, #220]	; (801750c <input_parameter+0x270>)
 801742e:	4a43      	ldr	r2, [pc, #268]	; (801753c <input_parameter+0x2a0>)
 8017430:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017432:	4b36      	ldr	r3, [pc, #216]	; (801750c <input_parameter+0x270>)
 8017434:	4a3e      	ldr	r2, [pc, #248]	; (8017530 <input_parameter+0x294>)
 8017436:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017438:	4b34      	ldr	r3, [pc, #208]	; (801750c <input_parameter+0x270>)
 801743a:	4a41      	ldr	r2, [pc, #260]	; (8017540 <input_parameter+0x2a4>)
 801743c:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 801743e:	4b33      	ldr	r3, [pc, #204]	; (801750c <input_parameter+0x270>)
 8017440:	4a40      	ldr	r2, [pc, #256]	; (8017544 <input_parameter+0x2a8>)
 8017442:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017444:	4b31      	ldr	r3, [pc, #196]	; (801750c <input_parameter+0x270>)
 8017446:	685b      	ldr	r3, [r3, #4]
 8017448:	4a30      	ldr	r2, [pc, #192]	; (801750c <input_parameter+0x270>)
 801744a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 801744e:	4b2f      	ldr	r3, [pc, #188]	; (801750c <input_parameter+0x270>)
 8017450:	4a30      	ldr	r2, [pc, #192]	; (8017514 <input_parameter+0x278>)
 8017452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017456:	4b2d      	ldr	r3, [pc, #180]	; (801750c <input_parameter+0x270>)
 8017458:	4a2f      	ldr	r2, [pc, #188]	; (8017518 <input_parameter+0x27c>)
 801745a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 801745e:	4b2b      	ldr	r3, [pc, #172]	; (801750c <input_parameter+0x270>)
 8017460:	4a39      	ldr	r2, [pc, #228]	; (8017548 <input_parameter+0x2ac>)
 8017462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017466:	4b29      	ldr	r3, [pc, #164]	; (801750c <input_parameter+0x270>)
 8017468:	4a38      	ldr	r2, [pc, #224]	; (801754c <input_parameter+0x2b0>)
 801746a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 801746e:	4b27      	ldr	r3, [pc, #156]	; (801750c <input_parameter+0x270>)
 8017470:	685b      	ldr	r3, [r3, #4]
 8017472:	4a26      	ldr	r2, [pc, #152]	; (801750c <input_parameter+0x270>)
 8017474:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017478:	4b24      	ldr	r3, [pc, #144]	; (801750c <input_parameter+0x270>)
 801747a:	4a26      	ldr	r2, [pc, #152]	; (8017514 <input_parameter+0x278>)
 801747c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017480:	4b22      	ldr	r3, [pc, #136]	; (801750c <input_parameter+0x270>)
 8017482:	4a25      	ldr	r2, [pc, #148]	; (8017518 <input_parameter+0x27c>)
 8017484:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017488:	4b20      	ldr	r3, [pc, #128]	; (801750c <input_parameter+0x270>)
 801748a:	4a31      	ldr	r2, [pc, #196]	; (8017550 <input_parameter+0x2b4>)
 801748c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017490:	4b1e      	ldr	r3, [pc, #120]	; (801750c <input_parameter+0x270>)
 8017492:	4a30      	ldr	r2, [pc, #192]	; (8017554 <input_parameter+0x2b8>)
 8017494:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017498:	4b1c      	ldr	r3, [pc, #112]	; (801750c <input_parameter+0x270>)
 801749a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 801749c:	4a1b      	ldr	r2, [pc, #108]	; (801750c <input_parameter+0x270>)
 801749e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 80174a2:	4b1a      	ldr	r3, [pc, #104]	; (801750c <input_parameter+0x270>)
 80174a4:	4a2c      	ldr	r2, [pc, #176]	; (8017558 <input_parameter+0x2bc>)
 80174a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 80174aa:	4b18      	ldr	r3, [pc, #96]	; (801750c <input_parameter+0x270>)
 80174ac:	4a20      	ldr	r2, [pc, #128]	; (8017530 <input_parameter+0x294>)
 80174ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 80174b2:	4b16      	ldr	r3, [pc, #88]	; (801750c <input_parameter+0x270>)
 80174b4:	4a29      	ldr	r2, [pc, #164]	; (801755c <input_parameter+0x2c0>)
 80174b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 80174ba:	4b14      	ldr	r3, [pc, #80]	; (801750c <input_parameter+0x270>)
 80174bc:	4a28      	ldr	r2, [pc, #160]	; (8017560 <input_parameter+0x2c4>)
 80174be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80174c2:	4b12      	ldr	r3, [pc, #72]	; (801750c <input_parameter+0x270>)
 80174c4:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 80174c6:	4a11      	ldr	r2, [pc, #68]	; (801750c <input_parameter+0x270>)
 80174c8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 80174cc:	4b0f      	ldr	r3, [pc, #60]	; (801750c <input_parameter+0x270>)
 80174ce:	4a22      	ldr	r2, [pc, #136]	; (8017558 <input_parameter+0x2bc>)
 80174d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 80174d4:	4b0d      	ldr	r3, [pc, #52]	; (801750c <input_parameter+0x270>)
 80174d6:	4a16      	ldr	r2, [pc, #88]	; (8017530 <input_parameter+0x294>)
 80174d8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 80174dc:	4b0b      	ldr	r3, [pc, #44]	; (801750c <input_parameter+0x270>)
 80174de:	e041      	b.n	8017564 <input_parameter+0x2c8>
 80174e0:	2000db30 	.word	0x2000db30
 80174e4:	43960000 	.word	0x43960000
 80174e8:	44688000 	.word	0x44688000
 80174ec:	462be000 	.word	0x462be000
 80174f0:	41a00000 	.word	0x41a00000
 80174f4:	41980000 	.word	0x41980000
 80174f8:	2000dc78 	.word	0x2000dc78
 80174fc:	437a0000 	.word	0x437a0000
 8017500:	444f8000 	.word	0x444f8000
 8017504:	460ca000 	.word	0x460ca000
 8017508:	44368000 	.word	0x44368000
 801750c:	2000ddc0 	.word	0x2000ddc0
 8017510:	43480000 	.word	0x43480000
 8017514:	44160000 	.word	0x44160000
 8017518:	461c4000 	.word	0x461c4000
 801751c:	42980000 	.word	0x42980000
 8017520:	42d60000 	.word	0x42d60000
 8017524:	429a0000 	.word	0x429a0000
 8017528:	42ce0000 	.word	0x42ce0000
 801752c:	43d70000 	.word	0x43d70000
 8017530:	45fa0000 	.word	0x45fa0000
 8017534:	42820000 	.word	0x42820000
 8017538:	42a00000 	.word	0x42a00000
 801753c:	43e10000 	.word	0x43e10000
 8017540:	42700000 	.word	0x42700000
 8017544:	428e0000 	.word	0x428e0000
 8017548:	41d80000 	.word	0x41d80000
 801754c:	42b20000 	.word	0x42b20000
 8017550:	42040000 	.word	0x42040000
 8017554:	42b40000 	.word	0x42b40000
 8017558:	44188000 	.word	0x44188000
 801755c:	42860000 	.word	0x42860000
 8017560:	42920000 	.word	0x42920000
 8017564:	4a99      	ldr	r2, [pc, #612]	; (80177cc <input_parameter+0x530>)
 8017566:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 801756a:	4b99      	ldr	r3, [pc, #612]	; (80177d0 <input_parameter+0x534>)
 801756c:	4a99      	ldr	r2, [pc, #612]	; (80177d4 <input_parameter+0x538>)
 801756e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017572:	4b97      	ldr	r3, [pc, #604]	; (80177d0 <input_parameter+0x534>)
 8017574:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8017576:	4a96      	ldr	r2, [pc, #600]	; (80177d0 <input_parameter+0x534>)
 8017578:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 801757c:	4b94      	ldr	r3, [pc, #592]	; (80177d0 <input_parameter+0x534>)
 801757e:	4a96      	ldr	r2, [pc, #600]	; (80177d8 <input_parameter+0x53c>)
 8017580:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017584:	4b92      	ldr	r3, [pc, #584]	; (80177d0 <input_parameter+0x534>)
 8017586:	4a95      	ldr	r2, [pc, #596]	; (80177dc <input_parameter+0x540>)
 8017588:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 801758c:	4b90      	ldr	r3, [pc, #576]	; (80177d0 <input_parameter+0x534>)
 801758e:	4a94      	ldr	r2, [pc, #592]	; (80177e0 <input_parameter+0x544>)
 8017590:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017594:	4b8e      	ldr	r3, [pc, #568]	; (80177d0 <input_parameter+0x534>)
 8017596:	4a92      	ldr	r2, [pc, #584]	; (80177e0 <input_parameter+0x544>)
 8017598:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 801759c:	4b8c      	ldr	r3, [pc, #560]	; (80177d0 <input_parameter+0x534>)
 801759e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 80175a0:	4a8b      	ldr	r2, [pc, #556]	; (80177d0 <input_parameter+0x534>)
 80175a2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 80175a6:	4b8a      	ldr	r3, [pc, #552]	; (80177d0 <input_parameter+0x534>)
 80175a8:	4a8b      	ldr	r2, [pc, #556]	; (80177d8 <input_parameter+0x53c>)
 80175aa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 80175ae:	4b88      	ldr	r3, [pc, #544]	; (80177d0 <input_parameter+0x534>)
 80175b0:	4a8a      	ldr	r2, [pc, #552]	; (80177dc <input_parameter+0x540>)
 80175b2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 80175b6:	4b86      	ldr	r3, [pc, #536]	; (80177d0 <input_parameter+0x534>)
 80175b8:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 80175bc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 80175c0:	4b83      	ldr	r3, [pc, #524]	; (80177d0 <input_parameter+0x534>)
 80175c2:	4a88      	ldr	r2, [pc, #544]	; (80177e4 <input_parameter+0x548>)
 80175c4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80175c8:	4b81      	ldr	r3, [pc, #516]	; (80177d0 <input_parameter+0x534>)
 80175ca:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 80175cc:	4a80      	ldr	r2, [pc, #512]	; (80177d0 <input_parameter+0x534>)
 80175ce:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 80175d2:	4b7f      	ldr	r3, [pc, #508]	; (80177d0 <input_parameter+0x534>)
 80175d4:	4a84      	ldr	r2, [pc, #528]	; (80177e8 <input_parameter+0x54c>)
 80175d6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 80175da:	4b7d      	ldr	r3, [pc, #500]	; (80177d0 <input_parameter+0x534>)
 80175dc:	4a83      	ldr	r2, [pc, #524]	; (80177ec <input_parameter+0x550>)
 80175de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 80175e2:	4b7b      	ldr	r3, [pc, #492]	; (80177d0 <input_parameter+0x534>)
 80175e4:	4a82      	ldr	r2, [pc, #520]	; (80177f0 <input_parameter+0x554>)
 80175e6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 80175ea:	4b79      	ldr	r3, [pc, #484]	; (80177d0 <input_parameter+0x534>)
 80175ec:	4a81      	ldr	r2, [pc, #516]	; (80177f4 <input_parameter+0x558>)
 80175ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80175f2:	4b77      	ldr	r3, [pc, #476]	; (80177d0 <input_parameter+0x534>)
 80175f4:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 80175f6:	4a76      	ldr	r2, [pc, #472]	; (80177d0 <input_parameter+0x534>)
 80175f8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 80175fc:	4b74      	ldr	r3, [pc, #464]	; (80177d0 <input_parameter+0x534>)
 80175fe:	4a7a      	ldr	r2, [pc, #488]	; (80177e8 <input_parameter+0x54c>)
 8017600:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8017604:	4b72      	ldr	r3, [pc, #456]	; (80177d0 <input_parameter+0x534>)
 8017606:	4a79      	ldr	r2, [pc, #484]	; (80177ec <input_parameter+0x550>)
 8017608:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 801760c:	4b70      	ldr	r3, [pc, #448]	; (80177d0 <input_parameter+0x534>)
 801760e:	4a78      	ldr	r2, [pc, #480]	; (80177f0 <input_parameter+0x554>)
 8017610:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8017614:	4b6e      	ldr	r3, [pc, #440]	; (80177d0 <input_parameter+0x534>)
 8017616:	4a78      	ldr	r2, [pc, #480]	; (80177f8 <input_parameter+0x55c>)
 8017618:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 801761c:	4b6c      	ldr	r3, [pc, #432]	; (80177d0 <input_parameter+0x534>)
 801761e:	685b      	ldr	r3, [r3, #4]
 8017620:	4a6b      	ldr	r2, [pc, #428]	; (80177d0 <input_parameter+0x534>)
 8017622:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8017626:	4b6a      	ldr	r3, [pc, #424]	; (80177d0 <input_parameter+0x534>)
 8017628:	4a74      	ldr	r2, [pc, #464]	; (80177fc <input_parameter+0x560>)
 801762a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 801762e:	4b68      	ldr	r3, [pc, #416]	; (80177d0 <input_parameter+0x534>)
 8017630:	4a73      	ldr	r2, [pc, #460]	; (8017800 <input_parameter+0x564>)
 8017632:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8017636:	4b66      	ldr	r3, [pc, #408]	; (80177d0 <input_parameter+0x534>)
 8017638:	4a72      	ldr	r2, [pc, #456]	; (8017804 <input_parameter+0x568>)
 801763a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 801763e:	4b64      	ldr	r3, [pc, #400]	; (80177d0 <input_parameter+0x534>)
 8017640:	4a71      	ldr	r2, [pc, #452]	; (8017808 <input_parameter+0x56c>)
 8017642:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017646:	4b62      	ldr	r3, [pc, #392]	; (80177d0 <input_parameter+0x534>)
 8017648:	685b      	ldr	r3, [r3, #4]
 801764a:	4a61      	ldr	r2, [pc, #388]	; (80177d0 <input_parameter+0x534>)
 801764c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8017650:	4b5f      	ldr	r3, [pc, #380]	; (80177d0 <input_parameter+0x534>)
 8017652:	4a6a      	ldr	r2, [pc, #424]	; (80177fc <input_parameter+0x560>)
 8017654:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8017658:	4b5d      	ldr	r3, [pc, #372]	; (80177d0 <input_parameter+0x534>)
 801765a:	4a69      	ldr	r2, [pc, #420]	; (8017800 <input_parameter+0x564>)
 801765c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8017660:	4b5b      	ldr	r3, [pc, #364]	; (80177d0 <input_parameter+0x534>)
 8017662:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017666:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 801766a:	4b59      	ldr	r3, [pc, #356]	; (80177d0 <input_parameter+0x534>)
 801766c:	4a67      	ldr	r2, [pc, #412]	; (801780c <input_parameter+0x570>)
 801766e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8017672:	4b67      	ldr	r3, [pc, #412]	; (8017810 <input_parameter+0x574>)
 8017674:	4a58      	ldr	r2, [pc, #352]	; (80177d8 <input_parameter+0x53c>)
 8017676:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8017678:	4b65      	ldr	r3, [pc, #404]	; (8017810 <input_parameter+0x574>)
 801767a:	4a57      	ldr	r2, [pc, #348]	; (80177d8 <input_parameter+0x53c>)
 801767c:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 801767e:	4b64      	ldr	r3, [pc, #400]	; (8017810 <input_parameter+0x574>)
 8017680:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8017682:	4a63      	ldr	r2, [pc, #396]	; (8017810 <input_parameter+0x574>)
 8017684:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8017686:	4b62      	ldr	r3, [pc, #392]	; (8017810 <input_parameter+0x574>)
 8017688:	4a62      	ldr	r2, [pc, #392]	; (8017814 <input_parameter+0x578>)
 801768a:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 801768c:	4b60      	ldr	r3, [pc, #384]	; (8017810 <input_parameter+0x574>)
 801768e:	4a62      	ldr	r2, [pc, #392]	; (8017818 <input_parameter+0x57c>)
 8017690:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8017692:	4b5f      	ldr	r3, [pc, #380]	; (8017810 <input_parameter+0x574>)
 8017694:	4a61      	ldr	r2, [pc, #388]	; (801781c <input_parameter+0x580>)
 8017696:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8017698:	4b5d      	ldr	r3, [pc, #372]	; (8017810 <input_parameter+0x574>)
 801769a:	4a61      	ldr	r2, [pc, #388]	; (8017820 <input_parameter+0x584>)
 801769c:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 801769e:	4b5c      	ldr	r3, [pc, #368]	; (8017810 <input_parameter+0x574>)
 80176a0:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 80176a2:	4a5b      	ldr	r2, [pc, #364]	; (8017810 <input_parameter+0x574>)
 80176a4:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 80176a6:	4b5a      	ldr	r3, [pc, #360]	; (8017810 <input_parameter+0x574>)
 80176a8:	4a5a      	ldr	r2, [pc, #360]	; (8017814 <input_parameter+0x578>)
 80176aa:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 80176ac:	4b58      	ldr	r3, [pc, #352]	; (8017810 <input_parameter+0x574>)
 80176ae:	4a5a      	ldr	r2, [pc, #360]	; (8017818 <input_parameter+0x57c>)
 80176b0:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 80176b2:	4b57      	ldr	r3, [pc, #348]	; (8017810 <input_parameter+0x574>)
 80176b4:	4a59      	ldr	r2, [pc, #356]	; (801781c <input_parameter+0x580>)
 80176b6:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 80176b8:	4b55      	ldr	r3, [pc, #340]	; (8017810 <input_parameter+0x574>)
 80176ba:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80176be:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 80176c0:	4b53      	ldr	r3, [pc, #332]	; (8017810 <input_parameter+0x574>)
 80176c2:	4a45      	ldr	r2, [pc, #276]	; (80177d8 <input_parameter+0x53c>)
 80176c4:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 80176c6:	4b52      	ldr	r3, [pc, #328]	; (8017810 <input_parameter+0x574>)
 80176c8:	4a56      	ldr	r2, [pc, #344]	; (8017824 <input_parameter+0x588>)
 80176ca:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 80176cc:	4b50      	ldr	r3, [pc, #320]	; (8017810 <input_parameter+0x574>)
 80176ce:	4a56      	ldr	r2, [pc, #344]	; (8017828 <input_parameter+0x58c>)
 80176d0:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 80176d2:	4b4f      	ldr	r3, [pc, #316]	; (8017810 <input_parameter+0x574>)
 80176d4:	4a55      	ldr	r2, [pc, #340]	; (801782c <input_parameter+0x590>)
 80176d6:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 80176d8:	4b4d      	ldr	r3, [pc, #308]	; (8017810 <input_parameter+0x574>)
 80176da:	4a54      	ldr	r2, [pc, #336]	; (801782c <input_parameter+0x590>)
 80176dc:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 80176de:	4b4c      	ldr	r3, [pc, #304]	; (8017810 <input_parameter+0x574>)
 80176e0:	4a3d      	ldr	r2, [pc, #244]	; (80177d8 <input_parameter+0x53c>)
 80176e2:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 80176e4:	4b4a      	ldr	r3, [pc, #296]	; (8017810 <input_parameter+0x574>)
 80176e6:	4a4f      	ldr	r2, [pc, #316]	; (8017824 <input_parameter+0x588>)
 80176e8:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 80176ea:	4b49      	ldr	r3, [pc, #292]	; (8017810 <input_parameter+0x574>)
 80176ec:	4a4e      	ldr	r2, [pc, #312]	; (8017828 <input_parameter+0x58c>)
 80176ee:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 80176f0:	4b47      	ldr	r3, [pc, #284]	; (8017810 <input_parameter+0x574>)
 80176f2:	4a4e      	ldr	r2, [pc, #312]	; (801782c <input_parameter+0x590>)
 80176f4:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 80176f6:	4b46      	ldr	r3, [pc, #280]	; (8017810 <input_parameter+0x574>)
 80176f8:	4a42      	ldr	r2, [pc, #264]	; (8017804 <input_parameter+0x568>)
 80176fa:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 80176fc:	4b44      	ldr	r3, [pc, #272]	; (8017810 <input_parameter+0x574>)
 80176fe:	4a36      	ldr	r2, [pc, #216]	; (80177d8 <input_parameter+0x53c>)
 8017700:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8017702:	4b43      	ldr	r3, [pc, #268]	; (8017810 <input_parameter+0x574>)
 8017704:	4a4a      	ldr	r2, [pc, #296]	; (8017830 <input_parameter+0x594>)
 8017706:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8017708:	4b41      	ldr	r3, [pc, #260]	; (8017810 <input_parameter+0x574>)
 801770a:	4a4a      	ldr	r2, [pc, #296]	; (8017834 <input_parameter+0x598>)
 801770c:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 801770e:	4b40      	ldr	r3, [pc, #256]	; (8017810 <input_parameter+0x574>)
 8017710:	4a49      	ldr	r2, [pc, #292]	; (8017838 <input_parameter+0x59c>)
 8017712:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8017714:	4b3e      	ldr	r3, [pc, #248]	; (8017810 <input_parameter+0x574>)
 8017716:	4a49      	ldr	r2, [pc, #292]	; (801783c <input_parameter+0x5a0>)
 8017718:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 801771a:	4b3d      	ldr	r3, [pc, #244]	; (8017810 <input_parameter+0x574>)
 801771c:	4a2e      	ldr	r2, [pc, #184]	; (80177d8 <input_parameter+0x53c>)
 801771e:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8017720:	4b3b      	ldr	r3, [pc, #236]	; (8017810 <input_parameter+0x574>)
 8017722:	4a47      	ldr	r2, [pc, #284]	; (8017840 <input_parameter+0x5a4>)
 8017724:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8017726:	4b3a      	ldr	r3, [pc, #232]	; (8017810 <input_parameter+0x574>)
 8017728:	4a42      	ldr	r2, [pc, #264]	; (8017834 <input_parameter+0x598>)
 801772a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 801772c:	4b38      	ldr	r3, [pc, #224]	; (8017810 <input_parameter+0x574>)
 801772e:	4a42      	ldr	r2, [pc, #264]	; (8017838 <input_parameter+0x59c>)
 8017730:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8017732:	4b37      	ldr	r3, [pc, #220]	; (8017810 <input_parameter+0x574>)
 8017734:	4a43      	ldr	r2, [pc, #268]	; (8017844 <input_parameter+0x5a8>)
 8017736:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8017738:	4b35      	ldr	r3, [pc, #212]	; (8017810 <input_parameter+0x574>)
 801773a:	4a27      	ldr	r2, [pc, #156]	; (80177d8 <input_parameter+0x53c>)
 801773c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8017740:	4b33      	ldr	r3, [pc, #204]	; (8017810 <input_parameter+0x574>)
 8017742:	4a41      	ldr	r2, [pc, #260]	; (8017848 <input_parameter+0x5ac>)
 8017744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8017748:	4b31      	ldr	r3, [pc, #196]	; (8017810 <input_parameter+0x574>)
 801774a:	4a40      	ldr	r2, [pc, #256]	; (801784c <input_parameter+0x5b0>)
 801774c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8017750:	4b2f      	ldr	r3, [pc, #188]	; (8017810 <input_parameter+0x574>)
 8017752:	4a3f      	ldr	r2, [pc, #252]	; (8017850 <input_parameter+0x5b4>)
 8017754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8017758:	4b2d      	ldr	r3, [pc, #180]	; (8017810 <input_parameter+0x574>)
 801775a:	4a3e      	ldr	r2, [pc, #248]	; (8017854 <input_parameter+0x5b8>)
 801775c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8017760:	4b2b      	ldr	r3, [pc, #172]	; (8017810 <input_parameter+0x574>)
 8017762:	4a1d      	ldr	r2, [pc, #116]	; (80177d8 <input_parameter+0x53c>)
 8017764:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8017768:	4b29      	ldr	r3, [pc, #164]	; (8017810 <input_parameter+0x574>)
 801776a:	4a3b      	ldr	r2, [pc, #236]	; (8017858 <input_parameter+0x5bc>)
 801776c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8017770:	4b27      	ldr	r3, [pc, #156]	; (8017810 <input_parameter+0x574>)
 8017772:	4a36      	ldr	r2, [pc, #216]	; (801784c <input_parameter+0x5b0>)
 8017774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8017778:	4b25      	ldr	r3, [pc, #148]	; (8017810 <input_parameter+0x574>)
 801777a:	4a38      	ldr	r2, [pc, #224]	; (801785c <input_parameter+0x5c0>)
 801777c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8017780:	4b23      	ldr	r3, [pc, #140]	; (8017810 <input_parameter+0x574>)
 8017782:	4a37      	ldr	r2, [pc, #220]	; (8017860 <input_parameter+0x5c4>)
 8017784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8017788:	4b21      	ldr	r3, [pc, #132]	; (8017810 <input_parameter+0x574>)
 801778a:	4a13      	ldr	r2, [pc, #76]	; (80177d8 <input_parameter+0x53c>)
 801778c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8017790:	4b1f      	ldr	r3, [pc, #124]	; (8017810 <input_parameter+0x574>)
 8017792:	4a34      	ldr	r2, [pc, #208]	; (8017864 <input_parameter+0x5c8>)
 8017794:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8017798:	4b1d      	ldr	r3, [pc, #116]	; (8017810 <input_parameter+0x574>)
 801779a:	4a26      	ldr	r2, [pc, #152]	; (8017834 <input_parameter+0x598>)
 801779c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 80177a0:	4b1b      	ldr	r3, [pc, #108]	; (8017810 <input_parameter+0x574>)
 80177a2:	4a31      	ldr	r2, [pc, #196]	; (8017868 <input_parameter+0x5cc>)
 80177a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 80177a8:	4b19      	ldr	r3, [pc, #100]	; (8017810 <input_parameter+0x574>)
 80177aa:	4a2d      	ldr	r2, [pc, #180]	; (8017860 <input_parameter+0x5c4>)
 80177ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 80177b0:	4b17      	ldr	r3, [pc, #92]	; (8017810 <input_parameter+0x574>)
 80177b2:	4a09      	ldr	r2, [pc, #36]	; (80177d8 <input_parameter+0x53c>)
 80177b4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 80177b8:	4b15      	ldr	r3, [pc, #84]	; (8017810 <input_parameter+0x574>)
 80177ba:	4a2c      	ldr	r2, [pc, #176]	; (801786c <input_parameter+0x5d0>)
 80177bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 80177c0:	4b13      	ldr	r3, [pc, #76]	; (8017810 <input_parameter+0x574>)
 80177c2:	4a1c      	ldr	r2, [pc, #112]	; (8017834 <input_parameter+0x598>)
 80177c4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80177c8:	e052      	b.n	8017870 <input_parameter+0x5d4>
 80177ca:	bf00      	nop
 80177cc:	42860000 	.word	0x42860000
 80177d0:	2000ddc0 	.word	0x2000ddc0
 80177d4:	42920000 	.word	0x42920000
 80177d8:	44160000 	.word	0x44160000
 80177dc:	461c4000 	.word	0x461c4000
 80177e0:	42640000 	.word	0x42640000
 80177e4:	42500000 	.word	0x42500000
 80177e8:	44250000 	.word	0x44250000
 80177ec:	45fa0000 	.word	0x45fa0000
 80177f0:	425c0000 	.word	0x425c0000
 80177f4:	42c80000 	.word	0x42c80000
 80177f8:	42ce0000 	.word	0x42ce0000
 80177fc:	442f0000 	.word	0x442f0000
 8017800:	462be000 	.word	0x462be000
 8017804:	420c0000 	.word	0x420c0000
 8017808:	42600000 	.word	0x42600000
 801780c:	42700000 	.word	0x42700000
 8017810:	2000df08 	.word	0x2000df08
 8017814:	44898000 	.word	0x44898000
 8017818:	476a6000 	.word	0x476a6000
 801781c:	40a00000 	.word	0x40a00000
 8017820:	41e00000 	.word	0x41e00000
 8017824:	446d8000 	.word	0x446d8000
 8017828:	466a6000 	.word	0x466a6000
 801782c:	41f80000 	.word	0x41f80000
 8017830:	44520000 	.word	0x44520000
 8017834:	465ac000 	.word	0x465ac000
 8017838:	40e00000 	.word	0x40e00000
 801783c:	41a00000 	.word	0x41a00000
 8017840:	444d0000 	.word	0x444d0000
 8017844:	41900000 	.word	0x41900000
 8017848:	444f8000 	.word	0x444f8000
 801784c:	463b8000 	.word	0x463b8000
 8017850:	41500000 	.word	0x41500000
 8017854:	42180000 	.word	0x42180000
 8017858:	44608000 	.word	0x44608000
 801785c:	41400000 	.word	0x41400000
 8017860:	42100000 	.word	0x42100000
 8017864:	446b0000 	.word	0x446b0000
 8017868:	41180000 	.word	0x41180000
 801786c:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8017870:	4b43      	ldr	r3, [pc, #268]	; (8017980 <input_parameter+0x6e4>)
 8017872:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8017876:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 801787a:	4b41      	ldr	r3, [pc, #260]	; (8017980 <input_parameter+0x6e4>)
 801787c:	4a41      	ldr	r2, [pc, #260]	; (8017984 <input_parameter+0x6e8>)
 801787e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8017882:	4b3f      	ldr	r3, [pc, #252]	; (8017980 <input_parameter+0x6e4>)
 8017884:	4a40      	ldr	r2, [pc, #256]	; (8017988 <input_parameter+0x6ec>)
 8017886:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 801788a:	4b3d      	ldr	r3, [pc, #244]	; (8017980 <input_parameter+0x6e4>)
 801788c:	4a3f      	ldr	r2, [pc, #252]	; (801798c <input_parameter+0x6f0>)
 801788e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 8017892:	4b3b      	ldr	r3, [pc, #236]	; (8017980 <input_parameter+0x6e4>)
 8017894:	4a3e      	ldr	r2, [pc, #248]	; (8017990 <input_parameter+0x6f4>)
 8017896:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 801789a:	4b39      	ldr	r3, [pc, #228]	; (8017980 <input_parameter+0x6e4>)
 801789c:	4a3d      	ldr	r2, [pc, #244]	; (8017994 <input_parameter+0x6f8>)
 801789e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80178a2:	4b37      	ldr	r3, [pc, #220]	; (8017980 <input_parameter+0x6e4>)
 80178a4:	4a3c      	ldr	r2, [pc, #240]	; (8017998 <input_parameter+0x6fc>)
 80178a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 80178aa:	4b35      	ldr	r3, [pc, #212]	; (8017980 <input_parameter+0x6e4>)
 80178ac:	4a36      	ldr	r2, [pc, #216]	; (8017988 <input_parameter+0x6ec>)
 80178ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 80178b2:	4b33      	ldr	r3, [pc, #204]	; (8017980 <input_parameter+0x6e4>)
 80178b4:	4a39      	ldr	r2, [pc, #228]	; (801799c <input_parameter+0x700>)
 80178b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 80178ba:	4b31      	ldr	r3, [pc, #196]	; (8017980 <input_parameter+0x6e4>)
 80178bc:	4a34      	ldr	r2, [pc, #208]	; (8017990 <input_parameter+0x6f4>)
 80178be:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 80178c2:	4b2f      	ldr	r3, [pc, #188]	; (8017980 <input_parameter+0x6e4>)
 80178c4:	4a36      	ldr	r2, [pc, #216]	; (80179a0 <input_parameter+0x704>)
 80178c6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80178ca:	4b2d      	ldr	r3, [pc, #180]	; (8017980 <input_parameter+0x6e4>)
 80178cc:	4a35      	ldr	r2, [pc, #212]	; (80179a4 <input_parameter+0x708>)
 80178ce:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 80178d2:	4b2b      	ldr	r3, [pc, #172]	; (8017980 <input_parameter+0x6e4>)
 80178d4:	4a2c      	ldr	r2, [pc, #176]	; (8017988 <input_parameter+0x6ec>)
 80178d6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 80178da:	4b29      	ldr	r3, [pc, #164]	; (8017980 <input_parameter+0x6e4>)
 80178dc:	4a32      	ldr	r2, [pc, #200]	; (80179a8 <input_parameter+0x70c>)
 80178de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 80178e2:	4b27      	ldr	r3, [pc, #156]	; (8017980 <input_parameter+0x6e4>)
 80178e4:	4a31      	ldr	r2, [pc, #196]	; (80179ac <input_parameter+0x710>)
 80178e6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 80178ea:	4b25      	ldr	r3, [pc, #148]	; (8017980 <input_parameter+0x6e4>)
 80178ec:	4a30      	ldr	r2, [pc, #192]	; (80179b0 <input_parameter+0x714>)
 80178ee:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 80178f2:	4b23      	ldr	r3, [pc, #140]	; (8017980 <input_parameter+0x6e4>)
 80178f4:	4a28      	ldr	r2, [pc, #160]	; (8017998 <input_parameter+0x6fc>)
 80178f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 80178fa:	4b21      	ldr	r3, [pc, #132]	; (8017980 <input_parameter+0x6e4>)
 80178fc:	4a22      	ldr	r2, [pc, #136]	; (8017988 <input_parameter+0x6ec>)
 80178fe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8017902:	4b1f      	ldr	r3, [pc, #124]	; (8017980 <input_parameter+0x6e4>)
 8017904:	4a2b      	ldr	r2, [pc, #172]	; (80179b4 <input_parameter+0x718>)
 8017906:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 801790a:	4b1d      	ldr	r3, [pc, #116]	; (8017980 <input_parameter+0x6e4>)
 801790c:	4a2a      	ldr	r2, [pc, #168]	; (80179b8 <input_parameter+0x71c>)
 801790e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8017912:	4b1b      	ldr	r3, [pc, #108]	; (8017980 <input_parameter+0x6e4>)
 8017914:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8017918:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 801791c:	4b18      	ldr	r3, [pc, #96]	; (8017980 <input_parameter+0x6e4>)
 801791e:	4a27      	ldr	r2, [pc, #156]	; (80179bc <input_parameter+0x720>)
 8017920:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8017924:	4b16      	ldr	r3, [pc, #88]	; (8017980 <input_parameter+0x6e4>)
 8017926:	4a18      	ldr	r2, [pc, #96]	; (8017988 <input_parameter+0x6ec>)
 8017928:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 801792c:	4b14      	ldr	r3, [pc, #80]	; (8017980 <input_parameter+0x6e4>)
 801792e:	4a24      	ldr	r2, [pc, #144]	; (80179c0 <input_parameter+0x724>)
 8017930:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8017934:	4b12      	ldr	r3, [pc, #72]	; (8017980 <input_parameter+0x6e4>)
 8017936:	4a1d      	ldr	r2, [pc, #116]	; (80179ac <input_parameter+0x710>)
 8017938:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 801793c:	4b10      	ldr	r3, [pc, #64]	; (8017980 <input_parameter+0x6e4>)
 801793e:	4a21      	ldr	r2, [pc, #132]	; (80179c4 <input_parameter+0x728>)
 8017940:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8017944:	4b0e      	ldr	r3, [pc, #56]	; (8017980 <input_parameter+0x6e4>)
 8017946:	4a20      	ldr	r2, [pc, #128]	; (80179c8 <input_parameter+0x72c>)
 8017948:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 801794c:	4b0c      	ldr	r3, [pc, #48]	; (8017980 <input_parameter+0x6e4>)
 801794e:	4a0e      	ldr	r2, [pc, #56]	; (8017988 <input_parameter+0x6ec>)
 8017950:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8017954:	4b0a      	ldr	r3, [pc, #40]	; (8017980 <input_parameter+0x6e4>)
 8017956:	4a1d      	ldr	r2, [pc, #116]	; (80179cc <input_parameter+0x730>)
 8017958:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 801795c:	4b08      	ldr	r3, [pc, #32]	; (8017980 <input_parameter+0x6e4>)
 801795e:	4a1c      	ldr	r2, [pc, #112]	; (80179d0 <input_parameter+0x734>)
 8017960:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8017964:	4b06      	ldr	r3, [pc, #24]	; (8017980 <input_parameter+0x6e4>)
 8017966:	4a1b      	ldr	r2, [pc, #108]	; (80179d4 <input_parameter+0x738>)
 8017968:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 801796c:	4b04      	ldr	r3, [pc, #16]	; (8017980 <input_parameter+0x6e4>)
 801796e:	4a16      	ldr	r2, [pc, #88]	; (80179c8 <input_parameter+0x72c>)
 8017970:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



}
 8017974:	bf00      	nop
 8017976:	46bd      	mov	sp, r7
 8017978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797c:	4770      	bx	lr
 801797e:	bf00      	nop
 8017980:	2000df08 	.word	0x2000df08
 8017984:	42080000 	.word	0x42080000
 8017988:	44160000 	.word	0x44160000
 801798c:	44340000 	.word	0x44340000
 8017990:	463b8000 	.word	0x463b8000
 8017994:	422c0000 	.word	0x422c0000
 8017998:	41b00000 	.word	0x41b00000
 801799c:	443b8000 	.word	0x443b8000
 80179a0:	42200000 	.word	0x42200000
 80179a4:	41c00000 	.word	0x41c00000
 80179a8:	44660000 	.word	0x44660000
 80179ac:	466a6000 	.word	0x466a6000
 80179b0:	40a00000 	.word	0x40a00000
 80179b4:	445e8000 	.word	0x445e8000
 80179b8:	465ac000 	.word	0x465ac000
 80179bc:	42100000 	.word	0x42100000
 80179c0:	446b0000 	.word	0x446b0000
 80179c4:	41880000 	.word	0x41880000
 80179c8:	41a00000 	.word	0x41a00000
 80179cc:	44700000 	.word	0x44700000
 80179d0:	467a0000 	.word	0x467a0000
 80179d4:	41200000 	.word	0x41200000

080179d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80179dc:	4b22      	ldr	r3, [pc, #136]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 80179de:	4a23      	ldr	r2, [pc, #140]	; (8017a6c <MX_USART1_UART_Init+0x94>)
 80179e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80179e2:	4b21      	ldr	r3, [pc, #132]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 80179e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80179e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80179ea:	4b1f      	ldr	r3, [pc, #124]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 80179ec:	2200      	movs	r2, #0
 80179ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80179f0:	4b1d      	ldr	r3, [pc, #116]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 80179f2:	2200      	movs	r2, #0
 80179f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80179f6:	4b1c      	ldr	r3, [pc, #112]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 80179f8:	2200      	movs	r2, #0
 80179fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80179fc:	4b1a      	ldr	r3, [pc, #104]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 80179fe:	220c      	movs	r2, #12
 8017a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017a02:	4b19      	ldr	r3, [pc, #100]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a04:	2200      	movs	r2, #0
 8017a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8017a08:	4b17      	ldr	r3, [pc, #92]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017a0e:	4b16      	ldr	r3, [pc, #88]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a10:	2200      	movs	r2, #0
 8017a12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017a14:	4b14      	ldr	r3, [pc, #80]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a16:	2200      	movs	r2, #0
 8017a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017a1a:	4b13      	ldr	r3, [pc, #76]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8017a20:	4811      	ldr	r0, [pc, #68]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a22:	f006 fd2d 	bl	801e480 <HAL_UART_Init>
 8017a26:	4603      	mov	r3, r0
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d001      	beq.n	8017a30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8017a2c:	f7f2 fa81 	bl	8009f32 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017a30:	2100      	movs	r1, #0
 8017a32:	480d      	ldr	r0, [pc, #52]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a34:	f007 faf4 	bl	801f020 <HAL_UARTEx_SetTxFifoThreshold>
 8017a38:	4603      	mov	r3, r0
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d001      	beq.n	8017a42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8017a3e:	f7f2 fa78 	bl	8009f32 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017a42:	2100      	movs	r1, #0
 8017a44:	4808      	ldr	r0, [pc, #32]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a46:	f007 fb29 	bl	801f09c <HAL_UARTEx_SetRxFifoThreshold>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d001      	beq.n	8017a54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8017a50:	f7f2 fa6f 	bl	8009f32 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8017a54:	4804      	ldr	r0, [pc, #16]	; (8017a68 <MX_USART1_UART_Init+0x90>)
 8017a56:	f007 faaa 	bl	801efae <HAL_UARTEx_DisableFifoMode>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d001      	beq.n	8017a64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8017a60:	f7f2 fa67 	bl	8009f32 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8017a64:	bf00      	nop
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	2000e050 	.word	0x2000e050
 8017a6c:	40013800 	.word	0x40013800

08017a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b09e      	sub	sp, #120	; 0x78
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	601a      	str	r2, [r3, #0]
 8017a80:	605a      	str	r2, [r3, #4]
 8017a82:	609a      	str	r2, [r3, #8]
 8017a84:	60da      	str	r2, [r3, #12]
 8017a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017a88:	f107 0314 	add.w	r3, r7, #20
 8017a8c:	2250      	movs	r2, #80	; 0x50
 8017a8e:	2100      	movs	r1, #0
 8017a90:	4618      	mov	r0, r3
 8017a92:	f007 fbc7 	bl	801f224 <memset>
  if(uartHandle->Instance==USART1)
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	4a1f      	ldr	r2, [pc, #124]	; (8017b18 <HAL_UART_MspInit+0xa8>)
 8017a9c:	4293      	cmp	r3, r2
 8017a9e:	d137      	bne.n	8017b10 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017aa8:	f107 0314 	add.w	r3, r7, #20
 8017aac:	4618      	mov	r0, r3
 8017aae:	f004 f891 	bl	801bbd4 <HAL_RCCEx_PeriphCLKConfig>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d001      	beq.n	8017abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8017ab8:	f7f2 fa3b 	bl	8009f32 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017abc:	4b17      	ldr	r3, [pc, #92]	; (8017b1c <HAL_UART_MspInit+0xac>)
 8017abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017ac0:	4a16      	ldr	r2, [pc, #88]	; (8017b1c <HAL_UART_MspInit+0xac>)
 8017ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ac6:	6613      	str	r3, [r2, #96]	; 0x60
 8017ac8:	4b14      	ldr	r3, [pc, #80]	; (8017b1c <HAL_UART_MspInit+0xac>)
 8017aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017ad0:	613b      	str	r3, [r7, #16]
 8017ad2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ad4:	4b11      	ldr	r3, [pc, #68]	; (8017b1c <HAL_UART_MspInit+0xac>)
 8017ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ad8:	4a10      	ldr	r2, [pc, #64]	; (8017b1c <HAL_UART_MspInit+0xac>)
 8017ada:	f043 0301 	orr.w	r3, r3, #1
 8017ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017ae0:	4b0e      	ldr	r3, [pc, #56]	; (8017b1c <HAL_UART_MspInit+0xac>)
 8017ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ae4:	f003 0301 	and.w	r3, r3, #1
 8017ae8:	60fb      	str	r3, [r7, #12]
 8017aea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8017aec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8017af0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017af2:	2302      	movs	r3, #2
 8017af4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017af6:	2300      	movs	r3, #0
 8017af8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017afa:	2300      	movs	r3, #0
 8017afc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8017afe:	2307      	movs	r3, #7
 8017b00:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017b02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017b06:	4619      	mov	r1, r3
 8017b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017b0c:	f003 f8e4 	bl	801acd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8017b10:	bf00      	nop
 8017b12:	3778      	adds	r7, #120	; 0x78
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}
 8017b18:	40013800 	.word	0x40013800
 8017b1c:	40021000 	.word	0x40021000

08017b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8017b20:	480d      	ldr	r0, [pc, #52]	; (8017b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8017b22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8017b24:	480d      	ldr	r0, [pc, #52]	; (8017b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8017b26:	490e      	ldr	r1, [pc, #56]	; (8017b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8017b28:	4a0e      	ldr	r2, [pc, #56]	; (8017b64 <LoopForever+0xe>)
  movs r3, #0
 8017b2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8017b2c:	e002      	b.n	8017b34 <LoopCopyDataInit>

08017b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017b32:	3304      	adds	r3, #4

08017b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017b38:	d3f9      	bcc.n	8017b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8017b3a:	4a0b      	ldr	r2, [pc, #44]	; (8017b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8017b3c:	4c0b      	ldr	r4, [pc, #44]	; (8017b6c <LoopForever+0x16>)
  movs r3, #0
 8017b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017b40:	e001      	b.n	8017b46 <LoopFillZerobss>

08017b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017b44:	3204      	adds	r2, #4

08017b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8017b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017b48:	d3fb      	bcc.n	8017b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8017b4a:	f7ff f8df 	bl	8016d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017b4e:	f007 fb37 	bl	801f1c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8017b52:	f7f2 f8f5 	bl	8009d40 <main>

08017b56 <LoopForever>:

LoopForever:
    b LoopForever
 8017b56:	e7fe      	b.n	8017b56 <LoopForever>
  ldr   r0, =_estack
 8017b58:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8017b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017b60:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8017b64:	08022a80 	.word	0x08022a80
  ldr r2, =_sbss
 8017b68:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8017b6c:	2000e0f4 	.word	0x2000e0f4

08017b70 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8017b70:	e7fe      	b.n	8017b70 <ADC3_IRQHandler>
	...

08017b74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017b7e:	4b0c      	ldr	r3, [pc, #48]	; (8017bb0 <HAL_Init+0x3c>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	4a0b      	ldr	r2, [pc, #44]	; (8017bb0 <HAL_Init+0x3c>)
 8017b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017b88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017b8a:	2003      	movs	r0, #3
 8017b8c:	f002 fb30 	bl	801a1f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8017b90:	2000      	movs	r0, #0
 8017b92:	f000 f80f 	bl	8017bb4 <HAL_InitTick>
 8017b96:	4603      	mov	r3, r0
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d002      	beq.n	8017ba2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	71fb      	strb	r3, [r7, #7]
 8017ba0:	e001      	b.n	8017ba6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8017ba2:	f7fe ff67 	bl	8016a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8017ba6:	79fb      	ldrb	r3, [r7, #7]

}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3708      	adds	r7, #8
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}
 8017bb0:	40022000 	.word	0x40022000

08017bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b084      	sub	sp, #16
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8017bc0:	4b16      	ldr	r3, [pc, #88]	; (8017c1c <HAL_InitTick+0x68>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d022      	beq.n	8017c0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8017bc8:	4b15      	ldr	r3, [pc, #84]	; (8017c20 <HAL_InitTick+0x6c>)
 8017bca:	681a      	ldr	r2, [r3, #0]
 8017bcc:	4b13      	ldr	r3, [pc, #76]	; (8017c1c <HAL_InitTick+0x68>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8017bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f002 fb3a 	bl	801a256 <HAL_SYSTICK_Config>
 8017be2:	4603      	mov	r3, r0
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d10f      	bne.n	8017c08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	2b0f      	cmp	r3, #15
 8017bec:	d809      	bhi.n	8017c02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017bee:	2200      	movs	r2, #0
 8017bf0:	6879      	ldr	r1, [r7, #4]
 8017bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8017bf6:	f002 fb06 	bl	801a206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8017bfa:	4a0a      	ldr	r2, [pc, #40]	; (8017c24 <HAL_InitTick+0x70>)
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	6013      	str	r3, [r2, #0]
 8017c00:	e007      	b.n	8017c12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8017c02:	2301      	movs	r3, #1
 8017c04:	73fb      	strb	r3, [r7, #15]
 8017c06:	e004      	b.n	8017c12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8017c08:	2301      	movs	r3, #1
 8017c0a:	73fb      	strb	r3, [r7, #15]
 8017c0c:	e001      	b.n	8017c12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8017c0e:	2301      	movs	r3, #1
 8017c10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8017c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c14:	4618      	mov	r0, r3
 8017c16:	3710      	adds	r7, #16
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd80      	pop	{r7, pc}
 8017c1c:	20000008 	.word	0x20000008
 8017c20:	20000000 	.word	0x20000000
 8017c24:	20000004 	.word	0x20000004

08017c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8017c28:	b480      	push	{r7}
 8017c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8017c2c:	4b05      	ldr	r3, [pc, #20]	; (8017c44 <HAL_IncTick+0x1c>)
 8017c2e:	681a      	ldr	r2, [r3, #0]
 8017c30:	4b05      	ldr	r3, [pc, #20]	; (8017c48 <HAL_IncTick+0x20>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	4413      	add	r3, r2
 8017c36:	4a03      	ldr	r2, [pc, #12]	; (8017c44 <HAL_IncTick+0x1c>)
 8017c38:	6013      	str	r3, [r2, #0]
}
 8017c3a:	bf00      	nop
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c42:	4770      	bx	lr
 8017c44:	2000e0e0 	.word	0x2000e0e0
 8017c48:	20000008 	.word	0x20000008

08017c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017c4c:	b480      	push	{r7}
 8017c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8017c50:	4b03      	ldr	r3, [pc, #12]	; (8017c60 <HAL_GetTick+0x14>)
 8017c52:	681b      	ldr	r3, [r3, #0]
}
 8017c54:	4618      	mov	r0, r3
 8017c56:	46bd      	mov	sp, r7
 8017c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5c:	4770      	bx	lr
 8017c5e:	bf00      	nop
 8017c60:	2000e0e0 	.word	0x2000e0e0

08017c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b084      	sub	sp, #16
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017c6c:	f7ff ffee 	bl	8017c4c <HAL_GetTick>
 8017c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c7c:	d004      	beq.n	8017c88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8017c7e:	4b09      	ldr	r3, [pc, #36]	; (8017ca4 <HAL_Delay+0x40>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	68fa      	ldr	r2, [r7, #12]
 8017c84:	4413      	add	r3, r2
 8017c86:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017c88:	bf00      	nop
 8017c8a:	f7ff ffdf 	bl	8017c4c <HAL_GetTick>
 8017c8e:	4602      	mov	r2, r0
 8017c90:	68bb      	ldr	r3, [r7, #8]
 8017c92:	1ad3      	subs	r3, r2, r3
 8017c94:	68fa      	ldr	r2, [r7, #12]
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d8f7      	bhi.n	8017c8a <HAL_Delay+0x26>
  {
  }
}
 8017c9a:	bf00      	nop
 8017c9c:	bf00      	nop
 8017c9e:	3710      	adds	r7, #16
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}
 8017ca4:	20000008 	.word	0x20000008

08017ca8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8017ca8:	b480      	push	{r7}
 8017caa:	b083      	sub	sp, #12
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
 8017cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	689b      	ldr	r3, [r3, #8]
 8017cb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	431a      	orrs	r2, r3
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	609a      	str	r2, [r3, #8]
}
 8017cc2:	bf00      	nop
 8017cc4:	370c      	adds	r7, #12
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ccc:	4770      	bx	lr

08017cce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8017cce:	b480      	push	{r7}
 8017cd0:	b083      	sub	sp, #12
 8017cd2:	af00      	add	r7, sp, #0
 8017cd4:	6078      	str	r0, [r7, #4]
 8017cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	689b      	ldr	r3, [r3, #8]
 8017cdc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	431a      	orrs	r2, r3
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	609a      	str	r2, [r3, #8]
}
 8017ce8:	bf00      	nop
 8017cea:	370c      	adds	r7, #12
 8017cec:	46bd      	mov	sp, r7
 8017cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf2:	4770      	bx	lr

08017cf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017cf4:	b480      	push	{r7}
 8017cf6:	b083      	sub	sp, #12
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	689b      	ldr	r3, [r3, #8]
 8017d00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	370c      	adds	r7, #12
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0e:	4770      	bx	lr

08017d10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8017d10:	b480      	push	{r7}
 8017d12:	b087      	sub	sp, #28
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	60f8      	str	r0, [r7, #12]
 8017d18:	60b9      	str	r1, [r7, #8]
 8017d1a:	607a      	str	r2, [r7, #4]
 8017d1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	3360      	adds	r3, #96	; 0x60
 8017d22:	461a      	mov	r2, r3
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	009b      	lsls	r3, r3, #2
 8017d28:	4413      	add	r3, r2
 8017d2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	681a      	ldr	r2, [r3, #0]
 8017d30:	4b08      	ldr	r3, [pc, #32]	; (8017d54 <LL_ADC_SetOffset+0x44>)
 8017d32:	4013      	ands	r3, r2
 8017d34:	687a      	ldr	r2, [r7, #4]
 8017d36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8017d3a:	683a      	ldr	r2, [r7, #0]
 8017d3c:	430a      	orrs	r2, r1
 8017d3e:	4313      	orrs	r3, r2
 8017d40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8017d48:	bf00      	nop
 8017d4a:	371c      	adds	r7, #28
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d52:	4770      	bx	lr
 8017d54:	03fff000 	.word	0x03fff000

08017d58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b085      	sub	sp, #20
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	3360      	adds	r3, #96	; 0x60
 8017d66:	461a      	mov	r2, r3
 8017d68:	683b      	ldr	r3, [r7, #0]
 8017d6a:	009b      	lsls	r3, r3, #2
 8017d6c:	4413      	add	r3, r2
 8017d6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3714      	adds	r7, #20
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d82:	4770      	bx	lr

08017d84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8017d84:	b480      	push	{r7}
 8017d86:	b087      	sub	sp, #28
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	60f8      	str	r0, [r7, #12]
 8017d8c:	60b9      	str	r1, [r7, #8]
 8017d8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	3360      	adds	r3, #96	; 0x60
 8017d94:	461a      	mov	r2, r3
 8017d96:	68bb      	ldr	r3, [r7, #8]
 8017d98:	009b      	lsls	r3, r3, #2
 8017d9a:	4413      	add	r3, r2
 8017d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017d9e:	697b      	ldr	r3, [r7, #20]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	431a      	orrs	r2, r3
 8017daa:	697b      	ldr	r3, [r7, #20]
 8017dac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8017dae:	bf00      	nop
 8017db0:	371c      	adds	r7, #28
 8017db2:	46bd      	mov	sp, r7
 8017db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db8:	4770      	bx	lr

08017dba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8017dba:	b480      	push	{r7}
 8017dbc:	b087      	sub	sp, #28
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	60f8      	str	r0, [r7, #12]
 8017dc2:	60b9      	str	r1, [r7, #8]
 8017dc4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	3360      	adds	r3, #96	; 0x60
 8017dca:	461a      	mov	r2, r3
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	009b      	lsls	r3, r3, #2
 8017dd0:	4413      	add	r3, r2
 8017dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017dd4:	697b      	ldr	r3, [r7, #20]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	431a      	orrs	r2, r3
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8017de4:	bf00      	nop
 8017de6:	371c      	adds	r7, #28
 8017de8:	46bd      	mov	sp, r7
 8017dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dee:	4770      	bx	lr

08017df0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8017df0:	b480      	push	{r7}
 8017df2:	b087      	sub	sp, #28
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	60f8      	str	r0, [r7, #12]
 8017df8:	60b9      	str	r1, [r7, #8]
 8017dfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	3360      	adds	r3, #96	; 0x60
 8017e00:	461a      	mov	r2, r3
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	009b      	lsls	r3, r3, #2
 8017e06:	4413      	add	r3, r2
 8017e08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	431a      	orrs	r2, r3
 8017e16:	697b      	ldr	r3, [r7, #20]
 8017e18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8017e1a:	bf00      	nop
 8017e1c:	371c      	adds	r7, #28
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e24:	4770      	bx	lr

08017e26 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8017e26:	b480      	push	{r7}
 8017e28:	b083      	sub	sp, #12
 8017e2a:	af00      	add	r7, sp, #0
 8017e2c:	6078      	str	r0, [r7, #4]
 8017e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	695b      	ldr	r3, [r3, #20]
 8017e34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	431a      	orrs	r2, r3
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	615a      	str	r2, [r3, #20]
}
 8017e40:	bf00      	nop
 8017e42:	370c      	adds	r7, #12
 8017e44:	46bd      	mov	sp, r7
 8017e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4a:	4770      	bx	lr

08017e4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017e4c:	b480      	push	{r7}
 8017e4e:	b083      	sub	sp, #12
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	68db      	ldr	r3, [r3, #12]
 8017e58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d101      	bne.n	8017e64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8017e60:	2301      	movs	r3, #1
 8017e62:	e000      	b.n	8017e66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8017e64:	2300      	movs	r3, #0
}
 8017e66:	4618      	mov	r0, r3
 8017e68:	370c      	adds	r7, #12
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e70:	4770      	bx	lr

08017e72 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8017e72:	b480      	push	{r7}
 8017e74:	b087      	sub	sp, #28
 8017e76:	af00      	add	r7, sp, #0
 8017e78:	60f8      	str	r0, [r7, #12]
 8017e7a:	60b9      	str	r1, [r7, #8]
 8017e7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	3330      	adds	r3, #48	; 0x30
 8017e82:	461a      	mov	r2, r3
 8017e84:	68bb      	ldr	r3, [r7, #8]
 8017e86:	0a1b      	lsrs	r3, r3, #8
 8017e88:	009b      	lsls	r3, r3, #2
 8017e8a:	f003 030c 	and.w	r3, r3, #12
 8017e8e:	4413      	add	r3, r2
 8017e90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017e92:	697b      	ldr	r3, [r7, #20]
 8017e94:	681a      	ldr	r2, [r3, #0]
 8017e96:	68bb      	ldr	r3, [r7, #8]
 8017e98:	f003 031f 	and.w	r3, r3, #31
 8017e9c:	211f      	movs	r1, #31
 8017e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8017ea2:	43db      	mvns	r3, r3
 8017ea4:	401a      	ands	r2, r3
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	0e9b      	lsrs	r3, r3, #26
 8017eaa:	f003 011f 	and.w	r1, r3, #31
 8017eae:	68bb      	ldr	r3, [r7, #8]
 8017eb0:	f003 031f 	and.w	r3, r3, #31
 8017eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8017eb8:	431a      	orrs	r2, r3
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8017ebe:	bf00      	nop
 8017ec0:	371c      	adds	r7, #28
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec8:	4770      	bx	lr

08017eca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017eca:	b480      	push	{r7}
 8017ecc:	b083      	sub	sp, #12
 8017ece:	af00      	add	r7, sp, #0
 8017ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ed6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d101      	bne.n	8017ee2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8017ede:	2301      	movs	r3, #1
 8017ee0:	e000      	b.n	8017ee4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8017ee2:	2300      	movs	r3, #0
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	370c      	adds	r7, #12
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eee:	4770      	bx	lr

08017ef0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	b087      	sub	sp, #28
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	60f8      	str	r0, [r7, #12]
 8017ef8:	60b9      	str	r1, [r7, #8]
 8017efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	3314      	adds	r3, #20
 8017f00:	461a      	mov	r2, r3
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	0e5b      	lsrs	r3, r3, #25
 8017f06:	009b      	lsls	r3, r3, #2
 8017f08:	f003 0304 	and.w	r3, r3, #4
 8017f0c:	4413      	add	r3, r2
 8017f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017f10:	697b      	ldr	r3, [r7, #20]
 8017f12:	681a      	ldr	r2, [r3, #0]
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	0d1b      	lsrs	r3, r3, #20
 8017f18:	f003 031f 	and.w	r3, r3, #31
 8017f1c:	2107      	movs	r1, #7
 8017f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8017f22:	43db      	mvns	r3, r3
 8017f24:	401a      	ands	r2, r3
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	0d1b      	lsrs	r3, r3, #20
 8017f2a:	f003 031f 	and.w	r3, r3, #31
 8017f2e:	6879      	ldr	r1, [r7, #4]
 8017f30:	fa01 f303 	lsl.w	r3, r1, r3
 8017f34:	431a      	orrs	r2, r3
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8017f3a:	bf00      	nop
 8017f3c:	371c      	adds	r7, #28
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f44:	4770      	bx	lr
	...

08017f48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8017f48:	b480      	push	{r7}
 8017f4a:	b085      	sub	sp, #20
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	60f8      	str	r0, [r7, #12]
 8017f50:	60b9      	str	r1, [r7, #8]
 8017f52:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	4a0f      	ldr	r2, [pc, #60]	; (8017f94 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d10a      	bne.n	8017f72 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017f62:	68bb      	ldr	r3, [r7, #8]
 8017f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017f68:	431a      	orrs	r2, r3
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8017f70:	e00a      	b.n	8017f88 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017f7e:	43db      	mvns	r3, r3
 8017f80:	401a      	ands	r2, r3
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8017f88:	bf00      	nop
 8017f8a:	3714      	adds	r7, #20
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f92:	4770      	bx	lr
 8017f94:	407f0000 	.word	0x407f0000

08017f98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017f98:	b480      	push	{r7}
 8017f9a:	b083      	sub	sp, #12
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	689b      	ldr	r3, [r3, #8]
 8017fa4:	f003 031f 	and.w	r3, r3, #31
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	370c      	adds	r7, #12
 8017fac:	46bd      	mov	sp, r7
 8017fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb2:	4770      	bx	lr

08017fb4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017fb4:	b480      	push	{r7}
 8017fb6:	b083      	sub	sp, #12
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	689b      	ldr	r3, [r3, #8]
 8017fc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	370c      	adds	r7, #12
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fce:	4770      	bx	lr

08017fd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8017fd0:	b480      	push	{r7}
 8017fd2:	b083      	sub	sp, #12
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	689b      	ldr	r3, [r3, #8]
 8017fdc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8017fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017fe4:	687a      	ldr	r2, [r7, #4]
 8017fe6:	6093      	str	r3, [r2, #8]
}
 8017fe8:	bf00      	nop
 8017fea:	370c      	adds	r7, #12
 8017fec:	46bd      	mov	sp, r7
 8017fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff2:	4770      	bx	lr

08017ff4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8017ff4:	b480      	push	{r7}
 8017ff6:	b083      	sub	sp, #12
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	689b      	ldr	r3, [r3, #8]
 8018000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018008:	d101      	bne.n	801800e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801800a:	2301      	movs	r3, #1
 801800c:	e000      	b.n	8018010 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801800e:	2300      	movs	r3, #0
}
 8018010:	4618      	mov	r0, r3
 8018012:	370c      	adds	r7, #12
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr

0801801c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	689b      	ldr	r3, [r3, #8]
 8018028:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 801802c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018030:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8018038:	bf00      	nop
 801803a:	370c      	adds	r7, #12
 801803c:	46bd      	mov	sp, r7
 801803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018042:	4770      	bx	lr

08018044 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8018044:	b480      	push	{r7}
 8018046:	b083      	sub	sp, #12
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	689b      	ldr	r3, [r3, #8]
 8018050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018058:	d101      	bne.n	801805e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801805a:	2301      	movs	r3, #1
 801805c:	e000      	b.n	8018060 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801805e:	2300      	movs	r3, #0
}
 8018060:	4618      	mov	r0, r3
 8018062:	370c      	adds	r7, #12
 8018064:	46bd      	mov	sp, r7
 8018066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806a:	4770      	bx	lr

0801806c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 801806c:	b480      	push	{r7}
 801806e:	b083      	sub	sp, #12
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	689b      	ldr	r3, [r3, #8]
 8018078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801807c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018080:	f043 0201 	orr.w	r2, r3, #1
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8018088:	bf00      	nop
 801808a:	370c      	adds	r7, #12
 801808c:	46bd      	mov	sp, r7
 801808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018092:	4770      	bx	lr

08018094 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8018094:	b480      	push	{r7}
 8018096:	b083      	sub	sp, #12
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	689b      	ldr	r3, [r3, #8]
 80180a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80180a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80180a8:	f043 0202 	orr.w	r2, r3, #2
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80180b0:	bf00      	nop
 80180b2:	370c      	adds	r7, #12
 80180b4:	46bd      	mov	sp, r7
 80180b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ba:	4770      	bx	lr

080180bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80180bc:	b480      	push	{r7}
 80180be:	b083      	sub	sp, #12
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	689b      	ldr	r3, [r3, #8]
 80180c8:	f003 0301 	and.w	r3, r3, #1
 80180cc:	2b01      	cmp	r3, #1
 80180ce:	d101      	bne.n	80180d4 <LL_ADC_IsEnabled+0x18>
 80180d0:	2301      	movs	r3, #1
 80180d2:	e000      	b.n	80180d6 <LL_ADC_IsEnabled+0x1a>
 80180d4:	2300      	movs	r3, #0
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	370c      	adds	r7, #12
 80180da:	46bd      	mov	sp, r7
 80180dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e0:	4770      	bx	lr

080180e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80180e2:	b480      	push	{r7}
 80180e4:	b083      	sub	sp, #12
 80180e6:	af00      	add	r7, sp, #0
 80180e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	689b      	ldr	r3, [r3, #8]
 80180ee:	f003 0302 	and.w	r3, r3, #2
 80180f2:	2b02      	cmp	r3, #2
 80180f4:	d101      	bne.n	80180fa <LL_ADC_IsDisableOngoing+0x18>
 80180f6:	2301      	movs	r3, #1
 80180f8:	e000      	b.n	80180fc <LL_ADC_IsDisableOngoing+0x1a>
 80180fa:	2300      	movs	r3, #0
}
 80180fc:	4618      	mov	r0, r3
 80180fe:	370c      	adds	r7, #12
 8018100:	46bd      	mov	sp, r7
 8018102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018106:	4770      	bx	lr

08018108 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8018108:	b480      	push	{r7}
 801810a:	b083      	sub	sp, #12
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	689b      	ldr	r3, [r3, #8]
 8018114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801811c:	f043 0204 	orr.w	r2, r3, #4
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8018124:	bf00      	nop
 8018126:	370c      	adds	r7, #12
 8018128:	46bd      	mov	sp, r7
 801812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812e:	4770      	bx	lr

08018130 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8018130:	b480      	push	{r7}
 8018132:	b083      	sub	sp, #12
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	689b      	ldr	r3, [r3, #8]
 801813c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018144:	f043 0210 	orr.w	r2, r3, #16
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 801814c:	bf00      	nop
 801814e:	370c      	adds	r7, #12
 8018150:	46bd      	mov	sp, r7
 8018152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018156:	4770      	bx	lr

08018158 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8018158:	b480      	push	{r7}
 801815a:	b083      	sub	sp, #12
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	689b      	ldr	r3, [r3, #8]
 8018164:	f003 0304 	and.w	r3, r3, #4
 8018168:	2b04      	cmp	r3, #4
 801816a:	d101      	bne.n	8018170 <LL_ADC_REG_IsConversionOngoing+0x18>
 801816c:	2301      	movs	r3, #1
 801816e:	e000      	b.n	8018172 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8018170:	2300      	movs	r3, #0
}
 8018172:	4618      	mov	r0, r3
 8018174:	370c      	adds	r7, #12
 8018176:	46bd      	mov	sp, r7
 8018178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817c:	4770      	bx	lr

0801817e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 801817e:	b480      	push	{r7}
 8018180:	b083      	sub	sp, #12
 8018182:	af00      	add	r7, sp, #0
 8018184:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	689b      	ldr	r3, [r3, #8]
 801818a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801818e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018192:	f043 0220 	orr.w	r2, r3, #32
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 801819a:	bf00      	nop
 801819c:	370c      	adds	r7, #12
 801819e:	46bd      	mov	sp, r7
 80181a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a4:	4770      	bx	lr

080181a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80181a6:	b480      	push	{r7}
 80181a8:	b083      	sub	sp, #12
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	689b      	ldr	r3, [r3, #8]
 80181b2:	f003 0308 	and.w	r3, r3, #8
 80181b6:	2b08      	cmp	r3, #8
 80181b8:	d101      	bne.n	80181be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80181ba:	2301      	movs	r3, #1
 80181bc:	e000      	b.n	80181c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80181be:	2300      	movs	r3, #0
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	370c      	adds	r7, #12
 80181c4:	46bd      	mov	sp, r7
 80181c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ca:	4770      	bx	lr

080181cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80181cc:	b590      	push	{r4, r7, lr}
 80181ce:	b089      	sub	sp, #36	; 0x24
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80181d4:	2300      	movs	r3, #0
 80181d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80181d8:	2300      	movs	r3, #0
 80181da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d101      	bne.n	80181e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80181e2:	2301      	movs	r3, #1
 80181e4:	e1a1      	b.n	801852a <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	695b      	ldr	r3, [r3, #20]
 80181ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d109      	bne.n	8018208 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80181f4:	6878      	ldr	r0, [r7, #4]
 80181f6:	f7f0 f84f 	bl	8008298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	2200      	movs	r2, #0
 80181fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2200      	movs	r2, #0
 8018204:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	4618      	mov	r0, r3
 801820e:	f7ff fef1 	bl	8017ff4 <LL_ADC_IsDeepPowerDownEnabled>
 8018212:	4603      	mov	r3, r0
 8018214:	2b00      	cmp	r3, #0
 8018216:	d004      	beq.n	8018222 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	4618      	mov	r0, r3
 801821e:	f7ff fed7 	bl	8017fd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	4618      	mov	r0, r3
 8018228:	f7ff ff0c 	bl	8018044 <LL_ADC_IsInternalRegulatorEnabled>
 801822c:	4603      	mov	r3, r0
 801822e:	2b00      	cmp	r3, #0
 8018230:	d115      	bne.n	801825e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	4618      	mov	r0, r3
 8018238:	f7ff fef0 	bl	801801c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801823c:	4b9a      	ldr	r3, [pc, #616]	; (80184a8 <HAL_ADC_Init+0x2dc>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	099b      	lsrs	r3, r3, #6
 8018242:	4a9a      	ldr	r2, [pc, #616]	; (80184ac <HAL_ADC_Init+0x2e0>)
 8018244:	fba2 2303 	umull	r2, r3, r2, r3
 8018248:	099b      	lsrs	r3, r3, #6
 801824a:	3301      	adds	r3, #1
 801824c:	005b      	lsls	r3, r3, #1
 801824e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8018250:	e002      	b.n	8018258 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	3b01      	subs	r3, #1
 8018256:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8018258:	68bb      	ldr	r3, [r7, #8]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d1f9      	bne.n	8018252 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	4618      	mov	r0, r3
 8018264:	f7ff feee 	bl	8018044 <LL_ADC_IsInternalRegulatorEnabled>
 8018268:	4603      	mov	r3, r0
 801826a:	2b00      	cmp	r3, #0
 801826c:	d10d      	bne.n	801828a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018272:	f043 0210 	orr.w	r2, r3, #16
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801827e:	f043 0201 	orr.w	r2, r3, #1
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8018286:	2301      	movs	r3, #1
 8018288:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	4618      	mov	r0, r3
 8018290:	f7ff ff62 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 8018294:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801829a:	f003 0310 	and.w	r3, r3, #16
 801829e:	2b00      	cmp	r3, #0
 80182a0:	f040 813a 	bne.w	8018518 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	f040 8136 	bne.w	8018518 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80182b4:	f043 0202 	orr.w	r2, r3, #2
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	4618      	mov	r0, r3
 80182c2:	f7ff fefb 	bl	80180bc <LL_ADC_IsEnabled>
 80182c6:	4603      	mov	r3, r0
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d137      	bne.n	801833c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80182d4:	d004      	beq.n	80182e0 <HAL_ADC_Init+0x114>
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	4a75      	ldr	r2, [pc, #468]	; (80184b0 <HAL_ADC_Init+0x2e4>)
 80182dc:	4293      	cmp	r3, r2
 80182de:	d10f      	bne.n	8018300 <HAL_ADC_Init+0x134>
 80182e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80182e4:	f7ff feea 	bl	80180bc <LL_ADC_IsEnabled>
 80182e8:	4604      	mov	r4, r0
 80182ea:	4871      	ldr	r0, [pc, #452]	; (80184b0 <HAL_ADC_Init+0x2e4>)
 80182ec:	f7ff fee6 	bl	80180bc <LL_ADC_IsEnabled>
 80182f0:	4603      	mov	r3, r0
 80182f2:	4323      	orrs	r3, r4
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	bf0c      	ite	eq
 80182f8:	2301      	moveq	r3, #1
 80182fa:	2300      	movne	r3, #0
 80182fc:	b2db      	uxtb	r3, r3
 80182fe:	e008      	b.n	8018312 <HAL_ADC_Init+0x146>
 8018300:	486c      	ldr	r0, [pc, #432]	; (80184b4 <HAL_ADC_Init+0x2e8>)
 8018302:	f7ff fedb 	bl	80180bc <LL_ADC_IsEnabled>
 8018306:	4603      	mov	r3, r0
 8018308:	2b00      	cmp	r3, #0
 801830a:	bf0c      	ite	eq
 801830c:	2301      	moveq	r3, #1
 801830e:	2300      	movne	r3, #0
 8018310:	b2db      	uxtb	r3, r3
 8018312:	2b00      	cmp	r3, #0
 8018314:	d012      	beq.n	801833c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801831e:	d004      	beq.n	801832a <HAL_ADC_Init+0x15e>
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	4a62      	ldr	r2, [pc, #392]	; (80184b0 <HAL_ADC_Init+0x2e4>)
 8018326:	4293      	cmp	r3, r2
 8018328:	d101      	bne.n	801832e <HAL_ADC_Init+0x162>
 801832a:	4a63      	ldr	r2, [pc, #396]	; (80184b8 <HAL_ADC_Init+0x2ec>)
 801832c:	e000      	b.n	8018330 <HAL_ADC_Init+0x164>
 801832e:	4a63      	ldr	r2, [pc, #396]	; (80184bc <HAL_ADC_Init+0x2f0>)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	4619      	mov	r1, r3
 8018336:	4610      	mov	r0, r2
 8018338:	f7ff fcb6 	bl	8017ca8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	7f5b      	ldrb	r3, [r3, #29]
 8018340:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8018346:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 801834c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8018352:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801835a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801835c:	4313      	orrs	r3, r2
 801835e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018366:	2b01      	cmp	r3, #1
 8018368:	d106      	bne.n	8018378 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801836e:	3b01      	subs	r3, #1
 8018370:	045b      	lsls	r3, r3, #17
 8018372:	69ba      	ldr	r2, [r7, #24]
 8018374:	4313      	orrs	r3, r2
 8018376:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801837c:	2b00      	cmp	r3, #0
 801837e:	d009      	beq.n	8018394 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018384:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801838c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801838e:	69ba      	ldr	r2, [r7, #24]
 8018390:	4313      	orrs	r3, r2
 8018392:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	68da      	ldr	r2, [r3, #12]
 801839a:	4b49      	ldr	r3, [pc, #292]	; (80184c0 <HAL_ADC_Init+0x2f4>)
 801839c:	4013      	ands	r3, r2
 801839e:	687a      	ldr	r2, [r7, #4]
 80183a0:	6812      	ldr	r2, [r2, #0]
 80183a2:	69b9      	ldr	r1, [r7, #24]
 80183a4:	430b      	orrs	r3, r1
 80183a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	691b      	ldr	r3, [r3, #16]
 80183ae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	430a      	orrs	r2, r1
 80183bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	4618      	mov	r0, r3
 80183c4:	f7ff fec8 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 80183c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7ff fee9 	bl	80181a6 <LL_ADC_INJ_IsConversionOngoing>
 80183d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d17b      	bne.n	80184d4 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d178      	bne.n	80184d4 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80183e6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80183ee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80183f0:	4313      	orrs	r3, r2
 80183f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	68db      	ldr	r3, [r3, #12]
 80183fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80183fe:	f023 0302 	bic.w	r3, r3, #2
 8018402:	687a      	ldr	r2, [r7, #4]
 8018404:	6812      	ldr	r2, [r2, #0]
 8018406:	69b9      	ldr	r1, [r7, #24]
 8018408:	430b      	orrs	r3, r1
 801840a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	691b      	ldr	r3, [r3, #16]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d017      	beq.n	8018444 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	691a      	ldr	r2, [r3, #16]
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018422:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801842c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8018430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018434:	687a      	ldr	r2, [r7, #4]
 8018436:	6911      	ldr	r1, [r2, #16]
 8018438:	687a      	ldr	r2, [r7, #4]
 801843a:	6812      	ldr	r2, [r2, #0]
 801843c:	430b      	orrs	r3, r1
 801843e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8018442:	e013      	b.n	801846c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	691a      	ldr	r2, [r3, #16]
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018452:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801845c:	687a      	ldr	r2, [r7, #4]
 801845e:	6812      	ldr	r2, [r2, #0]
 8018460:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8018464:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018468:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018472:	2b01      	cmp	r3, #1
 8018474:	d126      	bne.n	80184c4 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	691b      	ldr	r3, [r3, #16]
 801847c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8018480:	f023 0304 	bic.w	r3, r3, #4
 8018484:	687a      	ldr	r2, [r7, #4]
 8018486:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8018488:	687a      	ldr	r2, [r7, #4]
 801848a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801848c:	4311      	orrs	r1, r2
 801848e:	687a      	ldr	r2, [r7, #4]
 8018490:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8018492:	4311      	orrs	r1, r2
 8018494:	687a      	ldr	r2, [r7, #4]
 8018496:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018498:	430a      	orrs	r2, r1
 801849a:	431a      	orrs	r2, r3
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	f042 0201 	orr.w	r2, r2, #1
 80184a4:	611a      	str	r2, [r3, #16]
 80184a6:	e015      	b.n	80184d4 <HAL_ADC_Init+0x308>
 80184a8:	20000000 	.word	0x20000000
 80184ac:	053e2d63 	.word	0x053e2d63
 80184b0:	50000100 	.word	0x50000100
 80184b4:	50000400 	.word	0x50000400
 80184b8:	50000300 	.word	0x50000300
 80184bc:	50000700 	.word	0x50000700
 80184c0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	691a      	ldr	r2, [r3, #16]
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	f022 0201 	bic.w	r2, r2, #1
 80184d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	695b      	ldr	r3, [r3, #20]
 80184d8:	2b01      	cmp	r3, #1
 80184da:	d10c      	bne.n	80184f6 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184e2:	f023 010f 	bic.w	r1, r3, #15
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6a1b      	ldr	r3, [r3, #32]
 80184ea:	1e5a      	subs	r2, r3, #1
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	430a      	orrs	r2, r1
 80184f2:	631a      	str	r2, [r3, #48]	; 0x30
 80184f4:	e007      	b.n	8018506 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	f022 020f 	bic.w	r2, r2, #15
 8018504:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801850a:	f023 0303 	bic.w	r3, r3, #3
 801850e:	f043 0201 	orr.w	r2, r3, #1
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	65da      	str	r2, [r3, #92]	; 0x5c
 8018516:	e007      	b.n	8018528 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801851c:	f043 0210 	orr.w	r2, r3, #16
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8018524:	2301      	movs	r3, #1
 8018526:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8018528:	7ffb      	ldrb	r3, [r7, #31]
}
 801852a:	4618      	mov	r0, r3
 801852c:	3724      	adds	r7, #36	; 0x24
 801852e:	46bd      	mov	sp, r7
 8018530:	bd90      	pop	{r4, r7, pc}
 8018532:	bf00      	nop

08018534 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b086      	sub	sp, #24
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018544:	d004      	beq.n	8018550 <HAL_ADC_Start+0x1c>
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	4a5c      	ldr	r2, [pc, #368]	; (80186bc <HAL_ADC_Start+0x188>)
 801854c:	4293      	cmp	r3, r2
 801854e:	d101      	bne.n	8018554 <HAL_ADC_Start+0x20>
 8018550:	4b5b      	ldr	r3, [pc, #364]	; (80186c0 <HAL_ADC_Start+0x18c>)
 8018552:	e000      	b.n	8018556 <HAL_ADC_Start+0x22>
 8018554:	4b5b      	ldr	r3, [pc, #364]	; (80186c4 <HAL_ADC_Start+0x190>)
 8018556:	4618      	mov	r0, r3
 8018558:	f7ff fd1e 	bl	8017f98 <LL_ADC_GetMultimode>
 801855c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	4618      	mov	r0, r3
 8018564:	f7ff fdf8 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 8018568:	4603      	mov	r3, r0
 801856a:	2b00      	cmp	r3, #0
 801856c:	f040 809f 	bne.w	80186ae <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018576:	2b01      	cmp	r3, #1
 8018578:	d101      	bne.n	801857e <HAL_ADC_Start+0x4a>
 801857a:	2302      	movs	r3, #2
 801857c:	e09a      	b.n	80186b4 <HAL_ADC_Start+0x180>
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	2201      	movs	r2, #1
 8018582:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8018586:	6878      	ldr	r0, [r7, #4]
 8018588:	f001 fa3e 	bl	8019a08 <ADC_Enable>
 801858c:	4603      	mov	r3, r0
 801858e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8018590:	7dfb      	ldrb	r3, [r7, #23]
 8018592:	2b00      	cmp	r3, #0
 8018594:	f040 8086 	bne.w	80186a4 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801859c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80185a0:	f023 0301 	bic.w	r3, r3, #1
 80185a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	4a42      	ldr	r2, [pc, #264]	; (80186bc <HAL_ADC_Start+0x188>)
 80185b2:	4293      	cmp	r3, r2
 80185b4:	d002      	beq.n	80185bc <HAL_ADC_Start+0x88>
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	e001      	b.n	80185c0 <HAL_ADC_Start+0x8c>
 80185bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80185c0:	687a      	ldr	r2, [r7, #4]
 80185c2:	6812      	ldr	r2, [r2, #0]
 80185c4:	4293      	cmp	r3, r2
 80185c6:	d002      	beq.n	80185ce <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80185c8:	693b      	ldr	r3, [r7, #16]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d105      	bne.n	80185da <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80185e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80185e6:	d106      	bne.n	80185f6 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185ec:	f023 0206 	bic.w	r2, r3, #6
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	661a      	str	r2, [r3, #96]	; 0x60
 80185f4:	e002      	b.n	80185fc <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	2200      	movs	r2, #0
 80185fa:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	221c      	movs	r2, #28
 8018602:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2200      	movs	r2, #0
 8018608:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	4a2a      	ldr	r2, [pc, #168]	; (80186bc <HAL_ADC_Start+0x188>)
 8018612:	4293      	cmp	r3, r2
 8018614:	d002      	beq.n	801861c <HAL_ADC_Start+0xe8>
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	e001      	b.n	8018620 <HAL_ADC_Start+0xec>
 801861c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018620:	687a      	ldr	r2, [r7, #4]
 8018622:	6812      	ldr	r2, [r2, #0]
 8018624:	4293      	cmp	r3, r2
 8018626:	d008      	beq.n	801863a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018628:	693b      	ldr	r3, [r7, #16]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d005      	beq.n	801863a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801862e:	693b      	ldr	r3, [r7, #16]
 8018630:	2b05      	cmp	r3, #5
 8018632:	d002      	beq.n	801863a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018634:	693b      	ldr	r3, [r7, #16]
 8018636:	2b09      	cmp	r3, #9
 8018638:	d114      	bne.n	8018664 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	68db      	ldr	r3, [r3, #12]
 8018640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018644:	2b00      	cmp	r3, #0
 8018646:	d007      	beq.n	8018658 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801864c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8018650:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	4618      	mov	r0, r3
 801865e:	f7ff fd53 	bl	8018108 <LL_ADC_REG_StartConversion>
 8018662:	e026      	b.n	80186b2 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018668:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	4a11      	ldr	r2, [pc, #68]	; (80186bc <HAL_ADC_Start+0x188>)
 8018676:	4293      	cmp	r3, r2
 8018678:	d002      	beq.n	8018680 <HAL_ADC_Start+0x14c>
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	e001      	b.n	8018684 <HAL_ADC_Start+0x150>
 8018680:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018684:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	68db      	ldr	r3, [r3, #12]
 801868a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801868e:	2b00      	cmp	r3, #0
 8018690:	d00f      	beq.n	80186b2 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018696:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801869a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80186a2:	e006      	b.n	80186b2 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	2200      	movs	r2, #0
 80186a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80186ac:	e001      	b.n	80186b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80186ae:	2302      	movs	r3, #2
 80186b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80186b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80186b4:	4618      	mov	r0, r3
 80186b6:	3718      	adds	r7, #24
 80186b8:	46bd      	mov	sp, r7
 80186ba:	bd80      	pop	{r7, pc}
 80186bc:	50000100 	.word	0x50000100
 80186c0:	50000300 	.word	0x50000300
 80186c4:	50000700 	.word	0x50000700

080186c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b084      	sub	sp, #16
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80186d6:	2b01      	cmp	r3, #1
 80186d8:	d101      	bne.n	80186de <HAL_ADC_Stop+0x16>
 80186da:	2302      	movs	r3, #2
 80186dc:	e023      	b.n	8018726 <HAL_ADC_Stop+0x5e>
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	2201      	movs	r2, #1
 80186e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80186e6:	2103      	movs	r1, #3
 80186e8:	6878      	ldr	r0, [r7, #4]
 80186ea:	f001 f8d1 	bl	8019890 <ADC_ConversionStop>
 80186ee:	4603      	mov	r3, r0
 80186f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80186f2:	7bfb      	ldrb	r3, [r7, #15]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d111      	bne.n	801871c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80186f8:	6878      	ldr	r0, [r7, #4]
 80186fa:	f001 f9e7 	bl	8019acc <ADC_Disable>
 80186fe:	4603      	mov	r3, r0
 8018700:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8018702:	7bfb      	ldrb	r3, [r7, #15]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d109      	bne.n	801871c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801870c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018710:	f023 0301 	bic.w	r3, r3, #1
 8018714:	f043 0201 	orr.w	r2, r3, #1
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	2200      	movs	r2, #0
 8018720:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8018724:	7bfb      	ldrb	r3, [r7, #15]
}
 8018726:	4618      	mov	r0, r3
 8018728:	3710      	adds	r7, #16
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}
	...

08018730 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b088      	sub	sp, #32
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
 8018738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018742:	d004      	beq.n	801874e <HAL_ADC_PollForConversion+0x1e>
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	4a70      	ldr	r2, [pc, #448]	; (801890c <HAL_ADC_PollForConversion+0x1dc>)
 801874a:	4293      	cmp	r3, r2
 801874c:	d101      	bne.n	8018752 <HAL_ADC_PollForConversion+0x22>
 801874e:	4b70      	ldr	r3, [pc, #448]	; (8018910 <HAL_ADC_PollForConversion+0x1e0>)
 8018750:	e000      	b.n	8018754 <HAL_ADC_PollForConversion+0x24>
 8018752:	4b70      	ldr	r3, [pc, #448]	; (8018914 <HAL_ADC_PollForConversion+0x1e4>)
 8018754:	4618      	mov	r0, r3
 8018756:	f7ff fc1f 	bl	8017f98 <LL_ADC_GetMultimode>
 801875a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	699b      	ldr	r3, [r3, #24]
 8018760:	2b08      	cmp	r3, #8
 8018762:	d102      	bne.n	801876a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8018764:	2308      	movs	r3, #8
 8018766:	61fb      	str	r3, [r7, #28]
 8018768:	e037      	b.n	80187da <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801876a:	697b      	ldr	r3, [r7, #20]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d005      	beq.n	801877c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	2b05      	cmp	r3, #5
 8018774:	d002      	beq.n	801877c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	2b09      	cmp	r3, #9
 801877a:	d111      	bne.n	80187a0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	68db      	ldr	r3, [r3, #12]
 8018782:	f003 0301 	and.w	r3, r3, #1
 8018786:	2b00      	cmp	r3, #0
 8018788:	d007      	beq.n	801879a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801878e:	f043 0220 	orr.w	r2, r3, #32
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8018796:	2301      	movs	r3, #1
 8018798:	e0b3      	b.n	8018902 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801879a:	2304      	movs	r3, #4
 801879c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801879e:	e01c      	b.n	80187da <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80187a8:	d004      	beq.n	80187b4 <HAL_ADC_PollForConversion+0x84>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	4a57      	ldr	r2, [pc, #348]	; (801890c <HAL_ADC_PollForConversion+0x1dc>)
 80187b0:	4293      	cmp	r3, r2
 80187b2:	d101      	bne.n	80187b8 <HAL_ADC_PollForConversion+0x88>
 80187b4:	4b56      	ldr	r3, [pc, #344]	; (8018910 <HAL_ADC_PollForConversion+0x1e0>)
 80187b6:	e000      	b.n	80187ba <HAL_ADC_PollForConversion+0x8a>
 80187b8:	4b56      	ldr	r3, [pc, #344]	; (8018914 <HAL_ADC_PollForConversion+0x1e4>)
 80187ba:	4618      	mov	r0, r3
 80187bc:	f7ff fbfa 	bl	8017fb4 <LL_ADC_GetMultiDMATransfer>
 80187c0:	4603      	mov	r3, r0
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d007      	beq.n	80187d6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187ca:	f043 0220 	orr.w	r2, r3, #32
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80187d2:	2301      	movs	r3, #1
 80187d4:	e095      	b.n	8018902 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80187d6:	2304      	movs	r3, #4
 80187d8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80187da:	f7ff fa37 	bl	8017c4c <HAL_GetTick>
 80187de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80187e0:	e021      	b.n	8018826 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80187e2:	683b      	ldr	r3, [r7, #0]
 80187e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187e8:	d01d      	beq.n	8018826 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80187ea:	f7ff fa2f 	bl	8017c4c <HAL_GetTick>
 80187ee:	4602      	mov	r2, r0
 80187f0:	693b      	ldr	r3, [r7, #16]
 80187f2:	1ad3      	subs	r3, r2, r3
 80187f4:	683a      	ldr	r2, [r7, #0]
 80187f6:	429a      	cmp	r2, r3
 80187f8:	d302      	bcc.n	8018800 <HAL_ADC_PollForConversion+0xd0>
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d112      	bne.n	8018826 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	681a      	ldr	r2, [r3, #0]
 8018806:	69fb      	ldr	r3, [r7, #28]
 8018808:	4013      	ands	r3, r2
 801880a:	2b00      	cmp	r3, #0
 801880c:	d10b      	bne.n	8018826 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018812:	f043 0204 	orr.w	r2, r3, #4
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	2200      	movs	r2, #0
 801881e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8018822:	2303      	movs	r3, #3
 8018824:	e06d      	b.n	8018902 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	681a      	ldr	r2, [r3, #0]
 801882c:	69fb      	ldr	r3, [r7, #28]
 801882e:	4013      	ands	r3, r2
 8018830:	2b00      	cmp	r3, #0
 8018832:	d0d6      	beq.n	80187e2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018838:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	4618      	mov	r0, r3
 8018846:	f7ff fb01 	bl	8017e4c <LL_ADC_REG_IsTriggerSourceSWStart>
 801884a:	4603      	mov	r3, r0
 801884c:	2b00      	cmp	r3, #0
 801884e:	d01c      	beq.n	801888a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	7f5b      	ldrb	r3, [r3, #29]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d118      	bne.n	801888a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	f003 0308 	and.w	r3, r3, #8
 8018862:	2b08      	cmp	r3, #8
 8018864:	d111      	bne.n	801888a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801886a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801887a:	2b00      	cmp	r3, #0
 801887c:	d105      	bne.n	801888a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018882:	f043 0201 	orr.w	r2, r3, #1
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	4a1f      	ldr	r2, [pc, #124]	; (801890c <HAL_ADC_PollForConversion+0x1dc>)
 8018890:	4293      	cmp	r3, r2
 8018892:	d002      	beq.n	801889a <HAL_ADC_PollForConversion+0x16a>
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	e001      	b.n	801889e <HAL_ADC_PollForConversion+0x16e>
 801889a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801889e:	687a      	ldr	r2, [r7, #4]
 80188a0:	6812      	ldr	r2, [r2, #0]
 80188a2:	4293      	cmp	r3, r2
 80188a4:	d008      	beq.n	80188b8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80188a6:	697b      	ldr	r3, [r7, #20]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d005      	beq.n	80188b8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80188ac:	697b      	ldr	r3, [r7, #20]
 80188ae:	2b05      	cmp	r3, #5
 80188b0:	d002      	beq.n	80188b8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	2b09      	cmp	r3, #9
 80188b6:	d104      	bne.n	80188c2 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	68db      	ldr	r3, [r3, #12]
 80188be:	61bb      	str	r3, [r7, #24]
 80188c0:	e00d      	b.n	80188de <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	4a11      	ldr	r2, [pc, #68]	; (801890c <HAL_ADC_PollForConversion+0x1dc>)
 80188c8:	4293      	cmp	r3, r2
 80188ca:	d002      	beq.n	80188d2 <HAL_ADC_PollForConversion+0x1a2>
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	e001      	b.n	80188d6 <HAL_ADC_PollForConversion+0x1a6>
 80188d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80188d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80188de:	69fb      	ldr	r3, [r7, #28]
 80188e0:	2b08      	cmp	r3, #8
 80188e2:	d104      	bne.n	80188ee <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	2208      	movs	r2, #8
 80188ea:	601a      	str	r2, [r3, #0]
 80188ec:	e008      	b.n	8018900 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80188ee:	69bb      	ldr	r3, [r7, #24]
 80188f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d103      	bne.n	8018900 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	220c      	movs	r2, #12
 80188fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8018900:	2300      	movs	r3, #0
}
 8018902:	4618      	mov	r0, r3
 8018904:	3720      	adds	r7, #32
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}
 801890a:	bf00      	nop
 801890c:	50000100 	.word	0x50000100
 8018910:	50000300 	.word	0x50000300
 8018914:	50000700 	.word	0x50000700

08018918 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8018918:	b580      	push	{r7, lr}
 801891a:	b086      	sub	sp, #24
 801891c:	af00      	add	r7, sp, #0
 801891e:	60f8      	str	r0, [r7, #12]
 8018920:	60b9      	str	r1, [r7, #8]
 8018922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801892c:	d004      	beq.n	8018938 <HAL_ADC_Start_DMA+0x20>
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	4a57      	ldr	r2, [pc, #348]	; (8018a90 <HAL_ADC_Start_DMA+0x178>)
 8018934:	4293      	cmp	r3, r2
 8018936:	d101      	bne.n	801893c <HAL_ADC_Start_DMA+0x24>
 8018938:	4b56      	ldr	r3, [pc, #344]	; (8018a94 <HAL_ADC_Start_DMA+0x17c>)
 801893a:	e000      	b.n	801893e <HAL_ADC_Start_DMA+0x26>
 801893c:	4b56      	ldr	r3, [pc, #344]	; (8018a98 <HAL_ADC_Start_DMA+0x180>)
 801893e:	4618      	mov	r0, r3
 8018940:	f7ff fb2a 	bl	8017f98 <LL_ADC_GetMultimode>
 8018944:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	4618      	mov	r0, r3
 801894c:	f7ff fc04 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 8018950:	4603      	mov	r3, r0
 8018952:	2b00      	cmp	r3, #0
 8018954:	f040 8094 	bne.w	8018a80 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801895e:	2b01      	cmp	r3, #1
 8018960:	d101      	bne.n	8018966 <HAL_ADC_Start_DMA+0x4e>
 8018962:	2302      	movs	r3, #2
 8018964:	e08f      	b.n	8018a86 <HAL_ADC_Start_DMA+0x16e>
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	2201      	movs	r2, #1
 801896a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	4a4a      	ldr	r2, [pc, #296]	; (8018a9c <HAL_ADC_Start_DMA+0x184>)
 8018974:	4293      	cmp	r3, r2
 8018976:	d008      	beq.n	801898a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018978:	693b      	ldr	r3, [r7, #16]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d005      	beq.n	801898a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801897e:	693b      	ldr	r3, [r7, #16]
 8018980:	2b05      	cmp	r3, #5
 8018982:	d002      	beq.n	801898a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018984:	693b      	ldr	r3, [r7, #16]
 8018986:	2b09      	cmp	r3, #9
 8018988:	d173      	bne.n	8018a72 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801898a:	68f8      	ldr	r0, [r7, #12]
 801898c:	f001 f83c 	bl	8019a08 <ADC_Enable>
 8018990:	4603      	mov	r3, r0
 8018992:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8018994:	7dfb      	ldrb	r3, [r7, #23]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d166      	bne.n	8018a68 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801899e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80189a2:	f023 0301 	bic.w	r3, r3, #1
 80189a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	4a37      	ldr	r2, [pc, #220]	; (8018a90 <HAL_ADC_Start_DMA+0x178>)
 80189b4:	4293      	cmp	r3, r2
 80189b6:	d002      	beq.n	80189be <HAL_ADC_Start_DMA+0xa6>
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	e001      	b.n	80189c2 <HAL_ADC_Start_DMA+0xaa>
 80189be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80189c2:	68fa      	ldr	r2, [r7, #12]
 80189c4:	6812      	ldr	r2, [r2, #0]
 80189c6:	4293      	cmp	r3, r2
 80189c8:	d002      	beq.n	80189d0 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80189ca:	693b      	ldr	r3, [r7, #16]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d105      	bne.n	80189dc <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d006      	beq.n	80189f6 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80189ec:	f023 0206 	bic.w	r2, r3, #6
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	661a      	str	r2, [r3, #96]	; 0x60
 80189f4:	e002      	b.n	80189fc <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	2200      	movs	r2, #0
 80189fa:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a00:	4a27      	ldr	r2, [pc, #156]	; (8018aa0 <HAL_ADC_Start_DMA+0x188>)
 8018a02:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a08:	4a26      	ldr	r2, [pc, #152]	; (8018aa4 <HAL_ADC_Start_DMA+0x18c>)
 8018a0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a10:	4a25      	ldr	r2, [pc, #148]	; (8018aa8 <HAL_ADC_Start_DMA+0x190>)
 8018a12:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	221c      	movs	r2, #28
 8018a1a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	2200      	movs	r2, #0
 8018a20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	685a      	ldr	r2, [r3, #4]
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	f042 0210 	orr.w	r2, r2, #16
 8018a32:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	68da      	ldr	r2, [r3, #12]
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	f042 0201 	orr.w	r2, r2, #1
 8018a42:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	3340      	adds	r3, #64	; 0x40
 8018a4e:	4619      	mov	r1, r3
 8018a50:	68ba      	ldr	r2, [r7, #8]
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	f001 fcb4 	bl	801a3c0 <HAL_DMA_Start_IT>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	4618      	mov	r0, r3
 8018a62:	f7ff fb51 	bl	8018108 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8018a66:	e00d      	b.n	8018a84 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8018a70:	e008      	b.n	8018a84 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8018a72:	2301      	movs	r3, #1
 8018a74:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	2200      	movs	r2, #0
 8018a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8018a7e:	e001      	b.n	8018a84 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8018a80:	2302      	movs	r3, #2
 8018a82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8018a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a86:	4618      	mov	r0, r3
 8018a88:	3718      	adds	r7, #24
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}
 8018a8e:	bf00      	nop
 8018a90:	50000100 	.word	0x50000100
 8018a94:	50000300 	.word	0x50000300
 8018a98:	50000700 	.word	0x50000700
 8018a9c:	50000400 	.word	0x50000400
 8018aa0:	08019b8b 	.word	0x08019b8b
 8018aa4:	08019c63 	.word	0x08019c63
 8018aa8:	08019c7f 	.word	0x08019c7f

08018aac <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b084      	sub	sp, #16
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018aba:	2b01      	cmp	r3, #1
 8018abc:	d101      	bne.n	8018ac2 <HAL_ADC_Stop_DMA+0x16>
 8018abe:	2302      	movs	r3, #2
 8018ac0:	e051      	b.n	8018b66 <HAL_ADC_Stop_DMA+0xba>
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	2201      	movs	r2, #1
 8018ac6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8018aca:	2103      	movs	r1, #3
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f000 fedf 	bl	8019890 <ADC_ConversionStop>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8018ad6:	7bfb      	ldrb	r3, [r7, #15]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d13f      	bne.n	8018b5c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	68da      	ldr	r2, [r3, #12]
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	f022 0201 	bic.w	r2, r2, #1
 8018aea:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018af0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018af4:	b2db      	uxtb	r3, r3
 8018af6:	2b02      	cmp	r3, #2
 8018af8:	d10f      	bne.n	8018b1a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018afe:	4618      	mov	r0, r3
 8018b00:	f001 fcd9 	bl	801a4b6 <HAL_DMA_Abort>
 8018b04:	4603      	mov	r3, r0
 8018b06:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8018b08:	7bfb      	ldrb	r3, [r7, #15]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d005      	beq.n	8018b1a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	685a      	ldr	r2, [r3, #4]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	f022 0210 	bic.w	r2, r2, #16
 8018b28:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8018b2a:	7bfb      	ldrb	r3, [r7, #15]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d105      	bne.n	8018b3c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8018b30:	6878      	ldr	r0, [r7, #4]
 8018b32:	f000 ffcb 	bl	8019acc <ADC_Disable>
 8018b36:	4603      	mov	r3, r0
 8018b38:	73fb      	strb	r3, [r7, #15]
 8018b3a:	e002      	b.n	8018b42 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8018b3c:	6878      	ldr	r0, [r7, #4]
 8018b3e:	f000 ffc5 	bl	8019acc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8018b42:	7bfb      	ldrb	r3, [r7, #15]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d109      	bne.n	8018b5c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018b50:	f023 0301 	bic.w	r3, r3, #1
 8018b54:	f043 0201 	orr.w	r2, r3, #1
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8018b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b66:	4618      	mov	r0, r3
 8018b68:	3710      	adds	r7, #16
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bd80      	pop	{r7, pc}

08018b6e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8018b6e:	b480      	push	{r7}
 8018b70:	b083      	sub	sp, #12
 8018b72:	af00      	add	r7, sp, #0
 8018b74:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	370c      	adds	r7, #12
 8018b80:	46bd      	mov	sp, r7
 8018b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b86:	4770      	bx	lr

08018b88 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b08a      	sub	sp, #40	; 0x28
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8018b90:	2300      	movs	r3, #0
 8018b92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	685b      	ldr	r3, [r3, #4]
 8018ba2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018bac:	d004      	beq.n	8018bb8 <HAL_ADC_IRQHandler+0x30>
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	4a87      	ldr	r2, [pc, #540]	; (8018dd0 <HAL_ADC_IRQHandler+0x248>)
 8018bb4:	4293      	cmp	r3, r2
 8018bb6:	d101      	bne.n	8018bbc <HAL_ADC_IRQHandler+0x34>
 8018bb8:	4b86      	ldr	r3, [pc, #536]	; (8018dd4 <HAL_ADC_IRQHandler+0x24c>)
 8018bba:	e000      	b.n	8018bbe <HAL_ADC_IRQHandler+0x36>
 8018bbc:	4b86      	ldr	r3, [pc, #536]	; (8018dd8 <HAL_ADC_IRQHandler+0x250>)
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	f7ff f9ea 	bl	8017f98 <LL_ADC_GetMultimode>
 8018bc4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8018bc6:	69fb      	ldr	r3, [r7, #28]
 8018bc8:	f003 0302 	and.w	r3, r3, #2
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d017      	beq.n	8018c00 <HAL_ADC_IRQHandler+0x78>
 8018bd0:	69bb      	ldr	r3, [r7, #24]
 8018bd2:	f003 0302 	and.w	r3, r3, #2
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d012      	beq.n	8018c00 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bde:	f003 0310 	and.w	r3, r3, #16
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d105      	bne.n	8018bf2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bea:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8018bf2:	6878      	ldr	r0, [r7, #4]
 8018bf4:	f001 f93a 	bl	8019e6c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	2202      	movs	r2, #2
 8018bfe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8018c00:	69fb      	ldr	r3, [r7, #28]
 8018c02:	f003 0304 	and.w	r3, r3, #4
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d004      	beq.n	8018c14 <HAL_ADC_IRQHandler+0x8c>
 8018c0a:	69bb      	ldr	r3, [r7, #24]
 8018c0c:	f003 0304 	and.w	r3, r3, #4
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d10a      	bne.n	8018c2a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8018c14:	69fb      	ldr	r3, [r7, #28]
 8018c16:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	f000 8085 	beq.w	8018d2a <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8018c20:	69bb      	ldr	r3, [r7, #24]
 8018c22:	f003 0308 	and.w	r3, r3, #8
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d07f      	beq.n	8018d2a <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c2e:	f003 0310 	and.w	r3, r3, #16
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d105      	bne.n	8018c42 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	4618      	mov	r0, r3
 8018c48:	f7ff f900 	bl	8017e4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d064      	beq.n	8018d1c <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	4a5e      	ldr	r2, [pc, #376]	; (8018dd0 <HAL_ADC_IRQHandler+0x248>)
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	d002      	beq.n	8018c62 <HAL_ADC_IRQHandler+0xda>
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	e001      	b.n	8018c66 <HAL_ADC_IRQHandler+0xde>
 8018c62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018c66:	687a      	ldr	r2, [r7, #4]
 8018c68:	6812      	ldr	r2, [r2, #0]
 8018c6a:	4293      	cmp	r3, r2
 8018c6c:	d008      	beq.n	8018c80 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018c6e:	697b      	ldr	r3, [r7, #20]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d005      	beq.n	8018c80 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	2b05      	cmp	r3, #5
 8018c78:	d002      	beq.n	8018c80 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018c7a:	697b      	ldr	r3, [r7, #20]
 8018c7c:	2b09      	cmp	r3, #9
 8018c7e:	d104      	bne.n	8018c8a <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	68db      	ldr	r3, [r3, #12]
 8018c86:	623b      	str	r3, [r7, #32]
 8018c88:	e00d      	b.n	8018ca6 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	4a50      	ldr	r2, [pc, #320]	; (8018dd0 <HAL_ADC_IRQHandler+0x248>)
 8018c90:	4293      	cmp	r3, r2
 8018c92:	d002      	beq.n	8018c9a <HAL_ADC_IRQHandler+0x112>
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	e001      	b.n	8018c9e <HAL_ADC_IRQHandler+0x116>
 8018c9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018c9e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8018ca0:	693b      	ldr	r3, [r7, #16]
 8018ca2:	68db      	ldr	r3, [r3, #12]
 8018ca4:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8018ca6:	6a3b      	ldr	r3, [r7, #32]
 8018ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d135      	bne.n	8018d1c <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	f003 0308 	and.w	r3, r3, #8
 8018cba:	2b08      	cmp	r3, #8
 8018cbc:	d12e      	bne.n	8018d1c <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f7ff fa48 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d11a      	bne.n	8018d04 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	685a      	ldr	r2, [r3, #4]
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	f022 020c 	bic.w	r2, r2, #12
 8018cdc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d112      	bne.n	8018d1c <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cfa:	f043 0201 	orr.w	r2, r3, #1
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	65da      	str	r2, [r3, #92]	; 0x5c
 8018d02:	e00b      	b.n	8018d1c <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d08:	f043 0210 	orr.w	r2, r3, #16
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018d14:	f043 0201 	orr.w	r2, r3, #1
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8018d1c:	6878      	ldr	r0, [r7, #4]
 8018d1e:	f7ef fb63 	bl	80083e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	220c      	movs	r2, #12
 8018d28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8018d2a:	69fb      	ldr	r3, [r7, #28]
 8018d2c:	f003 0320 	and.w	r3, r3, #32
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d004      	beq.n	8018d3e <HAL_ADC_IRQHandler+0x1b6>
 8018d34:	69bb      	ldr	r3, [r7, #24]
 8018d36:	f003 0320 	and.w	r3, r3, #32
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d10b      	bne.n	8018d56 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8018d3e:	69fb      	ldr	r3, [r7, #28]
 8018d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	f000 80a1 	beq.w	8018e8c <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8018d4a:	69bb      	ldr	r3, [r7, #24]
 8018d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	f000 809b 	beq.w	8018e8c <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d5a:	f003 0310 	and.w	r3, r3, #16
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d105      	bne.n	8018d6e <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d66:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	4618      	mov	r0, r3
 8018d74:	f7ff f8a9 	bl	8017eca <LL_ADC_INJ_IsTriggerSourceSWStart>
 8018d78:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f7ff f864 	bl	8017e4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8018d84:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	4a11      	ldr	r2, [pc, #68]	; (8018dd0 <HAL_ADC_IRQHandler+0x248>)
 8018d8c:	4293      	cmp	r3, r2
 8018d8e:	d002      	beq.n	8018d96 <HAL_ADC_IRQHandler+0x20e>
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	e001      	b.n	8018d9a <HAL_ADC_IRQHandler+0x212>
 8018d96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018d9a:	687a      	ldr	r2, [r7, #4]
 8018d9c:	6812      	ldr	r2, [r2, #0]
 8018d9e:	4293      	cmp	r3, r2
 8018da0:	d008      	beq.n	8018db4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d005      	beq.n	8018db4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	2b06      	cmp	r3, #6
 8018dac:	d002      	beq.n	8018db4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	2b07      	cmp	r3, #7
 8018db2:	d104      	bne.n	8018dbe <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	68db      	ldr	r3, [r3, #12]
 8018dba:	623b      	str	r3, [r7, #32]
 8018dbc:	e014      	b.n	8018de8 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	4a03      	ldr	r2, [pc, #12]	; (8018dd0 <HAL_ADC_IRQHandler+0x248>)
 8018dc4:	4293      	cmp	r3, r2
 8018dc6:	d009      	beq.n	8018ddc <HAL_ADC_IRQHandler+0x254>
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	e008      	b.n	8018de0 <HAL_ADC_IRQHandler+0x258>
 8018dce:	bf00      	nop
 8018dd0:	50000100 	.word	0x50000100
 8018dd4:	50000300 	.word	0x50000300
 8018dd8:	50000700 	.word	0x50000700
 8018ddc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018de0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8018de2:	693b      	ldr	r3, [r7, #16]
 8018de4:	68db      	ldr	r3, [r3, #12]
 8018de6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d047      	beq.n	8018e7e <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8018dee:	6a3b      	ldr	r3, [r7, #32]
 8018df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d007      	beq.n	8018e08 <HAL_ADC_IRQHandler+0x280>
 8018df8:	68bb      	ldr	r3, [r7, #8]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d03f      	beq.n	8018e7e <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8018dfe:	6a3b      	ldr	r3, [r7, #32]
 8018e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d13a      	bne.n	8018e7e <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e12:	2b40      	cmp	r3, #64	; 0x40
 8018e14:	d133      	bne.n	8018e7e <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8018e16:	6a3b      	ldr	r3, [r7, #32]
 8018e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d12e      	bne.n	8018e7e <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7ff f9be 	bl	80181a6 <LL_ADC_INJ_IsConversionOngoing>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d11a      	bne.n	8018e66 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	685a      	ldr	r2, [r3, #4]
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018e3e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d112      	bne.n	8018e7e <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e5c:	f043 0201 	orr.w	r2, r3, #1
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	65da      	str	r2, [r3, #92]	; 0x5c
 8018e64:	e00b      	b.n	8018e7e <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e6a:	f043 0210 	orr.w	r2, r3, #16
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018e76:	f043 0201 	orr.w	r2, r3, #1
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8018e7e:	6878      	ldr	r0, [r7, #4]
 8018e80:	f000 ffcc 	bl	8019e1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	2260      	movs	r2, #96	; 0x60
 8018e8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8018e8c:	69fb      	ldr	r3, [r7, #28]
 8018e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d011      	beq.n	8018eba <HAL_ADC_IRQHandler+0x332>
 8018e96:	69bb      	ldr	r3, [r7, #24]
 8018e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d00c      	beq.n	8018eba <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ea4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8018eac:	6878      	ldr	r0, [r7, #4]
 8018eae:	f000 f8af 	bl	8019010 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	2280      	movs	r2, #128	; 0x80
 8018eb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8018eba:	69fb      	ldr	r3, [r7, #28]
 8018ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d012      	beq.n	8018eea <HAL_ADC_IRQHandler+0x362>
 8018ec4:	69bb      	ldr	r3, [r7, #24]
 8018ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d00d      	beq.n	8018eea <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ed2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f000 ffb2 	bl	8019e44 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018ee8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8018eea:	69fb      	ldr	r3, [r7, #28]
 8018eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d012      	beq.n	8018f1a <HAL_ADC_IRQHandler+0x392>
 8018ef4:	69bb      	ldr	r3, [r7, #24]
 8018ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d00d      	beq.n	8018f1a <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8018f0a:	6878      	ldr	r0, [r7, #4]
 8018f0c:	f000 ffa4 	bl	8019e58 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018f18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8018f1a:	69fb      	ldr	r3, [r7, #28]
 8018f1c:	f003 0310 	and.w	r3, r3, #16
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d043      	beq.n	8018fac <HAL_ADC_IRQHandler+0x424>
 8018f24:	69bb      	ldr	r3, [r7, #24]
 8018f26:	f003 0310 	and.w	r3, r3, #16
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d03e      	beq.n	8018fac <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d102      	bne.n	8018f3c <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8018f36:	2301      	movs	r3, #1
 8018f38:	627b      	str	r3, [r7, #36]	; 0x24
 8018f3a:	e021      	b.n	8018f80 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8018f3c:	697b      	ldr	r3, [r7, #20]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d015      	beq.n	8018f6e <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018f4a:	d004      	beq.n	8018f56 <HAL_ADC_IRQHandler+0x3ce>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	4a27      	ldr	r2, [pc, #156]	; (8018ff0 <HAL_ADC_IRQHandler+0x468>)
 8018f52:	4293      	cmp	r3, r2
 8018f54:	d101      	bne.n	8018f5a <HAL_ADC_IRQHandler+0x3d2>
 8018f56:	4b27      	ldr	r3, [pc, #156]	; (8018ff4 <HAL_ADC_IRQHandler+0x46c>)
 8018f58:	e000      	b.n	8018f5c <HAL_ADC_IRQHandler+0x3d4>
 8018f5a:	4b27      	ldr	r3, [pc, #156]	; (8018ff8 <HAL_ADC_IRQHandler+0x470>)
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f7ff f829 	bl	8017fb4 <LL_ADC_GetMultiDMATransfer>
 8018f62:	4603      	mov	r3, r0
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d00b      	beq.n	8018f80 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018f68:	2301      	movs	r3, #1
 8018f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8018f6c:	e008      	b.n	8018f80 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	68db      	ldr	r3, [r3, #12]
 8018f74:	f003 0301 	and.w	r3, r3, #1
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d001      	beq.n	8018f80 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018f7c:	2301      	movs	r3, #1
 8018f7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8018f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f82:	2b01      	cmp	r3, #1
 8018f84:	d10e      	bne.n	8018fa4 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f8a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018f96:	f043 0202 	orr.w	r2, r3, #2
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	f000 f840 	bl	8019024 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	2210      	movs	r2, #16
 8018faa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8018fac:	69fb      	ldr	r3, [r7, #28]
 8018fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d018      	beq.n	8018fe8 <HAL_ADC_IRQHandler+0x460>
 8018fb6:	69bb      	ldr	r3, [r7, #24]
 8018fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d013      	beq.n	8018fe8 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018fc4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018fd0:	f043 0208 	orr.w	r2, r3, #8
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018fe0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	f000 ff24 	bl	8019e30 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8018fe8:	bf00      	nop
 8018fea:	3728      	adds	r7, #40	; 0x28
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd80      	pop	{r7, pc}
 8018ff0:	50000100 	.word	0x50000100
 8018ff4:	50000300 	.word	0x50000300
 8018ff8:	50000700 	.word	0x50000700

08018ffc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8018ffc:	b480      	push	{r7}
 8018ffe:	b083      	sub	sp, #12
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8019004:	bf00      	nop
 8019006:	370c      	adds	r7, #12
 8019008:	46bd      	mov	sp, r7
 801900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900e:	4770      	bx	lr

08019010 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8019010:	b480      	push	{r7}
 8019012:	b083      	sub	sp, #12
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8019018:	bf00      	nop
 801901a:	370c      	adds	r7, #12
 801901c:	46bd      	mov	sp, r7
 801901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019022:	4770      	bx	lr

08019024 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8019024:	b480      	push	{r7}
 8019026:	b083      	sub	sp, #12
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801902c:	bf00      	nop
 801902e:	370c      	adds	r7, #12
 8019030:	46bd      	mov	sp, r7
 8019032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019036:	4770      	bx	lr

08019038 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b0b6      	sub	sp, #216	; 0xd8
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
 8019040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019042:	2300      	movs	r3, #0
 8019044:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8019048:	2300      	movs	r3, #0
 801904a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019052:	2b01      	cmp	r3, #1
 8019054:	d102      	bne.n	801905c <HAL_ADC_ConfigChannel+0x24>
 8019056:	2302      	movs	r3, #2
 8019058:	f000 bc04 	b.w	8019864 <HAL_ADC_ConfigChannel+0x82c>
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	2201      	movs	r2, #1
 8019060:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	4618      	mov	r0, r3
 801906a:	f7ff f875 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 801906e:	4603      	mov	r3, r0
 8019070:	2b00      	cmp	r3, #0
 8019072:	f040 83e8 	bne.w	8019846 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	6818      	ldr	r0, [r3, #0]
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	6859      	ldr	r1, [r3, #4]
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	461a      	mov	r2, r3
 8019084:	f7fe fef5 	bl	8017e72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	4618      	mov	r0, r3
 801908e:	f7ff f863 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 8019092:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	4618      	mov	r0, r3
 801909c:	f7ff f883 	bl	80181a6 <LL_ADC_INJ_IsConversionOngoing>
 80190a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80190a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	f040 81d9 	bne.w	8019460 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80190ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	f040 81d4 	bne.w	8019460 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	689b      	ldr	r3, [r3, #8]
 80190bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80190c0:	d10f      	bne.n	80190e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	6818      	ldr	r0, [r3, #0]
 80190c6:	683b      	ldr	r3, [r7, #0]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	2200      	movs	r2, #0
 80190cc:	4619      	mov	r1, r3
 80190ce:	f7fe ff0f 	bl	8017ef0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80190da:	4618      	mov	r0, r3
 80190dc:	f7fe fea3 	bl	8017e26 <LL_ADC_SetSamplingTimeCommonConfig>
 80190e0:	e00e      	b.n	8019100 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	6818      	ldr	r0, [r3, #0]
 80190e6:	683b      	ldr	r3, [r7, #0]
 80190e8:	6819      	ldr	r1, [r3, #0]
 80190ea:	683b      	ldr	r3, [r7, #0]
 80190ec:	689b      	ldr	r3, [r3, #8]
 80190ee:	461a      	mov	r2, r3
 80190f0:	f7fe fefe 	bl	8017ef0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	2100      	movs	r1, #0
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7fe fe93 	bl	8017e26 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	695a      	ldr	r2, [r3, #20]
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	68db      	ldr	r3, [r3, #12]
 801910a:	08db      	lsrs	r3, r3, #3
 801910c:	f003 0303 	and.w	r3, r3, #3
 8019110:	005b      	lsls	r3, r3, #1
 8019112:	fa02 f303 	lsl.w	r3, r2, r3
 8019116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	691b      	ldr	r3, [r3, #16]
 801911e:	2b04      	cmp	r3, #4
 8019120:	d022      	beq.n	8019168 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	6818      	ldr	r0, [r3, #0]
 8019126:	683b      	ldr	r3, [r7, #0]
 8019128:	6919      	ldr	r1, [r3, #16]
 801912a:	683b      	ldr	r3, [r7, #0]
 801912c:	681a      	ldr	r2, [r3, #0]
 801912e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019132:	f7fe fded 	bl	8017d10 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	6818      	ldr	r0, [r3, #0]
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	6919      	ldr	r1, [r3, #16]
 801913e:	683b      	ldr	r3, [r7, #0]
 8019140:	699b      	ldr	r3, [r3, #24]
 8019142:	461a      	mov	r2, r3
 8019144:	f7fe fe39 	bl	8017dba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	6818      	ldr	r0, [r3, #0]
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	6919      	ldr	r1, [r3, #16]
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	7f1b      	ldrb	r3, [r3, #28]
 8019154:	2b01      	cmp	r3, #1
 8019156:	d102      	bne.n	801915e <HAL_ADC_ConfigChannel+0x126>
 8019158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801915c:	e000      	b.n	8019160 <HAL_ADC_ConfigChannel+0x128>
 801915e:	2300      	movs	r3, #0
 8019160:	461a      	mov	r2, r3
 8019162:	f7fe fe45 	bl	8017df0 <LL_ADC_SetOffsetSaturation>
 8019166:	e17b      	b.n	8019460 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	2100      	movs	r1, #0
 801916e:	4618      	mov	r0, r3
 8019170:	f7fe fdf2 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 8019174:	4603      	mov	r3, r0
 8019176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801917a:	2b00      	cmp	r3, #0
 801917c:	d10a      	bne.n	8019194 <HAL_ADC_ConfigChannel+0x15c>
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	2100      	movs	r1, #0
 8019184:	4618      	mov	r0, r3
 8019186:	f7fe fde7 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 801918a:	4603      	mov	r3, r0
 801918c:	0e9b      	lsrs	r3, r3, #26
 801918e:	f003 021f 	and.w	r2, r3, #31
 8019192:	e01e      	b.n	80191d2 <HAL_ADC_ConfigChannel+0x19a>
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	2100      	movs	r1, #0
 801919a:	4618      	mov	r0, r3
 801919c:	f7fe fddc 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 80191a0:	4603      	mov	r3, r0
 80191a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80191a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80191aa:	fa93 f3a3 	rbit	r3, r3
 80191ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80191b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80191b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80191ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d101      	bne.n	80191c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80191c2:	2320      	movs	r3, #32
 80191c4:	e004      	b.n	80191d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80191c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80191ca:	fab3 f383 	clz	r3, r3
 80191ce:	b2db      	uxtb	r3, r3
 80191d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80191d2:	683b      	ldr	r3, [r7, #0]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d105      	bne.n	80191ea <HAL_ADC_ConfigChannel+0x1b2>
 80191de:	683b      	ldr	r3, [r7, #0]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	0e9b      	lsrs	r3, r3, #26
 80191e4:	f003 031f 	and.w	r3, r3, #31
 80191e8:	e018      	b.n	801921c <HAL_ADC_ConfigChannel+0x1e4>
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80191f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80191f6:	fa93 f3a3 	rbit	r3, r3
 80191fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80191fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8019206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801920a:	2b00      	cmp	r3, #0
 801920c:	d101      	bne.n	8019212 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801920e:	2320      	movs	r3, #32
 8019210:	e004      	b.n	801921c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8019212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019216:	fab3 f383 	clz	r3, r3
 801921a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801921c:	429a      	cmp	r2, r3
 801921e:	d106      	bne.n	801922e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	2200      	movs	r2, #0
 8019226:	2100      	movs	r1, #0
 8019228:	4618      	mov	r0, r3
 801922a:	f7fe fdab 	bl	8017d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	2101      	movs	r1, #1
 8019234:	4618      	mov	r0, r3
 8019236:	f7fe fd8f 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 801923a:	4603      	mov	r3, r0
 801923c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019240:	2b00      	cmp	r3, #0
 8019242:	d10a      	bne.n	801925a <HAL_ADC_ConfigChannel+0x222>
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	2101      	movs	r1, #1
 801924a:	4618      	mov	r0, r3
 801924c:	f7fe fd84 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 8019250:	4603      	mov	r3, r0
 8019252:	0e9b      	lsrs	r3, r3, #26
 8019254:	f003 021f 	and.w	r2, r3, #31
 8019258:	e01e      	b.n	8019298 <HAL_ADC_ConfigChannel+0x260>
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	2101      	movs	r1, #1
 8019260:	4618      	mov	r0, r3
 8019262:	f7fe fd79 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 8019266:	4603      	mov	r3, r0
 8019268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801926c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019270:	fa93 f3a3 	rbit	r3, r3
 8019274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8019278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801927c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8019280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019284:	2b00      	cmp	r3, #0
 8019286:	d101      	bne.n	801928c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8019288:	2320      	movs	r3, #32
 801928a:	e004      	b.n	8019296 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801928c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019290:	fab3 f383 	clz	r3, r3
 8019294:	b2db      	uxtb	r3, r3
 8019296:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019298:	683b      	ldr	r3, [r7, #0]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d105      	bne.n	80192b0 <HAL_ADC_ConfigChannel+0x278>
 80192a4:	683b      	ldr	r3, [r7, #0]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	0e9b      	lsrs	r3, r3, #26
 80192aa:	f003 031f 	and.w	r3, r3, #31
 80192ae:	e018      	b.n	80192e2 <HAL_ADC_ConfigChannel+0x2aa>
 80192b0:	683b      	ldr	r3, [r7, #0]
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80192b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80192bc:	fa93 f3a3 	rbit	r3, r3
 80192c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80192c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80192c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80192cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d101      	bne.n	80192d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80192d4:	2320      	movs	r3, #32
 80192d6:	e004      	b.n	80192e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80192d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80192dc:	fab3 f383 	clz	r3, r3
 80192e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80192e2:	429a      	cmp	r2, r3
 80192e4:	d106      	bne.n	80192f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	2200      	movs	r2, #0
 80192ec:	2101      	movs	r1, #1
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7fe fd48 	bl	8017d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2102      	movs	r1, #2
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7fe fd2c 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 8019300:	4603      	mov	r3, r0
 8019302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019306:	2b00      	cmp	r3, #0
 8019308:	d10a      	bne.n	8019320 <HAL_ADC_ConfigChannel+0x2e8>
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	2102      	movs	r1, #2
 8019310:	4618      	mov	r0, r3
 8019312:	f7fe fd21 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 8019316:	4603      	mov	r3, r0
 8019318:	0e9b      	lsrs	r3, r3, #26
 801931a:	f003 021f 	and.w	r2, r3, #31
 801931e:	e01e      	b.n	801935e <HAL_ADC_ConfigChannel+0x326>
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	2102      	movs	r1, #2
 8019326:	4618      	mov	r0, r3
 8019328:	f7fe fd16 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 801932c:	4603      	mov	r3, r0
 801932e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019336:	fa93 f3a3 	rbit	r3, r3
 801933a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801933e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8019346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801934a:	2b00      	cmp	r3, #0
 801934c:	d101      	bne.n	8019352 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801934e:	2320      	movs	r3, #32
 8019350:	e004      	b.n	801935c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8019352:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019356:	fab3 f383 	clz	r3, r3
 801935a:	b2db      	uxtb	r3, r3
 801935c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019366:	2b00      	cmp	r3, #0
 8019368:	d105      	bne.n	8019376 <HAL_ADC_ConfigChannel+0x33e>
 801936a:	683b      	ldr	r3, [r7, #0]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	0e9b      	lsrs	r3, r3, #26
 8019370:	f003 031f 	and.w	r3, r3, #31
 8019374:	e016      	b.n	80193a4 <HAL_ADC_ConfigChannel+0x36c>
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801937e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019382:	fa93 f3a3 	rbit	r3, r3
 8019386:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8019388:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801938a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801938e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019392:	2b00      	cmp	r3, #0
 8019394:	d101      	bne.n	801939a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8019396:	2320      	movs	r3, #32
 8019398:	e004      	b.n	80193a4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801939a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801939e:	fab3 f383 	clz	r3, r3
 80193a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d106      	bne.n	80193b6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	2200      	movs	r2, #0
 80193ae:	2102      	movs	r1, #2
 80193b0:	4618      	mov	r0, r3
 80193b2:	f7fe fce7 	bl	8017d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	2103      	movs	r1, #3
 80193bc:	4618      	mov	r0, r3
 80193be:	f7fe fccb 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 80193c2:	4603      	mov	r3, r0
 80193c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d10a      	bne.n	80193e2 <HAL_ADC_ConfigChannel+0x3aa>
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2103      	movs	r1, #3
 80193d2:	4618      	mov	r0, r3
 80193d4:	f7fe fcc0 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 80193d8:	4603      	mov	r3, r0
 80193da:	0e9b      	lsrs	r3, r3, #26
 80193dc:	f003 021f 	and.w	r2, r3, #31
 80193e0:	e017      	b.n	8019412 <HAL_ADC_ConfigChannel+0x3da>
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	2103      	movs	r1, #3
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7fe fcb5 	bl	8017d58 <LL_ADC_GetOffsetChannel>
 80193ee:	4603      	mov	r3, r0
 80193f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80193f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80193f4:	fa93 f3a3 	rbit	r3, r3
 80193f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80193fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80193fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019400:	2b00      	cmp	r3, #0
 8019402:	d101      	bne.n	8019408 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8019404:	2320      	movs	r3, #32
 8019406:	e003      	b.n	8019410 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8019408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801940a:	fab3 f383 	clz	r3, r3
 801940e:	b2db      	uxtb	r3, r3
 8019410:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019412:	683b      	ldr	r3, [r7, #0]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801941a:	2b00      	cmp	r3, #0
 801941c:	d105      	bne.n	801942a <HAL_ADC_ConfigChannel+0x3f2>
 801941e:	683b      	ldr	r3, [r7, #0]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	0e9b      	lsrs	r3, r3, #26
 8019424:	f003 031f 	and.w	r3, r3, #31
 8019428:	e011      	b.n	801944e <HAL_ADC_ConfigChannel+0x416>
 801942a:	683b      	ldr	r3, [r7, #0]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019432:	fa93 f3a3 	rbit	r3, r3
 8019436:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8019438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801943a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801943c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801943e:	2b00      	cmp	r3, #0
 8019440:	d101      	bne.n	8019446 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8019442:	2320      	movs	r3, #32
 8019444:	e003      	b.n	801944e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8019446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019448:	fab3 f383 	clz	r3, r3
 801944c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801944e:	429a      	cmp	r2, r3
 8019450:	d106      	bne.n	8019460 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	2200      	movs	r2, #0
 8019458:	2103      	movs	r1, #3
 801945a:	4618      	mov	r0, r3
 801945c:	f7fe fc92 	bl	8017d84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	4618      	mov	r0, r3
 8019466:	f7fe fe29 	bl	80180bc <LL_ADC_IsEnabled>
 801946a:	4603      	mov	r3, r0
 801946c:	2b00      	cmp	r3, #0
 801946e:	f040 813d 	bne.w	80196ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	6818      	ldr	r0, [r3, #0]
 8019476:	683b      	ldr	r3, [r7, #0]
 8019478:	6819      	ldr	r1, [r3, #0]
 801947a:	683b      	ldr	r3, [r7, #0]
 801947c:	68db      	ldr	r3, [r3, #12]
 801947e:	461a      	mov	r2, r3
 8019480:	f7fe fd62 	bl	8017f48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8019484:	683b      	ldr	r3, [r7, #0]
 8019486:	68db      	ldr	r3, [r3, #12]
 8019488:	4aa2      	ldr	r2, [pc, #648]	; (8019714 <HAL_ADC_ConfigChannel+0x6dc>)
 801948a:	4293      	cmp	r3, r2
 801948c:	f040 812e 	bne.w	80196ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8019494:	683b      	ldr	r3, [r7, #0]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801949c:	2b00      	cmp	r3, #0
 801949e:	d10b      	bne.n	80194b8 <HAL_ADC_ConfigChannel+0x480>
 80194a0:	683b      	ldr	r3, [r7, #0]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	0e9b      	lsrs	r3, r3, #26
 80194a6:	3301      	adds	r3, #1
 80194a8:	f003 031f 	and.w	r3, r3, #31
 80194ac:	2b09      	cmp	r3, #9
 80194ae:	bf94      	ite	ls
 80194b0:	2301      	movls	r3, #1
 80194b2:	2300      	movhi	r3, #0
 80194b4:	b2db      	uxtb	r3, r3
 80194b6:	e019      	b.n	80194ec <HAL_ADC_ConfigChannel+0x4b4>
 80194b8:	683b      	ldr	r3, [r7, #0]
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80194be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80194c0:	fa93 f3a3 	rbit	r3, r3
 80194c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80194c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80194c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80194ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d101      	bne.n	80194d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80194d0:	2320      	movs	r3, #32
 80194d2:	e003      	b.n	80194dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80194d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80194d6:	fab3 f383 	clz	r3, r3
 80194da:	b2db      	uxtb	r3, r3
 80194dc:	3301      	adds	r3, #1
 80194de:	f003 031f 	and.w	r3, r3, #31
 80194e2:	2b09      	cmp	r3, #9
 80194e4:	bf94      	ite	ls
 80194e6:	2301      	movls	r3, #1
 80194e8:	2300      	movhi	r3, #0
 80194ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d079      	beq.n	80195e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d107      	bne.n	801950c <HAL_ADC_ConfigChannel+0x4d4>
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	0e9b      	lsrs	r3, r3, #26
 8019502:	3301      	adds	r3, #1
 8019504:	069b      	lsls	r3, r3, #26
 8019506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801950a:	e015      	b.n	8019538 <HAL_ADC_ConfigChannel+0x500>
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019514:	fa93 f3a3 	rbit	r3, r3
 8019518:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801951a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801951c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801951e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019520:	2b00      	cmp	r3, #0
 8019522:	d101      	bne.n	8019528 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8019524:	2320      	movs	r3, #32
 8019526:	e003      	b.n	8019530 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8019528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801952a:	fab3 f383 	clz	r3, r3
 801952e:	b2db      	uxtb	r3, r3
 8019530:	3301      	adds	r3, #1
 8019532:	069b      	lsls	r3, r3, #26
 8019534:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019540:	2b00      	cmp	r3, #0
 8019542:	d109      	bne.n	8019558 <HAL_ADC_ConfigChannel+0x520>
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	0e9b      	lsrs	r3, r3, #26
 801954a:	3301      	adds	r3, #1
 801954c:	f003 031f 	and.w	r3, r3, #31
 8019550:	2101      	movs	r1, #1
 8019552:	fa01 f303 	lsl.w	r3, r1, r3
 8019556:	e017      	b.n	8019588 <HAL_ADC_ConfigChannel+0x550>
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801955e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019560:	fa93 f3a3 	rbit	r3, r3
 8019564:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8019566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019568:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801956a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801956c:	2b00      	cmp	r3, #0
 801956e:	d101      	bne.n	8019574 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8019570:	2320      	movs	r3, #32
 8019572:	e003      	b.n	801957c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8019574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019576:	fab3 f383 	clz	r3, r3
 801957a:	b2db      	uxtb	r3, r3
 801957c:	3301      	adds	r3, #1
 801957e:	f003 031f 	and.w	r3, r3, #31
 8019582:	2101      	movs	r1, #1
 8019584:	fa01 f303 	lsl.w	r3, r1, r3
 8019588:	ea42 0103 	orr.w	r1, r2, r3
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019594:	2b00      	cmp	r3, #0
 8019596:	d10a      	bne.n	80195ae <HAL_ADC_ConfigChannel+0x576>
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	0e9b      	lsrs	r3, r3, #26
 801959e:	3301      	adds	r3, #1
 80195a0:	f003 021f 	and.w	r2, r3, #31
 80195a4:	4613      	mov	r3, r2
 80195a6:	005b      	lsls	r3, r3, #1
 80195a8:	4413      	add	r3, r2
 80195aa:	051b      	lsls	r3, r3, #20
 80195ac:	e018      	b.n	80195e0 <HAL_ADC_ConfigChannel+0x5a8>
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80195b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195b6:	fa93 f3a3 	rbit	r3, r3
 80195ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80195bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80195c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d101      	bne.n	80195ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80195c6:	2320      	movs	r3, #32
 80195c8:	e003      	b.n	80195d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80195ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195cc:	fab3 f383 	clz	r3, r3
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	3301      	adds	r3, #1
 80195d4:	f003 021f 	and.w	r2, r3, #31
 80195d8:	4613      	mov	r3, r2
 80195da:	005b      	lsls	r3, r3, #1
 80195dc:	4413      	add	r3, r2
 80195de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80195e0:	430b      	orrs	r3, r1
 80195e2:	e07e      	b.n	80196e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d107      	bne.n	8019600 <HAL_ADC_ConfigChannel+0x5c8>
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	0e9b      	lsrs	r3, r3, #26
 80195f6:	3301      	adds	r3, #1
 80195f8:	069b      	lsls	r3, r3, #26
 80195fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80195fe:	e015      	b.n	801962c <HAL_ADC_ConfigChannel+0x5f4>
 8019600:	683b      	ldr	r3, [r7, #0]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019608:	fa93 f3a3 	rbit	r3, r3
 801960c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019610:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8019612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019614:	2b00      	cmp	r3, #0
 8019616:	d101      	bne.n	801961c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8019618:	2320      	movs	r3, #32
 801961a:	e003      	b.n	8019624 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801961e:	fab3 f383 	clz	r3, r3
 8019622:	b2db      	uxtb	r3, r3
 8019624:	3301      	adds	r3, #1
 8019626:	069b      	lsls	r3, r3, #26
 8019628:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019634:	2b00      	cmp	r3, #0
 8019636:	d109      	bne.n	801964c <HAL_ADC_ConfigChannel+0x614>
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	0e9b      	lsrs	r3, r3, #26
 801963e:	3301      	adds	r3, #1
 8019640:	f003 031f 	and.w	r3, r3, #31
 8019644:	2101      	movs	r1, #1
 8019646:	fa01 f303 	lsl.w	r3, r1, r3
 801964a:	e017      	b.n	801967c <HAL_ADC_ConfigChannel+0x644>
 801964c:	683b      	ldr	r3, [r7, #0]
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019652:	6a3b      	ldr	r3, [r7, #32]
 8019654:	fa93 f3a3 	rbit	r3, r3
 8019658:	61fb      	str	r3, [r7, #28]
  return result;
 801965a:	69fb      	ldr	r3, [r7, #28]
 801965c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019660:	2b00      	cmp	r3, #0
 8019662:	d101      	bne.n	8019668 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8019664:	2320      	movs	r3, #32
 8019666:	e003      	b.n	8019670 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8019668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801966a:	fab3 f383 	clz	r3, r3
 801966e:	b2db      	uxtb	r3, r3
 8019670:	3301      	adds	r3, #1
 8019672:	f003 031f 	and.w	r3, r3, #31
 8019676:	2101      	movs	r1, #1
 8019678:	fa01 f303 	lsl.w	r3, r1, r3
 801967c:	ea42 0103 	orr.w	r1, r2, r3
 8019680:	683b      	ldr	r3, [r7, #0]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019688:	2b00      	cmp	r3, #0
 801968a:	d10d      	bne.n	80196a8 <HAL_ADC_ConfigChannel+0x670>
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	0e9b      	lsrs	r3, r3, #26
 8019692:	3301      	adds	r3, #1
 8019694:	f003 021f 	and.w	r2, r3, #31
 8019698:	4613      	mov	r3, r2
 801969a:	005b      	lsls	r3, r3, #1
 801969c:	4413      	add	r3, r2
 801969e:	3b1e      	subs	r3, #30
 80196a0:	051b      	lsls	r3, r3, #20
 80196a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80196a6:	e01b      	b.n	80196e0 <HAL_ADC_ConfigChannel+0x6a8>
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80196ae:	697b      	ldr	r3, [r7, #20]
 80196b0:	fa93 f3a3 	rbit	r3, r3
 80196b4:	613b      	str	r3, [r7, #16]
  return result;
 80196b6:	693b      	ldr	r3, [r7, #16]
 80196b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80196ba:	69bb      	ldr	r3, [r7, #24]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d101      	bne.n	80196c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80196c0:	2320      	movs	r3, #32
 80196c2:	e003      	b.n	80196cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80196c4:	69bb      	ldr	r3, [r7, #24]
 80196c6:	fab3 f383 	clz	r3, r3
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	3301      	adds	r3, #1
 80196ce:	f003 021f 	and.w	r2, r3, #31
 80196d2:	4613      	mov	r3, r2
 80196d4:	005b      	lsls	r3, r3, #1
 80196d6:	4413      	add	r3, r2
 80196d8:	3b1e      	subs	r3, #30
 80196da:	051b      	lsls	r3, r3, #20
 80196dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80196e0:	430b      	orrs	r3, r1
 80196e2:	683a      	ldr	r2, [r7, #0]
 80196e4:	6892      	ldr	r2, [r2, #8]
 80196e6:	4619      	mov	r1, r3
 80196e8:	f7fe fc02 	bl	8017ef0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80196ec:	683b      	ldr	r3, [r7, #0]
 80196ee:	681a      	ldr	r2, [r3, #0]
 80196f0:	4b09      	ldr	r3, [pc, #36]	; (8019718 <HAL_ADC_ConfigChannel+0x6e0>)
 80196f2:	4013      	ands	r3, r2
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	f000 80af 	beq.w	8019858 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019702:	d004      	beq.n	801970e <HAL_ADC_ConfigChannel+0x6d6>
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	4a04      	ldr	r2, [pc, #16]	; (801971c <HAL_ADC_ConfigChannel+0x6e4>)
 801970a:	4293      	cmp	r3, r2
 801970c:	d10a      	bne.n	8019724 <HAL_ADC_ConfigChannel+0x6ec>
 801970e:	4b04      	ldr	r3, [pc, #16]	; (8019720 <HAL_ADC_ConfigChannel+0x6e8>)
 8019710:	e009      	b.n	8019726 <HAL_ADC_ConfigChannel+0x6ee>
 8019712:	bf00      	nop
 8019714:	407f0000 	.word	0x407f0000
 8019718:	80080000 	.word	0x80080000
 801971c:	50000100 	.word	0x50000100
 8019720:	50000300 	.word	0x50000300
 8019724:	4b51      	ldr	r3, [pc, #324]	; (801986c <HAL_ADC_ConfigChannel+0x834>)
 8019726:	4618      	mov	r0, r3
 8019728:	f7fe fae4 	bl	8017cf4 <LL_ADC_GetCommonPathInternalCh>
 801972c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8019730:	683b      	ldr	r3, [r7, #0]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	4a4e      	ldr	r2, [pc, #312]	; (8019870 <HAL_ADC_ConfigChannel+0x838>)
 8019736:	4293      	cmp	r3, r2
 8019738:	d004      	beq.n	8019744 <HAL_ADC_ConfigChannel+0x70c>
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	4a4d      	ldr	r2, [pc, #308]	; (8019874 <HAL_ADC_ConfigChannel+0x83c>)
 8019740:	4293      	cmp	r3, r2
 8019742:	d134      	bne.n	80197ae <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8019744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801974c:	2b00      	cmp	r3, #0
 801974e:	d12e      	bne.n	80197ae <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019758:	d17e      	bne.n	8019858 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019762:	d004      	beq.n	801976e <HAL_ADC_ConfigChannel+0x736>
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	4a43      	ldr	r2, [pc, #268]	; (8019878 <HAL_ADC_ConfigChannel+0x840>)
 801976a:	4293      	cmp	r3, r2
 801976c:	d101      	bne.n	8019772 <HAL_ADC_ConfigChannel+0x73a>
 801976e:	4a43      	ldr	r2, [pc, #268]	; (801987c <HAL_ADC_ConfigChannel+0x844>)
 8019770:	e000      	b.n	8019774 <HAL_ADC_ConfigChannel+0x73c>
 8019772:	4a3e      	ldr	r2, [pc, #248]	; (801986c <HAL_ADC_ConfigChannel+0x834>)
 8019774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801977c:	4619      	mov	r1, r3
 801977e:	4610      	mov	r0, r2
 8019780:	f7fe faa5 	bl	8017cce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019784:	4b3e      	ldr	r3, [pc, #248]	; (8019880 <HAL_ADC_ConfigChannel+0x848>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	099b      	lsrs	r3, r3, #6
 801978a:	4a3e      	ldr	r2, [pc, #248]	; (8019884 <HAL_ADC_ConfigChannel+0x84c>)
 801978c:	fba2 2303 	umull	r2, r3, r2, r3
 8019790:	099b      	lsrs	r3, r3, #6
 8019792:	1c5a      	adds	r2, r3, #1
 8019794:	4613      	mov	r3, r2
 8019796:	005b      	lsls	r3, r3, #1
 8019798:	4413      	add	r3, r2
 801979a:	009b      	lsls	r3, r3, #2
 801979c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801979e:	e002      	b.n	80197a6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	3b01      	subs	r3, #1
 80197a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d1f9      	bne.n	80197a0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80197ac:	e054      	b.n	8019858 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	4a35      	ldr	r2, [pc, #212]	; (8019888 <HAL_ADC_ConfigChannel+0x850>)
 80197b4:	4293      	cmp	r3, r2
 80197b6:	d120      	bne.n	80197fa <HAL_ADC_ConfigChannel+0x7c2>
 80197b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80197bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d11a      	bne.n	80197fa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80197cc:	d144      	bne.n	8019858 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80197d6:	d004      	beq.n	80197e2 <HAL_ADC_ConfigChannel+0x7aa>
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	4a26      	ldr	r2, [pc, #152]	; (8019878 <HAL_ADC_ConfigChannel+0x840>)
 80197de:	4293      	cmp	r3, r2
 80197e0:	d101      	bne.n	80197e6 <HAL_ADC_ConfigChannel+0x7ae>
 80197e2:	4a26      	ldr	r2, [pc, #152]	; (801987c <HAL_ADC_ConfigChannel+0x844>)
 80197e4:	e000      	b.n	80197e8 <HAL_ADC_ConfigChannel+0x7b0>
 80197e6:	4a21      	ldr	r2, [pc, #132]	; (801986c <HAL_ADC_ConfigChannel+0x834>)
 80197e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80197ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80197f0:	4619      	mov	r1, r3
 80197f2:	4610      	mov	r0, r2
 80197f4:	f7fe fa6b 	bl	8017cce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80197f8:	e02e      	b.n	8019858 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	4a23      	ldr	r2, [pc, #140]	; (801988c <HAL_ADC_ConfigChannel+0x854>)
 8019800:	4293      	cmp	r3, r2
 8019802:	d129      	bne.n	8019858 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8019804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801980c:	2b00      	cmp	r3, #0
 801980e:	d123      	bne.n	8019858 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	4a18      	ldr	r2, [pc, #96]	; (8019878 <HAL_ADC_ConfigChannel+0x840>)
 8019816:	4293      	cmp	r3, r2
 8019818:	d01e      	beq.n	8019858 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019822:	d004      	beq.n	801982e <HAL_ADC_ConfigChannel+0x7f6>
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	4a13      	ldr	r2, [pc, #76]	; (8019878 <HAL_ADC_ConfigChannel+0x840>)
 801982a:	4293      	cmp	r3, r2
 801982c:	d101      	bne.n	8019832 <HAL_ADC_ConfigChannel+0x7fa>
 801982e:	4a13      	ldr	r2, [pc, #76]	; (801987c <HAL_ADC_ConfigChannel+0x844>)
 8019830:	e000      	b.n	8019834 <HAL_ADC_ConfigChannel+0x7fc>
 8019832:	4a0e      	ldr	r2, [pc, #56]	; (801986c <HAL_ADC_ConfigChannel+0x834>)
 8019834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801983c:	4619      	mov	r1, r3
 801983e:	4610      	mov	r0, r2
 8019840:	f7fe fa45 	bl	8017cce <LL_ADC_SetCommonPathInternalCh>
 8019844:	e008      	b.n	8019858 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801984a:	f043 0220 	orr.w	r2, r3, #32
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019852:	2301      	movs	r3, #1
 8019854:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	2200      	movs	r2, #0
 801985c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019860:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8019864:	4618      	mov	r0, r3
 8019866:	37d8      	adds	r7, #216	; 0xd8
 8019868:	46bd      	mov	sp, r7
 801986a:	bd80      	pop	{r7, pc}
 801986c:	50000700 	.word	0x50000700
 8019870:	c3210000 	.word	0xc3210000
 8019874:	90c00010 	.word	0x90c00010
 8019878:	50000100 	.word	0x50000100
 801987c:	50000300 	.word	0x50000300
 8019880:	20000000 	.word	0x20000000
 8019884:	053e2d63 	.word	0x053e2d63
 8019888:	c7520000 	.word	0xc7520000
 801988c:	cb840000 	.word	0xcb840000

08019890 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b088      	sub	sp, #32
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
 8019898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801989a:	2300      	movs	r3, #0
 801989c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	4618      	mov	r0, r3
 80198a8:	f7fe fc56 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 80198ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7fe fc77 	bl	80181a6 <LL_ADC_INJ_IsConversionOngoing>
 80198b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80198ba:	693b      	ldr	r3, [r7, #16]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d103      	bne.n	80198c8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	f000 8098 	beq.w	80199f8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	68db      	ldr	r3, [r3, #12]
 80198ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d02a      	beq.n	801992c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	7f5b      	ldrb	r3, [r3, #29]
 80198da:	2b01      	cmp	r3, #1
 80198dc:	d126      	bne.n	801992c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	7f1b      	ldrb	r3, [r3, #28]
 80198e2:	2b01      	cmp	r3, #1
 80198e4:	d122      	bne.n	801992c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80198e6:	2301      	movs	r3, #1
 80198e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80198ea:	e014      	b.n	8019916 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80198ec:	69fb      	ldr	r3, [r7, #28]
 80198ee:	4a45      	ldr	r2, [pc, #276]	; (8019a04 <ADC_ConversionStop+0x174>)
 80198f0:	4293      	cmp	r3, r2
 80198f2:	d90d      	bls.n	8019910 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198f8:	f043 0210 	orr.w	r2, r3, #16
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019904:	f043 0201 	orr.w	r2, r3, #1
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801990c:	2301      	movs	r3, #1
 801990e:	e074      	b.n	80199fa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8019910:	69fb      	ldr	r3, [r7, #28]
 8019912:	3301      	adds	r3, #1
 8019914:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019920:	2b40      	cmp	r3, #64	; 0x40
 8019922:	d1e3      	bne.n	80198ec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	2240      	movs	r2, #64	; 0x40
 801992a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801992c:	69bb      	ldr	r3, [r7, #24]
 801992e:	2b02      	cmp	r3, #2
 8019930:	d014      	beq.n	801995c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	4618      	mov	r0, r3
 8019938:	f7fe fc0e 	bl	8018158 <LL_ADC_REG_IsConversionOngoing>
 801993c:	4603      	mov	r3, r0
 801993e:	2b00      	cmp	r3, #0
 8019940:	d00c      	beq.n	801995c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	4618      	mov	r0, r3
 8019948:	f7fe fbcb 	bl	80180e2 <LL_ADC_IsDisableOngoing>
 801994c:	4603      	mov	r3, r0
 801994e:	2b00      	cmp	r3, #0
 8019950:	d104      	bne.n	801995c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	4618      	mov	r0, r3
 8019958:	f7fe fbea 	bl	8018130 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801995c:	69bb      	ldr	r3, [r7, #24]
 801995e:	2b01      	cmp	r3, #1
 8019960:	d014      	beq.n	801998c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	4618      	mov	r0, r3
 8019968:	f7fe fc1d 	bl	80181a6 <LL_ADC_INJ_IsConversionOngoing>
 801996c:	4603      	mov	r3, r0
 801996e:	2b00      	cmp	r3, #0
 8019970:	d00c      	beq.n	801998c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	4618      	mov	r0, r3
 8019978:	f7fe fbb3 	bl	80180e2 <LL_ADC_IsDisableOngoing>
 801997c:	4603      	mov	r3, r0
 801997e:	2b00      	cmp	r3, #0
 8019980:	d104      	bne.n	801998c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	4618      	mov	r0, r3
 8019988:	f7fe fbf9 	bl	801817e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801998c:	69bb      	ldr	r3, [r7, #24]
 801998e:	2b02      	cmp	r3, #2
 8019990:	d005      	beq.n	801999e <ADC_ConversionStop+0x10e>
 8019992:	69bb      	ldr	r3, [r7, #24]
 8019994:	2b03      	cmp	r3, #3
 8019996:	d105      	bne.n	80199a4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8019998:	230c      	movs	r3, #12
 801999a:	617b      	str	r3, [r7, #20]
        break;
 801999c:	e005      	b.n	80199aa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801999e:	2308      	movs	r3, #8
 80199a0:	617b      	str	r3, [r7, #20]
        break;
 80199a2:	e002      	b.n	80199aa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80199a4:	2304      	movs	r3, #4
 80199a6:	617b      	str	r3, [r7, #20]
        break;
 80199a8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80199aa:	f7fe f94f 	bl	8017c4c <HAL_GetTick>
 80199ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80199b0:	e01b      	b.n	80199ea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80199b2:	f7fe f94b 	bl	8017c4c <HAL_GetTick>
 80199b6:	4602      	mov	r2, r0
 80199b8:	68bb      	ldr	r3, [r7, #8]
 80199ba:	1ad3      	subs	r3, r2, r3
 80199bc:	2b05      	cmp	r3, #5
 80199be:	d914      	bls.n	80199ea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	689a      	ldr	r2, [r3, #8]
 80199c6:	697b      	ldr	r3, [r7, #20]
 80199c8:	4013      	ands	r3, r2
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d00d      	beq.n	80199ea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199d2:	f043 0210 	orr.w	r2, r3, #16
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80199de:	f043 0201 	orr.w	r2, r3, #1
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80199e6:	2301      	movs	r3, #1
 80199e8:	e007      	b.n	80199fa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	689a      	ldr	r2, [r3, #8]
 80199f0:	697b      	ldr	r3, [r7, #20]
 80199f2:	4013      	ands	r3, r2
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d1dc      	bne.n	80199b2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80199f8:	2300      	movs	r3, #0
}
 80199fa:	4618      	mov	r0, r3
 80199fc:	3720      	adds	r7, #32
 80199fe:	46bd      	mov	sp, r7
 8019a00:	bd80      	pop	{r7, pc}
 8019a02:	bf00      	nop
 8019a04:	a33fffff 	.word	0xa33fffff

08019a08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	b084      	sub	sp, #16
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7fe fb51 	bl	80180bc <LL_ADC_IsEnabled>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d14d      	bne.n	8019abc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	689a      	ldr	r2, [r3, #8]
 8019a26:	4b28      	ldr	r3, [pc, #160]	; (8019ac8 <ADC_Enable+0xc0>)
 8019a28:	4013      	ands	r3, r2
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d00d      	beq.n	8019a4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a32:	f043 0210 	orr.w	r2, r3, #16
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019a3e:	f043 0201 	orr.w	r2, r3, #1
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8019a46:	2301      	movs	r3, #1
 8019a48:	e039      	b.n	8019abe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	4618      	mov	r0, r3
 8019a50:	f7fe fb0c 	bl	801806c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8019a54:	f7fe f8fa 	bl	8017c4c <HAL_GetTick>
 8019a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8019a5a:	e028      	b.n	8019aae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7fe fb2b 	bl	80180bc <LL_ADC_IsEnabled>
 8019a66:	4603      	mov	r3, r0
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d104      	bne.n	8019a76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7fe fafb 	bl	801806c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8019a76:	f7fe f8e9 	bl	8017c4c <HAL_GetTick>
 8019a7a:	4602      	mov	r2, r0
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	1ad3      	subs	r3, r2, r3
 8019a80:	2b02      	cmp	r3, #2
 8019a82:	d914      	bls.n	8019aae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	f003 0301 	and.w	r3, r3, #1
 8019a8e:	2b01      	cmp	r3, #1
 8019a90:	d00d      	beq.n	8019aae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a96:	f043 0210 	orr.w	r2, r3, #16
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019aa2:	f043 0201 	orr.w	r2, r3, #1
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8019aaa:	2301      	movs	r3, #1
 8019aac:	e007      	b.n	8019abe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	f003 0301 	and.w	r3, r3, #1
 8019ab8:	2b01      	cmp	r3, #1
 8019aba:	d1cf      	bne.n	8019a5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8019abc:	2300      	movs	r3, #0
}
 8019abe:	4618      	mov	r0, r3
 8019ac0:	3710      	adds	r7, #16
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bd80      	pop	{r7, pc}
 8019ac6:	bf00      	nop
 8019ac8:	8000003f 	.word	0x8000003f

08019acc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b084      	sub	sp, #16
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	4618      	mov	r0, r3
 8019ada:	f7fe fb02 	bl	80180e2 <LL_ADC_IsDisableOngoing>
 8019ade:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f7fe fae9 	bl	80180bc <LL_ADC_IsEnabled>
 8019aea:	4603      	mov	r3, r0
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d047      	beq.n	8019b80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d144      	bne.n	8019b80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	689b      	ldr	r3, [r3, #8]
 8019afc:	f003 030d 	and.w	r3, r3, #13
 8019b00:	2b01      	cmp	r3, #1
 8019b02:	d10c      	bne.n	8019b1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	4618      	mov	r0, r3
 8019b0a:	f7fe fac3 	bl	8018094 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	2203      	movs	r2, #3
 8019b14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8019b16:	f7fe f899 	bl	8017c4c <HAL_GetTick>
 8019b1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019b1c:	e029      	b.n	8019b72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b22:	f043 0210 	orr.w	r2, r3, #16
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b2e:	f043 0201 	orr.w	r2, r3, #1
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8019b36:	2301      	movs	r3, #1
 8019b38:	e023      	b.n	8019b82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8019b3a:	f7fe f887 	bl	8017c4c <HAL_GetTick>
 8019b3e:	4602      	mov	r2, r0
 8019b40:	68bb      	ldr	r3, [r7, #8]
 8019b42:	1ad3      	subs	r3, r2, r3
 8019b44:	2b02      	cmp	r3, #2
 8019b46:	d914      	bls.n	8019b72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	689b      	ldr	r3, [r3, #8]
 8019b4e:	f003 0301 	and.w	r3, r3, #1
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d00d      	beq.n	8019b72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b5a:	f043 0210 	orr.w	r2, r3, #16
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b66:	f043 0201 	orr.w	r2, r3, #1
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8019b6e:	2301      	movs	r3, #1
 8019b70:	e007      	b.n	8019b82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	689b      	ldr	r3, [r3, #8]
 8019b78:	f003 0301 	and.w	r3, r3, #1
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d1dc      	bne.n	8019b3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8019b80:	2300      	movs	r3, #0
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3710      	adds	r7, #16
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}

08019b8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8019b8a:	b580      	push	{r7, lr}
 8019b8c:	b084      	sub	sp, #16
 8019b8e:	af00      	add	r7, sp, #0
 8019b90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d14b      	bne.n	8019c3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ba8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	f003 0308 	and.w	r3, r3, #8
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d021      	beq.n	8019c02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7fe f942 	bl	8017e4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8019bc8:	4603      	mov	r3, r0
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d032      	beq.n	8019c34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	68db      	ldr	r3, [r3, #12]
 8019bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d12b      	bne.n	8019c34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019be0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d11f      	bne.n	8019c34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bf8:	f043 0201 	orr.w	r2, r3, #1
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8019c00:	e018      	b.n	8019c34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	68db      	ldr	r3, [r3, #12]
 8019c08:	f003 0302 	and.w	r3, r3, #2
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d111      	bne.n	8019c34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d105      	bne.n	8019c34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c2c:	f043 0201 	orr.w	r2, r3, #1
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019c34:	68f8      	ldr	r0, [r7, #12]
 8019c36:	f7ee fbd7 	bl	80083e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8019c3a:	e00e      	b.n	8019c5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c40:	f003 0310 	and.w	r3, r3, #16
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d003      	beq.n	8019c50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8019c48:	68f8      	ldr	r0, [r7, #12]
 8019c4a:	f7ff f9eb 	bl	8019024 <HAL_ADC_ErrorCallback>
}
 8019c4e:	e004      	b.n	8019c5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c56:	6878      	ldr	r0, [r7, #4]
 8019c58:	4798      	blx	r3
}
 8019c5a:	bf00      	nop
 8019c5c:	3710      	adds	r7, #16
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	bd80      	pop	{r7, pc}

08019c62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8019c62:	b580      	push	{r7, lr}
 8019c64:	b084      	sub	sp, #16
 8019c66:	af00      	add	r7, sp, #0
 8019c68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8019c70:	68f8      	ldr	r0, [r7, #12]
 8019c72:	f7ff f9c3 	bl	8018ffc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8019c76:	bf00      	nop
 8019c78:	3710      	adds	r7, #16
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}

08019c7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8019c7e:	b580      	push	{r7, lr}
 8019c80:	b084      	sub	sp, #16
 8019c82:	af00      	add	r7, sp, #0
 8019c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c9c:	f043 0204 	orr.w	r2, r3, #4
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8019ca4:	68f8      	ldr	r0, [r7, #12]
 8019ca6:	f7ff f9bd 	bl	8019024 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8019caa:	bf00      	nop
 8019cac:	3710      	adds	r7, #16
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}

08019cb2 <LL_ADC_IsEnabled>:
{
 8019cb2:	b480      	push	{r7}
 8019cb4:	b083      	sub	sp, #12
 8019cb6:	af00      	add	r7, sp, #0
 8019cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	689b      	ldr	r3, [r3, #8]
 8019cbe:	f003 0301 	and.w	r3, r3, #1
 8019cc2:	2b01      	cmp	r3, #1
 8019cc4:	d101      	bne.n	8019cca <LL_ADC_IsEnabled+0x18>
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	e000      	b.n	8019ccc <LL_ADC_IsEnabled+0x1a>
 8019cca:	2300      	movs	r3, #0
}
 8019ccc:	4618      	mov	r0, r3
 8019cce:	370c      	adds	r7, #12
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd6:	4770      	bx	lr

08019cd8 <LL_ADC_StartCalibration>:
{
 8019cd8:	b480      	push	{r7}
 8019cda:	b083      	sub	sp, #12
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
 8019ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	689b      	ldr	r3, [r3, #8]
 8019ce6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8019cea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019cee:	683a      	ldr	r2, [r7, #0]
 8019cf0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8019cf4:	4313      	orrs	r3, r2
 8019cf6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	609a      	str	r2, [r3, #8]
}
 8019cfe:	bf00      	nop
 8019d00:	370c      	adds	r7, #12
 8019d02:	46bd      	mov	sp, r7
 8019d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d08:	4770      	bx	lr

08019d0a <LL_ADC_IsCalibrationOnGoing>:
{
 8019d0a:	b480      	push	{r7}
 8019d0c:	b083      	sub	sp, #12
 8019d0e:	af00      	add	r7, sp, #0
 8019d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	689b      	ldr	r3, [r3, #8]
 8019d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019d1e:	d101      	bne.n	8019d24 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8019d20:	2301      	movs	r3, #1
 8019d22:	e000      	b.n	8019d26 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8019d24:	2300      	movs	r3, #0
}
 8019d26:	4618      	mov	r0, r3
 8019d28:	370c      	adds	r7, #12
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d30:	4770      	bx	lr

08019d32 <LL_ADC_REG_IsConversionOngoing>:
{
 8019d32:	b480      	push	{r7}
 8019d34:	b083      	sub	sp, #12
 8019d36:	af00      	add	r7, sp, #0
 8019d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	689b      	ldr	r3, [r3, #8]
 8019d3e:	f003 0304 	and.w	r3, r3, #4
 8019d42:	2b04      	cmp	r3, #4
 8019d44:	d101      	bne.n	8019d4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8019d46:	2301      	movs	r3, #1
 8019d48:	e000      	b.n	8019d4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8019d4a:	2300      	movs	r3, #0
}
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	370c      	adds	r7, #12
 8019d50:	46bd      	mov	sp, r7
 8019d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d56:	4770      	bx	lr

08019d58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b084      	sub	sp, #16
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
 8019d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8019d62:	2300      	movs	r3, #0
 8019d64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019d6c:	2b01      	cmp	r3, #1
 8019d6e:	d101      	bne.n	8019d74 <HAL_ADCEx_Calibration_Start+0x1c>
 8019d70:	2302      	movs	r3, #2
 8019d72:	e04d      	b.n	8019e10 <HAL_ADCEx_Calibration_Start+0xb8>
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	2201      	movs	r2, #1
 8019d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8019d7c:	6878      	ldr	r0, [r7, #4]
 8019d7e:	f7ff fea5 	bl	8019acc <ADC_Disable>
 8019d82:	4603      	mov	r3, r0
 8019d84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8019d86:	7bfb      	ldrb	r3, [r7, #15]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d136      	bne.n	8019dfa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019d94:	f023 0302 	bic.w	r3, r3, #2
 8019d98:	f043 0202 	orr.w	r2, r3, #2
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	6839      	ldr	r1, [r7, #0]
 8019da6:	4618      	mov	r0, r3
 8019da8:	f7ff ff96 	bl	8019cd8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8019dac:	e014      	b.n	8019dd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8019dae:	68bb      	ldr	r3, [r7, #8]
 8019db0:	3301      	adds	r3, #1
 8019db2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	4a18      	ldr	r2, [pc, #96]	; (8019e18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8019db8:	4293      	cmp	r3, r2
 8019dba:	d90d      	bls.n	8019dd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dc0:	f023 0312 	bic.w	r3, r3, #18
 8019dc4:	f043 0210 	orr.w	r2, r3, #16
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	2200      	movs	r2, #0
 8019dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8019dd4:	2301      	movs	r3, #1
 8019dd6:	e01b      	b.n	8019e10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f7ff ff94 	bl	8019d0a <LL_ADC_IsCalibrationOnGoing>
 8019de2:	4603      	mov	r3, r0
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d1e2      	bne.n	8019dae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dec:	f023 0303 	bic.w	r3, r3, #3
 8019df0:	f043 0201 	orr.w	r2, r3, #1
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	65da      	str	r2, [r3, #92]	; 0x5c
 8019df8:	e005      	b.n	8019e06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dfe:	f043 0210 	orr.w	r2, r3, #16
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	2200      	movs	r2, #0
 8019e0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e10:	4618      	mov	r0, r3
 8019e12:	3710      	adds	r7, #16
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bd80      	pop	{r7, pc}
 8019e18:	0004de01 	.word	0x0004de01

08019e1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019e1c:	b480      	push	{r7}
 8019e1e:	b083      	sub	sp, #12
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8019e24:	bf00      	nop
 8019e26:	370c      	adds	r7, #12
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e2e:	4770      	bx	lr

08019e30 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8019e30:	b480      	push	{r7}
 8019e32:	b083      	sub	sp, #12
 8019e34:	af00      	add	r7, sp, #0
 8019e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8019e38:	bf00      	nop
 8019e3a:	370c      	adds	r7, #12
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e42:	4770      	bx	lr

08019e44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8019e44:	b480      	push	{r7}
 8019e46:	b083      	sub	sp, #12
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8019e4c:	bf00      	nop
 8019e4e:	370c      	adds	r7, #12
 8019e50:	46bd      	mov	sp, r7
 8019e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e56:	4770      	bx	lr

08019e58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8019e58:	b480      	push	{r7}
 8019e5a:	b083      	sub	sp, #12
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8019e60:	bf00      	nop
 8019e62:	370c      	adds	r7, #12
 8019e64:	46bd      	mov	sp, r7
 8019e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e6a:	4770      	bx	lr

08019e6c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8019e6c:	b480      	push	{r7}
 8019e6e:	b083      	sub	sp, #12
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8019e74:	bf00      	nop
 8019e76:	370c      	adds	r7, #12
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7e:	4770      	bx	lr

08019e80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8019e80:	b590      	push	{r4, r7, lr}
 8019e82:	b0a1      	sub	sp, #132	; 0x84
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]
 8019e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019e96:	2b01      	cmp	r3, #1
 8019e98:	d101      	bne.n	8019e9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8019e9a:	2302      	movs	r3, #2
 8019e9c:	e0cb      	b.n	801a036 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	2201      	movs	r2, #1
 8019ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8019eaa:	2300      	movs	r3, #0
 8019eac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019eb6:	d102      	bne.n	8019ebe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8019eb8:	4b61      	ldr	r3, [pc, #388]	; (801a040 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019eba:	60bb      	str	r3, [r7, #8]
 8019ebc:	e001      	b.n	8019ec2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8019ec2:	68bb      	ldr	r3, [r7, #8]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d10b      	bne.n	8019ee0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ecc:	f043 0220 	orr.w	r2, r3, #32
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8019edc:	2301      	movs	r3, #1
 8019ede:	e0aa      	b.n	801a036 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8019ee0:	68bb      	ldr	r3, [r7, #8]
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	f7ff ff25 	bl	8019d32 <LL_ADC_REG_IsConversionOngoing>
 8019ee8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f7ff ff1f 	bl	8019d32 <LL_ADC_REG_IsConversionOngoing>
 8019ef4:	4603      	mov	r3, r0
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	f040 808c 	bne.w	801a014 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8019efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	f040 8088 	bne.w	801a014 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019f0c:	d004      	beq.n	8019f18 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	4a4b      	ldr	r2, [pc, #300]	; (801a040 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019f14:	4293      	cmp	r3, r2
 8019f16:	d101      	bne.n	8019f1c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8019f18:	4b4a      	ldr	r3, [pc, #296]	; (801a044 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8019f1a:	e000      	b.n	8019f1e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8019f1c:	4b4a      	ldr	r3, [pc, #296]	; (801a048 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8019f1e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d041      	beq.n	8019fac <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8019f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019f2a:	689b      	ldr	r3, [r3, #8]
 8019f2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	6859      	ldr	r1, [r3, #4]
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019f3a:	035b      	lsls	r3, r3, #13
 8019f3c:	430b      	orrs	r3, r1
 8019f3e:	431a      	orrs	r2, r3
 8019f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019f42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019f4c:	d004      	beq.n	8019f58 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	4a3b      	ldr	r2, [pc, #236]	; (801a040 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019f54:	4293      	cmp	r3, r2
 8019f56:	d10f      	bne.n	8019f78 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8019f58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019f5c:	f7ff fea9 	bl	8019cb2 <LL_ADC_IsEnabled>
 8019f60:	4604      	mov	r4, r0
 8019f62:	4837      	ldr	r0, [pc, #220]	; (801a040 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019f64:	f7ff fea5 	bl	8019cb2 <LL_ADC_IsEnabled>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	4323      	orrs	r3, r4
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	bf0c      	ite	eq
 8019f70:	2301      	moveq	r3, #1
 8019f72:	2300      	movne	r3, #0
 8019f74:	b2db      	uxtb	r3, r3
 8019f76:	e008      	b.n	8019f8a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8019f78:	4834      	ldr	r0, [pc, #208]	; (801a04c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019f7a:	f7ff fe9a 	bl	8019cb2 <LL_ADC_IsEnabled>
 8019f7e:	4603      	mov	r3, r0
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	bf0c      	ite	eq
 8019f84:	2301      	moveq	r3, #1
 8019f86:	2300      	movne	r3, #0
 8019f88:	b2db      	uxtb	r3, r3
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d04c      	beq.n	801a028 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8019f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019f90:	689b      	ldr	r3, [r3, #8]
 8019f92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019f96:	f023 030f 	bic.w	r3, r3, #15
 8019f9a:	683a      	ldr	r2, [r7, #0]
 8019f9c:	6811      	ldr	r1, [r2, #0]
 8019f9e:	683a      	ldr	r2, [r7, #0]
 8019fa0:	6892      	ldr	r2, [r2, #8]
 8019fa2:	430a      	orrs	r2, r1
 8019fa4:	431a      	orrs	r2, r3
 8019fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019fa8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019faa:	e03d      	b.n	801a028 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8019fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019fae:	689b      	ldr	r3, [r3, #8]
 8019fb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019fb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019fc0:	d004      	beq.n	8019fcc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	4a1e      	ldr	r2, [pc, #120]	; (801a040 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019fc8:	4293      	cmp	r3, r2
 8019fca:	d10f      	bne.n	8019fec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8019fcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019fd0:	f7ff fe6f 	bl	8019cb2 <LL_ADC_IsEnabled>
 8019fd4:	4604      	mov	r4, r0
 8019fd6:	481a      	ldr	r0, [pc, #104]	; (801a040 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019fd8:	f7ff fe6b 	bl	8019cb2 <LL_ADC_IsEnabled>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	4323      	orrs	r3, r4
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	bf0c      	ite	eq
 8019fe4:	2301      	moveq	r3, #1
 8019fe6:	2300      	movne	r3, #0
 8019fe8:	b2db      	uxtb	r3, r3
 8019fea:	e008      	b.n	8019ffe <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8019fec:	4817      	ldr	r0, [pc, #92]	; (801a04c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019fee:	f7ff fe60 	bl	8019cb2 <LL_ADC_IsEnabled>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	bf0c      	ite	eq
 8019ff8:	2301      	moveq	r3, #1
 8019ffa:	2300      	movne	r3, #0
 8019ffc:	b2db      	uxtb	r3, r3
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d012      	beq.n	801a028 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801a002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a004:	689b      	ldr	r3, [r3, #8]
 801a006:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801a00a:	f023 030f 	bic.w	r3, r3, #15
 801a00e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a010:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801a012:	e009      	b.n	801a028 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a018:	f043 0220 	orr.w	r2, r3, #32
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801a020:	2301      	movs	r3, #1
 801a022:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801a026:	e000      	b.n	801a02a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801a028:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	2200      	movs	r2, #0
 801a02e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a032:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801a036:	4618      	mov	r0, r3
 801a038:	3784      	adds	r7, #132	; 0x84
 801a03a:	46bd      	mov	sp, r7
 801a03c:	bd90      	pop	{r4, r7, pc}
 801a03e:	bf00      	nop
 801a040:	50000100 	.word	0x50000100
 801a044:	50000300 	.word	0x50000300
 801a048:	50000700 	.word	0x50000700
 801a04c:	50000400 	.word	0x50000400

0801a050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a050:	b480      	push	{r7}
 801a052:	b085      	sub	sp, #20
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	f003 0307 	and.w	r3, r3, #7
 801a05e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a060:	4b0c      	ldr	r3, [pc, #48]	; (801a094 <__NVIC_SetPriorityGrouping+0x44>)
 801a062:	68db      	ldr	r3, [r3, #12]
 801a064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a066:	68ba      	ldr	r2, [r7, #8]
 801a068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801a06c:	4013      	ands	r3, r2
 801a06e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801a078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801a07c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a082:	4a04      	ldr	r2, [pc, #16]	; (801a094 <__NVIC_SetPriorityGrouping+0x44>)
 801a084:	68bb      	ldr	r3, [r7, #8]
 801a086:	60d3      	str	r3, [r2, #12]
}
 801a088:	bf00      	nop
 801a08a:	3714      	adds	r7, #20
 801a08c:	46bd      	mov	sp, r7
 801a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a092:	4770      	bx	lr
 801a094:	e000ed00 	.word	0xe000ed00

0801a098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801a098:	b480      	push	{r7}
 801a09a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a09c:	4b04      	ldr	r3, [pc, #16]	; (801a0b0 <__NVIC_GetPriorityGrouping+0x18>)
 801a09e:	68db      	ldr	r3, [r3, #12]
 801a0a0:	0a1b      	lsrs	r3, r3, #8
 801a0a2:	f003 0307 	and.w	r3, r3, #7
}
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	46bd      	mov	sp, r7
 801a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ae:	4770      	bx	lr
 801a0b0:	e000ed00 	.word	0xe000ed00

0801a0b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a0b4:	b480      	push	{r7}
 801a0b6:	b083      	sub	sp, #12
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a0be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	db0b      	blt.n	801a0de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a0c6:	79fb      	ldrb	r3, [r7, #7]
 801a0c8:	f003 021f 	and.w	r2, r3, #31
 801a0cc:	4907      	ldr	r1, [pc, #28]	; (801a0ec <__NVIC_EnableIRQ+0x38>)
 801a0ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0d2:	095b      	lsrs	r3, r3, #5
 801a0d4:	2001      	movs	r0, #1
 801a0d6:	fa00 f202 	lsl.w	r2, r0, r2
 801a0da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801a0de:	bf00      	nop
 801a0e0:	370c      	adds	r7, #12
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e8:	4770      	bx	lr
 801a0ea:	bf00      	nop
 801a0ec:	e000e100 	.word	0xe000e100

0801a0f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801a0f0:	b480      	push	{r7}
 801a0f2:	b083      	sub	sp, #12
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	4603      	mov	r3, r0
 801a0f8:	6039      	str	r1, [r7, #0]
 801a0fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a0fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a100:	2b00      	cmp	r3, #0
 801a102:	db0a      	blt.n	801a11a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	b2da      	uxtb	r2, r3
 801a108:	490c      	ldr	r1, [pc, #48]	; (801a13c <__NVIC_SetPriority+0x4c>)
 801a10a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a10e:	0112      	lsls	r2, r2, #4
 801a110:	b2d2      	uxtb	r2, r2
 801a112:	440b      	add	r3, r1
 801a114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801a118:	e00a      	b.n	801a130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a11a:	683b      	ldr	r3, [r7, #0]
 801a11c:	b2da      	uxtb	r2, r3
 801a11e:	4908      	ldr	r1, [pc, #32]	; (801a140 <__NVIC_SetPriority+0x50>)
 801a120:	79fb      	ldrb	r3, [r7, #7]
 801a122:	f003 030f 	and.w	r3, r3, #15
 801a126:	3b04      	subs	r3, #4
 801a128:	0112      	lsls	r2, r2, #4
 801a12a:	b2d2      	uxtb	r2, r2
 801a12c:	440b      	add	r3, r1
 801a12e:	761a      	strb	r2, [r3, #24]
}
 801a130:	bf00      	nop
 801a132:	370c      	adds	r7, #12
 801a134:	46bd      	mov	sp, r7
 801a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13a:	4770      	bx	lr
 801a13c:	e000e100 	.word	0xe000e100
 801a140:	e000ed00 	.word	0xe000ed00

0801a144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a144:	b480      	push	{r7}
 801a146:	b089      	sub	sp, #36	; 0x24
 801a148:	af00      	add	r7, sp, #0
 801a14a:	60f8      	str	r0, [r7, #12]
 801a14c:	60b9      	str	r1, [r7, #8]
 801a14e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	f003 0307 	and.w	r3, r3, #7
 801a156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a158:	69fb      	ldr	r3, [r7, #28]
 801a15a:	f1c3 0307 	rsb	r3, r3, #7
 801a15e:	2b04      	cmp	r3, #4
 801a160:	bf28      	it	cs
 801a162:	2304      	movcs	r3, #4
 801a164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a166:	69fb      	ldr	r3, [r7, #28]
 801a168:	3304      	adds	r3, #4
 801a16a:	2b06      	cmp	r3, #6
 801a16c:	d902      	bls.n	801a174 <NVIC_EncodePriority+0x30>
 801a16e:	69fb      	ldr	r3, [r7, #28]
 801a170:	3b03      	subs	r3, #3
 801a172:	e000      	b.n	801a176 <NVIC_EncodePriority+0x32>
 801a174:	2300      	movs	r3, #0
 801a176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a178:	f04f 32ff 	mov.w	r2, #4294967295
 801a17c:	69bb      	ldr	r3, [r7, #24]
 801a17e:	fa02 f303 	lsl.w	r3, r2, r3
 801a182:	43da      	mvns	r2, r3
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	401a      	ands	r2, r3
 801a188:	697b      	ldr	r3, [r7, #20]
 801a18a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a18c:	f04f 31ff 	mov.w	r1, #4294967295
 801a190:	697b      	ldr	r3, [r7, #20]
 801a192:	fa01 f303 	lsl.w	r3, r1, r3
 801a196:	43d9      	mvns	r1, r3
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a19c:	4313      	orrs	r3, r2
         );
}
 801a19e:	4618      	mov	r0, r3
 801a1a0:	3724      	adds	r7, #36	; 0x24
 801a1a2:	46bd      	mov	sp, r7
 801a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a8:	4770      	bx	lr
	...

0801a1ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b082      	sub	sp, #8
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	3b01      	subs	r3, #1
 801a1b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a1bc:	d301      	bcc.n	801a1c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a1be:	2301      	movs	r3, #1
 801a1c0:	e00f      	b.n	801a1e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a1c2:	4a0a      	ldr	r2, [pc, #40]	; (801a1ec <SysTick_Config+0x40>)
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	3b01      	subs	r3, #1
 801a1c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a1ca:	210f      	movs	r1, #15
 801a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a1d0:	f7ff ff8e 	bl	801a0f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a1d4:	4b05      	ldr	r3, [pc, #20]	; (801a1ec <SysTick_Config+0x40>)
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a1da:	4b04      	ldr	r3, [pc, #16]	; (801a1ec <SysTick_Config+0x40>)
 801a1dc:	2207      	movs	r2, #7
 801a1de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a1e0:	2300      	movs	r3, #0
}
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	3708      	adds	r7, #8
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd80      	pop	{r7, pc}
 801a1ea:	bf00      	nop
 801a1ec:	e000e010 	.word	0xe000e010

0801a1f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b082      	sub	sp, #8
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a1f8:	6878      	ldr	r0, [r7, #4]
 801a1fa:	f7ff ff29 	bl	801a050 <__NVIC_SetPriorityGrouping>
}
 801a1fe:	bf00      	nop
 801a200:	3708      	adds	r7, #8
 801a202:	46bd      	mov	sp, r7
 801a204:	bd80      	pop	{r7, pc}

0801a206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a206:	b580      	push	{r7, lr}
 801a208:	b086      	sub	sp, #24
 801a20a:	af00      	add	r7, sp, #0
 801a20c:	4603      	mov	r3, r0
 801a20e:	60b9      	str	r1, [r7, #8]
 801a210:	607a      	str	r2, [r7, #4]
 801a212:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801a214:	f7ff ff40 	bl	801a098 <__NVIC_GetPriorityGrouping>
 801a218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a21a:	687a      	ldr	r2, [r7, #4]
 801a21c:	68b9      	ldr	r1, [r7, #8]
 801a21e:	6978      	ldr	r0, [r7, #20]
 801a220:	f7ff ff90 	bl	801a144 <NVIC_EncodePriority>
 801a224:	4602      	mov	r2, r0
 801a226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a22a:	4611      	mov	r1, r2
 801a22c:	4618      	mov	r0, r3
 801a22e:	f7ff ff5f 	bl	801a0f0 <__NVIC_SetPriority>
}
 801a232:	bf00      	nop
 801a234:	3718      	adds	r7, #24
 801a236:	46bd      	mov	sp, r7
 801a238:	bd80      	pop	{r7, pc}

0801a23a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a23a:	b580      	push	{r7, lr}
 801a23c:	b082      	sub	sp, #8
 801a23e:	af00      	add	r7, sp, #0
 801a240:	4603      	mov	r3, r0
 801a242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a248:	4618      	mov	r0, r3
 801a24a:	f7ff ff33 	bl	801a0b4 <__NVIC_EnableIRQ>
}
 801a24e:	bf00      	nop
 801a250:	3708      	adds	r7, #8
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}

0801a256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a256:	b580      	push	{r7, lr}
 801a258:	b082      	sub	sp, #8
 801a25a:	af00      	add	r7, sp, #0
 801a25c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a25e:	6878      	ldr	r0, [r7, #4]
 801a260:	f7ff ffa4 	bl	801a1ac <SysTick_Config>
 801a264:	4603      	mov	r3, r0
}
 801a266:	4618      	mov	r0, r3
 801a268:	3708      	adds	r7, #8
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bd80      	pop	{r7, pc}
	...

0801a270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b084      	sub	sp, #16
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d101      	bne.n	801a282 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801a27e:	2301      	movs	r3, #1
 801a280:	e08d      	b.n	801a39e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	461a      	mov	r2, r3
 801a288:	4b47      	ldr	r3, [pc, #284]	; (801a3a8 <HAL_DMA_Init+0x138>)
 801a28a:	429a      	cmp	r2, r3
 801a28c:	d80f      	bhi.n	801a2ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	461a      	mov	r2, r3
 801a294:	4b45      	ldr	r3, [pc, #276]	; (801a3ac <HAL_DMA_Init+0x13c>)
 801a296:	4413      	add	r3, r2
 801a298:	4a45      	ldr	r2, [pc, #276]	; (801a3b0 <HAL_DMA_Init+0x140>)
 801a29a:	fba2 2303 	umull	r2, r3, r2, r3
 801a29e:	091b      	lsrs	r3, r3, #4
 801a2a0:	009a      	lsls	r2, r3, #2
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	4a42      	ldr	r2, [pc, #264]	; (801a3b4 <HAL_DMA_Init+0x144>)
 801a2aa:	641a      	str	r2, [r3, #64]	; 0x40
 801a2ac:	e00e      	b.n	801a2cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	461a      	mov	r2, r3
 801a2b4:	4b40      	ldr	r3, [pc, #256]	; (801a3b8 <HAL_DMA_Init+0x148>)
 801a2b6:	4413      	add	r3, r2
 801a2b8:	4a3d      	ldr	r2, [pc, #244]	; (801a3b0 <HAL_DMA_Init+0x140>)
 801a2ba:	fba2 2303 	umull	r2, r3, r2, r3
 801a2be:	091b      	lsrs	r3, r3, #4
 801a2c0:	009a      	lsls	r2, r3, #2
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	4a3c      	ldr	r2, [pc, #240]	; (801a3bc <HAL_DMA_Init+0x14c>)
 801a2ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	2202      	movs	r2, #2
 801a2d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801a2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a2e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801a2f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	691b      	ldr	r3, [r3, #16]
 801a2f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a2fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	699b      	ldr	r3, [r3, #24]
 801a302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	6a1b      	ldr	r3, [r3, #32]
 801a30e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801a310:	68fa      	ldr	r2, [r7, #12]
 801a312:	4313      	orrs	r3, r2
 801a314:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	68fa      	ldr	r2, [r7, #12]
 801a31c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a31e:	6878      	ldr	r0, [r7, #4]
 801a320:	f000 fa10 	bl	801a744 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	689b      	ldr	r3, [r3, #8]
 801a328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a32c:	d102      	bne.n	801a334 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	2200      	movs	r2, #0
 801a332:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	685a      	ldr	r2, [r3, #4]
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a33c:	b2d2      	uxtb	r2, r2
 801a33e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a344:	687a      	ldr	r2, [r7, #4]
 801a346:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a348:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	685b      	ldr	r3, [r3, #4]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d010      	beq.n	801a374 <HAL_DMA_Init+0x104>
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	685b      	ldr	r3, [r3, #4]
 801a356:	2b04      	cmp	r3, #4
 801a358:	d80c      	bhi.n	801a374 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a35a:	6878      	ldr	r0, [r7, #4]
 801a35c:	f000 fa30 	bl	801a7c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a364:	2200      	movs	r2, #0
 801a366:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a36c:	687a      	ldr	r2, [r7, #4]
 801a36e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a370:	605a      	str	r2, [r3, #4]
 801a372:	e008      	b.n	801a386 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2200      	movs	r2, #0
 801a378:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	2200      	movs	r2, #0
 801a37e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	2200      	movs	r2, #0
 801a384:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	2200      	movs	r2, #0
 801a38a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	2201      	movs	r2, #1
 801a390:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	2200      	movs	r2, #0
 801a398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801a39c:	2300      	movs	r3, #0
}
 801a39e:	4618      	mov	r0, r3
 801a3a0:	3710      	adds	r7, #16
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	bd80      	pop	{r7, pc}
 801a3a6:	bf00      	nop
 801a3a8:	40020407 	.word	0x40020407
 801a3ac:	bffdfff8 	.word	0xbffdfff8
 801a3b0:	cccccccd 	.word	0xcccccccd
 801a3b4:	40020000 	.word	0x40020000
 801a3b8:	bffdfbf8 	.word	0xbffdfbf8
 801a3bc:	40020400 	.word	0x40020400

0801a3c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b086      	sub	sp, #24
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	60f8      	str	r0, [r7, #12]
 801a3c8:	60b9      	str	r1, [r7, #8]
 801a3ca:	607a      	str	r2, [r7, #4]
 801a3cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a3d8:	2b01      	cmp	r3, #1
 801a3da:	d101      	bne.n	801a3e0 <HAL_DMA_Start_IT+0x20>
 801a3dc:	2302      	movs	r3, #2
 801a3de:	e066      	b.n	801a4ae <HAL_DMA_Start_IT+0xee>
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	2201      	movs	r2, #1
 801a3e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a3ee:	b2db      	uxtb	r3, r3
 801a3f0:	2b01      	cmp	r3, #1
 801a3f2:	d155      	bne.n	801a4a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	2202      	movs	r2, #2
 801a3f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	2200      	movs	r2, #0
 801a400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	681a      	ldr	r2, [r3, #0]
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	f022 0201 	bic.w	r2, r2, #1
 801a410:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801a412:	683b      	ldr	r3, [r7, #0]
 801a414:	687a      	ldr	r2, [r7, #4]
 801a416:	68b9      	ldr	r1, [r7, #8]
 801a418:	68f8      	ldr	r0, [r7, #12]
 801a41a:	f000 f954 	bl	801a6c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a422:	2b00      	cmp	r3, #0
 801a424:	d008      	beq.n	801a438 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	681a      	ldr	r2, [r3, #0]
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	f042 020e 	orr.w	r2, r2, #14
 801a434:	601a      	str	r2, [r3, #0]
 801a436:	e00f      	b.n	801a458 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	681a      	ldr	r2, [r3, #0]
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	f022 0204 	bic.w	r2, r2, #4
 801a446:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	681a      	ldr	r2, [r3, #0]
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	f042 020a 	orr.w	r2, r2, #10
 801a456:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a462:	2b00      	cmp	r3, #0
 801a464:	d007      	beq.n	801a476 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a46a:	681a      	ldr	r2, [r3, #0]
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a474:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d007      	beq.n	801a48e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a482:	681a      	ldr	r2, [r3, #0]
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a48c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	681a      	ldr	r2, [r3, #0]
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	f042 0201 	orr.w	r2, r2, #1
 801a49c:	601a      	str	r2, [r3, #0]
 801a49e:	e005      	b.n	801a4ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801a4a8:	2302      	movs	r3, #2
 801a4aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801a4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	3718      	adds	r7, #24
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}

0801a4b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a4b6:	b480      	push	{r7}
 801a4b8:	b085      	sub	sp, #20
 801a4ba:	af00      	add	r7, sp, #0
 801a4bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a4be:	2300      	movs	r3, #0
 801a4c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a4c8:	b2db      	uxtb	r3, r3
 801a4ca:	2b02      	cmp	r3, #2
 801a4cc:	d005      	beq.n	801a4da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	2204      	movs	r2, #4
 801a4d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	73fb      	strb	r3, [r7, #15]
 801a4d8:	e037      	b.n	801a54a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	681a      	ldr	r2, [r3, #0]
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	f022 020e 	bic.w	r2, r2, #14
 801a4e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a4ee:	681a      	ldr	r2, [r3, #0]
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a4f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a4f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	681a      	ldr	r2, [r3, #0]
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	f022 0201 	bic.w	r2, r2, #1
 801a508:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a50e:	f003 021f 	and.w	r2, r3, #31
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a516:	2101      	movs	r1, #1
 801a518:	fa01 f202 	lsl.w	r2, r1, r2
 801a51c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a522:	687a      	ldr	r2, [r7, #4]
 801a524:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a526:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d00c      	beq.n	801a54a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a534:	681a      	ldr	r2, [r3, #0]
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a53a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a53e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a544:	687a      	ldr	r2, [r7, #4]
 801a546:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a548:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	2201      	movs	r2, #1
 801a54e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	2200      	movs	r2, #0
 801a556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801a55a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3714      	adds	r7, #20
 801a560:	46bd      	mov	sp, r7
 801a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a566:	4770      	bx	lr

0801a568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b084      	sub	sp, #16
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a584:	f003 031f 	and.w	r3, r3, #31
 801a588:	2204      	movs	r2, #4
 801a58a:	409a      	lsls	r2, r3
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	4013      	ands	r3, r2
 801a590:	2b00      	cmp	r3, #0
 801a592:	d026      	beq.n	801a5e2 <HAL_DMA_IRQHandler+0x7a>
 801a594:	68bb      	ldr	r3, [r7, #8]
 801a596:	f003 0304 	and.w	r3, r3, #4
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d021      	beq.n	801a5e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	f003 0320 	and.w	r3, r3, #32
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d107      	bne.n	801a5bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	681a      	ldr	r2, [r3, #0]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	f022 0204 	bic.w	r2, r2, #4
 801a5ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5c0:	f003 021f 	and.w	r2, r3, #31
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5c8:	2104      	movs	r1, #4
 801a5ca:	fa01 f202 	lsl.w	r2, r1, r2
 801a5ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d071      	beq.n	801a6bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5dc:	6878      	ldr	r0, [r7, #4]
 801a5de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801a5e0:	e06c      	b.n	801a6bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5e6:	f003 031f 	and.w	r3, r3, #31
 801a5ea:	2202      	movs	r2, #2
 801a5ec:	409a      	lsls	r2, r3
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	4013      	ands	r3, r2
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d02e      	beq.n	801a654 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801a5f6:	68bb      	ldr	r3, [r7, #8]
 801a5f8:	f003 0302 	and.w	r3, r3, #2
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d029      	beq.n	801a654 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	f003 0320 	and.w	r3, r3, #32
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d10b      	bne.n	801a626 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	681a      	ldr	r2, [r3, #0]
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	f022 020a 	bic.w	r2, r2, #10
 801a61c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	2201      	movs	r2, #1
 801a622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a62a:	f003 021f 	and.w	r2, r3, #31
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a632:	2102      	movs	r1, #2
 801a634:	fa01 f202 	lsl.w	r2, r1, r2
 801a638:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	2200      	movs	r2, #0
 801a63e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a646:	2b00      	cmp	r3, #0
 801a648:	d038      	beq.n	801a6bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a64e:	6878      	ldr	r0, [r7, #4]
 801a650:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801a652:	e033      	b.n	801a6bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a658:	f003 031f 	and.w	r3, r3, #31
 801a65c:	2208      	movs	r2, #8
 801a65e:	409a      	lsls	r2, r3
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	4013      	ands	r3, r2
 801a664:	2b00      	cmp	r3, #0
 801a666:	d02a      	beq.n	801a6be <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801a668:	68bb      	ldr	r3, [r7, #8]
 801a66a:	f003 0308 	and.w	r3, r3, #8
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d025      	beq.n	801a6be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	681a      	ldr	r2, [r3, #0]
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	f022 020e 	bic.w	r2, r2, #14
 801a680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a686:	f003 021f 	and.w	r2, r3, #31
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a68e:	2101      	movs	r1, #1
 801a690:	fa01 f202 	lsl.w	r2, r1, r2
 801a694:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	2201      	movs	r2, #1
 801a69a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	2201      	movs	r2, #1
 801a6a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d004      	beq.n	801a6be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6b8:	6878      	ldr	r0, [r7, #4]
 801a6ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801a6bc:	bf00      	nop
 801a6be:	bf00      	nop
}
 801a6c0:	3710      	adds	r7, #16
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}

0801a6c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801a6c6:	b480      	push	{r7}
 801a6c8:	b085      	sub	sp, #20
 801a6ca:	af00      	add	r7, sp, #0
 801a6cc:	60f8      	str	r0, [r7, #12]
 801a6ce:	60b9      	str	r1, [r7, #8]
 801a6d0:	607a      	str	r2, [r7, #4]
 801a6d2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a6d8:	68fa      	ldr	r2, [r7, #12]
 801a6da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a6dc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d004      	beq.n	801a6f0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a6ea:	68fa      	ldr	r2, [r7, #12]
 801a6ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a6ee:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6f4:	f003 021f 	and.w	r2, r3, #31
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6fc:	2101      	movs	r1, #1
 801a6fe:	fa01 f202 	lsl.w	r2, r1, r2
 801a702:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	683a      	ldr	r2, [r7, #0]
 801a70a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	689b      	ldr	r3, [r3, #8]
 801a710:	2b10      	cmp	r3, #16
 801a712:	d108      	bne.n	801a726 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	687a      	ldr	r2, [r7, #4]
 801a71a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	68ba      	ldr	r2, [r7, #8]
 801a722:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801a724:	e007      	b.n	801a736 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	68ba      	ldr	r2, [r7, #8]
 801a72c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	687a      	ldr	r2, [r7, #4]
 801a734:	60da      	str	r2, [r3, #12]
}
 801a736:	bf00      	nop
 801a738:	3714      	adds	r7, #20
 801a73a:	46bd      	mov	sp, r7
 801a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a740:	4770      	bx	lr
	...

0801a744 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a744:	b480      	push	{r7}
 801a746:	b087      	sub	sp, #28
 801a748:	af00      	add	r7, sp, #0
 801a74a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	461a      	mov	r2, r3
 801a752:	4b16      	ldr	r3, [pc, #88]	; (801a7ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801a754:	429a      	cmp	r2, r3
 801a756:	d802      	bhi.n	801a75e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801a758:	4b15      	ldr	r3, [pc, #84]	; (801a7b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801a75a:	617b      	str	r3, [r7, #20]
 801a75c:	e001      	b.n	801a762 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801a75e:	4b15      	ldr	r3, [pc, #84]	; (801a7b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801a760:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801a762:	697b      	ldr	r3, [r7, #20]
 801a764:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	3b08      	subs	r3, #8
 801a76e:	4a12      	ldr	r2, [pc, #72]	; (801a7b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801a770:	fba2 2303 	umull	r2, r3, r2, r3
 801a774:	091b      	lsrs	r3, r3, #4
 801a776:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a77c:	089b      	lsrs	r3, r3, #2
 801a77e:	009a      	lsls	r2, r3, #2
 801a780:	693b      	ldr	r3, [r7, #16]
 801a782:	4413      	add	r3, r2
 801a784:	461a      	mov	r2, r3
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	4a0b      	ldr	r2, [pc, #44]	; (801a7bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801a78e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	f003 031f 	and.w	r3, r3, #31
 801a796:	2201      	movs	r2, #1
 801a798:	409a      	lsls	r2, r3
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801a79e:	bf00      	nop
 801a7a0:	371c      	adds	r7, #28
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a8:	4770      	bx	lr
 801a7aa:	bf00      	nop
 801a7ac:	40020407 	.word	0x40020407
 801a7b0:	40020800 	.word	0x40020800
 801a7b4:	40020820 	.word	0x40020820
 801a7b8:	cccccccd 	.word	0xcccccccd
 801a7bc:	40020880 	.word	0x40020880

0801a7c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a7c0:	b480      	push	{r7}
 801a7c2:	b085      	sub	sp, #20
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	685b      	ldr	r3, [r3, #4]
 801a7cc:	b2db      	uxtb	r3, r3
 801a7ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801a7d0:	68fa      	ldr	r2, [r7, #12]
 801a7d2:	4b0b      	ldr	r3, [pc, #44]	; (801a800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801a7d4:	4413      	add	r3, r2
 801a7d6:	009b      	lsls	r3, r3, #2
 801a7d8:	461a      	mov	r2, r3
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	4a08      	ldr	r2, [pc, #32]	; (801a804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801a7e2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	3b01      	subs	r3, #1
 801a7e8:	f003 031f 	and.w	r3, r3, #31
 801a7ec:	2201      	movs	r2, #1
 801a7ee:	409a      	lsls	r2, r3
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801a7f4:	bf00      	nop
 801a7f6:	3714      	adds	r7, #20
 801a7f8:	46bd      	mov	sp, r7
 801a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7fe:	4770      	bx	lr
 801a800:	1000823f 	.word	0x1000823f
 801a804:	40020940 	.word	0x40020940

0801a808 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801a808:	b580      	push	{r7, lr}
 801a80a:	b086      	sub	sp, #24
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	60f8      	str	r0, [r7, #12]
 801a810:	60b9      	str	r1, [r7, #8]
 801a812:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801a816:	2300      	movs	r3, #0
 801a818:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a81a:	4b24      	ldr	r3, [pc, #144]	; (801a8ac <HAL_FLASH_Program+0xa4>)
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	2b01      	cmp	r3, #1
 801a820:	d101      	bne.n	801a826 <HAL_FLASH_Program+0x1e>
 801a822:	2302      	movs	r3, #2
 801a824:	e03e      	b.n	801a8a4 <HAL_FLASH_Program+0x9c>
 801a826:	4b21      	ldr	r3, [pc, #132]	; (801a8ac <HAL_FLASH_Program+0xa4>)
 801a828:	2201      	movs	r2, #1
 801a82a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a82c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a830:	f000 f87c 	bl	801a92c <FLASH_WaitForLastOperation>
 801a834:	4603      	mov	r3, r0
 801a836:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801a838:	7dfb      	ldrb	r3, [r7, #23]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d12e      	bne.n	801a89c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a83e:	4b1b      	ldr	r3, [pc, #108]	; (801a8ac <HAL_FLASH_Program+0xa4>)
 801a840:	2200      	movs	r2, #0
 801a842:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d107      	bne.n	801a85a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801a84a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a84e:	68b8      	ldr	r0, [r7, #8]
 801a850:	f000 f8c0 	bl	801a9d4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801a854:	2301      	movs	r3, #1
 801a856:	613b      	str	r3, [r7, #16]
 801a858:	e010      	b.n	801a87c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	2b01      	cmp	r3, #1
 801a85e:	d002      	beq.n	801a866 <HAL_FLASH_Program+0x5e>
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	2b02      	cmp	r3, #2
 801a864:	d10a      	bne.n	801a87c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801a866:	683b      	ldr	r3, [r7, #0]
 801a868:	4619      	mov	r1, r3
 801a86a:	68b8      	ldr	r0, [r7, #8]
 801a86c:	f000 f8d8 	bl	801aa20 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	2b02      	cmp	r3, #2
 801a874:	d102      	bne.n	801a87c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801a876:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a87a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a87c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a880:	f000 f854 	bl	801a92c <FLASH_WaitForLastOperation>
 801a884:	4603      	mov	r3, r0
 801a886:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801a888:	693b      	ldr	r3, [r7, #16]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d006      	beq.n	801a89c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801a88e:	4b08      	ldr	r3, [pc, #32]	; (801a8b0 <HAL_FLASH_Program+0xa8>)
 801a890:	695a      	ldr	r2, [r3, #20]
 801a892:	693b      	ldr	r3, [r7, #16]
 801a894:	43db      	mvns	r3, r3
 801a896:	4906      	ldr	r1, [pc, #24]	; (801a8b0 <HAL_FLASH_Program+0xa8>)
 801a898:	4013      	ands	r3, r2
 801a89a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a89c:	4b03      	ldr	r3, [pc, #12]	; (801a8ac <HAL_FLASH_Program+0xa4>)
 801a89e:	2200      	movs	r2, #0
 801a8a0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801a8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a8a4:	4618      	mov	r0, r3
 801a8a6:	3718      	adds	r7, #24
 801a8a8:	46bd      	mov	sp, r7
 801a8aa:	bd80      	pop	{r7, pc}
 801a8ac:	2000000c 	.word	0x2000000c
 801a8b0:	40022000 	.word	0x40022000

0801a8b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801a8b4:	b480      	push	{r7}
 801a8b6:	b083      	sub	sp, #12
 801a8b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a8be:	4b0b      	ldr	r3, [pc, #44]	; (801a8ec <HAL_FLASH_Unlock+0x38>)
 801a8c0:	695b      	ldr	r3, [r3, #20]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	da0b      	bge.n	801a8de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801a8c6:	4b09      	ldr	r3, [pc, #36]	; (801a8ec <HAL_FLASH_Unlock+0x38>)
 801a8c8:	4a09      	ldr	r2, [pc, #36]	; (801a8f0 <HAL_FLASH_Unlock+0x3c>)
 801a8ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801a8cc:	4b07      	ldr	r3, [pc, #28]	; (801a8ec <HAL_FLASH_Unlock+0x38>)
 801a8ce:	4a09      	ldr	r2, [pc, #36]	; (801a8f4 <HAL_FLASH_Unlock+0x40>)
 801a8d0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a8d2:	4b06      	ldr	r3, [pc, #24]	; (801a8ec <HAL_FLASH_Unlock+0x38>)
 801a8d4:	695b      	ldr	r3, [r3, #20]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	da01      	bge.n	801a8de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801a8da:	2301      	movs	r3, #1
 801a8dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801a8de:	79fb      	ldrb	r3, [r7, #7]
}
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	370c      	adds	r7, #12
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ea:	4770      	bx	lr
 801a8ec:	40022000 	.word	0x40022000
 801a8f0:	45670123 	.word	0x45670123
 801a8f4:	cdef89ab 	.word	0xcdef89ab

0801a8f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801a8f8:	b480      	push	{r7}
 801a8fa:	b083      	sub	sp, #12
 801a8fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801a8fe:	2301      	movs	r3, #1
 801a900:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801a902:	4b09      	ldr	r3, [pc, #36]	; (801a928 <HAL_FLASH_Lock+0x30>)
 801a904:	695b      	ldr	r3, [r3, #20]
 801a906:	4a08      	ldr	r2, [pc, #32]	; (801a928 <HAL_FLASH_Lock+0x30>)
 801a908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801a90c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a90e:	4b06      	ldr	r3, [pc, #24]	; (801a928 <HAL_FLASH_Lock+0x30>)
 801a910:	695b      	ldr	r3, [r3, #20]
 801a912:	2b00      	cmp	r3, #0
 801a914:	da01      	bge.n	801a91a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801a916:	2300      	movs	r3, #0
 801a918:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801a91a:	79fb      	ldrb	r3, [r7, #7]
}
 801a91c:	4618      	mov	r0, r3
 801a91e:	370c      	adds	r7, #12
 801a920:	46bd      	mov	sp, r7
 801a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a926:	4770      	bx	lr
 801a928:	40022000 	.word	0x40022000

0801a92c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	b084      	sub	sp, #16
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801a934:	f7fd f98a 	bl	8017c4c <HAL_GetTick>
 801a938:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a93a:	e009      	b.n	801a950 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801a93c:	f7fd f986 	bl	8017c4c <HAL_GetTick>
 801a940:	4602      	mov	r2, r0
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	1ad3      	subs	r3, r2, r3
 801a946:	687a      	ldr	r2, [r7, #4]
 801a948:	429a      	cmp	r2, r3
 801a94a:	d201      	bcs.n	801a950 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801a94c:	2303      	movs	r3, #3
 801a94e:	e038      	b.n	801a9c2 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a950:	4b1e      	ldr	r3, [pc, #120]	; (801a9cc <FLASH_WaitForLastOperation+0xa0>)
 801a952:	691b      	ldr	r3, [r3, #16]
 801a954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a95c:	d0ee      	beq.n	801a93c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801a95e:	4b1b      	ldr	r3, [pc, #108]	; (801a9cc <FLASH_WaitForLastOperation+0xa0>)
 801a960:	691a      	ldr	r2, [r3, #16]
 801a962:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801a966:	4013      	ands	r3, r2
 801a968:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801a96a:	68bb      	ldr	r3, [r7, #8]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d01e      	beq.n	801a9ae <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801a970:	4b17      	ldr	r3, [pc, #92]	; (801a9d0 <FLASH_WaitForLastOperation+0xa4>)
 801a972:	685a      	ldr	r2, [r3, #4]
 801a974:	68bb      	ldr	r3, [r7, #8]
 801a976:	4313      	orrs	r3, r2
 801a978:	4a15      	ldr	r2, [pc, #84]	; (801a9d0 <FLASH_WaitForLastOperation+0xa4>)
 801a97a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801a97c:	68bb      	ldr	r3, [r7, #8]
 801a97e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a982:	2b00      	cmp	r3, #0
 801a984:	d007      	beq.n	801a996 <FLASH_WaitForLastOperation+0x6a>
 801a986:	4b11      	ldr	r3, [pc, #68]	; (801a9cc <FLASH_WaitForLastOperation+0xa0>)
 801a988:	699a      	ldr	r2, [r3, #24]
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a990:	490e      	ldr	r1, [pc, #56]	; (801a9cc <FLASH_WaitForLastOperation+0xa0>)
 801a992:	4313      	orrs	r3, r2
 801a994:	618b      	str	r3, [r1, #24]
 801a996:	68bb      	ldr	r3, [r7, #8]
 801a998:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d004      	beq.n	801a9aa <FLASH_WaitForLastOperation+0x7e>
 801a9a0:	4a0a      	ldr	r2, [pc, #40]	; (801a9cc <FLASH_WaitForLastOperation+0xa0>)
 801a9a2:	68bb      	ldr	r3, [r7, #8]
 801a9a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a9a8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801a9aa:	2301      	movs	r3, #1
 801a9ac:	e009      	b.n	801a9c2 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801a9ae:	4b07      	ldr	r3, [pc, #28]	; (801a9cc <FLASH_WaitForLastOperation+0xa0>)
 801a9b0:	691b      	ldr	r3, [r3, #16]
 801a9b2:	f003 0301 	and.w	r3, r3, #1
 801a9b6:	2b01      	cmp	r3, #1
 801a9b8:	d102      	bne.n	801a9c0 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801a9ba:	4b04      	ldr	r3, [pc, #16]	; (801a9cc <FLASH_WaitForLastOperation+0xa0>)
 801a9bc:	2201      	movs	r2, #1
 801a9be:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801a9c0:	2300      	movs	r3, #0
}
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	3710      	adds	r7, #16
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	bd80      	pop	{r7, pc}
 801a9ca:	bf00      	nop
 801a9cc:	40022000 	.word	0x40022000
 801a9d0:	2000000c 	.word	0x2000000c

0801a9d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801a9d4:	b480      	push	{r7}
 801a9d6:	b085      	sub	sp, #20
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	60f8      	str	r0, [r7, #12]
 801a9dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801a9e0:	4b0e      	ldr	r3, [pc, #56]	; (801aa1c <FLASH_Program_DoubleWord+0x48>)
 801a9e2:	695b      	ldr	r3, [r3, #20]
 801a9e4:	4a0d      	ldr	r2, [pc, #52]	; (801aa1c <FLASH_Program_DoubleWord+0x48>)
 801a9e6:	f043 0301 	orr.w	r3, r3, #1
 801a9ea:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	683a      	ldr	r2, [r7, #0]
 801a9f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801a9f2:	f3bf 8f6f 	isb	sy
}
 801a9f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801a9f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a9fc:	f04f 0200 	mov.w	r2, #0
 801aa00:	f04f 0300 	mov.w	r3, #0
 801aa04:	000a      	movs	r2, r1
 801aa06:	2300      	movs	r3, #0
 801aa08:	68f9      	ldr	r1, [r7, #12]
 801aa0a:	3104      	adds	r1, #4
 801aa0c:	4613      	mov	r3, r2
 801aa0e:	600b      	str	r3, [r1, #0]
}
 801aa10:	bf00      	nop
 801aa12:	3714      	adds	r7, #20
 801aa14:	46bd      	mov	sp, r7
 801aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1a:	4770      	bx	lr
 801aa1c:	40022000 	.word	0x40022000

0801aa20 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801aa20:	b480      	push	{r7}
 801aa22:	b089      	sub	sp, #36	; 0x24
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
 801aa28:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801aa2a:	2340      	movs	r3, #64	; 0x40
 801aa2c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801aa36:	4b14      	ldr	r3, [pc, #80]	; (801aa88 <FLASH_Program_Fast+0x68>)
 801aa38:	695b      	ldr	r3, [r3, #20]
 801aa3a:	4a13      	ldr	r2, [pc, #76]	; (801aa88 <FLASH_Program_Fast+0x68>)
 801aa3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801aa40:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa42:	f3ef 8310 	mrs	r3, PRIMASK
 801aa46:	60fb      	str	r3, [r7, #12]
  return(result);
 801aa48:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801aa4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa4c:	b672      	cpsid	i
}
 801aa4e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801aa50:	697b      	ldr	r3, [r7, #20]
 801aa52:	681a      	ldr	r2, [r3, #0]
 801aa54:	69bb      	ldr	r3, [r7, #24]
 801aa56:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801aa58:	69bb      	ldr	r3, [r7, #24]
 801aa5a:	3304      	adds	r3, #4
 801aa5c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801aa5e:	697b      	ldr	r3, [r7, #20]
 801aa60:	3304      	adds	r3, #4
 801aa62:	617b      	str	r3, [r7, #20]
    row_index--;
 801aa64:	7ffb      	ldrb	r3, [r7, #31]
 801aa66:	3b01      	subs	r3, #1
 801aa68:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801aa6a:	7ffb      	ldrb	r3, [r7, #31]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d1ef      	bne.n	801aa50 <FLASH_Program_Fast+0x30>
 801aa70:	693b      	ldr	r3, [r7, #16]
 801aa72:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa74:	68bb      	ldr	r3, [r7, #8]
 801aa76:	f383 8810 	msr	PRIMASK, r3
}
 801aa7a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801aa7c:	bf00      	nop
 801aa7e:	3724      	adds	r7, #36	; 0x24
 801aa80:	46bd      	mov	sp, r7
 801aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa86:	4770      	bx	lr
 801aa88:	40022000 	.word	0x40022000

0801aa8c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b084      	sub	sp, #16
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
 801aa94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801aa96:	4b48      	ldr	r3, [pc, #288]	; (801abb8 <HAL_FLASHEx_Erase+0x12c>)
 801aa98:	781b      	ldrb	r3, [r3, #0]
 801aa9a:	2b01      	cmp	r3, #1
 801aa9c:	d101      	bne.n	801aaa2 <HAL_FLASHEx_Erase+0x16>
 801aa9e:	2302      	movs	r3, #2
 801aaa0:	e085      	b.n	801abae <HAL_FLASHEx_Erase+0x122>
 801aaa2:	4b45      	ldr	r3, [pc, #276]	; (801abb8 <HAL_FLASHEx_Erase+0x12c>)
 801aaa4:	2201      	movs	r2, #1
 801aaa6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801aaa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801aaac:	f7ff ff3e 	bl	801a92c <FLASH_WaitForLastOperation>
 801aab0:	4603      	mov	r3, r0
 801aab2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801aab4:	7bfb      	ldrb	r3, [r7, #15]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d175      	bne.n	801aba6 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801aaba:	4b3f      	ldr	r3, [pc, #252]	; (801abb8 <HAL_FLASHEx_Erase+0x12c>)
 801aabc:	2200      	movs	r2, #0
 801aabe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801aac0:	4b3e      	ldr	r3, [pc, #248]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d013      	beq.n	801aaf4 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801aacc:	4b3b      	ldr	r3, [pc, #236]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d009      	beq.n	801aaec <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801aad8:	4b38      	ldr	r3, [pc, #224]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	4a37      	ldr	r2, [pc, #220]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801aade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801aae2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801aae4:	4b34      	ldr	r3, [pc, #208]	; (801abb8 <HAL_FLASHEx_Erase+0x12c>)
 801aae6:	2203      	movs	r2, #3
 801aae8:	771a      	strb	r2, [r3, #28]
 801aaea:	e016      	b.n	801ab1a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801aaec:	4b32      	ldr	r3, [pc, #200]	; (801abb8 <HAL_FLASHEx_Erase+0x12c>)
 801aaee:	2201      	movs	r2, #1
 801aaf0:	771a      	strb	r2, [r3, #28]
 801aaf2:	e012      	b.n	801ab1a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801aaf4:	4b31      	ldr	r3, [pc, #196]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d009      	beq.n	801ab14 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801ab00:	4b2e      	ldr	r3, [pc, #184]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4a2d      	ldr	r2, [pc, #180]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801ab06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ab0a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801ab0c:	4b2a      	ldr	r3, [pc, #168]	; (801abb8 <HAL_FLASHEx_Erase+0x12c>)
 801ab0e:	2202      	movs	r2, #2
 801ab10:	771a      	strb	r2, [r3, #28]
 801ab12:	e002      	b.n	801ab1a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801ab14:	4b28      	ldr	r3, [pc, #160]	; (801abb8 <HAL_FLASHEx_Erase+0x12c>)
 801ab16:	2200      	movs	r2, #0
 801ab18:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	2b01      	cmp	r3, #1
 801ab20:	d111      	bne.n	801ab46 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	685b      	ldr	r3, [r3, #4]
 801ab26:	4618      	mov	r0, r3
 801ab28:	f000 f84a 	bl	801abc0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ab2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ab30:	f7ff fefc 	bl	801a92c <FLASH_WaitForLastOperation>
 801ab34:	4603      	mov	r3, r0
 801ab36:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801ab38:	4b20      	ldr	r3, [pc, #128]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801ab3a:	695b      	ldr	r3, [r3, #20]
 801ab3c:	4a1f      	ldr	r2, [pc, #124]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801ab3e:	f023 0304 	bic.w	r3, r3, #4
 801ab42:	6153      	str	r3, [r2, #20]
 801ab44:	e02d      	b.n	801aba2 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	f04f 32ff 	mov.w	r2, #4294967295
 801ab4c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	689b      	ldr	r3, [r3, #8]
 801ab52:	60bb      	str	r3, [r7, #8]
 801ab54:	e01d      	b.n	801ab92 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	685b      	ldr	r3, [r3, #4]
 801ab5a:	4619      	mov	r1, r3
 801ab5c:	68b8      	ldr	r0, [r7, #8]
 801ab5e:	f000 f84d 	bl	801abfc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ab62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ab66:	f7ff fee1 	bl	801a92c <FLASH_WaitForLastOperation>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801ab6e:	4b13      	ldr	r3, [pc, #76]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801ab70:	695b      	ldr	r3, [r3, #20]
 801ab72:	4a12      	ldr	r2, [pc, #72]	; (801abbc <HAL_FLASHEx_Erase+0x130>)
 801ab74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ab78:	f023 0302 	bic.w	r3, r3, #2
 801ab7c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801ab7e:	7bfb      	ldrb	r3, [r7, #15]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d003      	beq.n	801ab8c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801ab84:	683b      	ldr	r3, [r7, #0]
 801ab86:	68ba      	ldr	r2, [r7, #8]
 801ab88:	601a      	str	r2, [r3, #0]
          break;
 801ab8a:	e00a      	b.n	801aba2 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801ab8c:	68bb      	ldr	r3, [r7, #8]
 801ab8e:	3301      	adds	r3, #1
 801ab90:	60bb      	str	r3, [r7, #8]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	689a      	ldr	r2, [r3, #8]
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	68db      	ldr	r3, [r3, #12]
 801ab9a:	4413      	add	r3, r2
 801ab9c:	68ba      	ldr	r2, [r7, #8]
 801ab9e:	429a      	cmp	r2, r3
 801aba0:	d3d9      	bcc.n	801ab56 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801aba2:	f000 f84f 	bl	801ac44 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801aba6:	4b04      	ldr	r3, [pc, #16]	; (801abb8 <HAL_FLASHEx_Erase+0x12c>)
 801aba8:	2200      	movs	r2, #0
 801abaa:	701a      	strb	r2, [r3, #0]

  return status;
 801abac:	7bfb      	ldrb	r3, [r7, #15]
}
 801abae:	4618      	mov	r0, r3
 801abb0:	3710      	adds	r7, #16
 801abb2:	46bd      	mov	sp, r7
 801abb4:	bd80      	pop	{r7, pc}
 801abb6:	bf00      	nop
 801abb8:	2000000c 	.word	0x2000000c
 801abbc:	40022000 	.word	0x40022000

0801abc0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801abc0:	b480      	push	{r7}
 801abc2:	b083      	sub	sp, #12
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	f003 0301 	and.w	r3, r3, #1
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d005      	beq.n	801abde <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801abd2:	4b09      	ldr	r3, [pc, #36]	; (801abf8 <FLASH_MassErase+0x38>)
 801abd4:	695b      	ldr	r3, [r3, #20]
 801abd6:	4a08      	ldr	r2, [pc, #32]	; (801abf8 <FLASH_MassErase+0x38>)
 801abd8:	f043 0304 	orr.w	r3, r3, #4
 801abdc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801abde:	4b06      	ldr	r3, [pc, #24]	; (801abf8 <FLASH_MassErase+0x38>)
 801abe0:	695b      	ldr	r3, [r3, #20]
 801abe2:	4a05      	ldr	r2, [pc, #20]	; (801abf8 <FLASH_MassErase+0x38>)
 801abe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801abe8:	6153      	str	r3, [r2, #20]
}
 801abea:	bf00      	nop
 801abec:	370c      	adds	r7, #12
 801abee:	46bd      	mov	sp, r7
 801abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf4:	4770      	bx	lr
 801abf6:	bf00      	nop
 801abf8:	40022000 	.word	0x40022000

0801abfc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801abfc:	b480      	push	{r7}
 801abfe:	b083      	sub	sp, #12
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
 801ac04:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801ac06:	4b0e      	ldr	r3, [pc, #56]	; (801ac40 <FLASH_PageErase+0x44>)
 801ac08:	695b      	ldr	r3, [r3, #20]
 801ac0a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	00db      	lsls	r3, r3, #3
 801ac12:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801ac16:	490a      	ldr	r1, [pc, #40]	; (801ac40 <FLASH_PageErase+0x44>)
 801ac18:	4313      	orrs	r3, r2
 801ac1a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801ac1c:	4b08      	ldr	r3, [pc, #32]	; (801ac40 <FLASH_PageErase+0x44>)
 801ac1e:	695b      	ldr	r3, [r3, #20]
 801ac20:	4a07      	ldr	r2, [pc, #28]	; (801ac40 <FLASH_PageErase+0x44>)
 801ac22:	f043 0302 	orr.w	r3, r3, #2
 801ac26:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801ac28:	4b05      	ldr	r3, [pc, #20]	; (801ac40 <FLASH_PageErase+0x44>)
 801ac2a:	695b      	ldr	r3, [r3, #20]
 801ac2c:	4a04      	ldr	r2, [pc, #16]	; (801ac40 <FLASH_PageErase+0x44>)
 801ac2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ac32:	6153      	str	r3, [r2, #20]
}
 801ac34:	bf00      	nop
 801ac36:	370c      	adds	r7, #12
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac3e:	4770      	bx	lr
 801ac40:	40022000 	.word	0x40022000

0801ac44 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801ac44:	b480      	push	{r7}
 801ac46:	b083      	sub	sp, #12
 801ac48:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801ac4a:	4b21      	ldr	r3, [pc, #132]	; (801acd0 <FLASH_FlushCaches+0x8c>)
 801ac4c:	7f1b      	ldrb	r3, [r3, #28]
 801ac4e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801ac50:	79fb      	ldrb	r3, [r7, #7]
 801ac52:	2b01      	cmp	r3, #1
 801ac54:	d002      	beq.n	801ac5c <FLASH_FlushCaches+0x18>
 801ac56:	79fb      	ldrb	r3, [r7, #7]
 801ac58:	2b03      	cmp	r3, #3
 801ac5a:	d117      	bne.n	801ac8c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801ac5c:	4b1d      	ldr	r3, [pc, #116]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	4a1c      	ldr	r2, [pc, #112]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ac66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801ac68:	4b1a      	ldr	r3, [pc, #104]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	4a19      	ldr	r2, [pc, #100]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ac72:	6013      	str	r3, [r2, #0]
 801ac74:	4b17      	ldr	r3, [pc, #92]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	4a16      	ldr	r2, [pc, #88]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ac7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801ac80:	4b14      	ldr	r3, [pc, #80]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	4a13      	ldr	r2, [pc, #76]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ac8a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801ac8c:	79fb      	ldrb	r3, [r7, #7]
 801ac8e:	2b02      	cmp	r3, #2
 801ac90:	d002      	beq.n	801ac98 <FLASH_FlushCaches+0x54>
 801ac92:	79fb      	ldrb	r3, [r7, #7]
 801ac94:	2b03      	cmp	r3, #3
 801ac96:	d111      	bne.n	801acbc <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801ac98:	4b0e      	ldr	r3, [pc, #56]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	4a0d      	ldr	r2, [pc, #52]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801ac9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801aca2:	6013      	str	r3, [r2, #0]
 801aca4:	4b0b      	ldr	r3, [pc, #44]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	4a0a      	ldr	r2, [pc, #40]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801acaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801acae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801acb0:	4b08      	ldr	r3, [pc, #32]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	4a07      	ldr	r2, [pc, #28]	; (801acd4 <FLASH_FlushCaches+0x90>)
 801acb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801acba:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801acbc:	4b04      	ldr	r3, [pc, #16]	; (801acd0 <FLASH_FlushCaches+0x8c>)
 801acbe:	2200      	movs	r2, #0
 801acc0:	771a      	strb	r2, [r3, #28]
}
 801acc2:	bf00      	nop
 801acc4:	370c      	adds	r7, #12
 801acc6:	46bd      	mov	sp, r7
 801acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801accc:	4770      	bx	lr
 801acce:	bf00      	nop
 801acd0:	2000000c 	.word	0x2000000c
 801acd4:	40022000 	.word	0x40022000

0801acd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801acd8:	b480      	push	{r7}
 801acda:	b087      	sub	sp, #28
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
 801ace0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801ace2:	2300      	movs	r3, #0
 801ace4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801ace6:	e15a      	b.n	801af9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801ace8:	683b      	ldr	r3, [r7, #0]
 801acea:	681a      	ldr	r2, [r3, #0]
 801acec:	2101      	movs	r1, #1
 801acee:	697b      	ldr	r3, [r7, #20]
 801acf0:	fa01 f303 	lsl.w	r3, r1, r3
 801acf4:	4013      	ands	r3, r2
 801acf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	f000 814c 	beq.w	801af98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801ad00:	683b      	ldr	r3, [r7, #0]
 801ad02:	685b      	ldr	r3, [r3, #4]
 801ad04:	f003 0303 	and.w	r3, r3, #3
 801ad08:	2b01      	cmp	r3, #1
 801ad0a:	d005      	beq.n	801ad18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801ad0c:	683b      	ldr	r3, [r7, #0]
 801ad0e:	685b      	ldr	r3, [r3, #4]
 801ad10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801ad14:	2b02      	cmp	r3, #2
 801ad16:	d130      	bne.n	801ad7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	689b      	ldr	r3, [r3, #8]
 801ad1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	005b      	lsls	r3, r3, #1
 801ad22:	2203      	movs	r2, #3
 801ad24:	fa02 f303 	lsl.w	r3, r2, r3
 801ad28:	43db      	mvns	r3, r3
 801ad2a:	693a      	ldr	r2, [r7, #16]
 801ad2c:	4013      	ands	r3, r2
 801ad2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801ad30:	683b      	ldr	r3, [r7, #0]
 801ad32:	68da      	ldr	r2, [r3, #12]
 801ad34:	697b      	ldr	r3, [r7, #20]
 801ad36:	005b      	lsls	r3, r3, #1
 801ad38:	fa02 f303 	lsl.w	r3, r2, r3
 801ad3c:	693a      	ldr	r2, [r7, #16]
 801ad3e:	4313      	orrs	r3, r2
 801ad40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	693a      	ldr	r2, [r7, #16]
 801ad46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	685b      	ldr	r3, [r3, #4]
 801ad4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801ad4e:	2201      	movs	r2, #1
 801ad50:	697b      	ldr	r3, [r7, #20]
 801ad52:	fa02 f303 	lsl.w	r3, r2, r3
 801ad56:	43db      	mvns	r3, r3
 801ad58:	693a      	ldr	r2, [r7, #16]
 801ad5a:	4013      	ands	r3, r2
 801ad5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ad5e:	683b      	ldr	r3, [r7, #0]
 801ad60:	685b      	ldr	r3, [r3, #4]
 801ad62:	091b      	lsrs	r3, r3, #4
 801ad64:	f003 0201 	and.w	r2, r3, #1
 801ad68:	697b      	ldr	r3, [r7, #20]
 801ad6a:	fa02 f303 	lsl.w	r3, r2, r3
 801ad6e:	693a      	ldr	r2, [r7, #16]
 801ad70:	4313      	orrs	r3, r2
 801ad72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	693a      	ldr	r2, [r7, #16]
 801ad78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ad7a:	683b      	ldr	r3, [r7, #0]
 801ad7c:	685b      	ldr	r3, [r3, #4]
 801ad7e:	f003 0303 	and.w	r3, r3, #3
 801ad82:	2b03      	cmp	r3, #3
 801ad84:	d017      	beq.n	801adb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	68db      	ldr	r3, [r3, #12]
 801ad8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801ad8c:	697b      	ldr	r3, [r7, #20]
 801ad8e:	005b      	lsls	r3, r3, #1
 801ad90:	2203      	movs	r2, #3
 801ad92:	fa02 f303 	lsl.w	r3, r2, r3
 801ad96:	43db      	mvns	r3, r3
 801ad98:	693a      	ldr	r2, [r7, #16]
 801ad9a:	4013      	ands	r3, r2
 801ad9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ad9e:	683b      	ldr	r3, [r7, #0]
 801ada0:	689a      	ldr	r2, [r3, #8]
 801ada2:	697b      	ldr	r3, [r7, #20]
 801ada4:	005b      	lsls	r3, r3, #1
 801ada6:	fa02 f303 	lsl.w	r3, r2, r3
 801adaa:	693a      	ldr	r2, [r7, #16]
 801adac:	4313      	orrs	r3, r2
 801adae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	693a      	ldr	r2, [r7, #16]
 801adb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801adb6:	683b      	ldr	r3, [r7, #0]
 801adb8:	685b      	ldr	r3, [r3, #4]
 801adba:	f003 0303 	and.w	r3, r3, #3
 801adbe:	2b02      	cmp	r3, #2
 801adc0:	d123      	bne.n	801ae0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801adc2:	697b      	ldr	r3, [r7, #20]
 801adc4:	08da      	lsrs	r2, r3, #3
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	3208      	adds	r2, #8
 801adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801adce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801add0:	697b      	ldr	r3, [r7, #20]
 801add2:	f003 0307 	and.w	r3, r3, #7
 801add6:	009b      	lsls	r3, r3, #2
 801add8:	220f      	movs	r2, #15
 801adda:	fa02 f303 	lsl.w	r3, r2, r3
 801adde:	43db      	mvns	r3, r3
 801ade0:	693a      	ldr	r2, [r7, #16]
 801ade2:	4013      	ands	r3, r2
 801ade4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801ade6:	683b      	ldr	r3, [r7, #0]
 801ade8:	691a      	ldr	r2, [r3, #16]
 801adea:	697b      	ldr	r3, [r7, #20]
 801adec:	f003 0307 	and.w	r3, r3, #7
 801adf0:	009b      	lsls	r3, r3, #2
 801adf2:	fa02 f303 	lsl.w	r3, r2, r3
 801adf6:	693a      	ldr	r2, [r7, #16]
 801adf8:	4313      	orrs	r3, r2
 801adfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801adfc:	697b      	ldr	r3, [r7, #20]
 801adfe:	08da      	lsrs	r2, r3, #3
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	3208      	adds	r2, #8
 801ae04:	6939      	ldr	r1, [r7, #16]
 801ae06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801ae10:	697b      	ldr	r3, [r7, #20]
 801ae12:	005b      	lsls	r3, r3, #1
 801ae14:	2203      	movs	r2, #3
 801ae16:	fa02 f303 	lsl.w	r3, r2, r3
 801ae1a:	43db      	mvns	r3, r3
 801ae1c:	693a      	ldr	r2, [r7, #16]
 801ae1e:	4013      	ands	r3, r2
 801ae20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	685b      	ldr	r3, [r3, #4]
 801ae26:	f003 0203 	and.w	r2, r3, #3
 801ae2a:	697b      	ldr	r3, [r7, #20]
 801ae2c:	005b      	lsls	r3, r3, #1
 801ae2e:	fa02 f303 	lsl.w	r3, r2, r3
 801ae32:	693a      	ldr	r2, [r7, #16]
 801ae34:	4313      	orrs	r3, r2
 801ae36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	693a      	ldr	r2, [r7, #16]
 801ae3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801ae3e:	683b      	ldr	r3, [r7, #0]
 801ae40:	685b      	ldr	r3, [r3, #4]
 801ae42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	f000 80a6 	beq.w	801af98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ae4c:	4b5b      	ldr	r3, [pc, #364]	; (801afbc <HAL_GPIO_Init+0x2e4>)
 801ae4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ae50:	4a5a      	ldr	r2, [pc, #360]	; (801afbc <HAL_GPIO_Init+0x2e4>)
 801ae52:	f043 0301 	orr.w	r3, r3, #1
 801ae56:	6613      	str	r3, [r2, #96]	; 0x60
 801ae58:	4b58      	ldr	r3, [pc, #352]	; (801afbc <HAL_GPIO_Init+0x2e4>)
 801ae5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ae5c:	f003 0301 	and.w	r3, r3, #1
 801ae60:	60bb      	str	r3, [r7, #8]
 801ae62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ae64:	4a56      	ldr	r2, [pc, #344]	; (801afc0 <HAL_GPIO_Init+0x2e8>)
 801ae66:	697b      	ldr	r3, [r7, #20]
 801ae68:	089b      	lsrs	r3, r3, #2
 801ae6a:	3302      	adds	r3, #2
 801ae6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ae70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ae72:	697b      	ldr	r3, [r7, #20]
 801ae74:	f003 0303 	and.w	r3, r3, #3
 801ae78:	009b      	lsls	r3, r3, #2
 801ae7a:	220f      	movs	r2, #15
 801ae7c:	fa02 f303 	lsl.w	r3, r2, r3
 801ae80:	43db      	mvns	r3, r3
 801ae82:	693a      	ldr	r2, [r7, #16]
 801ae84:	4013      	ands	r3, r2
 801ae86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801ae8e:	d01f      	beq.n	801aed0 <HAL_GPIO_Init+0x1f8>
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	4a4c      	ldr	r2, [pc, #304]	; (801afc4 <HAL_GPIO_Init+0x2ec>)
 801ae94:	4293      	cmp	r3, r2
 801ae96:	d019      	beq.n	801aecc <HAL_GPIO_Init+0x1f4>
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	4a4b      	ldr	r2, [pc, #300]	; (801afc8 <HAL_GPIO_Init+0x2f0>)
 801ae9c:	4293      	cmp	r3, r2
 801ae9e:	d013      	beq.n	801aec8 <HAL_GPIO_Init+0x1f0>
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	4a4a      	ldr	r2, [pc, #296]	; (801afcc <HAL_GPIO_Init+0x2f4>)
 801aea4:	4293      	cmp	r3, r2
 801aea6:	d00d      	beq.n	801aec4 <HAL_GPIO_Init+0x1ec>
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	4a49      	ldr	r2, [pc, #292]	; (801afd0 <HAL_GPIO_Init+0x2f8>)
 801aeac:	4293      	cmp	r3, r2
 801aeae:	d007      	beq.n	801aec0 <HAL_GPIO_Init+0x1e8>
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	4a48      	ldr	r2, [pc, #288]	; (801afd4 <HAL_GPIO_Init+0x2fc>)
 801aeb4:	4293      	cmp	r3, r2
 801aeb6:	d101      	bne.n	801aebc <HAL_GPIO_Init+0x1e4>
 801aeb8:	2305      	movs	r3, #5
 801aeba:	e00a      	b.n	801aed2 <HAL_GPIO_Init+0x1fa>
 801aebc:	2306      	movs	r3, #6
 801aebe:	e008      	b.n	801aed2 <HAL_GPIO_Init+0x1fa>
 801aec0:	2304      	movs	r3, #4
 801aec2:	e006      	b.n	801aed2 <HAL_GPIO_Init+0x1fa>
 801aec4:	2303      	movs	r3, #3
 801aec6:	e004      	b.n	801aed2 <HAL_GPIO_Init+0x1fa>
 801aec8:	2302      	movs	r3, #2
 801aeca:	e002      	b.n	801aed2 <HAL_GPIO_Init+0x1fa>
 801aecc:	2301      	movs	r3, #1
 801aece:	e000      	b.n	801aed2 <HAL_GPIO_Init+0x1fa>
 801aed0:	2300      	movs	r3, #0
 801aed2:	697a      	ldr	r2, [r7, #20]
 801aed4:	f002 0203 	and.w	r2, r2, #3
 801aed8:	0092      	lsls	r2, r2, #2
 801aeda:	4093      	lsls	r3, r2
 801aedc:	693a      	ldr	r2, [r7, #16]
 801aede:	4313      	orrs	r3, r2
 801aee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801aee2:	4937      	ldr	r1, [pc, #220]	; (801afc0 <HAL_GPIO_Init+0x2e8>)
 801aee4:	697b      	ldr	r3, [r7, #20]
 801aee6:	089b      	lsrs	r3, r3, #2
 801aee8:	3302      	adds	r3, #2
 801aeea:	693a      	ldr	r2, [r7, #16]
 801aeec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801aef0:	4b39      	ldr	r3, [pc, #228]	; (801afd8 <HAL_GPIO_Init+0x300>)
 801aef2:	689b      	ldr	r3, [r3, #8]
 801aef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	43db      	mvns	r3, r3
 801aefa:	693a      	ldr	r2, [r7, #16]
 801aefc:	4013      	ands	r3, r2
 801aefe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	685b      	ldr	r3, [r3, #4]
 801af04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d003      	beq.n	801af14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801af0c:	693a      	ldr	r2, [r7, #16]
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	4313      	orrs	r3, r2
 801af12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801af14:	4a30      	ldr	r2, [pc, #192]	; (801afd8 <HAL_GPIO_Init+0x300>)
 801af16:	693b      	ldr	r3, [r7, #16]
 801af18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801af1a:	4b2f      	ldr	r3, [pc, #188]	; (801afd8 <HAL_GPIO_Init+0x300>)
 801af1c:	68db      	ldr	r3, [r3, #12]
 801af1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	43db      	mvns	r3, r3
 801af24:	693a      	ldr	r2, [r7, #16]
 801af26:	4013      	ands	r3, r2
 801af28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801af2a:	683b      	ldr	r3, [r7, #0]
 801af2c:	685b      	ldr	r3, [r3, #4]
 801af2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801af32:	2b00      	cmp	r3, #0
 801af34:	d003      	beq.n	801af3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801af36:	693a      	ldr	r2, [r7, #16]
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	4313      	orrs	r3, r2
 801af3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801af3e:	4a26      	ldr	r2, [pc, #152]	; (801afd8 <HAL_GPIO_Init+0x300>)
 801af40:	693b      	ldr	r3, [r7, #16]
 801af42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801af44:	4b24      	ldr	r3, [pc, #144]	; (801afd8 <HAL_GPIO_Init+0x300>)
 801af46:	685b      	ldr	r3, [r3, #4]
 801af48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	43db      	mvns	r3, r3
 801af4e:	693a      	ldr	r2, [r7, #16]
 801af50:	4013      	ands	r3, r2
 801af52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801af54:	683b      	ldr	r3, [r7, #0]
 801af56:	685b      	ldr	r3, [r3, #4]
 801af58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d003      	beq.n	801af68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801af60:	693a      	ldr	r2, [r7, #16]
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	4313      	orrs	r3, r2
 801af66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801af68:	4a1b      	ldr	r2, [pc, #108]	; (801afd8 <HAL_GPIO_Init+0x300>)
 801af6a:	693b      	ldr	r3, [r7, #16]
 801af6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801af6e:	4b1a      	ldr	r3, [pc, #104]	; (801afd8 <HAL_GPIO_Init+0x300>)
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	43db      	mvns	r3, r3
 801af78:	693a      	ldr	r2, [r7, #16]
 801af7a:	4013      	ands	r3, r2
 801af7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801af7e:	683b      	ldr	r3, [r7, #0]
 801af80:	685b      	ldr	r3, [r3, #4]
 801af82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801af86:	2b00      	cmp	r3, #0
 801af88:	d003      	beq.n	801af92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801af8a:	693a      	ldr	r2, [r7, #16]
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	4313      	orrs	r3, r2
 801af90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801af92:	4a11      	ldr	r2, [pc, #68]	; (801afd8 <HAL_GPIO_Init+0x300>)
 801af94:	693b      	ldr	r3, [r7, #16]
 801af96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	3301      	adds	r3, #1
 801af9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801af9e:	683b      	ldr	r3, [r7, #0]
 801afa0:	681a      	ldr	r2, [r3, #0]
 801afa2:	697b      	ldr	r3, [r7, #20]
 801afa4:	fa22 f303 	lsr.w	r3, r2, r3
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	f47f ae9d 	bne.w	801ace8 <HAL_GPIO_Init+0x10>
  }
}
 801afae:	bf00      	nop
 801afb0:	bf00      	nop
 801afb2:	371c      	adds	r7, #28
 801afb4:	46bd      	mov	sp, r7
 801afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afba:	4770      	bx	lr
 801afbc:	40021000 	.word	0x40021000
 801afc0:	40010000 	.word	0x40010000
 801afc4:	48000400 	.word	0x48000400
 801afc8:	48000800 	.word	0x48000800
 801afcc:	48000c00 	.word	0x48000c00
 801afd0:	48001000 	.word	0x48001000
 801afd4:	48001400 	.word	0x48001400
 801afd8:	40010400 	.word	0x40010400

0801afdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801afdc:	b480      	push	{r7}
 801afde:	b083      	sub	sp, #12
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
 801afe4:	460b      	mov	r3, r1
 801afe6:	807b      	strh	r3, [r7, #2]
 801afe8:	4613      	mov	r3, r2
 801afea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801afec:	787b      	ldrb	r3, [r7, #1]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d003      	beq.n	801affa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801aff2:	887a      	ldrh	r2, [r7, #2]
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801aff8:	e002      	b.n	801b000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801affa:	887a      	ldrh	r2, [r7, #2]
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	629a      	str	r2, [r3, #40]	; 0x28
}
 801b000:	bf00      	nop
 801b002:	370c      	adds	r7, #12
 801b004:	46bd      	mov	sp, r7
 801b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00a:	4770      	bx	lr

0801b00c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801b00c:	b480      	push	{r7}
 801b00e:	b085      	sub	sp, #20
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d141      	bne.n	801b09e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801b01a:	4b4b      	ldr	r3, [pc, #300]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b026:	d131      	bne.n	801b08c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801b028:	4b47      	ldr	r3, [pc, #284]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b02a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b02e:	4a46      	ldr	r2, [pc, #280]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801b038:	4b43      	ldr	r3, [pc, #268]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801b040:	4a41      	ldr	r2, [pc, #260]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801b048:	4b40      	ldr	r3, [pc, #256]	; (801b14c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	2232      	movs	r2, #50	; 0x32
 801b04e:	fb02 f303 	mul.w	r3, r2, r3
 801b052:	4a3f      	ldr	r2, [pc, #252]	; (801b150 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801b054:	fba2 2303 	umull	r2, r3, r2, r3
 801b058:	0c9b      	lsrs	r3, r3, #18
 801b05a:	3301      	adds	r3, #1
 801b05c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801b05e:	e002      	b.n	801b066 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	3b01      	subs	r3, #1
 801b064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801b066:	4b38      	ldr	r3, [pc, #224]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b068:	695b      	ldr	r3, [r3, #20]
 801b06a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b06e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b072:	d102      	bne.n	801b07a <HAL_PWREx_ControlVoltageScaling+0x6e>
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	2b00      	cmp	r3, #0
 801b078:	d1f2      	bne.n	801b060 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801b07a:	4b33      	ldr	r3, [pc, #204]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b07c:	695b      	ldr	r3, [r3, #20]
 801b07e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b086:	d158      	bne.n	801b13a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801b088:	2303      	movs	r3, #3
 801b08a:	e057      	b.n	801b13c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801b08c:	4b2e      	ldr	r3, [pc, #184]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b092:	4a2d      	ldr	r2, [pc, #180]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801b09c:	e04d      	b.n	801b13a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0a4:	d141      	bne.n	801b12a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801b0a6:	4b28      	ldr	r3, [pc, #160]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b0ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b0b2:	d131      	bne.n	801b118 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801b0b4:	4b24      	ldr	r3, [pc, #144]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b0ba:	4a23      	ldr	r2, [pc, #140]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b0bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b0c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801b0c4:	4b20      	ldr	r3, [pc, #128]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801b0cc:	4a1e      	ldr	r2, [pc, #120]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b0ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b0d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801b0d4:	4b1d      	ldr	r3, [pc, #116]	; (801b14c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	2232      	movs	r2, #50	; 0x32
 801b0da:	fb02 f303 	mul.w	r3, r2, r3
 801b0de:	4a1c      	ldr	r2, [pc, #112]	; (801b150 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801b0e0:	fba2 2303 	umull	r2, r3, r2, r3
 801b0e4:	0c9b      	lsrs	r3, r3, #18
 801b0e6:	3301      	adds	r3, #1
 801b0e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801b0ea:	e002      	b.n	801b0f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	3b01      	subs	r3, #1
 801b0f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801b0f2:	4b15      	ldr	r3, [pc, #84]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b0f4:	695b      	ldr	r3, [r3, #20]
 801b0f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b0fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b0fe:	d102      	bne.n	801b106 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d1f2      	bne.n	801b0ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801b106:	4b10      	ldr	r3, [pc, #64]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b108:	695b      	ldr	r3, [r3, #20]
 801b10a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b10e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b112:	d112      	bne.n	801b13a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801b114:	2303      	movs	r3, #3
 801b116:	e011      	b.n	801b13c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801b118:	4b0b      	ldr	r3, [pc, #44]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b11e:	4a0a      	ldr	r2, [pc, #40]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b124:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801b128:	e007      	b.n	801b13a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801b12a:	4b07      	ldr	r3, [pc, #28]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801b132:	4a05      	ldr	r2, [pc, #20]	; (801b148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801b134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b138:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801b13a:	2300      	movs	r3, #0
}
 801b13c:	4618      	mov	r0, r3
 801b13e:	3714      	adds	r7, #20
 801b140:	46bd      	mov	sp, r7
 801b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b146:	4770      	bx	lr
 801b148:	40007000 	.word	0x40007000
 801b14c:	20000000 	.word	0x20000000
 801b150:	431bde83 	.word	0x431bde83

0801b154 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801b154:	b480      	push	{r7}
 801b156:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801b158:	4b05      	ldr	r3, [pc, #20]	; (801b170 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801b15a:	689b      	ldr	r3, [r3, #8]
 801b15c:	4a04      	ldr	r2, [pc, #16]	; (801b170 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801b15e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b162:	6093      	str	r3, [r2, #8]
}
 801b164:	bf00      	nop
 801b166:	46bd      	mov	sp, r7
 801b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b16c:	4770      	bx	lr
 801b16e:	bf00      	nop
 801b170:	40007000 	.word	0x40007000

0801b174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b088      	sub	sp, #32
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d101      	bne.n	801b186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801b182:	2301      	movs	r3, #1
 801b184:	e306      	b.n	801b794 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	f003 0301 	and.w	r3, r3, #1
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d075      	beq.n	801b27e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b192:	4b97      	ldr	r3, [pc, #604]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b194:	689b      	ldr	r3, [r3, #8]
 801b196:	f003 030c 	and.w	r3, r3, #12
 801b19a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b19c:	4b94      	ldr	r3, [pc, #592]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b19e:	68db      	ldr	r3, [r3, #12]
 801b1a0:	f003 0303 	and.w	r3, r3, #3
 801b1a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801b1a6:	69bb      	ldr	r3, [r7, #24]
 801b1a8:	2b0c      	cmp	r3, #12
 801b1aa:	d102      	bne.n	801b1b2 <HAL_RCC_OscConfig+0x3e>
 801b1ac:	697b      	ldr	r3, [r7, #20]
 801b1ae:	2b03      	cmp	r3, #3
 801b1b0:	d002      	beq.n	801b1b8 <HAL_RCC_OscConfig+0x44>
 801b1b2:	69bb      	ldr	r3, [r7, #24]
 801b1b4:	2b08      	cmp	r3, #8
 801b1b6:	d10b      	bne.n	801b1d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b1b8:	4b8d      	ldr	r3, [pc, #564]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d05b      	beq.n	801b27c <HAL_RCC_OscConfig+0x108>
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	685b      	ldr	r3, [r3, #4]
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d157      	bne.n	801b27c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	e2e1      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	685b      	ldr	r3, [r3, #4]
 801b1d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b1d8:	d106      	bne.n	801b1e8 <HAL_RCC_OscConfig+0x74>
 801b1da:	4b85      	ldr	r3, [pc, #532]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	4a84      	ldr	r2, [pc, #528]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b1e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b1e4:	6013      	str	r3, [r2, #0]
 801b1e6:	e01d      	b.n	801b224 <HAL_RCC_OscConfig+0xb0>
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	685b      	ldr	r3, [r3, #4]
 801b1ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b1f0:	d10c      	bne.n	801b20c <HAL_RCC_OscConfig+0x98>
 801b1f2:	4b7f      	ldr	r3, [pc, #508]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	4a7e      	ldr	r2, [pc, #504]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b1f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b1fc:	6013      	str	r3, [r2, #0]
 801b1fe:	4b7c      	ldr	r3, [pc, #496]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	4a7b      	ldr	r2, [pc, #492]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b208:	6013      	str	r3, [r2, #0]
 801b20a:	e00b      	b.n	801b224 <HAL_RCC_OscConfig+0xb0>
 801b20c:	4b78      	ldr	r3, [pc, #480]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	4a77      	ldr	r2, [pc, #476]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b216:	6013      	str	r3, [r2, #0]
 801b218:	4b75      	ldr	r3, [pc, #468]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	4a74      	ldr	r2, [pc, #464]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b21e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	685b      	ldr	r3, [r3, #4]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d013      	beq.n	801b254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b22c:	f7fc fd0e 	bl	8017c4c <HAL_GetTick>
 801b230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b232:	e008      	b.n	801b246 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b234:	f7fc fd0a 	bl	8017c4c <HAL_GetTick>
 801b238:	4602      	mov	r2, r0
 801b23a:	693b      	ldr	r3, [r7, #16]
 801b23c:	1ad3      	subs	r3, r2, r3
 801b23e:	2b64      	cmp	r3, #100	; 0x64
 801b240:	d901      	bls.n	801b246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801b242:	2303      	movs	r3, #3
 801b244:	e2a6      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b246:	4b6a      	ldr	r3, [pc, #424]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d0f0      	beq.n	801b234 <HAL_RCC_OscConfig+0xc0>
 801b252:	e014      	b.n	801b27e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b254:	f7fc fcfa 	bl	8017c4c <HAL_GetTick>
 801b258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801b25a:	e008      	b.n	801b26e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b25c:	f7fc fcf6 	bl	8017c4c <HAL_GetTick>
 801b260:	4602      	mov	r2, r0
 801b262:	693b      	ldr	r3, [r7, #16]
 801b264:	1ad3      	subs	r3, r2, r3
 801b266:	2b64      	cmp	r3, #100	; 0x64
 801b268:	d901      	bls.n	801b26e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b26a:	2303      	movs	r3, #3
 801b26c:	e292      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801b26e:	4b60      	ldr	r3, [pc, #384]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b276:	2b00      	cmp	r3, #0
 801b278:	d1f0      	bne.n	801b25c <HAL_RCC_OscConfig+0xe8>
 801b27a:	e000      	b.n	801b27e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b27c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	f003 0302 	and.w	r3, r3, #2
 801b286:	2b00      	cmp	r3, #0
 801b288:	d075      	beq.n	801b376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b28a:	4b59      	ldr	r3, [pc, #356]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b28c:	689b      	ldr	r3, [r3, #8]
 801b28e:	f003 030c 	and.w	r3, r3, #12
 801b292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b294:	4b56      	ldr	r3, [pc, #344]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b296:	68db      	ldr	r3, [r3, #12]
 801b298:	f003 0303 	and.w	r3, r3, #3
 801b29c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801b29e:	69bb      	ldr	r3, [r7, #24]
 801b2a0:	2b0c      	cmp	r3, #12
 801b2a2:	d102      	bne.n	801b2aa <HAL_RCC_OscConfig+0x136>
 801b2a4:	697b      	ldr	r3, [r7, #20]
 801b2a6:	2b02      	cmp	r3, #2
 801b2a8:	d002      	beq.n	801b2b0 <HAL_RCC_OscConfig+0x13c>
 801b2aa:	69bb      	ldr	r3, [r7, #24]
 801b2ac:	2b04      	cmp	r3, #4
 801b2ae:	d11f      	bne.n	801b2f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b2b0:	4b4f      	ldr	r3, [pc, #316]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d005      	beq.n	801b2c8 <HAL_RCC_OscConfig+0x154>
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	68db      	ldr	r3, [r3, #12]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d101      	bne.n	801b2c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801b2c4:	2301      	movs	r3, #1
 801b2c6:	e265      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b2c8:	4b49      	ldr	r3, [pc, #292]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b2ca:	685b      	ldr	r3, [r3, #4]
 801b2cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	691b      	ldr	r3, [r3, #16]
 801b2d4:	061b      	lsls	r3, r3, #24
 801b2d6:	4946      	ldr	r1, [pc, #280]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b2d8:	4313      	orrs	r3, r2
 801b2da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801b2dc:	4b45      	ldr	r3, [pc, #276]	; (801b3f4 <HAL_RCC_OscConfig+0x280>)
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	f7fc fc67 	bl	8017bb4 <HAL_InitTick>
 801b2e6:	4603      	mov	r3, r0
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d043      	beq.n	801b374 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801b2ec:	2301      	movs	r3, #1
 801b2ee:	e251      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	68db      	ldr	r3, [r3, #12]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d023      	beq.n	801b340 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b2f8:	4b3d      	ldr	r3, [pc, #244]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	4a3c      	ldr	r2, [pc, #240]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b2fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b304:	f7fc fca2 	bl	8017c4c <HAL_GetTick>
 801b308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b30a:	e008      	b.n	801b31e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b30c:	f7fc fc9e 	bl	8017c4c <HAL_GetTick>
 801b310:	4602      	mov	r2, r0
 801b312:	693b      	ldr	r3, [r7, #16]
 801b314:	1ad3      	subs	r3, r2, r3
 801b316:	2b02      	cmp	r3, #2
 801b318:	d901      	bls.n	801b31e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801b31a:	2303      	movs	r3, #3
 801b31c:	e23a      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b31e:	4b34      	ldr	r3, [pc, #208]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b326:	2b00      	cmp	r3, #0
 801b328:	d0f0      	beq.n	801b30c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b32a:	4b31      	ldr	r3, [pc, #196]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b32c:	685b      	ldr	r3, [r3, #4]
 801b32e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	691b      	ldr	r3, [r3, #16]
 801b336:	061b      	lsls	r3, r3, #24
 801b338:	492d      	ldr	r1, [pc, #180]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b33a:	4313      	orrs	r3, r2
 801b33c:	604b      	str	r3, [r1, #4]
 801b33e:	e01a      	b.n	801b376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b340:	4b2b      	ldr	r3, [pc, #172]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	4a2a      	ldr	r2, [pc, #168]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b34a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b34c:	f7fc fc7e 	bl	8017c4c <HAL_GetTick>
 801b350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801b352:	e008      	b.n	801b366 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b354:	f7fc fc7a 	bl	8017c4c <HAL_GetTick>
 801b358:	4602      	mov	r2, r0
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	1ad3      	subs	r3, r2, r3
 801b35e:	2b02      	cmp	r3, #2
 801b360:	d901      	bls.n	801b366 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801b362:	2303      	movs	r3, #3
 801b364:	e216      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801b366:	4b22      	ldr	r3, [pc, #136]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d1f0      	bne.n	801b354 <HAL_RCC_OscConfig+0x1e0>
 801b372:	e000      	b.n	801b376 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b374:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	f003 0308 	and.w	r3, r3, #8
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d041      	beq.n	801b406 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	695b      	ldr	r3, [r3, #20]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d01c      	beq.n	801b3c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b38a:	4b19      	ldr	r3, [pc, #100]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b38c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b390:	4a17      	ldr	r2, [pc, #92]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b392:	f043 0301 	orr.w	r3, r3, #1
 801b396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b39a:	f7fc fc57 	bl	8017c4c <HAL_GetTick>
 801b39e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801b3a0:	e008      	b.n	801b3b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b3a2:	f7fc fc53 	bl	8017c4c <HAL_GetTick>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	693b      	ldr	r3, [r7, #16]
 801b3aa:	1ad3      	subs	r3, r2, r3
 801b3ac:	2b02      	cmp	r3, #2
 801b3ae:	d901      	bls.n	801b3b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801b3b0:	2303      	movs	r3, #3
 801b3b2:	e1ef      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801b3b4:	4b0e      	ldr	r3, [pc, #56]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b3b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b3ba:	f003 0302 	and.w	r3, r3, #2
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d0ef      	beq.n	801b3a2 <HAL_RCC_OscConfig+0x22e>
 801b3c2:	e020      	b.n	801b406 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b3c4:	4b0a      	ldr	r3, [pc, #40]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b3c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b3ca:	4a09      	ldr	r2, [pc, #36]	; (801b3f0 <HAL_RCC_OscConfig+0x27c>)
 801b3cc:	f023 0301 	bic.w	r3, r3, #1
 801b3d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b3d4:	f7fc fc3a 	bl	8017c4c <HAL_GetTick>
 801b3d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b3da:	e00d      	b.n	801b3f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b3dc:	f7fc fc36 	bl	8017c4c <HAL_GetTick>
 801b3e0:	4602      	mov	r2, r0
 801b3e2:	693b      	ldr	r3, [r7, #16]
 801b3e4:	1ad3      	subs	r3, r2, r3
 801b3e6:	2b02      	cmp	r3, #2
 801b3e8:	d906      	bls.n	801b3f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801b3ea:	2303      	movs	r3, #3
 801b3ec:	e1d2      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
 801b3ee:	bf00      	nop
 801b3f0:	40021000 	.word	0x40021000
 801b3f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b3f8:	4b8c      	ldr	r3, [pc, #560]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b3fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b3fe:	f003 0302 	and.w	r3, r3, #2
 801b402:	2b00      	cmp	r3, #0
 801b404:	d1ea      	bne.n	801b3dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	f003 0304 	and.w	r3, r3, #4
 801b40e:	2b00      	cmp	r3, #0
 801b410:	f000 80a6 	beq.w	801b560 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b414:	2300      	movs	r3, #0
 801b416:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801b418:	4b84      	ldr	r3, [pc, #528]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b41a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b41c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b420:	2b00      	cmp	r3, #0
 801b422:	d101      	bne.n	801b428 <HAL_RCC_OscConfig+0x2b4>
 801b424:	2301      	movs	r3, #1
 801b426:	e000      	b.n	801b42a <HAL_RCC_OscConfig+0x2b6>
 801b428:	2300      	movs	r3, #0
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d00d      	beq.n	801b44a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b42e:	4b7f      	ldr	r3, [pc, #508]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b432:	4a7e      	ldr	r2, [pc, #504]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b438:	6593      	str	r3, [r2, #88]	; 0x58
 801b43a:	4b7c      	ldr	r3, [pc, #496]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b43e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b442:	60fb      	str	r3, [r7, #12]
 801b444:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801b446:	2301      	movs	r3, #1
 801b448:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b44a:	4b79      	ldr	r3, [pc, #484]	; (801b630 <HAL_RCC_OscConfig+0x4bc>)
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b452:	2b00      	cmp	r3, #0
 801b454:	d118      	bne.n	801b488 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b456:	4b76      	ldr	r3, [pc, #472]	; (801b630 <HAL_RCC_OscConfig+0x4bc>)
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	4a75      	ldr	r2, [pc, #468]	; (801b630 <HAL_RCC_OscConfig+0x4bc>)
 801b45c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b462:	f7fc fbf3 	bl	8017c4c <HAL_GetTick>
 801b466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b468:	e008      	b.n	801b47c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b46a:	f7fc fbef 	bl	8017c4c <HAL_GetTick>
 801b46e:	4602      	mov	r2, r0
 801b470:	693b      	ldr	r3, [r7, #16]
 801b472:	1ad3      	subs	r3, r2, r3
 801b474:	2b02      	cmp	r3, #2
 801b476:	d901      	bls.n	801b47c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801b478:	2303      	movs	r3, #3
 801b47a:	e18b      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b47c:	4b6c      	ldr	r3, [pc, #432]	; (801b630 <HAL_RCC_OscConfig+0x4bc>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b484:	2b00      	cmp	r3, #0
 801b486:	d0f0      	beq.n	801b46a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	689b      	ldr	r3, [r3, #8]
 801b48c:	2b01      	cmp	r3, #1
 801b48e:	d108      	bne.n	801b4a2 <HAL_RCC_OscConfig+0x32e>
 801b490:	4b66      	ldr	r3, [pc, #408]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b496:	4a65      	ldr	r2, [pc, #404]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b498:	f043 0301 	orr.w	r3, r3, #1
 801b49c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b4a0:	e024      	b.n	801b4ec <HAL_RCC_OscConfig+0x378>
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	689b      	ldr	r3, [r3, #8]
 801b4a6:	2b05      	cmp	r3, #5
 801b4a8:	d110      	bne.n	801b4cc <HAL_RCC_OscConfig+0x358>
 801b4aa:	4b60      	ldr	r3, [pc, #384]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b4b0:	4a5e      	ldr	r2, [pc, #376]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b4b2:	f043 0304 	orr.w	r3, r3, #4
 801b4b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b4ba:	4b5c      	ldr	r3, [pc, #368]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b4c0:	4a5a      	ldr	r2, [pc, #360]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b4c2:	f043 0301 	orr.w	r3, r3, #1
 801b4c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b4ca:	e00f      	b.n	801b4ec <HAL_RCC_OscConfig+0x378>
 801b4cc:	4b57      	ldr	r3, [pc, #348]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b4d2:	4a56      	ldr	r2, [pc, #344]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b4d4:	f023 0301 	bic.w	r3, r3, #1
 801b4d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b4dc:	4b53      	ldr	r3, [pc, #332]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b4e2:	4a52      	ldr	r2, [pc, #328]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b4e4:	f023 0304 	bic.w	r3, r3, #4
 801b4e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	689b      	ldr	r3, [r3, #8]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d016      	beq.n	801b522 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b4f4:	f7fc fbaa 	bl	8017c4c <HAL_GetTick>
 801b4f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b4fa:	e00a      	b.n	801b512 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b4fc:	f7fc fba6 	bl	8017c4c <HAL_GetTick>
 801b500:	4602      	mov	r2, r0
 801b502:	693b      	ldr	r3, [r7, #16]
 801b504:	1ad3      	subs	r3, r2, r3
 801b506:	f241 3288 	movw	r2, #5000	; 0x1388
 801b50a:	4293      	cmp	r3, r2
 801b50c:	d901      	bls.n	801b512 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801b50e:	2303      	movs	r3, #3
 801b510:	e140      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b512:	4b46      	ldr	r3, [pc, #280]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b518:	f003 0302 	and.w	r3, r3, #2
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d0ed      	beq.n	801b4fc <HAL_RCC_OscConfig+0x388>
 801b520:	e015      	b.n	801b54e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b522:	f7fc fb93 	bl	8017c4c <HAL_GetTick>
 801b526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b528:	e00a      	b.n	801b540 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b52a:	f7fc fb8f 	bl	8017c4c <HAL_GetTick>
 801b52e:	4602      	mov	r2, r0
 801b530:	693b      	ldr	r3, [r7, #16]
 801b532:	1ad3      	subs	r3, r2, r3
 801b534:	f241 3288 	movw	r2, #5000	; 0x1388
 801b538:	4293      	cmp	r3, r2
 801b53a:	d901      	bls.n	801b540 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801b53c:	2303      	movs	r3, #3
 801b53e:	e129      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b540:	4b3a      	ldr	r3, [pc, #232]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b546:	f003 0302 	and.w	r3, r3, #2
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d1ed      	bne.n	801b52a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801b54e:	7ffb      	ldrb	r3, [r7, #31]
 801b550:	2b01      	cmp	r3, #1
 801b552:	d105      	bne.n	801b560 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b554:	4b35      	ldr	r3, [pc, #212]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b558:	4a34      	ldr	r2, [pc, #208]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b55a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b55e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	f003 0320 	and.w	r3, r3, #32
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d03c      	beq.n	801b5e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	699b      	ldr	r3, [r3, #24]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d01c      	beq.n	801b5ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b574:	4b2d      	ldr	r3, [pc, #180]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b57a:	4a2c      	ldr	r2, [pc, #176]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b57c:	f043 0301 	orr.w	r3, r3, #1
 801b580:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b584:	f7fc fb62 	bl	8017c4c <HAL_GetTick>
 801b588:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b58a:	e008      	b.n	801b59e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b58c:	f7fc fb5e 	bl	8017c4c <HAL_GetTick>
 801b590:	4602      	mov	r2, r0
 801b592:	693b      	ldr	r3, [r7, #16]
 801b594:	1ad3      	subs	r3, r2, r3
 801b596:	2b02      	cmp	r3, #2
 801b598:	d901      	bls.n	801b59e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801b59a:	2303      	movs	r3, #3
 801b59c:	e0fa      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b59e:	4b23      	ldr	r3, [pc, #140]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b5a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b5a4:	f003 0302 	and.w	r3, r3, #2
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d0ef      	beq.n	801b58c <HAL_RCC_OscConfig+0x418>
 801b5ac:	e01b      	b.n	801b5e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b5ae:	4b1f      	ldr	r3, [pc, #124]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b5b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b5b4:	4a1d      	ldr	r2, [pc, #116]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b5b6:	f023 0301 	bic.w	r3, r3, #1
 801b5ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b5be:	f7fc fb45 	bl	8017c4c <HAL_GetTick>
 801b5c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b5c4:	e008      	b.n	801b5d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b5c6:	f7fc fb41 	bl	8017c4c <HAL_GetTick>
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	693b      	ldr	r3, [r7, #16]
 801b5ce:	1ad3      	subs	r3, r2, r3
 801b5d0:	2b02      	cmp	r3, #2
 801b5d2:	d901      	bls.n	801b5d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801b5d4:	2303      	movs	r3, #3
 801b5d6:	e0dd      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b5d8:	4b14      	ldr	r3, [pc, #80]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b5da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b5de:	f003 0302 	and.w	r3, r3, #2
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d1ef      	bne.n	801b5c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	69db      	ldr	r3, [r3, #28]
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	f000 80d1 	beq.w	801b792 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801b5f0:	4b0e      	ldr	r3, [pc, #56]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b5f2:	689b      	ldr	r3, [r3, #8]
 801b5f4:	f003 030c 	and.w	r3, r3, #12
 801b5f8:	2b0c      	cmp	r3, #12
 801b5fa:	f000 808b 	beq.w	801b714 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	69db      	ldr	r3, [r3, #28]
 801b602:	2b02      	cmp	r3, #2
 801b604:	d15e      	bne.n	801b6c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b606:	4b09      	ldr	r3, [pc, #36]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	4a08      	ldr	r2, [pc, #32]	; (801b62c <HAL_RCC_OscConfig+0x4b8>)
 801b60c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b612:	f7fc fb1b 	bl	8017c4c <HAL_GetTick>
 801b616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b618:	e00c      	b.n	801b634 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b61a:	f7fc fb17 	bl	8017c4c <HAL_GetTick>
 801b61e:	4602      	mov	r2, r0
 801b620:	693b      	ldr	r3, [r7, #16]
 801b622:	1ad3      	subs	r3, r2, r3
 801b624:	2b02      	cmp	r3, #2
 801b626:	d905      	bls.n	801b634 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801b628:	2303      	movs	r3, #3
 801b62a:	e0b3      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
 801b62c:	40021000 	.word	0x40021000
 801b630:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b634:	4b59      	ldr	r3, [pc, #356]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d1ec      	bne.n	801b61a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b640:	4b56      	ldr	r3, [pc, #344]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b642:	68da      	ldr	r2, [r3, #12]
 801b644:	4b56      	ldr	r3, [pc, #344]	; (801b7a0 <HAL_RCC_OscConfig+0x62c>)
 801b646:	4013      	ands	r3, r2
 801b648:	687a      	ldr	r2, [r7, #4]
 801b64a:	6a11      	ldr	r1, [r2, #32]
 801b64c:	687a      	ldr	r2, [r7, #4]
 801b64e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b650:	3a01      	subs	r2, #1
 801b652:	0112      	lsls	r2, r2, #4
 801b654:	4311      	orrs	r1, r2
 801b656:	687a      	ldr	r2, [r7, #4]
 801b658:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801b65a:	0212      	lsls	r2, r2, #8
 801b65c:	4311      	orrs	r1, r2
 801b65e:	687a      	ldr	r2, [r7, #4]
 801b660:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801b662:	0852      	lsrs	r2, r2, #1
 801b664:	3a01      	subs	r2, #1
 801b666:	0552      	lsls	r2, r2, #21
 801b668:	4311      	orrs	r1, r2
 801b66a:	687a      	ldr	r2, [r7, #4]
 801b66c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b66e:	0852      	lsrs	r2, r2, #1
 801b670:	3a01      	subs	r2, #1
 801b672:	0652      	lsls	r2, r2, #25
 801b674:	4311      	orrs	r1, r2
 801b676:	687a      	ldr	r2, [r7, #4]
 801b678:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b67a:	06d2      	lsls	r2, r2, #27
 801b67c:	430a      	orrs	r2, r1
 801b67e:	4947      	ldr	r1, [pc, #284]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b680:	4313      	orrs	r3, r2
 801b682:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b684:	4b45      	ldr	r3, [pc, #276]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	4a44      	ldr	r2, [pc, #272]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b68a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b68e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801b690:	4b42      	ldr	r3, [pc, #264]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b692:	68db      	ldr	r3, [r3, #12]
 801b694:	4a41      	ldr	r2, [pc, #260]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b69a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b69c:	f7fc fad6 	bl	8017c4c <HAL_GetTick>
 801b6a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b6a2:	e008      	b.n	801b6b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b6a4:	f7fc fad2 	bl	8017c4c <HAL_GetTick>
 801b6a8:	4602      	mov	r2, r0
 801b6aa:	693b      	ldr	r3, [r7, #16]
 801b6ac:	1ad3      	subs	r3, r2, r3
 801b6ae:	2b02      	cmp	r3, #2
 801b6b0:	d901      	bls.n	801b6b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801b6b2:	2303      	movs	r3, #3
 801b6b4:	e06e      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b6b6:	4b39      	ldr	r3, [pc, #228]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d0f0      	beq.n	801b6a4 <HAL_RCC_OscConfig+0x530>
 801b6c2:	e066      	b.n	801b792 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b6c4:	4b35      	ldr	r3, [pc, #212]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	4a34      	ldr	r2, [pc, #208]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b6ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b6ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801b6d0:	4b32      	ldr	r3, [pc, #200]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b6d2:	68db      	ldr	r3, [r3, #12]
 801b6d4:	4a31      	ldr	r2, [pc, #196]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b6d6:	f023 0303 	bic.w	r3, r3, #3
 801b6da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801b6dc:	4b2f      	ldr	r3, [pc, #188]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b6de:	68db      	ldr	r3, [r3, #12]
 801b6e0:	4a2e      	ldr	r2, [pc, #184]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b6e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801b6e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b6ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b6ec:	f7fc faae 	bl	8017c4c <HAL_GetTick>
 801b6f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b6f2:	e008      	b.n	801b706 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b6f4:	f7fc faaa 	bl	8017c4c <HAL_GetTick>
 801b6f8:	4602      	mov	r2, r0
 801b6fa:	693b      	ldr	r3, [r7, #16]
 801b6fc:	1ad3      	subs	r3, r2, r3
 801b6fe:	2b02      	cmp	r3, #2
 801b700:	d901      	bls.n	801b706 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801b702:	2303      	movs	r3, #3
 801b704:	e046      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b706:	4b25      	ldr	r3, [pc, #148]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d1f0      	bne.n	801b6f4 <HAL_RCC_OscConfig+0x580>
 801b712:	e03e      	b.n	801b792 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	69db      	ldr	r3, [r3, #28]
 801b718:	2b01      	cmp	r3, #1
 801b71a:	d101      	bne.n	801b720 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801b71c:	2301      	movs	r3, #1
 801b71e:	e039      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801b720:	4b1e      	ldr	r3, [pc, #120]	; (801b79c <HAL_RCC_OscConfig+0x628>)
 801b722:	68db      	ldr	r3, [r3, #12]
 801b724:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b726:	697b      	ldr	r3, [r7, #20]
 801b728:	f003 0203 	and.w	r2, r3, #3
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	6a1b      	ldr	r3, [r3, #32]
 801b730:	429a      	cmp	r2, r3
 801b732:	d12c      	bne.n	801b78e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b734:	697b      	ldr	r3, [r7, #20]
 801b736:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b73e:	3b01      	subs	r3, #1
 801b740:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b742:	429a      	cmp	r2, r3
 801b744:	d123      	bne.n	801b78e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b746:	697b      	ldr	r3, [r7, #20]
 801b748:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b750:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b752:	429a      	cmp	r2, r3
 801b754:	d11b      	bne.n	801b78e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b756:	697b      	ldr	r3, [r7, #20]
 801b758:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b760:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b762:	429a      	cmp	r2, r3
 801b764:	d113      	bne.n	801b78e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b766:	697b      	ldr	r3, [r7, #20]
 801b768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b770:	085b      	lsrs	r3, r3, #1
 801b772:	3b01      	subs	r3, #1
 801b774:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b776:	429a      	cmp	r2, r3
 801b778:	d109      	bne.n	801b78e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801b77a:	697b      	ldr	r3, [r7, #20]
 801b77c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b784:	085b      	lsrs	r3, r3, #1
 801b786:	3b01      	subs	r3, #1
 801b788:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d001      	beq.n	801b792 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801b78e:	2301      	movs	r3, #1
 801b790:	e000      	b.n	801b794 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801b792:	2300      	movs	r3, #0
}
 801b794:	4618      	mov	r0, r3
 801b796:	3720      	adds	r7, #32
 801b798:	46bd      	mov	sp, r7
 801b79a:	bd80      	pop	{r7, pc}
 801b79c:	40021000 	.word	0x40021000
 801b7a0:	019f800c 	.word	0x019f800c

0801b7a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	b086      	sub	sp, #24
 801b7a8:	af00      	add	r7, sp, #0
 801b7aa:	6078      	str	r0, [r7, #4]
 801b7ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801b7ae:	2300      	movs	r3, #0
 801b7b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d101      	bne.n	801b7bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801b7b8:	2301      	movs	r3, #1
 801b7ba:	e11e      	b.n	801b9fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b7bc:	4b91      	ldr	r3, [pc, #580]	; (801ba04 <HAL_RCC_ClockConfig+0x260>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	f003 030f 	and.w	r3, r3, #15
 801b7c4:	683a      	ldr	r2, [r7, #0]
 801b7c6:	429a      	cmp	r2, r3
 801b7c8:	d910      	bls.n	801b7ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b7ca:	4b8e      	ldr	r3, [pc, #568]	; (801ba04 <HAL_RCC_ClockConfig+0x260>)
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	f023 020f 	bic.w	r2, r3, #15
 801b7d2:	498c      	ldr	r1, [pc, #560]	; (801ba04 <HAL_RCC_ClockConfig+0x260>)
 801b7d4:	683b      	ldr	r3, [r7, #0]
 801b7d6:	4313      	orrs	r3, r2
 801b7d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b7da:	4b8a      	ldr	r3, [pc, #552]	; (801ba04 <HAL_RCC_ClockConfig+0x260>)
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	f003 030f 	and.w	r3, r3, #15
 801b7e2:	683a      	ldr	r2, [r7, #0]
 801b7e4:	429a      	cmp	r2, r3
 801b7e6:	d001      	beq.n	801b7ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801b7e8:	2301      	movs	r3, #1
 801b7ea:	e106      	b.n	801b9fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	f003 0301 	and.w	r3, r3, #1
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d073      	beq.n	801b8e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	685b      	ldr	r3, [r3, #4]
 801b7fc:	2b03      	cmp	r3, #3
 801b7fe:	d129      	bne.n	801b854 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b800:	4b81      	ldr	r3, [pc, #516]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d101      	bne.n	801b810 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801b80c:	2301      	movs	r3, #1
 801b80e:	e0f4      	b.n	801b9fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801b810:	f000 f99c 	bl	801bb4c <RCC_GetSysClockFreqFromPLLSource>
 801b814:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801b816:	693b      	ldr	r3, [r7, #16]
 801b818:	4a7c      	ldr	r2, [pc, #496]	; (801ba0c <HAL_RCC_ClockConfig+0x268>)
 801b81a:	4293      	cmp	r3, r2
 801b81c:	d93f      	bls.n	801b89e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b81e:	4b7a      	ldr	r3, [pc, #488]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b820:	689b      	ldr	r3, [r3, #8]
 801b822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b826:	2b00      	cmp	r3, #0
 801b828:	d009      	beq.n	801b83e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b832:	2b00      	cmp	r3, #0
 801b834:	d033      	beq.n	801b89e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d12f      	bne.n	801b89e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b83e:	4b72      	ldr	r3, [pc, #456]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b840:	689b      	ldr	r3, [r3, #8]
 801b842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b846:	4a70      	ldr	r2, [pc, #448]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b84c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801b84e:	2380      	movs	r3, #128	; 0x80
 801b850:	617b      	str	r3, [r7, #20]
 801b852:	e024      	b.n	801b89e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	685b      	ldr	r3, [r3, #4]
 801b858:	2b02      	cmp	r3, #2
 801b85a:	d107      	bne.n	801b86c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b85c:	4b6a      	ldr	r3, [pc, #424]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b864:	2b00      	cmp	r3, #0
 801b866:	d109      	bne.n	801b87c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b868:	2301      	movs	r3, #1
 801b86a:	e0c6      	b.n	801b9fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b86c:	4b66      	ldr	r3, [pc, #408]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b874:	2b00      	cmp	r3, #0
 801b876:	d101      	bne.n	801b87c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b878:	2301      	movs	r3, #1
 801b87a:	e0be      	b.n	801b9fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801b87c:	f000 f8ce 	bl	801ba1c <HAL_RCC_GetSysClockFreq>
 801b880:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801b882:	693b      	ldr	r3, [r7, #16]
 801b884:	4a61      	ldr	r2, [pc, #388]	; (801ba0c <HAL_RCC_ClockConfig+0x268>)
 801b886:	4293      	cmp	r3, r2
 801b888:	d909      	bls.n	801b89e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b88a:	4b5f      	ldr	r3, [pc, #380]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b88c:	689b      	ldr	r3, [r3, #8]
 801b88e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b892:	4a5d      	ldr	r2, [pc, #372]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b898:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801b89a:	2380      	movs	r3, #128	; 0x80
 801b89c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b89e:	4b5a      	ldr	r3, [pc, #360]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b8a0:	689b      	ldr	r3, [r3, #8]
 801b8a2:	f023 0203 	bic.w	r2, r3, #3
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	685b      	ldr	r3, [r3, #4]
 801b8aa:	4957      	ldr	r1, [pc, #348]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b8ac:	4313      	orrs	r3, r2
 801b8ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b8b0:	f7fc f9cc 	bl	8017c4c <HAL_GetTick>
 801b8b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b8b6:	e00a      	b.n	801b8ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b8b8:	f7fc f9c8 	bl	8017c4c <HAL_GetTick>
 801b8bc:	4602      	mov	r2, r0
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	1ad3      	subs	r3, r2, r3
 801b8c2:	f241 3288 	movw	r2, #5000	; 0x1388
 801b8c6:	4293      	cmp	r3, r2
 801b8c8:	d901      	bls.n	801b8ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801b8ca:	2303      	movs	r3, #3
 801b8cc:	e095      	b.n	801b9fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b8ce:	4b4e      	ldr	r3, [pc, #312]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b8d0:	689b      	ldr	r3, [r3, #8]
 801b8d2:	f003 020c 	and.w	r2, r3, #12
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	685b      	ldr	r3, [r3, #4]
 801b8da:	009b      	lsls	r3, r3, #2
 801b8dc:	429a      	cmp	r2, r3
 801b8de:	d1eb      	bne.n	801b8b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	f003 0302 	and.w	r3, r3, #2
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d023      	beq.n	801b934 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	f003 0304 	and.w	r3, r3, #4
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d005      	beq.n	801b904 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b8f8:	4b43      	ldr	r3, [pc, #268]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b8fa:	689b      	ldr	r3, [r3, #8]
 801b8fc:	4a42      	ldr	r2, [pc, #264]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b8fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b902:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	f003 0308 	and.w	r3, r3, #8
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d007      	beq.n	801b920 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801b910:	4b3d      	ldr	r3, [pc, #244]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b912:	689b      	ldr	r3, [r3, #8]
 801b914:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b918:	4a3b      	ldr	r2, [pc, #236]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b91a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b91e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b920:	4b39      	ldr	r3, [pc, #228]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b922:	689b      	ldr	r3, [r3, #8]
 801b924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	689b      	ldr	r3, [r3, #8]
 801b92c:	4936      	ldr	r1, [pc, #216]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b92e:	4313      	orrs	r3, r2
 801b930:	608b      	str	r3, [r1, #8]
 801b932:	e008      	b.n	801b946 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801b934:	697b      	ldr	r3, [r7, #20]
 801b936:	2b80      	cmp	r3, #128	; 0x80
 801b938:	d105      	bne.n	801b946 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801b93a:	4b33      	ldr	r3, [pc, #204]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b93c:	689b      	ldr	r3, [r3, #8]
 801b93e:	4a32      	ldr	r2, [pc, #200]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b944:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b946:	4b2f      	ldr	r3, [pc, #188]	; (801ba04 <HAL_RCC_ClockConfig+0x260>)
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	f003 030f 	and.w	r3, r3, #15
 801b94e:	683a      	ldr	r2, [r7, #0]
 801b950:	429a      	cmp	r2, r3
 801b952:	d21d      	bcs.n	801b990 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b954:	4b2b      	ldr	r3, [pc, #172]	; (801ba04 <HAL_RCC_ClockConfig+0x260>)
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	f023 020f 	bic.w	r2, r3, #15
 801b95c:	4929      	ldr	r1, [pc, #164]	; (801ba04 <HAL_RCC_ClockConfig+0x260>)
 801b95e:	683b      	ldr	r3, [r7, #0]
 801b960:	4313      	orrs	r3, r2
 801b962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b964:	f7fc f972 	bl	8017c4c <HAL_GetTick>
 801b968:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b96a:	e00a      	b.n	801b982 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b96c:	f7fc f96e 	bl	8017c4c <HAL_GetTick>
 801b970:	4602      	mov	r2, r0
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	1ad3      	subs	r3, r2, r3
 801b976:	f241 3288 	movw	r2, #5000	; 0x1388
 801b97a:	4293      	cmp	r3, r2
 801b97c:	d901      	bls.n	801b982 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801b97e:	2303      	movs	r3, #3
 801b980:	e03b      	b.n	801b9fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b982:	4b20      	ldr	r3, [pc, #128]	; (801ba04 <HAL_RCC_ClockConfig+0x260>)
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	f003 030f 	and.w	r3, r3, #15
 801b98a:	683a      	ldr	r2, [r7, #0]
 801b98c:	429a      	cmp	r2, r3
 801b98e:	d1ed      	bne.n	801b96c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	f003 0304 	and.w	r3, r3, #4
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d008      	beq.n	801b9ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b99c:	4b1a      	ldr	r3, [pc, #104]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b99e:	689b      	ldr	r3, [r3, #8]
 801b9a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	68db      	ldr	r3, [r3, #12]
 801b9a8:	4917      	ldr	r1, [pc, #92]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b9aa:	4313      	orrs	r3, r2
 801b9ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	f003 0308 	and.w	r3, r3, #8
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d009      	beq.n	801b9ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b9ba:	4b13      	ldr	r3, [pc, #76]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b9bc:	689b      	ldr	r3, [r3, #8]
 801b9be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	691b      	ldr	r3, [r3, #16]
 801b9c6:	00db      	lsls	r3, r3, #3
 801b9c8:	490f      	ldr	r1, [pc, #60]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b9ca:	4313      	orrs	r3, r2
 801b9cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801b9ce:	f000 f825 	bl	801ba1c <HAL_RCC_GetSysClockFreq>
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	4b0c      	ldr	r3, [pc, #48]	; (801ba08 <HAL_RCC_ClockConfig+0x264>)
 801b9d6:	689b      	ldr	r3, [r3, #8]
 801b9d8:	091b      	lsrs	r3, r3, #4
 801b9da:	f003 030f 	and.w	r3, r3, #15
 801b9de:	490c      	ldr	r1, [pc, #48]	; (801ba10 <HAL_RCC_ClockConfig+0x26c>)
 801b9e0:	5ccb      	ldrb	r3, [r1, r3]
 801b9e2:	f003 031f 	and.w	r3, r3, #31
 801b9e6:	fa22 f303 	lsr.w	r3, r2, r3
 801b9ea:	4a0a      	ldr	r2, [pc, #40]	; (801ba14 <HAL_RCC_ClockConfig+0x270>)
 801b9ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801b9ee:	4b0a      	ldr	r3, [pc, #40]	; (801ba18 <HAL_RCC_ClockConfig+0x274>)
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	f7fc f8de 	bl	8017bb4 <HAL_InitTick>
 801b9f8:	4603      	mov	r3, r0
}
 801b9fa:	4618      	mov	r0, r3
 801b9fc:	3718      	adds	r7, #24
 801b9fe:	46bd      	mov	sp, r7
 801ba00:	bd80      	pop	{r7, pc}
 801ba02:	bf00      	nop
 801ba04:	40022000 	.word	0x40022000
 801ba08:	40021000 	.word	0x40021000
 801ba0c:	04c4b400 	.word	0x04c4b400
 801ba10:	08022620 	.word	0x08022620
 801ba14:	20000000 	.word	0x20000000
 801ba18:	20000004 	.word	0x20000004

0801ba1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ba1c:	b480      	push	{r7}
 801ba1e:	b087      	sub	sp, #28
 801ba20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801ba22:	4b2c      	ldr	r3, [pc, #176]	; (801bad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ba24:	689b      	ldr	r3, [r3, #8]
 801ba26:	f003 030c 	and.w	r3, r3, #12
 801ba2a:	2b04      	cmp	r3, #4
 801ba2c:	d102      	bne.n	801ba34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801ba2e:	4b2a      	ldr	r3, [pc, #168]	; (801bad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801ba30:	613b      	str	r3, [r7, #16]
 801ba32:	e047      	b.n	801bac4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801ba34:	4b27      	ldr	r3, [pc, #156]	; (801bad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ba36:	689b      	ldr	r3, [r3, #8]
 801ba38:	f003 030c 	and.w	r3, r3, #12
 801ba3c:	2b08      	cmp	r3, #8
 801ba3e:	d102      	bne.n	801ba46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801ba40:	4b25      	ldr	r3, [pc, #148]	; (801bad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801ba42:	613b      	str	r3, [r7, #16]
 801ba44:	e03e      	b.n	801bac4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801ba46:	4b23      	ldr	r3, [pc, #140]	; (801bad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ba48:	689b      	ldr	r3, [r3, #8]
 801ba4a:	f003 030c 	and.w	r3, r3, #12
 801ba4e:	2b0c      	cmp	r3, #12
 801ba50:	d136      	bne.n	801bac0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801ba52:	4b20      	ldr	r3, [pc, #128]	; (801bad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ba54:	68db      	ldr	r3, [r3, #12]
 801ba56:	f003 0303 	and.w	r3, r3, #3
 801ba5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801ba5c:	4b1d      	ldr	r3, [pc, #116]	; (801bad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ba5e:	68db      	ldr	r3, [r3, #12]
 801ba60:	091b      	lsrs	r3, r3, #4
 801ba62:	f003 030f 	and.w	r3, r3, #15
 801ba66:	3301      	adds	r3, #1
 801ba68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	2b03      	cmp	r3, #3
 801ba6e:	d10c      	bne.n	801ba8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801ba70:	4a19      	ldr	r2, [pc, #100]	; (801bad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801ba72:	68bb      	ldr	r3, [r7, #8]
 801ba74:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba78:	4a16      	ldr	r2, [pc, #88]	; (801bad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ba7a:	68d2      	ldr	r2, [r2, #12]
 801ba7c:	0a12      	lsrs	r2, r2, #8
 801ba7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801ba82:	fb02 f303 	mul.w	r3, r2, r3
 801ba86:	617b      	str	r3, [r7, #20]
      break;
 801ba88:	e00c      	b.n	801baa4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801ba8a:	4a13      	ldr	r2, [pc, #76]	; (801bad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801ba8c:	68bb      	ldr	r3, [r7, #8]
 801ba8e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba92:	4a10      	ldr	r2, [pc, #64]	; (801bad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ba94:	68d2      	ldr	r2, [r2, #12]
 801ba96:	0a12      	lsrs	r2, r2, #8
 801ba98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801ba9c:	fb02 f303 	mul.w	r3, r2, r3
 801baa0:	617b      	str	r3, [r7, #20]
      break;
 801baa2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801baa4:	4b0b      	ldr	r3, [pc, #44]	; (801bad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801baa6:	68db      	ldr	r3, [r3, #12]
 801baa8:	0e5b      	lsrs	r3, r3, #25
 801baaa:	f003 0303 	and.w	r3, r3, #3
 801baae:	3301      	adds	r3, #1
 801bab0:	005b      	lsls	r3, r3, #1
 801bab2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801bab4:	697a      	ldr	r2, [r7, #20]
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	fbb2 f3f3 	udiv	r3, r2, r3
 801babc:	613b      	str	r3, [r7, #16]
 801babe:	e001      	b.n	801bac4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801bac0:	2300      	movs	r3, #0
 801bac2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801bac4:	693b      	ldr	r3, [r7, #16]
}
 801bac6:	4618      	mov	r0, r3
 801bac8:	371c      	adds	r7, #28
 801baca:	46bd      	mov	sp, r7
 801bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad0:	4770      	bx	lr
 801bad2:	bf00      	nop
 801bad4:	40021000 	.word	0x40021000
 801bad8:	00f42400 	.word	0x00f42400

0801badc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801badc:	b480      	push	{r7}
 801bade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801bae0:	4b03      	ldr	r3, [pc, #12]	; (801baf0 <HAL_RCC_GetHCLKFreq+0x14>)
 801bae2:	681b      	ldr	r3, [r3, #0]
}
 801bae4:	4618      	mov	r0, r3
 801bae6:	46bd      	mov	sp, r7
 801bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baec:	4770      	bx	lr
 801baee:	bf00      	nop
 801baf0:	20000000 	.word	0x20000000

0801baf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801baf4:	b580      	push	{r7, lr}
 801baf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801baf8:	f7ff fff0 	bl	801badc <HAL_RCC_GetHCLKFreq>
 801bafc:	4602      	mov	r2, r0
 801bafe:	4b06      	ldr	r3, [pc, #24]	; (801bb18 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bb00:	689b      	ldr	r3, [r3, #8]
 801bb02:	0a1b      	lsrs	r3, r3, #8
 801bb04:	f003 0307 	and.w	r3, r3, #7
 801bb08:	4904      	ldr	r1, [pc, #16]	; (801bb1c <HAL_RCC_GetPCLK1Freq+0x28>)
 801bb0a:	5ccb      	ldrb	r3, [r1, r3]
 801bb0c:	f003 031f 	and.w	r3, r3, #31
 801bb10:	fa22 f303 	lsr.w	r3, r2, r3
}
 801bb14:	4618      	mov	r0, r3
 801bb16:	bd80      	pop	{r7, pc}
 801bb18:	40021000 	.word	0x40021000
 801bb1c:	08022630 	.word	0x08022630

0801bb20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801bb24:	f7ff ffda 	bl	801badc <HAL_RCC_GetHCLKFreq>
 801bb28:	4602      	mov	r2, r0
 801bb2a:	4b06      	ldr	r3, [pc, #24]	; (801bb44 <HAL_RCC_GetPCLK2Freq+0x24>)
 801bb2c:	689b      	ldr	r3, [r3, #8]
 801bb2e:	0adb      	lsrs	r3, r3, #11
 801bb30:	f003 0307 	and.w	r3, r3, #7
 801bb34:	4904      	ldr	r1, [pc, #16]	; (801bb48 <HAL_RCC_GetPCLK2Freq+0x28>)
 801bb36:	5ccb      	ldrb	r3, [r1, r3]
 801bb38:	f003 031f 	and.w	r3, r3, #31
 801bb3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801bb40:	4618      	mov	r0, r3
 801bb42:	bd80      	pop	{r7, pc}
 801bb44:	40021000 	.word	0x40021000
 801bb48:	08022630 	.word	0x08022630

0801bb4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801bb4c:	b480      	push	{r7}
 801bb4e:	b087      	sub	sp, #28
 801bb50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801bb52:	4b1e      	ldr	r3, [pc, #120]	; (801bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801bb54:	68db      	ldr	r3, [r3, #12]
 801bb56:	f003 0303 	and.w	r3, r3, #3
 801bb5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801bb5c:	4b1b      	ldr	r3, [pc, #108]	; (801bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801bb5e:	68db      	ldr	r3, [r3, #12]
 801bb60:	091b      	lsrs	r3, r3, #4
 801bb62:	f003 030f 	and.w	r3, r3, #15
 801bb66:	3301      	adds	r3, #1
 801bb68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801bb6a:	693b      	ldr	r3, [r7, #16]
 801bb6c:	2b03      	cmp	r3, #3
 801bb6e:	d10c      	bne.n	801bb8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801bb70:	4a17      	ldr	r2, [pc, #92]	; (801bbd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb78:	4a14      	ldr	r2, [pc, #80]	; (801bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801bb7a:	68d2      	ldr	r2, [r2, #12]
 801bb7c:	0a12      	lsrs	r2, r2, #8
 801bb7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801bb82:	fb02 f303 	mul.w	r3, r2, r3
 801bb86:	617b      	str	r3, [r7, #20]
    break;
 801bb88:	e00c      	b.n	801bba4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801bb8a:	4a11      	ldr	r2, [pc, #68]	; (801bbd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb92:	4a0e      	ldr	r2, [pc, #56]	; (801bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801bb94:	68d2      	ldr	r2, [r2, #12]
 801bb96:	0a12      	lsrs	r2, r2, #8
 801bb98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801bb9c:	fb02 f303 	mul.w	r3, r2, r3
 801bba0:	617b      	str	r3, [r7, #20]
    break;
 801bba2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801bba4:	4b09      	ldr	r3, [pc, #36]	; (801bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801bba6:	68db      	ldr	r3, [r3, #12]
 801bba8:	0e5b      	lsrs	r3, r3, #25
 801bbaa:	f003 0303 	and.w	r3, r3, #3
 801bbae:	3301      	adds	r3, #1
 801bbb0:	005b      	lsls	r3, r3, #1
 801bbb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801bbb4:	697a      	ldr	r2, [r7, #20]
 801bbb6:	68bb      	ldr	r3, [r7, #8]
 801bbb8:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801bbbe:	687b      	ldr	r3, [r7, #4]
}
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	371c      	adds	r7, #28
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbca:	4770      	bx	lr
 801bbcc:	40021000 	.word	0x40021000
 801bbd0:	00f42400 	.word	0x00f42400

0801bbd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b086      	sub	sp, #24
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801bbdc:	2300      	movs	r3, #0
 801bbde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	f000 8098 	beq.w	801bd22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bbf2:	2300      	movs	r3, #0
 801bbf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bbf6:	4b43      	ldr	r3, [pc, #268]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bbf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bbfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d10d      	bne.n	801bc1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bc02:	4b40      	ldr	r3, [pc, #256]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bc06:	4a3f      	ldr	r2, [pc, #252]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bc0c:	6593      	str	r3, [r2, #88]	; 0x58
 801bc0e:	4b3d      	ldr	r3, [pc, #244]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bc12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bc16:	60bb      	str	r3, [r7, #8]
 801bc18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bc1a:	2301      	movs	r3, #1
 801bc1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801bc1e:	4b3a      	ldr	r3, [pc, #232]	; (801bd08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	4a39      	ldr	r2, [pc, #228]	; (801bd08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801bc24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bc28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801bc2a:	f7fc f80f 	bl	8017c4c <HAL_GetTick>
 801bc2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bc30:	e009      	b.n	801bc46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bc32:	f7fc f80b 	bl	8017c4c <HAL_GetTick>
 801bc36:	4602      	mov	r2, r0
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	1ad3      	subs	r3, r2, r3
 801bc3c:	2b02      	cmp	r3, #2
 801bc3e:	d902      	bls.n	801bc46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801bc40:	2303      	movs	r3, #3
 801bc42:	74fb      	strb	r3, [r7, #19]
        break;
 801bc44:	e005      	b.n	801bc52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bc46:	4b30      	ldr	r3, [pc, #192]	; (801bd08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d0ef      	beq.n	801bc32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801bc52:	7cfb      	ldrb	r3, [r7, #19]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d159      	bne.n	801bd0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801bc58:	4b2a      	ldr	r3, [pc, #168]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801bc62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801bc64:	697b      	ldr	r3, [r7, #20]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d01e      	beq.n	801bca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc6e:	697a      	ldr	r2, [r7, #20]
 801bc70:	429a      	cmp	r2, r3
 801bc72:	d019      	beq.n	801bca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801bc74:	4b23      	ldr	r3, [pc, #140]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bc7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801bc80:	4b20      	ldr	r3, [pc, #128]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc86:	4a1f      	ldr	r2, [pc, #124]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bc8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801bc90:	4b1c      	ldr	r3, [pc, #112]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc96:	4a1b      	ldr	r2, [pc, #108]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bc98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bc9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801bca0:	4a18      	ldr	r2, [pc, #96]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	f003 0301 	and.w	r3, r3, #1
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d016      	beq.n	801bce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcb2:	f7fb ffcb 	bl	8017c4c <HAL_GetTick>
 801bcb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801bcb8:	e00b      	b.n	801bcd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bcba:	f7fb ffc7 	bl	8017c4c <HAL_GetTick>
 801bcbe:	4602      	mov	r2, r0
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	1ad3      	subs	r3, r2, r3
 801bcc4:	f241 3288 	movw	r2, #5000	; 0x1388
 801bcc8:	4293      	cmp	r3, r2
 801bcca:	d902      	bls.n	801bcd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801bccc:	2303      	movs	r3, #3
 801bcce:	74fb      	strb	r3, [r7, #19]
            break;
 801bcd0:	e006      	b.n	801bce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801bcd2:	4b0c      	ldr	r3, [pc, #48]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bcd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bcd8:	f003 0302 	and.w	r3, r3, #2
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d0ec      	beq.n	801bcba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801bce0:	7cfb      	ldrb	r3, [r7, #19]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d10b      	bne.n	801bcfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bce6:	4b07      	ldr	r3, [pc, #28]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bcec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bcf4:	4903      	ldr	r1, [pc, #12]	; (801bd04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bcf6:	4313      	orrs	r3, r2
 801bcf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801bcfc:	e008      	b.n	801bd10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801bcfe:	7cfb      	ldrb	r3, [r7, #19]
 801bd00:	74bb      	strb	r3, [r7, #18]
 801bd02:	e005      	b.n	801bd10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801bd04:	40021000 	.word	0x40021000
 801bd08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bd0c:	7cfb      	ldrb	r3, [r7, #19]
 801bd0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bd10:	7c7b      	ldrb	r3, [r7, #17]
 801bd12:	2b01      	cmp	r3, #1
 801bd14:	d105      	bne.n	801bd22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bd16:	4ba7      	ldr	r3, [pc, #668]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bd1a:	4aa6      	ldr	r2, [pc, #664]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bd20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	f003 0301 	and.w	r3, r3, #1
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d00a      	beq.n	801bd44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801bd2e:	4ba1      	ldr	r3, [pc, #644]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd34:	f023 0203 	bic.w	r2, r3, #3
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	685b      	ldr	r3, [r3, #4]
 801bd3c:	499d      	ldr	r1, [pc, #628]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd3e:	4313      	orrs	r3, r2
 801bd40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	f003 0302 	and.w	r3, r3, #2
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d00a      	beq.n	801bd66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801bd50:	4b98      	ldr	r3, [pc, #608]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd56:	f023 020c 	bic.w	r2, r3, #12
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	689b      	ldr	r3, [r3, #8]
 801bd5e:	4995      	ldr	r1, [pc, #596]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd60:	4313      	orrs	r3, r2
 801bd62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	f003 0304 	and.w	r3, r3, #4
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d00a      	beq.n	801bd88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801bd72:	4b90      	ldr	r3, [pc, #576]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	68db      	ldr	r3, [r3, #12]
 801bd80:	498c      	ldr	r1, [pc, #560]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd82:	4313      	orrs	r3, r2
 801bd84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	f003 0308 	and.w	r3, r3, #8
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d00a      	beq.n	801bdaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801bd94:	4b87      	ldr	r3, [pc, #540]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	691b      	ldr	r3, [r3, #16]
 801bda2:	4984      	ldr	r1, [pc, #528]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bda4:	4313      	orrs	r3, r2
 801bda6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	f003 0310 	and.w	r3, r3, #16
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d00a      	beq.n	801bdcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801bdb6:	4b7f      	ldr	r3, [pc, #508]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bdb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bdbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	695b      	ldr	r3, [r3, #20]
 801bdc4:	497b      	ldr	r1, [pc, #492]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bdc6:	4313      	orrs	r3, r2
 801bdc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	f003 0320 	and.w	r3, r3, #32
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d00a      	beq.n	801bdee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bdd8:	4b76      	ldr	r3, [pc, #472]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bdde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	699b      	ldr	r3, [r3, #24]
 801bde6:	4973      	ldr	r1, [pc, #460]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bde8:	4313      	orrs	r3, r2
 801bdea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d00a      	beq.n	801be10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801bdfa:	4b6e      	ldr	r3, [pc, #440]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bdfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	69db      	ldr	r3, [r3, #28]
 801be08:	496a      	ldr	r1, [pc, #424]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be0a:	4313      	orrs	r3, r2
 801be0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d00a      	beq.n	801be32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801be1c:	4b65      	ldr	r3, [pc, #404]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	6a1b      	ldr	r3, [r3, #32]
 801be2a:	4962      	ldr	r1, [pc, #392]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be2c:	4313      	orrs	r3, r2
 801be2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d00a      	beq.n	801be54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801be3e:	4b5d      	ldr	r3, [pc, #372]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be4c:	4959      	ldr	r1, [pc, #356]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be4e:	4313      	orrs	r3, r2
 801be50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d00a      	beq.n	801be76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801be60:	4b54      	ldr	r3, [pc, #336]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be66:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be6e:	4951      	ldr	r1, [pc, #324]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be70:	4313      	orrs	r3, r2
 801be72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d015      	beq.n	801beae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801be82:	4b4c      	ldr	r3, [pc, #304]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be90:	4948      	ldr	r1, [pc, #288]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be92:	4313      	orrs	r3, r2
 801be94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bea0:	d105      	bne.n	801beae <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bea2:	4b44      	ldr	r3, [pc, #272]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bea4:	68db      	ldr	r3, [r3, #12]
 801bea6:	4a43      	ldr	r2, [pc, #268]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801beac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d015      	beq.n	801bee6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801beba:	4b3e      	ldr	r3, [pc, #248]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bec0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bec8:	493a      	ldr	r1, [pc, #232]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801beca:	4313      	orrs	r3, r2
 801becc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bed8:	d105      	bne.n	801bee6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801beda:	4b36      	ldr	r3, [pc, #216]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bedc:	68db      	ldr	r3, [r3, #12]
 801bede:	4a35      	ldr	r2, [pc, #212]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bee4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d015      	beq.n	801bf1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801bef2:	4b30      	ldr	r3, [pc, #192]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bef8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf00:	492c      	ldr	r1, [pc, #176]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf02:	4313      	orrs	r3, r2
 801bf04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bf10:	d105      	bne.n	801bf1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bf12:	4b28      	ldr	r3, [pc, #160]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf14:	68db      	ldr	r3, [r3, #12]
 801bf16:	4a27      	ldr	r2, [pc, #156]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bf1c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d015      	beq.n	801bf56 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801bf2a:	4b22      	ldr	r3, [pc, #136]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf38:	491e      	ldr	r1, [pc, #120]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf3a:	4313      	orrs	r3, r2
 801bf3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bf48:	d105      	bne.n	801bf56 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bf4a:	4b1a      	ldr	r3, [pc, #104]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf4c:	68db      	ldr	r3, [r3, #12]
 801bf4e:	4a19      	ldr	r2, [pc, #100]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bf54:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d015      	beq.n	801bf8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801bf62:	4b14      	ldr	r3, [pc, #80]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bf70:	4910      	ldr	r1, [pc, #64]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf72:	4313      	orrs	r3, r2
 801bf74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bf7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bf80:	d105      	bne.n	801bf8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bf82:	4b0c      	ldr	r3, [pc, #48]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf84:	68db      	ldr	r3, [r3, #12]
 801bf86:	4a0b      	ldr	r2, [pc, #44]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bf8c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d018      	beq.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801bf9a:	4b06      	ldr	r3, [pc, #24]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bf9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bfa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfa8:	4902      	ldr	r1, [pc, #8]	; (801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bfaa:	4313      	orrs	r3, r2
 801bfac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	e001      	b.n	801bfb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801bfb4:	40021000 	.word	0x40021000
 801bfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801bfbe:	d105      	bne.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bfc0:	4b21      	ldr	r3, [pc, #132]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bfc2:	68db      	ldr	r3, [r3, #12]
 801bfc4:	4a20      	ldr	r2, [pc, #128]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bfc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bfca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d015      	beq.n	801c004 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801bfd8:	4b1b      	ldr	r3, [pc, #108]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bfda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bfde:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bfe6:	4918      	ldr	r1, [pc, #96]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bfe8:	4313      	orrs	r3, r2
 801bfea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bff6:	d105      	bne.n	801c004 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bff8:	4b13      	ldr	r3, [pc, #76]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bffa:	68db      	ldr	r3, [r3, #12]
 801bffc:	4a12      	ldr	r2, [pc, #72]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c002:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d015      	beq.n	801c03c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801c010:	4b0d      	ldr	r3, [pc, #52]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801c012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c01e:	490a      	ldr	r1, [pc, #40]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801c020:	4313      	orrs	r3, r2
 801c022:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c02a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c02e:	d105      	bne.n	801c03c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801c030:	4b05      	ldr	r3, [pc, #20]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801c032:	68db      	ldr	r3, [r3, #12]
 801c034:	4a04      	ldr	r2, [pc, #16]	; (801c048 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801c036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c03a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801c03c:	7cbb      	ldrb	r3, [r7, #18]
}
 801c03e:	4618      	mov	r0, r3
 801c040:	3718      	adds	r7, #24
 801c042:	46bd      	mov	sp, r7
 801c044:	bd80      	pop	{r7, pc}
 801c046:	bf00      	nop
 801c048:	40021000 	.word	0x40021000

0801c04c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b084      	sub	sp, #16
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d101      	bne.n	801c05e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c05a:	2301      	movs	r3, #1
 801c05c:	e09d      	b.n	801c19a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c062:	2b00      	cmp	r3, #0
 801c064:	d108      	bne.n	801c078 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	685b      	ldr	r3, [r3, #4]
 801c06a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c06e:	d009      	beq.n	801c084 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	2200      	movs	r2, #0
 801c074:	61da      	str	r2, [r3, #28]
 801c076:	e005      	b.n	801c084 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	2200      	movs	r2, #0
 801c07c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	2200      	movs	r2, #0
 801c082:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	2200      	movs	r2, #0
 801c088:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c090:	b2db      	uxtb	r3, r3
 801c092:	2b00      	cmp	r3, #0
 801c094:	d106      	bne.n	801c0a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	2200      	movs	r2, #0
 801c09a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c09e:	6878      	ldr	r0, [r7, #4]
 801c0a0:	f7fa fc54 	bl	801694c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	2202      	movs	r2, #2
 801c0a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	681a      	ldr	r2, [r3, #0]
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c0ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	68db      	ldr	r3, [r3, #12]
 801c0c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c0c4:	d902      	bls.n	801c0cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801c0c6:	2300      	movs	r3, #0
 801c0c8:	60fb      	str	r3, [r7, #12]
 801c0ca:	e002      	b.n	801c0d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801c0cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801c0d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	68db      	ldr	r3, [r3, #12]
 801c0d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801c0da:	d007      	beq.n	801c0ec <HAL_SPI_Init+0xa0>
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	68db      	ldr	r3, [r3, #12]
 801c0e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c0e4:	d002      	beq.n	801c0ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	2200      	movs	r2, #0
 801c0ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	685b      	ldr	r3, [r3, #4]
 801c0f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	689b      	ldr	r3, [r3, #8]
 801c0f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c0fc:	431a      	orrs	r2, r3
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	691b      	ldr	r3, [r3, #16]
 801c102:	f003 0302 	and.w	r3, r3, #2
 801c106:	431a      	orrs	r2, r3
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	695b      	ldr	r3, [r3, #20]
 801c10c:	f003 0301 	and.w	r3, r3, #1
 801c110:	431a      	orrs	r2, r3
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	699b      	ldr	r3, [r3, #24]
 801c116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c11a:	431a      	orrs	r2, r3
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	69db      	ldr	r3, [r3, #28]
 801c120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c124:	431a      	orrs	r2, r3
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	6a1b      	ldr	r3, [r3, #32]
 801c12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c12e:	ea42 0103 	orr.w	r1, r2, r3
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c136:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	430a      	orrs	r2, r1
 801c140:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	699b      	ldr	r3, [r3, #24]
 801c146:	0c1b      	lsrs	r3, r3, #16
 801c148:	f003 0204 	and.w	r2, r3, #4
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c150:	f003 0310 	and.w	r3, r3, #16
 801c154:	431a      	orrs	r2, r3
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c15a:	f003 0308 	and.w	r3, r3, #8
 801c15e:	431a      	orrs	r2, r3
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	68db      	ldr	r3, [r3, #12]
 801c164:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c168:	ea42 0103 	orr.w	r1, r2, r3
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	430a      	orrs	r2, r1
 801c178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	69da      	ldr	r2, [r3, #28]
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	2200      	movs	r2, #0
 801c18e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	2201      	movs	r2, #1
 801c194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801c198:	2300      	movs	r3, #0
}
 801c19a:	4618      	mov	r0, r3
 801c19c:	3710      	adds	r7, #16
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	bd80      	pop	{r7, pc}

0801c1a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c1a2:	b580      	push	{r7, lr}
 801c1a4:	b088      	sub	sp, #32
 801c1a6:	af00      	add	r7, sp, #0
 801c1a8:	60f8      	str	r0, [r7, #12]
 801c1aa:	60b9      	str	r1, [r7, #8]
 801c1ac:	603b      	str	r3, [r7, #0]
 801c1ae:	4613      	mov	r3, r2
 801c1b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c1bc:	2b01      	cmp	r3, #1
 801c1be:	d101      	bne.n	801c1c4 <HAL_SPI_Transmit+0x22>
 801c1c0:	2302      	movs	r3, #2
 801c1c2:	e158      	b.n	801c476 <HAL_SPI_Transmit+0x2d4>
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	2201      	movs	r2, #1
 801c1c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c1cc:	f7fb fd3e 	bl	8017c4c <HAL_GetTick>
 801c1d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c1d2:	88fb      	ldrh	r3, [r7, #6]
 801c1d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c1dc:	b2db      	uxtb	r3, r3
 801c1de:	2b01      	cmp	r3, #1
 801c1e0:	d002      	beq.n	801c1e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c1e2:	2302      	movs	r3, #2
 801c1e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c1e6:	e13d      	b.n	801c464 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d002      	beq.n	801c1f4 <HAL_SPI_Transmit+0x52>
 801c1ee:	88fb      	ldrh	r3, [r7, #6]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d102      	bne.n	801c1fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c1f4:	2301      	movs	r3, #1
 801c1f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c1f8:	e134      	b.n	801c464 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	2203      	movs	r2, #3
 801c1fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	2200      	movs	r2, #0
 801c206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	68ba      	ldr	r2, [r7, #8]
 801c20c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	88fa      	ldrh	r2, [r7, #6]
 801c212:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	88fa      	ldrh	r2, [r7, #6]
 801c218:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	2200      	movs	r2, #0
 801c21e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	2200      	movs	r2, #0
 801c224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	2200      	movs	r2, #0
 801c22c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	2200      	movs	r2, #0
 801c234:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	2200      	movs	r2, #0
 801c23a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	689b      	ldr	r3, [r3, #8]
 801c240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c244:	d10f      	bne.n	801c266 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	681a      	ldr	r2, [r3, #0]
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	681a      	ldr	r2, [r3, #0]
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c266:	68fb      	ldr	r3, [r7, #12]
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c270:	2b40      	cmp	r3, #64	; 0x40
 801c272:	d007      	beq.n	801c284 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	681a      	ldr	r2, [r3, #0]
 801c27a:	68fb      	ldr	r3, [r7, #12]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	68db      	ldr	r3, [r3, #12]
 801c288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c28c:	d94b      	bls.n	801c326 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c28e:	68fb      	ldr	r3, [r7, #12]
 801c290:	685b      	ldr	r3, [r3, #4]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d002      	beq.n	801c29c <HAL_SPI_Transmit+0xfa>
 801c296:	8afb      	ldrh	r3, [r7, #22]
 801c298:	2b01      	cmp	r3, #1
 801c29a:	d13e      	bne.n	801c31a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2a0:	881a      	ldrh	r2, [r3, #0]
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2ac:	1c9a      	adds	r2, r3, #2
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c2b6:	b29b      	uxth	r3, r3
 801c2b8:	3b01      	subs	r3, #1
 801c2ba:	b29a      	uxth	r2, r3
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c2c0:	e02b      	b.n	801c31a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	689b      	ldr	r3, [r3, #8]
 801c2c8:	f003 0302 	and.w	r3, r3, #2
 801c2cc:	2b02      	cmp	r3, #2
 801c2ce:	d112      	bne.n	801c2f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2d4:	881a      	ldrh	r2, [r3, #0]
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2e0:	1c9a      	adds	r2, r3, #2
 801c2e2:	68fb      	ldr	r3, [r7, #12]
 801c2e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c2ea:	b29b      	uxth	r3, r3
 801c2ec:	3b01      	subs	r3, #1
 801c2ee:	b29a      	uxth	r2, r3
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c2f4:	e011      	b.n	801c31a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c2f6:	f7fb fca9 	bl	8017c4c <HAL_GetTick>
 801c2fa:	4602      	mov	r2, r0
 801c2fc:	69bb      	ldr	r3, [r7, #24]
 801c2fe:	1ad3      	subs	r3, r2, r3
 801c300:	683a      	ldr	r2, [r7, #0]
 801c302:	429a      	cmp	r2, r3
 801c304:	d803      	bhi.n	801c30e <HAL_SPI_Transmit+0x16c>
 801c306:	683b      	ldr	r3, [r7, #0]
 801c308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c30c:	d102      	bne.n	801c314 <HAL_SPI_Transmit+0x172>
 801c30e:	683b      	ldr	r3, [r7, #0]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d102      	bne.n	801c31a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801c314:	2303      	movs	r3, #3
 801c316:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c318:	e0a4      	b.n	801c464 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c31e:	b29b      	uxth	r3, r3
 801c320:	2b00      	cmp	r3, #0
 801c322:	d1ce      	bne.n	801c2c2 <HAL_SPI_Transmit+0x120>
 801c324:	e07c      	b.n	801c420 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	685b      	ldr	r3, [r3, #4]
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d002      	beq.n	801c334 <HAL_SPI_Transmit+0x192>
 801c32e:	8afb      	ldrh	r3, [r7, #22]
 801c330:	2b01      	cmp	r3, #1
 801c332:	d170      	bne.n	801c416 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c338:	b29b      	uxth	r3, r3
 801c33a:	2b01      	cmp	r3, #1
 801c33c:	d912      	bls.n	801c364 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c33e:	68fb      	ldr	r3, [r7, #12]
 801c340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c342:	881a      	ldrh	r2, [r3, #0]
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c34e:	1c9a      	adds	r2, r3, #2
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c354:	68fb      	ldr	r3, [r7, #12]
 801c356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c358:	b29b      	uxth	r3, r3
 801c35a:	3b02      	subs	r3, #2
 801c35c:	b29a      	uxth	r2, r3
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c362:	e058      	b.n	801c416 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c364:	68fb      	ldr	r3, [r7, #12]
 801c366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c368:	68fb      	ldr	r3, [r7, #12]
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	330c      	adds	r3, #12
 801c36e:	7812      	ldrb	r2, [r2, #0]
 801c370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c376:	1c5a      	adds	r2, r3, #1
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c380:	b29b      	uxth	r3, r3
 801c382:	3b01      	subs	r3, #1
 801c384:	b29a      	uxth	r2, r3
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801c38a:	e044      	b.n	801c416 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	689b      	ldr	r3, [r3, #8]
 801c392:	f003 0302 	and.w	r3, r3, #2
 801c396:	2b02      	cmp	r3, #2
 801c398:	d12b      	bne.n	801c3f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c39e:	b29b      	uxth	r3, r3
 801c3a0:	2b01      	cmp	r3, #1
 801c3a2:	d912      	bls.n	801c3ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3a8:	881a      	ldrh	r2, [r3, #0]
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3b4:	1c9a      	adds	r2, r3, #2
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c3be:	b29b      	uxth	r3, r3
 801c3c0:	3b02      	subs	r3, #2
 801c3c2:	b29a      	uxth	r2, r3
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c3c8:	e025      	b.n	801c416 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	330c      	adds	r3, #12
 801c3d4:	7812      	ldrb	r2, [r2, #0]
 801c3d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3dc:	1c5a      	adds	r2, r3, #1
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c3e6:	b29b      	uxth	r3, r3
 801c3e8:	3b01      	subs	r3, #1
 801c3ea:	b29a      	uxth	r2, r3
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c3f0:	e011      	b.n	801c416 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c3f2:	f7fb fc2b 	bl	8017c4c <HAL_GetTick>
 801c3f6:	4602      	mov	r2, r0
 801c3f8:	69bb      	ldr	r3, [r7, #24]
 801c3fa:	1ad3      	subs	r3, r2, r3
 801c3fc:	683a      	ldr	r2, [r7, #0]
 801c3fe:	429a      	cmp	r2, r3
 801c400:	d803      	bhi.n	801c40a <HAL_SPI_Transmit+0x268>
 801c402:	683b      	ldr	r3, [r7, #0]
 801c404:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c408:	d102      	bne.n	801c410 <HAL_SPI_Transmit+0x26e>
 801c40a:	683b      	ldr	r3, [r7, #0]
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	d102      	bne.n	801c416 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801c410:	2303      	movs	r3, #3
 801c412:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c414:	e026      	b.n	801c464 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c41a:	b29b      	uxth	r3, r3
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d1b5      	bne.n	801c38c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c420:	69ba      	ldr	r2, [r7, #24]
 801c422:	6839      	ldr	r1, [r7, #0]
 801c424:	68f8      	ldr	r0, [r7, #12]
 801c426:	f000 fce3 	bl	801cdf0 <SPI_EndRxTxTransaction>
 801c42a:	4603      	mov	r3, r0
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d002      	beq.n	801c436 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	2220      	movs	r2, #32
 801c434:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	689b      	ldr	r3, [r3, #8]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d10a      	bne.n	801c454 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c43e:	2300      	movs	r3, #0
 801c440:	613b      	str	r3, [r7, #16]
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	68db      	ldr	r3, [r3, #12]
 801c448:	613b      	str	r3, [r7, #16]
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	689b      	ldr	r3, [r3, #8]
 801c450:	613b      	str	r3, [r7, #16]
 801c452:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d002      	beq.n	801c462 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801c45c:	2301      	movs	r3, #1
 801c45e:	77fb      	strb	r3, [r7, #31]
 801c460:	e000      	b.n	801c464 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801c462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	2201      	movs	r2, #1
 801c468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	2200      	movs	r2, #0
 801c470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c474:	7ffb      	ldrb	r3, [r7, #31]
}
 801c476:	4618      	mov	r0, r3
 801c478:	3720      	adds	r7, #32
 801c47a:	46bd      	mov	sp, r7
 801c47c:	bd80      	pop	{r7, pc}

0801c47e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c47e:	b580      	push	{r7, lr}
 801c480:	b088      	sub	sp, #32
 801c482:	af02      	add	r7, sp, #8
 801c484:	60f8      	str	r0, [r7, #12]
 801c486:	60b9      	str	r1, [r7, #8]
 801c488:	603b      	str	r3, [r7, #0]
 801c48a:	4613      	mov	r3, r2
 801c48c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c48e:	2300      	movs	r3, #0
 801c490:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	685b      	ldr	r3, [r3, #4]
 801c496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c49a:	d112      	bne.n	801c4c2 <HAL_SPI_Receive+0x44>
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	689b      	ldr	r3, [r3, #8]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d10e      	bne.n	801c4c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	2204      	movs	r2, #4
 801c4a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c4ac:	88fa      	ldrh	r2, [r7, #6]
 801c4ae:	683b      	ldr	r3, [r7, #0]
 801c4b0:	9300      	str	r3, [sp, #0]
 801c4b2:	4613      	mov	r3, r2
 801c4b4:	68ba      	ldr	r2, [r7, #8]
 801c4b6:	68b9      	ldr	r1, [r7, #8]
 801c4b8:	68f8      	ldr	r0, [r7, #12]
 801c4ba:	f000 f910 	bl	801c6de <HAL_SPI_TransmitReceive>
 801c4be:	4603      	mov	r3, r0
 801c4c0:	e109      	b.n	801c6d6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c4c8:	2b01      	cmp	r3, #1
 801c4ca:	d101      	bne.n	801c4d0 <HAL_SPI_Receive+0x52>
 801c4cc:	2302      	movs	r3, #2
 801c4ce:	e102      	b.n	801c6d6 <HAL_SPI_Receive+0x258>
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	2201      	movs	r2, #1
 801c4d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c4d8:	f7fb fbb8 	bl	8017c4c <HAL_GetTick>
 801c4dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c4e4:	b2db      	uxtb	r3, r3
 801c4e6:	2b01      	cmp	r3, #1
 801c4e8:	d002      	beq.n	801c4f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c4ea:	2302      	movs	r3, #2
 801c4ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c4ee:	e0e9      	b.n	801c6c4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801c4f0:	68bb      	ldr	r3, [r7, #8]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d002      	beq.n	801c4fc <HAL_SPI_Receive+0x7e>
 801c4f6:	88fb      	ldrh	r3, [r7, #6]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d102      	bne.n	801c502 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c4fc:	2301      	movs	r3, #1
 801c4fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c500:	e0e0      	b.n	801c6c4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	2204      	movs	r2, #4
 801c506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	2200      	movs	r2, #0
 801c50e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	68ba      	ldr	r2, [r7, #8]
 801c514:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	88fa      	ldrh	r2, [r7, #6]
 801c51a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	88fa      	ldrh	r2, [r7, #6]
 801c522:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	2200      	movs	r2, #0
 801c52a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	2200      	movs	r2, #0
 801c530:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	2200      	movs	r2, #0
 801c536:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	2200      	movs	r2, #0
 801c53c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	2200      	movs	r2, #0
 801c542:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	68db      	ldr	r3, [r3, #12]
 801c548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c54c:	d908      	bls.n	801c560 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	685a      	ldr	r2, [r3, #4]
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c55c:	605a      	str	r2, [r3, #4]
 801c55e:	e007      	b.n	801c570 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	685a      	ldr	r2, [r3, #4]
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c56e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	689b      	ldr	r3, [r3, #8]
 801c574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c578:	d10f      	bne.n	801c59a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	681b      	ldr	r3, [r3, #0]
 801c57e:	681a      	ldr	r2, [r3, #0]
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	681a      	ldr	r2, [r3, #0]
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c598:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c5a4:	2b40      	cmp	r3, #64	; 0x40
 801c5a6:	d007      	beq.n	801c5b8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	681a      	ldr	r2, [r3, #0]
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c5b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	68db      	ldr	r3, [r3, #12]
 801c5bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c5c0:	d867      	bhi.n	801c692 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c5c2:	e030      	b.n	801c626 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	689b      	ldr	r3, [r3, #8]
 801c5ca:	f003 0301 	and.w	r3, r3, #1
 801c5ce:	2b01      	cmp	r3, #1
 801c5d0:	d117      	bne.n	801c602 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	f103 020c 	add.w	r2, r3, #12
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5de:	7812      	ldrb	r2, [r2, #0]
 801c5e0:	b2d2      	uxtb	r2, r2
 801c5e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5e8:	1c5a      	adds	r2, r3, #1
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c5f4:	b29b      	uxth	r3, r3
 801c5f6:	3b01      	subs	r3, #1
 801c5f8:	b29a      	uxth	r2, r3
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c600:	e011      	b.n	801c626 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c602:	f7fb fb23 	bl	8017c4c <HAL_GetTick>
 801c606:	4602      	mov	r2, r0
 801c608:	693b      	ldr	r3, [r7, #16]
 801c60a:	1ad3      	subs	r3, r2, r3
 801c60c:	683a      	ldr	r2, [r7, #0]
 801c60e:	429a      	cmp	r2, r3
 801c610:	d803      	bhi.n	801c61a <HAL_SPI_Receive+0x19c>
 801c612:	683b      	ldr	r3, [r7, #0]
 801c614:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c618:	d102      	bne.n	801c620 <HAL_SPI_Receive+0x1a2>
 801c61a:	683b      	ldr	r3, [r7, #0]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d102      	bne.n	801c626 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801c620:	2303      	movs	r3, #3
 801c622:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c624:	e04e      	b.n	801c6c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c62c:	b29b      	uxth	r3, r3
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d1c8      	bne.n	801c5c4 <HAL_SPI_Receive+0x146>
 801c632:	e034      	b.n	801c69e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	689b      	ldr	r3, [r3, #8]
 801c63a:	f003 0301 	and.w	r3, r3, #1
 801c63e:	2b01      	cmp	r3, #1
 801c640:	d115      	bne.n	801c66e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c642:	68fb      	ldr	r3, [r7, #12]
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	68da      	ldr	r2, [r3, #12]
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c64c:	b292      	uxth	r2, r2
 801c64e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c654:	1c9a      	adds	r2, r3, #2
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c660:	b29b      	uxth	r3, r3
 801c662:	3b01      	subs	r3, #1
 801c664:	b29a      	uxth	r2, r3
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c66c:	e011      	b.n	801c692 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c66e:	f7fb faed 	bl	8017c4c <HAL_GetTick>
 801c672:	4602      	mov	r2, r0
 801c674:	693b      	ldr	r3, [r7, #16]
 801c676:	1ad3      	subs	r3, r2, r3
 801c678:	683a      	ldr	r2, [r7, #0]
 801c67a:	429a      	cmp	r2, r3
 801c67c:	d803      	bhi.n	801c686 <HAL_SPI_Receive+0x208>
 801c67e:	683b      	ldr	r3, [r7, #0]
 801c680:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c684:	d102      	bne.n	801c68c <HAL_SPI_Receive+0x20e>
 801c686:	683b      	ldr	r3, [r7, #0]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d102      	bne.n	801c692 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801c68c:	2303      	movs	r3, #3
 801c68e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c690:	e018      	b.n	801c6c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c698:	b29b      	uxth	r3, r3
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d1ca      	bne.n	801c634 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c69e:	693a      	ldr	r2, [r7, #16]
 801c6a0:	6839      	ldr	r1, [r7, #0]
 801c6a2:	68f8      	ldr	r0, [r7, #12]
 801c6a4:	f000 fb4c 	bl	801cd40 <SPI_EndRxTransaction>
 801c6a8:	4603      	mov	r3, r0
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d002      	beq.n	801c6b4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	2220      	movs	r2, #32
 801c6b2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d002      	beq.n	801c6c2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801c6bc:	2301      	movs	r3, #1
 801c6be:	75fb      	strb	r3, [r7, #23]
 801c6c0:	e000      	b.n	801c6c4 <HAL_SPI_Receive+0x246>
  }

error :
 801c6c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	2201      	movs	r2, #1
 801c6c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	3718      	adds	r7, #24
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	bd80      	pop	{r7, pc}

0801c6de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c6de:	b580      	push	{r7, lr}
 801c6e0:	b08a      	sub	sp, #40	; 0x28
 801c6e2:	af00      	add	r7, sp, #0
 801c6e4:	60f8      	str	r0, [r7, #12]
 801c6e6:	60b9      	str	r1, [r7, #8]
 801c6e8:	607a      	str	r2, [r7, #4]
 801c6ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c6ec:	2301      	movs	r3, #1
 801c6ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c6fc:	2b01      	cmp	r3, #1
 801c6fe:	d101      	bne.n	801c704 <HAL_SPI_TransmitReceive+0x26>
 801c700:	2302      	movs	r3, #2
 801c702:	e1fb      	b.n	801cafc <HAL_SPI_TransmitReceive+0x41e>
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	2201      	movs	r2, #1
 801c708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c70c:	f7fb fa9e 	bl	8017c4c <HAL_GetTick>
 801c710:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c718:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	685b      	ldr	r3, [r3, #4]
 801c71e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801c720:	887b      	ldrh	r3, [r7, #2]
 801c722:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801c724:	887b      	ldrh	r3, [r7, #2]
 801c726:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c728:	7efb      	ldrb	r3, [r7, #27]
 801c72a:	2b01      	cmp	r3, #1
 801c72c:	d00e      	beq.n	801c74c <HAL_SPI_TransmitReceive+0x6e>
 801c72e:	697b      	ldr	r3, [r7, #20]
 801c730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c734:	d106      	bne.n	801c744 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	689b      	ldr	r3, [r3, #8]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d102      	bne.n	801c744 <HAL_SPI_TransmitReceive+0x66>
 801c73e:	7efb      	ldrb	r3, [r7, #27]
 801c740:	2b04      	cmp	r3, #4
 801c742:	d003      	beq.n	801c74c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801c744:	2302      	movs	r3, #2
 801c746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c74a:	e1cd      	b.n	801cae8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c74c:	68bb      	ldr	r3, [r7, #8]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d005      	beq.n	801c75e <HAL_SPI_TransmitReceive+0x80>
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d002      	beq.n	801c75e <HAL_SPI_TransmitReceive+0x80>
 801c758:	887b      	ldrh	r3, [r7, #2]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d103      	bne.n	801c766 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801c75e:	2301      	movs	r3, #1
 801c760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c764:	e1c0      	b.n	801cae8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c76c:	b2db      	uxtb	r3, r3
 801c76e:	2b04      	cmp	r3, #4
 801c770:	d003      	beq.n	801c77a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	2205      	movs	r2, #5
 801c776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	2200      	movs	r2, #0
 801c77e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	687a      	ldr	r2, [r7, #4]
 801c784:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	887a      	ldrh	r2, [r7, #2]
 801c78a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	887a      	ldrh	r2, [r7, #2]
 801c792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	68ba      	ldr	r2, [r7, #8]
 801c79a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	887a      	ldrh	r2, [r7, #2]
 801c7a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	887a      	ldrh	r2, [r7, #2]
 801c7a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	2200      	movs	r2, #0
 801c7ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	68db      	ldr	r3, [r3, #12]
 801c7b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c7bc:	d802      	bhi.n	801c7c4 <HAL_SPI_TransmitReceive+0xe6>
 801c7be:	8a3b      	ldrh	r3, [r7, #16]
 801c7c0:	2b01      	cmp	r3, #1
 801c7c2:	d908      	bls.n	801c7d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	685a      	ldr	r2, [r3, #4]
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	681b      	ldr	r3, [r3, #0]
 801c7ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c7d2:	605a      	str	r2, [r3, #4]
 801c7d4:	e007      	b.n	801c7e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	685a      	ldr	r2, [r3, #4]
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c7e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c7f0:	2b40      	cmp	r3, #64	; 0x40
 801c7f2:	d007      	beq.n	801c804 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	681a      	ldr	r2, [r3, #0]
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	68db      	ldr	r3, [r3, #12]
 801c808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c80c:	d97c      	bls.n	801c908 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	685b      	ldr	r3, [r3, #4]
 801c812:	2b00      	cmp	r3, #0
 801c814:	d002      	beq.n	801c81c <HAL_SPI_TransmitReceive+0x13e>
 801c816:	8a7b      	ldrh	r3, [r7, #18]
 801c818:	2b01      	cmp	r3, #1
 801c81a:	d169      	bne.n	801c8f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c820:	881a      	ldrh	r2, [r3, #0]
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c82c:	1c9a      	adds	r2, r3, #2
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c836:	b29b      	uxth	r3, r3
 801c838:	3b01      	subs	r3, #1
 801c83a:	b29a      	uxth	r2, r3
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c840:	e056      	b.n	801c8f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	689b      	ldr	r3, [r3, #8]
 801c848:	f003 0302 	and.w	r3, r3, #2
 801c84c:	2b02      	cmp	r3, #2
 801c84e:	d11b      	bne.n	801c888 <HAL_SPI_TransmitReceive+0x1aa>
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c854:	b29b      	uxth	r3, r3
 801c856:	2b00      	cmp	r3, #0
 801c858:	d016      	beq.n	801c888 <HAL_SPI_TransmitReceive+0x1aa>
 801c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c85c:	2b01      	cmp	r3, #1
 801c85e:	d113      	bne.n	801c888 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c864:	881a      	ldrh	r2, [r3, #0]
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c870:	1c9a      	adds	r2, r3, #2
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c87a:	b29b      	uxth	r3, r3
 801c87c:	3b01      	subs	r3, #1
 801c87e:	b29a      	uxth	r2, r3
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c884:	2300      	movs	r3, #0
 801c886:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	689b      	ldr	r3, [r3, #8]
 801c88e:	f003 0301 	and.w	r3, r3, #1
 801c892:	2b01      	cmp	r3, #1
 801c894:	d11c      	bne.n	801c8d0 <HAL_SPI_TransmitReceive+0x1f2>
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c89c:	b29b      	uxth	r3, r3
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d016      	beq.n	801c8d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	68da      	ldr	r2, [r3, #12]
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8ac:	b292      	uxth	r2, r2
 801c8ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8b4:	1c9a      	adds	r2, r3, #2
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c8c0:	b29b      	uxth	r3, r3
 801c8c2:	3b01      	subs	r3, #1
 801c8c4:	b29a      	uxth	r2, r3
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c8cc:	2301      	movs	r3, #1
 801c8ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c8d0:	f7fb f9bc 	bl	8017c4c <HAL_GetTick>
 801c8d4:	4602      	mov	r2, r0
 801c8d6:	69fb      	ldr	r3, [r7, #28]
 801c8d8:	1ad3      	subs	r3, r2, r3
 801c8da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c8dc:	429a      	cmp	r2, r3
 801c8de:	d807      	bhi.n	801c8f0 <HAL_SPI_TransmitReceive+0x212>
 801c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8e6:	d003      	beq.n	801c8f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801c8e8:	2303      	movs	r3, #3
 801c8ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c8ee:	e0fb      	b.n	801cae8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8f4:	b29b      	uxth	r3, r3
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d1a3      	bne.n	801c842 <HAL_SPI_TransmitReceive+0x164>
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c900:	b29b      	uxth	r3, r3
 801c902:	2b00      	cmp	r3, #0
 801c904:	d19d      	bne.n	801c842 <HAL_SPI_TransmitReceive+0x164>
 801c906:	e0df      	b.n	801cac8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	685b      	ldr	r3, [r3, #4]
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d003      	beq.n	801c918 <HAL_SPI_TransmitReceive+0x23a>
 801c910:	8a7b      	ldrh	r3, [r7, #18]
 801c912:	2b01      	cmp	r3, #1
 801c914:	f040 80cb 	bne.w	801caae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c91c:	b29b      	uxth	r3, r3
 801c91e:	2b01      	cmp	r3, #1
 801c920:	d912      	bls.n	801c948 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c926:	881a      	ldrh	r2, [r3, #0]
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c932:	1c9a      	adds	r2, r3, #2
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c93c:	b29b      	uxth	r3, r3
 801c93e:	3b02      	subs	r3, #2
 801c940:	b29a      	uxth	r2, r3
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c946:	e0b2      	b.n	801caae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	330c      	adds	r3, #12
 801c952:	7812      	ldrb	r2, [r2, #0]
 801c954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c95a:	1c5a      	adds	r2, r3, #1
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c964:	b29b      	uxth	r3, r3
 801c966:	3b01      	subs	r3, #1
 801c968:	b29a      	uxth	r2, r3
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c96e:	e09e      	b.n	801caae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	689b      	ldr	r3, [r3, #8]
 801c976:	f003 0302 	and.w	r3, r3, #2
 801c97a:	2b02      	cmp	r3, #2
 801c97c:	d134      	bne.n	801c9e8 <HAL_SPI_TransmitReceive+0x30a>
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c982:	b29b      	uxth	r3, r3
 801c984:	2b00      	cmp	r3, #0
 801c986:	d02f      	beq.n	801c9e8 <HAL_SPI_TransmitReceive+0x30a>
 801c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c98a:	2b01      	cmp	r3, #1
 801c98c:	d12c      	bne.n	801c9e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c992:	b29b      	uxth	r3, r3
 801c994:	2b01      	cmp	r3, #1
 801c996:	d912      	bls.n	801c9be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c99c:	881a      	ldrh	r2, [r3, #0]
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9a8:	1c9a      	adds	r2, r3, #2
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c9b2:	b29b      	uxth	r3, r3
 801c9b4:	3b02      	subs	r3, #2
 801c9b6:	b29a      	uxth	r2, r3
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c9bc:	e012      	b.n	801c9e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	330c      	adds	r3, #12
 801c9c8:	7812      	ldrb	r2, [r2, #0]
 801c9ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9d0:	1c5a      	adds	r2, r3, #1
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c9da:	b29b      	uxth	r3, r3
 801c9dc:	3b01      	subs	r3, #1
 801c9de:	b29a      	uxth	r2, r3
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c9e4:	2300      	movs	r3, #0
 801c9e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	689b      	ldr	r3, [r3, #8]
 801c9ee:	f003 0301 	and.w	r3, r3, #1
 801c9f2:	2b01      	cmp	r3, #1
 801c9f4:	d148      	bne.n	801ca88 <HAL_SPI_TransmitReceive+0x3aa>
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c9fc:	b29b      	uxth	r3, r3
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d042      	beq.n	801ca88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801ca02:	68fb      	ldr	r3, [r7, #12]
 801ca04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ca08:	b29b      	uxth	r3, r3
 801ca0a:	2b01      	cmp	r3, #1
 801ca0c:	d923      	bls.n	801ca56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	68da      	ldr	r2, [r3, #12]
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca18:	b292      	uxth	r2, r2
 801ca1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca20:	1c9a      	adds	r2, r3, #2
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ca2c:	b29b      	uxth	r3, r3
 801ca2e:	3b02      	subs	r3, #2
 801ca30:	b29a      	uxth	r2, r3
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801ca38:	68fb      	ldr	r3, [r7, #12]
 801ca3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ca3e:	b29b      	uxth	r3, r3
 801ca40:	2b01      	cmp	r3, #1
 801ca42:	d81f      	bhi.n	801ca84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	685a      	ldr	r2, [r3, #4]
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ca52:	605a      	str	r2, [r3, #4]
 801ca54:	e016      	b.n	801ca84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	f103 020c 	add.w	r2, r3, #12
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca62:	7812      	ldrb	r2, [r2, #0]
 801ca64:	b2d2      	uxtb	r2, r2
 801ca66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca6c:	1c5a      	adds	r2, r3, #1
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801ca72:	68fb      	ldr	r3, [r7, #12]
 801ca74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ca78:	b29b      	uxth	r3, r3
 801ca7a:	3b01      	subs	r3, #1
 801ca7c:	b29a      	uxth	r2, r3
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ca84:	2301      	movs	r3, #1
 801ca86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801ca88:	f7fb f8e0 	bl	8017c4c <HAL_GetTick>
 801ca8c:	4602      	mov	r2, r0
 801ca8e:	69fb      	ldr	r3, [r7, #28]
 801ca90:	1ad3      	subs	r3, r2, r3
 801ca92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca94:	429a      	cmp	r2, r3
 801ca96:	d803      	bhi.n	801caa0 <HAL_SPI_TransmitReceive+0x3c2>
 801ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca9e:	d102      	bne.n	801caa6 <HAL_SPI_TransmitReceive+0x3c8>
 801caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d103      	bne.n	801caae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801caa6:	2303      	movs	r3, #3
 801caa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801caac:	e01c      	b.n	801cae8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cab2:	b29b      	uxth	r3, r3
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	f47f af5b 	bne.w	801c970 <HAL_SPI_TransmitReceive+0x292>
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801cac0:	b29b      	uxth	r3, r3
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	f47f af54 	bne.w	801c970 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801cac8:	69fa      	ldr	r2, [r7, #28]
 801caca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cacc:	68f8      	ldr	r0, [r7, #12]
 801cace:	f000 f98f 	bl	801cdf0 <SPI_EndRxTxTransaction>
 801cad2:	4603      	mov	r3, r0
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d006      	beq.n	801cae6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801cad8:	2301      	movs	r3, #1
 801cada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	2220      	movs	r2, #32
 801cae2:	661a      	str	r2, [r3, #96]	; 0x60
 801cae4:	e000      	b.n	801cae8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801cae6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	2201      	movs	r2, #1
 801caec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	2200      	movs	r2, #0
 801caf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801caf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801cafc:	4618      	mov	r0, r3
 801cafe:	3728      	adds	r7, #40	; 0x28
 801cb00:	46bd      	mov	sp, r7
 801cb02:	bd80      	pop	{r7, pc}

0801cb04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b088      	sub	sp, #32
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	60f8      	str	r0, [r7, #12]
 801cb0c:	60b9      	str	r1, [r7, #8]
 801cb0e:	603b      	str	r3, [r7, #0]
 801cb10:	4613      	mov	r3, r2
 801cb12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cb14:	f7fb f89a 	bl	8017c4c <HAL_GetTick>
 801cb18:	4602      	mov	r2, r0
 801cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb1c:	1a9b      	subs	r3, r3, r2
 801cb1e:	683a      	ldr	r2, [r7, #0]
 801cb20:	4413      	add	r3, r2
 801cb22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cb24:	f7fb f892 	bl	8017c4c <HAL_GetTick>
 801cb28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cb2a:	4b39      	ldr	r3, [pc, #228]	; (801cc10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	015b      	lsls	r3, r3, #5
 801cb30:	0d1b      	lsrs	r3, r3, #20
 801cb32:	69fa      	ldr	r2, [r7, #28]
 801cb34:	fb02 f303 	mul.w	r3, r2, r3
 801cb38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cb3a:	e054      	b.n	801cbe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cb3c:	683b      	ldr	r3, [r7, #0]
 801cb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb42:	d050      	beq.n	801cbe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cb44:	f7fb f882 	bl	8017c4c <HAL_GetTick>
 801cb48:	4602      	mov	r2, r0
 801cb4a:	69bb      	ldr	r3, [r7, #24]
 801cb4c:	1ad3      	subs	r3, r2, r3
 801cb4e:	69fa      	ldr	r2, [r7, #28]
 801cb50:	429a      	cmp	r2, r3
 801cb52:	d902      	bls.n	801cb5a <SPI_WaitFlagStateUntilTimeout+0x56>
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d13d      	bne.n	801cbd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	681b      	ldr	r3, [r3, #0]
 801cb5e:	685a      	ldr	r2, [r3, #4]
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cb68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	685b      	ldr	r3, [r3, #4]
 801cb6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cb72:	d111      	bne.n	801cb98 <SPI_WaitFlagStateUntilTimeout+0x94>
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	689b      	ldr	r3, [r3, #8]
 801cb78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cb7c:	d004      	beq.n	801cb88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	689b      	ldr	r3, [r3, #8]
 801cb82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb86:	d107      	bne.n	801cb98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	681a      	ldr	r2, [r3, #0]
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cb96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cba0:	d10f      	bne.n	801cbc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	681a      	ldr	r2, [r3, #0]
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cbb0:	601a      	str	r2, [r3, #0]
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	681a      	ldr	r2, [r3, #0]
 801cbb8:	68fb      	ldr	r3, [r7, #12]
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cbc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cbc2:	68fb      	ldr	r3, [r7, #12]
 801cbc4:	2201      	movs	r2, #1
 801cbc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	2200      	movs	r2, #0
 801cbce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801cbd2:	2303      	movs	r3, #3
 801cbd4:	e017      	b.n	801cc06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cbd6:	697b      	ldr	r3, [r7, #20]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d101      	bne.n	801cbe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cbdc:	2300      	movs	r3, #0
 801cbde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cbe0:	697b      	ldr	r3, [r7, #20]
 801cbe2:	3b01      	subs	r3, #1
 801cbe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	689a      	ldr	r2, [r3, #8]
 801cbec:	68bb      	ldr	r3, [r7, #8]
 801cbee:	4013      	ands	r3, r2
 801cbf0:	68ba      	ldr	r2, [r7, #8]
 801cbf2:	429a      	cmp	r2, r3
 801cbf4:	bf0c      	ite	eq
 801cbf6:	2301      	moveq	r3, #1
 801cbf8:	2300      	movne	r3, #0
 801cbfa:	b2db      	uxtb	r3, r3
 801cbfc:	461a      	mov	r2, r3
 801cbfe:	79fb      	ldrb	r3, [r7, #7]
 801cc00:	429a      	cmp	r2, r3
 801cc02:	d19b      	bne.n	801cb3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cc04:	2300      	movs	r3, #0
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	3720      	adds	r7, #32
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bd80      	pop	{r7, pc}
 801cc0e:	bf00      	nop
 801cc10:	20000000 	.word	0x20000000

0801cc14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b08a      	sub	sp, #40	; 0x28
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	60f8      	str	r0, [r7, #12]
 801cc1c:	60b9      	str	r1, [r7, #8]
 801cc1e:	607a      	str	r2, [r7, #4]
 801cc20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801cc22:	2300      	movs	r3, #0
 801cc24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801cc26:	f7fb f811 	bl	8017c4c <HAL_GetTick>
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc2e:	1a9b      	subs	r3, r3, r2
 801cc30:	683a      	ldr	r2, [r7, #0]
 801cc32:	4413      	add	r3, r2
 801cc34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801cc36:	f7fb f809 	bl	8017c4c <HAL_GetTick>
 801cc3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	330c      	adds	r3, #12
 801cc42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801cc44:	4b3d      	ldr	r3, [pc, #244]	; (801cd3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 801cc46:	681a      	ldr	r2, [r3, #0]
 801cc48:	4613      	mov	r3, r2
 801cc4a:	009b      	lsls	r3, r3, #2
 801cc4c:	4413      	add	r3, r2
 801cc4e:	00da      	lsls	r2, r3, #3
 801cc50:	1ad3      	subs	r3, r2, r3
 801cc52:	0d1b      	lsrs	r3, r3, #20
 801cc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cc56:	fb02 f303 	mul.w	r3, r2, r3
 801cc5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801cc5c:	e060      	b.n	801cd20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801cc5e:	68bb      	ldr	r3, [r7, #8]
 801cc60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801cc64:	d107      	bne.n	801cc76 <SPI_WaitFifoStateUntilTimeout+0x62>
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d104      	bne.n	801cc76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801cc6c:	69fb      	ldr	r3, [r7, #28]
 801cc6e:	781b      	ldrb	r3, [r3, #0]
 801cc70:	b2db      	uxtb	r3, r3
 801cc72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801cc74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801cc76:	683b      	ldr	r3, [r7, #0]
 801cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc7c:	d050      	beq.n	801cd20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cc7e:	f7fa ffe5 	bl	8017c4c <HAL_GetTick>
 801cc82:	4602      	mov	r2, r0
 801cc84:	6a3b      	ldr	r3, [r7, #32]
 801cc86:	1ad3      	subs	r3, r2, r3
 801cc88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cc8a:	429a      	cmp	r2, r3
 801cc8c:	d902      	bls.n	801cc94 <SPI_WaitFifoStateUntilTimeout+0x80>
 801cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d13d      	bne.n	801cd10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	685a      	ldr	r2, [r3, #4]
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cca2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cca4:	68fb      	ldr	r3, [r7, #12]
 801cca6:	685b      	ldr	r3, [r3, #4]
 801cca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccac:	d111      	bne.n	801ccd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	689b      	ldr	r3, [r3, #8]
 801ccb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ccb6:	d004      	beq.n	801ccc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	689b      	ldr	r3, [r3, #8]
 801ccbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ccc0:	d107      	bne.n	801ccd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	681a      	ldr	r2, [r3, #0]
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ccd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ccda:	d10f      	bne.n	801ccfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	681a      	ldr	r2, [r3, #0]
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ccea:	601a      	str	r2, [r3, #0]
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	681a      	ldr	r2, [r3, #0]
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ccfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	2201      	movs	r2, #1
 801cd00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	2200      	movs	r2, #0
 801cd08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801cd0c:	2303      	movs	r3, #3
 801cd0e:	e010      	b.n	801cd32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cd10:	69bb      	ldr	r3, [r7, #24]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d101      	bne.n	801cd1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801cd16:	2300      	movs	r3, #0
 801cd18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801cd1a:	69bb      	ldr	r3, [r7, #24]
 801cd1c:	3b01      	subs	r3, #1
 801cd1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	689a      	ldr	r2, [r3, #8]
 801cd26:	68bb      	ldr	r3, [r7, #8]
 801cd28:	4013      	ands	r3, r2
 801cd2a:	687a      	ldr	r2, [r7, #4]
 801cd2c:	429a      	cmp	r2, r3
 801cd2e:	d196      	bne.n	801cc5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801cd30:	2300      	movs	r3, #0
}
 801cd32:	4618      	mov	r0, r3
 801cd34:	3728      	adds	r7, #40	; 0x28
 801cd36:	46bd      	mov	sp, r7
 801cd38:	bd80      	pop	{r7, pc}
 801cd3a:	bf00      	nop
 801cd3c:	20000000 	.word	0x20000000

0801cd40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cd40:	b580      	push	{r7, lr}
 801cd42:	b086      	sub	sp, #24
 801cd44:	af02      	add	r7, sp, #8
 801cd46:	60f8      	str	r0, [r7, #12]
 801cd48:	60b9      	str	r1, [r7, #8]
 801cd4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	685b      	ldr	r3, [r3, #4]
 801cd50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd54:	d111      	bne.n	801cd7a <SPI_EndRxTransaction+0x3a>
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	689b      	ldr	r3, [r3, #8]
 801cd5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cd5e:	d004      	beq.n	801cd6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	689b      	ldr	r3, [r3, #8]
 801cd64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd68:	d107      	bne.n	801cd7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	681a      	ldr	r2, [r3, #0]
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cd78:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	9300      	str	r3, [sp, #0]
 801cd7e:	68bb      	ldr	r3, [r7, #8]
 801cd80:	2200      	movs	r2, #0
 801cd82:	2180      	movs	r1, #128	; 0x80
 801cd84:	68f8      	ldr	r0, [r7, #12]
 801cd86:	f7ff febd 	bl	801cb04 <SPI_WaitFlagStateUntilTimeout>
 801cd8a:	4603      	mov	r3, r0
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d007      	beq.n	801cda0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cd94:	f043 0220 	orr.w	r2, r3, #32
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801cd9c:	2303      	movs	r3, #3
 801cd9e:	e023      	b.n	801cde8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	685b      	ldr	r3, [r3, #4]
 801cda4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cda8:	d11d      	bne.n	801cde6 <SPI_EndRxTransaction+0xa6>
 801cdaa:	68fb      	ldr	r3, [r7, #12]
 801cdac:	689b      	ldr	r3, [r3, #8]
 801cdae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cdb2:	d004      	beq.n	801cdbe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	689b      	ldr	r3, [r3, #8]
 801cdb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cdbc:	d113      	bne.n	801cde6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	9300      	str	r3, [sp, #0]
 801cdc2:	68bb      	ldr	r3, [r7, #8]
 801cdc4:	2200      	movs	r2, #0
 801cdc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801cdca:	68f8      	ldr	r0, [r7, #12]
 801cdcc:	f7ff ff22 	bl	801cc14 <SPI_WaitFifoStateUntilTimeout>
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d007      	beq.n	801cde6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cdda:	f043 0220 	orr.w	r2, r3, #32
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801cde2:	2303      	movs	r3, #3
 801cde4:	e000      	b.n	801cde8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801cde6:	2300      	movs	r3, #0
}
 801cde8:	4618      	mov	r0, r3
 801cdea:	3710      	adds	r7, #16
 801cdec:	46bd      	mov	sp, r7
 801cdee:	bd80      	pop	{r7, pc}

0801cdf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cdf0:	b580      	push	{r7, lr}
 801cdf2:	b086      	sub	sp, #24
 801cdf4:	af02      	add	r7, sp, #8
 801cdf6:	60f8      	str	r0, [r7, #12]
 801cdf8:	60b9      	str	r1, [r7, #8]
 801cdfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	9300      	str	r3, [sp, #0]
 801ce00:	68bb      	ldr	r3, [r7, #8]
 801ce02:	2200      	movs	r2, #0
 801ce04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ce08:	68f8      	ldr	r0, [r7, #12]
 801ce0a:	f7ff ff03 	bl	801cc14 <SPI_WaitFifoStateUntilTimeout>
 801ce0e:	4603      	mov	r3, r0
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d007      	beq.n	801ce24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ce18:	f043 0220 	orr.w	r2, r3, #32
 801ce1c:	68fb      	ldr	r3, [r7, #12]
 801ce1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ce20:	2303      	movs	r3, #3
 801ce22:	e027      	b.n	801ce74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	9300      	str	r3, [sp, #0]
 801ce28:	68bb      	ldr	r3, [r7, #8]
 801ce2a:	2200      	movs	r2, #0
 801ce2c:	2180      	movs	r1, #128	; 0x80
 801ce2e:	68f8      	ldr	r0, [r7, #12]
 801ce30:	f7ff fe68 	bl	801cb04 <SPI_WaitFlagStateUntilTimeout>
 801ce34:	4603      	mov	r3, r0
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d007      	beq.n	801ce4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ce3a:	68fb      	ldr	r3, [r7, #12]
 801ce3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ce3e:	f043 0220 	orr.w	r2, r3, #32
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ce46:	2303      	movs	r3, #3
 801ce48:	e014      	b.n	801ce74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	9300      	str	r3, [sp, #0]
 801ce4e:	68bb      	ldr	r3, [r7, #8]
 801ce50:	2200      	movs	r2, #0
 801ce52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ce56:	68f8      	ldr	r0, [r7, #12]
 801ce58:	f7ff fedc 	bl	801cc14 <SPI_WaitFifoStateUntilTimeout>
 801ce5c:	4603      	mov	r3, r0
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d007      	beq.n	801ce72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ce66:	f043 0220 	orr.w	r2, r3, #32
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ce6e:	2303      	movs	r3, #3
 801ce70:	e000      	b.n	801ce74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801ce72:	2300      	movs	r3, #0
}
 801ce74:	4618      	mov	r0, r3
 801ce76:	3710      	adds	r7, #16
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	bd80      	pop	{r7, pc}

0801ce7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	b082      	sub	sp, #8
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d101      	bne.n	801ce8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ce8a:	2301      	movs	r3, #1
 801ce8c:	e049      	b.n	801cf22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce94:	b2db      	uxtb	r3, r3
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d106      	bne.n	801cea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	2200      	movs	r2, #0
 801ce9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cea2:	6878      	ldr	r0, [r7, #4]
 801cea4:	f7fa f892 	bl	8016fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	2202      	movs	r2, #2
 801ceac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	681a      	ldr	r2, [r3, #0]
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	3304      	adds	r3, #4
 801ceb8:	4619      	mov	r1, r3
 801ceba:	4610      	mov	r0, r2
 801cebc:	f000 fd6c 	bl	801d998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	2201      	movs	r2, #1
 801cec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	2201      	movs	r2, #1
 801cecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	2201      	movs	r2, #1
 801ced4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	2201      	movs	r2, #1
 801cedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2201      	movs	r2, #1
 801cee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2201      	movs	r2, #1
 801ceec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	2201      	movs	r2, #1
 801cef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	2201      	movs	r2, #1
 801cefc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	2201      	movs	r2, #1
 801cf04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	2201      	movs	r2, #1
 801cf0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	2201      	movs	r2, #1
 801cf14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2201      	movs	r2, #1
 801cf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cf20:	2300      	movs	r3, #0
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	3708      	adds	r7, #8
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}
	...

0801cf2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cf2c:	b480      	push	{r7}
 801cf2e:	b085      	sub	sp, #20
 801cf30:	af00      	add	r7, sp, #0
 801cf32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cf3a:	b2db      	uxtb	r3, r3
 801cf3c:	2b01      	cmp	r3, #1
 801cf3e:	d001      	beq.n	801cf44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cf40:	2301      	movs	r3, #1
 801cf42:	e04f      	b.n	801cfe4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	2202      	movs	r2, #2
 801cf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	68da      	ldr	r2, [r3, #12]
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	f042 0201 	orr.w	r2, r2, #1
 801cf5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	4a23      	ldr	r2, [pc, #140]	; (801cff0 <HAL_TIM_Base_Start_IT+0xc4>)
 801cf62:	4293      	cmp	r3, r2
 801cf64:	d01d      	beq.n	801cfa2 <HAL_TIM_Base_Start_IT+0x76>
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	681b      	ldr	r3, [r3, #0]
 801cf6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cf6e:	d018      	beq.n	801cfa2 <HAL_TIM_Base_Start_IT+0x76>
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	4a1f      	ldr	r2, [pc, #124]	; (801cff4 <HAL_TIM_Base_Start_IT+0xc8>)
 801cf76:	4293      	cmp	r3, r2
 801cf78:	d013      	beq.n	801cfa2 <HAL_TIM_Base_Start_IT+0x76>
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	4a1e      	ldr	r2, [pc, #120]	; (801cff8 <HAL_TIM_Base_Start_IT+0xcc>)
 801cf80:	4293      	cmp	r3, r2
 801cf82:	d00e      	beq.n	801cfa2 <HAL_TIM_Base_Start_IT+0x76>
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	4a1c      	ldr	r2, [pc, #112]	; (801cffc <HAL_TIM_Base_Start_IT+0xd0>)
 801cf8a:	4293      	cmp	r3, r2
 801cf8c:	d009      	beq.n	801cfa2 <HAL_TIM_Base_Start_IT+0x76>
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	4a1b      	ldr	r2, [pc, #108]	; (801d000 <HAL_TIM_Base_Start_IT+0xd4>)
 801cf94:	4293      	cmp	r3, r2
 801cf96:	d004      	beq.n	801cfa2 <HAL_TIM_Base_Start_IT+0x76>
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	4a19      	ldr	r2, [pc, #100]	; (801d004 <HAL_TIM_Base_Start_IT+0xd8>)
 801cf9e:	4293      	cmp	r3, r2
 801cfa0:	d115      	bne.n	801cfce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	689a      	ldr	r2, [r3, #8]
 801cfa8:	4b17      	ldr	r3, [pc, #92]	; (801d008 <HAL_TIM_Base_Start_IT+0xdc>)
 801cfaa:	4013      	ands	r3, r2
 801cfac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	2b06      	cmp	r3, #6
 801cfb2:	d015      	beq.n	801cfe0 <HAL_TIM_Base_Start_IT+0xb4>
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cfba:	d011      	beq.n	801cfe0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	681a      	ldr	r2, [r3, #0]
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	f042 0201 	orr.w	r2, r2, #1
 801cfca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfcc:	e008      	b.n	801cfe0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	681a      	ldr	r2, [r3, #0]
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	f042 0201 	orr.w	r2, r2, #1
 801cfdc:	601a      	str	r2, [r3, #0]
 801cfde:	e000      	b.n	801cfe2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfe0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cfe2:	2300      	movs	r3, #0
}
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	3714      	adds	r7, #20
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfee:	4770      	bx	lr
 801cff0:	40012c00 	.word	0x40012c00
 801cff4:	40000400 	.word	0x40000400
 801cff8:	40000800 	.word	0x40000800
 801cffc:	40013400 	.word	0x40013400
 801d000:	40014000 	.word	0x40014000
 801d004:	40015000 	.word	0x40015000
 801d008:	00010007 	.word	0x00010007

0801d00c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b082      	sub	sp, #8
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d101      	bne.n	801d01e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801d01a:	2301      	movs	r3, #1
 801d01c:	e049      	b.n	801d0b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d024:	b2db      	uxtb	r3, r3
 801d026:	2b00      	cmp	r3, #0
 801d028:	d106      	bne.n	801d038 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	2200      	movs	r2, #0
 801d02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801d032:	6878      	ldr	r0, [r7, #4]
 801d034:	f7fa f804 	bl	8017040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	2202      	movs	r2, #2
 801d03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	681a      	ldr	r2, [r3, #0]
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	3304      	adds	r3, #4
 801d048:	4619      	mov	r1, r3
 801d04a:	4610      	mov	r0, r2
 801d04c:	f000 fca4 	bl	801d998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	2201      	movs	r2, #1
 801d054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	2201      	movs	r2, #1
 801d05c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	2201      	movs	r2, #1
 801d064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	2201      	movs	r2, #1
 801d06c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	2201      	movs	r2, #1
 801d074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	2201      	movs	r2, #1
 801d07c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	2201      	movs	r2, #1
 801d084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	2201      	movs	r2, #1
 801d08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	2201      	movs	r2, #1
 801d094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	2201      	movs	r2, #1
 801d09c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	2201      	movs	r2, #1
 801d0a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	2201      	movs	r2, #1
 801d0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801d0b0:	2300      	movs	r3, #0
}
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	3708      	adds	r7, #8
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	bd80      	pop	{r7, pc}
	...

0801d0bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d0bc:	b580      	push	{r7, lr}
 801d0be:	b084      	sub	sp, #16
 801d0c0:	af00      	add	r7, sp, #0
 801d0c2:	6078      	str	r0, [r7, #4]
 801d0c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801d0c6:	683b      	ldr	r3, [r7, #0]
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d109      	bne.n	801d0e0 <HAL_TIM_PWM_Start+0x24>
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d0d2:	b2db      	uxtb	r3, r3
 801d0d4:	2b01      	cmp	r3, #1
 801d0d6:	bf14      	ite	ne
 801d0d8:	2301      	movne	r3, #1
 801d0da:	2300      	moveq	r3, #0
 801d0dc:	b2db      	uxtb	r3, r3
 801d0de:	e03c      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d0e0:	683b      	ldr	r3, [r7, #0]
 801d0e2:	2b04      	cmp	r3, #4
 801d0e4:	d109      	bne.n	801d0fa <HAL_TIM_PWM_Start+0x3e>
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801d0ec:	b2db      	uxtb	r3, r3
 801d0ee:	2b01      	cmp	r3, #1
 801d0f0:	bf14      	ite	ne
 801d0f2:	2301      	movne	r3, #1
 801d0f4:	2300      	moveq	r3, #0
 801d0f6:	b2db      	uxtb	r3, r3
 801d0f8:	e02f      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d0fa:	683b      	ldr	r3, [r7, #0]
 801d0fc:	2b08      	cmp	r3, #8
 801d0fe:	d109      	bne.n	801d114 <HAL_TIM_PWM_Start+0x58>
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801d106:	b2db      	uxtb	r3, r3
 801d108:	2b01      	cmp	r3, #1
 801d10a:	bf14      	ite	ne
 801d10c:	2301      	movne	r3, #1
 801d10e:	2300      	moveq	r3, #0
 801d110:	b2db      	uxtb	r3, r3
 801d112:	e022      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d114:	683b      	ldr	r3, [r7, #0]
 801d116:	2b0c      	cmp	r3, #12
 801d118:	d109      	bne.n	801d12e <HAL_TIM_PWM_Start+0x72>
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d120:	b2db      	uxtb	r3, r3
 801d122:	2b01      	cmp	r3, #1
 801d124:	bf14      	ite	ne
 801d126:	2301      	movne	r3, #1
 801d128:	2300      	moveq	r3, #0
 801d12a:	b2db      	uxtb	r3, r3
 801d12c:	e015      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d12e:	683b      	ldr	r3, [r7, #0]
 801d130:	2b10      	cmp	r3, #16
 801d132:	d109      	bne.n	801d148 <HAL_TIM_PWM_Start+0x8c>
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d13a:	b2db      	uxtb	r3, r3
 801d13c:	2b01      	cmp	r3, #1
 801d13e:	bf14      	ite	ne
 801d140:	2301      	movne	r3, #1
 801d142:	2300      	moveq	r3, #0
 801d144:	b2db      	uxtb	r3, r3
 801d146:	e008      	b.n	801d15a <HAL_TIM_PWM_Start+0x9e>
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801d14e:	b2db      	uxtb	r3, r3
 801d150:	2b01      	cmp	r3, #1
 801d152:	bf14      	ite	ne
 801d154:	2301      	movne	r3, #1
 801d156:	2300      	moveq	r3, #0
 801d158:	b2db      	uxtb	r3, r3
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d001      	beq.n	801d162 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801d15e:	2301      	movs	r3, #1
 801d160:	e0a1      	b.n	801d2a6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801d162:	683b      	ldr	r3, [r7, #0]
 801d164:	2b00      	cmp	r3, #0
 801d166:	d104      	bne.n	801d172 <HAL_TIM_PWM_Start+0xb6>
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	2202      	movs	r2, #2
 801d16c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d170:	e023      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d172:	683b      	ldr	r3, [r7, #0]
 801d174:	2b04      	cmp	r3, #4
 801d176:	d104      	bne.n	801d182 <HAL_TIM_PWM_Start+0xc6>
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	2202      	movs	r2, #2
 801d17c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d180:	e01b      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d182:	683b      	ldr	r3, [r7, #0]
 801d184:	2b08      	cmp	r3, #8
 801d186:	d104      	bne.n	801d192 <HAL_TIM_PWM_Start+0xd6>
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	2202      	movs	r2, #2
 801d18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d190:	e013      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d192:	683b      	ldr	r3, [r7, #0]
 801d194:	2b0c      	cmp	r3, #12
 801d196:	d104      	bne.n	801d1a2 <HAL_TIM_PWM_Start+0xe6>
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	2202      	movs	r2, #2
 801d19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801d1a0:	e00b      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d1a2:	683b      	ldr	r3, [r7, #0]
 801d1a4:	2b10      	cmp	r3, #16
 801d1a6:	d104      	bne.n	801d1b2 <HAL_TIM_PWM_Start+0xf6>
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	2202      	movs	r2, #2
 801d1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d1b0:	e003      	b.n	801d1ba <HAL_TIM_PWM_Start+0xfe>
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	2202      	movs	r2, #2
 801d1b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	2201      	movs	r2, #1
 801d1c0:	6839      	ldr	r1, [r7, #0]
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	f000 ffb0 	bl	801e128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	4a38      	ldr	r2, [pc, #224]	; (801d2b0 <HAL_TIM_PWM_Start+0x1f4>)
 801d1ce:	4293      	cmp	r3, r2
 801d1d0:	d018      	beq.n	801d204 <HAL_TIM_PWM_Start+0x148>
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	4a37      	ldr	r2, [pc, #220]	; (801d2b4 <HAL_TIM_PWM_Start+0x1f8>)
 801d1d8:	4293      	cmp	r3, r2
 801d1da:	d013      	beq.n	801d204 <HAL_TIM_PWM_Start+0x148>
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	4a35      	ldr	r2, [pc, #212]	; (801d2b8 <HAL_TIM_PWM_Start+0x1fc>)
 801d1e2:	4293      	cmp	r3, r2
 801d1e4:	d00e      	beq.n	801d204 <HAL_TIM_PWM_Start+0x148>
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	4a34      	ldr	r2, [pc, #208]	; (801d2bc <HAL_TIM_PWM_Start+0x200>)
 801d1ec:	4293      	cmp	r3, r2
 801d1ee:	d009      	beq.n	801d204 <HAL_TIM_PWM_Start+0x148>
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	4a32      	ldr	r2, [pc, #200]	; (801d2c0 <HAL_TIM_PWM_Start+0x204>)
 801d1f6:	4293      	cmp	r3, r2
 801d1f8:	d004      	beq.n	801d204 <HAL_TIM_PWM_Start+0x148>
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	4a31      	ldr	r2, [pc, #196]	; (801d2c4 <HAL_TIM_PWM_Start+0x208>)
 801d200:	4293      	cmp	r3, r2
 801d202:	d101      	bne.n	801d208 <HAL_TIM_PWM_Start+0x14c>
 801d204:	2301      	movs	r3, #1
 801d206:	e000      	b.n	801d20a <HAL_TIM_PWM_Start+0x14e>
 801d208:	2300      	movs	r3, #0
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d007      	beq.n	801d21e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801d21c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	4a23      	ldr	r2, [pc, #140]	; (801d2b0 <HAL_TIM_PWM_Start+0x1f4>)
 801d224:	4293      	cmp	r3, r2
 801d226:	d01d      	beq.n	801d264 <HAL_TIM_PWM_Start+0x1a8>
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d230:	d018      	beq.n	801d264 <HAL_TIM_PWM_Start+0x1a8>
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	4a24      	ldr	r2, [pc, #144]	; (801d2c8 <HAL_TIM_PWM_Start+0x20c>)
 801d238:	4293      	cmp	r3, r2
 801d23a:	d013      	beq.n	801d264 <HAL_TIM_PWM_Start+0x1a8>
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	4a22      	ldr	r2, [pc, #136]	; (801d2cc <HAL_TIM_PWM_Start+0x210>)
 801d242:	4293      	cmp	r3, r2
 801d244:	d00e      	beq.n	801d264 <HAL_TIM_PWM_Start+0x1a8>
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	681b      	ldr	r3, [r3, #0]
 801d24a:	4a1a      	ldr	r2, [pc, #104]	; (801d2b4 <HAL_TIM_PWM_Start+0x1f8>)
 801d24c:	4293      	cmp	r3, r2
 801d24e:	d009      	beq.n	801d264 <HAL_TIM_PWM_Start+0x1a8>
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	4a18      	ldr	r2, [pc, #96]	; (801d2b8 <HAL_TIM_PWM_Start+0x1fc>)
 801d256:	4293      	cmp	r3, r2
 801d258:	d004      	beq.n	801d264 <HAL_TIM_PWM_Start+0x1a8>
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	4a19      	ldr	r2, [pc, #100]	; (801d2c4 <HAL_TIM_PWM_Start+0x208>)
 801d260:	4293      	cmp	r3, r2
 801d262:	d115      	bne.n	801d290 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	689a      	ldr	r2, [r3, #8]
 801d26a:	4b19      	ldr	r3, [pc, #100]	; (801d2d0 <HAL_TIM_PWM_Start+0x214>)
 801d26c:	4013      	ands	r3, r2
 801d26e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	2b06      	cmp	r3, #6
 801d274:	d015      	beq.n	801d2a2 <HAL_TIM_PWM_Start+0x1e6>
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d27c:	d011      	beq.n	801d2a2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	681a      	ldr	r2, [r3, #0]
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	f042 0201 	orr.w	r2, r2, #1
 801d28c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d28e:	e008      	b.n	801d2a2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	681a      	ldr	r2, [r3, #0]
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	f042 0201 	orr.w	r2, r2, #1
 801d29e:	601a      	str	r2, [r3, #0]
 801d2a0:	e000      	b.n	801d2a4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d2a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801d2a4:	2300      	movs	r3, #0
}
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	3710      	adds	r7, #16
 801d2aa:	46bd      	mov	sp, r7
 801d2ac:	bd80      	pop	{r7, pc}
 801d2ae:	bf00      	nop
 801d2b0:	40012c00 	.word	0x40012c00
 801d2b4:	40013400 	.word	0x40013400
 801d2b8:	40014000 	.word	0x40014000
 801d2bc:	40014400 	.word	0x40014400
 801d2c0:	40014800 	.word	0x40014800
 801d2c4:	40015000 	.word	0x40015000
 801d2c8:	40000400 	.word	0x40000400
 801d2cc:	40000800 	.word	0x40000800
 801d2d0:	00010007 	.word	0x00010007

0801d2d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b082      	sub	sp, #8
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]
 801d2dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	2200      	movs	r2, #0
 801d2e4:	6839      	ldr	r1, [r7, #0]
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f000 ff1e 	bl	801e128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	4a40      	ldr	r2, [pc, #256]	; (801d3f4 <HAL_TIM_PWM_Stop+0x120>)
 801d2f2:	4293      	cmp	r3, r2
 801d2f4:	d018      	beq.n	801d328 <HAL_TIM_PWM_Stop+0x54>
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	4a3f      	ldr	r2, [pc, #252]	; (801d3f8 <HAL_TIM_PWM_Stop+0x124>)
 801d2fc:	4293      	cmp	r3, r2
 801d2fe:	d013      	beq.n	801d328 <HAL_TIM_PWM_Stop+0x54>
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	4a3d      	ldr	r2, [pc, #244]	; (801d3fc <HAL_TIM_PWM_Stop+0x128>)
 801d306:	4293      	cmp	r3, r2
 801d308:	d00e      	beq.n	801d328 <HAL_TIM_PWM_Stop+0x54>
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	4a3c      	ldr	r2, [pc, #240]	; (801d400 <HAL_TIM_PWM_Stop+0x12c>)
 801d310:	4293      	cmp	r3, r2
 801d312:	d009      	beq.n	801d328 <HAL_TIM_PWM_Stop+0x54>
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	4a3a      	ldr	r2, [pc, #232]	; (801d404 <HAL_TIM_PWM_Stop+0x130>)
 801d31a:	4293      	cmp	r3, r2
 801d31c:	d004      	beq.n	801d328 <HAL_TIM_PWM_Stop+0x54>
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	4a39      	ldr	r2, [pc, #228]	; (801d408 <HAL_TIM_PWM_Stop+0x134>)
 801d324:	4293      	cmp	r3, r2
 801d326:	d101      	bne.n	801d32c <HAL_TIM_PWM_Stop+0x58>
 801d328:	2301      	movs	r3, #1
 801d32a:	e000      	b.n	801d32e <HAL_TIM_PWM_Stop+0x5a>
 801d32c:	2300      	movs	r3, #0
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d017      	beq.n	801d362 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	6a1a      	ldr	r2, [r3, #32]
 801d338:	f241 1311 	movw	r3, #4369	; 0x1111
 801d33c:	4013      	ands	r3, r2
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d10f      	bne.n	801d362 <HAL_TIM_PWM_Stop+0x8e>
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	6a1a      	ldr	r2, [r3, #32]
 801d348:	f244 4344 	movw	r3, #17476	; 0x4444
 801d34c:	4013      	ands	r3, r2
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d107      	bne.n	801d362 <HAL_TIM_PWM_Stop+0x8e>
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	6a1a      	ldr	r2, [r3, #32]
 801d368:	f241 1311 	movw	r3, #4369	; 0x1111
 801d36c:	4013      	ands	r3, r2
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d10f      	bne.n	801d392 <HAL_TIM_PWM_Stop+0xbe>
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	6a1a      	ldr	r2, [r3, #32]
 801d378:	f244 4344 	movw	r3, #17476	; 0x4444
 801d37c:	4013      	ands	r3, r2
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d107      	bne.n	801d392 <HAL_TIM_PWM_Stop+0xbe>
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	681a      	ldr	r2, [r3, #0]
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	f022 0201 	bic.w	r2, r2, #1
 801d390:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801d392:	683b      	ldr	r3, [r7, #0]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d104      	bne.n	801d3a2 <HAL_TIM_PWM_Stop+0xce>
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	2201      	movs	r2, #1
 801d39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d3a0:	e023      	b.n	801d3ea <HAL_TIM_PWM_Stop+0x116>
 801d3a2:	683b      	ldr	r3, [r7, #0]
 801d3a4:	2b04      	cmp	r3, #4
 801d3a6:	d104      	bne.n	801d3b2 <HAL_TIM_PWM_Stop+0xde>
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	2201      	movs	r2, #1
 801d3ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d3b0:	e01b      	b.n	801d3ea <HAL_TIM_PWM_Stop+0x116>
 801d3b2:	683b      	ldr	r3, [r7, #0]
 801d3b4:	2b08      	cmp	r3, #8
 801d3b6:	d104      	bne.n	801d3c2 <HAL_TIM_PWM_Stop+0xee>
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	2201      	movs	r2, #1
 801d3bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d3c0:	e013      	b.n	801d3ea <HAL_TIM_PWM_Stop+0x116>
 801d3c2:	683b      	ldr	r3, [r7, #0]
 801d3c4:	2b0c      	cmp	r3, #12
 801d3c6:	d104      	bne.n	801d3d2 <HAL_TIM_PWM_Stop+0xfe>
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	2201      	movs	r2, #1
 801d3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801d3d0:	e00b      	b.n	801d3ea <HAL_TIM_PWM_Stop+0x116>
 801d3d2:	683b      	ldr	r3, [r7, #0]
 801d3d4:	2b10      	cmp	r3, #16
 801d3d6:	d104      	bne.n	801d3e2 <HAL_TIM_PWM_Stop+0x10e>
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	2201      	movs	r2, #1
 801d3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d3e0:	e003      	b.n	801d3ea <HAL_TIM_PWM_Stop+0x116>
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	2201      	movs	r2, #1
 801d3e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801d3ea:	2300      	movs	r3, #0
}
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	3708      	adds	r7, #8
 801d3f0:	46bd      	mov	sp, r7
 801d3f2:	bd80      	pop	{r7, pc}
 801d3f4:	40012c00 	.word	0x40012c00
 801d3f8:	40013400 	.word	0x40013400
 801d3fc:	40014000 	.word	0x40014000
 801d400:	40014400 	.word	0x40014400
 801d404:	40014800 	.word	0x40014800
 801d408:	40015000 	.word	0x40015000

0801d40c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	b082      	sub	sp, #8
 801d410:	af00      	add	r7, sp, #0
 801d412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	691b      	ldr	r3, [r3, #16]
 801d41a:	f003 0302 	and.w	r3, r3, #2
 801d41e:	2b02      	cmp	r3, #2
 801d420:	d122      	bne.n	801d468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	681b      	ldr	r3, [r3, #0]
 801d426:	68db      	ldr	r3, [r3, #12]
 801d428:	f003 0302 	and.w	r3, r3, #2
 801d42c:	2b02      	cmp	r3, #2
 801d42e:	d11b      	bne.n	801d468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	f06f 0202 	mvn.w	r2, #2
 801d438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	2201      	movs	r2, #1
 801d43e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	699b      	ldr	r3, [r3, #24]
 801d446:	f003 0303 	and.w	r3, r3, #3
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d003      	beq.n	801d456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d44e:	6878      	ldr	r0, [r7, #4]
 801d450:	f000 fa84 	bl	801d95c <HAL_TIM_IC_CaptureCallback>
 801d454:	e005      	b.n	801d462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d456:	6878      	ldr	r0, [r7, #4]
 801d458:	f000 fa76 	bl	801d948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d45c:	6878      	ldr	r0, [r7, #4]
 801d45e:	f000 fa87 	bl	801d970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	2200      	movs	r2, #0
 801d466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	691b      	ldr	r3, [r3, #16]
 801d46e:	f003 0304 	and.w	r3, r3, #4
 801d472:	2b04      	cmp	r3, #4
 801d474:	d122      	bne.n	801d4bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	68db      	ldr	r3, [r3, #12]
 801d47c:	f003 0304 	and.w	r3, r3, #4
 801d480:	2b04      	cmp	r3, #4
 801d482:	d11b      	bne.n	801d4bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	f06f 0204 	mvn.w	r2, #4
 801d48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	2202      	movs	r2, #2
 801d492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	699b      	ldr	r3, [r3, #24]
 801d49a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	d003      	beq.n	801d4aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d4a2:	6878      	ldr	r0, [r7, #4]
 801d4a4:	f000 fa5a 	bl	801d95c <HAL_TIM_IC_CaptureCallback>
 801d4a8:	e005      	b.n	801d4b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d4aa:	6878      	ldr	r0, [r7, #4]
 801d4ac:	f000 fa4c 	bl	801d948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d4b0:	6878      	ldr	r0, [r7, #4]
 801d4b2:	f000 fa5d 	bl	801d970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	691b      	ldr	r3, [r3, #16]
 801d4c2:	f003 0308 	and.w	r3, r3, #8
 801d4c6:	2b08      	cmp	r3, #8
 801d4c8:	d122      	bne.n	801d510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	68db      	ldr	r3, [r3, #12]
 801d4d0:	f003 0308 	and.w	r3, r3, #8
 801d4d4:	2b08      	cmp	r3, #8
 801d4d6:	d11b      	bne.n	801d510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	f06f 0208 	mvn.w	r2, #8
 801d4e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	2204      	movs	r2, #4
 801d4e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	69db      	ldr	r3, [r3, #28]
 801d4ee:	f003 0303 	and.w	r3, r3, #3
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d003      	beq.n	801d4fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d4f6:	6878      	ldr	r0, [r7, #4]
 801d4f8:	f000 fa30 	bl	801d95c <HAL_TIM_IC_CaptureCallback>
 801d4fc:	e005      	b.n	801d50a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d4fe:	6878      	ldr	r0, [r7, #4]
 801d500:	f000 fa22 	bl	801d948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d504:	6878      	ldr	r0, [r7, #4]
 801d506:	f000 fa33 	bl	801d970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	2200      	movs	r2, #0
 801d50e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	691b      	ldr	r3, [r3, #16]
 801d516:	f003 0310 	and.w	r3, r3, #16
 801d51a:	2b10      	cmp	r3, #16
 801d51c:	d122      	bne.n	801d564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	68db      	ldr	r3, [r3, #12]
 801d524:	f003 0310 	and.w	r3, r3, #16
 801d528:	2b10      	cmp	r3, #16
 801d52a:	d11b      	bne.n	801d564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	f06f 0210 	mvn.w	r2, #16
 801d534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	2208      	movs	r2, #8
 801d53a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	69db      	ldr	r3, [r3, #28]
 801d542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d546:	2b00      	cmp	r3, #0
 801d548:	d003      	beq.n	801d552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d54a:	6878      	ldr	r0, [r7, #4]
 801d54c:	f000 fa06 	bl	801d95c <HAL_TIM_IC_CaptureCallback>
 801d550:	e005      	b.n	801d55e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d552:	6878      	ldr	r0, [r7, #4]
 801d554:	f000 f9f8 	bl	801d948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d558:	6878      	ldr	r0, [r7, #4]
 801d55a:	f000 fa09 	bl	801d970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	2200      	movs	r2, #0
 801d562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	691b      	ldr	r3, [r3, #16]
 801d56a:	f003 0301 	and.w	r3, r3, #1
 801d56e:	2b01      	cmp	r3, #1
 801d570:	d10e      	bne.n	801d590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	68db      	ldr	r3, [r3, #12]
 801d578:	f003 0301 	and.w	r3, r3, #1
 801d57c:	2b01      	cmp	r3, #1
 801d57e:	d107      	bne.n	801d590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	f06f 0201 	mvn.w	r2, #1
 801d588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d58a:	6878      	ldr	r0, [r7, #4]
 801d58c:	f000 f9d2 	bl	801d934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	691b      	ldr	r3, [r3, #16]
 801d596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d59a:	2b80      	cmp	r3, #128	; 0x80
 801d59c:	d10e      	bne.n	801d5bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	68db      	ldr	r3, [r3, #12]
 801d5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d5a8:	2b80      	cmp	r3, #128	; 0x80
 801d5aa:	d107      	bne.n	801d5bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d5b6:	6878      	ldr	r0, [r7, #4]
 801d5b8:	f000 ff26 	bl	801e408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	691b      	ldr	r3, [r3, #16]
 801d5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d5c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d5ca:	d10e      	bne.n	801d5ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	68db      	ldr	r3, [r3, #12]
 801d5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d5d6:	2b80      	cmp	r3, #128	; 0x80
 801d5d8:	d107      	bne.n	801d5ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d5e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d5e4:	6878      	ldr	r0, [r7, #4]
 801d5e6:	f000 ff19 	bl	801e41c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	691b      	ldr	r3, [r3, #16]
 801d5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d5f4:	2b40      	cmp	r3, #64	; 0x40
 801d5f6:	d10e      	bne.n	801d616 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	68db      	ldr	r3, [r3, #12]
 801d5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d602:	2b40      	cmp	r3, #64	; 0x40
 801d604:	d107      	bne.n	801d616 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d610:	6878      	ldr	r0, [r7, #4]
 801d612:	f000 f9b7 	bl	801d984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	691b      	ldr	r3, [r3, #16]
 801d61c:	f003 0320 	and.w	r3, r3, #32
 801d620:	2b20      	cmp	r3, #32
 801d622:	d10e      	bne.n	801d642 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	68db      	ldr	r3, [r3, #12]
 801d62a:	f003 0320 	and.w	r3, r3, #32
 801d62e:	2b20      	cmp	r3, #32
 801d630:	d107      	bne.n	801d642 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	f06f 0220 	mvn.w	r2, #32
 801d63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d63c:	6878      	ldr	r0, [r7, #4]
 801d63e:	f000 fed9 	bl	801e3f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	691b      	ldr	r3, [r3, #16]
 801d648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d64c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d650:	d10f      	bne.n	801d672 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	68db      	ldr	r3, [r3, #12]
 801d658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d65c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d660:	d107      	bne.n	801d672 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801d66a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801d66c:	6878      	ldr	r0, [r7, #4]
 801d66e:	f000 fedf 	bl	801e430 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	691b      	ldr	r3, [r3, #16]
 801d678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d67c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d680:	d10f      	bne.n	801d6a2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	68db      	ldr	r3, [r3, #12]
 801d688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d68c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d690:	d107      	bne.n	801d6a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801d69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801d69c:	6878      	ldr	r0, [r7, #4]
 801d69e:	f000 fed1 	bl	801e444 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	691b      	ldr	r3, [r3, #16]
 801d6a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d6ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d6b0:	d10f      	bne.n	801d6d2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	68db      	ldr	r3, [r3, #12]
 801d6b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d6bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d6c0:	d107      	bne.n	801d6d2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801d6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801d6cc:	6878      	ldr	r0, [r7, #4]
 801d6ce:	f000 fec3 	bl	801e458 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	691b      	ldr	r3, [r3, #16]
 801d6d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d6dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d6e0:	d10f      	bne.n	801d702 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	68db      	ldr	r3, [r3, #12]
 801d6e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d6ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d6f0:	d107      	bne.n	801d702 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801d6fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801d6fc:	6878      	ldr	r0, [r7, #4]
 801d6fe:	f000 feb5 	bl	801e46c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d702:	bf00      	nop
 801d704:	3708      	adds	r7, #8
 801d706:	46bd      	mov	sp, r7
 801d708:	bd80      	pop	{r7, pc}
	...

0801d70c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d70c:	b580      	push	{r7, lr}
 801d70e:	b086      	sub	sp, #24
 801d710:	af00      	add	r7, sp, #0
 801d712:	60f8      	str	r0, [r7, #12]
 801d714:	60b9      	str	r1, [r7, #8]
 801d716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d718:	2300      	movs	r3, #0
 801d71a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d722:	2b01      	cmp	r3, #1
 801d724:	d101      	bne.n	801d72a <HAL_TIM_PWM_ConfigChannel+0x1e>
 801d726:	2302      	movs	r3, #2
 801d728:	e0ff      	b.n	801d92a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	2201      	movs	r2, #1
 801d72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	2b14      	cmp	r3, #20
 801d736:	f200 80f0 	bhi.w	801d91a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801d73a:	a201      	add	r2, pc, #4	; (adr r2, 801d740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801d73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d740:	0801d795 	.word	0x0801d795
 801d744:	0801d91b 	.word	0x0801d91b
 801d748:	0801d91b 	.word	0x0801d91b
 801d74c:	0801d91b 	.word	0x0801d91b
 801d750:	0801d7d5 	.word	0x0801d7d5
 801d754:	0801d91b 	.word	0x0801d91b
 801d758:	0801d91b 	.word	0x0801d91b
 801d75c:	0801d91b 	.word	0x0801d91b
 801d760:	0801d817 	.word	0x0801d817
 801d764:	0801d91b 	.word	0x0801d91b
 801d768:	0801d91b 	.word	0x0801d91b
 801d76c:	0801d91b 	.word	0x0801d91b
 801d770:	0801d857 	.word	0x0801d857
 801d774:	0801d91b 	.word	0x0801d91b
 801d778:	0801d91b 	.word	0x0801d91b
 801d77c:	0801d91b 	.word	0x0801d91b
 801d780:	0801d899 	.word	0x0801d899
 801d784:	0801d91b 	.word	0x0801d91b
 801d788:	0801d91b 	.word	0x0801d91b
 801d78c:	0801d91b 	.word	0x0801d91b
 801d790:	0801d8d9 	.word	0x0801d8d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	681b      	ldr	r3, [r3, #0]
 801d798:	68b9      	ldr	r1, [r7, #8]
 801d79a:	4618      	mov	r0, r3
 801d79c:	f000 f99a 	bl	801dad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	699a      	ldr	r2, [r3, #24]
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	f042 0208 	orr.w	r2, r2, #8
 801d7ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d7b0:	68fb      	ldr	r3, [r7, #12]
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	699a      	ldr	r2, [r3, #24]
 801d7b6:	68fb      	ldr	r3, [r7, #12]
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	f022 0204 	bic.w	r2, r2, #4
 801d7be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	6999      	ldr	r1, [r3, #24]
 801d7c6:	68bb      	ldr	r3, [r7, #8]
 801d7c8:	691a      	ldr	r2, [r3, #16]
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	430a      	orrs	r2, r1
 801d7d0:	619a      	str	r2, [r3, #24]
      break;
 801d7d2:	e0a5      	b.n	801d920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	68b9      	ldr	r1, [r7, #8]
 801d7da:	4618      	mov	r0, r3
 801d7dc:	f000 fa14 	bl	801dc08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d7e0:	68fb      	ldr	r3, [r7, #12]
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	699a      	ldr	r2, [r3, #24]
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d7ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	699a      	ldr	r2, [r3, #24]
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	681b      	ldr	r3, [r3, #0]
 801d7fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d7fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	6999      	ldr	r1, [r3, #24]
 801d806:	68bb      	ldr	r3, [r7, #8]
 801d808:	691b      	ldr	r3, [r3, #16]
 801d80a:	021a      	lsls	r2, r3, #8
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	430a      	orrs	r2, r1
 801d812:	619a      	str	r2, [r3, #24]
      break;
 801d814:	e084      	b.n	801d920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	68b9      	ldr	r1, [r7, #8]
 801d81c:	4618      	mov	r0, r3
 801d81e:	f000 fa87 	bl	801dd30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	69da      	ldr	r2, [r3, #28]
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	f042 0208 	orr.w	r2, r2, #8
 801d830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	69da      	ldr	r2, [r3, #28]
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	f022 0204 	bic.w	r2, r2, #4
 801d840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	681b      	ldr	r3, [r3, #0]
 801d846:	69d9      	ldr	r1, [r3, #28]
 801d848:	68bb      	ldr	r3, [r7, #8]
 801d84a:	691a      	ldr	r2, [r3, #16]
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	430a      	orrs	r2, r1
 801d852:	61da      	str	r2, [r3, #28]
      break;
 801d854:	e064      	b.n	801d920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d856:	68fb      	ldr	r3, [r7, #12]
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	68b9      	ldr	r1, [r7, #8]
 801d85c:	4618      	mov	r0, r3
 801d85e:	f000 faf9 	bl	801de54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	69da      	ldr	r2, [r3, #28]
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	69da      	ldr	r2, [r3, #28]
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	69d9      	ldr	r1, [r3, #28]
 801d888:	68bb      	ldr	r3, [r7, #8]
 801d88a:	691b      	ldr	r3, [r3, #16]
 801d88c:	021a      	lsls	r2, r3, #8
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	430a      	orrs	r2, r1
 801d894:	61da      	str	r2, [r3, #28]
      break;
 801d896:	e043      	b.n	801d920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	68b9      	ldr	r1, [r7, #8]
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f000 fb6c 	bl	801df7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d8aa:	68fb      	ldr	r3, [r7, #12]
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	f042 0208 	orr.w	r2, r2, #8
 801d8b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	f022 0204 	bic.w	r2, r2, #4
 801d8c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d8ca:	68bb      	ldr	r3, [r7, #8]
 801d8cc:	691a      	ldr	r2, [r3, #16]
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	681b      	ldr	r3, [r3, #0]
 801d8d2:	430a      	orrs	r2, r1
 801d8d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d8d6:	e023      	b.n	801d920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d8d8:	68fb      	ldr	r3, [r7, #12]
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	68b9      	ldr	r1, [r7, #8]
 801d8de:	4618      	mov	r0, r3
 801d8e0:	f000 fbb6 	bl	801e050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d8f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d902:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d90a:	68bb      	ldr	r3, [r7, #8]
 801d90c:	691b      	ldr	r3, [r3, #16]
 801d90e:	021a      	lsls	r2, r3, #8
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	430a      	orrs	r2, r1
 801d916:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d918:	e002      	b.n	801d920 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801d91a:	2301      	movs	r3, #1
 801d91c:	75fb      	strb	r3, [r7, #23]
      break;
 801d91e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d920:	68fb      	ldr	r3, [r7, #12]
 801d922:	2200      	movs	r2, #0
 801d924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d928:	7dfb      	ldrb	r3, [r7, #23]
}
 801d92a:	4618      	mov	r0, r3
 801d92c:	3718      	adds	r7, #24
 801d92e:	46bd      	mov	sp, r7
 801d930:	bd80      	pop	{r7, pc}
 801d932:	bf00      	nop

0801d934 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d934:	b480      	push	{r7}
 801d936:	b083      	sub	sp, #12
 801d938:	af00      	add	r7, sp, #0
 801d93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801d93c:	bf00      	nop
 801d93e:	370c      	adds	r7, #12
 801d940:	46bd      	mov	sp, r7
 801d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d946:	4770      	bx	lr

0801d948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d948:	b480      	push	{r7}
 801d94a:	b083      	sub	sp, #12
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d950:	bf00      	nop
 801d952:	370c      	adds	r7, #12
 801d954:	46bd      	mov	sp, r7
 801d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d95a:	4770      	bx	lr

0801d95c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d95c:	b480      	push	{r7}
 801d95e:	b083      	sub	sp, #12
 801d960:	af00      	add	r7, sp, #0
 801d962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d964:	bf00      	nop
 801d966:	370c      	adds	r7, #12
 801d968:	46bd      	mov	sp, r7
 801d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d96e:	4770      	bx	lr

0801d970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d970:	b480      	push	{r7}
 801d972:	b083      	sub	sp, #12
 801d974:	af00      	add	r7, sp, #0
 801d976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d978:	bf00      	nop
 801d97a:	370c      	adds	r7, #12
 801d97c:	46bd      	mov	sp, r7
 801d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d982:	4770      	bx	lr

0801d984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d984:	b480      	push	{r7}
 801d986:	b083      	sub	sp, #12
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d98c:	bf00      	nop
 801d98e:	370c      	adds	r7, #12
 801d990:	46bd      	mov	sp, r7
 801d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d996:	4770      	bx	lr

0801d998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d998:	b480      	push	{r7}
 801d99a:	b085      	sub	sp, #20
 801d99c:	af00      	add	r7, sp, #0
 801d99e:	6078      	str	r0, [r7, #4]
 801d9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	4a42      	ldr	r2, [pc, #264]	; (801dab4 <TIM_Base_SetConfig+0x11c>)
 801d9ac:	4293      	cmp	r3, r2
 801d9ae:	d013      	beq.n	801d9d8 <TIM_Base_SetConfig+0x40>
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d9b6:	d00f      	beq.n	801d9d8 <TIM_Base_SetConfig+0x40>
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	4a3f      	ldr	r2, [pc, #252]	; (801dab8 <TIM_Base_SetConfig+0x120>)
 801d9bc:	4293      	cmp	r3, r2
 801d9be:	d00b      	beq.n	801d9d8 <TIM_Base_SetConfig+0x40>
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	4a3e      	ldr	r2, [pc, #248]	; (801dabc <TIM_Base_SetConfig+0x124>)
 801d9c4:	4293      	cmp	r3, r2
 801d9c6:	d007      	beq.n	801d9d8 <TIM_Base_SetConfig+0x40>
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	4a3d      	ldr	r2, [pc, #244]	; (801dac0 <TIM_Base_SetConfig+0x128>)
 801d9cc:	4293      	cmp	r3, r2
 801d9ce:	d003      	beq.n	801d9d8 <TIM_Base_SetConfig+0x40>
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	4a3c      	ldr	r2, [pc, #240]	; (801dac4 <TIM_Base_SetConfig+0x12c>)
 801d9d4:	4293      	cmp	r3, r2
 801d9d6:	d108      	bne.n	801d9ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d9e0:	683b      	ldr	r3, [r7, #0]
 801d9e2:	685b      	ldr	r3, [r3, #4]
 801d9e4:	68fa      	ldr	r2, [r7, #12]
 801d9e6:	4313      	orrs	r3, r2
 801d9e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	4a31      	ldr	r2, [pc, #196]	; (801dab4 <TIM_Base_SetConfig+0x11c>)
 801d9ee:	4293      	cmp	r3, r2
 801d9f0:	d01f      	beq.n	801da32 <TIM_Base_SetConfig+0x9a>
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d9f8:	d01b      	beq.n	801da32 <TIM_Base_SetConfig+0x9a>
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	4a2e      	ldr	r2, [pc, #184]	; (801dab8 <TIM_Base_SetConfig+0x120>)
 801d9fe:	4293      	cmp	r3, r2
 801da00:	d017      	beq.n	801da32 <TIM_Base_SetConfig+0x9a>
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	4a2d      	ldr	r2, [pc, #180]	; (801dabc <TIM_Base_SetConfig+0x124>)
 801da06:	4293      	cmp	r3, r2
 801da08:	d013      	beq.n	801da32 <TIM_Base_SetConfig+0x9a>
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	4a2c      	ldr	r2, [pc, #176]	; (801dac0 <TIM_Base_SetConfig+0x128>)
 801da0e:	4293      	cmp	r3, r2
 801da10:	d00f      	beq.n	801da32 <TIM_Base_SetConfig+0x9a>
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	4a2c      	ldr	r2, [pc, #176]	; (801dac8 <TIM_Base_SetConfig+0x130>)
 801da16:	4293      	cmp	r3, r2
 801da18:	d00b      	beq.n	801da32 <TIM_Base_SetConfig+0x9a>
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	4a2b      	ldr	r2, [pc, #172]	; (801dacc <TIM_Base_SetConfig+0x134>)
 801da1e:	4293      	cmp	r3, r2
 801da20:	d007      	beq.n	801da32 <TIM_Base_SetConfig+0x9a>
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	4a2a      	ldr	r2, [pc, #168]	; (801dad0 <TIM_Base_SetConfig+0x138>)
 801da26:	4293      	cmp	r3, r2
 801da28:	d003      	beq.n	801da32 <TIM_Base_SetConfig+0x9a>
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	4a25      	ldr	r2, [pc, #148]	; (801dac4 <TIM_Base_SetConfig+0x12c>)
 801da2e:	4293      	cmp	r3, r2
 801da30:	d108      	bne.n	801da44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801da38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801da3a:	683b      	ldr	r3, [r7, #0]
 801da3c:	68db      	ldr	r3, [r3, #12]
 801da3e:	68fa      	ldr	r2, [r7, #12]
 801da40:	4313      	orrs	r3, r2
 801da42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801da4a:	683b      	ldr	r3, [r7, #0]
 801da4c:	695b      	ldr	r3, [r3, #20]
 801da4e:	4313      	orrs	r3, r2
 801da50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	68fa      	ldr	r2, [r7, #12]
 801da56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801da58:	683b      	ldr	r3, [r7, #0]
 801da5a:	689a      	ldr	r2, [r3, #8]
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801da60:	683b      	ldr	r3, [r7, #0]
 801da62:	681a      	ldr	r2, [r3, #0]
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	4a12      	ldr	r2, [pc, #72]	; (801dab4 <TIM_Base_SetConfig+0x11c>)
 801da6c:	4293      	cmp	r3, r2
 801da6e:	d013      	beq.n	801da98 <TIM_Base_SetConfig+0x100>
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	4a13      	ldr	r2, [pc, #76]	; (801dac0 <TIM_Base_SetConfig+0x128>)
 801da74:	4293      	cmp	r3, r2
 801da76:	d00f      	beq.n	801da98 <TIM_Base_SetConfig+0x100>
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	4a13      	ldr	r2, [pc, #76]	; (801dac8 <TIM_Base_SetConfig+0x130>)
 801da7c:	4293      	cmp	r3, r2
 801da7e:	d00b      	beq.n	801da98 <TIM_Base_SetConfig+0x100>
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	4a12      	ldr	r2, [pc, #72]	; (801dacc <TIM_Base_SetConfig+0x134>)
 801da84:	4293      	cmp	r3, r2
 801da86:	d007      	beq.n	801da98 <TIM_Base_SetConfig+0x100>
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	4a11      	ldr	r2, [pc, #68]	; (801dad0 <TIM_Base_SetConfig+0x138>)
 801da8c:	4293      	cmp	r3, r2
 801da8e:	d003      	beq.n	801da98 <TIM_Base_SetConfig+0x100>
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	4a0c      	ldr	r2, [pc, #48]	; (801dac4 <TIM_Base_SetConfig+0x12c>)
 801da94:	4293      	cmp	r3, r2
 801da96:	d103      	bne.n	801daa0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801da98:	683b      	ldr	r3, [r7, #0]
 801da9a:	691a      	ldr	r2, [r3, #16]
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	2201      	movs	r2, #1
 801daa4:	615a      	str	r2, [r3, #20]
}
 801daa6:	bf00      	nop
 801daa8:	3714      	adds	r7, #20
 801daaa:	46bd      	mov	sp, r7
 801daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dab0:	4770      	bx	lr
 801dab2:	bf00      	nop
 801dab4:	40012c00 	.word	0x40012c00
 801dab8:	40000400 	.word	0x40000400
 801dabc:	40000800 	.word	0x40000800
 801dac0:	40013400 	.word	0x40013400
 801dac4:	40015000 	.word	0x40015000
 801dac8:	40014000 	.word	0x40014000
 801dacc:	40014400 	.word	0x40014400
 801dad0:	40014800 	.word	0x40014800

0801dad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dad4:	b480      	push	{r7}
 801dad6:	b087      	sub	sp, #28
 801dad8:	af00      	add	r7, sp, #0
 801dada:	6078      	str	r0, [r7, #4]
 801dadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	6a1b      	ldr	r3, [r3, #32]
 801dae2:	f023 0201 	bic.w	r2, r3, #1
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	6a1b      	ldr	r3, [r3, #32]
 801daee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	685b      	ldr	r3, [r3, #4]
 801daf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	699b      	ldr	r3, [r3, #24]
 801dafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801db02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801db06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	f023 0303 	bic.w	r3, r3, #3
 801db0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801db10:	683b      	ldr	r3, [r7, #0]
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	68fa      	ldr	r2, [r7, #12]
 801db16:	4313      	orrs	r3, r2
 801db18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801db1a:	697b      	ldr	r3, [r7, #20]
 801db1c:	f023 0302 	bic.w	r3, r3, #2
 801db20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801db22:	683b      	ldr	r3, [r7, #0]
 801db24:	689b      	ldr	r3, [r3, #8]
 801db26:	697a      	ldr	r2, [r7, #20]
 801db28:	4313      	orrs	r3, r2
 801db2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	4a30      	ldr	r2, [pc, #192]	; (801dbf0 <TIM_OC1_SetConfig+0x11c>)
 801db30:	4293      	cmp	r3, r2
 801db32:	d013      	beq.n	801db5c <TIM_OC1_SetConfig+0x88>
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	4a2f      	ldr	r2, [pc, #188]	; (801dbf4 <TIM_OC1_SetConfig+0x120>)
 801db38:	4293      	cmp	r3, r2
 801db3a:	d00f      	beq.n	801db5c <TIM_OC1_SetConfig+0x88>
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	4a2e      	ldr	r2, [pc, #184]	; (801dbf8 <TIM_OC1_SetConfig+0x124>)
 801db40:	4293      	cmp	r3, r2
 801db42:	d00b      	beq.n	801db5c <TIM_OC1_SetConfig+0x88>
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	4a2d      	ldr	r2, [pc, #180]	; (801dbfc <TIM_OC1_SetConfig+0x128>)
 801db48:	4293      	cmp	r3, r2
 801db4a:	d007      	beq.n	801db5c <TIM_OC1_SetConfig+0x88>
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	4a2c      	ldr	r2, [pc, #176]	; (801dc00 <TIM_OC1_SetConfig+0x12c>)
 801db50:	4293      	cmp	r3, r2
 801db52:	d003      	beq.n	801db5c <TIM_OC1_SetConfig+0x88>
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	4a2b      	ldr	r2, [pc, #172]	; (801dc04 <TIM_OC1_SetConfig+0x130>)
 801db58:	4293      	cmp	r3, r2
 801db5a:	d10c      	bne.n	801db76 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801db5c:	697b      	ldr	r3, [r7, #20]
 801db5e:	f023 0308 	bic.w	r3, r3, #8
 801db62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801db64:	683b      	ldr	r3, [r7, #0]
 801db66:	68db      	ldr	r3, [r3, #12]
 801db68:	697a      	ldr	r2, [r7, #20]
 801db6a:	4313      	orrs	r3, r2
 801db6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801db6e:	697b      	ldr	r3, [r7, #20]
 801db70:	f023 0304 	bic.w	r3, r3, #4
 801db74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	4a1d      	ldr	r2, [pc, #116]	; (801dbf0 <TIM_OC1_SetConfig+0x11c>)
 801db7a:	4293      	cmp	r3, r2
 801db7c:	d013      	beq.n	801dba6 <TIM_OC1_SetConfig+0xd2>
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	4a1c      	ldr	r2, [pc, #112]	; (801dbf4 <TIM_OC1_SetConfig+0x120>)
 801db82:	4293      	cmp	r3, r2
 801db84:	d00f      	beq.n	801dba6 <TIM_OC1_SetConfig+0xd2>
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	4a1b      	ldr	r2, [pc, #108]	; (801dbf8 <TIM_OC1_SetConfig+0x124>)
 801db8a:	4293      	cmp	r3, r2
 801db8c:	d00b      	beq.n	801dba6 <TIM_OC1_SetConfig+0xd2>
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	4a1a      	ldr	r2, [pc, #104]	; (801dbfc <TIM_OC1_SetConfig+0x128>)
 801db92:	4293      	cmp	r3, r2
 801db94:	d007      	beq.n	801dba6 <TIM_OC1_SetConfig+0xd2>
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	4a19      	ldr	r2, [pc, #100]	; (801dc00 <TIM_OC1_SetConfig+0x12c>)
 801db9a:	4293      	cmp	r3, r2
 801db9c:	d003      	beq.n	801dba6 <TIM_OC1_SetConfig+0xd2>
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	4a18      	ldr	r2, [pc, #96]	; (801dc04 <TIM_OC1_SetConfig+0x130>)
 801dba2:	4293      	cmp	r3, r2
 801dba4:	d111      	bne.n	801dbca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801dba6:	693b      	ldr	r3, [r7, #16]
 801dba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801dbac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801dbae:	693b      	ldr	r3, [r7, #16]
 801dbb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801dbb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801dbb6:	683b      	ldr	r3, [r7, #0]
 801dbb8:	695b      	ldr	r3, [r3, #20]
 801dbba:	693a      	ldr	r2, [r7, #16]
 801dbbc:	4313      	orrs	r3, r2
 801dbbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801dbc0:	683b      	ldr	r3, [r7, #0]
 801dbc2:	699b      	ldr	r3, [r3, #24]
 801dbc4:	693a      	ldr	r2, [r7, #16]
 801dbc6:	4313      	orrs	r3, r2
 801dbc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	693a      	ldr	r2, [r7, #16]
 801dbce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	68fa      	ldr	r2, [r7, #12]
 801dbd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801dbd6:	683b      	ldr	r3, [r7, #0]
 801dbd8:	685a      	ldr	r2, [r3, #4]
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	697a      	ldr	r2, [r7, #20]
 801dbe2:	621a      	str	r2, [r3, #32]
}
 801dbe4:	bf00      	nop
 801dbe6:	371c      	adds	r7, #28
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbee:	4770      	bx	lr
 801dbf0:	40012c00 	.word	0x40012c00
 801dbf4:	40013400 	.word	0x40013400
 801dbf8:	40014000 	.word	0x40014000
 801dbfc:	40014400 	.word	0x40014400
 801dc00:	40014800 	.word	0x40014800
 801dc04:	40015000 	.word	0x40015000

0801dc08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dc08:	b480      	push	{r7}
 801dc0a:	b087      	sub	sp, #28
 801dc0c:	af00      	add	r7, sp, #0
 801dc0e:	6078      	str	r0, [r7, #4]
 801dc10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	6a1b      	ldr	r3, [r3, #32]
 801dc16:	f023 0210 	bic.w	r2, r3, #16
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	6a1b      	ldr	r3, [r3, #32]
 801dc22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	685b      	ldr	r3, [r3, #4]
 801dc28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	699b      	ldr	r3, [r3, #24]
 801dc2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801dc30:	68fb      	ldr	r3, [r7, #12]
 801dc32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dc36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dc3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801dc42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dc44:	683b      	ldr	r3, [r7, #0]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	021b      	lsls	r3, r3, #8
 801dc4a:	68fa      	ldr	r2, [r7, #12]
 801dc4c:	4313      	orrs	r3, r2
 801dc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801dc50:	697b      	ldr	r3, [r7, #20]
 801dc52:	f023 0320 	bic.w	r3, r3, #32
 801dc56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801dc58:	683b      	ldr	r3, [r7, #0]
 801dc5a:	689b      	ldr	r3, [r3, #8]
 801dc5c:	011b      	lsls	r3, r3, #4
 801dc5e:	697a      	ldr	r2, [r7, #20]
 801dc60:	4313      	orrs	r3, r2
 801dc62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	4a2c      	ldr	r2, [pc, #176]	; (801dd18 <TIM_OC2_SetConfig+0x110>)
 801dc68:	4293      	cmp	r3, r2
 801dc6a:	d007      	beq.n	801dc7c <TIM_OC2_SetConfig+0x74>
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	4a2b      	ldr	r2, [pc, #172]	; (801dd1c <TIM_OC2_SetConfig+0x114>)
 801dc70:	4293      	cmp	r3, r2
 801dc72:	d003      	beq.n	801dc7c <TIM_OC2_SetConfig+0x74>
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	4a2a      	ldr	r2, [pc, #168]	; (801dd20 <TIM_OC2_SetConfig+0x118>)
 801dc78:	4293      	cmp	r3, r2
 801dc7a:	d10d      	bne.n	801dc98 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801dc7c:	697b      	ldr	r3, [r7, #20]
 801dc7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dc82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801dc84:	683b      	ldr	r3, [r7, #0]
 801dc86:	68db      	ldr	r3, [r3, #12]
 801dc88:	011b      	lsls	r3, r3, #4
 801dc8a:	697a      	ldr	r2, [r7, #20]
 801dc8c:	4313      	orrs	r3, r2
 801dc8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801dc90:	697b      	ldr	r3, [r7, #20]
 801dc92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801dc96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	4a1f      	ldr	r2, [pc, #124]	; (801dd18 <TIM_OC2_SetConfig+0x110>)
 801dc9c:	4293      	cmp	r3, r2
 801dc9e:	d013      	beq.n	801dcc8 <TIM_OC2_SetConfig+0xc0>
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	4a1e      	ldr	r2, [pc, #120]	; (801dd1c <TIM_OC2_SetConfig+0x114>)
 801dca4:	4293      	cmp	r3, r2
 801dca6:	d00f      	beq.n	801dcc8 <TIM_OC2_SetConfig+0xc0>
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	4a1e      	ldr	r2, [pc, #120]	; (801dd24 <TIM_OC2_SetConfig+0x11c>)
 801dcac:	4293      	cmp	r3, r2
 801dcae:	d00b      	beq.n	801dcc8 <TIM_OC2_SetConfig+0xc0>
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	4a1d      	ldr	r2, [pc, #116]	; (801dd28 <TIM_OC2_SetConfig+0x120>)
 801dcb4:	4293      	cmp	r3, r2
 801dcb6:	d007      	beq.n	801dcc8 <TIM_OC2_SetConfig+0xc0>
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	4a1c      	ldr	r2, [pc, #112]	; (801dd2c <TIM_OC2_SetConfig+0x124>)
 801dcbc:	4293      	cmp	r3, r2
 801dcbe:	d003      	beq.n	801dcc8 <TIM_OC2_SetConfig+0xc0>
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	4a17      	ldr	r2, [pc, #92]	; (801dd20 <TIM_OC2_SetConfig+0x118>)
 801dcc4:	4293      	cmp	r3, r2
 801dcc6:	d113      	bne.n	801dcf0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801dcc8:	693b      	ldr	r3, [r7, #16]
 801dcca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801dcce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801dcd0:	693b      	ldr	r3, [r7, #16]
 801dcd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dcd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801dcd8:	683b      	ldr	r3, [r7, #0]
 801dcda:	695b      	ldr	r3, [r3, #20]
 801dcdc:	009b      	lsls	r3, r3, #2
 801dcde:	693a      	ldr	r2, [r7, #16]
 801dce0:	4313      	orrs	r3, r2
 801dce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801dce4:	683b      	ldr	r3, [r7, #0]
 801dce6:	699b      	ldr	r3, [r3, #24]
 801dce8:	009b      	lsls	r3, r3, #2
 801dcea:	693a      	ldr	r2, [r7, #16]
 801dcec:	4313      	orrs	r3, r2
 801dcee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	693a      	ldr	r2, [r7, #16]
 801dcf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	68fa      	ldr	r2, [r7, #12]
 801dcfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801dcfc:	683b      	ldr	r3, [r7, #0]
 801dcfe:	685a      	ldr	r2, [r3, #4]
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	697a      	ldr	r2, [r7, #20]
 801dd08:	621a      	str	r2, [r3, #32]
}
 801dd0a:	bf00      	nop
 801dd0c:	371c      	adds	r7, #28
 801dd0e:	46bd      	mov	sp, r7
 801dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd14:	4770      	bx	lr
 801dd16:	bf00      	nop
 801dd18:	40012c00 	.word	0x40012c00
 801dd1c:	40013400 	.word	0x40013400
 801dd20:	40015000 	.word	0x40015000
 801dd24:	40014000 	.word	0x40014000
 801dd28:	40014400 	.word	0x40014400
 801dd2c:	40014800 	.word	0x40014800

0801dd30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dd30:	b480      	push	{r7}
 801dd32:	b087      	sub	sp, #28
 801dd34:	af00      	add	r7, sp, #0
 801dd36:	6078      	str	r0, [r7, #4]
 801dd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	6a1b      	ldr	r3, [r3, #32]
 801dd3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	6a1b      	ldr	r3, [r3, #32]
 801dd4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	685b      	ldr	r3, [r3, #4]
 801dd50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	69db      	ldr	r3, [r3, #28]
 801dd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	f023 0303 	bic.w	r3, r3, #3
 801dd6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dd6c:	683b      	ldr	r3, [r7, #0]
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	68fa      	ldr	r2, [r7, #12]
 801dd72:	4313      	orrs	r3, r2
 801dd74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801dd76:	697b      	ldr	r3, [r7, #20]
 801dd78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801dd7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801dd7e:	683b      	ldr	r3, [r7, #0]
 801dd80:	689b      	ldr	r3, [r3, #8]
 801dd82:	021b      	lsls	r3, r3, #8
 801dd84:	697a      	ldr	r2, [r7, #20]
 801dd86:	4313      	orrs	r3, r2
 801dd88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	4a2b      	ldr	r2, [pc, #172]	; (801de3c <TIM_OC3_SetConfig+0x10c>)
 801dd8e:	4293      	cmp	r3, r2
 801dd90:	d007      	beq.n	801dda2 <TIM_OC3_SetConfig+0x72>
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	4a2a      	ldr	r2, [pc, #168]	; (801de40 <TIM_OC3_SetConfig+0x110>)
 801dd96:	4293      	cmp	r3, r2
 801dd98:	d003      	beq.n	801dda2 <TIM_OC3_SetConfig+0x72>
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	4a29      	ldr	r2, [pc, #164]	; (801de44 <TIM_OC3_SetConfig+0x114>)
 801dd9e:	4293      	cmp	r3, r2
 801dda0:	d10d      	bne.n	801ddbe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801dda2:	697b      	ldr	r3, [r7, #20]
 801dda4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dda8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ddaa:	683b      	ldr	r3, [r7, #0]
 801ddac:	68db      	ldr	r3, [r3, #12]
 801ddae:	021b      	lsls	r3, r3, #8
 801ddb0:	697a      	ldr	r2, [r7, #20]
 801ddb2:	4313      	orrs	r3, r2
 801ddb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ddb6:	697b      	ldr	r3, [r7, #20]
 801ddb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ddbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	4a1e      	ldr	r2, [pc, #120]	; (801de3c <TIM_OC3_SetConfig+0x10c>)
 801ddc2:	4293      	cmp	r3, r2
 801ddc4:	d013      	beq.n	801ddee <TIM_OC3_SetConfig+0xbe>
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	4a1d      	ldr	r2, [pc, #116]	; (801de40 <TIM_OC3_SetConfig+0x110>)
 801ddca:	4293      	cmp	r3, r2
 801ddcc:	d00f      	beq.n	801ddee <TIM_OC3_SetConfig+0xbe>
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	4a1d      	ldr	r2, [pc, #116]	; (801de48 <TIM_OC3_SetConfig+0x118>)
 801ddd2:	4293      	cmp	r3, r2
 801ddd4:	d00b      	beq.n	801ddee <TIM_OC3_SetConfig+0xbe>
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	4a1c      	ldr	r2, [pc, #112]	; (801de4c <TIM_OC3_SetConfig+0x11c>)
 801ddda:	4293      	cmp	r3, r2
 801dddc:	d007      	beq.n	801ddee <TIM_OC3_SetConfig+0xbe>
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	4a1b      	ldr	r2, [pc, #108]	; (801de50 <TIM_OC3_SetConfig+0x120>)
 801dde2:	4293      	cmp	r3, r2
 801dde4:	d003      	beq.n	801ddee <TIM_OC3_SetConfig+0xbe>
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	4a16      	ldr	r2, [pc, #88]	; (801de44 <TIM_OC3_SetConfig+0x114>)
 801ddea:	4293      	cmp	r3, r2
 801ddec:	d113      	bne.n	801de16 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ddee:	693b      	ldr	r3, [r7, #16]
 801ddf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ddf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ddf6:	693b      	ldr	r3, [r7, #16]
 801ddf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ddfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ddfe:	683b      	ldr	r3, [r7, #0]
 801de00:	695b      	ldr	r3, [r3, #20]
 801de02:	011b      	lsls	r3, r3, #4
 801de04:	693a      	ldr	r2, [r7, #16]
 801de06:	4313      	orrs	r3, r2
 801de08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801de0a:	683b      	ldr	r3, [r7, #0]
 801de0c:	699b      	ldr	r3, [r3, #24]
 801de0e:	011b      	lsls	r3, r3, #4
 801de10:	693a      	ldr	r2, [r7, #16]
 801de12:	4313      	orrs	r3, r2
 801de14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	693a      	ldr	r2, [r7, #16]
 801de1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	68fa      	ldr	r2, [r7, #12]
 801de20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801de22:	683b      	ldr	r3, [r7, #0]
 801de24:	685a      	ldr	r2, [r3, #4]
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	697a      	ldr	r2, [r7, #20]
 801de2e:	621a      	str	r2, [r3, #32]
}
 801de30:	bf00      	nop
 801de32:	371c      	adds	r7, #28
 801de34:	46bd      	mov	sp, r7
 801de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de3a:	4770      	bx	lr
 801de3c:	40012c00 	.word	0x40012c00
 801de40:	40013400 	.word	0x40013400
 801de44:	40015000 	.word	0x40015000
 801de48:	40014000 	.word	0x40014000
 801de4c:	40014400 	.word	0x40014400
 801de50:	40014800 	.word	0x40014800

0801de54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801de54:	b480      	push	{r7}
 801de56:	b087      	sub	sp, #28
 801de58:	af00      	add	r7, sp, #0
 801de5a:	6078      	str	r0, [r7, #4]
 801de5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801de5e:	687b      	ldr	r3, [r7, #4]
 801de60:	6a1b      	ldr	r3, [r3, #32]
 801de62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	6a1b      	ldr	r3, [r3, #32]
 801de6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	685b      	ldr	r3, [r3, #4]
 801de74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	69db      	ldr	r3, [r3, #28]
 801de7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801de7c:	68fb      	ldr	r3, [r7, #12]
 801de7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801de82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801de86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801de88:	68fb      	ldr	r3, [r7, #12]
 801de8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801de8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801de90:	683b      	ldr	r3, [r7, #0]
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	021b      	lsls	r3, r3, #8
 801de96:	68fa      	ldr	r2, [r7, #12]
 801de98:	4313      	orrs	r3, r2
 801de9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801de9c:	697b      	ldr	r3, [r7, #20]
 801de9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801dea4:	683b      	ldr	r3, [r7, #0]
 801dea6:	689b      	ldr	r3, [r3, #8]
 801dea8:	031b      	lsls	r3, r3, #12
 801deaa:	697a      	ldr	r2, [r7, #20]
 801deac:	4313      	orrs	r3, r2
 801deae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	4a2c      	ldr	r2, [pc, #176]	; (801df64 <TIM_OC4_SetConfig+0x110>)
 801deb4:	4293      	cmp	r3, r2
 801deb6:	d007      	beq.n	801dec8 <TIM_OC4_SetConfig+0x74>
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	4a2b      	ldr	r2, [pc, #172]	; (801df68 <TIM_OC4_SetConfig+0x114>)
 801debc:	4293      	cmp	r3, r2
 801debe:	d003      	beq.n	801dec8 <TIM_OC4_SetConfig+0x74>
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	4a2a      	ldr	r2, [pc, #168]	; (801df6c <TIM_OC4_SetConfig+0x118>)
 801dec4:	4293      	cmp	r3, r2
 801dec6:	d10d      	bne.n	801dee4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801dec8:	697b      	ldr	r3, [r7, #20]
 801deca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801dece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801ded0:	683b      	ldr	r3, [r7, #0]
 801ded2:	68db      	ldr	r3, [r3, #12]
 801ded4:	031b      	lsls	r3, r3, #12
 801ded6:	697a      	ldr	r2, [r7, #20]
 801ded8:	4313      	orrs	r3, r2
 801deda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801dedc:	697b      	ldr	r3, [r7, #20]
 801dede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	4a1f      	ldr	r2, [pc, #124]	; (801df64 <TIM_OC4_SetConfig+0x110>)
 801dee8:	4293      	cmp	r3, r2
 801deea:	d013      	beq.n	801df14 <TIM_OC4_SetConfig+0xc0>
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	4a1e      	ldr	r2, [pc, #120]	; (801df68 <TIM_OC4_SetConfig+0x114>)
 801def0:	4293      	cmp	r3, r2
 801def2:	d00f      	beq.n	801df14 <TIM_OC4_SetConfig+0xc0>
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	4a1e      	ldr	r2, [pc, #120]	; (801df70 <TIM_OC4_SetConfig+0x11c>)
 801def8:	4293      	cmp	r3, r2
 801defa:	d00b      	beq.n	801df14 <TIM_OC4_SetConfig+0xc0>
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	4a1d      	ldr	r2, [pc, #116]	; (801df74 <TIM_OC4_SetConfig+0x120>)
 801df00:	4293      	cmp	r3, r2
 801df02:	d007      	beq.n	801df14 <TIM_OC4_SetConfig+0xc0>
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	4a1c      	ldr	r2, [pc, #112]	; (801df78 <TIM_OC4_SetConfig+0x124>)
 801df08:	4293      	cmp	r3, r2
 801df0a:	d003      	beq.n	801df14 <TIM_OC4_SetConfig+0xc0>
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	4a17      	ldr	r2, [pc, #92]	; (801df6c <TIM_OC4_SetConfig+0x118>)
 801df10:	4293      	cmp	r3, r2
 801df12:	d113      	bne.n	801df3c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801df14:	693b      	ldr	r3, [r7, #16]
 801df16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801df1a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801df1c:	693b      	ldr	r3, [r7, #16]
 801df1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801df22:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801df24:	683b      	ldr	r3, [r7, #0]
 801df26:	695b      	ldr	r3, [r3, #20]
 801df28:	019b      	lsls	r3, r3, #6
 801df2a:	693a      	ldr	r2, [r7, #16]
 801df2c:	4313      	orrs	r3, r2
 801df2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801df30:	683b      	ldr	r3, [r7, #0]
 801df32:	699b      	ldr	r3, [r3, #24]
 801df34:	019b      	lsls	r3, r3, #6
 801df36:	693a      	ldr	r2, [r7, #16]
 801df38:	4313      	orrs	r3, r2
 801df3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	693a      	ldr	r2, [r7, #16]
 801df40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	68fa      	ldr	r2, [r7, #12]
 801df46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801df48:	683b      	ldr	r3, [r7, #0]
 801df4a:	685a      	ldr	r2, [r3, #4]
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	697a      	ldr	r2, [r7, #20]
 801df54:	621a      	str	r2, [r3, #32]
}
 801df56:	bf00      	nop
 801df58:	371c      	adds	r7, #28
 801df5a:	46bd      	mov	sp, r7
 801df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df60:	4770      	bx	lr
 801df62:	bf00      	nop
 801df64:	40012c00 	.word	0x40012c00
 801df68:	40013400 	.word	0x40013400
 801df6c:	40015000 	.word	0x40015000
 801df70:	40014000 	.word	0x40014000
 801df74:	40014400 	.word	0x40014400
 801df78:	40014800 	.word	0x40014800

0801df7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801df7c:	b480      	push	{r7}
 801df7e:	b087      	sub	sp, #28
 801df80:	af00      	add	r7, sp, #0
 801df82:	6078      	str	r0, [r7, #4]
 801df84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	6a1b      	ldr	r3, [r3, #32]
 801df8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	6a1b      	ldr	r3, [r3, #32]
 801df96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	685b      	ldr	r3, [r3, #4]
 801df9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dfa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dfaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dfae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dfb0:	683b      	ldr	r3, [r7, #0]
 801dfb2:	681b      	ldr	r3, [r3, #0]
 801dfb4:	68fa      	ldr	r2, [r7, #12]
 801dfb6:	4313      	orrs	r3, r2
 801dfb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801dfba:	693b      	ldr	r3, [r7, #16]
 801dfbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801dfc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801dfc2:	683b      	ldr	r3, [r7, #0]
 801dfc4:	689b      	ldr	r3, [r3, #8]
 801dfc6:	041b      	lsls	r3, r3, #16
 801dfc8:	693a      	ldr	r2, [r7, #16]
 801dfca:	4313      	orrs	r3, r2
 801dfcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	4a19      	ldr	r2, [pc, #100]	; (801e038 <TIM_OC5_SetConfig+0xbc>)
 801dfd2:	4293      	cmp	r3, r2
 801dfd4:	d013      	beq.n	801dffe <TIM_OC5_SetConfig+0x82>
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	4a18      	ldr	r2, [pc, #96]	; (801e03c <TIM_OC5_SetConfig+0xc0>)
 801dfda:	4293      	cmp	r3, r2
 801dfdc:	d00f      	beq.n	801dffe <TIM_OC5_SetConfig+0x82>
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	4a17      	ldr	r2, [pc, #92]	; (801e040 <TIM_OC5_SetConfig+0xc4>)
 801dfe2:	4293      	cmp	r3, r2
 801dfe4:	d00b      	beq.n	801dffe <TIM_OC5_SetConfig+0x82>
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	4a16      	ldr	r2, [pc, #88]	; (801e044 <TIM_OC5_SetConfig+0xc8>)
 801dfea:	4293      	cmp	r3, r2
 801dfec:	d007      	beq.n	801dffe <TIM_OC5_SetConfig+0x82>
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	4a15      	ldr	r2, [pc, #84]	; (801e048 <TIM_OC5_SetConfig+0xcc>)
 801dff2:	4293      	cmp	r3, r2
 801dff4:	d003      	beq.n	801dffe <TIM_OC5_SetConfig+0x82>
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	4a14      	ldr	r2, [pc, #80]	; (801e04c <TIM_OC5_SetConfig+0xd0>)
 801dffa:	4293      	cmp	r3, r2
 801dffc:	d109      	bne.n	801e012 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801dffe:	697b      	ldr	r3, [r7, #20]
 801e000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801e004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801e006:	683b      	ldr	r3, [r7, #0]
 801e008:	695b      	ldr	r3, [r3, #20]
 801e00a:	021b      	lsls	r3, r3, #8
 801e00c:	697a      	ldr	r2, [r7, #20]
 801e00e:	4313      	orrs	r3, r2
 801e010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	697a      	ldr	r2, [r7, #20]
 801e016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	68fa      	ldr	r2, [r7, #12]
 801e01c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801e01e:	683b      	ldr	r3, [r7, #0]
 801e020:	685a      	ldr	r2, [r3, #4]
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	693a      	ldr	r2, [r7, #16]
 801e02a:	621a      	str	r2, [r3, #32]
}
 801e02c:	bf00      	nop
 801e02e:	371c      	adds	r7, #28
 801e030:	46bd      	mov	sp, r7
 801e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e036:	4770      	bx	lr
 801e038:	40012c00 	.word	0x40012c00
 801e03c:	40013400 	.word	0x40013400
 801e040:	40014000 	.word	0x40014000
 801e044:	40014400 	.word	0x40014400
 801e048:	40014800 	.word	0x40014800
 801e04c:	40015000 	.word	0x40015000

0801e050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801e050:	b480      	push	{r7}
 801e052:	b087      	sub	sp, #28
 801e054:	af00      	add	r7, sp, #0
 801e056:	6078      	str	r0, [r7, #4]
 801e058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	6a1b      	ldr	r3, [r3, #32]
 801e05e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	6a1b      	ldr	r3, [r3, #32]
 801e06a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	685b      	ldr	r3, [r3, #4]
 801e070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801e07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801e082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801e084:	683b      	ldr	r3, [r7, #0]
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	021b      	lsls	r3, r3, #8
 801e08a:	68fa      	ldr	r2, [r7, #12]
 801e08c:	4313      	orrs	r3, r2
 801e08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801e090:	693b      	ldr	r3, [r7, #16]
 801e092:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801e096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801e098:	683b      	ldr	r3, [r7, #0]
 801e09a:	689b      	ldr	r3, [r3, #8]
 801e09c:	051b      	lsls	r3, r3, #20
 801e09e:	693a      	ldr	r2, [r7, #16]
 801e0a0:	4313      	orrs	r3, r2
 801e0a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	4a1a      	ldr	r2, [pc, #104]	; (801e110 <TIM_OC6_SetConfig+0xc0>)
 801e0a8:	4293      	cmp	r3, r2
 801e0aa:	d013      	beq.n	801e0d4 <TIM_OC6_SetConfig+0x84>
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	4a19      	ldr	r2, [pc, #100]	; (801e114 <TIM_OC6_SetConfig+0xc4>)
 801e0b0:	4293      	cmp	r3, r2
 801e0b2:	d00f      	beq.n	801e0d4 <TIM_OC6_SetConfig+0x84>
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	4a18      	ldr	r2, [pc, #96]	; (801e118 <TIM_OC6_SetConfig+0xc8>)
 801e0b8:	4293      	cmp	r3, r2
 801e0ba:	d00b      	beq.n	801e0d4 <TIM_OC6_SetConfig+0x84>
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	4a17      	ldr	r2, [pc, #92]	; (801e11c <TIM_OC6_SetConfig+0xcc>)
 801e0c0:	4293      	cmp	r3, r2
 801e0c2:	d007      	beq.n	801e0d4 <TIM_OC6_SetConfig+0x84>
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	4a16      	ldr	r2, [pc, #88]	; (801e120 <TIM_OC6_SetConfig+0xd0>)
 801e0c8:	4293      	cmp	r3, r2
 801e0ca:	d003      	beq.n	801e0d4 <TIM_OC6_SetConfig+0x84>
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	4a15      	ldr	r2, [pc, #84]	; (801e124 <TIM_OC6_SetConfig+0xd4>)
 801e0d0:	4293      	cmp	r3, r2
 801e0d2:	d109      	bne.n	801e0e8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801e0d4:	697b      	ldr	r3, [r7, #20]
 801e0d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801e0da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801e0dc:	683b      	ldr	r3, [r7, #0]
 801e0de:	695b      	ldr	r3, [r3, #20]
 801e0e0:	029b      	lsls	r3, r3, #10
 801e0e2:	697a      	ldr	r2, [r7, #20]
 801e0e4:	4313      	orrs	r3, r2
 801e0e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	697a      	ldr	r2, [r7, #20]
 801e0ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	68fa      	ldr	r2, [r7, #12]
 801e0f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801e0f4:	683b      	ldr	r3, [r7, #0]
 801e0f6:	685a      	ldr	r2, [r3, #4]
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	693a      	ldr	r2, [r7, #16]
 801e100:	621a      	str	r2, [r3, #32]
}
 801e102:	bf00      	nop
 801e104:	371c      	adds	r7, #28
 801e106:	46bd      	mov	sp, r7
 801e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e10c:	4770      	bx	lr
 801e10e:	bf00      	nop
 801e110:	40012c00 	.word	0x40012c00
 801e114:	40013400 	.word	0x40013400
 801e118:	40014000 	.word	0x40014000
 801e11c:	40014400 	.word	0x40014400
 801e120:	40014800 	.word	0x40014800
 801e124:	40015000 	.word	0x40015000

0801e128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801e128:	b480      	push	{r7}
 801e12a:	b087      	sub	sp, #28
 801e12c:	af00      	add	r7, sp, #0
 801e12e:	60f8      	str	r0, [r7, #12]
 801e130:	60b9      	str	r1, [r7, #8]
 801e132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801e134:	68bb      	ldr	r3, [r7, #8]
 801e136:	f003 031f 	and.w	r3, r3, #31
 801e13a:	2201      	movs	r2, #1
 801e13c:	fa02 f303 	lsl.w	r3, r2, r3
 801e140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801e142:	68fb      	ldr	r3, [r7, #12]
 801e144:	6a1a      	ldr	r2, [r3, #32]
 801e146:	697b      	ldr	r3, [r7, #20]
 801e148:	43db      	mvns	r3, r3
 801e14a:	401a      	ands	r2, r3
 801e14c:	68fb      	ldr	r3, [r7, #12]
 801e14e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	6a1a      	ldr	r2, [r3, #32]
 801e154:	68bb      	ldr	r3, [r7, #8]
 801e156:	f003 031f 	and.w	r3, r3, #31
 801e15a:	6879      	ldr	r1, [r7, #4]
 801e15c:	fa01 f303 	lsl.w	r3, r1, r3
 801e160:	431a      	orrs	r2, r3
 801e162:	68fb      	ldr	r3, [r7, #12]
 801e164:	621a      	str	r2, [r3, #32]
}
 801e166:	bf00      	nop
 801e168:	371c      	adds	r7, #28
 801e16a:	46bd      	mov	sp, r7
 801e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e170:	4770      	bx	lr
	...

0801e174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801e174:	b480      	push	{r7}
 801e176:	b085      	sub	sp, #20
 801e178:	af00      	add	r7, sp, #0
 801e17a:	6078      	str	r0, [r7, #4]
 801e17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e184:	2b01      	cmp	r3, #1
 801e186:	d101      	bne.n	801e18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801e188:	2302      	movs	r3, #2
 801e18a:	e06f      	b.n	801e26c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	2201      	movs	r2, #1
 801e190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	2202      	movs	r2, #2
 801e198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	685b      	ldr	r3, [r3, #4]
 801e1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	689b      	ldr	r3, [r3, #8]
 801e1aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	4a31      	ldr	r2, [pc, #196]	; (801e278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801e1b2:	4293      	cmp	r3, r2
 801e1b4:	d009      	beq.n	801e1ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	4a30      	ldr	r2, [pc, #192]	; (801e27c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801e1bc:	4293      	cmp	r3, r2
 801e1be:	d004      	beq.n	801e1ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	4a2e      	ldr	r2, [pc, #184]	; (801e280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801e1c6:	4293      	cmp	r3, r2
 801e1c8:	d108      	bne.n	801e1dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801e1d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801e1d2:	683b      	ldr	r3, [r7, #0]
 801e1d4:	685b      	ldr	r3, [r3, #4]
 801e1d6:	68fa      	ldr	r2, [r7, #12]
 801e1d8:	4313      	orrs	r3, r2
 801e1da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801e1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e1e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801e1e8:	683b      	ldr	r3, [r7, #0]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	68fa      	ldr	r2, [r7, #12]
 801e1ee:	4313      	orrs	r3, r2
 801e1f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	68fa      	ldr	r2, [r7, #12]
 801e1f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	681b      	ldr	r3, [r3, #0]
 801e1fe:	4a1e      	ldr	r2, [pc, #120]	; (801e278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801e200:	4293      	cmp	r3, r2
 801e202:	d01d      	beq.n	801e240 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e20c:	d018      	beq.n	801e240 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	681b      	ldr	r3, [r3, #0]
 801e212:	4a1c      	ldr	r2, [pc, #112]	; (801e284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801e214:	4293      	cmp	r3, r2
 801e216:	d013      	beq.n	801e240 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	4a1a      	ldr	r2, [pc, #104]	; (801e288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801e21e:	4293      	cmp	r3, r2
 801e220:	d00e      	beq.n	801e240 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	4a15      	ldr	r2, [pc, #84]	; (801e27c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801e228:	4293      	cmp	r3, r2
 801e22a:	d009      	beq.n	801e240 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	4a16      	ldr	r2, [pc, #88]	; (801e28c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801e232:	4293      	cmp	r3, r2
 801e234:	d004      	beq.n	801e240 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	4a11      	ldr	r2, [pc, #68]	; (801e280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801e23c:	4293      	cmp	r3, r2
 801e23e:	d10c      	bne.n	801e25a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801e240:	68bb      	ldr	r3, [r7, #8]
 801e242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e246:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801e248:	683b      	ldr	r3, [r7, #0]
 801e24a:	689b      	ldr	r3, [r3, #8]
 801e24c:	68ba      	ldr	r2, [r7, #8]
 801e24e:	4313      	orrs	r3, r2
 801e250:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	681b      	ldr	r3, [r3, #0]
 801e256:	68ba      	ldr	r2, [r7, #8]
 801e258:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	2201      	movs	r2, #1
 801e25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	2200      	movs	r2, #0
 801e266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e26a:	2300      	movs	r3, #0
}
 801e26c:	4618      	mov	r0, r3
 801e26e:	3714      	adds	r7, #20
 801e270:	46bd      	mov	sp, r7
 801e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e276:	4770      	bx	lr
 801e278:	40012c00 	.word	0x40012c00
 801e27c:	40013400 	.word	0x40013400
 801e280:	40015000 	.word	0x40015000
 801e284:	40000400 	.word	0x40000400
 801e288:	40000800 	.word	0x40000800
 801e28c:	40014000 	.word	0x40014000

0801e290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801e290:	b480      	push	{r7}
 801e292:	b085      	sub	sp, #20
 801e294:	af00      	add	r7, sp, #0
 801e296:	6078      	str	r0, [r7, #4]
 801e298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801e29a:	2300      	movs	r3, #0
 801e29c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e2a4:	2b01      	cmp	r3, #1
 801e2a6:	d101      	bne.n	801e2ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801e2a8:	2302      	movs	r3, #2
 801e2aa:	e096      	b.n	801e3da <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	2201      	movs	r2, #1
 801e2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801e2ba:	683b      	ldr	r3, [r7, #0]
 801e2bc:	68db      	ldr	r3, [r3, #12]
 801e2be:	4313      	orrs	r3, r2
 801e2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801e2c8:	683b      	ldr	r3, [r7, #0]
 801e2ca:	689b      	ldr	r3, [r3, #8]
 801e2cc:	4313      	orrs	r3, r2
 801e2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801e2d6:	683b      	ldr	r3, [r7, #0]
 801e2d8:	685b      	ldr	r3, [r3, #4]
 801e2da:	4313      	orrs	r3, r2
 801e2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801e2e4:	683b      	ldr	r3, [r7, #0]
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	4313      	orrs	r3, r2
 801e2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801e2f2:	683b      	ldr	r3, [r7, #0]
 801e2f4:	691b      	ldr	r3, [r3, #16]
 801e2f6:	4313      	orrs	r3, r2
 801e2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801e300:	683b      	ldr	r3, [r7, #0]
 801e302:	695b      	ldr	r3, [r3, #20]
 801e304:	4313      	orrs	r3, r2
 801e306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801e308:	68fb      	ldr	r3, [r7, #12]
 801e30a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801e30e:	683b      	ldr	r3, [r7, #0]
 801e310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e312:	4313      	orrs	r3, r2
 801e314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801e316:	68fb      	ldr	r3, [r7, #12]
 801e318:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801e31c:	683b      	ldr	r3, [r7, #0]
 801e31e:	699b      	ldr	r3, [r3, #24]
 801e320:	041b      	lsls	r3, r3, #16
 801e322:	4313      	orrs	r3, r2
 801e324:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	4a2f      	ldr	r2, [pc, #188]	; (801e3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e32c:	4293      	cmp	r3, r2
 801e32e:	d009      	beq.n	801e344 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	4a2d      	ldr	r2, [pc, #180]	; (801e3ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e336:	4293      	cmp	r3, r2
 801e338:	d004      	beq.n	801e344 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	4a2c      	ldr	r2, [pc, #176]	; (801e3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e340:	4293      	cmp	r3, r2
 801e342:	d106      	bne.n	801e352 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801e34a:	683b      	ldr	r3, [r7, #0]
 801e34c:	69db      	ldr	r3, [r3, #28]
 801e34e:	4313      	orrs	r3, r2
 801e350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	4a24      	ldr	r2, [pc, #144]	; (801e3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e358:	4293      	cmp	r3, r2
 801e35a:	d009      	beq.n	801e370 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	4a22      	ldr	r2, [pc, #136]	; (801e3ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e362:	4293      	cmp	r3, r2
 801e364:	d004      	beq.n	801e370 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	4a21      	ldr	r2, [pc, #132]	; (801e3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e36c:	4293      	cmp	r3, r2
 801e36e:	d12b      	bne.n	801e3c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801e376:	683b      	ldr	r3, [r7, #0]
 801e378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e37a:	051b      	lsls	r3, r3, #20
 801e37c:	4313      	orrs	r3, r2
 801e37e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801e386:	683b      	ldr	r3, [r7, #0]
 801e388:	6a1b      	ldr	r3, [r3, #32]
 801e38a:	4313      	orrs	r3, r2
 801e38c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801e394:	683b      	ldr	r3, [r7, #0]
 801e396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e398:	4313      	orrs	r3, r2
 801e39a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	4a11      	ldr	r2, [pc, #68]	; (801e3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e3a2:	4293      	cmp	r3, r2
 801e3a4:	d009      	beq.n	801e3ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	4a10      	ldr	r2, [pc, #64]	; (801e3ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e3ac:	4293      	cmp	r3, r2
 801e3ae:	d004      	beq.n	801e3ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	4a0e      	ldr	r2, [pc, #56]	; (801e3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e3b6:	4293      	cmp	r3, r2
 801e3b8:	d106      	bne.n	801e3c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801e3c0:	683b      	ldr	r3, [r7, #0]
 801e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3c4:	4313      	orrs	r3, r2
 801e3c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	68fa      	ldr	r2, [r7, #12]
 801e3ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	2200      	movs	r2, #0
 801e3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e3d8:	2300      	movs	r3, #0
}
 801e3da:	4618      	mov	r0, r3
 801e3dc:	3714      	adds	r7, #20
 801e3de:	46bd      	mov	sp, r7
 801e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3e4:	4770      	bx	lr
 801e3e6:	bf00      	nop
 801e3e8:	40012c00 	.word	0x40012c00
 801e3ec:	40013400 	.word	0x40013400
 801e3f0:	40015000 	.word	0x40015000

0801e3f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801e3f4:	b480      	push	{r7}
 801e3f6:	b083      	sub	sp, #12
 801e3f8:	af00      	add	r7, sp, #0
 801e3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801e3fc:	bf00      	nop
 801e3fe:	370c      	adds	r7, #12
 801e400:	46bd      	mov	sp, r7
 801e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e406:	4770      	bx	lr

0801e408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801e408:	b480      	push	{r7}
 801e40a:	b083      	sub	sp, #12
 801e40c:	af00      	add	r7, sp, #0
 801e40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801e410:	bf00      	nop
 801e412:	370c      	adds	r7, #12
 801e414:	46bd      	mov	sp, r7
 801e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e41a:	4770      	bx	lr

0801e41c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e41c:	b480      	push	{r7}
 801e41e:	b083      	sub	sp, #12
 801e420:	af00      	add	r7, sp, #0
 801e422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e424:	bf00      	nop
 801e426:	370c      	adds	r7, #12
 801e428:	46bd      	mov	sp, r7
 801e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e42e:	4770      	bx	lr

0801e430 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801e430:	b480      	push	{r7}
 801e432:	b083      	sub	sp, #12
 801e434:	af00      	add	r7, sp, #0
 801e436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801e438:	bf00      	nop
 801e43a:	370c      	adds	r7, #12
 801e43c:	46bd      	mov	sp, r7
 801e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e442:	4770      	bx	lr

0801e444 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801e444:	b480      	push	{r7}
 801e446:	b083      	sub	sp, #12
 801e448:	af00      	add	r7, sp, #0
 801e44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801e44c:	bf00      	nop
 801e44e:	370c      	adds	r7, #12
 801e450:	46bd      	mov	sp, r7
 801e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e456:	4770      	bx	lr

0801e458 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801e458:	b480      	push	{r7}
 801e45a:	b083      	sub	sp, #12
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801e460:	bf00      	nop
 801e462:	370c      	adds	r7, #12
 801e464:	46bd      	mov	sp, r7
 801e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e46a:	4770      	bx	lr

0801e46c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801e46c:	b480      	push	{r7}
 801e46e:	b083      	sub	sp, #12
 801e470:	af00      	add	r7, sp, #0
 801e472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801e474:	bf00      	nop
 801e476:	370c      	adds	r7, #12
 801e478:	46bd      	mov	sp, r7
 801e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e47e:	4770      	bx	lr

0801e480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e480:	b580      	push	{r7, lr}
 801e482:	b082      	sub	sp, #8
 801e484:	af00      	add	r7, sp, #0
 801e486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d101      	bne.n	801e492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e48e:	2301      	movs	r3, #1
 801e490:	e042      	b.n	801e518 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d106      	bne.n	801e4aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	2200      	movs	r2, #0
 801e4a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e4a4:	6878      	ldr	r0, [r7, #4]
 801e4a6:	f7f9 fae3 	bl	8017a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	2224      	movs	r2, #36	; 0x24
 801e4ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	681a      	ldr	r2, [r3, #0]
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	f022 0201 	bic.w	r2, r2, #1
 801e4c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e4c2:	6878      	ldr	r0, [r7, #4]
 801e4c4:	f000 f8c2 	bl	801e64c <UART_SetConfig>
 801e4c8:	4603      	mov	r3, r0
 801e4ca:	2b01      	cmp	r3, #1
 801e4cc:	d101      	bne.n	801e4d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801e4ce:	2301      	movs	r3, #1
 801e4d0:	e022      	b.n	801e518 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d002      	beq.n	801e4e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801e4da:	6878      	ldr	r0, [r7, #4]
 801e4dc:	f000 fbb2 	bl	801ec44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	685a      	ldr	r2, [r3, #4]
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801e4ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	689a      	ldr	r2, [r3, #8]
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	681b      	ldr	r3, [r3, #0]
 801e4fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801e4fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	681a      	ldr	r2, [r3, #0]
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	f042 0201 	orr.w	r2, r2, #1
 801e50e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e510:	6878      	ldr	r0, [r7, #4]
 801e512:	f000 fc39 	bl	801ed88 <UART_CheckIdleState>
 801e516:	4603      	mov	r3, r0
}
 801e518:	4618      	mov	r0, r3
 801e51a:	3708      	adds	r7, #8
 801e51c:	46bd      	mov	sp, r7
 801e51e:	bd80      	pop	{r7, pc}

0801e520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e520:	b580      	push	{r7, lr}
 801e522:	b08a      	sub	sp, #40	; 0x28
 801e524:	af02      	add	r7, sp, #8
 801e526:	60f8      	str	r0, [r7, #12]
 801e528:	60b9      	str	r1, [r7, #8]
 801e52a:	603b      	str	r3, [r7, #0]
 801e52c:	4613      	mov	r3, r2
 801e52e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e530:	68fb      	ldr	r3, [r7, #12]
 801e532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e536:	2b20      	cmp	r3, #32
 801e538:	f040 8083 	bne.w	801e642 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801e53c:	68bb      	ldr	r3, [r7, #8]
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d002      	beq.n	801e548 <HAL_UART_Transmit+0x28>
 801e542:	88fb      	ldrh	r3, [r7, #6]
 801e544:	2b00      	cmp	r3, #0
 801e546:	d101      	bne.n	801e54c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801e548:	2301      	movs	r3, #1
 801e54a:	e07b      	b.n	801e644 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801e54c:	68fb      	ldr	r3, [r7, #12]
 801e54e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801e552:	2b01      	cmp	r3, #1
 801e554:	d101      	bne.n	801e55a <HAL_UART_Transmit+0x3a>
 801e556:	2302      	movs	r3, #2
 801e558:	e074      	b.n	801e644 <HAL_UART_Transmit+0x124>
 801e55a:	68fb      	ldr	r3, [r7, #12]
 801e55c:	2201      	movs	r2, #1
 801e55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	2200      	movs	r2, #0
 801e566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e56a:	68fb      	ldr	r3, [r7, #12]
 801e56c:	2221      	movs	r2, #33	; 0x21
 801e56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e572:	f7f9 fb6b 	bl	8017c4c <HAL_GetTick>
 801e576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	88fa      	ldrh	r2, [r7, #6]
 801e57c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	88fa      	ldrh	r2, [r7, #6]
 801e584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	689b      	ldr	r3, [r3, #8]
 801e58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e590:	d108      	bne.n	801e5a4 <HAL_UART_Transmit+0x84>
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	691b      	ldr	r3, [r3, #16]
 801e596:	2b00      	cmp	r3, #0
 801e598:	d104      	bne.n	801e5a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801e59a:	2300      	movs	r3, #0
 801e59c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e59e:	68bb      	ldr	r3, [r7, #8]
 801e5a0:	61bb      	str	r3, [r7, #24]
 801e5a2:	e003      	b.n	801e5ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801e5a4:	68bb      	ldr	r3, [r7, #8]
 801e5a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e5a8:	2300      	movs	r3, #0
 801e5aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	2200      	movs	r2, #0
 801e5b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801e5b4:	e02c      	b.n	801e610 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e5b6:	683b      	ldr	r3, [r7, #0]
 801e5b8:	9300      	str	r3, [sp, #0]
 801e5ba:	697b      	ldr	r3, [r7, #20]
 801e5bc:	2200      	movs	r2, #0
 801e5be:	2180      	movs	r1, #128	; 0x80
 801e5c0:	68f8      	ldr	r0, [r7, #12]
 801e5c2:	f000 fc2c 	bl	801ee1e <UART_WaitOnFlagUntilTimeout>
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d001      	beq.n	801e5d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801e5cc:	2303      	movs	r3, #3
 801e5ce:	e039      	b.n	801e644 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801e5d0:	69fb      	ldr	r3, [r7, #28]
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d10b      	bne.n	801e5ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e5d6:	69bb      	ldr	r3, [r7, #24]
 801e5d8:	881b      	ldrh	r3, [r3, #0]
 801e5da:	461a      	mov	r2, r3
 801e5dc:	68fb      	ldr	r3, [r7, #12]
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e5e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801e5e6:	69bb      	ldr	r3, [r7, #24]
 801e5e8:	3302      	adds	r3, #2
 801e5ea:	61bb      	str	r3, [r7, #24]
 801e5ec:	e007      	b.n	801e5fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e5ee:	69fb      	ldr	r3, [r7, #28]
 801e5f0:	781a      	ldrb	r2, [r3, #0]
 801e5f2:	68fb      	ldr	r3, [r7, #12]
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801e5f8:	69fb      	ldr	r3, [r7, #28]
 801e5fa:	3301      	adds	r3, #1
 801e5fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e5fe:	68fb      	ldr	r3, [r7, #12]
 801e600:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e604:	b29b      	uxth	r3, r3
 801e606:	3b01      	subs	r3, #1
 801e608:	b29a      	uxth	r2, r3
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801e610:	68fb      	ldr	r3, [r7, #12]
 801e612:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e616:	b29b      	uxth	r3, r3
 801e618:	2b00      	cmp	r3, #0
 801e61a:	d1cc      	bne.n	801e5b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e61c:	683b      	ldr	r3, [r7, #0]
 801e61e:	9300      	str	r3, [sp, #0]
 801e620:	697b      	ldr	r3, [r7, #20]
 801e622:	2200      	movs	r2, #0
 801e624:	2140      	movs	r1, #64	; 0x40
 801e626:	68f8      	ldr	r0, [r7, #12]
 801e628:	f000 fbf9 	bl	801ee1e <UART_WaitOnFlagUntilTimeout>
 801e62c:	4603      	mov	r3, r0
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d001      	beq.n	801e636 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801e632:	2303      	movs	r3, #3
 801e634:	e006      	b.n	801e644 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e636:	68fb      	ldr	r3, [r7, #12]
 801e638:	2220      	movs	r2, #32
 801e63a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801e63e:	2300      	movs	r3, #0
 801e640:	e000      	b.n	801e644 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801e642:	2302      	movs	r3, #2
  }
}
 801e644:	4618      	mov	r0, r3
 801e646:	3720      	adds	r7, #32
 801e648:	46bd      	mov	sp, r7
 801e64a:	bd80      	pop	{r7, pc}

0801e64c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e64c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e650:	b08c      	sub	sp, #48	; 0x30
 801e652:	af00      	add	r7, sp, #0
 801e654:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e656:	2300      	movs	r3, #0
 801e658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e65c:	697b      	ldr	r3, [r7, #20]
 801e65e:	689a      	ldr	r2, [r3, #8]
 801e660:	697b      	ldr	r3, [r7, #20]
 801e662:	691b      	ldr	r3, [r3, #16]
 801e664:	431a      	orrs	r2, r3
 801e666:	697b      	ldr	r3, [r7, #20]
 801e668:	695b      	ldr	r3, [r3, #20]
 801e66a:	431a      	orrs	r2, r3
 801e66c:	697b      	ldr	r3, [r7, #20]
 801e66e:	69db      	ldr	r3, [r3, #28]
 801e670:	4313      	orrs	r3, r2
 801e672:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e674:	697b      	ldr	r3, [r7, #20]
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	681a      	ldr	r2, [r3, #0]
 801e67a:	4baa      	ldr	r3, [pc, #680]	; (801e924 <UART_SetConfig+0x2d8>)
 801e67c:	4013      	ands	r3, r2
 801e67e:	697a      	ldr	r2, [r7, #20]
 801e680:	6812      	ldr	r2, [r2, #0]
 801e682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e684:	430b      	orrs	r3, r1
 801e686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e688:	697b      	ldr	r3, [r7, #20]
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	685b      	ldr	r3, [r3, #4]
 801e68e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801e692:	697b      	ldr	r3, [r7, #20]
 801e694:	68da      	ldr	r2, [r3, #12]
 801e696:	697b      	ldr	r3, [r7, #20]
 801e698:	681b      	ldr	r3, [r3, #0]
 801e69a:	430a      	orrs	r2, r1
 801e69c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e69e:	697b      	ldr	r3, [r7, #20]
 801e6a0:	699b      	ldr	r3, [r3, #24]
 801e6a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e6a4:	697b      	ldr	r3, [r7, #20]
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	4a9f      	ldr	r2, [pc, #636]	; (801e928 <UART_SetConfig+0x2dc>)
 801e6aa:	4293      	cmp	r3, r2
 801e6ac:	d004      	beq.n	801e6b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e6ae:	697b      	ldr	r3, [r7, #20]
 801e6b0:	6a1b      	ldr	r3, [r3, #32]
 801e6b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e6b4:	4313      	orrs	r3, r2
 801e6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e6b8:	697b      	ldr	r3, [r7, #20]
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	689b      	ldr	r3, [r3, #8]
 801e6be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801e6c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801e6c6:	697a      	ldr	r2, [r7, #20]
 801e6c8:	6812      	ldr	r2, [r2, #0]
 801e6ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e6cc:	430b      	orrs	r3, r1
 801e6ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801e6d0:	697b      	ldr	r3, [r7, #20]
 801e6d2:	681b      	ldr	r3, [r3, #0]
 801e6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6d6:	f023 010f 	bic.w	r1, r3, #15
 801e6da:	697b      	ldr	r3, [r7, #20]
 801e6dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e6de:	697b      	ldr	r3, [r7, #20]
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	430a      	orrs	r2, r1
 801e6e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e6e6:	697b      	ldr	r3, [r7, #20]
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	4a90      	ldr	r2, [pc, #576]	; (801e92c <UART_SetConfig+0x2e0>)
 801e6ec:	4293      	cmp	r3, r2
 801e6ee:	d125      	bne.n	801e73c <UART_SetConfig+0xf0>
 801e6f0:	4b8f      	ldr	r3, [pc, #572]	; (801e930 <UART_SetConfig+0x2e4>)
 801e6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e6f6:	f003 0303 	and.w	r3, r3, #3
 801e6fa:	2b03      	cmp	r3, #3
 801e6fc:	d81a      	bhi.n	801e734 <UART_SetConfig+0xe8>
 801e6fe:	a201      	add	r2, pc, #4	; (adr r2, 801e704 <UART_SetConfig+0xb8>)
 801e700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e704:	0801e715 	.word	0x0801e715
 801e708:	0801e725 	.word	0x0801e725
 801e70c:	0801e71d 	.word	0x0801e71d
 801e710:	0801e72d 	.word	0x0801e72d
 801e714:	2301      	movs	r3, #1
 801e716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e71a:	e116      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e71c:	2302      	movs	r3, #2
 801e71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e722:	e112      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e724:	2304      	movs	r3, #4
 801e726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e72a:	e10e      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e72c:	2308      	movs	r3, #8
 801e72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e732:	e10a      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e734:	2310      	movs	r3, #16
 801e736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e73a:	e106      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e73c:	697b      	ldr	r3, [r7, #20]
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	4a7c      	ldr	r2, [pc, #496]	; (801e934 <UART_SetConfig+0x2e8>)
 801e742:	4293      	cmp	r3, r2
 801e744:	d138      	bne.n	801e7b8 <UART_SetConfig+0x16c>
 801e746:	4b7a      	ldr	r3, [pc, #488]	; (801e930 <UART_SetConfig+0x2e4>)
 801e748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e74c:	f003 030c 	and.w	r3, r3, #12
 801e750:	2b0c      	cmp	r3, #12
 801e752:	d82d      	bhi.n	801e7b0 <UART_SetConfig+0x164>
 801e754:	a201      	add	r2, pc, #4	; (adr r2, 801e75c <UART_SetConfig+0x110>)
 801e756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e75a:	bf00      	nop
 801e75c:	0801e791 	.word	0x0801e791
 801e760:	0801e7b1 	.word	0x0801e7b1
 801e764:	0801e7b1 	.word	0x0801e7b1
 801e768:	0801e7b1 	.word	0x0801e7b1
 801e76c:	0801e7a1 	.word	0x0801e7a1
 801e770:	0801e7b1 	.word	0x0801e7b1
 801e774:	0801e7b1 	.word	0x0801e7b1
 801e778:	0801e7b1 	.word	0x0801e7b1
 801e77c:	0801e799 	.word	0x0801e799
 801e780:	0801e7b1 	.word	0x0801e7b1
 801e784:	0801e7b1 	.word	0x0801e7b1
 801e788:	0801e7b1 	.word	0x0801e7b1
 801e78c:	0801e7a9 	.word	0x0801e7a9
 801e790:	2300      	movs	r3, #0
 801e792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e796:	e0d8      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e798:	2302      	movs	r3, #2
 801e79a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e79e:	e0d4      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e7a0:	2304      	movs	r3, #4
 801e7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e7a6:	e0d0      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e7a8:	2308      	movs	r3, #8
 801e7aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e7ae:	e0cc      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e7b0:	2310      	movs	r3, #16
 801e7b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e7b6:	e0c8      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e7b8:	697b      	ldr	r3, [r7, #20]
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	4a5e      	ldr	r2, [pc, #376]	; (801e938 <UART_SetConfig+0x2ec>)
 801e7be:	4293      	cmp	r3, r2
 801e7c0:	d125      	bne.n	801e80e <UART_SetConfig+0x1c2>
 801e7c2:	4b5b      	ldr	r3, [pc, #364]	; (801e930 <UART_SetConfig+0x2e4>)
 801e7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e7c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801e7cc:	2b30      	cmp	r3, #48	; 0x30
 801e7ce:	d016      	beq.n	801e7fe <UART_SetConfig+0x1b2>
 801e7d0:	2b30      	cmp	r3, #48	; 0x30
 801e7d2:	d818      	bhi.n	801e806 <UART_SetConfig+0x1ba>
 801e7d4:	2b20      	cmp	r3, #32
 801e7d6:	d00a      	beq.n	801e7ee <UART_SetConfig+0x1a2>
 801e7d8:	2b20      	cmp	r3, #32
 801e7da:	d814      	bhi.n	801e806 <UART_SetConfig+0x1ba>
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d002      	beq.n	801e7e6 <UART_SetConfig+0x19a>
 801e7e0:	2b10      	cmp	r3, #16
 801e7e2:	d008      	beq.n	801e7f6 <UART_SetConfig+0x1aa>
 801e7e4:	e00f      	b.n	801e806 <UART_SetConfig+0x1ba>
 801e7e6:	2300      	movs	r3, #0
 801e7e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e7ec:	e0ad      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e7ee:	2302      	movs	r3, #2
 801e7f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e7f4:	e0a9      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e7f6:	2304      	movs	r3, #4
 801e7f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e7fc:	e0a5      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e7fe:	2308      	movs	r3, #8
 801e800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e804:	e0a1      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e806:	2310      	movs	r3, #16
 801e808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e80c:	e09d      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e80e:	697b      	ldr	r3, [r7, #20]
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	4a4a      	ldr	r2, [pc, #296]	; (801e93c <UART_SetConfig+0x2f0>)
 801e814:	4293      	cmp	r3, r2
 801e816:	d125      	bne.n	801e864 <UART_SetConfig+0x218>
 801e818:	4b45      	ldr	r3, [pc, #276]	; (801e930 <UART_SetConfig+0x2e4>)
 801e81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e81e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e822:	2bc0      	cmp	r3, #192	; 0xc0
 801e824:	d016      	beq.n	801e854 <UART_SetConfig+0x208>
 801e826:	2bc0      	cmp	r3, #192	; 0xc0
 801e828:	d818      	bhi.n	801e85c <UART_SetConfig+0x210>
 801e82a:	2b80      	cmp	r3, #128	; 0x80
 801e82c:	d00a      	beq.n	801e844 <UART_SetConfig+0x1f8>
 801e82e:	2b80      	cmp	r3, #128	; 0x80
 801e830:	d814      	bhi.n	801e85c <UART_SetConfig+0x210>
 801e832:	2b00      	cmp	r3, #0
 801e834:	d002      	beq.n	801e83c <UART_SetConfig+0x1f0>
 801e836:	2b40      	cmp	r3, #64	; 0x40
 801e838:	d008      	beq.n	801e84c <UART_SetConfig+0x200>
 801e83a:	e00f      	b.n	801e85c <UART_SetConfig+0x210>
 801e83c:	2300      	movs	r3, #0
 801e83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e842:	e082      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e844:	2302      	movs	r3, #2
 801e846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e84a:	e07e      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e84c:	2304      	movs	r3, #4
 801e84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e852:	e07a      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e854:	2308      	movs	r3, #8
 801e856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e85a:	e076      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e85c:	2310      	movs	r3, #16
 801e85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e862:	e072      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e864:	697b      	ldr	r3, [r7, #20]
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	4a35      	ldr	r2, [pc, #212]	; (801e940 <UART_SetConfig+0x2f4>)
 801e86a:	4293      	cmp	r3, r2
 801e86c:	d12a      	bne.n	801e8c4 <UART_SetConfig+0x278>
 801e86e:	4b30      	ldr	r3, [pc, #192]	; (801e930 <UART_SetConfig+0x2e4>)
 801e870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e87c:	d01a      	beq.n	801e8b4 <UART_SetConfig+0x268>
 801e87e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e882:	d81b      	bhi.n	801e8bc <UART_SetConfig+0x270>
 801e884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e888:	d00c      	beq.n	801e8a4 <UART_SetConfig+0x258>
 801e88a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e88e:	d815      	bhi.n	801e8bc <UART_SetConfig+0x270>
 801e890:	2b00      	cmp	r3, #0
 801e892:	d003      	beq.n	801e89c <UART_SetConfig+0x250>
 801e894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e898:	d008      	beq.n	801e8ac <UART_SetConfig+0x260>
 801e89a:	e00f      	b.n	801e8bc <UART_SetConfig+0x270>
 801e89c:	2300      	movs	r3, #0
 801e89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e8a2:	e052      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e8a4:	2302      	movs	r3, #2
 801e8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e8aa:	e04e      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e8ac:	2304      	movs	r3, #4
 801e8ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e8b2:	e04a      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e8b4:	2308      	movs	r3, #8
 801e8b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e8ba:	e046      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e8bc:	2310      	movs	r3, #16
 801e8be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e8c2:	e042      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e8c4:	697b      	ldr	r3, [r7, #20]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	4a17      	ldr	r2, [pc, #92]	; (801e928 <UART_SetConfig+0x2dc>)
 801e8ca:	4293      	cmp	r3, r2
 801e8cc:	d13a      	bne.n	801e944 <UART_SetConfig+0x2f8>
 801e8ce:	4b18      	ldr	r3, [pc, #96]	; (801e930 <UART_SetConfig+0x2e4>)
 801e8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e8d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801e8d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e8dc:	d01a      	beq.n	801e914 <UART_SetConfig+0x2c8>
 801e8de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e8e2:	d81b      	bhi.n	801e91c <UART_SetConfig+0x2d0>
 801e8e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e8e8:	d00c      	beq.n	801e904 <UART_SetConfig+0x2b8>
 801e8ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e8ee:	d815      	bhi.n	801e91c <UART_SetConfig+0x2d0>
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d003      	beq.n	801e8fc <UART_SetConfig+0x2b0>
 801e8f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e8f8:	d008      	beq.n	801e90c <UART_SetConfig+0x2c0>
 801e8fa:	e00f      	b.n	801e91c <UART_SetConfig+0x2d0>
 801e8fc:	2300      	movs	r3, #0
 801e8fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e902:	e022      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e904:	2302      	movs	r3, #2
 801e906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e90a:	e01e      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e90c:	2304      	movs	r3, #4
 801e90e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e912:	e01a      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e914:	2308      	movs	r3, #8
 801e916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e91a:	e016      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e91c:	2310      	movs	r3, #16
 801e91e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e922:	e012      	b.n	801e94a <UART_SetConfig+0x2fe>
 801e924:	cfff69f3 	.word	0xcfff69f3
 801e928:	40008000 	.word	0x40008000
 801e92c:	40013800 	.word	0x40013800
 801e930:	40021000 	.word	0x40021000
 801e934:	40004400 	.word	0x40004400
 801e938:	40004800 	.word	0x40004800
 801e93c:	40004c00 	.word	0x40004c00
 801e940:	40005000 	.word	0x40005000
 801e944:	2310      	movs	r3, #16
 801e946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e94a:	697b      	ldr	r3, [r7, #20]
 801e94c:	681b      	ldr	r3, [r3, #0]
 801e94e:	4aae      	ldr	r2, [pc, #696]	; (801ec08 <UART_SetConfig+0x5bc>)
 801e950:	4293      	cmp	r3, r2
 801e952:	f040 8097 	bne.w	801ea84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e956:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e95a:	2b08      	cmp	r3, #8
 801e95c:	d823      	bhi.n	801e9a6 <UART_SetConfig+0x35a>
 801e95e:	a201      	add	r2, pc, #4	; (adr r2, 801e964 <UART_SetConfig+0x318>)
 801e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e964:	0801e989 	.word	0x0801e989
 801e968:	0801e9a7 	.word	0x0801e9a7
 801e96c:	0801e991 	.word	0x0801e991
 801e970:	0801e9a7 	.word	0x0801e9a7
 801e974:	0801e997 	.word	0x0801e997
 801e978:	0801e9a7 	.word	0x0801e9a7
 801e97c:	0801e9a7 	.word	0x0801e9a7
 801e980:	0801e9a7 	.word	0x0801e9a7
 801e984:	0801e99f 	.word	0x0801e99f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e988:	f7fd f8b4 	bl	801baf4 <HAL_RCC_GetPCLK1Freq>
 801e98c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e98e:	e010      	b.n	801e9b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e990:	4b9e      	ldr	r3, [pc, #632]	; (801ec0c <UART_SetConfig+0x5c0>)
 801e992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e994:	e00d      	b.n	801e9b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e996:	f7fd f841 	bl	801ba1c <HAL_RCC_GetSysClockFreq>
 801e99a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e99c:	e009      	b.n	801e9b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e99e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e9a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e9a4:	e005      	b.n	801e9b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801e9a6:	2300      	movs	r3, #0
 801e9a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e9aa:	2301      	movs	r3, #1
 801e9ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e9b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	f000 8130 	beq.w	801ec1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801e9ba:	697b      	ldr	r3, [r7, #20]
 801e9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9be:	4a94      	ldr	r2, [pc, #592]	; (801ec10 <UART_SetConfig+0x5c4>)
 801e9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e9c4:	461a      	mov	r2, r3
 801e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9c8:	fbb3 f3f2 	udiv	r3, r3, r2
 801e9cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e9ce:	697b      	ldr	r3, [r7, #20]
 801e9d0:	685a      	ldr	r2, [r3, #4]
 801e9d2:	4613      	mov	r3, r2
 801e9d4:	005b      	lsls	r3, r3, #1
 801e9d6:	4413      	add	r3, r2
 801e9d8:	69ba      	ldr	r2, [r7, #24]
 801e9da:	429a      	cmp	r2, r3
 801e9dc:	d305      	bcc.n	801e9ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801e9de:	697b      	ldr	r3, [r7, #20]
 801e9e0:	685b      	ldr	r3, [r3, #4]
 801e9e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e9e4:	69ba      	ldr	r2, [r7, #24]
 801e9e6:	429a      	cmp	r2, r3
 801e9e8:	d903      	bls.n	801e9f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801e9ea:	2301      	movs	r3, #1
 801e9ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e9f0:	e113      	b.n	801ec1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9f4:	2200      	movs	r2, #0
 801e9f6:	60bb      	str	r3, [r7, #8]
 801e9f8:	60fa      	str	r2, [r7, #12]
 801e9fa:	697b      	ldr	r3, [r7, #20]
 801e9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9fe:	4a84      	ldr	r2, [pc, #528]	; (801ec10 <UART_SetConfig+0x5c4>)
 801ea00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ea04:	b29b      	uxth	r3, r3
 801ea06:	2200      	movs	r2, #0
 801ea08:	603b      	str	r3, [r7, #0]
 801ea0a:	607a      	str	r2, [r7, #4]
 801ea0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ea10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801ea14:	f7e2 f940 	bl	8000c98 <__aeabi_uldivmod>
 801ea18:	4602      	mov	r2, r0
 801ea1a:	460b      	mov	r3, r1
 801ea1c:	4610      	mov	r0, r2
 801ea1e:	4619      	mov	r1, r3
 801ea20:	f04f 0200 	mov.w	r2, #0
 801ea24:	f04f 0300 	mov.w	r3, #0
 801ea28:	020b      	lsls	r3, r1, #8
 801ea2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ea2e:	0202      	lsls	r2, r0, #8
 801ea30:	6979      	ldr	r1, [r7, #20]
 801ea32:	6849      	ldr	r1, [r1, #4]
 801ea34:	0849      	lsrs	r1, r1, #1
 801ea36:	2000      	movs	r0, #0
 801ea38:	460c      	mov	r4, r1
 801ea3a:	4605      	mov	r5, r0
 801ea3c:	eb12 0804 	adds.w	r8, r2, r4
 801ea40:	eb43 0905 	adc.w	r9, r3, r5
 801ea44:	697b      	ldr	r3, [r7, #20]
 801ea46:	685b      	ldr	r3, [r3, #4]
 801ea48:	2200      	movs	r2, #0
 801ea4a:	469a      	mov	sl, r3
 801ea4c:	4693      	mov	fp, r2
 801ea4e:	4652      	mov	r2, sl
 801ea50:	465b      	mov	r3, fp
 801ea52:	4640      	mov	r0, r8
 801ea54:	4649      	mov	r1, r9
 801ea56:	f7e2 f91f 	bl	8000c98 <__aeabi_uldivmod>
 801ea5a:	4602      	mov	r2, r0
 801ea5c:	460b      	mov	r3, r1
 801ea5e:	4613      	mov	r3, r2
 801ea60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ea62:	6a3b      	ldr	r3, [r7, #32]
 801ea64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ea68:	d308      	bcc.n	801ea7c <UART_SetConfig+0x430>
 801ea6a:	6a3b      	ldr	r3, [r7, #32]
 801ea6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ea70:	d204      	bcs.n	801ea7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801ea72:	697b      	ldr	r3, [r7, #20]
 801ea74:	681b      	ldr	r3, [r3, #0]
 801ea76:	6a3a      	ldr	r2, [r7, #32]
 801ea78:	60da      	str	r2, [r3, #12]
 801ea7a:	e0ce      	b.n	801ec1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801ea7c:	2301      	movs	r3, #1
 801ea7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801ea82:	e0ca      	b.n	801ec1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ea84:	697b      	ldr	r3, [r7, #20]
 801ea86:	69db      	ldr	r3, [r3, #28]
 801ea88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ea8c:	d166      	bne.n	801eb5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801ea8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ea92:	2b08      	cmp	r3, #8
 801ea94:	d827      	bhi.n	801eae6 <UART_SetConfig+0x49a>
 801ea96:	a201      	add	r2, pc, #4	; (adr r2, 801ea9c <UART_SetConfig+0x450>)
 801ea98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea9c:	0801eac1 	.word	0x0801eac1
 801eaa0:	0801eac9 	.word	0x0801eac9
 801eaa4:	0801ead1 	.word	0x0801ead1
 801eaa8:	0801eae7 	.word	0x0801eae7
 801eaac:	0801ead7 	.word	0x0801ead7
 801eab0:	0801eae7 	.word	0x0801eae7
 801eab4:	0801eae7 	.word	0x0801eae7
 801eab8:	0801eae7 	.word	0x0801eae7
 801eabc:	0801eadf 	.word	0x0801eadf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801eac0:	f7fd f818 	bl	801baf4 <HAL_RCC_GetPCLK1Freq>
 801eac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801eac6:	e014      	b.n	801eaf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801eac8:	f7fd f82a 	bl	801bb20 <HAL_RCC_GetPCLK2Freq>
 801eacc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801eace:	e010      	b.n	801eaf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801ead0:	4b4e      	ldr	r3, [pc, #312]	; (801ec0c <UART_SetConfig+0x5c0>)
 801ead2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ead4:	e00d      	b.n	801eaf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ead6:	f7fc ffa1 	bl	801ba1c <HAL_RCC_GetSysClockFreq>
 801eada:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801eadc:	e009      	b.n	801eaf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801eade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801eae4:	e005      	b.n	801eaf2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801eae6:	2300      	movs	r3, #0
 801eae8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801eaea:	2301      	movs	r3, #1
 801eaec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801eaf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	f000 8090 	beq.w	801ec1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801eafa:	697b      	ldr	r3, [r7, #20]
 801eafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eafe:	4a44      	ldr	r2, [pc, #272]	; (801ec10 <UART_SetConfig+0x5c4>)
 801eb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801eb04:	461a      	mov	r2, r3
 801eb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb08:	fbb3 f3f2 	udiv	r3, r3, r2
 801eb0c:	005a      	lsls	r2, r3, #1
 801eb0e:	697b      	ldr	r3, [r7, #20]
 801eb10:	685b      	ldr	r3, [r3, #4]
 801eb12:	085b      	lsrs	r3, r3, #1
 801eb14:	441a      	add	r2, r3
 801eb16:	697b      	ldr	r3, [r7, #20]
 801eb18:	685b      	ldr	r3, [r3, #4]
 801eb1a:	fbb2 f3f3 	udiv	r3, r2, r3
 801eb1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801eb20:	6a3b      	ldr	r3, [r7, #32]
 801eb22:	2b0f      	cmp	r3, #15
 801eb24:	d916      	bls.n	801eb54 <UART_SetConfig+0x508>
 801eb26:	6a3b      	ldr	r3, [r7, #32]
 801eb28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eb2c:	d212      	bcs.n	801eb54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801eb2e:	6a3b      	ldr	r3, [r7, #32]
 801eb30:	b29b      	uxth	r3, r3
 801eb32:	f023 030f 	bic.w	r3, r3, #15
 801eb36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801eb38:	6a3b      	ldr	r3, [r7, #32]
 801eb3a:	085b      	lsrs	r3, r3, #1
 801eb3c:	b29b      	uxth	r3, r3
 801eb3e:	f003 0307 	and.w	r3, r3, #7
 801eb42:	b29a      	uxth	r2, r3
 801eb44:	8bfb      	ldrh	r3, [r7, #30]
 801eb46:	4313      	orrs	r3, r2
 801eb48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801eb4a:	697b      	ldr	r3, [r7, #20]
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	8bfa      	ldrh	r2, [r7, #30]
 801eb50:	60da      	str	r2, [r3, #12]
 801eb52:	e062      	b.n	801ec1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801eb54:	2301      	movs	r3, #1
 801eb56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801eb5a:	e05e      	b.n	801ec1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801eb5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801eb60:	2b08      	cmp	r3, #8
 801eb62:	d828      	bhi.n	801ebb6 <UART_SetConfig+0x56a>
 801eb64:	a201      	add	r2, pc, #4	; (adr r2, 801eb6c <UART_SetConfig+0x520>)
 801eb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eb6a:	bf00      	nop
 801eb6c:	0801eb91 	.word	0x0801eb91
 801eb70:	0801eb99 	.word	0x0801eb99
 801eb74:	0801eba1 	.word	0x0801eba1
 801eb78:	0801ebb7 	.word	0x0801ebb7
 801eb7c:	0801eba7 	.word	0x0801eba7
 801eb80:	0801ebb7 	.word	0x0801ebb7
 801eb84:	0801ebb7 	.word	0x0801ebb7
 801eb88:	0801ebb7 	.word	0x0801ebb7
 801eb8c:	0801ebaf 	.word	0x0801ebaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801eb90:	f7fc ffb0 	bl	801baf4 <HAL_RCC_GetPCLK1Freq>
 801eb94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801eb96:	e014      	b.n	801ebc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801eb98:	f7fc ffc2 	bl	801bb20 <HAL_RCC_GetPCLK2Freq>
 801eb9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801eb9e:	e010      	b.n	801ebc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801eba0:	4b1a      	ldr	r3, [pc, #104]	; (801ec0c <UART_SetConfig+0x5c0>)
 801eba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801eba4:	e00d      	b.n	801ebc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801eba6:	f7fc ff39 	bl	801ba1c <HAL_RCC_GetSysClockFreq>
 801ebaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ebac:	e009      	b.n	801ebc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ebae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ebb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ebb4:	e005      	b.n	801ebc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801ebb6:	2300      	movs	r3, #0
 801ebb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801ebba:	2301      	movs	r3, #1
 801ebbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801ebc0:	bf00      	nop
    }

    if (pclk != 0U)
 801ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d028      	beq.n	801ec1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ebc8:	697b      	ldr	r3, [r7, #20]
 801ebca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebcc:	4a10      	ldr	r2, [pc, #64]	; (801ec10 <UART_SetConfig+0x5c4>)
 801ebce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ebd2:	461a      	mov	r2, r3
 801ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebd6:	fbb3 f2f2 	udiv	r2, r3, r2
 801ebda:	697b      	ldr	r3, [r7, #20]
 801ebdc:	685b      	ldr	r3, [r3, #4]
 801ebde:	085b      	lsrs	r3, r3, #1
 801ebe0:	441a      	add	r2, r3
 801ebe2:	697b      	ldr	r3, [r7, #20]
 801ebe4:	685b      	ldr	r3, [r3, #4]
 801ebe6:	fbb2 f3f3 	udiv	r3, r2, r3
 801ebea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ebec:	6a3b      	ldr	r3, [r7, #32]
 801ebee:	2b0f      	cmp	r3, #15
 801ebf0:	d910      	bls.n	801ec14 <UART_SetConfig+0x5c8>
 801ebf2:	6a3b      	ldr	r3, [r7, #32]
 801ebf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ebf8:	d20c      	bcs.n	801ec14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ebfa:	6a3b      	ldr	r3, [r7, #32]
 801ebfc:	b29a      	uxth	r2, r3
 801ebfe:	697b      	ldr	r3, [r7, #20]
 801ec00:	681b      	ldr	r3, [r3, #0]
 801ec02:	60da      	str	r2, [r3, #12]
 801ec04:	e009      	b.n	801ec1a <UART_SetConfig+0x5ce>
 801ec06:	bf00      	nop
 801ec08:	40008000 	.word	0x40008000
 801ec0c:	00f42400 	.word	0x00f42400
 801ec10:	08022638 	.word	0x08022638
      }
      else
      {
        ret = HAL_ERROR;
 801ec14:	2301      	movs	r3, #1
 801ec16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801ec1a:	697b      	ldr	r3, [r7, #20]
 801ec1c:	2201      	movs	r2, #1
 801ec1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801ec22:	697b      	ldr	r3, [r7, #20]
 801ec24:	2201      	movs	r2, #1
 801ec26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ec2a:	697b      	ldr	r3, [r7, #20]
 801ec2c:	2200      	movs	r2, #0
 801ec2e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801ec30:	697b      	ldr	r3, [r7, #20]
 801ec32:	2200      	movs	r2, #0
 801ec34:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801ec36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801ec3a:	4618      	mov	r0, r3
 801ec3c:	3730      	adds	r7, #48	; 0x30
 801ec3e:	46bd      	mov	sp, r7
 801ec40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801ec44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801ec44:	b480      	push	{r7}
 801ec46:	b083      	sub	sp, #12
 801ec48:	af00      	add	r7, sp, #0
 801ec4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec50:	f003 0301 	and.w	r3, r3, #1
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d00a      	beq.n	801ec6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	685b      	ldr	r3, [r3, #4]
 801ec5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801ec62:	687b      	ldr	r3, [r7, #4]
 801ec64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	681b      	ldr	r3, [r3, #0]
 801ec6a:	430a      	orrs	r2, r1
 801ec6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ec6e:	687b      	ldr	r3, [r7, #4]
 801ec70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec72:	f003 0302 	and.w	r3, r3, #2
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d00a      	beq.n	801ec90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	681b      	ldr	r3, [r3, #0]
 801ec7e:	685b      	ldr	r3, [r3, #4]
 801ec80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	430a      	orrs	r2, r1
 801ec8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec94:	f003 0304 	and.w	r3, r3, #4
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d00a      	beq.n	801ecb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	685b      	ldr	r3, [r3, #4]
 801eca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	430a      	orrs	r2, r1
 801ecb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecb6:	f003 0308 	and.w	r3, r3, #8
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	d00a      	beq.n	801ecd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	685b      	ldr	r3, [r3, #4]
 801ecc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801ecc8:	687b      	ldr	r3, [r7, #4]
 801ecca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	430a      	orrs	r2, r1
 801ecd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecd8:	f003 0310 	and.w	r3, r3, #16
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d00a      	beq.n	801ecf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	681b      	ldr	r3, [r3, #0]
 801ece4:	689b      	ldr	r3, [r3, #8]
 801ece6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	681b      	ldr	r3, [r3, #0]
 801ecf2:	430a      	orrs	r2, r1
 801ecf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecfa:	f003 0320 	and.w	r3, r3, #32
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d00a      	beq.n	801ed18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	689b      	ldr	r3, [r3, #8]
 801ed08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	430a      	orrs	r2, r1
 801ed16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d01a      	beq.n	801ed5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	685b      	ldr	r3, [r3, #4]
 801ed2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	430a      	orrs	r2, r1
 801ed38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ed3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ed42:	d10a      	bne.n	801ed5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	685b      	ldr	r3, [r3, #4]
 801ed4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	681b      	ldr	r3, [r3, #0]
 801ed56:	430a      	orrs	r2, r1
 801ed58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	d00a      	beq.n	801ed7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	681b      	ldr	r3, [r3, #0]
 801ed6a:	685b      	ldr	r3, [r3, #4]
 801ed6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	681b      	ldr	r3, [r3, #0]
 801ed78:	430a      	orrs	r2, r1
 801ed7a:	605a      	str	r2, [r3, #4]
  }
}
 801ed7c:	bf00      	nop
 801ed7e:	370c      	adds	r7, #12
 801ed80:	46bd      	mov	sp, r7
 801ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed86:	4770      	bx	lr

0801ed88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b086      	sub	sp, #24
 801ed8c:	af02      	add	r7, sp, #8
 801ed8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	2200      	movs	r2, #0
 801ed94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801ed98:	f7f8 ff58 	bl	8017c4c <HAL_GetTick>
 801ed9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801ed9e:	687b      	ldr	r3, [r7, #4]
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	f003 0308 	and.w	r3, r3, #8
 801eda8:	2b08      	cmp	r3, #8
 801edaa:	d10e      	bne.n	801edca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801edac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801edb0:	9300      	str	r3, [sp, #0]
 801edb2:	68fb      	ldr	r3, [r7, #12]
 801edb4:	2200      	movs	r2, #0
 801edb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801edba:	6878      	ldr	r0, [r7, #4]
 801edbc:	f000 f82f 	bl	801ee1e <UART_WaitOnFlagUntilTimeout>
 801edc0:	4603      	mov	r3, r0
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d001      	beq.n	801edca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801edc6:	2303      	movs	r3, #3
 801edc8:	e025      	b.n	801ee16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	681b      	ldr	r3, [r3, #0]
 801edd0:	f003 0304 	and.w	r3, r3, #4
 801edd4:	2b04      	cmp	r3, #4
 801edd6:	d10e      	bne.n	801edf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801edd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801eddc:	9300      	str	r3, [sp, #0]
 801edde:	68fb      	ldr	r3, [r7, #12]
 801ede0:	2200      	movs	r2, #0
 801ede2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801ede6:	6878      	ldr	r0, [r7, #4]
 801ede8:	f000 f819 	bl	801ee1e <UART_WaitOnFlagUntilTimeout>
 801edec:	4603      	mov	r3, r0
 801edee:	2b00      	cmp	r3, #0
 801edf0:	d001      	beq.n	801edf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801edf2:	2303      	movs	r3, #3
 801edf4:	e00f      	b.n	801ee16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	2220      	movs	r2, #32
 801edfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	2220      	movs	r2, #32
 801ee02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	2200      	movs	r2, #0
 801ee0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	2200      	movs	r2, #0
 801ee10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ee14:	2300      	movs	r3, #0
}
 801ee16:	4618      	mov	r0, r3
 801ee18:	3710      	adds	r7, #16
 801ee1a:	46bd      	mov	sp, r7
 801ee1c:	bd80      	pop	{r7, pc}

0801ee1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ee1e:	b580      	push	{r7, lr}
 801ee20:	b09c      	sub	sp, #112	; 0x70
 801ee22:	af00      	add	r7, sp, #0
 801ee24:	60f8      	str	r0, [r7, #12]
 801ee26:	60b9      	str	r1, [r7, #8]
 801ee28:	603b      	str	r3, [r7, #0]
 801ee2a:	4613      	mov	r3, r2
 801ee2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ee2e:	e0a9      	b.n	801ef84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ee30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ee32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee36:	f000 80a5 	beq.w	801ef84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ee3a:	f7f8 ff07 	bl	8017c4c <HAL_GetTick>
 801ee3e:	4602      	mov	r2, r0
 801ee40:	683b      	ldr	r3, [r7, #0]
 801ee42:	1ad3      	subs	r3, r2, r3
 801ee44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ee46:	429a      	cmp	r2, r3
 801ee48:	d302      	bcc.n	801ee50 <UART_WaitOnFlagUntilTimeout+0x32>
 801ee4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	d140      	bne.n	801eed2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ee58:	e853 3f00 	ldrex	r3, [r3]
 801ee5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ee5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ee64:	667b      	str	r3, [r7, #100]	; 0x64
 801ee66:	68fb      	ldr	r3, [r7, #12]
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	461a      	mov	r2, r3
 801ee6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ee6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ee70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ee72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ee74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ee76:	e841 2300 	strex	r3, r2, [r1]
 801ee7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ee7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d1e6      	bne.n	801ee50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ee82:	68fb      	ldr	r3, [r7, #12]
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	3308      	adds	r3, #8
 801ee88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ee8c:	e853 3f00 	ldrex	r3, [r3]
 801ee90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ee92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee94:	f023 0301 	bic.w	r3, r3, #1
 801ee98:	663b      	str	r3, [r7, #96]	; 0x60
 801ee9a:	68fb      	ldr	r3, [r7, #12]
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	3308      	adds	r3, #8
 801eea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801eea2:	64ba      	str	r2, [r7, #72]	; 0x48
 801eea4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801eea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801eeaa:	e841 2300 	strex	r3, r2, [r1]
 801eeae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801eeb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d1e5      	bne.n	801ee82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801eeb6:	68fb      	ldr	r3, [r7, #12]
 801eeb8:	2220      	movs	r2, #32
 801eeba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	2220      	movs	r2, #32
 801eec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801eec6:	68fb      	ldr	r3, [r7, #12]
 801eec8:	2200      	movs	r2, #0
 801eeca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801eece:	2303      	movs	r3, #3
 801eed0:	e069      	b.n	801efa6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	681b      	ldr	r3, [r3, #0]
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	f003 0304 	and.w	r3, r3, #4
 801eedc:	2b00      	cmp	r3, #0
 801eede:	d051      	beq.n	801ef84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801eee0:	68fb      	ldr	r3, [r7, #12]
 801eee2:	681b      	ldr	r3, [r3, #0]
 801eee4:	69db      	ldr	r3, [r3, #28]
 801eee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801eeea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801eeee:	d149      	bne.n	801ef84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801eef0:	68fb      	ldr	r3, [r7, #12]
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eef8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801eefa:	68fb      	ldr	r3, [r7, #12]
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef02:	e853 3f00 	ldrex	r3, [r3]
 801ef06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ef0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ef10:	68fb      	ldr	r3, [r7, #12]
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	461a      	mov	r2, r3
 801ef16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef18:	637b      	str	r3, [r7, #52]	; 0x34
 801ef1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ef1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ef1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ef20:	e841 2300 	strex	r3, r2, [r1]
 801ef24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801ef26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d1e6      	bne.n	801eefa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	3308      	adds	r3, #8
 801ef32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ef34:	697b      	ldr	r3, [r7, #20]
 801ef36:	e853 3f00 	ldrex	r3, [r3]
 801ef3a:	613b      	str	r3, [r7, #16]
   return(result);
 801ef3c:	693b      	ldr	r3, [r7, #16]
 801ef3e:	f023 0301 	bic.w	r3, r3, #1
 801ef42:	66bb      	str	r3, [r7, #104]	; 0x68
 801ef44:	68fb      	ldr	r3, [r7, #12]
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	3308      	adds	r3, #8
 801ef4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ef4c:	623a      	str	r2, [r7, #32]
 801ef4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ef50:	69f9      	ldr	r1, [r7, #28]
 801ef52:	6a3a      	ldr	r2, [r7, #32]
 801ef54:	e841 2300 	strex	r3, r2, [r1]
 801ef58:	61bb      	str	r3, [r7, #24]
   return(result);
 801ef5a:	69bb      	ldr	r3, [r7, #24]
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	d1e5      	bne.n	801ef2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801ef60:	68fb      	ldr	r3, [r7, #12]
 801ef62:	2220      	movs	r2, #32
 801ef64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801ef68:	68fb      	ldr	r3, [r7, #12]
 801ef6a:	2220      	movs	r2, #32
 801ef6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	2220      	movs	r2, #32
 801ef74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ef78:	68fb      	ldr	r3, [r7, #12]
 801ef7a:	2200      	movs	r2, #0
 801ef7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801ef80:	2303      	movs	r3, #3
 801ef82:	e010      	b.n	801efa6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ef84:	68fb      	ldr	r3, [r7, #12]
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	69da      	ldr	r2, [r3, #28]
 801ef8a:	68bb      	ldr	r3, [r7, #8]
 801ef8c:	4013      	ands	r3, r2
 801ef8e:	68ba      	ldr	r2, [r7, #8]
 801ef90:	429a      	cmp	r2, r3
 801ef92:	bf0c      	ite	eq
 801ef94:	2301      	moveq	r3, #1
 801ef96:	2300      	movne	r3, #0
 801ef98:	b2db      	uxtb	r3, r3
 801ef9a:	461a      	mov	r2, r3
 801ef9c:	79fb      	ldrb	r3, [r7, #7]
 801ef9e:	429a      	cmp	r2, r3
 801efa0:	f43f af46 	beq.w	801ee30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801efa4:	2300      	movs	r3, #0
}
 801efa6:	4618      	mov	r0, r3
 801efa8:	3770      	adds	r7, #112	; 0x70
 801efaa:	46bd      	mov	sp, r7
 801efac:	bd80      	pop	{r7, pc}

0801efae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801efae:	b480      	push	{r7}
 801efb0:	b085      	sub	sp, #20
 801efb2:	af00      	add	r7, sp, #0
 801efb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801efbc:	2b01      	cmp	r3, #1
 801efbe:	d101      	bne.n	801efc4 <HAL_UARTEx_DisableFifoMode+0x16>
 801efc0:	2302      	movs	r3, #2
 801efc2:	e027      	b.n	801f014 <HAL_UARTEx_DisableFifoMode+0x66>
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	2201      	movs	r2, #1
 801efc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	2224      	movs	r2, #36	; 0x24
 801efd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	681b      	ldr	r3, [r3, #0]
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	681a      	ldr	r2, [r3, #0]
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	f022 0201 	bic.w	r2, r2, #1
 801efea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801efec:	68fb      	ldr	r3, [r7, #12]
 801efee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801eff2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	2200      	movs	r2, #0
 801eff8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	68fa      	ldr	r2, [r7, #12]
 801f000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	2220      	movs	r2, #32
 801f006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	2200      	movs	r2, #0
 801f00e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801f012:	2300      	movs	r3, #0
}
 801f014:	4618      	mov	r0, r3
 801f016:	3714      	adds	r7, #20
 801f018:	46bd      	mov	sp, r7
 801f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f01e:	4770      	bx	lr

0801f020 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b084      	sub	sp, #16
 801f024:	af00      	add	r7, sp, #0
 801f026:	6078      	str	r0, [r7, #4]
 801f028:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f030:	2b01      	cmp	r3, #1
 801f032:	d101      	bne.n	801f038 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801f034:	2302      	movs	r3, #2
 801f036:	e02d      	b.n	801f094 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	2201      	movs	r2, #1
 801f03c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	2224      	movs	r2, #36	; 0x24
 801f044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	681a      	ldr	r2, [r3, #0]
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	f022 0201 	bic.w	r2, r2, #1
 801f05e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	681b      	ldr	r3, [r3, #0]
 801f064:	689b      	ldr	r3, [r3, #8]
 801f066:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	683a      	ldr	r2, [r7, #0]
 801f070:	430a      	orrs	r2, r1
 801f072:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801f074:	6878      	ldr	r0, [r7, #4]
 801f076:	f000 f84f 	bl	801f118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	68fa      	ldr	r2, [r7, #12]
 801f080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	2220      	movs	r2, #32
 801f086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	2200      	movs	r2, #0
 801f08e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801f092:	2300      	movs	r3, #0
}
 801f094:	4618      	mov	r0, r3
 801f096:	3710      	adds	r7, #16
 801f098:	46bd      	mov	sp, r7
 801f09a:	bd80      	pop	{r7, pc}

0801f09c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801f09c:	b580      	push	{r7, lr}
 801f09e:	b084      	sub	sp, #16
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	6078      	str	r0, [r7, #4]
 801f0a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f0ac:	2b01      	cmp	r3, #1
 801f0ae:	d101      	bne.n	801f0b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801f0b0:	2302      	movs	r3, #2
 801f0b2:	e02d      	b.n	801f110 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	2201      	movs	r2, #1
 801f0b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	2224      	movs	r2, #36	; 0x24
 801f0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	681a      	ldr	r2, [r3, #0]
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	f022 0201 	bic.w	r2, r2, #1
 801f0da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	689b      	ldr	r3, [r3, #8]
 801f0e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	683a      	ldr	r2, [r7, #0]
 801f0ec:	430a      	orrs	r2, r1
 801f0ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801f0f0:	6878      	ldr	r0, [r7, #4]
 801f0f2:	f000 f811 	bl	801f118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	68fa      	ldr	r2, [r7, #12]
 801f0fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	2220      	movs	r2, #32
 801f102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	2200      	movs	r2, #0
 801f10a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801f10e:	2300      	movs	r3, #0
}
 801f110:	4618      	mov	r0, r3
 801f112:	3710      	adds	r7, #16
 801f114:	46bd      	mov	sp, r7
 801f116:	bd80      	pop	{r7, pc}

0801f118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801f118:	b480      	push	{r7}
 801f11a:	b085      	sub	sp, #20
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f124:	2b00      	cmp	r3, #0
 801f126:	d108      	bne.n	801f13a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	2201      	movs	r2, #1
 801f12c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	2201      	movs	r2, #1
 801f134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801f138:	e031      	b.n	801f19e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801f13a:	2308      	movs	r3, #8
 801f13c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801f13e:	2308      	movs	r3, #8
 801f140:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	689b      	ldr	r3, [r3, #8]
 801f148:	0e5b      	lsrs	r3, r3, #25
 801f14a:	b2db      	uxtb	r3, r3
 801f14c:	f003 0307 	and.w	r3, r3, #7
 801f150:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	689b      	ldr	r3, [r3, #8]
 801f158:	0f5b      	lsrs	r3, r3, #29
 801f15a:	b2db      	uxtb	r3, r3
 801f15c:	f003 0307 	and.w	r3, r3, #7
 801f160:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801f162:	7bbb      	ldrb	r3, [r7, #14]
 801f164:	7b3a      	ldrb	r2, [r7, #12]
 801f166:	4911      	ldr	r1, [pc, #68]	; (801f1ac <UARTEx_SetNbDataToProcess+0x94>)
 801f168:	5c8a      	ldrb	r2, [r1, r2]
 801f16a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801f16e:	7b3a      	ldrb	r2, [r7, #12]
 801f170:	490f      	ldr	r1, [pc, #60]	; (801f1b0 <UARTEx_SetNbDataToProcess+0x98>)
 801f172:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801f174:	fb93 f3f2 	sdiv	r3, r3, r2
 801f178:	b29a      	uxth	r2, r3
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801f180:	7bfb      	ldrb	r3, [r7, #15]
 801f182:	7b7a      	ldrb	r2, [r7, #13]
 801f184:	4909      	ldr	r1, [pc, #36]	; (801f1ac <UARTEx_SetNbDataToProcess+0x94>)
 801f186:	5c8a      	ldrb	r2, [r1, r2]
 801f188:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801f18c:	7b7a      	ldrb	r2, [r7, #13]
 801f18e:	4908      	ldr	r1, [pc, #32]	; (801f1b0 <UARTEx_SetNbDataToProcess+0x98>)
 801f190:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801f192:	fb93 f3f2 	sdiv	r3, r3, r2
 801f196:	b29a      	uxth	r2, r3
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801f19e:	bf00      	nop
 801f1a0:	3714      	adds	r7, #20
 801f1a2:	46bd      	mov	sp, r7
 801f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1a8:	4770      	bx	lr
 801f1aa:	bf00      	nop
 801f1ac:	08022650 	.word	0x08022650
 801f1b0:	08022658 	.word	0x08022658

0801f1b4 <__errno>:
 801f1b4:	4b01      	ldr	r3, [pc, #4]	; (801f1bc <__errno+0x8>)
 801f1b6:	6818      	ldr	r0, [r3, #0]
 801f1b8:	4770      	bx	lr
 801f1ba:	bf00      	nop
 801f1bc:	2000002c 	.word	0x2000002c

0801f1c0 <__libc_init_array>:
 801f1c0:	b570      	push	{r4, r5, r6, lr}
 801f1c2:	4d0d      	ldr	r5, [pc, #52]	; (801f1f8 <__libc_init_array+0x38>)
 801f1c4:	4c0d      	ldr	r4, [pc, #52]	; (801f1fc <__libc_init_array+0x3c>)
 801f1c6:	1b64      	subs	r4, r4, r5
 801f1c8:	10a4      	asrs	r4, r4, #2
 801f1ca:	2600      	movs	r6, #0
 801f1cc:	42a6      	cmp	r6, r4
 801f1ce:	d109      	bne.n	801f1e4 <__libc_init_array+0x24>
 801f1d0:	4d0b      	ldr	r5, [pc, #44]	; (801f200 <__libc_init_array+0x40>)
 801f1d2:	4c0c      	ldr	r4, [pc, #48]	; (801f204 <__libc_init_array+0x44>)
 801f1d4:	f003 f8aa 	bl	802232c <_init>
 801f1d8:	1b64      	subs	r4, r4, r5
 801f1da:	10a4      	asrs	r4, r4, #2
 801f1dc:	2600      	movs	r6, #0
 801f1de:	42a6      	cmp	r6, r4
 801f1e0:	d105      	bne.n	801f1ee <__libc_init_array+0x2e>
 801f1e2:	bd70      	pop	{r4, r5, r6, pc}
 801f1e4:	f855 3b04 	ldr.w	r3, [r5], #4
 801f1e8:	4798      	blx	r3
 801f1ea:	3601      	adds	r6, #1
 801f1ec:	e7ee      	b.n	801f1cc <__libc_init_array+0xc>
 801f1ee:	f855 3b04 	ldr.w	r3, [r5], #4
 801f1f2:	4798      	blx	r3
 801f1f4:	3601      	adds	r6, #1
 801f1f6:	e7f2      	b.n	801f1de <__libc_init_array+0x1e>
 801f1f8:	08022a78 	.word	0x08022a78
 801f1fc:	08022a78 	.word	0x08022a78
 801f200:	08022a78 	.word	0x08022a78
 801f204:	08022a7c 	.word	0x08022a7c

0801f208 <memcpy>:
 801f208:	440a      	add	r2, r1
 801f20a:	4291      	cmp	r1, r2
 801f20c:	f100 33ff 	add.w	r3, r0, #4294967295
 801f210:	d100      	bne.n	801f214 <memcpy+0xc>
 801f212:	4770      	bx	lr
 801f214:	b510      	push	{r4, lr}
 801f216:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f21a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f21e:	4291      	cmp	r1, r2
 801f220:	d1f9      	bne.n	801f216 <memcpy+0xe>
 801f222:	bd10      	pop	{r4, pc}

0801f224 <memset>:
 801f224:	4402      	add	r2, r0
 801f226:	4603      	mov	r3, r0
 801f228:	4293      	cmp	r3, r2
 801f22a:	d100      	bne.n	801f22e <memset+0xa>
 801f22c:	4770      	bx	lr
 801f22e:	f803 1b01 	strb.w	r1, [r3], #1
 801f232:	e7f9      	b.n	801f228 <memset+0x4>

0801f234 <__cvt>:
 801f234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f238:	ec55 4b10 	vmov	r4, r5, d0
 801f23c:	2d00      	cmp	r5, #0
 801f23e:	460e      	mov	r6, r1
 801f240:	4619      	mov	r1, r3
 801f242:	462b      	mov	r3, r5
 801f244:	bfbb      	ittet	lt
 801f246:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f24a:	461d      	movlt	r5, r3
 801f24c:	2300      	movge	r3, #0
 801f24e:	232d      	movlt	r3, #45	; 0x2d
 801f250:	700b      	strb	r3, [r1, #0]
 801f252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f254:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f258:	4691      	mov	r9, r2
 801f25a:	f023 0820 	bic.w	r8, r3, #32
 801f25e:	bfbc      	itt	lt
 801f260:	4622      	movlt	r2, r4
 801f262:	4614      	movlt	r4, r2
 801f264:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f268:	d005      	beq.n	801f276 <__cvt+0x42>
 801f26a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f26e:	d100      	bne.n	801f272 <__cvt+0x3e>
 801f270:	3601      	adds	r6, #1
 801f272:	2102      	movs	r1, #2
 801f274:	e000      	b.n	801f278 <__cvt+0x44>
 801f276:	2103      	movs	r1, #3
 801f278:	ab03      	add	r3, sp, #12
 801f27a:	9301      	str	r3, [sp, #4]
 801f27c:	ab02      	add	r3, sp, #8
 801f27e:	9300      	str	r3, [sp, #0]
 801f280:	ec45 4b10 	vmov	d0, r4, r5
 801f284:	4653      	mov	r3, sl
 801f286:	4632      	mov	r2, r6
 801f288:	f000 fe2e 	bl	801fee8 <_dtoa_r>
 801f28c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f290:	4607      	mov	r7, r0
 801f292:	d102      	bne.n	801f29a <__cvt+0x66>
 801f294:	f019 0f01 	tst.w	r9, #1
 801f298:	d022      	beq.n	801f2e0 <__cvt+0xac>
 801f29a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f29e:	eb07 0906 	add.w	r9, r7, r6
 801f2a2:	d110      	bne.n	801f2c6 <__cvt+0x92>
 801f2a4:	783b      	ldrb	r3, [r7, #0]
 801f2a6:	2b30      	cmp	r3, #48	; 0x30
 801f2a8:	d10a      	bne.n	801f2c0 <__cvt+0x8c>
 801f2aa:	2200      	movs	r2, #0
 801f2ac:	2300      	movs	r3, #0
 801f2ae:	4620      	mov	r0, r4
 801f2b0:	4629      	mov	r1, r5
 801f2b2:	f7e1 fc31 	bl	8000b18 <__aeabi_dcmpeq>
 801f2b6:	b918      	cbnz	r0, 801f2c0 <__cvt+0x8c>
 801f2b8:	f1c6 0601 	rsb	r6, r6, #1
 801f2bc:	f8ca 6000 	str.w	r6, [sl]
 801f2c0:	f8da 3000 	ldr.w	r3, [sl]
 801f2c4:	4499      	add	r9, r3
 801f2c6:	2200      	movs	r2, #0
 801f2c8:	2300      	movs	r3, #0
 801f2ca:	4620      	mov	r0, r4
 801f2cc:	4629      	mov	r1, r5
 801f2ce:	f7e1 fc23 	bl	8000b18 <__aeabi_dcmpeq>
 801f2d2:	b108      	cbz	r0, 801f2d8 <__cvt+0xa4>
 801f2d4:	f8cd 900c 	str.w	r9, [sp, #12]
 801f2d8:	2230      	movs	r2, #48	; 0x30
 801f2da:	9b03      	ldr	r3, [sp, #12]
 801f2dc:	454b      	cmp	r3, r9
 801f2de:	d307      	bcc.n	801f2f0 <__cvt+0xbc>
 801f2e0:	9b03      	ldr	r3, [sp, #12]
 801f2e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f2e4:	1bdb      	subs	r3, r3, r7
 801f2e6:	4638      	mov	r0, r7
 801f2e8:	6013      	str	r3, [r2, #0]
 801f2ea:	b004      	add	sp, #16
 801f2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f2f0:	1c59      	adds	r1, r3, #1
 801f2f2:	9103      	str	r1, [sp, #12]
 801f2f4:	701a      	strb	r2, [r3, #0]
 801f2f6:	e7f0      	b.n	801f2da <__cvt+0xa6>

0801f2f8 <__exponent>:
 801f2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f2fa:	4603      	mov	r3, r0
 801f2fc:	2900      	cmp	r1, #0
 801f2fe:	bfb8      	it	lt
 801f300:	4249      	neglt	r1, r1
 801f302:	f803 2b02 	strb.w	r2, [r3], #2
 801f306:	bfb4      	ite	lt
 801f308:	222d      	movlt	r2, #45	; 0x2d
 801f30a:	222b      	movge	r2, #43	; 0x2b
 801f30c:	2909      	cmp	r1, #9
 801f30e:	7042      	strb	r2, [r0, #1]
 801f310:	dd2a      	ble.n	801f368 <__exponent+0x70>
 801f312:	f10d 0407 	add.w	r4, sp, #7
 801f316:	46a4      	mov	ip, r4
 801f318:	270a      	movs	r7, #10
 801f31a:	46a6      	mov	lr, r4
 801f31c:	460a      	mov	r2, r1
 801f31e:	fb91 f6f7 	sdiv	r6, r1, r7
 801f322:	fb07 1516 	mls	r5, r7, r6, r1
 801f326:	3530      	adds	r5, #48	; 0x30
 801f328:	2a63      	cmp	r2, #99	; 0x63
 801f32a:	f104 34ff 	add.w	r4, r4, #4294967295
 801f32e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f332:	4631      	mov	r1, r6
 801f334:	dcf1      	bgt.n	801f31a <__exponent+0x22>
 801f336:	3130      	adds	r1, #48	; 0x30
 801f338:	f1ae 0502 	sub.w	r5, lr, #2
 801f33c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f340:	1c44      	adds	r4, r0, #1
 801f342:	4629      	mov	r1, r5
 801f344:	4561      	cmp	r1, ip
 801f346:	d30a      	bcc.n	801f35e <__exponent+0x66>
 801f348:	f10d 0209 	add.w	r2, sp, #9
 801f34c:	eba2 020e 	sub.w	r2, r2, lr
 801f350:	4565      	cmp	r5, ip
 801f352:	bf88      	it	hi
 801f354:	2200      	movhi	r2, #0
 801f356:	4413      	add	r3, r2
 801f358:	1a18      	subs	r0, r3, r0
 801f35a:	b003      	add	sp, #12
 801f35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f35e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f362:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f366:	e7ed      	b.n	801f344 <__exponent+0x4c>
 801f368:	2330      	movs	r3, #48	; 0x30
 801f36a:	3130      	adds	r1, #48	; 0x30
 801f36c:	7083      	strb	r3, [r0, #2]
 801f36e:	70c1      	strb	r1, [r0, #3]
 801f370:	1d03      	adds	r3, r0, #4
 801f372:	e7f1      	b.n	801f358 <__exponent+0x60>

0801f374 <_printf_float>:
 801f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f378:	ed2d 8b02 	vpush	{d8}
 801f37c:	b08d      	sub	sp, #52	; 0x34
 801f37e:	460c      	mov	r4, r1
 801f380:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f384:	4616      	mov	r6, r2
 801f386:	461f      	mov	r7, r3
 801f388:	4605      	mov	r5, r0
 801f38a:	f001 fd53 	bl	8020e34 <_localeconv_r>
 801f38e:	f8d0 a000 	ldr.w	sl, [r0]
 801f392:	4650      	mov	r0, sl
 801f394:	f7e0 ff44 	bl	8000220 <strlen>
 801f398:	2300      	movs	r3, #0
 801f39a:	930a      	str	r3, [sp, #40]	; 0x28
 801f39c:	6823      	ldr	r3, [r4, #0]
 801f39e:	9305      	str	r3, [sp, #20]
 801f3a0:	f8d8 3000 	ldr.w	r3, [r8]
 801f3a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f3a8:	3307      	adds	r3, #7
 801f3aa:	f023 0307 	bic.w	r3, r3, #7
 801f3ae:	f103 0208 	add.w	r2, r3, #8
 801f3b2:	f8c8 2000 	str.w	r2, [r8]
 801f3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f3be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f3c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f3c6:	9307      	str	r3, [sp, #28]
 801f3c8:	f8cd 8018 	str.w	r8, [sp, #24]
 801f3cc:	ee08 0a10 	vmov	s16, r0
 801f3d0:	4b9f      	ldr	r3, [pc, #636]	; (801f650 <_printf_float+0x2dc>)
 801f3d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f3d6:	f04f 32ff 	mov.w	r2, #4294967295
 801f3da:	f7e1 fbcf 	bl	8000b7c <__aeabi_dcmpun>
 801f3de:	bb88      	cbnz	r0, 801f444 <_printf_float+0xd0>
 801f3e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f3e4:	4b9a      	ldr	r3, [pc, #616]	; (801f650 <_printf_float+0x2dc>)
 801f3e6:	f04f 32ff 	mov.w	r2, #4294967295
 801f3ea:	f7e1 fba9 	bl	8000b40 <__aeabi_dcmple>
 801f3ee:	bb48      	cbnz	r0, 801f444 <_printf_float+0xd0>
 801f3f0:	2200      	movs	r2, #0
 801f3f2:	2300      	movs	r3, #0
 801f3f4:	4640      	mov	r0, r8
 801f3f6:	4649      	mov	r1, r9
 801f3f8:	f7e1 fb98 	bl	8000b2c <__aeabi_dcmplt>
 801f3fc:	b110      	cbz	r0, 801f404 <_printf_float+0x90>
 801f3fe:	232d      	movs	r3, #45	; 0x2d
 801f400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f404:	4b93      	ldr	r3, [pc, #588]	; (801f654 <_printf_float+0x2e0>)
 801f406:	4894      	ldr	r0, [pc, #592]	; (801f658 <_printf_float+0x2e4>)
 801f408:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f40c:	bf94      	ite	ls
 801f40e:	4698      	movls	r8, r3
 801f410:	4680      	movhi	r8, r0
 801f412:	2303      	movs	r3, #3
 801f414:	6123      	str	r3, [r4, #16]
 801f416:	9b05      	ldr	r3, [sp, #20]
 801f418:	f023 0204 	bic.w	r2, r3, #4
 801f41c:	6022      	str	r2, [r4, #0]
 801f41e:	f04f 0900 	mov.w	r9, #0
 801f422:	9700      	str	r7, [sp, #0]
 801f424:	4633      	mov	r3, r6
 801f426:	aa0b      	add	r2, sp, #44	; 0x2c
 801f428:	4621      	mov	r1, r4
 801f42a:	4628      	mov	r0, r5
 801f42c:	f000 f9d8 	bl	801f7e0 <_printf_common>
 801f430:	3001      	adds	r0, #1
 801f432:	f040 8090 	bne.w	801f556 <_printf_float+0x1e2>
 801f436:	f04f 30ff 	mov.w	r0, #4294967295
 801f43a:	b00d      	add	sp, #52	; 0x34
 801f43c:	ecbd 8b02 	vpop	{d8}
 801f440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f444:	4642      	mov	r2, r8
 801f446:	464b      	mov	r3, r9
 801f448:	4640      	mov	r0, r8
 801f44a:	4649      	mov	r1, r9
 801f44c:	f7e1 fb96 	bl	8000b7c <__aeabi_dcmpun>
 801f450:	b140      	cbz	r0, 801f464 <_printf_float+0xf0>
 801f452:	464b      	mov	r3, r9
 801f454:	2b00      	cmp	r3, #0
 801f456:	bfbc      	itt	lt
 801f458:	232d      	movlt	r3, #45	; 0x2d
 801f45a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f45e:	487f      	ldr	r0, [pc, #508]	; (801f65c <_printf_float+0x2e8>)
 801f460:	4b7f      	ldr	r3, [pc, #508]	; (801f660 <_printf_float+0x2ec>)
 801f462:	e7d1      	b.n	801f408 <_printf_float+0x94>
 801f464:	6863      	ldr	r3, [r4, #4]
 801f466:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f46a:	9206      	str	r2, [sp, #24]
 801f46c:	1c5a      	adds	r2, r3, #1
 801f46e:	d13f      	bne.n	801f4f0 <_printf_float+0x17c>
 801f470:	2306      	movs	r3, #6
 801f472:	6063      	str	r3, [r4, #4]
 801f474:	9b05      	ldr	r3, [sp, #20]
 801f476:	6861      	ldr	r1, [r4, #4]
 801f478:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f47c:	2300      	movs	r3, #0
 801f47e:	9303      	str	r3, [sp, #12]
 801f480:	ab0a      	add	r3, sp, #40	; 0x28
 801f482:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f486:	ab09      	add	r3, sp, #36	; 0x24
 801f488:	ec49 8b10 	vmov	d0, r8, r9
 801f48c:	9300      	str	r3, [sp, #0]
 801f48e:	6022      	str	r2, [r4, #0]
 801f490:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f494:	4628      	mov	r0, r5
 801f496:	f7ff fecd 	bl	801f234 <__cvt>
 801f49a:	9b06      	ldr	r3, [sp, #24]
 801f49c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f49e:	2b47      	cmp	r3, #71	; 0x47
 801f4a0:	4680      	mov	r8, r0
 801f4a2:	d108      	bne.n	801f4b6 <_printf_float+0x142>
 801f4a4:	1cc8      	adds	r0, r1, #3
 801f4a6:	db02      	blt.n	801f4ae <_printf_float+0x13a>
 801f4a8:	6863      	ldr	r3, [r4, #4]
 801f4aa:	4299      	cmp	r1, r3
 801f4ac:	dd41      	ble.n	801f532 <_printf_float+0x1be>
 801f4ae:	f1ab 0b02 	sub.w	fp, fp, #2
 801f4b2:	fa5f fb8b 	uxtb.w	fp, fp
 801f4b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f4ba:	d820      	bhi.n	801f4fe <_printf_float+0x18a>
 801f4bc:	3901      	subs	r1, #1
 801f4be:	465a      	mov	r2, fp
 801f4c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f4c4:	9109      	str	r1, [sp, #36]	; 0x24
 801f4c6:	f7ff ff17 	bl	801f2f8 <__exponent>
 801f4ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f4cc:	1813      	adds	r3, r2, r0
 801f4ce:	2a01      	cmp	r2, #1
 801f4d0:	4681      	mov	r9, r0
 801f4d2:	6123      	str	r3, [r4, #16]
 801f4d4:	dc02      	bgt.n	801f4dc <_printf_float+0x168>
 801f4d6:	6822      	ldr	r2, [r4, #0]
 801f4d8:	07d2      	lsls	r2, r2, #31
 801f4da:	d501      	bpl.n	801f4e0 <_printf_float+0x16c>
 801f4dc:	3301      	adds	r3, #1
 801f4de:	6123      	str	r3, [r4, #16]
 801f4e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d09c      	beq.n	801f422 <_printf_float+0xae>
 801f4e8:	232d      	movs	r3, #45	; 0x2d
 801f4ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f4ee:	e798      	b.n	801f422 <_printf_float+0xae>
 801f4f0:	9a06      	ldr	r2, [sp, #24]
 801f4f2:	2a47      	cmp	r2, #71	; 0x47
 801f4f4:	d1be      	bne.n	801f474 <_printf_float+0x100>
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d1bc      	bne.n	801f474 <_printf_float+0x100>
 801f4fa:	2301      	movs	r3, #1
 801f4fc:	e7b9      	b.n	801f472 <_printf_float+0xfe>
 801f4fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f502:	d118      	bne.n	801f536 <_printf_float+0x1c2>
 801f504:	2900      	cmp	r1, #0
 801f506:	6863      	ldr	r3, [r4, #4]
 801f508:	dd0b      	ble.n	801f522 <_printf_float+0x1ae>
 801f50a:	6121      	str	r1, [r4, #16]
 801f50c:	b913      	cbnz	r3, 801f514 <_printf_float+0x1a0>
 801f50e:	6822      	ldr	r2, [r4, #0]
 801f510:	07d0      	lsls	r0, r2, #31
 801f512:	d502      	bpl.n	801f51a <_printf_float+0x1a6>
 801f514:	3301      	adds	r3, #1
 801f516:	440b      	add	r3, r1
 801f518:	6123      	str	r3, [r4, #16]
 801f51a:	65a1      	str	r1, [r4, #88]	; 0x58
 801f51c:	f04f 0900 	mov.w	r9, #0
 801f520:	e7de      	b.n	801f4e0 <_printf_float+0x16c>
 801f522:	b913      	cbnz	r3, 801f52a <_printf_float+0x1b6>
 801f524:	6822      	ldr	r2, [r4, #0]
 801f526:	07d2      	lsls	r2, r2, #31
 801f528:	d501      	bpl.n	801f52e <_printf_float+0x1ba>
 801f52a:	3302      	adds	r3, #2
 801f52c:	e7f4      	b.n	801f518 <_printf_float+0x1a4>
 801f52e:	2301      	movs	r3, #1
 801f530:	e7f2      	b.n	801f518 <_printf_float+0x1a4>
 801f532:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f538:	4299      	cmp	r1, r3
 801f53a:	db05      	blt.n	801f548 <_printf_float+0x1d4>
 801f53c:	6823      	ldr	r3, [r4, #0]
 801f53e:	6121      	str	r1, [r4, #16]
 801f540:	07d8      	lsls	r0, r3, #31
 801f542:	d5ea      	bpl.n	801f51a <_printf_float+0x1a6>
 801f544:	1c4b      	adds	r3, r1, #1
 801f546:	e7e7      	b.n	801f518 <_printf_float+0x1a4>
 801f548:	2900      	cmp	r1, #0
 801f54a:	bfd4      	ite	le
 801f54c:	f1c1 0202 	rsble	r2, r1, #2
 801f550:	2201      	movgt	r2, #1
 801f552:	4413      	add	r3, r2
 801f554:	e7e0      	b.n	801f518 <_printf_float+0x1a4>
 801f556:	6823      	ldr	r3, [r4, #0]
 801f558:	055a      	lsls	r2, r3, #21
 801f55a:	d407      	bmi.n	801f56c <_printf_float+0x1f8>
 801f55c:	6923      	ldr	r3, [r4, #16]
 801f55e:	4642      	mov	r2, r8
 801f560:	4631      	mov	r1, r6
 801f562:	4628      	mov	r0, r5
 801f564:	47b8      	blx	r7
 801f566:	3001      	adds	r0, #1
 801f568:	d12c      	bne.n	801f5c4 <_printf_float+0x250>
 801f56a:	e764      	b.n	801f436 <_printf_float+0xc2>
 801f56c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f570:	f240 80e0 	bls.w	801f734 <_printf_float+0x3c0>
 801f574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f578:	2200      	movs	r2, #0
 801f57a:	2300      	movs	r3, #0
 801f57c:	f7e1 facc 	bl	8000b18 <__aeabi_dcmpeq>
 801f580:	2800      	cmp	r0, #0
 801f582:	d034      	beq.n	801f5ee <_printf_float+0x27a>
 801f584:	4a37      	ldr	r2, [pc, #220]	; (801f664 <_printf_float+0x2f0>)
 801f586:	2301      	movs	r3, #1
 801f588:	4631      	mov	r1, r6
 801f58a:	4628      	mov	r0, r5
 801f58c:	47b8      	blx	r7
 801f58e:	3001      	adds	r0, #1
 801f590:	f43f af51 	beq.w	801f436 <_printf_float+0xc2>
 801f594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f598:	429a      	cmp	r2, r3
 801f59a:	db02      	blt.n	801f5a2 <_printf_float+0x22e>
 801f59c:	6823      	ldr	r3, [r4, #0]
 801f59e:	07d8      	lsls	r0, r3, #31
 801f5a0:	d510      	bpl.n	801f5c4 <_printf_float+0x250>
 801f5a2:	ee18 3a10 	vmov	r3, s16
 801f5a6:	4652      	mov	r2, sl
 801f5a8:	4631      	mov	r1, r6
 801f5aa:	4628      	mov	r0, r5
 801f5ac:	47b8      	blx	r7
 801f5ae:	3001      	adds	r0, #1
 801f5b0:	f43f af41 	beq.w	801f436 <_printf_float+0xc2>
 801f5b4:	f04f 0800 	mov.w	r8, #0
 801f5b8:	f104 091a 	add.w	r9, r4, #26
 801f5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5be:	3b01      	subs	r3, #1
 801f5c0:	4543      	cmp	r3, r8
 801f5c2:	dc09      	bgt.n	801f5d8 <_printf_float+0x264>
 801f5c4:	6823      	ldr	r3, [r4, #0]
 801f5c6:	079b      	lsls	r3, r3, #30
 801f5c8:	f100 8105 	bmi.w	801f7d6 <_printf_float+0x462>
 801f5cc:	68e0      	ldr	r0, [r4, #12]
 801f5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5d0:	4298      	cmp	r0, r3
 801f5d2:	bfb8      	it	lt
 801f5d4:	4618      	movlt	r0, r3
 801f5d6:	e730      	b.n	801f43a <_printf_float+0xc6>
 801f5d8:	2301      	movs	r3, #1
 801f5da:	464a      	mov	r2, r9
 801f5dc:	4631      	mov	r1, r6
 801f5de:	4628      	mov	r0, r5
 801f5e0:	47b8      	blx	r7
 801f5e2:	3001      	adds	r0, #1
 801f5e4:	f43f af27 	beq.w	801f436 <_printf_float+0xc2>
 801f5e8:	f108 0801 	add.w	r8, r8, #1
 801f5ec:	e7e6      	b.n	801f5bc <_printf_float+0x248>
 801f5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	dc39      	bgt.n	801f668 <_printf_float+0x2f4>
 801f5f4:	4a1b      	ldr	r2, [pc, #108]	; (801f664 <_printf_float+0x2f0>)
 801f5f6:	2301      	movs	r3, #1
 801f5f8:	4631      	mov	r1, r6
 801f5fa:	4628      	mov	r0, r5
 801f5fc:	47b8      	blx	r7
 801f5fe:	3001      	adds	r0, #1
 801f600:	f43f af19 	beq.w	801f436 <_printf_float+0xc2>
 801f604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f608:	4313      	orrs	r3, r2
 801f60a:	d102      	bne.n	801f612 <_printf_float+0x29e>
 801f60c:	6823      	ldr	r3, [r4, #0]
 801f60e:	07d9      	lsls	r1, r3, #31
 801f610:	d5d8      	bpl.n	801f5c4 <_printf_float+0x250>
 801f612:	ee18 3a10 	vmov	r3, s16
 801f616:	4652      	mov	r2, sl
 801f618:	4631      	mov	r1, r6
 801f61a:	4628      	mov	r0, r5
 801f61c:	47b8      	blx	r7
 801f61e:	3001      	adds	r0, #1
 801f620:	f43f af09 	beq.w	801f436 <_printf_float+0xc2>
 801f624:	f04f 0900 	mov.w	r9, #0
 801f628:	f104 0a1a 	add.w	sl, r4, #26
 801f62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f62e:	425b      	negs	r3, r3
 801f630:	454b      	cmp	r3, r9
 801f632:	dc01      	bgt.n	801f638 <_printf_float+0x2c4>
 801f634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f636:	e792      	b.n	801f55e <_printf_float+0x1ea>
 801f638:	2301      	movs	r3, #1
 801f63a:	4652      	mov	r2, sl
 801f63c:	4631      	mov	r1, r6
 801f63e:	4628      	mov	r0, r5
 801f640:	47b8      	blx	r7
 801f642:	3001      	adds	r0, #1
 801f644:	f43f aef7 	beq.w	801f436 <_printf_float+0xc2>
 801f648:	f109 0901 	add.w	r9, r9, #1
 801f64c:	e7ee      	b.n	801f62c <_printf_float+0x2b8>
 801f64e:	bf00      	nop
 801f650:	7fefffff 	.word	0x7fefffff
 801f654:	08022664 	.word	0x08022664
 801f658:	08022668 	.word	0x08022668
 801f65c:	08022670 	.word	0x08022670
 801f660:	0802266c 	.word	0x0802266c
 801f664:	08022674 	.word	0x08022674
 801f668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f66a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f66c:	429a      	cmp	r2, r3
 801f66e:	bfa8      	it	ge
 801f670:	461a      	movge	r2, r3
 801f672:	2a00      	cmp	r2, #0
 801f674:	4691      	mov	r9, r2
 801f676:	dc37      	bgt.n	801f6e8 <_printf_float+0x374>
 801f678:	f04f 0b00 	mov.w	fp, #0
 801f67c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f680:	f104 021a 	add.w	r2, r4, #26
 801f684:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f686:	9305      	str	r3, [sp, #20]
 801f688:	eba3 0309 	sub.w	r3, r3, r9
 801f68c:	455b      	cmp	r3, fp
 801f68e:	dc33      	bgt.n	801f6f8 <_printf_float+0x384>
 801f690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f694:	429a      	cmp	r2, r3
 801f696:	db3b      	blt.n	801f710 <_printf_float+0x39c>
 801f698:	6823      	ldr	r3, [r4, #0]
 801f69a:	07da      	lsls	r2, r3, #31
 801f69c:	d438      	bmi.n	801f710 <_printf_float+0x39c>
 801f69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6a0:	9a05      	ldr	r2, [sp, #20]
 801f6a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f6a4:	1a9a      	subs	r2, r3, r2
 801f6a6:	eba3 0901 	sub.w	r9, r3, r1
 801f6aa:	4591      	cmp	r9, r2
 801f6ac:	bfa8      	it	ge
 801f6ae:	4691      	movge	r9, r2
 801f6b0:	f1b9 0f00 	cmp.w	r9, #0
 801f6b4:	dc35      	bgt.n	801f722 <_printf_float+0x3ae>
 801f6b6:	f04f 0800 	mov.w	r8, #0
 801f6ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f6be:	f104 0a1a 	add.w	sl, r4, #26
 801f6c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f6c6:	1a9b      	subs	r3, r3, r2
 801f6c8:	eba3 0309 	sub.w	r3, r3, r9
 801f6cc:	4543      	cmp	r3, r8
 801f6ce:	f77f af79 	ble.w	801f5c4 <_printf_float+0x250>
 801f6d2:	2301      	movs	r3, #1
 801f6d4:	4652      	mov	r2, sl
 801f6d6:	4631      	mov	r1, r6
 801f6d8:	4628      	mov	r0, r5
 801f6da:	47b8      	blx	r7
 801f6dc:	3001      	adds	r0, #1
 801f6de:	f43f aeaa 	beq.w	801f436 <_printf_float+0xc2>
 801f6e2:	f108 0801 	add.w	r8, r8, #1
 801f6e6:	e7ec      	b.n	801f6c2 <_printf_float+0x34e>
 801f6e8:	4613      	mov	r3, r2
 801f6ea:	4631      	mov	r1, r6
 801f6ec:	4642      	mov	r2, r8
 801f6ee:	4628      	mov	r0, r5
 801f6f0:	47b8      	blx	r7
 801f6f2:	3001      	adds	r0, #1
 801f6f4:	d1c0      	bne.n	801f678 <_printf_float+0x304>
 801f6f6:	e69e      	b.n	801f436 <_printf_float+0xc2>
 801f6f8:	2301      	movs	r3, #1
 801f6fa:	4631      	mov	r1, r6
 801f6fc:	4628      	mov	r0, r5
 801f6fe:	9205      	str	r2, [sp, #20]
 801f700:	47b8      	blx	r7
 801f702:	3001      	adds	r0, #1
 801f704:	f43f ae97 	beq.w	801f436 <_printf_float+0xc2>
 801f708:	9a05      	ldr	r2, [sp, #20]
 801f70a:	f10b 0b01 	add.w	fp, fp, #1
 801f70e:	e7b9      	b.n	801f684 <_printf_float+0x310>
 801f710:	ee18 3a10 	vmov	r3, s16
 801f714:	4652      	mov	r2, sl
 801f716:	4631      	mov	r1, r6
 801f718:	4628      	mov	r0, r5
 801f71a:	47b8      	blx	r7
 801f71c:	3001      	adds	r0, #1
 801f71e:	d1be      	bne.n	801f69e <_printf_float+0x32a>
 801f720:	e689      	b.n	801f436 <_printf_float+0xc2>
 801f722:	9a05      	ldr	r2, [sp, #20]
 801f724:	464b      	mov	r3, r9
 801f726:	4442      	add	r2, r8
 801f728:	4631      	mov	r1, r6
 801f72a:	4628      	mov	r0, r5
 801f72c:	47b8      	blx	r7
 801f72e:	3001      	adds	r0, #1
 801f730:	d1c1      	bne.n	801f6b6 <_printf_float+0x342>
 801f732:	e680      	b.n	801f436 <_printf_float+0xc2>
 801f734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f736:	2a01      	cmp	r2, #1
 801f738:	dc01      	bgt.n	801f73e <_printf_float+0x3ca>
 801f73a:	07db      	lsls	r3, r3, #31
 801f73c:	d538      	bpl.n	801f7b0 <_printf_float+0x43c>
 801f73e:	2301      	movs	r3, #1
 801f740:	4642      	mov	r2, r8
 801f742:	4631      	mov	r1, r6
 801f744:	4628      	mov	r0, r5
 801f746:	47b8      	blx	r7
 801f748:	3001      	adds	r0, #1
 801f74a:	f43f ae74 	beq.w	801f436 <_printf_float+0xc2>
 801f74e:	ee18 3a10 	vmov	r3, s16
 801f752:	4652      	mov	r2, sl
 801f754:	4631      	mov	r1, r6
 801f756:	4628      	mov	r0, r5
 801f758:	47b8      	blx	r7
 801f75a:	3001      	adds	r0, #1
 801f75c:	f43f ae6b 	beq.w	801f436 <_printf_float+0xc2>
 801f760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f764:	2200      	movs	r2, #0
 801f766:	2300      	movs	r3, #0
 801f768:	f7e1 f9d6 	bl	8000b18 <__aeabi_dcmpeq>
 801f76c:	b9d8      	cbnz	r0, 801f7a6 <_printf_float+0x432>
 801f76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f770:	f108 0201 	add.w	r2, r8, #1
 801f774:	3b01      	subs	r3, #1
 801f776:	4631      	mov	r1, r6
 801f778:	4628      	mov	r0, r5
 801f77a:	47b8      	blx	r7
 801f77c:	3001      	adds	r0, #1
 801f77e:	d10e      	bne.n	801f79e <_printf_float+0x42a>
 801f780:	e659      	b.n	801f436 <_printf_float+0xc2>
 801f782:	2301      	movs	r3, #1
 801f784:	4652      	mov	r2, sl
 801f786:	4631      	mov	r1, r6
 801f788:	4628      	mov	r0, r5
 801f78a:	47b8      	blx	r7
 801f78c:	3001      	adds	r0, #1
 801f78e:	f43f ae52 	beq.w	801f436 <_printf_float+0xc2>
 801f792:	f108 0801 	add.w	r8, r8, #1
 801f796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f798:	3b01      	subs	r3, #1
 801f79a:	4543      	cmp	r3, r8
 801f79c:	dcf1      	bgt.n	801f782 <_printf_float+0x40e>
 801f79e:	464b      	mov	r3, r9
 801f7a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f7a4:	e6dc      	b.n	801f560 <_printf_float+0x1ec>
 801f7a6:	f04f 0800 	mov.w	r8, #0
 801f7aa:	f104 0a1a 	add.w	sl, r4, #26
 801f7ae:	e7f2      	b.n	801f796 <_printf_float+0x422>
 801f7b0:	2301      	movs	r3, #1
 801f7b2:	4642      	mov	r2, r8
 801f7b4:	e7df      	b.n	801f776 <_printf_float+0x402>
 801f7b6:	2301      	movs	r3, #1
 801f7b8:	464a      	mov	r2, r9
 801f7ba:	4631      	mov	r1, r6
 801f7bc:	4628      	mov	r0, r5
 801f7be:	47b8      	blx	r7
 801f7c0:	3001      	adds	r0, #1
 801f7c2:	f43f ae38 	beq.w	801f436 <_printf_float+0xc2>
 801f7c6:	f108 0801 	add.w	r8, r8, #1
 801f7ca:	68e3      	ldr	r3, [r4, #12]
 801f7cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f7ce:	1a5b      	subs	r3, r3, r1
 801f7d0:	4543      	cmp	r3, r8
 801f7d2:	dcf0      	bgt.n	801f7b6 <_printf_float+0x442>
 801f7d4:	e6fa      	b.n	801f5cc <_printf_float+0x258>
 801f7d6:	f04f 0800 	mov.w	r8, #0
 801f7da:	f104 0919 	add.w	r9, r4, #25
 801f7de:	e7f4      	b.n	801f7ca <_printf_float+0x456>

0801f7e0 <_printf_common>:
 801f7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f7e4:	4616      	mov	r6, r2
 801f7e6:	4699      	mov	r9, r3
 801f7e8:	688a      	ldr	r2, [r1, #8]
 801f7ea:	690b      	ldr	r3, [r1, #16]
 801f7ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f7f0:	4293      	cmp	r3, r2
 801f7f2:	bfb8      	it	lt
 801f7f4:	4613      	movlt	r3, r2
 801f7f6:	6033      	str	r3, [r6, #0]
 801f7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f7fc:	4607      	mov	r7, r0
 801f7fe:	460c      	mov	r4, r1
 801f800:	b10a      	cbz	r2, 801f806 <_printf_common+0x26>
 801f802:	3301      	adds	r3, #1
 801f804:	6033      	str	r3, [r6, #0]
 801f806:	6823      	ldr	r3, [r4, #0]
 801f808:	0699      	lsls	r1, r3, #26
 801f80a:	bf42      	ittt	mi
 801f80c:	6833      	ldrmi	r3, [r6, #0]
 801f80e:	3302      	addmi	r3, #2
 801f810:	6033      	strmi	r3, [r6, #0]
 801f812:	6825      	ldr	r5, [r4, #0]
 801f814:	f015 0506 	ands.w	r5, r5, #6
 801f818:	d106      	bne.n	801f828 <_printf_common+0x48>
 801f81a:	f104 0a19 	add.w	sl, r4, #25
 801f81e:	68e3      	ldr	r3, [r4, #12]
 801f820:	6832      	ldr	r2, [r6, #0]
 801f822:	1a9b      	subs	r3, r3, r2
 801f824:	42ab      	cmp	r3, r5
 801f826:	dc26      	bgt.n	801f876 <_printf_common+0x96>
 801f828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f82c:	1e13      	subs	r3, r2, #0
 801f82e:	6822      	ldr	r2, [r4, #0]
 801f830:	bf18      	it	ne
 801f832:	2301      	movne	r3, #1
 801f834:	0692      	lsls	r2, r2, #26
 801f836:	d42b      	bmi.n	801f890 <_printf_common+0xb0>
 801f838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f83c:	4649      	mov	r1, r9
 801f83e:	4638      	mov	r0, r7
 801f840:	47c0      	blx	r8
 801f842:	3001      	adds	r0, #1
 801f844:	d01e      	beq.n	801f884 <_printf_common+0xa4>
 801f846:	6823      	ldr	r3, [r4, #0]
 801f848:	68e5      	ldr	r5, [r4, #12]
 801f84a:	6832      	ldr	r2, [r6, #0]
 801f84c:	f003 0306 	and.w	r3, r3, #6
 801f850:	2b04      	cmp	r3, #4
 801f852:	bf08      	it	eq
 801f854:	1aad      	subeq	r5, r5, r2
 801f856:	68a3      	ldr	r3, [r4, #8]
 801f858:	6922      	ldr	r2, [r4, #16]
 801f85a:	bf0c      	ite	eq
 801f85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f860:	2500      	movne	r5, #0
 801f862:	4293      	cmp	r3, r2
 801f864:	bfc4      	itt	gt
 801f866:	1a9b      	subgt	r3, r3, r2
 801f868:	18ed      	addgt	r5, r5, r3
 801f86a:	2600      	movs	r6, #0
 801f86c:	341a      	adds	r4, #26
 801f86e:	42b5      	cmp	r5, r6
 801f870:	d11a      	bne.n	801f8a8 <_printf_common+0xc8>
 801f872:	2000      	movs	r0, #0
 801f874:	e008      	b.n	801f888 <_printf_common+0xa8>
 801f876:	2301      	movs	r3, #1
 801f878:	4652      	mov	r2, sl
 801f87a:	4649      	mov	r1, r9
 801f87c:	4638      	mov	r0, r7
 801f87e:	47c0      	blx	r8
 801f880:	3001      	adds	r0, #1
 801f882:	d103      	bne.n	801f88c <_printf_common+0xac>
 801f884:	f04f 30ff 	mov.w	r0, #4294967295
 801f888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f88c:	3501      	adds	r5, #1
 801f88e:	e7c6      	b.n	801f81e <_printf_common+0x3e>
 801f890:	18e1      	adds	r1, r4, r3
 801f892:	1c5a      	adds	r2, r3, #1
 801f894:	2030      	movs	r0, #48	; 0x30
 801f896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f89a:	4422      	add	r2, r4
 801f89c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f8a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f8a4:	3302      	adds	r3, #2
 801f8a6:	e7c7      	b.n	801f838 <_printf_common+0x58>
 801f8a8:	2301      	movs	r3, #1
 801f8aa:	4622      	mov	r2, r4
 801f8ac:	4649      	mov	r1, r9
 801f8ae:	4638      	mov	r0, r7
 801f8b0:	47c0      	blx	r8
 801f8b2:	3001      	adds	r0, #1
 801f8b4:	d0e6      	beq.n	801f884 <_printf_common+0xa4>
 801f8b6:	3601      	adds	r6, #1
 801f8b8:	e7d9      	b.n	801f86e <_printf_common+0x8e>
	...

0801f8bc <_printf_i>:
 801f8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f8c0:	7e0f      	ldrb	r7, [r1, #24]
 801f8c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f8c4:	2f78      	cmp	r7, #120	; 0x78
 801f8c6:	4691      	mov	r9, r2
 801f8c8:	4680      	mov	r8, r0
 801f8ca:	460c      	mov	r4, r1
 801f8cc:	469a      	mov	sl, r3
 801f8ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f8d2:	d807      	bhi.n	801f8e4 <_printf_i+0x28>
 801f8d4:	2f62      	cmp	r7, #98	; 0x62
 801f8d6:	d80a      	bhi.n	801f8ee <_printf_i+0x32>
 801f8d8:	2f00      	cmp	r7, #0
 801f8da:	f000 80d8 	beq.w	801fa8e <_printf_i+0x1d2>
 801f8de:	2f58      	cmp	r7, #88	; 0x58
 801f8e0:	f000 80a3 	beq.w	801fa2a <_printf_i+0x16e>
 801f8e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f8e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f8ec:	e03a      	b.n	801f964 <_printf_i+0xa8>
 801f8ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f8f2:	2b15      	cmp	r3, #21
 801f8f4:	d8f6      	bhi.n	801f8e4 <_printf_i+0x28>
 801f8f6:	a101      	add	r1, pc, #4	; (adr r1, 801f8fc <_printf_i+0x40>)
 801f8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f8fc:	0801f955 	.word	0x0801f955
 801f900:	0801f969 	.word	0x0801f969
 801f904:	0801f8e5 	.word	0x0801f8e5
 801f908:	0801f8e5 	.word	0x0801f8e5
 801f90c:	0801f8e5 	.word	0x0801f8e5
 801f910:	0801f8e5 	.word	0x0801f8e5
 801f914:	0801f969 	.word	0x0801f969
 801f918:	0801f8e5 	.word	0x0801f8e5
 801f91c:	0801f8e5 	.word	0x0801f8e5
 801f920:	0801f8e5 	.word	0x0801f8e5
 801f924:	0801f8e5 	.word	0x0801f8e5
 801f928:	0801fa75 	.word	0x0801fa75
 801f92c:	0801f999 	.word	0x0801f999
 801f930:	0801fa57 	.word	0x0801fa57
 801f934:	0801f8e5 	.word	0x0801f8e5
 801f938:	0801f8e5 	.word	0x0801f8e5
 801f93c:	0801fa97 	.word	0x0801fa97
 801f940:	0801f8e5 	.word	0x0801f8e5
 801f944:	0801f999 	.word	0x0801f999
 801f948:	0801f8e5 	.word	0x0801f8e5
 801f94c:	0801f8e5 	.word	0x0801f8e5
 801f950:	0801fa5f 	.word	0x0801fa5f
 801f954:	682b      	ldr	r3, [r5, #0]
 801f956:	1d1a      	adds	r2, r3, #4
 801f958:	681b      	ldr	r3, [r3, #0]
 801f95a:	602a      	str	r2, [r5, #0]
 801f95c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f964:	2301      	movs	r3, #1
 801f966:	e0a3      	b.n	801fab0 <_printf_i+0x1f4>
 801f968:	6820      	ldr	r0, [r4, #0]
 801f96a:	6829      	ldr	r1, [r5, #0]
 801f96c:	0606      	lsls	r6, r0, #24
 801f96e:	f101 0304 	add.w	r3, r1, #4
 801f972:	d50a      	bpl.n	801f98a <_printf_i+0xce>
 801f974:	680e      	ldr	r6, [r1, #0]
 801f976:	602b      	str	r3, [r5, #0]
 801f978:	2e00      	cmp	r6, #0
 801f97a:	da03      	bge.n	801f984 <_printf_i+0xc8>
 801f97c:	232d      	movs	r3, #45	; 0x2d
 801f97e:	4276      	negs	r6, r6
 801f980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f984:	485e      	ldr	r0, [pc, #376]	; (801fb00 <_printf_i+0x244>)
 801f986:	230a      	movs	r3, #10
 801f988:	e019      	b.n	801f9be <_printf_i+0x102>
 801f98a:	680e      	ldr	r6, [r1, #0]
 801f98c:	602b      	str	r3, [r5, #0]
 801f98e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f992:	bf18      	it	ne
 801f994:	b236      	sxthne	r6, r6
 801f996:	e7ef      	b.n	801f978 <_printf_i+0xbc>
 801f998:	682b      	ldr	r3, [r5, #0]
 801f99a:	6820      	ldr	r0, [r4, #0]
 801f99c:	1d19      	adds	r1, r3, #4
 801f99e:	6029      	str	r1, [r5, #0]
 801f9a0:	0601      	lsls	r1, r0, #24
 801f9a2:	d501      	bpl.n	801f9a8 <_printf_i+0xec>
 801f9a4:	681e      	ldr	r6, [r3, #0]
 801f9a6:	e002      	b.n	801f9ae <_printf_i+0xf2>
 801f9a8:	0646      	lsls	r6, r0, #25
 801f9aa:	d5fb      	bpl.n	801f9a4 <_printf_i+0xe8>
 801f9ac:	881e      	ldrh	r6, [r3, #0]
 801f9ae:	4854      	ldr	r0, [pc, #336]	; (801fb00 <_printf_i+0x244>)
 801f9b0:	2f6f      	cmp	r7, #111	; 0x6f
 801f9b2:	bf0c      	ite	eq
 801f9b4:	2308      	moveq	r3, #8
 801f9b6:	230a      	movne	r3, #10
 801f9b8:	2100      	movs	r1, #0
 801f9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f9be:	6865      	ldr	r5, [r4, #4]
 801f9c0:	60a5      	str	r5, [r4, #8]
 801f9c2:	2d00      	cmp	r5, #0
 801f9c4:	bfa2      	ittt	ge
 801f9c6:	6821      	ldrge	r1, [r4, #0]
 801f9c8:	f021 0104 	bicge.w	r1, r1, #4
 801f9cc:	6021      	strge	r1, [r4, #0]
 801f9ce:	b90e      	cbnz	r6, 801f9d4 <_printf_i+0x118>
 801f9d0:	2d00      	cmp	r5, #0
 801f9d2:	d04d      	beq.n	801fa70 <_printf_i+0x1b4>
 801f9d4:	4615      	mov	r5, r2
 801f9d6:	fbb6 f1f3 	udiv	r1, r6, r3
 801f9da:	fb03 6711 	mls	r7, r3, r1, r6
 801f9de:	5dc7      	ldrb	r7, [r0, r7]
 801f9e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f9e4:	4637      	mov	r7, r6
 801f9e6:	42bb      	cmp	r3, r7
 801f9e8:	460e      	mov	r6, r1
 801f9ea:	d9f4      	bls.n	801f9d6 <_printf_i+0x11a>
 801f9ec:	2b08      	cmp	r3, #8
 801f9ee:	d10b      	bne.n	801fa08 <_printf_i+0x14c>
 801f9f0:	6823      	ldr	r3, [r4, #0]
 801f9f2:	07de      	lsls	r6, r3, #31
 801f9f4:	d508      	bpl.n	801fa08 <_printf_i+0x14c>
 801f9f6:	6923      	ldr	r3, [r4, #16]
 801f9f8:	6861      	ldr	r1, [r4, #4]
 801f9fa:	4299      	cmp	r1, r3
 801f9fc:	bfde      	ittt	le
 801f9fe:	2330      	movle	r3, #48	; 0x30
 801fa00:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fa04:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fa08:	1b52      	subs	r2, r2, r5
 801fa0a:	6122      	str	r2, [r4, #16]
 801fa0c:	f8cd a000 	str.w	sl, [sp]
 801fa10:	464b      	mov	r3, r9
 801fa12:	aa03      	add	r2, sp, #12
 801fa14:	4621      	mov	r1, r4
 801fa16:	4640      	mov	r0, r8
 801fa18:	f7ff fee2 	bl	801f7e0 <_printf_common>
 801fa1c:	3001      	adds	r0, #1
 801fa1e:	d14c      	bne.n	801faba <_printf_i+0x1fe>
 801fa20:	f04f 30ff 	mov.w	r0, #4294967295
 801fa24:	b004      	add	sp, #16
 801fa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa2a:	4835      	ldr	r0, [pc, #212]	; (801fb00 <_printf_i+0x244>)
 801fa2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801fa30:	6829      	ldr	r1, [r5, #0]
 801fa32:	6823      	ldr	r3, [r4, #0]
 801fa34:	f851 6b04 	ldr.w	r6, [r1], #4
 801fa38:	6029      	str	r1, [r5, #0]
 801fa3a:	061d      	lsls	r5, r3, #24
 801fa3c:	d514      	bpl.n	801fa68 <_printf_i+0x1ac>
 801fa3e:	07df      	lsls	r7, r3, #31
 801fa40:	bf44      	itt	mi
 801fa42:	f043 0320 	orrmi.w	r3, r3, #32
 801fa46:	6023      	strmi	r3, [r4, #0]
 801fa48:	b91e      	cbnz	r6, 801fa52 <_printf_i+0x196>
 801fa4a:	6823      	ldr	r3, [r4, #0]
 801fa4c:	f023 0320 	bic.w	r3, r3, #32
 801fa50:	6023      	str	r3, [r4, #0]
 801fa52:	2310      	movs	r3, #16
 801fa54:	e7b0      	b.n	801f9b8 <_printf_i+0xfc>
 801fa56:	6823      	ldr	r3, [r4, #0]
 801fa58:	f043 0320 	orr.w	r3, r3, #32
 801fa5c:	6023      	str	r3, [r4, #0]
 801fa5e:	2378      	movs	r3, #120	; 0x78
 801fa60:	4828      	ldr	r0, [pc, #160]	; (801fb04 <_printf_i+0x248>)
 801fa62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fa66:	e7e3      	b.n	801fa30 <_printf_i+0x174>
 801fa68:	0659      	lsls	r1, r3, #25
 801fa6a:	bf48      	it	mi
 801fa6c:	b2b6      	uxthmi	r6, r6
 801fa6e:	e7e6      	b.n	801fa3e <_printf_i+0x182>
 801fa70:	4615      	mov	r5, r2
 801fa72:	e7bb      	b.n	801f9ec <_printf_i+0x130>
 801fa74:	682b      	ldr	r3, [r5, #0]
 801fa76:	6826      	ldr	r6, [r4, #0]
 801fa78:	6961      	ldr	r1, [r4, #20]
 801fa7a:	1d18      	adds	r0, r3, #4
 801fa7c:	6028      	str	r0, [r5, #0]
 801fa7e:	0635      	lsls	r5, r6, #24
 801fa80:	681b      	ldr	r3, [r3, #0]
 801fa82:	d501      	bpl.n	801fa88 <_printf_i+0x1cc>
 801fa84:	6019      	str	r1, [r3, #0]
 801fa86:	e002      	b.n	801fa8e <_printf_i+0x1d2>
 801fa88:	0670      	lsls	r0, r6, #25
 801fa8a:	d5fb      	bpl.n	801fa84 <_printf_i+0x1c8>
 801fa8c:	8019      	strh	r1, [r3, #0]
 801fa8e:	2300      	movs	r3, #0
 801fa90:	6123      	str	r3, [r4, #16]
 801fa92:	4615      	mov	r5, r2
 801fa94:	e7ba      	b.n	801fa0c <_printf_i+0x150>
 801fa96:	682b      	ldr	r3, [r5, #0]
 801fa98:	1d1a      	adds	r2, r3, #4
 801fa9a:	602a      	str	r2, [r5, #0]
 801fa9c:	681d      	ldr	r5, [r3, #0]
 801fa9e:	6862      	ldr	r2, [r4, #4]
 801faa0:	2100      	movs	r1, #0
 801faa2:	4628      	mov	r0, r5
 801faa4:	f7e0 fbc4 	bl	8000230 <memchr>
 801faa8:	b108      	cbz	r0, 801faae <_printf_i+0x1f2>
 801faaa:	1b40      	subs	r0, r0, r5
 801faac:	6060      	str	r0, [r4, #4]
 801faae:	6863      	ldr	r3, [r4, #4]
 801fab0:	6123      	str	r3, [r4, #16]
 801fab2:	2300      	movs	r3, #0
 801fab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fab8:	e7a8      	b.n	801fa0c <_printf_i+0x150>
 801faba:	6923      	ldr	r3, [r4, #16]
 801fabc:	462a      	mov	r2, r5
 801fabe:	4649      	mov	r1, r9
 801fac0:	4640      	mov	r0, r8
 801fac2:	47d0      	blx	sl
 801fac4:	3001      	adds	r0, #1
 801fac6:	d0ab      	beq.n	801fa20 <_printf_i+0x164>
 801fac8:	6823      	ldr	r3, [r4, #0]
 801faca:	079b      	lsls	r3, r3, #30
 801facc:	d413      	bmi.n	801faf6 <_printf_i+0x23a>
 801face:	68e0      	ldr	r0, [r4, #12]
 801fad0:	9b03      	ldr	r3, [sp, #12]
 801fad2:	4298      	cmp	r0, r3
 801fad4:	bfb8      	it	lt
 801fad6:	4618      	movlt	r0, r3
 801fad8:	e7a4      	b.n	801fa24 <_printf_i+0x168>
 801fada:	2301      	movs	r3, #1
 801fadc:	4632      	mov	r2, r6
 801fade:	4649      	mov	r1, r9
 801fae0:	4640      	mov	r0, r8
 801fae2:	47d0      	blx	sl
 801fae4:	3001      	adds	r0, #1
 801fae6:	d09b      	beq.n	801fa20 <_printf_i+0x164>
 801fae8:	3501      	adds	r5, #1
 801faea:	68e3      	ldr	r3, [r4, #12]
 801faec:	9903      	ldr	r1, [sp, #12]
 801faee:	1a5b      	subs	r3, r3, r1
 801faf0:	42ab      	cmp	r3, r5
 801faf2:	dcf2      	bgt.n	801fada <_printf_i+0x21e>
 801faf4:	e7eb      	b.n	801face <_printf_i+0x212>
 801faf6:	2500      	movs	r5, #0
 801faf8:	f104 0619 	add.w	r6, r4, #25
 801fafc:	e7f5      	b.n	801faea <_printf_i+0x22e>
 801fafe:	bf00      	nop
 801fb00:	08022676 	.word	0x08022676
 801fb04:	08022687 	.word	0x08022687

0801fb08 <iprintf>:
 801fb08:	b40f      	push	{r0, r1, r2, r3}
 801fb0a:	4b0a      	ldr	r3, [pc, #40]	; (801fb34 <iprintf+0x2c>)
 801fb0c:	b513      	push	{r0, r1, r4, lr}
 801fb0e:	681c      	ldr	r4, [r3, #0]
 801fb10:	b124      	cbz	r4, 801fb1c <iprintf+0x14>
 801fb12:	69a3      	ldr	r3, [r4, #24]
 801fb14:	b913      	cbnz	r3, 801fb1c <iprintf+0x14>
 801fb16:	4620      	mov	r0, r4
 801fb18:	f001 f8ee 	bl	8020cf8 <__sinit>
 801fb1c:	ab05      	add	r3, sp, #20
 801fb1e:	9a04      	ldr	r2, [sp, #16]
 801fb20:	68a1      	ldr	r1, [r4, #8]
 801fb22:	9301      	str	r3, [sp, #4]
 801fb24:	4620      	mov	r0, r4
 801fb26:	f001 fe9d 	bl	8021864 <_vfiprintf_r>
 801fb2a:	b002      	add	sp, #8
 801fb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb30:	b004      	add	sp, #16
 801fb32:	4770      	bx	lr
 801fb34:	2000002c 	.word	0x2000002c

0801fb38 <putchar>:
 801fb38:	4b09      	ldr	r3, [pc, #36]	; (801fb60 <putchar+0x28>)
 801fb3a:	b513      	push	{r0, r1, r4, lr}
 801fb3c:	681c      	ldr	r4, [r3, #0]
 801fb3e:	4601      	mov	r1, r0
 801fb40:	b134      	cbz	r4, 801fb50 <putchar+0x18>
 801fb42:	69a3      	ldr	r3, [r4, #24]
 801fb44:	b923      	cbnz	r3, 801fb50 <putchar+0x18>
 801fb46:	9001      	str	r0, [sp, #4]
 801fb48:	4620      	mov	r0, r4
 801fb4a:	f001 f8d5 	bl	8020cf8 <__sinit>
 801fb4e:	9901      	ldr	r1, [sp, #4]
 801fb50:	68a2      	ldr	r2, [r4, #8]
 801fb52:	4620      	mov	r0, r4
 801fb54:	b002      	add	sp, #8
 801fb56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb5a:	f001 bfb3 	b.w	8021ac4 <_putc_r>
 801fb5e:	bf00      	nop
 801fb60:	2000002c 	.word	0x2000002c

0801fb64 <_puts_r>:
 801fb64:	b570      	push	{r4, r5, r6, lr}
 801fb66:	460e      	mov	r6, r1
 801fb68:	4605      	mov	r5, r0
 801fb6a:	b118      	cbz	r0, 801fb74 <_puts_r+0x10>
 801fb6c:	6983      	ldr	r3, [r0, #24]
 801fb6e:	b90b      	cbnz	r3, 801fb74 <_puts_r+0x10>
 801fb70:	f001 f8c2 	bl	8020cf8 <__sinit>
 801fb74:	69ab      	ldr	r3, [r5, #24]
 801fb76:	68ac      	ldr	r4, [r5, #8]
 801fb78:	b913      	cbnz	r3, 801fb80 <_puts_r+0x1c>
 801fb7a:	4628      	mov	r0, r5
 801fb7c:	f001 f8bc 	bl	8020cf8 <__sinit>
 801fb80:	4b2c      	ldr	r3, [pc, #176]	; (801fc34 <_puts_r+0xd0>)
 801fb82:	429c      	cmp	r4, r3
 801fb84:	d120      	bne.n	801fbc8 <_puts_r+0x64>
 801fb86:	686c      	ldr	r4, [r5, #4]
 801fb88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb8a:	07db      	lsls	r3, r3, #31
 801fb8c:	d405      	bmi.n	801fb9a <_puts_r+0x36>
 801fb8e:	89a3      	ldrh	r3, [r4, #12]
 801fb90:	0598      	lsls	r0, r3, #22
 801fb92:	d402      	bmi.n	801fb9a <_puts_r+0x36>
 801fb94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb96:	f001 f952 	bl	8020e3e <__retarget_lock_acquire_recursive>
 801fb9a:	89a3      	ldrh	r3, [r4, #12]
 801fb9c:	0719      	lsls	r1, r3, #28
 801fb9e:	d51d      	bpl.n	801fbdc <_puts_r+0x78>
 801fba0:	6923      	ldr	r3, [r4, #16]
 801fba2:	b1db      	cbz	r3, 801fbdc <_puts_r+0x78>
 801fba4:	3e01      	subs	r6, #1
 801fba6:	68a3      	ldr	r3, [r4, #8]
 801fba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fbac:	3b01      	subs	r3, #1
 801fbae:	60a3      	str	r3, [r4, #8]
 801fbb0:	bb39      	cbnz	r1, 801fc02 <_puts_r+0x9e>
 801fbb2:	2b00      	cmp	r3, #0
 801fbb4:	da38      	bge.n	801fc28 <_puts_r+0xc4>
 801fbb6:	4622      	mov	r2, r4
 801fbb8:	210a      	movs	r1, #10
 801fbba:	4628      	mov	r0, r5
 801fbbc:	f000 f848 	bl	801fc50 <__swbuf_r>
 801fbc0:	3001      	adds	r0, #1
 801fbc2:	d011      	beq.n	801fbe8 <_puts_r+0x84>
 801fbc4:	250a      	movs	r5, #10
 801fbc6:	e011      	b.n	801fbec <_puts_r+0x88>
 801fbc8:	4b1b      	ldr	r3, [pc, #108]	; (801fc38 <_puts_r+0xd4>)
 801fbca:	429c      	cmp	r4, r3
 801fbcc:	d101      	bne.n	801fbd2 <_puts_r+0x6e>
 801fbce:	68ac      	ldr	r4, [r5, #8]
 801fbd0:	e7da      	b.n	801fb88 <_puts_r+0x24>
 801fbd2:	4b1a      	ldr	r3, [pc, #104]	; (801fc3c <_puts_r+0xd8>)
 801fbd4:	429c      	cmp	r4, r3
 801fbd6:	bf08      	it	eq
 801fbd8:	68ec      	ldreq	r4, [r5, #12]
 801fbda:	e7d5      	b.n	801fb88 <_puts_r+0x24>
 801fbdc:	4621      	mov	r1, r4
 801fbde:	4628      	mov	r0, r5
 801fbe0:	f000 f888 	bl	801fcf4 <__swsetup_r>
 801fbe4:	2800      	cmp	r0, #0
 801fbe6:	d0dd      	beq.n	801fba4 <_puts_r+0x40>
 801fbe8:	f04f 35ff 	mov.w	r5, #4294967295
 801fbec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fbee:	07da      	lsls	r2, r3, #31
 801fbf0:	d405      	bmi.n	801fbfe <_puts_r+0x9a>
 801fbf2:	89a3      	ldrh	r3, [r4, #12]
 801fbf4:	059b      	lsls	r3, r3, #22
 801fbf6:	d402      	bmi.n	801fbfe <_puts_r+0x9a>
 801fbf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbfa:	f001 f921 	bl	8020e40 <__retarget_lock_release_recursive>
 801fbfe:	4628      	mov	r0, r5
 801fc00:	bd70      	pop	{r4, r5, r6, pc}
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	da04      	bge.n	801fc10 <_puts_r+0xac>
 801fc06:	69a2      	ldr	r2, [r4, #24]
 801fc08:	429a      	cmp	r2, r3
 801fc0a:	dc06      	bgt.n	801fc1a <_puts_r+0xb6>
 801fc0c:	290a      	cmp	r1, #10
 801fc0e:	d004      	beq.n	801fc1a <_puts_r+0xb6>
 801fc10:	6823      	ldr	r3, [r4, #0]
 801fc12:	1c5a      	adds	r2, r3, #1
 801fc14:	6022      	str	r2, [r4, #0]
 801fc16:	7019      	strb	r1, [r3, #0]
 801fc18:	e7c5      	b.n	801fba6 <_puts_r+0x42>
 801fc1a:	4622      	mov	r2, r4
 801fc1c:	4628      	mov	r0, r5
 801fc1e:	f000 f817 	bl	801fc50 <__swbuf_r>
 801fc22:	3001      	adds	r0, #1
 801fc24:	d1bf      	bne.n	801fba6 <_puts_r+0x42>
 801fc26:	e7df      	b.n	801fbe8 <_puts_r+0x84>
 801fc28:	6823      	ldr	r3, [r4, #0]
 801fc2a:	250a      	movs	r5, #10
 801fc2c:	1c5a      	adds	r2, r3, #1
 801fc2e:	6022      	str	r2, [r4, #0]
 801fc30:	701d      	strb	r5, [r3, #0]
 801fc32:	e7db      	b.n	801fbec <_puts_r+0x88>
 801fc34:	08022748 	.word	0x08022748
 801fc38:	08022768 	.word	0x08022768
 801fc3c:	08022728 	.word	0x08022728

0801fc40 <puts>:
 801fc40:	4b02      	ldr	r3, [pc, #8]	; (801fc4c <puts+0xc>)
 801fc42:	4601      	mov	r1, r0
 801fc44:	6818      	ldr	r0, [r3, #0]
 801fc46:	f7ff bf8d 	b.w	801fb64 <_puts_r>
 801fc4a:	bf00      	nop
 801fc4c:	2000002c 	.word	0x2000002c

0801fc50 <__swbuf_r>:
 801fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc52:	460e      	mov	r6, r1
 801fc54:	4614      	mov	r4, r2
 801fc56:	4605      	mov	r5, r0
 801fc58:	b118      	cbz	r0, 801fc62 <__swbuf_r+0x12>
 801fc5a:	6983      	ldr	r3, [r0, #24]
 801fc5c:	b90b      	cbnz	r3, 801fc62 <__swbuf_r+0x12>
 801fc5e:	f001 f84b 	bl	8020cf8 <__sinit>
 801fc62:	4b21      	ldr	r3, [pc, #132]	; (801fce8 <__swbuf_r+0x98>)
 801fc64:	429c      	cmp	r4, r3
 801fc66:	d12b      	bne.n	801fcc0 <__swbuf_r+0x70>
 801fc68:	686c      	ldr	r4, [r5, #4]
 801fc6a:	69a3      	ldr	r3, [r4, #24]
 801fc6c:	60a3      	str	r3, [r4, #8]
 801fc6e:	89a3      	ldrh	r3, [r4, #12]
 801fc70:	071a      	lsls	r2, r3, #28
 801fc72:	d52f      	bpl.n	801fcd4 <__swbuf_r+0x84>
 801fc74:	6923      	ldr	r3, [r4, #16]
 801fc76:	b36b      	cbz	r3, 801fcd4 <__swbuf_r+0x84>
 801fc78:	6923      	ldr	r3, [r4, #16]
 801fc7a:	6820      	ldr	r0, [r4, #0]
 801fc7c:	1ac0      	subs	r0, r0, r3
 801fc7e:	6963      	ldr	r3, [r4, #20]
 801fc80:	b2f6      	uxtb	r6, r6
 801fc82:	4283      	cmp	r3, r0
 801fc84:	4637      	mov	r7, r6
 801fc86:	dc04      	bgt.n	801fc92 <__swbuf_r+0x42>
 801fc88:	4621      	mov	r1, r4
 801fc8a:	4628      	mov	r0, r5
 801fc8c:	f000 ffa0 	bl	8020bd0 <_fflush_r>
 801fc90:	bb30      	cbnz	r0, 801fce0 <__swbuf_r+0x90>
 801fc92:	68a3      	ldr	r3, [r4, #8]
 801fc94:	3b01      	subs	r3, #1
 801fc96:	60a3      	str	r3, [r4, #8]
 801fc98:	6823      	ldr	r3, [r4, #0]
 801fc9a:	1c5a      	adds	r2, r3, #1
 801fc9c:	6022      	str	r2, [r4, #0]
 801fc9e:	701e      	strb	r6, [r3, #0]
 801fca0:	6963      	ldr	r3, [r4, #20]
 801fca2:	3001      	adds	r0, #1
 801fca4:	4283      	cmp	r3, r0
 801fca6:	d004      	beq.n	801fcb2 <__swbuf_r+0x62>
 801fca8:	89a3      	ldrh	r3, [r4, #12]
 801fcaa:	07db      	lsls	r3, r3, #31
 801fcac:	d506      	bpl.n	801fcbc <__swbuf_r+0x6c>
 801fcae:	2e0a      	cmp	r6, #10
 801fcb0:	d104      	bne.n	801fcbc <__swbuf_r+0x6c>
 801fcb2:	4621      	mov	r1, r4
 801fcb4:	4628      	mov	r0, r5
 801fcb6:	f000 ff8b 	bl	8020bd0 <_fflush_r>
 801fcba:	b988      	cbnz	r0, 801fce0 <__swbuf_r+0x90>
 801fcbc:	4638      	mov	r0, r7
 801fcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fcc0:	4b0a      	ldr	r3, [pc, #40]	; (801fcec <__swbuf_r+0x9c>)
 801fcc2:	429c      	cmp	r4, r3
 801fcc4:	d101      	bne.n	801fcca <__swbuf_r+0x7a>
 801fcc6:	68ac      	ldr	r4, [r5, #8]
 801fcc8:	e7cf      	b.n	801fc6a <__swbuf_r+0x1a>
 801fcca:	4b09      	ldr	r3, [pc, #36]	; (801fcf0 <__swbuf_r+0xa0>)
 801fccc:	429c      	cmp	r4, r3
 801fcce:	bf08      	it	eq
 801fcd0:	68ec      	ldreq	r4, [r5, #12]
 801fcd2:	e7ca      	b.n	801fc6a <__swbuf_r+0x1a>
 801fcd4:	4621      	mov	r1, r4
 801fcd6:	4628      	mov	r0, r5
 801fcd8:	f000 f80c 	bl	801fcf4 <__swsetup_r>
 801fcdc:	2800      	cmp	r0, #0
 801fcde:	d0cb      	beq.n	801fc78 <__swbuf_r+0x28>
 801fce0:	f04f 37ff 	mov.w	r7, #4294967295
 801fce4:	e7ea      	b.n	801fcbc <__swbuf_r+0x6c>
 801fce6:	bf00      	nop
 801fce8:	08022748 	.word	0x08022748
 801fcec:	08022768 	.word	0x08022768
 801fcf0:	08022728 	.word	0x08022728

0801fcf4 <__swsetup_r>:
 801fcf4:	4b32      	ldr	r3, [pc, #200]	; (801fdc0 <__swsetup_r+0xcc>)
 801fcf6:	b570      	push	{r4, r5, r6, lr}
 801fcf8:	681d      	ldr	r5, [r3, #0]
 801fcfa:	4606      	mov	r6, r0
 801fcfc:	460c      	mov	r4, r1
 801fcfe:	b125      	cbz	r5, 801fd0a <__swsetup_r+0x16>
 801fd00:	69ab      	ldr	r3, [r5, #24]
 801fd02:	b913      	cbnz	r3, 801fd0a <__swsetup_r+0x16>
 801fd04:	4628      	mov	r0, r5
 801fd06:	f000 fff7 	bl	8020cf8 <__sinit>
 801fd0a:	4b2e      	ldr	r3, [pc, #184]	; (801fdc4 <__swsetup_r+0xd0>)
 801fd0c:	429c      	cmp	r4, r3
 801fd0e:	d10f      	bne.n	801fd30 <__swsetup_r+0x3c>
 801fd10:	686c      	ldr	r4, [r5, #4]
 801fd12:	89a3      	ldrh	r3, [r4, #12]
 801fd14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fd18:	0719      	lsls	r1, r3, #28
 801fd1a:	d42c      	bmi.n	801fd76 <__swsetup_r+0x82>
 801fd1c:	06dd      	lsls	r5, r3, #27
 801fd1e:	d411      	bmi.n	801fd44 <__swsetup_r+0x50>
 801fd20:	2309      	movs	r3, #9
 801fd22:	6033      	str	r3, [r6, #0]
 801fd24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fd28:	81a3      	strh	r3, [r4, #12]
 801fd2a:	f04f 30ff 	mov.w	r0, #4294967295
 801fd2e:	e03e      	b.n	801fdae <__swsetup_r+0xba>
 801fd30:	4b25      	ldr	r3, [pc, #148]	; (801fdc8 <__swsetup_r+0xd4>)
 801fd32:	429c      	cmp	r4, r3
 801fd34:	d101      	bne.n	801fd3a <__swsetup_r+0x46>
 801fd36:	68ac      	ldr	r4, [r5, #8]
 801fd38:	e7eb      	b.n	801fd12 <__swsetup_r+0x1e>
 801fd3a:	4b24      	ldr	r3, [pc, #144]	; (801fdcc <__swsetup_r+0xd8>)
 801fd3c:	429c      	cmp	r4, r3
 801fd3e:	bf08      	it	eq
 801fd40:	68ec      	ldreq	r4, [r5, #12]
 801fd42:	e7e6      	b.n	801fd12 <__swsetup_r+0x1e>
 801fd44:	0758      	lsls	r0, r3, #29
 801fd46:	d512      	bpl.n	801fd6e <__swsetup_r+0x7a>
 801fd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fd4a:	b141      	cbz	r1, 801fd5e <__swsetup_r+0x6a>
 801fd4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fd50:	4299      	cmp	r1, r3
 801fd52:	d002      	beq.n	801fd5a <__swsetup_r+0x66>
 801fd54:	4630      	mov	r0, r6
 801fd56:	f001 fc7b 	bl	8021650 <_free_r>
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	6363      	str	r3, [r4, #52]	; 0x34
 801fd5e:	89a3      	ldrh	r3, [r4, #12]
 801fd60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fd64:	81a3      	strh	r3, [r4, #12]
 801fd66:	2300      	movs	r3, #0
 801fd68:	6063      	str	r3, [r4, #4]
 801fd6a:	6923      	ldr	r3, [r4, #16]
 801fd6c:	6023      	str	r3, [r4, #0]
 801fd6e:	89a3      	ldrh	r3, [r4, #12]
 801fd70:	f043 0308 	orr.w	r3, r3, #8
 801fd74:	81a3      	strh	r3, [r4, #12]
 801fd76:	6923      	ldr	r3, [r4, #16]
 801fd78:	b94b      	cbnz	r3, 801fd8e <__swsetup_r+0x9a>
 801fd7a:	89a3      	ldrh	r3, [r4, #12]
 801fd7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fd80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fd84:	d003      	beq.n	801fd8e <__swsetup_r+0x9a>
 801fd86:	4621      	mov	r1, r4
 801fd88:	4630      	mov	r0, r6
 801fd8a:	f001 f87f 	bl	8020e8c <__smakebuf_r>
 801fd8e:	89a0      	ldrh	r0, [r4, #12]
 801fd90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fd94:	f010 0301 	ands.w	r3, r0, #1
 801fd98:	d00a      	beq.n	801fdb0 <__swsetup_r+0xbc>
 801fd9a:	2300      	movs	r3, #0
 801fd9c:	60a3      	str	r3, [r4, #8]
 801fd9e:	6963      	ldr	r3, [r4, #20]
 801fda0:	425b      	negs	r3, r3
 801fda2:	61a3      	str	r3, [r4, #24]
 801fda4:	6923      	ldr	r3, [r4, #16]
 801fda6:	b943      	cbnz	r3, 801fdba <__swsetup_r+0xc6>
 801fda8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fdac:	d1ba      	bne.n	801fd24 <__swsetup_r+0x30>
 801fdae:	bd70      	pop	{r4, r5, r6, pc}
 801fdb0:	0781      	lsls	r1, r0, #30
 801fdb2:	bf58      	it	pl
 801fdb4:	6963      	ldrpl	r3, [r4, #20]
 801fdb6:	60a3      	str	r3, [r4, #8]
 801fdb8:	e7f4      	b.n	801fda4 <__swsetup_r+0xb0>
 801fdba:	2000      	movs	r0, #0
 801fdbc:	e7f7      	b.n	801fdae <__swsetup_r+0xba>
 801fdbe:	bf00      	nop
 801fdc0:	2000002c 	.word	0x2000002c
 801fdc4:	08022748 	.word	0x08022748
 801fdc8:	08022768 	.word	0x08022768
 801fdcc:	08022728 	.word	0x08022728

0801fdd0 <quorem>:
 801fdd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdd4:	6903      	ldr	r3, [r0, #16]
 801fdd6:	690c      	ldr	r4, [r1, #16]
 801fdd8:	42a3      	cmp	r3, r4
 801fdda:	4607      	mov	r7, r0
 801fddc:	f2c0 8081 	blt.w	801fee2 <quorem+0x112>
 801fde0:	3c01      	subs	r4, #1
 801fde2:	f101 0814 	add.w	r8, r1, #20
 801fde6:	f100 0514 	add.w	r5, r0, #20
 801fdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fdee:	9301      	str	r3, [sp, #4]
 801fdf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fdf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fdf8:	3301      	adds	r3, #1
 801fdfa:	429a      	cmp	r2, r3
 801fdfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fe00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fe04:	fbb2 f6f3 	udiv	r6, r2, r3
 801fe08:	d331      	bcc.n	801fe6e <quorem+0x9e>
 801fe0a:	f04f 0e00 	mov.w	lr, #0
 801fe0e:	4640      	mov	r0, r8
 801fe10:	46ac      	mov	ip, r5
 801fe12:	46f2      	mov	sl, lr
 801fe14:	f850 2b04 	ldr.w	r2, [r0], #4
 801fe18:	b293      	uxth	r3, r2
 801fe1a:	fb06 e303 	mla	r3, r6, r3, lr
 801fe1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fe22:	b29b      	uxth	r3, r3
 801fe24:	ebaa 0303 	sub.w	r3, sl, r3
 801fe28:	f8dc a000 	ldr.w	sl, [ip]
 801fe2c:	0c12      	lsrs	r2, r2, #16
 801fe2e:	fa13 f38a 	uxtah	r3, r3, sl
 801fe32:	fb06 e202 	mla	r2, r6, r2, lr
 801fe36:	9300      	str	r3, [sp, #0]
 801fe38:	9b00      	ldr	r3, [sp, #0]
 801fe3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fe3e:	b292      	uxth	r2, r2
 801fe40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fe44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fe48:	f8bd 3000 	ldrh.w	r3, [sp]
 801fe4c:	4581      	cmp	r9, r0
 801fe4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fe52:	f84c 3b04 	str.w	r3, [ip], #4
 801fe56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fe5a:	d2db      	bcs.n	801fe14 <quorem+0x44>
 801fe5c:	f855 300b 	ldr.w	r3, [r5, fp]
 801fe60:	b92b      	cbnz	r3, 801fe6e <quorem+0x9e>
 801fe62:	9b01      	ldr	r3, [sp, #4]
 801fe64:	3b04      	subs	r3, #4
 801fe66:	429d      	cmp	r5, r3
 801fe68:	461a      	mov	r2, r3
 801fe6a:	d32e      	bcc.n	801feca <quorem+0xfa>
 801fe6c:	613c      	str	r4, [r7, #16]
 801fe6e:	4638      	mov	r0, r7
 801fe70:	f001 fad6 	bl	8021420 <__mcmp>
 801fe74:	2800      	cmp	r0, #0
 801fe76:	db24      	blt.n	801fec2 <quorem+0xf2>
 801fe78:	3601      	adds	r6, #1
 801fe7a:	4628      	mov	r0, r5
 801fe7c:	f04f 0c00 	mov.w	ip, #0
 801fe80:	f858 2b04 	ldr.w	r2, [r8], #4
 801fe84:	f8d0 e000 	ldr.w	lr, [r0]
 801fe88:	b293      	uxth	r3, r2
 801fe8a:	ebac 0303 	sub.w	r3, ip, r3
 801fe8e:	0c12      	lsrs	r2, r2, #16
 801fe90:	fa13 f38e 	uxtah	r3, r3, lr
 801fe94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801fe98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fe9c:	b29b      	uxth	r3, r3
 801fe9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fea2:	45c1      	cmp	r9, r8
 801fea4:	f840 3b04 	str.w	r3, [r0], #4
 801fea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801feac:	d2e8      	bcs.n	801fe80 <quorem+0xb0>
 801feae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801feb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801feb6:	b922      	cbnz	r2, 801fec2 <quorem+0xf2>
 801feb8:	3b04      	subs	r3, #4
 801feba:	429d      	cmp	r5, r3
 801febc:	461a      	mov	r2, r3
 801febe:	d30a      	bcc.n	801fed6 <quorem+0x106>
 801fec0:	613c      	str	r4, [r7, #16]
 801fec2:	4630      	mov	r0, r6
 801fec4:	b003      	add	sp, #12
 801fec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feca:	6812      	ldr	r2, [r2, #0]
 801fecc:	3b04      	subs	r3, #4
 801fece:	2a00      	cmp	r2, #0
 801fed0:	d1cc      	bne.n	801fe6c <quorem+0x9c>
 801fed2:	3c01      	subs	r4, #1
 801fed4:	e7c7      	b.n	801fe66 <quorem+0x96>
 801fed6:	6812      	ldr	r2, [r2, #0]
 801fed8:	3b04      	subs	r3, #4
 801feda:	2a00      	cmp	r2, #0
 801fedc:	d1f0      	bne.n	801fec0 <quorem+0xf0>
 801fede:	3c01      	subs	r4, #1
 801fee0:	e7eb      	b.n	801feba <quorem+0xea>
 801fee2:	2000      	movs	r0, #0
 801fee4:	e7ee      	b.n	801fec4 <quorem+0xf4>
	...

0801fee8 <_dtoa_r>:
 801fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801feec:	ed2d 8b04 	vpush	{d8-d9}
 801fef0:	ec57 6b10 	vmov	r6, r7, d0
 801fef4:	b093      	sub	sp, #76	; 0x4c
 801fef6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801fef8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fefc:	9106      	str	r1, [sp, #24]
 801fefe:	ee10 aa10 	vmov	sl, s0
 801ff02:	4604      	mov	r4, r0
 801ff04:	9209      	str	r2, [sp, #36]	; 0x24
 801ff06:	930c      	str	r3, [sp, #48]	; 0x30
 801ff08:	46bb      	mov	fp, r7
 801ff0a:	b975      	cbnz	r5, 801ff2a <_dtoa_r+0x42>
 801ff0c:	2010      	movs	r0, #16
 801ff0e:	f000 fffd 	bl	8020f0c <malloc>
 801ff12:	4602      	mov	r2, r0
 801ff14:	6260      	str	r0, [r4, #36]	; 0x24
 801ff16:	b920      	cbnz	r0, 801ff22 <_dtoa_r+0x3a>
 801ff18:	4ba7      	ldr	r3, [pc, #668]	; (80201b8 <_dtoa_r+0x2d0>)
 801ff1a:	21ea      	movs	r1, #234	; 0xea
 801ff1c:	48a7      	ldr	r0, [pc, #668]	; (80201bc <_dtoa_r+0x2d4>)
 801ff1e:	f001 fe7f 	bl	8021c20 <__assert_func>
 801ff22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ff26:	6005      	str	r5, [r0, #0]
 801ff28:	60c5      	str	r5, [r0, #12]
 801ff2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ff2c:	6819      	ldr	r1, [r3, #0]
 801ff2e:	b151      	cbz	r1, 801ff46 <_dtoa_r+0x5e>
 801ff30:	685a      	ldr	r2, [r3, #4]
 801ff32:	604a      	str	r2, [r1, #4]
 801ff34:	2301      	movs	r3, #1
 801ff36:	4093      	lsls	r3, r2
 801ff38:	608b      	str	r3, [r1, #8]
 801ff3a:	4620      	mov	r0, r4
 801ff3c:	f001 f82e 	bl	8020f9c <_Bfree>
 801ff40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ff42:	2200      	movs	r2, #0
 801ff44:	601a      	str	r2, [r3, #0]
 801ff46:	1e3b      	subs	r3, r7, #0
 801ff48:	bfaa      	itet	ge
 801ff4a:	2300      	movge	r3, #0
 801ff4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801ff50:	f8c8 3000 	strge.w	r3, [r8]
 801ff54:	4b9a      	ldr	r3, [pc, #616]	; (80201c0 <_dtoa_r+0x2d8>)
 801ff56:	bfbc      	itt	lt
 801ff58:	2201      	movlt	r2, #1
 801ff5a:	f8c8 2000 	strlt.w	r2, [r8]
 801ff5e:	ea33 030b 	bics.w	r3, r3, fp
 801ff62:	d11b      	bne.n	801ff9c <_dtoa_r+0xb4>
 801ff64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ff66:	f242 730f 	movw	r3, #9999	; 0x270f
 801ff6a:	6013      	str	r3, [r2, #0]
 801ff6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ff70:	4333      	orrs	r3, r6
 801ff72:	f000 8592 	beq.w	8020a9a <_dtoa_r+0xbb2>
 801ff76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ff78:	b963      	cbnz	r3, 801ff94 <_dtoa_r+0xac>
 801ff7a:	4b92      	ldr	r3, [pc, #584]	; (80201c4 <_dtoa_r+0x2dc>)
 801ff7c:	e022      	b.n	801ffc4 <_dtoa_r+0xdc>
 801ff7e:	4b92      	ldr	r3, [pc, #584]	; (80201c8 <_dtoa_r+0x2e0>)
 801ff80:	9301      	str	r3, [sp, #4]
 801ff82:	3308      	adds	r3, #8
 801ff84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ff86:	6013      	str	r3, [r2, #0]
 801ff88:	9801      	ldr	r0, [sp, #4]
 801ff8a:	b013      	add	sp, #76	; 0x4c
 801ff8c:	ecbd 8b04 	vpop	{d8-d9}
 801ff90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff94:	4b8b      	ldr	r3, [pc, #556]	; (80201c4 <_dtoa_r+0x2dc>)
 801ff96:	9301      	str	r3, [sp, #4]
 801ff98:	3303      	adds	r3, #3
 801ff9a:	e7f3      	b.n	801ff84 <_dtoa_r+0x9c>
 801ff9c:	2200      	movs	r2, #0
 801ff9e:	2300      	movs	r3, #0
 801ffa0:	4650      	mov	r0, sl
 801ffa2:	4659      	mov	r1, fp
 801ffa4:	f7e0 fdb8 	bl	8000b18 <__aeabi_dcmpeq>
 801ffa8:	ec4b ab19 	vmov	d9, sl, fp
 801ffac:	4680      	mov	r8, r0
 801ffae:	b158      	cbz	r0, 801ffc8 <_dtoa_r+0xe0>
 801ffb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ffb2:	2301      	movs	r3, #1
 801ffb4:	6013      	str	r3, [r2, #0]
 801ffb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	f000 856b 	beq.w	8020a94 <_dtoa_r+0xbac>
 801ffbe:	4883      	ldr	r0, [pc, #524]	; (80201cc <_dtoa_r+0x2e4>)
 801ffc0:	6018      	str	r0, [r3, #0]
 801ffc2:	1e43      	subs	r3, r0, #1
 801ffc4:	9301      	str	r3, [sp, #4]
 801ffc6:	e7df      	b.n	801ff88 <_dtoa_r+0xa0>
 801ffc8:	ec4b ab10 	vmov	d0, sl, fp
 801ffcc:	aa10      	add	r2, sp, #64	; 0x40
 801ffce:	a911      	add	r1, sp, #68	; 0x44
 801ffd0:	4620      	mov	r0, r4
 801ffd2:	f001 facb 	bl	802156c <__d2b>
 801ffd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801ffda:	ee08 0a10 	vmov	s16, r0
 801ffde:	2d00      	cmp	r5, #0
 801ffe0:	f000 8084 	beq.w	80200ec <_dtoa_r+0x204>
 801ffe4:	ee19 3a90 	vmov	r3, s19
 801ffe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ffec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801fff0:	4656      	mov	r6, sl
 801fff2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801fff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fffa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fffe:	4b74      	ldr	r3, [pc, #464]	; (80201d0 <_dtoa_r+0x2e8>)
 8020000:	2200      	movs	r2, #0
 8020002:	4630      	mov	r0, r6
 8020004:	4639      	mov	r1, r7
 8020006:	f7e0 f967 	bl	80002d8 <__aeabi_dsub>
 802000a:	a365      	add	r3, pc, #404	; (adr r3, 80201a0 <_dtoa_r+0x2b8>)
 802000c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020010:	f7e0 fb1a 	bl	8000648 <__aeabi_dmul>
 8020014:	a364      	add	r3, pc, #400	; (adr r3, 80201a8 <_dtoa_r+0x2c0>)
 8020016:	e9d3 2300 	ldrd	r2, r3, [r3]
 802001a:	f7e0 f95f 	bl	80002dc <__adddf3>
 802001e:	4606      	mov	r6, r0
 8020020:	4628      	mov	r0, r5
 8020022:	460f      	mov	r7, r1
 8020024:	f7e0 faa6 	bl	8000574 <__aeabi_i2d>
 8020028:	a361      	add	r3, pc, #388	; (adr r3, 80201b0 <_dtoa_r+0x2c8>)
 802002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802002e:	f7e0 fb0b 	bl	8000648 <__aeabi_dmul>
 8020032:	4602      	mov	r2, r0
 8020034:	460b      	mov	r3, r1
 8020036:	4630      	mov	r0, r6
 8020038:	4639      	mov	r1, r7
 802003a:	f7e0 f94f 	bl	80002dc <__adddf3>
 802003e:	4606      	mov	r6, r0
 8020040:	460f      	mov	r7, r1
 8020042:	f7e0 fdb1 	bl	8000ba8 <__aeabi_d2iz>
 8020046:	2200      	movs	r2, #0
 8020048:	9000      	str	r0, [sp, #0]
 802004a:	2300      	movs	r3, #0
 802004c:	4630      	mov	r0, r6
 802004e:	4639      	mov	r1, r7
 8020050:	f7e0 fd6c 	bl	8000b2c <__aeabi_dcmplt>
 8020054:	b150      	cbz	r0, 802006c <_dtoa_r+0x184>
 8020056:	9800      	ldr	r0, [sp, #0]
 8020058:	f7e0 fa8c 	bl	8000574 <__aeabi_i2d>
 802005c:	4632      	mov	r2, r6
 802005e:	463b      	mov	r3, r7
 8020060:	f7e0 fd5a 	bl	8000b18 <__aeabi_dcmpeq>
 8020064:	b910      	cbnz	r0, 802006c <_dtoa_r+0x184>
 8020066:	9b00      	ldr	r3, [sp, #0]
 8020068:	3b01      	subs	r3, #1
 802006a:	9300      	str	r3, [sp, #0]
 802006c:	9b00      	ldr	r3, [sp, #0]
 802006e:	2b16      	cmp	r3, #22
 8020070:	d85a      	bhi.n	8020128 <_dtoa_r+0x240>
 8020072:	9a00      	ldr	r2, [sp, #0]
 8020074:	4b57      	ldr	r3, [pc, #348]	; (80201d4 <_dtoa_r+0x2ec>)
 8020076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802007e:	ec51 0b19 	vmov	r0, r1, d9
 8020082:	f7e0 fd53 	bl	8000b2c <__aeabi_dcmplt>
 8020086:	2800      	cmp	r0, #0
 8020088:	d050      	beq.n	802012c <_dtoa_r+0x244>
 802008a:	9b00      	ldr	r3, [sp, #0]
 802008c:	3b01      	subs	r3, #1
 802008e:	9300      	str	r3, [sp, #0]
 8020090:	2300      	movs	r3, #0
 8020092:	930b      	str	r3, [sp, #44]	; 0x2c
 8020094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020096:	1b5d      	subs	r5, r3, r5
 8020098:	1e6b      	subs	r3, r5, #1
 802009a:	9305      	str	r3, [sp, #20]
 802009c:	bf45      	ittet	mi
 802009e:	f1c5 0301 	rsbmi	r3, r5, #1
 80200a2:	9304      	strmi	r3, [sp, #16]
 80200a4:	2300      	movpl	r3, #0
 80200a6:	2300      	movmi	r3, #0
 80200a8:	bf4c      	ite	mi
 80200aa:	9305      	strmi	r3, [sp, #20]
 80200ac:	9304      	strpl	r3, [sp, #16]
 80200ae:	9b00      	ldr	r3, [sp, #0]
 80200b0:	2b00      	cmp	r3, #0
 80200b2:	db3d      	blt.n	8020130 <_dtoa_r+0x248>
 80200b4:	9b05      	ldr	r3, [sp, #20]
 80200b6:	9a00      	ldr	r2, [sp, #0]
 80200b8:	920a      	str	r2, [sp, #40]	; 0x28
 80200ba:	4413      	add	r3, r2
 80200bc:	9305      	str	r3, [sp, #20]
 80200be:	2300      	movs	r3, #0
 80200c0:	9307      	str	r3, [sp, #28]
 80200c2:	9b06      	ldr	r3, [sp, #24]
 80200c4:	2b09      	cmp	r3, #9
 80200c6:	f200 8089 	bhi.w	80201dc <_dtoa_r+0x2f4>
 80200ca:	2b05      	cmp	r3, #5
 80200cc:	bfc4      	itt	gt
 80200ce:	3b04      	subgt	r3, #4
 80200d0:	9306      	strgt	r3, [sp, #24]
 80200d2:	9b06      	ldr	r3, [sp, #24]
 80200d4:	f1a3 0302 	sub.w	r3, r3, #2
 80200d8:	bfcc      	ite	gt
 80200da:	2500      	movgt	r5, #0
 80200dc:	2501      	movle	r5, #1
 80200de:	2b03      	cmp	r3, #3
 80200e0:	f200 8087 	bhi.w	80201f2 <_dtoa_r+0x30a>
 80200e4:	e8df f003 	tbb	[pc, r3]
 80200e8:	59383a2d 	.word	0x59383a2d
 80200ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80200f0:	441d      	add	r5, r3
 80200f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80200f6:	2b20      	cmp	r3, #32
 80200f8:	bfc1      	itttt	gt
 80200fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80200fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020102:	fa0b f303 	lslgt.w	r3, fp, r3
 8020106:	fa26 f000 	lsrgt.w	r0, r6, r0
 802010a:	bfda      	itte	le
 802010c:	f1c3 0320 	rsble	r3, r3, #32
 8020110:	fa06 f003 	lslle.w	r0, r6, r3
 8020114:	4318      	orrgt	r0, r3
 8020116:	f7e0 fa1d 	bl	8000554 <__aeabi_ui2d>
 802011a:	2301      	movs	r3, #1
 802011c:	4606      	mov	r6, r0
 802011e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020122:	3d01      	subs	r5, #1
 8020124:	930e      	str	r3, [sp, #56]	; 0x38
 8020126:	e76a      	b.n	801fffe <_dtoa_r+0x116>
 8020128:	2301      	movs	r3, #1
 802012a:	e7b2      	b.n	8020092 <_dtoa_r+0x1aa>
 802012c:	900b      	str	r0, [sp, #44]	; 0x2c
 802012e:	e7b1      	b.n	8020094 <_dtoa_r+0x1ac>
 8020130:	9b04      	ldr	r3, [sp, #16]
 8020132:	9a00      	ldr	r2, [sp, #0]
 8020134:	1a9b      	subs	r3, r3, r2
 8020136:	9304      	str	r3, [sp, #16]
 8020138:	4253      	negs	r3, r2
 802013a:	9307      	str	r3, [sp, #28]
 802013c:	2300      	movs	r3, #0
 802013e:	930a      	str	r3, [sp, #40]	; 0x28
 8020140:	e7bf      	b.n	80200c2 <_dtoa_r+0x1da>
 8020142:	2300      	movs	r3, #0
 8020144:	9308      	str	r3, [sp, #32]
 8020146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020148:	2b00      	cmp	r3, #0
 802014a:	dc55      	bgt.n	80201f8 <_dtoa_r+0x310>
 802014c:	2301      	movs	r3, #1
 802014e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020152:	461a      	mov	r2, r3
 8020154:	9209      	str	r2, [sp, #36]	; 0x24
 8020156:	e00c      	b.n	8020172 <_dtoa_r+0x28a>
 8020158:	2301      	movs	r3, #1
 802015a:	e7f3      	b.n	8020144 <_dtoa_r+0x25c>
 802015c:	2300      	movs	r3, #0
 802015e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020160:	9308      	str	r3, [sp, #32]
 8020162:	9b00      	ldr	r3, [sp, #0]
 8020164:	4413      	add	r3, r2
 8020166:	9302      	str	r3, [sp, #8]
 8020168:	3301      	adds	r3, #1
 802016a:	2b01      	cmp	r3, #1
 802016c:	9303      	str	r3, [sp, #12]
 802016e:	bfb8      	it	lt
 8020170:	2301      	movlt	r3, #1
 8020172:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020174:	2200      	movs	r2, #0
 8020176:	6042      	str	r2, [r0, #4]
 8020178:	2204      	movs	r2, #4
 802017a:	f102 0614 	add.w	r6, r2, #20
 802017e:	429e      	cmp	r6, r3
 8020180:	6841      	ldr	r1, [r0, #4]
 8020182:	d93d      	bls.n	8020200 <_dtoa_r+0x318>
 8020184:	4620      	mov	r0, r4
 8020186:	f000 fec9 	bl	8020f1c <_Balloc>
 802018a:	9001      	str	r0, [sp, #4]
 802018c:	2800      	cmp	r0, #0
 802018e:	d13b      	bne.n	8020208 <_dtoa_r+0x320>
 8020190:	4b11      	ldr	r3, [pc, #68]	; (80201d8 <_dtoa_r+0x2f0>)
 8020192:	4602      	mov	r2, r0
 8020194:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020198:	e6c0      	b.n	801ff1c <_dtoa_r+0x34>
 802019a:	2301      	movs	r3, #1
 802019c:	e7df      	b.n	802015e <_dtoa_r+0x276>
 802019e:	bf00      	nop
 80201a0:	636f4361 	.word	0x636f4361
 80201a4:	3fd287a7 	.word	0x3fd287a7
 80201a8:	8b60c8b3 	.word	0x8b60c8b3
 80201ac:	3fc68a28 	.word	0x3fc68a28
 80201b0:	509f79fb 	.word	0x509f79fb
 80201b4:	3fd34413 	.word	0x3fd34413
 80201b8:	080226a5 	.word	0x080226a5
 80201bc:	080226bc 	.word	0x080226bc
 80201c0:	7ff00000 	.word	0x7ff00000
 80201c4:	080226a1 	.word	0x080226a1
 80201c8:	08022698 	.word	0x08022698
 80201cc:	08022675 	.word	0x08022675
 80201d0:	3ff80000 	.word	0x3ff80000
 80201d4:	08022810 	.word	0x08022810
 80201d8:	08022717 	.word	0x08022717
 80201dc:	2501      	movs	r5, #1
 80201de:	2300      	movs	r3, #0
 80201e0:	9306      	str	r3, [sp, #24]
 80201e2:	9508      	str	r5, [sp, #32]
 80201e4:	f04f 33ff 	mov.w	r3, #4294967295
 80201e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80201ec:	2200      	movs	r2, #0
 80201ee:	2312      	movs	r3, #18
 80201f0:	e7b0      	b.n	8020154 <_dtoa_r+0x26c>
 80201f2:	2301      	movs	r3, #1
 80201f4:	9308      	str	r3, [sp, #32]
 80201f6:	e7f5      	b.n	80201e4 <_dtoa_r+0x2fc>
 80201f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80201fe:	e7b8      	b.n	8020172 <_dtoa_r+0x28a>
 8020200:	3101      	adds	r1, #1
 8020202:	6041      	str	r1, [r0, #4]
 8020204:	0052      	lsls	r2, r2, #1
 8020206:	e7b8      	b.n	802017a <_dtoa_r+0x292>
 8020208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802020a:	9a01      	ldr	r2, [sp, #4]
 802020c:	601a      	str	r2, [r3, #0]
 802020e:	9b03      	ldr	r3, [sp, #12]
 8020210:	2b0e      	cmp	r3, #14
 8020212:	f200 809d 	bhi.w	8020350 <_dtoa_r+0x468>
 8020216:	2d00      	cmp	r5, #0
 8020218:	f000 809a 	beq.w	8020350 <_dtoa_r+0x468>
 802021c:	9b00      	ldr	r3, [sp, #0]
 802021e:	2b00      	cmp	r3, #0
 8020220:	dd32      	ble.n	8020288 <_dtoa_r+0x3a0>
 8020222:	4ab7      	ldr	r2, [pc, #732]	; (8020500 <_dtoa_r+0x618>)
 8020224:	f003 030f 	and.w	r3, r3, #15
 8020228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802022c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020230:	9b00      	ldr	r3, [sp, #0]
 8020232:	05d8      	lsls	r0, r3, #23
 8020234:	ea4f 1723 	mov.w	r7, r3, asr #4
 8020238:	d516      	bpl.n	8020268 <_dtoa_r+0x380>
 802023a:	4bb2      	ldr	r3, [pc, #712]	; (8020504 <_dtoa_r+0x61c>)
 802023c:	ec51 0b19 	vmov	r0, r1, d9
 8020240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020244:	f7e0 fb2a 	bl	800089c <__aeabi_ddiv>
 8020248:	f007 070f 	and.w	r7, r7, #15
 802024c:	4682      	mov	sl, r0
 802024e:	468b      	mov	fp, r1
 8020250:	2503      	movs	r5, #3
 8020252:	4eac      	ldr	r6, [pc, #688]	; (8020504 <_dtoa_r+0x61c>)
 8020254:	b957      	cbnz	r7, 802026c <_dtoa_r+0x384>
 8020256:	4642      	mov	r2, r8
 8020258:	464b      	mov	r3, r9
 802025a:	4650      	mov	r0, sl
 802025c:	4659      	mov	r1, fp
 802025e:	f7e0 fb1d 	bl	800089c <__aeabi_ddiv>
 8020262:	4682      	mov	sl, r0
 8020264:	468b      	mov	fp, r1
 8020266:	e028      	b.n	80202ba <_dtoa_r+0x3d2>
 8020268:	2502      	movs	r5, #2
 802026a:	e7f2      	b.n	8020252 <_dtoa_r+0x36a>
 802026c:	07f9      	lsls	r1, r7, #31
 802026e:	d508      	bpl.n	8020282 <_dtoa_r+0x39a>
 8020270:	4640      	mov	r0, r8
 8020272:	4649      	mov	r1, r9
 8020274:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020278:	f7e0 f9e6 	bl	8000648 <__aeabi_dmul>
 802027c:	3501      	adds	r5, #1
 802027e:	4680      	mov	r8, r0
 8020280:	4689      	mov	r9, r1
 8020282:	107f      	asrs	r7, r7, #1
 8020284:	3608      	adds	r6, #8
 8020286:	e7e5      	b.n	8020254 <_dtoa_r+0x36c>
 8020288:	f000 809b 	beq.w	80203c2 <_dtoa_r+0x4da>
 802028c:	9b00      	ldr	r3, [sp, #0]
 802028e:	4f9d      	ldr	r7, [pc, #628]	; (8020504 <_dtoa_r+0x61c>)
 8020290:	425e      	negs	r6, r3
 8020292:	4b9b      	ldr	r3, [pc, #620]	; (8020500 <_dtoa_r+0x618>)
 8020294:	f006 020f 	and.w	r2, r6, #15
 8020298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202a0:	ec51 0b19 	vmov	r0, r1, d9
 80202a4:	f7e0 f9d0 	bl	8000648 <__aeabi_dmul>
 80202a8:	1136      	asrs	r6, r6, #4
 80202aa:	4682      	mov	sl, r0
 80202ac:	468b      	mov	fp, r1
 80202ae:	2300      	movs	r3, #0
 80202b0:	2502      	movs	r5, #2
 80202b2:	2e00      	cmp	r6, #0
 80202b4:	d17a      	bne.n	80203ac <_dtoa_r+0x4c4>
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d1d3      	bne.n	8020262 <_dtoa_r+0x37a>
 80202ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202bc:	2b00      	cmp	r3, #0
 80202be:	f000 8082 	beq.w	80203c6 <_dtoa_r+0x4de>
 80202c2:	4b91      	ldr	r3, [pc, #580]	; (8020508 <_dtoa_r+0x620>)
 80202c4:	2200      	movs	r2, #0
 80202c6:	4650      	mov	r0, sl
 80202c8:	4659      	mov	r1, fp
 80202ca:	f7e0 fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80202ce:	2800      	cmp	r0, #0
 80202d0:	d079      	beq.n	80203c6 <_dtoa_r+0x4de>
 80202d2:	9b03      	ldr	r3, [sp, #12]
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	d076      	beq.n	80203c6 <_dtoa_r+0x4de>
 80202d8:	9b02      	ldr	r3, [sp, #8]
 80202da:	2b00      	cmp	r3, #0
 80202dc:	dd36      	ble.n	802034c <_dtoa_r+0x464>
 80202de:	9b00      	ldr	r3, [sp, #0]
 80202e0:	4650      	mov	r0, sl
 80202e2:	4659      	mov	r1, fp
 80202e4:	1e5f      	subs	r7, r3, #1
 80202e6:	2200      	movs	r2, #0
 80202e8:	4b88      	ldr	r3, [pc, #544]	; (802050c <_dtoa_r+0x624>)
 80202ea:	f7e0 f9ad 	bl	8000648 <__aeabi_dmul>
 80202ee:	9e02      	ldr	r6, [sp, #8]
 80202f0:	4682      	mov	sl, r0
 80202f2:	468b      	mov	fp, r1
 80202f4:	3501      	adds	r5, #1
 80202f6:	4628      	mov	r0, r5
 80202f8:	f7e0 f93c 	bl	8000574 <__aeabi_i2d>
 80202fc:	4652      	mov	r2, sl
 80202fe:	465b      	mov	r3, fp
 8020300:	f7e0 f9a2 	bl	8000648 <__aeabi_dmul>
 8020304:	4b82      	ldr	r3, [pc, #520]	; (8020510 <_dtoa_r+0x628>)
 8020306:	2200      	movs	r2, #0
 8020308:	f7df ffe8 	bl	80002dc <__adddf3>
 802030c:	46d0      	mov	r8, sl
 802030e:	46d9      	mov	r9, fp
 8020310:	4682      	mov	sl, r0
 8020312:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020316:	2e00      	cmp	r6, #0
 8020318:	d158      	bne.n	80203cc <_dtoa_r+0x4e4>
 802031a:	4b7e      	ldr	r3, [pc, #504]	; (8020514 <_dtoa_r+0x62c>)
 802031c:	2200      	movs	r2, #0
 802031e:	4640      	mov	r0, r8
 8020320:	4649      	mov	r1, r9
 8020322:	f7df ffd9 	bl	80002d8 <__aeabi_dsub>
 8020326:	4652      	mov	r2, sl
 8020328:	465b      	mov	r3, fp
 802032a:	4680      	mov	r8, r0
 802032c:	4689      	mov	r9, r1
 802032e:	f7e0 fc1b 	bl	8000b68 <__aeabi_dcmpgt>
 8020332:	2800      	cmp	r0, #0
 8020334:	f040 8295 	bne.w	8020862 <_dtoa_r+0x97a>
 8020338:	4652      	mov	r2, sl
 802033a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802033e:	4640      	mov	r0, r8
 8020340:	4649      	mov	r1, r9
 8020342:	f7e0 fbf3 	bl	8000b2c <__aeabi_dcmplt>
 8020346:	2800      	cmp	r0, #0
 8020348:	f040 8289 	bne.w	802085e <_dtoa_r+0x976>
 802034c:	ec5b ab19 	vmov	sl, fp, d9
 8020350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020352:	2b00      	cmp	r3, #0
 8020354:	f2c0 8148 	blt.w	80205e8 <_dtoa_r+0x700>
 8020358:	9a00      	ldr	r2, [sp, #0]
 802035a:	2a0e      	cmp	r2, #14
 802035c:	f300 8144 	bgt.w	80205e8 <_dtoa_r+0x700>
 8020360:	4b67      	ldr	r3, [pc, #412]	; (8020500 <_dtoa_r+0x618>)
 8020362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020366:	e9d3 8900 	ldrd	r8, r9, [r3]
 802036a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802036c:	2b00      	cmp	r3, #0
 802036e:	f280 80d5 	bge.w	802051c <_dtoa_r+0x634>
 8020372:	9b03      	ldr	r3, [sp, #12]
 8020374:	2b00      	cmp	r3, #0
 8020376:	f300 80d1 	bgt.w	802051c <_dtoa_r+0x634>
 802037a:	f040 826f 	bne.w	802085c <_dtoa_r+0x974>
 802037e:	4b65      	ldr	r3, [pc, #404]	; (8020514 <_dtoa_r+0x62c>)
 8020380:	2200      	movs	r2, #0
 8020382:	4640      	mov	r0, r8
 8020384:	4649      	mov	r1, r9
 8020386:	f7e0 f95f 	bl	8000648 <__aeabi_dmul>
 802038a:	4652      	mov	r2, sl
 802038c:	465b      	mov	r3, fp
 802038e:	f7e0 fbe1 	bl	8000b54 <__aeabi_dcmpge>
 8020392:	9e03      	ldr	r6, [sp, #12]
 8020394:	4637      	mov	r7, r6
 8020396:	2800      	cmp	r0, #0
 8020398:	f040 8245 	bne.w	8020826 <_dtoa_r+0x93e>
 802039c:	9d01      	ldr	r5, [sp, #4]
 802039e:	2331      	movs	r3, #49	; 0x31
 80203a0:	f805 3b01 	strb.w	r3, [r5], #1
 80203a4:	9b00      	ldr	r3, [sp, #0]
 80203a6:	3301      	adds	r3, #1
 80203a8:	9300      	str	r3, [sp, #0]
 80203aa:	e240      	b.n	802082e <_dtoa_r+0x946>
 80203ac:	07f2      	lsls	r2, r6, #31
 80203ae:	d505      	bpl.n	80203bc <_dtoa_r+0x4d4>
 80203b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80203b4:	f7e0 f948 	bl	8000648 <__aeabi_dmul>
 80203b8:	3501      	adds	r5, #1
 80203ba:	2301      	movs	r3, #1
 80203bc:	1076      	asrs	r6, r6, #1
 80203be:	3708      	adds	r7, #8
 80203c0:	e777      	b.n	80202b2 <_dtoa_r+0x3ca>
 80203c2:	2502      	movs	r5, #2
 80203c4:	e779      	b.n	80202ba <_dtoa_r+0x3d2>
 80203c6:	9f00      	ldr	r7, [sp, #0]
 80203c8:	9e03      	ldr	r6, [sp, #12]
 80203ca:	e794      	b.n	80202f6 <_dtoa_r+0x40e>
 80203cc:	9901      	ldr	r1, [sp, #4]
 80203ce:	4b4c      	ldr	r3, [pc, #304]	; (8020500 <_dtoa_r+0x618>)
 80203d0:	4431      	add	r1, r6
 80203d2:	910d      	str	r1, [sp, #52]	; 0x34
 80203d4:	9908      	ldr	r1, [sp, #32]
 80203d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80203da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80203de:	2900      	cmp	r1, #0
 80203e0:	d043      	beq.n	802046a <_dtoa_r+0x582>
 80203e2:	494d      	ldr	r1, [pc, #308]	; (8020518 <_dtoa_r+0x630>)
 80203e4:	2000      	movs	r0, #0
 80203e6:	f7e0 fa59 	bl	800089c <__aeabi_ddiv>
 80203ea:	4652      	mov	r2, sl
 80203ec:	465b      	mov	r3, fp
 80203ee:	f7df ff73 	bl	80002d8 <__aeabi_dsub>
 80203f2:	9d01      	ldr	r5, [sp, #4]
 80203f4:	4682      	mov	sl, r0
 80203f6:	468b      	mov	fp, r1
 80203f8:	4649      	mov	r1, r9
 80203fa:	4640      	mov	r0, r8
 80203fc:	f7e0 fbd4 	bl	8000ba8 <__aeabi_d2iz>
 8020400:	4606      	mov	r6, r0
 8020402:	f7e0 f8b7 	bl	8000574 <__aeabi_i2d>
 8020406:	4602      	mov	r2, r0
 8020408:	460b      	mov	r3, r1
 802040a:	4640      	mov	r0, r8
 802040c:	4649      	mov	r1, r9
 802040e:	f7df ff63 	bl	80002d8 <__aeabi_dsub>
 8020412:	3630      	adds	r6, #48	; 0x30
 8020414:	f805 6b01 	strb.w	r6, [r5], #1
 8020418:	4652      	mov	r2, sl
 802041a:	465b      	mov	r3, fp
 802041c:	4680      	mov	r8, r0
 802041e:	4689      	mov	r9, r1
 8020420:	f7e0 fb84 	bl	8000b2c <__aeabi_dcmplt>
 8020424:	2800      	cmp	r0, #0
 8020426:	d163      	bne.n	80204f0 <_dtoa_r+0x608>
 8020428:	4642      	mov	r2, r8
 802042a:	464b      	mov	r3, r9
 802042c:	4936      	ldr	r1, [pc, #216]	; (8020508 <_dtoa_r+0x620>)
 802042e:	2000      	movs	r0, #0
 8020430:	f7df ff52 	bl	80002d8 <__aeabi_dsub>
 8020434:	4652      	mov	r2, sl
 8020436:	465b      	mov	r3, fp
 8020438:	f7e0 fb78 	bl	8000b2c <__aeabi_dcmplt>
 802043c:	2800      	cmp	r0, #0
 802043e:	f040 80b5 	bne.w	80205ac <_dtoa_r+0x6c4>
 8020442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020444:	429d      	cmp	r5, r3
 8020446:	d081      	beq.n	802034c <_dtoa_r+0x464>
 8020448:	4b30      	ldr	r3, [pc, #192]	; (802050c <_dtoa_r+0x624>)
 802044a:	2200      	movs	r2, #0
 802044c:	4650      	mov	r0, sl
 802044e:	4659      	mov	r1, fp
 8020450:	f7e0 f8fa 	bl	8000648 <__aeabi_dmul>
 8020454:	4b2d      	ldr	r3, [pc, #180]	; (802050c <_dtoa_r+0x624>)
 8020456:	4682      	mov	sl, r0
 8020458:	468b      	mov	fp, r1
 802045a:	4640      	mov	r0, r8
 802045c:	4649      	mov	r1, r9
 802045e:	2200      	movs	r2, #0
 8020460:	f7e0 f8f2 	bl	8000648 <__aeabi_dmul>
 8020464:	4680      	mov	r8, r0
 8020466:	4689      	mov	r9, r1
 8020468:	e7c6      	b.n	80203f8 <_dtoa_r+0x510>
 802046a:	4650      	mov	r0, sl
 802046c:	4659      	mov	r1, fp
 802046e:	f7e0 f8eb 	bl	8000648 <__aeabi_dmul>
 8020472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020474:	9d01      	ldr	r5, [sp, #4]
 8020476:	930f      	str	r3, [sp, #60]	; 0x3c
 8020478:	4682      	mov	sl, r0
 802047a:	468b      	mov	fp, r1
 802047c:	4649      	mov	r1, r9
 802047e:	4640      	mov	r0, r8
 8020480:	f7e0 fb92 	bl	8000ba8 <__aeabi_d2iz>
 8020484:	4606      	mov	r6, r0
 8020486:	f7e0 f875 	bl	8000574 <__aeabi_i2d>
 802048a:	3630      	adds	r6, #48	; 0x30
 802048c:	4602      	mov	r2, r0
 802048e:	460b      	mov	r3, r1
 8020490:	4640      	mov	r0, r8
 8020492:	4649      	mov	r1, r9
 8020494:	f7df ff20 	bl	80002d8 <__aeabi_dsub>
 8020498:	f805 6b01 	strb.w	r6, [r5], #1
 802049c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802049e:	429d      	cmp	r5, r3
 80204a0:	4680      	mov	r8, r0
 80204a2:	4689      	mov	r9, r1
 80204a4:	f04f 0200 	mov.w	r2, #0
 80204a8:	d124      	bne.n	80204f4 <_dtoa_r+0x60c>
 80204aa:	4b1b      	ldr	r3, [pc, #108]	; (8020518 <_dtoa_r+0x630>)
 80204ac:	4650      	mov	r0, sl
 80204ae:	4659      	mov	r1, fp
 80204b0:	f7df ff14 	bl	80002dc <__adddf3>
 80204b4:	4602      	mov	r2, r0
 80204b6:	460b      	mov	r3, r1
 80204b8:	4640      	mov	r0, r8
 80204ba:	4649      	mov	r1, r9
 80204bc:	f7e0 fb54 	bl	8000b68 <__aeabi_dcmpgt>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	d173      	bne.n	80205ac <_dtoa_r+0x6c4>
 80204c4:	4652      	mov	r2, sl
 80204c6:	465b      	mov	r3, fp
 80204c8:	4913      	ldr	r1, [pc, #76]	; (8020518 <_dtoa_r+0x630>)
 80204ca:	2000      	movs	r0, #0
 80204cc:	f7df ff04 	bl	80002d8 <__aeabi_dsub>
 80204d0:	4602      	mov	r2, r0
 80204d2:	460b      	mov	r3, r1
 80204d4:	4640      	mov	r0, r8
 80204d6:	4649      	mov	r1, r9
 80204d8:	f7e0 fb28 	bl	8000b2c <__aeabi_dcmplt>
 80204dc:	2800      	cmp	r0, #0
 80204de:	f43f af35 	beq.w	802034c <_dtoa_r+0x464>
 80204e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80204e4:	1e6b      	subs	r3, r5, #1
 80204e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80204e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80204ec:	2b30      	cmp	r3, #48	; 0x30
 80204ee:	d0f8      	beq.n	80204e2 <_dtoa_r+0x5fa>
 80204f0:	9700      	str	r7, [sp, #0]
 80204f2:	e049      	b.n	8020588 <_dtoa_r+0x6a0>
 80204f4:	4b05      	ldr	r3, [pc, #20]	; (802050c <_dtoa_r+0x624>)
 80204f6:	f7e0 f8a7 	bl	8000648 <__aeabi_dmul>
 80204fa:	4680      	mov	r8, r0
 80204fc:	4689      	mov	r9, r1
 80204fe:	e7bd      	b.n	802047c <_dtoa_r+0x594>
 8020500:	08022810 	.word	0x08022810
 8020504:	080227e8 	.word	0x080227e8
 8020508:	3ff00000 	.word	0x3ff00000
 802050c:	40240000 	.word	0x40240000
 8020510:	401c0000 	.word	0x401c0000
 8020514:	40140000 	.word	0x40140000
 8020518:	3fe00000 	.word	0x3fe00000
 802051c:	9d01      	ldr	r5, [sp, #4]
 802051e:	4656      	mov	r6, sl
 8020520:	465f      	mov	r7, fp
 8020522:	4642      	mov	r2, r8
 8020524:	464b      	mov	r3, r9
 8020526:	4630      	mov	r0, r6
 8020528:	4639      	mov	r1, r7
 802052a:	f7e0 f9b7 	bl	800089c <__aeabi_ddiv>
 802052e:	f7e0 fb3b 	bl	8000ba8 <__aeabi_d2iz>
 8020532:	4682      	mov	sl, r0
 8020534:	f7e0 f81e 	bl	8000574 <__aeabi_i2d>
 8020538:	4642      	mov	r2, r8
 802053a:	464b      	mov	r3, r9
 802053c:	f7e0 f884 	bl	8000648 <__aeabi_dmul>
 8020540:	4602      	mov	r2, r0
 8020542:	460b      	mov	r3, r1
 8020544:	4630      	mov	r0, r6
 8020546:	4639      	mov	r1, r7
 8020548:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802054c:	f7df fec4 	bl	80002d8 <__aeabi_dsub>
 8020550:	f805 6b01 	strb.w	r6, [r5], #1
 8020554:	9e01      	ldr	r6, [sp, #4]
 8020556:	9f03      	ldr	r7, [sp, #12]
 8020558:	1bae      	subs	r6, r5, r6
 802055a:	42b7      	cmp	r7, r6
 802055c:	4602      	mov	r2, r0
 802055e:	460b      	mov	r3, r1
 8020560:	d135      	bne.n	80205ce <_dtoa_r+0x6e6>
 8020562:	f7df febb 	bl	80002dc <__adddf3>
 8020566:	4642      	mov	r2, r8
 8020568:	464b      	mov	r3, r9
 802056a:	4606      	mov	r6, r0
 802056c:	460f      	mov	r7, r1
 802056e:	f7e0 fafb 	bl	8000b68 <__aeabi_dcmpgt>
 8020572:	b9d0      	cbnz	r0, 80205aa <_dtoa_r+0x6c2>
 8020574:	4642      	mov	r2, r8
 8020576:	464b      	mov	r3, r9
 8020578:	4630      	mov	r0, r6
 802057a:	4639      	mov	r1, r7
 802057c:	f7e0 facc 	bl	8000b18 <__aeabi_dcmpeq>
 8020580:	b110      	cbz	r0, 8020588 <_dtoa_r+0x6a0>
 8020582:	f01a 0f01 	tst.w	sl, #1
 8020586:	d110      	bne.n	80205aa <_dtoa_r+0x6c2>
 8020588:	4620      	mov	r0, r4
 802058a:	ee18 1a10 	vmov	r1, s16
 802058e:	f000 fd05 	bl	8020f9c <_Bfree>
 8020592:	2300      	movs	r3, #0
 8020594:	9800      	ldr	r0, [sp, #0]
 8020596:	702b      	strb	r3, [r5, #0]
 8020598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802059a:	3001      	adds	r0, #1
 802059c:	6018      	str	r0, [r3, #0]
 802059e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	f43f acf1 	beq.w	801ff88 <_dtoa_r+0xa0>
 80205a6:	601d      	str	r5, [r3, #0]
 80205a8:	e4ee      	b.n	801ff88 <_dtoa_r+0xa0>
 80205aa:	9f00      	ldr	r7, [sp, #0]
 80205ac:	462b      	mov	r3, r5
 80205ae:	461d      	mov	r5, r3
 80205b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80205b4:	2a39      	cmp	r2, #57	; 0x39
 80205b6:	d106      	bne.n	80205c6 <_dtoa_r+0x6de>
 80205b8:	9a01      	ldr	r2, [sp, #4]
 80205ba:	429a      	cmp	r2, r3
 80205bc:	d1f7      	bne.n	80205ae <_dtoa_r+0x6c6>
 80205be:	9901      	ldr	r1, [sp, #4]
 80205c0:	2230      	movs	r2, #48	; 0x30
 80205c2:	3701      	adds	r7, #1
 80205c4:	700a      	strb	r2, [r1, #0]
 80205c6:	781a      	ldrb	r2, [r3, #0]
 80205c8:	3201      	adds	r2, #1
 80205ca:	701a      	strb	r2, [r3, #0]
 80205cc:	e790      	b.n	80204f0 <_dtoa_r+0x608>
 80205ce:	4ba6      	ldr	r3, [pc, #664]	; (8020868 <_dtoa_r+0x980>)
 80205d0:	2200      	movs	r2, #0
 80205d2:	f7e0 f839 	bl	8000648 <__aeabi_dmul>
 80205d6:	2200      	movs	r2, #0
 80205d8:	2300      	movs	r3, #0
 80205da:	4606      	mov	r6, r0
 80205dc:	460f      	mov	r7, r1
 80205de:	f7e0 fa9b 	bl	8000b18 <__aeabi_dcmpeq>
 80205e2:	2800      	cmp	r0, #0
 80205e4:	d09d      	beq.n	8020522 <_dtoa_r+0x63a>
 80205e6:	e7cf      	b.n	8020588 <_dtoa_r+0x6a0>
 80205e8:	9a08      	ldr	r2, [sp, #32]
 80205ea:	2a00      	cmp	r2, #0
 80205ec:	f000 80d7 	beq.w	802079e <_dtoa_r+0x8b6>
 80205f0:	9a06      	ldr	r2, [sp, #24]
 80205f2:	2a01      	cmp	r2, #1
 80205f4:	f300 80ba 	bgt.w	802076c <_dtoa_r+0x884>
 80205f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80205fa:	2a00      	cmp	r2, #0
 80205fc:	f000 80b2 	beq.w	8020764 <_dtoa_r+0x87c>
 8020600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020604:	9e07      	ldr	r6, [sp, #28]
 8020606:	9d04      	ldr	r5, [sp, #16]
 8020608:	9a04      	ldr	r2, [sp, #16]
 802060a:	441a      	add	r2, r3
 802060c:	9204      	str	r2, [sp, #16]
 802060e:	9a05      	ldr	r2, [sp, #20]
 8020610:	2101      	movs	r1, #1
 8020612:	441a      	add	r2, r3
 8020614:	4620      	mov	r0, r4
 8020616:	9205      	str	r2, [sp, #20]
 8020618:	f000 fd78 	bl	802110c <__i2b>
 802061c:	4607      	mov	r7, r0
 802061e:	2d00      	cmp	r5, #0
 8020620:	dd0c      	ble.n	802063c <_dtoa_r+0x754>
 8020622:	9b05      	ldr	r3, [sp, #20]
 8020624:	2b00      	cmp	r3, #0
 8020626:	dd09      	ble.n	802063c <_dtoa_r+0x754>
 8020628:	42ab      	cmp	r3, r5
 802062a:	9a04      	ldr	r2, [sp, #16]
 802062c:	bfa8      	it	ge
 802062e:	462b      	movge	r3, r5
 8020630:	1ad2      	subs	r2, r2, r3
 8020632:	9204      	str	r2, [sp, #16]
 8020634:	9a05      	ldr	r2, [sp, #20]
 8020636:	1aed      	subs	r5, r5, r3
 8020638:	1ad3      	subs	r3, r2, r3
 802063a:	9305      	str	r3, [sp, #20]
 802063c:	9b07      	ldr	r3, [sp, #28]
 802063e:	b31b      	cbz	r3, 8020688 <_dtoa_r+0x7a0>
 8020640:	9b08      	ldr	r3, [sp, #32]
 8020642:	2b00      	cmp	r3, #0
 8020644:	f000 80af 	beq.w	80207a6 <_dtoa_r+0x8be>
 8020648:	2e00      	cmp	r6, #0
 802064a:	dd13      	ble.n	8020674 <_dtoa_r+0x78c>
 802064c:	4639      	mov	r1, r7
 802064e:	4632      	mov	r2, r6
 8020650:	4620      	mov	r0, r4
 8020652:	f000 fe1b 	bl	802128c <__pow5mult>
 8020656:	ee18 2a10 	vmov	r2, s16
 802065a:	4601      	mov	r1, r0
 802065c:	4607      	mov	r7, r0
 802065e:	4620      	mov	r0, r4
 8020660:	f000 fd6a 	bl	8021138 <__multiply>
 8020664:	ee18 1a10 	vmov	r1, s16
 8020668:	4680      	mov	r8, r0
 802066a:	4620      	mov	r0, r4
 802066c:	f000 fc96 	bl	8020f9c <_Bfree>
 8020670:	ee08 8a10 	vmov	s16, r8
 8020674:	9b07      	ldr	r3, [sp, #28]
 8020676:	1b9a      	subs	r2, r3, r6
 8020678:	d006      	beq.n	8020688 <_dtoa_r+0x7a0>
 802067a:	ee18 1a10 	vmov	r1, s16
 802067e:	4620      	mov	r0, r4
 8020680:	f000 fe04 	bl	802128c <__pow5mult>
 8020684:	ee08 0a10 	vmov	s16, r0
 8020688:	2101      	movs	r1, #1
 802068a:	4620      	mov	r0, r4
 802068c:	f000 fd3e 	bl	802110c <__i2b>
 8020690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020692:	2b00      	cmp	r3, #0
 8020694:	4606      	mov	r6, r0
 8020696:	f340 8088 	ble.w	80207aa <_dtoa_r+0x8c2>
 802069a:	461a      	mov	r2, r3
 802069c:	4601      	mov	r1, r0
 802069e:	4620      	mov	r0, r4
 80206a0:	f000 fdf4 	bl	802128c <__pow5mult>
 80206a4:	9b06      	ldr	r3, [sp, #24]
 80206a6:	2b01      	cmp	r3, #1
 80206a8:	4606      	mov	r6, r0
 80206aa:	f340 8081 	ble.w	80207b0 <_dtoa_r+0x8c8>
 80206ae:	f04f 0800 	mov.w	r8, #0
 80206b2:	6933      	ldr	r3, [r6, #16]
 80206b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80206b8:	6918      	ldr	r0, [r3, #16]
 80206ba:	f000 fcd7 	bl	802106c <__hi0bits>
 80206be:	f1c0 0020 	rsb	r0, r0, #32
 80206c2:	9b05      	ldr	r3, [sp, #20]
 80206c4:	4418      	add	r0, r3
 80206c6:	f010 001f 	ands.w	r0, r0, #31
 80206ca:	f000 8092 	beq.w	80207f2 <_dtoa_r+0x90a>
 80206ce:	f1c0 0320 	rsb	r3, r0, #32
 80206d2:	2b04      	cmp	r3, #4
 80206d4:	f340 808a 	ble.w	80207ec <_dtoa_r+0x904>
 80206d8:	f1c0 001c 	rsb	r0, r0, #28
 80206dc:	9b04      	ldr	r3, [sp, #16]
 80206de:	4403      	add	r3, r0
 80206e0:	9304      	str	r3, [sp, #16]
 80206e2:	9b05      	ldr	r3, [sp, #20]
 80206e4:	4403      	add	r3, r0
 80206e6:	4405      	add	r5, r0
 80206e8:	9305      	str	r3, [sp, #20]
 80206ea:	9b04      	ldr	r3, [sp, #16]
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	dd07      	ble.n	8020700 <_dtoa_r+0x818>
 80206f0:	ee18 1a10 	vmov	r1, s16
 80206f4:	461a      	mov	r2, r3
 80206f6:	4620      	mov	r0, r4
 80206f8:	f000 fe22 	bl	8021340 <__lshift>
 80206fc:	ee08 0a10 	vmov	s16, r0
 8020700:	9b05      	ldr	r3, [sp, #20]
 8020702:	2b00      	cmp	r3, #0
 8020704:	dd05      	ble.n	8020712 <_dtoa_r+0x82a>
 8020706:	4631      	mov	r1, r6
 8020708:	461a      	mov	r2, r3
 802070a:	4620      	mov	r0, r4
 802070c:	f000 fe18 	bl	8021340 <__lshift>
 8020710:	4606      	mov	r6, r0
 8020712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020714:	2b00      	cmp	r3, #0
 8020716:	d06e      	beq.n	80207f6 <_dtoa_r+0x90e>
 8020718:	ee18 0a10 	vmov	r0, s16
 802071c:	4631      	mov	r1, r6
 802071e:	f000 fe7f 	bl	8021420 <__mcmp>
 8020722:	2800      	cmp	r0, #0
 8020724:	da67      	bge.n	80207f6 <_dtoa_r+0x90e>
 8020726:	9b00      	ldr	r3, [sp, #0]
 8020728:	3b01      	subs	r3, #1
 802072a:	ee18 1a10 	vmov	r1, s16
 802072e:	9300      	str	r3, [sp, #0]
 8020730:	220a      	movs	r2, #10
 8020732:	2300      	movs	r3, #0
 8020734:	4620      	mov	r0, r4
 8020736:	f000 fc53 	bl	8020fe0 <__multadd>
 802073a:	9b08      	ldr	r3, [sp, #32]
 802073c:	ee08 0a10 	vmov	s16, r0
 8020740:	2b00      	cmp	r3, #0
 8020742:	f000 81b1 	beq.w	8020aa8 <_dtoa_r+0xbc0>
 8020746:	2300      	movs	r3, #0
 8020748:	4639      	mov	r1, r7
 802074a:	220a      	movs	r2, #10
 802074c:	4620      	mov	r0, r4
 802074e:	f000 fc47 	bl	8020fe0 <__multadd>
 8020752:	9b02      	ldr	r3, [sp, #8]
 8020754:	2b00      	cmp	r3, #0
 8020756:	4607      	mov	r7, r0
 8020758:	f300 808e 	bgt.w	8020878 <_dtoa_r+0x990>
 802075c:	9b06      	ldr	r3, [sp, #24]
 802075e:	2b02      	cmp	r3, #2
 8020760:	dc51      	bgt.n	8020806 <_dtoa_r+0x91e>
 8020762:	e089      	b.n	8020878 <_dtoa_r+0x990>
 8020764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802076a:	e74b      	b.n	8020604 <_dtoa_r+0x71c>
 802076c:	9b03      	ldr	r3, [sp, #12]
 802076e:	1e5e      	subs	r6, r3, #1
 8020770:	9b07      	ldr	r3, [sp, #28]
 8020772:	42b3      	cmp	r3, r6
 8020774:	bfbf      	itttt	lt
 8020776:	9b07      	ldrlt	r3, [sp, #28]
 8020778:	9607      	strlt	r6, [sp, #28]
 802077a:	1af2      	sublt	r2, r6, r3
 802077c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802077e:	bfb6      	itet	lt
 8020780:	189b      	addlt	r3, r3, r2
 8020782:	1b9e      	subge	r6, r3, r6
 8020784:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020786:	9b03      	ldr	r3, [sp, #12]
 8020788:	bfb8      	it	lt
 802078a:	2600      	movlt	r6, #0
 802078c:	2b00      	cmp	r3, #0
 802078e:	bfb7      	itett	lt
 8020790:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8020794:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8020798:	1a9d      	sublt	r5, r3, r2
 802079a:	2300      	movlt	r3, #0
 802079c:	e734      	b.n	8020608 <_dtoa_r+0x720>
 802079e:	9e07      	ldr	r6, [sp, #28]
 80207a0:	9d04      	ldr	r5, [sp, #16]
 80207a2:	9f08      	ldr	r7, [sp, #32]
 80207a4:	e73b      	b.n	802061e <_dtoa_r+0x736>
 80207a6:	9a07      	ldr	r2, [sp, #28]
 80207a8:	e767      	b.n	802067a <_dtoa_r+0x792>
 80207aa:	9b06      	ldr	r3, [sp, #24]
 80207ac:	2b01      	cmp	r3, #1
 80207ae:	dc18      	bgt.n	80207e2 <_dtoa_r+0x8fa>
 80207b0:	f1ba 0f00 	cmp.w	sl, #0
 80207b4:	d115      	bne.n	80207e2 <_dtoa_r+0x8fa>
 80207b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80207ba:	b993      	cbnz	r3, 80207e2 <_dtoa_r+0x8fa>
 80207bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80207c0:	0d1b      	lsrs	r3, r3, #20
 80207c2:	051b      	lsls	r3, r3, #20
 80207c4:	b183      	cbz	r3, 80207e8 <_dtoa_r+0x900>
 80207c6:	9b04      	ldr	r3, [sp, #16]
 80207c8:	3301      	adds	r3, #1
 80207ca:	9304      	str	r3, [sp, #16]
 80207cc:	9b05      	ldr	r3, [sp, #20]
 80207ce:	3301      	adds	r3, #1
 80207d0:	9305      	str	r3, [sp, #20]
 80207d2:	f04f 0801 	mov.w	r8, #1
 80207d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207d8:	2b00      	cmp	r3, #0
 80207da:	f47f af6a 	bne.w	80206b2 <_dtoa_r+0x7ca>
 80207de:	2001      	movs	r0, #1
 80207e0:	e76f      	b.n	80206c2 <_dtoa_r+0x7da>
 80207e2:	f04f 0800 	mov.w	r8, #0
 80207e6:	e7f6      	b.n	80207d6 <_dtoa_r+0x8ee>
 80207e8:	4698      	mov	r8, r3
 80207ea:	e7f4      	b.n	80207d6 <_dtoa_r+0x8ee>
 80207ec:	f43f af7d 	beq.w	80206ea <_dtoa_r+0x802>
 80207f0:	4618      	mov	r0, r3
 80207f2:	301c      	adds	r0, #28
 80207f4:	e772      	b.n	80206dc <_dtoa_r+0x7f4>
 80207f6:	9b03      	ldr	r3, [sp, #12]
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	dc37      	bgt.n	802086c <_dtoa_r+0x984>
 80207fc:	9b06      	ldr	r3, [sp, #24]
 80207fe:	2b02      	cmp	r3, #2
 8020800:	dd34      	ble.n	802086c <_dtoa_r+0x984>
 8020802:	9b03      	ldr	r3, [sp, #12]
 8020804:	9302      	str	r3, [sp, #8]
 8020806:	9b02      	ldr	r3, [sp, #8]
 8020808:	b96b      	cbnz	r3, 8020826 <_dtoa_r+0x93e>
 802080a:	4631      	mov	r1, r6
 802080c:	2205      	movs	r2, #5
 802080e:	4620      	mov	r0, r4
 8020810:	f000 fbe6 	bl	8020fe0 <__multadd>
 8020814:	4601      	mov	r1, r0
 8020816:	4606      	mov	r6, r0
 8020818:	ee18 0a10 	vmov	r0, s16
 802081c:	f000 fe00 	bl	8021420 <__mcmp>
 8020820:	2800      	cmp	r0, #0
 8020822:	f73f adbb 	bgt.w	802039c <_dtoa_r+0x4b4>
 8020826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020828:	9d01      	ldr	r5, [sp, #4]
 802082a:	43db      	mvns	r3, r3
 802082c:	9300      	str	r3, [sp, #0]
 802082e:	f04f 0800 	mov.w	r8, #0
 8020832:	4631      	mov	r1, r6
 8020834:	4620      	mov	r0, r4
 8020836:	f000 fbb1 	bl	8020f9c <_Bfree>
 802083a:	2f00      	cmp	r7, #0
 802083c:	f43f aea4 	beq.w	8020588 <_dtoa_r+0x6a0>
 8020840:	f1b8 0f00 	cmp.w	r8, #0
 8020844:	d005      	beq.n	8020852 <_dtoa_r+0x96a>
 8020846:	45b8      	cmp	r8, r7
 8020848:	d003      	beq.n	8020852 <_dtoa_r+0x96a>
 802084a:	4641      	mov	r1, r8
 802084c:	4620      	mov	r0, r4
 802084e:	f000 fba5 	bl	8020f9c <_Bfree>
 8020852:	4639      	mov	r1, r7
 8020854:	4620      	mov	r0, r4
 8020856:	f000 fba1 	bl	8020f9c <_Bfree>
 802085a:	e695      	b.n	8020588 <_dtoa_r+0x6a0>
 802085c:	2600      	movs	r6, #0
 802085e:	4637      	mov	r7, r6
 8020860:	e7e1      	b.n	8020826 <_dtoa_r+0x93e>
 8020862:	9700      	str	r7, [sp, #0]
 8020864:	4637      	mov	r7, r6
 8020866:	e599      	b.n	802039c <_dtoa_r+0x4b4>
 8020868:	40240000 	.word	0x40240000
 802086c:	9b08      	ldr	r3, [sp, #32]
 802086e:	2b00      	cmp	r3, #0
 8020870:	f000 80ca 	beq.w	8020a08 <_dtoa_r+0xb20>
 8020874:	9b03      	ldr	r3, [sp, #12]
 8020876:	9302      	str	r3, [sp, #8]
 8020878:	2d00      	cmp	r5, #0
 802087a:	dd05      	ble.n	8020888 <_dtoa_r+0x9a0>
 802087c:	4639      	mov	r1, r7
 802087e:	462a      	mov	r2, r5
 8020880:	4620      	mov	r0, r4
 8020882:	f000 fd5d 	bl	8021340 <__lshift>
 8020886:	4607      	mov	r7, r0
 8020888:	f1b8 0f00 	cmp.w	r8, #0
 802088c:	d05b      	beq.n	8020946 <_dtoa_r+0xa5e>
 802088e:	6879      	ldr	r1, [r7, #4]
 8020890:	4620      	mov	r0, r4
 8020892:	f000 fb43 	bl	8020f1c <_Balloc>
 8020896:	4605      	mov	r5, r0
 8020898:	b928      	cbnz	r0, 80208a6 <_dtoa_r+0x9be>
 802089a:	4b87      	ldr	r3, [pc, #540]	; (8020ab8 <_dtoa_r+0xbd0>)
 802089c:	4602      	mov	r2, r0
 802089e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80208a2:	f7ff bb3b 	b.w	801ff1c <_dtoa_r+0x34>
 80208a6:	693a      	ldr	r2, [r7, #16]
 80208a8:	3202      	adds	r2, #2
 80208aa:	0092      	lsls	r2, r2, #2
 80208ac:	f107 010c 	add.w	r1, r7, #12
 80208b0:	300c      	adds	r0, #12
 80208b2:	f7fe fca9 	bl	801f208 <memcpy>
 80208b6:	2201      	movs	r2, #1
 80208b8:	4629      	mov	r1, r5
 80208ba:	4620      	mov	r0, r4
 80208bc:	f000 fd40 	bl	8021340 <__lshift>
 80208c0:	9b01      	ldr	r3, [sp, #4]
 80208c2:	f103 0901 	add.w	r9, r3, #1
 80208c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80208ca:	4413      	add	r3, r2
 80208cc:	9305      	str	r3, [sp, #20]
 80208ce:	f00a 0301 	and.w	r3, sl, #1
 80208d2:	46b8      	mov	r8, r7
 80208d4:	9304      	str	r3, [sp, #16]
 80208d6:	4607      	mov	r7, r0
 80208d8:	4631      	mov	r1, r6
 80208da:	ee18 0a10 	vmov	r0, s16
 80208de:	f7ff fa77 	bl	801fdd0 <quorem>
 80208e2:	4641      	mov	r1, r8
 80208e4:	9002      	str	r0, [sp, #8]
 80208e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80208ea:	ee18 0a10 	vmov	r0, s16
 80208ee:	f000 fd97 	bl	8021420 <__mcmp>
 80208f2:	463a      	mov	r2, r7
 80208f4:	9003      	str	r0, [sp, #12]
 80208f6:	4631      	mov	r1, r6
 80208f8:	4620      	mov	r0, r4
 80208fa:	f000 fdad 	bl	8021458 <__mdiff>
 80208fe:	68c2      	ldr	r2, [r0, #12]
 8020900:	f109 3bff 	add.w	fp, r9, #4294967295
 8020904:	4605      	mov	r5, r0
 8020906:	bb02      	cbnz	r2, 802094a <_dtoa_r+0xa62>
 8020908:	4601      	mov	r1, r0
 802090a:	ee18 0a10 	vmov	r0, s16
 802090e:	f000 fd87 	bl	8021420 <__mcmp>
 8020912:	4602      	mov	r2, r0
 8020914:	4629      	mov	r1, r5
 8020916:	4620      	mov	r0, r4
 8020918:	9207      	str	r2, [sp, #28]
 802091a:	f000 fb3f 	bl	8020f9c <_Bfree>
 802091e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020922:	ea43 0102 	orr.w	r1, r3, r2
 8020926:	9b04      	ldr	r3, [sp, #16]
 8020928:	430b      	orrs	r3, r1
 802092a:	464d      	mov	r5, r9
 802092c:	d10f      	bne.n	802094e <_dtoa_r+0xa66>
 802092e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020932:	d02a      	beq.n	802098a <_dtoa_r+0xaa2>
 8020934:	9b03      	ldr	r3, [sp, #12]
 8020936:	2b00      	cmp	r3, #0
 8020938:	dd02      	ble.n	8020940 <_dtoa_r+0xa58>
 802093a:	9b02      	ldr	r3, [sp, #8]
 802093c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020940:	f88b a000 	strb.w	sl, [fp]
 8020944:	e775      	b.n	8020832 <_dtoa_r+0x94a>
 8020946:	4638      	mov	r0, r7
 8020948:	e7ba      	b.n	80208c0 <_dtoa_r+0x9d8>
 802094a:	2201      	movs	r2, #1
 802094c:	e7e2      	b.n	8020914 <_dtoa_r+0xa2c>
 802094e:	9b03      	ldr	r3, [sp, #12]
 8020950:	2b00      	cmp	r3, #0
 8020952:	db04      	blt.n	802095e <_dtoa_r+0xa76>
 8020954:	9906      	ldr	r1, [sp, #24]
 8020956:	430b      	orrs	r3, r1
 8020958:	9904      	ldr	r1, [sp, #16]
 802095a:	430b      	orrs	r3, r1
 802095c:	d122      	bne.n	80209a4 <_dtoa_r+0xabc>
 802095e:	2a00      	cmp	r2, #0
 8020960:	ddee      	ble.n	8020940 <_dtoa_r+0xa58>
 8020962:	ee18 1a10 	vmov	r1, s16
 8020966:	2201      	movs	r2, #1
 8020968:	4620      	mov	r0, r4
 802096a:	f000 fce9 	bl	8021340 <__lshift>
 802096e:	4631      	mov	r1, r6
 8020970:	ee08 0a10 	vmov	s16, r0
 8020974:	f000 fd54 	bl	8021420 <__mcmp>
 8020978:	2800      	cmp	r0, #0
 802097a:	dc03      	bgt.n	8020984 <_dtoa_r+0xa9c>
 802097c:	d1e0      	bne.n	8020940 <_dtoa_r+0xa58>
 802097e:	f01a 0f01 	tst.w	sl, #1
 8020982:	d0dd      	beq.n	8020940 <_dtoa_r+0xa58>
 8020984:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020988:	d1d7      	bne.n	802093a <_dtoa_r+0xa52>
 802098a:	2339      	movs	r3, #57	; 0x39
 802098c:	f88b 3000 	strb.w	r3, [fp]
 8020990:	462b      	mov	r3, r5
 8020992:	461d      	mov	r5, r3
 8020994:	3b01      	subs	r3, #1
 8020996:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802099a:	2a39      	cmp	r2, #57	; 0x39
 802099c:	d071      	beq.n	8020a82 <_dtoa_r+0xb9a>
 802099e:	3201      	adds	r2, #1
 80209a0:	701a      	strb	r2, [r3, #0]
 80209a2:	e746      	b.n	8020832 <_dtoa_r+0x94a>
 80209a4:	2a00      	cmp	r2, #0
 80209a6:	dd07      	ble.n	80209b8 <_dtoa_r+0xad0>
 80209a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80209ac:	d0ed      	beq.n	802098a <_dtoa_r+0xaa2>
 80209ae:	f10a 0301 	add.w	r3, sl, #1
 80209b2:	f88b 3000 	strb.w	r3, [fp]
 80209b6:	e73c      	b.n	8020832 <_dtoa_r+0x94a>
 80209b8:	9b05      	ldr	r3, [sp, #20]
 80209ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80209be:	4599      	cmp	r9, r3
 80209c0:	d047      	beq.n	8020a52 <_dtoa_r+0xb6a>
 80209c2:	ee18 1a10 	vmov	r1, s16
 80209c6:	2300      	movs	r3, #0
 80209c8:	220a      	movs	r2, #10
 80209ca:	4620      	mov	r0, r4
 80209cc:	f000 fb08 	bl	8020fe0 <__multadd>
 80209d0:	45b8      	cmp	r8, r7
 80209d2:	ee08 0a10 	vmov	s16, r0
 80209d6:	f04f 0300 	mov.w	r3, #0
 80209da:	f04f 020a 	mov.w	r2, #10
 80209de:	4641      	mov	r1, r8
 80209e0:	4620      	mov	r0, r4
 80209e2:	d106      	bne.n	80209f2 <_dtoa_r+0xb0a>
 80209e4:	f000 fafc 	bl	8020fe0 <__multadd>
 80209e8:	4680      	mov	r8, r0
 80209ea:	4607      	mov	r7, r0
 80209ec:	f109 0901 	add.w	r9, r9, #1
 80209f0:	e772      	b.n	80208d8 <_dtoa_r+0x9f0>
 80209f2:	f000 faf5 	bl	8020fe0 <__multadd>
 80209f6:	4639      	mov	r1, r7
 80209f8:	4680      	mov	r8, r0
 80209fa:	2300      	movs	r3, #0
 80209fc:	220a      	movs	r2, #10
 80209fe:	4620      	mov	r0, r4
 8020a00:	f000 faee 	bl	8020fe0 <__multadd>
 8020a04:	4607      	mov	r7, r0
 8020a06:	e7f1      	b.n	80209ec <_dtoa_r+0xb04>
 8020a08:	9b03      	ldr	r3, [sp, #12]
 8020a0a:	9302      	str	r3, [sp, #8]
 8020a0c:	9d01      	ldr	r5, [sp, #4]
 8020a0e:	ee18 0a10 	vmov	r0, s16
 8020a12:	4631      	mov	r1, r6
 8020a14:	f7ff f9dc 	bl	801fdd0 <quorem>
 8020a18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020a1c:	9b01      	ldr	r3, [sp, #4]
 8020a1e:	f805 ab01 	strb.w	sl, [r5], #1
 8020a22:	1aea      	subs	r2, r5, r3
 8020a24:	9b02      	ldr	r3, [sp, #8]
 8020a26:	4293      	cmp	r3, r2
 8020a28:	dd09      	ble.n	8020a3e <_dtoa_r+0xb56>
 8020a2a:	ee18 1a10 	vmov	r1, s16
 8020a2e:	2300      	movs	r3, #0
 8020a30:	220a      	movs	r2, #10
 8020a32:	4620      	mov	r0, r4
 8020a34:	f000 fad4 	bl	8020fe0 <__multadd>
 8020a38:	ee08 0a10 	vmov	s16, r0
 8020a3c:	e7e7      	b.n	8020a0e <_dtoa_r+0xb26>
 8020a3e:	9b02      	ldr	r3, [sp, #8]
 8020a40:	2b00      	cmp	r3, #0
 8020a42:	bfc8      	it	gt
 8020a44:	461d      	movgt	r5, r3
 8020a46:	9b01      	ldr	r3, [sp, #4]
 8020a48:	bfd8      	it	le
 8020a4a:	2501      	movle	r5, #1
 8020a4c:	441d      	add	r5, r3
 8020a4e:	f04f 0800 	mov.w	r8, #0
 8020a52:	ee18 1a10 	vmov	r1, s16
 8020a56:	2201      	movs	r2, #1
 8020a58:	4620      	mov	r0, r4
 8020a5a:	f000 fc71 	bl	8021340 <__lshift>
 8020a5e:	4631      	mov	r1, r6
 8020a60:	ee08 0a10 	vmov	s16, r0
 8020a64:	f000 fcdc 	bl	8021420 <__mcmp>
 8020a68:	2800      	cmp	r0, #0
 8020a6a:	dc91      	bgt.n	8020990 <_dtoa_r+0xaa8>
 8020a6c:	d102      	bne.n	8020a74 <_dtoa_r+0xb8c>
 8020a6e:	f01a 0f01 	tst.w	sl, #1
 8020a72:	d18d      	bne.n	8020990 <_dtoa_r+0xaa8>
 8020a74:	462b      	mov	r3, r5
 8020a76:	461d      	mov	r5, r3
 8020a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020a7c:	2a30      	cmp	r2, #48	; 0x30
 8020a7e:	d0fa      	beq.n	8020a76 <_dtoa_r+0xb8e>
 8020a80:	e6d7      	b.n	8020832 <_dtoa_r+0x94a>
 8020a82:	9a01      	ldr	r2, [sp, #4]
 8020a84:	429a      	cmp	r2, r3
 8020a86:	d184      	bne.n	8020992 <_dtoa_r+0xaaa>
 8020a88:	9b00      	ldr	r3, [sp, #0]
 8020a8a:	3301      	adds	r3, #1
 8020a8c:	9300      	str	r3, [sp, #0]
 8020a8e:	2331      	movs	r3, #49	; 0x31
 8020a90:	7013      	strb	r3, [r2, #0]
 8020a92:	e6ce      	b.n	8020832 <_dtoa_r+0x94a>
 8020a94:	4b09      	ldr	r3, [pc, #36]	; (8020abc <_dtoa_r+0xbd4>)
 8020a96:	f7ff ba95 	b.w	801ffc4 <_dtoa_r+0xdc>
 8020a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	f47f aa6e 	bne.w	801ff7e <_dtoa_r+0x96>
 8020aa2:	4b07      	ldr	r3, [pc, #28]	; (8020ac0 <_dtoa_r+0xbd8>)
 8020aa4:	f7ff ba8e 	b.w	801ffc4 <_dtoa_r+0xdc>
 8020aa8:	9b02      	ldr	r3, [sp, #8]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	dcae      	bgt.n	8020a0c <_dtoa_r+0xb24>
 8020aae:	9b06      	ldr	r3, [sp, #24]
 8020ab0:	2b02      	cmp	r3, #2
 8020ab2:	f73f aea8 	bgt.w	8020806 <_dtoa_r+0x91e>
 8020ab6:	e7a9      	b.n	8020a0c <_dtoa_r+0xb24>
 8020ab8:	08022717 	.word	0x08022717
 8020abc:	08022674 	.word	0x08022674
 8020ac0:	08022698 	.word	0x08022698

08020ac4 <__sflush_r>:
 8020ac4:	898a      	ldrh	r2, [r1, #12]
 8020ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020aca:	4605      	mov	r5, r0
 8020acc:	0710      	lsls	r0, r2, #28
 8020ace:	460c      	mov	r4, r1
 8020ad0:	d458      	bmi.n	8020b84 <__sflush_r+0xc0>
 8020ad2:	684b      	ldr	r3, [r1, #4]
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	dc05      	bgt.n	8020ae4 <__sflush_r+0x20>
 8020ad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020ada:	2b00      	cmp	r3, #0
 8020adc:	dc02      	bgt.n	8020ae4 <__sflush_r+0x20>
 8020ade:	2000      	movs	r0, #0
 8020ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020ae6:	2e00      	cmp	r6, #0
 8020ae8:	d0f9      	beq.n	8020ade <__sflush_r+0x1a>
 8020aea:	2300      	movs	r3, #0
 8020aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020af0:	682f      	ldr	r7, [r5, #0]
 8020af2:	602b      	str	r3, [r5, #0]
 8020af4:	d032      	beq.n	8020b5c <__sflush_r+0x98>
 8020af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020af8:	89a3      	ldrh	r3, [r4, #12]
 8020afa:	075a      	lsls	r2, r3, #29
 8020afc:	d505      	bpl.n	8020b0a <__sflush_r+0x46>
 8020afe:	6863      	ldr	r3, [r4, #4]
 8020b00:	1ac0      	subs	r0, r0, r3
 8020b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020b04:	b10b      	cbz	r3, 8020b0a <__sflush_r+0x46>
 8020b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020b08:	1ac0      	subs	r0, r0, r3
 8020b0a:	2300      	movs	r3, #0
 8020b0c:	4602      	mov	r2, r0
 8020b0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020b10:	6a21      	ldr	r1, [r4, #32]
 8020b12:	4628      	mov	r0, r5
 8020b14:	47b0      	blx	r6
 8020b16:	1c43      	adds	r3, r0, #1
 8020b18:	89a3      	ldrh	r3, [r4, #12]
 8020b1a:	d106      	bne.n	8020b2a <__sflush_r+0x66>
 8020b1c:	6829      	ldr	r1, [r5, #0]
 8020b1e:	291d      	cmp	r1, #29
 8020b20:	d82c      	bhi.n	8020b7c <__sflush_r+0xb8>
 8020b22:	4a2a      	ldr	r2, [pc, #168]	; (8020bcc <__sflush_r+0x108>)
 8020b24:	40ca      	lsrs	r2, r1
 8020b26:	07d6      	lsls	r6, r2, #31
 8020b28:	d528      	bpl.n	8020b7c <__sflush_r+0xb8>
 8020b2a:	2200      	movs	r2, #0
 8020b2c:	6062      	str	r2, [r4, #4]
 8020b2e:	04d9      	lsls	r1, r3, #19
 8020b30:	6922      	ldr	r2, [r4, #16]
 8020b32:	6022      	str	r2, [r4, #0]
 8020b34:	d504      	bpl.n	8020b40 <__sflush_r+0x7c>
 8020b36:	1c42      	adds	r2, r0, #1
 8020b38:	d101      	bne.n	8020b3e <__sflush_r+0x7a>
 8020b3a:	682b      	ldr	r3, [r5, #0]
 8020b3c:	b903      	cbnz	r3, 8020b40 <__sflush_r+0x7c>
 8020b3e:	6560      	str	r0, [r4, #84]	; 0x54
 8020b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020b42:	602f      	str	r7, [r5, #0]
 8020b44:	2900      	cmp	r1, #0
 8020b46:	d0ca      	beq.n	8020ade <__sflush_r+0x1a>
 8020b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020b4c:	4299      	cmp	r1, r3
 8020b4e:	d002      	beq.n	8020b56 <__sflush_r+0x92>
 8020b50:	4628      	mov	r0, r5
 8020b52:	f000 fd7d 	bl	8021650 <_free_r>
 8020b56:	2000      	movs	r0, #0
 8020b58:	6360      	str	r0, [r4, #52]	; 0x34
 8020b5a:	e7c1      	b.n	8020ae0 <__sflush_r+0x1c>
 8020b5c:	6a21      	ldr	r1, [r4, #32]
 8020b5e:	2301      	movs	r3, #1
 8020b60:	4628      	mov	r0, r5
 8020b62:	47b0      	blx	r6
 8020b64:	1c41      	adds	r1, r0, #1
 8020b66:	d1c7      	bne.n	8020af8 <__sflush_r+0x34>
 8020b68:	682b      	ldr	r3, [r5, #0]
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d0c4      	beq.n	8020af8 <__sflush_r+0x34>
 8020b6e:	2b1d      	cmp	r3, #29
 8020b70:	d001      	beq.n	8020b76 <__sflush_r+0xb2>
 8020b72:	2b16      	cmp	r3, #22
 8020b74:	d101      	bne.n	8020b7a <__sflush_r+0xb6>
 8020b76:	602f      	str	r7, [r5, #0]
 8020b78:	e7b1      	b.n	8020ade <__sflush_r+0x1a>
 8020b7a:	89a3      	ldrh	r3, [r4, #12]
 8020b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b80:	81a3      	strh	r3, [r4, #12]
 8020b82:	e7ad      	b.n	8020ae0 <__sflush_r+0x1c>
 8020b84:	690f      	ldr	r7, [r1, #16]
 8020b86:	2f00      	cmp	r7, #0
 8020b88:	d0a9      	beq.n	8020ade <__sflush_r+0x1a>
 8020b8a:	0793      	lsls	r3, r2, #30
 8020b8c:	680e      	ldr	r6, [r1, #0]
 8020b8e:	bf08      	it	eq
 8020b90:	694b      	ldreq	r3, [r1, #20]
 8020b92:	600f      	str	r7, [r1, #0]
 8020b94:	bf18      	it	ne
 8020b96:	2300      	movne	r3, #0
 8020b98:	eba6 0807 	sub.w	r8, r6, r7
 8020b9c:	608b      	str	r3, [r1, #8]
 8020b9e:	f1b8 0f00 	cmp.w	r8, #0
 8020ba2:	dd9c      	ble.n	8020ade <__sflush_r+0x1a>
 8020ba4:	6a21      	ldr	r1, [r4, #32]
 8020ba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020ba8:	4643      	mov	r3, r8
 8020baa:	463a      	mov	r2, r7
 8020bac:	4628      	mov	r0, r5
 8020bae:	47b0      	blx	r6
 8020bb0:	2800      	cmp	r0, #0
 8020bb2:	dc06      	bgt.n	8020bc2 <__sflush_r+0xfe>
 8020bb4:	89a3      	ldrh	r3, [r4, #12]
 8020bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bba:	81a3      	strh	r3, [r4, #12]
 8020bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8020bc0:	e78e      	b.n	8020ae0 <__sflush_r+0x1c>
 8020bc2:	4407      	add	r7, r0
 8020bc4:	eba8 0800 	sub.w	r8, r8, r0
 8020bc8:	e7e9      	b.n	8020b9e <__sflush_r+0xda>
 8020bca:	bf00      	nop
 8020bcc:	20400001 	.word	0x20400001

08020bd0 <_fflush_r>:
 8020bd0:	b538      	push	{r3, r4, r5, lr}
 8020bd2:	690b      	ldr	r3, [r1, #16]
 8020bd4:	4605      	mov	r5, r0
 8020bd6:	460c      	mov	r4, r1
 8020bd8:	b913      	cbnz	r3, 8020be0 <_fflush_r+0x10>
 8020bda:	2500      	movs	r5, #0
 8020bdc:	4628      	mov	r0, r5
 8020bde:	bd38      	pop	{r3, r4, r5, pc}
 8020be0:	b118      	cbz	r0, 8020bea <_fflush_r+0x1a>
 8020be2:	6983      	ldr	r3, [r0, #24]
 8020be4:	b90b      	cbnz	r3, 8020bea <_fflush_r+0x1a>
 8020be6:	f000 f887 	bl	8020cf8 <__sinit>
 8020bea:	4b14      	ldr	r3, [pc, #80]	; (8020c3c <_fflush_r+0x6c>)
 8020bec:	429c      	cmp	r4, r3
 8020bee:	d11b      	bne.n	8020c28 <_fflush_r+0x58>
 8020bf0:	686c      	ldr	r4, [r5, #4]
 8020bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d0ef      	beq.n	8020bda <_fflush_r+0xa>
 8020bfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020bfc:	07d0      	lsls	r0, r2, #31
 8020bfe:	d404      	bmi.n	8020c0a <_fflush_r+0x3a>
 8020c00:	0599      	lsls	r1, r3, #22
 8020c02:	d402      	bmi.n	8020c0a <_fflush_r+0x3a>
 8020c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c06:	f000 f91a 	bl	8020e3e <__retarget_lock_acquire_recursive>
 8020c0a:	4628      	mov	r0, r5
 8020c0c:	4621      	mov	r1, r4
 8020c0e:	f7ff ff59 	bl	8020ac4 <__sflush_r>
 8020c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c14:	07da      	lsls	r2, r3, #31
 8020c16:	4605      	mov	r5, r0
 8020c18:	d4e0      	bmi.n	8020bdc <_fflush_r+0xc>
 8020c1a:	89a3      	ldrh	r3, [r4, #12]
 8020c1c:	059b      	lsls	r3, r3, #22
 8020c1e:	d4dd      	bmi.n	8020bdc <_fflush_r+0xc>
 8020c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c22:	f000 f90d 	bl	8020e40 <__retarget_lock_release_recursive>
 8020c26:	e7d9      	b.n	8020bdc <_fflush_r+0xc>
 8020c28:	4b05      	ldr	r3, [pc, #20]	; (8020c40 <_fflush_r+0x70>)
 8020c2a:	429c      	cmp	r4, r3
 8020c2c:	d101      	bne.n	8020c32 <_fflush_r+0x62>
 8020c2e:	68ac      	ldr	r4, [r5, #8]
 8020c30:	e7df      	b.n	8020bf2 <_fflush_r+0x22>
 8020c32:	4b04      	ldr	r3, [pc, #16]	; (8020c44 <_fflush_r+0x74>)
 8020c34:	429c      	cmp	r4, r3
 8020c36:	bf08      	it	eq
 8020c38:	68ec      	ldreq	r4, [r5, #12]
 8020c3a:	e7da      	b.n	8020bf2 <_fflush_r+0x22>
 8020c3c:	08022748 	.word	0x08022748
 8020c40:	08022768 	.word	0x08022768
 8020c44:	08022728 	.word	0x08022728

08020c48 <std>:
 8020c48:	2300      	movs	r3, #0
 8020c4a:	b510      	push	{r4, lr}
 8020c4c:	4604      	mov	r4, r0
 8020c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8020c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020c56:	6083      	str	r3, [r0, #8]
 8020c58:	8181      	strh	r1, [r0, #12]
 8020c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8020c5c:	81c2      	strh	r2, [r0, #14]
 8020c5e:	6183      	str	r3, [r0, #24]
 8020c60:	4619      	mov	r1, r3
 8020c62:	2208      	movs	r2, #8
 8020c64:	305c      	adds	r0, #92	; 0x5c
 8020c66:	f7fe fadd 	bl	801f224 <memset>
 8020c6a:	4b05      	ldr	r3, [pc, #20]	; (8020c80 <std+0x38>)
 8020c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8020c6e:	4b05      	ldr	r3, [pc, #20]	; (8020c84 <std+0x3c>)
 8020c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8020c72:	4b05      	ldr	r3, [pc, #20]	; (8020c88 <std+0x40>)
 8020c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020c76:	4b05      	ldr	r3, [pc, #20]	; (8020c8c <std+0x44>)
 8020c78:	6224      	str	r4, [r4, #32]
 8020c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8020c7c:	bd10      	pop	{r4, pc}
 8020c7e:	bf00      	nop
 8020c80:	08021b75 	.word	0x08021b75
 8020c84:	08021b97 	.word	0x08021b97
 8020c88:	08021bcf 	.word	0x08021bcf
 8020c8c:	08021bf3 	.word	0x08021bf3

08020c90 <_cleanup_r>:
 8020c90:	4901      	ldr	r1, [pc, #4]	; (8020c98 <_cleanup_r+0x8>)
 8020c92:	f000 b8af 	b.w	8020df4 <_fwalk_reent>
 8020c96:	bf00      	nop
 8020c98:	08020bd1 	.word	0x08020bd1

08020c9c <__sfmoreglue>:
 8020c9c:	b570      	push	{r4, r5, r6, lr}
 8020c9e:	2268      	movs	r2, #104	; 0x68
 8020ca0:	1e4d      	subs	r5, r1, #1
 8020ca2:	4355      	muls	r5, r2
 8020ca4:	460e      	mov	r6, r1
 8020ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020caa:	f000 fd3d 	bl	8021728 <_malloc_r>
 8020cae:	4604      	mov	r4, r0
 8020cb0:	b140      	cbz	r0, 8020cc4 <__sfmoreglue+0x28>
 8020cb2:	2100      	movs	r1, #0
 8020cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8020cb8:	300c      	adds	r0, #12
 8020cba:	60a0      	str	r0, [r4, #8]
 8020cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020cc0:	f7fe fab0 	bl	801f224 <memset>
 8020cc4:	4620      	mov	r0, r4
 8020cc6:	bd70      	pop	{r4, r5, r6, pc}

08020cc8 <__sfp_lock_acquire>:
 8020cc8:	4801      	ldr	r0, [pc, #4]	; (8020cd0 <__sfp_lock_acquire+0x8>)
 8020cca:	f000 b8b8 	b.w	8020e3e <__retarget_lock_acquire_recursive>
 8020cce:	bf00      	nop
 8020cd0:	2000e0e5 	.word	0x2000e0e5

08020cd4 <__sfp_lock_release>:
 8020cd4:	4801      	ldr	r0, [pc, #4]	; (8020cdc <__sfp_lock_release+0x8>)
 8020cd6:	f000 b8b3 	b.w	8020e40 <__retarget_lock_release_recursive>
 8020cda:	bf00      	nop
 8020cdc:	2000e0e5 	.word	0x2000e0e5

08020ce0 <__sinit_lock_acquire>:
 8020ce0:	4801      	ldr	r0, [pc, #4]	; (8020ce8 <__sinit_lock_acquire+0x8>)
 8020ce2:	f000 b8ac 	b.w	8020e3e <__retarget_lock_acquire_recursive>
 8020ce6:	bf00      	nop
 8020ce8:	2000e0e6 	.word	0x2000e0e6

08020cec <__sinit_lock_release>:
 8020cec:	4801      	ldr	r0, [pc, #4]	; (8020cf4 <__sinit_lock_release+0x8>)
 8020cee:	f000 b8a7 	b.w	8020e40 <__retarget_lock_release_recursive>
 8020cf2:	bf00      	nop
 8020cf4:	2000e0e6 	.word	0x2000e0e6

08020cf8 <__sinit>:
 8020cf8:	b510      	push	{r4, lr}
 8020cfa:	4604      	mov	r4, r0
 8020cfc:	f7ff fff0 	bl	8020ce0 <__sinit_lock_acquire>
 8020d00:	69a3      	ldr	r3, [r4, #24]
 8020d02:	b11b      	cbz	r3, 8020d0c <__sinit+0x14>
 8020d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020d08:	f7ff bff0 	b.w	8020cec <__sinit_lock_release>
 8020d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020d10:	6523      	str	r3, [r4, #80]	; 0x50
 8020d12:	4b13      	ldr	r3, [pc, #76]	; (8020d60 <__sinit+0x68>)
 8020d14:	4a13      	ldr	r2, [pc, #76]	; (8020d64 <__sinit+0x6c>)
 8020d16:	681b      	ldr	r3, [r3, #0]
 8020d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8020d1a:	42a3      	cmp	r3, r4
 8020d1c:	bf04      	itt	eq
 8020d1e:	2301      	moveq	r3, #1
 8020d20:	61a3      	streq	r3, [r4, #24]
 8020d22:	4620      	mov	r0, r4
 8020d24:	f000 f820 	bl	8020d68 <__sfp>
 8020d28:	6060      	str	r0, [r4, #4]
 8020d2a:	4620      	mov	r0, r4
 8020d2c:	f000 f81c 	bl	8020d68 <__sfp>
 8020d30:	60a0      	str	r0, [r4, #8]
 8020d32:	4620      	mov	r0, r4
 8020d34:	f000 f818 	bl	8020d68 <__sfp>
 8020d38:	2200      	movs	r2, #0
 8020d3a:	60e0      	str	r0, [r4, #12]
 8020d3c:	2104      	movs	r1, #4
 8020d3e:	6860      	ldr	r0, [r4, #4]
 8020d40:	f7ff ff82 	bl	8020c48 <std>
 8020d44:	68a0      	ldr	r0, [r4, #8]
 8020d46:	2201      	movs	r2, #1
 8020d48:	2109      	movs	r1, #9
 8020d4a:	f7ff ff7d 	bl	8020c48 <std>
 8020d4e:	68e0      	ldr	r0, [r4, #12]
 8020d50:	2202      	movs	r2, #2
 8020d52:	2112      	movs	r1, #18
 8020d54:	f7ff ff78 	bl	8020c48 <std>
 8020d58:	2301      	movs	r3, #1
 8020d5a:	61a3      	str	r3, [r4, #24]
 8020d5c:	e7d2      	b.n	8020d04 <__sinit+0xc>
 8020d5e:	bf00      	nop
 8020d60:	08022660 	.word	0x08022660
 8020d64:	08020c91 	.word	0x08020c91

08020d68 <__sfp>:
 8020d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d6a:	4607      	mov	r7, r0
 8020d6c:	f7ff ffac 	bl	8020cc8 <__sfp_lock_acquire>
 8020d70:	4b1e      	ldr	r3, [pc, #120]	; (8020dec <__sfp+0x84>)
 8020d72:	681e      	ldr	r6, [r3, #0]
 8020d74:	69b3      	ldr	r3, [r6, #24]
 8020d76:	b913      	cbnz	r3, 8020d7e <__sfp+0x16>
 8020d78:	4630      	mov	r0, r6
 8020d7a:	f7ff ffbd 	bl	8020cf8 <__sinit>
 8020d7e:	3648      	adds	r6, #72	; 0x48
 8020d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020d84:	3b01      	subs	r3, #1
 8020d86:	d503      	bpl.n	8020d90 <__sfp+0x28>
 8020d88:	6833      	ldr	r3, [r6, #0]
 8020d8a:	b30b      	cbz	r3, 8020dd0 <__sfp+0x68>
 8020d8c:	6836      	ldr	r6, [r6, #0]
 8020d8e:	e7f7      	b.n	8020d80 <__sfp+0x18>
 8020d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020d94:	b9d5      	cbnz	r5, 8020dcc <__sfp+0x64>
 8020d96:	4b16      	ldr	r3, [pc, #88]	; (8020df0 <__sfp+0x88>)
 8020d98:	60e3      	str	r3, [r4, #12]
 8020d9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8020da0:	f000 f84c 	bl	8020e3c <__retarget_lock_init_recursive>
 8020da4:	f7ff ff96 	bl	8020cd4 <__sfp_lock_release>
 8020da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020dac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020db0:	6025      	str	r5, [r4, #0]
 8020db2:	61a5      	str	r5, [r4, #24]
 8020db4:	2208      	movs	r2, #8
 8020db6:	4629      	mov	r1, r5
 8020db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020dbc:	f7fe fa32 	bl	801f224 <memset>
 8020dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020dc8:	4620      	mov	r0, r4
 8020dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020dcc:	3468      	adds	r4, #104	; 0x68
 8020dce:	e7d9      	b.n	8020d84 <__sfp+0x1c>
 8020dd0:	2104      	movs	r1, #4
 8020dd2:	4638      	mov	r0, r7
 8020dd4:	f7ff ff62 	bl	8020c9c <__sfmoreglue>
 8020dd8:	4604      	mov	r4, r0
 8020dda:	6030      	str	r0, [r6, #0]
 8020ddc:	2800      	cmp	r0, #0
 8020dde:	d1d5      	bne.n	8020d8c <__sfp+0x24>
 8020de0:	f7ff ff78 	bl	8020cd4 <__sfp_lock_release>
 8020de4:	230c      	movs	r3, #12
 8020de6:	603b      	str	r3, [r7, #0]
 8020de8:	e7ee      	b.n	8020dc8 <__sfp+0x60>
 8020dea:	bf00      	nop
 8020dec:	08022660 	.word	0x08022660
 8020df0:	ffff0001 	.word	0xffff0001

08020df4 <_fwalk_reent>:
 8020df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020df8:	4606      	mov	r6, r0
 8020dfa:	4688      	mov	r8, r1
 8020dfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020e00:	2700      	movs	r7, #0
 8020e02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020e06:	f1b9 0901 	subs.w	r9, r9, #1
 8020e0a:	d505      	bpl.n	8020e18 <_fwalk_reent+0x24>
 8020e0c:	6824      	ldr	r4, [r4, #0]
 8020e0e:	2c00      	cmp	r4, #0
 8020e10:	d1f7      	bne.n	8020e02 <_fwalk_reent+0xe>
 8020e12:	4638      	mov	r0, r7
 8020e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020e18:	89ab      	ldrh	r3, [r5, #12]
 8020e1a:	2b01      	cmp	r3, #1
 8020e1c:	d907      	bls.n	8020e2e <_fwalk_reent+0x3a>
 8020e1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020e22:	3301      	adds	r3, #1
 8020e24:	d003      	beq.n	8020e2e <_fwalk_reent+0x3a>
 8020e26:	4629      	mov	r1, r5
 8020e28:	4630      	mov	r0, r6
 8020e2a:	47c0      	blx	r8
 8020e2c:	4307      	orrs	r7, r0
 8020e2e:	3568      	adds	r5, #104	; 0x68
 8020e30:	e7e9      	b.n	8020e06 <_fwalk_reent+0x12>
	...

08020e34 <_localeconv_r>:
 8020e34:	4800      	ldr	r0, [pc, #0]	; (8020e38 <_localeconv_r+0x4>)
 8020e36:	4770      	bx	lr
 8020e38:	20000180 	.word	0x20000180

08020e3c <__retarget_lock_init_recursive>:
 8020e3c:	4770      	bx	lr

08020e3e <__retarget_lock_acquire_recursive>:
 8020e3e:	4770      	bx	lr

08020e40 <__retarget_lock_release_recursive>:
 8020e40:	4770      	bx	lr

08020e42 <__swhatbuf_r>:
 8020e42:	b570      	push	{r4, r5, r6, lr}
 8020e44:	460e      	mov	r6, r1
 8020e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e4a:	2900      	cmp	r1, #0
 8020e4c:	b096      	sub	sp, #88	; 0x58
 8020e4e:	4614      	mov	r4, r2
 8020e50:	461d      	mov	r5, r3
 8020e52:	da08      	bge.n	8020e66 <__swhatbuf_r+0x24>
 8020e54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020e58:	2200      	movs	r2, #0
 8020e5a:	602a      	str	r2, [r5, #0]
 8020e5c:	061a      	lsls	r2, r3, #24
 8020e5e:	d410      	bmi.n	8020e82 <__swhatbuf_r+0x40>
 8020e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020e64:	e00e      	b.n	8020e84 <__swhatbuf_r+0x42>
 8020e66:	466a      	mov	r2, sp
 8020e68:	f000 ff1a 	bl	8021ca0 <_fstat_r>
 8020e6c:	2800      	cmp	r0, #0
 8020e6e:	dbf1      	blt.n	8020e54 <__swhatbuf_r+0x12>
 8020e70:	9a01      	ldr	r2, [sp, #4]
 8020e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020e7a:	425a      	negs	r2, r3
 8020e7c:	415a      	adcs	r2, r3
 8020e7e:	602a      	str	r2, [r5, #0]
 8020e80:	e7ee      	b.n	8020e60 <__swhatbuf_r+0x1e>
 8020e82:	2340      	movs	r3, #64	; 0x40
 8020e84:	2000      	movs	r0, #0
 8020e86:	6023      	str	r3, [r4, #0]
 8020e88:	b016      	add	sp, #88	; 0x58
 8020e8a:	bd70      	pop	{r4, r5, r6, pc}

08020e8c <__smakebuf_r>:
 8020e8c:	898b      	ldrh	r3, [r1, #12]
 8020e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020e90:	079d      	lsls	r5, r3, #30
 8020e92:	4606      	mov	r6, r0
 8020e94:	460c      	mov	r4, r1
 8020e96:	d507      	bpl.n	8020ea8 <__smakebuf_r+0x1c>
 8020e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020e9c:	6023      	str	r3, [r4, #0]
 8020e9e:	6123      	str	r3, [r4, #16]
 8020ea0:	2301      	movs	r3, #1
 8020ea2:	6163      	str	r3, [r4, #20]
 8020ea4:	b002      	add	sp, #8
 8020ea6:	bd70      	pop	{r4, r5, r6, pc}
 8020ea8:	ab01      	add	r3, sp, #4
 8020eaa:	466a      	mov	r2, sp
 8020eac:	f7ff ffc9 	bl	8020e42 <__swhatbuf_r>
 8020eb0:	9900      	ldr	r1, [sp, #0]
 8020eb2:	4605      	mov	r5, r0
 8020eb4:	4630      	mov	r0, r6
 8020eb6:	f000 fc37 	bl	8021728 <_malloc_r>
 8020eba:	b948      	cbnz	r0, 8020ed0 <__smakebuf_r+0x44>
 8020ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ec0:	059a      	lsls	r2, r3, #22
 8020ec2:	d4ef      	bmi.n	8020ea4 <__smakebuf_r+0x18>
 8020ec4:	f023 0303 	bic.w	r3, r3, #3
 8020ec8:	f043 0302 	orr.w	r3, r3, #2
 8020ecc:	81a3      	strh	r3, [r4, #12]
 8020ece:	e7e3      	b.n	8020e98 <__smakebuf_r+0xc>
 8020ed0:	4b0d      	ldr	r3, [pc, #52]	; (8020f08 <__smakebuf_r+0x7c>)
 8020ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8020ed4:	89a3      	ldrh	r3, [r4, #12]
 8020ed6:	6020      	str	r0, [r4, #0]
 8020ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020edc:	81a3      	strh	r3, [r4, #12]
 8020ede:	9b00      	ldr	r3, [sp, #0]
 8020ee0:	6163      	str	r3, [r4, #20]
 8020ee2:	9b01      	ldr	r3, [sp, #4]
 8020ee4:	6120      	str	r0, [r4, #16]
 8020ee6:	b15b      	cbz	r3, 8020f00 <__smakebuf_r+0x74>
 8020ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020eec:	4630      	mov	r0, r6
 8020eee:	f000 fee9 	bl	8021cc4 <_isatty_r>
 8020ef2:	b128      	cbz	r0, 8020f00 <__smakebuf_r+0x74>
 8020ef4:	89a3      	ldrh	r3, [r4, #12]
 8020ef6:	f023 0303 	bic.w	r3, r3, #3
 8020efa:	f043 0301 	orr.w	r3, r3, #1
 8020efe:	81a3      	strh	r3, [r4, #12]
 8020f00:	89a0      	ldrh	r0, [r4, #12]
 8020f02:	4305      	orrs	r5, r0
 8020f04:	81a5      	strh	r5, [r4, #12]
 8020f06:	e7cd      	b.n	8020ea4 <__smakebuf_r+0x18>
 8020f08:	08020c91 	.word	0x08020c91

08020f0c <malloc>:
 8020f0c:	4b02      	ldr	r3, [pc, #8]	; (8020f18 <malloc+0xc>)
 8020f0e:	4601      	mov	r1, r0
 8020f10:	6818      	ldr	r0, [r3, #0]
 8020f12:	f000 bc09 	b.w	8021728 <_malloc_r>
 8020f16:	bf00      	nop
 8020f18:	2000002c 	.word	0x2000002c

08020f1c <_Balloc>:
 8020f1c:	b570      	push	{r4, r5, r6, lr}
 8020f1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020f20:	4604      	mov	r4, r0
 8020f22:	460d      	mov	r5, r1
 8020f24:	b976      	cbnz	r6, 8020f44 <_Balloc+0x28>
 8020f26:	2010      	movs	r0, #16
 8020f28:	f7ff fff0 	bl	8020f0c <malloc>
 8020f2c:	4602      	mov	r2, r0
 8020f2e:	6260      	str	r0, [r4, #36]	; 0x24
 8020f30:	b920      	cbnz	r0, 8020f3c <_Balloc+0x20>
 8020f32:	4b18      	ldr	r3, [pc, #96]	; (8020f94 <_Balloc+0x78>)
 8020f34:	4818      	ldr	r0, [pc, #96]	; (8020f98 <_Balloc+0x7c>)
 8020f36:	2166      	movs	r1, #102	; 0x66
 8020f38:	f000 fe72 	bl	8021c20 <__assert_func>
 8020f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020f40:	6006      	str	r6, [r0, #0]
 8020f42:	60c6      	str	r6, [r0, #12]
 8020f44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020f46:	68f3      	ldr	r3, [r6, #12]
 8020f48:	b183      	cbz	r3, 8020f6c <_Balloc+0x50>
 8020f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f4c:	68db      	ldr	r3, [r3, #12]
 8020f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020f52:	b9b8      	cbnz	r0, 8020f84 <_Balloc+0x68>
 8020f54:	2101      	movs	r1, #1
 8020f56:	fa01 f605 	lsl.w	r6, r1, r5
 8020f5a:	1d72      	adds	r2, r6, #5
 8020f5c:	0092      	lsls	r2, r2, #2
 8020f5e:	4620      	mov	r0, r4
 8020f60:	f000 fb60 	bl	8021624 <_calloc_r>
 8020f64:	b160      	cbz	r0, 8020f80 <_Balloc+0x64>
 8020f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020f6a:	e00e      	b.n	8020f8a <_Balloc+0x6e>
 8020f6c:	2221      	movs	r2, #33	; 0x21
 8020f6e:	2104      	movs	r1, #4
 8020f70:	4620      	mov	r0, r4
 8020f72:	f000 fb57 	bl	8021624 <_calloc_r>
 8020f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f78:	60f0      	str	r0, [r6, #12]
 8020f7a:	68db      	ldr	r3, [r3, #12]
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	d1e4      	bne.n	8020f4a <_Balloc+0x2e>
 8020f80:	2000      	movs	r0, #0
 8020f82:	bd70      	pop	{r4, r5, r6, pc}
 8020f84:	6802      	ldr	r2, [r0, #0]
 8020f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020f8a:	2300      	movs	r3, #0
 8020f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020f90:	e7f7      	b.n	8020f82 <_Balloc+0x66>
 8020f92:	bf00      	nop
 8020f94:	080226a5 	.word	0x080226a5
 8020f98:	08022788 	.word	0x08022788

08020f9c <_Bfree>:
 8020f9c:	b570      	push	{r4, r5, r6, lr}
 8020f9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020fa0:	4605      	mov	r5, r0
 8020fa2:	460c      	mov	r4, r1
 8020fa4:	b976      	cbnz	r6, 8020fc4 <_Bfree+0x28>
 8020fa6:	2010      	movs	r0, #16
 8020fa8:	f7ff ffb0 	bl	8020f0c <malloc>
 8020fac:	4602      	mov	r2, r0
 8020fae:	6268      	str	r0, [r5, #36]	; 0x24
 8020fb0:	b920      	cbnz	r0, 8020fbc <_Bfree+0x20>
 8020fb2:	4b09      	ldr	r3, [pc, #36]	; (8020fd8 <_Bfree+0x3c>)
 8020fb4:	4809      	ldr	r0, [pc, #36]	; (8020fdc <_Bfree+0x40>)
 8020fb6:	218a      	movs	r1, #138	; 0x8a
 8020fb8:	f000 fe32 	bl	8021c20 <__assert_func>
 8020fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020fc0:	6006      	str	r6, [r0, #0]
 8020fc2:	60c6      	str	r6, [r0, #12]
 8020fc4:	b13c      	cbz	r4, 8020fd6 <_Bfree+0x3a>
 8020fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020fc8:	6862      	ldr	r2, [r4, #4]
 8020fca:	68db      	ldr	r3, [r3, #12]
 8020fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020fd0:	6021      	str	r1, [r4, #0]
 8020fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020fd6:	bd70      	pop	{r4, r5, r6, pc}
 8020fd8:	080226a5 	.word	0x080226a5
 8020fdc:	08022788 	.word	0x08022788

08020fe0 <__multadd>:
 8020fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020fe4:	690d      	ldr	r5, [r1, #16]
 8020fe6:	4607      	mov	r7, r0
 8020fe8:	460c      	mov	r4, r1
 8020fea:	461e      	mov	r6, r3
 8020fec:	f101 0c14 	add.w	ip, r1, #20
 8020ff0:	2000      	movs	r0, #0
 8020ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8020ff6:	b299      	uxth	r1, r3
 8020ff8:	fb02 6101 	mla	r1, r2, r1, r6
 8020ffc:	0c1e      	lsrs	r6, r3, #16
 8020ffe:	0c0b      	lsrs	r3, r1, #16
 8021000:	fb02 3306 	mla	r3, r2, r6, r3
 8021004:	b289      	uxth	r1, r1
 8021006:	3001      	adds	r0, #1
 8021008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802100c:	4285      	cmp	r5, r0
 802100e:	f84c 1b04 	str.w	r1, [ip], #4
 8021012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021016:	dcec      	bgt.n	8020ff2 <__multadd+0x12>
 8021018:	b30e      	cbz	r6, 802105e <__multadd+0x7e>
 802101a:	68a3      	ldr	r3, [r4, #8]
 802101c:	42ab      	cmp	r3, r5
 802101e:	dc19      	bgt.n	8021054 <__multadd+0x74>
 8021020:	6861      	ldr	r1, [r4, #4]
 8021022:	4638      	mov	r0, r7
 8021024:	3101      	adds	r1, #1
 8021026:	f7ff ff79 	bl	8020f1c <_Balloc>
 802102a:	4680      	mov	r8, r0
 802102c:	b928      	cbnz	r0, 802103a <__multadd+0x5a>
 802102e:	4602      	mov	r2, r0
 8021030:	4b0c      	ldr	r3, [pc, #48]	; (8021064 <__multadd+0x84>)
 8021032:	480d      	ldr	r0, [pc, #52]	; (8021068 <__multadd+0x88>)
 8021034:	21b5      	movs	r1, #181	; 0xb5
 8021036:	f000 fdf3 	bl	8021c20 <__assert_func>
 802103a:	6922      	ldr	r2, [r4, #16]
 802103c:	3202      	adds	r2, #2
 802103e:	f104 010c 	add.w	r1, r4, #12
 8021042:	0092      	lsls	r2, r2, #2
 8021044:	300c      	adds	r0, #12
 8021046:	f7fe f8df 	bl	801f208 <memcpy>
 802104a:	4621      	mov	r1, r4
 802104c:	4638      	mov	r0, r7
 802104e:	f7ff ffa5 	bl	8020f9c <_Bfree>
 8021052:	4644      	mov	r4, r8
 8021054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021058:	3501      	adds	r5, #1
 802105a:	615e      	str	r6, [r3, #20]
 802105c:	6125      	str	r5, [r4, #16]
 802105e:	4620      	mov	r0, r4
 8021060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021064:	08022717 	.word	0x08022717
 8021068:	08022788 	.word	0x08022788

0802106c <__hi0bits>:
 802106c:	0c03      	lsrs	r3, r0, #16
 802106e:	041b      	lsls	r3, r3, #16
 8021070:	b9d3      	cbnz	r3, 80210a8 <__hi0bits+0x3c>
 8021072:	0400      	lsls	r0, r0, #16
 8021074:	2310      	movs	r3, #16
 8021076:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802107a:	bf04      	itt	eq
 802107c:	0200      	lsleq	r0, r0, #8
 802107e:	3308      	addeq	r3, #8
 8021080:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021084:	bf04      	itt	eq
 8021086:	0100      	lsleq	r0, r0, #4
 8021088:	3304      	addeq	r3, #4
 802108a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802108e:	bf04      	itt	eq
 8021090:	0080      	lsleq	r0, r0, #2
 8021092:	3302      	addeq	r3, #2
 8021094:	2800      	cmp	r0, #0
 8021096:	db05      	blt.n	80210a4 <__hi0bits+0x38>
 8021098:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802109c:	f103 0301 	add.w	r3, r3, #1
 80210a0:	bf08      	it	eq
 80210a2:	2320      	moveq	r3, #32
 80210a4:	4618      	mov	r0, r3
 80210a6:	4770      	bx	lr
 80210a8:	2300      	movs	r3, #0
 80210aa:	e7e4      	b.n	8021076 <__hi0bits+0xa>

080210ac <__lo0bits>:
 80210ac:	6803      	ldr	r3, [r0, #0]
 80210ae:	f013 0207 	ands.w	r2, r3, #7
 80210b2:	4601      	mov	r1, r0
 80210b4:	d00b      	beq.n	80210ce <__lo0bits+0x22>
 80210b6:	07da      	lsls	r2, r3, #31
 80210b8:	d423      	bmi.n	8021102 <__lo0bits+0x56>
 80210ba:	0798      	lsls	r0, r3, #30
 80210bc:	bf49      	itett	mi
 80210be:	085b      	lsrmi	r3, r3, #1
 80210c0:	089b      	lsrpl	r3, r3, #2
 80210c2:	2001      	movmi	r0, #1
 80210c4:	600b      	strmi	r3, [r1, #0]
 80210c6:	bf5c      	itt	pl
 80210c8:	600b      	strpl	r3, [r1, #0]
 80210ca:	2002      	movpl	r0, #2
 80210cc:	4770      	bx	lr
 80210ce:	b298      	uxth	r0, r3
 80210d0:	b9a8      	cbnz	r0, 80210fe <__lo0bits+0x52>
 80210d2:	0c1b      	lsrs	r3, r3, #16
 80210d4:	2010      	movs	r0, #16
 80210d6:	b2da      	uxtb	r2, r3
 80210d8:	b90a      	cbnz	r2, 80210de <__lo0bits+0x32>
 80210da:	3008      	adds	r0, #8
 80210dc:	0a1b      	lsrs	r3, r3, #8
 80210de:	071a      	lsls	r2, r3, #28
 80210e0:	bf04      	itt	eq
 80210e2:	091b      	lsreq	r3, r3, #4
 80210e4:	3004      	addeq	r0, #4
 80210e6:	079a      	lsls	r2, r3, #30
 80210e8:	bf04      	itt	eq
 80210ea:	089b      	lsreq	r3, r3, #2
 80210ec:	3002      	addeq	r0, #2
 80210ee:	07da      	lsls	r2, r3, #31
 80210f0:	d403      	bmi.n	80210fa <__lo0bits+0x4e>
 80210f2:	085b      	lsrs	r3, r3, #1
 80210f4:	f100 0001 	add.w	r0, r0, #1
 80210f8:	d005      	beq.n	8021106 <__lo0bits+0x5a>
 80210fa:	600b      	str	r3, [r1, #0]
 80210fc:	4770      	bx	lr
 80210fe:	4610      	mov	r0, r2
 8021100:	e7e9      	b.n	80210d6 <__lo0bits+0x2a>
 8021102:	2000      	movs	r0, #0
 8021104:	4770      	bx	lr
 8021106:	2020      	movs	r0, #32
 8021108:	4770      	bx	lr
	...

0802110c <__i2b>:
 802110c:	b510      	push	{r4, lr}
 802110e:	460c      	mov	r4, r1
 8021110:	2101      	movs	r1, #1
 8021112:	f7ff ff03 	bl	8020f1c <_Balloc>
 8021116:	4602      	mov	r2, r0
 8021118:	b928      	cbnz	r0, 8021126 <__i2b+0x1a>
 802111a:	4b05      	ldr	r3, [pc, #20]	; (8021130 <__i2b+0x24>)
 802111c:	4805      	ldr	r0, [pc, #20]	; (8021134 <__i2b+0x28>)
 802111e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021122:	f000 fd7d 	bl	8021c20 <__assert_func>
 8021126:	2301      	movs	r3, #1
 8021128:	6144      	str	r4, [r0, #20]
 802112a:	6103      	str	r3, [r0, #16]
 802112c:	bd10      	pop	{r4, pc}
 802112e:	bf00      	nop
 8021130:	08022717 	.word	0x08022717
 8021134:	08022788 	.word	0x08022788

08021138 <__multiply>:
 8021138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802113c:	4691      	mov	r9, r2
 802113e:	690a      	ldr	r2, [r1, #16]
 8021140:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021144:	429a      	cmp	r2, r3
 8021146:	bfb8      	it	lt
 8021148:	460b      	movlt	r3, r1
 802114a:	460c      	mov	r4, r1
 802114c:	bfbc      	itt	lt
 802114e:	464c      	movlt	r4, r9
 8021150:	4699      	movlt	r9, r3
 8021152:	6927      	ldr	r7, [r4, #16]
 8021154:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021158:	68a3      	ldr	r3, [r4, #8]
 802115a:	6861      	ldr	r1, [r4, #4]
 802115c:	eb07 060a 	add.w	r6, r7, sl
 8021160:	42b3      	cmp	r3, r6
 8021162:	b085      	sub	sp, #20
 8021164:	bfb8      	it	lt
 8021166:	3101      	addlt	r1, #1
 8021168:	f7ff fed8 	bl	8020f1c <_Balloc>
 802116c:	b930      	cbnz	r0, 802117c <__multiply+0x44>
 802116e:	4602      	mov	r2, r0
 8021170:	4b44      	ldr	r3, [pc, #272]	; (8021284 <__multiply+0x14c>)
 8021172:	4845      	ldr	r0, [pc, #276]	; (8021288 <__multiply+0x150>)
 8021174:	f240 115d 	movw	r1, #349	; 0x15d
 8021178:	f000 fd52 	bl	8021c20 <__assert_func>
 802117c:	f100 0514 	add.w	r5, r0, #20
 8021180:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021184:	462b      	mov	r3, r5
 8021186:	2200      	movs	r2, #0
 8021188:	4543      	cmp	r3, r8
 802118a:	d321      	bcc.n	80211d0 <__multiply+0x98>
 802118c:	f104 0314 	add.w	r3, r4, #20
 8021190:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021194:	f109 0314 	add.w	r3, r9, #20
 8021198:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802119c:	9202      	str	r2, [sp, #8]
 802119e:	1b3a      	subs	r2, r7, r4
 80211a0:	3a15      	subs	r2, #21
 80211a2:	f022 0203 	bic.w	r2, r2, #3
 80211a6:	3204      	adds	r2, #4
 80211a8:	f104 0115 	add.w	r1, r4, #21
 80211ac:	428f      	cmp	r7, r1
 80211ae:	bf38      	it	cc
 80211b0:	2204      	movcc	r2, #4
 80211b2:	9201      	str	r2, [sp, #4]
 80211b4:	9a02      	ldr	r2, [sp, #8]
 80211b6:	9303      	str	r3, [sp, #12]
 80211b8:	429a      	cmp	r2, r3
 80211ba:	d80c      	bhi.n	80211d6 <__multiply+0x9e>
 80211bc:	2e00      	cmp	r6, #0
 80211be:	dd03      	ble.n	80211c8 <__multiply+0x90>
 80211c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	d05a      	beq.n	802127e <__multiply+0x146>
 80211c8:	6106      	str	r6, [r0, #16]
 80211ca:	b005      	add	sp, #20
 80211cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211d0:	f843 2b04 	str.w	r2, [r3], #4
 80211d4:	e7d8      	b.n	8021188 <__multiply+0x50>
 80211d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80211da:	f1ba 0f00 	cmp.w	sl, #0
 80211de:	d024      	beq.n	802122a <__multiply+0xf2>
 80211e0:	f104 0e14 	add.w	lr, r4, #20
 80211e4:	46a9      	mov	r9, r5
 80211e6:	f04f 0c00 	mov.w	ip, #0
 80211ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80211ee:	f8d9 1000 	ldr.w	r1, [r9]
 80211f2:	fa1f fb82 	uxth.w	fp, r2
 80211f6:	b289      	uxth	r1, r1
 80211f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80211fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021200:	f8d9 2000 	ldr.w	r2, [r9]
 8021204:	4461      	add	r1, ip
 8021206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802120a:	fb0a c20b 	mla	r2, sl, fp, ip
 802120e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021212:	b289      	uxth	r1, r1
 8021214:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021218:	4577      	cmp	r7, lr
 802121a:	f849 1b04 	str.w	r1, [r9], #4
 802121e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021222:	d8e2      	bhi.n	80211ea <__multiply+0xb2>
 8021224:	9a01      	ldr	r2, [sp, #4]
 8021226:	f845 c002 	str.w	ip, [r5, r2]
 802122a:	9a03      	ldr	r2, [sp, #12]
 802122c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021230:	3304      	adds	r3, #4
 8021232:	f1b9 0f00 	cmp.w	r9, #0
 8021236:	d020      	beq.n	802127a <__multiply+0x142>
 8021238:	6829      	ldr	r1, [r5, #0]
 802123a:	f104 0c14 	add.w	ip, r4, #20
 802123e:	46ae      	mov	lr, r5
 8021240:	f04f 0a00 	mov.w	sl, #0
 8021244:	f8bc b000 	ldrh.w	fp, [ip]
 8021248:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802124c:	fb09 220b 	mla	r2, r9, fp, r2
 8021250:	4492      	add	sl, r2
 8021252:	b289      	uxth	r1, r1
 8021254:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021258:	f84e 1b04 	str.w	r1, [lr], #4
 802125c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021260:	f8be 1000 	ldrh.w	r1, [lr]
 8021264:	0c12      	lsrs	r2, r2, #16
 8021266:	fb09 1102 	mla	r1, r9, r2, r1
 802126a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802126e:	4567      	cmp	r7, ip
 8021270:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021274:	d8e6      	bhi.n	8021244 <__multiply+0x10c>
 8021276:	9a01      	ldr	r2, [sp, #4]
 8021278:	50a9      	str	r1, [r5, r2]
 802127a:	3504      	adds	r5, #4
 802127c:	e79a      	b.n	80211b4 <__multiply+0x7c>
 802127e:	3e01      	subs	r6, #1
 8021280:	e79c      	b.n	80211bc <__multiply+0x84>
 8021282:	bf00      	nop
 8021284:	08022717 	.word	0x08022717
 8021288:	08022788 	.word	0x08022788

0802128c <__pow5mult>:
 802128c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021290:	4615      	mov	r5, r2
 8021292:	f012 0203 	ands.w	r2, r2, #3
 8021296:	4606      	mov	r6, r0
 8021298:	460f      	mov	r7, r1
 802129a:	d007      	beq.n	80212ac <__pow5mult+0x20>
 802129c:	4c25      	ldr	r4, [pc, #148]	; (8021334 <__pow5mult+0xa8>)
 802129e:	3a01      	subs	r2, #1
 80212a0:	2300      	movs	r3, #0
 80212a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80212a6:	f7ff fe9b 	bl	8020fe0 <__multadd>
 80212aa:	4607      	mov	r7, r0
 80212ac:	10ad      	asrs	r5, r5, #2
 80212ae:	d03d      	beq.n	802132c <__pow5mult+0xa0>
 80212b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80212b2:	b97c      	cbnz	r4, 80212d4 <__pow5mult+0x48>
 80212b4:	2010      	movs	r0, #16
 80212b6:	f7ff fe29 	bl	8020f0c <malloc>
 80212ba:	4602      	mov	r2, r0
 80212bc:	6270      	str	r0, [r6, #36]	; 0x24
 80212be:	b928      	cbnz	r0, 80212cc <__pow5mult+0x40>
 80212c0:	4b1d      	ldr	r3, [pc, #116]	; (8021338 <__pow5mult+0xac>)
 80212c2:	481e      	ldr	r0, [pc, #120]	; (802133c <__pow5mult+0xb0>)
 80212c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80212c8:	f000 fcaa 	bl	8021c20 <__assert_func>
 80212cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80212d0:	6004      	str	r4, [r0, #0]
 80212d2:	60c4      	str	r4, [r0, #12]
 80212d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80212d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80212dc:	b94c      	cbnz	r4, 80212f2 <__pow5mult+0x66>
 80212de:	f240 2171 	movw	r1, #625	; 0x271
 80212e2:	4630      	mov	r0, r6
 80212e4:	f7ff ff12 	bl	802110c <__i2b>
 80212e8:	2300      	movs	r3, #0
 80212ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80212ee:	4604      	mov	r4, r0
 80212f0:	6003      	str	r3, [r0, #0]
 80212f2:	f04f 0900 	mov.w	r9, #0
 80212f6:	07eb      	lsls	r3, r5, #31
 80212f8:	d50a      	bpl.n	8021310 <__pow5mult+0x84>
 80212fa:	4639      	mov	r1, r7
 80212fc:	4622      	mov	r2, r4
 80212fe:	4630      	mov	r0, r6
 8021300:	f7ff ff1a 	bl	8021138 <__multiply>
 8021304:	4639      	mov	r1, r7
 8021306:	4680      	mov	r8, r0
 8021308:	4630      	mov	r0, r6
 802130a:	f7ff fe47 	bl	8020f9c <_Bfree>
 802130e:	4647      	mov	r7, r8
 8021310:	106d      	asrs	r5, r5, #1
 8021312:	d00b      	beq.n	802132c <__pow5mult+0xa0>
 8021314:	6820      	ldr	r0, [r4, #0]
 8021316:	b938      	cbnz	r0, 8021328 <__pow5mult+0x9c>
 8021318:	4622      	mov	r2, r4
 802131a:	4621      	mov	r1, r4
 802131c:	4630      	mov	r0, r6
 802131e:	f7ff ff0b 	bl	8021138 <__multiply>
 8021322:	6020      	str	r0, [r4, #0]
 8021324:	f8c0 9000 	str.w	r9, [r0]
 8021328:	4604      	mov	r4, r0
 802132a:	e7e4      	b.n	80212f6 <__pow5mult+0x6a>
 802132c:	4638      	mov	r0, r7
 802132e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021332:	bf00      	nop
 8021334:	080228d8 	.word	0x080228d8
 8021338:	080226a5 	.word	0x080226a5
 802133c:	08022788 	.word	0x08022788

08021340 <__lshift>:
 8021340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021344:	460c      	mov	r4, r1
 8021346:	6849      	ldr	r1, [r1, #4]
 8021348:	6923      	ldr	r3, [r4, #16]
 802134a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802134e:	68a3      	ldr	r3, [r4, #8]
 8021350:	4607      	mov	r7, r0
 8021352:	4691      	mov	r9, r2
 8021354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021358:	f108 0601 	add.w	r6, r8, #1
 802135c:	42b3      	cmp	r3, r6
 802135e:	db0b      	blt.n	8021378 <__lshift+0x38>
 8021360:	4638      	mov	r0, r7
 8021362:	f7ff fddb 	bl	8020f1c <_Balloc>
 8021366:	4605      	mov	r5, r0
 8021368:	b948      	cbnz	r0, 802137e <__lshift+0x3e>
 802136a:	4602      	mov	r2, r0
 802136c:	4b2a      	ldr	r3, [pc, #168]	; (8021418 <__lshift+0xd8>)
 802136e:	482b      	ldr	r0, [pc, #172]	; (802141c <__lshift+0xdc>)
 8021370:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021374:	f000 fc54 	bl	8021c20 <__assert_func>
 8021378:	3101      	adds	r1, #1
 802137a:	005b      	lsls	r3, r3, #1
 802137c:	e7ee      	b.n	802135c <__lshift+0x1c>
 802137e:	2300      	movs	r3, #0
 8021380:	f100 0114 	add.w	r1, r0, #20
 8021384:	f100 0210 	add.w	r2, r0, #16
 8021388:	4618      	mov	r0, r3
 802138a:	4553      	cmp	r3, sl
 802138c:	db37      	blt.n	80213fe <__lshift+0xbe>
 802138e:	6920      	ldr	r0, [r4, #16]
 8021390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021394:	f104 0314 	add.w	r3, r4, #20
 8021398:	f019 091f 	ands.w	r9, r9, #31
 802139c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80213a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80213a4:	d02f      	beq.n	8021406 <__lshift+0xc6>
 80213a6:	f1c9 0e20 	rsb	lr, r9, #32
 80213aa:	468a      	mov	sl, r1
 80213ac:	f04f 0c00 	mov.w	ip, #0
 80213b0:	681a      	ldr	r2, [r3, #0]
 80213b2:	fa02 f209 	lsl.w	r2, r2, r9
 80213b6:	ea42 020c 	orr.w	r2, r2, ip
 80213ba:	f84a 2b04 	str.w	r2, [sl], #4
 80213be:	f853 2b04 	ldr.w	r2, [r3], #4
 80213c2:	4298      	cmp	r0, r3
 80213c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80213c8:	d8f2      	bhi.n	80213b0 <__lshift+0x70>
 80213ca:	1b03      	subs	r3, r0, r4
 80213cc:	3b15      	subs	r3, #21
 80213ce:	f023 0303 	bic.w	r3, r3, #3
 80213d2:	3304      	adds	r3, #4
 80213d4:	f104 0215 	add.w	r2, r4, #21
 80213d8:	4290      	cmp	r0, r2
 80213da:	bf38      	it	cc
 80213dc:	2304      	movcc	r3, #4
 80213de:	f841 c003 	str.w	ip, [r1, r3]
 80213e2:	f1bc 0f00 	cmp.w	ip, #0
 80213e6:	d001      	beq.n	80213ec <__lshift+0xac>
 80213e8:	f108 0602 	add.w	r6, r8, #2
 80213ec:	3e01      	subs	r6, #1
 80213ee:	4638      	mov	r0, r7
 80213f0:	612e      	str	r6, [r5, #16]
 80213f2:	4621      	mov	r1, r4
 80213f4:	f7ff fdd2 	bl	8020f9c <_Bfree>
 80213f8:	4628      	mov	r0, r5
 80213fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8021402:	3301      	adds	r3, #1
 8021404:	e7c1      	b.n	802138a <__lshift+0x4a>
 8021406:	3904      	subs	r1, #4
 8021408:	f853 2b04 	ldr.w	r2, [r3], #4
 802140c:	f841 2f04 	str.w	r2, [r1, #4]!
 8021410:	4298      	cmp	r0, r3
 8021412:	d8f9      	bhi.n	8021408 <__lshift+0xc8>
 8021414:	e7ea      	b.n	80213ec <__lshift+0xac>
 8021416:	bf00      	nop
 8021418:	08022717 	.word	0x08022717
 802141c:	08022788 	.word	0x08022788

08021420 <__mcmp>:
 8021420:	b530      	push	{r4, r5, lr}
 8021422:	6902      	ldr	r2, [r0, #16]
 8021424:	690c      	ldr	r4, [r1, #16]
 8021426:	1b12      	subs	r2, r2, r4
 8021428:	d10e      	bne.n	8021448 <__mcmp+0x28>
 802142a:	f100 0314 	add.w	r3, r0, #20
 802142e:	3114      	adds	r1, #20
 8021430:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021434:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021438:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802143c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021440:	42a5      	cmp	r5, r4
 8021442:	d003      	beq.n	802144c <__mcmp+0x2c>
 8021444:	d305      	bcc.n	8021452 <__mcmp+0x32>
 8021446:	2201      	movs	r2, #1
 8021448:	4610      	mov	r0, r2
 802144a:	bd30      	pop	{r4, r5, pc}
 802144c:	4283      	cmp	r3, r0
 802144e:	d3f3      	bcc.n	8021438 <__mcmp+0x18>
 8021450:	e7fa      	b.n	8021448 <__mcmp+0x28>
 8021452:	f04f 32ff 	mov.w	r2, #4294967295
 8021456:	e7f7      	b.n	8021448 <__mcmp+0x28>

08021458 <__mdiff>:
 8021458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802145c:	460c      	mov	r4, r1
 802145e:	4606      	mov	r6, r0
 8021460:	4611      	mov	r1, r2
 8021462:	4620      	mov	r0, r4
 8021464:	4690      	mov	r8, r2
 8021466:	f7ff ffdb 	bl	8021420 <__mcmp>
 802146a:	1e05      	subs	r5, r0, #0
 802146c:	d110      	bne.n	8021490 <__mdiff+0x38>
 802146e:	4629      	mov	r1, r5
 8021470:	4630      	mov	r0, r6
 8021472:	f7ff fd53 	bl	8020f1c <_Balloc>
 8021476:	b930      	cbnz	r0, 8021486 <__mdiff+0x2e>
 8021478:	4b3a      	ldr	r3, [pc, #232]	; (8021564 <__mdiff+0x10c>)
 802147a:	4602      	mov	r2, r0
 802147c:	f240 2132 	movw	r1, #562	; 0x232
 8021480:	4839      	ldr	r0, [pc, #228]	; (8021568 <__mdiff+0x110>)
 8021482:	f000 fbcd 	bl	8021c20 <__assert_func>
 8021486:	2301      	movs	r3, #1
 8021488:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802148c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021490:	bfa4      	itt	ge
 8021492:	4643      	movge	r3, r8
 8021494:	46a0      	movge	r8, r4
 8021496:	4630      	mov	r0, r6
 8021498:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802149c:	bfa6      	itte	ge
 802149e:	461c      	movge	r4, r3
 80214a0:	2500      	movge	r5, #0
 80214a2:	2501      	movlt	r5, #1
 80214a4:	f7ff fd3a 	bl	8020f1c <_Balloc>
 80214a8:	b920      	cbnz	r0, 80214b4 <__mdiff+0x5c>
 80214aa:	4b2e      	ldr	r3, [pc, #184]	; (8021564 <__mdiff+0x10c>)
 80214ac:	4602      	mov	r2, r0
 80214ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80214b2:	e7e5      	b.n	8021480 <__mdiff+0x28>
 80214b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80214b8:	6926      	ldr	r6, [r4, #16]
 80214ba:	60c5      	str	r5, [r0, #12]
 80214bc:	f104 0914 	add.w	r9, r4, #20
 80214c0:	f108 0514 	add.w	r5, r8, #20
 80214c4:	f100 0e14 	add.w	lr, r0, #20
 80214c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80214cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80214d0:	f108 0210 	add.w	r2, r8, #16
 80214d4:	46f2      	mov	sl, lr
 80214d6:	2100      	movs	r1, #0
 80214d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80214dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80214e0:	fa1f f883 	uxth.w	r8, r3
 80214e4:	fa11 f18b 	uxtah	r1, r1, fp
 80214e8:	0c1b      	lsrs	r3, r3, #16
 80214ea:	eba1 0808 	sub.w	r8, r1, r8
 80214ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80214f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80214f6:	fa1f f888 	uxth.w	r8, r8
 80214fa:	1419      	asrs	r1, r3, #16
 80214fc:	454e      	cmp	r6, r9
 80214fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021502:	f84a 3b04 	str.w	r3, [sl], #4
 8021506:	d8e7      	bhi.n	80214d8 <__mdiff+0x80>
 8021508:	1b33      	subs	r3, r6, r4
 802150a:	3b15      	subs	r3, #21
 802150c:	f023 0303 	bic.w	r3, r3, #3
 8021510:	3304      	adds	r3, #4
 8021512:	3415      	adds	r4, #21
 8021514:	42a6      	cmp	r6, r4
 8021516:	bf38      	it	cc
 8021518:	2304      	movcc	r3, #4
 802151a:	441d      	add	r5, r3
 802151c:	4473      	add	r3, lr
 802151e:	469e      	mov	lr, r3
 8021520:	462e      	mov	r6, r5
 8021522:	4566      	cmp	r6, ip
 8021524:	d30e      	bcc.n	8021544 <__mdiff+0xec>
 8021526:	f10c 0203 	add.w	r2, ip, #3
 802152a:	1b52      	subs	r2, r2, r5
 802152c:	f022 0203 	bic.w	r2, r2, #3
 8021530:	3d03      	subs	r5, #3
 8021532:	45ac      	cmp	ip, r5
 8021534:	bf38      	it	cc
 8021536:	2200      	movcc	r2, #0
 8021538:	441a      	add	r2, r3
 802153a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802153e:	b17b      	cbz	r3, 8021560 <__mdiff+0x108>
 8021540:	6107      	str	r7, [r0, #16]
 8021542:	e7a3      	b.n	802148c <__mdiff+0x34>
 8021544:	f856 8b04 	ldr.w	r8, [r6], #4
 8021548:	fa11 f288 	uxtah	r2, r1, r8
 802154c:	1414      	asrs	r4, r2, #16
 802154e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8021552:	b292      	uxth	r2, r2
 8021554:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021558:	f84e 2b04 	str.w	r2, [lr], #4
 802155c:	1421      	asrs	r1, r4, #16
 802155e:	e7e0      	b.n	8021522 <__mdiff+0xca>
 8021560:	3f01      	subs	r7, #1
 8021562:	e7ea      	b.n	802153a <__mdiff+0xe2>
 8021564:	08022717 	.word	0x08022717
 8021568:	08022788 	.word	0x08022788

0802156c <__d2b>:
 802156c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021570:	4689      	mov	r9, r1
 8021572:	2101      	movs	r1, #1
 8021574:	ec57 6b10 	vmov	r6, r7, d0
 8021578:	4690      	mov	r8, r2
 802157a:	f7ff fccf 	bl	8020f1c <_Balloc>
 802157e:	4604      	mov	r4, r0
 8021580:	b930      	cbnz	r0, 8021590 <__d2b+0x24>
 8021582:	4602      	mov	r2, r0
 8021584:	4b25      	ldr	r3, [pc, #148]	; (802161c <__d2b+0xb0>)
 8021586:	4826      	ldr	r0, [pc, #152]	; (8021620 <__d2b+0xb4>)
 8021588:	f240 310a 	movw	r1, #778	; 0x30a
 802158c:	f000 fb48 	bl	8021c20 <__assert_func>
 8021590:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021594:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021598:	bb35      	cbnz	r5, 80215e8 <__d2b+0x7c>
 802159a:	2e00      	cmp	r6, #0
 802159c:	9301      	str	r3, [sp, #4]
 802159e:	d028      	beq.n	80215f2 <__d2b+0x86>
 80215a0:	4668      	mov	r0, sp
 80215a2:	9600      	str	r6, [sp, #0]
 80215a4:	f7ff fd82 	bl	80210ac <__lo0bits>
 80215a8:	9900      	ldr	r1, [sp, #0]
 80215aa:	b300      	cbz	r0, 80215ee <__d2b+0x82>
 80215ac:	9a01      	ldr	r2, [sp, #4]
 80215ae:	f1c0 0320 	rsb	r3, r0, #32
 80215b2:	fa02 f303 	lsl.w	r3, r2, r3
 80215b6:	430b      	orrs	r3, r1
 80215b8:	40c2      	lsrs	r2, r0
 80215ba:	6163      	str	r3, [r4, #20]
 80215bc:	9201      	str	r2, [sp, #4]
 80215be:	9b01      	ldr	r3, [sp, #4]
 80215c0:	61a3      	str	r3, [r4, #24]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	bf14      	ite	ne
 80215c6:	2202      	movne	r2, #2
 80215c8:	2201      	moveq	r2, #1
 80215ca:	6122      	str	r2, [r4, #16]
 80215cc:	b1d5      	cbz	r5, 8021604 <__d2b+0x98>
 80215ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80215d2:	4405      	add	r5, r0
 80215d4:	f8c9 5000 	str.w	r5, [r9]
 80215d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80215dc:	f8c8 0000 	str.w	r0, [r8]
 80215e0:	4620      	mov	r0, r4
 80215e2:	b003      	add	sp, #12
 80215e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80215e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80215ec:	e7d5      	b.n	802159a <__d2b+0x2e>
 80215ee:	6161      	str	r1, [r4, #20]
 80215f0:	e7e5      	b.n	80215be <__d2b+0x52>
 80215f2:	a801      	add	r0, sp, #4
 80215f4:	f7ff fd5a 	bl	80210ac <__lo0bits>
 80215f8:	9b01      	ldr	r3, [sp, #4]
 80215fa:	6163      	str	r3, [r4, #20]
 80215fc:	2201      	movs	r2, #1
 80215fe:	6122      	str	r2, [r4, #16]
 8021600:	3020      	adds	r0, #32
 8021602:	e7e3      	b.n	80215cc <__d2b+0x60>
 8021604:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021608:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802160c:	f8c9 0000 	str.w	r0, [r9]
 8021610:	6918      	ldr	r0, [r3, #16]
 8021612:	f7ff fd2b 	bl	802106c <__hi0bits>
 8021616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802161a:	e7df      	b.n	80215dc <__d2b+0x70>
 802161c:	08022717 	.word	0x08022717
 8021620:	08022788 	.word	0x08022788

08021624 <_calloc_r>:
 8021624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021626:	fba1 2402 	umull	r2, r4, r1, r2
 802162a:	b94c      	cbnz	r4, 8021640 <_calloc_r+0x1c>
 802162c:	4611      	mov	r1, r2
 802162e:	9201      	str	r2, [sp, #4]
 8021630:	f000 f87a 	bl	8021728 <_malloc_r>
 8021634:	9a01      	ldr	r2, [sp, #4]
 8021636:	4605      	mov	r5, r0
 8021638:	b930      	cbnz	r0, 8021648 <_calloc_r+0x24>
 802163a:	4628      	mov	r0, r5
 802163c:	b003      	add	sp, #12
 802163e:	bd30      	pop	{r4, r5, pc}
 8021640:	220c      	movs	r2, #12
 8021642:	6002      	str	r2, [r0, #0]
 8021644:	2500      	movs	r5, #0
 8021646:	e7f8      	b.n	802163a <_calloc_r+0x16>
 8021648:	4621      	mov	r1, r4
 802164a:	f7fd fdeb 	bl	801f224 <memset>
 802164e:	e7f4      	b.n	802163a <_calloc_r+0x16>

08021650 <_free_r>:
 8021650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021652:	2900      	cmp	r1, #0
 8021654:	d044      	beq.n	80216e0 <_free_r+0x90>
 8021656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802165a:	9001      	str	r0, [sp, #4]
 802165c:	2b00      	cmp	r3, #0
 802165e:	f1a1 0404 	sub.w	r4, r1, #4
 8021662:	bfb8      	it	lt
 8021664:	18e4      	addlt	r4, r4, r3
 8021666:	f000 fb61 	bl	8021d2c <__malloc_lock>
 802166a:	4a1e      	ldr	r2, [pc, #120]	; (80216e4 <_free_r+0x94>)
 802166c:	9801      	ldr	r0, [sp, #4]
 802166e:	6813      	ldr	r3, [r2, #0]
 8021670:	b933      	cbnz	r3, 8021680 <_free_r+0x30>
 8021672:	6063      	str	r3, [r4, #4]
 8021674:	6014      	str	r4, [r2, #0]
 8021676:	b003      	add	sp, #12
 8021678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802167c:	f000 bb5c 	b.w	8021d38 <__malloc_unlock>
 8021680:	42a3      	cmp	r3, r4
 8021682:	d908      	bls.n	8021696 <_free_r+0x46>
 8021684:	6825      	ldr	r5, [r4, #0]
 8021686:	1961      	adds	r1, r4, r5
 8021688:	428b      	cmp	r3, r1
 802168a:	bf01      	itttt	eq
 802168c:	6819      	ldreq	r1, [r3, #0]
 802168e:	685b      	ldreq	r3, [r3, #4]
 8021690:	1949      	addeq	r1, r1, r5
 8021692:	6021      	streq	r1, [r4, #0]
 8021694:	e7ed      	b.n	8021672 <_free_r+0x22>
 8021696:	461a      	mov	r2, r3
 8021698:	685b      	ldr	r3, [r3, #4]
 802169a:	b10b      	cbz	r3, 80216a0 <_free_r+0x50>
 802169c:	42a3      	cmp	r3, r4
 802169e:	d9fa      	bls.n	8021696 <_free_r+0x46>
 80216a0:	6811      	ldr	r1, [r2, #0]
 80216a2:	1855      	adds	r5, r2, r1
 80216a4:	42a5      	cmp	r5, r4
 80216a6:	d10b      	bne.n	80216c0 <_free_r+0x70>
 80216a8:	6824      	ldr	r4, [r4, #0]
 80216aa:	4421      	add	r1, r4
 80216ac:	1854      	adds	r4, r2, r1
 80216ae:	42a3      	cmp	r3, r4
 80216b0:	6011      	str	r1, [r2, #0]
 80216b2:	d1e0      	bne.n	8021676 <_free_r+0x26>
 80216b4:	681c      	ldr	r4, [r3, #0]
 80216b6:	685b      	ldr	r3, [r3, #4]
 80216b8:	6053      	str	r3, [r2, #4]
 80216ba:	4421      	add	r1, r4
 80216bc:	6011      	str	r1, [r2, #0]
 80216be:	e7da      	b.n	8021676 <_free_r+0x26>
 80216c0:	d902      	bls.n	80216c8 <_free_r+0x78>
 80216c2:	230c      	movs	r3, #12
 80216c4:	6003      	str	r3, [r0, #0]
 80216c6:	e7d6      	b.n	8021676 <_free_r+0x26>
 80216c8:	6825      	ldr	r5, [r4, #0]
 80216ca:	1961      	adds	r1, r4, r5
 80216cc:	428b      	cmp	r3, r1
 80216ce:	bf04      	itt	eq
 80216d0:	6819      	ldreq	r1, [r3, #0]
 80216d2:	685b      	ldreq	r3, [r3, #4]
 80216d4:	6063      	str	r3, [r4, #4]
 80216d6:	bf04      	itt	eq
 80216d8:	1949      	addeq	r1, r1, r5
 80216da:	6021      	streq	r1, [r4, #0]
 80216dc:	6054      	str	r4, [r2, #4]
 80216de:	e7ca      	b.n	8021676 <_free_r+0x26>
 80216e0:	b003      	add	sp, #12
 80216e2:	bd30      	pop	{r4, r5, pc}
 80216e4:	2000e0e8 	.word	0x2000e0e8

080216e8 <sbrk_aligned>:
 80216e8:	b570      	push	{r4, r5, r6, lr}
 80216ea:	4e0e      	ldr	r6, [pc, #56]	; (8021724 <sbrk_aligned+0x3c>)
 80216ec:	460c      	mov	r4, r1
 80216ee:	6831      	ldr	r1, [r6, #0]
 80216f0:	4605      	mov	r5, r0
 80216f2:	b911      	cbnz	r1, 80216fa <sbrk_aligned+0x12>
 80216f4:	f000 fa2e 	bl	8021b54 <_sbrk_r>
 80216f8:	6030      	str	r0, [r6, #0]
 80216fa:	4621      	mov	r1, r4
 80216fc:	4628      	mov	r0, r5
 80216fe:	f000 fa29 	bl	8021b54 <_sbrk_r>
 8021702:	1c43      	adds	r3, r0, #1
 8021704:	d00a      	beq.n	802171c <sbrk_aligned+0x34>
 8021706:	1cc4      	adds	r4, r0, #3
 8021708:	f024 0403 	bic.w	r4, r4, #3
 802170c:	42a0      	cmp	r0, r4
 802170e:	d007      	beq.n	8021720 <sbrk_aligned+0x38>
 8021710:	1a21      	subs	r1, r4, r0
 8021712:	4628      	mov	r0, r5
 8021714:	f000 fa1e 	bl	8021b54 <_sbrk_r>
 8021718:	3001      	adds	r0, #1
 802171a:	d101      	bne.n	8021720 <sbrk_aligned+0x38>
 802171c:	f04f 34ff 	mov.w	r4, #4294967295
 8021720:	4620      	mov	r0, r4
 8021722:	bd70      	pop	{r4, r5, r6, pc}
 8021724:	2000e0ec 	.word	0x2000e0ec

08021728 <_malloc_r>:
 8021728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802172c:	1ccd      	adds	r5, r1, #3
 802172e:	f025 0503 	bic.w	r5, r5, #3
 8021732:	3508      	adds	r5, #8
 8021734:	2d0c      	cmp	r5, #12
 8021736:	bf38      	it	cc
 8021738:	250c      	movcc	r5, #12
 802173a:	2d00      	cmp	r5, #0
 802173c:	4607      	mov	r7, r0
 802173e:	db01      	blt.n	8021744 <_malloc_r+0x1c>
 8021740:	42a9      	cmp	r1, r5
 8021742:	d905      	bls.n	8021750 <_malloc_r+0x28>
 8021744:	230c      	movs	r3, #12
 8021746:	603b      	str	r3, [r7, #0]
 8021748:	2600      	movs	r6, #0
 802174a:	4630      	mov	r0, r6
 802174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021750:	4e2e      	ldr	r6, [pc, #184]	; (802180c <_malloc_r+0xe4>)
 8021752:	f000 faeb 	bl	8021d2c <__malloc_lock>
 8021756:	6833      	ldr	r3, [r6, #0]
 8021758:	461c      	mov	r4, r3
 802175a:	bb34      	cbnz	r4, 80217aa <_malloc_r+0x82>
 802175c:	4629      	mov	r1, r5
 802175e:	4638      	mov	r0, r7
 8021760:	f7ff ffc2 	bl	80216e8 <sbrk_aligned>
 8021764:	1c43      	adds	r3, r0, #1
 8021766:	4604      	mov	r4, r0
 8021768:	d14d      	bne.n	8021806 <_malloc_r+0xde>
 802176a:	6834      	ldr	r4, [r6, #0]
 802176c:	4626      	mov	r6, r4
 802176e:	2e00      	cmp	r6, #0
 8021770:	d140      	bne.n	80217f4 <_malloc_r+0xcc>
 8021772:	6823      	ldr	r3, [r4, #0]
 8021774:	4631      	mov	r1, r6
 8021776:	4638      	mov	r0, r7
 8021778:	eb04 0803 	add.w	r8, r4, r3
 802177c:	f000 f9ea 	bl	8021b54 <_sbrk_r>
 8021780:	4580      	cmp	r8, r0
 8021782:	d13a      	bne.n	80217fa <_malloc_r+0xd2>
 8021784:	6821      	ldr	r1, [r4, #0]
 8021786:	3503      	adds	r5, #3
 8021788:	1a6d      	subs	r5, r5, r1
 802178a:	f025 0503 	bic.w	r5, r5, #3
 802178e:	3508      	adds	r5, #8
 8021790:	2d0c      	cmp	r5, #12
 8021792:	bf38      	it	cc
 8021794:	250c      	movcc	r5, #12
 8021796:	4629      	mov	r1, r5
 8021798:	4638      	mov	r0, r7
 802179a:	f7ff ffa5 	bl	80216e8 <sbrk_aligned>
 802179e:	3001      	adds	r0, #1
 80217a0:	d02b      	beq.n	80217fa <_malloc_r+0xd2>
 80217a2:	6823      	ldr	r3, [r4, #0]
 80217a4:	442b      	add	r3, r5
 80217a6:	6023      	str	r3, [r4, #0]
 80217a8:	e00e      	b.n	80217c8 <_malloc_r+0xa0>
 80217aa:	6822      	ldr	r2, [r4, #0]
 80217ac:	1b52      	subs	r2, r2, r5
 80217ae:	d41e      	bmi.n	80217ee <_malloc_r+0xc6>
 80217b0:	2a0b      	cmp	r2, #11
 80217b2:	d916      	bls.n	80217e2 <_malloc_r+0xba>
 80217b4:	1961      	adds	r1, r4, r5
 80217b6:	42a3      	cmp	r3, r4
 80217b8:	6025      	str	r5, [r4, #0]
 80217ba:	bf18      	it	ne
 80217bc:	6059      	strne	r1, [r3, #4]
 80217be:	6863      	ldr	r3, [r4, #4]
 80217c0:	bf08      	it	eq
 80217c2:	6031      	streq	r1, [r6, #0]
 80217c4:	5162      	str	r2, [r4, r5]
 80217c6:	604b      	str	r3, [r1, #4]
 80217c8:	4638      	mov	r0, r7
 80217ca:	f104 060b 	add.w	r6, r4, #11
 80217ce:	f000 fab3 	bl	8021d38 <__malloc_unlock>
 80217d2:	f026 0607 	bic.w	r6, r6, #7
 80217d6:	1d23      	adds	r3, r4, #4
 80217d8:	1af2      	subs	r2, r6, r3
 80217da:	d0b6      	beq.n	802174a <_malloc_r+0x22>
 80217dc:	1b9b      	subs	r3, r3, r6
 80217de:	50a3      	str	r3, [r4, r2]
 80217e0:	e7b3      	b.n	802174a <_malloc_r+0x22>
 80217e2:	6862      	ldr	r2, [r4, #4]
 80217e4:	42a3      	cmp	r3, r4
 80217e6:	bf0c      	ite	eq
 80217e8:	6032      	streq	r2, [r6, #0]
 80217ea:	605a      	strne	r2, [r3, #4]
 80217ec:	e7ec      	b.n	80217c8 <_malloc_r+0xa0>
 80217ee:	4623      	mov	r3, r4
 80217f0:	6864      	ldr	r4, [r4, #4]
 80217f2:	e7b2      	b.n	802175a <_malloc_r+0x32>
 80217f4:	4634      	mov	r4, r6
 80217f6:	6876      	ldr	r6, [r6, #4]
 80217f8:	e7b9      	b.n	802176e <_malloc_r+0x46>
 80217fa:	230c      	movs	r3, #12
 80217fc:	603b      	str	r3, [r7, #0]
 80217fe:	4638      	mov	r0, r7
 8021800:	f000 fa9a 	bl	8021d38 <__malloc_unlock>
 8021804:	e7a1      	b.n	802174a <_malloc_r+0x22>
 8021806:	6025      	str	r5, [r4, #0]
 8021808:	e7de      	b.n	80217c8 <_malloc_r+0xa0>
 802180a:	bf00      	nop
 802180c:	2000e0e8 	.word	0x2000e0e8

08021810 <__sfputc_r>:
 8021810:	6893      	ldr	r3, [r2, #8]
 8021812:	3b01      	subs	r3, #1
 8021814:	2b00      	cmp	r3, #0
 8021816:	b410      	push	{r4}
 8021818:	6093      	str	r3, [r2, #8]
 802181a:	da08      	bge.n	802182e <__sfputc_r+0x1e>
 802181c:	6994      	ldr	r4, [r2, #24]
 802181e:	42a3      	cmp	r3, r4
 8021820:	db01      	blt.n	8021826 <__sfputc_r+0x16>
 8021822:	290a      	cmp	r1, #10
 8021824:	d103      	bne.n	802182e <__sfputc_r+0x1e>
 8021826:	f85d 4b04 	ldr.w	r4, [sp], #4
 802182a:	f7fe ba11 	b.w	801fc50 <__swbuf_r>
 802182e:	6813      	ldr	r3, [r2, #0]
 8021830:	1c58      	adds	r0, r3, #1
 8021832:	6010      	str	r0, [r2, #0]
 8021834:	7019      	strb	r1, [r3, #0]
 8021836:	4608      	mov	r0, r1
 8021838:	f85d 4b04 	ldr.w	r4, [sp], #4
 802183c:	4770      	bx	lr

0802183e <__sfputs_r>:
 802183e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021840:	4606      	mov	r6, r0
 8021842:	460f      	mov	r7, r1
 8021844:	4614      	mov	r4, r2
 8021846:	18d5      	adds	r5, r2, r3
 8021848:	42ac      	cmp	r4, r5
 802184a:	d101      	bne.n	8021850 <__sfputs_r+0x12>
 802184c:	2000      	movs	r0, #0
 802184e:	e007      	b.n	8021860 <__sfputs_r+0x22>
 8021850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021854:	463a      	mov	r2, r7
 8021856:	4630      	mov	r0, r6
 8021858:	f7ff ffda 	bl	8021810 <__sfputc_r>
 802185c:	1c43      	adds	r3, r0, #1
 802185e:	d1f3      	bne.n	8021848 <__sfputs_r+0xa>
 8021860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021864 <_vfiprintf_r>:
 8021864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021868:	460d      	mov	r5, r1
 802186a:	b09d      	sub	sp, #116	; 0x74
 802186c:	4614      	mov	r4, r2
 802186e:	4698      	mov	r8, r3
 8021870:	4606      	mov	r6, r0
 8021872:	b118      	cbz	r0, 802187c <_vfiprintf_r+0x18>
 8021874:	6983      	ldr	r3, [r0, #24]
 8021876:	b90b      	cbnz	r3, 802187c <_vfiprintf_r+0x18>
 8021878:	f7ff fa3e 	bl	8020cf8 <__sinit>
 802187c:	4b89      	ldr	r3, [pc, #548]	; (8021aa4 <_vfiprintf_r+0x240>)
 802187e:	429d      	cmp	r5, r3
 8021880:	d11b      	bne.n	80218ba <_vfiprintf_r+0x56>
 8021882:	6875      	ldr	r5, [r6, #4]
 8021884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021886:	07d9      	lsls	r1, r3, #31
 8021888:	d405      	bmi.n	8021896 <_vfiprintf_r+0x32>
 802188a:	89ab      	ldrh	r3, [r5, #12]
 802188c:	059a      	lsls	r2, r3, #22
 802188e:	d402      	bmi.n	8021896 <_vfiprintf_r+0x32>
 8021890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021892:	f7ff fad4 	bl	8020e3e <__retarget_lock_acquire_recursive>
 8021896:	89ab      	ldrh	r3, [r5, #12]
 8021898:	071b      	lsls	r3, r3, #28
 802189a:	d501      	bpl.n	80218a0 <_vfiprintf_r+0x3c>
 802189c:	692b      	ldr	r3, [r5, #16]
 802189e:	b9eb      	cbnz	r3, 80218dc <_vfiprintf_r+0x78>
 80218a0:	4629      	mov	r1, r5
 80218a2:	4630      	mov	r0, r6
 80218a4:	f7fe fa26 	bl	801fcf4 <__swsetup_r>
 80218a8:	b1c0      	cbz	r0, 80218dc <_vfiprintf_r+0x78>
 80218aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80218ac:	07dc      	lsls	r4, r3, #31
 80218ae:	d50e      	bpl.n	80218ce <_vfiprintf_r+0x6a>
 80218b0:	f04f 30ff 	mov.w	r0, #4294967295
 80218b4:	b01d      	add	sp, #116	; 0x74
 80218b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218ba:	4b7b      	ldr	r3, [pc, #492]	; (8021aa8 <_vfiprintf_r+0x244>)
 80218bc:	429d      	cmp	r5, r3
 80218be:	d101      	bne.n	80218c4 <_vfiprintf_r+0x60>
 80218c0:	68b5      	ldr	r5, [r6, #8]
 80218c2:	e7df      	b.n	8021884 <_vfiprintf_r+0x20>
 80218c4:	4b79      	ldr	r3, [pc, #484]	; (8021aac <_vfiprintf_r+0x248>)
 80218c6:	429d      	cmp	r5, r3
 80218c8:	bf08      	it	eq
 80218ca:	68f5      	ldreq	r5, [r6, #12]
 80218cc:	e7da      	b.n	8021884 <_vfiprintf_r+0x20>
 80218ce:	89ab      	ldrh	r3, [r5, #12]
 80218d0:	0598      	lsls	r0, r3, #22
 80218d2:	d4ed      	bmi.n	80218b0 <_vfiprintf_r+0x4c>
 80218d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80218d6:	f7ff fab3 	bl	8020e40 <__retarget_lock_release_recursive>
 80218da:	e7e9      	b.n	80218b0 <_vfiprintf_r+0x4c>
 80218dc:	2300      	movs	r3, #0
 80218de:	9309      	str	r3, [sp, #36]	; 0x24
 80218e0:	2320      	movs	r3, #32
 80218e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80218e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80218ea:	2330      	movs	r3, #48	; 0x30
 80218ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021ab0 <_vfiprintf_r+0x24c>
 80218f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80218f4:	f04f 0901 	mov.w	r9, #1
 80218f8:	4623      	mov	r3, r4
 80218fa:	469a      	mov	sl, r3
 80218fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021900:	b10a      	cbz	r2, 8021906 <_vfiprintf_r+0xa2>
 8021902:	2a25      	cmp	r2, #37	; 0x25
 8021904:	d1f9      	bne.n	80218fa <_vfiprintf_r+0x96>
 8021906:	ebba 0b04 	subs.w	fp, sl, r4
 802190a:	d00b      	beq.n	8021924 <_vfiprintf_r+0xc0>
 802190c:	465b      	mov	r3, fp
 802190e:	4622      	mov	r2, r4
 8021910:	4629      	mov	r1, r5
 8021912:	4630      	mov	r0, r6
 8021914:	f7ff ff93 	bl	802183e <__sfputs_r>
 8021918:	3001      	adds	r0, #1
 802191a:	f000 80aa 	beq.w	8021a72 <_vfiprintf_r+0x20e>
 802191e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021920:	445a      	add	r2, fp
 8021922:	9209      	str	r2, [sp, #36]	; 0x24
 8021924:	f89a 3000 	ldrb.w	r3, [sl]
 8021928:	2b00      	cmp	r3, #0
 802192a:	f000 80a2 	beq.w	8021a72 <_vfiprintf_r+0x20e>
 802192e:	2300      	movs	r3, #0
 8021930:	f04f 32ff 	mov.w	r2, #4294967295
 8021934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021938:	f10a 0a01 	add.w	sl, sl, #1
 802193c:	9304      	str	r3, [sp, #16]
 802193e:	9307      	str	r3, [sp, #28]
 8021940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021944:	931a      	str	r3, [sp, #104]	; 0x68
 8021946:	4654      	mov	r4, sl
 8021948:	2205      	movs	r2, #5
 802194a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802194e:	4858      	ldr	r0, [pc, #352]	; (8021ab0 <_vfiprintf_r+0x24c>)
 8021950:	f7de fc6e 	bl	8000230 <memchr>
 8021954:	9a04      	ldr	r2, [sp, #16]
 8021956:	b9d8      	cbnz	r0, 8021990 <_vfiprintf_r+0x12c>
 8021958:	06d1      	lsls	r1, r2, #27
 802195a:	bf44      	itt	mi
 802195c:	2320      	movmi	r3, #32
 802195e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021962:	0713      	lsls	r3, r2, #28
 8021964:	bf44      	itt	mi
 8021966:	232b      	movmi	r3, #43	; 0x2b
 8021968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802196c:	f89a 3000 	ldrb.w	r3, [sl]
 8021970:	2b2a      	cmp	r3, #42	; 0x2a
 8021972:	d015      	beq.n	80219a0 <_vfiprintf_r+0x13c>
 8021974:	9a07      	ldr	r2, [sp, #28]
 8021976:	4654      	mov	r4, sl
 8021978:	2000      	movs	r0, #0
 802197a:	f04f 0c0a 	mov.w	ip, #10
 802197e:	4621      	mov	r1, r4
 8021980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021984:	3b30      	subs	r3, #48	; 0x30
 8021986:	2b09      	cmp	r3, #9
 8021988:	d94e      	bls.n	8021a28 <_vfiprintf_r+0x1c4>
 802198a:	b1b0      	cbz	r0, 80219ba <_vfiprintf_r+0x156>
 802198c:	9207      	str	r2, [sp, #28]
 802198e:	e014      	b.n	80219ba <_vfiprintf_r+0x156>
 8021990:	eba0 0308 	sub.w	r3, r0, r8
 8021994:	fa09 f303 	lsl.w	r3, r9, r3
 8021998:	4313      	orrs	r3, r2
 802199a:	9304      	str	r3, [sp, #16]
 802199c:	46a2      	mov	sl, r4
 802199e:	e7d2      	b.n	8021946 <_vfiprintf_r+0xe2>
 80219a0:	9b03      	ldr	r3, [sp, #12]
 80219a2:	1d19      	adds	r1, r3, #4
 80219a4:	681b      	ldr	r3, [r3, #0]
 80219a6:	9103      	str	r1, [sp, #12]
 80219a8:	2b00      	cmp	r3, #0
 80219aa:	bfbb      	ittet	lt
 80219ac:	425b      	neglt	r3, r3
 80219ae:	f042 0202 	orrlt.w	r2, r2, #2
 80219b2:	9307      	strge	r3, [sp, #28]
 80219b4:	9307      	strlt	r3, [sp, #28]
 80219b6:	bfb8      	it	lt
 80219b8:	9204      	strlt	r2, [sp, #16]
 80219ba:	7823      	ldrb	r3, [r4, #0]
 80219bc:	2b2e      	cmp	r3, #46	; 0x2e
 80219be:	d10c      	bne.n	80219da <_vfiprintf_r+0x176>
 80219c0:	7863      	ldrb	r3, [r4, #1]
 80219c2:	2b2a      	cmp	r3, #42	; 0x2a
 80219c4:	d135      	bne.n	8021a32 <_vfiprintf_r+0x1ce>
 80219c6:	9b03      	ldr	r3, [sp, #12]
 80219c8:	1d1a      	adds	r2, r3, #4
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	9203      	str	r2, [sp, #12]
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	bfb8      	it	lt
 80219d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80219d6:	3402      	adds	r4, #2
 80219d8:	9305      	str	r3, [sp, #20]
 80219da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021ac0 <_vfiprintf_r+0x25c>
 80219de:	7821      	ldrb	r1, [r4, #0]
 80219e0:	2203      	movs	r2, #3
 80219e2:	4650      	mov	r0, sl
 80219e4:	f7de fc24 	bl	8000230 <memchr>
 80219e8:	b140      	cbz	r0, 80219fc <_vfiprintf_r+0x198>
 80219ea:	2340      	movs	r3, #64	; 0x40
 80219ec:	eba0 000a 	sub.w	r0, r0, sl
 80219f0:	fa03 f000 	lsl.w	r0, r3, r0
 80219f4:	9b04      	ldr	r3, [sp, #16]
 80219f6:	4303      	orrs	r3, r0
 80219f8:	3401      	adds	r4, #1
 80219fa:	9304      	str	r3, [sp, #16]
 80219fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a00:	482c      	ldr	r0, [pc, #176]	; (8021ab4 <_vfiprintf_r+0x250>)
 8021a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021a06:	2206      	movs	r2, #6
 8021a08:	f7de fc12 	bl	8000230 <memchr>
 8021a0c:	2800      	cmp	r0, #0
 8021a0e:	d03f      	beq.n	8021a90 <_vfiprintf_r+0x22c>
 8021a10:	4b29      	ldr	r3, [pc, #164]	; (8021ab8 <_vfiprintf_r+0x254>)
 8021a12:	bb1b      	cbnz	r3, 8021a5c <_vfiprintf_r+0x1f8>
 8021a14:	9b03      	ldr	r3, [sp, #12]
 8021a16:	3307      	adds	r3, #7
 8021a18:	f023 0307 	bic.w	r3, r3, #7
 8021a1c:	3308      	adds	r3, #8
 8021a1e:	9303      	str	r3, [sp, #12]
 8021a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a22:	443b      	add	r3, r7
 8021a24:	9309      	str	r3, [sp, #36]	; 0x24
 8021a26:	e767      	b.n	80218f8 <_vfiprintf_r+0x94>
 8021a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8021a2c:	460c      	mov	r4, r1
 8021a2e:	2001      	movs	r0, #1
 8021a30:	e7a5      	b.n	802197e <_vfiprintf_r+0x11a>
 8021a32:	2300      	movs	r3, #0
 8021a34:	3401      	adds	r4, #1
 8021a36:	9305      	str	r3, [sp, #20]
 8021a38:	4619      	mov	r1, r3
 8021a3a:	f04f 0c0a 	mov.w	ip, #10
 8021a3e:	4620      	mov	r0, r4
 8021a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021a44:	3a30      	subs	r2, #48	; 0x30
 8021a46:	2a09      	cmp	r2, #9
 8021a48:	d903      	bls.n	8021a52 <_vfiprintf_r+0x1ee>
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d0c5      	beq.n	80219da <_vfiprintf_r+0x176>
 8021a4e:	9105      	str	r1, [sp, #20]
 8021a50:	e7c3      	b.n	80219da <_vfiprintf_r+0x176>
 8021a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8021a56:	4604      	mov	r4, r0
 8021a58:	2301      	movs	r3, #1
 8021a5a:	e7f0      	b.n	8021a3e <_vfiprintf_r+0x1da>
 8021a5c:	ab03      	add	r3, sp, #12
 8021a5e:	9300      	str	r3, [sp, #0]
 8021a60:	462a      	mov	r2, r5
 8021a62:	4b16      	ldr	r3, [pc, #88]	; (8021abc <_vfiprintf_r+0x258>)
 8021a64:	a904      	add	r1, sp, #16
 8021a66:	4630      	mov	r0, r6
 8021a68:	f7fd fc84 	bl	801f374 <_printf_float>
 8021a6c:	4607      	mov	r7, r0
 8021a6e:	1c78      	adds	r0, r7, #1
 8021a70:	d1d6      	bne.n	8021a20 <_vfiprintf_r+0x1bc>
 8021a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021a74:	07d9      	lsls	r1, r3, #31
 8021a76:	d405      	bmi.n	8021a84 <_vfiprintf_r+0x220>
 8021a78:	89ab      	ldrh	r3, [r5, #12]
 8021a7a:	059a      	lsls	r2, r3, #22
 8021a7c:	d402      	bmi.n	8021a84 <_vfiprintf_r+0x220>
 8021a7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021a80:	f7ff f9de 	bl	8020e40 <__retarget_lock_release_recursive>
 8021a84:	89ab      	ldrh	r3, [r5, #12]
 8021a86:	065b      	lsls	r3, r3, #25
 8021a88:	f53f af12 	bmi.w	80218b0 <_vfiprintf_r+0x4c>
 8021a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a8e:	e711      	b.n	80218b4 <_vfiprintf_r+0x50>
 8021a90:	ab03      	add	r3, sp, #12
 8021a92:	9300      	str	r3, [sp, #0]
 8021a94:	462a      	mov	r2, r5
 8021a96:	4b09      	ldr	r3, [pc, #36]	; (8021abc <_vfiprintf_r+0x258>)
 8021a98:	a904      	add	r1, sp, #16
 8021a9a:	4630      	mov	r0, r6
 8021a9c:	f7fd ff0e 	bl	801f8bc <_printf_i>
 8021aa0:	e7e4      	b.n	8021a6c <_vfiprintf_r+0x208>
 8021aa2:	bf00      	nop
 8021aa4:	08022748 	.word	0x08022748
 8021aa8:	08022768 	.word	0x08022768
 8021aac:	08022728 	.word	0x08022728
 8021ab0:	080228e4 	.word	0x080228e4
 8021ab4:	080228ee 	.word	0x080228ee
 8021ab8:	0801f375 	.word	0x0801f375
 8021abc:	0802183f 	.word	0x0802183f
 8021ac0:	080228ea 	.word	0x080228ea

08021ac4 <_putc_r>:
 8021ac4:	b570      	push	{r4, r5, r6, lr}
 8021ac6:	460d      	mov	r5, r1
 8021ac8:	4614      	mov	r4, r2
 8021aca:	4606      	mov	r6, r0
 8021acc:	b118      	cbz	r0, 8021ad6 <_putc_r+0x12>
 8021ace:	6983      	ldr	r3, [r0, #24]
 8021ad0:	b90b      	cbnz	r3, 8021ad6 <_putc_r+0x12>
 8021ad2:	f7ff f911 	bl	8020cf8 <__sinit>
 8021ad6:	4b1c      	ldr	r3, [pc, #112]	; (8021b48 <_putc_r+0x84>)
 8021ad8:	429c      	cmp	r4, r3
 8021ada:	d124      	bne.n	8021b26 <_putc_r+0x62>
 8021adc:	6874      	ldr	r4, [r6, #4]
 8021ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ae0:	07d8      	lsls	r0, r3, #31
 8021ae2:	d405      	bmi.n	8021af0 <_putc_r+0x2c>
 8021ae4:	89a3      	ldrh	r3, [r4, #12]
 8021ae6:	0599      	lsls	r1, r3, #22
 8021ae8:	d402      	bmi.n	8021af0 <_putc_r+0x2c>
 8021aea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021aec:	f7ff f9a7 	bl	8020e3e <__retarget_lock_acquire_recursive>
 8021af0:	68a3      	ldr	r3, [r4, #8]
 8021af2:	3b01      	subs	r3, #1
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	60a3      	str	r3, [r4, #8]
 8021af8:	da05      	bge.n	8021b06 <_putc_r+0x42>
 8021afa:	69a2      	ldr	r2, [r4, #24]
 8021afc:	4293      	cmp	r3, r2
 8021afe:	db1c      	blt.n	8021b3a <_putc_r+0x76>
 8021b00:	b2eb      	uxtb	r3, r5
 8021b02:	2b0a      	cmp	r3, #10
 8021b04:	d019      	beq.n	8021b3a <_putc_r+0x76>
 8021b06:	6823      	ldr	r3, [r4, #0]
 8021b08:	1c5a      	adds	r2, r3, #1
 8021b0a:	6022      	str	r2, [r4, #0]
 8021b0c:	701d      	strb	r5, [r3, #0]
 8021b0e:	b2ed      	uxtb	r5, r5
 8021b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021b12:	07da      	lsls	r2, r3, #31
 8021b14:	d405      	bmi.n	8021b22 <_putc_r+0x5e>
 8021b16:	89a3      	ldrh	r3, [r4, #12]
 8021b18:	059b      	lsls	r3, r3, #22
 8021b1a:	d402      	bmi.n	8021b22 <_putc_r+0x5e>
 8021b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021b1e:	f7ff f98f 	bl	8020e40 <__retarget_lock_release_recursive>
 8021b22:	4628      	mov	r0, r5
 8021b24:	bd70      	pop	{r4, r5, r6, pc}
 8021b26:	4b09      	ldr	r3, [pc, #36]	; (8021b4c <_putc_r+0x88>)
 8021b28:	429c      	cmp	r4, r3
 8021b2a:	d101      	bne.n	8021b30 <_putc_r+0x6c>
 8021b2c:	68b4      	ldr	r4, [r6, #8]
 8021b2e:	e7d6      	b.n	8021ade <_putc_r+0x1a>
 8021b30:	4b07      	ldr	r3, [pc, #28]	; (8021b50 <_putc_r+0x8c>)
 8021b32:	429c      	cmp	r4, r3
 8021b34:	bf08      	it	eq
 8021b36:	68f4      	ldreq	r4, [r6, #12]
 8021b38:	e7d1      	b.n	8021ade <_putc_r+0x1a>
 8021b3a:	4629      	mov	r1, r5
 8021b3c:	4622      	mov	r2, r4
 8021b3e:	4630      	mov	r0, r6
 8021b40:	f7fe f886 	bl	801fc50 <__swbuf_r>
 8021b44:	4605      	mov	r5, r0
 8021b46:	e7e3      	b.n	8021b10 <_putc_r+0x4c>
 8021b48:	08022748 	.word	0x08022748
 8021b4c:	08022768 	.word	0x08022768
 8021b50:	08022728 	.word	0x08022728

08021b54 <_sbrk_r>:
 8021b54:	b538      	push	{r3, r4, r5, lr}
 8021b56:	4d06      	ldr	r5, [pc, #24]	; (8021b70 <_sbrk_r+0x1c>)
 8021b58:	2300      	movs	r3, #0
 8021b5a:	4604      	mov	r4, r0
 8021b5c:	4608      	mov	r0, r1
 8021b5e:	602b      	str	r3, [r5, #0]
 8021b60:	f7f5 f89e 	bl	8016ca0 <_sbrk>
 8021b64:	1c43      	adds	r3, r0, #1
 8021b66:	d102      	bne.n	8021b6e <_sbrk_r+0x1a>
 8021b68:	682b      	ldr	r3, [r5, #0]
 8021b6a:	b103      	cbz	r3, 8021b6e <_sbrk_r+0x1a>
 8021b6c:	6023      	str	r3, [r4, #0]
 8021b6e:	bd38      	pop	{r3, r4, r5, pc}
 8021b70:	2000e0f0 	.word	0x2000e0f0

08021b74 <__sread>:
 8021b74:	b510      	push	{r4, lr}
 8021b76:	460c      	mov	r4, r1
 8021b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b7c:	f000 f8e2 	bl	8021d44 <_read_r>
 8021b80:	2800      	cmp	r0, #0
 8021b82:	bfab      	itete	ge
 8021b84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021b86:	89a3      	ldrhlt	r3, [r4, #12]
 8021b88:	181b      	addge	r3, r3, r0
 8021b8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021b8e:	bfac      	ite	ge
 8021b90:	6563      	strge	r3, [r4, #84]	; 0x54
 8021b92:	81a3      	strhlt	r3, [r4, #12]
 8021b94:	bd10      	pop	{r4, pc}

08021b96 <__swrite>:
 8021b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b9a:	461f      	mov	r7, r3
 8021b9c:	898b      	ldrh	r3, [r1, #12]
 8021b9e:	05db      	lsls	r3, r3, #23
 8021ba0:	4605      	mov	r5, r0
 8021ba2:	460c      	mov	r4, r1
 8021ba4:	4616      	mov	r6, r2
 8021ba6:	d505      	bpl.n	8021bb4 <__swrite+0x1e>
 8021ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bac:	2302      	movs	r3, #2
 8021bae:	2200      	movs	r2, #0
 8021bb0:	f000 f898 	bl	8021ce4 <_lseek_r>
 8021bb4:	89a3      	ldrh	r3, [r4, #12]
 8021bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021bbe:	81a3      	strh	r3, [r4, #12]
 8021bc0:	4632      	mov	r2, r6
 8021bc2:	463b      	mov	r3, r7
 8021bc4:	4628      	mov	r0, r5
 8021bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021bca:	f000 b817 	b.w	8021bfc <_write_r>

08021bce <__sseek>:
 8021bce:	b510      	push	{r4, lr}
 8021bd0:	460c      	mov	r4, r1
 8021bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bd6:	f000 f885 	bl	8021ce4 <_lseek_r>
 8021bda:	1c43      	adds	r3, r0, #1
 8021bdc:	89a3      	ldrh	r3, [r4, #12]
 8021bde:	bf15      	itete	ne
 8021be0:	6560      	strne	r0, [r4, #84]	; 0x54
 8021be2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021be6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021bea:	81a3      	strheq	r3, [r4, #12]
 8021bec:	bf18      	it	ne
 8021bee:	81a3      	strhne	r3, [r4, #12]
 8021bf0:	bd10      	pop	{r4, pc}

08021bf2 <__sclose>:
 8021bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bf6:	f000 b831 	b.w	8021c5c <_close_r>
	...

08021bfc <_write_r>:
 8021bfc:	b538      	push	{r3, r4, r5, lr}
 8021bfe:	4d07      	ldr	r5, [pc, #28]	; (8021c1c <_write_r+0x20>)
 8021c00:	4604      	mov	r4, r0
 8021c02:	4608      	mov	r0, r1
 8021c04:	4611      	mov	r1, r2
 8021c06:	2200      	movs	r2, #0
 8021c08:	602a      	str	r2, [r5, #0]
 8021c0a:	461a      	mov	r2, r3
 8021c0c:	f7f4 fff4 	bl	8016bf8 <_write>
 8021c10:	1c43      	adds	r3, r0, #1
 8021c12:	d102      	bne.n	8021c1a <_write_r+0x1e>
 8021c14:	682b      	ldr	r3, [r5, #0]
 8021c16:	b103      	cbz	r3, 8021c1a <_write_r+0x1e>
 8021c18:	6023      	str	r3, [r4, #0]
 8021c1a:	bd38      	pop	{r3, r4, r5, pc}
 8021c1c:	2000e0f0 	.word	0x2000e0f0

08021c20 <__assert_func>:
 8021c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021c22:	4614      	mov	r4, r2
 8021c24:	461a      	mov	r2, r3
 8021c26:	4b09      	ldr	r3, [pc, #36]	; (8021c4c <__assert_func+0x2c>)
 8021c28:	681b      	ldr	r3, [r3, #0]
 8021c2a:	4605      	mov	r5, r0
 8021c2c:	68d8      	ldr	r0, [r3, #12]
 8021c2e:	b14c      	cbz	r4, 8021c44 <__assert_func+0x24>
 8021c30:	4b07      	ldr	r3, [pc, #28]	; (8021c50 <__assert_func+0x30>)
 8021c32:	9100      	str	r1, [sp, #0]
 8021c34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021c38:	4906      	ldr	r1, [pc, #24]	; (8021c54 <__assert_func+0x34>)
 8021c3a:	462b      	mov	r3, r5
 8021c3c:	f000 f81e 	bl	8021c7c <fiprintf>
 8021c40:	f000 f89f 	bl	8021d82 <abort>
 8021c44:	4b04      	ldr	r3, [pc, #16]	; (8021c58 <__assert_func+0x38>)
 8021c46:	461c      	mov	r4, r3
 8021c48:	e7f3      	b.n	8021c32 <__assert_func+0x12>
 8021c4a:	bf00      	nop
 8021c4c:	2000002c 	.word	0x2000002c
 8021c50:	080228f5 	.word	0x080228f5
 8021c54:	08022902 	.word	0x08022902
 8021c58:	08022930 	.word	0x08022930

08021c5c <_close_r>:
 8021c5c:	b538      	push	{r3, r4, r5, lr}
 8021c5e:	4d06      	ldr	r5, [pc, #24]	; (8021c78 <_close_r+0x1c>)
 8021c60:	2300      	movs	r3, #0
 8021c62:	4604      	mov	r4, r0
 8021c64:	4608      	mov	r0, r1
 8021c66:	602b      	str	r3, [r5, #0]
 8021c68:	f7f4 ffe6 	bl	8016c38 <_close>
 8021c6c:	1c43      	adds	r3, r0, #1
 8021c6e:	d102      	bne.n	8021c76 <_close_r+0x1a>
 8021c70:	682b      	ldr	r3, [r5, #0]
 8021c72:	b103      	cbz	r3, 8021c76 <_close_r+0x1a>
 8021c74:	6023      	str	r3, [r4, #0]
 8021c76:	bd38      	pop	{r3, r4, r5, pc}
 8021c78:	2000e0f0 	.word	0x2000e0f0

08021c7c <fiprintf>:
 8021c7c:	b40e      	push	{r1, r2, r3}
 8021c7e:	b503      	push	{r0, r1, lr}
 8021c80:	4601      	mov	r1, r0
 8021c82:	ab03      	add	r3, sp, #12
 8021c84:	4805      	ldr	r0, [pc, #20]	; (8021c9c <fiprintf+0x20>)
 8021c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c8a:	6800      	ldr	r0, [r0, #0]
 8021c8c:	9301      	str	r3, [sp, #4]
 8021c8e:	f7ff fde9 	bl	8021864 <_vfiprintf_r>
 8021c92:	b002      	add	sp, #8
 8021c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8021c98:	b003      	add	sp, #12
 8021c9a:	4770      	bx	lr
 8021c9c:	2000002c 	.word	0x2000002c

08021ca0 <_fstat_r>:
 8021ca0:	b538      	push	{r3, r4, r5, lr}
 8021ca2:	4d07      	ldr	r5, [pc, #28]	; (8021cc0 <_fstat_r+0x20>)
 8021ca4:	2300      	movs	r3, #0
 8021ca6:	4604      	mov	r4, r0
 8021ca8:	4608      	mov	r0, r1
 8021caa:	4611      	mov	r1, r2
 8021cac:	602b      	str	r3, [r5, #0]
 8021cae:	f7f4 ffcf 	bl	8016c50 <_fstat>
 8021cb2:	1c43      	adds	r3, r0, #1
 8021cb4:	d102      	bne.n	8021cbc <_fstat_r+0x1c>
 8021cb6:	682b      	ldr	r3, [r5, #0]
 8021cb8:	b103      	cbz	r3, 8021cbc <_fstat_r+0x1c>
 8021cba:	6023      	str	r3, [r4, #0]
 8021cbc:	bd38      	pop	{r3, r4, r5, pc}
 8021cbe:	bf00      	nop
 8021cc0:	2000e0f0 	.word	0x2000e0f0

08021cc4 <_isatty_r>:
 8021cc4:	b538      	push	{r3, r4, r5, lr}
 8021cc6:	4d06      	ldr	r5, [pc, #24]	; (8021ce0 <_isatty_r+0x1c>)
 8021cc8:	2300      	movs	r3, #0
 8021cca:	4604      	mov	r4, r0
 8021ccc:	4608      	mov	r0, r1
 8021cce:	602b      	str	r3, [r5, #0]
 8021cd0:	f7f4 ffce 	bl	8016c70 <_isatty>
 8021cd4:	1c43      	adds	r3, r0, #1
 8021cd6:	d102      	bne.n	8021cde <_isatty_r+0x1a>
 8021cd8:	682b      	ldr	r3, [r5, #0]
 8021cda:	b103      	cbz	r3, 8021cde <_isatty_r+0x1a>
 8021cdc:	6023      	str	r3, [r4, #0]
 8021cde:	bd38      	pop	{r3, r4, r5, pc}
 8021ce0:	2000e0f0 	.word	0x2000e0f0

08021ce4 <_lseek_r>:
 8021ce4:	b538      	push	{r3, r4, r5, lr}
 8021ce6:	4d07      	ldr	r5, [pc, #28]	; (8021d04 <_lseek_r+0x20>)
 8021ce8:	4604      	mov	r4, r0
 8021cea:	4608      	mov	r0, r1
 8021cec:	4611      	mov	r1, r2
 8021cee:	2200      	movs	r2, #0
 8021cf0:	602a      	str	r2, [r5, #0]
 8021cf2:	461a      	mov	r2, r3
 8021cf4:	f7f4 ffc7 	bl	8016c86 <_lseek>
 8021cf8:	1c43      	adds	r3, r0, #1
 8021cfa:	d102      	bne.n	8021d02 <_lseek_r+0x1e>
 8021cfc:	682b      	ldr	r3, [r5, #0]
 8021cfe:	b103      	cbz	r3, 8021d02 <_lseek_r+0x1e>
 8021d00:	6023      	str	r3, [r4, #0]
 8021d02:	bd38      	pop	{r3, r4, r5, pc}
 8021d04:	2000e0f0 	.word	0x2000e0f0

08021d08 <__ascii_mbtowc>:
 8021d08:	b082      	sub	sp, #8
 8021d0a:	b901      	cbnz	r1, 8021d0e <__ascii_mbtowc+0x6>
 8021d0c:	a901      	add	r1, sp, #4
 8021d0e:	b142      	cbz	r2, 8021d22 <__ascii_mbtowc+0x1a>
 8021d10:	b14b      	cbz	r3, 8021d26 <__ascii_mbtowc+0x1e>
 8021d12:	7813      	ldrb	r3, [r2, #0]
 8021d14:	600b      	str	r3, [r1, #0]
 8021d16:	7812      	ldrb	r2, [r2, #0]
 8021d18:	1e10      	subs	r0, r2, #0
 8021d1a:	bf18      	it	ne
 8021d1c:	2001      	movne	r0, #1
 8021d1e:	b002      	add	sp, #8
 8021d20:	4770      	bx	lr
 8021d22:	4610      	mov	r0, r2
 8021d24:	e7fb      	b.n	8021d1e <__ascii_mbtowc+0x16>
 8021d26:	f06f 0001 	mvn.w	r0, #1
 8021d2a:	e7f8      	b.n	8021d1e <__ascii_mbtowc+0x16>

08021d2c <__malloc_lock>:
 8021d2c:	4801      	ldr	r0, [pc, #4]	; (8021d34 <__malloc_lock+0x8>)
 8021d2e:	f7ff b886 	b.w	8020e3e <__retarget_lock_acquire_recursive>
 8021d32:	bf00      	nop
 8021d34:	2000e0e4 	.word	0x2000e0e4

08021d38 <__malloc_unlock>:
 8021d38:	4801      	ldr	r0, [pc, #4]	; (8021d40 <__malloc_unlock+0x8>)
 8021d3a:	f7ff b881 	b.w	8020e40 <__retarget_lock_release_recursive>
 8021d3e:	bf00      	nop
 8021d40:	2000e0e4 	.word	0x2000e0e4

08021d44 <_read_r>:
 8021d44:	b538      	push	{r3, r4, r5, lr}
 8021d46:	4d07      	ldr	r5, [pc, #28]	; (8021d64 <_read_r+0x20>)
 8021d48:	4604      	mov	r4, r0
 8021d4a:	4608      	mov	r0, r1
 8021d4c:	4611      	mov	r1, r2
 8021d4e:	2200      	movs	r2, #0
 8021d50:	602a      	str	r2, [r5, #0]
 8021d52:	461a      	mov	r2, r3
 8021d54:	f7f4 ff32 	bl	8016bbc <_read>
 8021d58:	1c43      	adds	r3, r0, #1
 8021d5a:	d102      	bne.n	8021d62 <_read_r+0x1e>
 8021d5c:	682b      	ldr	r3, [r5, #0]
 8021d5e:	b103      	cbz	r3, 8021d62 <_read_r+0x1e>
 8021d60:	6023      	str	r3, [r4, #0]
 8021d62:	bd38      	pop	{r3, r4, r5, pc}
 8021d64:	2000e0f0 	.word	0x2000e0f0

08021d68 <__ascii_wctomb>:
 8021d68:	b149      	cbz	r1, 8021d7e <__ascii_wctomb+0x16>
 8021d6a:	2aff      	cmp	r2, #255	; 0xff
 8021d6c:	bf85      	ittet	hi
 8021d6e:	238a      	movhi	r3, #138	; 0x8a
 8021d70:	6003      	strhi	r3, [r0, #0]
 8021d72:	700a      	strbls	r2, [r1, #0]
 8021d74:	f04f 30ff 	movhi.w	r0, #4294967295
 8021d78:	bf98      	it	ls
 8021d7a:	2001      	movls	r0, #1
 8021d7c:	4770      	bx	lr
 8021d7e:	4608      	mov	r0, r1
 8021d80:	4770      	bx	lr

08021d82 <abort>:
 8021d82:	b508      	push	{r3, lr}
 8021d84:	2006      	movs	r0, #6
 8021d86:	f000 f82b 	bl	8021de0 <raise>
 8021d8a:	2001      	movs	r0, #1
 8021d8c:	f7f4 ff0c 	bl	8016ba8 <_exit>

08021d90 <_raise_r>:
 8021d90:	291f      	cmp	r1, #31
 8021d92:	b538      	push	{r3, r4, r5, lr}
 8021d94:	4604      	mov	r4, r0
 8021d96:	460d      	mov	r5, r1
 8021d98:	d904      	bls.n	8021da4 <_raise_r+0x14>
 8021d9a:	2316      	movs	r3, #22
 8021d9c:	6003      	str	r3, [r0, #0]
 8021d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8021da2:	bd38      	pop	{r3, r4, r5, pc}
 8021da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021da6:	b112      	cbz	r2, 8021dae <_raise_r+0x1e>
 8021da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021dac:	b94b      	cbnz	r3, 8021dc2 <_raise_r+0x32>
 8021dae:	4620      	mov	r0, r4
 8021db0:	f000 f830 	bl	8021e14 <_getpid_r>
 8021db4:	462a      	mov	r2, r5
 8021db6:	4601      	mov	r1, r0
 8021db8:	4620      	mov	r0, r4
 8021dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021dbe:	f000 b817 	b.w	8021df0 <_kill_r>
 8021dc2:	2b01      	cmp	r3, #1
 8021dc4:	d00a      	beq.n	8021ddc <_raise_r+0x4c>
 8021dc6:	1c59      	adds	r1, r3, #1
 8021dc8:	d103      	bne.n	8021dd2 <_raise_r+0x42>
 8021dca:	2316      	movs	r3, #22
 8021dcc:	6003      	str	r3, [r0, #0]
 8021dce:	2001      	movs	r0, #1
 8021dd0:	e7e7      	b.n	8021da2 <_raise_r+0x12>
 8021dd2:	2400      	movs	r4, #0
 8021dd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021dd8:	4628      	mov	r0, r5
 8021dda:	4798      	blx	r3
 8021ddc:	2000      	movs	r0, #0
 8021dde:	e7e0      	b.n	8021da2 <_raise_r+0x12>

08021de0 <raise>:
 8021de0:	4b02      	ldr	r3, [pc, #8]	; (8021dec <raise+0xc>)
 8021de2:	4601      	mov	r1, r0
 8021de4:	6818      	ldr	r0, [r3, #0]
 8021de6:	f7ff bfd3 	b.w	8021d90 <_raise_r>
 8021dea:	bf00      	nop
 8021dec:	2000002c 	.word	0x2000002c

08021df0 <_kill_r>:
 8021df0:	b538      	push	{r3, r4, r5, lr}
 8021df2:	4d07      	ldr	r5, [pc, #28]	; (8021e10 <_kill_r+0x20>)
 8021df4:	2300      	movs	r3, #0
 8021df6:	4604      	mov	r4, r0
 8021df8:	4608      	mov	r0, r1
 8021dfa:	4611      	mov	r1, r2
 8021dfc:	602b      	str	r3, [r5, #0]
 8021dfe:	f7f4 fec3 	bl	8016b88 <_kill>
 8021e02:	1c43      	adds	r3, r0, #1
 8021e04:	d102      	bne.n	8021e0c <_kill_r+0x1c>
 8021e06:	682b      	ldr	r3, [r5, #0]
 8021e08:	b103      	cbz	r3, 8021e0c <_kill_r+0x1c>
 8021e0a:	6023      	str	r3, [r4, #0]
 8021e0c:	bd38      	pop	{r3, r4, r5, pc}
 8021e0e:	bf00      	nop
 8021e10:	2000e0f0 	.word	0x2000e0f0

08021e14 <_getpid_r>:
 8021e14:	f7f4 beb0 	b.w	8016b78 <_getpid>

08021e18 <ceil>:
 8021e18:	ec51 0b10 	vmov	r0, r1, d0
 8021e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8021e24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8021e28:	2e13      	cmp	r6, #19
 8021e2a:	ee10 5a10 	vmov	r5, s0
 8021e2e:	ee10 8a10 	vmov	r8, s0
 8021e32:	460c      	mov	r4, r1
 8021e34:	dc30      	bgt.n	8021e98 <ceil+0x80>
 8021e36:	2e00      	cmp	r6, #0
 8021e38:	da12      	bge.n	8021e60 <ceil+0x48>
 8021e3a:	a335      	add	r3, pc, #212	; (adr r3, 8021f10 <ceil+0xf8>)
 8021e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e40:	f7de fa4c 	bl	80002dc <__adddf3>
 8021e44:	2200      	movs	r2, #0
 8021e46:	2300      	movs	r3, #0
 8021e48:	f7de fe8e 	bl	8000b68 <__aeabi_dcmpgt>
 8021e4c:	b128      	cbz	r0, 8021e5a <ceil+0x42>
 8021e4e:	2c00      	cmp	r4, #0
 8021e50:	db55      	blt.n	8021efe <ceil+0xe6>
 8021e52:	432c      	orrs	r4, r5
 8021e54:	d057      	beq.n	8021f06 <ceil+0xee>
 8021e56:	4c30      	ldr	r4, [pc, #192]	; (8021f18 <ceil+0x100>)
 8021e58:	2500      	movs	r5, #0
 8021e5a:	4621      	mov	r1, r4
 8021e5c:	4628      	mov	r0, r5
 8021e5e:	e025      	b.n	8021eac <ceil+0x94>
 8021e60:	4f2e      	ldr	r7, [pc, #184]	; (8021f1c <ceil+0x104>)
 8021e62:	4137      	asrs	r7, r6
 8021e64:	ea01 0307 	and.w	r3, r1, r7
 8021e68:	4303      	orrs	r3, r0
 8021e6a:	d01f      	beq.n	8021eac <ceil+0x94>
 8021e6c:	a328      	add	r3, pc, #160	; (adr r3, 8021f10 <ceil+0xf8>)
 8021e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e72:	f7de fa33 	bl	80002dc <__adddf3>
 8021e76:	2200      	movs	r2, #0
 8021e78:	2300      	movs	r3, #0
 8021e7a:	f7de fe75 	bl	8000b68 <__aeabi_dcmpgt>
 8021e7e:	2800      	cmp	r0, #0
 8021e80:	d0eb      	beq.n	8021e5a <ceil+0x42>
 8021e82:	2c00      	cmp	r4, #0
 8021e84:	bfc2      	ittt	gt
 8021e86:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8021e8a:	fa43 f606 	asrgt.w	r6, r3, r6
 8021e8e:	19a4      	addgt	r4, r4, r6
 8021e90:	ea24 0407 	bic.w	r4, r4, r7
 8021e94:	2500      	movs	r5, #0
 8021e96:	e7e0      	b.n	8021e5a <ceil+0x42>
 8021e98:	2e33      	cmp	r6, #51	; 0x33
 8021e9a:	dd0b      	ble.n	8021eb4 <ceil+0x9c>
 8021e9c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8021ea0:	d104      	bne.n	8021eac <ceil+0x94>
 8021ea2:	ee10 2a10 	vmov	r2, s0
 8021ea6:	460b      	mov	r3, r1
 8021ea8:	f7de fa18 	bl	80002dc <__adddf3>
 8021eac:	ec41 0b10 	vmov	d0, r0, r1
 8021eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021eb4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8021eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8021ebc:	fa23 f707 	lsr.w	r7, r3, r7
 8021ec0:	4207      	tst	r7, r0
 8021ec2:	d0f3      	beq.n	8021eac <ceil+0x94>
 8021ec4:	a312      	add	r3, pc, #72	; (adr r3, 8021f10 <ceil+0xf8>)
 8021ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021eca:	f7de fa07 	bl	80002dc <__adddf3>
 8021ece:	2200      	movs	r2, #0
 8021ed0:	2300      	movs	r3, #0
 8021ed2:	f7de fe49 	bl	8000b68 <__aeabi_dcmpgt>
 8021ed6:	2800      	cmp	r0, #0
 8021ed8:	d0bf      	beq.n	8021e5a <ceil+0x42>
 8021eda:	2c00      	cmp	r4, #0
 8021edc:	dd02      	ble.n	8021ee4 <ceil+0xcc>
 8021ede:	2e14      	cmp	r6, #20
 8021ee0:	d103      	bne.n	8021eea <ceil+0xd2>
 8021ee2:	3401      	adds	r4, #1
 8021ee4:	ea25 0507 	bic.w	r5, r5, r7
 8021ee8:	e7b7      	b.n	8021e5a <ceil+0x42>
 8021eea:	2301      	movs	r3, #1
 8021eec:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8021ef0:	fa03 f606 	lsl.w	r6, r3, r6
 8021ef4:	4435      	add	r5, r6
 8021ef6:	4545      	cmp	r5, r8
 8021ef8:	bf38      	it	cc
 8021efa:	18e4      	addcc	r4, r4, r3
 8021efc:	e7f2      	b.n	8021ee4 <ceil+0xcc>
 8021efe:	2500      	movs	r5, #0
 8021f00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8021f04:	e7a9      	b.n	8021e5a <ceil+0x42>
 8021f06:	4625      	mov	r5, r4
 8021f08:	e7a7      	b.n	8021e5a <ceil+0x42>
 8021f0a:	bf00      	nop
 8021f0c:	f3af 8000 	nop.w
 8021f10:	8800759c 	.word	0x8800759c
 8021f14:	7e37e43c 	.word	0x7e37e43c
 8021f18:	3ff00000 	.word	0x3ff00000
 8021f1c:	000fffff 	.word	0x000fffff

08021f20 <exp>:
 8021f20:	b538      	push	{r3, r4, r5, lr}
 8021f22:	ed2d 8b02 	vpush	{d8}
 8021f26:	ec55 4b10 	vmov	r4, r5, d0
 8021f2a:	f000 f841 	bl	8021fb0 <__ieee754_exp>
 8021f2e:	eeb0 8a40 	vmov.f32	s16, s0
 8021f32:	eef0 8a60 	vmov.f32	s17, s1
 8021f36:	ec45 4b10 	vmov	d0, r4, r5
 8021f3a:	f000 f9eb 	bl	8022314 <finite>
 8021f3e:	b168      	cbz	r0, 8021f5c <exp+0x3c>
 8021f40:	a317      	add	r3, pc, #92	; (adr r3, 8021fa0 <exp+0x80>)
 8021f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f46:	4620      	mov	r0, r4
 8021f48:	4629      	mov	r1, r5
 8021f4a:	f7de fe0d 	bl	8000b68 <__aeabi_dcmpgt>
 8021f4e:	b160      	cbz	r0, 8021f6a <exp+0x4a>
 8021f50:	f7fd f930 	bl	801f1b4 <__errno>
 8021f54:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8021f90 <exp+0x70>
 8021f58:	2322      	movs	r3, #34	; 0x22
 8021f5a:	6003      	str	r3, [r0, #0]
 8021f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8021f60:	eef0 0a68 	vmov.f32	s1, s17
 8021f64:	ecbd 8b02 	vpop	{d8}
 8021f68:	bd38      	pop	{r3, r4, r5, pc}
 8021f6a:	a30f      	add	r3, pc, #60	; (adr r3, 8021fa8 <exp+0x88>)
 8021f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f70:	4620      	mov	r0, r4
 8021f72:	4629      	mov	r1, r5
 8021f74:	f7de fdda 	bl	8000b2c <__aeabi_dcmplt>
 8021f78:	2800      	cmp	r0, #0
 8021f7a:	d0ef      	beq.n	8021f5c <exp+0x3c>
 8021f7c:	f7fd f91a 	bl	801f1b4 <__errno>
 8021f80:	2322      	movs	r3, #34	; 0x22
 8021f82:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8021f98 <exp+0x78>
 8021f86:	6003      	str	r3, [r0, #0]
 8021f88:	e7e8      	b.n	8021f5c <exp+0x3c>
 8021f8a:	bf00      	nop
 8021f8c:	f3af 8000 	nop.w
 8021f90:	00000000 	.word	0x00000000
 8021f94:	7ff00000 	.word	0x7ff00000
	...
 8021fa0:	fefa39ef 	.word	0xfefa39ef
 8021fa4:	40862e42 	.word	0x40862e42
 8021fa8:	d52d3051 	.word	0xd52d3051
 8021fac:	c0874910 	.word	0xc0874910

08021fb0 <__ieee754_exp>:
 8021fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fb4:	ec55 4b10 	vmov	r4, r5, d0
 8021fb8:	49b5      	ldr	r1, [pc, #724]	; (8022290 <__ieee754_exp+0x2e0>)
 8021fba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021fbe:	428b      	cmp	r3, r1
 8021fc0:	ed2d 8b04 	vpush	{d8-d9}
 8021fc4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8021fc8:	d93d      	bls.n	8022046 <__ieee754_exp+0x96>
 8021fca:	49b2      	ldr	r1, [pc, #712]	; (8022294 <__ieee754_exp+0x2e4>)
 8021fcc:	428b      	cmp	r3, r1
 8021fce:	d918      	bls.n	8022002 <__ieee754_exp+0x52>
 8021fd0:	ee10 3a10 	vmov	r3, s0
 8021fd4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8021fd8:	4313      	orrs	r3, r2
 8021fda:	d009      	beq.n	8021ff0 <__ieee754_exp+0x40>
 8021fdc:	ee10 2a10 	vmov	r2, s0
 8021fe0:	462b      	mov	r3, r5
 8021fe2:	4620      	mov	r0, r4
 8021fe4:	4629      	mov	r1, r5
 8021fe6:	f7de f979 	bl	80002dc <__adddf3>
 8021fea:	4604      	mov	r4, r0
 8021fec:	460d      	mov	r5, r1
 8021fee:	e002      	b.n	8021ff6 <__ieee754_exp+0x46>
 8021ff0:	b10e      	cbz	r6, 8021ff6 <__ieee754_exp+0x46>
 8021ff2:	2400      	movs	r4, #0
 8021ff4:	2500      	movs	r5, #0
 8021ff6:	ecbd 8b04 	vpop	{d8-d9}
 8021ffa:	ec45 4b10 	vmov	d0, r4, r5
 8021ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022002:	a38d      	add	r3, pc, #564	; (adr r3, 8022238 <__ieee754_exp+0x288>)
 8022004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022008:	ee10 0a10 	vmov	r0, s0
 802200c:	4629      	mov	r1, r5
 802200e:	f7de fdab 	bl	8000b68 <__aeabi_dcmpgt>
 8022012:	4607      	mov	r7, r0
 8022014:	b130      	cbz	r0, 8022024 <__ieee754_exp+0x74>
 8022016:	ecbd 8b04 	vpop	{d8-d9}
 802201a:	2000      	movs	r0, #0
 802201c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022020:	f000 b96f 	b.w	8022302 <__math_oflow>
 8022024:	a386      	add	r3, pc, #536	; (adr r3, 8022240 <__ieee754_exp+0x290>)
 8022026:	e9d3 2300 	ldrd	r2, r3, [r3]
 802202a:	4620      	mov	r0, r4
 802202c:	4629      	mov	r1, r5
 802202e:	f7de fd7d 	bl	8000b2c <__aeabi_dcmplt>
 8022032:	2800      	cmp	r0, #0
 8022034:	f000 808b 	beq.w	802214e <__ieee754_exp+0x19e>
 8022038:	ecbd 8b04 	vpop	{d8-d9}
 802203c:	4638      	mov	r0, r7
 802203e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022042:	f000 b955 	b.w	80222f0 <__math_uflow>
 8022046:	4a94      	ldr	r2, [pc, #592]	; (8022298 <__ieee754_exp+0x2e8>)
 8022048:	4293      	cmp	r3, r2
 802204a:	f240 80ac 	bls.w	80221a6 <__ieee754_exp+0x1f6>
 802204e:	4a93      	ldr	r2, [pc, #588]	; (802229c <__ieee754_exp+0x2ec>)
 8022050:	4293      	cmp	r3, r2
 8022052:	d87c      	bhi.n	802214e <__ieee754_exp+0x19e>
 8022054:	4b92      	ldr	r3, [pc, #584]	; (80222a0 <__ieee754_exp+0x2f0>)
 8022056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802205e:	ee10 0a10 	vmov	r0, s0
 8022062:	4629      	mov	r1, r5
 8022064:	f7de f938 	bl	80002d8 <__aeabi_dsub>
 8022068:	4b8e      	ldr	r3, [pc, #568]	; (80222a4 <__ieee754_exp+0x2f4>)
 802206a:	00f7      	lsls	r7, r6, #3
 802206c:	443b      	add	r3, r7
 802206e:	ed93 7b00 	vldr	d7, [r3]
 8022072:	f1c6 0a01 	rsb	sl, r6, #1
 8022076:	4680      	mov	r8, r0
 8022078:	4689      	mov	r9, r1
 802207a:	ebaa 0a06 	sub.w	sl, sl, r6
 802207e:	eeb0 8a47 	vmov.f32	s16, s14
 8022082:	eef0 8a67 	vmov.f32	s17, s15
 8022086:	ec53 2b18 	vmov	r2, r3, d8
 802208a:	4640      	mov	r0, r8
 802208c:	4649      	mov	r1, r9
 802208e:	f7de f923 	bl	80002d8 <__aeabi_dsub>
 8022092:	4604      	mov	r4, r0
 8022094:	460d      	mov	r5, r1
 8022096:	4622      	mov	r2, r4
 8022098:	462b      	mov	r3, r5
 802209a:	4620      	mov	r0, r4
 802209c:	4629      	mov	r1, r5
 802209e:	f7de fad3 	bl	8000648 <__aeabi_dmul>
 80220a2:	a369      	add	r3, pc, #420	; (adr r3, 8022248 <__ieee754_exp+0x298>)
 80220a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220a8:	4606      	mov	r6, r0
 80220aa:	460f      	mov	r7, r1
 80220ac:	f7de facc 	bl	8000648 <__aeabi_dmul>
 80220b0:	a367      	add	r3, pc, #412	; (adr r3, 8022250 <__ieee754_exp+0x2a0>)
 80220b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220b6:	f7de f90f 	bl	80002d8 <__aeabi_dsub>
 80220ba:	4632      	mov	r2, r6
 80220bc:	463b      	mov	r3, r7
 80220be:	f7de fac3 	bl	8000648 <__aeabi_dmul>
 80220c2:	a365      	add	r3, pc, #404	; (adr r3, 8022258 <__ieee754_exp+0x2a8>)
 80220c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220c8:	f7de f908 	bl	80002dc <__adddf3>
 80220cc:	4632      	mov	r2, r6
 80220ce:	463b      	mov	r3, r7
 80220d0:	f7de faba 	bl	8000648 <__aeabi_dmul>
 80220d4:	a362      	add	r3, pc, #392	; (adr r3, 8022260 <__ieee754_exp+0x2b0>)
 80220d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220da:	f7de f8fd 	bl	80002d8 <__aeabi_dsub>
 80220de:	4632      	mov	r2, r6
 80220e0:	463b      	mov	r3, r7
 80220e2:	f7de fab1 	bl	8000648 <__aeabi_dmul>
 80220e6:	a360      	add	r3, pc, #384	; (adr r3, 8022268 <__ieee754_exp+0x2b8>)
 80220e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220ec:	f7de f8f6 	bl	80002dc <__adddf3>
 80220f0:	4632      	mov	r2, r6
 80220f2:	463b      	mov	r3, r7
 80220f4:	f7de faa8 	bl	8000648 <__aeabi_dmul>
 80220f8:	4602      	mov	r2, r0
 80220fa:	460b      	mov	r3, r1
 80220fc:	4620      	mov	r0, r4
 80220fe:	4629      	mov	r1, r5
 8022100:	f7de f8ea 	bl	80002d8 <__aeabi_dsub>
 8022104:	4602      	mov	r2, r0
 8022106:	460b      	mov	r3, r1
 8022108:	4606      	mov	r6, r0
 802210a:	460f      	mov	r7, r1
 802210c:	4620      	mov	r0, r4
 802210e:	4629      	mov	r1, r5
 8022110:	f7de fa9a 	bl	8000648 <__aeabi_dmul>
 8022114:	ec41 0b19 	vmov	d9, r0, r1
 8022118:	f1ba 0f00 	cmp.w	sl, #0
 802211c:	d15d      	bne.n	80221da <__ieee754_exp+0x22a>
 802211e:	2200      	movs	r2, #0
 8022120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022124:	4630      	mov	r0, r6
 8022126:	4639      	mov	r1, r7
 8022128:	f7de f8d6 	bl	80002d8 <__aeabi_dsub>
 802212c:	4602      	mov	r2, r0
 802212e:	460b      	mov	r3, r1
 8022130:	ec51 0b19 	vmov	r0, r1, d9
 8022134:	f7de fbb2 	bl	800089c <__aeabi_ddiv>
 8022138:	4622      	mov	r2, r4
 802213a:	462b      	mov	r3, r5
 802213c:	f7de f8cc 	bl	80002d8 <__aeabi_dsub>
 8022140:	4602      	mov	r2, r0
 8022142:	460b      	mov	r3, r1
 8022144:	2000      	movs	r0, #0
 8022146:	4958      	ldr	r1, [pc, #352]	; (80222a8 <__ieee754_exp+0x2f8>)
 8022148:	f7de f8c6 	bl	80002d8 <__aeabi_dsub>
 802214c:	e74d      	b.n	8021fea <__ieee754_exp+0x3a>
 802214e:	4857      	ldr	r0, [pc, #348]	; (80222ac <__ieee754_exp+0x2fc>)
 8022150:	a347      	add	r3, pc, #284	; (adr r3, 8022270 <__ieee754_exp+0x2c0>)
 8022152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022156:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802215a:	4629      	mov	r1, r5
 802215c:	4620      	mov	r0, r4
 802215e:	f7de fa73 	bl	8000648 <__aeabi_dmul>
 8022162:	e9d6 2300 	ldrd	r2, r3, [r6]
 8022166:	f7de f8b9 	bl	80002dc <__adddf3>
 802216a:	f7de fd1d 	bl	8000ba8 <__aeabi_d2iz>
 802216e:	4682      	mov	sl, r0
 8022170:	f7de fa00 	bl	8000574 <__aeabi_i2d>
 8022174:	a340      	add	r3, pc, #256	; (adr r3, 8022278 <__ieee754_exp+0x2c8>)
 8022176:	e9d3 2300 	ldrd	r2, r3, [r3]
 802217a:	4606      	mov	r6, r0
 802217c:	460f      	mov	r7, r1
 802217e:	f7de fa63 	bl	8000648 <__aeabi_dmul>
 8022182:	4602      	mov	r2, r0
 8022184:	460b      	mov	r3, r1
 8022186:	4620      	mov	r0, r4
 8022188:	4629      	mov	r1, r5
 802218a:	f7de f8a5 	bl	80002d8 <__aeabi_dsub>
 802218e:	a33c      	add	r3, pc, #240	; (adr r3, 8022280 <__ieee754_exp+0x2d0>)
 8022190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022194:	4680      	mov	r8, r0
 8022196:	4689      	mov	r9, r1
 8022198:	4630      	mov	r0, r6
 802219a:	4639      	mov	r1, r7
 802219c:	f7de fa54 	bl	8000648 <__aeabi_dmul>
 80221a0:	ec41 0b18 	vmov	d8, r0, r1
 80221a4:	e76f      	b.n	8022086 <__ieee754_exp+0xd6>
 80221a6:	4a42      	ldr	r2, [pc, #264]	; (80222b0 <__ieee754_exp+0x300>)
 80221a8:	4293      	cmp	r3, r2
 80221aa:	d811      	bhi.n	80221d0 <__ieee754_exp+0x220>
 80221ac:	a336      	add	r3, pc, #216	; (adr r3, 8022288 <__ieee754_exp+0x2d8>)
 80221ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221b2:	ee10 0a10 	vmov	r0, s0
 80221b6:	4629      	mov	r1, r5
 80221b8:	f7de f890 	bl	80002dc <__adddf3>
 80221bc:	4b3a      	ldr	r3, [pc, #232]	; (80222a8 <__ieee754_exp+0x2f8>)
 80221be:	2200      	movs	r2, #0
 80221c0:	f7de fcd2 	bl	8000b68 <__aeabi_dcmpgt>
 80221c4:	b138      	cbz	r0, 80221d6 <__ieee754_exp+0x226>
 80221c6:	4b38      	ldr	r3, [pc, #224]	; (80222a8 <__ieee754_exp+0x2f8>)
 80221c8:	2200      	movs	r2, #0
 80221ca:	4620      	mov	r0, r4
 80221cc:	4629      	mov	r1, r5
 80221ce:	e70a      	b.n	8021fe6 <__ieee754_exp+0x36>
 80221d0:	f04f 0a00 	mov.w	sl, #0
 80221d4:	e75f      	b.n	8022096 <__ieee754_exp+0xe6>
 80221d6:	4682      	mov	sl, r0
 80221d8:	e75d      	b.n	8022096 <__ieee754_exp+0xe6>
 80221da:	4632      	mov	r2, r6
 80221dc:	463b      	mov	r3, r7
 80221de:	2000      	movs	r0, #0
 80221e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80221e4:	f7de f878 	bl	80002d8 <__aeabi_dsub>
 80221e8:	4602      	mov	r2, r0
 80221ea:	460b      	mov	r3, r1
 80221ec:	ec51 0b19 	vmov	r0, r1, d9
 80221f0:	f7de fb54 	bl	800089c <__aeabi_ddiv>
 80221f4:	4602      	mov	r2, r0
 80221f6:	460b      	mov	r3, r1
 80221f8:	ec51 0b18 	vmov	r0, r1, d8
 80221fc:	f7de f86c 	bl	80002d8 <__aeabi_dsub>
 8022200:	4642      	mov	r2, r8
 8022202:	464b      	mov	r3, r9
 8022204:	f7de f868 	bl	80002d8 <__aeabi_dsub>
 8022208:	4602      	mov	r2, r0
 802220a:	460b      	mov	r3, r1
 802220c:	2000      	movs	r0, #0
 802220e:	4926      	ldr	r1, [pc, #152]	; (80222a8 <__ieee754_exp+0x2f8>)
 8022210:	f7de f862 	bl	80002d8 <__aeabi_dsub>
 8022214:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8022218:	4592      	cmp	sl, r2
 802221a:	db02      	blt.n	8022222 <__ieee754_exp+0x272>
 802221c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8022220:	e6e3      	b.n	8021fea <__ieee754_exp+0x3a>
 8022222:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8022226:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802222a:	2200      	movs	r2, #0
 802222c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8022230:	f7de fa0a 	bl	8000648 <__aeabi_dmul>
 8022234:	e6d9      	b.n	8021fea <__ieee754_exp+0x3a>
 8022236:	bf00      	nop
 8022238:	fefa39ef 	.word	0xfefa39ef
 802223c:	40862e42 	.word	0x40862e42
 8022240:	d52d3051 	.word	0xd52d3051
 8022244:	c0874910 	.word	0xc0874910
 8022248:	72bea4d0 	.word	0x72bea4d0
 802224c:	3e663769 	.word	0x3e663769
 8022250:	c5d26bf1 	.word	0xc5d26bf1
 8022254:	3ebbbd41 	.word	0x3ebbbd41
 8022258:	af25de2c 	.word	0xaf25de2c
 802225c:	3f11566a 	.word	0x3f11566a
 8022260:	16bebd93 	.word	0x16bebd93
 8022264:	3f66c16c 	.word	0x3f66c16c
 8022268:	5555553e 	.word	0x5555553e
 802226c:	3fc55555 	.word	0x3fc55555
 8022270:	652b82fe 	.word	0x652b82fe
 8022274:	3ff71547 	.word	0x3ff71547
 8022278:	fee00000 	.word	0xfee00000
 802227c:	3fe62e42 	.word	0x3fe62e42
 8022280:	35793c76 	.word	0x35793c76
 8022284:	3dea39ef 	.word	0x3dea39ef
 8022288:	8800759c 	.word	0x8800759c
 802228c:	7e37e43c 	.word	0x7e37e43c
 8022290:	40862e41 	.word	0x40862e41
 8022294:	7fefffff 	.word	0x7fefffff
 8022298:	3fd62e42 	.word	0x3fd62e42
 802229c:	3ff0a2b1 	.word	0x3ff0a2b1
 80222a0:	08022a50 	.word	0x08022a50
 80222a4:	08022a60 	.word	0x08022a60
 80222a8:	3ff00000 	.word	0x3ff00000
 80222ac:	08022a40 	.word	0x08022a40
 80222b0:	3defffff 	.word	0x3defffff

080222b4 <with_errno>:
 80222b4:	b570      	push	{r4, r5, r6, lr}
 80222b6:	4604      	mov	r4, r0
 80222b8:	460d      	mov	r5, r1
 80222ba:	4616      	mov	r6, r2
 80222bc:	f7fc ff7a 	bl	801f1b4 <__errno>
 80222c0:	4629      	mov	r1, r5
 80222c2:	6006      	str	r6, [r0, #0]
 80222c4:	4620      	mov	r0, r4
 80222c6:	bd70      	pop	{r4, r5, r6, pc}

080222c8 <xflow>:
 80222c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80222ca:	4614      	mov	r4, r2
 80222cc:	461d      	mov	r5, r3
 80222ce:	b108      	cbz	r0, 80222d4 <xflow+0xc>
 80222d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80222d4:	e9cd 2300 	strd	r2, r3, [sp]
 80222d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80222dc:	4620      	mov	r0, r4
 80222de:	4629      	mov	r1, r5
 80222e0:	f7de f9b2 	bl	8000648 <__aeabi_dmul>
 80222e4:	2222      	movs	r2, #34	; 0x22
 80222e6:	b003      	add	sp, #12
 80222e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80222ec:	f7ff bfe2 	b.w	80222b4 <with_errno>

080222f0 <__math_uflow>:
 80222f0:	b508      	push	{r3, lr}
 80222f2:	2200      	movs	r2, #0
 80222f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80222f8:	f7ff ffe6 	bl	80222c8 <xflow>
 80222fc:	ec41 0b10 	vmov	d0, r0, r1
 8022300:	bd08      	pop	{r3, pc}

08022302 <__math_oflow>:
 8022302:	b508      	push	{r3, lr}
 8022304:	2200      	movs	r2, #0
 8022306:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802230a:	f7ff ffdd 	bl	80222c8 <xflow>
 802230e:	ec41 0b10 	vmov	d0, r0, r1
 8022312:	bd08      	pop	{r3, pc}

08022314 <finite>:
 8022314:	b082      	sub	sp, #8
 8022316:	ed8d 0b00 	vstr	d0, [sp]
 802231a:	9801      	ldr	r0, [sp, #4]
 802231c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8022320:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8022324:	0fc0      	lsrs	r0, r0, #31
 8022326:	b002      	add	sp, #8
 8022328:	4770      	bx	lr
	...

0802232c <_init>:
 802232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802232e:	bf00      	nop
 8022330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022332:	bc08      	pop	{r3}
 8022334:	469e      	mov	lr, r3
 8022336:	4770      	bx	lr

08022338 <_fini>:
 8022338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802233a:	bf00      	nop
 802233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802233e:	bc08      	pop	{r3}
 8022340:	469e      	mov	lr, r3
 8022342:	4770      	bx	lr
