
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021ebc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  080220a0  080220a0  000320a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022800  08022800  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08022800  08022800  00032800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022808  08022808  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022808  08022808  00032808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802280c  0802280c  0003280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08022810  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000def4  200001fc  08022a0c  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e0f0  08022a0c  0004e0f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027d02  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000606f  00000000  00000000  00067f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  0006dfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  0006ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028529  00000000  00000000  00071c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031e5b  00000000  00000000  0009a189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2c6  00000000  00000000  000cbfe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b72aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097e8  00000000  00000000  001b72fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08022084 	.word	0x08022084

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08022084 	.word	0x08022084

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <reset_speed+0x34>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <reset_speed+0x38>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <reset_speed+0x3c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <reset_speed+0x40>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <reset_speed+0x44>)
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <reset_speed+0x48>)
 8001040:	601a      	str	r2, [r3, #0]

}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000248 	.word	0x20000248
 8001050:	2000024c 	.word	0x2000024c
 8001054:	20000258 	.word	0x20000258
 8001058:	2000025c 	.word	0x2000025c
 800105c:	20000260 	.word	0x20000260
 8001060:	3f266666 	.word	0x3f266666
 8001064:	00000000 	.word	0x00000000

08001068 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 800106e:	4bd0      	ldr	r3, [pc, #832]	; (80013b0 <interupt_calEncoder+0x348>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	4bcf      	ldr	r3, [pc, #828]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013b8 <interupt_calEncoder+0x350>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd07      	ble.n	80010a4 <interupt_calEncoder+0x3c>
 8001094:	edd7 7a01 	vldr	s15, [r7, #4]
 8001098:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80013bc <interupt_calEncoder+0x354>
 800109c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80013c0 <interupt_calEncoder+0x358>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d507      	bpl.n	80010c6 <interupt_calEncoder+0x5e>
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80013bc <interupt_calEncoder+0x354>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010c6:	4bbf      	ldr	r3, [pc, #764]	; (80013c4 <interupt_calEncoder+0x35c>)
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	4bbe      	ldr	r3, [pc, #760]	; (80013c8 <interupt_calEncoder+0x360>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	eef1 7a67 	vneg.f32	s15, s15
 80010da:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010de:	edd7 7a00 	vldr	s15, [r7]
 80010e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013b8 <interupt_calEncoder+0x350>
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd07      	ble.n	8001100 <interupt_calEncoder+0x98>
 80010f0:	edd7 7a00 	vldr	s15, [r7]
 80010f4:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013bc <interupt_calEncoder+0x354>
 80010f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fc:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001100:	edd7 7a00 	vldr	s15, [r7]
 8001104:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80013c0 <interupt_calEncoder+0x358>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d507      	bpl.n	8001122 <interupt_calEncoder+0xba>
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013bc <interupt_calEncoder+0x354>
 800111a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111e:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f7ff fa38 	bl	8000598 <__aeabi_f2d>
 8001128:	a391      	add	r3, pc, #580	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa8b 	bl	8000648 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <interupt_calEncoder+0x364>)
 8001140:	f7ff fbac 	bl	800089c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	a38a      	add	r3, pc, #552	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa79 	bl	8000648 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a388      	add	r3, pc, #544	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa70 	bl	8000648 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	a385      	add	r3, pc, #532	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa67 	bl	8000648 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a383      	add	r3, pc, #524	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb88 	bl	800089c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b8d      	ldr	r3, [pc, #564]	; (80013d0 <interupt_calEncoder+0x368>)
 800119a:	f7ff fa55 	bl	8000648 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	a37c      	add	r3, pc, #496	; (adr r3, 8001398 <interupt_calEncoder+0x330>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fb76 	bl	800089c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c0:	f7ff fb6c 	bl	800089c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <interupt_calEncoder+0x36c>)
 80011d2:	f7ff fa39 	bl	8000648 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a370      	add	r3, pc, #448	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb5a 	bl	800089c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd02 	bl	8000bf8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a78      	ldr	r2, [pc, #480]	; (80013d8 <interupt_calEncoder+0x370>)
 80011f8:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f9cc 	bl	8000598 <__aeabi_f2d>
 8001200:	a35b      	add	r3, pc, #364	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa1f 	bl	8000648 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <interupt_calEncoder+0x364>)
 8001218:	f7ff fb40 	bl	800089c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	a354      	add	r3, pc, #336	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa0d 	bl	8000648 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a352      	add	r3, pc, #328	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fa04 	bl	8000648 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a34f      	add	r3, pc, #316	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9fb 	bl	8000648 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a34d      	add	r3, pc, #308	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fb1c 	bl	800089c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <interupt_calEncoder+0x368>)
 8001272:	f7ff f9e9 	bl	8000648 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	a34a      	add	r3, pc, #296	; (adr r3, 80013a8 <interupt_calEncoder+0x340>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fb0a 	bl	800089c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001298:	f7ff fb00 	bl	800089c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <interupt_calEncoder+0x36c>)
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a33a      	add	r3, pc, #232	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff faee 	bl	800089c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc96 	bl	8000bf8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <interupt_calEncoder+0x374>)
 80012d0:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <interupt_calEncoder+0x378>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f95e 	bl	8000598 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <interupt_calEncoder+0x370>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_f2d>
 80012ea:	a32d      	add	r3, pc, #180	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f9aa 	bl	8000648 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffee 	bl	80002dc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc76 	bl	8000bf8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <interupt_calEncoder+0x378>)
 8001310:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f93e 	bl	8000598 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <interupt_calEncoder+0x374>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f937 	bl	8000598 <__aeabi_f2d>
 800132a:	a31d      	add	r3, pc, #116	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f98a 	bl	8000648 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffce 	bl	80002dc <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc56 	bl	8000bf8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001350:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <interupt_calEncoder+0x35c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <interupt_calEncoder+0x360>)
 8001358:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <interupt_calEncoder+0x348>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001360:	6013      	str	r3, [r2, #0]

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	54411744 	.word	0x54411744
 8001374:	400921fb 	.word	0x400921fb
 8001378:	4e70a65b 	.word	0x4e70a65b
 800137c:	3f882f36 	.word	0x3f882f36
 8001380:	a858793e 	.word	0xa858793e
 8001384:	3ff1cd35 	.word	0x3ff1cd35
 8001388:	00000000 	.word	0x00000000
 800138c:	4078c000 	.word	0x4078c000
 8001390:	147ae148 	.word	0x147ae148
 8001394:	4078fbae 	.word	0x4078fbae
 8001398:	0a3d70a4 	.word	0x0a3d70a4
 800139c:	4078efd7 	.word	0x4078efd7
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	5c28f5c3 	.word	0x5c28f5c3
 80013ac:	40792a8f 	.word	0x40792a8f
 80013b0:	200006d8 	.word	0x200006d8
 80013b4:	20000218 	.word	0x20000218
 80013b8:	43340000 	.word	0x43340000
 80013bc:	43b40000 	.word	0x43b40000
 80013c0:	c3340000 	.word	0xc3340000
 80013c4:	200006dc 	.word	0x200006dc
 80013c8:	2000021c 	.word	0x2000021c
 80013cc:	40668000 	.word	0x40668000
 80013d0:	40790000 	.word	0x40790000
 80013d4:	408f4000 	.word	0x408f4000
 80013d8:	20000228 	.word	0x20000228
 80013dc:	2000022c 	.word	0x2000022c
 80013e0:	20000220 	.word	0x20000220
 80013e4:	20000224 	.word	0x20000224

080013e8 <interupt_calFusion>:


void interupt_calFusion(void) {
 80013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ec:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80013ee:	4bca      	ldr	r3, [pc, #808]	; (8001718 <interupt_calFusion+0x330>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4bc9      	ldr	r3, [pc, #804]	; (800171c <interupt_calFusion+0x334>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fe:	4bc6      	ldr	r3, [pc, #792]	; (8001718 <interupt_calFusion+0x330>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001408:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800140c:	4bc4      	ldr	r3, [pc, #784]	; (8001720 <interupt_calFusion+0x338>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	4bc0      	ldr	r3, [pc, #768]	; (800171c <interupt_calFusion+0x334>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001420:	4bbd      	ldr	r3, [pc, #756]	; (8001718 <interupt_calFusion+0x330>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4bbf      	ldr	r3, [pc, #764]	; (8001724 <interupt_calFusion+0x33c>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001430:	4bb9      	ldr	r3, [pc, #740]	; (8001718 <interupt_calFusion+0x330>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800143a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800143e:	4bba      	ldr	r3, [pc, #744]	; (8001728 <interupt_calFusion+0x340>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	4bb5      	ldr	r3, [pc, #724]	; (8001724 <interupt_calFusion+0x33c>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 8001452:	4bb6      	ldr	r3, [pc, #728]	; (800172c <interupt_calFusion+0x344>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f89e 	bl	8000598 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	4bae      	ldr	r3, [pc, #696]	; (800171c <interupt_calFusion+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f897 	bl	8000598 <__aeabi_f2d>
 800146a:	a3a9      	add	r3, pc, #676	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8ea 	bl	8000648 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe ff2e 	bl	80002dc <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fbb6 	bl	8000bf8 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4aa7      	ldr	r2, [pc, #668]	; (800172c <interupt_calFusion+0x344>)
 8001490:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 8001492:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <interupt_calFusion+0x348>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f87e 	bl	8000598 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4ba0      	ldr	r3, [pc, #640]	; (8001724 <interupt_calFusion+0x33c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f877 	bl	8000598 <__aeabi_f2d>
 80014aa:	a399      	add	r3, pc, #612	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8ca 	bl	8000648 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe ff0e 	bl	80002dc <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb96 	bl	8000bf8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a98      	ldr	r2, [pc, #608]	; (8001730 <interupt_calFusion+0x348>)
 80014d0:	6013      	str	r3, [r2, #0]


	G_hpf_speedL = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 80014d2:	4b91      	ldr	r3, [pc, #580]	; (8001718 <interupt_calFusion+0x330>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	4b94      	ldr	r3, [pc, #592]	; (8001734 <interupt_calFusion+0x34c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f857 	bl	8000598 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <interupt_calFusion+0x350>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	a385      	add	r3, pc, #532	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f8a3 	bl	8000648 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4640      	mov	r0, r8
 8001508:	4649      	mov	r1, r9
 800150a:	f7fe fee7 	bl	80002dc <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7ff f897 	bl	8000648 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb69 	bl	8000bf8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	4a82      	ldr	r2, [pc, #520]	; (8001734 <interupt_calFusion+0x34c>)
 800152a:	6013      	str	r3, [r2, #0]
	G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 800152c:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <interupt_calFusion+0x330>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f831 	bl	8000598 <__aeabi_f2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <interupt_calFusion+0x34c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f82a 	bl	8000598 <__aeabi_f2d>
 8001544:	4680      	mov	r8, r0
 8001546:	4689      	mov	r9, r1
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <interupt_calFusion+0x350>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f823 	bl	8000598 <__aeabi_f2d>
 8001552:	a36f      	add	r3, pc, #444	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f876 	bl	8000648 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4640      	mov	r0, r8
 8001562:	4649      	mov	r1, r9
 8001564:	f7fe feba 	bl	80002dc <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7ff f86a 	bl	8000648 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fb3c 	bl	8000bf8 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <interupt_calFusion+0x354>)
 8001584:	6013      	str	r3, [r2, #0]
	G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <interupt_calFusion+0x358>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f804 	bl	8000598 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <interupt_calFusion+0x34c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fffd 	bl	8000598 <__aeabi_f2d>
 800159e:	a35c      	add	r3, pc, #368	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe94 	bl	80002dc <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb1c 	bl	8000bf8 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <interupt_calFusion+0x358>)
 80015c4:	6013      	str	r3, [r2, #0]
	G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <interupt_calFusion+0x35c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffe4 	bl	8000598 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <interupt_calFusion+0x354>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffdd 	bl	8000598 <__aeabi_f2d>
 80015de:	a34c      	add	r3, pc, #304	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f830 	bl	8000648 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe74 	bl	80002dc <__adddf3>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fafc 	bl	8000bf8 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a50      	ldr	r2, [pc, #320]	; (8001744 <interupt_calFusion+0x35c>)
 8001604:	6013      	str	r3, [r2, #0]


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <interupt_calFusion+0x330>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <interupt_calFusion+0x360>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffbd 	bl	8000598 <__aeabi_f2d>
 800161e:	4680      	mov	r8, r0
 8001620:	4689      	mov	r9, r1
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <interupt_calFusion+0x350>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffb6 	bl	8000598 <__aeabi_f2d>
 800162c:	a338      	add	r3, pc, #224	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f809 	bl	8000648 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4640      	mov	r0, r8
 800163c:	4649      	mov	r1, r9
 800163e:	f7fe fe4d 	bl	80002dc <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fffd 	bl	8000648 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4614      	mov	r4, r2
 8001654:	461d      	mov	r5, r3
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <interupt_calFusion+0x330>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <interupt_calFusion+0x338>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7fe ff91 	bl	8000598 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe2d 	bl	80002dc <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fab5 	bl	8000bf8 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <interupt_calFusion+0x360>)
 8001692:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <interupt_calFusion+0x330>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff7d 	bl	8000598 <__aeabi_f2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <interupt_calFusion+0x360>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff76 	bl	8000598 <__aeabi_f2d>
 80016ac:	4680      	mov	r8, r0
 80016ae:	4689      	mov	r9, r1
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <interupt_calFusion+0x350>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_f2d>
 80016ba:	a315      	add	r3, pc, #84	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffc2 	bl	8000648 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4640      	mov	r0, r8
 80016ca:	4649      	mov	r1, r9
 80016cc:	f7fe fe06 	bl	80002dc <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe ffb6 	bl	8000648 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <interupt_calFusion+0x330>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <interupt_calFusion+0x340>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	ee17 0a90 	vmov	r0, s15
 8001700:	f7fe ff4a 	bl	8000598 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	e01e      	b.n	800174c <interupt_calFusion+0x364>
 800170e:	bf00      	nop
 8001710:	d2f1a9fc 	.word	0xd2f1a9fc
 8001714:	3f50624d 	.word	0x3f50624d
 8001718:	20000260 	.word	0x20000260
 800171c:	20000238 	.word	0x20000238
 8001720:	20000228 	.word	0x20000228
 8001724:	2000023c 	.word	0x2000023c
 8001728:	2000022c 	.word	0x2000022c
 800172c:	20000230 	.word	0x20000230
 8001730:	20000234 	.word	0x20000234
 8001734:	20000248 	.word	0x20000248
 8001738:	20000280 	.word	0x20000280
 800173c:	2000024c 	.word	0x2000024c
 8001740:	20000240 	.word	0x20000240
 8001744:	20000244 	.word	0x20000244
 8001748:	20000258 	.word	0x20000258
 800174c:	f7fe fdc6 	bl	80002dc <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa4e 	bl	8000bf8 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <interupt_calFusion+0x408>)
 8001760:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <interupt_calFusion+0x40c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe ff16 	bl	8000598 <__aeabi_f2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <interupt_calFusion+0x410>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff0f 	bl	8000598 <__aeabi_f2d>
 800177a:	a31b      	add	r3, pc, #108	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ff62 	bl	8000648 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fda6 	bl	80002dc <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa2e 	bl	8000bf8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <interupt_calFusion+0x40c>)
 80017a0:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <interupt_calFusion+0x414>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fef6 	bl	8000598 <__aeabi_f2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <interupt_calFusion+0x408>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe feef 	bl	8000598 <__aeabi_f2d>
 80017ba:	a30b      	add	r3, pc, #44	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ff42 	bl	8000648 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fd86 	bl	80002dc <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff fa0e 	bl	8000bf8 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <interupt_calFusion+0x414>)
 80017e0:	6013      	str	r3, [r2, #0]

}
 80017e2:	bf00      	nop
 80017e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017ec:	3f50624d 	.word	0x3f50624d
 80017f0:	2000025c 	.word	0x2000025c
 80017f4:	20000250 	.word	0x20000250
 80017f8:	20000258 	.word	0x20000258
 80017fc:	20000254 	.word	0x20000254

08001800 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	int s = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
	angle = 0;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <reset_gyro+0xfc>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <reset_gyro+0x100>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e026      	b.n	800186e <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <reset_gyro+0x104>)
 8001822:	ed93 7a02 	vldr	s14, [r3, #8]
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <reset_gyro+0x100>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <reset_gyro+0x100>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <reset_gyro+0x104>)
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <reset_gyro+0x108>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <reset_gyro+0x108>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <reset_gyro+0x104>)
 800184e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <reset_gyro+0x10c>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <reset_gyro+0x10c>)
 800185e:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f006 fc80 	bl	8008168 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	ddd4      	ble.n	8001820 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <reset_gyro+0x100>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001910 <reset_gyro+0x110>
 8001880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <reset_gyro+0x100>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <reset_gyro+0x108>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001910 <reset_gyro+0x110>
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <reset_gyro+0x108>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <reset_gyro+0x10c>)
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001910 <reset_gyro+0x110>
 80018a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <reset_gyro+0x10c>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <reset_gyro+0xfc>)
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	anglex = 0;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <reset_gyro+0x114>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <reset_gyro+0x118>)
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <reset_gyro+0x11c>)
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e009      	b.n	80018ec <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <reset_gyro+0x120>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	ddf2      	ble.n	80018d8 <reset_gyro+0xd8>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000264 	.word	0x20000264
 8001900:	20000288 	.word	0x20000288
 8001904:	200006e4 	.word	0x200006e4
 8001908:	20000284 	.word	0x20000284
 800190c:	2000028c 	.word	0x2000028c
 8001910:	447a0000 	.word	0x447a0000
 8001914:	2000026c 	.word	0x2000026c
 8001918:	20000278 	.word	0x20000278
 800191c:	2000027c 	.word	0x2000027c
 8001920:	20000290 	.word	0x20000290
 8001924:	00000000 	.word	0x00000000

08001928 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	int j = 9;
 800192e:	2309      	movs	r3, #9
 8001930:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001932:	2309      	movs	r3, #9
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e00d      	b.n	8001954 <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	4aa6      	ldr	r2, [pc, #664]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	49a4      	ldr	r1, [pc, #656]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dcee      	bgt.n	8001938 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 800195a:	4ba0      	ldr	r3, [pc, #640]	; (8001bdc <interrupt_calGyro+0x2b4>)
 800195c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001960:	4b9f      	ldr	r3, [pc, #636]	; (8001be0 <interrupt_calGyro+0x2b8>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	ee17 0a90 	vmov	r0, s15
 800196e:	f7fe fe13 	bl	8000598 <__aeabi_f2d>
 8001972:	a387      	add	r3, pc, #540	; (adr r3, 8001b90 <interrupt_calGyro+0x268>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe66 	bl	8000648 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a384      	add	r3, pc, #528	; (adr r3, 8001b98 <interrupt_calGyro+0x270>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe5d 	bl	8000648 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	a382      	add	r3, pc, #520	; (adr r3, 8001ba0 <interrupt_calGyro+0x278>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe ff7e 	bl	800089c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f7ff f926 	bl	8000bf8 <__aeabi_d2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a8a      	ldr	r2, [pc, #552]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b0:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 80019b2:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a8b      	ldr	r2, [pc, #556]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019b8:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 80019ba:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a8a      	ldr	r2, [pc, #552]	; (8001be8 <interrupt_calGyro+0x2c0>)
 80019c0:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 80019c2:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <interrupt_calGyro+0x2c4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <interrupt_calGyro+0x2c8>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 80019d8:	4b86      	ldr	r3, [pc, #536]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fddb 	bl	8000598 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdd4 	bl	8000598 <__aeabi_f2d>
 80019f0:	a36d      	add	r3, pc, #436	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe27 	bl	8000648 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc6b 	bl	80002dc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f8f3 	bl	8000bf8 <__aeabi_d2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 8001a16:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001a18:	4b77      	ldr	r3, [pc, #476]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fdbb 	bl	8000598 <__aeabi_f2d>
 8001a22:	4604      	mov	r4, r0
 8001a24:	460d      	mov	r5, r1
 8001a26:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <interrupt_calGyro+0x2c4>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	ee17 0a90 	vmov	r0, s15
 8001a3a:	f7fe fdad 	bl	8000598 <__aeabi_f2d>
 8001a3e:	a35a      	add	r3, pc, #360	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fe00 	bl	8000648 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fc44 	bl	80002dc <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8cc 	bl	8000bf8 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a64:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a68:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <interrupt_calGyro+0x2d4>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	ee17 0a90 	vmov	r0, s15
 8001a7a:	f7fe fd8d 	bl	8000598 <__aeabi_f2d>
 8001a7e:	a34c      	add	r3, pc, #304	; (adr r3, 8001bb0 <interrupt_calGyro+0x288>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fde0 	bl	8000648 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	a349      	add	r3, pc, #292	; (adr r3, 8001bb8 <interrupt_calGyro+0x290>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fdd7 	bl	8000648 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	a347      	add	r3, pc, #284	; (adr r3, 8001bc0 <interrupt_calGyro+0x298>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fef8 	bl	800089c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <interrupt_calGyro+0x2d8>)
 8001aba:	f7fe fdc5 	bl	8000648 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a340      	add	r3, pc, #256	; (adr r3, 8001bc8 <interrupt_calGyro+0x2a0>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fee6 	bl	800089c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <interrupt_calGyro+0x2dc>)
 8001ade:	f7fe fdb3 	bl	8000648 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a339      	add	r3, pc, #228	; (adr r3, 8001bd0 <interrupt_calGyro+0x2a8>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fdaa 	bl	8000648 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f87c 	bl	8000bf8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b04:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd44 	bl	8000598 <__aeabi_f2d>
 8001b10:	4604      	mov	r4, r0
 8001b12:	460d      	mov	r5, r1
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd3d 	bl	8000598 <__aeabi_f2d>
 8001b1e:	a322      	add	r3, pc, #136	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f85c 	bl	8000bf8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b44:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd24 	bl	8000598 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd1d 	bl	8000598 <__aeabi_f2d>
 8001b5e:	a312      	add	r3, pc, #72	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f83c 	bl	8000bf8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b84:	6013      	str	r3, [r2, #0]




}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	70a3d70a 	.word	0x70a3d70a
 8001b94:	3fef0a3d 	.word	0x3fef0a3d
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40acd400 	.word	0x40acd400
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40ac2000 	.word	0x40ac2000
 8001ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bac:	3f50624d 	.word	0x3f50624d
 8001bb0:	0fcf80dc 	.word	0x0fcf80dc
 8001bb4:	3ff0a423 	.word	0x3ff0a423
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	4078c000 	.word	0x4078c000
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	4077d000 	.word	0x4077d000
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	407a7000 	.word	0x407a7000
 8001bd0:	3a92a305 	.word	0x3a92a305
 8001bd4:	40239d01 	.word	0x40239d01
 8001bd8:	20000290 	.word	0x20000290
 8001bdc:	200006e4 	.word	0x200006e4
 8001be0:	20000288 	.word	0x20000288
 8001be4:	20000268 	.word	0x20000268
 8001be8:	20000270 	.word	0x20000270
 8001bec:	20000284 	.word	0x20000284
 8001bf0:	20000274 	.word	0x20000274
 8001bf4:	20000264 	.word	0x20000264
 8001bf8:	2000026c 	.word	0x2000026c
 8001bfc:	2000028c 	.word	0x2000028c
 8001c00:	40790000 	.word	0x40790000
 8001c04:	408f4000 	.word	0x408f4000
 8001c08:	20000280 	.word	0x20000280
 8001c0c:	20000278 	.word	0x20000278
 8001c10:	2000027c 	.word	0x2000027c
 8001c14:	00000000 	.word	0x00000000

08001c18 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	e00f      	b.n	8001c44 <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001c24:	f006 f844 	bl	8007cb0 <pl_getbatt>
 8001c28:	eef0 7a40 	vmov.f32	s15, s0
 8001c2c:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <battcheak+0xe8>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f006 fa51 	bl	80080e0 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b13      	cmp	r3, #19
 8001c48:	ddec      	ble.n	8001c24 <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <battcheak+0xec>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e010      	b.n	8001c7a <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <battcheak+0xe8>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 7a00 	vldr	s14, [r3]
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <battcheak+0xec>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <battcheak+0xec>)
 8001c70:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b13      	cmp	r3, #19
 8001c7e:	ddeb      	ble.n	8001c58 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <battcheak+0xec>)
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <battcheak+0xec>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <battcheak+0xec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc7d 	bl	8000598 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4819      	ldr	r0, [pc, #100]	; (8001d08 <battcheak+0xf0>)
 8001ca4:	f01d fe5e 	bl	801f964 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <battcheak+0xec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc73 	bl	8000598 <__aeabi_f2d>
 8001cb2:	a311      	add	r3, pc, #68	; (adr r3, 8001cf8 <battcheak+0xe0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe ff42 	bl	8000b40 <__aeabi_dcmple>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d100      	bne.n	8001cc4 <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001cc2:	e014      	b.n	8001cee <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f005 fa61 	bl	800718c <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f005 fa70 	bl	80071b0 <pl_l_blue_LED>
		wait_ms(500);
 8001cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd4:	f006 fa04 	bl	80080e0 <wait_ms>
		pl_r_blue_LED(OFF);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f005 fa57 	bl	800718c <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f005 fa66 	bl	80071b0 <pl_l_blue_LED>
		wait_ms(500);
 8001ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce8:	f006 f9fa 	bl	80080e0 <wait_ms>
		pl_r_blue_LED(ON);
 8001cec:	e7ea      	b.n	8001cc4 <battcheak+0xac>
}
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	9999999a 	.word	0x9999999a
 8001cfc:	400d9999 	.word	0x400d9999
 8001d00:	20000484 	.word	0x20000484
 8001d04:	200004d4 	.word	0x200004d4
 8001d08:	080220a0 	.word	0x080220a0

08001d0c <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001d12:	f006 f96b 	bl	8007fec <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001d16:	2313      	movs	r3, #19
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	e037      	b.n	8001d8c <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d26:	4960      	ldr	r1, [pc, #384]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d34:	3314      	adds	r3, #20
 8001d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3a:	495b      	ldr	r1, [pc, #364]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3314      	adds	r3, #20
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d4a:	3328      	adds	r3, #40	; 0x28
 8001d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d50:	4955      	ldr	r1, [pc, #340]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d60:	333c      	adds	r3, #60	; 0x3c
 8001d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d66:	4950      	ldr	r1, [pc, #320]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	333c      	adds	r3, #60	; 0x3c
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d76:	3350      	adds	r3, #80	; 0x50
 8001d78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d7c:	494a      	ldr	r1, [pc, #296]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3350      	adds	r3, #80	; 0x50
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dcc4      	bgt.n	8001d1c <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <interupt_calSensor+0x1a0>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001da0:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001da2:	4b42      	ldr	r3, [pc, #264]	; (8001eac <interupt_calSensor+0x1a0>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001db0:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <interupt_calSensor+0x1a0>)
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dc0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dc6:	88db      	ldrh	r3, [r3, #6]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dcc:	88db      	ldrh	r3, [r3, #6]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dd8:	891b      	ldrh	r3, [r3, #8]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dde:	891b      	ldrh	r3, [r3, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e053      	b.n	8001e96 <interupt_calSensor+0x18a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001dee:	492e      	ldr	r1, [pc, #184]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	440b      	add	r3, r1
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	482a      	ldr	r0, [pc, #168]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4403      	add	r3, r0
 8001e0c:	332c      	adds	r3, #44	; 0x2c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1aca      	subs	r2, r1, r3
 8001e12:	4928      	ldr	r1, [pc, #160]	; (8001eb4 <interupt_calSensor+0x1a8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
 8001e1a:	4923      	ldr	r1, [pc, #140]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	440b      	add	r3, r1
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4403      	add	r3, r0
 8001e38:	3318      	adds	r3, #24
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1aca      	subs	r2, r1, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <interupt_calSensor+0x1ac>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001e46:	4918      	ldr	r1, [pc, #96]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	440b      	add	r3, r1
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4403      	add	r3, r0
 8001e64:	3304      	adds	r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4419      	add	r1, r3
 8001e6a:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4403      	add	r3, r0
 8001e78:	3308      	adds	r3, #8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	440b      	add	r3, r1
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <interupt_calSensor+0x1b0>)
 8001e80:	fb82 1203 	smull	r1, r2, r2, r3
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <interupt_calSensor+0x1b4>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	dda8      	ble.n	8001dee <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002b8 	.word	0x200002b8
 8001eac:	2000070c 	.word	0x2000070c
 8001eb0:	20000718 	.word	0x20000718
 8001eb4:	20000448 	.word	0x20000448
 8001eb8:	2000045c 	.word	0x2000045c
 8001ebc:	55555556 	.word	0x55555556
 8001ec0:	20000470 	.word	0x20000470

08001ec4 <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Control_mode_Init+0x28>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <Control_mode_Init+0x2c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <Control_mode_Init+0x30>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <Control_mode_Init+0x34>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]

}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000528 	.word	0x20000528
 8001ef0:	20000805 	.word	0x20000805
 8001ef4:	20000800 	.word	0x20000800
 8001ef8:	20000529 	.word	0x20000529

08001efc <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f06:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	db14      	blt.n	8001f46 <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f005 fdfb 	bl	8007b18 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <get_duty+0x11c>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f30:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800201c <get_duty+0x120>
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3c:	ee17 2a90 	vmov	r2, s15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e015      	b.n	8001f72 <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f005 fde6 	bl	8007b18 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f50:	eef1 6a67 	vneg.f32	s13, s15
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <get_duty+0x11c>)
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800201c <get_duty+0x120>
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	ee17 2a90 	vmov	r2, s15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001f72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	db14      	blt.n	8001faa <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f005 fdf1 	bl	8007b68 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <get_duty+0x11c>)
 8001f88:	ed93 7a00 	vldr	s14, [r3]
 8001f8c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800201c <get_duty+0x120>
 8001f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa0:	ee17 2a90 	vmov	r2, s15
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e015      	b.n	8001fd6 <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001faa:	2002      	movs	r0, #2
 8001fac:	f005 fddc 	bl	8007b68 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fb4:	eef1 6a67 	vneg.f32	s13, s15
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <get_duty+0x11c>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800201c <get_duty+0x120>
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fce:	ee17 2a90 	vmov	r2, s15
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f240 628c 	movw	r2, #1676	; 0x68c
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	dd03      	ble.n	8001ffa <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ff8:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f240 628c 	movw	r2, #1676	; 0x68c
 8002002:	4293      	cmp	r3, r2
 8002004:	dd03      	ble.n	800200e <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f240 628d 	movw	r2, #1677	; 0x68d
 800200c:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200004d4 	.word	0x200004d4
 800201c:	44d1e000 	.word	0x44d1e000

08002020 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002024:	b08c      	sub	sp, #48	; 0x30
 8002026:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 800204e:	4bd2      	ldr	r3, [pc, #840]	; (8002398 <interupt_DriveMotor+0x378>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8002056:	4bd1      	ldr	r3, [pc, #836]	; (800239c <interupt_DriveMotor+0x37c>)
 8002058:	2204      	movs	r2, #4
 800205a:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 800205c:	4bd0      	ldr	r3, [pc, #832]	; (80023a0 <interupt_DriveMotor+0x380>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002062:	4bd0      	ldr	r3, [pc, #832]	; (80023a4 <interupt_DriveMotor+0x384>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8002068:	4bcb      	ldr	r3, [pc, #812]	; (8002398 <interupt_DriveMotor+0x378>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	f040 828f 	bne.w	8002590 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8002072:	4bcc      	ldr	r3, [pc, #816]	; (80023a4 <interupt_DriveMotor+0x384>)
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002078:	4bcb      	ldr	r3, [pc, #812]	; (80023a8 <interupt_DriveMotor+0x388>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4aca      	ldr	r2, [pc, #808]	; (80023a8 <interupt_DriveMotor+0x388>)
 8002080:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002082:	4bca      	ldr	r3, [pc, #808]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa86 	bl	8000598 <__aeabi_f2d>
 800208c:	4604      	mov	r4, r0
 800208e:	460d      	mov	r5, r1
 8002090:	4bc6      	ldr	r3, [pc, #792]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa7f 	bl	8000598 <__aeabi_f2d>
 800209a:	a3bb      	add	r3, pc, #748	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fad2 	bl	8000648 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4690      	mov	r8, r2
 80020aa:	4699      	mov	r9, r3
 80020ac:	4bbf      	ldr	r3, [pc, #764]	; (80023ac <interupt_DriveMotor+0x38c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa71 	bl	8000598 <__aeabi_f2d>
 80020b6:	a3b4      	add	r3, pc, #720	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fac4 	bl	8000648 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	a3af      	add	r3, pc, #700	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe fabb 	bl	8000648 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e2:	f7fe fbdb 	bl	800089c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4640      	mov	r0, r8
 80020ec:	4649      	mov	r1, r9
 80020ee:	f7fe f8f5 	bl	80002dc <__adddf3>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe f8ef 	bl	80002dc <__adddf3>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fd77 	bl	8000bf8 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4aa7      	ldr	r2, [pc, #668]	; (80023ac <interupt_DriveMotor+0x38c>)
 800210e:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002110:	4ba6      	ldr	r3, [pc, #664]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa3f 	bl	8000598 <__aeabi_f2d>
 800211a:	4604      	mov	r4, r0
 800211c:	460d      	mov	r5, r1
 800211e:	4ba3      	ldr	r3, [pc, #652]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa38 	bl	8000598 <__aeabi_f2d>
 8002128:	a397      	add	r3, pc, #604	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe fa8b 	bl	8000648 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe f8cf 	bl	80002dc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd57 	bl	8000bf8 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	4a97      	ldr	r2, [pc, #604]	; (80023ac <interupt_DriveMotor+0x38c>)
 800214e:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002150:	4b97      	ldr	r3, [pc, #604]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fa1f 	bl	8000598 <__aeabi_f2d>
 800215a:	4604      	mov	r4, r0
 800215c:	460d      	mov	r5, r1
 800215e:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fa18 	bl	8000598 <__aeabi_f2d>
 8002168:	a387      	add	r3, pc, #540	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa6b 	bl	8000648 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4690      	mov	r8, r2
 8002178:	4699      	mov	r9, r3
 800217a:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <interupt_DriveMotor+0x390>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fa0a 	bl	8000598 <__aeabi_f2d>
 8002184:	a380      	add	r3, pc, #512	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa5d 	bl	8000648 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	a37c      	add	r3, pc, #496	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe fa54 	bl	8000648 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b0:	f7fe fb74 	bl	800089c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4640      	mov	r0, r8
 80021ba:	4649      	mov	r1, r9
 80021bc:	f7fe f88e 	bl	80002dc <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	f7fe f888 	bl	80002dc <__adddf3>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fd10 	bl	8000bf8 <__aeabi_d2f>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a75      	ldr	r2, [pc, #468]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021dc:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80021de:	4b74      	ldr	r3, [pc, #464]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9d8 	bl	8000598 <__aeabi_f2d>
 80021e8:	4604      	mov	r4, r0
 80021ea:	460d      	mov	r5, r1
 80021ec:	4b70      	ldr	r3, [pc, #448]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9d1 	bl	8000598 <__aeabi_f2d>
 80021f6:	a364      	add	r3, pc, #400	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe fa24 	bl	8000648 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe f868 	bl	80002dc <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fcf0 	bl	8000bf8 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	4a65      	ldr	r2, [pc, #404]	; (80023b0 <interupt_DriveMotor+0x390>)
 800221c:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 800221e:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <interupt_DriveMotor+0x394>)
 8002220:	4a62      	ldr	r2, [pc, #392]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002222:	9201      	str	r2, [sp, #4]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222a:	f006 f957 	bl	80084dc <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	eef0 0a47 	vmov.f32	s1, s14
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fb59 	bl	8004904 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002252:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <interupt_DriveMotor+0x398>)
 8002254:	ed93 7a00 	vldr	s14, [r3]
 8002258:	4b58      	ldr	r3, [pc, #352]	; (80023bc <interupt_DriveMotor+0x39c>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002262:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <interupt_DriveMotor+0x38c>)
 800226c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <interupt_DriveMotor+0x3a0>)
 8002272:	edd3 6a00 	vldr	s13, [r3]
 8002276:	4b4e      	ldr	r3, [pc, #312]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002278:	ed93 6a01 	vldr	s12, [r3, #4]
 800227c:	1d3a      	adds	r2, r7, #4
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	eef0 1a46 	vmov.f32	s3, s12
 8002286:	eeb0 1a66 	vmov.f32	s2, s13
 800228a:	4611      	mov	r1, r2
 800228c:	eef0 0a67 	vmov.f32	s1, s15
 8002290:	eeb0 0a47 	vmov.f32	s0, s14
 8002294:	4618      	mov	r0, r3
 8002296:	f002 f88f 	bl	80043b8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 800229a:	f002 fd29 	bl	8004cf0 <calWallConrol>
 800229e:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80022a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80022a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80022b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022be:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 80022ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022de:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ee:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80022f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80022f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	ee17 0a90 	vmov	r0, s15
 8002302:	f7fe f949 	bl	8000598 <__aeabi_f2d>
 8002306:	4604      	mov	r4, r0
 8002308:	460d      	mov	r5, r1
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <interupt_DriveMotor+0x3a4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f942 	bl	8000598 <__aeabi_f2d>
 8002314:	a31e      	add	r3, pc, #120	; (adr r3, 8002390 <interupt_DriveMotor+0x370>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f995 	bl	8000648 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4620      	mov	r0, r4
 8002324:	4629      	mov	r1, r5
 8002326:	f7fe fc1f 	bl	8000b68 <__aeabi_dcmpgt>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 808d 	beq.w	800244c <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002334:	f7fe f930 	bl	8000598 <__aeabi_f2d>
 8002338:	4604      	mov	r4, r0
 800233a:	460d      	mov	r5, r1
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <interupt_DriveMotor+0x3a4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f929 	bl	8000598 <__aeabi_f2d>
 8002346:	a312      	add	r3, pc, #72	; (adr r3, 8002390 <interupt_DriveMotor+0x370>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f97c 	bl	8000648 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4690      	mov	r8, r2
 8002356:	4699      	mov	r9, r3
 8002358:	ed97 7a04 	vldr	s14, [r7, #16]
 800235c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002364:	ee17 0a90 	vmov	r0, s15
 8002368:	f7fe f916 	bl	8000598 <__aeabi_f2d>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4640      	mov	r0, r8
 8002372:	4649      	mov	r1, r9
 8002374:	f7fd ffb0 	bl	80002d8 <__aeabi_dsub>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	e022      	b.n	80023c8 <interupt_DriveMotor+0x3a8>
 8002382:	bf00      	nop
 8002384:	f3af 8000 	nop.w
 8002388:	d2f1a9fc 	.word	0xd2f1a9fc
 800238c:	3f50624d 	.word	0x3f50624d
 8002390:	d916872b 	.word	0xd916872b
 8002394:	3feff7ce 	.word	0x3feff7ce
 8002398:	20000528 	.word	0x20000528
 800239c:	20000804 	.word	0x20000804
 80023a0:	20000590 	.word	0x20000590
 80023a4:	20000592 	.word	0x20000592
 80023a8:	20000524 	.word	0x20000524
 80023ac:	200004d8 	.word	0x200004d8
 80023b0:	200004e4 	.word	0x200004e4
 80023b4:	200004f0 	.word	0x200004f0
 80023b8:	20000238 	.word	0x20000238
 80023bc:	2000023c 	.word	0x2000023c
 80023c0:	20000268 	.word	0x20000268
 80023c4:	200004d4 	.word	0x200004d4
 80023c8:	f7fd ff88 	bl	80002dc <__adddf3>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fc10 	bl	8000bf8 <__aeabi_d2f>
 80023d8:	4603      	mov	r3, r0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023dc:	6a38      	ldr	r0, [r7, #32]
 80023de:	f7fe f8db 	bl	8000598 <__aeabi_f2d>
 80023e2:	4604      	mov	r4, r0
 80023e4:	460d      	mov	r5, r1
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <interupt_DriveMotor+0x428>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f8d4 	bl	8000598 <__aeabi_f2d>
 80023f0:	a313      	add	r3, pc, #76	; (adr r3, 8002440 <interupt_DriveMotor+0x420>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f927 	bl	8000648 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4690      	mov	r8, r2
 8002400:	4699      	mov	r9, r3
 8002402:	ed97 7a04 	vldr	s14, [r7, #16]
 8002406:	edd7 7a02 	vldr	s15, [r7, #8]
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	ee17 0a90 	vmov	r0, s15
 8002412:	f7fe f8c1 	bl	8000598 <__aeabi_f2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4640      	mov	r0, r8
 800241c:	4649      	mov	r1, r9
 800241e:	f7fd ff5b 	bl	80002d8 <__aeabi_dsub>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fd ff57 	bl	80002dc <__adddf3>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fbdf 	bl	8000bf8 <__aeabi_d2f>
 800243a:	4603      	mov	r3, r0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	e095      	b.n	800256c <interupt_DriveMotor+0x54c>
 8002440:	d916872b 	.word	0xd916872b
 8002444:	3feff7ce 	.word	0x3feff7ce
 8002448:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800244c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002450:	edd7 7a02 	vldr	s15, [r7, #8]
 8002454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002458:	ee17 0a90 	vmov	r0, s15
 800245c:	f7fe f89c 	bl	8000598 <__aeabi_f2d>
 8002460:	4604      	mov	r4, r0
 8002462:	460d      	mov	r5, r1
 8002464:	4bce      	ldr	r3, [pc, #824]	; (80027a0 <interupt_DriveMotor+0x780>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	eef1 7a67 	vneg.f32	s15, s15
 800246e:	ee17 3a90 	vmov	r3, s15
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f890 	bl	8000598 <__aeabi_f2d>
 8002478:	a3c5      	add	r3, pc, #788	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fe f8e3 	bl	8000648 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4620      	mov	r0, r4
 8002488:	4629      	mov	r1, r5
 800248a:	f7fe fb4f 	bl	8000b2c <__aeabi_dcmplt>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d06b      	beq.n	800256c <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002496:	f7fe f87f 	bl	8000598 <__aeabi_f2d>
 800249a:	4604      	mov	r4, r0
 800249c:	460d      	mov	r5, r1
 800249e:	4bc0      	ldr	r3, [pc, #768]	; (80027a0 <interupt_DriveMotor+0x780>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eef1 7a67 	vneg.f32	s15, s15
 80024a8:	ee17 3a90 	vmov	r3, s15
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f873 	bl	8000598 <__aeabi_f2d>
 80024b2:	a3b7      	add	r3, pc, #732	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f8c6 	bl	8000648 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4690      	mov	r8, r2
 80024c2:	4699      	mov	r9, r3
 80024c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80024c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80024cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d0:	ee17 0a90 	vmov	r0, s15
 80024d4:	f7fe f860 	bl	8000598 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4640      	mov	r0, r8
 80024de:	4649      	mov	r1, r9
 80024e0:	f7fd fefa 	bl	80002d8 <__aeabi_dsub>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4620      	mov	r0, r4
 80024ea:	4629      	mov	r1, r5
 80024ec:	f7fd fef6 	bl	80002dc <__adddf3>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe fb7e 	bl	8000bf8 <__aeabi_d2f>
 80024fc:	4603      	mov	r3, r0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002500:	6a38      	ldr	r0, [r7, #32]
 8002502:	f7fe f849 	bl	8000598 <__aeabi_f2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	4ba5      	ldr	r3, [pc, #660]	; (80027a0 <interupt_DriveMotor+0x780>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	eef1 7a67 	vneg.f32	s15, s15
 8002514:	ee17 3a90 	vmov	r3, s15
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f83d 	bl	8000598 <__aeabi_f2d>
 800251e:	a39c      	add	r3, pc, #624	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f890 	bl	8000648 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4690      	mov	r8, r2
 800252e:	4699      	mov	r9, r3
 8002530:	ed97 7a04 	vldr	s14, [r7, #16]
 8002534:	edd7 7a02 	vldr	s15, [r7, #8]
 8002538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253c:	ee17 0a90 	vmov	r0, s15
 8002540:	f7fe f82a 	bl	8000598 <__aeabi_f2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4640      	mov	r0, r8
 800254a:	4649      	mov	r1, r9
 800254c:	f7fd fec4 	bl	80002d8 <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4620      	mov	r0, r4
 8002556:	4629      	mov	r1, r5
 8002558:	f7fd fec0 	bl	80002dc <__adddf3>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe fb48 	bl	8000bf8 <__aeabi_d2f>
 8002568:	4603      	mov	r3, r0
 800256a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800256c:	f107 0214 	add.w	r2, r7, #20
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	edd7 0a08 	vldr	s1, [r7, #32]
 800257c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002580:	f7ff fcbc 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f005 fb2e 	bl	8007bec <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002590:	4b84      	ldr	r3, [pc, #528]	; (80027a4 <interupt_DriveMotor+0x784>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d004      	beq.n	80025a2 <interupt_DriveMotor+0x582>
 8002598:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <interupt_DriveMotor+0x784>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b04      	cmp	r3, #4
 800259e:	f040 8287 	bne.w	8002ab0 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80025a2:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <interupt_DriveMotor+0x788>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <interupt_DriveMotor+0x78c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80025ae:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <interupt_DriveMotor+0x790>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a7e      	ldr	r2, [pc, #504]	; (80027b0 <interupt_DriveMotor+0x790>)
 80025b6:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffeb 	bl	8000598 <__aeabi_f2d>
 80025c2:	4604      	mov	r4, r0
 80025c4:	460d      	mov	r5, r1
 80025c6:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffe4 	bl	8000598 <__aeabi_f2d>
 80025d0:	a371      	add	r3, pc, #452	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f837 	bl	8000648 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4690      	mov	r8, r2
 80025e0:	4699      	mov	r9, r3
 80025e2:	4b74      	ldr	r3, [pc, #464]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffd6 	bl	8000598 <__aeabi_f2d>
 80025ec:	a36a      	add	r3, pc, #424	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe f829 	bl	8000648 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	a366      	add	r3, pc, #408	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f820 	bl	8000648 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002618:	f7fe f940 	bl	800089c <__aeabi_ddiv>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4640      	mov	r0, r8
 8002622:	4649      	mov	r1, r9
 8002624:	f7fd fe5a 	bl	80002dc <__adddf3>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe54 	bl	80002dc <__adddf3>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fadc 	bl	8000bf8 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002644:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002646:	4b5b      	ldr	r3, [pc, #364]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ffa4 	bl	8000598 <__aeabi_f2d>
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd ff9d 	bl	8000598 <__aeabi_f2d>
 800265e:	a34e      	add	r3, pc, #312	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fd fff0 	bl	8000648 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fd fe34 	bl	80002dc <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fabc 	bl	8000bf8 <__aeabi_d2f>
 8002680:	4603      	mov	r3, r0
 8002682:	4a4c      	ldr	r2, [pc, #304]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002684:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002686:	4b4c      	ldr	r3, [pc, #304]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff84 	bl	8000598 <__aeabi_f2d>
 8002690:	4604      	mov	r4, r0
 8002692:	460d      	mov	r5, r1
 8002694:	4b48      	ldr	r3, [pc, #288]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff7d 	bl	8000598 <__aeabi_f2d>
 800269e:	a33e      	add	r3, pc, #248	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fd ffd0 	bl	8000648 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4690      	mov	r8, r2
 80026ae:	4699      	mov	r9, r3
 80026b0:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <interupt_DriveMotor+0x798>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff6f 	bl	8000598 <__aeabi_f2d>
 80026ba:	a337      	add	r3, pc, #220	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd ffc2 	bl	8000648 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	a332      	add	r3, pc, #200	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fd ffb9 	bl	8000648 <__aeabi_dmul>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026e6:	f7fe f8d9 	bl	800089c <__aeabi_ddiv>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4640      	mov	r0, r8
 80026f0:	4649      	mov	r1, r9
 80026f2:	f7fd fdf3 	bl	80002dc <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fd fded 	bl	80002dc <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa75 	bl	8000bf8 <__aeabi_d2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002712:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002714:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff3d 	bl	8000598 <__aeabi_f2d>
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd ff36 	bl	8000598 <__aeabi_f2d>
 800272c:	a31a      	add	r3, pc, #104	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd ff89 	bl	8000648 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4620      	mov	r0, r4
 800273c:	4629      	mov	r1, r5
 800273e:	f7fd fdcd 	bl	80002dc <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fa55 	bl	8000bf8 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002752:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <interupt_DriveMotor+0x79c>)
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002758:	9201      	str	r2, [sp, #4]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002760:	f005 febc 	bl	80084dc <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <interupt_DriveMotor+0x798>)
 800276c:	ed93 7a00 	vldr	s14, [r3]
 8002770:	f107 020c 	add.w	r2, r7, #12
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	eef0 0a47 	vmov.f32	s1, s14
 800277c:	eeb0 0a67 	vmov.f32	s0, s15
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f002 f8be 	bl	8004904 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <interupt_DriveMotor+0x7a0>)
 800278a:	ed93 7a00 	vldr	s14, [r3]
 800278e:	e019      	b.n	80027c4 <interupt_DriveMotor+0x7a4>
 8002790:	d916872b 	.word	0xd916872b
 8002794:	3feff7ce 	.word	0x3feff7ce
 8002798:	d2f1a9fc 	.word	0xd2f1a9fc
 800279c:	3f50624d 	.word	0x3f50624d
 80027a0:	200004d4 	.word	0x200004d4
 80027a4:	20000528 	.word	0x20000528
 80027a8:	20000590 	.word	0x20000590
 80027ac:	20000592 	.word	0x20000592
 80027b0:	20000524 	.word	0x20000524
 80027b4:	200004d8 	.word	0x200004d8
 80027b8:	200004e4 	.word	0x200004e4
 80027bc:	20000504 	.word	0x20000504
 80027c0:	20000238 	.word	0x20000238
 80027c4:	4b64      	ldr	r3, [pc, #400]	; (8002958 <interupt_DriveMotor+0x938>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027d6:	4b61      	ldr	r3, [pc, #388]	; (800295c <interupt_DriveMotor+0x93c>)
 80027d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80027dc:	4b60      	ldr	r3, [pc, #384]	; (8002960 <interupt_DriveMotor+0x940>)
 80027de:	edd3 6a00 	vldr	s13, [r3]
 80027e2:	4b60      	ldr	r3, [pc, #384]	; (8002964 <interupt_DriveMotor+0x944>)
 80027e4:	ed93 6a01 	vldr	s12, [r3, #4]
 80027e8:	1d3a      	adds	r2, r7, #4
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	eef0 1a46 	vmov.f32	s3, s12
 80027f2:	eeb0 1a66 	vmov.f32	s2, s13
 80027f6:	4611      	mov	r1, r2
 80027f8:	eef0 0a67 	vmov.f32	s1, s15
 80027fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fdd9 	bl	80043b8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002806:	ed97 7a04 	vldr	s14, [r7, #16]
 800280a:	edd7 7a03 	vldr	s15, [r7, #12]
 800280e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002812:	edd7 7a02 	vldr	s15, [r7, #8]
 8002816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281a:	edd7 7a01 	vldr	s15, [r7, #4]
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002826:	ed97 7a04 	vldr	s14, [r7, #16]
 800282a:	edd7 7a03 	vldr	s15, [r7, #12]
 800282e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002832:	edd7 7a02 	vldr	s15, [r7, #8]
 8002836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283a:	edd7 7a01 	vldr	s15, [r7, #4]
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002846:	ed97 7a04 	vldr	s14, [r7, #16]
 800284a:	edd7 7a02 	vldr	s15, [r7, #8]
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	ee17 0a90 	vmov	r0, s15
 8002856:	f7fd fe9f 	bl	8000598 <__aeabi_f2d>
 800285a:	4604      	mov	r4, r0
 800285c:	460d      	mov	r5, r1
 800285e:	4b42      	ldr	r3, [pc, #264]	; (8002968 <interupt_DriveMotor+0x948>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe98 	bl	8000598 <__aeabi_f2d>
 8002868:	a339      	add	r3, pc, #228	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd feeb 	bl	8000648 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fe f975 	bl	8000b68 <__aeabi_dcmpgt>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d073      	beq.n	800296c <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002886:	f7fd fe87 	bl	8000598 <__aeabi_f2d>
 800288a:	4604      	mov	r4, r0
 800288c:	460d      	mov	r5, r1
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <interupt_DriveMotor+0x948>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe80 	bl	8000598 <__aeabi_f2d>
 8002898:	a32d      	add	r3, pc, #180	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f7fd fed3 	bl	8000648 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4690      	mov	r8, r2
 80028a8:	4699      	mov	r9, r3
 80028aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	ee17 0a90 	vmov	r0, s15
 80028ba:	f7fd fe6d 	bl	8000598 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4640      	mov	r0, r8
 80028c4:	4649      	mov	r1, r9
 80028c6:	f7fd fd07 	bl	80002d8 <__aeabi_dsub>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4620      	mov	r0, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	f7fd fd03 	bl	80002dc <__adddf3>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	f7fe f98b 	bl	8000bf8 <__aeabi_d2f>
 80028e2:	4603      	mov	r3, r0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028e6:	6a38      	ldr	r0, [r7, #32]
 80028e8:	f7fd fe56 	bl	8000598 <__aeabi_f2d>
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <interupt_DriveMotor+0x948>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe4f 	bl	8000598 <__aeabi_f2d>
 80028fa:	a315      	add	r3, pc, #84	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fea2 	bl	8000648 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4690      	mov	r8, r2
 800290a:	4699      	mov	r9, r3
 800290c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002910:	edd7 7a02 	vldr	s15, [r7, #8]
 8002914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002918:	ee17 0a90 	vmov	r0, s15
 800291c:	f7fd fe3c 	bl	8000598 <__aeabi_f2d>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4640      	mov	r0, r8
 8002926:	4649      	mov	r1, r9
 8002928:	f7fd fcd6 	bl	80002d8 <__aeabi_dsub>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f7fd fcd2 	bl	80002dc <__adddf3>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f95a 	bl	8000bf8 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	e0a0      	b.n	8002a8c <interupt_DriveMotor+0xa6c>
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w
 8002950:	d916872b 	.word	0xd916872b
 8002954:	3feff7ce 	.word	0x3feff7ce
 8002958:	2000023c 	.word	0x2000023c
 800295c:	200004d8 	.word	0x200004d8
 8002960:	20000268 	.word	0x20000268
 8002964:	200004e4 	.word	0x200004e4
 8002968:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800296c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002970:	edd7 7a02 	vldr	s15, [r7, #8]
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	ee17 0a90 	vmov	r0, s15
 800297c:	f7fd fe0c 	bl	8000598 <__aeabi_f2d>
 8002980:	4604      	mov	r4, r0
 8002982:	460d      	mov	r5, r1
 8002984:	4bd6      	ldr	r3, [pc, #856]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eef1 7a67 	vneg.f32	s15, s15
 800298e:	ee17 3a90 	vmov	r3, s15
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fe00 	bl	8000598 <__aeabi_f2d>
 8002998:	a3cd      	add	r3, pc, #820	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fd fe53 	bl	8000648 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7fe f8bf 	bl	8000b2c <__aeabi_dcmplt>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d06b      	beq.n	8002a8c <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80029b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029b6:	f7fd fdef 	bl	8000598 <__aeabi_f2d>
 80029ba:	4604      	mov	r4, r0
 80029bc:	460d      	mov	r5, r1
 80029be:	4bc8      	ldr	r3, [pc, #800]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eef1 7a67 	vneg.f32	s15, s15
 80029c8:	ee17 3a90 	vmov	r3, s15
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fde3 	bl	8000598 <__aeabi_f2d>
 80029d2:	a3bf      	add	r3, pc, #764	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fe36 	bl	8000648 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4690      	mov	r8, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80029e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fdd0 	bl	8000598 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4640      	mov	r0, r8
 80029fe:	4649      	mov	r1, r9
 8002a00:	f7fd fc6a 	bl	80002d8 <__aeabi_dsub>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc66 	bl	80002dc <__adddf3>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8ee 	bl	8000bf8 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002a20:	6a38      	ldr	r0, [r7, #32]
 8002a22:	f7fd fdb9 	bl	8000598 <__aeabi_f2d>
 8002a26:	4604      	mov	r4, r0
 8002a28:	460d      	mov	r5, r1
 8002a2a:	4bad      	ldr	r3, [pc, #692]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	eef1 7a67 	vneg.f32	s15, s15
 8002a34:	ee17 3a90 	vmov	r3, s15
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fdad 	bl	8000598 <__aeabi_f2d>
 8002a3e:	a3a4      	add	r3, pc, #656	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fe00 	bl	8000648 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	ee17 0a90 	vmov	r0, s15
 8002a60:	f7fd fd9a 	bl	8000598 <__aeabi_f2d>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4640      	mov	r0, r8
 8002a6a:	4649      	mov	r1, r9
 8002a6c:	f7fd fc34 	bl	80002d8 <__aeabi_dsub>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fc30 	bl	80002dc <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f8b8 	bl	8000bf8 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002a8c:	f107 0214 	add.w	r2, r7, #20
 8002a90:	f107 0318 	add.w	r3, r7, #24
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a9c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002aa0:	f7ff fa2c 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 f89e 	bl	8007bec <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <interupt_DriveMotor+0xcc4>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	f040 8137 	bne.w	8002d28 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 8002aba:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <interupt_DriveMotor+0xcc8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002ac0:	4b8a      	ldr	r3, [pc, #552]	; (8002cec <interupt_DriveMotor+0xccc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002ac6:	4b8a      	ldr	r3, [pc, #552]	; (8002cf0 <interupt_DriveMotor+0xcd0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a88      	ldr	r2, [pc, #544]	; (8002cf0 <interupt_DriveMotor+0xcd0>)
 8002ace:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ad0:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd5f 	bl	8000598 <__aeabi_f2d>
 8002ada:	4604      	mov	r4, r0
 8002adc:	460d      	mov	r5, r1
 8002ade:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fd58 	bl	8000598 <__aeabi_f2d>
 8002ae8:	a37b      	add	r3, pc, #492	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fdab 	bl	8000648 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4b7e      	ldr	r3, [pc, #504]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fd4a 	bl	8000598 <__aeabi_f2d>
 8002b04:	a374      	add	r3, pc, #464	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fd9d 	bl	8000648 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	a370      	add	r3, pc, #448	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fd94 	bl	8000648 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b30:	f7fd feb4 	bl	800089c <__aeabi_ddiv>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4640      	mov	r0, r8
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	f7fd fbce 	bl	80002dc <__adddf3>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd fbc8 	bl	80002dc <__adddf3>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f850 	bl	8000bf8 <__aeabi_d2f>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b5c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fd18 	bl	8000598 <__aeabi_f2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fd11 	bl	8000598 <__aeabi_f2d>
 8002b76:	a358      	add	r3, pc, #352	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fd64 	bl	8000648 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	f7fd fba8 	bl	80002dc <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f830 	bl	8000bf8 <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4a56      	ldr	r2, [pc, #344]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b9c:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002b9e:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fcf8 	bl	8000598 <__aeabi_f2d>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	460d      	mov	r5, r1
 8002bac:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fcf1 	bl	8000598 <__aeabi_f2d>
 8002bb6:	a348      	add	r3, pc, #288	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fd44 	bl	8000648 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fce3 	bl	8000598 <__aeabi_f2d>
 8002bd2:	a341      	add	r3, pc, #260	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f7fd fd36 	bl	8000648 <__aeabi_dmul>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	a33c      	add	r3, pc, #240	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fd2d 	bl	8000648 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bfe:	f7fd fe4d 	bl	800089c <__aeabi_ddiv>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4640      	mov	r0, r8
 8002c08:	4649      	mov	r1, r9
 8002c0a:	f7fd fb67 	bl	80002dc <__adddf3>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fb61 	bl	80002dc <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ffe9 	bl	8000bf8 <__aeabi_d2f>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c2a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fcb1 	bl	8000598 <__aeabi_f2d>
 8002c36:	4604      	mov	r4, r0
 8002c38:	460d      	mov	r5, r1
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fcaa 	bl	8000598 <__aeabi_f2d>
 8002c44:	a324      	add	r3, pc, #144	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fcfd 	bl	8000648 <__aeabi_dmul>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	f7fd fb41 	bl	80002dc <__adddf3>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f7fd ffc9 	bl	8000bf8 <__aeabi_d2f>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c6a:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c74:	ed93 7a00 	vldr	s14, [r3]
 8002c78:	f107 020c 	add.w	r2, r7, #12
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	eef0 0a47 	vmov.f32	s1, s14
 8002c84:	eeb0 0a67 	vmov.f32	s0, s15
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fe3a 	bl	8004904 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c90:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002cb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cc8:	e018      	b.n	8002cfc <interupt_DriveMotor+0xcdc>
 8002cca:	bf00      	nop
 8002ccc:	f3af 8000 	nop.w
 8002cd0:	d916872b 	.word	0xd916872b
 8002cd4:	3feff7ce 	.word	0x3feff7ce
 8002cd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cdc:	3f50624d 	.word	0x3f50624d
 8002ce0:	200004d4 	.word	0x200004d4
 8002ce4:	20000528 	.word	0x20000528
 8002ce8:	20000590 	.word	0x20000590
 8002cec:	20000592 	.word	0x20000592
 8002cf0:	20000524 	.word	0x20000524
 8002cf4:	200004d8 	.word	0x200004d8
 8002cf8:	200004e4 	.word	0x200004e4
 8002cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d00:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002d04:	f107 0214 	add.w	r2, r7, #20
 8002d08:	f107 0318 	add.w	r3, r7, #24
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d14:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d18:	f7ff f8f0 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 ff62 	bl	8007bec <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002d28:	4bd3      	ldr	r3, [pc, #844]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d137      	bne.n	8002da0 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002d30:	4bd2      	ldr	r3, [pc, #840]	; (800307c <interupt_DriveMotor+0x105c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002d36:	4bd2      	ldr	r3, [pc, #840]	; (8003080 <interupt_DriveMotor+0x1060>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002d3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002d5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002d7c:	f107 0214 	add.w	r2, r7, #20
 8002d80:	f107 0318 	add.w	r3, r7, #24
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d8c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d90:	f7ff f8b4 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 ff26 	bl	8007bec <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002da0:	4bb5      	ldr	r3, [pc, #724]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	f040 8105 	bne.w	8002fb4 <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002daa:	4bb4      	ldr	r3, [pc, #720]	; (800307c <interupt_DriveMotor+0x105c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002db0:	4bb3      	ldr	r3, [pc, #716]	; (8003080 <interupt_DriveMotor+0x1060>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002db6:	4bb3      	ldr	r3, [pc, #716]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fbec 	bl	8000598 <__aeabi_f2d>
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	460d      	mov	r5, r1
 8002dc4:	4baf      	ldr	r3, [pc, #700]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbe5 	bl	8000598 <__aeabi_f2d>
 8002dce:	a3a8      	add	r3, pc, #672	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fc38 	bl	8000648 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4690      	mov	r8, r2
 8002dde:	4699      	mov	r9, r3
 8002de0:	4ba8      	ldr	r3, [pc, #672]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fbd7 	bl	8000598 <__aeabi_f2d>
 8002dea:	a3a1      	add	r3, pc, #644	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f7fd fc2a 	bl	8000648 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	a39c      	add	r3, pc, #624	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fc21 	bl	8000648 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e16:	f7fd fd41 	bl	800089c <__aeabi_ddiv>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fa5b 	bl	80002dc <__adddf3>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fa55 	bl	80002dc <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fedd 	bl	8000bf8 <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a90      	ldr	r2, [pc, #576]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e42:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002e44:	4b8f      	ldr	r3, [pc, #572]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fba5 	bl	8000598 <__aeabi_f2d>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	4b8c      	ldr	r3, [pc, #560]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb9e 	bl	8000598 <__aeabi_f2d>
 8002e5c:	a384      	add	r3, pc, #528	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fbf1 	bl	8000648 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd fa35 	bl	80002dc <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd febd 	bl	8000bf8 <__aeabi_d2f>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4a80      	ldr	r2, [pc, #512]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e82:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002e84:	4b80      	ldr	r3, [pc, #512]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb85 	bl	8000598 <__aeabi_f2d>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	460d      	mov	r5, r1
 8002e92:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fb7e 	bl	8000598 <__aeabi_f2d>
 8002e9c:	a374      	add	r3, pc, #464	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fbd1 	bl	8000648 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4620      	mov	r0, r4
 8002eac:	4629      	mov	r1, r5
 8002eae:	f7fd fa15 	bl	80002dc <__adddf3>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f7fd fe9d 	bl	8000bf8 <__aeabi_d2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4a71      	ldr	r2, [pc, #452]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002ec2:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002ec4:	4b71      	ldr	r3, [pc, #452]	; (800308c <interupt_DriveMotor+0x106c>)
 8002ec6:	edd3 6a00 	vldr	s13, [r3]
 8002eca:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ece:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ed2:	486d      	ldr	r0, [pc, #436]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002ed4:	eeb0 0a66 	vmov.f32	s0, s13
 8002ed8:	eef0 0a47 	vmov.f32	s1, s14
 8002edc:	eeb0 1a67 	vmov.f32	s2, s15
 8002ee0:	f005 fe56 	bl	8008b90 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ee4:	4b67      	ldr	r3, [pc, #412]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	4b67      	ldr	r3, [pc, #412]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002eec:	ed93 7a00 	vldr	s14, [r3]
 8002ef0:	f107 020c 	add.w	r2, r7, #12
 8002ef4:	f107 0310 	add.w	r3, r7, #16
 8002ef8:	eef0 0a47 	vmov.f32	s1, s14
 8002efc:	eeb0 0a67 	vmov.f32	s0, s15
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fcfe 	bl	8004904 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002f08:	4b61      	ldr	r3, [pc, #388]	; (8003090 <interupt_DriveMotor+0x1070>)
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	4b61      	ldr	r3, [pc, #388]	; (8003094 <interupt_DriveMotor+0x1074>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f20:	4b58      	ldr	r3, [pc, #352]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <interupt_DriveMotor+0x1078>)
 8002f28:	edd3 6a00 	vldr	s13, [r3]
 8002f2c:	4b56      	ldr	r3, [pc, #344]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002f2e:	ed93 6a01 	vldr	s12, [r3, #4]
 8002f32:	1d3a      	adds	r2, r7, #4
 8002f34:	f107 0308 	add.w	r3, r7, #8
 8002f38:	eef0 1a46 	vmov.f32	s3, s12
 8002f3c:	eeb0 1a66 	vmov.f32	s2, s13
 8002f40:	4611      	mov	r1, r2
 8002f42:	eef0 0a67 	vmov.f32	s1, s15
 8002f46:	eeb0 0a47 	vmov.f32	s0, s14
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fa34 	bl	80043b8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f50:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f70:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8c:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002f90:	f107 0214 	add.w	r2, r7, #20
 8002f94:	f107 0318 	add.w	r3, r7, #24
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002fa0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002fa4:	f7fe ffaa 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fe1c 	bl	8007bec <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b64      	cmp	r3, #100	; 0x64
 8002fba:	d14b      	bne.n	8003054 <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002fd4:	ed93 7a00 	vldr	s14, [r3]
 8002fd8:	f107 020c 	add.w	r2, r7, #12
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	eef0 0a47 	vmov.f32	s1, s14
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fc8a 	bl	8004904 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002ff0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ff8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003004:	edd7 7a01 	vldr	s15, [r7, #4]
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003010:	ed97 7a04 	vldr	s14, [r7, #16]
 8003014:	edd7 7a03 	vldr	s15, [r7, #12]
 8003018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003024:	edd7 7a01 	vldr	s15, [r7, #4]
 8003028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302c:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003030:	f107 0214 	add.w	r2, r7, #20
 8003034:	f107 0318 	add.w	r3, r7, #24
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	edd7 0a08 	vldr	s1, [r7, #32]
 8003040:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003044:	f7fe ff5a 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fdcc 	bl	8007bec <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <interupt_DriveMotor+0x107c>)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <interupt_DriveMotor+0x1080>)
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	6013      	str	r3, [r2, #0]



}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w
 8003070:	d2f1a9fc 	.word	0xd2f1a9fc
 8003074:	3f50624d 	.word	0x3f50624d
 8003078:	20000528 	.word	0x20000528
 800307c:	20000590 	.word	0x20000590
 8003080:	20000592 	.word	0x20000592
 8003084:	200004d8 	.word	0x200004d8
 8003088:	200004e4 	.word	0x200004e4
 800308c:	20000518 	.word	0x20000518
 8003090:	20000238 	.word	0x20000238
 8003094:	2000023c 	.word	0x2000023c
 8003098:	20000268 	.word	0x20000268
 800309c:	2000052c 	.word	0x2000052c
 80030a0:	20000530 	.word	0x20000530

080030a4 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80030ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80030b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80030b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80030ba:	ed87 2a01 	vstr	s4, [r7, #4]
 80030be:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80030c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80030c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80030cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030d0:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80030d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80030d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80030dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80030e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e4:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80030e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d505      	bpl.n	8003102 <straight_table2+0x5e>
 80030f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fa:	eef1 7a67 	vneg.f32	s15, s15
 80030fe:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 8003102:	4bb4      	ldr	r3, [pc, #720]	; (80033d4 <straight_table2+0x330>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 800310a:	2300      	movs	r3, #0
 800310c:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 800310e:	4ab2      	ldr	r2, [pc, #712]	; (80033d8 <straight_table2+0x334>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003114:	4ab0      	ldr	r2, [pc, #704]	; (80033d8 <straight_table2+0x334>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 800311a:	4aaf      	ldr	r2, [pc, #700]	; (80033d8 <straight_table2+0x334>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003120:	4aad      	ldr	r2, [pc, #692]	; (80033d8 <straight_table2+0x334>)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003126:	4aac      	ldr	r2, [pc, #688]	; (80033d8 <straight_table2+0x334>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800312c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003138:	db03      	blt.n	8003142 <straight_table2+0x9e>
 800313a:	4aa8      	ldr	r2, [pc, #672]	; (80033dc <straight_table2+0x338>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6053      	str	r3, [r2, #4]
 8003140:	e006      	b.n	8003150 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 8003142:	edd7 7a01 	vldr	s15, [r7, #4]
 8003146:	eef1 7a67 	vneg.f32	s15, s15
 800314a:	4ba4      	ldr	r3, [pc, #656]	; (80033dc <straight_table2+0x338>)
 800314c:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003150:	4aa2      	ldr	r2, [pc, #648]	; (80033dc <straight_table2+0x338>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003156:	4ba1      	ldr	r3, [pc, #644]	; (80033dc <straight_table2+0x338>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 800315e:	4ba0      	ldr	r3, [pc, #640]	; (80033e0 <straight_table2+0x33c>)
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003166:	4b9e      	ldr	r3, [pc, #632]	; (80033e0 <straight_table2+0x33c>)
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800316e:	4b9c      	ldr	r3, [pc, #624]	; (80033e0 <straight_table2+0x33c>)
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003176:	4b9b      	ldr	r3, [pc, #620]	; (80033e4 <straight_table2+0x340>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800317c:	4b9a      	ldr	r3, [pc, #616]	; (80033e8 <straight_table2+0x344>)
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003182:	edd7 7a05 	vldr	s15, [r7, #20]
 8003186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	dd0e      	ble.n	80031ae <straight_table2+0x10a>
 8003190:	ed97 7a07 	vldr	s14, [r7, #28]
 8003194:	edd7 7a05 	vldr	s15, [r7, #20]
 8003198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a0:	dd05      	ble.n	80031ae <straight_table2+0x10a>
 80031a2:	4b91      	ldr	r3, [pc, #580]	; (80033e8 <straight_table2+0x344>)
 80031a4:	2205      	movs	r2, #5
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	4a8c      	ldr	r2, [pc, #560]	; (80033dc <straight_table2+0x338>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80031ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80031b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	dd14      	ble.n	80031e6 <straight_table2+0x142>
 80031bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80031c0:	eef1 7a67 	vneg.f32	s15, s15
 80031c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80031c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d509      	bpl.n	80031e6 <straight_table2+0x142>
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <straight_table2+0x344>)
 80031d4:	2206      	movs	r2, #6
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80031dc:	eef1 7a67 	vneg.f32	s15, s15
 80031e0:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <straight_table2+0x338>)
 80031e2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80031e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d514      	bpl.n	800321e <straight_table2+0x17a>
 80031f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f8:	eef1 7a67 	vneg.f32	s15, s15
 80031fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	dd09      	ble.n	800321e <straight_table2+0x17a>
 800320a:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <straight_table2+0x344>)
 800320c:	2205      	movs	r2, #5
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	edd7 7a01 	vldr	s15, [r7, #4]
 8003214:	eef1 7a67 	vneg.f32	s15, s15
 8003218:	4b70      	ldr	r3, [pc, #448]	; (80033dc <straight_table2+0x338>)
 800321a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800321e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d50e      	bpl.n	800324a <straight_table2+0x1a6>
 800322c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003230:	edd7 7a05 	vldr	s15, [r7, #20]
 8003234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	d505      	bpl.n	800324a <straight_table2+0x1a6>
 800323e:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <straight_table2+0x344>)
 8003240:	2206      	movs	r2, #6
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <straight_table2+0x338>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 800324a:	4b68      	ldr	r3, [pc, #416]	; (80033ec <straight_table2+0x348>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003250:	783a      	ldrb	r2, [r7, #0]
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <straight_table2+0x34c>)
 8003254:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003256:	f004 fcad 	bl	8007bb4 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 80d3 	bne.w	8003408 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003262:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <straight_table2+0x350>)
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800326a:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <straight_table2+0x344>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003270:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <straight_table2+0x338>)
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003278:	bf00      	nop
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <straight_table2+0x354>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d409      	bmi.n	80032a2 <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 800328e:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <straight_table2+0x354>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003294:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80033fc <straight_table2+0x358>
 8003298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	dd18      	ble.n	80032d4 <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <straight_table2+0x35c>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80032a8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80032ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b4:	d409      	bmi.n	80032ca <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80032b6:	4b52      	ldr	r3, [pc, #328]	; (8003400 <straight_table2+0x35c>)
 80032b8:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80032bc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80033fc <straight_table2+0x358>
 80032c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c8:	dd04      	ble.n	80032d4 <straight_table2+0x230>
			  front_wall_break_90==0){}
 80032ca:	4b4e      	ldr	r3, [pc, #312]	; (8003404 <straight_table2+0x360>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0d2      	beq.n	800327a <straight_table2+0x1d6>
		straight.displacement=0;
 80032d4:	4b41      	ldr	r3, [pc, #260]	; (80033dc <straight_table2+0x338>)
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80032dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	db03      	blt.n	80032f2 <straight_table2+0x24e>
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <straight_table2+0x338>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6053      	str	r3, [r2, #4]
 80032f0:	e006      	b.n	8003300 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 80032f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032f6:	eef1 7a67 	vneg.f32	s15, s15
 80032fa:	4b38      	ldr	r3, [pc, #224]	; (80033dc <straight_table2+0x338>)
 80032fc:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <straight_table2+0x344>)
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003306:	edd7 7a05 	vldr	s15, [r7, #20]
 800330a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	dd0e      	ble.n	8003332 <straight_table2+0x28e>
 8003314:	ed97 7a07 	vldr	s14, [r7, #28]
 8003318:	edd7 7a05 	vldr	s15, [r7, #20]
 800331c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	dd05      	ble.n	8003332 <straight_table2+0x28e>
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <straight_table2+0x344>)
 8003328:	2205      	movs	r2, #5
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <straight_table2+0x338>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003332:	edd7 7a05 	vldr	s15, [r7, #20]
 8003336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	dd14      	ble.n	800336a <straight_table2+0x2c6>
 8003340:	edd7 7a05 	vldr	s15, [r7, #20]
 8003344:	eef1 7a67 	vneg.f32	s15, s15
 8003348:	ed97 7a07 	vldr	s14, [r7, #28]
 800334c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	d509      	bpl.n	800336a <straight_table2+0x2c6>
 8003356:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <straight_table2+0x344>)
 8003358:	2206      	movs	r2, #6
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003360:	eef1 7a67 	vneg.f32	s15, s15
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <straight_table2+0x338>)
 8003366:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800336a:	edd7 7a05 	vldr	s15, [r7, #20]
 800336e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	d514      	bpl.n	80033a2 <straight_table2+0x2fe>
 8003378:	edd7 7a05 	vldr	s15, [r7, #20]
 800337c:	eef1 7a67 	vneg.f32	s15, s15
 8003380:	ed97 7a07 	vldr	s14, [r7, #28]
 8003384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	dd09      	ble.n	80033a2 <straight_table2+0x2fe>
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <straight_table2+0x344>)
 8003390:	2205      	movs	r2, #5
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	edd7 7a01 	vldr	s15, [r7, #4]
 8003398:	eef1 7a67 	vneg.f32	s15, s15
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <straight_table2+0x338>)
 800339e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80033a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80033a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	f140 825b 	bpl.w	8003868 <straight_table2+0x7c4>
 80033b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80033b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c2:	f140 8251 	bpl.w	8003868 <straight_table2+0x7c4>
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <straight_table2+0x344>)
 80033c8:	2206      	movs	r2, #6
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	4a03      	ldr	r2, [pc, #12]	; (80033dc <straight_table2+0x338>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6053      	str	r3, [r2, #4]
 80033d2:	e249      	b.n	8003868 <straight_table2+0x7c4>
 80033d4:	20000529 	.word	0x20000529
 80033d8:	200004f0 	.word	0x200004f0
 80033dc:	200004d8 	.word	0x200004d8
 80033e0:	200004e4 	.word	0x200004e4
 80033e4:	20000805 	.word	0x20000805
 80033e8:	20000804 	.word	0x20000804
 80033ec:	20000528 	.word	0x20000528
 80033f0:	20000590 	.word	0x20000590
 80033f4:	20000534 	.word	0x20000534
 80033f8:	200005cc 	.word	0x200005cc
 80033fc:	425c0000 	.word	0x425c0000
 8003400:	200005d0 	.word	0x200005d0
 8003404:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	2b02      	cmp	r3, #2
 800340c:	f040 80c9 	bne.w	80035a2 <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003410:	4bb8      	ldr	r3, [pc, #736]	; (80036f4 <straight_table2+0x650>)
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003418:	4bb7      	ldr	r3, [pc, #732]	; (80036f8 <straight_table2+0x654>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800341e:	4bb7      	ldr	r3, [pc, #732]	; (80036fc <straight_table2+0x658>)
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003426:	bf00      	nop
 8003428:	4bb5      	ldr	r3, [pc, #724]	; (8003700 <straight_table2+0x65c>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	d913      	bls.n	8003460 <straight_table2+0x3bc>
 8003438:	4bb1      	ldr	r3, [pc, #708]	; (8003700 <straight_table2+0x65c>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344a:	d909      	bls.n	8003460 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800344c:	4bac      	ldr	r3, [pc, #688]	; (8003700 <straight_table2+0x65c>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003452:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003704 <straight_table2+0x660>
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	db20      	blt.n	80034a2 <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003460:	4ba9      	ldr	r3, [pc, #676]	; (8003708 <straight_table2+0x664>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	d913      	bls.n	8003498 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003470:	4ba5      	ldr	r3, [pc, #660]	; (8003708 <straight_table2+0x664>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800347a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	d909      	bls.n	8003498 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003484:	4ba0      	ldr	r3, [pc, #640]	; (8003708 <straight_table2+0x664>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800348a:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003704 <straight_table2+0x660>
 800348e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	db04      	blt.n	80034a2 <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 8003498:	4b9c      	ldr	r3, [pc, #624]	; (800370c <straight_table2+0x668>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0c2      	beq.n	8003428 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 80034a2:	4b96      	ldr	r3, [pc, #600]	; (80036fc <straight_table2+0x658>)
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	db03      	blt.n	80034c0 <straight_table2+0x41c>
 80034b8:	4a90      	ldr	r2, [pc, #576]	; (80036fc <straight_table2+0x658>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6053      	str	r3, [r2, #4]
 80034be:	e006      	b.n	80034ce <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80034c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034c4:	eef1 7a67 	vneg.f32	s15, s15
 80034c8:	4b8c      	ldr	r3, [pc, #560]	; (80036fc <straight_table2+0x658>)
 80034ca:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80034ce:	4b8a      	ldr	r3, [pc, #552]	; (80036f8 <straight_table2+0x654>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80034d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80034d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	dd0e      	ble.n	8003500 <straight_table2+0x45c>
 80034e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80034e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f2:	dd05      	ble.n	8003500 <straight_table2+0x45c>
 80034f4:	4b80      	ldr	r3, [pc, #512]	; (80036f8 <straight_table2+0x654>)
 80034f6:	2205      	movs	r2, #5
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	4a80      	ldr	r2, [pc, #512]	; (80036fc <straight_table2+0x658>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003500:	edd7 7a05 	vldr	s15, [r7, #20]
 8003504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	dd14      	ble.n	8003538 <straight_table2+0x494>
 800350e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003512:	eef1 7a67 	vneg.f32	s15, s15
 8003516:	ed97 7a07 	vldr	s14, [r7, #28]
 800351a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	d509      	bpl.n	8003538 <straight_table2+0x494>
 8003524:	4b74      	ldr	r3, [pc, #464]	; (80036f8 <straight_table2+0x654>)
 8003526:	2206      	movs	r2, #6
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	edd7 7a01 	vldr	s15, [r7, #4]
 800352e:	eef1 7a67 	vneg.f32	s15, s15
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <straight_table2+0x658>)
 8003534:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003538:	edd7 7a05 	vldr	s15, [r7, #20]
 800353c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	d514      	bpl.n	8003570 <straight_table2+0x4cc>
 8003546:	edd7 7a05 	vldr	s15, [r7, #20]
 800354a:	eef1 7a67 	vneg.f32	s15, s15
 800354e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355a:	dd09      	ble.n	8003570 <straight_table2+0x4cc>
 800355c:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <straight_table2+0x654>)
 800355e:	2205      	movs	r2, #5
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	edd7 7a01 	vldr	s15, [r7, #4]
 8003566:	eef1 7a67 	vneg.f32	s15, s15
 800356a:	4b64      	ldr	r3, [pc, #400]	; (80036fc <straight_table2+0x658>)
 800356c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003570:	edd7 7a05 	vldr	s15, [r7, #20]
 8003574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	f140 8174 	bpl.w	8003868 <straight_table2+0x7c4>
 8003580:	ed97 7a07 	vldr	s14, [r7, #28]
 8003584:	edd7 7a05 	vldr	s15, [r7, #20]
 8003588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003590:	f140 816a 	bpl.w	8003868 <straight_table2+0x7c4>
 8003594:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <straight_table2+0x654>)
 8003596:	2206      	movs	r2, #6
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	4a58      	ldr	r2, [pc, #352]	; (80036fc <straight_table2+0x658>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6053      	str	r3, [r2, #4]
 80035a0:	e162      	b.n	8003868 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	f040 80b9 	bne.w	800371c <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035aa:	4b52      	ldr	r3, [pc, #328]	; (80036f4 <straight_table2+0x650>)
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80035b2:	4b51      	ldr	r3, [pc, #324]	; (80036f8 <straight_table2+0x654>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <straight_table2+0x658>)
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80035c0:	bf00      	nop
 80035c2:	4b53      	ldr	r3, [pc, #332]	; (8003710 <straight_table2+0x66c>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80035cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d4:	d409      	bmi.n	80035ea <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80035d6:	4b4e      	ldr	r3, [pc, #312]	; (8003710 <straight_table2+0x66c>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80035dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003714 <straight_table2+0x670>
 80035e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e8:	dd04      	ble.n	80035f4 <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 80035ea:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <straight_table2+0x674>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0e6      	beq.n	80035c2 <straight_table2+0x51e>
		straight.displacement=0;
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <straight_table2+0x658>)
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80035fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	db03      	blt.n	8003612 <straight_table2+0x56e>
 800360a:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <straight_table2+0x658>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6053      	str	r3, [r2, #4]
 8003610:	e006      	b.n	8003620 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 8003612:	edd7 7a01 	vldr	s15, [r7, #4]
 8003616:	eef1 7a67 	vneg.f32	s15, s15
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <straight_table2+0x658>)
 800361c:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <straight_table2+0x654>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003626:	edd7 7a05 	vldr	s15, [r7, #20]
 800362a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003632:	dd0e      	ble.n	8003652 <straight_table2+0x5ae>
 8003634:	ed97 7a07 	vldr	s14, [r7, #28]
 8003638:	edd7 7a05 	vldr	s15, [r7, #20]
 800363c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	dd05      	ble.n	8003652 <straight_table2+0x5ae>
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <straight_table2+0x654>)
 8003648:	2205      	movs	r2, #5
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	4a2b      	ldr	r2, [pc, #172]	; (80036fc <straight_table2+0x658>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003652:	edd7 7a05 	vldr	s15, [r7, #20]
 8003656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365e:	dd14      	ble.n	800368a <straight_table2+0x5e6>
 8003660:	edd7 7a05 	vldr	s15, [r7, #20]
 8003664:	eef1 7a67 	vneg.f32	s15, s15
 8003668:	ed97 7a07 	vldr	s14, [r7, #28]
 800366c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	d509      	bpl.n	800368a <straight_table2+0x5e6>
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <straight_table2+0x654>)
 8003678:	2206      	movs	r2, #6
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003680:	eef1 7a67 	vneg.f32	s15, s15
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <straight_table2+0x658>)
 8003686:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800368a:	edd7 7a05 	vldr	s15, [r7, #20]
 800368e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d514      	bpl.n	80036c2 <straight_table2+0x61e>
 8003698:	edd7 7a05 	vldr	s15, [r7, #20]
 800369c:	eef1 7a67 	vneg.f32	s15, s15
 80036a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80036a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	dd09      	ble.n	80036c2 <straight_table2+0x61e>
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <straight_table2+0x654>)
 80036b0:	2205      	movs	r2, #5
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b8:	eef1 7a67 	vneg.f32	s15, s15
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <straight_table2+0x658>)
 80036be:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80036c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	f140 80cb 	bpl.w	8003868 <straight_table2+0x7c4>
 80036d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	f140 80c1 	bpl.w	8003868 <straight_table2+0x7c4>
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <straight_table2+0x654>)
 80036e8:	2206      	movs	r2, #6
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	4a03      	ldr	r2, [pc, #12]	; (80036fc <straight_table2+0x658>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6053      	str	r3, [r2, #4]
 80036f2:	e0b9      	b.n	8003868 <straight_table2+0x7c4>
 80036f4:	20000534 	.word	0x20000534
 80036f8:	20000804 	.word	0x20000804
 80036fc:	200004d8 	.word	0x200004d8
 8003700:	200005d4 	.word	0x200005d4
 8003704:	42000000 	.word	0x42000000
 8003708:	200005d8 	.word	0x200005d8
 800370c:	200005f3 	.word	0x200005f3
 8003710:	200005e4 	.word	0x200005e4
 8003714:	420c0000 	.word	0x420c0000
 8003718:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	2b04      	cmp	r3, #4
 8003720:	f040 80a2 	bne.w	8003868 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003724:	4ba6      	ldr	r3, [pc, #664]	; (80039c0 <straight_table2+0x91c>)
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800372c:	4ba5      	ldr	r3, [pc, #660]	; (80039c4 <straight_table2+0x920>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003732:	4ba5      	ldr	r3, [pc, #660]	; (80039c8 <straight_table2+0x924>)
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800373a:	bf00      	nop
 800373c:	4ba3      	ldr	r3, [pc, #652]	; (80039cc <straight_table2+0x928>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d409      	bmi.n	8003764 <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003750:	4b9e      	ldr	r3, [pc, #632]	; (80039cc <straight_table2+0x928>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003756:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80039d0 <straight_table2+0x92c>
 800375a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	dd04      	ble.n	800376e <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 8003764:	4b9b      	ldr	r3, [pc, #620]	; (80039d4 <straight_table2+0x930>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0e6      	beq.n	800373c <straight_table2+0x698>
		straight.displacement=0;
 800376e:	4b96      	ldr	r3, [pc, #600]	; (80039c8 <straight_table2+0x924>)
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003776:	edd7 7a02 	vldr	s15, [r7, #8]
 800377a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	db03      	blt.n	800378c <straight_table2+0x6e8>
 8003784:	4a90      	ldr	r2, [pc, #576]	; (80039c8 <straight_table2+0x924>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6053      	str	r3, [r2, #4]
 800378a:	e006      	b.n	800379a <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 800378c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003790:	eef1 7a67 	vneg.f32	s15, s15
 8003794:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <straight_table2+0x924>)
 8003796:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800379a:	4b8a      	ldr	r3, [pc, #552]	; (80039c4 <straight_table2+0x920>)
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80037a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	dd0e      	ble.n	80037cc <straight_table2+0x728>
 80037ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80037b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	dd05      	ble.n	80037cc <straight_table2+0x728>
 80037c0:	4b80      	ldr	r3, [pc, #512]	; (80039c4 <straight_table2+0x920>)
 80037c2:	2205      	movs	r2, #5
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	4a80      	ldr	r2, [pc, #512]	; (80039c8 <straight_table2+0x924>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80037cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d8:	dd14      	ble.n	8003804 <straight_table2+0x760>
 80037da:	edd7 7a05 	vldr	s15, [r7, #20]
 80037de:	eef1 7a67 	vneg.f32	s15, s15
 80037e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80037e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	d509      	bpl.n	8003804 <straight_table2+0x760>
 80037f0:	4b74      	ldr	r3, [pc, #464]	; (80039c4 <straight_table2+0x920>)
 80037f2:	2206      	movs	r2, #6
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037fa:	eef1 7a67 	vneg.f32	s15, s15
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <straight_table2+0x924>)
 8003800:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003804:	edd7 7a05 	vldr	s15, [r7, #20]
 8003808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d514      	bpl.n	800383c <straight_table2+0x798>
 8003812:	edd7 7a05 	vldr	s15, [r7, #20]
 8003816:	eef1 7a67 	vneg.f32	s15, s15
 800381a:	ed97 7a07 	vldr	s14, [r7, #28]
 800381e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	dd09      	ble.n	800383c <straight_table2+0x798>
 8003828:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <straight_table2+0x920>)
 800382a:	2205      	movs	r2, #5
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003832:	eef1 7a67 	vneg.f32	s15, s15
 8003836:	4b64      	ldr	r3, [pc, #400]	; (80039c8 <straight_table2+0x924>)
 8003838:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800383c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	d50e      	bpl.n	8003868 <straight_table2+0x7c4>
 800384a:	ed97 7a07 	vldr	s14, [r7, #28]
 800384e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	d505      	bpl.n	8003868 <straight_table2+0x7c4>
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <straight_table2+0x920>)
 800385e:	2206      	movs	r2, #6
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	4a59      	ldr	r2, [pc, #356]	; (80039c8 <straight_table2+0x924>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003868:	78bb      	ldrb	r3, [r7, #2]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 809e 	bne.w	80039ac <straight_table2+0x908>
	while (g_acc_flag!=4){
 8003870:	e074      	b.n	800395c <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d120      	bne.n	80038ba <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003878:	edd7 7a05 	vldr	s15, [r7, #20]
 800387c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003884:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <straight_table2+0x934>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	d90e      	bls.n	80038b2 <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8003894:	edd7 7a05 	vldr	s15, [r7, #20]
 8003898:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800389c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038a0:	4b4e      	ldr	r3, [pc, #312]	; (80039dc <straight_table2+0x938>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d900      	bls.n	80038b2 <straight_table2+0x80e>
 80038b0:	e054      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 80038b2:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <straight_table2+0x920>)
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
				break;
 80038b8:	e055      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d121      	bne.n	8003904 <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80038c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80038c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038cc:	4b44      	ldr	r3, [pc, #272]	; (80039e0 <straight_table2+0x93c>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d900      	bls.n	80038de <straight_table2+0x83a>
 80038dc:	e03e      	b.n	800395c <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 80038de:	edd7 7a05 	vldr	s15, [r7, #20]
 80038e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <straight_table2+0x940>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80038f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f8:	d900      	bls.n	80038fc <straight_table2+0x858>
 80038fa:	e02f      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 80038fc:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <straight_table2+0x920>)
 80038fe:	2204      	movs	r2, #4
 8003900:	701a      	strb	r2, [r3, #0]
				break;
 8003902:	e030      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d112      	bne.n	8003930 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 800390a:	edd7 7a05 	vldr	s15, [r7, #20]
 800390e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003916:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <straight_table2+0x944>)
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003924:	d900      	bls.n	8003928 <straight_table2+0x884>
 8003926:	e019      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <straight_table2+0x920>)
 800392a:	2204      	movs	r2, #4
 800392c:	701a      	strb	r2, [r3, #0]
				break;
 800392e:	e01a      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d112      	bne.n	800395c <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 8003936:	edd7 7a05 	vldr	s15, [r7, #20]
 800393a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800393e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <straight_table2+0x928>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d900      	bls.n	8003954 <straight_table2+0x8b0>
 8003952:	e003      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <straight_table2+0x920>)
 8003956:	2204      	movs	r2, #4
 8003958:	701a      	strb	r2, [r3, #0]
				break;
 800395a:	e004      	b.n	8003966 <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <straight_table2+0x920>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b04      	cmp	r3, #4
 8003964:	d185      	bne.n	8003872 <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8003966:	edd7 7a03 	vldr	s15, [r7, #12]
 800396a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003972:	d105      	bne.n	8003980 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 8003974:	2064      	movs	r0, #100	; 0x64
 8003976:	f004 fbf7 	bl	8008168 <wait_ms_NoReset>
		modeacc = 0;
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <straight_table2+0x948>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <straight_table2+0x94c>)
 8003982:	ed93 7a00 	vldr	s14, [r3]
 8003986:	edd7 7a05 	vldr	s15, [r7, #20]
 800398a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398e:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <straight_table2+0x94c>)
 8003990:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <straight_table2+0x950>)
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	edd7 7a05 	vldr	s15, [r7, #20]
 800399e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <straight_table2+0x950>)
 80039a4:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039a8:	f004 f912 	bl	8007bd0 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <straight_table2+0x924>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	ee07 3a90 	vmov	s15, r3



}
 80039b4:	eeb0 0a67 	vmov.f32	s0, s15
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000534 	.word	0x20000534
 80039c4:	20000804 	.word	0x20000804
 80039c8:	200004d8 	.word	0x200004d8
 80039cc:	200005e8 	.word	0x200005e8
 80039d0:	420c0000 	.word	0x420c0000
 80039d4:	200005f4 	.word	0x200005f4
 80039d8:	200005d0 	.word	0x200005d0
 80039dc:	200005cc 	.word	0x200005cc
 80039e0:	200005d8 	.word	0x200005d8
 80039e4:	200005d4 	.word	0x200005d4
 80039e8:	200005e4 	.word	0x200005e4
 80039ec:	20000528 	.word	0x20000528
 80039f0:	20000220 	.word	0x20000220
 80039f4:	20000224 	.word	0x20000224

080039f8 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a02:	60b8      	str	r0, [r7, #8]
 8003a04:	460b      	mov	r3, r1
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 8003a0c:	e02f      	b.n	8003a6e <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	f083 0301 	eor.w	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <End_straight+0x2e>
 8003a1a:	79bb      	ldrb	r3, [r7, #6]
 8003a1c:	f083 0301 	eor.w	r3, r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d023      	beq.n	8003a6e <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d120      	bne.n	8003a6e <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a30:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a38:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <End_straight+0xb4>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d90e      	bls.n	8003a66 <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a4c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <End_straight+0xb8>)
 8003a56:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a62:	d900      	bls.n	8003a66 <End_straight+0x6e>
 8003a64:	e003      	b.n	8003a6e <End_straight+0x76>
						g_acc_flag=4;
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <End_straight+0xbc>)
 8003a68:	2204      	movs	r2, #4
 8003a6a:	701a      	strb	r2, [r3, #0]
						break;
 8003a6c:	e004      	b.n	8003a78 <End_straight+0x80>
	while (g_acc_flag!=4){
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <End_straight+0xbc>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d1ca      	bne.n	8003a0e <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <End_straight+0xc0>)
 8003a7a:	ed93 7a00 	vldr	s14, [r3]
 8003a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <End_straight+0xc0>)
 8003a88:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <End_straight+0xc4>)
 8003a8e:	ed93 7a00 	vldr	s14, [r3]
 8003a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <End_straight+0xc4>)
 8003a9c:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003aa0:	f004 f896 	bl	8007bd0 <pl_DriveMotor_stop>
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	200005d0 	.word	0x200005d0
 8003ab0:	200005cc 	.word	0x200005cc
 8003ab4:	20000804 	.word	0x20000804
 8003ab8:	20000220 	.word	0x20000220
 8003abc:	20000224 	.word	0x20000224

08003ac0 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003aca:	edc7 0a04 	vstr	s1, [r7, #16]
 8003ace:	ed87 1a03 	vstr	s2, [r7, #12]
 8003ad2:	edc7 1a02 	vstr	s3, [r7, #8]
 8003ad6:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003ada:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ade:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003ae2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ae6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003aea:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003aee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003af2:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003af6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	d505      	bpl.n	8003b1c <turning_table2+0x5c>
 8003b10:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b14:	eef1 7a67 	vneg.f32	s15, s15
 8003b18:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003b1c:	4a69      	ldr	r2, [pc, #420]	; (8003cc4 <turning_table2+0x204>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003b22:	4a68      	ldr	r2, [pc, #416]	; (8003cc4 <turning_table2+0x204>)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003b28:	4a66      	ldr	r2, [pc, #408]	; (8003cc4 <turning_table2+0x204>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003b2e:	4a65      	ldr	r2, [pc, #404]	; (8003cc4 <turning_table2+0x204>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003b34:	4a63      	ldr	r2, [pc, #396]	; (8003cc4 <turning_table2+0x204>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003b3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	db03      	blt.n	8003b50 <turning_table2+0x90>
 8003b48:	4a5f      	ldr	r2, [pc, #380]	; (8003cc8 <turning_table2+0x208>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6053      	str	r3, [r2, #4]
 8003b4e:	e006      	b.n	8003b5e <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b54:	eef1 7a67 	vneg.f32	s15, s15
 8003b58:	4b5b      	ldr	r3, [pc, #364]	; (8003cc8 <turning_table2+0x208>)
 8003b5a:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003b5e:	4a5a      	ldr	r2, [pc, #360]	; (8003cc8 <turning_table2+0x208>)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003b64:	4b58      	ldr	r3, [pc, #352]	; (8003cc8 <turning_table2+0x208>)
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003b6c:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <turning_table2+0x20c>)
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003b74:	4b55      	ldr	r3, [pc, #340]	; (8003ccc <turning_table2+0x20c>)
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003b7c:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <turning_table2+0x20c>)
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003b84:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <turning_table2+0x210>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003b8a:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <turning_table2+0x214>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9c:	dd0e      	ble.n	8003bbc <turning_table2+0xfc>
 8003b9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	dd05      	ble.n	8003bbc <turning_table2+0xfc>
 8003bb0:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <turning_table2+0x214>)
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <turning_table2+0x208>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003bbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc8:	dd14      	ble.n	8003bf4 <turning_table2+0x134>
 8003bca:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bce:	eef1 7a67 	vneg.f32	s15, s15
 8003bd2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bde:	d509      	bpl.n	8003bf4 <turning_table2+0x134>
 8003be0:	4b3c      	ldr	r3, [pc, #240]	; (8003cd4 <turning_table2+0x214>)
 8003be2:	2206      	movs	r2, #6
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bea:	eef1 7a67 	vneg.f32	s15, s15
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <turning_table2+0x208>)
 8003bf0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003bf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	d514      	bpl.n	8003c2c <turning_table2+0x16c>
 8003c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c06:	eef1 7a67 	vneg.f32	s15, s15
 8003c0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c16:	dd09      	ble.n	8003c2c <turning_table2+0x16c>
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <turning_table2+0x214>)
 8003c1a:	2205      	movs	r2, #5
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c22:	eef1 7a67 	vneg.f32	s15, s15
 8003c26:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <turning_table2+0x208>)
 8003c28:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003c2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	d50e      	bpl.n	8003c58 <turning_table2+0x198>
 8003c3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4a:	d505      	bpl.n	8003c58 <turning_table2+0x198>
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <turning_table2+0x214>)
 8003c4e:	2206      	movs	r2, #6
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <turning_table2+0x208>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <turning_table2+0x218>)
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003c5e:	f003 ffa9 	bl	8007bb4 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003c62:	bf00      	nop
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <turning_table2+0x214>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d1fa      	bne.n	8003c64 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d106      	bne.n	8003c8a <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003c7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c80:	f004 fa72 	bl	8008168 <wait_ms_NoReset>
		modeacc = 0;
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <turning_table2+0x218>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <turning_table2+0x21c>)
 8003c8c:	ed93 7a00 	vldr	s14, [r3]
 8003c90:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c98:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <turning_table2+0x21c>)
 8003c9a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003c9e:	f003 ff97 	bl	8007bd0 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <turning_table2+0x220>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <turning_table2+0x224>)
 8003ca8:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <turning_table2+0x228>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a0f      	ldr	r2, [pc, #60]	; (8003cec <turning_table2+0x22c>)
 8003cb0:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <turning_table2+0x208>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	ee07 3a90 	vmov	s15, r3
}
 8003cba:	eeb0 0a67 	vmov.f32	s0, s15
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000504 	.word	0x20000504
 8003cc8:	200004e4 	.word	0x200004e4
 8003ccc:	200004d8 	.word	0x200004d8
 8003cd0:	20000805 	.word	0x20000805
 8003cd4:	20000804 	.word	0x20000804
 8003cd8:	20000528 	.word	0x20000528
 8003cdc:	20000264 	.word	0x20000264
 8003ce0:	20000228 	.word	0x20000228
 8003ce4:	20000258 	.word	0x20000258
 8003ce8:	2000022c 	.word	0x2000022c
 8003cec:	2000025c 	.word	0x2000025c

08003cf0 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003cfa:	edc7 0a04 	vstr	s1, [r7, #16]
 8003cfe:	ed87 1a03 	vstr	s2, [r7, #12]
 8003d02:	edc7 1a02 	vstr	s3, [r7, #8]
 8003d06:	ed87 2a01 	vstr	s4, [r7, #4]
 8003d0a:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003d0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d12:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003d22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003d26:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003d2a:	ed97 7a00 	vldr	s14, [r7]
 8003d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d32:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003d36:	edd7 7a00 	vldr	s15, [r7]
 8003d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d42:	d505      	bpl.n	8003d50 <slalom_table2+0x60>
 8003d44:	edd7 7a00 	vldr	s15, [r7]
 8003d48:	eef1 7a67 	vneg.f32	s15, s15
 8003d4c:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003d50:	4a5e      	ldr	r2, [pc, #376]	; (8003ecc <slalom_table2+0x1dc>)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003d56:	4a5d      	ldr	r2, [pc, #372]	; (8003ecc <slalom_table2+0x1dc>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003d5c:	4a5b      	ldr	r2, [pc, #364]	; (8003ecc <slalom_table2+0x1dc>)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003d62:	4a5a      	ldr	r2, [pc, #360]	; (8003ecc <slalom_table2+0x1dc>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003d68:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <slalom_table2+0x1dc>)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	db03      	blt.n	8003d84 <slalom_table2+0x94>
 8003d7c:	4a54      	ldr	r2, [pc, #336]	; (8003ed0 <slalom_table2+0x1e0>)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6053      	str	r3, [r2, #4]
 8003d82:	e006      	b.n	8003d92 <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003d84:	edd7 7a00 	vldr	s15, [r7]
 8003d88:	eef1 7a67 	vneg.f32	s15, s15
 8003d8c:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <slalom_table2+0x1e0>)
 8003d8e:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003d92:	4a4f      	ldr	r2, [pc, #316]	; (8003ed0 <slalom_table2+0x1e0>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <slalom_table2+0x1e0>)
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003da0:	4a4c      	ldr	r2, [pc, #304]	; (8003ed4 <slalom_table2+0x1e4>)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003da6:	4b4b      	ldr	r3, [pc, #300]	; (8003ed4 <slalom_table2+0x1e4>)
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003dae:	4b49      	ldr	r3, [pc, #292]	; (8003ed4 <slalom_table2+0x1e4>)
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003db6:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <slalom_table2+0x1e8>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003dbc:	4b47      	ldr	r3, [pc, #284]	; (8003edc <slalom_table2+0x1ec>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	dd0e      	ble.n	8003dee <slalom_table2+0xfe>
 8003dd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	dd05      	ble.n	8003dee <slalom_table2+0xfe>
 8003de2:	4b3e      	ldr	r3, [pc, #248]	; (8003edc <slalom_table2+0x1ec>)
 8003de4:	2205      	movs	r2, #5
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	4a39      	ldr	r2, [pc, #228]	; (8003ed0 <slalom_table2+0x1e0>)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003dee:	edd7 7a04 	vldr	s15, [r7, #16]
 8003df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfa:	dd14      	ble.n	8003e26 <slalom_table2+0x136>
 8003dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e00:	eef1 7a67 	vneg.f32	s15, s15
 8003e04:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e10:	d509      	bpl.n	8003e26 <slalom_table2+0x136>
 8003e12:	4b32      	ldr	r3, [pc, #200]	; (8003edc <slalom_table2+0x1ec>)
 8003e14:	2206      	movs	r2, #6
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	edd7 7a00 	vldr	s15, [r7]
 8003e1c:	eef1 7a67 	vneg.f32	s15, s15
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <slalom_table2+0x1e0>)
 8003e22:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003e26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e32:	d514      	bpl.n	8003e5e <slalom_table2+0x16e>
 8003e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e38:	eef1 7a67 	vneg.f32	s15, s15
 8003e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e48:	dd09      	ble.n	8003e5e <slalom_table2+0x16e>
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <slalom_table2+0x1ec>)
 8003e4c:	2205      	movs	r2, #5
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	edd7 7a00 	vldr	s15, [r7]
 8003e54:	eef1 7a67 	vneg.f32	s15, s15
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <slalom_table2+0x1e0>)
 8003e5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	d50e      	bpl.n	8003e8a <slalom_table2+0x19a>
 8003e6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e70:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	d505      	bpl.n	8003e8a <slalom_table2+0x19a>
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <slalom_table2+0x1ec>)
 8003e80:	2206      	movs	r2, #6
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <slalom_table2+0x1e0>)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <slalom_table2+0x1f0>)
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003e90:	f003 fe90 	bl	8007bb4 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003e94:	bf00      	nop
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <slalom_table2+0x1ec>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d1fa      	bne.n	8003e96 <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <slalom_table2+0x1f4>)
 8003ea2:	ed93 7a00 	vldr	s14, [r3]
 8003ea6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <slalom_table2+0x1f4>)
 8003eb0:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003eb4:	f003 fe8c 	bl	8007bd0 <pl_DriveMotor_stop>

	return turning.velocity;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <slalom_table2+0x1e0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	ee07 3a90 	vmov	s15, r3
}
 8003ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000504 	.word	0x20000504
 8003ed0:	200004e4 	.word	0x200004e4
 8003ed4:	200004d8 	.word	0x200004d8
 8003ed8:	20000805 	.word	0x20000805
 8003edc:	20000804 	.word	0x20000804
 8003ee0:	20000528 	.word	0x20000528
 8003ee4:	20000264 	.word	0x20000264

08003ee8 <no_angle>:

void no_angle(void){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003eec:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <no_angle+0x88>)
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <no_angle+0x88>)
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003efc:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <no_angle+0x88>)
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <no_angle+0x8c>)
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <no_angle+0x8c>)
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <no_angle+0x8c>)
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <no_angle+0x90>)
 8003f1e:	2203      	movs	r2, #3
 8003f20:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f22:	f003 fe47 	bl	8007bb4 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003f26:	e002      	b.n	8003f2e <no_angle+0x46>
		HAL_Delay(1);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f013 fdc9 	bl	8017ac0 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <no_angle+0x94>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f36:	ddf7      	ble.n	8003f28 <no_angle+0x40>
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <no_angle+0x94>)
 8003f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f3e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f42:	ddf1      	ble.n	8003f28 <no_angle+0x40>
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <no_angle+0x94>)
 8003f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003f4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f4e:	ddeb      	ble.n	8003f28 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <no_angle+0x90>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003f56:	f003 fe3b 	bl	8007bd0 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <no_angle+0x98>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <no_angle+0x9c>)
 8003f60:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <no_angle+0xa0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <no_angle+0xa4>)
 8003f68:	6013      	str	r3, [r2, #0]

}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200004e4 	.word	0x200004e4
 8003f74:	200004d8 	.word	0x200004d8
 8003f78:	20000528 	.word	0x20000528
 8003f7c:	200002b8 	.word	0x200002b8
 8003f80:	20000228 	.word	0x20000228
 8003f84:	20000258 	.word	0x20000258
 8003f88:	2000022c 	.word	0x2000022c
 8003f8c:	2000025c 	.word	0x2000025c

08003f90 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f9e:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003fa2:	4a3d      	ldr	r2, [pc, #244]	; (8004098 <mollifier_slalom_table+0x108>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003fa8:	4a3b      	ldr	r2, [pc, #236]	; (8004098 <mollifier_slalom_table+0x108>)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003fae:	4a3a      	ldr	r2, [pc, #232]	; (8004098 <mollifier_slalom_table+0x108>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <mollifier_slalom_table+0x10c>)
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003fbc:	4b37      	ldr	r3, [pc, #220]	; (800409c <mollifier_slalom_table+0x10c>)
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003fc4:	4a36      	ldr	r2, [pc, #216]	; (80040a0 <mollifier_slalom_table+0x110>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003fca:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <mollifier_slalom_table+0x110>)
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003fd2:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <mollifier_slalom_table+0x110>)
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003fda:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <mollifier_slalom_table+0x114>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <mollifier_slalom_table+0x118>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fea:	eef0 7ae7 	vabs.f32	s15, s15
 8003fee:	ee17 0a90 	vmov	r0, s15
 8003ff2:	f7fc fad1 	bl	8000598 <__aeabi_f2d>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004000:	a321      	add	r3, pc, #132	; (adr r3, 8004088 <mollifier_slalom_table+0xf8>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f7fc fc47 	bl	800089c <__aeabi_ddiv>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	a31e      	add	r3, pc, #120	; (adr r3, 8004090 <mollifier_slalom_table+0x100>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc fb14 	bl	8000648 <__aeabi_dmul>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4614      	mov	r4, r2
 8004026:	461d      	mov	r5, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fc fab5 	bl	8000598 <__aeabi_f2d>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4620      	mov	r0, r4
 8004034:	4629      	mov	r1, r5
 8004036:	f7fc fc31 	bl	800089c <__aeabi_ddiv>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f7fc fdd9 	bl	8000bf8 <__aeabi_d2f>
 8004046:	4603      	mov	r3, r0
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <mollifier_slalom_table+0x11c>)
 800404a:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <mollifier_slalom_table+0x120>)
 800404e:	2206      	movs	r2, #6
 8004050:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004052:	f003 fdaf 	bl	8007bb4 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004056:	bf00      	nop
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <mollifier_slalom_table+0x118>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b04      	cmp	r3, #4
 8004060:	d1fa      	bne.n	8004058 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <mollifier_slalom_table+0x124>)
 8004064:	ed93 7a00 	vldr	s14, [r3]
 8004068:	edd7 7a02 	vldr	s15, [r7, #8]
 800406c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <mollifier_slalom_table+0x124>)
 8004072:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004076:	f003 fdab 	bl	8007bd0 <pl_DriveMotor_stop>

}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bdb0      	pop	{r4, r5, r7, pc}
 8004082:	bf00      	nop
 8004084:	f3af 8000 	nop.w
 8004088:	f9db22d1 	.word	0xf9db22d1
 800408c:	3fdc6a7e 	.word	0x3fdc6a7e
 8004090:	362cef38 	.word	0x362cef38
 8004094:	3fd78b56 	.word	0x3fd78b56
 8004098:	20000518 	.word	0x20000518
 800409c:	200004e4 	.word	0x200004e4
 80040a0:	200004d8 	.word	0x200004d8
 80040a4:	20000805 	.word	0x20000805
 80040a8:	20000804 	.word	0x20000804
 80040ac:	20000800 	.word	0x20000800
 80040b0:	20000528 	.word	0x20000528
 80040b4:	20000264 	.word	0x20000264

080040b8 <no_frontwall_straight>:


void no_frontwall_straight(void){
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 80040bc:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <no_frontwall_straight+0x70>)
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <no_frontwall_straight+0x70>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <no_frontwall_straight+0x70>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <no_frontwall_straight+0x74>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <no_frontwall_straight+0x74>)
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <no_frontwall_straight+0x74>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <no_frontwall_straight+0x78>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <no_frontwall_straight+0x7c>)
 80040f4:	2205      	movs	r2, #5
 80040f6:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80040f8:	f003 fd5c 	bl	8007bb4 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 80040fc:	2096      	movs	r0, #150	; 0x96
 80040fe:	f004 f833 	bl	8008168 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <no_frontwall_straight+0x78>)
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <no_frontwall_straight+0x7c>)
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 800410e:	f003 fd5f 	bl	8007bd0 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <no_frontwall_straight+0x80>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <no_frontwall_straight+0x84>)
 8004118:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <no_frontwall_straight+0x88>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <no_frontwall_straight+0x8c>)
 8004120:	6013      	str	r3, [r2, #0]

}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200004e4 	.word	0x200004e4
 800412c:	200004d8 	.word	0x200004d8
 8004130:	20000591 	.word	0x20000591
 8004134:	20000528 	.word	0x20000528
 8004138:	20000228 	.word	0x20000228
 800413c:	20000258 	.word	0x20000258
 8004140:	2000022c 	.word	0x2000022c
 8004144:	2000025c 	.word	0x2000025c

08004148 <straight_table_ff>:




float straight_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004152:	edc7 0a04 	vstr	s1, [r7, #16]
 8004156:	ed87 1a03 	vstr	s2, [r7, #12]
 800415a:	edc7 1a02 	vstr	s3, [r7, #8]
 800415e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004162:	edd7 7a03 	vldr	s15, [r7, #12]
 8004166:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800416a:	edd7 7a04 	vldr	s15, [r7, #16]
 800416e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004172:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004176:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800417a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800417e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004186:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800418a:	edd7 7a01 	vldr	s15, [r7, #4]
 800418e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004196:	d505      	bpl.n	80041a4 <straight_table_ff+0x5c>
 8004198:	edd7 7a01 	vldr	s15, [r7, #4]
 800419c:	eef1 7a67 	vneg.f32	s15, s15
 80041a0:	edc7 7a01 	vstr	s15, [r7, #4]
	Ksp = 0;//3//P項の制御量直進*****************************************************
 80041a4:	4b76      	ldr	r3, [pc, #472]	; (8004380 <straight_table_ff+0x238>)
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
	Ksi = 0;//5//43//I項の制御量直進*****************************************************
 80041ac:	4b75      	ldr	r3, [pc, #468]	; (8004384 <straight_table_ff+0x23c>)
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
	Ksd = 0;//D項の制御量直進*****************************************************
 80041b4:	4b74      	ldr	r3, [pc, #464]	; (8004388 <straight_table_ff+0x240>)
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
	Ktp = 0;//295//P項の制御量旋回*****************************************************
 80041bc:	4b73      	ldr	r3, [pc, #460]	; (800438c <straight_table_ff+0x244>)
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
	Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 80041c4:	4b72      	ldr	r3, [pc, #456]	; (8004390 <straight_table_ff+0x248>)
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
	Ktd = 0;
 80041cc:	4b71      	ldr	r3, [pc, #452]	; (8004394 <straight_table_ff+0x24c>)
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]


	Trapezoid_straight.displacement = input_displacement;
 80041d4:	4a70      	ldr	r2, [pc, #448]	; (8004398 <straight_table_ff+0x250>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80041da:	4a6f      	ldr	r2, [pc, #444]	; (8004398 <straight_table_ff+0x250>)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80041e0:	4a6d      	ldr	r2, [pc, #436]	; (8004398 <straight_table_ff+0x250>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80041e6:	4a6c      	ldr	r2, [pc, #432]	; (8004398 <straight_table_ff+0x250>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80041ec:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <straight_table_ff+0x250>)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80041f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	db03      	blt.n	8004208 <straight_table_ff+0xc0>
 8004200:	4a66      	ldr	r2, [pc, #408]	; (800439c <straight_table_ff+0x254>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6053      	str	r3, [r2, #4]
 8004206:	e006      	b.n	8004216 <straight_table_ff+0xce>
	}else{straight.acceleration = -input_acceleration;}
 8004208:	edd7 7a01 	vldr	s15, [r7, #4]
 800420c:	eef1 7a67 	vneg.f32	s15, s15
 8004210:	4b62      	ldr	r3, [pc, #392]	; (800439c <straight_table_ff+0x254>)
 8004212:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8004216:	4a61      	ldr	r2, [pc, #388]	; (800439c <straight_table_ff+0x254>)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800421c:	4b5f      	ldr	r3, [pc, #380]	; (800439c <straight_table_ff+0x254>)
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8004224:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <straight_table_ff+0x258>)
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800422c:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <straight_table_ff+0x258>)
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8004234:	4b5a      	ldr	r3, [pc, #360]	; (80043a0 <straight_table_ff+0x258>)
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800423c:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <straight_table_ff+0x25c>)
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004242:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <straight_table_ff+0x260>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004248:	edd7 7a05 	vldr	s15, [r7, #20]
 800424c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	dd0e      	ble.n	8004274 <straight_table_ff+0x12c>
 8004256:	ed97 7a07 	vldr	s14, [r7, #28]
 800425a:	edd7 7a05 	vldr	s15, [r7, #20]
 800425e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004266:	dd05      	ble.n	8004274 <straight_table_ff+0x12c>
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <straight_table_ff+0x260>)
 800426a:	2205      	movs	r2, #5
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	4a4b      	ldr	r2, [pc, #300]	; (800439c <straight_table_ff+0x254>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004274:	edd7 7a05 	vldr	s15, [r7, #20]
 8004278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004280:	dd14      	ble.n	80042ac <straight_table_ff+0x164>
 8004282:	edd7 7a05 	vldr	s15, [r7, #20]
 8004286:	eef1 7a67 	vneg.f32	s15, s15
 800428a:	ed97 7a07 	vldr	s14, [r7, #28]
 800428e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004296:	d509      	bpl.n	80042ac <straight_table_ff+0x164>
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <straight_table_ff+0x260>)
 800429a:	2206      	movs	r2, #6
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	edd7 7a01 	vldr	s15, [r7, #4]
 80042a2:	eef1 7a67 	vneg.f32	s15, s15
 80042a6:	4b3d      	ldr	r3, [pc, #244]	; (800439c <straight_table_ff+0x254>)
 80042a8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80042ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80042b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	d514      	bpl.n	80042e4 <straight_table_ff+0x19c>
 80042ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80042be:	eef1 7a67 	vneg.f32	s15, s15
 80042c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80042c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ce:	dd09      	ble.n	80042e4 <straight_table_ff+0x19c>
 80042d0:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <straight_table_ff+0x260>)
 80042d2:	2205      	movs	r2, #5
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80042da:	eef1 7a67 	vneg.f32	s15, s15
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <straight_table_ff+0x254>)
 80042e0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80042e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80042e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d50e      	bpl.n	8004310 <straight_table_ff+0x1c8>
 80042f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80042f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	d505      	bpl.n	8004310 <straight_table_ff+0x1c8>
 8004304:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <straight_table_ff+0x260>)
 8004306:	2206      	movs	r2, #6
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	4a24      	ldr	r2, [pc, #144]	; (800439c <straight_table_ff+0x254>)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8004310:	4b26      	ldr	r3, [pc, #152]	; (80043ac <straight_table_ff+0x264>)
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8004316:	f003 fc4d 	bl	8007bb4 <pl_DriveMotor_start>


	while (g_acc_flag!=4){
 800431a:	bf00      	nop
 800431c:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <straight_table_ff+0x260>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b04      	cmp	r3, #4
 8004324:	d1fa      	bne.n	800431c <straight_table_ff+0x1d4>


	}
	if(input_end_velocity==0){//BREAK
 8004326:	edd7 7a03 	vldr	s15, [r7, #12]
 800432a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004332:	d105      	bne.n	8004340 <straight_table_ff+0x1f8>
		wait_ms_NoReset(100);
 8004334:	2064      	movs	r0, #100	; 0x64
 8004336:	f003 ff17 	bl	8008168 <wait_ms_NoReset>
		modeacc = 0;
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <straight_table_ff+0x264>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <straight_table_ff+0x268>)
 8004342:	ed93 7a00 	vldr	s14, [r3]
 8004346:	edd7 7a05 	vldr	s15, [r7, #20]
 800434a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <straight_table_ff+0x268>)
 8004350:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004354:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <straight_table_ff+0x26c>)
 8004356:	ed93 7a00 	vldr	s14, [r3]
 800435a:	edd7 7a05 	vldr	s15, [r7, #20]
 800435e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <straight_table_ff+0x26c>)
 8004364:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004368:	f003 fc32 	bl	8007bd0 <pl_DriveMotor_stop>



	return straight.velocity;
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <straight_table_ff+0x254>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	ee07 3a90 	vmov	s15, r3



}
 8004374:	eeb0 0a67 	vmov.f32	s0, s15
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000554 	.word	0x20000554
 8004384:	20000558 	.word	0x20000558
 8004388:	2000055c 	.word	0x2000055c
 800438c:	20000560 	.word	0x20000560
 8004390:	20000564 	.word	0x20000564
 8004394:	20000568 	.word	0x20000568
 8004398:	200004f0 	.word	0x200004f0
 800439c:	200004d8 	.word	0x200004d8
 80043a0:	200004e4 	.word	0x200004e4
 80043a4:	20000805 	.word	0x20000805
 80043a8:	20000804 	.word	0x20000804
 80043ac:	20000528 	.word	0x20000528
 80043b0:	20000220 	.word	0x20000220
 80043b4:	20000224 	.word	0x20000224

080043b8 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6178      	str	r0, [r7, #20]
 80043c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80043c4:	edc7 0a03 	vstr	s1, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	ed87 1a01 	vstr	s2, [r7, #4]
 80043ce:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 80043d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	db7c      	blt.n	80044da <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7fc f8d9 	bl	8000598 <__aeabi_f2d>
 80043e6:	a3c8      	add	r3, pc, #800	; (adr r3, 8004708 <feedforward_const_accel+0x350>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fc f92c 	bl	8000648 <__aeabi_dmul>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	4bc6      	ldr	r3, [pc, #792]	; (8004718 <feedforward_const_accel+0x360>)
 80043fe:	f7fc fa4d 	bl	800089c <__aeabi_ddiv>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4610      	mov	r0, r2
 8004408:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 800440a:	a3b5      	add	r3, pc, #724	; (adr r3, 80046e0 <feedforward_const_accel+0x328>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fc fa44 	bl	800089c <__aeabi_ddiv>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004424:	f7fc fa3a 	bl	800089c <__aeabi_ddiv>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	a3ad      	add	r3, pc, #692	; (adr r3, 80046e8 <feedforward_const_accel+0x330>)
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f7fb ff51 	bl	80002dc <__adddf3>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	a3ab      	add	r3, pc, #684	; (adr r3, 80046f0 <feedforward_const_accel+0x338>)
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f7fc f8fe 	bl	8000648 <__aeabi_dmul>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	a3a8      	add	r3, pc, #672	; (adr r3, 80046f8 <feedforward_const_accel+0x340>)
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	f7fc fa1f 	bl	800089c <__aeabi_ddiv>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4614      	mov	r4, r2
 8004464:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004466:	ed97 7a04 	vldr	s14, [r7, #16]
 800446a:	eddf 6aac 	vldr	s13, [pc, #688]	; 800471c <feedforward_const_accel+0x364>
 800446e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004472:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8004720 <feedforward_const_accel+0x368>
 8004476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800447a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800447e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004482:	ee16 0a90 	vmov	r0, s13
 8004486:	f7fc f887 	bl	8000598 <__aeabi_f2d>
 800448a:	a39d      	add	r3, pc, #628	; (adr r3, 8004700 <feedforward_const_accel+0x348>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fc f8da 	bl	8000648 <__aeabi_dmul>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	a390      	add	r3, pc, #576	; (adr r3, 80046e0 <feedforward_const_accel+0x328>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fc f9fb 	bl	800089c <__aeabi_ddiv>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044b6:	f7fc f9f1 	bl	800089c <__aeabi_ddiv>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4620      	mov	r0, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7fb ff0b 	bl	80002dc <__adddf3>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f7fc fb93 	bl	8000bf8 <__aeabi_d2f>
 80044d2:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	e07b      	b.n	80045d2 <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7fc f85c 	bl	8000598 <__aeabi_f2d>
 80044e0:	a389      	add	r3, pc, #548	; (adr r3, 8004708 <feedforward_const_accel+0x350>)
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f7fc f8af 	bl	8000648 <__aeabi_dmul>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4610      	mov	r0, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	4b88      	ldr	r3, [pc, #544]	; (8004718 <feedforward_const_accel+0x360>)
 80044f8:	f7fc f9d0 	bl	800089c <__aeabi_ddiv>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004504:	a376      	add	r3, pc, #472	; (adr r3, 80046e0 <feedforward_const_accel+0x328>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f7fc f9c7 	bl	800089c <__aeabi_ddiv>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800451e:	f7fc f9bd 	bl	800089c <__aeabi_ddiv>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	a36f      	add	r3, pc, #444	; (adr r3, 80046e8 <feedforward_const_accel+0x330>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fb fed2 	bl	80002d8 <__aeabi_dsub>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	a36c      	add	r3, pc, #432	; (adr r3, 80046f0 <feedforward_const_accel+0x338>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f7fc f881 	bl	8000648 <__aeabi_dmul>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	a36a      	add	r3, pc, #424	; (adr r3, 80046f8 <feedforward_const_accel+0x340>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fc f9a2 	bl	800089c <__aeabi_ddiv>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004560:	ed97 7a04 	vldr	s14, [r7, #16]
 8004564:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800471c <feedforward_const_accel+0x364>
 8004568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800456c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004720 <feedforward_const_accel+0x368>
 8004570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004574:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004578:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800457c:	ee16 0a90 	vmov	r0, s13
 8004580:	f7fc f80a 	bl	8000598 <__aeabi_f2d>
 8004584:	a35e      	add	r3, pc, #376	; (adr r3, 8004700 <feedforward_const_accel+0x348>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f7fc f85d 	bl	8000648 <__aeabi_dmul>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	a352      	add	r3, pc, #328	; (adr r3, 80046e0 <feedforward_const_accel+0x328>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fc f97e 	bl	800089c <__aeabi_ddiv>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045b0:	f7fc f974 	bl	800089c <__aeabi_ddiv>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4620      	mov	r0, r4
 80045ba:	4629      	mov	r1, r5
 80045bc:	f7fb fe8e 	bl	80002dc <__adddf3>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	f7fc fb16 	bl	8000bf8 <__aeabi_d2f>
 80045cc:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 80045d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80045d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045de:	f2c0 80a1 	blt.w	8004724 <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f7fb ffd8 	bl	8000598 <__aeabi_f2d>
 80045e8:	a349      	add	r3, pc, #292	; (adr r3, 8004710 <feedforward_const_accel+0x358>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7fc f82b 	bl	8000648 <__aeabi_dmul>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	4b46      	ldr	r3, [pc, #280]	; (8004718 <feedforward_const_accel+0x360>)
 8004600:	f7fc f94c 	bl	800089c <__aeabi_ddiv>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 800460c:	a334      	add	r3, pc, #208	; (adr r3, 80046e0 <feedforward_const_accel+0x328>)
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f7fc f943 	bl	800089c <__aeabi_ddiv>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004626:	f7fc f939 	bl	800089c <__aeabi_ddiv>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	a32d      	add	r3, pc, #180	; (adr r3, 80046e8 <feedforward_const_accel+0x330>)
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f7fb fe50 	bl	80002dc <__adddf3>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	a32a      	add	r3, pc, #168	; (adr r3, 80046f0 <feedforward_const_accel+0x338>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f7fb fffd 	bl	8000648 <__aeabi_dmul>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4610      	mov	r0, r2
 8004654:	4619      	mov	r1, r3
 8004656:	a328      	add	r3, pc, #160	; (adr r3, 80046f8 <feedforward_const_accel+0x340>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f7fc f91e 	bl	800089c <__aeabi_ddiv>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4614      	mov	r4, r2
 8004666:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004668:	ed97 7a01 	vldr	s14, [r7, #4]
 800466c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800471c <feedforward_const_accel+0x364>
 8004670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004674:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004720 <feedforward_const_accel+0x368>
 8004678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800467c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004680:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004684:	ee16 0a90 	vmov	r0, s13
 8004688:	f7fb ff86 	bl	8000598 <__aeabi_f2d>
 800468c:	a31c      	add	r3, pc, #112	; (adr r3, 8004700 <feedforward_const_accel+0x348>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb ffd9 	bl	8000648 <__aeabi_dmul>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	a310      	add	r3, pc, #64	; (adr r3, 80046e0 <feedforward_const_accel+0x328>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f7fc f8fa 	bl	800089c <__aeabi_ddiv>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046b8:	f7fc f8f0 	bl	800089c <__aeabi_ddiv>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4620      	mov	r0, r4
 80046c2:	4629      	mov	r1, r5
 80046c4:	f7fb fe0a 	bl	80002dc <__adddf3>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	f7fc fa92 	bl	8000bf8 <__aeabi_d2f>
 80046d4:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 80046da:	e09f      	b.n	800481c <feedforward_const_accel+0x464>
 80046dc:	f3af 8000 	nop.w
 80046e0:	99e4ac6e 	.word	0x99e4ac6e
 80046e4:	3f9a9a29 	.word	0x3f9a9a29
 80046e8:	eb1c432d 	.word	0xeb1c432d
 80046ec:	3f1a36e2 	.word	0x3f1a36e2
 80046f0:	51eb851f 	.word	0x51eb851f
 80046f4:	3ff11eb8 	.word	0x3ff11eb8
 80046f8:	b7952d23 	.word	0xb7952d23
 80046fc:	3f569c23 	.word	0x3f569c23
 8004700:	761b0f50 	.word	0x761b0f50
 8004704:	3f66bf29 	.word	0x3f66bf29
 8004708:	7df8b79b 	.word	0x7df8b79b
 800470c:	3ed5fdfc 	.word	0x3ed5fdfc
 8004710:	1db94e6b 	.word	0x1db94e6b
 8004714:	3eb5cf75 	.word	0x3eb5cf75
 8004718:	408f4000 	.word	0x408f4000
 800471c:	447a0000 	.word	0x447a0000
 8004720:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004724:	6838      	ldr	r0, [r7, #0]
 8004726:	f7fb ff37 	bl	8000598 <__aeabi_f2d>
 800472a:	a34c      	add	r3, pc, #304	; (adr r3, 800485c <feedforward_const_accel+0x4a4>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fb ff8a 	bl	8000648 <__aeabi_dmul>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <feedforward_const_accel+0x498>)
 8004742:	f7fc f8ab 	bl	800089c <__aeabi_ddiv>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800474e:	a336      	add	r3, pc, #216	; (adr r3, 8004828 <feedforward_const_accel+0x470>)
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f7fc f8a2 	bl	800089c <__aeabi_ddiv>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004768:	f7fc f898 	bl	800089c <__aeabi_ddiv>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	a32e      	add	r3, pc, #184	; (adr r3, 8004830 <feedforward_const_accel+0x478>)
 8004776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477a:	f7fb fdad 	bl	80002d8 <__aeabi_dsub>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	a32c      	add	r3, pc, #176	; (adr r3, 8004838 <feedforward_const_accel+0x480>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f7fb ff5c 	bl	8000648 <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	a329      	add	r3, pc, #164	; (adr r3, 8004840 <feedforward_const_accel+0x488>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fc f87d 	bl	800089c <__aeabi_ddiv>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4614      	mov	r4, r2
 80047a8:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80047aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80047ae:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004854 <feedforward_const_accel+0x49c>
 80047b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047b6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004858 <feedforward_const_accel+0x4a0>
 80047ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047be:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80047c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047c6:	ee16 0a90 	vmov	r0, s13
 80047ca:	f7fb fee5 	bl	8000598 <__aeabi_f2d>
 80047ce:	a31e      	add	r3, pc, #120	; (adr r3, 8004848 <feedforward_const_accel+0x490>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f7fb ff38 	bl	8000648 <__aeabi_dmul>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	a311      	add	r3, pc, #68	; (adr r3, 8004828 <feedforward_const_accel+0x470>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f7fc f859 	bl	800089c <__aeabi_ddiv>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047fa:	f7fc f84f 	bl	800089c <__aeabi_ddiv>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f7fb fd69 	bl	80002dc <__adddf3>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	f7fc f9f1 	bl	8000bf8 <__aeabi_d2f>
 8004816:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	601a      	str	r2, [r3, #0]
}
 800481c:	bf00      	nop
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bdb0      	pop	{r4, r5, r7, pc}
 8004824:	f3af 8000 	nop.w
 8004828:	99e4ac6e 	.word	0x99e4ac6e
 800482c:	3f9a9a29 	.word	0x3f9a9a29
 8004830:	eb1c432d 	.word	0xeb1c432d
 8004834:	3f1a36e2 	.word	0x3f1a36e2
 8004838:	51eb851f 	.word	0x51eb851f
 800483c:	3ff11eb8 	.word	0x3ff11eb8
 8004840:	b7952d23 	.word	0xb7952d23
 8004844:	3f569c23 	.word	0x3f569c23
 8004848:	761b0f50 	.word	0x761b0f50
 800484c:	3f66bf29 	.word	0x3f66bf29
 8004850:	408f4000 	.word	0x408f4000
 8004854:	447a0000 	.word	0x447a0000
 8004858:	421c0000 	.word	0x421c0000
 800485c:	1db94e6b 	.word	0x1db94e6b
 8004860:	3eb5cf75 	.word	0x3eb5cf75

08004864 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <PID_Init+0x44>)
 800486a:	4a10      	ldr	r2, [pc, #64]	; (80048ac <PID_Init+0x48>)
 800486c:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <PID_Init+0x4c>)
 8004870:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <PID_Init+0x50>)
 8004872:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8004874:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <PID_Init+0x54>)
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <PID_Init+0x58>)
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <PID_Init+0x5c>)
 8004880:	601a      	str	r2, [r3, #0]
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <PID_Init+0x60>)
 8004884:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <PID_Init+0x64>)
 8004886:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <PID_Init+0x68>)
 800488a:	4a11      	ldr	r2, [pc, #68]	; (80048d0 <PID_Init+0x6c>)
 800488c:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <PID_Init+0x70>)
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <PID_Init+0x74>)
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	609a      	str	r2, [r3, #8]

}
 800489e:	bf00      	nop
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	20000554 	.word	0x20000554
 80048ac:	40466666 	.word	0x40466666
 80048b0:	20000558 	.word	0x20000558
 80048b4:	3da3d70a 	.word	0x3da3d70a
 80048b8:	2000055c 	.word	0x2000055c
 80048bc:	20000560 	.word	0x20000560
 80048c0:	3fcccccd 	.word	0x3fcccccd
 80048c4:	20000564 	.word	0x20000564
 80048c8:	3d4ccccd 	.word	0x3d4ccccd
 80048cc:	20000568 	.word	0x20000568
 80048d0:	3b03126f 	.word	0x3b03126f
 80048d4:	20000534 	.word	0x20000534
 80048d8:	20000544 	.word	0x20000544

080048dc <clear_Ierror>:

void clear_Ierror(void) {
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <clear_Ierror+0x20>)
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <clear_Ierror+0x24>)
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000534 	.word	0x20000534
 8004900:	20000544 	.word	0x20000544

08004904 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004912:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 8004922:	edd7 7a01 	vldr	s15, [r7, #4]
 8004926:	eef5 7a40 	vcmp.f32	s15, #0.0
 800492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492e:	d101      	bne.n	8004934 <EncoderGyro_PID+0x30>
		reset_speed();
 8004930:	f7fc fb72 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8004934:	4b70      	ldr	r3, [pc, #448]	; (8004af8 <EncoderGyro_PID+0x1f4>)
 8004936:	edd3 7a00 	vldr	s15, [r3]
 800493a:	eef0 7ae7 	vabs.f32	s15, s15
 800493e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004afc <EncoderGyro_PID+0x1f8>
 8004942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d520      	bpl.n	800498e <EncoderGyro_PID+0x8a>
 800494c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004950:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004b00 <EncoderGyro_PID+0x1fc>
 8004954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	db17      	blt.n	800498e <EncoderGyro_PID+0x8a>
 800495e:	4b69      	ldr	r3, [pc, #420]	; (8004b04 <EncoderGyro_PID+0x200>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b04      	cmp	r3, #4
 8004964:	d013      	beq.n	800498e <EncoderGyro_PID+0x8a>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004966:	4b68      	ldr	r3, [pc, #416]	; (8004b08 <EncoderGyro_PID+0x204>)
 8004968:	ed93 7a00 	vldr	s14, [r3]
 800496c:	4b67      	ldr	r3, [pc, #412]	; (8004b0c <EncoderGyro_PID+0x208>)
 800496e:	edd3 7a00 	vldr	s15, [r3]
 8004972:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004976:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800497a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800497e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004986:	4b62      	ldr	r3, [pc, #392]	; (8004b10 <EncoderGyro_PID+0x20c>)
 8004988:	edc3 7a00 	vstr	s15, [r3]
 800498c:	e01a      	b.n	80049c4 <EncoderGyro_PID+0xc0>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 800498e:	4b61      	ldr	r3, [pc, #388]	; (8004b14 <EncoderGyro_PID+0x210>)
 8004990:	ed93 7a00 	vldr	s14, [r3]
 8004994:	4b60      	ldr	r3, [pc, #384]	; (8004b18 <EncoderGyro_PID+0x214>)
 8004996:	edd3 7a00 	vldr	s15, [r3]
 800499a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800499e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80049a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80049aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ae:	4b58      	ldr	r3, [pc, #352]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049b0:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 80049b4:	4b59      	ldr	r3, [pc, #356]	; (8004b1c <EncoderGyro_PID+0x218>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a54      	ldr	r2, [pc, #336]	; (8004b0c <EncoderGyro_PID+0x208>)
 80049ba:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 80049bc:	4b58      	ldr	r3, [pc, #352]	; (8004b20 <EncoderGyro_PID+0x21c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a51      	ldr	r2, [pc, #324]	; (8004b08 <EncoderGyro_PID+0x204>)
 80049c2:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 80049c4:	4b52      	ldr	r3, [pc, #328]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049c6:	ed93 7a00 	vldr	s14, [r3]
 80049ca:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80049d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049d4:	4b4e      	ldr	r3, [pc, #312]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049d6:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80049da:	4b4d      	ldr	r3, [pc, #308]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a4c      	ldr	r2, [pc, #304]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049e0:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80049e2:	4b4b      	ldr	r3, [pc, #300]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80049e8:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049ea:	edd3 7a00 	vldr	s15, [r3]
 80049ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049f4:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80049f8:	4b45      	ldr	r3, [pc, #276]	; (8004b10 <EncoderGyro_PID+0x20c>)
 80049fa:	ed93 7a00 	vldr	s14, [r3]
 80049fe:	4b49      	ldr	r3, [pc, #292]	; (8004b24 <EncoderGyro_PID+0x220>)
 8004a00:	edd3 7a00 	vldr	s15, [r3]
 8004a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a08:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <EncoderGyro_PID+0x20c>)
 8004a0a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a0e:	4b46      	ldr	r3, [pc, #280]	; (8004b28 <EncoderGyro_PID+0x224>)
 8004a10:	edd3 7a00 	vldr	s15, [r3]
 8004a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a1c:	4b3c      	ldr	r3, [pc, #240]	; (8004b10 <EncoderGyro_PID+0x20c>)
 8004a1e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a22:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <EncoderGyro_PID+0x228>)
 8004a24:	edd3 7a00 	vldr	s15, [r3]
 8004a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a30:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004a34:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <EncoderGyro_PID+0x1f4>)
 8004a36:	edd3 7a00 	vldr	s15, [r3]
 8004a3a:	ed97 7a00 	vldr	s14, [r7]
 8004a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a42:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a44:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a4a:	ed93 7a00 	vldr	s14, [r3]
 8004a4e:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a58:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a5a:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004a5e:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a33      	ldr	r2, [pc, #204]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a64:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004a66:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a68:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a6e:	edd3 7a00 	vldr	s15, [r3]
 8004a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a78:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004a7c:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a7e:	ed93 7a00 	vldr	s14, [r3]
 8004a82:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <EncoderGyro_PID+0x230>)
 8004a84:	edd3 7a00 	vldr	s15, [r3]
 8004a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a8c:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004a8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <EncoderGyro_PID+0x234>)
 8004a94:	edd3 7a00 	vldr	s15, [r3]
 8004a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a9c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004aa0:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <EncoderGyro_PID+0x22c>)
 8004aa2:	edd3 6a03 	vldr	s13, [r3, #12]
 8004aa6:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <EncoderGyro_PID+0x238>)
 8004aa8:	edd3 7a00 	vldr	s15, [r3]
 8004aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ab4:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004abc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004b40 <EncoderGyro_PID+0x23c>
 8004ac0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <EncoderGyro_PID+0x240>)
 8004ac6:	edd3 7a00 	vldr	s15, [r3]
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8004ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ad8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004b40 <EncoderGyro_PID+0x23c>
 8004adc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ae0:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <EncoderGyro_PID+0x240>)
 8004ae2:	edd3 7a00 	vldr	s15, [r3]
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	edc3 7a00 	vstr	s15, [r3]

}
 8004af0:	bf00      	nop
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000268 	.word	0x20000268
 8004afc:	42f00000 	.word	0x42f00000
 8004b00:	42c80000 	.word	0x42c80000
 8004b04:	20000528 	.word	0x20000528
 8004b08:	2000025c 	.word	0x2000025c
 8004b0c:	20000258 	.word	0x20000258
 8004b10:	20000534 	.word	0x20000534
 8004b14:	2000022c 	.word	0x2000022c
 8004b18:	20000228 	.word	0x20000228
 8004b1c:	20000238 	.word	0x20000238
 8004b20:	2000023c 	.word	0x2000023c
 8004b24:	20000554 	.word	0x20000554
 8004b28:	20000558 	.word	0x20000558
 8004b2c:	2000055c 	.word	0x2000055c
 8004b30:	20000544 	.word	0x20000544
 8004b34:	20000560 	.word	0x20000560
 8004b38:	20000564 	.word	0x20000564
 8004b3c:	20000568 	.word	0x20000568
 8004b40:	44d1e000 	.word	0x44d1e000
 8004b44:	200004d4 	.word	0x200004d4

08004b48 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004b4c:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <init_WallControl+0x104>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004b52:	4b3f      	ldr	r3, [pc, #252]	; (8004c50 <init_WallControl+0x108>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004b58:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <init_WallControl+0x10c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004b5e:	4b3e      	ldr	r3, [pc, #248]	; (8004c58 <init_WallControl+0x110>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004b64:	4b3d      	ldr	r3, [pc, #244]	; (8004c5c <init_WallControl+0x114>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004b6a:	4b3d      	ldr	r3, [pc, #244]	; (8004c60 <init_WallControl+0x118>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004b70:	4b3c      	ldr	r3, [pc, #240]	; (8004c64 <init_WallControl+0x11c>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004b76:	4b3c      	ldr	r3, [pc, #240]	; (8004c68 <init_WallControl+0x120>)
 8004b78:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <init_WallControl+0x124>)
 8004b7a:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004b7c:	4b3c      	ldr	r3, [pc, #240]	; (8004c70 <init_WallControl+0x128>)
 8004b7e:	4a3d      	ldr	r2, [pc, #244]	; (8004c74 <init_WallControl+0x12c>)
 8004b80:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004b82:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <init_WallControl+0x130>)
 8004b84:	4a3d      	ldr	r2, [pc, #244]	; (8004c7c <init_WallControl+0x134>)
 8004b86:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004b88:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <init_WallControl+0x138>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004b8e:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <init_WallControl+0x13c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004b94:	4b3c      	ldr	r3, [pc, #240]	; (8004c88 <init_WallControl+0x140>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004b9a:	4b3c      	ldr	r3, [pc, #240]	; (8004c8c <init_WallControl+0x144>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004ba0:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <init_WallControl+0x148>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004ba6:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <init_WallControl+0x14c>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004bac:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <init_WallControl+0x150>)
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <init_WallControl+0x154>)
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004bbc:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <init_WallControl+0x158>)
 8004bbe:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004bc2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004bc4:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <init_WallControl+0x15c>)
 8004bc6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004bca:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004bcc:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <init_WallControl+0x160>)
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004bd4:	4b35      	ldr	r3, [pc, #212]	; (8004cac <init_WallControl+0x164>)
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004bdc:	4b34      	ldr	r3, [pc, #208]	; (8004cb0 <init_WallControl+0x168>)
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004be4:	4b33      	ldr	r3, [pc, #204]	; (8004cb4 <init_WallControl+0x16c>)
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004bec:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <init_WallControl+0x170>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004bf2:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <init_WallControl+0x174>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004bf8:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <init_WallControl+0x178>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004bfe:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <init_WallControl+0x17c>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004c04:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <init_WallControl+0x180>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004c0a:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <init_WallControl+0x184>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004c10:	4b2f      	ldr	r3, [pc, #188]	; (8004cd0 <init_WallControl+0x188>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004c16:	4b2f      	ldr	r3, [pc, #188]	; (8004cd4 <init_WallControl+0x18c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004c1c:	4b2e      	ldr	r3, [pc, #184]	; (8004cd8 <init_WallControl+0x190>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004c22:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <init_WallControl+0x194>)
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ce0 <init_WallControl+0x198>)
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004c32:	4b2c      	ldr	r3, [pc, #176]	; (8004ce4 <init_WallControl+0x19c>)
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004c3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ce8 <init_WallControl+0x1a0>)
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000590 	.word	0x20000590
 8004c50:	20000591 	.word	0x20000591
 8004c54:	20000593 	.word	0x20000593
 8004c58:	20000592 	.word	0x20000592
 8004c5c:	20000595 	.word	0x20000595
 8004c60:	20000596 	.word	0x20000596
 8004c64:	20000597 	.word	0x20000597
 8004c68:	20000598 	.word	0x20000598
 8004c6c:	44d2a000 	.word	0x44d2a000
 8004c70:	2000059c 	.word	0x2000059c
 8004c74:	44b56000 	.word	0x44b56000
 8004c78:	200005a0 	.word	0x200005a0
 8004c7c:	420c0000 	.word	0x420c0000
 8004c80:	200005b8 	.word	0x200005b8
 8004c84:	200005b4 	.word	0x200005b4
 8004c88:	200005c0 	.word	0x200005c0
 8004c8c:	200005bc 	.word	0x200005bc
 8004c90:	200005c8 	.word	0x200005c8
 8004c94:	200005c4 	.word	0x200005c4
 8004c98:	200005d0 	.word	0x200005d0
 8004c9c:	200005cc 	.word	0x200005cc
 8004ca0:	200005d8 	.word	0x200005d8
 8004ca4:	200005d4 	.word	0x200005d4
 8004ca8:	200005e0 	.word	0x200005e0
 8004cac:	200005dc 	.word	0x200005dc
 8004cb0:	200005e8 	.word	0x200005e8
 8004cb4:	200005e4 	.word	0x200005e4
 8004cb8:	200005ec 	.word	0x200005ec
 8004cbc:	200005ed 	.word	0x200005ed
 8004cc0:	200005ee 	.word	0x200005ee
 8004cc4:	200005ef 	.word	0x200005ef
 8004cc8:	200005f0 	.word	0x200005f0
 8004ccc:	200005f1 	.word	0x200005f1
 8004cd0:	200005f2 	.word	0x200005f2
 8004cd4:	200005f3 	.word	0x200005f3
 8004cd8:	200005f4 	.word	0x200005f4
 8004cdc:	200005f8 	.word	0x200005f8
 8004ce0:	200005fc 	.word	0x200005fc
 8004ce4:	20000600 	.word	0x20000600
 8004ce8:	20000604 	.word	0x20000604
 8004cec:	00000000 	.word	0x00000000

08004cf0 <calWallConrol>:


float calWallConrol(void) {
 8004cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf4:	b0aa      	sub	sp, #168	; 0xa8
 8004cf6:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004cf8:	4b9b      	ldr	r3, [pc, #620]	; (8004f68 <calWallConrol+0x278>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d13d      	bne.n	8004d7c <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004d00:	4b9a      	ldr	r3, [pc, #616]	; (8004f6c <calWallConrol+0x27c>)
 8004d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004d06:	4b9a      	ldr	r3, [pc, #616]	; (8004f70 <calWallConrol+0x280>)
 8004d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 2000) {
 8004d0c:	4b99      	ldr	r3, [pc, #612]	; (8004f74 <calWallConrol+0x284>)
 8004d0e:	edd3 7a00 	vldr	s15, [r3]
 8004d12:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004f78 <calWallConrol+0x288>
 8004d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1e:	dd06      	ble.n	8004d2e <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 2000;
 8004d20:	4b96      	ldr	r3, [pc, #600]	; (8004f7c <calWallConrol+0x28c>)
 8004d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 2000;
 8004d26:	4b96      	ldr	r3, [pc, #600]	; (8004f80 <calWallConrol+0x290>)
 8004d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d2c:	e048      	b.n	8004dc0 <calWallConrol+0xd0>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004d2e:	4b91      	ldr	r3, [pc, #580]	; (8004f74 <calWallConrol+0x284>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fb fc30 	bl	8000598 <__aeabi_f2d>
 8004d38:	a385      	add	r3, pc, #532	; (adr r3, 8004f50 <calWallConrol+0x260>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fc83 	bl	8000648 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f7fb ff55 	bl	8000bf8 <__aeabi_d2f>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004d54:	4b87      	ldr	r3, [pc, #540]	; (8004f74 <calWallConrol+0x284>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fb fc1d 	bl	8000598 <__aeabi_f2d>
 8004d5e:	a37e      	add	r3, pc, #504	; (adr r3, 8004f58 <calWallConrol+0x268>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb fc70 	bl	8000648 <__aeabi_dmul>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f7fb ff42 	bl	8000bf8 <__aeabi_d2f>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d7a:	e021      	b.n	8004dc0 <calWallConrol+0xd0>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004d7c:	4b81      	ldr	r3, [pc, #516]	; (8004f84 <calWallConrol+0x294>)
 8004d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004d82:	4b81      	ldr	r3, [pc, #516]	; (8004f88 <calWallConrol+0x298>)
 8004d84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004d88:	4b7a      	ldr	r3, [pc, #488]	; (8004f74 <calWallConrol+0x284>)
 8004d8a:	edd3 7a00 	vldr	s15, [r3]
 8004d8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d96:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004d9a:	4b76      	ldr	r3, [pc, #472]	; (8004f74 <calWallConrol+0x284>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb fbfa 	bl	8000598 <__aeabi_f2d>
 8004da4:	a36e      	add	r3, pc, #440	; (adr r3, 8004f60 <calWallConrol+0x270>)
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb fc4d 	bl	8000648 <__aeabi_dmul>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	f7fb ff1f 	bl	8000bf8 <__aeabi_d2f>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004dc0:	4b72      	ldr	r3, [pc, #456]	; (8004f8c <calWallConrol+0x29c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8004dc8:	da03      	bge.n	8004dd2 <calWallConrol+0xe2>
		sensorWall_L = SENSOR_L_MIN;
 8004dca:	4b71      	ldr	r3, [pc, #452]	; (8004f90 <calWallConrol+0x2a0>)
 8004dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dd0:	e011      	b.n	8004df6 <calWallConrol+0x106>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004dd2:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <calWallConrol+0x29c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	dd03      	ble.n	8004de6 <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MAX;
 8004dde:	4b6d      	ldr	r3, [pc, #436]	; (8004f94 <calWallConrol+0x2a4>)
 8004de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004de4:	e007      	b.n	8004df6 <calWallConrol+0x106>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004de6:	4b69      	ldr	r3, [pc, #420]	; (8004f8c <calWallConrol+0x29c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004df6:	4b65      	ldr	r3, [pc, #404]	; (8004f8c <calWallConrol+0x29c>)
 8004df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004dfc:	f240 2289 	movw	r2, #649	; 0x289
 8004e00:	4293      	cmp	r3, r2
 8004e02:	dc03      	bgt.n	8004e0c <calWallConrol+0x11c>
		sensorWall_R = SENSOR_R_MIN;
 8004e04:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <calWallConrol+0x2a8>)
 8004e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e0a:	e012      	b.n	8004e32 <calWallConrol+0x142>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004e0c:	4b5f      	ldr	r3, [pc, #380]	; (8004f8c <calWallConrol+0x29c>)
 8004e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e12:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004e16:	dd03      	ble.n	8004e20 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MAX;
 8004e18:	4b60      	ldr	r3, [pc, #384]	; (8004f9c <calWallConrol+0x2ac>)
 8004e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e1e:	e008      	b.n	8004e32 <calWallConrol+0x142>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004e20:	4b5a      	ldr	r3, [pc, #360]	; (8004f8c <calWallConrol+0x29c>)
 8004e22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e2e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004e40:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <calWallConrol+0x2b0>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11c      	bne.n	8004e82 <calWallConrol+0x192>
		g_WallControlStatus = 0;
 8004e48:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <calWallConrol+0x2b4>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004e4e:	4b56      	ldr	r3, [pc, #344]	; (8004fa8 <calWallConrol+0x2b8>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004e54:	4b55      	ldr	r3, [pc, #340]	; (8004fac <calWallConrol+0x2bc>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004e5a:	4b55      	ldr	r3, [pc, #340]	; (8004fb0 <calWallConrol+0x2c0>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004e60:	4b54      	ldr	r3, [pc, #336]	; (8004fb4 <calWallConrol+0x2c4>)
 8004e62:	4a55      	ldr	r2, [pc, #340]	; (8004fb8 <calWallConrol+0x2c8>)
 8004e64:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004e66:	4b55      	ldr	r3, [pc, #340]	; (8004fbc <calWallConrol+0x2cc>)
 8004e68:	4a55      	ldr	r2, [pc, #340]	; (8004fc0 <calWallConrol+0x2d0>)
 8004e6a:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004e6c:	4b55      	ldr	r3, [pc, #340]	; (8004fc4 <calWallConrol+0x2d4>)
 8004e6e:	4a56      	ldr	r2, [pc, #344]	; (8004fc8 <calWallConrol+0x2d8>)
 8004e70:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004e7a:	f002 f89d 	bl	8006fb8 <pl_yellow_LED_off>
 8004e7e:	f001 ba46 	b.w	800630e <calWallConrol+0x161e>

	} else if (g_WallControl_mode == 1) {
 8004e82:	4b47      	ldr	r3, [pc, #284]	; (8004fa0 <calWallConrol+0x2b0>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	f040 82eb 	bne.w	8005462 <calWallConrol+0x772>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004e8c:	4b45      	ldr	r3, [pc, #276]	; (8004fa4 <calWallConrol+0x2b4>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 809b 	beq.w	8004fd0 <calWallConrol+0x2e0>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004e9a:	4b3c      	ldr	r3, [pc, #240]	; (8004f8c <calWallConrol+0x29c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004ea2:	db16      	blt.n	8004ed2 <calWallConrol+0x1e2>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004ea4:	4b49      	ldr	r3, [pc, #292]	; (8004fcc <calWallConrol+0x2dc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fb fb63 	bl	8000574 <__aeabi_i2d>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4690      	mov	r8, r2
 8004eb4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004eb8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004ebc:	f7fb fb6c 	bl	8000598 <__aeabi_f2d>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4640      	mov	r0, r8
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	f7fb fe4e 	bl	8000b68 <__aeabi_dcmpgt>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d037      	beq.n	8004f42 <calWallConrol+0x252>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004ed2:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <calWallConrol+0x2b4>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	4b32      	ldr	r3, [pc, #200]	; (8004fa4 <calWallConrol+0x2b4>)
 8004edc:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004ede:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <calWallConrol+0x2c4>)
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eec:	e021      	b.n	8004f32 <calWallConrol+0x242>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004eee:	4a27      	ldr	r2, [pc, #156]	; (8004f8c <calWallConrol+0x29c>)
 8004ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef8:	ee07 3a90 	vmov	s15, r3
 8004efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f00:	4b2c      	ldr	r3, [pc, #176]	; (8004fb4 <calWallConrol+0x2c4>)
 8004f02:	edd3 7a00 	vldr	s15, [r3]
 8004f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0e:	dd0b      	ble.n	8004f28 <calWallConrol+0x238>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004f10:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <calWallConrol+0x29c>)
 8004f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <calWallConrol+0x2c4>)
 8004f24:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f36:	2b13      	cmp	r3, #19
 8004f38:	ddd9      	ble.n	8004eee <calWallConrol+0x1fe>
					}
				}
				g_skewer_displacement = 0;
 8004f3a:	4b22      	ldr	r3, [pc, #136]	; (8004fc4 <calWallConrol+0x2d4>)
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <calWallConrol+0x2bc>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e064      	b.n	8005014 <calWallConrol+0x324>
 8004f4a:	bf00      	nop
 8004f4c:	f3af 8000 	nop.w
 8004f50:	9999999a 	.word	0x9999999a
 8004f54:	3fd99999 	.word	0x3fd99999
 8004f58:	47ae147b 	.word	0x47ae147b
 8004f5c:	bf847ae1 	.word	0xbf847ae1
 8004f60:	bc6a7efa 	.word	0xbc6a7efa
 8004f64:	3f789374 	.word	0x3f789374
 8004f68:	20000808 	.word	0x20000808
 8004f6c:	43340000 	.word	0x43340000
 8004f70:	43020000 	.word	0x43020000
 8004f74:	200004d8 	.word	0x200004d8
 8004f78:	44fa0000 	.word	0x44fa0000
 8004f7c:	44480000 	.word	0x44480000
 8004f80:	c1a00000 	.word	0xc1a00000
 8004f84:	431d0000 	.word	0x431d0000
 8004f88:	42dc0000 	.word	0x42dc0000
 8004f8c:	200002b8 	.word	0x200002b8
 8004f90:	44390000 	.word	0x44390000
 8004f94:	450fc000 	.word	0x450fc000
 8004f98:	44228000 	.word	0x44228000
 8004f9c:	44e10000 	.word	0x44e10000
 8004fa0:	20000590 	.word	0x20000590
 8004fa4:	20000593 	.word	0x20000593
 8004fa8:	20000595 	.word	0x20000595
 8004fac:	20000596 	.word	0x20000596
 8004fb0:	20000597 	.word	0x20000597
 8004fb4:	20000598 	.word	0x20000598
 8004fb8:	44d2a000 	.word	0x44d2a000
 8004fbc:	2000059c 	.word	0x2000059c
 8004fc0:	44b56000 	.word	0x44b56000
 8004fc4:	200005a0 	.word	0x200005a0
 8004fc8:	420c0000 	.word	0x420c0000
 8004fcc:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004fd0:	4bbd      	ldr	r3, [pc, #756]	; (80052c8 <calWallConrol+0x5d8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004fd8:	dd1c      	ble.n	8005014 <calWallConrol+0x324>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004fda:	4bbc      	ldr	r3, [pc, #752]	; (80052cc <calWallConrol+0x5dc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb fac8 	bl	8000574 <__aeabi_i2d>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4614      	mov	r4, r2
 8004fea:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004fee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004ff2:	f7fb fad1 	bl	8000598 <__aeabi_f2d>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7fb fd95 	bl	8000b2c <__aeabi_dcmplt>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <calWallConrol+0x324>
				g_WallControlStatus = g_WallControlStatus + 1;
 8005008:	4bb1      	ldr	r3, [pc, #708]	; (80052d0 <calWallConrol+0x5e0>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	b2da      	uxtb	r2, r3
 8005010:	4baf      	ldr	r3, [pc, #700]	; (80052d0 <calWallConrol+0x5e0>)
 8005012:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8005014:	4bae      	ldr	r3, [pc, #696]	; (80052d0 <calWallConrol+0x5e0>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	b2db      	uxtb	r3, r3
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05b      	beq.n	80050dc <calWallConrol+0x3ec>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8005024:	4ba8      	ldr	r3, [pc, #672]	; (80052c8 <calWallConrol+0x5d8>)
 8005026:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800502a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800502e:	db17      	blt.n	8005060 <calWallConrol+0x370>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005030:	4ba6      	ldr	r3, [pc, #664]	; (80052cc <calWallConrol+0x5dc>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	4618      	mov	r0, r3
 8005036:	f7fb fa9d 	bl	8000574 <__aeabi_i2d>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	613a      	str	r2, [r7, #16]
 8005040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005044:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8005046:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800504a:	f7fb faa5 	bl	8000598 <__aeabi_f2d>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005052:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005056:	f7fb fd87 	bl	8000b68 <__aeabi_dcmpgt>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d039      	beq.n	80050d4 <calWallConrol+0x3e4>
				g_WallControlStatus = g_WallControlStatus - 2;
 8005060:	4b9b      	ldr	r3, [pc, #620]	; (80052d0 <calWallConrol+0x5e0>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	3b02      	subs	r3, #2
 8005066:	b2da      	uxtb	r2, r3
 8005068:	4b99      	ldr	r3, [pc, #612]	; (80052d0 <calWallConrol+0x5e0>)
 800506a:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 800506c:	4b99      	ldr	r3, [pc, #612]	; (80052d4 <calWallConrol+0x5e4>)
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800507a:	e023      	b.n	80050c4 <calWallConrol+0x3d4>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 800507c:	4a92      	ldr	r2, [pc, #584]	; (80052c8 <calWallConrol+0x5d8>)
 800507e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005082:	3350      	adds	r3, #80	; 0x50
 8005084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005088:	ee07 3a90 	vmov	s15, r3
 800508c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005090:	4b90      	ldr	r3, [pc, #576]	; (80052d4 <calWallConrol+0x5e4>)
 8005092:	edd3 7a00 	vldr	s15, [r3]
 8005096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509e:	dd0c      	ble.n	80050ba <calWallConrol+0x3ca>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 80050a0:	4a89      	ldr	r2, [pc, #548]	; (80052c8 <calWallConrol+0x5d8>)
 80050a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050a6:	3350      	adds	r3, #80	; 0x50
 80050a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b4:	4b87      	ldr	r3, [pc, #540]	; (80052d4 <calWallConrol+0x5e4>)
 80050b6:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80050ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050be:	3301      	adds	r3, #1
 80050c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c8:	2b13      	cmp	r3, #19
 80050ca:	ddd7      	ble.n	800507c <calWallConrol+0x38c>
					}
				}
				g_skewer_displacement = 0;
 80050cc:	4b82      	ldr	r3, [pc, #520]	; (80052d8 <calWallConrol+0x5e8>)
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 80050d4:	4b81      	ldr	r3, [pc, #516]	; (80052dc <calWallConrol+0x5ec>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e023      	b.n	8005124 <calWallConrol+0x434>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 80050dc:	4b7a      	ldr	r3, [pc, #488]	; (80052c8 <calWallConrol+0x5d8>)
 80050de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80050e2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80050e6:	dd1d      	ble.n	8005124 <calWallConrol+0x434>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 80050e8:	4b78      	ldr	r3, [pc, #480]	; (80052cc <calWallConrol+0x5dc>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb fa41 	bl	8000574 <__aeabi_i2d>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	60ba      	str	r2, [r7, #8]
 80050f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050fc:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 80050fe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005102:	f7fb fa49 	bl	8000598 <__aeabi_f2d>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 800510a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800510e:	f7fb fd0d 	bl	8000b2c <__aeabi_dcmplt>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <calWallConrol+0x434>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8005118:	4b6d      	ldr	r3, [pc, #436]	; (80052d0 <calWallConrol+0x5e0>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	3302      	adds	r3, #2
 800511e:	b2da      	uxtb	r2, r3
 8005120:	4b6b      	ldr	r3, [pc, #428]	; (80052d0 <calWallConrol+0x5e0>)
 8005122:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8005124:	4b6a      	ldr	r3, [pc, #424]	; (80052d0 <calWallConrol+0x5e0>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b03      	cmp	r3, #3
 800512a:	f201 80f0 	bhi.w	800630e <calWallConrol+0x161e>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <calWallConrol+0x444>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005145 	.word	0x08005145
 8005138:	0800524b 	.word	0x0800524b
 800513c:	080052f9 	.word	0x080052f9
 8005140:	08005363 	.word	0x08005363
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8005144:	4b64      	ldr	r3, [pc, #400]	; (80052d8 <calWallConrol+0x5e8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7fb fa25 	bl	8000598 <__aeabi_f2d>
 800514e:	4604      	mov	r4, r0
 8005150:	460d      	mov	r5, r1
 8005152:	4b63      	ldr	r3, [pc, #396]	; (80052e0 <calWallConrol+0x5f0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f7fb fa1e 	bl	8000598 <__aeabi_f2d>
 800515c:	a356      	add	r3, pc, #344	; (adr r3, 80052b8 <calWallConrol+0x5c8>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f7fb fa71 	bl	8000648 <__aeabi_dmul>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb f8b5 	bl	80002dc <__adddf3>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	f7fb fd3d 	bl	8000bf8 <__aeabi_d2f>
 800517e:	4603      	mov	r3, r0
 8005180:	4a55      	ldr	r2, [pc, #340]	; (80052d8 <calWallConrol+0x5e8>)
 8005182:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8005184:	4b54      	ldr	r3, [pc, #336]	; (80052d8 <calWallConrol+0x5e8>)
 8005186:	edd3 7a00 	vldr	s15, [r3]
 800518a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80052e4 <calWallConrol+0x5f4>
 800518e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005196:	d52e      	bpl.n	80051f6 <calWallConrol+0x506>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005198:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <calWallConrol+0x5f8>)
 800519a:	edd3 7a00 	vldr	s15, [r3]
 800519e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80052ec <calWallConrol+0x5fc>
 80051a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051a6:	eef1 6a67 	vneg.f32	s13, s15
 80051aa:	4b4f      	ldr	r3, [pc, #316]	; (80052e8 <calWallConrol+0x5f8>)
 80051ac:	edd3 7a00 	vldr	s15, [r3]
 80051b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 80051b4:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <calWallConrol+0x5e4>)
 80051b6:	edd3 7a00 	vldr	s15, [r3]
 80051ba:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80052f4 <calWallConrol+0x604>
 80051be:	ee37 6ae6 	vsub.f32	s12, s15, s13
 80051c2:	4b44      	ldr	r3, [pc, #272]	; (80052d4 <calWallConrol+0x5e4>)
 80051c4:	edd3 6a00 	vldr	s13, [r3]
 80051c8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80051cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d0:	ee17 0a90 	vmov	r0, s15
 80051d4:	f7fb f9e0 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 80051d8:	a339      	add	r3, pc, #228	; (adr r3, 80052c0 <calWallConrol+0x5d0>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb fa33 	bl	8000648 <__aeabi_dmul>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	f7fb fd05 	bl	8000bf8 <__aeabi_d2f>
 80051ee:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 80051f0:	4a3f      	ldr	r2, [pc, #252]	; (80052f0 <calWallConrol+0x600>)
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	e003      	b.n	80051fe <calWallConrol+0x50e>
			} else {
				wall_normal.error = 0;
 80051f6:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <calWallConrol+0x600>)
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80051fe:	4b3c      	ldr	r3, [pc, #240]	; (80052f0 <calWallConrol+0x600>)
 8005200:	ed93 7a00 	vldr	s14, [r3]
 8005204:	4b3a      	ldr	r3, [pc, #232]	; (80052f0 <calWallConrol+0x600>)
 8005206:	edd3 7a01 	vldr	s15, [r3, #4]
 800520a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <calWallConrol+0x600>)
 8005210:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005214:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <calWallConrol+0x600>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <calWallConrol+0x600>)
 800521a:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800521c:	4b34      	ldr	r3, [pc, #208]	; (80052f0 <calWallConrol+0x600>)
 800521e:	ed93 7a00 	vldr	s14, [r3]
 8005222:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005226:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800522a:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <calWallConrol+0x600>)
 800522c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005230:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005234:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800523c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8005240:	2000      	movs	r0, #0
 8005242:	f001 fef3 	bl	800702c <pl_yellow_LED_count>
			break;
 8005246:	f001 b862 	b.w	800630e <calWallConrol+0x161e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 800524a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800524e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80052ec <calWallConrol+0x5fc>
 8005252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005256:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800525a:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 800525e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005262:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <calWallConrol+0x600>)
 8005268:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800526c:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <calWallConrol+0x600>)
 800526e:	ed93 7a00 	vldr	s14, [r3]
 8005272:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <calWallConrol+0x600>)
 8005274:	edd3 7a01 	vldr	s15, [r3, #4]
 8005278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800527c:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <calWallConrol+0x600>)
 800527e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005282:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <calWallConrol+0x600>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <calWallConrol+0x600>)
 8005288:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800528a:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <calWallConrol+0x600>)
 800528c:	ed93 7a00 	vldr	s14, [r3]
 8005290:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005294:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005298:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <calWallConrol+0x600>)
 800529a:	edd3 6a02 	vldr	s13, [r3, #8]
 800529e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80052a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80052a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052aa:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 80052ae:	2080      	movs	r0, #128	; 0x80
 80052b0:	f001 febc 	bl	800702c <pl_yellow_LED_count>
			break;
 80052b4:	f001 b82b 	b.w	800630e <calWallConrol+0x161e>
 80052b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80052bc:	3f50624d 	.word	0x3f50624d
 80052c0:	66666666 	.word	0x66666666
 80052c4:	3fe66666 	.word	0x3fe66666
 80052c8:	200002b8 	.word	0x200002b8
 80052cc:	20000448 	.word	0x20000448
 80052d0:	20000593 	.word	0x20000593
 80052d4:	2000059c 	.word	0x2000059c
 80052d8:	200005a0 	.word	0x200005a0
 80052dc:	20000597 	.word	0x20000597
 80052e0:	200004d8 	.word	0x200004d8
 80052e4:	420c0000 	.word	0x420c0000
 80052e8:	20000598 	.word	0x20000598
 80052ec:	44d2a000 	.word	0x44d2a000
 80052f0:	2000056c 	.word	0x2000056c
 80052f4:	44b56000 	.word	0x44b56000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80052f8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80052fc:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80052f4 <calWallConrol+0x604>
 8005300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005304:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005308:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800530c:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005310:	4ba9      	ldr	r3, [pc, #676]	; (80055b8 <calWallConrol+0x8c8>)
 8005312:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005316:	4ba8      	ldr	r3, [pc, #672]	; (80055b8 <calWallConrol+0x8c8>)
 8005318:	ed93 7a00 	vldr	s14, [r3]
 800531c:	4ba6      	ldr	r3, [pc, #664]	; (80055b8 <calWallConrol+0x8c8>)
 800531e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005326:	4ba4      	ldr	r3, [pc, #656]	; (80055b8 <calWallConrol+0x8c8>)
 8005328:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800532c:	4ba2      	ldr	r3, [pc, #648]	; (80055b8 <calWallConrol+0x8c8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4aa1      	ldr	r2, [pc, #644]	; (80055b8 <calWallConrol+0x8c8>)
 8005332:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005334:	4ba0      	ldr	r3, [pc, #640]	; (80055b8 <calWallConrol+0x8c8>)
 8005336:	ed93 7a00 	vldr	s14, [r3]
 800533a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800533e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005342:	4b9d      	ldr	r3, [pc, #628]	; (80055b8 <calWallConrol+0x8c8>)
 8005344:	edd3 6a02 	vldr	s13, [r3, #8]
 8005348:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800534c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005354:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 8005358:	2001      	movs	r0, #1
 800535a:	f001 fe67 	bl	800702c <pl_yellow_LED_count>
			break;
 800535e:	f000 bfd6 	b.w	800630e <calWallConrol+0x161e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005362:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005366:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80055bc <calWallConrol+0x8cc>
 800536a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800536e:	eef1 6a67 	vneg.f32	s13, s15
 8005372:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 800537a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800537e:	eddf 6a90 	vldr	s13, [pc, #576]	; 80055c0 <calWallConrol+0x8d0>
 8005382:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 8005386:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800538a:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 800538e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 8005392:	4b89      	ldr	r3, [pc, #548]	; (80055b8 <calWallConrol+0x8c8>)
 8005394:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005398:	4b87      	ldr	r3, [pc, #540]	; (80055b8 <calWallConrol+0x8c8>)
 800539a:	ed93 7a00 	vldr	s14, [r3]
 800539e:	4b86      	ldr	r3, [pc, #536]	; (80055b8 <calWallConrol+0x8c8>)
 80053a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80053a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053a8:	4b83      	ldr	r3, [pc, #524]	; (80055b8 <calWallConrol+0x8c8>)
 80053aa:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80053ae:	4b82      	ldr	r3, [pc, #520]	; (80055b8 <calWallConrol+0x8c8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a81      	ldr	r2, [pc, #516]	; (80055b8 <calWallConrol+0x8c8>)
 80053b4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80053b6:	4b80      	ldr	r3, [pc, #512]	; (80055b8 <calWallConrol+0x8c8>)
 80053b8:	ed93 7a00 	vldr	s14, [r3]
 80053bc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053c0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80053c4:	4b7c      	ldr	r3, [pc, #496]	; (80055b8 <calWallConrol+0x8c8>)
 80053c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80053ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80053ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80053d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 80053da:	2081      	movs	r0, #129	; 0x81
 80053dc:	f001 fe26 	bl	800702c <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 80053e0:	4b78      	ldr	r3, [pc, #480]	; (80055c4 <calWallConrol+0x8d4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fb f8c5 	bl	8000574 <__aeabi_i2d>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	603a      	str	r2, [r7, #0]
 80053f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	607b      	str	r3, [r7, #4]
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	4b73      	ldr	r3, [pc, #460]	; (80055c8 <calWallConrol+0x8d8>)
 80053fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005400:	f7fb fb94 	bl	8000b2c <__aeabi_dcmplt>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01a      	beq.n	8005440 <calWallConrol+0x750>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 800540a:	4b6e      	ldr	r3, [pc, #440]	; (80055c4 <calWallConrol+0x8d4>)
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	4618      	mov	r0, r3
 8005410:	f7fb f8b0 	bl	8000574 <__aeabi_i2d>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4692      	mov	sl, r2
 800541a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	4b69      	ldr	r3, [pc, #420]	; (80055c8 <calWallConrol+0x8d8>)
 8005424:	4650      	mov	r0, sl
 8005426:	4659      	mov	r1, fp
 8005428:	f7fb fb80 	bl	8000b2c <__aeabi_dcmplt>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <calWallConrol+0x750>
				StabilityCount_reset++;
 8005432:	4b66      	ldr	r3, [pc, #408]	; (80055cc <calWallConrol+0x8dc>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	b2da      	uxtb	r2, r3
 800543a:	4b64      	ldr	r3, [pc, #400]	; (80055cc <calWallConrol+0x8dc>)
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e002      	b.n	8005446 <calWallConrol+0x756>
			} else {
				StabilityCount_reset = 0;
 8005440:	4b62      	ldr	r3, [pc, #392]	; (80055cc <calWallConrol+0x8dc>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 8005446:	4b61      	ldr	r3, [pc, #388]	; (80055cc <calWallConrol+0x8dc>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b18      	cmp	r3, #24
 800544c:	f240 875e 	bls.w	800630c <calWallConrol+0x161c>
				Gyro.sigma_error = 0;
 8005450:	4b5f      	ldr	r3, [pc, #380]	; (80055d0 <calWallConrol+0x8e0>)
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005458:	4b5c      	ldr	r3, [pc, #368]	; (80055cc <calWallConrol+0x8dc>)
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800545e:	f000 bf55 	b.w	800630c <calWallConrol+0x161c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005462:	4b5c      	ldr	r3, [pc, #368]	; (80055d4 <calWallConrol+0x8e4>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	f000 8751 	beq.w	800630e <calWallConrol+0x161e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 800546c:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <calWallConrol+0x8e4>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b03      	cmp	r3, #3
 8005472:	f040 874c 	bne.w	800630e <calWallConrol+0x161e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 2000) {
 8005476:	4b58      	ldr	r3, [pc, #352]	; (80055d8 <calWallConrol+0x8e8>)
 8005478:	edd3 7a00 	vldr	s15, [r3]
 800547c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80055dc <calWallConrol+0x8ec>
 8005480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005488:	dd05      	ble.n	8005496 <calWallConrol+0x7a6>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 2000;
 800548a:	4b55      	ldr	r3, [pc, #340]	; (80055e0 <calWallConrol+0x8f0>)
 800548c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 2000;
 8005490:	4b54      	ldr	r3, [pc, #336]	; (80055e4 <calWallConrol+0x8f4>)
 8005492:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005494:	e024      	b.n	80054e0 <calWallConrol+0x7f0>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 8005496:	4b50      	ldr	r3, [pc, #320]	; (80055d8 <calWallConrol+0x8e8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fb f87c 	bl	8000598 <__aeabi_f2d>
 80054a0:	a341      	add	r3, pc, #260	; (adr r3, 80055a8 <calWallConrol+0x8b8>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fb f8cf 	bl	8000648 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fb fba1 	bl	8000bf8 <__aeabi_d2f>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 80054bc:	4b46      	ldr	r3, [pc, #280]	; (80055d8 <calWallConrol+0x8e8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb f869 	bl	8000598 <__aeabi_f2d>
 80054c6:	a33a      	add	r3, pc, #232	; (adr r3, 80055b0 <calWallConrol+0x8c0>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f7fb f8bc 	bl	8000648 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	f7fb fb8e 	bl	8000bf8 <__aeabi_d2f>
 80054dc:	4603      	mov	r3, r0
 80054de:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 80054e0:	4b41      	ldr	r3, [pc, #260]	; (80055e8 <calWallConrol+0x8f8>)
 80054e2:	edd3 7a00 	vldr	s15, [r3]
 80054e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	dd12      	ble.n	800551a <calWallConrol+0x82a>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <calWallConrol+0x8f8>)
 80054f6:	edd3 7a00 	vldr	s15, [r3]
 80054fa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80054fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005506:	d808      	bhi.n	800551a <calWallConrol+0x82a>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005508:	4b38      	ldr	r3, [pc, #224]	; (80055ec <calWallConrol+0x8fc>)
 800550a:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 800550c:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <calWallConrol+0x900>)
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005510:	4b38      	ldr	r3, [pc, #224]	; (80055f4 <calWallConrol+0x904>)
 8005512:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005514:	4b38      	ldr	r3, [pc, #224]	; (80055f8 <calWallConrol+0x908>)
 8005516:	657b      	str	r3, [r7, #84]	; 0x54
 8005518:	e0a5      	b.n	8005666 <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 800551a:	4b33      	ldr	r3, [pc, #204]	; (80055e8 <calWallConrol+0x8f8>)
 800551c:	edd3 7a00 	vldr	s15, [r3]
 8005520:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80055fc <calWallConrol+0x90c>
 8005524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552c:	dd12      	ble.n	8005554 <calWallConrol+0x864>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 800552e:	4b2e      	ldr	r3, [pc, #184]	; (80055e8 <calWallConrol+0x8f8>)
 8005530:	edd3 7a00 	vldr	s15, [r3]
 8005534:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005600 <calWallConrol+0x910>
 8005538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	d808      	bhi.n	8005554 <calWallConrol+0x864>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005542:	4b30      	ldr	r3, [pc, #192]	; (8005604 <calWallConrol+0x914>)
 8005544:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <calWallConrol+0x918>)
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 800554a:	4b30      	ldr	r3, [pc, #192]	; (800560c <calWallConrol+0x91c>)
 800554c:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 800554e:	4b30      	ldr	r3, [pc, #192]	; (8005610 <calWallConrol+0x920>)
 8005550:	657b      	str	r3, [r7, #84]	; 0x54
 8005552:	e088      	b.n	8005666 <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005554:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <calWallConrol+0x8f8>)
 8005556:	edd3 7a00 	vldr	s15, [r3]
 800555a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005614 <calWallConrol+0x924>
 800555e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	dd12      	ble.n	800558e <calWallConrol+0x89e>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005568:	4b1f      	ldr	r3, [pc, #124]	; (80055e8 <calWallConrol+0x8f8>)
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005618 <calWallConrol+0x928>
 8005572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557a:	d808      	bhi.n	800558e <calWallConrol+0x89e>
			coefficientR[0] = COEFFICIENT_R2_0;
 800557c:	4b27      	ldr	r3, [pc, #156]	; (800561c <calWallConrol+0x92c>)
 800557e:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <calWallConrol+0x930>)
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005584:	4b27      	ldr	r3, [pc, #156]	; (8005624 <calWallConrol+0x934>)
 8005586:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005588:	4b27      	ldr	r3, [pc, #156]	; (8005628 <calWallConrol+0x938>)
 800558a:	657b      	str	r3, [r7, #84]	; 0x54
 800558c:	e06b      	b.n	8005666 <calWallConrol+0x976>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 800558e:	4b27      	ldr	r3, [pc, #156]	; (800562c <calWallConrol+0x93c>)
 8005590:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005594:	2b5a      	cmp	r3, #90	; 0x5a
 8005596:	dd4d      	ble.n	8005634 <calWallConrol+0x944>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005598:	4b25      	ldr	r3, [pc, #148]	; (8005630 <calWallConrol+0x940>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	f043 0302 	orr.w	r3, r3, #2
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	4b23      	ldr	r3, [pc, #140]	; (8005630 <calWallConrol+0x940>)
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	e04c      	b.n	8005642 <calWallConrol+0x952>
 80055a8:	66666666 	.word	0x66666666
 80055ac:	3fee6666 	.word	0x3fee6666
 80055b0:	47ae147b 	.word	0x47ae147b
 80055b4:	bfb47ae1 	.word	0xbfb47ae1
 80055b8:	2000056c 	.word	0x2000056c
 80055bc:	44d2a000 	.word	0x44d2a000
 80055c0:	44b56000 	.word	0x44b56000
 80055c4:	20000448 	.word	0x20000448
 80055c8:	403e0000 	.word	0x403e0000
 80055cc:	20000595 	.word	0x20000595
 80055d0:	20000544 	.word	0x20000544
 80055d4:	20000590 	.word	0x20000590
 80055d8:	200004d8 	.word	0x200004d8
 80055dc:	44fa0000 	.word	0x44fa0000
 80055e0:	44ed8000 	.word	0x44ed8000
 80055e4:	c3200000 	.word	0xc3200000
 80055e8:	200005dc 	.word	0x200005dc
 80055ec:	4414c13c 	.word	0x4414c13c
 80055f0:	421e1fdd 	.word	0x421e1fdd
 80055f4:	beb05045 	.word	0xbeb05045
 80055f8:	3e051eb8 	.word	0x3e051eb8
 80055fc:	420c0000 	.word	0x420c0000
 8005600:	42700000 	.word	0x42700000
 8005604:	45b20ce1 	.word	0x45b20ce1
 8005608:	c393746d 	.word	0xc393746d
 800560c:	40afa404 	.word	0x40afa404
 8005610:	bd0f0328 	.word	0xbd0f0328
 8005614:	42c80000 	.word	0x42c80000
 8005618:	42f00000 	.word	0x42f00000
 800561c:	46e1460a 	.word	0x46e1460a
 8005620:	c43ee954 	.word	0xc43ee954
 8005624:	40d673d9 	.word	0x40d673d9
 8005628:	bc9d4952 	.word	0xbc9d4952
 800562c:	200002b8 	.word	0x200002b8
 8005630:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005634:	4b79      	ldr	r3, [pc, #484]	; (800581c <calWallConrol+0xb2c>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f023 0302 	bic.w	r3, r3, #2
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4b77      	ldr	r3, [pc, #476]	; (800581c <calWallConrol+0xb2c>)
 8005640:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005642:	4b77      	ldr	r3, [pc, #476]	; (8005820 <calWallConrol+0xb30>)
 8005644:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005650:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8005666:	4b6f      	ldr	r3, [pc, #444]	; (8005824 <calWallConrol+0xb34>)
 8005668:	edd3 7a00 	vldr	s15, [r3]
 800566c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005678:	dd12      	ble.n	80056a0 <calWallConrol+0x9b0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 800567a:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <calWallConrol+0xb34>)
 800567c:	edd3 7a00 	vldr	s15, [r3]
 8005680:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	d808      	bhi.n	80056a0 <calWallConrol+0x9b0>
			coefficientL[0] = COEFFICIENT_L0_0;
 800568e:	4b66      	ldr	r3, [pc, #408]	; (8005828 <calWallConrol+0xb38>)
 8005690:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 8005692:	4b66      	ldr	r3, [pc, #408]	; (800582c <calWallConrol+0xb3c>)
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 8005696:	4b66      	ldr	r3, [pc, #408]	; (8005830 <calWallConrol+0xb40>)
 8005698:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 800569a:	4b66      	ldr	r3, [pc, #408]	; (8005834 <calWallConrol+0xb44>)
 800569c:	647b      	str	r3, [r7, #68]	; 0x44
 800569e:	e05d      	b.n	800575c <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80056a0:	4b60      	ldr	r3, [pc, #384]	; (8005824 <calWallConrol+0xb34>)
 80056a2:	edd3 7a00 	vldr	s15, [r3]
 80056a6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005838 <calWallConrol+0xb48>
 80056aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b2:	dd12      	ble.n	80056da <calWallConrol+0x9ea>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80056b4:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <calWallConrol+0xb34>)
 80056b6:	edd3 7a00 	vldr	s15, [r3]
 80056ba:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800583c <calWallConrol+0xb4c>
 80056be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c6:	d808      	bhi.n	80056da <calWallConrol+0x9ea>
			coefficientL[0] = COEFFICIENT_L1_0;
 80056c8:	4b5d      	ldr	r3, [pc, #372]	; (8005840 <calWallConrol+0xb50>)
 80056ca:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80056cc:	4b5d      	ldr	r3, [pc, #372]	; (8005844 <calWallConrol+0xb54>)
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 80056d0:	4b5d      	ldr	r3, [pc, #372]	; (8005848 <calWallConrol+0xb58>)
 80056d2:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 80056d4:	4b5d      	ldr	r3, [pc, #372]	; (800584c <calWallConrol+0xb5c>)
 80056d6:	647b      	str	r3, [r7, #68]	; 0x44
 80056d8:	e040      	b.n	800575c <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 80056da:	4b52      	ldr	r3, [pc, #328]	; (8005824 <calWallConrol+0xb34>)
 80056dc:	edd3 7a00 	vldr	s15, [r3]
 80056e0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005850 <calWallConrol+0xb60>
 80056e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ec:	dd12      	ble.n	8005714 <calWallConrol+0xa24>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 80056ee:	4b4d      	ldr	r3, [pc, #308]	; (8005824 <calWallConrol+0xb34>)
 80056f0:	edd3 7a00 	vldr	s15, [r3]
 80056f4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005854 <calWallConrol+0xb64>
 80056f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005700:	d808      	bhi.n	8005714 <calWallConrol+0xa24>
			coefficientL[0] = COEFFICIENT_L2_0;
 8005702:	4b55      	ldr	r3, [pc, #340]	; (8005858 <calWallConrol+0xb68>)
 8005704:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8005706:	4b55      	ldr	r3, [pc, #340]	; (800585c <calWallConrol+0xb6c>)
 8005708:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800570a:	4b55      	ldr	r3, [pc, #340]	; (8005860 <calWallConrol+0xb70>)
 800570c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 800570e:	4b55      	ldr	r3, [pc, #340]	; (8005864 <calWallConrol+0xb74>)
 8005710:	647b      	str	r3, [r7, #68]	; 0x44
 8005712:	e023      	b.n	800575c <calWallConrol+0xa6c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <calWallConrol+0xb30>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b5a      	cmp	r3, #90	; 0x5a
 800571a:	dd07      	ble.n	800572c <calWallConrol+0xa3c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800571c:	4b3f      	ldr	r3, [pc, #252]	; (800581c <calWallConrol+0xb2c>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	b2da      	uxtb	r2, r3
 8005726:	4b3d      	ldr	r3, [pc, #244]	; (800581c <calWallConrol+0xb2c>)
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e006      	b.n	800573a <calWallConrol+0xa4a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800572c:	4b3b      	ldr	r3, [pc, #236]	; (800581c <calWallConrol+0xb2c>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b39      	ldr	r3, [pc, #228]	; (800581c <calWallConrol+0xb2c>)
 8005738:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 800573a:	4b39      	ldr	r3, [pc, #228]	; (8005820 <calWallConrol+0xb30>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005746:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800575c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005760:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005764:	4b40      	ldr	r3, [pc, #256]	; (8005868 <calWallConrol+0xb78>)
 8005766:	edd3 7a00 	vldr	s15, [r3]
 800576a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800576e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8005772:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8005776:	4b3c      	ldr	r3, [pc, #240]	; (8005868 <calWallConrol+0xb78>)
 8005778:	edd3 7a00 	vldr	s15, [r3]
 800577c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <calWallConrol+0xb78>)
 8005782:	edd3 7a00 	vldr	s15, [r3]
 8005786:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800578a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 800578e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005792:	4b35      	ldr	r3, [pc, #212]	; (8005868 <calWallConrol+0xb78>)
 8005794:	edd3 7a00 	vldr	s15, [r3]
 8005798:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 800579c:	4b32      	ldr	r3, [pc, #200]	; (8005868 <calWallConrol+0xb78>)
 800579e:	edd3 7a00 	vldr	s15, [r3]
 80057a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80057a6:	4b30      	ldr	r3, [pc, #192]	; (8005868 <calWallConrol+0xb78>)
 80057a8:	edd3 7a00 	vldr	s15, [r3]
 80057ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80057b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80057b8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80057bc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80057c0:	4b18      	ldr	r3, [pc, #96]	; (8005824 <calWallConrol+0xb34>)
 80057c2:	edd3 7a00 	vldr	s15, [r3]
 80057c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ca:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80057ce:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80057d2:	4b14      	ldr	r3, [pc, #80]	; (8005824 <calWallConrol+0xb34>)
 80057d4:	edd3 7a00 	vldr	s15, [r3]
 80057d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80057dc:	4b11      	ldr	r3, [pc, #68]	; (8005824 <calWallConrol+0xb34>)
 80057de:	edd3 7a00 	vldr	s15, [r3]
 80057e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80057e6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 80057ea:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80057ee:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <calWallConrol+0xb34>)
 80057f0:	edd3 7a00 	vldr	s15, [r3]
 80057f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80057f8:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <calWallConrol+0xb34>)
 80057fa:	edd3 7a00 	vldr	s15, [r3]
 80057fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <calWallConrol+0xb34>)
 8005804:	edd3 7a00 	vldr	s15, [r3]
 8005808:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 800580c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005810:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8005814:	230b      	movs	r3, #11
 8005816:	67bb      	str	r3, [r7, #120]	; 0x78
 8005818:	e041      	b.n	800589e <calWallConrol+0xbae>
 800581a:	bf00      	nop
 800581c:	20000593 	.word	0x20000593
 8005820:	200002b8 	.word	0x200002b8
 8005824:	200005e0 	.word	0x200005e0
 8005828:	4423732b 	.word	0x4423732b
 800582c:	421079e6 	.word	0x421079e6
 8005830:	bdf88e7f 	.word	0xbdf88e7f
 8005834:	3e11c34f 	.word	0x3e11c34f
 8005838:	420c0000 	.word	0x420c0000
 800583c:	42700000 	.word	0x42700000
 8005840:	45e16e07 	.word	0x45e16e07
 8005844:	c39f206f 	.word	0xc39f206f
 8005848:	40a20d2f 	.word	0x40a20d2f
 800584c:	bce5a3f5 	.word	0xbce5a3f5
 8005850:	42c80000 	.word	0x42c80000
 8005854:	42f00000 	.word	0x42f00000
 8005858:	459f8cbb 	.word	0x459f8cbb
 800585c:	c2f1ade0 	.word	0xc2f1ade0
 8005860:	3f6ae698 	.word	0x3f6ae698
 8005864:	bafba882 	.word	0xbafba882
 8005868:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 800586c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586e:	3b01      	subs	r3, #1
 8005870:	4a9c      	ldr	r2, [pc, #624]	; (8005ae4 <calWallConrol+0xdf4>)
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	499a      	ldr	r1, [pc, #616]	; (8005ae4 <calWallConrol+0xdf4>)
 800587a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8005882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005884:	3b01      	subs	r3, #1
 8005886:	4a98      	ldr	r2, [pc, #608]	; (8005ae8 <calWallConrol+0xdf8>)
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4996      	ldr	r1, [pc, #600]	; (8005ae8 <calWallConrol+0xdf8>)
 8005890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589a:	3b01      	subs	r3, #1
 800589c:	67bb      	str	r3, [r7, #120]	; 0x78
 800589e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	dce3      	bgt.n	800586c <calWallConrol+0xb7c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 80058a4:	4a8f      	ldr	r2, [pc, #572]	; (8005ae4 <calWallConrol+0xdf4>)
 80058a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a8:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 80058aa:	4a8f      	ldr	r2, [pc, #572]	; (8005ae8 <calWallConrol+0xdf8>)
 80058ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058ae:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 80058b0:	4b8c      	ldr	r3, [pc, #560]	; (8005ae4 <calWallConrol+0xdf4>)
 80058b2:	ed93 7a00 	vldr	s14, [r3]
 80058b6:	4b8b      	ldr	r3, [pc, #556]	; (8005ae4 <calWallConrol+0xdf4>)
 80058b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80058bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058c0:	4b8a      	ldr	r3, [pc, #552]	; (8005aec <calWallConrol+0xdfc>)
 80058c2:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 80058c6:	4b88      	ldr	r3, [pc, #544]	; (8005ae8 <calWallConrol+0xdf8>)
 80058c8:	ed93 7a00 	vldr	s14, [r3]
 80058cc:	4b86      	ldr	r3, [pc, #536]	; (8005ae8 <calWallConrol+0xdf8>)
 80058ce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80058d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058d6:	4b86      	ldr	r3, [pc, #536]	; (8005af0 <calWallConrol+0xe00>)
 80058d8:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 80058dc:	4b85      	ldr	r3, [pc, #532]	; (8005af4 <calWallConrol+0xe04>)
 80058de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80058e2:	2b5a      	cmp	r3, #90	; 0x5a
 80058e4:	dd1a      	ble.n	800591c <calWallConrol+0xc2c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 80058e6:	4b84      	ldr	r3, [pc, #528]	; (8005af8 <calWallConrol+0xe08>)
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058f2:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <calWallConrol+0xdfc>)
 80058f4:	edd3 7a00 	vldr	s15, [r3]
 80058f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058fc:	eef0 7ae7 	vabs.f32	s15, s15
 8005900:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005afc <calWallConrol+0xe0c>
 8005904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590c:	d506      	bpl.n	800591c <calWallConrol+0xc2c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 800590e:	4b7c      	ldr	r3, [pc, #496]	; (8005b00 <calWallConrol+0xe10>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f043 0302 	orr.w	r3, r3, #2
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4b79      	ldr	r3, [pc, #484]	; (8005b00 <calWallConrol+0xe10>)
 800591a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 800591c:	4b75      	ldr	r3, [pc, #468]	; (8005af4 <calWallConrol+0xe04>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b5a      	cmp	r3, #90	; 0x5a
 8005922:	dd1a      	ble.n	800595a <calWallConrol+0xc6a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005924:	4b74      	ldr	r3, [pc, #464]	; (8005af8 <calWallConrol+0xe08>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005930:	4b6f      	ldr	r3, [pc, #444]	; (8005af0 <calWallConrol+0xe00>)
 8005932:	edd3 7a00 	vldr	s15, [r3]
 8005936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800593a:	eef0 7ae7 	vabs.f32	s15, s15
 800593e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005afc <calWallConrol+0xe0c>
 8005942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594a:	d506      	bpl.n	800595a <calWallConrol+0xc6a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800594c:	4b6c      	ldr	r3, [pc, #432]	; (8005b00 <calWallConrol+0xe10>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	b2da      	uxtb	r2, r3
 8005956:	4b6a      	ldr	r3, [pc, #424]	; (8005b00 <calWallConrol+0xe10>)
 8005958:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 800595a:	4b66      	ldr	r3, [pc, #408]	; (8005af4 <calWallConrol+0xe04>)
 800595c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005960:	2b59      	cmp	r3, #89	; 0x59
 8005962:	dd13      	ble.n	800598c <calWallConrol+0xc9c>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005964:	4b64      	ldr	r3, [pc, #400]	; (8005af8 <calWallConrol+0xe08>)
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005970:	4b5e      	ldr	r3, [pc, #376]	; (8005aec <calWallConrol+0xdfc>)
 8005972:	edd3 7a00 	vldr	s15, [r3]
 8005976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800597a:	eef0 7ae7 	vabs.f32	s15, s15
 800597e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005afc <calWallConrol+0xe0c>
 8005982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598a:	dd06      	ble.n	800599a <calWallConrol+0xcaa>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 800598c:	4b5c      	ldr	r3, [pc, #368]	; (8005b00 <calWallConrol+0xe10>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f023 0302 	bic.w	r3, r3, #2
 8005994:	b2da      	uxtb	r2, r3
 8005996:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <calWallConrol+0xe10>)
 8005998:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 800599a:	4b56      	ldr	r3, [pc, #344]	; (8005af4 <calWallConrol+0xe04>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b59      	cmp	r3, #89	; 0x59
 80059a0:	dd13      	ble.n	80059ca <calWallConrol+0xcda>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80059a2:	4b55      	ldr	r3, [pc, #340]	; (8005af8 <calWallConrol+0xe08>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059ae:	4b50      	ldr	r3, [pc, #320]	; (8005af0 <calWallConrol+0xe00>)
 80059b0:	edd3 7a00 	vldr	s15, [r3]
 80059b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059b8:	eef0 7ae7 	vabs.f32	s15, s15
 80059bc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005afc <calWallConrol+0xe0c>
 80059c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c8:	dd06      	ble.n	80059d8 <calWallConrol+0xce8>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80059ca:	4b4d      	ldr	r3, [pc, #308]	; (8005b00 <calWallConrol+0xe10>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <calWallConrol+0xe10>)
 80059d6:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 80059d8:	4b49      	ldr	r3, [pc, #292]	; (8005b00 <calWallConrol+0xe10>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	f200 813d 	bhi.w	8005c5c <calWallConrol+0xf6c>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <calWallConrol+0xcf8>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	08005a4d 	.word	0x08005a4d
 80059f0:	08005b11 	.word	0x08005b11
 80059f4:	08005ba7 	.word	0x08005ba7
		case 0:			//両壁なし
			PID_wall = 0;
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005a00:	2000      	movs	r0, #0
 8005a02:	f001 fa91 	bl	8006f28 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005a06:	2000      	movs	r0, #0
 8005a08:	f001 fac4 	bl	8006f94 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005a0c:	4b39      	ldr	r3, [pc, #228]	; (8005af4 <calWallConrol+0xe04>)
 8005a0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a1a:	4b3a      	ldr	r3, [pc, #232]	; (8005b04 <calWallConrol+0xe14>)
 8005a1c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005a20:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <calWallConrol+0xe04>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	ee07 3a90 	vmov	s15, r3
 8005a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2c:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <calWallConrol+0xe18>)
 8005a2e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8005a32:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <calWallConrol+0xe1c>)
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005a3a:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <calWallConrol+0xe1c>)
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8005a42:	4b32      	ldr	r3, [pc, #200]	; (8005b0c <calWallConrol+0xe1c>)
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	605a      	str	r2, [r3, #4]
			break;
 8005a4a:	e107      	b.n	8005c5c <calWallConrol+0xf6c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f001 fa6b 	bl	8006f28 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005a52:	2001      	movs	r0, #1
 8005a54:	f001 fa9e 	bl	8006f94 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005a58:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <calWallConrol+0xe04>)
 8005a5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a66:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <calWallConrol+0xe14>)
 8005a68:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005a6c:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <calWallConrol+0xe18>)
 8005a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a70:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <calWallConrol+0xe04>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a7e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a86:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005a8a:	4b1a      	ldr	r3, [pc, #104]	; (8005af4 <calWallConrol+0xe04>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005a9a:	4b1c      	ldr	r3, [pc, #112]	; (8005b0c <calWallConrol+0xe1c>)
 8005a9c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005aa0:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <calWallConrol+0xe1c>)
 8005aa2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005aa6:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <calWallConrol+0xe1c>)
 8005aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005aac:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005ab0:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <calWallConrol+0xe1c>)
 8005ab2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <calWallConrol+0xe1c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <calWallConrol+0xe1c>)
 8005abc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <calWallConrol+0xe1c>)
 8005ac0:	ed93 7a00 	vldr	s14, [r3]
 8005ac4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <calWallConrol+0xe1c>)
 8005ace:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ad2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ade:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005ae2:	e0bb      	b.n	8005c5c <calWallConrol+0xf6c>
 8005ae4:	20000608 	.word	0x20000608
 8005ae8:	20000638 	.word	0x20000638
 8005aec:	200006c8 	.word	0x200006c8
 8005af0:	200006cc 	.word	0x200006cc
 8005af4:	200002b8 	.word	0x200002b8
 8005af8:	20000448 	.word	0x20000448
 8005afc:	42a00000 	.word	0x42a00000
 8005b00:	20000593 	.word	0x20000593
 8005b04:	200005ac 	.word	0x200005ac
 8005b08:	200005b0 	.word	0x200005b0
 8005b0c:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005b10:	2001      	movs	r0, #1
 8005b12:	f001 fa09 	bl	8006f28 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005b16:	2000      	movs	r0, #0
 8005b18:	f001 fa3c 	bl	8006f94 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005b1c:	4aa4      	ldr	r2, [pc, #656]	; (8005db0 <calWallConrol+0x10c0>)
 8005b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b20:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005b22:	4ba4      	ldr	r3, [pc, #656]	; (8005db4 <calWallConrol+0x10c4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b2e:	4ba2      	ldr	r3, [pc, #648]	; (8005db8 <calWallConrol+0x10c8>)
 8005b30:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005b34:	4b9f      	ldr	r3, [pc, #636]	; (8005db4 <calWallConrol+0x10c4>)
 8005b36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b42:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005b46:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005b4a:	4b9a      	ldr	r3, [pc, #616]	; (8005db4 <calWallConrol+0x10c4>)
 8005b4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005b5c:	4b97      	ldr	r3, [pc, #604]	; (8005dbc <calWallConrol+0x10cc>)
 8005b5e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005b62:	4b96      	ldr	r3, [pc, #600]	; (8005dbc <calWallConrol+0x10cc>)
 8005b64:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005b68:	4b94      	ldr	r3, [pc, #592]	; (8005dbc <calWallConrol+0x10cc>)
 8005b6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005b72:	4b92      	ldr	r3, [pc, #584]	; (8005dbc <calWallConrol+0x10cc>)
 8005b74:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005b78:	4b90      	ldr	r3, [pc, #576]	; (8005dbc <calWallConrol+0x10cc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a8f      	ldr	r2, [pc, #572]	; (8005dbc <calWallConrol+0x10cc>)
 8005b7e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005b80:	4b8e      	ldr	r3, [pc, #568]	; (8005dbc <calWallConrol+0x10cc>)
 8005b82:	ed93 7a00 	vldr	s14, [r3]
 8005b86:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005b8e:	4b8b      	ldr	r3, [pc, #556]	; (8005dbc <calWallConrol+0x10cc>)
 8005b90:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b94:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ba0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005ba4:	e05a      	b.n	8005c5c <calWallConrol+0xf6c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	f001 f9be 	bl	8006f28 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005bac:	2001      	movs	r0, #1
 8005bae:	f001 f9f1 	bl	8006f94 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005bb2:	4a7f      	ldr	r2, [pc, #508]	; (8005db0 <calWallConrol+0x10c0>)
 8005bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005bb8:	4a7f      	ldr	r2, [pc, #508]	; (8005db8 <calWallConrol+0x10c8>)
 8005bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bbc:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005bbe:	4b7d      	ldr	r3, [pc, #500]	; (8005db4 <calWallConrol+0x10c4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bd2:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005bd6:	4b77      	ldr	r3, [pc, #476]	; (8005db4 <calWallConrol+0x10c4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005be6:	4b73      	ldr	r3, [pc, #460]	; (8005db4 <calWallConrol+0x10c4>)
 8005be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005bf4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005bf8:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005bfc:	4b6d      	ldr	r3, [pc, #436]	; (8005db4 <calWallConrol+0x10c4>)
 8005bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005c0a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005c12:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <calWallConrol+0x10cc>)
 8005c14:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005c18:	4b68      	ldr	r3, [pc, #416]	; (8005dbc <calWallConrol+0x10cc>)
 8005c1a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005c1e:	4b67      	ldr	r3, [pc, #412]	; (8005dbc <calWallConrol+0x10cc>)
 8005c20:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c24:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005c28:	4b64      	ldr	r3, [pc, #400]	; (8005dbc <calWallConrol+0x10cc>)
 8005c2a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005c2e:	4b63      	ldr	r3, [pc, #396]	; (8005dbc <calWallConrol+0x10cc>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a62      	ldr	r2, [pc, #392]	; (8005dbc <calWallConrol+0x10cc>)
 8005c34:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005c36:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <calWallConrol+0x10cc>)
 8005c38:	ed93 7a00 	vldr	s14, [r3]
 8005c3c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c40:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005c44:	4b5d      	ldr	r3, [pc, #372]	; (8005dbc <calWallConrol+0x10cc>)
 8005c46:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c4a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c56:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005c5a:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005c5c:	4b58      	ldr	r3, [pc, #352]	; (8005dc0 <calWallConrol+0x10d0>)
 8005c5e:	edd3 7a00 	vldr	s15, [r3]
 8005c62:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005dc4 <calWallConrol+0x10d4>
 8005c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6e:	dd04      	ble.n	8005c7a <calWallConrol+0xf8a>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005c70:	4b55      	ldr	r3, [pc, #340]	; (8005dc8 <calWallConrol+0x10d8>)
 8005c72:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 8005c74:	4b55      	ldr	r3, [pc, #340]	; (8005dcc <calWallConrol+0x10dc>)
 8005c76:	673b      	str	r3, [r7, #112]	; 0x70
 8005c78:	e023      	b.n	8005cc2 <calWallConrol+0xfd2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005c7a:	4b51      	ldr	r3, [pc, #324]	; (8005dc0 <calWallConrol+0x10d0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fa fc8a 	bl	8000598 <__aeabi_f2d>
 8005c84:	a346      	add	r3, pc, #280	; (adr r3, 8005da0 <calWallConrol+0x10b0>)
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f7fa fcdd 	bl	8000648 <__aeabi_dmul>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4610      	mov	r0, r2
 8005c94:	4619      	mov	r1, r3
 8005c96:	f7fa ffaf 	bl	8000bf8 <__aeabi_d2f>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005c9e:	4b48      	ldr	r3, [pc, #288]	; (8005dc0 <calWallConrol+0x10d0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fa fc78 	bl	8000598 <__aeabi_f2d>
 8005ca8:	a33f      	add	r3, pc, #252	; (adr r3, 8005da8 <calWallConrol+0x10b8>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7fa fccb 	bl	8000648 <__aeabi_dmul>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	f7fa ff9d 	bl	8000bf8 <__aeabi_d2f>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005cc2:	4b43      	ldr	r3, [pc, #268]	; (8005dd0 <calWallConrol+0x10e0>)
 8005cc4:	edd3 7a00 	vldr	s15, [r3]
 8005cc8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd4:	dd12      	ble.n	8005cfc <calWallConrol+0x100c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005cd6:	4b3e      	ldr	r3, [pc, #248]	; (8005dd0 <calWallConrol+0x10e0>)
 8005cd8:	edd3 7a00 	vldr	s15, [r3]
 8005cdc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005dd4 <calWallConrol+0x10e4>
 8005ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce8:	d808      	bhi.n	8005cfc <calWallConrol+0x100c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005cea:	4b3b      	ldr	r3, [pc, #236]	; (8005dd8 <calWallConrol+0x10e8>)
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005cee:	4b3b      	ldr	r3, [pc, #236]	; (8005ddc <calWallConrol+0x10ec>)
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005cf2:	4b3b      	ldr	r3, [pc, #236]	; (8005de0 <calWallConrol+0x10f0>)
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005cf6:	4b3b      	ldr	r3, [pc, #236]	; (8005de4 <calWallConrol+0x10f4>)
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfa:	e025      	b.n	8005d48 <calWallConrol+0x1058>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005cfc:	4b2d      	ldr	r3, [pc, #180]	; (8005db4 <calWallConrol+0x10c4>)
 8005cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d02:	2b82      	cmp	r3, #130	; 0x82
 8005d04:	dd07      	ble.n	8005d16 <calWallConrol+0x1026>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005d06:	4b38      	ldr	r3, [pc, #224]	; (8005de8 <calWallConrol+0x10f8>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f043 0302 	orr.w	r3, r3, #2
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	4b35      	ldr	r3, [pc, #212]	; (8005de8 <calWallConrol+0x10f8>)
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	e006      	b.n	8005d24 <calWallConrol+0x1034>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005d16:	4b34      	ldr	r3, [pc, #208]	; (8005de8 <calWallConrol+0x10f8>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f023 0302 	bic.w	r3, r3, #2
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b31      	ldr	r3, [pc, #196]	; (8005de8 <calWallConrol+0x10f8>)
 8005d22:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005d24:	4b23      	ldr	r3, [pc, #140]	; (8005db4 <calWallConrol+0x10c4>)
 8005d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d32:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005d48:	4b28      	ldr	r3, [pc, #160]	; (8005dec <calWallConrol+0x10fc>)
 8005d4a:	edd3 7a00 	vldr	s15, [r3]
 8005d4e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d5a:	dd12      	ble.n	8005d82 <calWallConrol+0x1092>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <calWallConrol+0x10fc>)
 8005d5e:	edd3 7a00 	vldr	s15, [r3]
 8005d62:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005dd4 <calWallConrol+0x10e4>
 8005d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6e:	d808      	bhi.n	8005d82 <calWallConrol+0x1092>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005d70:	4b1f      	ldr	r3, [pc, #124]	; (8005df0 <calWallConrol+0x1100>)
 8005d72:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005d74:	4b1f      	ldr	r3, [pc, #124]	; (8005df4 <calWallConrol+0x1104>)
 8005d76:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005d78:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <calWallConrol+0x1108>)
 8005d7a:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005d7c:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <calWallConrol+0x110c>)
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	e056      	b.n	8005e30 <calWallConrol+0x1140>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005d82:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <calWallConrol+0x10c4>)
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	2b82      	cmp	r3, #130	; 0x82
 8005d88:	dd3a      	ble.n	8005e00 <calWallConrol+0x1110>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005d8a:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <calWallConrol+0x10f8>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <calWallConrol+0x10f8>)
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e039      	b.n	8005e0e <calWallConrol+0x111e>
 8005d9a:	bf00      	nop
 8005d9c:	f3af 8000 	nop.w
 8005da0:	9999999a 	.word	0x9999999a
 8005da4:	3fe99999 	.word	0x3fe99999
 8005da8:	47ae147b 	.word	0x47ae147b
 8005dac:	bfb47ae1 	.word	0xbfb47ae1
 8005db0:	200005ac 	.word	0x200005ac
 8005db4:	200002b8 	.word	0x200002b8
 8005db8:	200005b0 	.word	0x200005b0
 8005dbc:	20000578 	.word	0x20000578
 8005dc0:	200004d8 	.word	0x200004d8
 8005dc4:	44fa0000 	.word	0x44fa0000
 8005dc8:	44c80000 	.word	0x44c80000
 8005dcc:	c3200000 	.word	0xc3200000
 8005dd0:	200005dc 	.word	0x200005dc
 8005dd4:	42a00000 	.word	0x42a00000
 8005dd8:	438d4c33 	.word	0x438d4c33
 8005ddc:	bfa66ddb 	.word	0xbfa66ddb
 8005de0:	3d2e0737 	.word	0x3d2e0737
 8005de4:	39c521de 	.word	0x39c521de
 8005de8:	20000594 	.word	0x20000594
 8005dec:	200005e0 	.word	0x200005e0
 8005df0:	43774cf8 	.word	0x43774cf8
 8005df4:	3e27920b 	.word	0x3e27920b
 8005df8:	bd0ad094 	.word	0xbd0ad094
 8005dfc:	3a5f1fa4 	.word	0x3a5f1fa4
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005e00:	4bb5      	ldr	r3, [pc, #724]	; (80060d8 <calWallConrol+0x13e8>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	4bb3      	ldr	r3, [pc, #716]	; (80060d8 <calWallConrol+0x13e8>)
 8005e0c:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005e0e:	4bb3      	ldr	r3, [pc, #716]	; (80060dc <calWallConrol+0x13ec>)
 8005e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e1a:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005e30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005e34:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005e38:	4ba9      	ldr	r3, [pc, #676]	; (80060e0 <calWallConrol+0x13f0>)
 8005e3a:	edd3 7a00 	vldr	s15, [r3]
 8005e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e42:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005e46:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005e4a:	4ba5      	ldr	r3, [pc, #660]	; (80060e0 <calWallConrol+0x13f0>)
 8005e4c:	edd3 7a00 	vldr	s15, [r3]
 8005e50:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005e54:	4ba2      	ldr	r3, [pc, #648]	; (80060e0 <calWallConrol+0x13f0>)
 8005e56:	edd3 7a00 	vldr	s15, [r3]
 8005e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005e62:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e66:	4b9e      	ldr	r3, [pc, #632]	; (80060e0 <calWallConrol+0x13f0>)
 8005e68:	edd3 7a00 	vldr	s15, [r3]
 8005e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005e70:	4b9b      	ldr	r3, [pc, #620]	; (80060e0 <calWallConrol+0x13f0>)
 8005e72:	edd3 7a00 	vldr	s15, [r3]
 8005e76:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005e7a:	4b99      	ldr	r3, [pc, #612]	; (80060e0 <calWallConrol+0x13f0>)
 8005e7c:	edd3 7a00 	vldr	s15, [r3]
 8005e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e88:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005e8c:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005e90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e94:	4b93      	ldr	r3, [pc, #588]	; (80060e4 <calWallConrol+0x13f4>)
 8005e96:	edd3 7a00 	vldr	s15, [r3]
 8005e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005ea2:	edd7 6a08 	vldr	s13, [r7, #32]
 8005ea6:	4b8f      	ldr	r3, [pc, #572]	; (80060e4 <calWallConrol+0x13f4>)
 8005ea8:	edd3 7a00 	vldr	s15, [r3]
 8005eac:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005eb0:	4b8c      	ldr	r3, [pc, #560]	; (80060e4 <calWallConrol+0x13f4>)
 8005eb2:	edd3 7a00 	vldr	s15, [r3]
 8005eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005eba:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005ebe:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005ec2:	4b88      	ldr	r3, [pc, #544]	; (80060e4 <calWallConrol+0x13f4>)
 8005ec4:	edd3 7a00 	vldr	s15, [r3]
 8005ec8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005ecc:	4b85      	ldr	r3, [pc, #532]	; (80060e4 <calWallConrol+0x13f4>)
 8005ece:	edd3 7a00 	vldr	s15, [r3]
 8005ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005ed6:	4b83      	ldr	r3, [pc, #524]	; (80060e4 <calWallConrol+0x13f4>)
 8005ed8:	edd3 7a00 	vldr	s15, [r3]
 8005edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005ee8:	230b      	movs	r3, #11
 8005eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eec:	e018      	b.n	8005f20 <calWallConrol+0x1230>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	4a7d      	ldr	r2, [pc, #500]	; (80060e8 <calWallConrol+0x13f8>)
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	497b      	ldr	r1, [pc, #492]	; (80060e8 <calWallConrol+0x13f8>)
 8005efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f06:	3b01      	subs	r3, #1
 8005f08:	4a78      	ldr	r2, [pc, #480]	; (80060ec <calWallConrol+0x13fc>)
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4976      	ldr	r1, [pc, #472]	; (80060ec <calWallConrol+0x13fc>)
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dce3      	bgt.n	8005eee <calWallConrol+0x11fe>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005f26:	4a70      	ldr	r2, [pc, #448]	; (80060e8 <calWallConrol+0x13f8>)
 8005f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f2a:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005f2c:	4a6f      	ldr	r2, [pc, #444]	; (80060ec <calWallConrol+0x13fc>)
 8005f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f30:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005f32:	4b6d      	ldr	r3, [pc, #436]	; (80060e8 <calWallConrol+0x13f8>)
 8005f34:	ed93 7a00 	vldr	s14, [r3]
 8005f38:	4b6b      	ldr	r3, [pc, #428]	; (80060e8 <calWallConrol+0x13f8>)
 8005f3a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f42:	4b6b      	ldr	r3, [pc, #428]	; (80060f0 <calWallConrol+0x1400>)
 8005f44:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005f48:	4b68      	ldr	r3, [pc, #416]	; (80060ec <calWallConrol+0x13fc>)
 8005f4a:	ed93 7a00 	vldr	s14, [r3]
 8005f4e:	4b67      	ldr	r3, [pc, #412]	; (80060ec <calWallConrol+0x13fc>)
 8005f50:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f58:	4b66      	ldr	r3, [pc, #408]	; (80060f4 <calWallConrol+0x1404>)
 8005f5a:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005f5e:	4b5f      	ldr	r3, [pc, #380]	; (80060dc <calWallConrol+0x13ec>)
 8005f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f64:	2b82      	cmp	r3, #130	; 0x82
 8005f66:	dd1a      	ble.n	8005f9e <calWallConrol+0x12ae>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005f68:	4b63      	ldr	r3, [pc, #396]	; (80060f8 <calWallConrol+0x1408>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f74:	4b5e      	ldr	r3, [pc, #376]	; (80060f0 <calWallConrol+0x1400>)
 8005f76:	edd3 7a00 	vldr	s15, [r3]
 8005f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005f7e:	eef0 7ae7 	vabs.f32	s15, s15
 8005f82:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80060fc <calWallConrol+0x140c>
 8005f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8e:	d506      	bpl.n	8005f9e <calWallConrol+0x12ae>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005f90:	4b51      	ldr	r3, [pc, #324]	; (80060d8 <calWallConrol+0x13e8>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f043 0302 	orr.w	r3, r3, #2
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <calWallConrol+0x13e8>)
 8005f9c:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005f9e:	4b4f      	ldr	r3, [pc, #316]	; (80060dc <calWallConrol+0x13ec>)
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	2b82      	cmp	r3, #130	; 0x82
 8005fa4:	dd1a      	ble.n	8005fdc <calWallConrol+0x12ec>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005fa6:	4b54      	ldr	r3, [pc, #336]	; (80060f8 <calWallConrol+0x1408>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fb2:	4b50      	ldr	r3, [pc, #320]	; (80060f4 <calWallConrol+0x1404>)
 8005fb4:	edd3 7a00 	vldr	s15, [r3]
 8005fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005fbc:	eef0 7ae7 	vabs.f32	s15, s15
 8005fc0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80060fc <calWallConrol+0x140c>
 8005fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fcc:	d506      	bpl.n	8005fdc <calWallConrol+0x12ec>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005fce:	4b42      	ldr	r3, [pc, #264]	; (80060d8 <calWallConrol+0x13e8>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <calWallConrol+0x13e8>)
 8005fda:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005fdc:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <calWallConrol+0x13ec>)
 8005fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fe2:	2b81      	cmp	r3, #129	; 0x81
 8005fe4:	dd13      	ble.n	800600e <calWallConrol+0x131e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005fe6:	4b44      	ldr	r3, [pc, #272]	; (80060f8 <calWallConrol+0x1408>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ff2:	4b3f      	ldr	r3, [pc, #252]	; (80060f0 <calWallConrol+0x1400>)
 8005ff4:	edd3 7a00 	vldr	s15, [r3]
 8005ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005ffc:	eef0 7ae7 	vabs.f32	s15, s15
 8006000:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80060fc <calWallConrol+0x140c>
 8006004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600c:	dd06      	ble.n	800601c <calWallConrol+0x132c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 800600e:	4b32      	ldr	r3, [pc, #200]	; (80060d8 <calWallConrol+0x13e8>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f023 0302 	bic.w	r3, r3, #2
 8006016:	b2da      	uxtb	r2, r3
 8006018:	4b2f      	ldr	r3, [pc, #188]	; (80060d8 <calWallConrol+0x13e8>)
 800601a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 800601c:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <calWallConrol+0x13ec>)
 800601e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006020:	2b81      	cmp	r3, #129	; 0x81
 8006022:	dd13      	ble.n	800604c <calWallConrol+0x135c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8006024:	4b34      	ldr	r3, [pc, #208]	; (80060f8 <calWallConrol+0x1408>)
 8006026:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8006028:	ee07 3a90 	vmov	s15, r3
 800602c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006030:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <calWallConrol+0x1404>)
 8006032:	edd3 7a00 	vldr	s15, [r3]
 8006036:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 800603a:	eef0 7ae7 	vabs.f32	s15, s15
 800603e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80060fc <calWallConrol+0x140c>
 8006042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604a:	dd06      	ble.n	800605a <calWallConrol+0x136a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 800604c:	4b22      	ldr	r3, [pc, #136]	; (80060d8 <calWallConrol+0x13e8>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	b2da      	uxtb	r2, r3
 8006056:	4b20      	ldr	r3, [pc, #128]	; (80060d8 <calWallConrol+0x13e8>)
 8006058:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 800605a:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <calWallConrol+0x13e8>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b03      	cmp	r3, #3
 8006060:	f200 8155 	bhi.w	800630e <calWallConrol+0x161e>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <calWallConrol+0x137c>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	0800607d 	.word	0x0800607d
 8006070:	08006111 	.word	0x08006111
 8006074:	080061b1 	.word	0x080061b1
 8006078:	0800624f 	.word	0x0800624f
		case 0:			//両壁なし
			PID_wall += 0;
 800607c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006080:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006100 <calWallConrol+0x1410>
 8006084:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006088:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 800608c:	2000      	movs	r0, #0
 800608e:	f000 ff5d 	bl	8006f4c <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006092:	2000      	movs	r0, #0
 8006094:	f000 ff6c 	bl	8006f70 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006098:	4b10      	ldr	r3, [pc, #64]	; (80060dc <calWallConrol+0x13ec>)
 800609a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a6:	4b17      	ldr	r3, [pc, #92]	; (8006104 <calWallConrol+0x1414>)
 80060a8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <calWallConrol+0x13ec>)
 80060ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b8:	4b13      	ldr	r3, [pc, #76]	; (8006108 <calWallConrol+0x1418>)
 80060ba:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <calWallConrol+0x141c>)
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 80060c6:	4b11      	ldr	r3, [pc, #68]	; (800610c <calWallConrol+0x141c>)
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <calWallConrol+0x141c>)
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
			break;
 80060d6:	e11a      	b.n	800630e <calWallConrol+0x161e>
 80060d8:	20000594 	.word	0x20000594
 80060dc:	200002b8 	.word	0x200002b8
 80060e0:	200005dc 	.word	0x200005dc
 80060e4:	200005e0 	.word	0x200005e0
 80060e8:	20000668 	.word	0x20000668
 80060ec:	20000698 	.word	0x20000698
 80060f0:	200006d0 	.word	0x200006d0
 80060f4:	200006d4 	.word	0x200006d4
 80060f8:	20000448 	.word	0x20000448
 80060fc:	42a00000 	.word	0x42a00000
 8006100:	00000000 	.word	0x00000000
 8006104:	200005a4 	.word	0x200005a4
 8006108:	200005a8 	.word	0x200005a8
 800610c:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8006110:	2000      	movs	r0, #0
 8006112:	f000 ff1b 	bl	8006f4c <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006116:	2001      	movs	r0, #1
 8006118:	f000 ff2a 	bl	8006f70 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 800611c:	4b87      	ldr	r3, [pc, #540]	; (800633c <calWallConrol+0x164c>)
 800611e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800612a:	4b85      	ldr	r3, [pc, #532]	; (8006340 <calWallConrol+0x1650>)
 800612c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006130:	4a84      	ldr	r2, [pc, #528]	; (8006344 <calWallConrol+0x1654>)
 8006132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006134:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8006136:	4b81      	ldr	r3, [pc, #516]	; (800633c <calWallConrol+0x164c>)
 8006138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006142:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800614a:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 800614e:	4b7b      	ldr	r3, [pc, #492]	; (800633c <calWallConrol+0x164c>)
 8006150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800615a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 800615e:	4b7a      	ldr	r3, [pc, #488]	; (8006348 <calWallConrol+0x1658>)
 8006160:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006164:	4b78      	ldr	r3, [pc, #480]	; (8006348 <calWallConrol+0x1658>)
 8006166:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800616a:	4b77      	ldr	r3, [pc, #476]	; (8006348 <calWallConrol+0x1658>)
 800616c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006170:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006174:	4b74      	ldr	r3, [pc, #464]	; (8006348 <calWallConrol+0x1658>)
 8006176:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800617a:	4b73      	ldr	r3, [pc, #460]	; (8006348 <calWallConrol+0x1658>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a72      	ldr	r2, [pc, #456]	; (8006348 <calWallConrol+0x1658>)
 8006180:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006182:	4b71      	ldr	r3, [pc, #452]	; (8006348 <calWallConrol+0x1658>)
 8006184:	ed93 7a00 	vldr	s14, [r3]
 8006188:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800618c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006190:	4b6d      	ldr	r3, [pc, #436]	; (8006348 <calWallConrol+0x1658>)
 8006192:	edd3 6a02 	vldr	s13, [r3, #8]
 8006196:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800619a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800619e:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80061a2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80061a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061aa:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80061ae:	e0ae      	b.n	800630e <calWallConrol+0x161e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 80061b0:	2001      	movs	r0, #1
 80061b2:	f000 fecb 	bl	8006f4c <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 80061b6:	2000      	movs	r0, #0
 80061b8:	f000 feda 	bl	8006f70 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 80061bc:	4a60      	ldr	r2, [pc, #384]	; (8006340 <calWallConrol+0x1650>)
 80061be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c0:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 80061c2:	4b5e      	ldr	r3, [pc, #376]	; (800633c <calWallConrol+0x164c>)
 80061c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ce:	4b5d      	ldr	r3, [pc, #372]	; (8006344 <calWallConrol+0x1654>)
 80061d0:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 80061d4:	4b59      	ldr	r3, [pc, #356]	; (800633c <calWallConrol+0x164c>)
 80061d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80061e6:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80061ea:	4b54      	ldr	r3, [pc, #336]	; (800633c <calWallConrol+0x164c>)
 80061ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061f0:	ee07 3a90 	vmov	s15, r3
 80061f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 80061fc:	4b52      	ldr	r3, [pc, #328]	; (8006348 <calWallConrol+0x1658>)
 80061fe:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006202:	4b51      	ldr	r3, [pc, #324]	; (8006348 <calWallConrol+0x1658>)
 8006204:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006208:	4b4f      	ldr	r3, [pc, #316]	; (8006348 <calWallConrol+0x1658>)
 800620a:	edd3 7a01 	vldr	s15, [r3, #4]
 800620e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006212:	4b4d      	ldr	r3, [pc, #308]	; (8006348 <calWallConrol+0x1658>)
 8006214:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006218:	4b4b      	ldr	r3, [pc, #300]	; (8006348 <calWallConrol+0x1658>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a4a      	ldr	r2, [pc, #296]	; (8006348 <calWallConrol+0x1658>)
 800621e:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006220:	4b49      	ldr	r3, [pc, #292]	; (8006348 <calWallConrol+0x1658>)
 8006222:	ed93 7a00 	vldr	s14, [r3]
 8006226:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800622a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 800622e:	4b46      	ldr	r3, [pc, #280]	; (8006348 <calWallConrol+0x1658>)
 8006230:	edd3 6a02 	vldr	s13, [r3, #8]
 8006234:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800623c:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006240:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006248:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800624c:	e05f      	b.n	800630e <calWallConrol+0x161e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 800624e:	2001      	movs	r0, #1
 8006250:	f000 fe7c 	bl	8006f4c <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006254:	2001      	movs	r0, #1
 8006256:	f000 fe8b 	bl	8006f70 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 800625a:	4a39      	ldr	r2, [pc, #228]	; (8006340 <calWallConrol+0x1650>)
 800625c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800625e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006260:	4a38      	ldr	r2, [pc, #224]	; (8006344 <calWallConrol+0x1654>)
 8006262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006264:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006266:	4b35      	ldr	r3, [pc, #212]	; (800633c <calWallConrol+0x164c>)
 8006268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006272:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800627a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 800627e:	4b2f      	ldr	r3, [pc, #188]	; (800633c <calWallConrol+0x164c>)
 8006280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800628a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800628e:	4b2b      	ldr	r3, [pc, #172]	; (800633c <calWallConrol+0x164c>)
 8006290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800629c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80062a0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80062a4:	4b25      	ldr	r3, [pc, #148]	; (800633c <calWallConrol+0x164c>)
 80062a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062b2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 80062b6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 80062ba:	4b23      	ldr	r3, [pc, #140]	; (8006348 <calWallConrol+0x1658>)
 80062bc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80062c0:	4b21      	ldr	r3, [pc, #132]	; (8006348 <calWallConrol+0x1658>)
 80062c2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80062c6:	4b20      	ldr	r3, [pc, #128]	; (8006348 <calWallConrol+0x1658>)
 80062c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80062cc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80062d0:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <calWallConrol+0x1658>)
 80062d2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80062d6:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <calWallConrol+0x1658>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <calWallConrol+0x1658>)
 80062dc:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80062de:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <calWallConrol+0x1658>)
 80062e0:	ed93 7a00 	vldr	s14, [r3]
 80062e4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80062e8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80062ec:	4b16      	ldr	r3, [pc, #88]	; (8006348 <calWallConrol+0x1658>)
 80062ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80062f2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80062f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062fa:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80062fe:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006306:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800630a:	e000      	b.n	800630e <calWallConrol+0x161e>
			break;
 800630c:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 800630e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006312:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800634c <calWallConrol+0x165c>
 8006316:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <calWallConrol+0x1660>)
 800631c:	edd3 7a00 	vldr	s15, [r3]
 8006320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006324:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800632a:	ee07 3a90 	vmov	s15, r3
}
 800632e:	eeb0 0a67 	vmov.f32	s0, s15
 8006332:	37a8      	adds	r7, #168	; 0xa8
 8006334:	46bd      	mov	sp, r7
 8006336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800633a:	bf00      	nop
 800633c:	200002b8 	.word	0x200002b8
 8006340:	200005a4 	.word	0x200005a4
 8006344:	200005a8 	.word	0x200005a8
 8006348:	20000584 	.word	0x20000584
 800634c:	44d1e000 	.word	0x44d1e000
 8006350:	200004d4 	.word	0x200004d4
 8006354:	00000000 	.word	0x00000000

08006358 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006358:	b5b0      	push	{r4, r5, r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 800635e:	4b98      	ldr	r3, [pc, #608]	; (80065c0 <interrupt_WallCut+0x268>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b01      	cmp	r3, #1
 8006364:	f040 8537 	bne.w	8006dd6 <interrupt_WallCut+0xa7e>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006368:	4b96      	ldr	r3, [pc, #600]	; (80065c4 <interrupt_WallCut+0x26c>)
 800636a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800636e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006372:	dd03      	ble.n	800637c <interrupt_WallCut+0x24>
			front_wall_break_90 = 1;
 8006374:	4b94      	ldr	r3, [pc, #592]	; (80065c8 <interrupt_WallCut+0x270>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e002      	b.n	8006382 <interrupt_WallCut+0x2a>
		} else {
			front_wall_break_90 = 0;
 800637c:	4b92      	ldr	r3, [pc, #584]	; (80065c8 <interrupt_WallCut+0x270>)
 800637e:	2200      	movs	r2, #0
 8006380:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006382:	4b90      	ldr	r3, [pc, #576]	; (80065c4 <interrupt_WallCut+0x26c>)
 8006384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006388:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800638c:	dd03      	ble.n	8006396 <interrupt_WallCut+0x3e>
			front_wall_break_45 = 1;
 800638e:	4b8f      	ldr	r3, [pc, #572]	; (80065cc <interrupt_WallCut+0x274>)
 8006390:	2201      	movs	r2, #1
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	e002      	b.n	800639c <interrupt_WallCut+0x44>
		} else {
			front_wall_break_45 = 0;
 8006396:	4b8d      	ldr	r3, [pc, #564]	; (80065cc <interrupt_WallCut+0x274>)
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 800639c:	4b89      	ldr	r3, [pc, #548]	; (80065c4 <interrupt_WallCut+0x26c>)
 800639e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80063a6:	dd03      	ble.n	80063b0 <interrupt_WallCut+0x58>
			front_wall_break_45slant = 1;
 80063a8:	4b89      	ldr	r3, [pc, #548]	; (80065d0 <interrupt_WallCut+0x278>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <interrupt_WallCut+0x5e>
		} else {
			front_wall_break_45slant = 0;
 80063b0:	4b87      	ldr	r3, [pc, #540]	; (80065d0 <interrupt_WallCut+0x278>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 80063b6:	4b83      	ldr	r3, [pc, #524]	; (80065c4 <interrupt_WallCut+0x26c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80063be:	da30      	bge.n	8006422 <interrupt_WallCut+0xca>
			NoWallCountL90++;
 80063c0:	4b84      	ldr	r3, [pc, #528]	; (80065d4 <interrupt_WallCut+0x27c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a83      	ldr	r2, [pc, #524]	; (80065d4 <interrupt_WallCut+0x27c>)
 80063c8:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80063ca:	4b83      	ldr	r3, [pc, #524]	; (80065d8 <interrupt_WallCut+0x280>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fa f8e2 	bl	8000598 <__aeabi_f2d>
 80063d4:	4604      	mov	r4, r0
 80063d6:	460d      	mov	r5, r1
 80063d8:	4b80      	ldr	r3, [pc, #512]	; (80065dc <interrupt_WallCut+0x284>)
 80063da:	ed93 7a00 	vldr	s14, [r3]
 80063de:	4b80      	ldr	r3, [pc, #512]	; (80065e0 <interrupt_WallCut+0x288>)
 80063e0:	edd3 7a00 	vldr	s15, [r3]
 80063e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063f0:	ee16 0a90 	vmov	r0, s13
 80063f4:	f7fa f8d0 	bl	8000598 <__aeabi_f2d>
 80063f8:	a36f      	add	r3, pc, #444	; (adr r3, 80065b8 <interrupt_WallCut+0x260>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7fa f923 	bl	8000648 <__aeabi_dmul>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4620      	mov	r0, r4
 8006408:	4629      	mov	r1, r5
 800640a:	f7f9 ff67 	bl	80002dc <__adddf3>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4610      	mov	r0, r2
 8006414:	4619      	mov	r1, r3
 8006416:	f7fa fbef 	bl	8000bf8 <__aeabi_d2f>
 800641a:	4603      	mov	r3, r0
 800641c:	4a6e      	ldr	r2, [pc, #440]	; (80065d8 <interrupt_WallCut+0x280>)
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	e006      	b.n	8006430 <interrupt_WallCut+0xd8>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006422:	4b6c      	ldr	r3, [pc, #432]	; (80065d4 <interrupt_WallCut+0x27c>)
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006428:	4b6b      	ldr	r3, [pc, #428]	; (80065d8 <interrupt_WallCut+0x280>)
 800642a:	f04f 0200 	mov.w	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 8006430:	4b64      	ldr	r3, [pc, #400]	; (80065c4 <interrupt_WallCut+0x26c>)
 8006432:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006436:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800643a:	da30      	bge.n	800649e <interrupt_WallCut+0x146>
			NoWallCountR90++;
 800643c:	4b69      	ldr	r3, [pc, #420]	; (80065e4 <interrupt_WallCut+0x28c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	4a68      	ldr	r2, [pc, #416]	; (80065e4 <interrupt_WallCut+0x28c>)
 8006444:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006446:	4b68      	ldr	r3, [pc, #416]	; (80065e8 <interrupt_WallCut+0x290>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f7fa f8a4 	bl	8000598 <__aeabi_f2d>
 8006450:	4604      	mov	r4, r0
 8006452:	460d      	mov	r5, r1
 8006454:	4b61      	ldr	r3, [pc, #388]	; (80065dc <interrupt_WallCut+0x284>)
 8006456:	ed93 7a00 	vldr	s14, [r3]
 800645a:	4b61      	ldr	r3, [pc, #388]	; (80065e0 <interrupt_WallCut+0x288>)
 800645c:	edd3 7a00 	vldr	s15, [r3]
 8006460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006464:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006468:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800646c:	ee16 0a90 	vmov	r0, s13
 8006470:	f7fa f892 	bl	8000598 <__aeabi_f2d>
 8006474:	a350      	add	r3, pc, #320	; (adr r3, 80065b8 <interrupt_WallCut+0x260>)
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f7fa f8e5 	bl	8000648 <__aeabi_dmul>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	f7f9 ff29 	bl	80002dc <__adddf3>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	f7fa fbb1 	bl	8000bf8 <__aeabi_d2f>
 8006496:	4603      	mov	r3, r0
 8006498:	4a53      	ldr	r2, [pc, #332]	; (80065e8 <interrupt_WallCut+0x290>)
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e006      	b.n	80064ac <interrupt_WallCut+0x154>
		} else {
			NoWallCountR90 = 0;
 800649e:	4b51      	ldr	r3, [pc, #324]	; (80065e4 <interrupt_WallCut+0x28c>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 80064a4:	4b50      	ldr	r3, [pc, #320]	; (80065e8 <interrupt_WallCut+0x290>)
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80064ac:	4b4f      	ldr	r3, [pc, #316]	; (80065ec <interrupt_WallCut+0x294>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80064b4:	da03      	bge.n	80064be <interrupt_WallCut+0x166>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 80064b6:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <interrupt_WallCut+0x26c>)
 80064b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ba:	2b70      	cmp	r3, #112	; 0x70
 80064bc:	dd37      	ble.n	800652e <interrupt_WallCut+0x1d6>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 80064be:	4b4c      	ldr	r3, [pc, #304]	; (80065f0 <interrupt_WallCut+0x298>)
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 80064c6:	4b4b      	ldr	r3, [pc, #300]	; (80065f4 <interrupt_WallCut+0x29c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	4a49      	ldr	r2, [pc, #292]	; (80065f4 <interrupt_WallCut+0x29c>)
 80064ce:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 80064d0:	4b49      	ldr	r3, [pc, #292]	; (80065f8 <interrupt_WallCut+0x2a0>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80064d6:	4b49      	ldr	r3, [pc, #292]	; (80065fc <interrupt_WallCut+0x2a4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fa f85c 	bl	8000598 <__aeabi_f2d>
 80064e0:	4604      	mov	r4, r0
 80064e2:	460d      	mov	r5, r1
 80064e4:	4b3d      	ldr	r3, [pc, #244]	; (80065dc <interrupt_WallCut+0x284>)
 80064e6:	ed93 7a00 	vldr	s14, [r3]
 80064ea:	4b3d      	ldr	r3, [pc, #244]	; (80065e0 <interrupt_WallCut+0x288>)
 80064ec:	edd3 7a00 	vldr	s15, [r3]
 80064f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80064f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80064fc:	ee16 0a90 	vmov	r0, s13
 8006500:	f7fa f84a 	bl	8000598 <__aeabi_f2d>
 8006504:	a32c      	add	r3, pc, #176	; (adr r3, 80065b8 <interrupt_WallCut+0x260>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f7fa f89d 	bl	8000648 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f7f9 fee1 	bl	80002dc <__adddf3>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	f7fa fb69 	bl	8000bf8 <__aeabi_d2f>
 8006526:	4603      	mov	r3, r0
 8006528:	4a34      	ldr	r2, [pc, #208]	; (80065fc <interrupt_WallCut+0x2a4>)
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	e09c      	b.n	8006668 <interrupt_WallCut+0x310>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 800652e:	4b32      	ldr	r3, [pc, #200]	; (80065f8 <interrupt_WallCut+0x2a0>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d168      	bne.n	8006608 <interrupt_WallCut+0x2b0>
				for (int i = 0; i <= 19; i++) {
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e01f      	b.n	800657c <interrupt_WallCut+0x224>
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800653c:	4a21      	ldr	r2, [pc, #132]	; (80065c4 <interrupt_WallCut+0x26c>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3314      	adds	r3, #20
 8006542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800654e:	4b28      	ldr	r3, [pc, #160]	; (80065f0 <interrupt_WallCut+0x298>)
 8006550:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8006554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655c:	dd0b      	ble.n	8006576 <interrupt_WallCut+0x21e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800655e:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <interrupt_WallCut+0x26c>)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3314      	adds	r3, #20
 8006564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006568:	ee07 3a90 	vmov	s15, r3
 800656c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006570:	4b1f      	ldr	r3, [pc, #124]	; (80065f0 <interrupt_WallCut+0x298>)
 8006572:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3301      	adds	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b13      	cmp	r3, #19
 8006580:	dddc      	ble.n	800653c <interrupt_WallCut+0x1e4>
					}
				}
				NoWallCountL45 = 0;
 8006582:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <interrupt_WallCut+0x29c>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006588:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <interrupt_WallCut+0x2a0>)
 800658a:	2201      	movs	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <interrupt_WallCut+0x298>)
 8006590:	edd3 7a00 	vldr	s15, [r3]
 8006594:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006600 <interrupt_WallCut+0x2a8>
 8006598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800659c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006604 <interrupt_WallCut+0x2ac>
 80065a0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80065a4:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <interrupt_WallCut+0x298>)
 80065a6:	ed93 7a00 	vldr	s14, [r3]
 80065aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <interrupt_WallCut+0x2a4>)
 80065b0:	edc3 7a00 	vstr	s15, [r3]
 80065b4:	e058      	b.n	8006668 <interrupt_WallCut+0x310>
 80065b6:	bf00      	nop
 80065b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80065bc:	3f50624d 	.word	0x3f50624d
 80065c0:	20000592 	.word	0x20000592
 80065c4:	200002b8 	.word	0x200002b8
 80065c8:	200005f2 	.word	0x200005f2
 80065cc:	200005f3 	.word	0x200005f3
 80065d0:	200005f4 	.word	0x200005f4
 80065d4:	200005b8 	.word	0x200005b8
 80065d8:	200005d0 	.word	0x200005d0
 80065dc:	20000258 	.word	0x20000258
 80065e0:	2000025c 	.word	0x2000025c
 80065e4:	200005b4 	.word	0x200005b4
 80065e8:	200005cc 	.word	0x200005cc
 80065ec:	2000045c 	.word	0x2000045c
 80065f0:	200005f8 	.word	0x200005f8
 80065f4:	200005c0 	.word	0x200005c0
 80065f8:	200005ec 	.word	0x200005ec
 80065fc:	200005d8 	.word	0x200005d8
 8006600:	43f68000 	.word	0x43f68000
 8006604:	00000000 	.word	0x00000000
			} else {
				NoWallCountL45++;
 8006608:	4bab      	ldr	r3, [pc, #684]	; (80068b8 <interrupt_WallCut+0x560>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	4aaa      	ldr	r2, [pc, #680]	; (80068b8 <interrupt_WallCut+0x560>)
 8006610:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006612:	4baa      	ldr	r3, [pc, #680]	; (80068bc <interrupt_WallCut+0x564>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7f9 ffbe 	bl	8000598 <__aeabi_f2d>
 800661c:	4604      	mov	r4, r0
 800661e:	460d      	mov	r5, r1
 8006620:	4ba7      	ldr	r3, [pc, #668]	; (80068c0 <interrupt_WallCut+0x568>)
 8006622:	ed93 7a00 	vldr	s14, [r3]
 8006626:	4ba7      	ldr	r3, [pc, #668]	; (80068c4 <interrupt_WallCut+0x56c>)
 8006628:	edd3 7a00 	vldr	s15, [r3]
 800662c:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006630:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006634:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006638:	ee16 0a90 	vmov	r0, s13
 800663c:	f7f9 ffac 	bl	8000598 <__aeabi_f2d>
 8006640:	a39b      	add	r3, pc, #620	; (adr r3, 80068b0 <interrupt_WallCut+0x558>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 ffff 	bl	8000648 <__aeabi_dmul>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7f9 fe43 	bl	80002dc <__adddf3>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	f7fa facb 	bl	8000bf8 <__aeabi_d2f>
 8006662:	4603      	mov	r3, r0
 8006664:	4a95      	ldr	r2, [pc, #596]	; (80068bc <interrupt_WallCut+0x564>)
 8006666:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006668:	4b97      	ldr	r3, [pc, #604]	; (80068c8 <interrupt_WallCut+0x570>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006670:	da04      	bge.n	800667c <interrupt_WallCut+0x324>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8006672:	4b96      	ldr	r3, [pc, #600]	; (80068cc <interrupt_WallCut+0x574>)
 8006674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006678:	2bc8      	cmp	r3, #200	; 0xc8
 800667a:	dd37      	ble.n	80066ec <interrupt_WallCut+0x394>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 800667c:	4b94      	ldr	r3, [pc, #592]	; (80068d0 <interrupt_WallCut+0x578>)
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 8006684:	4b93      	ldr	r3, [pc, #588]	; (80068d4 <interrupt_WallCut+0x57c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	4a92      	ldr	r2, [pc, #584]	; (80068d4 <interrupt_WallCut+0x57c>)
 800668c:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 800668e:	4b92      	ldr	r3, [pc, #584]	; (80068d8 <interrupt_WallCut+0x580>)
 8006690:	2200      	movs	r2, #0
 8006692:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006694:	4b91      	ldr	r3, [pc, #580]	; (80068dc <interrupt_WallCut+0x584>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f7f9 ff7d 	bl	8000598 <__aeabi_f2d>
 800669e:	4604      	mov	r4, r0
 80066a0:	460d      	mov	r5, r1
 80066a2:	4b87      	ldr	r3, [pc, #540]	; (80068c0 <interrupt_WallCut+0x568>)
 80066a4:	ed93 7a00 	vldr	s14, [r3]
 80066a8:	4b86      	ldr	r3, [pc, #536]	; (80068c4 <interrupt_WallCut+0x56c>)
 80066aa:	edd3 7a00 	vldr	s15, [r3]
 80066ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066ba:	ee16 0a90 	vmov	r0, s13
 80066be:	f7f9 ff6b 	bl	8000598 <__aeabi_f2d>
 80066c2:	a37b      	add	r3, pc, #492	; (adr r3, 80068b0 <interrupt_WallCut+0x558>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ffbe 	bl	8000648 <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4620      	mov	r0, r4
 80066d2:	4629      	mov	r1, r5
 80066d4:	f7f9 fe02 	bl	80002dc <__adddf3>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4610      	mov	r0, r2
 80066de:	4619      	mov	r1, r3
 80066e0:	f7fa fa8a 	bl	8000bf8 <__aeabi_d2f>
 80066e4:	4603      	mov	r3, r0
 80066e6:	4a7d      	ldr	r2, [pc, #500]	; (80068dc <interrupt_WallCut+0x584>)
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e073      	b.n	80067d4 <interrupt_WallCut+0x47c>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 80066ec:	4b7a      	ldr	r3, [pc, #488]	; (80068d8 <interrupt_WallCut+0x580>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d13f      	bne.n	8006774 <interrupt_WallCut+0x41c>
				for (int i = 0; i <= 19; i++) {
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	e01f      	b.n	800673a <interrupt_WallCut+0x3e2>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80066fa:	4a74      	ldr	r2, [pc, #464]	; (80068cc <interrupt_WallCut+0x574>)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	333c      	adds	r3, #60	; 0x3c
 8006700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800670c:	4b70      	ldr	r3, [pc, #448]	; (80068d0 <interrupt_WallCut+0x578>)
 800670e:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 8006712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671a:	dd0b      	ble.n	8006734 <interrupt_WallCut+0x3dc>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 800671c:	4a6b      	ldr	r2, [pc, #428]	; (80068cc <interrupt_WallCut+0x574>)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	333c      	adds	r3, #60	; 0x3c
 8006722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 800672e:	4b68      	ldr	r3, [pc, #416]	; (80068d0 <interrupt_WallCut+0x578>)
 8006730:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	3301      	adds	r3, #1
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b13      	cmp	r3, #19
 800673e:	dddc      	ble.n	80066fa <interrupt_WallCut+0x3a2>
					}
				}
				NoWallCountR45 = 0;
 8006740:	4b64      	ldr	r3, [pc, #400]	; (80068d4 <interrupt_WallCut+0x57c>)
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 8006746:	4b64      	ldr	r3, [pc, #400]	; (80068d8 <interrupt_WallCut+0x580>)
 8006748:	2201      	movs	r2, #1
 800674a:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 800674c:	4b60      	ldr	r3, [pc, #384]	; (80068d0 <interrupt_WallCut+0x578>)
 800674e:	edd3 7a00 	vldr	s15, [r3]
 8006752:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80068e0 <interrupt_WallCut+0x588>
 8006756:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800675a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80068e4 <interrupt_WallCut+0x58c>
 800675e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006762:	4b5b      	ldr	r3, [pc, #364]	; (80068d0 <interrupt_WallCut+0x578>)
 8006764:	ed93 7a00 	vldr	s14, [r3]
 8006768:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 800676c:	4b5b      	ldr	r3, [pc, #364]	; (80068dc <interrupt_WallCut+0x584>)
 800676e:	edc3 7a00 	vstr	s15, [r3]
 8006772:	e02f      	b.n	80067d4 <interrupt_WallCut+0x47c>
			} else {
				NoWallCountR45++;
 8006774:	4b57      	ldr	r3, [pc, #348]	; (80068d4 <interrupt_WallCut+0x57c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	4a56      	ldr	r2, [pc, #344]	; (80068d4 <interrupt_WallCut+0x57c>)
 800677c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 800677e:	4b57      	ldr	r3, [pc, #348]	; (80068dc <interrupt_WallCut+0x584>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f7f9 ff08 	bl	8000598 <__aeabi_f2d>
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	4b4c      	ldr	r3, [pc, #304]	; (80068c0 <interrupt_WallCut+0x568>)
 800678e:	ed93 7a00 	vldr	s14, [r3]
 8006792:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <interrupt_WallCut+0x56c>)
 8006794:	edd3 7a00 	vldr	s15, [r3]
 8006798:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 800679c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80067a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067a4:	ee16 0a90 	vmov	r0, s13
 80067a8:	f7f9 fef6 	bl	8000598 <__aeabi_f2d>
 80067ac:	a340      	add	r3, pc, #256	; (adr r3, 80068b0 <interrupt_WallCut+0x558>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f7f9 ff49 	bl	8000648 <__aeabi_dmul>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80067ba:	4620      	mov	r0, r4
 80067bc:	4629      	mov	r1, r5
 80067be:	f7f9 fd8d 	bl	80002dc <__adddf3>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4610      	mov	r0, r2
 80067c8:	4619      	mov	r1, r3
 80067ca:	f7fa fa15 	bl	8000bf8 <__aeabi_d2f>
 80067ce:	4603      	mov	r3, r0
 80067d0:	4a42      	ldr	r2, [pc, #264]	; (80068dc <interrupt_WallCut+0x584>)
 80067d2:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80067d4:	4b3c      	ldr	r3, [pc, #240]	; (80068c8 <interrupt_WallCut+0x570>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80067dc:	db5f      	blt.n	800689e <interrupt_WallCut+0x546>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 80067de:	4b42      	ldr	r3, [pc, #264]	; (80068e8 <interrupt_WallCut+0x590>)
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 80067e6:	4b41      	ldr	r3, [pc, #260]	; (80068ec <interrupt_WallCut+0x594>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	4a3f      	ldr	r2, [pc, #252]	; (80068ec <interrupt_WallCut+0x594>)
 80067ee:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 80067f0:	2000      	movs	r0, #0
 80067f2:	f000 fcdd 	bl	80071b0 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 80067f6:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <interrupt_WallCut+0x598>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80067fc:	4b3d      	ldr	r3, [pc, #244]	; (80068f4 <interrupt_WallCut+0x59c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f7f9 fec9 	bl	8000598 <__aeabi_f2d>
 8006806:	4604      	mov	r4, r0
 8006808:	460d      	mov	r5, r1
 800680a:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <interrupt_WallCut+0x568>)
 800680c:	ed93 7a00 	vldr	s14, [r3]
 8006810:	4b2c      	ldr	r3, [pc, #176]	; (80068c4 <interrupt_WallCut+0x56c>)
 8006812:	edd3 7a00 	vldr	s15, [r3]
 8006816:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 800681a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800681e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006822:	ee16 0a90 	vmov	r0, s13
 8006826:	f7f9 feb7 	bl	8000598 <__aeabi_f2d>
 800682a:	a321      	add	r3, pc, #132	; (adr r3, 80068b0 <interrupt_WallCut+0x558>)
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	f7f9 ff0a 	bl	8000648 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006838:	4620      	mov	r0, r4
 800683a:	4629      	mov	r1, r5
 800683c:	f7f9 fd4e 	bl	80002dc <__adddf3>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	f7fa f9d6 	bl	8000bf8 <__aeabi_d2f>
 800684c:	4603      	mov	r3, r0
 800684e:	4a29      	ldr	r2, [pc, #164]	; (80068f4 <interrupt_WallCut+0x59c>)
 8006850:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8006852:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <interrupt_WallCut+0x5a0>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b01      	cmp	r3, #1
 8006858:	f040 8131 	bne.w	8006abe <interrupt_WallCut+0x766>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 800685c:	4b27      	ldr	r3, [pc, #156]	; (80068fc <interrupt_WallCut+0x5a4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f7f9 fe99 	bl	8000598 <__aeabi_f2d>
 8006866:	4604      	mov	r4, r0
 8006868:	460d      	mov	r5, r1
 800686a:	4b25      	ldr	r3, [pc, #148]	; (8006900 <interrupt_WallCut+0x5a8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f7f9 fe92 	bl	8000598 <__aeabi_f2d>
 8006874:	a30e      	add	r3, pc, #56	; (adr r3, 80068b0 <interrupt_WallCut+0x558>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f7f9 fee5 	bl	8000648 <__aeabi_dmul>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	f7f9 fd29 	bl	80002dc <__adddf3>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4610      	mov	r0, r2
 8006890:	4619      	mov	r1, r3
 8006892:	f7fa f9b1 	bl	8000bf8 <__aeabi_d2f>
 8006896:	4603      	mov	r3, r0
 8006898:	4a18      	ldr	r2, [pc, #96]	; (80068fc <interrupt_WallCut+0x5a4>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	e10f      	b.n	8006abe <interrupt_WallCut+0x766>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <interrupt_WallCut+0x598>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 80b4 	bne.w	8006a10 <interrupt_WallCut+0x6b8>
				for (int i = 0; i <= 19; i++) {
 80068a8:	2300      	movs	r3, #0
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	e04a      	b.n	8006944 <interrupt_WallCut+0x5ec>
 80068ae:	bf00      	nop
 80068b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80068b4:	3f50624d 	.word	0x3f50624d
 80068b8:	200005c0 	.word	0x200005c0
 80068bc:	200005d8 	.word	0x200005d8
 80068c0:	20000258 	.word	0x20000258
 80068c4:	2000025c 	.word	0x2000025c
 80068c8:	2000045c 	.word	0x2000045c
 80068cc:	200002b8 	.word	0x200002b8
 80068d0:	200005fc 	.word	0x200005fc
 80068d4:	200005bc 	.word	0x200005bc
 80068d8:	200005ed 	.word	0x200005ed
 80068dc:	200005d4 	.word	0x200005d4
 80068e0:	44484000 	.word	0x44484000
 80068e4:	00000000 	.word	0x00000000
 80068e8:	20000600 	.word	0x20000600
 80068ec:	200005c8 	.word	0x200005c8
 80068f0:	200005ee 	.word	0x200005ee
 80068f4:	200005e8 	.word	0x200005e8
 80068f8:	200005f0 	.word	0x200005f0
 80068fc:	200005e0 	.word	0x200005e0
 8006900:	200004d8 	.word	0x200004d8
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006904:	4aac      	ldr	r2, [pc, #688]	; (8006bb8 <interrupt_WallCut+0x860>)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3314      	adds	r3, #20
 800690a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006916:	4ba9      	ldr	r3, [pc, #676]	; (8006bbc <interrupt_WallCut+0x864>)
 8006918:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 800691c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006924:	dd0b      	ble.n	800693e <interrupt_WallCut+0x5e6>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006926:	4aa4      	ldr	r2, [pc, #656]	; (8006bb8 <interrupt_WallCut+0x860>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3314      	adds	r3, #20
 800692c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006930:	ee07 3a90 	vmov	s15, r3
 8006934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006938:	4ba0      	ldr	r3, [pc, #640]	; (8006bbc <interrupt_WallCut+0x864>)
 800693a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3301      	adds	r3, #1
 8006942:	607b      	str	r3, [r7, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b13      	cmp	r3, #19
 8006948:	dddc      	ble.n	8006904 <interrupt_WallCut+0x5ac>
					}
				}
				NoWallCountL45slant = 0;
 800694a:	4b9d      	ldr	r3, [pc, #628]	; (8006bc0 <interrupt_WallCut+0x868>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006950:	4b9c      	ldr	r3, [pc, #624]	; (8006bc4 <interrupt_WallCut+0x86c>)
 8006952:	2201      	movs	r2, #1
 8006954:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006956:	2001      	movs	r0, #1
 8006958:	f000 fc2a 	bl	80071b0 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 800695c:	4b97      	ldr	r3, [pc, #604]	; (8006bbc <interrupt_WallCut+0x864>)
 800695e:	edd3 7a00 	vldr	s15, [r3]
 8006962:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8006bc8 <interrupt_WallCut+0x870>
 8006966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800696a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800696e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006972:	db26      	blt.n	80069c2 <interrupt_WallCut+0x66a>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006974:	4b91      	ldr	r3, [pc, #580]	; (8006bbc <interrupt_WallCut+0x864>)
 8006976:	edd3 7a00 	vldr	s15, [r3]
 800697a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006bc8 <interrupt_WallCut+0x870>
 800697e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006982:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8006bcc <interrupt_WallCut+0x874>
 8006986:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800698a:	4b8c      	ldr	r3, [pc, #560]	; (8006bbc <interrupt_WallCut+0x864>)
 800698c:	ed93 7a00 	vldr	s14, [r3]
 8006990:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006994:	4b8e      	ldr	r3, [pc, #568]	; (8006bd0 <interrupt_WallCut+0x878>)
 8006996:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800699a:	4b88      	ldr	r3, [pc, #544]	; (8006bbc <interrupt_WallCut+0x864>)
 800699c:	edd3 7a00 	vldr	s15, [r3]
 80069a0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8006bc8 <interrupt_WallCut+0x870>
 80069a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069a8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006bcc <interrupt_WallCut+0x874>
 80069ac:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80069b0:	4b82      	ldr	r3, [pc, #520]	; (8006bbc <interrupt_WallCut+0x864>)
 80069b2:	ed93 7a00 	vldr	s14, [r3]
 80069b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 80069ba:	4b86      	ldr	r3, [pc, #536]	; (8006bd4 <interrupt_WallCut+0x87c>)
 80069bc:	edc3 7a00 	vstr	s15, [r3]
 80069c0:	e07a      	b.n	8006ab8 <interrupt_WallCut+0x760>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80069c2:	4b7e      	ldr	r3, [pc, #504]	; (8006bbc <interrupt_WallCut+0x864>)
 80069c4:	edd3 7a00 	vldr	s15, [r3]
 80069c8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8006bc8 <interrupt_WallCut+0x870>
 80069cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069d0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006bcc <interrupt_WallCut+0x874>
 80069d4:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80069d8:	4b78      	ldr	r3, [pc, #480]	; (8006bbc <interrupt_WallCut+0x864>)
 80069da:	ed93 7a00 	vldr	s14, [r3]
 80069de:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 80069e2:	4b7b      	ldr	r3, [pc, #492]	; (8006bd0 <interrupt_WallCut+0x878>)
 80069e4:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80069e8:	4b74      	ldr	r3, [pc, #464]	; (8006bbc <interrupt_WallCut+0x864>)
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8006bc8 <interrupt_WallCut+0x870>
 80069f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069f6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006bcc <interrupt_WallCut+0x874>
 80069fa:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80069fe:	4b6f      	ldr	r3, [pc, #444]	; (8006bbc <interrupt_WallCut+0x864>)
 8006a00:	ed93 7a00 	vldr	s14, [r3]
 8006a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8006a08:	4b72      	ldr	r3, [pc, #456]	; (8006bd4 <interrupt_WallCut+0x87c>)
 8006a0a:	edc3 7a00 	vstr	s15, [r3]
 8006a0e:	e053      	b.n	8006ab8 <interrupt_WallCut+0x760>
				}

			} else {
				NoWallCountL45slant++;
 8006a10:	4b6b      	ldr	r3, [pc, #428]	; (8006bc0 <interrupt_WallCut+0x868>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	4a6a      	ldr	r2, [pc, #424]	; (8006bc0 <interrupt_WallCut+0x868>)
 8006a18:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006a1a:	4b6e      	ldr	r3, [pc, #440]	; (8006bd4 <interrupt_WallCut+0x87c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7f9 fdba 	bl	8000598 <__aeabi_f2d>
 8006a24:	4604      	mov	r4, r0
 8006a26:	460d      	mov	r5, r1
 8006a28:	4b6b      	ldr	r3, [pc, #428]	; (8006bd8 <interrupt_WallCut+0x880>)
 8006a2a:	ed93 7a00 	vldr	s14, [r3]
 8006a2e:	4b6b      	ldr	r3, [pc, #428]	; (8006bdc <interrupt_WallCut+0x884>)
 8006a30:	edd3 7a00 	vldr	s15, [r3]
 8006a34:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006a38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a40:	ee16 0a90 	vmov	r0, s13
 8006a44:	f7f9 fda8 	bl	8000598 <__aeabi_f2d>
 8006a48:	a359      	add	r3, pc, #356	; (adr r3, 8006bb0 <interrupt_WallCut+0x858>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f7f9 fdfb 	bl	8000648 <__aeabi_dmul>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7f9 fc3f 	bl	80002dc <__adddf3>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	f7fa f8c7 	bl	8000bf8 <__aeabi_d2f>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4a59      	ldr	r2, [pc, #356]	; (8006bd4 <interrupt_WallCut+0x87c>)
 8006a6e:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006a70:	4b5b      	ldr	r3, [pc, #364]	; (8006be0 <interrupt_WallCut+0x888>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d11f      	bne.n	8006ab8 <interrupt_WallCut+0x760>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006a78:	4b55      	ldr	r3, [pc, #340]	; (8006bd0 <interrupt_WallCut+0x878>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7f9 fd8b 	bl	8000598 <__aeabi_f2d>
 8006a82:	4604      	mov	r4, r0
 8006a84:	460d      	mov	r5, r1
 8006a86:	4b57      	ldr	r3, [pc, #348]	; (8006be4 <interrupt_WallCut+0x88c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7f9 fd84 	bl	8000598 <__aeabi_f2d>
 8006a90:	a347      	add	r3, pc, #284	; (adr r3, 8006bb0 <interrupt_WallCut+0x858>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f7f9 fdd7 	bl	8000648 <__aeabi_dmul>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7f9 fc1b 	bl	80002dc <__adddf3>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4610      	mov	r0, r2
 8006aac:	4619      	mov	r1, r3
 8006aae:	f7fa f8a3 	bl	8000bf8 <__aeabi_d2f>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	4a46      	ldr	r2, [pc, #280]	; (8006bd0 <interrupt_WallCut+0x878>)
 8006ab6:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006ab8:	4b49      	ldr	r3, [pc, #292]	; (8006be0 <interrupt_WallCut+0x888>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006abe:	4b4a      	ldr	r3, [pc, #296]	; (8006be8 <interrupt_WallCut+0x890>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006ac6:	db6a      	blt.n	8006b9e <interrupt_WallCut+0x846>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006ac8:	4b48      	ldr	r3, [pc, #288]	; (8006bec <interrupt_WallCut+0x894>)
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006ad0:	4b47      	ldr	r3, [pc, #284]	; (8006bf0 <interrupt_WallCut+0x898>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	4a46      	ldr	r2, [pc, #280]	; (8006bf0 <interrupt_WallCut+0x898>)
 8006ad8:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8006ada:	2000      	movs	r0, #0
 8006adc:	f000 fb56 	bl	800718c <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8006ae0:	4b44      	ldr	r3, [pc, #272]	; (8006bf4 <interrupt_WallCut+0x89c>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006ae6:	4b44      	ldr	r3, [pc, #272]	; (8006bf8 <interrupt_WallCut+0x8a0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7f9 fd54 	bl	8000598 <__aeabi_f2d>
 8006af0:	4604      	mov	r4, r0
 8006af2:	460d      	mov	r5, r1
 8006af4:	4b38      	ldr	r3, [pc, #224]	; (8006bd8 <interrupt_WallCut+0x880>)
 8006af6:	ed93 7a00 	vldr	s14, [r3]
 8006afa:	4b38      	ldr	r3, [pc, #224]	; (8006bdc <interrupt_WallCut+0x884>)
 8006afc:	edd3 7a00 	vldr	s15, [r3]
 8006b00:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006b04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b0c:	ee16 0a90 	vmov	r0, s13
 8006b10:	f7f9 fd42 	bl	8000598 <__aeabi_f2d>
 8006b14:	a326      	add	r3, pc, #152	; (adr r3, 8006bb0 <interrupt_WallCut+0x858>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7f9 fd95 	bl	8000648 <__aeabi_dmul>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006b22:	4620      	mov	r0, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	f7f9 fbd9 	bl	80002dc <__adddf3>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4610      	mov	r0, r2
 8006b30:	4619      	mov	r1, r3
 8006b32:	f7fa f861 	bl	8000bf8 <__aeabi_d2f>
 8006b36:	4603      	mov	r3, r0
 8006b38:	4a2f      	ldr	r2, [pc, #188]	; (8006bf8 <interrupt_WallCut+0x8a0>)
 8006b3a:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006b3c:	4b2f      	ldr	r3, [pc, #188]	; (8006bfc <interrupt_WallCut+0x8a4>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	f040 81a8 	bne.w	8006e96 <interrupt_WallCut+0xb3e>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006b46:	4b2e      	ldr	r3, [pc, #184]	; (8006c00 <interrupt_WallCut+0x8a8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7f9 fd24 	bl	8000598 <__aeabi_f2d>
 8006b50:	4604      	mov	r4, r0
 8006b52:	460d      	mov	r5, r1
 8006b54:	4b20      	ldr	r3, [pc, #128]	; (8006bd8 <interrupt_WallCut+0x880>)
 8006b56:	ed93 7a00 	vldr	s14, [r3]
 8006b5a:	4b20      	ldr	r3, [pc, #128]	; (8006bdc <interrupt_WallCut+0x884>)
 8006b5c:	edd3 7a00 	vldr	s15, [r3]
 8006b60:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006b64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b6c:	ee16 0a90 	vmov	r0, s13
 8006b70:	f7f9 fd12 	bl	8000598 <__aeabi_f2d>
 8006b74:	a30e      	add	r3, pc, #56	; (adr r3, 8006bb0 <interrupt_WallCut+0x858>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f7f9 fd65 	bl	8000648 <__aeabi_dmul>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006b82:	4620      	mov	r0, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	f7f9 fba9 	bl	80002dc <__adddf3>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4619      	mov	r1, r3
 8006b92:	f7fa f831 	bl	8000bf8 <__aeabi_d2f>
 8006b96:	4603      	mov	r3, r0
 8006b98:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <interrupt_WallCut+0x8a8>)
 8006b9a:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006b9c:	e17b      	b.n	8006e96 <interrupt_WallCut+0xb3e>
			if (NoWallCountR45slant_flag == 0) {
 8006b9e:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <interrupt_WallCut+0x89c>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f040 80b4 	bne.w	8006d10 <interrupt_WallCut+0x9b8>
				for (int i = 0; i <= 19; i++) {
 8006ba8:	2300      	movs	r3, #0
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	e04a      	b.n	8006c44 <interrupt_WallCut+0x8ec>
 8006bae:	bf00      	nop
 8006bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006bb4:	3f50624d 	.word	0x3f50624d
 8006bb8:	200002b8 	.word	0x200002b8
 8006bbc:	20000600 	.word	0x20000600
 8006bc0:	200005c8 	.word	0x200005c8
 8006bc4:	200005ee 	.word	0x200005ee
 8006bc8:	455ac000 	.word	0x455ac000
 8006bcc:	00000000 	.word	0x00000000
 8006bd0:	200005e0 	.word	0x200005e0
 8006bd4:	200005e8 	.word	0x200005e8
 8006bd8:	20000258 	.word	0x20000258
 8006bdc:	2000025c 	.word	0x2000025c
 8006be0:	200005f0 	.word	0x200005f0
 8006be4:	200004d8 	.word	0x200004d8
 8006be8:	2000045c 	.word	0x2000045c
 8006bec:	20000604 	.word	0x20000604
 8006bf0:	200005c4 	.word	0x200005c4
 8006bf4:	200005ef 	.word	0x200005ef
 8006bf8:	200005e4 	.word	0x200005e4
 8006bfc:	200005f1 	.word	0x200005f1
 8006c00:	200005dc 	.word	0x200005dc
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006c04:	4aa8      	ldr	r2, [pc, #672]	; (8006ea8 <interrupt_WallCut+0xb50>)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	333c      	adds	r3, #60	; 0x3c
 8006c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c16:	4ba5      	ldr	r3, [pc, #660]	; (8006eac <interrupt_WallCut+0xb54>)
 8006c18:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c24:	dd0b      	ble.n	8006c3e <interrupt_WallCut+0x8e6>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006c26:	4aa0      	ldr	r2, [pc, #640]	; (8006ea8 <interrupt_WallCut+0xb50>)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	333c      	adds	r3, #60	; 0x3c
 8006c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006c38:	4b9c      	ldr	r3, [pc, #624]	; (8006eac <interrupt_WallCut+0xb54>)
 8006c3a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b13      	cmp	r3, #19
 8006c48:	dddc      	ble.n	8006c04 <interrupt_WallCut+0x8ac>
				NoWallCountR45slant = 0;
 8006c4a:	4b99      	ldr	r3, [pc, #612]	; (8006eb0 <interrupt_WallCut+0xb58>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006c50:	4b98      	ldr	r3, [pc, #608]	; (8006eb4 <interrupt_WallCut+0xb5c>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006c56:	2001      	movs	r0, #1
 8006c58:	f000 fa98 	bl	800718c <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006c5c:	4b93      	ldr	r3, [pc, #588]	; (8006eac <interrupt_WallCut+0xb54>)
 8006c5e:	edd3 7a00 	vldr	s15, [r3]
 8006c62:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006eb8 <interrupt_WallCut+0xb60>
 8006c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c72:	db26      	blt.n	8006cc2 <interrupt_WallCut+0x96a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006c74:	4b8d      	ldr	r3, [pc, #564]	; (8006eac <interrupt_WallCut+0xb54>)
 8006c76:	edd3 7a00 	vldr	s15, [r3]
 8006c7a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8006eb8 <interrupt_WallCut+0xb60>
 8006c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c82:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8006ebc <interrupt_WallCut+0xb64>
 8006c86:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006c8a:	4b88      	ldr	r3, [pc, #544]	; (8006eac <interrupt_WallCut+0xb54>)
 8006c8c:	ed93 7a00 	vldr	s14, [r3]
 8006c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006c94:	4b8a      	ldr	r3, [pc, #552]	; (8006ec0 <interrupt_WallCut+0xb68>)
 8006c96:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006c9a:	4b84      	ldr	r3, [pc, #528]	; (8006eac <interrupt_WallCut+0xb54>)
 8006c9c:	edd3 7a00 	vldr	s15, [r3]
 8006ca0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8006eb8 <interrupt_WallCut+0xb60>
 8006ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ca8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006ebc <interrupt_WallCut+0xb64>
 8006cac:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006cb0:	4b7e      	ldr	r3, [pc, #504]	; (8006eac <interrupt_WallCut+0xb54>)
 8006cb2:	ed93 7a00 	vldr	s14, [r3]
 8006cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006cba:	4b82      	ldr	r3, [pc, #520]	; (8006ec4 <interrupt_WallCut+0xb6c>)
 8006cbc:	edc3 7a00 	vstr	s15, [r3]
 8006cc0:	e085      	b.n	8006dce <interrupt_WallCut+0xa76>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006cc2:	4b7a      	ldr	r3, [pc, #488]	; (8006eac <interrupt_WallCut+0xb54>)
 8006cc4:	edd3 7a00 	vldr	s15, [r3]
 8006cc8:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8006eb8 <interrupt_WallCut+0xb60>
 8006ccc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cd0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006ebc <interrupt_WallCut+0xb64>
 8006cd4:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006cd8:	4b74      	ldr	r3, [pc, #464]	; (8006eac <interrupt_WallCut+0xb54>)
 8006cda:	ed93 7a00 	vldr	s14, [r3]
 8006cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006ce2:	4b77      	ldr	r3, [pc, #476]	; (8006ec0 <interrupt_WallCut+0xb68>)
 8006ce4:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006ce8:	4b70      	ldr	r3, [pc, #448]	; (8006eac <interrupt_WallCut+0xb54>)
 8006cea:	edd3 7a00 	vldr	s15, [r3]
 8006cee:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8006eb8 <interrupt_WallCut+0xb60>
 8006cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cf6:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8006ebc <interrupt_WallCut+0xb64>
 8006cfa:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006cfe:	4b6b      	ldr	r3, [pc, #428]	; (8006eac <interrupt_WallCut+0xb54>)
 8006d00:	ed93 7a00 	vldr	s14, [r3]
 8006d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006d08:	4b6e      	ldr	r3, [pc, #440]	; (8006ec4 <interrupt_WallCut+0xb6c>)
 8006d0a:	edc3 7a00 	vstr	s15, [r3]
 8006d0e:	e05e      	b.n	8006dce <interrupt_WallCut+0xa76>
				NoWallCountR45slant++;
 8006d10:	4b67      	ldr	r3, [pc, #412]	; (8006eb0 <interrupt_WallCut+0xb58>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	4a66      	ldr	r2, [pc, #408]	; (8006eb0 <interrupt_WallCut+0xb58>)
 8006d18:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006d1a:	4b6a      	ldr	r3, [pc, #424]	; (8006ec4 <interrupt_WallCut+0xb6c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7f9 fc3a 	bl	8000598 <__aeabi_f2d>
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	4b67      	ldr	r3, [pc, #412]	; (8006ec8 <interrupt_WallCut+0xb70>)
 8006d2a:	ed93 7a00 	vldr	s14, [r3]
 8006d2e:	4b67      	ldr	r3, [pc, #412]	; (8006ecc <interrupt_WallCut+0xb74>)
 8006d30:	edd3 7a00 	vldr	s15, [r3]
 8006d34:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006d38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d40:	ee16 0a90 	vmov	r0, s13
 8006d44:	f7f9 fc28 	bl	8000598 <__aeabi_f2d>
 8006d48:	a355      	add	r3, pc, #340	; (adr r3, 8006ea0 <interrupt_WallCut+0xb48>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7f9 fc7b 	bl	8000648 <__aeabi_dmul>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 fabf 	bl	80002dc <__adddf3>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	f7f9 ff47 	bl	8000bf8 <__aeabi_d2f>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4a55      	ldr	r2, [pc, #340]	; (8006ec4 <interrupt_WallCut+0xb6c>)
 8006d6e:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006d70:	4b57      	ldr	r3, [pc, #348]	; (8006ed0 <interrupt_WallCut+0xb78>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d12a      	bne.n	8006dce <interrupt_WallCut+0xa76>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006d78:	4b51      	ldr	r3, [pc, #324]	; (8006ec0 <interrupt_WallCut+0xb68>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7f9 fc0b 	bl	8000598 <__aeabi_f2d>
 8006d82:	4604      	mov	r4, r0
 8006d84:	460d      	mov	r5, r1
 8006d86:	4b50      	ldr	r3, [pc, #320]	; (8006ec8 <interrupt_WallCut+0xb70>)
 8006d88:	ed93 7a00 	vldr	s14, [r3]
 8006d8c:	4b4f      	ldr	r3, [pc, #316]	; (8006ecc <interrupt_WallCut+0xb74>)
 8006d8e:	edd3 7a00 	vldr	s15, [r3]
 8006d92:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006d96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d9e:	ee16 0a90 	vmov	r0, s13
 8006da2:	f7f9 fbf9 	bl	8000598 <__aeabi_f2d>
 8006da6:	a33e      	add	r3, pc, #248	; (adr r3, 8006ea0 <interrupt_WallCut+0xb48>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 fc4c 	bl	8000648 <__aeabi_dmul>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	f7f9 fa90 	bl	80002dc <__adddf3>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	f7f9 ff18 	bl	8000bf8 <__aeabi_d2f>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	4a3d      	ldr	r2, [pc, #244]	; (8006ec0 <interrupt_WallCut+0xb68>)
 8006dcc:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006dce:	4b40      	ldr	r3, [pc, #256]	; (8006ed0 <interrupt_WallCut+0xb78>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	701a      	strb	r2, [r3, #0]
}
 8006dd4:	e05f      	b.n	8006e96 <interrupt_WallCut+0xb3e>
		NoWallCountL90 = 0;
 8006dd6:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <interrupt_WallCut+0xb7c>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006ddc:	4b3e      	ldr	r3, [pc, #248]	; (8006ed8 <interrupt_WallCut+0xb80>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006de2:	4b3e      	ldr	r3, [pc, #248]	; (8006edc <interrupt_WallCut+0xb84>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006de8:	4b3d      	ldr	r3, [pc, #244]	; (8006ee0 <interrupt_WallCut+0xb88>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006dee:	4b3d      	ldr	r3, [pc, #244]	; (8006ee4 <interrupt_WallCut+0xb8c>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006df4:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <interrupt_WallCut+0xb58>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006dfa:	4b3b      	ldr	r3, [pc, #236]	; (8006ee8 <interrupt_WallCut+0xb90>)
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006e02:	4b3a      	ldr	r3, [pc, #232]	; (8006eec <interrupt_WallCut+0xb94>)
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006e0a:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <interrupt_WallCut+0xb98>)
 8006e0c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006e10:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006e12:	4b38      	ldr	r3, [pc, #224]	; (8006ef4 <interrupt_WallCut+0xb9c>)
 8006e14:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006e18:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006e1a:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <interrupt_WallCut+0xba0>)
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006e22:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <interrupt_WallCut+0xb68>)
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006e2a:	4b34      	ldr	r3, [pc, #208]	; (8006efc <interrupt_WallCut+0xba4>)
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006e32:	4b24      	ldr	r3, [pc, #144]	; (8006ec4 <interrupt_WallCut+0xb6c>)
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006e3a:	4b31      	ldr	r3, [pc, #196]	; (8006f00 <interrupt_WallCut+0xba8>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006e40:	4b30      	ldr	r3, [pc, #192]	; (8006f04 <interrupt_WallCut+0xbac>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006e46:	4b30      	ldr	r3, [pc, #192]	; (8006f08 <interrupt_WallCut+0xbb0>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006e4c:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <interrupt_WallCut+0xb5c>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006e52:	4b2e      	ldr	r3, [pc, #184]	; (8006f0c <interrupt_WallCut+0xbb4>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006e58:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <interrupt_WallCut+0xb78>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <interrupt_WallCut+0xbb8>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006e64:	4b2b      	ldr	r3, [pc, #172]	; (8006f14 <interrupt_WallCut+0xbbc>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006e6a:	4b2b      	ldr	r3, [pc, #172]	; (8006f18 <interrupt_WallCut+0xbc0>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006e70:	4b29      	ldr	r3, [pc, #164]	; (8006f18 <interrupt_WallCut+0xbc0>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006e76:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <interrupt_WallCut+0xbc4>)
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006e7e:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <interrupt_WallCut+0xbc8>)
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006e86:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <interrupt_WallCut+0xbcc>)
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <interrupt_WallCut+0xb54>)
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006ea4:	3f50624d 	.word	0x3f50624d
 8006ea8:	200002b8 	.word	0x200002b8
 8006eac:	20000604 	.word	0x20000604
 8006eb0:	200005c4 	.word	0x200005c4
 8006eb4:	200005ef 	.word	0x200005ef
 8006eb8:	455ac000 	.word	0x455ac000
 8006ebc:	00000000 	.word	0x00000000
 8006ec0:	200005dc 	.word	0x200005dc
 8006ec4:	200005e4 	.word	0x200005e4
 8006ec8:	20000258 	.word	0x20000258
 8006ecc:	2000025c 	.word	0x2000025c
 8006ed0:	200005f1 	.word	0x200005f1
 8006ed4:	200005b8 	.word	0x200005b8
 8006ed8:	200005b4 	.word	0x200005b4
 8006edc:	200005c0 	.word	0x200005c0
 8006ee0:	200005bc 	.word	0x200005bc
 8006ee4:	200005c8 	.word	0x200005c8
 8006ee8:	200005d0 	.word	0x200005d0
 8006eec:	200005cc 	.word	0x200005cc
 8006ef0:	200005d8 	.word	0x200005d8
 8006ef4:	200005d4 	.word	0x200005d4
 8006ef8:	200005e0 	.word	0x200005e0
 8006efc:	200005e8 	.word	0x200005e8
 8006f00:	200005ec 	.word	0x200005ec
 8006f04:	200005ed 	.word	0x200005ed
 8006f08:	200005ee 	.word	0x200005ee
 8006f0c:	200005f0 	.word	0x200005f0
 8006f10:	200005f2 	.word	0x200005f2
 8006f14:	200005f3 	.word	0x200005f3
 8006f18:	200005f4 	.word	0x200005f4
 8006f1c:	200005f8 	.word	0x200005f8
 8006f20:	200005fc 	.word	0x200005fc
 8006f24:	20000600 	.word	0x20000600

08006f28 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f3e:	f013 ff7b 	bl	801ae38 <HAL_GPIO_WritePin>
}
 8006f42:	bf00      	nop
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2140      	movs	r1, #64	; 0x40
 8006f5c:	4803      	ldr	r0, [pc, #12]	; (8006f6c <pl_yellow_LED_3+0x20>)
 8006f5e:	f013 ff6b 	bl	801ae38 <HAL_GPIO_WritePin>
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	48000800 	.word	0x48000800

08006f70 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f82:	4803      	ldr	r0, [pc, #12]	; (8006f90 <pl_yellow_LED_6+0x20>)
 8006f84:	f013 ff58 	bl	801ae38 <HAL_GPIO_WritePin>
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	48000400 	.word	0x48000400

08006f94 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fa6:	4803      	ldr	r0, [pc, #12]	; (8006fb4 <pl_yellow_LED_8+0x20>)
 8006fa8:	f013 ff46 	bl	801ae38 <HAL_GPIO_WritePin>
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	48000400 	.word	0x48000400

08006fb8 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fc6:	f013 ff37 	bl	801ae38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fd4:	f013 ff30 	bl	801ae38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2140      	movs	r1, #64	; 0x40
 8006fdc:	4811      	ldr	r0, [pc, #68]	; (8007024 <pl_yellow_LED_off+0x6c>)
 8006fde:	f013 ff2b 	bl	801ae38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fe8:	480f      	ldr	r0, [pc, #60]	; (8007028 <pl_yellow_LED_off+0x70>)
 8006fea:	f013 ff25 	bl	801ae38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ff4:	480c      	ldr	r0, [pc, #48]	; (8007028 <pl_yellow_LED_off+0x70>)
 8006ff6:	f013 ff1f 	bl	801ae38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007000:	4809      	ldr	r0, [pc, #36]	; (8007028 <pl_yellow_LED_off+0x70>)
 8007002:	f013 ff19 	bl	801ae38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007006:	2200      	movs	r2, #0
 8007008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800700c:	4806      	ldr	r0, [pc, #24]	; (8007028 <pl_yellow_LED_off+0x70>)
 800700e:	f013 ff13 	bl	801ae38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007012:	2200      	movs	r2, #0
 8007014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007018:	4803      	ldr	r0, [pc, #12]	; (8007028 <pl_yellow_LED_off+0x70>)
 800701a:	f013 ff0d 	bl	801ae38 <HAL_GPIO_WritePin>
}
 800701e:	bf00      	nop
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	48000800 	.word	0x48000800
 8007028:	48000400 	.word	0x48000400

0800702c <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 800704e:	79fb      	ldrb	r3, [r7, #7]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007074:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d007      	beq.n	800708c <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 800707c:	2201      	movs	r2, #1
 800707e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007086:	f013 fed7 	bl	801ae38 <HAL_GPIO_WritePin>
 800708a:	e006      	b.n	800709a <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 800708c:	2200      	movs	r2, #0
 800708e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007096:	f013 fecf 	bl	801ae38 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d007      	beq.n	80070b0 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 80070a0:	2201      	movs	r2, #1
 80070a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070aa:	f013 fec5 	bl	801ae38 <HAL_GPIO_WritePin>
 80070ae:	e006      	b.n	80070be <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80070b0:	2200      	movs	r2, #0
 80070b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070ba:	f013 febd 	bl	801ae38 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 80070be:	7b7b      	ldrb	r3, [r7, #13]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80070c4:	2201      	movs	r2, #1
 80070c6:	2140      	movs	r1, #64	; 0x40
 80070c8:	482e      	ldr	r0, [pc, #184]	; (8007184 <pl_yellow_LED_count+0x158>)
 80070ca:	f013 feb5 	bl	801ae38 <HAL_GPIO_WritePin>
 80070ce:	e004      	b.n	80070da <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 80070d0:	2200      	movs	r2, #0
 80070d2:	2140      	movs	r1, #64	; 0x40
 80070d4:	482b      	ldr	r0, [pc, #172]	; (8007184 <pl_yellow_LED_count+0x158>)
 80070d6:	f013 feaf 	bl	801ae38 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 80070da:	7b3b      	ldrb	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 80070e0:	2201      	movs	r2, #1
 80070e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070e6:	4828      	ldr	r0, [pc, #160]	; (8007188 <pl_yellow_LED_count+0x15c>)
 80070e8:	f013 fea6 	bl	801ae38 <HAL_GPIO_WritePin>
 80070ec:	e005      	b.n	80070fa <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 80070ee:	2200      	movs	r2, #0
 80070f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070f4:	4824      	ldr	r0, [pc, #144]	; (8007188 <pl_yellow_LED_count+0x15c>)
 80070f6:	f013 fe9f 	bl	801ae38 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 80070fa:	7afb      	ldrb	r3, [r7, #11]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d006      	beq.n	800710e <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8007100:	2201      	movs	r2, #1
 8007102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007106:	4820      	ldr	r0, [pc, #128]	; (8007188 <pl_yellow_LED_count+0x15c>)
 8007108:	f013 fe96 	bl	801ae38 <HAL_GPIO_WritePin>
 800710c:	e005      	b.n	800711a <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 800710e:	2200      	movs	r2, #0
 8007110:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007114:	481c      	ldr	r0, [pc, #112]	; (8007188 <pl_yellow_LED_count+0x15c>)
 8007116:	f013 fe8f 	bl	801ae38 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 800711a:	7abb      	ldrb	r3, [r7, #10]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d006      	beq.n	800712e <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8007120:	2201      	movs	r2, #1
 8007122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007126:	4818      	ldr	r0, [pc, #96]	; (8007188 <pl_yellow_LED_count+0x15c>)
 8007128:	f013 fe86 	bl	801ae38 <HAL_GPIO_WritePin>
 800712c:	e005      	b.n	800713a <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800712e:	2200      	movs	r2, #0
 8007130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007134:	4814      	ldr	r0, [pc, #80]	; (8007188 <pl_yellow_LED_count+0x15c>)
 8007136:	f013 fe7f 	bl	801ae38 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 800713a:	7a7b      	ldrb	r3, [r7, #9]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d006      	beq.n	800714e <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8007140:	2201      	movs	r2, #1
 8007142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007146:	4810      	ldr	r0, [pc, #64]	; (8007188 <pl_yellow_LED_count+0x15c>)
 8007148:	f013 fe76 	bl	801ae38 <HAL_GPIO_WritePin>
 800714c:	e005      	b.n	800715a <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 800714e:	2200      	movs	r2, #0
 8007150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007154:	480c      	ldr	r0, [pc, #48]	; (8007188 <pl_yellow_LED_count+0x15c>)
 8007156:	f013 fe6f 	bl	801ae38 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 800715a:	7a3b      	ldrb	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d006      	beq.n	800716e <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007160:	2201      	movs	r2, #1
 8007162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007166:	4808      	ldr	r0, [pc, #32]	; (8007188 <pl_yellow_LED_count+0x15c>)
 8007168:	f013 fe66 	bl	801ae38 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 800716c:	e005      	b.n	800717a <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 800716e:	2200      	movs	r2, #0
 8007170:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007174:	4804      	ldr	r0, [pc, #16]	; (8007188 <pl_yellow_LED_count+0x15c>)
 8007176:	f013 fe5f 	bl	801ae38 <HAL_GPIO_WritePin>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	48000800 	.word	0x48000800
 8007188:	48000400 	.word	0x48000400

0800718c <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800719e:	4803      	ldr	r0, [pc, #12]	; (80071ac <pl_r_blue_LED+0x20>)
 80071a0:	f013 fe4a 	bl	801ae38 <HAL_GPIO_WritePin>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	48000800 	.word	0x48000800

080071b0 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	2104      	movs	r1, #4
 80071c0:	4803      	ldr	r0, [pc, #12]	; (80071d0 <pl_l_blue_LED+0x20>)
 80071c2:	f013 fe39 	bl	801ae38 <HAL_GPIO_WritePin>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	48000400 	.word	0x48000400

080071d4 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	460a      	mov	r2, r1
 80071de:	80fb      	strh	r3, [r7, #6]
 80071e0:	4613      	mov	r3, r2
 80071e2:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80071e4:	2200      	movs	r2, #0
 80071e6:	2110      	movs	r1, #16
 80071e8:	4833      	ldr	r0, [pc, #204]	; (80072b8 <encoder_read_byte_R+0xe4>)
 80071ea:	f013 fe25 	bl	801ae38 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071f4:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	e00d      	b.n	800721c <encoder_read_byte_R+0x48>
 8007200:	88fa      	ldrh	r2, [r7, #6]
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	fa42 f303 	asr.w	r3, r2, r3
 8007208:	b29b      	uxth	r3, r3
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	8bfb      	ldrh	r3, [r7, #30]
 8007212:	4413      	add	r3, r2
 8007214:	83fb      	strh	r3, [r7, #30]
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	3301      	adds	r3, #1
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2b0e      	cmp	r3, #14
 8007220:	ddee      	ble.n	8007200 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007222:	8bfb      	ldrh	r3, [r7, #30]
 8007224:	03db      	lsls	r3, r3, #15
 8007226:	b21a      	sxth	r2, r3
 8007228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800722c:	4313      	orrs	r3, r2
 800722e:	b21b      	sxth	r3, r3
 8007230:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	0a1b      	lsrs	r3, r3, #8
 8007236:	b29b      	uxth	r3, r3
 8007238:	b2db      	uxtb	r3, r3
 800723a:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 8007242:	f107 0110 	add.w	r1, r7, #16
 8007246:	2332      	movs	r3, #50	; 0x32
 8007248:	2202      	movs	r2, #2
 800724a:	481c      	ldr	r0, [pc, #112]	; (80072bc <encoder_read_byte_R+0xe8>)
 800724c:	f014 fed7 	bl	801bffe <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007250:	2201      	movs	r2, #1
 8007252:	2110      	movs	r1, #16
 8007254:	4818      	ldr	r0, [pc, #96]	; (80072b8 <encoder_read_byte_R+0xe4>)
 8007256:	f013 fdef 	bl	801ae38 <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e002      	b.n	8007266 <encoder_read_byte_R+0x92>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	3301      	adds	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b31      	cmp	r3, #49	; 0x31
 800726a:	ddf9      	ble.n	8007260 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800726c:	2200      	movs	r2, #0
 800726e:	2110      	movs	r1, #16
 8007270:	4811      	ldr	r0, [pc, #68]	; (80072b8 <encoder_read_byte_R+0xe4>)
 8007272:	f013 fde1 	bl	801ae38 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8007276:	88bb      	ldrh	r3, [r7, #4]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	b29b      	uxth	r3, r3
 800727c:	b2db      	uxtb	r3, r3
 800727e:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007280:	88bb      	ldrh	r3, [r7, #4]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 8007286:	f107 010c 	add.w	r1, r7, #12
 800728a:	2332      	movs	r3, #50	; 0x32
 800728c:	2202      	movs	r2, #2
 800728e:	480b      	ldr	r0, [pc, #44]	; (80072bc <encoder_read_byte_R+0xe8>)
 8007290:	f015 f823 	bl	801c2da <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007294:	7b3b      	ldrb	r3, [r7, #12]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	b21a      	sxth	r2, r3
 800729a:	7b7b      	ldrb	r3, [r7, #13]
 800729c:	b21b      	sxth	r3, r3
 800729e:	4313      	orrs	r3, r2
 80072a0:	b21b      	sxth	r3, r3
 80072a2:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80072a4:	2201      	movs	r2, #1
 80072a6:	2110      	movs	r1, #16
 80072a8:	4803      	ldr	r0, [pc, #12]	; (80072b8 <encoder_read_byte_R+0xe4>)
 80072aa:	f013 fdc5 	bl	801ae38 <HAL_GPIO_WritePin>

	return data;
 80072ae:	88bb      	ldrh	r3, [r7, #4]

}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3720      	adds	r7, #32
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	48000400 	.word	0x48000400
 80072bc:	2000d9e0 	.word	0x2000d9e0

080072c0 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	460a      	mov	r2, r1
 80072ca:	80fb      	strh	r3, [r7, #6]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80072d0:	2200      	movs	r2, #0
 80072d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072da:	f013 fdad 	bl	801ae38 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072e4:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	e00d      	b.n	800730c <encoder_read_byte_L+0x4c>
 80072f0:	88fa      	ldrh	r2, [r7, #6]
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	fa42 f303 	asr.w	r3, r2, r3
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	8bfb      	ldrh	r3, [r7, #30]
 8007302:	4413      	add	r3, r2
 8007304:	83fb      	strh	r3, [r7, #30]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	3301      	adds	r3, #1
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b0e      	cmp	r3, #14
 8007310:	ddee      	ble.n	80072f0 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007312:	8bfb      	ldrh	r3, [r7, #30]
 8007314:	03db      	lsls	r3, r3, #15
 8007316:	b21a      	sxth	r2, r3
 8007318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800731c:	4313      	orrs	r3, r2
 800731e:	b21b      	sxth	r3, r3
 8007320:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	0a1b      	lsrs	r3, r3, #8
 8007326:	b29b      	uxth	r3, r3
 8007328:	b2db      	uxtb	r3, r3
 800732a:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 800732c:	88fb      	ldrh	r3, [r7, #6]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 8007332:	f107 0110 	add.w	r1, r7, #16
 8007336:	2332      	movs	r3, #50	; 0x32
 8007338:	2202      	movs	r2, #2
 800733a:	481e      	ldr	r0, [pc, #120]	; (80073b4 <encoder_read_byte_L+0xf4>)
 800733c:	f014 fe5f 	bl	801bffe <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007340:	2201      	movs	r2, #1
 8007342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800734a:	f013 fd75 	bl	801ae38 <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e002      	b.n	800735a <encoder_read_byte_L+0x9a>
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	3301      	adds	r3, #1
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b31      	cmp	r3, #49	; 0x31
 800735e:	ddf9      	ble.n	8007354 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007360:	2200      	movs	r2, #0
 8007362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800736a:	f013 fd65 	bl	801ae38 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 800736e:	88bb      	ldrh	r3, [r7, #4]
 8007370:	0a1b      	lsrs	r3, r3, #8
 8007372:	b29b      	uxth	r3, r3
 8007374:	b2db      	uxtb	r3, r3
 8007376:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007378:	88bb      	ldrh	r3, [r7, #4]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 800737e:	f107 010c 	add.w	r1, r7, #12
 8007382:	2332      	movs	r3, #50	; 0x32
 8007384:	2202      	movs	r2, #2
 8007386:	480b      	ldr	r0, [pc, #44]	; (80073b4 <encoder_read_byte_L+0xf4>)
 8007388:	f014 ffa7 	bl	801c2da <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 800738c:	7b3b      	ldrb	r3, [r7, #12]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	b21a      	sxth	r2, r3
 8007392:	7b7b      	ldrb	r3, [r7, #13]
 8007394:	b21b      	sxth	r3, r3
 8007396:	4313      	orrs	r3, r2
 8007398:	b21b      	sxth	r3, r3
 800739a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800739c:	2201      	movs	r2, #1
 800739e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073a6:	f013 fd47 	bl	801ae38 <HAL_GPIO_WritePin>

	return data;
 80073aa:	88bb      	ldrh	r3, [r7, #4]

}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3720      	adds	r7, #32
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	2000d9e0 	.word	0x2000d9e0

080073b8 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80073bc:	2100      	movs	r1, #0
 80073be:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80073c2:	f7ff ff07 	bl	80071d4 <encoder_read_byte_R>
 80073c6:	4603      	mov	r3, r0
 80073c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800741c <AS5047_DataUpdate+0x64>
 80073d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80073dc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007420 <AS5047_DataUpdate+0x68>
 80073e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <AS5047_DataUpdate+0x6c>)
 80073e6:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80073ea:	2100      	movs	r1, #0
 80073ec:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80073f0:	f7ff ff66 	bl	80072c0 <encoder_read_byte_L>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007402:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800741c <AS5047_DataUpdate+0x64>
 8007406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800740a:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007420 <AS5047_DataUpdate+0x68>
 800740e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007412:	4b05      	ldr	r3, [pc, #20]	; (8007428 <AS5047_DataUpdate+0x70>)
 8007414:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8007418:	bf00      	nop
 800741a:	bd80      	pop	{r7, pc}
 800741c:	43b40000 	.word	0x43b40000
 8007420:	46800000 	.word	0x46800000
 8007424:	200006d8 	.word	0x200006d8
 8007428:	200006dc 	.word	0x200006dc

0800742c <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
		  record_out();
 8007430:	f000 f91a 	bl	8007668 <record_out>
		  maze_display();
 8007434:	f00d f8ac 	bl	8014590 <maze_display>
		  flash_record_init();
 8007438:	f000 f9c2 	bl	80077c0 <flash_record_init>
		  record_in();
 800743c:	f000 f858 	bl	80074f0 <record_in>
}
 8007440:	bf00      	nop
 8007442:	bd80      	pop	{r7, pc}

08007444 <eraseFlash>:


void eraseFlash( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 800744a:	2300      	movs	r3, #0
 800744c:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 800744e:	2301      	movs	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 8007452:	23fe      	movs	r3, #254	; 0xfe
 8007454:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8007456:	2301      	movs	r3, #1
 8007458:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 800745e:	1d3a      	adds	r2, r7, #4
 8007460:	f107 0308 	add.w	r3, r7, #8
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f013 fa3e 	bl	801a8e8 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 800746c:	bf00      	nop
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007474:	b5b0      	push	{r4, r5, r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8007482:	f013 f945 	bl	801a710 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <writeFlash+0x1c>
 800748c:	f7ff ffda 	bl	8007444 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	e00f      	b.n	80074b6 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	17da      	asrs	r2, r3, #31
 800749a:	461c      	mov	r4, r3
 800749c:	4615      	mov	r5, r2
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	2000      	movs	r0, #0
 80074a6:	f013 f8dd 	bl	801a664 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	3320      	adds	r3, #32
 80074ae:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	3308      	adds	r3, #8
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4413      	add	r3, r2
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d3e9      	bcc.n	8007496 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 80074c2:	f013 f947 	bl	801a754 <HAL_FLASH_Lock>

}
 80074c6:	bf00      	nop
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bdb0      	pop	{r4, r5, r7, pc}

080074ce <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4619      	mov	r1, r3
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f017 fdbf 	bl	801f064 <memcpy>

}
 80074e6:	bf00      	nop
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <record_in>:


void record_in(void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
	int t = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80074fa:	4b58      	ldr	r3, [pc, #352]	; (800765c <record_in+0x16c>)
 80074fc:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 80074fe:	e017      	b.n	8007530 <record_in+0x40>
		record.row[t] = wall.row[t];
 8007500:	4a57      	ldr	r2, [pc, #348]	; (8007660 <record_in+0x170>)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007508:	4a56      	ldr	r2, [pc, #344]	; (8007664 <record_in+0x174>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 8007510:	4a53      	ldr	r2, [pc, #332]	; (8007660 <record_in+0x170>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	330c      	adds	r3, #12
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	4413      	add	r3, r2
 800751a:	88d9      	ldrh	r1, [r3, #6]
 800751c:	4a51      	ldr	r2, [pc, #324]	; (8007664 <record_in+0x174>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	330c      	adds	r3, #12
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	460a      	mov	r2, r1
 8007528:	80da      	strh	r2, [r3, #6]
		t++;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3301      	adds	r3, #1
 800752e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b0e      	cmp	r3, #14
 8007534:	dde4      	ble.n	8007500 <record_in+0x10>
	}
	t = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800753a:	e01c      	b.n	8007576 <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 800753c:	4a48      	ldr	r2, [pc, #288]	; (8007660 <record_in+0x170>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	331c      	adds	r3, #28
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	4413      	add	r3, r2
 8007546:	8899      	ldrh	r1, [r3, #4]
 8007548:	4a46      	ldr	r2, [pc, #280]	; (8007664 <record_in+0x174>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	331c      	adds	r3, #28
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	4413      	add	r3, r2
 8007552:	460a      	mov	r2, r1
 8007554:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 8007556:	4a42      	ldr	r2, [pc, #264]	; (8007660 <record_in+0x170>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	332c      	adds	r3, #44	; 0x2c
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4413      	add	r3, r2
 8007560:	8859      	ldrh	r1, [r3, #2]
 8007562:	4a40      	ldr	r2, [pc, #256]	; (8007664 <record_in+0x174>)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	332c      	adds	r3, #44	; 0x2c
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	460a      	mov	r2, r1
 800756e:	805a      	strh	r2, [r3, #2]
		t++;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3301      	adds	r3, #1
 8007574:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b0e      	cmp	r3, #14
 800757a:	dddf      	ble.n	800753c <record_in+0x4c>
	}
	t = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8007580:	4b38      	ldr	r3, [pc, #224]	; (8007664 <record_in+0x174>)
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	4619      	mov	r1, r3
 8007586:	2301      	movs	r3, #1
 8007588:	2201      	movs	r2, #1
 800758a:	6838      	ldr	r0, [r7, #0]
 800758c:	f7ff ff72 	bl	8007474 <writeFlash>
	address+=16;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	3310      	adds	r3, #16
 8007594:	603b      	str	r3, [r7, #0]
	t=1;
 8007596:	2301      	movs	r3, #1
 8007598:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 800759a:	e00f      	b.n	80075bc <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 800759c:	4a31      	ldr	r2, [pc, #196]	; (8007664 <record_in+0x174>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a4:	4619      	mov	r1, r3
 80075a6:	2300      	movs	r3, #0
 80075a8:	2201      	movs	r2, #1
 80075aa:	6838      	ldr	r0, [r7, #0]
 80075ac:	f7ff ff62 	bl	8007474 <writeFlash>
	address+=16;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	3310      	adds	r3, #16
 80075b4:	603b      	str	r3, [r7, #0]
	t++;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3301      	adds	r3, #1
 80075ba:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b0e      	cmp	r3, #14
 80075c0:	ddec      	ble.n	800759c <record_in+0xac>
	}

	t=0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075c6:	e011      	b.n	80075ec <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 80075c8:	4a26      	ldr	r2, [pc, #152]	; (8007664 <record_in+0x174>)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	330c      	adds	r3, #12
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	88db      	ldrh	r3, [r3, #6]
 80075d4:	4619      	mov	r1, r3
 80075d6:	2300      	movs	r3, #0
 80075d8:	2201      	movs	r2, #1
 80075da:	6838      	ldr	r0, [r7, #0]
 80075dc:	f7ff ff4a 	bl	8007474 <writeFlash>
	address+=16;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	3310      	adds	r3, #16
 80075e4:	603b      	str	r3, [r7, #0]
	t++;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3301      	adds	r3, #1
 80075ea:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b0e      	cmp	r3, #14
 80075f0:	ddea      	ble.n	80075c8 <record_in+0xd8>
	}

	t=0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075f6:	e011      	b.n	800761c <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80075f8:	4a1a      	ldr	r2, [pc, #104]	; (8007664 <record_in+0x174>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	331c      	adds	r3, #28
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	4413      	add	r3, r2
 8007602:	889b      	ldrh	r3, [r3, #4]
 8007604:	4619      	mov	r1, r3
 8007606:	2300      	movs	r3, #0
 8007608:	2201      	movs	r2, #1
 800760a:	6838      	ldr	r0, [r7, #0]
 800760c:	f7ff ff32 	bl	8007474 <writeFlash>
	address+=16;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	3310      	adds	r3, #16
 8007614:	603b      	str	r3, [r7, #0]
	t++;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3301      	adds	r3, #1
 800761a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b0e      	cmp	r3, #14
 8007620:	ddea      	ble.n	80075f8 <record_in+0x108>
	}

	t=0;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007626:	e011      	b.n	800764c <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 8007628:	4a0e      	ldr	r2, [pc, #56]	; (8007664 <record_in+0x174>)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	332c      	adds	r3, #44	; 0x2c
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	4413      	add	r3, r2
 8007632:	885b      	ldrh	r3, [r3, #2]
 8007634:	4619      	mov	r1, r3
 8007636:	2300      	movs	r3, #0
 8007638:	2201      	movs	r2, #1
 800763a:	6838      	ldr	r0, [r7, #0]
 800763c:	f7ff ff1a 	bl	8007474 <writeFlash>
	address+=16;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	3310      	adds	r3, #16
 8007644:	603b      	str	r3, [r7, #0]
	t++;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3301      	adds	r3, #1
 800764a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b0e      	cmp	r3, #14
 8007650:	ddea      	ble.n	8007628 <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	0807f000 	.word	0x0807f000
 8007660:	20000c3c 	.word	0x20000c3c
 8007664:	20000cb4 	.word	0x20000cb4

08007668 <record_out>:


void record_out(void) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 800766e:	2300      	movs	r3, #0
 8007670:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007672:	4b50      	ldr	r3, [pc, #320]	; (80077b4 <record_out+0x14c>)
 8007674:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 8007676:	e00e      	b.n	8007696 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	4a4e      	ldr	r2, [pc, #312]	; (80077b8 <record_out+0x150>)
 800767e:	4413      	add	r3, r2
 8007680:	2202      	movs	r2, #2
 8007682:	4619      	mov	r1, r3
 8007684:	6838      	ldr	r0, [r7, #0]
 8007686:	f7ff ff22 	bl	80074ce <loadFlash>
	address+=16;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	3310      	adds	r3, #16
 800768e:	603b      	str	r3, [r7, #0]
	t++;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3301      	adds	r3, #1
 8007694:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b0e      	cmp	r3, #14
 800769a:	dded      	ble.n	8007678 <record_out+0x10>
	}

	t=0;
 800769c:	2300      	movs	r3, #0
 800769e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076a0:	e010      	b.n	80076c4 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	330c      	adds	r3, #12
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	4a43      	ldr	r2, [pc, #268]	; (80077b8 <record_out+0x150>)
 80076aa:	4413      	add	r3, r2
 80076ac:	3306      	adds	r3, #6
 80076ae:	2202      	movs	r2, #2
 80076b0:	4619      	mov	r1, r3
 80076b2:	6838      	ldr	r0, [r7, #0]
 80076b4:	f7ff ff0b 	bl	80074ce <loadFlash>
	address+=16;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	3310      	adds	r3, #16
 80076bc:	603b      	str	r3, [r7, #0]
	t++;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3301      	adds	r3, #1
 80076c2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b0e      	cmp	r3, #14
 80076c8:	ddeb      	ble.n	80076a2 <record_out+0x3a>
	}

	t=0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076ce:	e010      	b.n	80076f2 <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	331c      	adds	r3, #28
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4a38      	ldr	r2, [pc, #224]	; (80077b8 <record_out+0x150>)
 80076d8:	4413      	add	r3, r2
 80076da:	3304      	adds	r3, #4
 80076dc:	2202      	movs	r2, #2
 80076de:	4619      	mov	r1, r3
 80076e0:	6838      	ldr	r0, [r7, #0]
 80076e2:	f7ff fef4 	bl	80074ce <loadFlash>
		address+=16;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	3310      	adds	r3, #16
 80076ea:	603b      	str	r3, [r7, #0]
		t++;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3301      	adds	r3, #1
 80076f0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b0e      	cmp	r3, #14
 80076f6:	ddeb      	ble.n	80076d0 <record_out+0x68>
	}

	t=0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076fc:	e010      	b.n	8007720 <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	332c      	adds	r3, #44	; 0x2c
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	4a2c      	ldr	r2, [pc, #176]	; (80077b8 <record_out+0x150>)
 8007706:	4413      	add	r3, r2
 8007708:	3302      	adds	r3, #2
 800770a:	2202      	movs	r2, #2
 800770c:	4619      	mov	r1, r3
 800770e:	6838      	ldr	r0, [r7, #0]
 8007710:	f7ff fedd 	bl	80074ce <loadFlash>
		address+=16;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	3310      	adds	r3, #16
 8007718:	603b      	str	r3, [r7, #0]
		t++;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3301      	adds	r3, #1
 800771e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b0e      	cmp	r3, #14
 8007724:	ddeb      	ble.n	80076fe <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800772a:	e017      	b.n	800775c <record_out+0xf4>
		wall.row[t] = record.row[t];
 800772c:	4a22      	ldr	r2, [pc, #136]	; (80077b8 <record_out+0x150>)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007734:	4a21      	ldr	r2, [pc, #132]	; (80077bc <record_out+0x154>)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 800773c:	4a1e      	ldr	r2, [pc, #120]	; (80077b8 <record_out+0x150>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	330c      	adds	r3, #12
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	4413      	add	r3, r2
 8007746:	88d9      	ldrh	r1, [r3, #6]
 8007748:	4a1c      	ldr	r2, [pc, #112]	; (80077bc <record_out+0x154>)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	330c      	adds	r3, #12
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	4413      	add	r3, r2
 8007752:	460a      	mov	r2, r1
 8007754:	80da      	strh	r2, [r3, #6]
		t++;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3301      	adds	r3, #1
 800775a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b0e      	cmp	r3, #14
 8007760:	dde4      	ble.n	800772c <record_out+0xc4>
	}
	t = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007766:	e01c      	b.n	80077a2 <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 8007768:	4a13      	ldr	r2, [pc, #76]	; (80077b8 <record_out+0x150>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	331c      	adds	r3, #28
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	4413      	add	r3, r2
 8007772:	8899      	ldrh	r1, [r3, #4]
 8007774:	4a11      	ldr	r2, [pc, #68]	; (80077bc <record_out+0x154>)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	331c      	adds	r3, #28
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4413      	add	r3, r2
 800777e:	460a      	mov	r2, r1
 8007780:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 8007782:	4a0d      	ldr	r2, [pc, #52]	; (80077b8 <record_out+0x150>)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	332c      	adds	r3, #44	; 0x2c
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	4413      	add	r3, r2
 800778c:	8859      	ldrh	r1, [r3, #2]
 800778e:	4a0b      	ldr	r2, [pc, #44]	; (80077bc <record_out+0x154>)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	332c      	adds	r3, #44	; 0x2c
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4413      	add	r3, r2
 8007798:	460a      	mov	r2, r1
 800779a:	805a      	strh	r2, [r3, #2]
		t++;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3301      	adds	r3, #1
 80077a0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b0e      	cmp	r3, #14
 80077a6:	dddf      	ble.n	8007768 <record_out+0x100>
	}

	t = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	607b      	str	r3, [r7, #4]

}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	0807f000 	.word	0x0807f000
 80077b8:	20000cb4 	.word	0x20000cb4
 80077bc:	20000c3c 	.word	0x20000c3c

080077c0 <flash_record_init>:

void flash_record_init(void){
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
	int t = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077ca:	e013      	b.n	80077f4 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 80077cc:	4a1e      	ldr	r2, [pc, #120]	; (8007848 <flash_record_init+0x88>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f240 11e3 	movw	r1, #483	; 0x1e3
 80077d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	b299      	uxth	r1, r3
 80077e0:	4a19      	ldr	r2, [pc, #100]	; (8007848 <flash_record_init+0x88>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	330c      	adds	r3, #12
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	4413      	add	r3, r2
 80077ea:	460a      	mov	r2, r1
 80077ec:	80da      	strh	r2, [r3, #6]
		t++;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3301      	adds	r3, #1
 80077f2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b0e      	cmp	r3, #14
 80077f8:	dde8      	ble.n	80077cc <flash_record_init+0xc>
	}
	t = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077fe:	e018      	b.n	8007832 <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	b29b      	uxth	r3, r3
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	b299      	uxth	r1, r3
 8007808:	4a0f      	ldr	r2, [pc, #60]	; (8007848 <flash_record_init+0x88>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	331c      	adds	r3, #28
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	460a      	mov	r2, r1
 8007814:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	b29b      	uxth	r3, r3
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	b299      	uxth	r1, r3
 800781e:	4a0a      	ldr	r2, [pc, #40]	; (8007848 <flash_record_init+0x88>)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	332c      	adds	r3, #44	; 0x2c
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	4413      	add	r3, r2
 8007828:	460a      	mov	r2, r1
 800782a:	805a      	strh	r2, [r3, #2]
		t++;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3301      	adds	r3, #1
 8007830:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b0e      	cmp	r3, #14
 8007836:	dde3      	ble.n	8007800 <flash_record_init+0x40>
	}

}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20000c3c 	.word	0x20000c3c

0800784c <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007856:	2200      	movs	r2, #0
 8007858:	2110      	movs	r1, #16
 800785a:	4810      	ldr	r0, [pc, #64]	; (800789c <gyro_read_byte+0x50>)
 800785c:	f013 faec 	bl	801ae38 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007866:	b2db      	uxtb	r3, r3
 8007868:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800786a:	f107 010f 	add.w	r1, r7, #15
 800786e:	2364      	movs	r3, #100	; 0x64
 8007870:	2201      	movs	r2, #1
 8007872:	480b      	ldr	r0, [pc, #44]	; (80078a0 <gyro_read_byte+0x54>)
 8007874:	f014 fbc3 	bl	801bffe <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8007878:	f107 010e 	add.w	r1, r7, #14
 800787c:	2364      	movs	r3, #100	; 0x64
 800787e:	2201      	movs	r2, #1
 8007880:	4807      	ldr	r0, [pc, #28]	; (80078a0 <gyro_read_byte+0x54>)
 8007882:	f014 fd2a 	bl	801c2da <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007886:	2201      	movs	r2, #1
 8007888:	2110      	movs	r1, #16
 800788a:	4804      	ldr	r0, [pc, #16]	; (800789c <gyro_read_byte+0x50>)
 800788c:	f013 fad4 	bl	801ae38 <HAL_GPIO_WritePin>

	return val;
 8007890:	7bbb      	ldrb	r3, [r7, #14]

}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	48000800 	.word	0x48000800
 80078a0:	2000d97c 	.word	0x2000d97c

080078a4 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	460a      	mov	r2, r1
 80078ae:	71fb      	strb	r3, [r7, #7]
 80078b0:	4613      	mov	r3, r2
 80078b2:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80078be:	2200      	movs	r2, #0
 80078c0:	2110      	movs	r1, #16
 80078c2:	480c      	ldr	r0, [pc, #48]	; (80078f4 <gyro_write_byte+0x50>)
 80078c4:	f013 fab8 	bl	801ae38 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80078c8:	f107 010f 	add.w	r1, r7, #15
 80078cc:	2364      	movs	r3, #100	; 0x64
 80078ce:	2201      	movs	r2, #1
 80078d0:	4809      	ldr	r0, [pc, #36]	; (80078f8 <gyro_write_byte+0x54>)
 80078d2:	f014 fb94 	bl	801bffe <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 80078d6:	1db9      	adds	r1, r7, #6
 80078d8:	2364      	movs	r3, #100	; 0x64
 80078da:	2201      	movs	r2, #1
 80078dc:	4806      	ldr	r0, [pc, #24]	; (80078f8 <gyro_write_byte+0x54>)
 80078de:	f014 fb8e 	bl	801bffe <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80078e2:	2201      	movs	r2, #1
 80078e4:	2110      	movs	r1, #16
 80078e6:	4803      	ldr	r0, [pc, #12]	; (80078f4 <gyro_write_byte+0x50>)
 80078e8:	f013 faa6 	bl	801ae38 <HAL_GPIO_WritePin>

}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	48000800 	.word	0x48000800
 80078f8:	2000d97c 	.word	0x2000d97c

080078fc <pl_gyro_init>:

void pl_gyro_init(void)

{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8007906:	2075      	movs	r0, #117	; 0x75
 8007908:	f7ff ffa0 	bl	800784c <gyro_read_byte>
 800790c:	4603      	mov	r3, r0
 800790e:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	4619      	mov	r1, r3
 8007914:	481b      	ldr	r0, [pc, #108]	; (8007984 <pl_gyro_init+0x88>)
 8007916:	f018 f825 	bl	801f964 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	2b98      	cmp	r3, #152	; 0x98
 800791e:	d00e      	beq.n	800793e <pl_gyro_init+0x42>

		HAL_Delay(100);
 8007920:	2064      	movs	r0, #100	; 0x64
 8007922:	f010 f8cd 	bl	8017ac0 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8007926:	2075      	movs	r0, #117	; 0x75
 8007928:	f7ff ff90 	bl	800784c <gyro_read_byte>
 800792c:	4603      	mov	r3, r0
 800792e:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	2b98      	cmp	r3, #152	; 0x98
 8007934:	d003      	beq.n	800793e <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8007936:	4814      	ldr	r0, [pc, #80]	; (8007988 <pl_gyro_init+0x8c>)
 8007938:	f018 f814 	bl	801f964 <iprintf>
 800793c:	e7fb      	b.n	8007936 <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 800793e:	2100      	movs	r1, #0
 8007940:	206b      	movs	r0, #107	; 0x6b
 8007942:	f7ff ffaf 	bl	80078a4 <gyro_write_byte>

	HAL_Delay(50);
 8007946:	2032      	movs	r0, #50	; 0x32
 8007948:	f010 f8ba 	bl	8017ac0 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 800794c:	2100      	movs	r1, #0
 800794e:	206c      	movs	r0, #108	; 0x6c
 8007950:	f7ff ffa8 	bl	80078a4 <gyro_write_byte>

	HAL_Delay(50);
 8007954:	2032      	movs	r0, #50	; 0x32
 8007956:	f010 f8b3 	bl	8017ac0 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 800795a:	2118      	movs	r1, #24
 800795c:	201b      	movs	r0, #27
 800795e:	f7ff ffa1 	bl	80078a4 <gyro_write_byte>

	HAL_Delay(50);
 8007962:	2032      	movs	r0, #50	; 0x32
 8007964:	f010 f8ac 	bl	8017ac0 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8007968:	2118      	movs	r1, #24
 800796a:	201c      	movs	r0, #28
 800796c:	f7ff ff9a 	bl	80078a4 <gyro_write_byte>

	HAL_Delay(50);
 8007970:	2032      	movs	r0, #50	; 0x32
 8007972:	f010 f8a5 	bl	8017ac0 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <pl_gyro_init+0x90>)
 8007978:	2201      	movs	r2, #1
 800797a:	701a      	strb	r2, [r3, #0]

}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	08022100 	.word	0x08022100
 8007988:	08022114 	.word	0x08022114
 800798c:	200006e0 	.word	0x200006e0

08007990 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007990:	b590      	push	{r4, r7, lr}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff ff55 	bl	800784c <gyro_read_byte>
 80079a2:	4603      	mov	r3, r0
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	3301      	adds	r3, #1
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff ff4c 	bl	800784c <gyro_read_byte>
 80079b4:	4603      	mov	r3, r0
 80079b6:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80079b8:	4323      	orrs	r3, r4
 80079ba:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 80079bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079c8:	eddf 6a06 	vldr	s13, [pc, #24]	; 80079e4 <ICM20602_GYRO_READ+0x54>
 80079cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079d0:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	ee07 3a90 	vmov	s15, r3

}
 80079da:	eeb0 0a67 	vmov.f32	s0, s15
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd90      	pop	{r4, r7, pc}
 80079e4:	41833333 	.word	0x41833333

080079e8 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 80079e8:	b590      	push	{r4, r7, lr}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff ff29 	bl	800784c <gyro_read_byte>
 80079fa:	4603      	mov	r3, r0
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	3301      	adds	r3, #1
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff ff20 	bl	800784c <gyro_read_byte>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007a10:	4323      	orrs	r3, r4
 8007a12:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a20:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007a3c <ICM20602_ACCEL_READ+0x54>
 8007a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a28:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	ee07 3a90 	vmov	s15, r3

}
 8007a32:	eeb0 0a67 	vmov.f32	s0, s15
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd90      	pop	{r4, r7, pc}
 8007a3c:	45000000 	.word	0x45000000

08007a40 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007a44:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <ICM20602_DataUpdate+0x70>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d12f      	bne.n	8007aac <ICM20602_DataUpdate+0x6c>

// get yawrate

		gyro.omega_y = ICM20602_GYRO_READ(0x43);
 8007a4c:	2043      	movs	r0, #67	; 0x43
 8007a4e:	f7ff ff9f 	bl	8007990 <ICM20602_GYRO_READ>
 8007a52:	eef0 7a40 	vmov.f32	s15, s0
 8007a56:	4b17      	ldr	r3, [pc, #92]	; (8007ab4 <ICM20602_DataUpdate+0x74>)
 8007a58:	edc3 7a01 	vstr	s15, [r3, #4]

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007a5c:	2045      	movs	r0, #69	; 0x45
 8007a5e:	f7ff ff97 	bl	8007990 <ICM20602_GYRO_READ>
 8007a62:	eef0 7a40 	vmov.f32	s15, s0
 8007a66:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <ICM20602_DataUpdate+0x74>)
 8007a68:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007a6c:	2047      	movs	r0, #71	; 0x47
 8007a6e:	f7ff ff8f 	bl	8007990 <ICM20602_GYRO_READ>
 8007a72:	eef0 7a40 	vmov.f32	s15, s0
 8007a76:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <ICM20602_DataUpdate+0x74>)
 8007a78:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007a7c:	203b      	movs	r0, #59	; 0x3b
 8007a7e:	f7ff ffb3 	bl	80079e8 <ICM20602_ACCEL_READ>
 8007a82:	eef0 7a40 	vmov.f32	s15, s0
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <ICM20602_DataUpdate+0x74>)
 8007a88:	edc3 7a04 	vstr	s15, [r3, #16]

		gyro.accel_x = ICM20602_ACCEL_READ(0x3D);
 8007a8c:	203d      	movs	r0, #61	; 0x3d
 8007a8e:	f7ff ffab 	bl	80079e8 <ICM20602_ACCEL_READ>
 8007a92:	eef0 7a40 	vmov.f32	s15, s0
 8007a96:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <ICM20602_DataUpdate+0x74>)
 8007a98:	edc3 7a03 	vstr	s15, [r3, #12]

		gyro.accel_z = ICM20602_ACCEL_READ(0x3F);
 8007a9c:	203f      	movs	r0, #63	; 0x3f
 8007a9e:	f7ff ffa3 	bl	80079e8 <ICM20602_ACCEL_READ>
 8007aa2:	eef0 7a40 	vmov.f32	s15, s0
 8007aa6:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <ICM20602_DataUpdate+0x74>)
 8007aa8:	edc3 7a05 	vstr	s15, [r3, #20]

	}

}
 8007aac:	bf00      	nop
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	200006e0 	.word	0x200006e0
 8007ab4:	200006e4 	.word	0x200006e4

08007ab8 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007abc:	480f      	ldr	r0, [pc, #60]	; (8007afc <pl_motor_init+0x44>)
 8007abe:	f015 f963 	bl	801cd88 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007ac2:	480e      	ldr	r0, [pc, #56]	; (8007afc <pl_motor_init+0x44>)
 8007ac4:	f00f f9ea 	bl	8016e9c <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007ac8:	480d      	ldr	r0, [pc, #52]	; (8007b00 <pl_motor_init+0x48>)
 8007aca:	f015 f95d 	bl	801cd88 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8007ace:	480c      	ldr	r0, [pc, #48]	; (8007b00 <pl_motor_init+0x48>)
 8007ad0:	f00f f9e4 	bl	8016e9c <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	f000 f81f 	bl	8007b18 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8007ada:	4b08      	ldr	r3, [pc, #32]	; (8007afc <pl_motor_init+0x44>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	225a      	movs	r2, #90	; 0x5a
 8007ae0:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8007ae2:	2001      	movs	r0, #1
 8007ae4:	f000 f840 	bl	8007b68 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <pl_motor_init+0x44>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	225a      	movs	r2, #90	; 0x5a
 8007aee:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8007af0:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <pl_motor_init+0x48>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	221e      	movs	r2, #30
 8007af6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007af8:	bf00      	nop
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	2000da94 	.word	0x2000da94
 8007b00:	2000dae0 	.word	0x2000dae0

08007b04 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d819      	bhi.n	8007b5a <pl_L_DriveMotor_mode+0x42>
 8007b26:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <pl_L_DriveMotor_mode+0x14>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007b59 	.word	0x08007b59
 8007b30:	08007b3d 	.word	0x08007b3d
 8007b34:	08007b4b 	.word	0x08007b4b
 8007b38:	08007b59 	.word	0x08007b59
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b42:	4808      	ldr	r0, [pc, #32]	; (8007b64 <pl_L_DriveMotor_mode+0x4c>)
 8007b44:	f013 f978 	bl	801ae38 <HAL_GPIO_WritePin>
break;
 8007b48:	e007      	b.n	8007b5a <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b50:	4804      	ldr	r0, [pc, #16]	; (8007b64 <pl_L_DriveMotor_mode+0x4c>)
 8007b52:	f013 f971 	bl	801ae38 <HAL_GPIO_WritePin>
break;
 8007b56:	e000      	b.n	8007b5a <pl_L_DriveMotor_mode+0x42>
break;
 8007b58:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	48000800 	.word	0x48000800

08007b68 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d817      	bhi.n	8007ba6 <pl_R_DriveMotor_mode+0x3e>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <pl_R_DriveMotor_mode+0x14>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007ba5 	.word	0x08007ba5
 8007b80:	08007b8d 	.word	0x08007b8d
 8007b84:	08007b99 	.word	0x08007b99
 8007b88:	08007ba5 	.word	0x08007ba5
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	4807      	ldr	r0, [pc, #28]	; (8007bb0 <pl_R_DriveMotor_mode+0x48>)
 8007b92:	f013 f951 	bl	801ae38 <HAL_GPIO_WritePin>
break;
 8007b96:	e006      	b.n	8007ba6 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2180      	movs	r1, #128	; 0x80
 8007b9c:	4804      	ldr	r0, [pc, #16]	; (8007bb0 <pl_R_DriveMotor_mode+0x48>)
 8007b9e:	f013 f94b 	bl	801ae38 <HAL_GPIO_WritePin>
break;
 8007ba2:	e000      	b.n	8007ba6 <pl_R_DriveMotor_mode+0x3e>
break;
 8007ba4:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	48000400 	.word	0x48000400

08007bb4 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007bb8:	2108      	movs	r1, #8
 8007bba:	4804      	ldr	r0, [pc, #16]	; (8007bcc <pl_DriveMotor_start+0x18>)
 8007bbc:	f015 f9ac 	bl	801cf18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4802      	ldr	r0, [pc, #8]	; (8007bcc <pl_DriveMotor_start+0x18>)
 8007bc4:	f015 f9a8 	bl	801cf18 <HAL_TIM_PWM_Start>
}
 8007bc8:	bf00      	nop
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	2000da94 	.word	0x2000da94

08007bd0 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007bd4:	2108      	movs	r1, #8
 8007bd6:	4804      	ldr	r0, [pc, #16]	; (8007be8 <pl_DriveMotor_stop+0x18>)
 8007bd8:	f015 faaa 	bl	801d130 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4802      	ldr	r0, [pc, #8]	; (8007be8 <pl_DriveMotor_stop+0x18>)
 8007be0:	f015 faa6 	bl	801d130 <HAL_TIM_PWM_Stop>
}
 8007be4:	bf00      	nop
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	2000da94 	.word	0x2000da94

08007bec <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8007bf6:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <pl_DriveMotor_duty+0x28>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8007bfe:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <pl_DriveMotor_duty+0x28>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	2000da94 	.word	0x2000da94

08007c18 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4802      	ldr	r0, [pc, #8]	; (8007c28 <pl_FunMotor_start+0x10>)
 8007c20:	f015 f97a 	bl	801cf18 <HAL_TIM_PWM_Start>
}
 8007c24:	bf00      	nop
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	2000dae0 	.word	0x2000dae0

08007c2c <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007c30:	2100      	movs	r1, #0
 8007c32:	4802      	ldr	r0, [pc, #8]	; (8007c3c <pl_FunMotor_stop+0x10>)
 8007c34:	f015 fa7c 	bl	801d130 <HAL_TIM_PWM_Stop>
}
 8007c38:	bf00      	nop
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	2000dae0 	.word	0x2000dae0

08007c40 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c4e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007c84 <pl_FunMotor_duty+0x44>
 8007c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c5a:	ee17 3a90 	vmov	r3, s15
 8007c5e:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007c60:	4b09      	ldr	r3, [pc, #36]	; (8007c88 <pl_FunMotor_duty+0x48>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2264      	movs	r2, #100	; 0x64
 8007c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <pl_FunMotor_duty+0x48>)
 8007c6a:	2264      	movs	r2, #100	; 0x64
 8007c6c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <pl_FunMotor_duty+0x48>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	42c80000 	.word	0x42c80000
 8007c88:	2000dae0 	.word	0x2000dae0

08007c8c <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
	AD_step=0;
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <pl_sensor_init+0x18>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007c96:	217f      	movs	r1, #127	; 0x7f
 8007c98:	4803      	ldr	r0, [pc, #12]	; (8007ca8 <pl_sensor_init+0x1c>)
 8007c9a:	f011 ff8b 	bl	8019bb4 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000708 	.word	0x20000708
 8007ca8:	20000734 	.word	0x20000734
 8007cac:	00000000 	.word	0x00000000

08007cb0 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007cb6:	483c      	ldr	r0, [pc, #240]	; (8007da8 <pl_getbatt+0xf8>)
 8007cb8:	f010 fb6a 	bl	8018390 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007cbc:	2132      	movs	r1, #50	; 0x32
 8007cbe:	483a      	ldr	r0, [pc, #232]	; (8007da8 <pl_getbatt+0xf8>)
 8007cc0:	f010 fc64 	bl	801858c <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007cc4:	4838      	ldr	r0, [pc, #224]	; (8007da8 <pl_getbatt+0xf8>)
 8007cc6:	f010 fe80 	bl	80189ca <HAL_ADC_GetValue>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007cce:	4836      	ldr	r0, [pc, #216]	; (8007da8 <pl_getbatt+0xf8>)
 8007cd0:	f010 fc28 	bl	8018524 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cde:	ee17 0a90 	vmov	r0, s15
 8007ce2:	f7f8 fc59 	bl	8000598 <__aeabi_f2d>
 8007ce6:	a326      	add	r3, pc, #152	; (adr r3, 8007d80 <pl_getbatt+0xd0>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	f7f8 fcac 	bl	8000648 <__aeabi_dmul>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	a323      	add	r3, pc, #140	; (adr r3, 8007d88 <pl_getbatt+0xd8>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fdcd 	bl	800089c <__aeabi_ddiv>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4610      	mov	r0, r2
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	4b27      	ldr	r3, [pc, #156]	; (8007dac <pl_getbatt+0xfc>)
 8007d10:	f7f8 fc9a 	bl	8000648 <__aeabi_dmul>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	4b23      	ldr	r3, [pc, #140]	; (8007db0 <pl_getbatt+0x100>)
 8007d22:	f7f8 fdbb 	bl	800089c <__aeabi_ddiv>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	a318      	add	r3, pc, #96	; (adr r3, 8007d90 <pl_getbatt+0xe0>)
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f7f8 fc88 	bl	8000648 <__aeabi_dmul>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4619      	mov	r1, r3
 8007d40:	a315      	add	r3, pc, #84	; (adr r3, 8007d98 <pl_getbatt+0xe8>)
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	f7f8 fc7f 	bl	8000648 <__aeabi_dmul>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	a313      	add	r3, pc, #76	; (adr r3, 8007da0 <pl_getbatt+0xf0>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fda0 	bl	800089c <__aeabi_ddiv>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4610      	mov	r0, r2
 8007d62:	4619      	mov	r1, r3
 8007d64:	f7f8 ff48 	bl	8000bf8 <__aeabi_d2f>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	603b      	str	r3, [r7, #0]
return batt;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	ee07 3a90 	vmov	s15, r3
}
 8007d72:	eeb0 0a67 	vmov.f32	s0, s15
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	f3af 8000 	nop.w
 8007d80:	66666666 	.word	0x66666666
 8007d84:	400a6666 	.word	0x400a6666
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	40affe00 	.word	0x40affe00
 8007d90:	66666666 	.word	0x66666666
 8007d94:	3ff26666 	.word	0x3ff26666
 8007d98:	9999999a 	.word	0x9999999a
 8007d9c:	400d9999 	.word	0x400d9999
 8007da0:	ae147ae1 	.word	0xae147ae1
 8007da4:	400ee147 	.word	0x400ee147
 8007da8:	20000734 	.word	0x20000734
 8007dac:	40340000 	.word	0x40340000
 8007db0:	40240000 	.word	0x40240000
 8007db4:	00000000 	.word	0x00000000

08007db8 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007dbe:	4882      	ldr	r0, [pc, #520]	; (8007fc8 <pl_callback_getSensor+0x210>)
 8007dc0:	f010 fda2 	bl	8018908 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007dc4:	4b81      	ldr	r3, [pc, #516]	; (8007fcc <pl_callback_getSensor+0x214>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	f200 80d9 	bhi.w	8007f80 <pl_callback_getSensor+0x1c8>
 8007dce:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <pl_callback_getSensor+0x1c>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007de9 	.word	0x08007de9
 8007dd8:	08007e21 	.word	0x08007e21
 8007ddc:	08007e81 	.word	0x08007e81
 8007de0:	08007ec1 	.word	0x08007ec1
 8007de4:	08007f81 	.word	0x08007f81
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007de8:	2201      	movs	r2, #1
 8007dea:	2102      	movs	r1, #2
 8007dec:	4878      	ldr	r0, [pc, #480]	; (8007fd0 <pl_callback_getSensor+0x218>)
 8007dee:	f013 f823 	bl	801ae38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007df2:	2200      	movs	r2, #0
 8007df4:	2110      	movs	r1, #16
 8007df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dfa:	f013 f81d 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e04:	4873      	ldr	r0, [pc, #460]	; (8007fd4 <pl_callback_getSensor+0x21c>)
 8007e06:	f013 f817 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007e0e:	e002      	b.n	8007e16 <pl_callback_getSensor+0x5e>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3301      	adds	r3, #1
 8007e14:	607b      	str	r3, [r7, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e1c:	ddf8      	ble.n	8007e10 <pl_callback_getSensor+0x58>
		break;
 8007e1e:	e0af      	b.n	8007f80 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007e20:	4b6d      	ldr	r3, [pc, #436]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007e22:	885a      	ldrh	r2, [r3, #2]
 8007e24:	4b6d      	ldr	r3, [pc, #436]	; (8007fdc <pl_callback_getSensor+0x224>)
 8007e26:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007e28:	4b6b      	ldr	r3, [pc, #428]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007e2a:	889a      	ldrh	r2, [r3, #4]
 8007e2c:	4b6b      	ldr	r3, [pc, #428]	; (8007fdc <pl_callback_getSensor+0x224>)
 8007e2e:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007e30:	4b69      	ldr	r3, [pc, #420]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007e32:	88da      	ldrh	r2, [r3, #6]
 8007e34:	4b6a      	ldr	r3, [pc, #424]	; (8007fe0 <pl_callback_getSensor+0x228>)
 8007e36:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007e38:	4b67      	ldr	r3, [pc, #412]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007e3a:	891a      	ldrh	r2, [r3, #8]
 8007e3c:	4b68      	ldr	r3, [pc, #416]	; (8007fe0 <pl_callback_getSensor+0x228>)
 8007e3e:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007e40:	4b65      	ldr	r3, [pc, #404]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007e42:	895a      	ldrh	r2, [r3, #10]
 8007e44:	4b66      	ldr	r3, [pc, #408]	; (8007fe0 <pl_callback_getSensor+0x228>)
 8007e46:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	4860      	ldr	r0, [pc, #384]	; (8007fd0 <pl_callback_getSensor+0x218>)
 8007e4e:	f012 fff3 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007e52:	2201      	movs	r2, #1
 8007e54:	2110      	movs	r1, #16
 8007e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e5a:	f012 ffed 	bl	801ae38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e64:	485b      	ldr	r0, [pc, #364]	; (8007fd4 <pl_callback_getSensor+0x21c>)
 8007e66:	f012 ffe7 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007e6e:	e002      	b.n	8007e76 <pl_callback_getSensor+0xbe>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3301      	adds	r3, #1
 8007e74:	607b      	str	r3, [r7, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e7c:	ddf8      	ble.n	8007e70 <pl_callback_getSensor+0xb8>
		break;
 8007e7e:	e07f      	b.n	8007f80 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007e80:	4b55      	ldr	r3, [pc, #340]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007e82:	88da      	ldrh	r2, [r3, #6]
 8007e84:	4b55      	ldr	r3, [pc, #340]	; (8007fdc <pl_callback_getSensor+0x224>)
 8007e86:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2102      	movs	r1, #2
 8007e8c:	4850      	ldr	r0, [pc, #320]	; (8007fd0 <pl_callback_getSensor+0x218>)
 8007e8e:	f012 ffd3 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007e92:	2200      	movs	r2, #0
 8007e94:	2110      	movs	r1, #16
 8007e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e9a:	f012 ffcd 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ea4:	484b      	ldr	r0, [pc, #300]	; (8007fd4 <pl_callback_getSensor+0x21c>)
 8007ea6:	f012 ffc7 	bl	801ae38 <HAL_GPIO_WritePin>
		j=0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007eae:	e002      	b.n	8007eb6 <pl_callback_getSensor+0xfe>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ebc:	ddf8      	ble.n	8007eb0 <pl_callback_getSensor+0xf8>
		break;
 8007ebe:	e05f      	b.n	8007f80 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007ec0:	4b45      	ldr	r3, [pc, #276]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007ec2:	885a      	ldrh	r2, [r3, #2]
 8007ec4:	4b46      	ldr	r3, [pc, #280]	; (8007fe0 <pl_callback_getSensor+0x228>)
 8007ec6:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007ec8:	4b43      	ldr	r3, [pc, #268]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007eca:	889a      	ldrh	r2, [r3, #4]
 8007ecc:	4b44      	ldr	r3, [pc, #272]	; (8007fe0 <pl_callback_getSensor+0x228>)
 8007ece:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007ed0:	4b41      	ldr	r3, [pc, #260]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007ed2:	891a      	ldrh	r2, [r3, #8]
 8007ed4:	4b41      	ldr	r3, [pc, #260]	; (8007fdc <pl_callback_getSensor+0x224>)
 8007ed6:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007ed8:	4b3f      	ldr	r3, [pc, #252]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007eda:	895a      	ldrh	r2, [r3, #10]
 8007edc:	4b3f      	ldr	r3, [pc, #252]	; (8007fdc <pl_callback_getSensor+0x224>)
 8007ede:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	483a      	ldr	r0, [pc, #232]	; (8007fd0 <pl_callback_getSensor+0x218>)
 8007ee6:	f012 ffa7 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007eea:	2200      	movs	r2, #0
 8007eec:	2110      	movs	r1, #16
 8007eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ef2:	f012 ffa1 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007efc:	4835      	ldr	r0, [pc, #212]	; (8007fd4 <pl_callback_getSensor+0x21c>)
 8007efe:	f012 ff9b 	bl	801ae38 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007f06:	e002      	b.n	8007f0e <pl_callback_getSensor+0x156>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b32      	cmp	r3, #50	; 0x32
 8007f12:	ddf9      	ble.n	8007f08 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007f14:	4b30      	ldr	r3, [pc, #192]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007f1a:	887b      	ldrh	r3, [r7, #2]
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f24:	ee17 0a90 	vmov	r0, s15
 8007f28:	f7f8 fb36 	bl	8000598 <__aeabi_f2d>
 8007f2c:	a320      	add	r3, pc, #128	; (adr r3, 8007fb0 <pl_callback_getSensor+0x1f8>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 fb89 	bl	8000648 <__aeabi_dmul>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	a31e      	add	r3, pc, #120	; (adr r3, 8007fb8 <pl_callback_getSensor+0x200>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 fcaa 	bl	800089c <__aeabi_ddiv>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4619      	mov	r1, r3
 8007f50:	a31b      	add	r3, pc, #108	; (adr r3, 8007fc0 <pl_callback_getSensor+0x208>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 fb77 	bl	8000648 <__aeabi_dmul>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4610      	mov	r0, r2
 8007f60:	4619      	mov	r1, r3
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	4b1f      	ldr	r3, [pc, #124]	; (8007fe4 <pl_callback_getSensor+0x22c>)
 8007f68:	f7f8 fc98 	bl	800089c <__aeabi_ddiv>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4610      	mov	r0, r2
 8007f72:	4619      	mov	r1, r3
 8007f74:	f7f8 fe40 	bl	8000bf8 <__aeabi_d2f>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <pl_callback_getSensor+0x230>)
 8007f7c:	6013      	str	r3, [r2, #0]
		break;
 8007f7e:	bf00      	nop

		break;
	}


	AD_step++;
 8007f80:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <pl_callback_getSensor+0x214>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	3301      	adds	r3, #1
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <pl_callback_getSensor+0x214>)
 8007f8a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <pl_callback_getSensor+0x214>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d005      	beq.n	8007fa0 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007f94:	2206      	movs	r2, #6
 8007f96:	4910      	ldr	r1, [pc, #64]	; (8007fd8 <pl_callback_getSensor+0x220>)
 8007f98:	480b      	ldr	r0, [pc, #44]	; (8007fc8 <pl_callback_getSensor+0x210>)
 8007f9a:	f010 fbeb 	bl	8018774 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007f9e:	e002      	b.n	8007fa6 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <pl_callback_getSensor+0x214>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	66666666 	.word	0x66666666
 8007fb4:	400a6666 	.word	0x400a6666
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	40affe00 	.word	0x40affe00
 8007fc0:	00000000 	.word	0x00000000
 8007fc4:	4062c000 	.word	0x4062c000
 8007fc8:	20000734 	.word	0x20000734
 8007fcc:	20000708 	.word	0x20000708
 8007fd0:	48000400 	.word	0x48000400
 8007fd4:	48000800 	.word	0x48000800
 8007fd8:	200006fc 	.word	0x200006fc
 8007fdc:	2000070c 	.word	0x2000070c
 8007fe0:	20000718 	.word	0x20000718
 8007fe4:	40490000 	.word	0x40490000
 8007fe8:	20000724 	.word	0x20000724

08007fec <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007ff0:	2206      	movs	r2, #6
 8007ff2:	4903      	ldr	r1, [pc, #12]	; (8008000 <pl_interupt_getSensor+0x14>)
 8007ff4:	4803      	ldr	r0, [pc, #12]	; (8008004 <pl_interupt_getSensor+0x18>)
 8007ff6:	f010 fbbd 	bl	8018774 <HAL_ADC_Start_DMA>

}
 8007ffa:	bf00      	nop
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	200006fc 	.word	0x200006fc
 8008004:	20000734 	.word	0x20000734

08008008 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
	count_mode=0;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <pl_timer_init+0x1c>)
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <pl_timer_init+0x20>)
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 800801a:	4804      	ldr	r0, [pc, #16]	; (800802c <pl_timer_init+0x24>)
 800801c:	f014 feb4 	bl	801cd88 <HAL_TIM_Base_Start_IT>
}
 8008020:	bf00      	nop
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000730 	.word	0x20000730
 8008028:	2000072c 	.word	0x2000072c
 800802c:	2000da48 	.word	0x2000da48

08008030 <interrupt_timer>:

void interrupt_timer(void){
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
	g_timCount++;
 8008034:	4b10      	ldr	r3, [pc, #64]	; (8008078 <interrupt_timer+0x48>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	4a0f      	ldr	r2, [pc, #60]	; (8008078 <interrupt_timer+0x48>)
 800803c:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <interrupt_timer+0x4c>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d112      	bne.n	800806c <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <interrupt_timer+0x50>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f7f8 faa4 	bl	8000598 <__aeabi_f2d>
 8008050:	a307      	add	r3, pc, #28	; (adr r3, 8008070 <interrupt_timer+0x40>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f7f8 f941 	bl	80002dc <__adddf3>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4610      	mov	r0, r2
 8008060:	4619      	mov	r1, r3
 8008062:	f7f8 fdc9 	bl	8000bf8 <__aeabi_d2f>
 8008066:	4603      	mov	r3, r0
 8008068:	4a05      	ldr	r2, [pc, #20]	; (8008080 <interrupt_timer+0x50>)
 800806a:	6013      	str	r3, [r2, #0]
	}

}
 800806c:	bf00      	nop
 800806e:	bd80      	pop	{r7, pc}
 8008070:	d2f1a9fc 	.word	0xd2f1a9fc
 8008074:	3f50624d 	.word	0x3f50624d
 8008078:	20000728 	.word	0x20000728
 800807c:	20000730 	.word	0x20000730
 8008080:	2000072c 	.word	0x2000072c

08008084 <tic_timer>:

void tic_timer(void){
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
	count_mode=1;
 8008088:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <tic_timer+0x1c>)
 800808a:	2201      	movs	r2, #1
 800808c:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 800808e:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <tic_timer+0x20>)
 8008090:	f04f 0200 	mov.w	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
}
 8008096:	bf00      	nop
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20000730 	.word	0x20000730
 80080a4:	2000072c 	.word	0x2000072c

080080a8 <toc_timer>:

float toc_timer(void){
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <toc_timer+0x30>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	607b      	str	r3, [r7, #4]
	count_mode=0;
 80080b4:	4b09      	ldr	r3, [pc, #36]	; (80080dc <toc_timer+0x34>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <toc_timer+0x30>)
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
	return timer;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	ee07 3a90 	vmov	s15, r3
}
 80080c8:	eeb0 0a67 	vmov.f32	s0, s15
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	2000072c 	.word	0x2000072c
 80080dc:	20000730 	.word	0x20000730

080080e0 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 80080e0:	b5b0      	push	{r4, r5, r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80080e8:	4b1d      	ldr	r3, [pc, #116]	; (8008160 <wait_ms+0x80>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 80080ee:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <wait_ms+0x84>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2200      	movs	r2, #0
 80080f4:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 80080f6:	bf00      	nop
 80080f8:	4b19      	ldr	r3, [pc, #100]	; (8008160 <wait_ms+0x80>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008104:	ee17 0a90 	vmov	r0, s15
 8008108:	f7f8 fa46 	bl	8000598 <__aeabi_f2d>
 800810c:	a312      	add	r3, pc, #72	; (adr r3, 8008158 <wait_ms+0x78>)
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	f7f8 fa99 	bl	8000648 <__aeabi_dmul>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4610      	mov	r0, r2
 800811c:	4619      	mov	r1, r3
 800811e:	a30e      	add	r3, pc, #56	; (adr r3, 8008158 <wait_ms+0x78>)
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f7f8 fbba 	bl	800089c <__aeabi_ddiv>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4614      	mov	r4, r2
 800812e:	461d      	mov	r5, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7f8 fa0f 	bl	8000554 <__aeabi_ui2d>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4620      	mov	r0, r4
 800813c:	4629      	mov	r1, r5
 800813e:	f7f8 fcf5 	bl	8000b2c <__aeabi_dcmplt>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1d7      	bne.n	80080f8 <wait_ms+0x18>
        }

}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bdb0      	pop	{r4, r5, r7, pc}
 8008152:	bf00      	nop
 8008154:	f3af 8000 	nop.w
 8008158:	d2f1a9fc 	.word	0xd2f1a9fc
 800815c:	3f50624d 	.word	0x3f50624d
 8008160:	20000728 	.word	0x20000728
 8008164:	2000da48 	.word	0x2000da48

08008168 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8008168:	b5b0      	push	{r4, r5, r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008170:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <wait_ms_NoReset+0x78>)
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008176:	bf00      	nop
 8008178:	4b19      	ldr	r3, [pc, #100]	; (80081e0 <wait_ms_NoReset+0x78>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	ee07 3a90 	vmov	s15, r3
 8008180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008184:	ee17 0a90 	vmov	r0, s15
 8008188:	f7f8 fa06 	bl	8000598 <__aeabi_f2d>
 800818c:	a312      	add	r3, pc, #72	; (adr r3, 80081d8 <wait_ms_NoReset+0x70>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 fa59 	bl	8000648 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	a30e      	add	r3, pc, #56	; (adr r3, 80081d8 <wait_ms_NoReset+0x70>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f7f8 fb7a 	bl	800089c <__aeabi_ddiv>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4614      	mov	r4, r2
 80081ae:	461d      	mov	r5, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7f8 f9cf 	bl	8000554 <__aeabi_ui2d>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4620      	mov	r0, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	f7f8 fcb5 	bl	8000b2c <__aeabi_dcmplt>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1d7      	bne.n	8008178 <wait_ms_NoReset+0x10>
        }

}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bdb0      	pop	{r4, r5, r7, pc}
 80081d2:	bf00      	nop
 80081d4:	f3af 8000 	nop.w
 80081d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80081dc:	3f50624d 	.word	0x3f50624d
 80081e0:	20000728 	.word	0x20000728

080081e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08c      	sub	sp, #48	; 0x30
 80081e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80081ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	605a      	str	r2, [r3, #4]
 80081f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80081f6:	1d3b      	adds	r3, r7, #4
 80081f8:	2220      	movs	r2, #32
 80081fa:	2100      	movs	r1, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f016 ff3f 	bl	801f080 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008202:	4b56      	ldr	r3, [pc, #344]	; (800835c <MX_ADC1_Init+0x178>)
 8008204:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008208:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800820a:	4b54      	ldr	r3, [pc, #336]	; (800835c <MX_ADC1_Init+0x178>)
 800820c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008210:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008212:	4b52      	ldr	r3, [pc, #328]	; (800835c <MX_ADC1_Init+0x178>)
 8008214:	2200      	movs	r2, #0
 8008216:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008218:	4b50      	ldr	r3, [pc, #320]	; (800835c <MX_ADC1_Init+0x178>)
 800821a:	2200      	movs	r2, #0
 800821c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800821e:	4b4f      	ldr	r3, [pc, #316]	; (800835c <MX_ADC1_Init+0x178>)
 8008220:	2200      	movs	r2, #0
 8008222:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008224:	4b4d      	ldr	r3, [pc, #308]	; (800835c <MX_ADC1_Init+0x178>)
 8008226:	2201      	movs	r2, #1
 8008228:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800822a:	4b4c      	ldr	r3, [pc, #304]	; (800835c <MX_ADC1_Init+0x178>)
 800822c:	2208      	movs	r2, #8
 800822e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008230:	4b4a      	ldr	r3, [pc, #296]	; (800835c <MX_ADC1_Init+0x178>)
 8008232:	2200      	movs	r2, #0
 8008234:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008236:	4b49      	ldr	r3, [pc, #292]	; (800835c <MX_ADC1_Init+0x178>)
 8008238:	2201      	movs	r2, #1
 800823a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 800823c:	4b47      	ldr	r3, [pc, #284]	; (800835c <MX_ADC1_Init+0x178>)
 800823e:	2206      	movs	r2, #6
 8008240:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008242:	4b46      	ldr	r3, [pc, #280]	; (800835c <MX_ADC1_Init+0x178>)
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800824a:	4b44      	ldr	r3, [pc, #272]	; (800835c <MX_ADC1_Init+0x178>)
 800824c:	2200      	movs	r2, #0
 800824e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008250:	4b42      	ldr	r3, [pc, #264]	; (800835c <MX_ADC1_Init+0x178>)
 8008252:	2200      	movs	r2, #0
 8008254:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008256:	4b41      	ldr	r3, [pc, #260]	; (800835c <MX_ADC1_Init+0x178>)
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800825e:	4b3f      	ldr	r3, [pc, #252]	; (800835c <MX_ADC1_Init+0x178>)
 8008260:	2200      	movs	r2, #0
 8008262:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8008264:	4b3d      	ldr	r3, [pc, #244]	; (800835c <MX_ADC1_Init+0x178>)
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800826c:	483b      	ldr	r0, [pc, #236]	; (800835c <MX_ADC1_Init+0x178>)
 800826e:	f00f fedb 	bl	8018028 <HAL_ADC_Init>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008278:	f001 ff37 	bl	800a0ea <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800827c:	2300      	movs	r3, #0
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008284:	4619      	mov	r1, r3
 8008286:	4835      	ldr	r0, [pc, #212]	; (800835c <MX_ADC1_Init+0x178>)
 8008288:	f011 fd28 	bl	8019cdc <HAL_ADCEx_MultiModeConfigChannel>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008292:	f001 ff2a 	bl	800a0ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008296:	4b32      	ldr	r3, [pc, #200]	; (8008360 <MX_ADC1_Init+0x17c>)
 8008298:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800829a:	2306      	movs	r3, #6
 800829c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800829e:	2301      	movs	r3, #1
 80082a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80082a2:	237f      	movs	r3, #127	; 0x7f
 80082a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80082a6:	2304      	movs	r3, #4
 80082a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082ae:	1d3b      	adds	r3, r7, #4
 80082b0:	4619      	mov	r1, r3
 80082b2:	482a      	ldr	r0, [pc, #168]	; (800835c <MX_ADC1_Init+0x178>)
 80082b4:	f010 fdee 	bl	8018e94 <HAL_ADC_ConfigChannel>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80082be:	f001 ff14 	bl	800a0ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80082c2:	4b28      	ldr	r3, [pc, #160]	; (8008364 <MX_ADC1_Init+0x180>)
 80082c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80082c6:	230c      	movs	r3, #12
 80082c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082ca:	1d3b      	adds	r3, r7, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4823      	ldr	r0, [pc, #140]	; (800835c <MX_ADC1_Init+0x178>)
 80082d0:	f010 fde0 	bl	8018e94 <HAL_ADC_ConfigChannel>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80082da:	f001 ff06 	bl	800a0ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80082de:	4b22      	ldr	r3, [pc, #136]	; (8008368 <MX_ADC1_Init+0x184>)
 80082e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80082e2:	2312      	movs	r3, #18
 80082e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082e6:	1d3b      	adds	r3, r7, #4
 80082e8:	4619      	mov	r1, r3
 80082ea:	481c      	ldr	r0, [pc, #112]	; (800835c <MX_ADC1_Init+0x178>)
 80082ec:	f010 fdd2 	bl	8018e94 <HAL_ADC_ConfigChannel>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80082f6:	f001 fef8 	bl	800a0ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80082fa:	4b1c      	ldr	r3, [pc, #112]	; (800836c <MX_ADC1_Init+0x188>)
 80082fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80082fe:	2318      	movs	r3, #24
 8008300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4815      	ldr	r0, [pc, #84]	; (800835c <MX_ADC1_Init+0x178>)
 8008308:	f010 fdc4 	bl	8018e94 <HAL_ADC_ConfigChannel>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8008312:	f001 feea 	bl	800a0ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008316:	4b16      	ldr	r3, [pc, #88]	; (8008370 <MX_ADC1_Init+0x18c>)
 8008318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800831a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800831e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008320:	1d3b      	adds	r3, r7, #4
 8008322:	4619      	mov	r1, r3
 8008324:	480d      	ldr	r0, [pc, #52]	; (800835c <MX_ADC1_Init+0x178>)
 8008326:	f010 fdb5 	bl	8018e94 <HAL_ADC_ConfigChannel>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008330:	f001 fedb 	bl	800a0ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008334:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <MX_ADC1_Init+0x190>)
 8008336:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008338:	f44f 7383 	mov.w	r3, #262	; 0x106
 800833c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800833e:	1d3b      	adds	r3, r7, #4
 8008340:	4619      	mov	r1, r3
 8008342:	4806      	ldr	r0, [pc, #24]	; (800835c <MX_ADC1_Init+0x178>)
 8008344:	f010 fda6 	bl	8018e94 <HAL_ADC_ConfigChannel>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800834e:	f001 fecc 	bl	800a0ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008352:	bf00      	nop
 8008354:	3730      	adds	r7, #48	; 0x30
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000734 	.word	0x20000734
 8008360:	2e300800 	.word	0x2e300800
 8008364:	3ef08000 	.word	0x3ef08000
 8008368:	10c00010 	.word	0x10c00010
 800836c:	0c900008 	.word	0x0c900008
 8008370:	08600004 	.word	0x08600004
 8008374:	04300002 	.word	0x04300002

08008378 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b09e      	sub	sp, #120	; 0x78
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008380:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	605a      	str	r2, [r3, #4]
 800838a:	609a      	str	r2, [r3, #8]
 800838c:	60da      	str	r2, [r3, #12]
 800838e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	2250      	movs	r2, #80	; 0x50
 8008396:	2100      	movs	r1, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f016 fe71 	bl	801f080 <memset>
  if(adcHandle->Instance==ADC1)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083a6:	f040 8082 	bne.w	80084ae <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80083aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80083b0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80083b4:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	4618      	mov	r0, r3
 80083bc:	f013 fb38 	bl	801ba30 <HAL_RCCEx_PeriphCLKConfig>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80083c6:	f001 fe90 	bl	800a0ea <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80083ca:	4b3b      	ldr	r3, [pc, #236]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 80083cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ce:	4a3a      	ldr	r2, [pc, #232]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 80083d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083d6:	4b38      	ldr	r3, [pc, #224]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 80083d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083de:	613b      	str	r3, [r7, #16]
 80083e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083e2:	4b35      	ldr	r3, [pc, #212]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 80083e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e6:	4a34      	ldr	r2, [pc, #208]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 80083e8:	f043 0301 	orr.w	r3, r3, #1
 80083ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083ee:	4b32      	ldr	r3, [pc, #200]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 80083f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083fa:	4b2f      	ldr	r3, [pc, #188]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 80083fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fe:	4a2e      	ldr	r2, [pc, #184]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 8008400:	f043 0302 	orr.w	r3, r3, #2
 8008404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008406:	4b2c      	ldr	r3, [pc, #176]	; (80084b8 <HAL_ADC_MspInit+0x140>)
 8008408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	60bb      	str	r3, [r7, #8]
 8008410:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 8008412:	230f      	movs	r3, #15
 8008414:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008416:	2303      	movs	r3, #3
 8008418:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800841a:	2300      	movs	r3, #0
 800841c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800841e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008422:	4619      	mov	r1, r3
 8008424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008428:	f012 fb84 	bl	801ab34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 800842c:	f241 0301 	movw	r3, #4097	; 0x1001
 8008430:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008432:	2303      	movs	r3, #3
 8008434:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008436:	2300      	movs	r3, #0
 8008438:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800843a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800843e:	4619      	mov	r1, r3
 8008440:	481e      	ldr	r0, [pc, #120]	; (80084bc <HAL_ADC_MspInit+0x144>)
 8008442:	f012 fb77 	bl	801ab34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008446:	4b1e      	ldr	r3, [pc, #120]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 8008448:	4a1e      	ldr	r2, [pc, #120]	; (80084c4 <HAL_ADC_MspInit+0x14c>)
 800844a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800844c:	4b1c      	ldr	r3, [pc, #112]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 800844e:	2205      	movs	r2, #5
 8008450:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008452:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 8008454:	2200      	movs	r2, #0
 8008456:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008458:	4b19      	ldr	r3, [pc, #100]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 800845a:	2200      	movs	r2, #0
 800845c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800845e:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 8008460:	2280      	movs	r2, #128	; 0x80
 8008462:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008464:	4b16      	ldr	r3, [pc, #88]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 8008466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800846a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800846c:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 800846e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008472:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008474:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 8008476:	2220      	movs	r2, #32
 8008478:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800847a:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 800847c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008480:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008482:	480f      	ldr	r0, [pc, #60]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 8008484:	f011 fe22 	bl	801a0cc <HAL_DMA_Init>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 800848e:	f001 fe2c 	bl	800a0ea <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 8008496:	655a      	str	r2, [r3, #84]	; 0x54
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <HAL_ADC_MspInit+0x148>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800849e:	2200      	movs	r2, #0
 80084a0:	2100      	movs	r1, #0
 80084a2:	2012      	movs	r0, #18
 80084a4:	f011 fddd 	bl	801a062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80084a8:	2012      	movs	r0, #18
 80084aa:	f011 fdf4 	bl	801a096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80084ae:	bf00      	nop
 80084b0:	3778      	adds	r7, #120	; 0x78
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	40021000 	.word	0x40021000
 80084bc:	48000400 	.word	0x48000400
 80084c0:	200007a0 	.word	0x200007a0
 80084c4:	40020008 	.word	0x40020008

080084c8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 80084d0:	f7ff fc72 	bl	8007db8 <pl_callback_getSensor>
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 80084dc:	b084      	sub	sp, #16
 80084de:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	f107 0420 	add.w	r4, r7, #32
 80084ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 80084ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80084f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fa:	f2c0 819d 	blt.w	8008838 <cal_table+0x35c>
	switch (g_acc_flag) {
 80084fe:	4bcd      	ldr	r3, [pc, #820]	; (8008834 <cal_table+0x358>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b06      	cmp	r3, #6
 8008506:	f200 833a 	bhi.w	8008b7e <cal_table+0x6a2>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <cal_table+0x34>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008b71 	.word	0x08008b71
 8008514:	0800852d 	.word	0x0800852d
 8008518:	0800869f 	.word	0x0800869f
 800851c:	080087bd 	.word	0x080087bd
 8008520:	08008b71 	.word	0x08008b71
 8008524:	080087e9 	.word	0x080087e9
 8008528:	0800880f 	.word	0x0800880f
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	ed93 7a00 	vldr	s14, [r3]
 8008532:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800853a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853e:	db0a      	blt.n	8008556 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008544:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800854e:	4bb9      	ldr	r3, [pc, #740]	; (8008834 <cal_table+0x358>)
 8008550:	2202      	movs	r2, #2
 8008552:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008554:	e313      	b.n	8008b7e <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008556:	ed97 7a08 	vldr	s14, [r7, #32]
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	edd3 7a00 	vldr	s15, [r3]
 8008560:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008566:	edd3 7a00 	vldr	s15, [r3]
 800856a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800856e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008572:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008576:	ee66 7a27 	vmul.f32	s15, s12, s15
 800857a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800857e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008582:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008586:	ee66 7a27 	vmul.f32	s15, s12, s15
 800858a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800858e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008592:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008596:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800859a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800859e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a6:	d900      	bls.n	80085aa <cal_table+0xce>
		break;
 80085a8:	e2e9      	b.n	8008b7e <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 80085aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ac:	edd3 7a00 	vldr	s15, [r3]
 80085b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	edd3 7a00 	vldr	s15, [r3]
 80085ba:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80085be:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80085c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80085c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085ca:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80085ce:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80085d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80085d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085da:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80085de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80085e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80085e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80085ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80085f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80085f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f8:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 80085fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008600:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	4618      	mov	r0, r3
 800860a:	f7f7 ffc5 	bl	8000598 <__aeabi_f2d>
 800860e:	4604      	mov	r4, r0
 8008610:	460d      	mov	r5, r1
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	4618      	mov	r0, r3
 8008616:	f7f7 ffbf 	bl	8000598 <__aeabi_f2d>
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	f7f8 f811 	bl	8000648 <__aeabi_dmul>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4690      	mov	r8, r2
 800862c:	4699      	mov	r9, r3
 800862e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008632:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008636:	ee17 0a90 	vmov	r0, s15
 800863a:	f7f7 ffad 	bl	8000598 <__aeabi_f2d>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4640      	mov	r0, r8
 8008644:	4649      	mov	r1, r9
 8008646:	f7f7 ffff 	bl	8000648 <__aeabi_dmul>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	4620      	mov	r0, r4
 8008650:	4629      	mov	r1, r5
 8008652:	f7f7 fe41 	bl	80002d8 <__aeabi_dsub>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4610      	mov	r0, r2
 800865c:	4619      	mov	r1, r3
 800865e:	f7f8 facb 	bl	8000bf8 <__aeabi_d2f>
 8008662:	4602      	mov	r2, r0
 8008664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008666:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	ed93 7a00 	vldr	s14, [r3]
 800866e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008672:	edd7 7a01 	vldr	s15, [r7, #4]
 8008676:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800867a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800867e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008684:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008688:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800868c:	eef1 7a67 	vneg.f32	s15, s15
 8008690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008692:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8008696:	4b67      	ldr	r3, [pc, #412]	; (8008834 <cal_table+0x358>)
 8008698:	2203      	movs	r2, #3
 800869a:	701a      	strb	r2, [r3, #0]
		break;
 800869c:	e26f      	b.n	8008b7e <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800869e:	ed97 7a08 	vldr	s14, [r7, #32]
 80086a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80086a8:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80086ac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80086b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80086b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80086b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80086bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80086c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80086c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80086cc:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80086d0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80086d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80086d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e0:	d900      	bls.n	80086e4 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 80086e2:	e24c      	b.n	8008b7e <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80086ea:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80086ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80086f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80086f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80086fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008702:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008706:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800870a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800870e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008712:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008716:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800871a:	edd7 7a08 	vldr	s15, [r7, #32]
 800871e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800872c:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	4618      	mov	r0, r3
 8008736:	f7f7 ff2f 	bl	8000598 <__aeabi_f2d>
 800873a:	4604      	mov	r4, r0
 800873c:	460d      	mov	r5, r1
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	4618      	mov	r0, r3
 8008742:	f7f7 ff29 	bl	8000598 <__aeabi_f2d>
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f04f 0300 	mov.w	r3, #0
 800874e:	f7f7 ff7b 	bl	8000648 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4690      	mov	r8, r2
 8008758:	4699      	mov	r9, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7f7 ff1c 	bl	8000598 <__aeabi_f2d>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f7 ff6e 	bl	8000648 <__aeabi_dmul>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4620      	mov	r0, r4
 8008772:	4629      	mov	r1, r5
 8008774:	f7f7 fdb0 	bl	80002d8 <__aeabi_dsub>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	f7f8 fa3a 	bl	8000bf8 <__aeabi_d2f>
 8008784:	4602      	mov	r2, r0
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800878a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878c:	ed93 7a00 	vldr	s14, [r3]
 8008790:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008794:	edd7 7a01 	vldr	s15, [r7, #4]
 8008798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800879c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a2:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80087a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80087aa:	eef1 7a67 	vneg.f32	s15, s15
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80087b4:	4b1f      	ldr	r3, [pc, #124]	; (8008834 <cal_table+0x358>)
 80087b6:	2203      	movs	r2, #3
 80087b8:	701a      	strb	r2, [r3, #0]
		break;
 80087ba:	e1e0      	b.n	8008b7e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087be:	ed93 7a00 	vldr	s14, [r3]
 80087c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ce:	d900      	bls.n	80087d2 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80087d0:	e1d5      	b.n	8008b7e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80087d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d6:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80087d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80087e0:	4b14      	ldr	r3, [pc, #80]	; (8008834 <cal_table+0x358>)
 80087e2:	2204      	movs	r2, #4
 80087e4:	701a      	strb	r2, [r3, #0]
		break;
 80087e6:	e1ca      	b.n	8008b7e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80087ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80087f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fa:	da00      	bge.n	80087fe <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80087fc:	e1bf      	b.n	8008b7e <cal_table+0x6a2>
			target->acceleration = 0;
 80087fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <cal_table+0x358>)
 8008808:	2204      	movs	r2, #4
 800880a:	701a      	strb	r2, [r3, #0]
		break;
 800880c:	e1b7      	b.n	8008b7e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800880e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008810:	ed93 7a02 	vldr	s14, [r3, #8]
 8008814:	edd7 7a08 	vldr	s15, [r7, #32]
 8008818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800881c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008820:	da00      	bge.n	8008824 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008822:	e1ac      	b.n	8008b7e <cal_table+0x6a2>
			target->acceleration = 0;
 8008824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008826:	f04f 0200 	mov.w	r2, #0
 800882a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800882c:	4b01      	ldr	r3, [pc, #4]	; (8008834 <cal_table+0x358>)
 800882e:	2204      	movs	r2, #4
 8008830:	701a      	strb	r2, [r3, #0]
		break;
 8008832:	e1a4      	b.n	8008b7e <cal_table+0x6a2>
 8008834:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 8008838:	4bce      	ldr	r3, [pc, #824]	; (8008b74 <cal_table+0x698>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b06      	cmp	r3, #6
 8008840:	f200 819d 	bhi.w	8008b7e <cal_table+0x6a2>
 8008844:	a201      	add	r2, pc, #4	; (adr r2, 800884c <cal_table+0x370>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	08008b7d 	.word	0x08008b7d
 8008850:	08008869 	.word	0x08008869
 8008854:	080089db 	.word	0x080089db
 8008858:	08008af1 	.word	0x08008af1
 800885c:	08008b1d 	.word	0x08008b1d
 8008860:	08008b25 	.word	0x08008b25
 8008864:	08008b4b 	.word	0x08008b4b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	ed93 7a00 	vldr	s14, [r3]
 800886e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887a:	d80a      	bhi.n	8008892 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 800887c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800888a:	4bba      	ldr	r3, [pc, #744]	; (8008b74 <cal_table+0x698>)
 800888c:	2202      	movs	r2, #2
 800888e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008890:	e175      	b.n	8008b7e <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008892:	edd7 7a08 	vldr	s15, [r7, #32]
 8008896:	eeb1 7a67 	vneg.f32	s14, s15
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	edd3 7a00 	vldr	s15, [r3]
 80088a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a6:	edd3 7a00 	vldr	s15, [r3]
 80088aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80088ae:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80088b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80088b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80088ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80088be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80088c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80088ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80088ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80088d2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80088d6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088da:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80088de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e6:	d900      	bls.n	80088ea <cal_table+0x40e>
		break;
 80088e8:	e149      	b.n	8008b7e <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	edd3 7a00 	vldr	s15, [r3]
 80088f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80088f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f6:	edd3 7a00 	vldr	s15, [r3]
 80088fa:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80088fe:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008902:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800890a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800890e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008912:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800891a:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 800891e:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008922:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008926:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800892a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	edd7 7a08 	vldr	s15, [r7, #32]
 8008936:	ee77 6a67 	vsub.f32	s13, s14, s15
 800893a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893c:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008944:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	4618      	mov	r0, r3
 800894e:	f7f7 fe23 	bl	8000598 <__aeabi_f2d>
 8008952:	4604      	mov	r4, r0
 8008954:	460d      	mov	r5, r1
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	4618      	mov	r0, r3
 800895a:	f7f7 fe1d 	bl	8000598 <__aeabi_f2d>
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	f04f 0300 	mov.w	r3, #0
 8008966:	f7f7 fe6f 	bl	8000648 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4690      	mov	r8, r2
 8008970:	4699      	mov	r9, r3
 8008972:	edd7 7a01 	vldr	s15, [r7, #4]
 8008976:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800897a:	ee17 0a90 	vmov	r0, s15
 800897e:	f7f7 fe0b 	bl	8000598 <__aeabi_f2d>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4640      	mov	r0, r8
 8008988:	4649      	mov	r1, r9
 800898a:	f7f7 fe5d 	bl	8000648 <__aeabi_dmul>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7f7 fca1 	bl	80002dc <__adddf3>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4610      	mov	r0, r2
 80089a0:	4619      	mov	r1, r3
 80089a2:	f7f8 f929 	bl	8000bf8 <__aeabi_d2f>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089aa:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 80089ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ae:	ed93 7a00 	vldr	s14, [r3]
 80089b2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80089b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80089ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80089be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c8:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 80089cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d0:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80089d2:	4b68      	ldr	r3, [pc, #416]	; (8008b74 <cal_table+0x698>)
 80089d4:	2203      	movs	r2, #3
 80089d6:	701a      	strb	r2, [r3, #0]
		break;
 80089d8:	e0d1      	b.n	8008b7e <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 80089da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80089e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80089e4:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80089e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80089ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80089f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80089f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80089f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80089fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008a00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008a04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a08:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008a0c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008a10:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8008a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1c:	d900      	bls.n	8008a20 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008a1e:	e0ae      	b.n	8008b7e <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a26:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008a2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008a2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008a32:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008a36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008a3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008a3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008a42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a46:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008a4a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008a4e:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008a52:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008a56:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a5a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a60:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a68:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7f7 fd91 	bl	8000598 <__aeabi_f2d>
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7f7 fd8b 	bl	8000598 <__aeabi_f2d>
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	f04f 0300 	mov.w	r3, #0
 8008a8a:	f7f7 fddd 	bl	8000648 <__aeabi_dmul>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4690      	mov	r8, r2
 8008a94:	4699      	mov	r9, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7f7 fd7e 	bl	8000598 <__aeabi_f2d>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	f7f7 fdd0 	bl	8000648 <__aeabi_dmul>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fc14 	bl	80002dc <__adddf3>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4610      	mov	r0, r2
 8008aba:	4619      	mov	r1, r3
 8008abc:	f7f8 f89c 	bl	8000bf8 <__aeabi_d2f>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	ed93 7a00 	vldr	s14, [r3]
 8008acc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ade:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8008ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008ae8:	4b22      	ldr	r3, [pc, #136]	; (8008b74 <cal_table+0x698>)
 8008aea:	2203      	movs	r2, #3
 8008aec:	701a      	strb	r2, [r3, #0]
		break;
 8008aee:	e046      	b.n	8008b7e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af2:	ed93 7a00 	vldr	s14, [r3]
 8008af6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b02:	da00      	bge.n	8008b06 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008b04:	e03b      	b.n	8008b7e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0a:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0e:	f04f 0200 	mov.w	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008b14:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <cal_table+0x698>)
 8008b16:	2204      	movs	r2, #4
 8008b18:	701a      	strb	r2, [r3, #0]
		break;
 8008b1a:	e030      	b.n	8008b7e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8008b1c:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <cal_table+0x69c>)
 8008b1e:	2201      	movs	r2, #1
 8008b20:	701a      	strb	r2, [r3, #0]
		break;
 8008b22:	e02c      	b.n	8008b7e <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8008b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b26:	ed93 7a02 	vldr	s14, [r3, #8]
 8008b2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b36:	d900      	bls.n	8008b3a <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008b38:	e021      	b.n	8008b7e <cal_table+0x6a2>
			target->acceleration = 0;
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008b42:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <cal_table+0x698>)
 8008b44:	2204      	movs	r2, #4
 8008b46:	701a      	strb	r2, [r3, #0]
		break;
 8008b48:	e019      	b.n	8008b7e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008b50:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5c:	d900      	bls.n	8008b60 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008b5e:	e00e      	b.n	8008b7e <cal_table+0x6a2>
			target->acceleration = 0;
 8008b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008b68:	4b02      	ldr	r3, [pc, #8]	; (8008b74 <cal_table+0x698>)
 8008b6a:	2204      	movs	r2, #4
 8008b6c:	701a      	strb	r2, [r3, #0]
		break;
 8008b6e:	e006      	b.n	8008b7e <cal_table+0x6a2>
		break;
 8008b70:	bf00      	nop
 8008b72:	e004      	b.n	8008b7e <cal_table+0x6a2>
 8008b74:	20000804 	.word	0x20000804
 8008b78:	20000805 	.word	0x20000805
		break;
 8008b7c:	bf00      	nop
	}

}

}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008b88:	b004      	add	sp, #16
 8008b8a:	4770      	bx	lr
 8008b8c:	0000      	movs	r0, r0
	...

08008b90 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b94:	b08c      	sub	sp, #48	; 0x30
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	eef0 6a40 	vmov.f32	s13, s0
 8008b9c:	eeb0 7a60 	vmov.f32	s14, s1
 8008ba0:	eef0 7a41 	vmov.f32	s15, s2
 8008ba4:	6138      	str	r0, [r7, #16]
 8008ba6:	edc7 6a05 	vstr	s13, [r7, #20]
 8008baa:	ed87 7a06 	vstr	s14, [r7, #24]
 8008bae:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 8008bb2:	4be7      	ldr	r3, [pc, #924]	; (8008f50 <cal_mollifier_table+0x3c0>)
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 8008bb6:	4be7      	ldr	r3, [pc, #924]	; (8008f54 <cal_mollifier_table+0x3c4>)
 8008bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8008bba:	4be7      	ldr	r3, [pc, #924]	; (8008f58 <cal_mollifier_table+0x3c8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7f7 fcea 	bl	8000598 <__aeabi_f2d>
 8008bc4:	a3da      	add	r3, pc, #872	; (adr r3, 8008f30 <cal_mollifier_table+0x3a0>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f7f7 fb87 	bl	80002dc <__adddf3>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	f7f8 f80f 	bl	8000bf8 <__aeabi_d2f>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	4ade      	ldr	r2, [pc, #888]	; (8008f58 <cal_mollifier_table+0x3c8>)
 8008bde:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008be0:	edd7 7a05 	vldr	s15, [r7, #20]
 8008be4:	eef0 7ae7 	vabs.f32	s15, s15
 8008be8:	ee17 0a90 	vmov	r0, s15
 8008bec:	f7f7 fcd4 	bl	8000598 <__aeabi_f2d>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	f7f7 fb72 	bl	80002dc <__adddf3>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	a3cd      	add	r3, pc, #820	; (adr r3, 8008f38 <cal_mollifier_table+0x3a8>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f7f7 fe49 	bl	800089c <__aeabi_ddiv>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	a3cb      	add	r3, pc, #812	; (adr r3, 8008f40 <cal_mollifier_table+0x3b0>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fd16 	bl	8000648 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4614      	mov	r4, r2
 8008c22:	461d      	mov	r5, r3
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7f7 fcb6 	bl	8000598 <__aeabi_f2d>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4620      	mov	r0, r4
 8008c32:	4629      	mov	r1, r5
 8008c34:	f7f7 fe32 	bl	800089c <__aeabi_ddiv>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4619      	mov	r1, r3
 8008c40:	f7f7 ffda 	bl	8000bf8 <__aeabi_d2f>
 8008c44:	4603      	mov	r3, r0
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008c48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c4c:	eef1 7a67 	vneg.f32	s15, s15
 8008c50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008c58:	4bbf      	ldr	r3, [pc, #764]	; (8008f58 <cal_mollifier_table+0x3c8>)
 8008c5a:	edd3 7a00 	vldr	s15, [r3]
 8008c5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c66:	f140 8698 	bpl.w	800999a <cal_mollifier_table+0xe0a>
 8008c6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c6e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008c76:	4bb8      	ldr	r3, [pc, #736]	; (8008f58 <cal_mollifier_table+0x3c8>)
 8008c78:	edd3 7a00 	vldr	s15, [r3]
 8008c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c84:	f340 8689 	ble.w	800999a <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008c8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca2:	ee17 0a90 	vmov	r0, s15
 8008ca6:	f7f7 fc77 	bl	8000598 <__aeabi_f2d>
 8008caa:	a3a3      	add	r3, pc, #652	; (adr r3, 8008f38 <cal_mollifier_table+0x3a8>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f7f7 fdf4 	bl	800089c <__aeabi_ddiv>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4614      	mov	r4, r2
 8008cba:	461d      	mov	r5, r3
 8008cbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cc0:	eeb1 7a67 	vneg.f32	s14, s15
 8008cc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ccc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008cd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008cd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008cdc:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008ce0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008ce4:	4b9c      	ldr	r3, [pc, #624]	; (8008f58 <cal_mollifier_table+0x3c8>)
 8008ce6:	ed93 6a00 	vldr	s12, [r3]
 8008cea:	4b9b      	ldr	r3, [pc, #620]	; (8008f58 <cal_mollifier_table+0x3c8>)
 8008cec:	edd3 7a00 	vldr	s15, [r3]
 8008cf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008cf4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008cf8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008cfc:	ee16 0a90 	vmov	r0, s13
 8008d00:	f7f7 fc4a 	bl	8000598 <__aeabi_f2d>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	ec43 2b10 	vmov	d0, r2, r3
 8008d0c:	f018 ffb4 	bl	8021c78 <exp>
 8008d10:	ec53 2b10 	vmov	r2, r3, d0
 8008d14:	4620      	mov	r0, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	f7f7 fc96 	bl	8000648 <__aeabi_dmul>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4610      	mov	r0, r2
 8008d22:	4619      	mov	r1, r3
 8008d24:	f7f7 ff68 	bl	8000bf8 <__aeabi_d2f>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008d2e:	4b8a      	ldr	r3, [pc, #552]	; (8008f58 <cal_mollifier_table+0x3c8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7f7 fc30 	bl	8000598 <__aeabi_f2d>
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d40:	eef1 7a67 	vneg.f32	s15, s15
 8008d44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d4c:	ee16 0a90 	vmov	r0, s13
 8008d50:	f7f7 fc22 	bl	8000598 <__aeabi_f2d>
 8008d54:	a37c      	add	r3, pc, #496	; (adr r3, 8008f48 <cal_mollifier_table+0x3b8>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f7f7 fd9f 	bl	800089c <__aeabi_ddiv>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4690      	mov	r8, r2
 8008d64:	4699      	mov	r9, r3
 8008d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d68:	f7f7 fc16 	bl	8000598 <__aeabi_f2d>
 8008d6c:	a370      	add	r3, pc, #448	; (adr r3, 8008f30 <cal_mollifier_table+0x3a0>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f7f7 fc69 	bl	8000648 <__aeabi_dmul>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	f7f7 faad 	bl	80002dc <__adddf3>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fecf 	bl	8000b2c <__aeabi_dcmplt>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 8163 	beq.w	800905c <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008d96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008d9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008daa:	ee17 0a90 	vmov	r0, s15
 8008dae:	f7f7 fbf3 	bl	8000598 <__aeabi_f2d>
 8008db2:	a361      	add	r3, pc, #388	; (adr r3, 8008f38 <cal_mollifier_table+0x3a8>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fd70 	bl	800089c <__aeabi_ddiv>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008dc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dc8:	eeb1 7a67 	vneg.f32	s14, s15
 8008dcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ddc:	ee16 0a90 	vmov	r0, s13
 8008de0:	f7f7 fbda 	bl	8000598 <__aeabi_f2d>
 8008de4:	4604      	mov	r4, r0
 8008de6:	460d      	mov	r5, r1
 8008de8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dec:	eef1 7a67 	vneg.f32	s15, s15
 8008df0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008df4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008df8:	ee16 0a90 	vmov	r0, s13
 8008dfc:	f7f7 fbcc 	bl	8000598 <__aeabi_f2d>
 8008e00:	a351      	add	r3, pc, #324	; (adr r3, 8008f48 <cal_mollifier_table+0x3b8>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 fd49 	bl	800089c <__aeabi_ddiv>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 fc19 	bl	8000648 <__aeabi_dmul>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4690      	mov	r8, r2
 8008e1c:	4699      	mov	r9, r3
 8008e1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e26:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e2e:	ee16 0a90 	vmov	r0, s13
 8008e32:	f7f7 fbb1 	bl	8000598 <__aeabi_f2d>
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e3e:	eef1 7a67 	vneg.f32	s15, s15
 8008e42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e4a:	ee16 0a90 	vmov	r0, s13
 8008e4e:	f7f7 fba3 	bl	8000598 <__aeabi_f2d>
 8008e52:	a33d      	add	r3, pc, #244	; (adr r3, 8008f48 <cal_mollifier_table+0x3b8>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fd20 	bl	800089c <__aeabi_ddiv>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4692      	mov	sl, r2
 8008e62:	469b      	mov	fp, r3
 8008e64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e70:	ee16 0a90 	vmov	r0, s13
 8008e74:	f7f7 fb90 	bl	8000598 <__aeabi_f2d>
 8008e78:	a333      	add	r3, pc, #204	; (adr r3, 8008f48 <cal_mollifier_table+0x3b8>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fd0d 	bl	800089c <__aeabi_ddiv>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4650      	mov	r0, sl
 8008e88:	4659      	mov	r1, fp
 8008e8a:	f7f7 fbdd 	bl	8000648 <__aeabi_dmul>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4620      	mov	r0, r4
 8008e94:	4629      	mov	r1, r5
 8008e96:	f7f7 fa21 	bl	80002dc <__adddf3>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	f7f7 fcfb 	bl	800089c <__aeabi_ddiv>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4690      	mov	r8, r2
 8008eac:	4699      	mov	r9, r3
 8008eae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008eb2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008eb6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008eba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ebe:	ee16 0a90 	vmov	r0, s13
 8008ec2:	f7f7 fb69 	bl	8000598 <__aeabi_f2d>
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	460d      	mov	r5, r1
 8008eca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ece:	eef1 7a67 	vneg.f32	s15, s15
 8008ed2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ed6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008eda:	ee16 0a90 	vmov	r0, s13
 8008ede:	f7f7 fb5b 	bl	8000598 <__aeabi_f2d>
 8008ee2:	a319      	add	r3, pc, #100	; (adr r3, 8008f48 <cal_mollifier_table+0x3b8>)
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f7f7 fcd8 	bl	800089c <__aeabi_ddiv>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4692      	mov	sl, r2
 8008ef2:	469b      	mov	fp, r3
 8008ef4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ef8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008efc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f00:	ee16 0a90 	vmov	r0, s13
 8008f04:	f7f7 fb48 	bl	8000598 <__aeabi_f2d>
 8008f08:	a30f      	add	r3, pc, #60	; (adr r3, 8008f48 <cal_mollifier_table+0x3b8>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 fcc5 	bl	800089c <__aeabi_ddiv>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4650      	mov	r0, sl
 8008f18:	4659      	mov	r1, fp
 8008f1a:	f7f7 fb95 	bl	8000648 <__aeabi_dmul>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4620      	mov	r0, r4
 8008f24:	4629      	mov	r1, r5
 8008f26:	f7f7 f9d9 	bl	80002dc <__adddf3>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	e016      	b.n	8008f5c <cal_mollifier_table+0x3cc>
 8008f2e:	bf00      	nop
 8008f30:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f34:	3f50624d 	.word	0x3f50624d
 8008f38:	f9db22d1 	.word	0xf9db22d1
 8008f3c:	3fdc6a7e 	.word	0x3fdc6a7e
 8008f40:	362cef38 	.word	0x362cef38
 8008f44:	3fd78b56 	.word	0x3fd78b56
 8008f48:	04189375 	.word	0x04189375
 8008f4c:	3ff50e56 	.word	0x3ff50e56
 8008f50:	41700000 	.word	0x41700000
 8008f54:	c1700000 	.word	0xc1700000
 8008f58:	20000800 	.word	0x20000800
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 fc9b 	bl	800089c <__aeabi_ddiv>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f6e:	f7f7 fb6b 	bl	8000648 <__aeabi_dmul>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4692      	mov	sl, r2
 8008f78:	469b      	mov	fp, r3
 8008f7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f7e:	eeb1 7a67 	vneg.f32	s14, s15
 8008f82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f92:	ee16 0a90 	vmov	r0, s13
 8008f96:	f7f7 faff 	bl	8000598 <__aeabi_f2d>
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fa2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fa6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008faa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fae:	ee16 0a90 	vmov	r0, s13
 8008fb2:	f7f7 faf1 	bl	8000598 <__aeabi_f2d>
 8008fb6:	4680      	mov	r8, r0
 8008fb8:	4689      	mov	r9, r1
 8008fba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fbe:	eef1 7a67 	vneg.f32	s15, s15
 8008fc2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008fc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fca:	ee16 0a90 	vmov	r0, s13
 8008fce:	f7f7 fae3 	bl	8000598 <__aeabi_f2d>
 8008fd2:	a3e1      	add	r3, pc, #900	; (adr r3, 8009358 <cal_mollifier_table+0x7c8>)
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f7f7 fc60 	bl	800089c <__aeabi_ddiv>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008fe4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fe8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008fec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ff0:	ee16 0a90 	vmov	r0, s13
 8008ff4:	f7f7 fad0 	bl	8000598 <__aeabi_f2d>
 8008ff8:	a3d7      	add	r3, pc, #860	; (adr r3, 8009358 <cal_mollifier_table+0x7c8>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f7f7 fc4d 	bl	800089c <__aeabi_ddiv>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800900a:	f7f7 fb1d 	bl	8000648 <__aeabi_dmul>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4640      	mov	r0, r8
 8009014:	4649      	mov	r1, r9
 8009016:	f7f7 f961 	bl	80002dc <__adddf3>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fc3b 	bl	800089c <__aeabi_ddiv>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	ec43 2b17 	vmov	d7, r2, r3
 800902e:	eeb0 0a47 	vmov.f32	s0, s14
 8009032:	eef0 0a67 	vmov.f32	s1, s15
 8009036:	f018 fe1f 	bl	8021c78 <exp>
 800903a:	ec53 2b10 	vmov	r2, r3, d0
 800903e:	4650      	mov	r0, sl
 8009040:	4659      	mov	r1, fp
 8009042:	f7f7 fb01 	bl	8000648 <__aeabi_dmul>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4610      	mov	r0, r2
 800904c:	4619      	mov	r1, r3
 800904e:	f7f7 fdd3 	bl	8000bf8 <__aeabi_d2f>
 8009052:	4602      	mov	r2, r0
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009058:	f000 bcb4 	b.w	80099c4 <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 800905c:	4bc0      	ldr	r3, [pc, #768]	; (8009360 <cal_mollifier_table+0x7d0>)
 800905e:	edd3 7a00 	vldr	s15, [r3]
 8009062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	f140 817b 	bpl.w	8009364 <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 800906e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009072:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907a:	edd7 7a05 	vldr	s15, [r7, #20]
 800907e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009082:	ee17 0a90 	vmov	r0, s15
 8009086:	f7f7 fa87 	bl	8000598 <__aeabi_f2d>
 800908a:	a3af      	add	r3, pc, #700	; (adr r3, 8009348 <cal_mollifier_table+0x7b8>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f7f7 fc04 	bl	800089c <__aeabi_ddiv>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800909c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090a0:	eeb1 7a67 	vneg.f32	s14, s15
 80090a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80090b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090b4:	ee16 0a90 	vmov	r0, s13
 80090b8:	f7f7 fa6e 	bl	8000598 <__aeabi_f2d>
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	4ba7      	ldr	r3, [pc, #668]	; (8009360 <cal_mollifier_table+0x7d0>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7f7 fa67 	bl	8000598 <__aeabi_f2d>
 80090ca:	4680      	mov	r8, r0
 80090cc:	4689      	mov	r9, r1
 80090ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090d0:	f7f7 fa62 	bl	8000598 <__aeabi_f2d>
 80090d4:	a39e      	add	r3, pc, #632	; (adr r3, 8009350 <cal_mollifier_table+0x7c0>)
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	f7f7 fab5 	bl	8000648 <__aeabi_dmul>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4640      	mov	r0, r8
 80090e4:	4649      	mov	r1, r9
 80090e6:	f7f7 f8f7 	bl	80002d8 <__aeabi_dsub>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4620      	mov	r0, r4
 80090f0:	4629      	mov	r1, r5
 80090f2:	f7f7 faa9 	bl	8000648 <__aeabi_dmul>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	e9c7 2300 	strd	r2, r3, [r7]
 80090fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009102:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009106:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800910a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800910e:	ee16 0a90 	vmov	r0, s13
 8009112:	f7f7 fa41 	bl	8000598 <__aeabi_f2d>
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	4b91      	ldr	r3, [pc, #580]	; (8009360 <cal_mollifier_table+0x7d0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f7f7 fa3a 	bl	8000598 <__aeabi_f2d>
 8009124:	4604      	mov	r4, r0
 8009126:	460d      	mov	r5, r1
 8009128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800912a:	f7f7 fa35 	bl	8000598 <__aeabi_f2d>
 800912e:	a388      	add	r3, pc, #544	; (adr r3, 8009350 <cal_mollifier_table+0x7c0>)
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f7f7 fa88 	bl	8000648 <__aeabi_dmul>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4620      	mov	r0, r4
 800913e:	4629      	mov	r1, r5
 8009140:	f7f7 f8ca 	bl	80002d8 <__aeabi_dsub>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	4692      	mov	sl, r2
 800914a:	469b      	mov	fp, r3
 800914c:	4b84      	ldr	r3, [pc, #528]	; (8009360 <cal_mollifier_table+0x7d0>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4618      	mov	r0, r3
 8009152:	f7f7 fa21 	bl	8000598 <__aeabi_f2d>
 8009156:	4604      	mov	r4, r0
 8009158:	460d      	mov	r5, r1
 800915a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800915c:	f7f7 fa1c 	bl	8000598 <__aeabi_f2d>
 8009160:	a37b      	add	r3, pc, #492	; (adr r3, 8009350 <cal_mollifier_table+0x7c0>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f7f7 fa6f 	bl	8000648 <__aeabi_dmul>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 f8b1 	bl	80002d8 <__aeabi_dsub>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4650      	mov	r0, sl
 800917c:	4659      	mov	r1, fp
 800917e:	f7f7 fa63 	bl	8000648 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f7f7 f8a5 	bl	80002d8 <__aeabi_dsub>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009196:	f7f7 fb81 	bl	800089c <__aeabi_ddiv>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	e9c7 2300 	strd	r2, r3, [r7]
 80091a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80091aa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80091ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091b2:	ee16 0a90 	vmov	r0, s13
 80091b6:	f7f7 f9ef 	bl	8000598 <__aeabi_f2d>
 80091ba:	4680      	mov	r8, r0
 80091bc:	4689      	mov	r9, r1
 80091be:	4b68      	ldr	r3, [pc, #416]	; (8009360 <cal_mollifier_table+0x7d0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7f7 f9e8 	bl	8000598 <__aeabi_f2d>
 80091c8:	4604      	mov	r4, r0
 80091ca:	460d      	mov	r5, r1
 80091cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091ce:	f7f7 f9e3 	bl	8000598 <__aeabi_f2d>
 80091d2:	a35f      	add	r3, pc, #380	; (adr r3, 8009350 <cal_mollifier_table+0x7c0>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f7f7 fa36 	bl	8000648 <__aeabi_dmul>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	4620      	mov	r0, r4
 80091e2:	4629      	mov	r1, r5
 80091e4:	f7f7 f878 	bl	80002d8 <__aeabi_dsub>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4692      	mov	sl, r2
 80091ee:	469b      	mov	fp, r3
 80091f0:	4b5b      	ldr	r3, [pc, #364]	; (8009360 <cal_mollifier_table+0x7d0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f7 f9cf 	bl	8000598 <__aeabi_f2d>
 80091fa:	4604      	mov	r4, r0
 80091fc:	460d      	mov	r5, r1
 80091fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009200:	f7f7 f9ca 	bl	8000598 <__aeabi_f2d>
 8009204:	a352      	add	r3, pc, #328	; (adr r3, 8009350 <cal_mollifier_table+0x7c0>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 fa1d 	bl	8000648 <__aeabi_dmul>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4620      	mov	r0, r4
 8009214:	4629      	mov	r1, r5
 8009216:	f7f7 f85f 	bl	80002d8 <__aeabi_dsub>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4650      	mov	r0, sl
 8009220:	4659      	mov	r1, fp
 8009222:	f7f7 fa11 	bl	8000648 <__aeabi_dmul>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4640      	mov	r0, r8
 800922c:	4649      	mov	r1, r9
 800922e:	f7f7 f853 	bl	80002d8 <__aeabi_dsub>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	e9d7 0100 	ldrd	r0, r1, [r7]
 800923a:	f7f7 fb2f 	bl	800089c <__aeabi_ddiv>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009246:	f7f7 f9ff 	bl	8000648 <__aeabi_dmul>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009252:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009256:	eeb1 7a67 	vneg.f32	s14, s15
 800925a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009266:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800926a:	ee16 0a90 	vmov	r0, s13
 800926e:	f7f7 f993 	bl	8000598 <__aeabi_f2d>
 8009272:	4680      	mov	r8, r0
 8009274:	4689      	mov	r9, r1
 8009276:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800927a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800927e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009282:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009286:	ee16 0a90 	vmov	r0, s13
 800928a:	f7f7 f985 	bl	8000598 <__aeabi_f2d>
 800928e:	4682      	mov	sl, r0
 8009290:	468b      	mov	fp, r1
 8009292:	4b33      	ldr	r3, [pc, #204]	; (8009360 <cal_mollifier_table+0x7d0>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f7f7 f97e 	bl	8000598 <__aeabi_f2d>
 800929c:	4604      	mov	r4, r0
 800929e:	460d      	mov	r5, r1
 80092a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092a2:	f7f7 f979 	bl	8000598 <__aeabi_f2d>
 80092a6:	a32a      	add	r3, pc, #168	; (adr r3, 8009350 <cal_mollifier_table+0x7c0>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f7 f9cc 	bl	8000648 <__aeabi_dmul>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4620      	mov	r0, r4
 80092b6:	4629      	mov	r1, r5
 80092b8:	f7f7 f80e 	bl	80002d8 <__aeabi_dsub>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	e9c7 2300 	strd	r2, r3, [r7]
 80092c4:	4b26      	ldr	r3, [pc, #152]	; (8009360 <cal_mollifier_table+0x7d0>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7f7 f965 	bl	8000598 <__aeabi_f2d>
 80092ce:	4604      	mov	r4, r0
 80092d0:	460d      	mov	r5, r1
 80092d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092d4:	f7f7 f960 	bl	8000598 <__aeabi_f2d>
 80092d8:	a31d      	add	r3, pc, #116	; (adr r3, 8009350 <cal_mollifier_table+0x7c0>)
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f7f7 f9b3 	bl	8000648 <__aeabi_dmul>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4620      	mov	r0, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f6 fff5 	bl	80002d8 <__aeabi_dsub>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092f6:	f7f7 f9a7 	bl	8000648 <__aeabi_dmul>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	4650      	mov	r0, sl
 8009300:	4659      	mov	r1, fp
 8009302:	f7f6 ffe9 	bl	80002d8 <__aeabi_dsub>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4640      	mov	r0, r8
 800930c:	4649      	mov	r1, r9
 800930e:	f7f7 fac5 	bl	800089c <__aeabi_ddiv>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	ec43 2b17 	vmov	d7, r2, r3
 800931a:	eeb0 0a47 	vmov.f32	s0, s14
 800931e:	eef0 0a67 	vmov.f32	s1, s15
 8009322:	f018 fca9 	bl	8021c78 <exp>
 8009326:	ec53 2b10 	vmov	r2, r3, d0
 800932a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800932e:	f7f7 f98b 	bl	8000648 <__aeabi_dmul>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4610      	mov	r0, r2
 8009338:	4619      	mov	r1, r3
 800933a:	f7f7 fc5d 	bl	8000bf8 <__aeabi_d2f>
 800933e:	4602      	mov	r2, r0
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009344:	e33e      	b.n	80099c4 <cal_mollifier_table+0xe34>
 8009346:	bf00      	nop
 8009348:	f9db22d1 	.word	0xf9db22d1
 800934c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009350:	d2f1a9fc 	.word	0xd2f1a9fc
 8009354:	3f50624d 	.word	0x3f50624d
 8009358:	04189375 	.word	0x04189375
 800935c:	3ff50e56 	.word	0x3ff50e56
 8009360:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009364:	4bd4      	ldr	r3, [pc, #848]	; (80096b8 <cal_mollifier_table+0xb28>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f7f7 f915 	bl	8000598 <__aeabi_f2d>
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009376:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800937a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800937e:	ee16 0a90 	vmov	r0, s13
 8009382:	f7f7 f909 	bl	8000598 <__aeabi_f2d>
 8009386:	a3c6      	add	r3, pc, #792	; (adr r3, 80096a0 <cal_mollifier_table+0xb10>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f7 fa86 	bl	800089c <__aeabi_ddiv>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4690      	mov	r8, r2
 8009396:	4699      	mov	r9, r3
 8009398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800939a:	f7f7 f8fd 	bl	8000598 <__aeabi_f2d>
 800939e:	a3c2      	add	r3, pc, #776	; (adr r3, 80096a8 <cal_mollifier_table+0xb18>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f7f7 f950 	bl	8000648 <__aeabi_dmul>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	f7f6 ff94 	bl	80002dc <__adddf3>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f7 fbb6 	bl	8000b2c <__aeabi_dcmplt>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f000 817a 	beq.w	80096bc <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80093c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80093cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80093d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80093d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093dc:	ee17 0a90 	vmov	r0, s15
 80093e0:	f7f7 f8da 	bl	8000598 <__aeabi_f2d>
 80093e4:	a3b2      	add	r3, pc, #712	; (adr r3, 80096b0 <cal_mollifier_table+0xb20>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	f7f7 fa57 	bl	800089c <__aeabi_ddiv>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80093f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80093fa:	eeb1 7a67 	vneg.f32	s14, s15
 80093fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009406:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800940a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800940e:	ee16 0a90 	vmov	r0, s13
 8009412:	f7f7 f8c1 	bl	8000598 <__aeabi_f2d>
 8009416:	4604      	mov	r4, r0
 8009418:	460d      	mov	r5, r1
 800941a:	4ba7      	ldr	r3, [pc, #668]	; (80096b8 <cal_mollifier_table+0xb28>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4618      	mov	r0, r3
 8009420:	f7f7 f8ba 	bl	8000598 <__aeabi_f2d>
 8009424:	4680      	mov	r8, r0
 8009426:	4689      	mov	r9, r1
 8009428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800942a:	f7f7 f8b5 	bl	8000598 <__aeabi_f2d>
 800942e:	a39e      	add	r3, pc, #632	; (adr r3, 80096a8 <cal_mollifier_table+0xb18>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f7 f908 	bl	8000648 <__aeabi_dmul>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4640      	mov	r0, r8
 800943e:	4649      	mov	r1, r9
 8009440:	f7f6 ff4a 	bl	80002d8 <__aeabi_dsub>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	f7f7 f8fc 	bl	8000648 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	e9c7 2300 	strd	r2, r3, [r7]
 8009458:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800945c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009460:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009464:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009468:	ee16 0a90 	vmov	r0, s13
 800946c:	f7f7 f894 	bl	8000598 <__aeabi_f2d>
 8009470:	4680      	mov	r8, r0
 8009472:	4689      	mov	r9, r1
 8009474:	4b90      	ldr	r3, [pc, #576]	; (80096b8 <cal_mollifier_table+0xb28>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f7f7 f88d 	bl	8000598 <__aeabi_f2d>
 800947e:	4604      	mov	r4, r0
 8009480:	460d      	mov	r5, r1
 8009482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009484:	f7f7 f888 	bl	8000598 <__aeabi_f2d>
 8009488:	a387      	add	r3, pc, #540	; (adr r3, 80096a8 <cal_mollifier_table+0xb18>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f7 f8db 	bl	8000648 <__aeabi_dmul>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f7f6 ff1d 	bl	80002d8 <__aeabi_dsub>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4692      	mov	sl, r2
 80094a4:	469b      	mov	fp, r3
 80094a6:	4b84      	ldr	r3, [pc, #528]	; (80096b8 <cal_mollifier_table+0xb28>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f7 f874 	bl	8000598 <__aeabi_f2d>
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094b6:	f7f7 f86f 	bl	8000598 <__aeabi_f2d>
 80094ba:	a37b      	add	r3, pc, #492	; (adr r3, 80096a8 <cal_mollifier_table+0xb18>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f7 f8c2 	bl	8000648 <__aeabi_dmul>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4620      	mov	r0, r4
 80094ca:	4629      	mov	r1, r5
 80094cc:	f7f6 ff04 	bl	80002d8 <__aeabi_dsub>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4650      	mov	r0, sl
 80094d6:	4659      	mov	r1, fp
 80094d8:	f7f7 f8b6 	bl	8000648 <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4640      	mov	r0, r8
 80094e2:	4649      	mov	r1, r9
 80094e4:	f7f6 fef8 	bl	80002d8 <__aeabi_dsub>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094f0:	f7f7 f9d4 	bl	800089c <__aeabi_ddiv>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	e9c7 2300 	strd	r2, r3, [r7]
 80094fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009500:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009504:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009508:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800950c:	ee16 0a90 	vmov	r0, s13
 8009510:	f7f7 f842 	bl	8000598 <__aeabi_f2d>
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	4b67      	ldr	r3, [pc, #412]	; (80096b8 <cal_mollifier_table+0xb28>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4618      	mov	r0, r3
 800951e:	f7f7 f83b 	bl	8000598 <__aeabi_f2d>
 8009522:	4604      	mov	r4, r0
 8009524:	460d      	mov	r5, r1
 8009526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009528:	f7f7 f836 	bl	8000598 <__aeabi_f2d>
 800952c:	a35e      	add	r3, pc, #376	; (adr r3, 80096a8 <cal_mollifier_table+0xb18>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7f7 f889 	bl	8000648 <__aeabi_dmul>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4620      	mov	r0, r4
 800953c:	4629      	mov	r1, r5
 800953e:	f7f6 fecb 	bl	80002d8 <__aeabi_dsub>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4692      	mov	sl, r2
 8009548:	469b      	mov	fp, r3
 800954a:	4b5b      	ldr	r3, [pc, #364]	; (80096b8 <cal_mollifier_table+0xb28>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f7f7 f822 	bl	8000598 <__aeabi_f2d>
 8009554:	4604      	mov	r4, r0
 8009556:	460d      	mov	r5, r1
 8009558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800955a:	f7f7 f81d 	bl	8000598 <__aeabi_f2d>
 800955e:	a352      	add	r3, pc, #328	; (adr r3, 80096a8 <cal_mollifier_table+0xb18>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f7f7 f870 	bl	8000648 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f7f6 feb2 	bl	80002d8 <__aeabi_dsub>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4650      	mov	r0, sl
 800957a:	4659      	mov	r1, fp
 800957c:	f7f7 f864 	bl	8000648 <__aeabi_dmul>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4640      	mov	r0, r8
 8009586:	4649      	mov	r1, r9
 8009588:	f7f6 fea6 	bl	80002d8 <__aeabi_dsub>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009594:	f7f7 f982 	bl	800089c <__aeabi_ddiv>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095a0:	f7f7 f852 	bl	8000648 <__aeabi_dmul>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80095ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095b0:	eeb1 7a67 	vneg.f32	s14, s15
 80095b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095bc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095c4:	ee16 0a90 	vmov	r0, s13
 80095c8:	f7f6 ffe6 	bl	8000598 <__aeabi_f2d>
 80095cc:	4680      	mov	r8, r0
 80095ce:	4689      	mov	r9, r1
 80095d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095e0:	ee16 0a90 	vmov	r0, s13
 80095e4:	f7f6 ffd8 	bl	8000598 <__aeabi_f2d>
 80095e8:	4682      	mov	sl, r0
 80095ea:	468b      	mov	fp, r1
 80095ec:	4b32      	ldr	r3, [pc, #200]	; (80096b8 <cal_mollifier_table+0xb28>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7f6 ffd1 	bl	8000598 <__aeabi_f2d>
 80095f6:	4604      	mov	r4, r0
 80095f8:	460d      	mov	r5, r1
 80095fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095fc:	f7f6 ffcc 	bl	8000598 <__aeabi_f2d>
 8009600:	a329      	add	r3, pc, #164	; (adr r3, 80096a8 <cal_mollifier_table+0xb18>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f7 f81f 	bl	8000648 <__aeabi_dmul>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f6 fe61 	bl	80002d8 <__aeabi_dsub>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	e9c7 2300 	strd	r2, r3, [r7]
 800961e:	4b26      	ldr	r3, [pc, #152]	; (80096b8 <cal_mollifier_table+0xb28>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4618      	mov	r0, r3
 8009624:	f7f6 ffb8 	bl	8000598 <__aeabi_f2d>
 8009628:	4604      	mov	r4, r0
 800962a:	460d      	mov	r5, r1
 800962c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800962e:	f7f6 ffb3 	bl	8000598 <__aeabi_f2d>
 8009632:	a31d      	add	r3, pc, #116	; (adr r3, 80096a8 <cal_mollifier_table+0xb18>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f7 f806 	bl	8000648 <__aeabi_dmul>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4620      	mov	r0, r4
 8009642:	4629      	mov	r1, r5
 8009644:	f7f6 fe48 	bl	80002d8 <__aeabi_dsub>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009650:	f7f6 fffa 	bl	8000648 <__aeabi_dmul>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4650      	mov	r0, sl
 800965a:	4659      	mov	r1, fp
 800965c:	f7f6 fe3c 	bl	80002d8 <__aeabi_dsub>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4640      	mov	r0, r8
 8009666:	4649      	mov	r1, r9
 8009668:	f7f7 f918 	bl	800089c <__aeabi_ddiv>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	ec43 2b17 	vmov	d7, r2, r3
 8009674:	eeb0 0a47 	vmov.f32	s0, s14
 8009678:	eef0 0a67 	vmov.f32	s1, s15
 800967c:	f018 fafc 	bl	8021c78 <exp>
 8009680:	ec53 2b10 	vmov	r2, r3, d0
 8009684:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009688:	f7f6 ffde 	bl	8000648 <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4610      	mov	r0, r2
 8009692:	4619      	mov	r1, r3
 8009694:	f7f7 fab0 	bl	8000bf8 <__aeabi_d2f>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800969e:	e191      	b.n	80099c4 <cal_mollifier_table+0xe34>
 80096a0:	04189375 	.word	0x04189375
 80096a4:	3ff50e56 	.word	0x3ff50e56
 80096a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80096ac:	3f50624d 	.word	0x3f50624d
 80096b0:	f9db22d1 	.word	0xf9db22d1
 80096b4:	3fdc6a7e 	.word	0x3fdc6a7e
 80096b8:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 80096bc:	f04f 0300 	mov.w	r3, #0
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80096c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80096c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80096ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80096d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d6:	ee17 0a90 	vmov	r0, s15
 80096da:	f7f6 ff5d 	bl	8000598 <__aeabi_f2d>
 80096de:	a3c0      	add	r3, pc, #768	; (adr r3, 80099e0 <cal_mollifier_table+0xe50>)
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	f7f7 f8da 	bl	800089c <__aeabi_ddiv>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80096f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80096f4:	eeb1 7a67 	vneg.f32	s14, s15
 80096f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80096fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009700:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009704:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009708:	ee16 0a90 	vmov	r0, s13
 800970c:	f7f6 ff44 	bl	8000598 <__aeabi_f2d>
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	4bb0      	ldr	r3, [pc, #704]	; (80099d8 <cal_mollifier_table+0xe48>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4618      	mov	r0, r3
 800971a:	f7f6 ff3d 	bl	8000598 <__aeabi_f2d>
 800971e:	4680      	mov	r8, r0
 8009720:	4689      	mov	r9, r1
 8009722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009724:	f7f6 ff38 	bl	8000598 <__aeabi_f2d>
 8009728:	a3a9      	add	r3, pc, #676	; (adr r3, 80099d0 <cal_mollifier_table+0xe40>)
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f7f6 ff8b 	bl	8000648 <__aeabi_dmul>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4640      	mov	r0, r8
 8009738:	4649      	mov	r1, r9
 800973a:	f7f6 fdcd 	bl	80002d8 <__aeabi_dsub>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4620      	mov	r0, r4
 8009744:	4629      	mov	r1, r5
 8009746:	f7f6 ff7f 	bl	8000648 <__aeabi_dmul>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	e9c7 2300 	strd	r2, r3, [r7]
 8009752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009756:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800975a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800975e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009762:	ee16 0a90 	vmov	r0, s13
 8009766:	f7f6 ff17 	bl	8000598 <__aeabi_f2d>
 800976a:	4680      	mov	r8, r0
 800976c:	4689      	mov	r9, r1
 800976e:	4b9a      	ldr	r3, [pc, #616]	; (80099d8 <cal_mollifier_table+0xe48>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f7f6 ff10 	bl	8000598 <__aeabi_f2d>
 8009778:	4604      	mov	r4, r0
 800977a:	460d      	mov	r5, r1
 800977c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800977e:	f7f6 ff0b 	bl	8000598 <__aeabi_f2d>
 8009782:	a393      	add	r3, pc, #588	; (adr r3, 80099d0 <cal_mollifier_table+0xe40>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f7f6 ff5e 	bl	8000648 <__aeabi_dmul>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4620      	mov	r0, r4
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fda0 	bl	80002d8 <__aeabi_dsub>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4692      	mov	sl, r2
 800979e:	469b      	mov	fp, r3
 80097a0:	4b8d      	ldr	r3, [pc, #564]	; (80099d8 <cal_mollifier_table+0xe48>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7f6 fef7 	bl	8000598 <__aeabi_f2d>
 80097aa:	4604      	mov	r4, r0
 80097ac:	460d      	mov	r5, r1
 80097ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097b0:	f7f6 fef2 	bl	8000598 <__aeabi_f2d>
 80097b4:	a386      	add	r3, pc, #536	; (adr r3, 80099d0 <cal_mollifier_table+0xe40>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f6 ff45 	bl	8000648 <__aeabi_dmul>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4620      	mov	r0, r4
 80097c4:	4629      	mov	r1, r5
 80097c6:	f7f6 fd87 	bl	80002d8 <__aeabi_dsub>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4650      	mov	r0, sl
 80097d0:	4659      	mov	r1, fp
 80097d2:	f7f6 ff39 	bl	8000648 <__aeabi_dmul>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4640      	mov	r0, r8
 80097dc:	4649      	mov	r1, r9
 80097de:	f7f6 fd7b 	bl	80002d8 <__aeabi_dsub>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ea:	f7f7 f857 	bl	800089c <__aeabi_ddiv>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	e9c7 2300 	strd	r2, r3, [r7]
 80097f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80097fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80097fe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009802:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009806:	ee16 0a90 	vmov	r0, s13
 800980a:	f7f6 fec5 	bl	8000598 <__aeabi_f2d>
 800980e:	4680      	mov	r8, r0
 8009810:	4689      	mov	r9, r1
 8009812:	4b71      	ldr	r3, [pc, #452]	; (80099d8 <cal_mollifier_table+0xe48>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4618      	mov	r0, r3
 8009818:	f7f6 febe 	bl	8000598 <__aeabi_f2d>
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009822:	f7f6 feb9 	bl	8000598 <__aeabi_f2d>
 8009826:	a36a      	add	r3, pc, #424	; (adr r3, 80099d0 <cal_mollifier_table+0xe40>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7f6 ff0c 	bl	8000648 <__aeabi_dmul>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4620      	mov	r0, r4
 8009836:	4629      	mov	r1, r5
 8009838:	f7f6 fd4e 	bl	80002d8 <__aeabi_dsub>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4692      	mov	sl, r2
 8009842:	469b      	mov	fp, r3
 8009844:	4b64      	ldr	r3, [pc, #400]	; (80099d8 <cal_mollifier_table+0xe48>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4618      	mov	r0, r3
 800984a:	f7f6 fea5 	bl	8000598 <__aeabi_f2d>
 800984e:	4604      	mov	r4, r0
 8009850:	460d      	mov	r5, r1
 8009852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009854:	f7f6 fea0 	bl	8000598 <__aeabi_f2d>
 8009858:	a35d      	add	r3, pc, #372	; (adr r3, 80099d0 <cal_mollifier_table+0xe40>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fef3 	bl	8000648 <__aeabi_dmul>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f6 fd35 	bl	80002d8 <__aeabi_dsub>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4650      	mov	r0, sl
 8009874:	4659      	mov	r1, fp
 8009876:	f7f6 fee7 	bl	8000648 <__aeabi_dmul>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4640      	mov	r0, r8
 8009880:	4649      	mov	r1, r9
 8009882:	f7f6 fd29 	bl	80002d8 <__aeabi_dsub>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800988e:	f7f7 f805 	bl	800089c <__aeabi_ddiv>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800989a:	f7f6 fed5 	bl	8000648 <__aeabi_dmul>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80098a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80098aa:	eeb1 7a67 	vneg.f32	s14, s15
 80098ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80098b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80098ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80098be:	ee16 0a90 	vmov	r0, s13
 80098c2:	f7f6 fe69 	bl	8000598 <__aeabi_f2d>
 80098c6:	4680      	mov	r8, r0
 80098c8:	4689      	mov	r9, r1
 80098ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80098ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80098d2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80098d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80098da:	ee16 0a90 	vmov	r0, s13
 80098de:	f7f6 fe5b 	bl	8000598 <__aeabi_f2d>
 80098e2:	4682      	mov	sl, r0
 80098e4:	468b      	mov	fp, r1
 80098e6:	4b3c      	ldr	r3, [pc, #240]	; (80099d8 <cal_mollifier_table+0xe48>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7f6 fe54 	bl	8000598 <__aeabi_f2d>
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098f6:	f7f6 fe4f 	bl	8000598 <__aeabi_f2d>
 80098fa:	a335      	add	r3, pc, #212	; (adr r3, 80099d0 <cal_mollifier_table+0xe40>)
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f7f6 fea2 	bl	8000648 <__aeabi_dmul>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4620      	mov	r0, r4
 800990a:	4629      	mov	r1, r5
 800990c:	f7f6 fce4 	bl	80002d8 <__aeabi_dsub>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	e9c7 2300 	strd	r2, r3, [r7]
 8009918:	4b2f      	ldr	r3, [pc, #188]	; (80099d8 <cal_mollifier_table+0xe48>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f7f6 fe3b 	bl	8000598 <__aeabi_f2d>
 8009922:	4604      	mov	r4, r0
 8009924:	460d      	mov	r5, r1
 8009926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009928:	f7f6 fe36 	bl	8000598 <__aeabi_f2d>
 800992c:	a328      	add	r3, pc, #160	; (adr r3, 80099d0 <cal_mollifier_table+0xe40>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f6 fe89 	bl	8000648 <__aeabi_dmul>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4620      	mov	r0, r4
 800993c:	4629      	mov	r1, r5
 800993e:	f7f6 fccb 	bl	80002d8 <__aeabi_dsub>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800994a:	f7f6 fe7d 	bl	8000648 <__aeabi_dmul>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4650      	mov	r0, sl
 8009954:	4659      	mov	r1, fp
 8009956:	f7f6 fcbf 	bl	80002d8 <__aeabi_dsub>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	4640      	mov	r0, r8
 8009960:	4649      	mov	r1, r9
 8009962:	f7f6 ff9b 	bl	800089c <__aeabi_ddiv>
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	ec43 2b17 	vmov	d7, r2, r3
 800996e:	eeb0 0a47 	vmov.f32	s0, s14
 8009972:	eef0 0a67 	vmov.f32	s1, s15
 8009976:	f018 f97f 	bl	8021c78 <exp>
 800997a:	ec53 2b10 	vmov	r2, r3, d0
 800997e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009982:	f7f6 fe61 	bl	8000648 <__aeabi_dmul>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4610      	mov	r0, r2
 800998c:	4619      	mov	r1, r3
 800998e:	f7f7 f933 	bl	8000bf8 <__aeabi_d2f>
 8009992:	4602      	mov	r2, r0
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009998:	e014      	b.n	80099c4 <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f04f 0200 	mov.w	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	ed93 7a00 	vldr	s14, [r3]
 80099ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80099b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 80099bc:	4b07      	ldr	r3, [pc, #28]	; (80099dc <cal_mollifier_table+0xe4c>)
 80099be:	2204      	movs	r2, #4
 80099c0:	701a      	strb	r2, [r3, #0]
		}

}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	3730      	adds	r7, #48	; 0x30
 80099c8:	46bd      	mov	sp, r7
 80099ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ce:	bf00      	nop
 80099d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80099d4:	3f50624d 	.word	0x3f50624d
 80099d8:	20000800 	.word	0x20000800
 80099dc:	20000804 	.word	0x20000804
 80099e0:	f9db22d1 	.word	0xf9db22d1
 80099e4:	3fdc6a7e 	.word	0x3fdc6a7e

080099e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80099ee:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <MX_DMA_Init+0x50>)
 80099f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f2:	4a11      	ldr	r2, [pc, #68]	; (8009a38 <MX_DMA_Init+0x50>)
 80099f4:	f043 0304 	orr.w	r3, r3, #4
 80099f8:	6493      	str	r3, [r2, #72]	; 0x48
 80099fa:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <MX_DMA_Init+0x50>)
 80099fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099fe:	f003 0304 	and.w	r3, r3, #4
 8009a02:	607b      	str	r3, [r7, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <MX_DMA_Init+0x50>)
 8009a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0a:	4a0b      	ldr	r2, [pc, #44]	; (8009a38 <MX_DMA_Init+0x50>)
 8009a0c:	f043 0301 	orr.w	r3, r3, #1
 8009a10:	6493      	str	r3, [r2, #72]	; 0x48
 8009a12:	4b09      	ldr	r3, [pc, #36]	; (8009a38 <MX_DMA_Init+0x50>)
 8009a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	200b      	movs	r0, #11
 8009a24:	f010 fb1d 	bl	801a062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009a28:	200b      	movs	r0, #11
 8009a2a:	f010 fb34 	bl	801a096 <HAL_NVIC_EnableIRQ>

}
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40021000 	.word	0x40021000

08009a3c <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
	error_mode=0;
 8009a40:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <init_FailSafe+0x4c>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 8009a46:	4b11      	ldr	r3, [pc, #68]	; (8009a8c <init_FailSafe+0x50>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8009a4c:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <init_FailSafe+0x54>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 8009a52:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <init_FailSafe+0x58>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009a58:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <init_FailSafe+0x5c>)
 8009a5a:	4a10      	ldr	r2, [pc, #64]	; (8009a9c <init_FailSafe+0x60>)
 8009a5c:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 8009a5e:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <init_FailSafe+0x64>)
 8009a60:	4a10      	ldr	r2, [pc, #64]	; (8009aa4 <init_FailSafe+0x68>)
 8009a62:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 8009a64:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <init_FailSafe+0x6c>)
 8009a66:	4a0d      	ldr	r2, [pc, #52]	; (8009a9c <init_FailSafe+0x60>)
 8009a68:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=2000;//3000
 8009a6a:	4b10      	ldr	r3, [pc, #64]	; (8009aac <init_FailSafe+0x70>)
 8009a6c:	4a10      	ldr	r2, [pc, #64]	; (8009ab0 <init_FailSafe+0x74>)
 8009a6e:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009a70:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <init_FailSafe+0x78>)
 8009a72:	4a11      	ldr	r2, [pc, #68]	; (8009ab8 <init_FailSafe+0x7c>)
 8009a74:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1500;
 8009a76:	4b11      	ldr	r3, [pc, #68]	; (8009abc <init_FailSafe+0x80>)
 8009a78:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <init_FailSafe+0x60>)
 8009a7a:	601a      	str	r2, [r3, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20000807 	.word	0x20000807
 8009a8c:	20000806 	.word	0x20000806
 8009a90:	20000808 	.word	0x20000808
 8009a94:	20000824 	.word	0x20000824
 8009a98:	2000080c 	.word	0x2000080c
 8009a9c:	44bb8000 	.word	0x44bb8000
 8009aa0:	20000810 	.word	0x20000810
 8009aa4:	44480000 	.word	0x44480000
 8009aa8:	20000814 	.word	0x20000814
 8009aac:	20000818 	.word	0x20000818
 8009ab0:	44fa0000 	.word	0x44fa0000
 8009ab4:	2000081c 	.word	0x2000081c
 8009ab8:	44ed8000 	.word	0x44ed8000
 8009abc:	20000820 	.word	0x20000820

08009ac0 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 8009ac6:	4b6e      	ldr	r3, [pc, #440]	; (8009c80 <interrupt_FailSafe+0x1c0>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8009ace:	4b6d      	ldr	r3, [pc, #436]	; (8009c84 <interrupt_FailSafe+0x1c4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 8009ad4:	4b6c      	ldr	r3, [pc, #432]	; (8009c88 <interrupt_FailSafe+0x1c8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 8009ada:	4b6c      	ldr	r3, [pc, #432]	; (8009c8c <interrupt_FailSafe+0x1cc>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	607b      	str	r3, [r7, #4]
 8009ae0:	e008      	b.n	8009af4 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 8009ae2:	4b6b      	ldr	r3, [pc, #428]	; (8009c90 <interrupt_FailSafe+0x1d0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009ae8:	4b6a      	ldr	r3, [pc, #424]	; (8009c94 <interrupt_FailSafe+0x1d4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009aee:	4b6a      	ldr	r3, [pc, #424]	; (8009c98 <interrupt_FailSafe+0x1d8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 8009af4:	4b69      	ldr	r3, [pc, #420]	; (8009c9c <interrupt_FailSafe+0x1dc>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d062      	beq.n	8009bc2 <interrupt_FailSafe+0x102>
 8009afc:	4b67      	ldr	r3, [pc, #412]	; (8009c9c <interrupt_FailSafe+0x1dc>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d05e      	beq.n	8009bc2 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 8009b04:	4b66      	ldr	r3, [pc, #408]	; (8009ca0 <interrupt_FailSafe+0x1e0>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d15a      	bne.n	8009bc2 <interrupt_FailSafe+0x102>
 8009b0c:	4b65      	ldr	r3, [pc, #404]	; (8009ca4 <interrupt_FailSafe+0x1e4>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d156      	bne.n	8009bc2 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 8009b14:	4b64      	ldr	r3, [pc, #400]	; (8009ca8 <interrupt_FailSafe+0x1e8>)
 8009b16:	ed93 7a00 	vldr	s14, [r3]
 8009b1a:	4b64      	ldr	r3, [pc, #400]	; (8009cac <interrupt_FailSafe+0x1ec>)
 8009b1c:	edd3 7a00 	vldr	s15, [r3]
 8009b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b24:	eef0 7ae7 	vabs.f32	s15, s15
 8009b28:	ed97 7a02 	vldr	s14, [r7, #8]
 8009b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b34:	d809      	bhi.n	8009b4a <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009b36:	f7fe f879 	bl	8007c2c <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	f7fd fa76 	bl	800702c <pl_yellow_LED_count>
						error_mode = 1;
 8009b40:	4b58      	ldr	r3, [pc, #352]	; (8009ca4 <interrupt_FailSafe+0x1e4>)
 8009b42:	2201      	movs	r2, #1
 8009b44:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009b46:	f7fa fec9 	bl	80048dc <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 8009b4a:	4b59      	ldr	r3, [pc, #356]	; (8009cb0 <interrupt_FailSafe+0x1f0>)
 8009b4c:	edd3 7a00 	vldr	s15, [r3]
 8009b50:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b5c:	d809      	bhi.n	8009b72 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009b5e:	f7fe f865 	bl	8007c2c <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 8009b62:	2002      	movs	r0, #2
 8009b64:	f7fd fa62 	bl	800702c <pl_yellow_LED_count>
						error_mode = 1;
 8009b68:	4b4e      	ldr	r3, [pc, #312]	; (8009ca4 <interrupt_FailSafe+0x1e4>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009b6e:	f7fa feb5 	bl	80048dc <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 8009b72:	4b50      	ldr	r3, [pc, #320]	; (8009cb4 <interrupt_FailSafe+0x1f4>)
 8009b74:	ed93 7a00 	vldr	s14, [r3]
 8009b78:	4b4f      	ldr	r3, [pc, #316]	; (8009cb8 <interrupt_FailSafe+0x1f8>)
 8009b7a:	edd3 6a00 	vldr	s13, [r3]
 8009b7e:	4b4f      	ldr	r3, [pc, #316]	; (8009cbc <interrupt_FailSafe+0x1fc>)
 8009b80:	edd3 7a00 	vldr	s15, [r3]
 8009b84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009b88:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009b8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b94:	eef0 7ae7 	vabs.f32	s15, s15
 8009b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8009b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba4:	d80d      	bhi.n	8009bc2 <interrupt_FailSafe+0x102>
 8009ba6:	4b3d      	ldr	r3, [pc, #244]	; (8009c9c <interrupt_FailSafe+0x1dc>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d109      	bne.n	8009bc2 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009bae:	f7fe f83d 	bl	8007c2c <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009bb2:	2004      	movs	r0, #4
 8009bb4:	f7fd fa3a 	bl	800702c <pl_yellow_LED_count>
						error_mode = 1;
 8009bb8:	4b3a      	ldr	r3, [pc, #232]	; (8009ca4 <interrupt_FailSafe+0x1e4>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009bbe:	f7fa fe8d 	bl	80048dc <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009bc2:	4b38      	ldr	r3, [pc, #224]	; (8009ca4 <interrupt_FailSafe+0x1e4>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d153      	bne.n	8009c72 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8009bca:	4b3d      	ldr	r3, [pc, #244]	; (8009cc0 <interrupt_FailSafe+0x200>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009bd0:	4b3c      	ldr	r3, [pc, #240]	; (8009cc4 <interrupt_FailSafe+0x204>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	4a3b      	ldr	r2, [pc, #236]	; (8009cc4 <interrupt_FailSafe+0x204>)
 8009bd8:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8009bda:	4b3a      	ldr	r3, [pc, #232]	; (8009cc4 <interrupt_FailSafe+0x204>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009be2:	dc05      	bgt.n	8009bf0 <interrupt_FailSafe+0x130>
			init_WallControl();
 8009be4:	f7fa ffb0 	bl	8004b48 <init_WallControl>
			modeacc=100;//エラー用
 8009be8:	4b2c      	ldr	r3, [pc, #176]	; (8009c9c <interrupt_FailSafe+0x1dc>)
 8009bea:	2264      	movs	r2, #100	; 0x64
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e009      	b.n	8009c04 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	f7fd ff87 	bl	8007b04 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 8009bf6:	f7fd ffeb 	bl	8007bd0 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 8009bfa:	f7fe f817 	bl	8007c2c <pl_FunMotor_stop>
			modeacc=0;
 8009bfe:	4b27      	ldr	r3, [pc, #156]	; (8009c9c <interrupt_FailSafe+0x1dc>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8009c04:	4b30      	ldr	r3, [pc, #192]	; (8009cc8 <interrupt_FailSafe+0x208>)
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0a:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009c0c:	4b2f      	ldr	r3, [pc, #188]	; (8009ccc <interrupt_FailSafe+0x20c>)
 8009c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c12:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8009c14:	4b2e      	ldr	r3, [pc, #184]	; (8009cd0 <interrupt_FailSafe+0x210>)
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1a:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8009c1c:	4b2d      	ldr	r3, [pc, #180]	; (8009cd4 <interrupt_FailSafe+0x214>)
 8009c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c22:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 8009c24:	4b2c      	ldr	r3, [pc, #176]	; (8009cd8 <interrupt_FailSafe+0x218>)
 8009c26:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2a:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8009c2c:	4b2b      	ldr	r3, [pc, #172]	; (8009cdc <interrupt_FailSafe+0x21c>)
 8009c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c32:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 8009c34:	4b2a      	ldr	r3, [pc, #168]	; (8009ce0 <interrupt_FailSafe+0x220>)
 8009c36:	4a2b      	ldr	r2, [pc, #172]	; (8009ce4 <interrupt_FailSafe+0x224>)
 8009c38:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 8009c3a:	4b2b      	ldr	r3, [pc, #172]	; (8009ce8 <interrupt_FailSafe+0x228>)
 8009c3c:	4a29      	ldr	r2, [pc, #164]	; (8009ce4 <interrupt_FailSafe+0x224>)
 8009c3e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009c40:	4b2a      	ldr	r3, [pc, #168]	; (8009cec <interrupt_FailSafe+0x22c>)
 8009c42:	4a2b      	ldr	r2, [pc, #172]	; (8009cf0 <interrupt_FailSafe+0x230>)
 8009c44:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 8009c46:	4b2b      	ldr	r3, [pc, #172]	; (8009cf4 <interrupt_FailSafe+0x234>)
 8009c48:	4a29      	ldr	r2, [pc, #164]	; (8009cf0 <interrupt_FailSafe+0x230>)
 8009c4a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009c4c:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <interrupt_FailSafe+0x238>)
 8009c4e:	4a2b      	ldr	r2, [pc, #172]	; (8009cfc <interrupt_FailSafe+0x23c>)
 8009c50:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 8009c52:	4b2b      	ldr	r3, [pc, #172]	; (8009d00 <interrupt_FailSafe+0x240>)
 8009c54:	4a29      	ldr	r2, [pc, #164]	; (8009cfc <interrupt_FailSafe+0x23c>)
 8009c56:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009c58:	4b2a      	ldr	r3, [pc, #168]	; (8009d04 <interrupt_FailSafe+0x244>)
 8009c5a:	4a28      	ldr	r2, [pc, #160]	; (8009cfc <interrupt_FailSafe+0x23c>)
 8009c5c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009c5e:	4b2a      	ldr	r3, [pc, #168]	; (8009d08 <interrupt_FailSafe+0x248>)
 8009c60:	4a26      	ldr	r2, [pc, #152]	; (8009cfc <interrupt_FailSafe+0x23c>)
 8009c62:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009c64:	4b29      	ldr	r3, [pc, #164]	; (8009d0c <interrupt_FailSafe+0x24c>)
 8009c66:	2204      	movs	r2, #4
 8009c68:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009c6a:	4b29      	ldr	r3, [pc, #164]	; (8009d10 <interrupt_FailSafe+0x250>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009c70:	e002      	b.n	8009c78 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009c72:	4b14      	ldr	r3, [pc, #80]	; (8009cc4 <interrupt_FailSafe+0x204>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]
}
 8009c78:	bf00      	nop
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000808 	.word	0x20000808
 8009c84:	2000080c 	.word	0x2000080c
 8009c88:	20000810 	.word	0x20000810
 8009c8c:	20000814 	.word	0x20000814
 8009c90:	20000818 	.word	0x20000818
 8009c94:	2000081c 	.word	0x2000081c
 8009c98:	20000820 	.word	0x20000820
 8009c9c:	20000528 	.word	0x20000528
 8009ca0:	20000806 	.word	0x20000806
 8009ca4:	20000807 	.word	0x20000807
 8009ca8:	200004e4 	.word	0x200004e4
 8009cac:	20000268 	.word	0x20000268
 8009cb0:	20000274 	.word	0x20000274
 8009cb4:	200004d8 	.word	0x200004d8
 8009cb8:	2000025c 	.word	0x2000025c
 8009cbc:	20000258 	.word	0x20000258
 8009cc0:	2000d96c 	.word	0x2000d96c
 8009cc4:	20000824 	.word	0x20000824
 8009cc8:	200005b8 	.word	0x200005b8
 8009ccc:	200005b4 	.word	0x200005b4
 8009cd0:	200005c0 	.word	0x200005c0
 8009cd4:	200005bc 	.word	0x200005bc
 8009cd8:	200005c8 	.word	0x200005c8
 8009cdc:	200005c4 	.word	0x200005c4
 8009ce0:	200005d0 	.word	0x200005d0
 8009ce4:	42480000 	.word	0x42480000
 8009ce8:	200005cc 	.word	0x200005cc
 8009cec:	200005d8 	.word	0x200005d8
 8009cf0:	41a00000 	.word	0x41a00000
 8009cf4:	200005d4 	.word	0x200005d4
 8009cf8:	200005e0 	.word	0x200005e0
 8009cfc:	420c0000 	.word	0x420c0000
 8009d00:	200005dc 	.word	0x200005dc
 8009d04:	200005e8 	.word	0x200005e8
 8009d08:	200005e4 	.word	0x200005e4
 8009d0c:	20000804 	.word	0x20000804
 8009d10:	20000592 	.word	0x20000592

08009d14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08a      	sub	sp, #40	; 0x28
 8009d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d1a:	f107 0314 	add.w	r3, r7, #20
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	605a      	str	r2, [r3, #4]
 8009d24:	609a      	str	r2, [r3, #8]
 8009d26:	60da      	str	r2, [r3, #12]
 8009d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d2a:	4b3a      	ldr	r3, [pc, #232]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d2e:	4a39      	ldr	r2, [pc, #228]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d30:	f043 0304 	orr.w	r3, r3, #4
 8009d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d36:	4b37      	ldr	r3, [pc, #220]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3a:	f003 0304 	and.w	r3, r3, #4
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009d42:	4b34      	ldr	r3, [pc, #208]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d46:	4a33      	ldr	r2, [pc, #204]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d48:	f043 0320 	orr.w	r3, r3, #32
 8009d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d4e:	4b31      	ldr	r3, [pc, #196]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	f003 0320 	and.w	r3, r3, #32
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d5a:	4b2e      	ldr	r3, [pc, #184]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5e:	4a2d      	ldr	r2, [pc, #180]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d60:	f043 0301 	orr.w	r3, r3, #1
 8009d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d66:	4b2b      	ldr	r3, [pc, #172]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	60bb      	str	r3, [r7, #8]
 8009d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d72:	4b28      	ldr	r3, [pc, #160]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d76:	4a27      	ldr	r2, [pc, #156]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d78:	f043 0302 	orr.w	r3, r3, #2
 8009d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d7e:	4b25      	ldr	r3, [pc, #148]	; (8009e14 <MX_GPIO_Init+0x100>)
 8009d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	607b      	str	r3, [r7, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009d90:	4821      	ldr	r0, [pc, #132]	; (8009e18 <MX_GPIO_Init+0x104>)
 8009d92:	f011 f851 	bl	801ae38 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009d96:	2200      	movs	r2, #0
 8009d98:	f648 1110 	movw	r1, #35088	; 0x8910
 8009d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009da0:	f011 f84a 	bl	801ae38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009da4:	2200      	movs	r2, #0
 8009da6:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009daa:	481c      	ldr	r0, [pc, #112]	; (8009e1c <MX_GPIO_Init+0x108>)
 8009dac:	f011 f844 	bl	801ae38 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009db0:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009db4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009db6:	2301      	movs	r3, #1
 8009db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dc2:	f107 0314 	add.w	r3, r7, #20
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4813      	ldr	r0, [pc, #76]	; (8009e18 <MX_GPIO_Init+0x104>)
 8009dca:	f010 feb3 	bl	801ab34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009dce:	f648 1310 	movw	r3, #35088	; 0x8910
 8009dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009de0:	f107 0314 	add.w	r3, r7, #20
 8009de4:	4619      	mov	r1, r3
 8009de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009dea:	f010 fea3 	bl	801ab34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009dee:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009df2:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009df4:	2301      	movs	r3, #1
 8009df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e00:	f107 0314 	add.w	r3, r7, #20
 8009e04:	4619      	mov	r1, r3
 8009e06:	4805      	ldr	r0, [pc, #20]	; (8009e1c <MX_GPIO_Init+0x108>)
 8009e08:	f010 fe94 	bl	801ab34 <HAL_GPIO_Init>

}
 8009e0c:	bf00      	nop
 8009e0e:	3728      	adds	r7, #40	; 0x28
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	40021000 	.word	0x40021000
 8009e18:	48000800 	.word	0x48000800
 8009e1c:	48000400 	.word	0x48000400

08009e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009e20:	b5b0      	push	{r4, r5, r7, lr}
 8009e22:	b08c      	sub	sp, #48	; 0x30
 8009e24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009e26:	f00d fdd3 	bl	80179d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009e2a:	f000 f913 	bl	800a054 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009e2e:	f7ff fddb 	bl	80099e8 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009e32:	f7ff ff6f 	bl	8009d14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009e36:	f7fe f9d5 	bl	80081e4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8009e3a:	f00c fc39 	bl	80166b0 <MX_SPI1_Init>
  MX_TIM6_Init();
 8009e3e:	f00c fea5 	bl	8016b8c <MX_TIM6_Init>
  MX_TIM8_Init();
 8009e42:	f00c fed9 	bl	8016bf8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009e46:	f00d fcf5 	bl	8017834 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8009e4a:	f7ff fdcd 	bl	80099e8 <MX_DMA_Init>
  MX_SPI3_Init();
 8009e4e:	f00c fc6d 	bl	801672c <MX_SPI3_Init>
  MX_TIM16_Init();
 8009e52:	f00c ff71 	bl	8016d38 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009e56:	f7fe f8d7 	bl	8008008 <pl_timer_init>
  pl_gyro_init();
 8009e5a:	f7fd fd4f 	bl	80078fc <pl_gyro_init>
  pl_sensor_init();
 8009e5e:	f7fd ff15 	bl	8007c8c <pl_sensor_init>
  reset_distance();
 8009e62:	f7f7 f89b 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009e66:	f7f7 fccb 	bl	8001800 <reset_gyro>
  reset_speed();
 8009e6a:	f7f7 f8d5 	bl	8001018 <reset_speed>
  record_reset();
 8009e6e:	f00c f9ad 	bl	80161cc <record_reset>
  pl_motor_init();
 8009e72:	f7fd fe21 	bl	8007ab8 <pl_motor_init>
  PID_Init();
 8009e76:	f7fa fcf5 	bl	8004864 <PID_Init>
  init_WallControl();
 8009e7a:	f7fa fe65 	bl	8004b48 <init_WallControl>
  Control_mode_Init();
 8009e7e:	f7f8 f821 	bl	8001ec4 <Control_mode_Init>
  init_FailSafe();
 8009e82:	f7ff fddb 	bl	8009a3c <init_FailSafe>
  input_parameter();
 8009e86:	f00d f937 	bl	80170f8 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
  int a=0;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	623b      	str	r3, [r7, #32]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009e92:	4b68      	ldr	r3, [pc, #416]	; (800a034 <main+0x214>)
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009e98:	4b66      	ldr	r3, [pc, #408]	; (800a034 <main+0x214>)
 8009e9a:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009e9c:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009e9e:	4b65      	ldr	r3, [pc, #404]	; (800a034 <main+0x214>)
 8009ea0:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009ea2:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009ea4:	4b63      	ldr	r3, [pc, #396]	; (800a034 <main+0x214>)
 8009ea6:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009ea8:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009eaa:	4b62      	ldr	r3, [pc, #392]	; (800a034 <main+0x214>)
 8009eac:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	9200      	str	r2, [sp, #0]
 8009eb2:	4623      	mov	r3, r4
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	4860      	ldr	r0, [pc, #384]	; (800a038 <main+0x218>)
 8009eb8:	f015 fd54 	bl	801f964 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009ebc:	4b5f      	ldr	r3, [pc, #380]	; (800a03c <main+0x21c>)
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009ec2:	4b5e      	ldr	r3, [pc, #376]	; (800a03c <main+0x21c>)
 8009ec4:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009ec6:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009ec8:	4b5c      	ldr	r3, [pc, #368]	; (800a03c <main+0x21c>)
 8009eca:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009ecc:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009ece:	4b5b      	ldr	r3, [pc, #364]	; (800a03c <main+0x21c>)
 8009ed0:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009ed2:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009ed4:	4b59      	ldr	r3, [pc, #356]	; (800a03c <main+0x21c>)
 8009ed6:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	9200      	str	r2, [sp, #0]
 8009edc:	4623      	mov	r3, r4
 8009ede:	4602      	mov	r2, r0
 8009ee0:	4857      	ldr	r0, [pc, #348]	; (800a040 <main+0x220>)
 8009ee2:	f015 fd3f 	bl	801f964 <iprintf>
	battcheak();
 8009ee6:	f7f7 fe97 	bl	8001c18 <battcheak>

//起動cheak
	int yellow_count=1;
 8009eea:	2301      	movs	r3, #1
 8009eec:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<8;i++){
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	e00d      	b.n	8009f10 <main+0xf0>
		pl_yellow_LED_count(yellow_count);
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fd f897 	bl	800702c <pl_yellow_LED_count>
		HAL_Delay(50);
 8009efe:	2032      	movs	r0, #50	; 0x32
 8009f00:	f00d fdde 	bl	8017ac0 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<8;i++){
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	61bb      	str	r3, [r7, #24]
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	2b07      	cmp	r3, #7
 8009f14:	ddee      	ble.n	8009ef4 <main+0xd4>
	}
	for(int i=0;i<9;i++){
 8009f16:	2300      	movs	r3, #0
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	e00f      	b.n	8009f3c <main+0x11c>
			pl_yellow_LED_count(yellow_count);
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fd f883 	bl	800702c <pl_yellow_LED_count>
			HAL_Delay(50);
 8009f26:	2032      	movs	r0, #50	; 0x32
 8009f28:	f00d fdca 	bl	8017ac0 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	0fda      	lsrs	r2, r3, #31
 8009f30:	4413      	add	r3, r2
 8009f32:	105b      	asrs	r3, r3, #1
 8009f34:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<9;i++){
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2b08      	cmp	r3, #8
 8009f40:	ddec      	ble.n	8009f1c <main+0xfc>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tic_timer();
 8009f42:	f7fe f89f 	bl	8008084 <tic_timer>
		for(int j=0;j<50000;j++){
 8009f46:	2300      	movs	r3, #0
 8009f48:	613b      	str	r3, [r7, #16]
 8009f4a:	e005      	b.n	8009f58 <main+0x138>
			a=a+1;
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	623b      	str	r3, [r7, #32]
		for(int j=0;j<50000;j++){
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	3301      	adds	r3, #1
 8009f56:	613b      	str	r3, [r7, #16]
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	ddf4      	ble.n	8009f4c <main+0x12c>
		}
		float tim1 = toc_timer();
 8009f62:	f7fe f8a1 	bl	80080a8 <toc_timer>
 8009f66:	ed87 0a01 	vstr	s0, [r7, #4]
		printf("tim1=%f\n", tim1);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7f6 fb14 	bl	8000598 <__aeabi_f2d>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4833      	ldr	r0, [pc, #204]	; (800a044 <main+0x224>)
 8009f76:	f015 fcf5 	bl	801f964 <iprintf>

		tic_timer();
 8009f7a:	f7fe f883 	bl	8008084 <tic_timer>
		for(int j=0;j<5000;j++){
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	e004      	b.n	8009f8e <main+0x16e>
		create_StepCountMap_queue();
 8009f84:	f009 ff60 	bl	8013e48 <create_StepCountMap_queue>
		for(int j=0;j<5000;j++){
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	60fb      	str	r3, [r7, #12]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f241 3287 	movw	r2, #4999	; 0x1387
 8009f94:	4293      	cmp	r3, r2
 8009f96:	ddf5      	ble.n	8009f84 <main+0x164>
		}
		float tim2 = toc_timer();
 8009f98:	f7fe f886 	bl	80080a8 <toc_timer>
 8009f9c:	ed87 0a00 	vstr	s0, [r7]
		maze_display();
 8009fa0:	f00a faf6 	bl	8014590 <maze_display>
		printf("tim2=%f\n", tim2);
 8009fa4:	6838      	ldr	r0, [r7, #0]
 8009fa6:	f7f6 faf7 	bl	8000598 <__aeabi_f2d>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4826      	ldr	r0, [pc, #152]	; (800a048 <main+0x228>)
 8009fb0:	f015 fcd8 	bl	801f964 <iprintf>
		tic_timer();
 8009fb4:	f7fe f866 	bl	8008084 <tic_timer>
		for(int j=0;j<5000;j++){
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60bb      	str	r3, [r7, #8]
 8009fbc:	e006      	b.n	8009fcc <main+0x1ac>
		//create_StepCountMap();
		//maze_clear();
		//create_DijkstraMap();
		route_Dijkstra();
 8009fbe:	f009 f8a1 	bl	8013104 <route_Dijkstra>
		create_StepCountMap_unknown();
 8009fc2:	f009 fd75 	bl	8013ab0 <create_StepCountMap_unknown>
		for(int j=0;j<5000;j++){
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	60bb      	str	r3, [r7, #8]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f241 3287 	movw	r2, #4999	; 0x1387
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	ddf3      	ble.n	8009fbe <main+0x19e>

		}
		tim1 = toc_timer();
 8009fd6:	f7fe f867 	bl	80080a8 <toc_timer>
 8009fda:	ed87 0a01 	vstr	s0, [r7, #4]
		maze_display();
 8009fde:	f00a fad7 	bl	8014590 <maze_display>
		maze_display_Dijkstra();
 8009fe2:	f00a fbf3 	bl	80147cc <maze_display_Dijkstra>
		printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7f6 fad6 	bl	8000598 <__aeabi_f2d>
 8009fec:	4604      	mov	r4, r0
 8009fee:	460d      	mov	r5, r1
 8009ff0:	6838      	ldr	r0, [r7, #0]
 8009ff2:	f7f6 fad1 	bl	8000598 <__aeabi_f2d>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	e9cd 2300 	strd	r2, r3, [sp]
 8009ffe:	4622      	mov	r2, r4
 800a000:	462b      	mov	r3, r5
 800a002:	4812      	ldr	r0, [pc, #72]	; (800a04c <main+0x22c>)
 800a004:	f015 fcae 	bl	801f964 <iprintf>

	  		mode=mode_decision(mode);
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	4618      	mov	r0, r3
 800a00e:	f00a fcc5 	bl	801499c <mode_decision>
 800a012:	4603      	mov	r3, r0
 800a014:	627b      	str	r3, [r7, #36]	; 0x24
//	  		clear_Ierror();
	  		reset_distance();
 800a016:	f7f6 ffc1 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 800a01a:	f7f7 fbf1 	bl	8001800 <reset_gyro>
	  		reset_speed();
 800a01e:	f7f6 fffb 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	b2db      	uxtb	r3, r3
 800a026:	4618      	mov	r0, r3
 800a028:	f00a fdb2 	bl	8014b90 <mode_execution>

	  		error_mode = 0;
 800a02c:	4b08      	ldr	r3, [pc, #32]	; (800a050 <main+0x230>)
 800a02e:	2200      	movs	r2, #0
 800a030:	701a      	strb	r2, [r3, #0]
  {
 800a032:	e786      	b.n	8009f42 <main+0x122>
 800a034:	2000070c 	.word	0x2000070c
 800a038:	08022120 	.word	0x08022120
 800a03c:	20000718 	.word	0x20000718
 800a040:	0802214c 	.word	0x0802214c
 800a044:	0802217c 	.word	0x0802217c
 800a048:	08022188 	.word	0x08022188
 800a04c:	08022194 	.word	0x08022194
 800a050:	20000807 	.word	0x20000807

0800a054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b094      	sub	sp, #80	; 0x50
 800a058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a05a:	f107 0318 	add.w	r3, r7, #24
 800a05e:	2238      	movs	r2, #56	; 0x38
 800a060:	2100      	movs	r1, #0
 800a062:	4618      	mov	r0, r3
 800a064:	f015 f80c 	bl	801f080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a068:	1d3b      	adds	r3, r7, #4
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	605a      	str	r2, [r3, #4]
 800a070:	609a      	str	r2, [r3, #8]
 800a072:	60da      	str	r2, [r3, #12]
 800a074:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a076:	2000      	movs	r0, #0
 800a078:	f010 fef6 	bl	801ae68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a07c:	2301      	movs	r3, #1
 800a07e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a084:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a086:	2302      	movs	r3, #2
 800a088:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a08a:	2303      	movs	r3, #3
 800a08c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a08e:	2304      	movs	r3, #4
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800a092:	2355      	movs	r3, #85	; 0x55
 800a094:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a096:	2302      	movs	r3, #2
 800a098:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a09a:	2302      	movs	r3, #2
 800a09c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a09e:	2302      	movs	r3, #2
 800a0a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a0a2:	f107 0318 	add.w	r3, r7, #24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f010 ff92 	bl	801afd0 <HAL_RCC_OscConfig>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800a0b2:	f000 f81a 	bl	800a0ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a0b6:	230f      	movs	r3, #15
 800a0b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a0c2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800a0c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a0ce:	1d3b      	adds	r3, r7, #4
 800a0d0:	2104      	movs	r1, #4
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f011 fa94 	bl	801b600 <HAL_RCC_ClockConfig>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800a0de:	f000 f804 	bl	800a0ea <Error_Handler>
  }
}
 800a0e2:	bf00      	nop
 800a0e4:	3750      	adds	r7, #80	; 0x50
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a0ee:	b672      	cpsid	i
}
 800a0f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a0f2:	e7fe      	b.n	800a0f2 <Error_Handler+0x8>

0800a0f4 <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	ed87 0a03 	vstr	s0, [r7, #12]
 800a0fe:	edc7 0a02 	vstr	s1, [r7, #8]
 800a102:	4603      	mov	r3, r0
 800a104:	71fb      	strb	r3, [r7, #7]
 800a106:	460b      	mov	r3, r1
 800a108:	71bb      	strb	r3, [r7, #6]
 800a10a:	4613      	mov	r3, r2
 800a10c:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 800a10e:	79fb      	ldrb	r3, [r7, #7]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00a      	beq.n	800a12a <backTurn_controlWall+0x36>
		no_frontwall_straight();
 800a114:	f7f9 ffd0 	bl	80040b8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a118:	2003      	movs	r0, #3
 800a11a:	f7fd fd25 	bl	8007b68 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a11e:	2003      	movs	r0, #3
 800a120:	f7fd fcfa 	bl	8007b18 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a124:	2032      	movs	r0, #50	; 0x32
 800a126:	f7fe f81f 	bl	8008168 <wait_ms_NoReset>
	}
	if(left_wall){
 800a12a:	79bb      	ldrb	r3, [r7, #6]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d02c      	beq.n	800a18a <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a130:	ed97 2a02 	vldr	s4, [r7, #8]
 800a134:	edd7 1a03 	vldr	s3, [r7, #12]
 800a138:	ed9f 1a50 	vldr	s2, [pc, #320]	; 800a27c <backTurn_controlWall+0x188>
 800a13c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800a27c <backTurn_controlWall+0x188>
 800a140:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800a280 <backTurn_controlWall+0x18c>
 800a144:	f7f9 fcbc 	bl	8003ac0 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a148:	2003      	movs	r0, #3
 800a14a:	f7fd fd0d 	bl	8007b68 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a14e:	2003      	movs	r0, #3
 800a150:	f7fd fce2 	bl	8007b18 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a154:	2032      	movs	r0, #50	; 0x32
 800a156:	f7fe f807 	bl	8008168 <wait_ms_NoReset>
		no_frontwall_straight();
 800a15a:	f7f9 ffad 	bl	80040b8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a15e:	2003      	movs	r0, #3
 800a160:	f7fd fd02 	bl	8007b68 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a164:	2003      	movs	r0, #3
 800a166:	f7fd fcd7 	bl	8007b18 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a16a:	2032      	movs	r0, #50	; 0x32
 800a16c:	f7fd fffc 	bl	8008168 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a170:	ed97 2a02 	vldr	s4, [r7, #8]
 800a174:	edd7 1a03 	vldr	s3, [r7, #12]
 800a178:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800a27c <backTurn_controlWall+0x188>
 800a17c:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800a27c <backTurn_controlWall+0x188>
 800a180:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800a280 <backTurn_controlWall+0x18c>
 800a184:	f7f9 fc9c 	bl	8003ac0 <turning_table2>
 800a188:	e06a      	b.n	800a260 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 800a18a:	79bb      	ldrb	r3, [r7, #6]
 800a18c:	f083 0301 	eor.w	r3, r3, #1
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d037      	beq.n	800a206 <backTurn_controlWall+0x112>
 800a196:	797b      	ldrb	r3, [r7, #5]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d034      	beq.n	800a206 <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a19c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1a0:	eef1 7a67 	vneg.f32	s15, s15
 800a1a4:	ed97 2a02 	vldr	s4, [r7, #8]
 800a1a8:	eef0 1a67 	vmov.f32	s3, s15
 800a1ac:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800a27c <backTurn_controlWall+0x188>
 800a1b0:	eddf 0a32 	vldr	s1, [pc, #200]	; 800a27c <backTurn_controlWall+0x188>
 800a1b4:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800a284 <backTurn_controlWall+0x190>
 800a1b8:	f7f9 fc82 	bl	8003ac0 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a1bc:	2003      	movs	r0, #3
 800a1be:	f7fd fcd3 	bl	8007b68 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a1c2:	2003      	movs	r0, #3
 800a1c4:	f7fd fca8 	bl	8007b18 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a1c8:	2032      	movs	r0, #50	; 0x32
 800a1ca:	f7fd ffcd 	bl	8008168 <wait_ms_NoReset>
		no_frontwall_straight();
 800a1ce:	f7f9 ff73 	bl	80040b8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a1d2:	2003      	movs	r0, #3
 800a1d4:	f7fd fcc8 	bl	8007b68 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a1d8:	2003      	movs	r0, #3
 800a1da:	f7fd fc9d 	bl	8007b18 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a1de:	2032      	movs	r0, #50	; 0x32
 800a1e0:	f7fd ffc2 	bl	8008168 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a1e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1e8:	eef1 7a67 	vneg.f32	s15, s15
 800a1ec:	ed97 2a02 	vldr	s4, [r7, #8]
 800a1f0:	eef0 1a67 	vmov.f32	s3, s15
 800a1f4:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800a27c <backTurn_controlWall+0x188>
 800a1f8:	eddf 0a20 	vldr	s1, [pc, #128]	; 800a27c <backTurn_controlWall+0x188>
 800a1fc:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800a284 <backTurn_controlWall+0x190>
 800a200:	f7f9 fc5e 	bl	8003ac0 <turning_table2>
 800a204:	e02c      	b.n	800a260 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 800a206:	79bb      	ldrb	r3, [r7, #6]
 800a208:	f083 0301 	eor.w	r3, r3, #1
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d026      	beq.n	800a260 <backTurn_controlWall+0x16c>
 800a212:	797b      	ldrb	r3, [r7, #5]
 800a214:	f083 0301 	eor.w	r3, r3, #1
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d020      	beq.n	800a260 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a21e:	ed97 2a02 	vldr	s4, [r7, #8]
 800a222:	edd7 1a03 	vldr	s3, [r7, #12]
 800a226:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800a27c <backTurn_controlWall+0x188>
 800a22a:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a27c <backTurn_controlWall+0x188>
 800a22e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a280 <backTurn_controlWall+0x18c>
 800a232:	f7f9 fc45 	bl	8003ac0 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a236:	2003      	movs	r0, #3
 800a238:	f7fd fc96 	bl	8007b68 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a23c:	2003      	movs	r0, #3
 800a23e:	f7fd fc6b 	bl	8007b18 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a242:	2032      	movs	r0, #50	; 0x32
 800a244:	f7fd ff90 	bl	8008168 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a248:	ed97 2a02 	vldr	s4, [r7, #8]
 800a24c:	edd7 1a03 	vldr	s3, [r7, #12]
 800a250:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800a27c <backTurn_controlWall+0x188>
 800a254:	eddf 0a09 	vldr	s1, [pc, #36]	; 800a27c <backTurn_controlWall+0x188>
 800a258:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a280 <backTurn_controlWall+0x18c>
 800a25c:	f7f9 fc30 	bl	8003ac0 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a260:	2003      	movs	r0, #3
 800a262:	f7fd fc81 	bl	8007b68 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a266:	2003      	movs	r0, #3
 800a268:	f7fd fc56 	bl	8007b18 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 800a26c:	2032      	movs	r0, #50	; 0x32
 800a26e:	f7fd ff7b 	bl	8008168 <wait_ms_NoReset>

}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	00000000 	.word	0x00000000
 800a280:	42b40000 	.word	0x42b40000
 800a284:	c2b40000 	.word	0xc2b40000

0800a288 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a288:	b084      	sub	sp, #16
 800a28a:	b5b0      	push	{r4, r5, r7, lr}
 800a28c:	ed2d 8b02 	vpush	{d8}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a29c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a2a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	f040 80f5 	bne.w	800a494 <slalomR+0x20c>
		highspeed_mode = 0;
 800a2aa:	4bcd      	ldr	r3, [pc, #820]	; (800a5e0 <slalomR+0x358>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a2c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d11f      	bne.n	800a308 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a2c8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a2cc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a2d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2dc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a2e0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a2e4:	eddf 5abf 	vldr	s11, [pc, #764]	; 800a5e4 <slalomR+0x35c>
 800a2e8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	eeb0 2a47 	vmov.f32	s4, s14
 800a2f2:	eef0 1a46 	vmov.f32	s3, s12
 800a2f6:	eeb0 1a66 	vmov.f32	s2, s13
 800a2fa:	eddf 0abb 	vldr	s1, [pc, #748]	; 800a5e8 <slalomR+0x360>
 800a2fe:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800a5ec <slalomR+0x364>
 800a302:	f7f8 fecf 	bl	80030a4 <straight_table2>
 800a306:	e01e      	b.n	800a346 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a308:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a30c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a310:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a314:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a31c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a320:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a324:	eddf 5aaf 	vldr	s11, [pc, #700]	; 800a5e4 <slalomR+0x35c>
 800a328:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	eeb0 2a47 	vmov.f32	s4, s14
 800a332:	eef0 1a46 	vmov.f32	s3, s12
 800a336:	eeb0 1a66 	vmov.f32	s2, s13
 800a33a:	eddf 0aab 	vldr	s1, [pc, #684]	; 800a5e8 <slalomR+0x360>
 800a33e:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a5f0 <slalomR+0x368>
 800a342:	f7f8 feaf 	bl	80030a4 <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a346:	2301      	movs	r3, #1
 800a348:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a34e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a352:	2b00      	cmp	r3, #0
 800a354:	d127      	bne.n	800a3a6 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a356:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a35a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a35e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a362:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a366:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a36a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a36e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a372:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a37a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a37e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a382:	eddf 4a98 	vldr	s9, [pc, #608]	; 800a5e4 <slalomR+0x35c>
 800a386:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	eeb0 2a47 	vmov.f32	s4, s14
 800a390:	eef0 1a45 	vmov.f32	s3, s10
 800a394:	eeb0 1a65 	vmov.f32	s2, s11
 800a398:	eef0 0a46 	vmov.f32	s1, s12
 800a39c:	eeb0 0a66 	vmov.f32	s0, s13
 800a3a0:	f7f8 fe80 	bl	80030a4 <straight_table2>
 800a3a4:	e022      	b.n	800a3ec <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a3a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a3aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a3ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a3b2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3c2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a3c6:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a3ca:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a5e4 <slalomR+0x35c>
 800a3ce:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	eeb0 2a47 	vmov.f32	s4, s14
 800a3d8:	eef0 1a45 	vmov.f32	s3, s10
 800a3dc:	eeb0 1a65 	vmov.f32	s2, s11
 800a3e0:	eef0 0a46 	vmov.f32	s1, s12
 800a3e4:	eeb0 0a66 	vmov.f32	s0, s13
 800a3e8:	f7f8 fe5c 	bl	80030a4 <straight_table2>
		}
		if(mollifier_mode == ON){
 800a3ec:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d10c      	bne.n	800a40e <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a3f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a3fc:	eeb0 1a47 	vmov.f32	s2, s14
 800a400:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800a5f4 <slalomR+0x36c>
 800a404:	eeb0 0a67 	vmov.f32	s0, s15
 800a408:	f7f9 fdc2 	bl	8003f90 <mollifier_slalom_table>
 800a40c:	e015      	b.n	800a43a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a40e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a412:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a416:	eef1 7a67 	vneg.f32	s15, s15
 800a41a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a41e:	eef0 2a66 	vmov.f32	s5, s13
 800a422:	eeb0 2a67 	vmov.f32	s4, s15
 800a426:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a5e8 <slalomR+0x360>
 800a42a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a5e8 <slalomR+0x360>
 800a42e:	eddf 0a71 	vldr	s1, [pc, #452]	; 800a5f4 <slalomR+0x36c>
 800a432:	eeb0 0a47 	vmov.f32	s0, s14
 800a436:	f7f9 fc5b 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a442:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a446:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a5e4 <slalomR+0x35c>
 800a44a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a44e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a452:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a456:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a45a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a45e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a462:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a466:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a46a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a5e4 <slalomR+0x35c>
 800a46e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	eeb0 2a47 	vmov.f32	s4, s14
 800a478:	eef0 1a65 	vmov.f32	s3, s11
 800a47c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a5e8 <slalomR+0x360>
 800a480:	eef0 0a46 	vmov.f32	s1, s12
 800a484:	eeb0 0a66 	vmov.f32	s0, s13
 800a488:	f7f8 fe0c 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800a48c:	4b54      	ldr	r3, [pc, #336]	; (800a5e0 <slalomR+0x358>)
 800a48e:	2200      	movs	r2, #0
 800a490:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a492:	e09c      	b.n	800a5ce <slalomR+0x346>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a494:	2300      	movs	r3, #0
 800a496:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a498:	2300      	movs	r3, #0
 800a49a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a49c:	2301      	movs	r3, #1
 800a49e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a4a8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4ac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a4b0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4c0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a4c4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4c8:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a5e4 <slalomR+0x35c>
 800a4cc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	eeb0 2a47 	vmov.f32	s4, s14
 800a4d6:	eef0 1a45 	vmov.f32	s3, s10
 800a4da:	eeb0 1a65 	vmov.f32	s2, s11
 800a4de:	eef0 0a46 	vmov.f32	s1, s12
 800a4e2:	eeb0 0a66 	vmov.f32	s0, s13
 800a4e6:	f7f8 fddd 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a4ea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d10c      	bne.n	800a50c <slalomR+0x284>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a4f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4fa:	eeb0 1a47 	vmov.f32	s2, s14
 800a4fe:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a5f4 <slalomR+0x36c>
 800a502:	eeb0 0a67 	vmov.f32	s0, s15
 800a506:	f7f9 fd43 	bl	8003f90 <mollifier_slalom_table>
 800a50a:	e015      	b.n	800a538 <slalomR+0x2b0>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a50c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a510:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a514:	eef1 7a67 	vneg.f32	s15, s15
 800a518:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a51c:	eef0 2a66 	vmov.f32	s5, s13
 800a520:	eeb0 2a67 	vmov.f32	s4, s15
 800a524:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a5e8 <slalomR+0x360>
 800a528:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a5e8 <slalomR+0x360>
 800a52c:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a5f4 <slalomR+0x36c>
 800a530:	eeb0 0a47 	vmov.f32	s0, s14
 800a534:	f7f9 fbdc 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a538:	2300      	movs	r3, #0
 800a53a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a540:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a544:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a548:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a54c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a550:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a554:	edd7 7a01 	vldr	s15, [r7, #4]
 800a558:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a55c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a560:	eef0 7ae7 	vabs.f32	s15, s15
 800a564:	ee17 0a90 	vmov	r0, s15
 800a568:	f7f6 f816 	bl	8000598 <__aeabi_f2d>
 800a56c:	f04f 0200 	mov.w	r2, #0
 800a570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a574:	f7f6 f992 	bl	800089c <__aeabi_ddiv>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	4614      	mov	r4, r2
 800a57e:	461d      	mov	r5, r3
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	4618      	mov	r0, r3
 800a584:	f7f6 f808 	bl	8000598 <__aeabi_f2d>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4620      	mov	r0, r4
 800a58e:	4629      	mov	r1, r5
 800a590:	f7f6 f984 	bl	800089c <__aeabi_ddiv>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4610      	mov	r0, r2
 800a59a:	4619      	mov	r1, r3
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	4b15      	ldr	r3, [pc, #84]	; (800a5f8 <slalomR+0x370>)
 800a5a2:	f7f5 fe9b 	bl	80002dc <__adddf3>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	f7f6 fb23 	bl	8000bf8 <__aeabi_d2f>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	ee02 3a10 	vmov	s4, r3
 800a5ba:	edd7 1a01 	vldr	s3, [r7, #4]
 800a5be:	ed97 1a01 	vldr	s2, [r7, #4]
 800a5c2:	eef0 0a68 	vmov.f32	s1, s17
 800a5c6:	eeb0 0a48 	vmov.f32	s0, s16
 800a5ca:	f7f8 fd6b 	bl	80030a4 <straight_table2>
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	ecbd 8b02 	vpop	{d8}
 800a5d8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a5dc:	b004      	add	sp, #16
 800a5de:	4770      	bx	lr
 800a5e0:	20000808 	.word	0x20000808
 800a5e4:	42340000 	.word	0x42340000
 800a5e8:	00000000 	.word	0x00000000
 800a5ec:	431b8000 	.word	0x431b8000
 800a5f0:	43138000 	.word	0x43138000
 800a5f4:	c2b40000 	.word	0xc2b40000
 800a5f8:	408f4000 	.word	0x408f4000

0800a5fc <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	b5b0      	push	{r4, r5, r7, lr}
 800a600:	ed2d 8b02 	vpush	{d8}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a60c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a610:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a614:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a618:	2b01      	cmp	r3, #1
 800a61a:	f040 80f3 	bne.w	800a804 <slalomL+0x208>
		highspeed_mode = 0;
 800a61e:	4bcb      	ldr	r3, [pc, #812]	; (800a94c <slalomL+0x350>)
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a624:	2301      	movs	r3, #1
 800a626:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a628:	2300      	movs	r3, #0
 800a62a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a630:	2300      	movs	r3, #0
 800a632:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a634:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d11f      	bne.n	800a67c <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a63c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a640:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a648:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a64c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a650:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a654:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a658:	eddf 5abd 	vldr	s11, [pc, #756]	; 800a950 <slalomL+0x354>
 800a65c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	eeb0 2a47 	vmov.f32	s4, s14
 800a666:	eef0 1a46 	vmov.f32	s3, s12
 800a66a:	eeb0 1a66 	vmov.f32	s2, s13
 800a66e:	eddf 0ab9 	vldr	s1, [pc, #740]	; 800a954 <slalomL+0x358>
 800a672:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a958 <slalomL+0x35c>
 800a676:	f7f8 fd15 	bl	80030a4 <straight_table2>
 800a67a:	e01e      	b.n	800a6ba <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a67c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a680:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a684:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a688:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a68c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a690:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a694:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a698:	eddf 5aad 	vldr	s11, [pc, #692]	; 800a950 <slalomL+0x354>
 800a69c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	eeb0 2a47 	vmov.f32	s4, s14
 800a6a6:	eef0 1a46 	vmov.f32	s3, s12
 800a6aa:	eeb0 1a66 	vmov.f32	s2, s13
 800a6ae:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800a954 <slalomL+0x358>
 800a6b2:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800a95c <slalomL+0x360>
 800a6b6:	f7f8 fcf5 	bl	80030a4 <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a6c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d127      	bne.n	800a71a <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a6ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a6ce:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a6d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a6d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a6da:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a6de:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a6e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a6e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6ee:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a6f2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a6f6:	eddf 4a96 	vldr	s9, [pc, #600]	; 800a950 <slalomL+0x354>
 800a6fa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	eeb0 2a47 	vmov.f32	s4, s14
 800a704:	eef0 1a45 	vmov.f32	s3, s10
 800a708:	eeb0 1a65 	vmov.f32	s2, s11
 800a70c:	eef0 0a46 	vmov.f32	s1, s12
 800a710:	eeb0 0a66 	vmov.f32	s0, s13
 800a714:	f7f8 fcc6 	bl	80030a4 <straight_table2>
 800a718:	e022      	b.n	800a760 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a71a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a71e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a722:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a726:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a72a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a72e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a732:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a736:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a73a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a73e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a950 <slalomL+0x354>
 800a742:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	eeb0 2a47 	vmov.f32	s4, s14
 800a74c:	eef0 1a45 	vmov.f32	s3, s10
 800a750:	eeb0 1a65 	vmov.f32	s2, s11
 800a754:	eef0 0a46 	vmov.f32	s1, s12
 800a758:	eeb0 0a66 	vmov.f32	s0, s13
 800a75c:	f7f8 fca2 	bl	80030a4 <straight_table2>
		}
		if(mollifier_mode == ON){
 800a760:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a764:	2b01      	cmp	r3, #1
 800a766:	d10c      	bne.n	800a782 <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a768:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a76c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a770:	eeb0 1a47 	vmov.f32	s2, s14
 800a774:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800a960 <slalomL+0x364>
 800a778:	eeb0 0a67 	vmov.f32	s0, s15
 800a77c:	f7f9 fc08 	bl	8003f90 <mollifier_slalom_table>
 800a780:	e013      	b.n	800a7aa <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a782:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a786:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a78a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a78e:	eef0 2a66 	vmov.f32	s5, s13
 800a792:	eeb0 2a47 	vmov.f32	s4, s14
 800a796:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a954 <slalomL+0x358>
 800a79a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a954 <slalomL+0x358>
 800a79e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a960 <slalomL+0x364>
 800a7a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a7a6:	f7f9 faa3 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a7b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a7b6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a950 <slalomL+0x354>
 800a7ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a7be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a7c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a7c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7d2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a7d6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a7da:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a950 <slalomL+0x354>
 800a7de:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	eeb0 2a47 	vmov.f32	s4, s14
 800a7e8:	eef0 1a65 	vmov.f32	s3, s11
 800a7ec:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a954 <slalomL+0x358>
 800a7f0:	eef0 0a46 	vmov.f32	s1, s12
 800a7f4:	eeb0 0a66 	vmov.f32	s0, s13
 800a7f8:	f7f8 fc54 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800a7fc:	4b53      	ldr	r3, [pc, #332]	; (800a94c <slalomL+0x350>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a802:	e09a      	b.n	800a93a <slalomL+0x33e>
		wallmode.WallControlMode=0;
 800a804:	2300      	movs	r3, #0
 800a806:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a808:	2300      	movs	r3, #0
 800a80a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a810:	2300      	movs	r3, #0
 800a812:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a814:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a818:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a81c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a820:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a824:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a828:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a82c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a830:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a834:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a838:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a950 <slalomL+0x354>
 800a83c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	eeb0 2a47 	vmov.f32	s4, s14
 800a846:	eef0 1a45 	vmov.f32	s3, s10
 800a84a:	eeb0 1a65 	vmov.f32	s2, s11
 800a84e:	eef0 0a46 	vmov.f32	s1, s12
 800a852:	eeb0 0a66 	vmov.f32	s0, s13
 800a856:	f7f8 fc25 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a85a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d10c      	bne.n	800a87c <slalomL+0x280>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a862:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a866:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a86a:	eeb0 1a47 	vmov.f32	s2, s14
 800a86e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a960 <slalomL+0x364>
 800a872:	eeb0 0a67 	vmov.f32	s0, s15
 800a876:	f7f9 fb8b 	bl	8003f90 <mollifier_slalom_table>
 800a87a:	e013      	b.n	800a8a4 <slalomL+0x2a8>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a87c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a880:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a884:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a888:	eef0 2a66 	vmov.f32	s5, s13
 800a88c:	eeb0 2a47 	vmov.f32	s4, s14
 800a890:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a954 <slalomL+0x358>
 800a894:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a954 <slalomL+0x358>
 800a898:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a960 <slalomL+0x364>
 800a89c:	eeb0 0a67 	vmov.f32	s0, s15
 800a8a0:	f7f9 fa26 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a8ac:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a8b0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a8b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800a8c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a8c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8cc:	eef0 7ae7 	vabs.f32	s15, s15
 800a8d0:	ee17 0a90 	vmov	r0, s15
 800a8d4:	f7f5 fe60 	bl	8000598 <__aeabi_f2d>
 800a8d8:	f04f 0200 	mov.w	r2, #0
 800a8dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8e0:	f7f5 ffdc 	bl	800089c <__aeabi_ddiv>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4614      	mov	r4, r2
 800a8ea:	461d      	mov	r5, r3
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7f5 fe52 	bl	8000598 <__aeabi_f2d>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	f7f5 ffce 	bl	800089c <__aeabi_ddiv>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4610      	mov	r0, r2
 800a906:	4619      	mov	r1, r3
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	4b15      	ldr	r3, [pc, #84]	; (800a964 <slalomL+0x368>)
 800a90e:	f7f5 fce5 	bl	80002dc <__adddf3>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a916:	4610      	mov	r0, r2
 800a918:	4619      	mov	r1, r3
 800a91a:	f7f6 f96d 	bl	8000bf8 <__aeabi_d2f>
 800a91e:	4603      	mov	r3, r0
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	ee02 3a10 	vmov	s4, r3
 800a926:	edd7 1a01 	vldr	s3, [r7, #4]
 800a92a:	ed97 1a01 	vldr	s2, [r7, #4]
 800a92e:	eef0 0a68 	vmov.f32	s1, s17
 800a932:	eeb0 0a48 	vmov.f32	s0, s16
 800a936:	f7f8 fbb5 	bl	80030a4 <straight_table2>
}
 800a93a:	bf00      	nop
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	ecbd 8b02 	vpop	{d8}
 800a944:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a948:	b004      	add	sp, #16
 800a94a:	4770      	bx	lr
 800a94c:	20000808 	.word	0x20000808
 800a950:	42340000 	.word	0x42340000
 800a954:	00000000 	.word	0x00000000
 800a958:	431b8000 	.word	0x431b8000
 800a95c:	43138000 	.word	0x43138000
 800a960:	42b40000 	.word	0x42b40000
 800a964:	408f4000 	.word	0x408f4000

0800a968 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a968:	b084      	sub	sp, #16
 800a96a:	b5b0      	push	{r4, r5, r7, lr}
 800a96c:	ed2d 8b02 	vpush	{d8}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a97c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a980:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a984:	2b01      	cmp	r3, #1
 800a986:	f040 80a5 	bne.w	800aad4 <turn90R+0x16c>
		highspeed_mode = 1;
 800a98a:	4ba5      	ldr	r3, [pc, #660]	; (800ac20 <turn90R+0x2b8>)
 800a98c:	2201      	movs	r2, #1
 800a98e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a990:	2301      	movs	r3, #1
 800a992:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a994:	2300      	movs	r3, #0
 800a996:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a9a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a9a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a9a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a9ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a9b8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a9bc:	eddf 5a99 	vldr	s11, [pc, #612]	; 800ac24 <turn90R+0x2bc>
 800a9c0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	eeb0 2a47 	vmov.f32	s4, s14
 800a9ca:	eef0 1a46 	vmov.f32	s3, s12
 800a9ce:	eeb0 1a66 	vmov.f32	s2, s13
 800a9d2:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ac28 <turn90R+0x2c0>
 800a9d6:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ac2c <turn90R+0x2c4>
 800a9da:	f7f8 fb63 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a9e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a9ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a9ee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a9f2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a9f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a9fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa02:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa06:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa0a:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ac24 <turn90R+0x2bc>
 800aa0e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	eeb0 2a47 	vmov.f32	s4, s14
 800aa18:	eef0 1a45 	vmov.f32	s3, s10
 800aa1c:	eeb0 1a65 	vmov.f32	s2, s11
 800aa20:	eef0 0a46 	vmov.f32	s1, s12
 800aa24:	eeb0 0a66 	vmov.f32	s0, s13
 800aa28:	f7f8 fb3c 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800aa2c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d10c      	bne.n	800aa4e <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800aa34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aa3c:	eeb0 1a47 	vmov.f32	s2, s14
 800aa40:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ac30 <turn90R+0x2c8>
 800aa44:	eeb0 0a67 	vmov.f32	s0, s15
 800aa48:	f7f9 faa2 	bl	8003f90 <mollifier_slalom_table>
 800aa4c:	e015      	b.n	800aa7a <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800aa4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aa56:	eef1 7a67 	vneg.f32	s15, s15
 800aa5a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aa5e:	eef0 2a66 	vmov.f32	s5, s13
 800aa62:	eeb0 2a67 	vmov.f32	s4, s15
 800aa66:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ac28 <turn90R+0x2c0>
 800aa6a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ac28 <turn90R+0x2c0>
 800aa6e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ac30 <turn90R+0x2c8>
 800aa72:	eeb0 0a47 	vmov.f32	s0, s14
 800aa76:	f7f9 f93b 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aa82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aa86:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ac34 <turn90R+0x2cc>
 800aa8a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aa8e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa92:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aaa2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800aaa6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aaaa:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ac24 <turn90R+0x2bc>
 800aaae:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	eeb0 2a47 	vmov.f32	s4, s14
 800aab8:	eef0 1a65 	vmov.f32	s3, s11
 800aabc:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ac28 <turn90R+0x2c0>
 800aac0:	eef0 0a46 	vmov.f32	s1, s12
 800aac4:	eeb0 0a66 	vmov.f32	s0, s13
 800aac8:	f7f8 faec 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800aacc:	4b54      	ldr	r3, [pc, #336]	; (800ac20 <turn90R+0x2b8>)
 800aace:	2200      	movs	r2, #0
 800aad0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800aad2:	e09c      	b.n	800ac0e <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800aad4:	2300      	movs	r3, #0
 800aad6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aad8:	2300      	movs	r3, #0
 800aada:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800aadc:	2302      	movs	r3, #2
 800aade:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aae4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aae8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aaec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aaf0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aaf4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aaf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aafc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab00:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab04:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab08:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ac24 <turn90R+0x2bc>
 800ab0c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	eeb0 2a47 	vmov.f32	s4, s14
 800ab16:	eef0 1a45 	vmov.f32	s3, s10
 800ab1a:	eeb0 1a65 	vmov.f32	s2, s11
 800ab1e:	eef0 0a46 	vmov.f32	s1, s12
 800ab22:	eeb0 0a66 	vmov.f32	s0, s13
 800ab26:	f7f8 fabd 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ab2a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d10c      	bne.n	800ab4c <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800ab32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab36:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab3a:	eeb0 1a47 	vmov.f32	s2, s14
 800ab3e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ac30 <turn90R+0x2c8>
 800ab42:	eeb0 0a67 	vmov.f32	s0, s15
 800ab46:	f7f9 fa23 	bl	8003f90 <mollifier_slalom_table>
 800ab4a:	e015      	b.n	800ab78 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ab4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab50:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab54:	eef1 7a67 	vneg.f32	s15, s15
 800ab58:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ab5c:	eef0 2a66 	vmov.f32	s5, s13
 800ab60:	eeb0 2a67 	vmov.f32	s4, s15
 800ab64:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ac28 <turn90R+0x2c0>
 800ab68:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ac28 <turn90R+0x2c0>
 800ab6c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ac30 <turn90R+0x2c8>
 800ab70:	eeb0 0a47 	vmov.f32	s0, s14
 800ab74:	f7f9 f8bc 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ab80:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ab84:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ab88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab94:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ab9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aba0:	eef0 7ae7 	vabs.f32	s15, s15
 800aba4:	ee17 0a90 	vmov	r0, s15
 800aba8:	f7f5 fcf6 	bl	8000598 <__aeabi_f2d>
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abb4:	f7f5 fe72 	bl	800089c <__aeabi_ddiv>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4614      	mov	r4, r2
 800abbe:	461d      	mov	r5, r3
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f5 fce8 	bl	8000598 <__aeabi_f2d>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4620      	mov	r0, r4
 800abce:	4629      	mov	r1, r5
 800abd0:	f7f5 fe64 	bl	800089c <__aeabi_ddiv>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4610      	mov	r0, r2
 800abda:	4619      	mov	r1, r3
 800abdc:	f04f 0200 	mov.w	r2, #0
 800abe0:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <turn90R+0x2d0>)
 800abe2:	f7f5 fb7b 	bl	80002dc <__adddf3>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800abea:	4610      	mov	r0, r2
 800abec:	4619      	mov	r1, r3
 800abee:	f7f6 f803 	bl	8000bf8 <__aeabi_d2f>
 800abf2:	4603      	mov	r3, r0
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	ee02 3a10 	vmov	s4, r3
 800abfa:	edd7 1a01 	vldr	s3, [r7, #4]
 800abfe:	ed97 1a01 	vldr	s2, [r7, #4]
 800ac02:	eef0 0a68 	vmov.f32	s1, s17
 800ac06:	eeb0 0a48 	vmov.f32	s0, s16
 800ac0a:	f7f8 fa4b 	bl	80030a4 <straight_table2>
}
 800ac0e:	bf00      	nop
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	ecbd 8b02 	vpop	{d8}
 800ac18:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac1c:	b004      	add	sp, #16
 800ac1e:	4770      	bx	lr
 800ac20:	20000808 	.word	0x20000808
 800ac24:	42340000 	.word	0x42340000
 800ac28:	00000000 	.word	0x00000000
 800ac2c:	42cd0000 	.word	0x42cd0000
 800ac30:	c2b40000 	.word	0xc2b40000
 800ac34:	42b40000 	.word	0x42b40000
 800ac38:	408f4000 	.word	0x408f4000

0800ac3c <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	b5b0      	push	{r4, r5, r7, lr}
 800ac40:	ed2d 8b02 	vpush	{d8}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ac4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ac50:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ac54:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	f040 80a3 	bne.w	800ada4 <turn90L+0x168>
		highspeed_mode = 1;
 800ac5e:	4ba3      	ldr	r3, [pc, #652]	; (800aeec <turn90L+0x2b0>)
 800ac60:	2201      	movs	r2, #1
 800ac62:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ac64:	2301      	movs	r3, #1
 800ac66:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ac74:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ac78:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac7c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac88:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ac8c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ac90:	eddf 5a97 	vldr	s11, [pc, #604]	; 800aef0 <turn90L+0x2b4>
 800ac94:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	eeb0 2a47 	vmov.f32	s4, s14
 800ac9e:	eef0 1a46 	vmov.f32	s3, s12
 800aca2:	eeb0 1a66 	vmov.f32	s2, s13
 800aca6:	eddf 0a93 	vldr	s1, [pc, #588]	; 800aef4 <turn90L+0x2b8>
 800acaa:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800aef8 <turn90L+0x2bc>
 800acae:	f7f8 f9f9 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800acb6:	2302      	movs	r3, #2
 800acb8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800acba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800acbe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800acc2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800acc6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acd6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800acda:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800acde:	eddf 4a84 	vldr	s9, [pc, #528]	; 800aef0 <turn90L+0x2b4>
 800ace2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	eeb0 2a47 	vmov.f32	s4, s14
 800acec:	eef0 1a45 	vmov.f32	s3, s10
 800acf0:	eeb0 1a65 	vmov.f32	s2, s11
 800acf4:	eef0 0a46 	vmov.f32	s1, s12
 800acf8:	eeb0 0a66 	vmov.f32	s0, s13
 800acfc:	f7f8 f9d2 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ad00:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d10c      	bne.n	800ad22 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800ad08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad0c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad10:	eeb0 1a47 	vmov.f32	s2, s14
 800ad14:	eddf 0a79 	vldr	s1, [pc, #484]	; 800aefc <turn90L+0x2c0>
 800ad18:	eeb0 0a67 	vmov.f32	s0, s15
 800ad1c:	f7f9 f938 	bl	8003f90 <mollifier_slalom_table>
 800ad20:	e013      	b.n	800ad4a <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ad22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad26:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad2a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad2e:	eef0 2a66 	vmov.f32	s5, s13
 800ad32:	eeb0 2a47 	vmov.f32	s4, s14
 800ad36:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800aef4 <turn90L+0x2b8>
 800ad3a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800aef4 <turn90L+0x2b8>
 800ad3e:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800aefc <turn90L+0x2c0>
 800ad42:	eeb0 0a67 	vmov.f32	s0, s15
 800ad46:	f7f8 ffd3 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ad52:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ad56:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800aefc <turn90L+0x2c0>
 800ad5a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ad5e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad62:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad72:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ad76:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ad7a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800aef0 <turn90L+0x2b4>
 800ad7e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	eeb0 2a47 	vmov.f32	s4, s14
 800ad88:	eef0 1a65 	vmov.f32	s3, s11
 800ad8c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800aef4 <turn90L+0x2b8>
 800ad90:	eef0 0a46 	vmov.f32	s1, s12
 800ad94:	eeb0 0a66 	vmov.f32	s0, s13
 800ad98:	f7f8 f984 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800ad9c:	4b53      	ldr	r3, [pc, #332]	; (800aeec <turn90L+0x2b0>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ada2:	e09a      	b.n	800aeda <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ada4:	2300      	movs	r3, #0
 800ada6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800adac:	2302      	movs	r3, #2
 800adae:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800adb4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800adb8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800adbc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800adc0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adc4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800add0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800add4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800add8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800aef0 <turn90L+0x2b4>
 800addc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	eeb0 2a47 	vmov.f32	s4, s14
 800ade6:	eef0 1a45 	vmov.f32	s3, s10
 800adea:	eeb0 1a65 	vmov.f32	s2, s11
 800adee:	eef0 0a46 	vmov.f32	s1, s12
 800adf2:	eeb0 0a66 	vmov.f32	s0, s13
 800adf6:	f7f8 f955 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800adfa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d10c      	bne.n	800ae1c <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800ae02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae06:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae0a:	eeb0 1a47 	vmov.f32	s2, s14
 800ae0e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800aefc <turn90L+0x2c0>
 800ae12:	eeb0 0a67 	vmov.f32	s0, s15
 800ae16:	f7f9 f8bb 	bl	8003f90 <mollifier_slalom_table>
 800ae1a:	e013      	b.n	800ae44 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ae1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae24:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae28:	eef0 2a66 	vmov.f32	s5, s13
 800ae2c:	eeb0 2a47 	vmov.f32	s4, s14
 800ae30:	eddf 1a30 	vldr	s3, [pc, #192]	; 800aef4 <turn90L+0x2b8>
 800ae34:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800aef4 <turn90L+0x2b8>
 800ae38:	eddf 0a30 	vldr	s1, [pc, #192]	; 800aefc <turn90L+0x2c0>
 800ae3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ae40:	f7f8 ff56 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ae44:	2301      	movs	r3, #1
 800ae46:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ae4c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ae50:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ae54:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae60:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ae68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae6c:	eef0 7ae7 	vabs.f32	s15, s15
 800ae70:	ee17 0a90 	vmov	r0, s15
 800ae74:	f7f5 fb90 	bl	8000598 <__aeabi_f2d>
 800ae78:	f04f 0200 	mov.w	r2, #0
 800ae7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae80:	f7f5 fd0c 	bl	800089c <__aeabi_ddiv>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4614      	mov	r4, r2
 800ae8a:	461d      	mov	r5, r3
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7f5 fb82 	bl	8000598 <__aeabi_f2d>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4620      	mov	r0, r4
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	f7f5 fcfe 	bl	800089c <__aeabi_ddiv>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4610      	mov	r0, r2
 800aea6:	4619      	mov	r1, r3
 800aea8:	f04f 0200 	mov.w	r2, #0
 800aeac:	4b14      	ldr	r3, [pc, #80]	; (800af00 <turn90L+0x2c4>)
 800aeae:	f7f5 fa15 	bl	80002dc <__adddf3>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	4619      	mov	r1, r3
 800aeba:	f7f5 fe9d 	bl	8000bf8 <__aeabi_d2f>
 800aebe:	4603      	mov	r3, r0
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	ee02 3a10 	vmov	s4, r3
 800aec6:	edd7 1a01 	vldr	s3, [r7, #4]
 800aeca:	ed97 1a01 	vldr	s2, [r7, #4]
 800aece:	eef0 0a68 	vmov.f32	s1, s17
 800aed2:	eeb0 0a48 	vmov.f32	s0, s16
 800aed6:	f7f8 f8e5 	bl	80030a4 <straight_table2>
}
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	ecbd 8b02 	vpop	{d8}
 800aee4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800aee8:	b004      	add	sp, #16
 800aeea:	4770      	bx	lr
 800aeec:	20000808 	.word	0x20000808
 800aef0:	42340000 	.word	0x42340000
 800aef4:	00000000 	.word	0x00000000
 800aef8:	42cd0000 	.word	0x42cd0000
 800aefc:	42b40000 	.word	0x42b40000
 800af00:	408f4000 	.word	0x408f4000

0800af04 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800af04:	b084      	sub	sp, #16
 800af06:	b5b0      	push	{r4, r5, r7, lr}
 800af08:	ed2d 8b02 	vpush	{d8}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af18:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800af1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800af20:	2b01      	cmp	r3, #1
 800af22:	f040 80a5 	bne.w	800b070 <turn180R+0x16c>
		highspeed_mode = 1;
 800af26:	4ba5      	ldr	r3, [pc, #660]	; (800b1bc <turn180R+0x2b8>)
 800af28:	2201      	movs	r2, #1
 800af2a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800af2c:	2301      	movs	r3, #1
 800af2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800af30:	2300      	movs	r3, #0
 800af32:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800af34:	2300      	movs	r3, #0
 800af36:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800af38:	2300      	movs	r3, #0
 800af3a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800af3c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800af40:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af50:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800af54:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800af58:	eddf 5a99 	vldr	s11, [pc, #612]	; 800b1c0 <turn180R+0x2bc>
 800af5c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	eeb0 2a47 	vmov.f32	s4, s14
 800af66:	eef0 1a46 	vmov.f32	s3, s12
 800af6a:	eeb0 1a66 	vmov.f32	s2, s13
 800af6e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800b1c4 <turn180R+0x2c0>
 800af72:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800b1c8 <turn180R+0x2c4>
 800af76:	f7f8 f895 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800af7e:	2302      	movs	r3, #2
 800af80:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af82:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800af86:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af8a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800af8e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af9e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800afa2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800afa6:	eddf 4a86 	vldr	s9, [pc, #536]	; 800b1c0 <turn180R+0x2bc>
 800afaa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	eeb0 2a47 	vmov.f32	s4, s14
 800afb4:	eef0 1a45 	vmov.f32	s3, s10
 800afb8:	eeb0 1a65 	vmov.f32	s2, s11
 800afbc:	eef0 0a46 	vmov.f32	s1, s12
 800afc0:	eeb0 0a66 	vmov.f32	s0, s13
 800afc4:	f7f8 f86e 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800afc8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d10c      	bne.n	800afea <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800afd0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afd4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800afd8:	eeb0 1a47 	vmov.f32	s2, s14
 800afdc:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800b1cc <turn180R+0x2c8>
 800afe0:	eeb0 0a67 	vmov.f32	s0, s15
 800afe4:	f7f8 ffd4 	bl	8003f90 <mollifier_slalom_table>
 800afe8:	e015      	b.n	800b016 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800afea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aff2:	eef1 7a67 	vneg.f32	s15, s15
 800aff6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800affa:	eef0 2a66 	vmov.f32	s5, s13
 800affe:	eeb0 2a67 	vmov.f32	s4, s15
 800b002:	eddf 1a70 	vldr	s3, [pc, #448]	; 800b1c4 <turn180R+0x2c0>
 800b006:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b1c4 <turn180R+0x2c0>
 800b00a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800b1cc <turn180R+0x2c8>
 800b00e:	eeb0 0a47 	vmov.f32	s0, s14
 800b012:	f7f8 fe6d 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b016:	2300      	movs	r3, #0
 800b018:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b01e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b022:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800b1d0 <turn180R+0x2cc>
 800b026:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b02a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b02e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b032:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b036:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b03a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b03e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b042:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b046:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800b1c0 <turn180R+0x2bc>
 800b04a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	eeb0 2a47 	vmov.f32	s4, s14
 800b054:	eef0 1a65 	vmov.f32	s3, s11
 800b058:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800b1c4 <turn180R+0x2c0>
 800b05c:	eef0 0a46 	vmov.f32	s1, s12
 800b060:	eeb0 0a66 	vmov.f32	s0, s13
 800b064:	f7f8 f81e 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b068:	4b54      	ldr	r3, [pc, #336]	; (800b1bc <turn180R+0x2b8>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b06e:	e09c      	b.n	800b1aa <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b070:	2300      	movs	r3, #0
 800b072:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b074:	2300      	movs	r3, #0
 800b076:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b078:	2302      	movs	r3, #2
 800b07a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b07c:	2300      	movs	r3, #0
 800b07e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b080:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b084:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b088:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b08c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b090:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b094:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b09c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b0a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0a4:	eddf 4a46 	vldr	s9, [pc, #280]	; 800b1c0 <turn180R+0x2bc>
 800b0a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	eeb0 2a47 	vmov.f32	s4, s14
 800b0b2:	eef0 1a45 	vmov.f32	s3, s10
 800b0b6:	eeb0 1a65 	vmov.f32	s2, s11
 800b0ba:	eef0 0a46 	vmov.f32	s1, s12
 800b0be:	eeb0 0a66 	vmov.f32	s0, s13
 800b0c2:	f7f7 ffef 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b0c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d10c      	bne.n	800b0e8 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b0ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0d6:	eeb0 1a47 	vmov.f32	s2, s14
 800b0da:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b1cc <turn180R+0x2c8>
 800b0de:	eeb0 0a67 	vmov.f32	s0, s15
 800b0e2:	f7f8 ff55 	bl	8003f90 <mollifier_slalom_table>
 800b0e6:	e015      	b.n	800b114 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b0e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0f0:	eef1 7a67 	vneg.f32	s15, s15
 800b0f4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b0f8:	eef0 2a66 	vmov.f32	s5, s13
 800b0fc:	eeb0 2a67 	vmov.f32	s4, s15
 800b100:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b1c4 <turn180R+0x2c0>
 800b104:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b1c4 <turn180R+0x2c0>
 800b108:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b1cc <turn180R+0x2c8>
 800b10c:	eeb0 0a47 	vmov.f32	s0, s14
 800b110:	f7f8 fdee 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b114:	2301      	movs	r3, #1
 800b116:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b11c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b120:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b124:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b128:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b12c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b130:	edd7 7a01 	vldr	s15, [r7, #4]
 800b134:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b13c:	eef0 7ae7 	vabs.f32	s15, s15
 800b140:	ee17 0a90 	vmov	r0, s15
 800b144:	f7f5 fa28 	bl	8000598 <__aeabi_f2d>
 800b148:	f04f 0200 	mov.w	r2, #0
 800b14c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b150:	f7f5 fba4 	bl	800089c <__aeabi_ddiv>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4614      	mov	r4, r2
 800b15a:	461d      	mov	r5, r3
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	4618      	mov	r0, r3
 800b160:	f7f5 fa1a 	bl	8000598 <__aeabi_f2d>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	f7f5 fb96 	bl	800089c <__aeabi_ddiv>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4610      	mov	r0, r2
 800b176:	4619      	mov	r1, r3
 800b178:	f04f 0200 	mov.w	r2, #0
 800b17c:	4b15      	ldr	r3, [pc, #84]	; (800b1d4 <turn180R+0x2d0>)
 800b17e:	f7f5 f8ad 	bl	80002dc <__adddf3>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b186:	4610      	mov	r0, r2
 800b188:	4619      	mov	r1, r3
 800b18a:	f7f5 fd35 	bl	8000bf8 <__aeabi_d2f>
 800b18e:	4603      	mov	r3, r0
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	ee02 3a10 	vmov	s4, r3
 800b196:	edd7 1a01 	vldr	s3, [r7, #4]
 800b19a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b19e:	eef0 0a68 	vmov.f32	s1, s17
 800b1a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b1a6:	f7f7 ff7d 	bl	80030a4 <straight_table2>
}
 800b1aa:	bf00      	nop
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	ecbd 8b02 	vpop	{d8}
 800b1b4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b1b8:	b004      	add	sp, #16
 800b1ba:	4770      	bx	lr
 800b1bc:	20000808 	.word	0x20000808
 800b1c0:	42340000 	.word	0x42340000
 800b1c4:	00000000 	.word	0x00000000
 800b1c8:	42cd0000 	.word	0x42cd0000
 800b1cc:	c3340000 	.word	0xc3340000
 800b1d0:	42b40000 	.word	0x42b40000
 800b1d4:	408f4000 	.word	0x408f4000

0800b1d8 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b1d8:	b084      	sub	sp, #16
 800b1da:	b5b0      	push	{r4, r5, r7, lr}
 800b1dc:	ed2d 8b02 	vpush	{d8}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b1e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b1ec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b1f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	f040 80a3 	bne.w	800b340 <turn180L+0x168>
		highspeed_mode = 1;
 800b1fa:	4ba3      	ldr	r3, [pc, #652]	; (800b488 <turn180L+0x2b0>)
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b200:	2301      	movs	r3, #1
 800b202:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b204:	2300      	movs	r3, #0
 800b206:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b210:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b214:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b218:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b21c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b220:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b224:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b228:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b22c:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b48c <turn180L+0x2b4>
 800b230:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	eeb0 2a47 	vmov.f32	s4, s14
 800b23a:	eef0 1a46 	vmov.f32	s3, s12
 800b23e:	eeb0 1a66 	vmov.f32	s2, s13
 800b242:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b490 <turn180L+0x2b8>
 800b246:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b494 <turn180L+0x2bc>
 800b24a:	f7f7 ff2b 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b24e:	2300      	movs	r3, #0
 800b250:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b252:	2302      	movs	r3, #2
 800b254:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b256:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b25a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b25e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b262:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b266:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b26a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b26e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b272:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b276:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b27a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b48c <turn180L+0x2b4>
 800b27e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	eeb0 2a47 	vmov.f32	s4, s14
 800b288:	eef0 1a45 	vmov.f32	s3, s10
 800b28c:	eeb0 1a65 	vmov.f32	s2, s11
 800b290:	eef0 0a46 	vmov.f32	s1, s12
 800b294:	eeb0 0a66 	vmov.f32	s0, s13
 800b298:	f7f7 ff04 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b29c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d10c      	bne.n	800b2be <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b2a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b2ac:	eeb0 1a47 	vmov.f32	s2, s14
 800b2b0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b498 <turn180L+0x2c0>
 800b2b4:	eeb0 0a67 	vmov.f32	s0, s15
 800b2b8:	f7f8 fe6a 	bl	8003f90 <mollifier_slalom_table>
 800b2bc:	e013      	b.n	800b2e6 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b2be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b2c6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b2ca:	eef0 2a66 	vmov.f32	s5, s13
 800b2ce:	eeb0 2a47 	vmov.f32	s4, s14
 800b2d2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b490 <turn180L+0x2b8>
 800b2d6:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b490 <turn180L+0x2b8>
 800b2da:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b498 <turn180L+0x2c0>
 800b2de:	eeb0 0a67 	vmov.f32	s0, s15
 800b2e2:	f7f8 fd05 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b2ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b2f2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b49c <turn180L+0x2c4>
 800b2f6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b2fa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2fe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b302:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b306:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b30e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b312:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b316:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b48c <turn180L+0x2b4>
 800b31a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	eeb0 2a47 	vmov.f32	s4, s14
 800b324:	eef0 1a65 	vmov.f32	s3, s11
 800b328:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b490 <turn180L+0x2b8>
 800b32c:	eef0 0a46 	vmov.f32	s1, s12
 800b330:	eeb0 0a66 	vmov.f32	s0, s13
 800b334:	f7f7 feb6 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b338:	4b53      	ldr	r3, [pc, #332]	; (800b488 <turn180L+0x2b0>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b33e:	e09a      	b.n	800b476 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b340:	2300      	movs	r3, #0
 800b342:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b344:	2300      	movs	r3, #0
 800b346:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b348:	2302      	movs	r3, #2
 800b34a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b350:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b354:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b358:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b35c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b360:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b364:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b36c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b370:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b374:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b48c <turn180L+0x2b4>
 800b378:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	eeb0 2a47 	vmov.f32	s4, s14
 800b382:	eef0 1a45 	vmov.f32	s3, s10
 800b386:	eeb0 1a65 	vmov.f32	s2, s11
 800b38a:	eef0 0a46 	vmov.f32	s1, s12
 800b38e:	eeb0 0a66 	vmov.f32	s0, s13
 800b392:	f7f7 fe87 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b396:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d10c      	bne.n	800b3b8 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b39e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b3a6:	eeb0 1a47 	vmov.f32	s2, s14
 800b3aa:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b498 <turn180L+0x2c0>
 800b3ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b3b2:	f7f8 fded 	bl	8003f90 <mollifier_slalom_table>
 800b3b6:	e013      	b.n	800b3e0 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b3b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b3c0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b3c4:	eef0 2a66 	vmov.f32	s5, s13
 800b3c8:	eeb0 2a47 	vmov.f32	s4, s14
 800b3cc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b490 <turn180L+0x2b8>
 800b3d0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b490 <turn180L+0x2b8>
 800b3d4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b498 <turn180L+0x2c0>
 800b3d8:	eeb0 0a67 	vmov.f32	s0, s15
 800b3dc:	f7f8 fc88 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b3e8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b3ec:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b3f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800b400:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b404:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b408:	eef0 7ae7 	vabs.f32	s15, s15
 800b40c:	ee17 0a90 	vmov	r0, s15
 800b410:	f7f5 f8c2 	bl	8000598 <__aeabi_f2d>
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b41c:	f7f5 fa3e 	bl	800089c <__aeabi_ddiv>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4614      	mov	r4, r2
 800b426:	461d      	mov	r5, r3
 800b428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f5 f8b4 	bl	8000598 <__aeabi_f2d>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4620      	mov	r0, r4
 800b436:	4629      	mov	r1, r5
 800b438:	f7f5 fa30 	bl	800089c <__aeabi_ddiv>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	4610      	mov	r0, r2
 800b442:	4619      	mov	r1, r3
 800b444:	f04f 0200 	mov.w	r2, #0
 800b448:	4b15      	ldr	r3, [pc, #84]	; (800b4a0 <turn180L+0x2c8>)
 800b44a:	f7f4 ff47 	bl	80002dc <__adddf3>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b452:	4610      	mov	r0, r2
 800b454:	4619      	mov	r1, r3
 800b456:	f7f5 fbcf 	bl	8000bf8 <__aeabi_d2f>
 800b45a:	4603      	mov	r3, r0
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	ee02 3a10 	vmov	s4, r3
 800b462:	edd7 1a01 	vldr	s3, [r7, #4]
 800b466:	ed97 1a01 	vldr	s2, [r7, #4]
 800b46a:	eef0 0a68 	vmov.f32	s1, s17
 800b46e:	eeb0 0a48 	vmov.f32	s0, s16
 800b472:	f7f7 fe17 	bl	80030a4 <straight_table2>
}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	ecbd 8b02 	vpop	{d8}
 800b480:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b484:	b004      	add	sp, #16
 800b486:	4770      	bx	lr
 800b488:	20000808 	.word	0x20000808
 800b48c:	42340000 	.word	0x42340000
 800b490:	00000000 	.word	0x00000000
 800b494:	42cd0000 	.word	0x42cd0000
 800b498:	43340000 	.word	0x43340000
 800b49c:	42b40000 	.word	0x42b40000
 800b4a0:	408f4000 	.word	0x408f4000
 800b4a4:	00000000 	.word	0x00000000

0800b4a8 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	b5b0      	push	{r4, r5, r7, lr}
 800b4ac:	ed2d 8b02 	vpush	{d8}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b4b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b4bc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b4c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	f040 80ae 	bne.w	800b626 <turn45inR+0x17e>
		highspeed_mode = 1;
 800b4ca:	4bdd      	ldr	r3, [pc, #884]	; (800b840 <turn45inR+0x398>)
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b4e0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b4e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b4e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4f4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b4f8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b4fc:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b844 <turn45inR+0x39c>
 800b500:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	eeb0 2a47 	vmov.f32	s4, s14
 800b50a:	eef0 1a46 	vmov.f32	s3, s12
 800b50e:	eeb0 1a66 	vmov.f32	s2, s13
 800b512:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b850 <turn45inR+0x3a8>
 800b516:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b848 <turn45inR+0x3a0>
 800b51a:	f7f7 fdc3 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b51e:	2300      	movs	r3, #0
 800b520:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b522:	2302      	movs	r3, #2
 800b524:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b526:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b52a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b52e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b532:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b536:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b53a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b53e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b542:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b546:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b54a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b844 <turn45inR+0x39c>
 800b54e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	eeb0 2a47 	vmov.f32	s4, s14
 800b558:	eef0 1a45 	vmov.f32	s3, s10
 800b55c:	eeb0 1a65 	vmov.f32	s2, s11
 800b560:	eef0 0a46 	vmov.f32	s1, s12
 800b564:	eeb0 0a66 	vmov.f32	s0, s13
 800b568:	f7f7 fd9c 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b56c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b570:	2b01      	cmp	r3, #1
 800b572:	d10c      	bne.n	800b58e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b574:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b578:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b57c:	eeb0 1a47 	vmov.f32	s2, s14
 800b580:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b854 <turn45inR+0x3ac>
 800b584:	eeb0 0a67 	vmov.f32	s0, s15
 800b588:	f7f8 fd02 	bl	8003f90 <mollifier_slalom_table>
 800b58c:	e015      	b.n	800b5ba <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b58e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b592:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b596:	eef1 7a67 	vneg.f32	s15, s15
 800b59a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b59e:	eef0 2a66 	vmov.f32	s5, s13
 800b5a2:	eeb0 2a67 	vmov.f32	s4, s15
 800b5a6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b850 <turn45inR+0x3a8>
 800b5aa:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b850 <turn45inR+0x3a8>
 800b5ae:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b854 <turn45inR+0x3ac>
 800b5b2:	eeb0 0a47 	vmov.f32	s0, s14
 800b5b6:	f7f8 fb9b 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7f4 ffe7 	bl	8000598 <__aeabi_f2d>
 800b5ca:	a39b      	add	r3, pc, #620	; (adr r3, 800b838 <turn45inR+0x390>)
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	f7f4 fe84 	bl	80002dc <__adddf3>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4619      	mov	r1, r3
 800b5dc:	f7f5 fb0c 	bl	8000bf8 <__aeabi_d2f>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b5e6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b5ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5f6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b5fa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b5fe:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b844 <turn45inR+0x39c>
 800b602:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	eeb0 2a47 	vmov.f32	s4, s14
 800b60c:	eef0 1a46 	vmov.f32	s3, s12
 800b610:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b850 <turn45inR+0x3a8>
 800b614:	eef0 0a66 	vmov.f32	s1, s13
 800b618:	ee00 3a10 	vmov	s0, r3
 800b61c:	f7f7 fd42 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b620:	4b87      	ldr	r3, [pc, #540]	; (800b840 <turn45inR+0x398>)
 800b622:	2200      	movs	r2, #0
 800b624:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b626:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f040 809d 	bne.w	800b76a <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b630:	2300      	movs	r3, #0
 800b632:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b634:	2300      	movs	r3, #0
 800b636:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b638:	2302      	movs	r3, #2
 800b63a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b640:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b644:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b648:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b64c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b650:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b654:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b65c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b660:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b664:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b844 <turn45inR+0x39c>
 800b668:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	eeb0 2a47 	vmov.f32	s4, s14
 800b672:	eef0 1a45 	vmov.f32	s3, s10
 800b676:	eeb0 1a65 	vmov.f32	s2, s11
 800b67a:	eef0 0a46 	vmov.f32	s1, s12
 800b67e:	eeb0 0a66 	vmov.f32	s0, s13
 800b682:	f7f7 fd0f 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b686:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d10c      	bne.n	800b6a8 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b68e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b692:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b696:	eeb0 1a47 	vmov.f32	s2, s14
 800b69a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b854 <turn45inR+0x3ac>
 800b69e:	eeb0 0a67 	vmov.f32	s0, s15
 800b6a2:	f7f8 fc75 	bl	8003f90 <mollifier_slalom_table>
 800b6a6:	e015      	b.n	800b6d4 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b6a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b6b0:	eef1 7a67 	vneg.f32	s15, s15
 800b6b4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b6b8:	eef0 2a66 	vmov.f32	s5, s13
 800b6bc:	eeb0 2a67 	vmov.f32	s4, s15
 800b6c0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b850 <turn45inR+0x3a8>
 800b6c4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b850 <turn45inR+0x3a8>
 800b6c8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b854 <turn45inR+0x3ac>
 800b6cc:	eeb0 0a47 	vmov.f32	s0, s14
 800b6d0:	f7f8 fb0e 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b6dc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b6e0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b6e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6f0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b6f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6fc:	eef0 7ae7 	vabs.f32	s15, s15
 800b700:	ee17 0a90 	vmov	r0, s15
 800b704:	f7f4 ff48 	bl	8000598 <__aeabi_f2d>
 800b708:	f04f 0200 	mov.w	r2, #0
 800b70c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b710:	f7f5 f8c4 	bl	800089c <__aeabi_ddiv>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	4614      	mov	r4, r2
 800b71a:	461d      	mov	r5, r3
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f4 ff3a 	bl	8000598 <__aeabi_f2d>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	4620      	mov	r0, r4
 800b72a:	4629      	mov	r1, r5
 800b72c:	f7f5 f8b6 	bl	800089c <__aeabi_ddiv>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4610      	mov	r0, r2
 800b736:	4619      	mov	r1, r3
 800b738:	f04f 0200 	mov.w	r2, #0
 800b73c:	4b43      	ldr	r3, [pc, #268]	; (800b84c <turn45inR+0x3a4>)
 800b73e:	f7f4 fdcd 	bl	80002dc <__adddf3>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b746:	4610      	mov	r0, r2
 800b748:	4619      	mov	r1, r3
 800b74a:	f7f5 fa55 	bl	8000bf8 <__aeabi_d2f>
 800b74e:	4603      	mov	r3, r0
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	ee02 3a10 	vmov	s4, r3
 800b756:	edd7 1a01 	vldr	s3, [r7, #4]
 800b75a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b75e:	eef0 0a68 	vmov.f32	s1, s17
 800b762:	eeb0 0a48 	vmov.f32	s0, s16
 800b766:	f7f7 fc9d 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800b76a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b76e:	2b01      	cmp	r3, #1
 800b770:	f240 80d0 	bls.w	800b914 <turn45inR+0x46c>

		highspeed_mode = 1;
 800b774:	4b32      	ldr	r3, [pc, #200]	; (800b840 <turn45inR+0x398>)
 800b776:	2201      	movs	r2, #1
 800b778:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b77a:	2301      	movs	r3, #1
 800b77c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b77e:	2300      	movs	r3, #0
 800b780:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b786:	2300      	movs	r3, #0
 800b788:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b78a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b78e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b792:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b796:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b79a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b79e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b7a2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b7a6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b844 <turn45inR+0x39c>
 800b7aa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	eeb0 2a47 	vmov.f32	s4, s14
 800b7b4:	eef0 1a46 	vmov.f32	s3, s12
 800b7b8:	eeb0 1a66 	vmov.f32	s2, s13
 800b7bc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b850 <turn45inR+0x3a8>
 800b7c0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b848 <turn45inR+0x3a0>
 800b7c4:	f7f7 fc6e 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b7d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b7d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b7d8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b7dc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b7e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7ec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b7f0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b7f4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b844 <turn45inR+0x39c>
 800b7f8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	eeb0 2a47 	vmov.f32	s4, s14
 800b802:	eef0 1a45 	vmov.f32	s3, s10
 800b806:	eeb0 1a65 	vmov.f32	s2, s11
 800b80a:	eef0 0a46 	vmov.f32	s1, s12
 800b80e:	eeb0 0a66 	vmov.f32	s0, s13
 800b812:	f7f7 fc47 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b816:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d11c      	bne.n	800b858 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b81e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b822:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b826:	eeb0 1a47 	vmov.f32	s2, s14
 800b82a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b854 <turn45inR+0x3ac>
 800b82e:	eeb0 0a67 	vmov.f32	s0, s15
 800b832:	f7f8 fbad 	bl	8003f90 <mollifier_slalom_table>
 800b836:	e025      	b.n	800b884 <turn45inR+0x3dc>
 800b838:	c022ec18 	.word	0xc022ec18
 800b83c:	405fd1de 	.word	0x405fd1de
 800b840:	20000808 	.word	0x20000808
 800b844:	42340000 	.word	0x42340000
 800b848:	42cd0000 	.word	0x42cd0000
 800b84c:	408f4000 	.word	0x408f4000
 800b850:	00000000 	.word	0x00000000
 800b854:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b858:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b85c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b860:	eef1 7a67 	vneg.f32	s15, s15
 800b864:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b868:	eef0 2a66 	vmov.f32	s5, s13
 800b86c:	eeb0 2a67 	vmov.f32	s4, s15
 800b870:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b850 <turn45inR+0x3a8>
 800b874:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b850 <turn45inR+0x3a8>
 800b878:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b854 <turn45inR+0x3ac>
 800b87c:	eeb0 0a47 	vmov.f32	s0, s14
 800b880:	f7f8 fa36 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b884:	2300      	movs	r3, #0
 800b886:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b88c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b890:	3b02      	subs	r3, #2
 800b892:	4618      	mov	r0, r3
 800b894:	f7f4 fe6e 	bl	8000574 <__aeabi_i2d>
 800b898:	a325      	add	r3, pc, #148	; (adr r3, 800b930 <turn45inR+0x488>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f7f4 fed3 	bl	8000648 <__aeabi_dmul>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4614      	mov	r4, r2
 800b8a8:	461d      	mov	r5, r3
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7f4 fe73 	bl	8000598 <__aeabi_f2d>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	f7f4 fd0f 	bl	80002dc <__adddf3>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	f7f5 f997 	bl	8000bf8 <__aeabi_d2f>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b8d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b8d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b8d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8e4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b8e8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b8ec:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b928 <turn45inR+0x480>
 800b8f0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	eeb0 2a47 	vmov.f32	s4, s14
 800b8fa:	eef0 1a65 	vmov.f32	s3, s11
 800b8fe:	eeb0 1a46 	vmov.f32	s2, s12
 800b902:	eef0 0a66 	vmov.f32	s1, s13
 800b906:	ee00 3a10 	vmov	s0, r3
 800b90a:	f7f7 fbcb 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b90e:	4b07      	ldr	r3, [pc, #28]	; (800b92c <turn45inR+0x484>)
 800b910:	2200      	movs	r2, #0
 800b912:	701a      	strb	r2, [r3, #0]
	}

}
 800b914:	bf00      	nop
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	ecbd 8b02 	vpop	{d8}
 800b91e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b922:	b004      	add	sp, #16
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	42340000 	.word	0x42340000
 800b92c:	20000808 	.word	0x20000808
 800b930:	c022ec18 	.word	0xc022ec18
 800b934:	404fd1de 	.word	0x404fd1de

0800b938 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b938:	b084      	sub	sp, #16
 800b93a:	b5b0      	push	{r4, r5, r7, lr}
 800b93c:	ed2d 8b02 	vpush	{d8}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b94c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b950:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b954:	2b01      	cmp	r3, #1
 800b956:	f040 80ac 	bne.w	800bab2 <turn45inL+0x17a>
		highspeed_mode = 1;
 800b95a:	4bdb      	ldr	r3, [pc, #876]	; (800bcc8 <turn45inL+0x390>)
 800b95c:	2201      	movs	r2, #1
 800b95e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b960:	2301      	movs	r3, #1
 800b962:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b964:	2300      	movs	r3, #0
 800b966:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b968:	2300      	movs	r3, #0
 800b96a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b970:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b974:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b978:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b97c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b980:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b984:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b988:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b98c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800bcd8 <turn45inL+0x3a0>
 800b990:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	eeb0 2a47 	vmov.f32	s4, s14
 800b99a:	eef0 1a46 	vmov.f32	s3, s12
 800b99e:	eeb0 1a66 	vmov.f32	s2, s13
 800b9a2:	eddf 0acc 	vldr	s1, [pc, #816]	; 800bcd4 <turn45inL+0x39c>
 800b9a6:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800bccc <turn45inL+0x394>
 800b9aa:	f7f7 fb7b 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9b6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b9ba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b9be:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b9c2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9d2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b9d6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9da:	eddf 4abf 	vldr	s9, [pc, #764]	; 800bcd8 <turn45inL+0x3a0>
 800b9de:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	eeb0 2a47 	vmov.f32	s4, s14
 800b9e8:	eef0 1a45 	vmov.f32	s3, s10
 800b9ec:	eeb0 1a65 	vmov.f32	s2, s11
 800b9f0:	eef0 0a46 	vmov.f32	s1, s12
 800b9f4:	eeb0 0a66 	vmov.f32	s0, s13
 800b9f8:	f7f7 fb54 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b9fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d10c      	bne.n	800ba1e <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ba04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba0c:	eeb0 1a47 	vmov.f32	s2, s14
 800ba10:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800bcd8 <turn45inL+0x3a0>
 800ba14:	eeb0 0a67 	vmov.f32	s0, s15
 800ba18:	f7f8 faba 	bl	8003f90 <mollifier_slalom_table>
 800ba1c:	e013      	b.n	800ba46 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ba1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba26:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ba2a:	eef0 2a66 	vmov.f32	s5, s13
 800ba2e:	eeb0 2a47 	vmov.f32	s4, s14
 800ba32:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800bcd4 <turn45inL+0x39c>
 800ba36:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800bcd4 <turn45inL+0x39c>
 800ba3a:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800bcd8 <turn45inL+0x3a0>
 800ba3e:	eeb0 0a67 	vmov.f32	s0, s15
 800ba42:	f7f8 f955 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7f4 fda1 	bl	8000598 <__aeabi_f2d>
 800ba56:	a39a      	add	r3, pc, #616	; (adr r3, 800bcc0 <turn45inL+0x388>)
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f7f4 fc3e 	bl	80002dc <__adddf3>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	4610      	mov	r0, r2
 800ba66:	4619      	mov	r1, r3
 800ba68:	f7f5 f8c6 	bl	8000bf8 <__aeabi_d2f>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba72:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba82:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ba86:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ba8a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800bcd8 <turn45inL+0x3a0>
 800ba8e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	eeb0 2a47 	vmov.f32	s4, s14
 800ba98:	eef0 1a46 	vmov.f32	s3, s12
 800ba9c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800bcd4 <turn45inL+0x39c>
 800baa0:	eef0 0a66 	vmov.f32	s1, s13
 800baa4:	ee00 3a10 	vmov	s0, r3
 800baa8:	f7f7 fafc 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800baac:	4b86      	ldr	r3, [pc, #536]	; (800bcc8 <turn45inL+0x390>)
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bab2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f040 809b 	bne.w	800bbf2 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800babc:	2300      	movs	r3, #0
 800babe:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bac4:	2302      	movs	r3, #2
 800bac6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bac8:	2300      	movs	r3, #0
 800baca:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bacc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bad0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bad4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bad8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800badc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bae0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bae8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800baec:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800baf0:	eddf 4a79 	vldr	s9, [pc, #484]	; 800bcd8 <turn45inL+0x3a0>
 800baf4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	eeb0 2a47 	vmov.f32	s4, s14
 800bafe:	eef0 1a45 	vmov.f32	s3, s10
 800bb02:	eeb0 1a65 	vmov.f32	s2, s11
 800bb06:	eef0 0a46 	vmov.f32	s1, s12
 800bb0a:	eeb0 0a66 	vmov.f32	s0, s13
 800bb0e:	f7f7 fac9 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bb12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d10c      	bne.n	800bb34 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800bb1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb1e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb22:	eeb0 1a47 	vmov.f32	s2, s14
 800bb26:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800bcd8 <turn45inL+0x3a0>
 800bb2a:	eeb0 0a67 	vmov.f32	s0, s15
 800bb2e:	f7f8 fa2f 	bl	8003f90 <mollifier_slalom_table>
 800bb32:	e013      	b.n	800bb5c <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bb34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb3c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bb40:	eef0 2a66 	vmov.f32	s5, s13
 800bb44:	eeb0 2a47 	vmov.f32	s4, s14
 800bb48:	eddf 1a62 	vldr	s3, [pc, #392]	; 800bcd4 <turn45inL+0x39c>
 800bb4c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800bcd4 <turn45inL+0x39c>
 800bb50:	eddf 0a61 	vldr	s1, [pc, #388]	; 800bcd8 <turn45inL+0x3a0>
 800bb54:	eeb0 0a67 	vmov.f32	s0, s15
 800bb58:	f7f8 f8ca 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bb64:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bb68:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bb6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb78:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb84:	eef0 7ae7 	vabs.f32	s15, s15
 800bb88:	ee17 0a90 	vmov	r0, s15
 800bb8c:	f7f4 fd04 	bl	8000598 <__aeabi_f2d>
 800bb90:	f04f 0200 	mov.w	r2, #0
 800bb94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb98:	f7f4 fe80 	bl	800089c <__aeabi_ddiv>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	461d      	mov	r5, r3
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7f4 fcf6 	bl	8000598 <__aeabi_f2d>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	f7f4 fe72 	bl	800089c <__aeabi_ddiv>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	f04f 0200 	mov.w	r2, #0
 800bbc4:	4b42      	ldr	r3, [pc, #264]	; (800bcd0 <turn45inL+0x398>)
 800bbc6:	f7f4 fb89 	bl	80002dc <__adddf3>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bbce:	4610      	mov	r0, r2
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f7f5 f811 	bl	8000bf8 <__aeabi_d2f>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	ee02 3a10 	vmov	s4, r3
 800bbde:	edd7 1a01 	vldr	s3, [r7, #4]
 800bbe2:	ed97 1a01 	vldr	s2, [r7, #4]
 800bbe6:	eef0 0a68 	vmov.f32	s1, s17
 800bbea:	eeb0 0a48 	vmov.f32	s0, s16
 800bbee:	f7f7 fa59 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800bbf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	f240 80cc 	bls.w	800bd94 <turn45inL+0x45c>

		highspeed_mode = 1;
 800bbfc:	4b32      	ldr	r3, [pc, #200]	; (800bcc8 <turn45inL+0x390>)
 800bbfe:	2201      	movs	r2, #1
 800bc00:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bc02:	2301      	movs	r3, #1
 800bc04:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bc12:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc16:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc26:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bc2a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bc2e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800bcd8 <turn45inL+0x3a0>
 800bc32:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	eeb0 2a47 	vmov.f32	s4, s14
 800bc3c:	eef0 1a46 	vmov.f32	s3, s12
 800bc40:	eeb0 1a66 	vmov.f32	s2, s13
 800bc44:	eddf 0a23 	vldr	s1, [pc, #140]	; 800bcd4 <turn45inL+0x39c>
 800bc48:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800bccc <turn45inL+0x394>
 800bc4c:	f7f7 fa2a 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bc54:	2302      	movs	r3, #2
 800bc56:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bc5c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bc60:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bc64:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc74:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bc78:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc7c:	eddf 4a16 	vldr	s9, [pc, #88]	; 800bcd8 <turn45inL+0x3a0>
 800bc80:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	eeb0 2a47 	vmov.f32	s4, s14
 800bc8a:	eef0 1a45 	vmov.f32	s3, s10
 800bc8e:	eeb0 1a65 	vmov.f32	s2, s11
 800bc92:	eef0 0a46 	vmov.f32	s1, s12
 800bc96:	eeb0 0a66 	vmov.f32	s0, s13
 800bc9a:	f7f7 fa03 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bc9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d11a      	bne.n	800bcdc <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800bca6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcaa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bcae:	eeb0 1a47 	vmov.f32	s2, s14
 800bcb2:	eddf 0a09 	vldr	s1, [pc, #36]	; 800bcd8 <turn45inL+0x3a0>
 800bcb6:	eeb0 0a67 	vmov.f32	s0, s15
 800bcba:	f7f8 f969 	bl	8003f90 <mollifier_slalom_table>
 800bcbe:	e021      	b.n	800bd04 <turn45inL+0x3cc>
 800bcc0:	c022ec18 	.word	0xc022ec18
 800bcc4:	405fd1de 	.word	0x405fd1de
 800bcc8:	20000808 	.word	0x20000808
 800bccc:	42cd0000 	.word	0x42cd0000
 800bcd0:	408f4000 	.word	0x408f4000
 800bcd4:	00000000 	.word	0x00000000
 800bcd8:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bcdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bce0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bce4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bce8:	eef0 2a66 	vmov.f32	s5, s13
 800bcec:	eeb0 2a47 	vmov.f32	s4, s14
 800bcf0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800bcd4 <turn45inL+0x39c>
 800bcf4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800bcd4 <turn45inL+0x39c>
 800bcf8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800bcd8 <turn45inL+0x3a0>
 800bcfc:	eeb0 0a67 	vmov.f32	s0, s15
 800bd00:	f7f7 fff6 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd10:	3b02      	subs	r3, #2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7f4 fc2e 	bl	8000574 <__aeabi_i2d>
 800bd18:	a325      	add	r3, pc, #148	; (adr r3, 800bdb0 <turn45inL+0x478>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f7f4 fc93 	bl	8000648 <__aeabi_dmul>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4614      	mov	r4, r2
 800bd28:	461d      	mov	r5, r3
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7f4 fc33 	bl	8000598 <__aeabi_f2d>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f7f4 facf 	bl	80002dc <__adddf3>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	4610      	mov	r0, r2
 800bd44:	4619      	mov	r1, r3
 800bd46:	f7f4 ff57 	bl	8000bf8 <__aeabi_d2f>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd50:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bd54:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd64:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bd68:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd6c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bda8 <turn45inL+0x470>
 800bd70:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	eeb0 2a47 	vmov.f32	s4, s14
 800bd7a:	eef0 1a65 	vmov.f32	s3, s11
 800bd7e:	eeb0 1a46 	vmov.f32	s2, s12
 800bd82:	eef0 0a66 	vmov.f32	s1, s13
 800bd86:	ee00 3a10 	vmov	s0, r3
 800bd8a:	f7f7 f98b 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800bd8e:	4b07      	ldr	r3, [pc, #28]	; (800bdac <turn45inL+0x474>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	701a      	strb	r2, [r3, #0]
	}

}
 800bd94:	bf00      	nop
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	ecbd 8b02 	vpop	{d8}
 800bd9e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bda2:	b004      	add	sp, #16
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	42340000 	.word	0x42340000
 800bdac:	20000808 	.word	0x20000808
 800bdb0:	c022ec18 	.word	0xc022ec18
 800bdb4:	404fd1de 	.word	0x404fd1de

0800bdb8 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bdb8:	b084      	sub	sp, #16
 800bdba:	b5b0      	push	{r4, r5, r7, lr}
 800bdbc:	ed2d 8b02 	vpush	{d8}
 800bdc0:	b084      	sub	sp, #16
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bdc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bdcc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bdd0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	f040 80ae 	bne.w	800bf36 <turn135inR+0x17e>
		highspeed_mode = 1;
 800bdda:	4bdd      	ldr	r3, [pc, #884]	; (800c150 <turn135inR+0x398>)
 800bddc:	2201      	movs	r2, #1
 800bdde:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bde0:	2301      	movs	r3, #1
 800bde2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bdf0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bdf4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bdf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be04:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be08:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be0c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800c154 <turn135inR+0x39c>
 800be10:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	eeb0 2a47 	vmov.f32	s4, s14
 800be1a:	eef0 1a46 	vmov.f32	s3, s12
 800be1e:	eeb0 1a66 	vmov.f32	s2, s13
 800be22:	eddf 0acf 	vldr	s1, [pc, #828]	; 800c160 <turn135inR+0x3a8>
 800be26:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800c158 <turn135inR+0x3a0>
 800be2a:	f7f7 f93b 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800be2e:	2300      	movs	r3, #0
 800be30:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800be32:	2302      	movs	r3, #2
 800be34:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be36:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be3a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be3e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be42:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be52:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800be56:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be5a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800c154 <turn135inR+0x39c>
 800be5e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	eeb0 2a47 	vmov.f32	s4, s14
 800be68:	eef0 1a45 	vmov.f32	s3, s10
 800be6c:	eeb0 1a65 	vmov.f32	s2, s11
 800be70:	eef0 0a46 	vmov.f32	s1, s12
 800be74:	eeb0 0a66 	vmov.f32	s0, s13
 800be78:	f7f7 f914 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800be7c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800be80:	2b01      	cmp	r3, #1
 800be82:	d10c      	bne.n	800be9e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800be84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be88:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be8c:	eeb0 1a47 	vmov.f32	s2, s14
 800be90:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c164 <turn135inR+0x3ac>
 800be94:	eeb0 0a67 	vmov.f32	s0, s15
 800be98:	f7f8 f87a 	bl	8003f90 <mollifier_slalom_table>
 800be9c:	e015      	b.n	800beca <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800be9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bea2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bea6:	eef1 7a67 	vneg.f32	s15, s15
 800beaa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800beae:	eef0 2a66 	vmov.f32	s5, s13
 800beb2:	eeb0 2a67 	vmov.f32	s4, s15
 800beb6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800c160 <turn135inR+0x3a8>
 800beba:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800c160 <turn135inR+0x3a8>
 800bebe:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800c164 <turn135inR+0x3ac>
 800bec2:	eeb0 0a47 	vmov.f32	s0, s14
 800bec6:	f7f7 ff13 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800beca:	2300      	movs	r3, #0
 800becc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bece:	2300      	movs	r3, #0
 800bed0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7f4 fb5f 	bl	8000598 <__aeabi_f2d>
 800beda:	a39b      	add	r3, pc, #620	; (adr r3, 800c148 <turn135inR+0x390>)
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	f7f4 f9fc 	bl	80002dc <__adddf3>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4610      	mov	r0, r2
 800beea:	4619      	mov	r1, r3
 800beec:	f7f4 fe84 	bl	8000bf8 <__aeabi_d2f>
 800bef0:	4603      	mov	r3, r0
 800bef2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bef6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800befa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800befe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf06:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bf0a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bf0e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800c154 <turn135inR+0x39c>
 800bf12:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	eeb0 2a47 	vmov.f32	s4, s14
 800bf1c:	eef0 1a46 	vmov.f32	s3, s12
 800bf20:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800c160 <turn135inR+0x3a8>
 800bf24:	eef0 0a66 	vmov.f32	s1, s13
 800bf28:	ee00 3a10 	vmov	s0, r3
 800bf2c:	f7f7 f8ba 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800bf30:	4b87      	ldr	r3, [pc, #540]	; (800c150 <turn135inR+0x398>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bf36:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f040 809d 	bne.w	800c07a <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bf40:	2300      	movs	r3, #0
 800bf42:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bf48:	2302      	movs	r3, #2
 800bf4a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf50:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bf54:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf58:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bf5c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf6c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bf70:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf74:	eddf 4a77 	vldr	s9, [pc, #476]	; 800c154 <turn135inR+0x39c>
 800bf78:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	eeb0 2a47 	vmov.f32	s4, s14
 800bf82:	eef0 1a45 	vmov.f32	s3, s10
 800bf86:	eeb0 1a65 	vmov.f32	s2, s11
 800bf8a:	eef0 0a46 	vmov.f32	s1, s12
 800bf8e:	eeb0 0a66 	vmov.f32	s0, s13
 800bf92:	f7f7 f887 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bf96:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d10c      	bne.n	800bfb8 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bf9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfa2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bfa6:	eeb0 1a47 	vmov.f32	s2, s14
 800bfaa:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800c164 <turn135inR+0x3ac>
 800bfae:	eeb0 0a67 	vmov.f32	s0, s15
 800bfb2:	f7f7 ffed 	bl	8003f90 <mollifier_slalom_table>
 800bfb6:	e015      	b.n	800bfe4 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bfb8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bfbc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bfc0:	eef1 7a67 	vneg.f32	s15, s15
 800bfc4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bfc8:	eef0 2a66 	vmov.f32	s5, s13
 800bfcc:	eeb0 2a67 	vmov.f32	s4, s15
 800bfd0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c160 <turn135inR+0x3a8>
 800bfd4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c160 <turn135inR+0x3a8>
 800bfd8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c164 <turn135inR+0x3ac>
 800bfdc:	eeb0 0a47 	vmov.f32	s0, s14
 800bfe0:	f7f7 fe86 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bfec:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bff0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bff4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bff8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c000:	edd7 7a01 	vldr	s15, [r7, #4]
 800c004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c00c:	eef0 7ae7 	vabs.f32	s15, s15
 800c010:	ee17 0a90 	vmov	r0, s15
 800c014:	f7f4 fac0 	bl	8000598 <__aeabi_f2d>
 800c018:	f04f 0200 	mov.w	r2, #0
 800c01c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c020:	f7f4 fc3c 	bl	800089c <__aeabi_ddiv>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4614      	mov	r4, r2
 800c02a:	461d      	mov	r5, r3
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	4618      	mov	r0, r3
 800c030:	f7f4 fab2 	bl	8000598 <__aeabi_f2d>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4620      	mov	r0, r4
 800c03a:	4629      	mov	r1, r5
 800c03c:	f7f4 fc2e 	bl	800089c <__aeabi_ddiv>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	4610      	mov	r0, r2
 800c046:	4619      	mov	r1, r3
 800c048:	f04f 0200 	mov.w	r2, #0
 800c04c:	4b43      	ldr	r3, [pc, #268]	; (800c15c <turn135inR+0x3a4>)
 800c04e:	f7f4 f945 	bl	80002dc <__adddf3>
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c056:	4610      	mov	r0, r2
 800c058:	4619      	mov	r1, r3
 800c05a:	f7f4 fdcd 	bl	8000bf8 <__aeabi_d2f>
 800c05e:	4603      	mov	r3, r0
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	ee02 3a10 	vmov	s4, r3
 800c066:	edd7 1a01 	vldr	s3, [r7, #4]
 800c06a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c06e:	eef0 0a68 	vmov.f32	s1, s17
 800c072:	eeb0 0a48 	vmov.f32	s0, s16
 800c076:	f7f7 f815 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800c07a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c07e:	2b01      	cmp	r3, #1
 800c080:	f240 80d0 	bls.w	800c224 <turn135inR+0x46c>

		highspeed_mode = 1;
 800c084:	4b32      	ldr	r3, [pc, #200]	; (800c150 <turn135inR+0x398>)
 800c086:	2201      	movs	r2, #1
 800c088:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c08a:	2301      	movs	r3, #1
 800c08c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c08e:	2300      	movs	r3, #0
 800c090:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c092:	2300      	movs	r3, #0
 800c094:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c096:	2300      	movs	r3, #0
 800c098:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c09a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c09e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c0a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0ae:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c0b2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c0b6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c154 <turn135inR+0x39c>
 800c0ba:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	eeb0 2a47 	vmov.f32	s4, s14
 800c0c4:	eef0 1a46 	vmov.f32	s3, s12
 800c0c8:	eeb0 1a66 	vmov.f32	s2, s13
 800c0cc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c160 <turn135inR+0x3a8>
 800c0d0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c158 <turn135inR+0x3a0>
 800c0d4:	f7f6 ffe6 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c0dc:	2302      	movs	r3, #2
 800c0de:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c0e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c0e8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c0ec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c0f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0fc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c100:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c104:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c154 <turn135inR+0x39c>
 800c108:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	eeb0 2a47 	vmov.f32	s4, s14
 800c112:	eef0 1a45 	vmov.f32	s3, s10
 800c116:	eeb0 1a65 	vmov.f32	s2, s11
 800c11a:	eef0 0a46 	vmov.f32	s1, s12
 800c11e:	eeb0 0a66 	vmov.f32	s0, s13
 800c122:	f7f6 ffbf 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c126:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d11c      	bne.n	800c168 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c12e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c132:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c136:	eeb0 1a47 	vmov.f32	s2, s14
 800c13a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c164 <turn135inR+0x3ac>
 800c13e:	eeb0 0a67 	vmov.f32	s0, s15
 800c142:	f7f7 ff25 	bl	8003f90 <mollifier_slalom_table>
 800c146:	e025      	b.n	800c194 <turn135inR+0x3dc>
 800c148:	c022ec18 	.word	0xc022ec18
 800c14c:	405fd1de 	.word	0x405fd1de
 800c150:	20000808 	.word	0x20000808
 800c154:	42340000 	.word	0x42340000
 800c158:	42cd0000 	.word	0x42cd0000
 800c15c:	408f4000 	.word	0x408f4000
 800c160:	00000000 	.word	0x00000000
 800c164:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c168:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c16c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c170:	eef1 7a67 	vneg.f32	s15, s15
 800c174:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c178:	eef0 2a66 	vmov.f32	s5, s13
 800c17c:	eeb0 2a67 	vmov.f32	s4, s15
 800c180:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800c160 <turn135inR+0x3a8>
 800c184:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800c160 <turn135inR+0x3a8>
 800c188:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800c164 <turn135inR+0x3ac>
 800c18c:	eeb0 0a47 	vmov.f32	s0, s14
 800c190:	f7f7 fdae 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c194:	2300      	movs	r3, #0
 800c196:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c198:	2300      	movs	r3, #0
 800c19a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c19c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c1a0:	3b02      	subs	r3, #2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7f4 f9e6 	bl	8000574 <__aeabi_i2d>
 800c1a8:	a325      	add	r3, pc, #148	; (adr r3, 800c240 <turn135inR+0x488>)
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	f7f4 fa4b 	bl	8000648 <__aeabi_dmul>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4614      	mov	r4, r2
 800c1b8:	461d      	mov	r5, r3
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7f4 f9eb 	bl	8000598 <__aeabi_f2d>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	f7f4 f887 	bl	80002dc <__adddf3>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	f7f4 fd0f 	bl	8000bf8 <__aeabi_d2f>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c1e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c1e4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1f4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c1f8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1fc:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c238 <turn135inR+0x480>
 800c200:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	eeb0 2a47 	vmov.f32	s4, s14
 800c20a:	eef0 1a65 	vmov.f32	s3, s11
 800c20e:	eeb0 1a46 	vmov.f32	s2, s12
 800c212:	eef0 0a66 	vmov.f32	s1, s13
 800c216:	ee00 3a10 	vmov	s0, r3
 800c21a:	f7f6 ff43 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c21e:	4b07      	ldr	r3, [pc, #28]	; (800c23c <turn135inR+0x484>)
 800c220:	2200      	movs	r2, #0
 800c222:	701a      	strb	r2, [r3, #0]
	}

}
 800c224:	bf00      	nop
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	ecbd 8b02 	vpop	{d8}
 800c22e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c232:	b004      	add	sp, #16
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	42340000 	.word	0x42340000
 800c23c:	20000808 	.word	0x20000808
 800c240:	c022ec18 	.word	0xc022ec18
 800c244:	404fd1de 	.word	0x404fd1de

0800c248 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c248:	b084      	sub	sp, #16
 800c24a:	b5b0      	push	{r4, r5, r7, lr}
 800c24c:	ed2d 8b02 	vpush	{d8}
 800c250:	b084      	sub	sp, #16
 800c252:	af00      	add	r7, sp, #0
 800c254:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c25c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c260:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c264:	2b01      	cmp	r3, #1
 800c266:	f040 80ac 	bne.w	800c3c2 <turn135inL+0x17a>
		highspeed_mode = 1;
 800c26a:	4bdb      	ldr	r3, [pc, #876]	; (800c5d8 <turn135inL+0x390>)
 800c26c:	2201      	movs	r2, #1
 800c26e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c270:	2301      	movs	r3, #1
 800c272:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c274:	2300      	movs	r3, #0
 800c276:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c278:	2300      	movs	r3, #0
 800c27a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c280:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c284:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c288:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c28c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c290:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c294:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c298:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c29c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c5dc <turn135inL+0x394>
 800c2a0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	eeb0 2a47 	vmov.f32	s4, s14
 800c2aa:	eef0 1a46 	vmov.f32	s3, s12
 800c2ae:	eeb0 1a66 	vmov.f32	s2, s13
 800c2b2:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c5e8 <turn135inL+0x3a0>
 800c2b6:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c5e0 <turn135inL+0x398>
 800c2ba:	f7f6 fef3 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2c6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c2ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c2ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c2d2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2e2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c2e6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2ea:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c5dc <turn135inL+0x394>
 800c2ee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	eeb0 2a47 	vmov.f32	s4, s14
 800c2f8:	eef0 1a45 	vmov.f32	s3, s10
 800c2fc:	eeb0 1a65 	vmov.f32	s2, s11
 800c300:	eef0 0a46 	vmov.f32	s1, s12
 800c304:	eeb0 0a66 	vmov.f32	s0, s13
 800c308:	f7f6 fecc 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c30c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c310:	2b01      	cmp	r3, #1
 800c312:	d10c      	bne.n	800c32e <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c314:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c318:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c31c:	eeb0 1a47 	vmov.f32	s2, s14
 800c320:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c5ec <turn135inL+0x3a4>
 800c324:	eeb0 0a67 	vmov.f32	s0, s15
 800c328:	f7f7 fe32 	bl	8003f90 <mollifier_slalom_table>
 800c32c:	e013      	b.n	800c356 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c32e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c332:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c336:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c33a:	eef0 2a66 	vmov.f32	s5, s13
 800c33e:	eeb0 2a47 	vmov.f32	s4, s14
 800c342:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c5e8 <turn135inL+0x3a0>
 800c346:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c5e8 <turn135inL+0x3a0>
 800c34a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c5ec <turn135inL+0x3a4>
 800c34e:	eeb0 0a67 	vmov.f32	s0, s15
 800c352:	f7f7 fccd 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c356:	2300      	movs	r3, #0
 800c358:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	4618      	mov	r0, r3
 800c362:	f7f4 f919 	bl	8000598 <__aeabi_f2d>
 800c366:	a39a      	add	r3, pc, #616	; (adr r3, 800c5d0 <turn135inL+0x388>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f7f3 ffb6 	bl	80002dc <__adddf3>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4610      	mov	r0, r2
 800c376:	4619      	mov	r1, r3
 800c378:	f7f4 fc3e 	bl	8000bf8 <__aeabi_d2f>
 800c37c:	4603      	mov	r3, r0
 800c37e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c382:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c386:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c38a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c38e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c392:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c396:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c39a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c5dc <turn135inL+0x394>
 800c39e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	eeb0 2a47 	vmov.f32	s4, s14
 800c3a8:	eef0 1a46 	vmov.f32	s3, s12
 800c3ac:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c5e8 <turn135inL+0x3a0>
 800c3b0:	eef0 0a66 	vmov.f32	s1, s13
 800c3b4:	ee00 3a10 	vmov	s0, r3
 800c3b8:	f7f6 fe74 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c3bc:	4b86      	ldr	r3, [pc, #536]	; (800c5d8 <turn135inL+0x390>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c3c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f040 809b 	bne.w	800c502 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3dc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c3e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c3e4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c3e8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3f8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c3fc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c400:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c5dc <turn135inL+0x394>
 800c404:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	eeb0 2a47 	vmov.f32	s4, s14
 800c40e:	eef0 1a45 	vmov.f32	s3, s10
 800c412:	eeb0 1a65 	vmov.f32	s2, s11
 800c416:	eef0 0a46 	vmov.f32	s1, s12
 800c41a:	eeb0 0a66 	vmov.f32	s0, s13
 800c41e:	f7f6 fe41 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c422:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c426:	2b01      	cmp	r3, #1
 800c428:	d10c      	bne.n	800c444 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c42a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c42e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c432:	eeb0 1a47 	vmov.f32	s2, s14
 800c436:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c5ec <turn135inL+0x3a4>
 800c43a:	eeb0 0a67 	vmov.f32	s0, s15
 800c43e:	f7f7 fda7 	bl	8003f90 <mollifier_slalom_table>
 800c442:	e013      	b.n	800c46c <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c444:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c448:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c44c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c450:	eef0 2a66 	vmov.f32	s5, s13
 800c454:	eeb0 2a47 	vmov.f32	s4, s14
 800c458:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c5e8 <turn135inL+0x3a0>
 800c45c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c5e8 <turn135inL+0x3a0>
 800c460:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c5ec <turn135inL+0x3a4>
 800c464:	eeb0 0a67 	vmov.f32	s0, s15
 800c468:	f7f7 fc42 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c470:	2300      	movs	r3, #0
 800c472:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c474:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c478:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c47c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c480:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c484:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c488:	edd7 7a01 	vldr	s15, [r7, #4]
 800c48c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c490:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c494:	eef0 7ae7 	vabs.f32	s15, s15
 800c498:	ee17 0a90 	vmov	r0, s15
 800c49c:	f7f4 f87c 	bl	8000598 <__aeabi_f2d>
 800c4a0:	f04f 0200 	mov.w	r2, #0
 800c4a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4a8:	f7f4 f9f8 	bl	800089c <__aeabi_ddiv>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4614      	mov	r4, r2
 800c4b2:	461d      	mov	r5, r3
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7f4 f86e 	bl	8000598 <__aeabi_f2d>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	f7f4 f9ea 	bl	800089c <__aeabi_ddiv>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	f04f 0200 	mov.w	r2, #0
 800c4d4:	4b43      	ldr	r3, [pc, #268]	; (800c5e4 <turn135inL+0x39c>)
 800c4d6:	f7f3 ff01 	bl	80002dc <__adddf3>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c4de:	4610      	mov	r0, r2
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f7f4 fb89 	bl	8000bf8 <__aeabi_d2f>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	ee02 3a10 	vmov	s4, r3
 800c4ee:	edd7 1a01 	vldr	s3, [r7, #4]
 800c4f2:	ed97 1a01 	vldr	s2, [r7, #4]
 800c4f6:	eef0 0a68 	vmov.f32	s1, s17
 800c4fa:	eeb0 0a48 	vmov.f32	s0, s16
 800c4fe:	f7f6 fdd1 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800c502:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c506:	2b01      	cmp	r3, #1
 800c508:	f240 80ce 	bls.w	800c6a8 <turn135inL+0x460>

		highspeed_mode = 1;
 800c50c:	4b32      	ldr	r3, [pc, #200]	; (800c5d8 <turn135inL+0x390>)
 800c50e:	2201      	movs	r2, #1
 800c510:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c512:	2301      	movs	r3, #1
 800c514:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c516:	2300      	movs	r3, #0
 800c518:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c51e:	2300      	movs	r3, #0
 800c520:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c522:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c526:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c52a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c52e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c532:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c536:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c53a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c53e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c5dc <turn135inL+0x394>
 800c542:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	eeb0 2a47 	vmov.f32	s4, s14
 800c54c:	eef0 1a46 	vmov.f32	s3, s12
 800c550:	eeb0 1a66 	vmov.f32	s2, s13
 800c554:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c5e8 <turn135inL+0x3a0>
 800c558:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c5e0 <turn135inL+0x398>
 800c55c:	f7f6 fda2 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c560:	2300      	movs	r3, #0
 800c562:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c564:	2302      	movs	r3, #2
 800c566:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c568:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c56c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c570:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c574:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c578:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c57c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c580:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c584:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c588:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c58c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c5dc <turn135inL+0x394>
 800c590:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	eeb0 2a47 	vmov.f32	s4, s14
 800c59a:	eef0 1a45 	vmov.f32	s3, s10
 800c59e:	eeb0 1a65 	vmov.f32	s2, s11
 800c5a2:	eef0 0a46 	vmov.f32	s1, s12
 800c5a6:	eeb0 0a66 	vmov.f32	s0, s13
 800c5aa:	f7f6 fd7b 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c5ae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d11c      	bne.n	800c5f0 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c5b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c5be:	eeb0 1a47 	vmov.f32	s2, s14
 800c5c2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c5ec <turn135inL+0x3a4>
 800c5c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c5ca:	f7f7 fce1 	bl	8003f90 <mollifier_slalom_table>
 800c5ce:	e023      	b.n	800c618 <turn135inL+0x3d0>
 800c5d0:	c022ec18 	.word	0xc022ec18
 800c5d4:	405fd1de 	.word	0x405fd1de
 800c5d8:	20000808 	.word	0x20000808
 800c5dc:	42340000 	.word	0x42340000
 800c5e0:	42cd0000 	.word	0x42cd0000
 800c5e4:	408f4000 	.word	0x408f4000
 800c5e8:	00000000 	.word	0x00000000
 800c5ec:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c5f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c5f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c5fc:	eef0 2a66 	vmov.f32	s5, s13
 800c600:	eeb0 2a47 	vmov.f32	s4, s14
 800c604:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c5e8 <turn135inL+0x3a0>
 800c608:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c5e8 <turn135inL+0x3a0>
 800c60c:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c5ec <turn135inL+0x3a4>
 800c610:	eeb0 0a67 	vmov.f32	s0, s15
 800c614:	f7f7 fb6c 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c618:	2300      	movs	r3, #0
 800c61a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c620:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c624:	3b02      	subs	r3, #2
 800c626:	4618      	mov	r0, r3
 800c628:	f7f3 ffa4 	bl	8000574 <__aeabi_i2d>
 800c62c:	a326      	add	r3, pc, #152	; (adr r3, 800c6c8 <turn135inL+0x480>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	f7f4 f809 	bl	8000648 <__aeabi_dmul>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4614      	mov	r4, r2
 800c63c:	461d      	mov	r5, r3
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	4618      	mov	r0, r3
 800c642:	f7f3 ffa9 	bl	8000598 <__aeabi_f2d>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4620      	mov	r0, r4
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7f3 fe45 	bl	80002dc <__adddf3>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4610      	mov	r0, r2
 800c658:	4619      	mov	r1, r3
 800c65a:	f7f4 facd 	bl	8000bf8 <__aeabi_d2f>
 800c65e:	4603      	mov	r3, r0
 800c660:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c664:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c668:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c66c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c670:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c674:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c678:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c67c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c680:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c6c0 <turn135inL+0x478>
 800c684:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	eeb0 2a47 	vmov.f32	s4, s14
 800c68e:	eef0 1a65 	vmov.f32	s3, s11
 800c692:	eeb0 1a46 	vmov.f32	s2, s12
 800c696:	eef0 0a66 	vmov.f32	s1, s13
 800c69a:	ee00 3a10 	vmov	s0, r3
 800c69e:	f7f6 fd01 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c6a2:	4b08      	ldr	r3, [pc, #32]	; (800c6c4 <turn135inL+0x47c>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	701a      	strb	r2, [r3, #0]
	}

}
 800c6a8:	bf00      	nop
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	ecbd 8b02 	vpop	{d8}
 800c6b2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c6b6:	b004      	add	sp, #16
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	f3af 8000 	nop.w
 800c6c0:	42340000 	.word	0x42340000
 800c6c4:	20000808 	.word	0x20000808
 800c6c8:	c022ec18 	.word	0xc022ec18
 800c6cc:	404fd1de 	.word	0x404fd1de

0800c6d0 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	b5b0      	push	{r4, r5, r7, lr}
 800c6d4:	ed2d 8b02 	vpush	{d8}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c6e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c6e4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c6e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	f040 80a5 	bne.w	800c83c <turn45outR+0x16c>
		highspeed_mode = 1;
 800c6f2:	4be9      	ldr	r3, [pc, #932]	; (800ca98 <turn45outR+0x3c8>)
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c700:	2300      	movs	r3, #0
 800c702:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c704:	2300      	movs	r3, #0
 800c706:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c708:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c70c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c710:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c714:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c71c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c720:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c724:	eddf 5add 	vldr	s11, [pc, #884]	; 800ca9c <turn45outR+0x3cc>
 800c728:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	eeb0 2a47 	vmov.f32	s4, s14
 800c732:	eef0 1a46 	vmov.f32	s3, s12
 800c736:	eeb0 1a66 	vmov.f32	s2, s13
 800c73a:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800caa0 <turn45outR+0x3d0>
 800c73e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800caa4 <turn45outR+0x3d4>
 800c742:	f7f6 fcaf 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c746:	2300      	movs	r3, #0
 800c748:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c74a:	2303      	movs	r3, #3
 800c74c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c74e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c752:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c756:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c75a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c75e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c762:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c76a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c76e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c772:	eddf 4aca 	vldr	s9, [pc, #808]	; 800ca9c <turn45outR+0x3cc>
 800c776:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	eeb0 2a47 	vmov.f32	s4, s14
 800c780:	eef0 1a45 	vmov.f32	s3, s10
 800c784:	eeb0 1a65 	vmov.f32	s2, s11
 800c788:	eef0 0a46 	vmov.f32	s1, s12
 800c78c:	eeb0 0a66 	vmov.f32	s0, s13
 800c790:	f7f6 fc88 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c794:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d10c      	bne.n	800c7b6 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c79c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c7a4:	eeb0 1a47 	vmov.f32	s2, s14
 800c7a8:	eddf 0abf 	vldr	s1, [pc, #764]	; 800caa8 <turn45outR+0x3d8>
 800c7ac:	eeb0 0a67 	vmov.f32	s0, s15
 800c7b0:	f7f7 fbee 	bl	8003f90 <mollifier_slalom_table>
 800c7b4:	e015      	b.n	800c7e2 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c7b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c7be:	eef1 7a67 	vneg.f32	s15, s15
 800c7c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c7c6:	eef0 2a66 	vmov.f32	s5, s13
 800c7ca:	eeb0 2a67 	vmov.f32	s4, s15
 800c7ce:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800caa0 <turn45outR+0x3d0>
 800c7d2:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800caa0 <turn45outR+0x3d0>
 800c7d6:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800caa8 <turn45outR+0x3d8>
 800c7da:	eeb0 0a47 	vmov.f32	s0, s14
 800c7de:	f7f7 fa87 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c7ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c7ee:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800caac <turn45outR+0x3dc>
 800c7f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c7f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c7fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c7fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c802:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c80a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c80e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c812:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800ca9c <turn45outR+0x3cc>
 800c816:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	eeb0 2a47 	vmov.f32	s4, s14
 800c820:	eef0 1a65 	vmov.f32	s3, s11
 800c824:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800caa0 <turn45outR+0x3d0>
 800c828:	eef0 0a46 	vmov.f32	s1, s12
 800c82c:	eeb0 0a66 	vmov.f32	s0, s13
 800c830:	f7f6 fc38 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c834:	4b98      	ldr	r3, [pc, #608]	; (800ca98 <turn45outR+0x3c8>)
 800c836:	2200      	movs	r2, #0
 800c838:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c83a:	e123      	b.n	800ca84 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c83c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c840:	2b01      	cmp	r3, #1
 800c842:	f240 8082 	bls.w	800c94a <turn45outR+0x27a>
		highspeed_mode = 1;
 800c846:	4b94      	ldr	r3, [pc, #592]	; (800ca98 <turn45outR+0x3c8>)
 800c848:	2201      	movs	r2, #1
 800c84a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c850:	2300      	movs	r3, #0
 800c852:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c854:	2303      	movs	r3, #3
 800c856:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c858:	2300      	movs	r3, #0
 800c85a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c85c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c860:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c864:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c868:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c86c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c870:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c874:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c878:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c87c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c880:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ca9c <turn45outR+0x3cc>
 800c884:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	eeb0 2a47 	vmov.f32	s4, s14
 800c88e:	eef0 1a45 	vmov.f32	s3, s10
 800c892:	eeb0 1a65 	vmov.f32	s2, s11
 800c896:	eef0 0a46 	vmov.f32	s1, s12
 800c89a:	eeb0 0a66 	vmov.f32	s0, s13
 800c89e:	f7f6 fc01 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c8a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d10c      	bne.n	800c8c4 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c8aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c8b2:	eeb0 1a47 	vmov.f32	s2, s14
 800c8b6:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800caa8 <turn45outR+0x3d8>
 800c8ba:	eeb0 0a67 	vmov.f32	s0, s15
 800c8be:	f7f7 fb67 	bl	8003f90 <mollifier_slalom_table>
 800c8c2:	e015      	b.n	800c8f0 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c8c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c8cc:	eef1 7a67 	vneg.f32	s15, s15
 800c8d0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c8d4:	eef0 2a66 	vmov.f32	s5, s13
 800c8d8:	eeb0 2a67 	vmov.f32	s4, s15
 800c8dc:	eddf 1a70 	vldr	s3, [pc, #448]	; 800caa0 <turn45outR+0x3d0>
 800c8e0:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800caa0 <turn45outR+0x3d0>
 800c8e4:	eddf 0a70 	vldr	s1, [pc, #448]	; 800caa8 <turn45outR+0x3d8>
 800c8e8:	eeb0 0a47 	vmov.f32	s0, s14
 800c8ec:	f7f7 fa00 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c8f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c8fc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800caac <turn45outR+0x3dc>
 800c900:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c904:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c908:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c90c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c910:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c914:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c918:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c91c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c920:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ca9c <turn45outR+0x3cc>
 800c924:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	eeb0 2a47 	vmov.f32	s4, s14
 800c92e:	eef0 1a65 	vmov.f32	s3, s11
 800c932:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800caa0 <turn45outR+0x3d0>
 800c936:	eef0 0a46 	vmov.f32	s1, s12
 800c93a:	eeb0 0a66 	vmov.f32	s0, s13
 800c93e:	f7f6 fbb1 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c942:	4b55      	ldr	r3, [pc, #340]	; (800ca98 <turn45outR+0x3c8>)
 800c944:	2200      	movs	r2, #0
 800c946:	701a      	strb	r2, [r3, #0]
}
 800c948:	e09c      	b.n	800ca84 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c94a:	2300      	movs	r3, #0
 800c94c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c94e:	2300      	movs	r3, #0
 800c950:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c952:	2303      	movs	r3, #3
 800c954:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c956:	2300      	movs	r3, #0
 800c958:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c95a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c95e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c962:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c966:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c96a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c96e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c972:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c976:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c97a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c97e:	eddf 4a47 	vldr	s9, [pc, #284]	; 800ca9c <turn45outR+0x3cc>
 800c982:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	eeb0 2a47 	vmov.f32	s4, s14
 800c98c:	eef0 1a45 	vmov.f32	s3, s10
 800c990:	eeb0 1a65 	vmov.f32	s2, s11
 800c994:	eef0 0a46 	vmov.f32	s1, s12
 800c998:	eeb0 0a66 	vmov.f32	s0, s13
 800c99c:	f7f6 fb82 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c9a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d10c      	bne.n	800c9c2 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c9a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9b0:	eeb0 1a47 	vmov.f32	s2, s14
 800c9b4:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800caa8 <turn45outR+0x3d8>
 800c9b8:	eeb0 0a67 	vmov.f32	s0, s15
 800c9bc:	f7f7 fae8 	bl	8003f90 <mollifier_slalom_table>
 800c9c0:	e015      	b.n	800c9ee <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c9c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c9ca:	eef1 7a67 	vneg.f32	s15, s15
 800c9ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c9d2:	eef0 2a66 	vmov.f32	s5, s13
 800c9d6:	eeb0 2a67 	vmov.f32	s4, s15
 800c9da:	eddf 1a31 	vldr	s3, [pc, #196]	; 800caa0 <turn45outR+0x3d0>
 800c9de:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800caa0 <turn45outR+0x3d0>
 800c9e2:	eddf 0a31 	vldr	s1, [pc, #196]	; 800caa8 <turn45outR+0x3d8>
 800c9e6:	eeb0 0a47 	vmov.f32	s0, s14
 800c9ea:	f7f7 f981 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c9f6:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c9fa:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c9fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca0a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca16:	eef0 7ae7 	vabs.f32	s15, s15
 800ca1a:	ee17 0a90 	vmov	r0, s15
 800ca1e:	f7f3 fdbb 	bl	8000598 <__aeabi_f2d>
 800ca22:	f04f 0200 	mov.w	r2, #0
 800ca26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca2a:	f7f3 ff37 	bl	800089c <__aeabi_ddiv>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	4614      	mov	r4, r2
 800ca34:	461d      	mov	r5, r3
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7f3 fdad 	bl	8000598 <__aeabi_f2d>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4620      	mov	r0, r4
 800ca44:	4629      	mov	r1, r5
 800ca46:	f7f3 ff29 	bl	800089c <__aeabi_ddiv>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4610      	mov	r0, r2
 800ca50:	4619      	mov	r1, r3
 800ca52:	f04f 0200 	mov.w	r2, #0
 800ca56:	4b16      	ldr	r3, [pc, #88]	; (800cab0 <turn45outR+0x3e0>)
 800ca58:	f7f3 fc40 	bl	80002dc <__adddf3>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ca60:	4610      	mov	r0, r2
 800ca62:	4619      	mov	r1, r3
 800ca64:	f7f4 f8c8 	bl	8000bf8 <__aeabi_d2f>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	ee02 3a10 	vmov	s4, r3
 800ca70:	edd7 1a01 	vldr	s3, [r7, #4]
 800ca74:	ed97 1a01 	vldr	s2, [r7, #4]
 800ca78:	eef0 0a68 	vmov.f32	s1, s17
 800ca7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ca80:	f7f6 fb10 	bl	80030a4 <straight_table2>
}
 800ca84:	bf00      	nop
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	ecbd 8b02 	vpop	{d8}
 800ca8e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ca92:	b004      	add	sp, #16
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	20000808 	.word	0x20000808
 800ca9c:	42340000 	.word	0x42340000
 800caa0:	00000000 	.word	0x00000000
 800caa4:	42c4477b 	.word	0x42c4477b
 800caa8:	c2340000 	.word	0xc2340000
 800caac:	42b40000 	.word	0x42b40000
 800cab0:	408f4000 	.word	0x408f4000

0800cab4 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cab4:	b084      	sub	sp, #16
 800cab6:	b5b0      	push	{r4, r5, r7, lr}
 800cab8:	ed2d 8b02 	vpush	{d8}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cac8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cacc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	f040 80a3 	bne.w	800cc1c <turn45outL+0x168>
			highspeed_mode = 1;
 800cad6:	4be5      	ldr	r3, [pc, #916]	; (800ce6c <turn45outL+0x3b8>)
 800cad8:	2201      	movs	r2, #1
 800cada:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cadc:	2300      	movs	r3, #0
 800cade:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cae8:	2300      	movs	r3, #0
 800caea:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800caec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800caf0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800caf4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800caf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cafc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb00:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cb04:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cb08:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800ce70 <turn45outL+0x3bc>
 800cb0c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	eeb0 2a47 	vmov.f32	s4, s14
 800cb16:	eef0 1a46 	vmov.f32	s3, s12
 800cb1a:	eeb0 1a66 	vmov.f32	s2, s13
 800cb1e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800ce74 <turn45outL+0x3c0>
 800cb22:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800ce78 <turn45outL+0x3c4>
 800cb26:	f7f6 fabd 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800cb2e:	2304      	movs	r3, #4
 800cb30:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb32:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cb36:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb3a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb3e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb4e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb52:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb56:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800ce70 <turn45outL+0x3bc>
 800cb5a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	eeb0 2a47 	vmov.f32	s4, s14
 800cb64:	eef0 1a45 	vmov.f32	s3, s10
 800cb68:	eeb0 1a65 	vmov.f32	s2, s11
 800cb6c:	eef0 0a46 	vmov.f32	s1, s12
 800cb70:	eeb0 0a66 	vmov.f32	s0, s13
 800cb74:	f7f6 fa96 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800cb78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d10c      	bne.n	800cb9a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cb80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb84:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb88:	eeb0 1a47 	vmov.f32	s2, s14
 800cb8c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800ce70 <turn45outL+0x3bc>
 800cb90:	eeb0 0a67 	vmov.f32	s0, s15
 800cb94:	f7f7 f9fc 	bl	8003f90 <mollifier_slalom_table>
 800cb98:	e013      	b.n	800cbc2 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cb9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb9e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cba2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cba6:	eef0 2a66 	vmov.f32	s5, s13
 800cbaa:	eeb0 2a47 	vmov.f32	s4, s14
 800cbae:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800ce74 <turn45outL+0x3c0>
 800cbb2:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800ce74 <turn45outL+0x3c0>
 800cbb6:	eddf 0aae 	vldr	s1, [pc, #696]	; 800ce70 <turn45outL+0x3bc>
 800cbba:	eeb0 0a67 	vmov.f32	s0, s15
 800cbbe:	f7f7 f897 	bl	8003cf0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cbca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cbce:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800ce7c <turn45outL+0x3c8>
 800cbd2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cbd6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cbda:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cbde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cbe2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbea:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cbee:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cbf2:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800ce70 <turn45outL+0x3bc>
 800cbf6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	eeb0 2a47 	vmov.f32	s4, s14
 800cc00:	eef0 1a65 	vmov.f32	s3, s11
 800cc04:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800ce74 <turn45outL+0x3c0>
 800cc08:	eef0 0a46 	vmov.f32	s1, s12
 800cc0c:	eeb0 0a66 	vmov.f32	s0, s13
 800cc10:	f7f6 fa48 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800cc14:	4b95      	ldr	r3, [pc, #596]	; (800ce6c <turn45outL+0x3b8>)
 800cc16:	2200      	movs	r2, #0
 800cc18:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cc1a:	e11e      	b.n	800ce5a <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800cc1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d97f      	bls.n	800cd24 <turn45outL+0x270>
		highspeed_mode = 1;
 800cc24:	4b91      	ldr	r3, [pc, #580]	; (800ce6c <turn45outL+0x3b8>)
 800cc26:	2201      	movs	r2, #1
 800cc28:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cc32:	2304      	movs	r3, #4
 800cc34:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc3a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc3e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc42:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cc46:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc56:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cc5a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc5e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ce70 <turn45outL+0x3bc>
 800cc62:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	eeb0 2a47 	vmov.f32	s4, s14
 800cc6c:	eef0 1a45 	vmov.f32	s3, s10
 800cc70:	eeb0 1a65 	vmov.f32	s2, s11
 800cc74:	eef0 0a46 	vmov.f32	s1, s12
 800cc78:	eeb0 0a66 	vmov.f32	s0, s13
 800cc7c:	f7f6 fa12 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cc80:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d10c      	bne.n	800cca2 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cc88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc8c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cc90:	eeb0 1a47 	vmov.f32	s2, s14
 800cc94:	eddf 0a76 	vldr	s1, [pc, #472]	; 800ce70 <turn45outL+0x3bc>
 800cc98:	eeb0 0a67 	vmov.f32	s0, s15
 800cc9c:	f7f7 f978 	bl	8003f90 <mollifier_slalom_table>
 800cca0:	e013      	b.n	800ccca <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cca2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cca6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccaa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ccae:	eef0 2a66 	vmov.f32	s5, s13
 800ccb2:	eeb0 2a47 	vmov.f32	s4, s14
 800ccb6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ce74 <turn45outL+0x3c0>
 800ccba:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ce74 <turn45outL+0x3c0>
 800ccbe:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800ce70 <turn45outL+0x3bc>
 800ccc2:	eeb0 0a67 	vmov.f32	s0, s15
 800ccc6:	f7f7 f813 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ccd2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ccd6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ce7c <turn45outL+0x3c8>
 800ccda:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ccde:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cce2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cce6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccf2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ccf6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ccfa:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ce70 <turn45outL+0x3bc>
 800ccfe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	eeb0 2a47 	vmov.f32	s4, s14
 800cd08:	eef0 1a65 	vmov.f32	s3, s11
 800cd0c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ce74 <turn45outL+0x3c0>
 800cd10:	eef0 0a46 	vmov.f32	s1, s12
 800cd14:	eeb0 0a66 	vmov.f32	s0, s13
 800cd18:	f7f6 f9c4 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800cd1c:	4b53      	ldr	r3, [pc, #332]	; (800ce6c <turn45outL+0x3b8>)
 800cd1e:	2200      	movs	r2, #0
 800cd20:	701a      	strb	r2, [r3, #0]
}
 800cd22:	e09a      	b.n	800ce5a <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cd24:	2300      	movs	r3, #0
 800cd26:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cd2c:	2304      	movs	r3, #4
 800cd2e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd34:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cd38:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd3c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cd40:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd50:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cd54:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd58:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ce70 <turn45outL+0x3bc>
 800cd5c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	eeb0 2a47 	vmov.f32	s4, s14
 800cd66:	eef0 1a45 	vmov.f32	s3, s10
 800cd6a:	eeb0 1a65 	vmov.f32	s2, s11
 800cd6e:	eef0 0a46 	vmov.f32	s1, s12
 800cd72:	eeb0 0a66 	vmov.f32	s0, s13
 800cd76:	f7f6 f995 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cd7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d10c      	bne.n	800cd9c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cd82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cd8a:	eeb0 1a47 	vmov.f32	s2, s14
 800cd8e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800ce70 <turn45outL+0x3bc>
 800cd92:	eeb0 0a67 	vmov.f32	s0, s15
 800cd96:	f7f7 f8fb 	bl	8003f90 <mollifier_slalom_table>
 800cd9a:	e013      	b.n	800cdc4 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cd9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cda0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cda4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cda8:	eef0 2a66 	vmov.f32	s5, s13
 800cdac:	eeb0 2a47 	vmov.f32	s4, s14
 800cdb0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ce74 <turn45outL+0x3c0>
 800cdb4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ce74 <turn45outL+0x3c0>
 800cdb8:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800ce70 <turn45outL+0x3bc>
 800cdbc:	eeb0 0a67 	vmov.f32	s0, s15
 800cdc0:	f7f6 ff96 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cdcc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cdd0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cdd4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cde0:	edd7 7a01 	vldr	s15, [r7, #4]
 800cde4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cde8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdec:	eef0 7ae7 	vabs.f32	s15, s15
 800cdf0:	ee17 0a90 	vmov	r0, s15
 800cdf4:	f7f3 fbd0 	bl	8000598 <__aeabi_f2d>
 800cdf8:	f04f 0200 	mov.w	r2, #0
 800cdfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce00:	f7f3 fd4c 	bl	800089c <__aeabi_ddiv>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	4614      	mov	r4, r2
 800ce0a:	461d      	mov	r5, r3
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7f3 fbc2 	bl	8000598 <__aeabi_f2d>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	4620      	mov	r0, r4
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	f7f3 fd3e 	bl	800089c <__aeabi_ddiv>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4610      	mov	r0, r2
 800ce26:	4619      	mov	r1, r3
 800ce28:	f04f 0200 	mov.w	r2, #0
 800ce2c:	4b14      	ldr	r3, [pc, #80]	; (800ce80 <turn45outL+0x3cc>)
 800ce2e:	f7f3 fa55 	bl	80002dc <__adddf3>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ce36:	4610      	mov	r0, r2
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f7f3 fedd 	bl	8000bf8 <__aeabi_d2f>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	ee02 3a10 	vmov	s4, r3
 800ce46:	edd7 1a01 	vldr	s3, [r7, #4]
 800ce4a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ce4e:	eef0 0a68 	vmov.f32	s1, s17
 800ce52:	eeb0 0a48 	vmov.f32	s0, s16
 800ce56:	f7f6 f925 	bl	80030a4 <straight_table2>
}
 800ce5a:	bf00      	nop
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	ecbd 8b02 	vpop	{d8}
 800ce64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ce68:	b004      	add	sp, #16
 800ce6a:	4770      	bx	lr
 800ce6c:	20000808 	.word	0x20000808
 800ce70:	42340000 	.word	0x42340000
 800ce74:	00000000 	.word	0x00000000
 800ce78:	42c4477b 	.word	0x42c4477b
 800ce7c:	42b40000 	.word	0x42b40000
 800ce80:	408f4000 	.word	0x408f4000

0800ce84 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800ce84:	b084      	sub	sp, #16
 800ce86:	b5b0      	push	{r4, r5, r7, lr}
 800ce88:	ed2d 8b02 	vpush	{d8}
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ce94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ce98:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ce9c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	f040 80a5 	bne.w	800cff0 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cea6:	4be9      	ldr	r3, [pc, #932]	; (800d24c <turn135outR+0x3c8>)
 800cea8:	2201      	movs	r2, #1
 800ceaa:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cebc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cec0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cec4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cec8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ced0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ced4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800ced8:	eddf 5add 	vldr	s11, [pc, #884]	; 800d250 <turn135outR+0x3cc>
 800cedc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	eeb0 2a47 	vmov.f32	s4, s14
 800cee6:	eef0 1a46 	vmov.f32	s3, s12
 800ceea:	eeb0 1a66 	vmov.f32	s2, s13
 800ceee:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800d254 <turn135outR+0x3d0>
 800cef2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d258 <turn135outR+0x3d4>
 800cef6:	f7f6 f8d5 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800cefe:	2303      	movs	r3, #3
 800cf00:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf02:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cf06:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf0a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cf0e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf1e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cf22:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf26:	eddf 4aca 	vldr	s9, [pc, #808]	; 800d250 <turn135outR+0x3cc>
 800cf2a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	eeb0 2a47 	vmov.f32	s4, s14
 800cf34:	eef0 1a45 	vmov.f32	s3, s10
 800cf38:	eeb0 1a65 	vmov.f32	s2, s11
 800cf3c:	eef0 0a46 	vmov.f32	s1, s12
 800cf40:	eeb0 0a66 	vmov.f32	s0, s13
 800cf44:	f7f6 f8ae 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800cf48:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d10c      	bne.n	800cf6a <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cf50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf58:	eeb0 1a47 	vmov.f32	s2, s14
 800cf5c:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d25c <turn135outR+0x3d8>
 800cf60:	eeb0 0a67 	vmov.f32	s0, s15
 800cf64:	f7f7 f814 	bl	8003f90 <mollifier_slalom_table>
 800cf68:	e015      	b.n	800cf96 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cf6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cf72:	eef1 7a67 	vneg.f32	s15, s15
 800cf76:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf7a:	eef0 2a66 	vmov.f32	s5, s13
 800cf7e:	eeb0 2a67 	vmov.f32	s4, s15
 800cf82:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800d254 <turn135outR+0x3d0>
 800cf86:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800d254 <turn135outR+0x3d0>
 800cf8a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d25c <turn135outR+0x3d8>
 800cf8e:	eeb0 0a47 	vmov.f32	s0, s14
 800cf92:	f7f6 fead 	bl	8003cf0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cf9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cfa2:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d260 <turn135outR+0x3dc>
 800cfa6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cfaa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cfae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cfb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cfba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfbe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cfc2:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cfc6:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800d250 <turn135outR+0x3cc>
 800cfca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	eeb0 2a47 	vmov.f32	s4, s14
 800cfd4:	eef0 1a65 	vmov.f32	s3, s11
 800cfd8:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800d254 <turn135outR+0x3d0>
 800cfdc:	eef0 0a46 	vmov.f32	s1, s12
 800cfe0:	eeb0 0a66 	vmov.f32	s0, s13
 800cfe4:	f7f6 f85e 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800cfe8:	4b98      	ldr	r3, [pc, #608]	; (800d24c <turn135outR+0x3c8>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cfee:	e123      	b.n	800d238 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cff0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	f240 8082 	bls.w	800d0fe <turn135outR+0x27a>
		highspeed_mode = 1;
 800cffa:	4b94      	ldr	r3, [pc, #592]	; (800d24c <turn135outR+0x3c8>)
 800cffc:	2201      	movs	r2, #1
 800cffe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d000:	2300      	movs	r3, #0
 800d002:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d004:	2300      	movs	r3, #0
 800d006:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d008:	2303      	movs	r3, #3
 800d00a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d010:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d014:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d018:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d01c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d020:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d024:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d02c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d030:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d034:	eddf 4a86 	vldr	s9, [pc, #536]	; 800d250 <turn135outR+0x3cc>
 800d038:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	eeb0 2a47 	vmov.f32	s4, s14
 800d042:	eef0 1a45 	vmov.f32	s3, s10
 800d046:	eeb0 1a65 	vmov.f32	s2, s11
 800d04a:	eef0 0a46 	vmov.f32	s1, s12
 800d04e:	eeb0 0a66 	vmov.f32	s0, s13
 800d052:	f7f6 f827 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d056:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d10c      	bne.n	800d078 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d05e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d062:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d066:	eeb0 1a47 	vmov.f32	s2, s14
 800d06a:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d25c <turn135outR+0x3d8>
 800d06e:	eeb0 0a67 	vmov.f32	s0, s15
 800d072:	f7f6 ff8d 	bl	8003f90 <mollifier_slalom_table>
 800d076:	e015      	b.n	800d0a4 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d078:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d07c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d080:	eef1 7a67 	vneg.f32	s15, s15
 800d084:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d088:	eef0 2a66 	vmov.f32	s5, s13
 800d08c:	eeb0 2a67 	vmov.f32	s4, s15
 800d090:	eddf 1a70 	vldr	s3, [pc, #448]	; 800d254 <turn135outR+0x3d0>
 800d094:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800d254 <turn135outR+0x3d0>
 800d098:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d25c <turn135outR+0x3d8>
 800d09c:	eeb0 0a47 	vmov.f32	s0, s14
 800d0a0:	f7f6 fe26 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d0ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d0b0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d260 <turn135outR+0x3dc>
 800d0b4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d0b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d0bc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0cc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d0d0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d0d4:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800d250 <turn135outR+0x3cc>
 800d0d8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	eeb0 2a47 	vmov.f32	s4, s14
 800d0e2:	eef0 1a65 	vmov.f32	s3, s11
 800d0e6:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800d254 <turn135outR+0x3d0>
 800d0ea:	eef0 0a46 	vmov.f32	s1, s12
 800d0ee:	eeb0 0a66 	vmov.f32	s0, s13
 800d0f2:	f7f5 ffd7 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d0f6:	4b55      	ldr	r3, [pc, #340]	; (800d24c <turn135outR+0x3c8>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	701a      	strb	r2, [r3, #0]
}
 800d0fc:	e09c      	b.n	800d238 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d0fe:	2300      	movs	r3, #0
 800d100:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d102:	2300      	movs	r3, #0
 800d104:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d106:	2303      	movs	r3, #3
 800d108:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d10e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d112:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d116:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d11a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d11e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d122:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d12a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d12e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d132:	eddf 4a47 	vldr	s9, [pc, #284]	; 800d250 <turn135outR+0x3cc>
 800d136:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	eeb0 2a47 	vmov.f32	s4, s14
 800d140:	eef0 1a45 	vmov.f32	s3, s10
 800d144:	eeb0 1a65 	vmov.f32	s2, s11
 800d148:	eef0 0a46 	vmov.f32	s1, s12
 800d14c:	eeb0 0a66 	vmov.f32	s0, s13
 800d150:	f7f5 ffa8 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d154:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d10c      	bne.n	800d176 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d15c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d160:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d164:	eeb0 1a47 	vmov.f32	s2, s14
 800d168:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d25c <turn135outR+0x3d8>
 800d16c:	eeb0 0a67 	vmov.f32	s0, s15
 800d170:	f7f6 ff0e 	bl	8003f90 <mollifier_slalom_table>
 800d174:	e015      	b.n	800d1a2 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d176:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d17a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d17e:	eef1 7a67 	vneg.f32	s15, s15
 800d182:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d186:	eef0 2a66 	vmov.f32	s5, s13
 800d18a:	eeb0 2a67 	vmov.f32	s4, s15
 800d18e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800d254 <turn135outR+0x3d0>
 800d192:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800d254 <turn135outR+0x3d0>
 800d196:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d25c <turn135outR+0x3d8>
 800d19a:	eeb0 0a47 	vmov.f32	s0, s14
 800d19e:	f7f6 fda7 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d1aa:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d1ae:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d1b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1be:	edd7 7a01 	vldr	s15, [r7, #4]
 800d1c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d1c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1ca:	eef0 7ae7 	vabs.f32	s15, s15
 800d1ce:	ee17 0a90 	vmov	r0, s15
 800d1d2:	f7f3 f9e1 	bl	8000598 <__aeabi_f2d>
 800d1d6:	f04f 0200 	mov.w	r2, #0
 800d1da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d1de:	f7f3 fb5d 	bl	800089c <__aeabi_ddiv>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4614      	mov	r4, r2
 800d1e8:	461d      	mov	r5, r3
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7f3 f9d3 	bl	8000598 <__aeabi_f2d>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	f7f3 fb4f 	bl	800089c <__aeabi_ddiv>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4610      	mov	r0, r2
 800d204:	4619      	mov	r1, r3
 800d206:	f04f 0200 	mov.w	r2, #0
 800d20a:	4b16      	ldr	r3, [pc, #88]	; (800d264 <turn135outR+0x3e0>)
 800d20c:	f7f3 f866 	bl	80002dc <__adddf3>
 800d210:	4602      	mov	r2, r0
 800d212:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d214:	4610      	mov	r0, r2
 800d216:	4619      	mov	r1, r3
 800d218:	f7f3 fcee 	bl	8000bf8 <__aeabi_d2f>
 800d21c:	4603      	mov	r3, r0
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	ee02 3a10 	vmov	s4, r3
 800d224:	edd7 1a01 	vldr	s3, [r7, #4]
 800d228:	ed97 1a01 	vldr	s2, [r7, #4]
 800d22c:	eef0 0a68 	vmov.f32	s1, s17
 800d230:	eeb0 0a48 	vmov.f32	s0, s16
 800d234:	f7f5 ff36 	bl	80030a4 <straight_table2>
}
 800d238:	bf00      	nop
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	ecbd 8b02 	vpop	{d8}
 800d242:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d246:	b004      	add	sp, #16
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	20000808 	.word	0x20000808
 800d250:	42340000 	.word	0x42340000
 800d254:	00000000 	.word	0x00000000
 800d258:	42c4477b 	.word	0x42c4477b
 800d25c:	c3070000 	.word	0xc3070000
 800d260:	42b40000 	.word	0x42b40000
 800d264:	408f4000 	.word	0x408f4000

0800d268 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d268:	b084      	sub	sp, #16
 800d26a:	b5b0      	push	{r4, r5, r7, lr}
 800d26c:	ed2d 8b02 	vpush	{d8}
 800d270:	b084      	sub	sp, #16
 800d272:	af00      	add	r7, sp, #0
 800d274:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d27c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d280:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d284:	2b01      	cmp	r3, #1
 800d286:	f040 80a3 	bne.w	800d3d0 <turn135outL+0x168>
		highspeed_mode = 1;
 800d28a:	4be5      	ldr	r3, [pc, #916]	; (800d620 <turn135outL+0x3b8>)
 800d28c:	2201      	movs	r2, #1
 800d28e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d290:	2300      	movs	r3, #0
 800d292:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d294:	2300      	movs	r3, #0
 800d296:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d2a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d2a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d2b8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d2bc:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d624 <turn135outL+0x3bc>
 800d2c0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	eeb0 2a47 	vmov.f32	s4, s14
 800d2ca:	eef0 1a46 	vmov.f32	s3, s12
 800d2ce:	eeb0 1a66 	vmov.f32	s2, s13
 800d2d2:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d628 <turn135outL+0x3c0>
 800d2d6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d62c <turn135outL+0x3c4>
 800d2da:	f7f5 fee3 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d2e2:	2304      	movs	r3, #4
 800d2e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d2ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d2ee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d2f2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d302:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d306:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d30a:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d624 <turn135outL+0x3bc>
 800d30e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	eeb0 2a47 	vmov.f32	s4, s14
 800d318:	eef0 1a45 	vmov.f32	s3, s10
 800d31c:	eeb0 1a65 	vmov.f32	s2, s11
 800d320:	eef0 0a46 	vmov.f32	s1, s12
 800d324:	eeb0 0a66 	vmov.f32	s0, s13
 800d328:	f7f5 febc 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d32c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d330:	2b01      	cmp	r3, #1
 800d332:	d10c      	bne.n	800d34e <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d334:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d338:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d33c:	eeb0 1a47 	vmov.f32	s2, s14
 800d340:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d630 <turn135outL+0x3c8>
 800d344:	eeb0 0a67 	vmov.f32	s0, s15
 800d348:	f7f6 fe22 	bl	8003f90 <mollifier_slalom_table>
 800d34c:	e013      	b.n	800d376 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d34e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d352:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d356:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d35a:	eef0 2a66 	vmov.f32	s5, s13
 800d35e:	eeb0 2a47 	vmov.f32	s4, s14
 800d362:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d628 <turn135outL+0x3c0>
 800d366:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d628 <turn135outL+0x3c0>
 800d36a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d630 <turn135outL+0x3c8>
 800d36e:	eeb0 0a67 	vmov.f32	s0, s15
 800d372:	f7f6 fcbd 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d376:	2300      	movs	r3, #0
 800d378:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d37e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d382:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d634 <turn135outL+0x3cc>
 800d386:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d38a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d38e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d392:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d396:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d39a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d39e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d3a2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d3a6:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d624 <turn135outL+0x3bc>
 800d3aa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	eeb0 2a47 	vmov.f32	s4, s14
 800d3b4:	eef0 1a65 	vmov.f32	s3, s11
 800d3b8:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d628 <turn135outL+0x3c0>
 800d3bc:	eef0 0a46 	vmov.f32	s1, s12
 800d3c0:	eeb0 0a66 	vmov.f32	s0, s13
 800d3c4:	f7f5 fe6e 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d3c8:	4b95      	ldr	r3, [pc, #596]	; (800d620 <turn135outL+0x3b8>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d3ce:	e11e      	b.n	800d60e <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d3d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d97f      	bls.n	800d4d8 <turn135outL+0x270>
		highspeed_mode = 1;
 800d3d8:	4b91      	ldr	r3, [pc, #580]	; (800d620 <turn135outL+0x3b8>)
 800d3da:	2201      	movs	r2, #1
 800d3dc:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d3e6:	2304      	movs	r3, #4
 800d3e8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3ee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d3f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d3f6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d3fa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d402:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d40a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d40e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d412:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d624 <turn135outL+0x3bc>
 800d416:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	eeb0 2a47 	vmov.f32	s4, s14
 800d420:	eef0 1a45 	vmov.f32	s3, s10
 800d424:	eeb0 1a65 	vmov.f32	s2, s11
 800d428:	eef0 0a46 	vmov.f32	s1, s12
 800d42c:	eeb0 0a66 	vmov.f32	s0, s13
 800d430:	f7f5 fe38 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d434:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d10c      	bne.n	800d456 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d43c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d440:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d444:	eeb0 1a47 	vmov.f32	s2, s14
 800d448:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d630 <turn135outL+0x3c8>
 800d44c:	eeb0 0a67 	vmov.f32	s0, s15
 800d450:	f7f6 fd9e 	bl	8003f90 <mollifier_slalom_table>
 800d454:	e013      	b.n	800d47e <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d456:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d45a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d45e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d462:	eef0 2a66 	vmov.f32	s5, s13
 800d466:	eeb0 2a47 	vmov.f32	s4, s14
 800d46a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d628 <turn135outL+0x3c0>
 800d46e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d628 <turn135outL+0x3c0>
 800d472:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d630 <turn135outL+0x3c8>
 800d476:	eeb0 0a67 	vmov.f32	s0, s15
 800d47a:	f7f6 fc39 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800d47e:	2300      	movs	r3, #0
 800d480:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d482:	2300      	movs	r3, #0
 800d484:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d486:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d48a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d634 <turn135outL+0x3cc>
 800d48e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d492:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d496:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d49a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d49e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4a6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d4aa:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4ae:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d624 <turn135outL+0x3bc>
 800d4b2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	eeb0 2a47 	vmov.f32	s4, s14
 800d4bc:	eef0 1a65 	vmov.f32	s3, s11
 800d4c0:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d628 <turn135outL+0x3c0>
 800d4c4:	eef0 0a46 	vmov.f32	s1, s12
 800d4c8:	eeb0 0a66 	vmov.f32	s0, s13
 800d4cc:	f7f5 fdea 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d4d0:	4b53      	ldr	r3, [pc, #332]	; (800d620 <turn135outL+0x3b8>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	701a      	strb	r2, [r3, #0]
}
 800d4d6:	e09a      	b.n	800d60e <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d4e0:	2304      	movs	r3, #4
 800d4e2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d4ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d4f0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d4f4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d500:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d504:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d508:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d50c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d624 <turn135outL+0x3bc>
 800d510:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	eeb0 2a47 	vmov.f32	s4, s14
 800d51a:	eef0 1a45 	vmov.f32	s3, s10
 800d51e:	eeb0 1a65 	vmov.f32	s2, s11
 800d522:	eef0 0a46 	vmov.f32	s1, s12
 800d526:	eeb0 0a66 	vmov.f32	s0, s13
 800d52a:	f7f5 fdbb 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d52e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d532:	2b01      	cmp	r3, #1
 800d534:	d10c      	bne.n	800d550 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d536:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d53a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d53e:	eeb0 1a47 	vmov.f32	s2, s14
 800d542:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d630 <turn135outL+0x3c8>
 800d546:	eeb0 0a67 	vmov.f32	s0, s15
 800d54a:	f7f6 fd21 	bl	8003f90 <mollifier_slalom_table>
 800d54e:	e013      	b.n	800d578 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d550:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d554:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d558:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d55c:	eef0 2a66 	vmov.f32	s5, s13
 800d560:	eeb0 2a47 	vmov.f32	s4, s14
 800d564:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d628 <turn135outL+0x3c0>
 800d568:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d628 <turn135outL+0x3c0>
 800d56c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d630 <turn135outL+0x3c8>
 800d570:	eeb0 0a67 	vmov.f32	s0, s15
 800d574:	f7f6 fbbc 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d578:	2301      	movs	r3, #1
 800d57a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d580:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d584:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d588:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d58c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d590:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d594:	edd7 7a01 	vldr	s15, [r7, #4]
 800d598:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d59c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5a0:	eef0 7ae7 	vabs.f32	s15, s15
 800d5a4:	ee17 0a90 	vmov	r0, s15
 800d5a8:	f7f2 fff6 	bl	8000598 <__aeabi_f2d>
 800d5ac:	f04f 0200 	mov.w	r2, #0
 800d5b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5b4:	f7f3 f972 	bl	800089c <__aeabi_ddiv>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4614      	mov	r4, r2
 800d5be:	461d      	mov	r5, r3
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7f2 ffe8 	bl	8000598 <__aeabi_f2d>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7f3 f964 	bl	800089c <__aeabi_ddiv>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	4610      	mov	r0, r2
 800d5da:	4619      	mov	r1, r3
 800d5dc:	f04f 0200 	mov.w	r2, #0
 800d5e0:	4b15      	ldr	r3, [pc, #84]	; (800d638 <turn135outL+0x3d0>)
 800d5e2:	f7f2 fe7b 	bl	80002dc <__adddf3>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	f7f3 fb03 	bl	8000bf8 <__aeabi_d2f>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	ee02 3a10 	vmov	s4, r3
 800d5fa:	edd7 1a01 	vldr	s3, [r7, #4]
 800d5fe:	ed97 1a01 	vldr	s2, [r7, #4]
 800d602:	eef0 0a68 	vmov.f32	s1, s17
 800d606:	eeb0 0a48 	vmov.f32	s0, s16
 800d60a:	f7f5 fd4b 	bl	80030a4 <straight_table2>
}
 800d60e:	bf00      	nop
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	ecbd 8b02 	vpop	{d8}
 800d618:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d61c:	b004      	add	sp, #16
 800d61e:	4770      	bx	lr
 800d620:	20000808 	.word	0x20000808
 800d624:	42340000 	.word	0x42340000
 800d628:	00000000 	.word	0x00000000
 800d62c:	42c4477b 	.word	0x42c4477b
 800d630:	43070000 	.word	0x43070000
 800d634:	42b40000 	.word	0x42b40000
 800d638:	408f4000 	.word	0x408f4000
 800d63c:	00000000 	.word	0x00000000

0800d640 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d640:	b084      	sub	sp, #16
 800d642:	b5b0      	push	{r4, r5, r7, lr}
 800d644:	ed2d 8b02 	vpush	{d8}
 800d648:	b084      	sub	sp, #16
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d654:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d658:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	f040 80af 	bne.w	800d7c0 <V90R+0x180>
			highspeed_mode = 1;
 800d662:	4bc1      	ldr	r3, [pc, #772]	; (800d968 <V90R+0x328>)
 800d664:	2201      	movs	r2, #1
 800d666:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d668:	2300      	movs	r3, #0
 800d66a:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d670:	2300      	movs	r3, #0
 800d672:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d674:	2300      	movs	r3, #0
 800d676:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d678:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d67c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d680:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d684:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d68c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d690:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d694:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d96c <V90R+0x32c>
 800d698:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	eeb0 2a47 	vmov.f32	s4, s14
 800d6a2:	eef0 1a46 	vmov.f32	s3, s12
 800d6a6:	eeb0 1a66 	vmov.f32	s2, s13
 800d6aa:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d974 <V90R+0x334>
 800d6ae:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d970 <V90R+0x330>
 800d6b2:	f7f5 fcf7 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6be:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d6c2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d6c6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d6ca:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6da:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d6de:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6e2:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d96c <V90R+0x32c>
 800d6e6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	eeb0 2a47 	vmov.f32	s4, s14
 800d6f0:	eef0 1a45 	vmov.f32	s3, s10
 800d6f4:	eeb0 1a65 	vmov.f32	s2, s11
 800d6f8:	eef0 0a46 	vmov.f32	s1, s12
 800d6fc:	eeb0 0a66 	vmov.f32	s0, s13
 800d700:	f7f5 fcd0 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800d704:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d10c      	bne.n	800d726 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d70c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d710:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d714:	eeb0 1a47 	vmov.f32	s2, s14
 800d718:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d978 <V90R+0x338>
 800d71c:	eeb0 0a67 	vmov.f32	s0, s15
 800d720:	f7f6 fc36 	bl	8003f90 <mollifier_slalom_table>
 800d724:	e015      	b.n	800d752 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d726:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d72a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d72e:	eef1 7a67 	vneg.f32	s15, s15
 800d732:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d736:	eef0 2a66 	vmov.f32	s5, s13
 800d73a:	eeb0 2a67 	vmov.f32	s4, s15
 800d73e:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d974 <V90R+0x334>
 800d742:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d974 <V90R+0x334>
 800d746:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d978 <V90R+0x338>
 800d74a:	eeb0 0a47 	vmov.f32	s0, s14
 800d74e:	f7f6 facf 	bl	8003cf0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d752:	2300      	movs	r3, #0
 800d754:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d756:	2300      	movs	r3, #0
 800d758:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f2 ff1b 	bl	8000598 <__aeabi_f2d>
 800d762:	a37f      	add	r3, pc, #508	; (adr r3, 800d960 <V90R+0x320>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	f7f2 fdb8 	bl	80002dc <__adddf3>
 800d76c:	4602      	mov	r2, r0
 800d76e:	460b      	mov	r3, r1
 800d770:	4610      	mov	r0, r2
 800d772:	4619      	mov	r1, r3
 800d774:	f7f3 fa40 	bl	8000bf8 <__aeabi_d2f>
 800d778:	4603      	mov	r3, r0
 800d77a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d77e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d782:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d786:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d78a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d78e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d792:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d796:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d96c <V90R+0x32c>
 800d79a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	eeb0 2a47 	vmov.f32	s4, s14
 800d7a4:	eef0 1a46 	vmov.f32	s3, s12
 800d7a8:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d974 <V90R+0x334>
 800d7ac:	eef0 0a66 	vmov.f32	s1, s13
 800d7b0:	ee00 3a10 	vmov	s0, r3
 800d7b4:	f7f5 fc76 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800d7b8:	4b6b      	ldr	r3, [pc, #428]	; (800d968 <V90R+0x328>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d7be:	e13e      	b.n	800da3e <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d7c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	f240 808c 	bls.w	800d8e2 <V90R+0x2a2>
		highspeed_mode = 1;
 800d7ca:	4b67      	ldr	r3, [pc, #412]	; (800d968 <V90R+0x328>)
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d7d8:	2303      	movs	r3, #3
 800d7da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d7e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d7e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d7e8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d7ec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d7f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7fc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d800:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d804:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d96c <V90R+0x32c>
 800d808:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	eeb0 2a47 	vmov.f32	s4, s14
 800d812:	eef0 1a45 	vmov.f32	s3, s10
 800d816:	eeb0 1a65 	vmov.f32	s2, s11
 800d81a:	eef0 0a46 	vmov.f32	s1, s12
 800d81e:	eeb0 0a66 	vmov.f32	s0, s13
 800d822:	f7f5 fc3f 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d826:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d10c      	bne.n	800d848 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d82e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d832:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d836:	eeb0 1a47 	vmov.f32	s2, s14
 800d83a:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d978 <V90R+0x338>
 800d83e:	eeb0 0a67 	vmov.f32	s0, s15
 800d842:	f7f6 fba5 	bl	8003f90 <mollifier_slalom_table>
 800d846:	e015      	b.n	800d874 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d848:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d84c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d850:	eef1 7a67 	vneg.f32	s15, s15
 800d854:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d858:	eef0 2a66 	vmov.f32	s5, s13
 800d85c:	eeb0 2a67 	vmov.f32	s4, s15
 800d860:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d974 <V90R+0x334>
 800d864:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d974 <V90R+0x334>
 800d868:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d978 <V90R+0x338>
 800d86c:	eeb0 0a47 	vmov.f32	s0, s14
 800d870:	f7f6 fa3e 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800d874:	2300      	movs	r3, #0
 800d876:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d878:	2300      	movs	r3, #0
 800d87a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	4618      	mov	r0, r3
 800d880:	f7f2 fe8a 	bl	8000598 <__aeabi_f2d>
 800d884:	a336      	add	r3, pc, #216	; (adr r3, 800d960 <V90R+0x320>)
 800d886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88a:	f7f2 fd27 	bl	80002dc <__adddf3>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4610      	mov	r0, r2
 800d894:	4619      	mov	r1, r3
 800d896:	f7f3 f9af 	bl	8000bf8 <__aeabi_d2f>
 800d89a:	4603      	mov	r3, r0
 800d89c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d8a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d8a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8b0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d8b4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d8b8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d96c <V90R+0x32c>
 800d8bc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	eeb0 2a47 	vmov.f32	s4, s14
 800d8c6:	eef0 1a46 	vmov.f32	s3, s12
 800d8ca:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d974 <V90R+0x334>
 800d8ce:	eef0 0a66 	vmov.f32	s1, s13
 800d8d2:	ee00 3a10 	vmov	s0, r3
 800d8d6:	f7f5 fbe5 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d8da:	4b23      	ldr	r3, [pc, #140]	; (800d968 <V90R+0x328>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	701a      	strb	r2, [r3, #0]
}
 800d8e0:	e0ad      	b.n	800da3e <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d8f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d8f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d8fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d8fe:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d902:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d906:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d90a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d90e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d912:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d916:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d96c <V90R+0x32c>
 800d91a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	eeb0 2a47 	vmov.f32	s4, s14
 800d924:	eef0 1a45 	vmov.f32	s3, s10
 800d928:	eeb0 1a65 	vmov.f32	s2, s11
 800d92c:	eef0 0a46 	vmov.f32	s1, s12
 800d930:	eeb0 0a66 	vmov.f32	s0, s13
 800d934:	f7f5 fbb6 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d938:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d11d      	bne.n	800d97c <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d940:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d944:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d948:	eeb0 1a47 	vmov.f32	s2, s14
 800d94c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d978 <V90R+0x338>
 800d950:	eeb0 0a67 	vmov.f32	s0, s15
 800d954:	f7f6 fb1c 	bl	8003f90 <mollifier_slalom_table>
 800d958:	e026      	b.n	800d9a8 <V90R+0x368>
 800d95a:	bf00      	nop
 800d95c:	f3af 8000 	nop.w
 800d960:	c022ec18 	.word	0xc022ec18
 800d964:	405fd1de 	.word	0x405fd1de
 800d968:	20000808 	.word	0x20000808
 800d96c:	42340000 	.word	0x42340000
 800d970:	42c4477b 	.word	0x42c4477b
 800d974:	00000000 	.word	0x00000000
 800d978:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d97c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d980:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d984:	eef1 7a67 	vneg.f32	s15, s15
 800d988:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d98c:	eef0 2a66 	vmov.f32	s5, s13
 800d990:	eeb0 2a67 	vmov.f32	s4, s15
 800d994:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d974 <V90R+0x334>
 800d998:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d974 <V90R+0x334>
 800d99c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d978 <V90R+0x338>
 800d9a0:	eeb0 0a47 	vmov.f32	s0, s14
 800d9a4:	f7f6 f9a4 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d9a8:	2303      	movs	r3, #3
 800d9aa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d9b0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d9b4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d9b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d9c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d9cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9d0:	eef0 7ae7 	vabs.f32	s15, s15
 800d9d4:	ee17 0a90 	vmov	r0, s15
 800d9d8:	f7f2 fdde 	bl	8000598 <__aeabi_f2d>
 800d9dc:	f04f 0200 	mov.w	r2, #0
 800d9e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9e4:	f7f2 ff5a 	bl	800089c <__aeabi_ddiv>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4614      	mov	r4, r2
 800d9ee:	461d      	mov	r5, r3
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f2 fdd0 	bl	8000598 <__aeabi_f2d>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	4629      	mov	r1, r5
 800da00:	f7f2 ff4c 	bl	800089c <__aeabi_ddiv>
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	4610      	mov	r0, r2
 800da0a:	4619      	mov	r1, r3
 800da0c:	f04f 0200 	mov.w	r2, #0
 800da10:	4b0f      	ldr	r3, [pc, #60]	; (800da50 <V90R+0x410>)
 800da12:	f7f2 fc63 	bl	80002dc <__adddf3>
 800da16:	4602      	mov	r2, r0
 800da18:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800da1a:	4610      	mov	r0, r2
 800da1c:	4619      	mov	r1, r3
 800da1e:	f7f3 f8eb 	bl	8000bf8 <__aeabi_d2f>
 800da22:	4603      	mov	r3, r0
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	ee02 3a10 	vmov	s4, r3
 800da2a:	edd7 1a01 	vldr	s3, [r7, #4]
 800da2e:	ed97 1a01 	vldr	s2, [r7, #4]
 800da32:	eef0 0a68 	vmov.f32	s1, s17
 800da36:	eeb0 0a48 	vmov.f32	s0, s16
 800da3a:	f7f5 fb33 	bl	80030a4 <straight_table2>
}
 800da3e:	bf00      	nop
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	ecbd 8b02 	vpop	{d8}
 800da48:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800da4c:	b004      	add	sp, #16
 800da4e:	4770      	bx	lr
 800da50:	408f4000 	.word	0x408f4000
 800da54:	00000000 	.word	0x00000000

0800da58 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800da58:	b084      	sub	sp, #16
 800da5a:	b5b0      	push	{r4, r5, r7, lr}
 800da5c:	ed2d 8b02 	vpush	{d8}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800da68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da6c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800da70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800da74:	2b01      	cmp	r3, #1
 800da76:	f040 80ad 	bne.w	800dbd4 <V90L+0x17c>
				highspeed_mode = 1;
 800da7a:	4bbf      	ldr	r3, [pc, #764]	; (800dd78 <V90L+0x320>)
 800da7c:	2201      	movs	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800da80:	2300      	movs	r3, #0
 800da82:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800da84:	2300      	movs	r3, #0
 800da86:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800da88:	2300      	movs	r3, #0
 800da8a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800da90:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da94:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daa4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800daa8:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800daac:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800dd7c <V90L+0x324>
 800dab0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	eeb0 2a47 	vmov.f32	s4, s14
 800daba:	eef0 1a46 	vmov.f32	s3, s12
 800dabe:	eeb0 1a66 	vmov.f32	s2, s13
 800dac2:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800dd84 <V90L+0x32c>
 800dac6:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800dd80 <V90L+0x328>
 800daca:	f7f5 faeb 	bl	80030a4 <straight_table2>
				wallmode.WallControlMode=0;
 800dace:	2300      	movs	r3, #0
 800dad0:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800dad2:	2304      	movs	r3, #4
 800dad4:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dad6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dada:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dade:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dae2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dae6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800daea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daf2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800daf6:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dafa:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800dd7c <V90L+0x324>
 800dafe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	eeb0 2a47 	vmov.f32	s4, s14
 800db08:	eef0 1a45 	vmov.f32	s3, s10
 800db0c:	eeb0 1a65 	vmov.f32	s2, s11
 800db10:	eef0 0a46 	vmov.f32	s1, s12
 800db14:	eeb0 0a66 	vmov.f32	s0, s13
 800db18:	f7f5 fac4 	bl	80030a4 <straight_table2>
				if(mollifier_mode == ON){
 800db1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800db20:	2b01      	cmp	r3, #1
 800db22:	d10c      	bne.n	800db3e <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800db24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db2c:	eeb0 1a47 	vmov.f32	s2, s14
 800db30:	eddf 0a95 	vldr	s1, [pc, #596]	; 800dd88 <V90L+0x330>
 800db34:	eeb0 0a67 	vmov.f32	s0, s15
 800db38:	f7f6 fa2a 	bl	8003f90 <mollifier_slalom_table>
 800db3c:	e013      	b.n	800db66 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800db3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db46:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db4a:	eef0 2a66 	vmov.f32	s5, s13
 800db4e:	eeb0 2a47 	vmov.f32	s4, s14
 800db52:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800dd84 <V90L+0x32c>
 800db56:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800dd84 <V90L+0x32c>
 800db5a:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800dd88 <V90L+0x330>
 800db5e:	eeb0 0a67 	vmov.f32	s0, s15
 800db62:	f7f6 f8c5 	bl	8003cf0 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800db66:	2300      	movs	r3, #0
 800db68:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	4618      	mov	r0, r3
 800db72:	f7f2 fd11 	bl	8000598 <__aeabi_f2d>
 800db76:	a37e      	add	r3, pc, #504	; (adr r3, 800dd70 <V90L+0x318>)
 800db78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7c:	f7f2 fbae 	bl	80002dc <__adddf3>
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	4610      	mov	r0, r2
 800db86:	4619      	mov	r1, r3
 800db88:	f7f3 f836 	bl	8000bf8 <__aeabi_d2f>
 800db8c:	4603      	mov	r3, r0
 800db8e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800db92:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800db96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dba2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dba6:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dbaa:	eddf 5a74 	vldr	s11, [pc, #464]	; 800dd7c <V90L+0x324>
 800dbae:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	eeb0 2a47 	vmov.f32	s4, s14
 800dbb8:	eef0 1a46 	vmov.f32	s3, s12
 800dbbc:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800dd84 <V90L+0x32c>
 800dbc0:	eef0 0a66 	vmov.f32	s1, s13
 800dbc4:	ee00 3a10 	vmov	s0, r3
 800dbc8:	f7f5 fa6c 	bl	80030a4 <straight_table2>
				highspeed_mode = 0;
 800dbcc:	4b6a      	ldr	r3, [pc, #424]	; (800dd78 <V90L+0x320>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800dbd2:	e13a      	b.n	800de4a <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800dbd4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	f240 808a 	bls.w	800dcf2 <V90L+0x29a>
		highspeed_mode = 1;
 800dbde:	4b66      	ldr	r3, [pc, #408]	; (800dd78 <V90L+0x320>)
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dbec:	2304      	movs	r3, #4
 800dbee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dbf4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dbf8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dbfc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dc00:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dc04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc10:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dc14:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dc18:	eddf 4a58 	vldr	s9, [pc, #352]	; 800dd7c <V90L+0x324>
 800dc1c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	eeb0 2a47 	vmov.f32	s4, s14
 800dc26:	eef0 1a45 	vmov.f32	s3, s10
 800dc2a:	eeb0 1a65 	vmov.f32	s2, s11
 800dc2e:	eef0 0a46 	vmov.f32	s1, s12
 800dc32:	eeb0 0a66 	vmov.f32	s0, s13
 800dc36:	f7f5 fa35 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800dc3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d10c      	bne.n	800dc5c <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800dc42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dc4a:	eeb0 1a47 	vmov.f32	s2, s14
 800dc4e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800dd88 <V90L+0x330>
 800dc52:	eeb0 0a67 	vmov.f32	s0, s15
 800dc56:	f7f6 f99b 	bl	8003f90 <mollifier_slalom_table>
 800dc5a:	e013      	b.n	800dc84 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dc5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc60:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dc64:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dc68:	eef0 2a66 	vmov.f32	s5, s13
 800dc6c:	eeb0 2a47 	vmov.f32	s4, s14
 800dc70:	eddf 1a44 	vldr	s3, [pc, #272]	; 800dd84 <V90L+0x32c>
 800dc74:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800dd84 <V90L+0x32c>
 800dc78:	eddf 0a43 	vldr	s1, [pc, #268]	; 800dd88 <V90L+0x330>
 800dc7c:	eeb0 0a67 	vmov.f32	s0, s15
 800dc80:	f7f6 f836 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800dc84:	2300      	movs	r3, #0
 800dc86:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7f2 fc82 	bl	8000598 <__aeabi_f2d>
 800dc94:	a336      	add	r3, pc, #216	; (adr r3, 800dd70 <V90L+0x318>)
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	f7f2 fb1f 	bl	80002dc <__adddf3>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	4610      	mov	r0, r2
 800dca4:	4619      	mov	r1, r3
 800dca6:	f7f2 ffa7 	bl	8000bf8 <__aeabi_d2f>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dcb0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dcb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dcb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dcbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcc0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dcc4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dcc8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800dd7c <V90L+0x324>
 800dccc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	eeb0 2a47 	vmov.f32	s4, s14
 800dcd6:	eef0 1a46 	vmov.f32	s3, s12
 800dcda:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800dd84 <V90L+0x32c>
 800dcde:	eef0 0a66 	vmov.f32	s1, s13
 800dce2:	ee00 3a10 	vmov	s0, r3
 800dce6:	f7f5 f9dd 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800dcea:	4b23      	ldr	r3, [pc, #140]	; (800dd78 <V90L+0x320>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	701a      	strb	r2, [r3, #0]
}
 800dcf0:	e0ab      	b.n	800de4a <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dcfa:	2304      	movs	r3, #4
 800dcfc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dd02:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dd06:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dd0a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dd0e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dd12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd1e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dd22:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dd26:	eddf 4a15 	vldr	s9, [pc, #84]	; 800dd7c <V90L+0x324>
 800dd2a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	eeb0 2a47 	vmov.f32	s4, s14
 800dd34:	eef0 1a45 	vmov.f32	s3, s10
 800dd38:	eeb0 1a65 	vmov.f32	s2, s11
 800dd3c:	eef0 0a46 	vmov.f32	s1, s12
 800dd40:	eeb0 0a66 	vmov.f32	s0, s13
 800dd44:	f7f5 f9ae 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800dd48:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d11d      	bne.n	800dd8c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800dd50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dd58:	eeb0 1a47 	vmov.f32	s2, s14
 800dd5c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800dd88 <V90L+0x330>
 800dd60:	eeb0 0a67 	vmov.f32	s0, s15
 800dd64:	f7f6 f914 	bl	8003f90 <mollifier_slalom_table>
 800dd68:	e024      	b.n	800ddb4 <V90L+0x35c>
 800dd6a:	bf00      	nop
 800dd6c:	f3af 8000 	nop.w
 800dd70:	c022ec18 	.word	0xc022ec18
 800dd74:	405fd1de 	.word	0x405fd1de
 800dd78:	20000808 	.word	0x20000808
 800dd7c:	42340000 	.word	0x42340000
 800dd80:	42d4477b 	.word	0x42d4477b
 800dd84:	00000000 	.word	0x00000000
 800dd88:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dd8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd90:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dd94:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dd98:	eef0 2a66 	vmov.f32	s5, s13
 800dd9c:	eeb0 2a47 	vmov.f32	s4, s14
 800dda0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800dd84 <V90L+0x32c>
 800dda4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800dd84 <V90L+0x32c>
 800dda8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800dd88 <V90L+0x330>
 800ddac:	eeb0 0a67 	vmov.f32	s0, s15
 800ddb0:	f7f5 ff9e 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800ddb4:	2303      	movs	r3, #3
 800ddb6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ddbc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ddc0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ddc4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ddc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ddcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddd0:	edd7 7a01 	vldr	s15, [r7, #4]
 800ddd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ddd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dddc:	eef0 7ae7 	vabs.f32	s15, s15
 800dde0:	ee17 0a90 	vmov	r0, s15
 800dde4:	f7f2 fbd8 	bl	8000598 <__aeabi_f2d>
 800dde8:	f04f 0200 	mov.w	r2, #0
 800ddec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ddf0:	f7f2 fd54 	bl	800089c <__aeabi_ddiv>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	4614      	mov	r4, r2
 800ddfa:	461d      	mov	r5, r3
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7f2 fbca 	bl	8000598 <__aeabi_f2d>
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4620      	mov	r0, r4
 800de0a:	4629      	mov	r1, r5
 800de0c:	f7f2 fd46 	bl	800089c <__aeabi_ddiv>
 800de10:	4602      	mov	r2, r0
 800de12:	460b      	mov	r3, r1
 800de14:	4610      	mov	r0, r2
 800de16:	4619      	mov	r1, r3
 800de18:	f04f 0200 	mov.w	r2, #0
 800de1c:	4b0f      	ldr	r3, [pc, #60]	; (800de5c <V90L+0x404>)
 800de1e:	f7f2 fa5d 	bl	80002dc <__adddf3>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800de26:	4610      	mov	r0, r2
 800de28:	4619      	mov	r1, r3
 800de2a:	f7f2 fee5 	bl	8000bf8 <__aeabi_d2f>
 800de2e:	4603      	mov	r3, r0
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	ee02 3a10 	vmov	s4, r3
 800de36:	edd7 1a01 	vldr	s3, [r7, #4]
 800de3a:	ed97 1a01 	vldr	s2, [r7, #4]
 800de3e:	eef0 0a68 	vmov.f32	s1, s17
 800de42:	eeb0 0a48 	vmov.f32	s0, s16
 800de46:	f7f5 f92d 	bl	80030a4 <straight_table2>
}
 800de4a:	bf00      	nop
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	ecbd 8b02 	vpop	{d8}
 800de54:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800de58:	b004      	add	sp, #16
 800de5a:	4770      	bx	lr
 800de5c:	408f4000 	.word	0x408f4000

0800de60 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800de60:	b084      	sub	sp, #16
 800de62:	b580      	push	{r7, lr}
 800de64:	b086      	sub	sp, #24
 800de66:	af04      	add	r7, sp, #16
 800de68:	f107 0c10 	add.w	ip, r7, #16
 800de6c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800de70:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800de74:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d116      	bne.n	800deaa <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800de7c:	2001      	movs	r0, #1
 800de7e:	f7f9 fe41 	bl	8007b04 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800de82:	2003      	movs	r0, #3
 800de84:	f7f9 fe48 	bl	8007b18 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800de88:	ed97 0a01 	vldr	s0, [r7, #4]
 800de8c:	f7f9 fed8 	bl	8007c40 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800de90:	f7f9 fec2 	bl	8007c18 <pl_FunMotor_start>
		HAL_Delay(600);
 800de94:	f44f 7016 	mov.w	r0, #600	; 0x258
 800de98:	f009 fe12 	bl	8017ac0 <HAL_Delay>
		reset_gyro();
 800de9c:	f7f3 fcb0 	bl	8001800 <reset_gyro>
		reset_speed();
 800dea0:	f7f3 f8ba 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dea4:	f7f6 fd1a 	bl	80048dc <clear_Ierror>
 800dea8:	e00b      	b.n	800dec2 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800deaa:	2001      	movs	r0, #1
 800deac:	f7f9 fe2a 	bl	8007b04 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800deb0:	2003      	movs	r0, #3
 800deb2:	f7f9 fe31 	bl	8007b18 <pl_L_DriveMotor_mode>
		reset_gyro();
 800deb6:	f7f3 fca3 	bl	8001800 <reset_gyro>
		reset_speed();
 800deba:	f7f3 f8ad 	bl	8001018 <reset_speed>
		clear_Ierror();
 800debe:	f7f6 fd0d 	bl	80048dc <clear_Ierror>

	}
	record_mode=2;
 800dec2:	4ba8      	ldr	r3, [pc, #672]	; (800e164 <testturning+0x304>)
 800dec4:	2202      	movs	r2, #2
 800dec6:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800dec8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800decc:	2b00      	cmp	r3, #0
 800dece:	d110      	bne.n	800def2 <testturning+0x92>
 800ded0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ded4:	9303      	str	r3, [sp, #12]
 800ded6:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800deda:	9302      	str	r3, [sp, #8]
 800dedc:	2301      	movs	r3, #1
 800dede:	9301      	str	r3, [sp, #4]
 800dee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	f107 0318 	add.w	r3, r7, #24
 800dee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800deea:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800e168 <testturning+0x308>
 800deee:	f7fc f9cb 	bl	800a288 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800def2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800def6:	2b01      	cmp	r3, #1
 800def8:	d110      	bne.n	800df1c <testturning+0xbc>
 800defa:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800defe:	9303      	str	r3, [sp, #12]
 800df00:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800df04:	9302      	str	r3, [sp, #8]
 800df06:	2301      	movs	r3, #1
 800df08:	9301      	str	r3, [sp, #4]
 800df0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0c:	9300      	str	r3, [sp, #0]
 800df0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df14:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800e168 <testturning+0x308>
 800df18:	f7fc fb70 	bl	800a5fc <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800df1c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800df20:	2b02      	cmp	r3, #2
 800df22:	d10d      	bne.n	800df40 <testturning+0xe0>
 800df24:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800df28:	9302      	str	r3, [sp, #8]
 800df2a:	2301      	movs	r3, #1
 800df2c:	9301      	str	r3, [sp, #4]
 800df2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df38:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800e168 <testturning+0x308>
 800df3c:	f7fc fd14 	bl	800a968 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800df40:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800df44:	2b03      	cmp	r3, #3
 800df46:	d10d      	bne.n	800df64 <testturning+0x104>
 800df48:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800df4c:	9302      	str	r3, [sp, #8]
 800df4e:	2301      	movs	r3, #1
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800df5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df5c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800e168 <testturning+0x308>
 800df60:	f7fc fe6c 	bl	800ac3c <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800df64:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800df68:	2b04      	cmp	r3, #4
 800df6a:	d10d      	bne.n	800df88 <testturning+0x128>
 800df6c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800df70:	9302      	str	r3, [sp, #8]
 800df72:	2301      	movs	r3, #1
 800df74:	9301      	str	r3, [sp, #4]
 800df76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800df7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df80:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800e168 <testturning+0x308>
 800df84:	f7fc ffbe 	bl	800af04 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800df88:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800df8c:	2b05      	cmp	r3, #5
 800df8e:	d10e      	bne.n	800dfae <testturning+0x14e>
 800df90:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800df94:	9302      	str	r3, [sp, #8]
 800df96:	2301      	movs	r3, #1
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dfa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfa6:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e168 <testturning+0x308>
 800dfaa:	f7fd f915 	bl	800b1d8 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dfae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dfb2:	2b06      	cmp	r3, #6
 800dfb4:	d10e      	bne.n	800dfd4 <testturning+0x174>
 800dfb6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dfba:	9302      	str	r3, [sp, #8]
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	9301      	str	r3, [sp, #4]
 800dfc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dfca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfcc:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800e168 <testturning+0x308>
 800dfd0:	f7fd fa6a 	bl	800b4a8 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800dfd4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dfd8:	2b07      	cmp	r3, #7
 800dfda:	d10e      	bne.n	800dffa <testturning+0x19a>
 800dfdc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dfe0:	9302      	str	r3, [sp, #8]
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dff2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800e168 <testturning+0x308>
 800dff6:	f7fd fc9f 	bl	800b938 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800dffa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dffe:	2b08      	cmp	r3, #8
 800e000:	d10e      	bne.n	800e020 <testturning+0x1c0>
 800e002:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e006:	9302      	str	r3, [sp, #8]
 800e008:	2301      	movs	r3, #1
 800e00a:	9301      	str	r3, [sp, #4]
 800e00c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e018:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800e168 <testturning+0x308>
 800e01c:	f7fd fecc 	bl	800bdb8 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800e020:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e024:	2b09      	cmp	r3, #9
 800e026:	d10e      	bne.n	800e046 <testturning+0x1e6>
 800e028:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e02c:	9302      	str	r3, [sp, #8]
 800e02e:	2301      	movs	r3, #1
 800e030:	9301      	str	r3, [sp, #4]
 800e032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e03c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e03e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800e168 <testturning+0x308>
 800e042:	f7fe f901 	bl	800c248 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800e046:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e04a:	2b0a      	cmp	r3, #10
 800e04c:	d10e      	bne.n	800e06c <testturning+0x20c>
 800e04e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e052:	9302      	str	r3, [sp, #8]
 800e054:	2301      	movs	r3, #1
 800e056:	9301      	str	r3, [sp, #4]
 800e058:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800e062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e064:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e168 <testturning+0x308>
 800e068:	f7fe fb32 	bl	800c6d0 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800e06c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e070:	2b0b      	cmp	r3, #11
 800e072:	d10e      	bne.n	800e092 <testturning+0x232>
 800e074:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e078:	9302      	str	r3, [sp, #8]
 800e07a:	2301      	movs	r3, #1
 800e07c:	9301      	str	r3, [sp, #4]
 800e07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800e088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e08a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800e168 <testturning+0x308>
 800e08e:	f7fe fd11 	bl	800cab4 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800e092:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e096:	2b0c      	cmp	r3, #12
 800e098:	d10e      	bne.n	800e0b8 <testturning+0x258>
 800e09a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e09e:	9302      	str	r3, [sp, #8]
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0b0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e168 <testturning+0x308>
 800e0b4:	f7fe fee6 	bl	800ce84 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800e0b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e0bc:	2b0d      	cmp	r3, #13
 800e0be:	d10e      	bne.n	800e0de <testturning+0x27e>
 800e0c0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e0c4:	9302      	str	r3, [sp, #8]
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800e0d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0d6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800e168 <testturning+0x308>
 800e0da:	f7ff f8c5 	bl	800d268 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800e0de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e0e2:	2b0e      	cmp	r3, #14
 800e0e4:	d10e      	bne.n	800e104 <testturning+0x2a4>
 800e0e6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e0ea:	9302      	str	r3, [sp, #8]
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	9301      	str	r3, [sp, #4]
 800e0f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e0fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0fc:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e168 <testturning+0x308>
 800e100:	f7ff fa9e 	bl	800d640 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800e104:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e108:	2b0f      	cmp	r3, #15
 800e10a:	d10e      	bne.n	800e12a <testturning+0x2ca>
 800e10c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e110:	9302      	str	r3, [sp, #8]
 800e112:	2301      	movs	r3, #1
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e11a:	9300      	str	r3, [sp, #0]
 800e11c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800e120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e122:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800e168 <testturning+0x308>
 800e126:	f7ff fc97 	bl	800da58 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800e12a:	4b0e      	ldr	r3, [pc, #56]	; (800e164 <testturning+0x304>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e130:	2003      	movs	r0, #3
 800e132:	f7f9 fd19 	bl	8007b68 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e136:	2003      	movs	r0, #3
 800e138:	f7f9 fcee 	bl	8007b18 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800e13c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e140:	f7fa f812 	bl	8008168 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800e144:	f7f9 fd72 	bl	8007c2c <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800e148:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e14c:	f7fa f80c 	bl	8008168 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800e150:	2000      	movs	r0, #0
 800e152:	f7f9 fcd7 	bl	8007b04 <pl_DriveMotor_standby>

}
 800e156:	bf00      	nop
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e160:	b004      	add	sp, #16
 800e162:	4770      	bx	lr
 800e164:	2000d96c 	.word	0x2000d96c
 800e168:	c2c80000 	.word	0xc2c80000

0800e16c <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800e16c:	b480      	push	{r7}
 800e16e:	b085      	sub	sp, #20
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	3b01      	subs	r3, #1
 800e17c:	2b03      	cmp	r3, #3
 800e17e:	d823      	bhi.n	800e1c8 <update_coordinate+0x5c>
 800e180:	a201      	add	r2, pc, #4	; (adr r2, 800e188 <update_coordinate+0x1c>)
 800e182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e186:	bf00      	nop
 800e188:	0800e199 	.word	0x0800e199
 800e18c:	0800e1a5 	.word	0x0800e1a5
 800e190:	0800e1b1 	.word	0x0800e1b1
 800e194:	0800e1bd 	.word	0x0800e1bd
	case 1://北
		*y += 1;
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	1c5a      	adds	r2, r3, #1
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	601a      	str	r2, [r3, #0]
		break;
 800e1a2:	e011      	b.n	800e1c8 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	601a      	str	r2, [r3, #0]
		break;
 800e1ae:	e00b      	b.n	800e1c8 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	1e5a      	subs	r2, r3, #1
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	601a      	str	r2, [r3, #0]
		break;
 800e1ba:	e005      	b.n	800e1c8 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	1e5a      	subs	r2, r3, #1
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	601a      	str	r2, [r3, #0]
		break;
 800e1c6:	bf00      	nop
	}



}
 800e1c8:	bf00      	nop
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800e1d4:	b084      	sub	sp, #16
 800e1d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1d8:	b091      	sub	sp, #68	; 0x44
 800e1da:	af04      	add	r7, sp, #16
 800e1dc:	ed87 0a03 	vstr	s0, [r7, #12]
 800e1e0:	edc7 0a02 	vstr	s1, [r7, #8]
 800e1e4:	ed87 1a01 	vstr	s2, [r7, #4]
 800e1e8:	edc7 1a00 	vstr	s3, [r7]
 800e1ec:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800e1f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800e1f4:	4b7d      	ldr	r3, [pc, #500]	; (800e3ec <AdatiWayReturn+0x218>)
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800e1fa:	2001      	movs	r0, #1
 800e1fc:	f7f9 fc82 	bl	8007b04 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800e200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e204:	f009 fc5c 	bl	8017ac0 <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800e208:	2300      	movs	r3, #0
 800e20a:	623b      	str	r3, [r7, #32]
	int y=0;
 800e20c:	2300      	movs	r3, #0
 800e20e:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800e210:	2301      	movs	r3, #1
 800e212:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800e214:	2301      	movs	r3, #1
 800e216:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800e218:	2300      	movs	r3, #0
 800e21a:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800e220:	2300      	movs	r3, #0
 800e222:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e224:	4b72      	ldr	r3, [pc, #456]	; (800e3f0 <AdatiWayReturn+0x21c>)
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	2b95      	cmp	r3, #149	; 0x95
 800e22a:	bfcc      	ite	gt
 800e22c:	2301      	movgt	r3, #1
 800e22e:	2300      	movle	r3, #0
 800e230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e234:	4b6e      	ldr	r3, [pc, #440]	; (800e3f0 <AdatiWayReturn+0x21c>)
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e23c:	4293      	cmp	r3, r2
 800e23e:	bfcc      	ite	gt
 800e240:	2301      	movgt	r3, #1
 800e242:	2300      	movle	r3, #0
 800e244:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e248:	4b69      	ldr	r3, [pc, #420]	; (800e3f0 <AdatiWayReturn+0x21c>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e250:	4293      	cmp	r3, r2
 800e252:	bfcc      	ite	gt
 800e254:	2301      	movgt	r3, #1
 800e256:	2300      	movle	r3, #0
 800e258:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e25c:	6a38      	ldr	r0, [r7, #32]
 800e25e:	69f9      	ldr	r1, [r7, #28]
 800e260:	69ba      	ldr	r2, [r7, #24]
 800e262:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e266:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e26a:	9301      	str	r3, [sp, #4]
 800e26c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	4623      	mov	r3, r4
 800e274:	f002 fb76 	bl	8010964 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800e278:	f005 fde6 	bl	8013e48 <create_StepCountMap_queue>
	HAL_Delay(100);
 800e27c:	2064      	movs	r0, #100	; 0x64
 800e27e:	f009 fc1f 	bl	8017ac0 <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e282:	6978      	ldr	r0, [r7, #20]
 800e284:	ed97 2a01 	vldr	s4, [r7, #4]
 800e288:	edd7 1a03 	vldr	s3, [r7, #12]
 800e28c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e290:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e3f4 <AdatiWayReturn+0x220>
 800e294:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e3f8 <AdatiWayReturn+0x224>
 800e298:	f7f4 ff04 	bl	80030a4 <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e29c:	69ba      	ldr	r2, [r7, #24]
 800e29e:	f107 011c 	add.w	r1, r7, #28
 800e2a2:	f107 0320 	add.w	r3, r7, #32
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7ff ff60 	bl	800e16c <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e2ac:	4b50      	ldr	r3, [pc, #320]	; (800e3f0 <AdatiWayReturn+0x21c>)
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	2b95      	cmp	r3, #149	; 0x95
 800e2b2:	bfcc      	ite	gt
 800e2b4:	2301      	movgt	r3, #1
 800e2b6:	2300      	movle	r3, #0
 800e2b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e2bc:	4b4c      	ldr	r3, [pc, #304]	; (800e3f0 <AdatiWayReturn+0x21c>)
 800e2be:	691b      	ldr	r3, [r3, #16]
 800e2c0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	bfcc      	ite	gt
 800e2c8:	2301      	movgt	r3, #1
 800e2ca:	2300      	movle	r3, #0
 800e2cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e2d0:	4b47      	ldr	r3, [pc, #284]	; (800e3f0 <AdatiWayReturn+0x21c>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	bfcc      	ite	gt
 800e2dc:	2301      	movgt	r3, #1
 800e2de:	2300      	movle	r3, #0
 800e2e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2f0:	6978      	ldr	r0, [r7, #20]
 800e2f2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2f6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2fa:	ed97 1a03 	vldr	s2, [r7, #12]
 800e2fe:	edd7 0a03 	vldr	s1, [r7, #12]
 800e302:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e306:	f7f4 fecd 	bl	80030a4 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e30a:	6a38      	ldr	r0, [r7, #32]
 800e30c:	69f9      	ldr	r1, [r7, #28]
 800e30e:	69ba      	ldr	r2, [r7, #24]
 800e310:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e314:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e318:	9301      	str	r3, [sp, #4]
 800e31a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	4623      	mov	r3, r4
 800e322:	f002 fb1f 	bl	8010964 <update_wall>
		if(Dijkstra_mode==2){
 800e326:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	d104      	bne.n	800e338 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800e32e:	f004 fee9 	bl	8013104 <route_Dijkstra>
					create_StepCountMap_unknown();
 800e332:	f005 fbbd 	bl	8013ab0 <create_StepCountMap_unknown>
 800e336:	e001      	b.n	800e33c <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800e338:	f005 fd86 	bl	8013e48 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e33c:	6a3b      	ldr	r3, [r7, #32]
 800e33e:	69fa      	ldr	r2, [r7, #28]
 800e340:	69b9      	ldr	r1, [r7, #24]
 800e342:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e346:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e34a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e34e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e352:	9102      	str	r1, [sp, #8]
 800e354:	9201      	str	r2, [sp, #4]
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	4633      	mov	r3, r6
 800e35a:	462a      	mov	r2, r5
 800e35c:	4621      	mov	r1, r4
 800e35e:	f003 f87b 	bl	8011458 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <AdatiWayReturn+0x19a>
 800e36a:	23ff      	movs	r3, #255	; 0xff
 800e36c:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e36e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <AdatiWayReturn+0x1a6>
 800e376:	23ff      	movs	r3, #255	; 0xff
 800e378:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e37a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <AdatiWayReturn+0x1b2>
 800e382:	23ff      	movs	r3, #255	; 0xff
 800e384:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e386:	6a38      	ldr	r0, [r7, #32]
 800e388:	69fc      	ldr	r4, [r7, #28]
 800e38a:	69bd      	ldr	r5, [r7, #24]
 800e38c:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e38e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e390:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e392:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e394:	9102      	str	r1, [sp, #8]
 800e396:	9201      	str	r2, [sp, #4]
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	4633      	mov	r3, r6
 800e39c:	462a      	mov	r2, r5
 800e39e:	4621      	mov	r1, r4
 800e3a0:	f002 f88c 	bl	80104bc <decision_kitiku>
		mode.WallCutMode=1;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e3a8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e3ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6978      	ldr	r0, [r7, #20]
 800e3b4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e3b8:	f7f5 fb1e 	bl	80039f8 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e3bc:	6a3b      	ldr	r3, [r7, #32]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d103      	bne.n	800e3ca <AdatiWayReturn+0x1f6>
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	f000 827c 	beq.w	800e8c2 <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e3ca:	6a3b      	ldr	r3, [r7, #32]
 800e3cc:	2b0a      	cmp	r3, #10
 800e3ce:	d003      	beq.n	800e3d8 <AdatiWayReturn+0x204>
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	2b0b      	cmp	r3, #11
 800e3d4:	f040 810d 	bne.w	800e5f2 <AdatiWayReturn+0x41e>
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	2b0b      	cmp	r3, #11
 800e3dc:	f000 809b 	beq.w	800e516 <AdatiWayReturn+0x342>
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	2b0c      	cmp	r3, #12
 800e3e4:	f040 8105 	bne.w	800e5f2 <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e3e8:	e095      	b.n	800e516 <AdatiWayReturn+0x342>
 800e3ea:	bf00      	nop
 800e3ec:	20000834 	.word	0x20000834
 800e3f0:	20000470 	.word	0x20000470
 800e3f4:	00000000 	.word	0x00000000
 800e3f8:	42830000 	.word	0x42830000
 800e3fc:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e400:	2301      	movs	r3, #1
 800e402:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e404:	2300      	movs	r3, #0
 800e406:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e408:	2300      	movs	r3, #0
 800e40a:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e40c:	6978      	ldr	r0, [r7, #20]
 800e40e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e412:	edd7 1a03 	vldr	s3, [r7, #12]
 800e416:	ed97 1a03 	vldr	s2, [r7, #12]
 800e41a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e41e:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e3fc <AdatiWayReturn+0x228>
 800e422:	f7f4 fe3f 	bl	80030a4 <straight_table2>

				update_coordinate(&x,&y,direction);
 800e426:	69ba      	ldr	r2, [r7, #24]
 800e428:	f107 011c 	add.w	r1, r7, #28
 800e42c:	f107 0320 	add.w	r3, r7, #32
 800e430:	4618      	mov	r0, r3
 800e432:	f7ff fe9b 	bl	800e16c <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e436:	4b7f      	ldr	r3, [pc, #508]	; (800e634 <AdatiWayReturn+0x460>)
 800e438:	689b      	ldr	r3, [r3, #8]
 800e43a:	2b95      	cmp	r3, #149	; 0x95
 800e43c:	bfcc      	ite	gt
 800e43e:	2301      	movgt	r3, #1
 800e440:	2300      	movle	r3, #0
 800e442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e446:	4b7b      	ldr	r3, [pc, #492]	; (800e634 <AdatiWayReturn+0x460>)
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e44e:	4293      	cmp	r3, r2
 800e450:	bfcc      	ite	gt
 800e452:	2301      	movgt	r3, #1
 800e454:	2300      	movle	r3, #0
 800e456:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e45a:	4b76      	ldr	r3, [pc, #472]	; (800e634 <AdatiWayReturn+0x460>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e462:	4293      	cmp	r3, r2
 800e464:	bfcc      	ite	gt
 800e466:	2301      	movgt	r3, #1
 800e468:	2300      	movle	r3, #0
 800e46a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e46e:	2301      	movs	r3, #1
 800e470:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e472:	2301      	movs	r3, #1
 800e474:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e476:	2300      	movs	r3, #0
 800e478:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e47a:	6978      	ldr	r0, [r7, #20]
 800e47c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e480:	edd7 1a03 	vldr	s3, [r7, #12]
 800e484:	ed97 1a03 	vldr	s2, [r7, #12]
 800e488:	edd7 0a03 	vldr	s1, [r7, #12]
 800e48c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e490:	f7f4 fe08 	bl	80030a4 <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e494:	6a38      	ldr	r0, [r7, #32]
 800e496:	69f9      	ldr	r1, [r7, #28]
 800e498:	69ba      	ldr	r2, [r7, #24]
 800e49a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e49e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e4a2:	9301      	str	r3, [sp, #4]
 800e4a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	4623      	mov	r3, r4
 800e4ac:	f002 fa5a 	bl	8010964 <update_wall>
				create_StepCountMap_queue();
 800e4b0:	f005 fcca 	bl	8013e48 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	69fa      	ldr	r2, [r7, #28]
 800e4b8:	69b9      	ldr	r1, [r7, #24]
 800e4ba:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e4be:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e4c2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e4c6:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e4ca:	9102      	str	r1, [sp, #8]
 800e4cc:	9201      	str	r2, [sp, #4]
 800e4ce:	9300      	str	r3, [sp, #0]
 800e4d0:	4633      	mov	r3, r6
 800e4d2:	462a      	mov	r2, r5
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	f002 ffbf 	bl	8011458 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e4da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <AdatiWayReturn+0x312>
 800e4e2:	23ff      	movs	r3, #255	; 0xff
 800e4e4:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e4e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <AdatiWayReturn+0x31e>
 800e4ee:	23ff      	movs	r3, #255	; 0xff
 800e4f0:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e4f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <AdatiWayReturn+0x32a>
 800e4fa:	23ff      	movs	r3, #255	; 0xff
 800e4fc:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e4fe:	2301      	movs	r3, #1
 800e500:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e502:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e506:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e50a:	4619      	mov	r1, r3
 800e50c:	6978      	ldr	r0, [r7, #20]
 800e50e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e512:	f7f5 fa71 	bl	80039f8 <End_straight>
			while (front_wall==0) {
 800e516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e51a:	f083 0301 	eor.w	r3, r3, #1
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	2b00      	cmp	r3, #0
 800e522:	f47f af6d 	bne.w	800e400 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e526:	2300      	movs	r3, #0
 800e528:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e52a:	2300      	movs	r3, #0
 800e52c:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e52e:	2300      	movs	r3, #0
 800e530:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e532:	6978      	ldr	r0, [r7, #20]
 800e534:	ed97 2a01 	vldr	s4, [r7, #4]
 800e538:	edd7 1a03 	vldr	s3, [r7, #12]
 800e53c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e660 <AdatiWayReturn+0x48c>
 800e540:	edd7 0a03 	vldr	s1, [r7, #12]
 800e544:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e638 <AdatiWayReturn+0x464>
 800e548:	f7f4 fdac 	bl	80030a4 <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e54c:	2003      	movs	r0, #3
 800e54e:	f7f9 fb0b 	bl	8007b68 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e552:	2003      	movs	r0, #3
 800e554:	f7f9 fae0 	bl	8007b18 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e558:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e55c:	f7f9 fe04 	bl	8008168 <wait_ms_NoReset>
			no_safty = 1;
 800e560:	4b36      	ldr	r3, [pc, #216]	; (800e63c <AdatiWayReturn+0x468>)
 800e562:	2201      	movs	r2, #1
 800e564:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e566:	ed97 2a00 	vldr	s4, [r7]
 800e56a:	edd7 1a02 	vldr	s3, [r7, #8]
 800e56e:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e660 <AdatiWayReturn+0x48c>
 800e572:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e660 <AdatiWayReturn+0x48c>
 800e576:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e640 <AdatiWayReturn+0x46c>
 800e57a:	f7f5 faa1 	bl	8003ac0 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e57e:	2003      	movs	r0, #3
 800e580:	f7f9 faf2 	bl	8007b68 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e584:	2003      	movs	r0, #3
 800e586:	f7f9 fac7 	bl	8007b18 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e58a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e58e:	f7f9 fdeb 	bl	8008168 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e592:	6978      	ldr	r0, [r7, #20]
 800e594:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e644 <AdatiWayReturn+0x470>
 800e598:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e648 <AdatiWayReturn+0x474>
 800e59c:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e660 <AdatiWayReturn+0x48c>
 800e5a0:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e660 <AdatiWayReturn+0x48c>
 800e5a4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e64c <AdatiWayReturn+0x478>
 800e5a8:	f7f4 fd7c 	bl	80030a4 <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e5ac:	2003      	movs	r0, #3
 800e5ae:	f7f9 fadb 	bl	8007b68 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e5b2:	2003      	movs	r0, #3
 800e5b4:	f7f9 fab0 	bl	8007b18 <pl_L_DriveMotor_mode>
			no_safty = 0;
 800e5b8:	4b20      	ldr	r3, [pc, #128]	; (800e63c <AdatiWayReturn+0x468>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	701a      	strb	r2, [r3, #0]
			wait_ms_NoReset(500);
 800e5be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e5c2:	f7f9 fdd1 	bl	8008168 <wait_ms_NoReset>
			clear_Ierror();
 800e5c6:	f7f6 f989 	bl	80048dc <clear_Ierror>
			maze_mode = 0;
 800e5ca:	4b21      	ldr	r3, [pc, #132]	; (800e650 <AdatiWayReturn+0x47c>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	3302      	adds	r3, #2
 800e5d4:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	2b04      	cmp	r3, #4
 800e5da:	dd02      	ble.n	800e5e2 <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	3b04      	subs	r3, #4
 800e5e0:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f300 816e 	bgt.w	800e8c6 <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e5f0:	e169      	b.n	800e8c6 <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e5f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d102      	bne.n	800e600 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e5fa:	4b16      	ldr	r3, [pc, #88]	; (800e654 <AdatiWayReturn+0x480>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e600:	4b14      	ldr	r3, [pc, #80]	; (800e654 <AdatiWayReturn+0x480>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	f040 80f8 	bne.w	800e7fa <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e60a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e60c:	2bff      	cmp	r3, #255	; 0xff
 800e60e:	d12b      	bne.n	800e668 <AdatiWayReturn+0x494>
 800e610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e612:	2bff      	cmp	r3, #255	; 0xff
 800e614:	d128      	bne.n	800e668 <AdatiWayReturn+0x494>
 800e616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e618:	2bff      	cmp	r3, #255	; 0xff
 800e61a:	d125      	bne.n	800e668 <AdatiWayReturn+0x494>
 800e61c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e61e:	2bff      	cmp	r3, #255	; 0xff
 800e620:	d122      	bne.n	800e668 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e622:	4b0d      	ldr	r3, [pc, #52]	; (800e658 <AdatiWayReturn+0x484>)
 800e624:	2201      	movs	r2, #1
 800e626:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e628:	f7f9 fad2 	bl	8007bd0 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e62c:	2000      	movs	r0, #0
 800e62e:	f7f9 fa69 	bl	8007b04 <pl_DriveMotor_standby>

				break;
 800e632:	e14b      	b.n	800e8cc <AdatiWayReturn+0x6f8>
 800e634:	20000470 	.word	0x20000470
 800e638:	42140000 	.word	0x42140000
 800e63c:	20000806 	.word	0x20000806
 800e640:	43340000 	.word	0x43340000
 800e644:	447a0000 	.word	0x447a0000
 800e648:	c3160000 	.word	0xc3160000
 800e64c:	c1f40000 	.word	0xc1f40000
 800e650:	20000834 	.word	0x20000834
 800e654:	20000838 	.word	0x20000838
 800e658:	20000807 	.word	0x20000807
 800e65c:	42a40000 	.word	0x42a40000
 800e660:	00000000 	.word	0x00000000
 800e664:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e668:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e66a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d81a      	bhi.n	800e6a6 <AdatiWayReturn+0x4d2>
 800e670:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e674:	429a      	cmp	r2, r3
 800e676:	d816      	bhi.n	800e6a6 <AdatiWayReturn+0x4d2>
 800e678:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e67a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d812      	bhi.n	800e6a6 <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e680:	2301      	movs	r3, #1
 800e682:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e684:	2300      	movs	r3, #0
 800e686:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e688:	2300      	movs	r3, #0
 800e68a:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e68c:	6978      	ldr	r0, [r7, #20]
 800e68e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e692:	edd7 1a03 	vldr	s3, [r7, #12]
 800e696:	ed97 1a03 	vldr	s2, [r7, #12]
 800e69a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e69e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e65c <AdatiWayReturn+0x488>
 800e6a2:	f7f4 fcff 	bl	80030a4 <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e6a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e6a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d219      	bcs.n	800e6e2 <AdatiWayReturn+0x50e>
 800e6ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e6b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d815      	bhi.n	800e6e2 <AdatiWayReturn+0x50e>
 800e6b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e6b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d811      	bhi.n	800e6e2 <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e6be:	2300      	movs	r3, #0
 800e6c0:	9303      	str	r3, [sp, #12]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	9302      	str	r3, [sp, #8]
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	9301      	str	r3, [sp, #4]
 800e6ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e6d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6d4:	ed97 0a03 	vldr	s0, [r7, #12]
 800e6d8:	f7fb fdd6 	bl	800a288 <slalomR>
				direction++;
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e6e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d219      	bcs.n	800e71e <AdatiWayReturn+0x54a>
 800e6ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d215      	bcs.n	800e71e <AdatiWayReturn+0x54a>
 800e6f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d811      	bhi.n	800e71e <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	9303      	str	r3, [sp, #12]
 800e6fe:	2300      	movs	r3, #0
 800e700:	9302      	str	r3, [sp, #8]
 800e702:	2300      	movs	r3, #0
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e708:	9300      	str	r3, [sp, #0]
 800e70a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e70e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e710:	ed97 0a03 	vldr	s0, [r7, #12]
 800e714:	f7fb ff72 	bl	800a5fc <slalomL>
				direction--;
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	3b01      	subs	r3, #1
 800e71c:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e71e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e720:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e722:	429a      	cmp	r2, r3
 800e724:	f080 80ac 	bcs.w	800e880 <AdatiWayReturn+0x6ac>
 800e728:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e72a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e72c:	429a      	cmp	r2, r3
 800e72e:	f080 80a7 	bcs.w	800e880 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e732:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e736:	429a      	cmp	r2, r3
 800e738:	f080 80a2 	bcs.w	800e880 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e73c:	2301      	movs	r3, #1
 800e73e:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e740:	2300      	movs	r3, #0
 800e742:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e744:	2300      	movs	r3, #0
 800e746:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e748:	6978      	ldr	r0, [r7, #20]
 800e74a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e74e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e752:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e660 <AdatiWayReturn+0x48c>
 800e756:	edd7 0a03 	vldr	s1, [r7, #12]
 800e75a:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e664 <AdatiWayReturn+0x490>
 800e75e:	f7f4 fca1 	bl	80030a4 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e762:	2003      	movs	r0, #3
 800e764:	f7f9 fa00 	bl	8007b68 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e768:	2003      	movs	r0, #3
 800e76a:	f7f9 f9d5 	bl	8007b18 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e76e:	2064      	movs	r0, #100	; 0x64
 800e770:	f7f9 fcfa 	bl	8008168 <wait_ms_NoReset>
				no_safty = 1;
 800e774:	4b89      	ldr	r3, [pc, #548]	; (800e99c <AdatiWayReturn+0x7c8>)
 800e776:	2201      	movs	r2, #1
 800e778:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e77a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e77e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e786:	4618      	mov	r0, r3
 800e788:	edd7 0a00 	vldr	s1, [r7]
 800e78c:	ed97 0a02 	vldr	s0, [r7, #8]
 800e790:	f7fb fcb0 	bl	800a0f4 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				no_safty = 0;
 800e794:	4b81      	ldr	r3, [pc, #516]	; (800e99c <AdatiWayReturn+0x7c8>)
 800e796:	2200      	movs	r2, #0
 800e798:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(100);
 800e79a:	2064      	movs	r0, #100	; 0x64
 800e79c:	f7f9 fce4 	bl	8008168 <wait_ms_NoReset>
				//clear_Ierror();
				mode.WallControlMode=0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e7a4:	6978      	ldr	r0, [r7, #20]
 800e7a6:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800e9a0 <AdatiWayReturn+0x7cc>
 800e7aa:	eddf 1a7e 	vldr	s3, [pc, #504]	; 800e9a4 <AdatiWayReturn+0x7d0>
 800e7ae:	ed9f 1a87 	vldr	s2, [pc, #540]	; 800e9cc <AdatiWayReturn+0x7f8>
 800e7b2:	eddf 0a86 	vldr	s1, [pc, #536]	; 800e9cc <AdatiWayReturn+0x7f8>
 800e7b6:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800e9a8 <AdatiWayReturn+0x7d4>
 800e7ba:	f7f4 fc73 	bl	80030a4 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e7be:	2003      	movs	r0, #3
 800e7c0:	f7f9 f9d2 	bl	8007b68 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e7c4:	2003      	movs	r0, #3
 800e7c6:	f7f9 f9a7 	bl	8007b18 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e7ca:	2064      	movs	r0, #100	; 0x64
 800e7cc:	f7f9 fccc 	bl	8008168 <wait_ms_NoReset>
				clear_Ierror();
 800e7d0:	f7f6 f884 	bl	80048dc <clear_Ierror>
				mode.WallControlMode=1;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e7d8:	6978      	ldr	r0, [r7, #20]
 800e7da:	ed97 2a01 	vldr	s4, [r7, #4]
 800e7de:	edd7 1a03 	vldr	s3, [r7, #12]
 800e7e2:	ed97 1a03 	vldr	s2, [r7, #12]
 800e7e6:	eddf 0a79 	vldr	s1, [pc, #484]	; 800e9cc <AdatiWayReturn+0x7f8>
 800e7ea:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e9ac <AdatiWayReturn+0x7d8>
 800e7ee:	f7f4 fc59 	bl	80030a4 <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	3302      	adds	r3, #2
 800e7f6:	61bb      	str	r3, [r7, #24]
 800e7f8:	e042      	b.n	800e880 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e802:	2300      	movs	r3, #0
 800e804:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e806:	6978      	ldr	r0, [r7, #20]
 800e808:	ed97 2a01 	vldr	s4, [r7, #4]
 800e80c:	edd7 1a03 	vldr	s3, [r7, #12]
 800e810:	ed97 1a03 	vldr	s2, [r7, #12]
 800e814:	edd7 0a03 	vldr	s1, [r7, #12]
 800e818:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e9d0 <AdatiWayReturn+0x7fc>
 800e81c:	f7f4 fc42 	bl	80030a4 <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e820:	f107 0218 	add.w	r2, r7, #24
 800e824:	f107 011c 	add.w	r1, r7, #28
 800e828:	f107 0320 	add.w	r3, r7, #32
 800e82c:	4618      	mov	r0, r3
 800e82e:	f001 feb7 	bl	80105a0 <compress_kitiku>
			mode.WallCutMode=0;
 800e832:	2300      	movs	r3, #0
 800e834:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e836:	2201      	movs	r2, #1
 800e838:	2101      	movs	r1, #1
 800e83a:	6978      	ldr	r0, [r7, #20]
 800e83c:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800e9d0 <AdatiWayReturn+0x7fc>
 800e840:	f7f5 f8da 	bl	80039f8 <End_straight>
			mode.WallControlMode=1;
 800e844:	2301      	movs	r3, #1
 800e846:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e848:	2300      	movs	r3, #0
 800e84a:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e84c:	2300      	movs	r3, #0
 800e84e:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e850:	4b57      	ldr	r3, [pc, #348]	; (800e9b0 <AdatiWayReturn+0x7dc>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	4613      	mov	r3, r2
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	4413      	add	r3, r2
 800e85a:	011a      	lsls	r2, r3, #4
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	ee07 3a90 	vmov	s15, r3
 800e862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e866:	6978      	ldr	r0, [r7, #20]
 800e868:	ed97 2a01 	vldr	s4, [r7, #4]
 800e86c:	eddf 1a51 	vldr	s3, [pc, #324]	; 800e9b4 <AdatiWayReturn+0x7e0>
 800e870:	ed97 1a03 	vldr	s2, [r7, #12]
 800e874:	edd7 0a03 	vldr	s1, [r7, #12]
 800e878:	eeb0 0a67 	vmov.f32	s0, s15
 800e87c:	f7f4 fc12 	bl	80030a4 <straight_table2>

		}

		if (direction >= 5) {
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	2b04      	cmp	r3, #4
 800e884:	dd02      	ble.n	800e88c <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	3b04      	subs	r3, #4
 800e88a:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	dc02      	bgt.n	800e898 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	3304      	adds	r3, #4
 800e896:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e898:	4b47      	ldr	r3, [pc, #284]	; (800e9b8 <AdatiWayReturn+0x7e4>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d014      	beq.n	800e8ca <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e8a0:	4b46      	ldr	r3, [pc, #280]	; (800e9bc <AdatiWayReturn+0x7e8>)
 800e8a2:	edd3 7a00 	vldr	s15, [r3]
 800e8a6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e9c0 <AdatiWayReturn+0x7ec>
 800e8aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b2:	dd05      	ble.n	800e8c0 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e8b4:	f7f9 f98c 	bl	8007bd0 <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	f7f9 f923 	bl	8007b04 <pl_DriveMotor_standby>
						break;
 800e8be:	e005      	b.n	800e8cc <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800e8c0:	e4ec      	b.n	800e29c <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800e8c2:	bf00      	nop
 800e8c4:	e002      	b.n	800e8cc <AdatiWayReturn+0x6f8>
			break;
 800e8c6:	bf00      	nop
 800e8c8:	e000      	b.n	800e8cc <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800e8ca:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e8cc:	4b3a      	ldr	r3, [pc, #232]	; (800e9b8 <AdatiWayReturn+0x7e4>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d101      	bne.n	800e8d8 <AdatiWayReturn+0x704>
	record_in();
 800e8d4:	f7f8 fe0c 	bl	80074f0 <record_in>
	}
	clear_Ierror();
 800e8d8:	f7f6 f800 	bl	80048dc <clear_Ierror>
	reset_gyro();
 800e8dc:	f7f2 ff90 	bl	8001800 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e8e0:	4b38      	ldr	r3, [pc, #224]	; (800e9c4 <AdatiWayReturn+0x7f0>)
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8e6:	6978      	ldr	r0, [r7, #20]
 800e8e8:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8ec:	edd7 1a03 	vldr	s3, [r7, #12]
 800e8f0:	ed97 1a03 	vldr	s2, [r7, #12]
 800e8f4:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e9cc <AdatiWayReturn+0x7f8>
 800e8f8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e9ac <AdatiWayReturn+0x7d8>
 800e8fc:	f7f4 fbd2 	bl	80030a4 <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e900:	69ba      	ldr	r2, [r7, #24]
 800e902:	f107 011c 	add.w	r1, r7, #28
 800e906:	f107 0320 	add.w	r3, r7, #32
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7ff fc2e 	bl	800e16c <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e910:	4b2d      	ldr	r3, [pc, #180]	; (800e9c8 <AdatiWayReturn+0x7f4>)
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	2b95      	cmp	r3, #149	; 0x95
 800e916:	bfcc      	ite	gt
 800e918:	2301      	movgt	r3, #1
 800e91a:	2300      	movle	r3, #0
 800e91c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e920:	4b29      	ldr	r3, [pc, #164]	; (800e9c8 <AdatiWayReturn+0x7f4>)
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e928:	4293      	cmp	r3, r2
 800e92a:	bfcc      	ite	gt
 800e92c:	2301      	movgt	r3, #1
 800e92e:	2300      	movle	r3, #0
 800e930:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e934:	4b24      	ldr	r3, [pc, #144]	; (800e9c8 <AdatiWayReturn+0x7f4>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e93c:	4293      	cmp	r3, r2
 800e93e:	bfcc      	ite	gt
 800e940:	2301      	movgt	r3, #1
 800e942:	2300      	movle	r3, #0
 800e944:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e948:	2301      	movs	r3, #1
 800e94a:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e94c:	2301      	movs	r3, #1
 800e94e:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e950:	2300      	movs	r3, #0
 800e952:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e954:	6978      	ldr	r0, [r7, #20]
 800e956:	ed97 2a01 	vldr	s4, [r7, #4]
 800e95a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e95e:	ed97 1a03 	vldr	s2, [r7, #12]
 800e962:	edd7 0a03 	vldr	s1, [r7, #12]
 800e966:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e96a:	f7f4 fb9b 	bl	80030a4 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e96e:	6a38      	ldr	r0, [r7, #32]
 800e970:	69f9      	ldr	r1, [r7, #28]
 800e972:	69ba      	ldr	r2, [r7, #24]
 800e974:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e978:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e97c:	9301      	str	r3, [sp, #4]
 800e97e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	4623      	mov	r3, r4
 800e986:	f001 ffed 	bl	8010964 <update_wall>
		if(Dijkstra_mode==1){
 800e98a:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d120      	bne.n	800e9d4 <AdatiWayReturn+0x800>
			route_Dijkstra();
 800e992:	f004 fbb7 	bl	8013104 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e996:	f005 f88b 	bl	8013ab0 <create_StepCountMap_unknown>
 800e99a:	e01d      	b.n	800e9d8 <AdatiWayReturn+0x804>
 800e99c:	20000806 	.word	0x20000806
 800e9a0:	447a0000 	.word	0x447a0000
 800e9a4:	c3160000 	.word	0xc3160000
 800e9a8:	c1a40000 	.word	0xc1a40000
 800e9ac:	42830000 	.word	0x42830000
 800e9b0:	2000082c 	.word	0x2000082c
 800e9b4:	44610000 	.word	0x44610000
 800e9b8:	20000807 	.word	0x20000807
 800e9bc:	2000072c 	.word	0x2000072c
 800e9c0:	43700000 	.word	0x43700000
 800e9c4:	20000834 	.word	0x20000834
 800e9c8:	20000470 	.word	0x20000470
 800e9cc:	00000000 	.word	0x00000000
 800e9d0:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e9d4:	f005 fbf0 	bl	80141b8 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e9d8:	6a3b      	ldr	r3, [r7, #32]
 800e9da:	69fa      	ldr	r2, [r7, #28]
 800e9dc:	69b9      	ldr	r1, [r7, #24]
 800e9de:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e9e2:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e9e6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e9ea:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e9ee:	9102      	str	r1, [sp, #8]
 800e9f0:	9201      	str	r2, [sp, #4]
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	4633      	mov	r3, r6
 800e9f6:	462a      	mov	r2, r5
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	f002 fd2d 	bl	8011458 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e9fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <AdatiWayReturn+0x836>
 800ea06:	23ff      	movs	r3, #255	; 0xff
 800ea08:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800ea0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <AdatiWayReturn+0x842>
 800ea12:	23ff      	movs	r3, #255	; 0xff
 800ea14:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800ea16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d001      	beq.n	800ea22 <AdatiWayReturn+0x84e>
 800ea1e:	23ff      	movs	r3, #255	; 0xff
 800ea20:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800ea22:	6a38      	ldr	r0, [r7, #32]
 800ea24:	69fc      	ldr	r4, [r7, #28]
 800ea26:	69bd      	ldr	r5, [r7, #24]
 800ea28:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800ea2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea2e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ea30:	9102      	str	r1, [sp, #8]
 800ea32:	9201      	str	r2, [sp, #4]
 800ea34:	9300      	str	r3, [sp, #0]
 800ea36:	4633      	mov	r3, r6
 800ea38:	462a      	mov	r2, r5
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	f001 fd3e 	bl	80104bc <decision_kitiku>
		mode.WallCutMode=1;
 800ea40:	2301      	movs	r3, #1
 800ea42:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800ea44:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ea48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6978      	ldr	r0, [r7, #20]
 800ea50:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800ea54:	f7f4 ffd0 	bl	80039f8 <End_straight>


			if(x == 0 && y == 0) {
 800ea58:	6a3b      	ldr	r3, [r7, #32]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d165      	bne.n	800eb2a <AdatiWayReturn+0x956>
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d162      	bne.n	800eb2a <AdatiWayReturn+0x956>

				mode.WallControlMode=0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea70:	6978      	ldr	r0, [r7, #20]
 800ea72:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea76:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea7a:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e9cc <AdatiWayReturn+0x7f8>
 800ea7e:	edd7 0a03 	vldr	s1, [r7, #12]
 800ea82:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e9d0 <AdatiWayReturn+0x7fc>
 800ea86:	f7f4 fb0d 	bl	80030a4 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea8a:	2003      	movs	r0, #3
 800ea8c:	f7f9 f86c 	bl	8007b68 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea90:	2003      	movs	r0, #3
 800ea92:	f7f9 f841 	bl	8007b18 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800ea96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ea9a:	f7f9 fb65 	bl	8008168 <wait_ms_NoReset>
				no_safty = 1;
 800ea9e:	4bb1      	ldr	r3, [pc, #708]	; (800ed64 <AdatiWayReturn+0xb90>)
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800eaa4:	ed97 2a00 	vldr	s4, [r7]
 800eaa8:	edd7 1a02 	vldr	s3, [r7, #8]
 800eaac:	ed9f 1aae 	vldr	s2, [pc, #696]	; 800ed68 <AdatiWayReturn+0xb94>
 800eab0:	eddf 0aad 	vldr	s1, [pc, #692]	; 800ed68 <AdatiWayReturn+0xb94>
 800eab4:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800ed6c <AdatiWayReturn+0xb98>
 800eab8:	f7f5 f802 	bl	8003ac0 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eabc:	2003      	movs	r0, #3
 800eabe:	f7f9 f853 	bl	8007b68 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eac2:	2003      	movs	r0, #3
 800eac4:	f7f9 f828 	bl	8007b18 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800eac8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eacc:	f7f9 fb4c 	bl	8008168 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800ead0:	6978      	ldr	r0, [r7, #20]
 800ead2:	ed9f 2aa7 	vldr	s4, [pc, #668]	; 800ed70 <AdatiWayReturn+0xb9c>
 800ead6:	eddf 1aa7 	vldr	s3, [pc, #668]	; 800ed74 <AdatiWayReturn+0xba0>
 800eada:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800ed68 <AdatiWayReturn+0xb94>
 800eade:	eddf 0aa2 	vldr	s1, [pc, #648]	; 800ed68 <AdatiWayReturn+0xb94>
 800eae2:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800eae6:	f7f4 fadd 	bl	80030a4 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eaea:	2003      	movs	r0, #3
 800eaec:	f7f9 f83c 	bl	8007b68 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eaf0:	2003      	movs	r0, #3
 800eaf2:	f7f9 f811 	bl	8007b18 <pl_L_DriveMotor_mode>
				no_safty = 0;
 800eaf6:	4b9b      	ldr	r3, [pc, #620]	; (800ed64 <AdatiWayReturn+0xb90>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(500);
 800eafc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eb00:	f7f9 fb32 	bl	8008168 <wait_ms_NoReset>
				clear_Ierror();
 800eb04:	f7f5 feea 	bl	80048dc <clear_Ierror>

				direction = direction + 2;
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	3302      	adds	r3, #2
 800eb0c:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	dd02      	ble.n	800eb1a <AdatiWayReturn+0x946>
					direction = direction-4;
 800eb14:	69bb      	ldr	r3, [r7, #24]
 800eb16:	3b04      	subs	r3, #4
 800eb18:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f300 81a8 	bgt.w	800ee72 <AdatiWayReturn+0xc9e>
					direction = direction+4;
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	3304      	adds	r3, #4
 800eb26:	61bb      	str	r3, [r7, #24]
				}

				break;
 800eb28:	e1a3      	b.n	800ee72 <AdatiWayReturn+0xc9e>
			}

			if(know_mode==0){
 800eb2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d102      	bne.n	800eb38 <AdatiWayReturn+0x964>
				kitikukan = 0;
 800eb32:	4b91      	ldr	r3, [pc, #580]	; (800ed78 <AdatiWayReturn+0xba4>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	601a      	str	r2, [r3, #0]
			}
			if (kitikukan == OFF) {
 800eb38:	4b8f      	ldr	r3, [pc, #572]	; (800ed78 <AdatiWayReturn+0xba4>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f040 8144 	bne.w	800edca <AdatiWayReturn+0xbf6>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800eb42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb44:	2bff      	cmp	r3, #255	; 0xff
 800eb46:	d10c      	bne.n	800eb62 <AdatiWayReturn+0x98e>
 800eb48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb4a:	2bff      	cmp	r3, #255	; 0xff
 800eb4c:	d109      	bne.n	800eb62 <AdatiWayReturn+0x98e>
 800eb4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb50:	2bff      	cmp	r3, #255	; 0xff
 800eb52:	d106      	bne.n	800eb62 <AdatiWayReturn+0x98e>
 800eb54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb56:	2bff      	cmp	r3, #255	; 0xff
 800eb58:	d103      	bne.n	800eb62 <AdatiWayReturn+0x98e>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800eb5a:	4b88      	ldr	r3, [pc, #544]	; (800ed7c <AdatiWayReturn+0xba8>)
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	701a      	strb	r2, [r3, #0]
					break;
 800eb60:	e18a      	b.n	800ee78 <AdatiWayReturn+0xca4>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800eb62:	6a3b      	ldr	r3, [r7, #32]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	db08      	blt.n	800eb7a <AdatiWayReturn+0x9a6>
 800eb68:	69fb      	ldr	r3, [r7, #28]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	db05      	blt.n	800eb7a <AdatiWayReturn+0x9a6>
 800eb6e:	6a3b      	ldr	r3, [r7, #32]
 800eb70:	2b0f      	cmp	r3, #15
 800eb72:	dc02      	bgt.n	800eb7a <AdatiWayReturn+0x9a6>
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	2b0f      	cmp	r3, #15
 800eb78:	dd03      	ble.n	800eb82 <AdatiWayReturn+0x9ae>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800eb7a:	4b80      	ldr	r3, [pc, #512]	; (800ed7c <AdatiWayReturn+0xba8>)
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	701a      	strb	r2, [r3, #0]
									break;
 800eb80:	e17a      	b.n	800ee78 <AdatiWayReturn+0xca4>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800eb82:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800eb84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d81a      	bhi.n	800ebc0 <AdatiWayReturn+0x9ec>
 800eb8a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800eb8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d816      	bhi.n	800ebc0 <AdatiWayReturn+0x9ec>
 800eb92:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800eb94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d812      	bhi.n	800ebc0 <AdatiWayReturn+0x9ec>
					// 直進
					mode.WallControlMode=1;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eba6:	6978      	ldr	r0, [r7, #20]
 800eba8:	ed97 2a01 	vldr	s4, [r7, #4]
 800ebac:	edd7 1a03 	vldr	s3, [r7, #12]
 800ebb0:	ed97 1a03 	vldr	s2, [r7, #12]
 800ebb4:	edd7 0a03 	vldr	s1, [r7, #12]
 800ebb8:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800ed80 <AdatiWayReturn+0xbac>
 800ebbc:	f7f4 fa72 	bl	80030a4 <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ebc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d22c      	bcs.n	800ec22 <AdatiWayReturn+0xa4e>
 800ebc8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d828      	bhi.n	800ec22 <AdatiWayReturn+0xa4e>
 800ebd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d824      	bhi.n	800ec22 <AdatiWayReturn+0xa4e>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	2b0a      	cmp	r3, #10
 800ebdc:	d002      	beq.n	800ebe4 <AdatiWayReturn+0xa10>
 800ebde:	6a3b      	ldr	r3, [r7, #32]
 800ebe0:	2b0b      	cmp	r3, #11
 800ebe2:	d109      	bne.n	800ebf8 <AdatiWayReturn+0xa24>
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	2b0b      	cmp	r3, #11
 800ebe8:	d002      	beq.n	800ebf0 <AdatiWayReturn+0xa1c>
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	2b0c      	cmp	r3, #12
 800ebee:	d103      	bne.n	800ebf8 <AdatiWayReturn+0xa24>
						noGoalPillarMode=1;
 800ebf0:	4b64      	ldr	r3, [pc, #400]	; (800ed84 <AdatiWayReturn+0xbb0>)
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	701a      	strb	r2, [r3, #0]
 800ebf6:	e002      	b.n	800ebfe <AdatiWayReturn+0xa2a>
					}else{
						noGoalPillarMode=0;
 800ebf8:	4b62      	ldr	r3, [pc, #392]	; (800ed84 <AdatiWayReturn+0xbb0>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800ebfe:	4b62      	ldr	r3, [pc, #392]	; (800ed88 <AdatiWayReturn+0xbb4>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	9203      	str	r2, [sp, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	9202      	str	r2, [sp, #8]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	9201      	str	r2, [sp, #4]
 800ec0c:	699a      	ldr	r2, [r3, #24]
 800ec0e:	9200      	str	r2, [sp, #0]
 800ec10:	3308      	adds	r3, #8
 800ec12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec14:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec18:	f7fb fb36 	bl	800a288 <slalomR>
					direction++;
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ec22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d22c      	bcs.n	800ec84 <AdatiWayReturn+0xab0>
 800ec2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d228      	bcs.n	800ec84 <AdatiWayReturn+0xab0>
 800ec32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d824      	bhi.n	800ec84 <AdatiWayReturn+0xab0>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec3a:	6a3b      	ldr	r3, [r7, #32]
 800ec3c:	2b0a      	cmp	r3, #10
 800ec3e:	d002      	beq.n	800ec46 <AdatiWayReturn+0xa72>
 800ec40:	6a3b      	ldr	r3, [r7, #32]
 800ec42:	2b0b      	cmp	r3, #11
 800ec44:	d109      	bne.n	800ec5a <AdatiWayReturn+0xa86>
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	2b0b      	cmp	r3, #11
 800ec4a:	d002      	beq.n	800ec52 <AdatiWayReturn+0xa7e>
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	2b0c      	cmp	r3, #12
 800ec50:	d103      	bne.n	800ec5a <AdatiWayReturn+0xa86>
						noGoalPillarMode=1;
 800ec52:	4b4c      	ldr	r3, [pc, #304]	; (800ed84 <AdatiWayReturn+0xbb0>)
 800ec54:	2201      	movs	r2, #1
 800ec56:	701a      	strb	r2, [r3, #0]
 800ec58:	e002      	b.n	800ec60 <AdatiWayReturn+0xa8c>
					}else{
						noGoalPillarMode=0;
 800ec5a:	4b4a      	ldr	r3, [pc, #296]	; (800ed84 <AdatiWayReturn+0xbb0>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800ec60:	4b49      	ldr	r3, [pc, #292]	; (800ed88 <AdatiWayReturn+0xbb4>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	9203      	str	r2, [sp, #12]
 800ec66:	2200      	movs	r2, #0
 800ec68:	9202      	str	r2, [sp, #8]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	9201      	str	r2, [sp, #4]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec70:	9200      	str	r2, [sp, #0]
 800ec72:	331c      	adds	r3, #28
 800ec74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec76:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec7a:	f7fb fcbf 	bl	800a5fc <slalomL>
					direction--;
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	3b01      	subs	r3, #1
 800ec82:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800ec84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	f080 80e1 	bcs.w	800ee50 <AdatiWayReturn+0xc7c>
 800ec8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec92:	429a      	cmp	r2, r3
 800ec94:	f080 80dc 	bcs.w	800ee50 <AdatiWayReturn+0xc7c>
						&& back_count < left_count){
 800ec98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	f080 80d7 	bcs.w	800ee50 <AdatiWayReturn+0xc7c>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800eca2:	2301      	movs	r3, #1
 800eca4:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ecae:	6978      	ldr	r0, [r7, #20]
 800ecb0:	ed97 2a01 	vldr	s4, [r7, #4]
 800ecb4:	edd7 1a03 	vldr	s3, [r7, #12]
 800ecb8:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 800ed68 <AdatiWayReturn+0xb94>
 800ecbc:	edd7 0a03 	vldr	s1, [r7, #12]
 800ecc0:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800ed9c <AdatiWayReturn+0xbc8>
 800ecc4:	f7f4 f9ee 	bl	80030a4 <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ecc8:	2003      	movs	r0, #3
 800ecca:	f7f8 ff4d 	bl	8007b68 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ecce:	2003      	movs	r0, #3
 800ecd0:	f7f8 ff22 	bl	8007b18 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ecd4:	2064      	movs	r0, #100	; 0x64
 800ecd6:	f7f9 fa47 	bl	8008168 <wait_ms_NoReset>
					no_safty = 1;
 800ecda:	4b22      	ldr	r3, [pc, #136]	; (800ed64 <AdatiWayReturn+0xb90>)
 800ecdc:	2201      	movs	r2, #1
 800ecde:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ece0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ece4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ece8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecec:	4618      	mov	r0, r3
 800ecee:	edd7 0a00 	vldr	s1, [r7]
 800ecf2:	ed97 0a02 	vldr	s0, [r7, #8]
 800ecf6:	f7fb f9fd 	bl	800a0f4 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					no_safty = 0;
 800ecfa:	4b1a      	ldr	r3, [pc, #104]	; (800ed64 <AdatiWayReturn+0xb90>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	701a      	strb	r2, [r3, #0]
					wait_ms_NoReset(100);
 800ed00:	2064      	movs	r0, #100	; 0x64
 800ed02:	f7f9 fa31 	bl	8008168 <wait_ms_NoReset>
					//clear_Ierror();
					mode.WallControlMode=0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ed0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d046      	beq.n	800eda0 <AdatiWayReturn+0xbcc>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ed12:	6978      	ldr	r0, [r7, #20]
 800ed14:	ed9f 2a16 	vldr	s4, [pc, #88]	; 800ed70 <AdatiWayReturn+0xb9c>
 800ed18:	eddf 1a16 	vldr	s3, [pc, #88]	; 800ed74 <AdatiWayReturn+0xba0>
 800ed1c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800ed68 <AdatiWayReturn+0xb94>
 800ed20:	eddf 0a11 	vldr	s1, [pc, #68]	; 800ed68 <AdatiWayReturn+0xb94>
 800ed24:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ed8c <AdatiWayReturn+0xbb8>
 800ed28:	f7f4 f9bc 	bl	80030a4 <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ed2c:	2003      	movs	r0, #3
 800ed2e:	f7f8 ff1b 	bl	8007b68 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ed32:	2003      	movs	r0, #3
 800ed34:	f7f8 fef0 	bl	8007b18 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ed38:	2064      	movs	r0, #100	; 0x64
 800ed3a:	f7f9 fa15 	bl	8008168 <wait_ms_NoReset>

					clear_Ierror();
 800ed3e:	f7f5 fdcd 	bl	80048dc <clear_Ierror>
					mode.WallControlMode=1;
 800ed42:	2301      	movs	r3, #1
 800ed44:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ed46:	6978      	ldr	r0, [r7, #20]
 800ed48:	ed97 2a01 	vldr	s4, [r7, #4]
 800ed4c:	edd7 1a03 	vldr	s3, [r7, #12]
 800ed50:	ed97 1a03 	vldr	s2, [r7, #12]
 800ed54:	eddf 0a04 	vldr	s1, [pc, #16]	; 800ed68 <AdatiWayReturn+0xb94>
 800ed58:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800ed90 <AdatiWayReturn+0xbbc>
 800ed5c:	f7f4 f9a2 	bl	80030a4 <straight_table2>
 800ed60:	e02f      	b.n	800edc2 <AdatiWayReturn+0xbee>
 800ed62:	bf00      	nop
 800ed64:	20000806 	.word	0x20000806
 800ed68:	00000000 	.word	0x00000000
 800ed6c:	43340000 	.word	0x43340000
 800ed70:	447a0000 	.word	0x447a0000
 800ed74:	c3160000 	.word	0xc3160000
 800ed78:	20000838 	.word	0x20000838
 800ed7c:	20000807 	.word	0x20000807
 800ed80:	42a40000 	.word	0x42a40000
 800ed84:	20000529 	.word	0x20000529
 800ed88:	2000db2c 	.word	0x2000db2c
 800ed8c:	c1a40000 	.word	0xc1a40000
 800ed90:	42830000 	.word	0x42830000
 800ed94:	00000000 	.word	0x00000000
 800ed98:	42b40000 	.word	0x42b40000
 800ed9c:	42140000 	.word	0x42140000
					}else{
						clear_Ierror();
 800eda0:	f7f5 fd9c 	bl	80048dc <clear_Ierror>
						mode.WallControlMode=1;
 800eda4:	2301      	movs	r3, #1
 800eda6:	753b      	strb	r3, [r7, #20]
						straight_table2(90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eda8:	6978      	ldr	r0, [r7, #20]
 800edaa:	ed97 2a01 	vldr	s4, [r7, #4]
 800edae:	edd7 1a03 	vldr	s3, [r7, #12]
 800edb2:	ed97 1a03 	vldr	s2, [r7, #12]
 800edb6:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ed94 <AdatiWayReturn+0xbc0>
 800edba:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800ed98 <AdatiWayReturn+0xbc4>
 800edbe:	f7f4 f971 	bl	80030a4 <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	3302      	adds	r3, #2
 800edc6:	61bb      	str	r3, [r7, #24]
 800edc8:	e042      	b.n	800ee50 <AdatiWayReturn+0xc7c>

				}

			} else {
				mode.WallControlMode=1;
 800edca:	2301      	movs	r3, #1
 800edcc:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800edce:	2301      	movs	r3, #1
 800edd0:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800edd2:	2300      	movs	r3, #0
 800edd4:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800edd6:	6978      	ldr	r0, [r7, #20]
 800edd8:	ed97 2a01 	vldr	s4, [r7, #4]
 800eddc:	edd7 1a03 	vldr	s3, [r7, #12]
 800ede0:	ed97 1a03 	vldr	s2, [r7, #12]
 800ede4:	edd7 0a03 	vldr	s1, [r7, #12]
 800ede8:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 800ed9c <AdatiWayReturn+0xbc8>
 800edec:	f7f4 f95a 	bl	80030a4 <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800edf0:	f107 0218 	add.w	r2, r7, #24
 800edf4:	f107 011c 	add.w	r1, r7, #28
 800edf8:	f107 0320 	add.w	r3, r7, #32
 800edfc:	4618      	mov	r0, r3
 800edfe:	f001 fbcf 	bl	80105a0 <compress_kitiku>
				mode.WallCutMode=0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ee06:	2201      	movs	r2, #1
 800ee08:	2101      	movs	r1, #1
 800ee0a:	6978      	ldr	r0, [r7, #20]
 800ee0c:	ed1f 0a1d 	vldr	s0, [pc, #-116]	; 800ed9c <AdatiWayReturn+0xbc8>
 800ee10:	f7f4 fdf2 	bl	80039f8 <End_straight>
				mode.WallControlMode=1;
 800ee14:	2301      	movs	r3, #1
 800ee16:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ee20:	4b27      	ldr	r3, [pc, #156]	; (800eec0 <AdatiWayReturn+0xcec>)
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	4613      	mov	r3, r2
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	4413      	add	r3, r2
 800ee2a:	011a      	lsls	r2, r3, #4
 800ee2c:	1ad3      	subs	r3, r2, r3
 800ee2e:	ee07 3a90 	vmov	s15, r3
 800ee32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee36:	6978      	ldr	r0, [r7, #20]
 800ee38:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee3c:	eddf 1a21 	vldr	s3, [pc, #132]	; 800eec4 <AdatiWayReturn+0xcf0>
 800ee40:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee44:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee48:	eeb0 0a67 	vmov.f32	s0, s15
 800ee4c:	f7f4 f92a 	bl	80030a4 <straight_table2>

			}

			if (direction >= 5) {
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	2b04      	cmp	r3, #4
 800ee54:	dd02      	ble.n	800ee5c <AdatiWayReturn+0xc88>
				direction = direction-4;
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	3b04      	subs	r3, #4
 800ee5a:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	dc02      	bgt.n	800ee68 <AdatiWayReturn+0xc94>
				direction = direction+4;
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	3304      	adds	r3, #4
 800ee66:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800ee68:	4b17      	ldr	r3, [pc, #92]	; (800eec8 <AdatiWayReturn+0xcf4>)
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d002      	beq.n	800ee76 <AdatiWayReturn+0xca2>
		update_coordinate(&x,&y,direction);
 800ee70:	e546      	b.n	800e900 <AdatiWayReturn+0x72c>
				break;
 800ee72:	bf00      	nop
 800ee74:	e000      	b.n	800ee78 <AdatiWayReturn+0xca4>
			if(error_mode==1){break;}
 800ee76:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800ee78:	2000      	movs	r0, #0
 800ee7a:	f7f8 fe43 	bl	8007b04 <pl_DriveMotor_standby>
	maze_mode = 0;
 800ee7e:	4b13      	ldr	r3, [pc, #76]	; (800eecc <AdatiWayReturn+0xcf8>)
 800ee80:	2200      	movs	r2, #0
 800ee82:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800ee84:	2064      	movs	r0, #100	; 0x64
 800ee86:	f008 fe1b 	bl	8017ac0 <HAL_Delay>
	maze_display();
 800ee8a:	f005 fb81 	bl	8014590 <maze_display>
	create_StepCountMap_queue();
 800ee8e:	f004 ffdb 	bl	8013e48 <create_StepCountMap_queue>
	if(walk_count[0] == 255){
 800ee92:	4b0f      	ldr	r3, [pc, #60]	; (800eed0 <AdatiWayReturn+0xcfc>)
 800ee94:	881b      	ldrh	r3, [r3, #0]
 800ee96:	2bff      	cmp	r3, #255	; 0xff
 800ee98:	d102      	bne.n	800eea0 <AdatiWayReturn+0xccc>
		error_mode = 1;
 800ee9a:	4b0b      	ldr	r3, [pc, #44]	; (800eec8 <AdatiWayReturn+0xcf4>)
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800eea0:	4b09      	ldr	r3, [pc, #36]	; (800eec8 <AdatiWayReturn+0xcf4>)
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d102      	bne.n	800eeae <AdatiWayReturn+0xcda>
		record_in();
 800eea8:	f7f8 fb22 	bl	80074f0 <record_in>
	} else {
		record_out();
	}

}
 800eeac:	e001      	b.n	800eeb2 <AdatiWayReturn+0xcde>
		record_out();
 800eeae:	f7f8 fbdb 	bl	8007668 <record_out>
}
 800eeb2:	bf00      	nop
 800eeb4:	3734      	adds	r7, #52	; 0x34
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eebc:	b004      	add	sp, #16
 800eebe:	4770      	bx	lr
 800eec0:	2000082c 	.word	0x2000082c
 800eec4:	447a0000 	.word	0x447a0000
 800eec8:	20000807 	.word	0x20000807
 800eecc:	20000834 	.word	0x20000834
 800eed0:	20000d2c 	.word	0x20000d2c

0800eed4 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800eed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eed6:	b08b      	sub	sp, #44	; 0x2c
 800eed8:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	607b      	str	r3, [r7, #4]
	int y = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800eee2:	2301      	movs	r3, #1
 800eee4:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800eee6:	4b8b      	ldr	r3, [pc, #556]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800eeec:	f002 fbdc 	bl	80116a8 <create_DijkstraMap>
	maze_display_Dijkstra();
 800eef0:	f005 fc6c 	bl	80147cc <maze_display_Dijkstra>
	pass[0] = 1;
 800eef4:	4b88      	ldr	r3, [pc, #544]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800eef6:	2201      	movs	r2, #1
 800eef8:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800eefa:	4639      	mov	r1, r7
 800eefc:	1d3b      	adds	r3, r7, #4
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff f933 	bl	800e16c <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2b0a      	cmp	r3, #10
 800ef0a:	d002      	beq.n	800ef12 <pass_maker_Dijkstra+0x3e>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b0b      	cmp	r3, #11
 800ef10:	d13a      	bne.n	800ef88 <pass_maker_Dijkstra+0xb4>
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	2b0b      	cmp	r3, #11
 800ef16:	d002      	beq.n	800ef1e <pass_maker_Dijkstra+0x4a>
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b0c      	cmp	r3, #12
 800ef1c:	d134      	bne.n	800ef88 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800ef1e:	4b7d      	ldr	r3, [pc, #500]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	461a      	mov	r2, r3
 800ef24:	4b7c      	ldr	r3, [pc, #496]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800ef26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	da05      	bge.n	800ef3a <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800ef2e:	4b79      	ldr	r3, [pc, #484]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	3301      	adds	r3, #1
 800ef34:	b2da      	uxtb	r2, r3
 800ef36:	4b77      	ldr	r3, [pc, #476]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800ef38:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800ef3a:	4b76      	ldr	r3, [pc, #472]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	461a      	mov	r2, r3
 800ef40:	4b75      	ldr	r3, [pc, #468]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800ef42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef46:	4a73      	ldr	r2, [pc, #460]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800ef48:	7812      	ldrb	r2, [r2, #0]
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	4a72      	ldr	r2, [pc, #456]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800ef50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	3302      	adds	r3, #2
 800ef58:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	2b05      	cmp	r3, #5
 800ef5e:	d101      	bne.n	800ef64 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800ef60:	2301      	movs	r3, #1
 800ef62:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	2b06      	cmp	r3, #6
 800ef68:	d101      	bne.n	800ef6e <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800ef6a:	2302      	movs	r3, #2
 800ef6c:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d101      	bne.n	800ef78 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800ef74:	2304      	movs	r3, #4
 800ef76:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7e:	f040 80c2 	bne.w	800f106 <pass_maker_Dijkstra+0x232>
						direction = 3;
 800ef82:	2303      	movs	r3, #3
 800ef84:	617b      	str	r3, [r7, #20]
					}
					break;
 800ef86:	e0be      	b.n	800f106 <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	6839      	ldr	r1, [r7, #0]
 800ef8c:	f107 020b 	add.w	r2, r7, #11
 800ef90:	f107 0309 	add.w	r3, r7, #9
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	f107 030a 	add.w	r3, r7, #10
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	697a      	ldr	r2, [r7, #20]
 800efa0:	f001 ff66 	bl	8010e70 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	683a      	ldr	r2, [r7, #0]
 800efa8:	f107 060c 	add.w	r6, r7, #12
 800efac:	f107 050e 	add.w	r5, r7, #14
 800efb0:	f107 0410 	add.w	r4, r7, #16
 800efb4:	f107 0012 	add.w	r0, r7, #18
 800efb8:	6979      	ldr	r1, [r7, #20]
 800efba:	9102      	str	r1, [sp, #8]
 800efbc:	9201      	str	r2, [sp, #4]
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	4633      	mov	r3, r6
 800efc2:	462a      	mov	r2, r5
 800efc4:	4621      	mov	r1, r4
 800efc6:	f002 fad5 	bl	8011574 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800efca:	7afb      	ldrb	r3, [r7, #11]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <pass_maker_Dijkstra+0x102>
 800efd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efd4:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800efd6:	7abb      	ldrb	r3, [r7, #10]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d002      	beq.n	800efe2 <pass_maker_Dijkstra+0x10e>
 800efdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efe0:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800efe2:	7a7b      	ldrb	r3, [r7, #9]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d002      	beq.n	800efee <pass_maker_Dijkstra+0x11a>
 800efe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efec:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800efee:	8a7b      	ldrh	r3, [r7, #18]
 800eff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d10e      	bne.n	800f016 <pass_maker_Dijkstra+0x142>
 800eff8:	8a3b      	ldrh	r3, [r7, #16]
 800effa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800effe:	4293      	cmp	r3, r2
 800f000:	d109      	bne.n	800f016 <pass_maker_Dijkstra+0x142>
 800f002:	89bb      	ldrh	r3, [r7, #12]
 800f004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f008:	4293      	cmp	r3, r2
 800f00a:	d104      	bne.n	800f016 <pass_maker_Dijkstra+0x142>
 800f00c:	89fb      	ldrh	r3, [r7, #14]
 800f00e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f012:	4293      	cmp	r3, r2
 800f014:	d079      	beq.n	800f10a <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f016:	8a7a      	ldrh	r2, [r7, #18]
 800f018:	8a3b      	ldrh	r3, [r7, #16]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d822      	bhi.n	800f064 <pass_maker_Dijkstra+0x190>
 800f01e:	8a7a      	ldrh	r2, [r7, #18]
 800f020:	89bb      	ldrh	r3, [r7, #12]
 800f022:	429a      	cmp	r2, r3
 800f024:	d81e      	bhi.n	800f064 <pass_maker_Dijkstra+0x190>
 800f026:	8a7a      	ldrh	r2, [r7, #18]
 800f028:	89fb      	ldrh	r3, [r7, #14]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d81a      	bhi.n	800f064 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f02e:	4b39      	ldr	r3, [pc, #228]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	4b38      	ldr	r3, [pc, #224]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800f036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	da05      	bge.n	800f04a <pass_maker_Dijkstra+0x176>
 800f03e:	4b35      	ldr	r3, [pc, #212]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	3301      	adds	r3, #1
 800f044:	b2da      	uxtb	r2, r3
 800f046:	4b33      	ldr	r3, [pc, #204]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f048:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f04a:	4b32      	ldr	r3, [pc, #200]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	461a      	mov	r2, r3
 800f050:	4b31      	ldr	r3, [pc, #196]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800f052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f056:	4a2f      	ldr	r2, [pc, #188]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f058:	7812      	ldrb	r2, [r2, #0]
 800f05a:	4611      	mov	r1, r2
 800f05c:	3302      	adds	r3, #2
 800f05e:	4a2e      	ldr	r2, [pc, #184]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800f060:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f064:	8a3a      	ldrh	r2, [r7, #16]
 800f066:	8a7b      	ldrh	r3, [r7, #18]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d218      	bcs.n	800f09e <pass_maker_Dijkstra+0x1ca>
 800f06c:	8a3a      	ldrh	r2, [r7, #16]
 800f06e:	89bb      	ldrh	r3, [r7, #12]
 800f070:	429a      	cmp	r2, r3
 800f072:	d814      	bhi.n	800f09e <pass_maker_Dijkstra+0x1ca>
 800f074:	8a3a      	ldrh	r2, [r7, #16]
 800f076:	89fb      	ldrh	r3, [r7, #14]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d810      	bhi.n	800f09e <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f07c:	4b25      	ldr	r3, [pc, #148]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	3301      	adds	r3, #1
 800f082:	b2da      	uxtb	r2, r3
 800f084:	4b23      	ldr	r3, [pc, #140]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f086:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800f088:	4b22      	ldr	r3, [pc, #136]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	4619      	mov	r1, r3
 800f08e:	4b22      	ldr	r3, [pc, #136]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800f090:	f06f 0201 	mvn.w	r2, #1
 800f094:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	3301      	adds	r3, #1
 800f09c:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f09e:	89ba      	ldrh	r2, [r7, #12]
 800f0a0:	8a7b      	ldrh	r3, [r7, #18]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d218      	bcs.n	800f0d8 <pass_maker_Dijkstra+0x204>
 800f0a6:	89ba      	ldrh	r2, [r7, #12]
 800f0a8:	8a3b      	ldrh	r3, [r7, #16]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d214      	bcs.n	800f0d8 <pass_maker_Dijkstra+0x204>
 800f0ae:	89ba      	ldrh	r2, [r7, #12]
 800f0b0:	89fb      	ldrh	r3, [r7, #14]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d810      	bhi.n	800f0d8 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f0b6:	4b17      	ldr	r3, [pc, #92]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	b2da      	uxtb	r2, r3
 800f0be:	4b15      	ldr	r3, [pc, #84]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f0c0:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800f0c2:	4b14      	ldr	r3, [pc, #80]	; (800f114 <pass_maker_Dijkstra+0x240>)
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	4b13      	ldr	r3, [pc, #76]	; (800f118 <pass_maker_Dijkstra+0x244>)
 800f0ca:	f06f 0202 	mvn.w	r2, #2
 800f0ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	2b05      	cmp	r3, #5
 800f0dc:	d101      	bne.n	800f0e2 <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	2b06      	cmp	r3, #6
 800f0e6:	d101      	bne.n	800f0ec <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f0e8:	2302      	movs	r3, #2
 800f0ea:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d101      	bne.n	800f0f6 <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f0f2:	2304      	movs	r3, #4
 800f0f4:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fc:	f47f aefd 	bne.w	800eefa <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f100:	2303      	movs	r3, #3
 800f102:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f104:	e6f9      	b.n	800eefa <pass_maker_Dijkstra+0x26>
					break;
 800f106:	bf00      	nop
 800f108:	e000      	b.n	800f10c <pass_maker_Dijkstra+0x238>
			break;
 800f10a:	bf00      	nop
		}

	}
}
 800f10c:	bf00      	nop
 800f10e:	371c      	adds	r7, #28
 800f110:	46bd      	mov	sp, r7
 800f112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f114:	20000828 	.word	0x20000828
 800f118:	2000083c 	.word	0x2000083c
 800f11c:	00000000 	.word	0x00000000

0800f120 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f120:	b5b0      	push	{r4, r5, r7, lr}
 800f122:	b0e0      	sub	sp, #384	; 0x180
 800f124:	af50      	add	r7, sp, #320	; 0x140
 800f126:	ed87 0a05 	vstr	s0, [r7, #20]
 800f12a:	edc7 0a04 	vstr	s1, [r7, #16]
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	4608      	mov	r0, r1
 800f132:	4611      	mov	r1, r2
 800f134:	461a      	mov	r2, r3
 800f136:	ed87 1a01 	vstr	s2, [r7, #4]
 800f13a:	4603      	mov	r3, r0
 800f13c:	72fb      	strb	r3, [r7, #11]
 800f13e:	460b      	mov	r3, r1
 800f140:	72bb      	strb	r3, [r7, #10]
 800f142:	4613      	mov	r3, r2
 800f144:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f146:	f06f 0301 	mvn.w	r3, #1
 800f14a:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f14c:	2301      	movs	r3, #1
 800f14e:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800f150:	2300      	movs	r3, #0
 800f152:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800f154:	2300      	movs	r3, #0
 800f156:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800f158:	2300      	movs	r3, #0
 800f15a:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f15c:	2300      	movs	r3, #0
 800f15e:	633b      	str	r3, [r7, #48]	; 0x30
 800f160:	e007      	b.n	800f172 <run_shortest+0x52>
 800f162:	4a07      	ldr	r2, [pc, #28]	; (800f180 <run_shortest+0x60>)
 800f164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f166:	2100      	movs	r1, #0
 800f168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16e:	3301      	adds	r3, #1
 800f170:	633b      	str	r3, [r7, #48]	; 0x30
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	2bfe      	cmp	r3, #254	; 0xfe
 800f176:	ddf4      	ble.n	800f162 <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f178:	2300      	movs	r3, #0
 800f17a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f17c:	e077      	b.n	800f26e <run_shortest+0x14e>
 800f17e:	bf00      	nop
 800f180:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f184:	4aa9      	ldr	r2, [pc, #676]	; (800f42c <run_shortest+0x30c>)
 800f186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f188:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f18c:	4aa8      	ldr	r2, [pc, #672]	; (800f430 <run_shortest+0x310>)
 800f18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800f194:	4aa5      	ldr	r2, [pc, #660]	; (800f42c <run_shortest+0x30c>)
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	330c      	adds	r3, #12
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	4413      	add	r3, r2
 800f19e:	88d9      	ldrh	r1, [r3, #6]
 800f1a0:	4aa3      	ldr	r2, [pc, #652]	; (800f430 <run_shortest+0x310>)
 800f1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a4:	330c      	adds	r3, #12
 800f1a6:	005b      	lsls	r3, r3, #1
 800f1a8:	4413      	add	r3, r2
 800f1aa:	460a      	mov	r2, r1
 800f1ac:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800f1ae:	4a9f      	ldr	r2, [pc, #636]	; (800f42c <run_shortest+0x30c>)
 800f1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b2:	331c      	adds	r3, #28
 800f1b4:	005b      	lsls	r3, r3, #1
 800f1b6:	4413      	add	r3, r2
 800f1b8:	8899      	ldrh	r1, [r3, #4]
 800f1ba:	4a9d      	ldr	r2, [pc, #628]	; (800f430 <run_shortest+0x310>)
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	331c      	adds	r3, #28
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	4413      	add	r3, r2
 800f1c4:	460a      	mov	r2, r1
 800f1c6:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800f1c8:	4a98      	ldr	r2, [pc, #608]	; (800f42c <run_shortest+0x30c>)
 800f1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1cc:	332c      	adds	r3, #44	; 0x2c
 800f1ce:	005b      	lsls	r3, r3, #1
 800f1d0:	4413      	add	r3, r2
 800f1d2:	8859      	ldrh	r1, [r3, #2]
 800f1d4:	4a96      	ldr	r2, [pc, #600]	; (800f430 <run_shortest+0x310>)
 800f1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d8:	332c      	adds	r3, #44	; 0x2c
 800f1da:	005b      	lsls	r3, r3, #1
 800f1dc:	4413      	add	r3, r2
 800f1de:	460a      	mov	r2, r1
 800f1e0:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800f1e2:	4a92      	ldr	r2, [pc, #584]	; (800f42c <run_shortest+0x30c>)
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	331c      	adds	r3, #28
 800f1e8:	005b      	lsls	r3, r3, #1
 800f1ea:	4413      	add	r3, r2
 800f1ec:	889b      	ldrh	r3, [r3, #4]
 800f1ee:	43db      	mvns	r3, r3
 800f1f0:	b299      	uxth	r1, r3
 800f1f2:	4a8e      	ldr	r2, [pc, #568]	; (800f42c <run_shortest+0x30c>)
 800f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f6:	331c      	adds	r3, #28
 800f1f8:	005b      	lsls	r3, r3, #1
 800f1fa:	4413      	add	r3, r2
 800f1fc:	460a      	mov	r2, r1
 800f1fe:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800f200:	4a8a      	ldr	r2, [pc, #552]	; (800f42c <run_shortest+0x30c>)
 800f202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f204:	332c      	adds	r3, #44	; 0x2c
 800f206:	005b      	lsls	r3, r3, #1
 800f208:	4413      	add	r3, r2
 800f20a:	885b      	ldrh	r3, [r3, #2]
 800f20c:	43db      	mvns	r3, r3
 800f20e:	b299      	uxth	r1, r3
 800f210:	4a86      	ldr	r2, [pc, #536]	; (800f42c <run_shortest+0x30c>)
 800f212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f214:	332c      	adds	r3, #44	; 0x2c
 800f216:	005b      	lsls	r3, r3, #1
 800f218:	4413      	add	r3, r2
 800f21a:	460a      	mov	r2, r1
 800f21c:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800f21e:	4a83      	ldr	r2, [pc, #524]	; (800f42c <run_shortest+0x30c>)
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f226:	4981      	ldr	r1, [pc, #516]	; (800f42c <run_shortest+0x30c>)
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22a:	331c      	adds	r3, #28
 800f22c:	005b      	lsls	r3, r3, #1
 800f22e:	440b      	add	r3, r1
 800f230:	889b      	ldrh	r3, [r3, #4]
 800f232:	4313      	orrs	r3, r2
 800f234:	b299      	uxth	r1, r3
 800f236:	4a7d      	ldr	r2, [pc, #500]	; (800f42c <run_shortest+0x30c>)
 800f238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f23e:	4a7b      	ldr	r2, [pc, #492]	; (800f42c <run_shortest+0x30c>)
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	330c      	adds	r3, #12
 800f244:	005b      	lsls	r3, r3, #1
 800f246:	4413      	add	r3, r2
 800f248:	88da      	ldrh	r2, [r3, #6]
 800f24a:	4978      	ldr	r1, [pc, #480]	; (800f42c <run_shortest+0x30c>)
 800f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24e:	332c      	adds	r3, #44	; 0x2c
 800f250:	005b      	lsls	r3, r3, #1
 800f252:	440b      	add	r3, r1
 800f254:	885b      	ldrh	r3, [r3, #2]
 800f256:	4313      	orrs	r3, r2
 800f258:	b299      	uxth	r1, r3
 800f25a:	4a74      	ldr	r2, [pc, #464]	; (800f42c <run_shortest+0x30c>)
 800f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25e:	330c      	adds	r3, #12
 800f260:	005b      	lsls	r3, r3, #1
 800f262:	4413      	add	r3, r2
 800f264:	460a      	mov	r2, r1
 800f266:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	3301      	adds	r3, #1
 800f26c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f270:	2b0e      	cmp	r3, #14
 800f272:	dd87      	ble.n	800f184 <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f274:	f7ff fe2e 	bl	800eed4 <pass_maker_Dijkstra>

	pass_count = 1;
 800f278:	4b6e      	ldr	r3, [pc, #440]	; (800f434 <run_shortest+0x314>)
 800f27a:	2201      	movs	r2, #1
 800f27c:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f27e:	7afb      	ldrb	r3, [r7, #11]
 800f280:	2b01      	cmp	r3, #1
 800f282:	f040 84b5 	bne.w	800fbf0 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f286:	4b6b      	ldr	r3, [pc, #428]	; (800f434 <run_shortest+0x314>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	461a      	mov	r2, r3
 800f28c:	4b6a      	ldr	r3, [pc, #424]	; (800f438 <run_shortest+0x318>)
 800f28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 813a 	beq.w	800f50c <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f298:	4b66      	ldr	r3, [pc, #408]	; (800f434 <run_shortest+0x314>)
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	461a      	mov	r2, r3
 800f29e:	4b66      	ldr	r3, [pc, #408]	; (800f438 <run_shortest+0x318>)
 800f2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a4:	f113 0f02 	cmn.w	r3, #2
 800f2a8:	d131      	bne.n	800f30e <run_shortest+0x1ee>
 800f2aa:	4b62      	ldr	r3, [pc, #392]	; (800f434 <run_shortest+0x314>)
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	4a61      	ldr	r2, [pc, #388]	; (800f438 <run_shortest+0x318>)
 800f2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	dd29      	ble.n	800f30e <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f2ba:	4b5e      	ldr	r3, [pc, #376]	; (800f434 <run_shortest+0x314>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	4a5d      	ldr	r2, [pc, #372]	; (800f438 <run_shortest+0x318>)
 800f2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dd21      	ble.n	800f30e <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f2ca:	4b5a      	ldr	r3, [pc, #360]	; (800f434 <run_shortest+0x314>)
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	4a59      	ldr	r2, [pc, #356]	; (800f438 <run_shortest+0x318>)
 800f2d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2d6:	4b57      	ldr	r3, [pc, #348]	; (800f434 <run_shortest+0x314>)
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	3a01      	subs	r2, #1
 800f2de:	4956      	ldr	r1, [pc, #344]	; (800f438 <run_shortest+0x318>)
 800f2e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f2e4:	4b53      	ldr	r3, [pc, #332]	; (800f434 <run_shortest+0x314>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	4a53      	ldr	r2, [pc, #332]	; (800f438 <run_shortest+0x318>)
 800f2ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2f0:	4b50      	ldr	r3, [pc, #320]	; (800f434 <run_shortest+0x314>)
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	3a01      	subs	r2, #1
 800f2f8:	494f      	ldr	r1, [pc, #316]	; (800f438 <run_shortest+0x318>)
 800f2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f2fe:	4b4d      	ldr	r3, [pc, #308]	; (800f434 <run_shortest+0x314>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	4619      	mov	r1, r3
 800f304:	4b4c      	ldr	r3, [pc, #304]	; (800f438 <run_shortest+0x318>)
 800f306:	f06f 0203 	mvn.w	r2, #3
 800f30a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f30e:	4b49      	ldr	r3, [pc, #292]	; (800f434 <run_shortest+0x314>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	461a      	mov	r2, r3
 800f314:	4b48      	ldr	r3, [pc, #288]	; (800f438 <run_shortest+0x318>)
 800f316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f31a:	f113 0f03 	cmn.w	r3, #3
 800f31e:	d131      	bne.n	800f384 <run_shortest+0x264>
 800f320:	4b44      	ldr	r3, [pc, #272]	; (800f434 <run_shortest+0x314>)
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	3b01      	subs	r3, #1
 800f326:	4a44      	ldr	r2, [pc, #272]	; (800f438 <run_shortest+0x318>)
 800f328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	dd29      	ble.n	800f384 <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f330:	4b40      	ldr	r3, [pc, #256]	; (800f434 <run_shortest+0x314>)
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	3301      	adds	r3, #1
 800f336:	4a40      	ldr	r2, [pc, #256]	; (800f438 <run_shortest+0x318>)
 800f338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	dd21      	ble.n	800f384 <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f340:	4b3c      	ldr	r3, [pc, #240]	; (800f434 <run_shortest+0x314>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	3b01      	subs	r3, #1
 800f346:	4a3c      	ldr	r2, [pc, #240]	; (800f438 <run_shortest+0x318>)
 800f348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f34c:	4b39      	ldr	r3, [pc, #228]	; (800f434 <run_shortest+0x314>)
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	3b01      	subs	r3, #1
 800f352:	3a01      	subs	r2, #1
 800f354:	4938      	ldr	r1, [pc, #224]	; (800f438 <run_shortest+0x318>)
 800f356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f35a:	4b36      	ldr	r3, [pc, #216]	; (800f434 <run_shortest+0x314>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	3301      	adds	r3, #1
 800f360:	4a35      	ldr	r2, [pc, #212]	; (800f438 <run_shortest+0x318>)
 800f362:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f366:	4b33      	ldr	r3, [pc, #204]	; (800f434 <run_shortest+0x314>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	3301      	adds	r3, #1
 800f36c:	3a01      	subs	r2, #1
 800f36e:	4932      	ldr	r1, [pc, #200]	; (800f438 <run_shortest+0x318>)
 800f370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f374:	4b2f      	ldr	r3, [pc, #188]	; (800f434 <run_shortest+0x314>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	4619      	mov	r1, r3
 800f37a:	4b2f      	ldr	r3, [pc, #188]	; (800f438 <run_shortest+0x318>)
 800f37c:	f06f 0204 	mvn.w	r2, #4
 800f380:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f384:	4b2b      	ldr	r3, [pc, #172]	; (800f434 <run_shortest+0x314>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	3b01      	subs	r3, #1
 800f38a:	4a2b      	ldr	r2, [pc, #172]	; (800f438 <run_shortest+0x318>)
 800f38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f390:	2b00      	cmp	r3, #0
 800f392:	dd43      	ble.n	800f41c <run_shortest+0x2fc>
 800f394:	4b27      	ldr	r3, [pc, #156]	; (800f434 <run_shortest+0x314>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	461a      	mov	r2, r3
 800f39a:	4b27      	ldr	r3, [pc, #156]	; (800f438 <run_shortest+0x318>)
 800f39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a0:	f113 0f02 	cmn.w	r3, #2
 800f3a4:	d13a      	bne.n	800f41c <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f3a6:	4b23      	ldr	r3, [pc, #140]	; (800f434 <run_shortest+0x314>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	4a22      	ldr	r2, [pc, #136]	; (800f438 <run_shortest+0x318>)
 800f3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3b2:	f113 0f02 	cmn.w	r3, #2
 800f3b6:	d131      	bne.n	800f41c <run_shortest+0x2fc>
 800f3b8:	4b1e      	ldr	r3, [pc, #120]	; (800f434 <run_shortest+0x314>)
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	3302      	adds	r3, #2
 800f3be:	4a1e      	ldr	r2, [pc, #120]	; (800f438 <run_shortest+0x318>)
 800f3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	dd29      	ble.n	800f41c <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f3c8:	4b1a      	ldr	r3, [pc, #104]	; (800f434 <run_shortest+0x314>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	4a1a      	ldr	r2, [pc, #104]	; (800f438 <run_shortest+0x318>)
 800f3d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3d4:	4b17      	ldr	r3, [pc, #92]	; (800f434 <run_shortest+0x314>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	3a01      	subs	r2, #1
 800f3dc:	4916      	ldr	r1, [pc, #88]	; (800f438 <run_shortest+0x318>)
 800f3de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f3e2:	4b14      	ldr	r3, [pc, #80]	; (800f434 <run_shortest+0x314>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4b13      	ldr	r3, [pc, #76]	; (800f438 <run_shortest+0x318>)
 800f3ea:	f06f 0205 	mvn.w	r2, #5
 800f3ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f3f2:	4b10      	ldr	r3, [pc, #64]	; (800f434 <run_shortest+0x314>)
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	4a0f      	ldr	r2, [pc, #60]	; (800f438 <run_shortest+0x318>)
 800f3fa:	f04f 31ff 	mov.w	r1, #4294967295
 800f3fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f402:	4b0c      	ldr	r3, [pc, #48]	; (800f434 <run_shortest+0x314>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	3302      	adds	r3, #2
 800f408:	4a0b      	ldr	r2, [pc, #44]	; (800f438 <run_shortest+0x318>)
 800f40a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f40e:	4b09      	ldr	r3, [pc, #36]	; (800f434 <run_shortest+0x314>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	3302      	adds	r3, #2
 800f414:	3a01      	subs	r2, #1
 800f416:	4908      	ldr	r1, [pc, #32]	; (800f438 <run_shortest+0x318>)
 800f418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f41c:	4b05      	ldr	r3, [pc, #20]	; (800f434 <run_shortest+0x314>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	3b01      	subs	r3, #1
 800f422:	4a05      	ldr	r2, [pc, #20]	; (800f438 <run_shortest+0x318>)
 800f424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	e007      	b.n	800f43c <run_shortest+0x31c>
 800f42c:	20000c3c 	.word	0x20000c3c
 800f430:	20000cb4 	.word	0x20000cb4
 800f434:	20000828 	.word	0x20000828
 800f438:	2000083c 	.word	0x2000083c
 800f43c:	dd43      	ble.n	800f4c6 <run_shortest+0x3a6>
 800f43e:	4b31      	ldr	r3, [pc, #196]	; (800f504 <run_shortest+0x3e4>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	461a      	mov	r2, r3
 800f444:	4b30      	ldr	r3, [pc, #192]	; (800f508 <run_shortest+0x3e8>)
 800f446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f44a:	f113 0f03 	cmn.w	r3, #3
 800f44e:	d13a      	bne.n	800f4c6 <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f450:	4b2c      	ldr	r3, [pc, #176]	; (800f504 <run_shortest+0x3e4>)
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	3301      	adds	r3, #1
 800f456:	4a2c      	ldr	r2, [pc, #176]	; (800f508 <run_shortest+0x3e8>)
 800f458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f45c:	f113 0f03 	cmn.w	r3, #3
 800f460:	d131      	bne.n	800f4c6 <run_shortest+0x3a6>
 800f462:	4b28      	ldr	r3, [pc, #160]	; (800f504 <run_shortest+0x3e4>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	3302      	adds	r3, #2
 800f468:	4a27      	ldr	r2, [pc, #156]	; (800f508 <run_shortest+0x3e8>)
 800f46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	dd29      	ble.n	800f4c6 <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f472:	4b24      	ldr	r3, [pc, #144]	; (800f504 <run_shortest+0x3e4>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	3b01      	subs	r3, #1
 800f478:	4a23      	ldr	r2, [pc, #140]	; (800f508 <run_shortest+0x3e8>)
 800f47a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f47e:	4b21      	ldr	r3, [pc, #132]	; (800f504 <run_shortest+0x3e4>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	3b01      	subs	r3, #1
 800f484:	3a01      	subs	r2, #1
 800f486:	4920      	ldr	r1, [pc, #128]	; (800f508 <run_shortest+0x3e8>)
 800f488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f48c:	4b1d      	ldr	r3, [pc, #116]	; (800f504 <run_shortest+0x3e4>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	4619      	mov	r1, r3
 800f492:	4b1d      	ldr	r3, [pc, #116]	; (800f508 <run_shortest+0x3e8>)
 800f494:	f06f 0206 	mvn.w	r2, #6
 800f498:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f49c:	4b19      	ldr	r3, [pc, #100]	; (800f504 <run_shortest+0x3e4>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	4a19      	ldr	r2, [pc, #100]	; (800f508 <run_shortest+0x3e8>)
 800f4a4:	f04f 31ff 	mov.w	r1, #4294967295
 800f4a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f4ac:	4b15      	ldr	r3, [pc, #84]	; (800f504 <run_shortest+0x3e4>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	3302      	adds	r3, #2
 800f4b2:	4a15      	ldr	r2, [pc, #84]	; (800f508 <run_shortest+0x3e8>)
 800f4b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4b8:	4b12      	ldr	r3, [pc, #72]	; (800f504 <run_shortest+0x3e4>)
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	3302      	adds	r3, #2
 800f4be:	3a01      	subs	r2, #1
 800f4c0:	4911      	ldr	r1, [pc, #68]	; (800f508 <run_shortest+0x3e8>)
 800f4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f4c6:	4b0f      	ldr	r3, [pc, #60]	; (800f504 <run_shortest+0x3e4>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	4b0e      	ldr	r3, [pc, #56]	; (800f508 <run_shortest+0x3e8>)
 800f4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4d2:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f4d6:	4b0b      	ldr	r3, [pc, #44]	; (800f504 <run_shortest+0x3e4>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	4a0a      	ldr	r2, [pc, #40]	; (800f508 <run_shortest+0x3e8>)
 800f4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d107      	bne.n	800f4f6 <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f4e6:	4b07      	ldr	r3, [pc, #28]	; (800f504 <run_shortest+0x3e4>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	4a06      	ldr	r2, [pc, #24]	; (800f508 <run_shortest+0x3e8>)
 800f4ee:	f04f 31ff 	mov.w	r1, #4294967295
 800f4f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f4f6:	4b03      	ldr	r3, [pc, #12]	; (800f504 <run_shortest+0x3e4>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	b2da      	uxtb	r2, r3
 800f4fe:	4b01      	ldr	r3, [pc, #4]	; (800f504 <run_shortest+0x3e4>)
 800f500:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f502:	e6c0      	b.n	800f286 <run_shortest+0x166>
 800f504:	20000828 	.word	0x20000828
 800f508:	2000083c 	.word	0x2000083c
			break;
 800f50c:	bf00      	nop
	}

	pass_count = 1;
 800f50e:	4b8c      	ldr	r3, [pc, #560]	; (800f740 <run_shortest+0x620>)
 800f510:	2201      	movs	r2, #1
 800f512:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f514:	7a7b      	ldrb	r3, [r7, #9]
 800f516:	2b01      	cmp	r3, #1
 800f518:	f040 836a 	bne.w	800fbf0 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f51c:	4b88      	ldr	r3, [pc, #544]	; (800f740 <run_shortest+0x620>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	461a      	mov	r2, r3
 800f522:	4b88      	ldr	r3, [pc, #544]	; (800f744 <run_shortest+0x624>)
 800f524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 81f1 	beq.w	800f910 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f52e:	4b84      	ldr	r3, [pc, #528]	; (800f740 <run_shortest+0x620>)
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	3b01      	subs	r3, #1
 800f534:	4a83      	ldr	r2, [pc, #524]	; (800f744 <run_shortest+0x624>)
 800f536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f340 81dc 	ble.w	800f8f8 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f540:	4b7f      	ldr	r3, [pc, #508]	; (800f740 <run_shortest+0x620>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	461a      	mov	r2, r3
 800f546:	4b7f      	ldr	r3, [pc, #508]	; (800f744 <run_shortest+0x624>)
 800f548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f54c:	f113 0f02 	cmn.w	r3, #2
 800f550:	d009      	beq.n	800f566 <run_shortest+0x446>
 800f552:	4b7b      	ldr	r3, [pc, #492]	; (800f740 <run_shortest+0x620>)
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	4b7a      	ldr	r3, [pc, #488]	; (800f744 <run_shortest+0x624>)
 800f55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f55e:	f113 0f03 	cmn.w	r3, #3
 800f562:	f040 81c9 	bne.w	800f8f8 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f566:	4b76      	ldr	r3, [pc, #472]	; (800f740 <run_shortest+0x620>)
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	461a      	mov	r2, r3
 800f56c:	4b75      	ldr	r3, [pc, #468]	; (800f744 <run_shortest+0x624>)
 800f56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f572:	f113 0f02 	cmn.w	r3, #2
 800f576:	d12d      	bne.n	800f5d4 <run_shortest+0x4b4>
 800f578:	4b71      	ldr	r3, [pc, #452]	; (800f740 <run_shortest+0x620>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	3301      	adds	r3, #1
 800f57e:	4a71      	ldr	r2, [pc, #452]	; (800f744 <run_shortest+0x624>)
 800f580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f584:	f113 0f03 	cmn.w	r3, #3
 800f588:	d124      	bne.n	800f5d4 <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f58a:	4b6d      	ldr	r3, [pc, #436]	; (800f740 <run_shortest+0x620>)
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	3b01      	subs	r3, #1
 800f590:	4a6c      	ldr	r2, [pc, #432]	; (800f744 <run_shortest+0x624>)
 800f592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f596:	4b6a      	ldr	r3, [pc, #424]	; (800f740 <run_shortest+0x620>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	3a01      	subs	r2, #1
 800f59e:	4969      	ldr	r1, [pc, #420]	; (800f744 <run_shortest+0x624>)
 800f5a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f5a4:	4b66      	ldr	r3, [pc, #408]	; (800f740 <run_shortest+0x620>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	4a66      	ldr	r2, [pc, #408]	; (800f744 <run_shortest+0x624>)
 800f5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d107      	bne.n	800f5c4 <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f5b4:	4b62      	ldr	r3, [pc, #392]	; (800f740 <run_shortest+0x620>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	4a62      	ldr	r2, [pc, #392]	; (800f744 <run_shortest+0x624>)
 800f5bc:	f04f 31ff 	mov.w	r1, #4294967295
 800f5c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f5c4:	4b5e      	ldr	r3, [pc, #376]	; (800f740 <run_shortest+0x620>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	4b5e      	ldr	r3, [pc, #376]	; (800f744 <run_shortest+0x624>)
 800f5cc:	f06f 0207 	mvn.w	r2, #7
 800f5d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f5d4:	4b5a      	ldr	r3, [pc, #360]	; (800f740 <run_shortest+0x620>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4b5a      	ldr	r3, [pc, #360]	; (800f744 <run_shortest+0x624>)
 800f5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5e0:	f113 0f03 	cmn.w	r3, #3
 800f5e4:	d12d      	bne.n	800f642 <run_shortest+0x522>
 800f5e6:	4b56      	ldr	r3, [pc, #344]	; (800f740 <run_shortest+0x620>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	4a55      	ldr	r2, [pc, #340]	; (800f744 <run_shortest+0x624>)
 800f5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5f2:	f113 0f02 	cmn.w	r3, #2
 800f5f6:	d124      	bne.n	800f642 <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f5f8:	4b51      	ldr	r3, [pc, #324]	; (800f740 <run_shortest+0x620>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	4a51      	ldr	r2, [pc, #324]	; (800f744 <run_shortest+0x624>)
 800f600:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f604:	4b4e      	ldr	r3, [pc, #312]	; (800f740 <run_shortest+0x620>)
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	3b01      	subs	r3, #1
 800f60a:	3a01      	subs	r2, #1
 800f60c:	494d      	ldr	r1, [pc, #308]	; (800f744 <run_shortest+0x624>)
 800f60e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f612:	4b4b      	ldr	r3, [pc, #300]	; (800f740 <run_shortest+0x620>)
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	3b01      	subs	r3, #1
 800f618:	4a4a      	ldr	r2, [pc, #296]	; (800f744 <run_shortest+0x624>)
 800f61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d107      	bne.n	800f632 <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f622:	4b47      	ldr	r3, [pc, #284]	; (800f740 <run_shortest+0x620>)
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	3b01      	subs	r3, #1
 800f628:	4a46      	ldr	r2, [pc, #280]	; (800f744 <run_shortest+0x624>)
 800f62a:	f04f 31ff 	mov.w	r1, #4294967295
 800f62e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f632:	4b43      	ldr	r3, [pc, #268]	; (800f740 <run_shortest+0x620>)
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	4619      	mov	r1, r3
 800f638:	4b42      	ldr	r3, [pc, #264]	; (800f744 <run_shortest+0x624>)
 800f63a:	f06f 0208 	mvn.w	r2, #8
 800f63e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f642:	4b3f      	ldr	r3, [pc, #252]	; (800f740 <run_shortest+0x620>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	461a      	mov	r2, r3
 800f648:	4b3e      	ldr	r3, [pc, #248]	; (800f744 <run_shortest+0x624>)
 800f64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f64e:	f113 0f02 	cmn.w	r3, #2
 800f652:	d135      	bne.n	800f6c0 <run_shortest+0x5a0>
 800f654:	4b3a      	ldr	r3, [pc, #232]	; (800f740 <run_shortest+0x620>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	3301      	adds	r3, #1
 800f65a:	4a3a      	ldr	r2, [pc, #232]	; (800f744 <run_shortest+0x624>)
 800f65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f660:	f113 0f02 	cmn.w	r3, #2
 800f664:	d12c      	bne.n	800f6c0 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f666:	4b36      	ldr	r3, [pc, #216]	; (800f740 <run_shortest+0x620>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	3b01      	subs	r3, #1
 800f66c:	4a35      	ldr	r2, [pc, #212]	; (800f744 <run_shortest+0x624>)
 800f66e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f672:	4b33      	ldr	r3, [pc, #204]	; (800f740 <run_shortest+0x620>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	3b01      	subs	r3, #1
 800f678:	3a01      	subs	r2, #1
 800f67a:	4932      	ldr	r1, [pc, #200]	; (800f744 <run_shortest+0x624>)
 800f67c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f680:	4b2f      	ldr	r3, [pc, #188]	; (800f740 <run_shortest+0x620>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	3b01      	subs	r3, #1
 800f686:	4a2f      	ldr	r2, [pc, #188]	; (800f744 <run_shortest+0x624>)
 800f688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d107      	bne.n	800f6a0 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f690:	4b2b      	ldr	r3, [pc, #172]	; (800f740 <run_shortest+0x620>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	3b01      	subs	r3, #1
 800f696:	4a2b      	ldr	r2, [pc, #172]	; (800f744 <run_shortest+0x624>)
 800f698:	f04f 31ff 	mov.w	r1, #4294967295
 800f69c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f6a0:	4b27      	ldr	r3, [pc, #156]	; (800f740 <run_shortest+0x620>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4b27      	ldr	r3, [pc, #156]	; (800f744 <run_shortest+0x624>)
 800f6a8:	f06f 0209 	mvn.w	r2, #9
 800f6ac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f6b0:	4b23      	ldr	r3, [pc, #140]	; (800f740 <run_shortest+0x620>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	4a23      	ldr	r2, [pc, #140]	; (800f744 <run_shortest+0x624>)
 800f6b8:	f04f 31ff 	mov.w	r1, #4294967295
 800f6bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f6c0:	4b1f      	ldr	r3, [pc, #124]	; (800f740 <run_shortest+0x620>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	4b1f      	ldr	r3, [pc, #124]	; (800f744 <run_shortest+0x624>)
 800f6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6cc:	f113 0f03 	cmn.w	r3, #3
 800f6d0:	d140      	bne.n	800f754 <run_shortest+0x634>
 800f6d2:	4b1b      	ldr	r3, [pc, #108]	; (800f740 <run_shortest+0x620>)
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	4a1a      	ldr	r2, [pc, #104]	; (800f744 <run_shortest+0x624>)
 800f6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6de:	f113 0f03 	cmn.w	r3, #3
 800f6e2:	d137      	bne.n	800f754 <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f6e4:	4b16      	ldr	r3, [pc, #88]	; (800f740 <run_shortest+0x620>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	4a16      	ldr	r2, [pc, #88]	; (800f744 <run_shortest+0x624>)
 800f6ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f6f0:	4b13      	ldr	r3, [pc, #76]	; (800f740 <run_shortest+0x620>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	3a01      	subs	r2, #1
 800f6f8:	4912      	ldr	r1, [pc, #72]	; (800f744 <run_shortest+0x624>)
 800f6fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f6fe:	4b10      	ldr	r3, [pc, #64]	; (800f740 <run_shortest+0x620>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	3b01      	subs	r3, #1
 800f704:	4a0f      	ldr	r2, [pc, #60]	; (800f744 <run_shortest+0x624>)
 800f706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d107      	bne.n	800f71e <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f70e:	4b0c      	ldr	r3, [pc, #48]	; (800f740 <run_shortest+0x620>)
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	3b01      	subs	r3, #1
 800f714:	4a0b      	ldr	r2, [pc, #44]	; (800f744 <run_shortest+0x624>)
 800f716:	f04f 31ff 	mov.w	r1, #4294967295
 800f71a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f71e:	4b08      	ldr	r3, [pc, #32]	; (800f740 <run_shortest+0x620>)
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	4619      	mov	r1, r3
 800f724:	4b07      	ldr	r3, [pc, #28]	; (800f744 <run_shortest+0x624>)
 800f726:	f06f 020a 	mvn.w	r2, #10
 800f72a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f72e:	4b04      	ldr	r3, [pc, #16]	; (800f740 <run_shortest+0x620>)
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	3301      	adds	r3, #1
 800f734:	4a03      	ldr	r2, [pc, #12]	; (800f744 <run_shortest+0x624>)
 800f736:	f04f 31ff 	mov.w	r1, #4294967295
 800f73a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f73e:	e009      	b.n	800f754 <run_shortest+0x634>
 800f740:	20000828 	.word	0x20000828
 800f744:	2000083c 	.word	0x2000083c
						pass_count++;
 800f748:	4b6f      	ldr	r3, [pc, #444]	; (800f908 <run_shortest+0x7e8>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	3301      	adds	r3, #1
 800f74e:	b2da      	uxtb	r2, r3
 800f750:	4b6d      	ldr	r3, [pc, #436]	; (800f908 <run_shortest+0x7e8>)
 800f752:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f754:	4b6c      	ldr	r3, [pc, #432]	; (800f908 <run_shortest+0x7e8>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	461a      	mov	r2, r3
 800f75a:	4b6c      	ldr	r3, [pc, #432]	; (800f90c <run_shortest+0x7ec>)
 800f75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f760:	2b00      	cmp	r3, #0
 800f762:	dbf1      	blt.n	800f748 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f764:	4b68      	ldr	r3, [pc, #416]	; (800f908 <run_shortest+0x7e8>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	3b01      	subs	r3, #1
 800f76a:	4a68      	ldr	r2, [pc, #416]	; (800f90c <run_shortest+0x7ec>)
 800f76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f770:	f113 0f02 	cmn.w	r3, #2
 800f774:	d15b      	bne.n	800f82e <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f776:	4b64      	ldr	r3, [pc, #400]	; (800f908 <run_shortest+0x7e8>)
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	3b02      	subs	r3, #2
 800f77c:	4a63      	ldr	r2, [pc, #396]	; (800f90c <run_shortest+0x7ec>)
 800f77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f782:	f113 0f02 	cmn.w	r3, #2
 800f786:	d12d      	bne.n	800f7e4 <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f788:	4b5f      	ldr	r3, [pc, #380]	; (800f908 <run_shortest+0x7e8>)
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	461a      	mov	r2, r3
 800f78e:	4b5f      	ldr	r3, [pc, #380]	; (800f90c <run_shortest+0x7ec>)
 800f790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f794:	4a5c      	ldr	r2, [pc, #368]	; (800f908 <run_shortest+0x7e8>)
 800f796:	7812      	ldrb	r2, [r2, #0]
 800f798:	4611      	mov	r1, r2
 800f79a:	3b01      	subs	r3, #1
 800f79c:	4a5b      	ldr	r2, [pc, #364]	; (800f90c <run_shortest+0x7ec>)
 800f79e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f7a2:	4b59      	ldr	r3, [pc, #356]	; (800f908 <run_shortest+0x7e8>)
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	4b58      	ldr	r3, [pc, #352]	; (800f90c <run_shortest+0x7ec>)
 800f7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d107      	bne.n	800f7c2 <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f7b2:	4b55      	ldr	r3, [pc, #340]	; (800f908 <run_shortest+0x7e8>)
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	4b54      	ldr	r3, [pc, #336]	; (800f90c <run_shortest+0x7ec>)
 800f7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f7be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f7c2:	4b51      	ldr	r3, [pc, #324]	; (800f908 <run_shortest+0x7e8>)
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	3b01      	subs	r3, #1
 800f7c8:	4a50      	ldr	r2, [pc, #320]	; (800f90c <run_shortest+0x7ec>)
 800f7ca:	f06f 010d 	mvn.w	r1, #13
 800f7ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f7d2:	4b4d      	ldr	r3, [pc, #308]	; (800f908 <run_shortest+0x7e8>)
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	3b02      	subs	r3, #2
 800f7d8:	4a4c      	ldr	r2, [pc, #304]	; (800f90c <run_shortest+0x7ec>)
 800f7da:	f04f 31ff 	mov.w	r1, #4294967295
 800f7de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f7e2:	e024      	b.n	800f82e <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f7e4:	4b48      	ldr	r3, [pc, #288]	; (800f908 <run_shortest+0x7e8>)
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	4b48      	ldr	r3, [pc, #288]	; (800f90c <run_shortest+0x7ec>)
 800f7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f0:	4a45      	ldr	r2, [pc, #276]	; (800f908 <run_shortest+0x7e8>)
 800f7f2:	7812      	ldrb	r2, [r2, #0]
 800f7f4:	4611      	mov	r1, r2
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	4a44      	ldr	r2, [pc, #272]	; (800f90c <run_shortest+0x7ec>)
 800f7fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f7fe:	4b42      	ldr	r3, [pc, #264]	; (800f908 <run_shortest+0x7e8>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	4b41      	ldr	r3, [pc, #260]	; (800f90c <run_shortest+0x7ec>)
 800f806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d107      	bne.n	800f81e <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f80e:	4b3e      	ldr	r3, [pc, #248]	; (800f908 <run_shortest+0x7e8>)
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	4619      	mov	r1, r3
 800f814:	4b3d      	ldr	r3, [pc, #244]	; (800f90c <run_shortest+0x7ec>)
 800f816:	f04f 32ff 	mov.w	r2, #4294967295
 800f81a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f81e:	4b3a      	ldr	r3, [pc, #232]	; (800f908 <run_shortest+0x7e8>)
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	3b01      	subs	r3, #1
 800f824:	4a39      	ldr	r2, [pc, #228]	; (800f90c <run_shortest+0x7ec>)
 800f826:	f06f 010b 	mvn.w	r1, #11
 800f82a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f82e:	4b36      	ldr	r3, [pc, #216]	; (800f908 <run_shortest+0x7e8>)
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	3b01      	subs	r3, #1
 800f834:	4a35      	ldr	r2, [pc, #212]	; (800f90c <run_shortest+0x7ec>)
 800f836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f83a:	f113 0f03 	cmn.w	r3, #3
 800f83e:	d15b      	bne.n	800f8f8 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f840:	4b31      	ldr	r3, [pc, #196]	; (800f908 <run_shortest+0x7e8>)
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	3b02      	subs	r3, #2
 800f846:	4a31      	ldr	r2, [pc, #196]	; (800f90c <run_shortest+0x7ec>)
 800f848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f84c:	f113 0f03 	cmn.w	r3, #3
 800f850:	d12d      	bne.n	800f8ae <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f852:	4b2d      	ldr	r3, [pc, #180]	; (800f908 <run_shortest+0x7e8>)
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	461a      	mov	r2, r3
 800f858:	4b2c      	ldr	r3, [pc, #176]	; (800f90c <run_shortest+0x7ec>)
 800f85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f85e:	4a2a      	ldr	r2, [pc, #168]	; (800f908 <run_shortest+0x7e8>)
 800f860:	7812      	ldrb	r2, [r2, #0]
 800f862:	4611      	mov	r1, r2
 800f864:	3b01      	subs	r3, #1
 800f866:	4a29      	ldr	r2, [pc, #164]	; (800f90c <run_shortest+0x7ec>)
 800f868:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f86c:	4b26      	ldr	r3, [pc, #152]	; (800f908 <run_shortest+0x7e8>)
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	461a      	mov	r2, r3
 800f872:	4b26      	ldr	r3, [pc, #152]	; (800f90c <run_shortest+0x7ec>)
 800f874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d107      	bne.n	800f88c <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f87c:	4b22      	ldr	r3, [pc, #136]	; (800f908 <run_shortest+0x7e8>)
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	4619      	mov	r1, r3
 800f882:	4b22      	ldr	r3, [pc, #136]	; (800f90c <run_shortest+0x7ec>)
 800f884:	f04f 32ff 	mov.w	r2, #4294967295
 800f888:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f88c:	4b1e      	ldr	r3, [pc, #120]	; (800f908 <run_shortest+0x7e8>)
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	3b01      	subs	r3, #1
 800f892:	4a1e      	ldr	r2, [pc, #120]	; (800f90c <run_shortest+0x7ec>)
 800f894:	f06f 010e 	mvn.w	r1, #14
 800f898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f89c:	4b1a      	ldr	r3, [pc, #104]	; (800f908 <run_shortest+0x7e8>)
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	3b02      	subs	r3, #2
 800f8a2:	4a1a      	ldr	r2, [pc, #104]	; (800f90c <run_shortest+0x7ec>)
 800f8a4:	f04f 31ff 	mov.w	r1, #4294967295
 800f8a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f8ac:	e024      	b.n	800f8f8 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f8ae:	4b16      	ldr	r3, [pc, #88]	; (800f908 <run_shortest+0x7e8>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	4b15      	ldr	r3, [pc, #84]	; (800f90c <run_shortest+0x7ec>)
 800f8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ba:	4a13      	ldr	r2, [pc, #76]	; (800f908 <run_shortest+0x7e8>)
 800f8bc:	7812      	ldrb	r2, [r2, #0]
 800f8be:	4611      	mov	r1, r2
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	4a12      	ldr	r2, [pc, #72]	; (800f90c <run_shortest+0x7ec>)
 800f8c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f8c8:	4b0f      	ldr	r3, [pc, #60]	; (800f908 <run_shortest+0x7e8>)
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	4b0f      	ldr	r3, [pc, #60]	; (800f90c <run_shortest+0x7ec>)
 800f8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d107      	bne.n	800f8e8 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f8d8:	4b0b      	ldr	r3, [pc, #44]	; (800f908 <run_shortest+0x7e8>)
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4b0b      	ldr	r3, [pc, #44]	; (800f90c <run_shortest+0x7ec>)
 800f8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f8e8:	4b07      	ldr	r3, [pc, #28]	; (800f908 <run_shortest+0x7e8>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	4a07      	ldr	r2, [pc, #28]	; (800f90c <run_shortest+0x7ec>)
 800f8f0:	f06f 010c 	mvn.w	r1, #12
 800f8f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f8f8:	4b03      	ldr	r3, [pc, #12]	; (800f908 <run_shortest+0x7e8>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	b2da      	uxtb	r2, r3
 800f900:	4b01      	ldr	r3, [pc, #4]	; (800f908 <run_shortest+0x7e8>)
 800f902:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f904:	e60a      	b.n	800f51c <run_shortest+0x3fc>
 800f906:	bf00      	nop
 800f908:	20000828 	.word	0x20000828
 800f90c:	2000083c 	.word	0x2000083c
				break;
 800f910:	bf00      	nop
		}

		pass_count = 1;
 800f912:	4ba3      	ldr	r3, [pc, #652]	; (800fba0 <run_shortest+0xa80>)
 800f914:	2201      	movs	r2, #1
 800f916:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f918:	4ba1      	ldr	r3, [pc, #644]	; (800fba0 <run_shortest+0xa80>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	461a      	mov	r2, r3
 800f91e:	4ba1      	ldr	r3, [pc, #644]	; (800fba4 <run_shortest+0xa84>)
 800f920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 813f 	beq.w	800fba8 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f92a:	4b9d      	ldr	r3, [pc, #628]	; (800fba0 <run_shortest+0xa80>)
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	461a      	mov	r2, r3
 800f930:	4b9c      	ldr	r3, [pc, #624]	; (800fba4 <run_shortest+0xa84>)
 800f932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f936:	f113 0f08 	cmn.w	r3, #8
 800f93a:	d01b      	beq.n	800f974 <run_shortest+0x854>
 800f93c:	4b98      	ldr	r3, [pc, #608]	; (800fba0 <run_shortest+0xa80>)
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	461a      	mov	r2, r3
 800f942:	4b98      	ldr	r3, [pc, #608]	; (800fba4 <run_shortest+0xa84>)
 800f944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f948:	f113 0f09 	cmn.w	r3, #9
 800f94c:	d012      	beq.n	800f974 <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f94e:	4b94      	ldr	r3, [pc, #592]	; (800fba0 <run_shortest+0xa80>)
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	461a      	mov	r2, r3
 800f954:	4b93      	ldr	r3, [pc, #588]	; (800fba4 <run_shortest+0xa84>)
 800f956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f95a:	f113 0f0a 	cmn.w	r3, #10
 800f95e:	d009      	beq.n	800f974 <run_shortest+0x854>
 800f960:	4b8f      	ldr	r3, [pc, #572]	; (800fba0 <run_shortest+0xa80>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	461a      	mov	r2, r3
 800f966:	4b8f      	ldr	r3, [pc, #572]	; (800fba4 <run_shortest+0xa84>)
 800f968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f96c:	f113 0f0b 	cmn.w	r3, #11
 800f970:	f040 810f 	bne.w	800fb92 <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f974:	4b8a      	ldr	r3, [pc, #552]	; (800fba0 <run_shortest+0xa80>)
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	461a      	mov	r2, r3
 800f97a:	4b8a      	ldr	r3, [pc, #552]	; (800fba4 <run_shortest+0xa84>)
 800f97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f980:	f113 0f08 	cmn.w	r3, #8
 800f984:	d008      	beq.n	800f998 <run_shortest+0x878>
 800f986:	4b86      	ldr	r3, [pc, #536]	; (800fba0 <run_shortest+0xa80>)
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	461a      	mov	r2, r3
 800f98c:	4b85      	ldr	r3, [pc, #532]	; (800fba4 <run_shortest+0xa84>)
 800f98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f992:	f113 0f0a 	cmn.w	r3, #10
 800f996:	d102      	bne.n	800f99e <run_shortest+0x87e>
					slant_direction = -3;
 800f998:	f06f 0302 	mvn.w	r3, #2
 800f99c:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f99e:	4b80      	ldr	r3, [pc, #512]	; (800fba0 <run_shortest+0xa80>)
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	4b7f      	ldr	r3, [pc, #508]	; (800fba4 <run_shortest+0xa84>)
 800f9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9aa:	f113 0f09 	cmn.w	r3, #9
 800f9ae:	d008      	beq.n	800f9c2 <run_shortest+0x8a2>
 800f9b0:	4b7b      	ldr	r3, [pc, #492]	; (800fba0 <run_shortest+0xa80>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	4b7b      	ldr	r3, [pc, #492]	; (800fba4 <run_shortest+0xa84>)
 800f9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9bc:	f113 0f0b 	cmn.w	r3, #11
 800f9c0:	d102      	bne.n	800f9c8 <run_shortest+0x8a8>
					slant_direction = -2;
 800f9c2:	f06f 0301 	mvn.w	r3, #1
 800f9c6:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800f9c8:	4b75      	ldr	r3, [pc, #468]	; (800fba0 <run_shortest+0xa80>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	4b73      	ldr	r3, [pc, #460]	; (800fba0 <run_shortest+0xa80>)
 800f9d2:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f9d4:	4b72      	ldr	r3, [pc, #456]	; (800fba0 <run_shortest+0xa80>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	4b72      	ldr	r3, [pc, #456]	; (800fba4 <run_shortest+0xa84>)
 800f9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e4:	d105      	bne.n	800f9f2 <run_shortest+0x8d2>
					pass_count++;
 800f9e6:	4b6e      	ldr	r3, [pc, #440]	; (800fba0 <run_shortest+0xa80>)
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	4b6c      	ldr	r3, [pc, #432]	; (800fba0 <run_shortest+0xa80>)
 800f9f0:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f9f2:	4b6b      	ldr	r3, [pc, #428]	; (800fba0 <run_shortest+0xa80>)
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	4b6a      	ldr	r3, [pc, #424]	; (800fba4 <run_shortest+0xa84>)
 800f9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa02:	d105      	bne.n	800fa10 <run_shortest+0x8f0>
					pass_count++;
 800fa04:	4b66      	ldr	r3, [pc, #408]	; (800fba0 <run_shortest+0xa80>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	b2da      	uxtb	r2, r3
 800fa0c:	4b64      	ldr	r3, [pc, #400]	; (800fba0 <run_shortest+0xa80>)
 800fa0e:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800fa10:	4b63      	ldr	r3, [pc, #396]	; (800fba0 <run_shortest+0xa80>)
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	461a      	mov	r2, r3
 800fa16:	4b63      	ldr	r3, [pc, #396]	; (800fba4 <run_shortest+0xa84>)
 800fa18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa1c:	f113 0f03 	cmn.w	r3, #3
 800fa20:	f2c0 80ad 	blt.w	800fb7e <run_shortest+0xa5e>
					slant_count = pass_count;
 800fa24:	4b5e      	ldr	r3, [pc, #376]	; (800fba0 <run_shortest+0xa80>)
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800fa2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa30:	4a5c      	ldr	r2, [pc, #368]	; (800fba4 <run_shortest+0xa84>)
 800fa32:	2133      	movs	r1, #51	; 0x33
 800fa34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800fa38:	4b59      	ldr	r3, [pc, #356]	; (800fba0 <run_shortest+0xa80>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	4b57      	ldr	r3, [pc, #348]	; (800fba0 <run_shortest+0xa80>)
 800fa42:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800fa44:	e09b      	b.n	800fb7e <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa46:	4b56      	ldr	r3, [pc, #344]	; (800fba0 <run_shortest+0xa80>)
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	4b55      	ldr	r3, [pc, #340]	; (800fba4 <run_shortest+0xa84>)
 800fa4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa56:	d105      	bne.n	800fa64 <run_shortest+0x944>
						pass_count++;
 800fa58:	4b51      	ldr	r3, [pc, #324]	; (800fba0 <run_shortest+0xa80>)
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	b2da      	uxtb	r2, r3
 800fa60:	4b4f      	ldr	r3, [pc, #316]	; (800fba0 <run_shortest+0xa80>)
 800fa62:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800fa64:	4b4e      	ldr	r3, [pc, #312]	; (800fba0 <run_shortest+0xa80>)
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	4b4e      	ldr	r3, [pc, #312]	; (800fba4 <run_shortest+0xa84>)
 800fa6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa70:	f113 0f0c 	cmn.w	r3, #12
 800fa74:	f000 808d 	beq.w	800fb92 <run_shortest+0xa72>
 800fa78:	4b49      	ldr	r3, [pc, #292]	; (800fba0 <run_shortest+0xa80>)
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	4b49      	ldr	r3, [pc, #292]	; (800fba4 <run_shortest+0xa84>)
 800fa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa84:	f113 0f0d 	cmn.w	r3, #13
 800fa88:	f000 8083 	beq.w	800fb92 <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800fa8c:	4b44      	ldr	r3, [pc, #272]	; (800fba0 <run_shortest+0xa80>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	461a      	mov	r2, r3
 800fa92:	4b44      	ldr	r3, [pc, #272]	; (800fba4 <run_shortest+0xa84>)
 800fa94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa98:	f113 0f0e 	cmn.w	r3, #14
 800fa9c:	d079      	beq.n	800fb92 <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800fa9e:	4b40      	ldr	r3, [pc, #256]	; (800fba0 <run_shortest+0xa80>)
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	4b3f      	ldr	r3, [pc, #252]	; (800fba4 <run_shortest+0xa84>)
 800faa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faaa:	f113 0f0f 	cmn.w	r3, #15
 800faae:	d070      	beq.n	800fb92 <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800fab0:	4b3b      	ldr	r3, [pc, #236]	; (800fba0 <run_shortest+0xa80>)
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	461a      	mov	r2, r3
 800fab6:	4b3b      	ldr	r3, [pc, #236]	; (800fba4 <run_shortest+0xa84>)
 800fab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d127      	bne.n	800fb12 <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800fac2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fac6:	4a37      	ldr	r2, [pc, #220]	; (800fba4 <run_shortest+0xa84>)
 800fac8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800facc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fad0:	3a01      	subs	r2, #1
 800fad2:	4934      	ldr	r1, [pc, #208]	; (800fba4 <run_shortest+0xa84>)
 800fad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800fad8:	4b31      	ldr	r3, [pc, #196]	; (800fba0 <run_shortest+0xa80>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800fae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae2:	f113 0f02 	cmn.w	r3, #2
 800fae6:	d107      	bne.n	800faf8 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800fae8:	4b2d      	ldr	r3, [pc, #180]	; (800fba0 <run_shortest+0xa80>)
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	4619      	mov	r1, r3
 800faee:	4b2d      	ldr	r3, [pc, #180]	; (800fba4 <run_shortest+0xa84>)
 800faf0:	f06f 020f 	mvn.w	r2, #15
 800faf4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800faf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafa:	f113 0f03 	cmn.w	r3, #3
 800fafe:	d138      	bne.n	800fb72 <run_shortest+0xa52>
							pass[pass_count] = -17;
 800fb00:	4b27      	ldr	r3, [pc, #156]	; (800fba0 <run_shortest+0xa80>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	4619      	mov	r1, r3
 800fb06:	4b27      	ldr	r3, [pc, #156]	; (800fba4 <run_shortest+0xa84>)
 800fb08:	f06f 0210 	mvn.w	r2, #16
 800fb0c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb10:	e02f      	b.n	800fb72 <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800fb12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb16:	4a23      	ldr	r2, [pc, #140]	; (800fba4 <run_shortest+0xa84>)
 800fb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb1c:	2b31      	cmp	r3, #49	; 0x31
 800fb1e:	dd08      	ble.n	800fb32 <run_shortest+0xa12>
							pass[pass_count] = -1;
 800fb20:	4b1f      	ldr	r3, [pc, #124]	; (800fba0 <run_shortest+0xa80>)
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	4619      	mov	r1, r3
 800fb26:	4b1f      	ldr	r3, [pc, #124]	; (800fba4 <run_shortest+0xa84>)
 800fb28:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb30:	e009      	b.n	800fb46 <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800fb32:	4b1b      	ldr	r3, [pc, #108]	; (800fba0 <run_shortest+0xa80>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800fb3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb3e:	4a19      	ldr	r2, [pc, #100]	; (800fba4 <run_shortest+0xa84>)
 800fb40:	2132      	movs	r1, #50	; 0x32
 800fb42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800fb46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb4a:	4a16      	ldr	r2, [pc, #88]	; (800fba4 <run_shortest+0xa84>)
 800fb4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb54:	3201      	adds	r2, #1
 800fb56:	4913      	ldr	r1, [pc, #76]	; (800fba4 <run_shortest+0xa84>)
 800fb58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800fb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5e:	f113 0f02 	cmn.w	r3, #2
 800fb62:	d103      	bne.n	800fb6c <run_shortest+0xa4c>
							slant_direction = -3;
 800fb64:	f06f 0302 	mvn.w	r3, #2
 800fb68:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb6a:	e002      	b.n	800fb72 <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800fb6c:	f06f 0301 	mvn.w	r3, #1
 800fb70:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800fb72:	4b0b      	ldr	r3, [pc, #44]	; (800fba0 <run_shortest+0xa80>)
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	3301      	adds	r3, #1
 800fb78:	b2da      	uxtb	r2, r3
 800fb7a:	4b09      	ldr	r3, [pc, #36]	; (800fba0 <run_shortest+0xa80>)
 800fb7c:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800fb7e:	4b08      	ldr	r3, [pc, #32]	; (800fba0 <run_shortest+0xa80>)
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	461a      	mov	r2, r3
 800fb84:	4b07      	ldr	r3, [pc, #28]	; (800fba4 <run_shortest+0xa84>)
 800fb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb8a:	f113 0f03 	cmn.w	r3, #3
 800fb8e:	f6bf af5a 	bge.w	800fa46 <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800fb92:	4b03      	ldr	r3, [pc, #12]	; (800fba0 <run_shortest+0xa80>)
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	3301      	adds	r3, #1
 800fb98:	b2da      	uxtb	r2, r3
 800fb9a:	4b01      	ldr	r3, [pc, #4]	; (800fba0 <run_shortest+0xa80>)
 800fb9c:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fb9e:	e6bb      	b.n	800f918 <run_shortest+0x7f8>
 800fba0:	20000828 	.word	0x20000828
 800fba4:	2000083c 	.word	0x2000083c
				break;
 800fba8:	bf00      	nop
		}
		pass_count=0;
 800fbaa:	4bb3      	ldr	r3, [pc, #716]	; (800fe78 <run_shortest+0xd58>)
 800fbac:	2200      	movs	r2, #0
 800fbae:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800fbb0:	4bb1      	ldr	r3, [pc, #708]	; (800fe78 <run_shortest+0xd58>)
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	4bb1      	ldr	r3, [pc, #708]	; (800fe7c <run_shortest+0xd5c>)
 800fbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbbc:	2b32      	cmp	r3, #50	; 0x32
 800fbbe:	d107      	bne.n	800fbd0 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800fbc0:	4bad      	ldr	r3, [pc, #692]	; (800fe78 <run_shortest+0xd58>)
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	4bad      	ldr	r3, [pc, #692]	; (800fe7c <run_shortest+0xd5c>)
 800fbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbcc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800fbd0:	4ba9      	ldr	r3, [pc, #676]	; (800fe78 <run_shortest+0xd58>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	4ba9      	ldr	r3, [pc, #676]	; (800fe7c <run_shortest+0xd5c>)
 800fbd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d006      	beq.n	800fbee <run_shortest+0xace>
				break;
			}
			pass_count++;
 800fbe0:	4ba5      	ldr	r3, [pc, #660]	; (800fe78 <run_shortest+0xd58>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	b2da      	uxtb	r2, r3
 800fbe8:	4ba3      	ldr	r3, [pc, #652]	; (800fe78 <run_shortest+0xd58>)
 800fbea:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800fbec:	e7e0      	b.n	800fbb0 <run_shortest+0xa90>
				break;
 800fbee:	bf00      	nop
		}

	}
}
	int j = 0;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fbf4:	e00b      	b.n	800fc0e <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800fbf6:	4aa1      	ldr	r2, [pc, #644]	; (800fe7c <run_shortest+0xd5c>)
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc02:	489f      	ldr	r0, [pc, #636]	; (800fe80 <run_shortest+0xd60>)
 800fc04:	f00f feae 	bl	801f964 <iprintf>
		j++;
 800fc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc0e:	4a9b      	ldr	r2, [pc, #620]	; (800fe7c <run_shortest+0xd5c>)
 800fc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1ed      	bne.n	800fbf6 <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc1e:	e002      	b.n	800fc26 <run_shortest+0xb06>
		pass_count2++;
 800fc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc22:	3301      	adds	r3, #1
 800fc24:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc26:	4a95      	ldr	r2, [pc, #596]	; (800fe7c <run_shortest+0xd5c>)
 800fc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc32:	d0f5      	beq.n	800fc20 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fc34:	4a91      	ldr	r2, [pc, #580]	; (800fe7c <run_shortest+0xd5c>)
 800fc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc3c:	934e      	str	r3, [sp, #312]	; 0x138
 800fc3e:	4668      	mov	r0, sp
 800fc40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fc44:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fc48:	4619      	mov	r1, r3
 800fc4a:	f00f fa0b 	bl	801f064 <memcpy>
 800fc4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fc52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc54:	f007 f9b0 	bl	8016fb8 <get_center_velocity>
 800fc58:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fc5c:	6a38      	ldr	r0, [r7, #32]
 800fc5e:	f7f0 fc9b 	bl	8000598 <__aeabi_f2d>
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc68:	4886      	ldr	r0, [pc, #536]	; (800fe84 <run_shortest+0xd64>)
 800fc6a:	f00f fe7b 	bl	801f964 <iprintf>

	HAL_Delay(500);
 800fc6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fc72:	f007 ff25 	bl	8017ac0 <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fc76:	2001      	movs	r0, #1
 800fc78:	f7f7 ff44 	bl	8007b04 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fc7c:	2003      	movs	r0, #3
 800fc7e:	f7f7 ff73 	bl	8007b68 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fc82:	2003      	movs	r0, #3
 800fc84:	f7f7 ff48 	bl	8007b18 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fc88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fc8c:	f7f8 fa6c 	bl	8008168 <wait_ms_NoReset>
	no_safty = 1;
 800fc90:	4b7d      	ldr	r3, [pc, #500]	; (800fe88 <run_shortest+0xd68>)
 800fc92:	2201      	movs	r2, #1
 800fc94:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fc96:	4b7c      	ldr	r3, [pc, #496]	; (800fe88 <run_shortest+0xd68>)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fc9c:	f7f4 fe1e 	bl	80048dc <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fca0:	7abb      	ldrb	r3, [r7, #10]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d12d      	bne.n	800fd02 <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f7f0 fc76 	bl	8000598 <__aeabi_f2d>
 800fcac:	a370      	add	r3, pc, #448	; (adr r3, 800fe70 <run_shortest+0xd50>)
 800fcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb2:	f7f0 fcc9 	bl	8000648 <__aeabi_dmul>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	460b      	mov	r3, r1
 800fcba:	4614      	mov	r4, r2
 800fcbc:	461d      	mov	r5, r3
 800fcbe:	4b73      	ldr	r3, [pc, #460]	; (800fe8c <run_shortest+0xd6c>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7f0 fc68 	bl	8000598 <__aeabi_f2d>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	460b      	mov	r3, r1
 800fccc:	4620      	mov	r0, r4
 800fcce:	4629      	mov	r1, r5
 800fcd0:	f7f0 fde4 	bl	800089c <__aeabi_ddiv>
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	4610      	mov	r0, r2
 800fcda:	4619      	mov	r1, r3
 800fcdc:	f7f0 ff8c 	bl	8000bf8 <__aeabi_d2f>
 800fce0:	4603      	mov	r3, r0
 800fce2:	ee00 3a10 	vmov	s0, r3
 800fce6:	f7f7 ffab 	bl	8007c40 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fcea:	f7f7 ff95 	bl	8007c18 <pl_FunMotor_start>
		HAL_Delay(600);
 800fcee:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fcf2:	f007 fee5 	bl	8017ac0 <HAL_Delay>
		reset_gyro();
 800fcf6:	f7f1 fd83 	bl	8001800 <reset_gyro>
		reset_speed();
 800fcfa:	f7f1 f98d 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fcfe:	f7f4 fded 	bl	80048dc <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fd02:	4b63      	ldr	r3, [pc, #396]	; (800fe90 <run_shortest+0xd70>)
 800fd04:	2201      	movs	r2, #1
 800fd06:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fd08:	4b62      	ldr	r3, [pc, #392]	; (800fe94 <run_shortest+0xd74>)
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fd0e:	4b62      	ldr	r3, [pc, #392]	; (800fe98 <run_shortest+0xd78>)
 800fd10:	2212      	movs	r2, #18
 800fd12:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fd14:	4b61      	ldr	r3, [pc, #388]	; (800fe9c <run_shortest+0xd7c>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fd1a:	4b57      	ldr	r3, [pc, #348]	; (800fe78 <run_shortest+0xd58>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fd20:	2301      	movs	r3, #1
 800fd22:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fd24:	2300      	movs	r3, #0
 800fd26:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fd30:	2300      	movs	r3, #0
 800fd32:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd34:	e002      	b.n	800fd3c <run_shortest+0xc1c>
		pass_count2++;
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	3301      	adds	r3, #1
 800fd3a:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd3c:	4a4f      	ldr	r2, [pc, #316]	; (800fe7c <run_shortest+0xd5c>)
 800fd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd48:	d0f5      	beq.n	800fd36 <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fd4a:	4a4c      	ldr	r2, [pc, #304]	; (800fe7c <run_shortest+0xd5c>)
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd52:	934e      	str	r3, [sp, #312]	; 0x138
 800fd54:	4668      	mov	r0, sp
 800fd56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fd5a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fd5e:	4619      	mov	r1, r3
 800fd60:	f00f f980 	bl	801f064 <memcpy>
 800fd64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fd68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd6a:	f007 f925 	bl	8016fb8 <get_center_velocity>
 800fd6e:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fd72:	edd7 7a08 	vldr	s15, [r7, #32]
 800fd76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fd7a:	ee17 0a90 	vmov	r0, s15
 800fd7e:	f7f0 fc0b 	bl	8000598 <__aeabi_f2d>
 800fd82:	f04f 0200 	mov.w	r2, #0
 800fd86:	4b46      	ldr	r3, [pc, #280]	; (800fea0 <run_shortest+0xd80>)
 800fd88:	f7f0 fd88 	bl	800089c <__aeabi_ddiv>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	460b      	mov	r3, r1
 800fd90:	4610      	mov	r0, r2
 800fd92:	4619      	mov	r1, r3
 800fd94:	f04f 0200 	mov.w	r2, #0
 800fd98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fd9c:	f7f0 fd7e 	bl	800089c <__aeabi_ddiv>
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	4610      	mov	r0, r2
 800fda6:	4619      	mov	r1, r3
 800fda8:	f7f0 ff26 	bl	8000bf8 <__aeabi_d2f>
 800fdac:	4603      	mov	r3, r0
 800fdae:	69b8      	ldr	r0, [r7, #24]
 800fdb0:	ee02 3a10 	vmov	s4, r3
 800fdb4:	edd7 1a08 	vldr	s3, [r7, #32]
 800fdb8:	ed97 1a08 	vldr	s2, [r7, #32]
 800fdbc:	eddf 0a39 	vldr	s1, [pc, #228]	; 800fea4 <run_shortest+0xd84>
 800fdc0:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fdc4:	f7f3 f96e 	bl	80030a4 <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fdc8:	4b2b      	ldr	r3, [pc, #172]	; (800fe78 <run_shortest+0xd58>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fdd0:	e002      	b.n	800fdd8 <run_shortest+0xcb8>
			pass_count2++;
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fdd8:	4a28      	ldr	r2, [pc, #160]	; (800fe7c <run_shortest+0xd5c>)
 800fdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fde4:	d0f5      	beq.n	800fdd2 <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fde6:	4a25      	ldr	r2, [pc, #148]	; (800fe7c <run_shortest+0xd5c>)
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdee:	934e      	str	r3, [sp, #312]	; 0x138
 800fdf0:	4668      	mov	r0, sp
 800fdf2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fdf6:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	f00f f932 	bl	801f064 <memcpy>
 800fe00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe06:	f007 f8d7 	bl	8016fb8 <get_center_velocity>
 800fe0a:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fe0e:	4b1a      	ldr	r3, [pc, #104]	; (800fe78 <run_shortest+0xd58>)
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	461a      	mov	r2, r3
 800fe14:	4b19      	ldr	r3, [pc, #100]	; (800fe7c <run_shortest+0xd5c>)
 800fe16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe1e:	d106      	bne.n	800fe2e <run_shortest+0xd0e>
			pass_count++;
 800fe20:	4b15      	ldr	r3, [pc, #84]	; (800fe78 <run_shortest+0xd58>)
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	3301      	adds	r3, #1
 800fe26:	b2da      	uxtb	r2, r3
 800fe28:	4b13      	ldr	r3, [pc, #76]	; (800fe78 <run_shortest+0xd58>)
 800fe2a:	701a      	strb	r2, [r3, #0]
 800fe2c:	e2a1      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fe2e:	4b12      	ldr	r3, [pc, #72]	; (800fe78 <run_shortest+0xd58>)
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	461a      	mov	r2, r3
 800fe34:	4b11      	ldr	r3, [pc, #68]	; (800fe7c <run_shortest+0xd5c>)
 800fe36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe3a:	f113 0f02 	cmn.w	r3, #2
 800fe3e:	d133      	bne.n	800fea8 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fe40:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe44:	9303      	str	r3, [sp, #12]
 800fe46:	2301      	movs	r3, #1
 800fe48:	9302      	str	r3, [sp, #8]
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe50:	9300      	str	r3, [sp, #0]
 800fe52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fe56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe58:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe5c:	f7fa fa14 	bl	800a288 <slalomR>

			pass_count++;
 800fe60:	4b05      	ldr	r3, [pc, #20]	; (800fe78 <run_shortest+0xd58>)
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	3301      	adds	r3, #1
 800fe66:	b2da      	uxtb	r2, r3
 800fe68:	4b03      	ldr	r3, [pc, #12]	; (800fe78 <run_shortest+0xd58>)
 800fe6a:	701a      	strb	r2, [r3, #0]
 800fe6c:	e281      	b.n	8010372 <run_shortest+0x1252>
 800fe6e:	bf00      	nop
 800fe70:	cccccccd 	.word	0xcccccccd
 800fe74:	4010cccc 	.word	0x4010cccc
 800fe78:	20000828 	.word	0x20000828
 800fe7c:	2000083c 	.word	0x2000083c
 800fe80:	080221a8 	.word	0x080221a8
 800fe84:	080221c0 	.word	0x080221c0
 800fe88:	20000806 	.word	0x20000806
 800fe8c:	200004d4 	.word	0x200004d4
 800fe90:	20000834 	.word	0x20000834
 800fe94:	20000808 	.word	0x20000808
 800fe98:	2000d96c 	.word	0x2000d96c
 800fe9c:	20000830 	.word	0x20000830
 800fea0:	40290000 	.word	0x40290000
 800fea4:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800fea8:	4baa      	ldr	r3, [pc, #680]	; (8010154 <run_shortest+0x1034>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	461a      	mov	r2, r3
 800feae:	4baa      	ldr	r3, [pc, #680]	; (8010158 <run_shortest+0x1038>)
 800feb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feb4:	f113 0f03 	cmn.w	r3, #3
 800feb8:	d116      	bne.n	800fee8 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800feba:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800febe:	9303      	str	r3, [sp, #12]
 800fec0:	2301      	movs	r3, #1
 800fec2:	9302      	str	r3, [sp, #8]
 800fec4:	2300      	movs	r3, #0
 800fec6:	9301      	str	r3, [sp, #4]
 800fec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fed2:	ed97 0a08 	vldr	s0, [r7, #32]
 800fed6:	f7fa fb91 	bl	800a5fc <slalomL>

			pass_count++;
 800feda:	4b9e      	ldr	r3, [pc, #632]	; (8010154 <run_shortest+0x1034>)
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	3301      	adds	r3, #1
 800fee0:	b2da      	uxtb	r2, r3
 800fee2:	4b9c      	ldr	r3, [pc, #624]	; (8010154 <run_shortest+0x1034>)
 800fee4:	701a      	strb	r2, [r3, #0]
 800fee6:	e244      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800fee8:	4b9a      	ldr	r3, [pc, #616]	; (8010154 <run_shortest+0x1034>)
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	461a      	mov	r2, r3
 800feee:	4b9a      	ldr	r3, [pc, #616]	; (8010158 <run_shortest+0x1038>)
 800fef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fef4:	f113 0f04 	cmn.w	r3, #4
 800fef8:	d115      	bne.n	800ff26 <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800fefa:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fefe:	9302      	str	r3, [sp, #8]
 800ff00:	2300      	movs	r3, #0
 800ff02:	9301      	str	r3, [sp, #4]
 800ff04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ff0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff10:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff14:	f7fa fd28 	bl	800a968 <turn90R>
			pass_count++;
 800ff18:	4b8e      	ldr	r3, [pc, #568]	; (8010154 <run_shortest+0x1034>)
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	4b8c      	ldr	r3, [pc, #560]	; (8010154 <run_shortest+0x1034>)
 800ff22:	701a      	strb	r2, [r3, #0]
 800ff24:	e225      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800ff26:	4b8b      	ldr	r3, [pc, #556]	; (8010154 <run_shortest+0x1034>)
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	4b8a      	ldr	r3, [pc, #552]	; (8010158 <run_shortest+0x1038>)
 800ff2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff32:	f113 0f05 	cmn.w	r3, #5
 800ff36:	d115      	bne.n	800ff64 <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800ff38:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff3c:	9302      	str	r3, [sp, #8]
 800ff3e:	2300      	movs	r3, #0
 800ff40:	9301      	str	r3, [sp, #4]
 800ff42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff46:	9300      	str	r3, [sp, #0]
 800ff48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ff4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff4e:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff52:	f7fa fe73 	bl	800ac3c <turn90L>
			pass_count++;
 800ff56:	4b7f      	ldr	r3, [pc, #508]	; (8010154 <run_shortest+0x1034>)
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	4b7d      	ldr	r3, [pc, #500]	; (8010154 <run_shortest+0x1034>)
 800ff60:	701a      	strb	r2, [r3, #0]
 800ff62:	e206      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800ff64:	4b7b      	ldr	r3, [pc, #492]	; (8010154 <run_shortest+0x1034>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	4b7b      	ldr	r3, [pc, #492]	; (8010158 <run_shortest+0x1038>)
 800ff6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff70:	f113 0f06 	cmn.w	r3, #6
 800ff74:	d115      	bne.n	800ffa2 <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800ff76:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff7a:	9302      	str	r3, [sp, #8]
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	9301      	str	r3, [sp, #4]
 800ff80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ff8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff8c:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff90:	f7fa ffb8 	bl	800af04 <turn180R>
			pass_count++;
 800ff94:	4b6f      	ldr	r3, [pc, #444]	; (8010154 <run_shortest+0x1034>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	3301      	adds	r3, #1
 800ff9a:	b2da      	uxtb	r2, r3
 800ff9c:	4b6d      	ldr	r3, [pc, #436]	; (8010154 <run_shortest+0x1034>)
 800ff9e:	701a      	strb	r2, [r3, #0]
 800ffa0:	e1e7      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 800ffa2:	4b6c      	ldr	r3, [pc, #432]	; (8010154 <run_shortest+0x1034>)
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	4b6b      	ldr	r3, [pc, #428]	; (8010158 <run_shortest+0x1038>)
 800ffaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffae:	f113 0f07 	cmn.w	r3, #7
 800ffb2:	d115      	bne.n	800ffe0 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800ffb4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffb8:	9302      	str	r3, [sp, #8]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ffc2:	9300      	str	r3, [sp, #0]
 800ffc4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ffc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffca:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffce:	f7fb f903 	bl	800b1d8 <turn180L>
			pass_count++;
 800ffd2:	4b60      	ldr	r3, [pc, #384]	; (8010154 <run_shortest+0x1034>)
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	b2da      	uxtb	r2, r3
 800ffda:	4b5e      	ldr	r3, [pc, #376]	; (8010154 <run_shortest+0x1034>)
 800ffdc:	701a      	strb	r2, [r3, #0]
 800ffde:	e1c8      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 800ffe0:	4b5c      	ldr	r3, [pc, #368]	; (8010154 <run_shortest+0x1034>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4b5c      	ldr	r3, [pc, #368]	; (8010158 <run_shortest+0x1038>)
 800ffe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffec:	f113 0f08 	cmn.w	r3, #8
 800fff0:	d115      	bne.n	801001e <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 800fff2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fff6:	9302      	str	r3, [sp, #8]
 800fff8:	2300      	movs	r3, #0
 800fffa:	9301      	str	r3, [sp, #4]
 800fffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010008:	ed97 0a08 	vldr	s0, [r7, #32]
 801000c:	f7fb fa4c 	bl	800b4a8 <turn45inR>
			pass_count++;
 8010010:	4b50      	ldr	r3, [pc, #320]	; (8010154 <run_shortest+0x1034>)
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	3301      	adds	r3, #1
 8010016:	b2da      	uxtb	r2, r3
 8010018:	4b4e      	ldr	r3, [pc, #312]	; (8010154 <run_shortest+0x1034>)
 801001a:	701a      	strb	r2, [r3, #0]
 801001c:	e1a9      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 801001e:	4b4d      	ldr	r3, [pc, #308]	; (8010154 <run_shortest+0x1034>)
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	461a      	mov	r2, r3
 8010024:	4b4c      	ldr	r3, [pc, #304]	; (8010158 <run_shortest+0x1038>)
 8010026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801002a:	f113 0f09 	cmn.w	r3, #9
 801002e:	d115      	bne.n	801005c <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 8010030:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010034:	9302      	str	r3, [sp, #8]
 8010036:	2300      	movs	r3, #0
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010046:	ed97 0a08 	vldr	s0, [r7, #32]
 801004a:	f7fb fc75 	bl	800b938 <turn45inL>
			pass_count++;
 801004e:	4b41      	ldr	r3, [pc, #260]	; (8010154 <run_shortest+0x1034>)
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	3301      	adds	r3, #1
 8010054:	b2da      	uxtb	r2, r3
 8010056:	4b3f      	ldr	r3, [pc, #252]	; (8010154 <run_shortest+0x1034>)
 8010058:	701a      	strb	r2, [r3, #0]
 801005a:	e18a      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 801005c:	4b3d      	ldr	r3, [pc, #244]	; (8010154 <run_shortest+0x1034>)
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	461a      	mov	r2, r3
 8010062:	4b3d      	ldr	r3, [pc, #244]	; (8010158 <run_shortest+0x1038>)
 8010064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010068:	f113 0f0a 	cmn.w	r3, #10
 801006c:	d115      	bne.n	801009a <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 801006e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010072:	9302      	str	r3, [sp, #8]
 8010074:	2300      	movs	r3, #0
 8010076:	9301      	str	r3, [sp, #4]
 8010078:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8010082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010084:	ed97 0a08 	vldr	s0, [r7, #32]
 8010088:	f7fb fe96 	bl	800bdb8 <turn135inR>
			pass_count++;
 801008c:	4b31      	ldr	r3, [pc, #196]	; (8010154 <run_shortest+0x1034>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	3301      	adds	r3, #1
 8010092:	b2da      	uxtb	r2, r3
 8010094:	4b2f      	ldr	r3, [pc, #188]	; (8010154 <run_shortest+0x1034>)
 8010096:	701a      	strb	r2, [r3, #0]
 8010098:	e16b      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 801009a:	4b2e      	ldr	r3, [pc, #184]	; (8010154 <run_shortest+0x1034>)
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	461a      	mov	r2, r3
 80100a0:	4b2d      	ldr	r3, [pc, #180]	; (8010158 <run_shortest+0x1038>)
 80100a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100a6:	f113 0f0b 	cmn.w	r3, #11
 80100aa:	d115      	bne.n	80100d8 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 80100ac:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100b0:	9302      	str	r3, [sp, #8]
 80100b2:	2300      	movs	r3, #0
 80100b4:	9301      	str	r3, [sp, #4]
 80100b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80100c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100c2:	ed97 0a08 	vldr	s0, [r7, #32]
 80100c6:	f7fc f8bf 	bl	800c248 <turn135inL>
			pass_count++;
 80100ca:	4b22      	ldr	r3, [pc, #136]	; (8010154 <run_shortest+0x1034>)
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	3301      	adds	r3, #1
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	4b20      	ldr	r3, [pc, #128]	; (8010154 <run_shortest+0x1034>)
 80100d4:	701a      	strb	r2, [r3, #0]
 80100d6:	e14c      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 80100d8:	4b1e      	ldr	r3, [pc, #120]	; (8010154 <run_shortest+0x1034>)
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	461a      	mov	r2, r3
 80100de:	4b1e      	ldr	r3, [pc, #120]	; (8010158 <run_shortest+0x1038>)
 80100e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e4:	f113 0f0c 	cmn.w	r3, #12
 80100e8:	d115      	bne.n	8010116 <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 80100ea:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100ee:	9302      	str	r3, [sp, #8]
 80100f0:	2300      	movs	r3, #0
 80100f2:	9301      	str	r3, [sp, #4]
 80100f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80100fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010100:	ed97 0a08 	vldr	s0, [r7, #32]
 8010104:	f7fc fae4 	bl	800c6d0 <turn45outR>
			pass_count++;
 8010108:	4b12      	ldr	r3, [pc, #72]	; (8010154 <run_shortest+0x1034>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	3301      	adds	r3, #1
 801010e:	b2da      	uxtb	r2, r3
 8010110:	4b10      	ldr	r3, [pc, #64]	; (8010154 <run_shortest+0x1034>)
 8010112:	701a      	strb	r2, [r3, #0]
 8010114:	e12d      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 8010116:	4b0f      	ldr	r3, [pc, #60]	; (8010154 <run_shortest+0x1034>)
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	461a      	mov	r2, r3
 801011c:	4b0e      	ldr	r3, [pc, #56]	; (8010158 <run_shortest+0x1038>)
 801011e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010122:	f113 0f0d 	cmn.w	r3, #13
 8010126:	d119      	bne.n	801015c <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010128:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801012c:	9302      	str	r3, [sp, #8]
 801012e:	2300      	movs	r3, #0
 8010130:	9301      	str	r3, [sp, #4]
 8010132:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010136:	9300      	str	r3, [sp, #0]
 8010138:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801013c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801013e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010142:	f7fc fcb7 	bl	800cab4 <turn45outL>
			pass_count++;
 8010146:	4b03      	ldr	r3, [pc, #12]	; (8010154 <run_shortest+0x1034>)
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	3301      	adds	r3, #1
 801014c:	b2da      	uxtb	r2, r3
 801014e:	4b01      	ldr	r3, [pc, #4]	; (8010154 <run_shortest+0x1034>)
 8010150:	701a      	strb	r2, [r3, #0]
 8010152:	e10e      	b.n	8010372 <run_shortest+0x1252>
 8010154:	20000828 	.word	0x20000828
 8010158:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 801015c:	4ba0      	ldr	r3, [pc, #640]	; (80103e0 <run_shortest+0x12c0>)
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	461a      	mov	r2, r3
 8010162:	4ba0      	ldr	r3, [pc, #640]	; (80103e4 <run_shortest+0x12c4>)
 8010164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010168:	f113 0f0e 	cmn.w	r3, #14
 801016c:	d115      	bne.n	801019a <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 801016e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010172:	9302      	str	r3, [sp, #8]
 8010174:	2300      	movs	r3, #0
 8010176:	9301      	str	r3, [sp, #4]
 8010178:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801017c:	9300      	str	r3, [sp, #0]
 801017e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8010182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010184:	ed97 0a08 	vldr	s0, [r7, #32]
 8010188:	f7fc fe7c 	bl	800ce84 <turn135outR>
			pass_count++;
 801018c:	4b94      	ldr	r3, [pc, #592]	; (80103e0 <run_shortest+0x12c0>)
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	3301      	adds	r3, #1
 8010192:	b2da      	uxtb	r2, r3
 8010194:	4b92      	ldr	r3, [pc, #584]	; (80103e0 <run_shortest+0x12c0>)
 8010196:	701a      	strb	r2, [r3, #0]
 8010198:	e0eb      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 801019a:	4b91      	ldr	r3, [pc, #580]	; (80103e0 <run_shortest+0x12c0>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	4b90      	ldr	r3, [pc, #576]	; (80103e4 <run_shortest+0x12c4>)
 80101a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a6:	f113 0f0f 	cmn.w	r3, #15
 80101aa:	d115      	bne.n	80101d8 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 80101ac:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101b0:	9302      	str	r3, [sp, #8]
 80101b2:	2300      	movs	r3, #0
 80101b4:	9301      	str	r3, [sp, #4]
 80101b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80101c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101c2:	ed97 0a08 	vldr	s0, [r7, #32]
 80101c6:	f7fd f84f 	bl	800d268 <turn135outL>
			pass_count++;
 80101ca:	4b85      	ldr	r3, [pc, #532]	; (80103e0 <run_shortest+0x12c0>)
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	3301      	adds	r3, #1
 80101d0:	b2da      	uxtb	r2, r3
 80101d2:	4b83      	ldr	r3, [pc, #524]	; (80103e0 <run_shortest+0x12c0>)
 80101d4:	701a      	strb	r2, [r3, #0]
 80101d6:	e0cc      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 80101d8:	4b81      	ldr	r3, [pc, #516]	; (80103e0 <run_shortest+0x12c0>)
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	461a      	mov	r2, r3
 80101de:	4b81      	ldr	r3, [pc, #516]	; (80103e4 <run_shortest+0x12c4>)
 80101e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e4:	f113 0f10 	cmn.w	r3, #16
 80101e8:	d115      	bne.n	8010216 <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 80101ea:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101ee:	9302      	str	r3, [sp, #8]
 80101f0:	2300      	movs	r3, #0
 80101f2:	9301      	str	r3, [sp, #4]
 80101f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80101fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010200:	ed97 0a08 	vldr	s0, [r7, #32]
 8010204:	f7fd fa1c 	bl	800d640 <V90R>
			pass_count++;
 8010208:	4b75      	ldr	r3, [pc, #468]	; (80103e0 <run_shortest+0x12c0>)
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	3301      	adds	r3, #1
 801020e:	b2da      	uxtb	r2, r3
 8010210:	4b73      	ldr	r3, [pc, #460]	; (80103e0 <run_shortest+0x12c0>)
 8010212:	701a      	strb	r2, [r3, #0]
 8010214:	e0ad      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 8010216:	4b72      	ldr	r3, [pc, #456]	; (80103e0 <run_shortest+0x12c0>)
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	461a      	mov	r2, r3
 801021c:	4b71      	ldr	r3, [pc, #452]	; (80103e4 <run_shortest+0x12c4>)
 801021e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010222:	f113 0f11 	cmn.w	r3, #17
 8010226:	d115      	bne.n	8010254 <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010228:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801022c:	9302      	str	r3, [sp, #8]
 801022e:	2300      	movs	r3, #0
 8010230:	9301      	str	r3, [sp, #4]
 8010232:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801023c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801023e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010242:	f7fd fc09 	bl	800da58 <V90L>
			pass_count++;
 8010246:	4b66      	ldr	r3, [pc, #408]	; (80103e0 <run_shortest+0x12c0>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	3301      	adds	r3, #1
 801024c:	b2da      	uxtb	r2, r3
 801024e:	4b64      	ldr	r3, [pc, #400]	; (80103e0 <run_shortest+0x12c0>)
 8010250:	701a      	strb	r2, [r3, #0]
 8010252:	e08e      	b.n	8010372 <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 8010254:	4b62      	ldr	r3, [pc, #392]	; (80103e0 <run_shortest+0x12c0>)
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	461a      	mov	r2, r3
 801025a:	4b62      	ldr	r3, [pc, #392]	; (80103e4 <run_shortest+0x12c4>)
 801025c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010260:	2b00      	cmp	r3, #0
 8010262:	f340 8086 	ble.w	8010372 <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 8010266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010268:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 801026a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801026c:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 801026e:	4b5c      	ldr	r3, [pc, #368]	; (80103e0 <run_shortest+0x12c0>)
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d013      	beq.n	801029e <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 8010276:	4b5a      	ldr	r3, [pc, #360]	; (80103e0 <run_shortest+0x12c0>)
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	3b01      	subs	r3, #1
 801027c:	4a59      	ldr	r2, [pc, #356]	; (80103e4 <run_shortest+0x12c4>)
 801027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010282:	f113 0f02 	cmn.w	r3, #2
 8010286:	d008      	beq.n	801029a <run_shortest+0x117a>
 8010288:	4b55      	ldr	r3, [pc, #340]	; (80103e0 <run_shortest+0x12c0>)
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	3b01      	subs	r3, #1
 801028e:	4a55      	ldr	r2, [pc, #340]	; (80103e4 <run_shortest+0x12c4>)
 8010290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010294:	f113 0f03 	cmn.w	r3, #3
 8010298:	d101      	bne.n	801029e <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 801029a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801029c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 801029e:	4b50      	ldr	r3, [pc, #320]	; (80103e0 <run_shortest+0x12c0>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	3301      	adds	r3, #1
 80102a4:	4a4f      	ldr	r2, [pc, #316]	; (80103e4 <run_shortest+0x12c4>)
 80102a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102aa:	f113 0f02 	cmn.w	r3, #2
 80102ae:	d008      	beq.n	80102c2 <run_shortest+0x11a2>
 80102b0:	4b4b      	ldr	r3, [pc, #300]	; (80103e0 <run_shortest+0x12c0>)
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	3301      	adds	r3, #1
 80102b6:	4a4b      	ldr	r2, [pc, #300]	; (80103e4 <run_shortest+0x12c4>)
 80102b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102bc:	f113 0f03 	cmn.w	r3, #3
 80102c0:	d101      	bne.n	80102c6 <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 80102c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102c4:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 80102c6:	4b46      	ldr	r3, [pc, #280]	; (80103e0 <run_shortest+0x12c0>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	461a      	mov	r2, r3
 80102cc:	4b45      	ldr	r3, [pc, #276]	; (80103e4 <run_shortest+0x12c4>)
 80102ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102d2:	2b31      	cmp	r3, #49	; 0x31
 80102d4:	dd27      	ble.n	8010326 <run_shortest+0x1206>
				mode.WallControlMode=3;
 80102d6:	2303      	movs	r3, #3
 80102d8:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80102da:	2300      	movs	r3, #0
 80102dc:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 80102de:	4b40      	ldr	r3, [pc, #256]	; (80103e0 <run_shortest+0x12c0>)
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	461a      	mov	r2, r3
 80102e4:	4b3f      	ldr	r3, [pc, #252]	; (80103e4 <run_shortest+0x12c4>)
 80102e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ea:	3b32      	subs	r3, #50	; 0x32
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7f0 f941 	bl	8000574 <__aeabi_i2d>
 80102f2:	a339      	add	r3, pc, #228	; (adr r3, 80103d8 <run_shortest+0x12b8>)
 80102f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f8:	f7f0 f9a6 	bl	8000648 <__aeabi_dmul>
 80102fc:	4602      	mov	r2, r0
 80102fe:	460b      	mov	r3, r1
 8010300:	4610      	mov	r0, r2
 8010302:	4619      	mov	r1, r3
 8010304:	f7f0 fc78 	bl	8000bf8 <__aeabi_d2f>
 8010308:	4603      	mov	r3, r0
 801030a:	69b8      	ldr	r0, [r7, #24]
 801030c:	ed97 2a04 	vldr	s4, [r7, #16]
 8010310:	edd7 1a05 	vldr	s3, [r7, #20]
 8010314:	ed97 1a08 	vldr	s2, [r7, #32]
 8010318:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801031c:	ee00 3a10 	vmov	s0, r3
 8010320:	f7f2 fec0 	bl	80030a4 <straight_table2>
 8010324:	e01f      	b.n	8010366 <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 8010326:	2301      	movs	r3, #1
 8010328:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 801032a:	2300      	movs	r3, #0
 801032c:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 801032e:	4b2c      	ldr	r3, [pc, #176]	; (80103e0 <run_shortest+0x12c0>)
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	461a      	mov	r2, r3
 8010334:	4b2b      	ldr	r3, [pc, #172]	; (80103e4 <run_shortest+0x12c4>)
 8010336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801033a:	4613      	mov	r3, r2
 801033c:	005b      	lsls	r3, r3, #1
 801033e:	4413      	add	r3, r2
 8010340:	011a      	lsls	r2, r3, #4
 8010342:	1ad3      	subs	r3, r2, r3
 8010344:	ee07 3a90 	vmov	s15, r3
 8010348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801034c:	69b8      	ldr	r0, [r7, #24]
 801034e:	ed97 2a04 	vldr	s4, [r7, #16]
 8010352:	edd7 1a05 	vldr	s3, [r7, #20]
 8010356:	ed97 1a08 	vldr	s2, [r7, #32]
 801035a:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801035e:	eeb0 0a67 	vmov.f32	s0, s15
 8010362:	f7f2 fe9f 	bl	80030a4 <straight_table2>
			}

			pass_count++;
 8010366:	4b1e      	ldr	r3, [pc, #120]	; (80103e0 <run_shortest+0x12c0>)
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	3301      	adds	r3, #1
 801036c:	b2da      	uxtb	r2, r3
 801036e:	4b1c      	ldr	r3, [pc, #112]	; (80103e0 <run_shortest+0x12c0>)
 8010370:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 8010372:	4b1b      	ldr	r3, [pc, #108]	; (80103e0 <run_shortest+0x12c0>)
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	461a      	mov	r2, r3
 8010378:	4b1a      	ldr	r3, [pc, #104]	; (80103e4 <run_shortest+0x12c4>)
 801037a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d000      	beq.n	8010384 <run_shortest+0x1264>
		pass_count2=pass_count+1;
 8010382:	e521      	b.n	800fdc8 <run_shortest+0xca8>
			break;
 8010384:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 8010386:	2301      	movs	r3, #1
 8010388:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 801038a:	2300      	movs	r3, #0
 801038c:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 801038e:	69b8      	ldr	r0, [r7, #24]
 8010390:	ed97 2a04 	vldr	s4, [r7, #16]
 8010394:	edd7 1a05 	vldr	s3, [r7, #20]
 8010398:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80103e8 <run_shortest+0x12c8>
 801039c:	edd7 0a08 	vldr	s1, [r7, #32]
 80103a0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80103ec <run_shortest+0x12cc>
 80103a4:	f7f2 fe7e 	bl	80030a4 <straight_table2>
		HAL_Delay(700);
 80103a8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80103ac:	f007 fb88 	bl	8017ac0 <HAL_Delay>
		pl_FunMotor_stop();
 80103b0:	f7f7 fc3c 	bl	8007c2c <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 80103b4:	4b0e      	ldr	r3, [pc, #56]	; (80103f0 <run_shortest+0x12d0>)
 80103b6:	2200      	movs	r2, #0
 80103b8:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80103ba:	4b0e      	ldr	r3, [pc, #56]	; (80103f4 <run_shortest+0x12d4>)
 80103bc:	2200      	movs	r2, #0
 80103be:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 80103c0:	4b0d      	ldr	r3, [pc, #52]	; (80103f8 <run_shortest+0x12d8>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 80103c6:	2000      	movs	r0, #0
 80103c8:	f7f7 fb9c 	bl	8007b04 <pl_DriveMotor_standby>
	t = 0;
 80103cc:	4b0b      	ldr	r3, [pc, #44]	; (80103fc <run_shortest+0x12dc>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 80103d2:	e034      	b.n	801043e <run_shortest+0x131e>
 80103d4:	f3af 8000 	nop.w
 80103d8:	c022ec18 	.word	0xc022ec18
 80103dc:	404fd1de 	.word	0x404fd1de
 80103e0:	20000828 	.word	0x20000828
 80103e4:	2000083c 	.word	0x2000083c
 80103e8:	00000000 	.word	0x00000000
 80103ec:	42b40000 	.word	0x42b40000
 80103f0:	20000834 	.word	0x20000834
 80103f4:	20000808 	.word	0x20000808
 80103f8:	2000d96c 	.word	0x2000d96c
 80103fc:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 8010400:	4b2b      	ldr	r3, [pc, #172]	; (80104b0 <run_shortest+0x1390>)
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	4b2a      	ldr	r3, [pc, #168]	; (80104b0 <run_shortest+0x1390>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	492a      	ldr	r1, [pc, #168]	; (80104b4 <run_shortest+0x1394>)
 801040a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 801040e:	4a2a      	ldr	r2, [pc, #168]	; (80104b8 <run_shortest+0x1398>)
 8010410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8010414:	4b26      	ldr	r3, [pc, #152]	; (80104b0 <run_shortest+0x1390>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a25      	ldr	r2, [pc, #148]	; (80104b0 <run_shortest+0x1390>)
 801041a:	6812      	ldr	r2, [r2, #0]
 801041c:	4925      	ldr	r1, [pc, #148]	; (80104b4 <run_shortest+0x1394>)
 801041e:	330c      	adds	r3, #12
 8010420:	005b      	lsls	r3, r3, #1
 8010422:	440b      	add	r3, r1
 8010424:	88d8      	ldrh	r0, [r3, #6]
 8010426:	4924      	ldr	r1, [pc, #144]	; (80104b8 <run_shortest+0x1398>)
 8010428:	f102 030c 	add.w	r3, r2, #12
 801042c:	005b      	lsls	r3, r3, #1
 801042e:	440b      	add	r3, r1
 8010430:	4602      	mov	r2, r0
 8010432:	80da      	strh	r2, [r3, #6]
		t++;
 8010434:	4b1e      	ldr	r3, [pc, #120]	; (80104b0 <run_shortest+0x1390>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	3301      	adds	r3, #1
 801043a:	4a1d      	ldr	r2, [pc, #116]	; (80104b0 <run_shortest+0x1390>)
 801043c:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 801043e:	4b1c      	ldr	r3, [pc, #112]	; (80104b0 <run_shortest+0x1390>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b0e      	cmp	r3, #14
 8010444:	dddc      	ble.n	8010400 <run_shortest+0x12e0>
	}
	t = 0;
 8010446:	4b1a      	ldr	r3, [pc, #104]	; (80104b0 <run_shortest+0x1390>)
 8010448:	2200      	movs	r2, #0
 801044a:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 801044c:	e026      	b.n	801049c <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 801044e:	4b18      	ldr	r3, [pc, #96]	; (80104b0 <run_shortest+0x1390>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4a19      	ldr	r2, [pc, #100]	; (80104b8 <run_shortest+0x1398>)
 8010454:	331c      	adds	r3, #28
 8010456:	005b      	lsls	r3, r3, #1
 8010458:	4413      	add	r3, r2
 801045a:	889a      	ldrh	r2, [r3, #4]
 801045c:	4b14      	ldr	r3, [pc, #80]	; (80104b0 <run_shortest+0x1390>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	43d2      	mvns	r2, r2
 8010462:	b291      	uxth	r1, r2
 8010464:	4a14      	ldr	r2, [pc, #80]	; (80104b8 <run_shortest+0x1398>)
 8010466:	331c      	adds	r3, #28
 8010468:	005b      	lsls	r3, r3, #1
 801046a:	4413      	add	r3, r2
 801046c:	460a      	mov	r2, r1
 801046e:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 8010470:	4b0f      	ldr	r3, [pc, #60]	; (80104b0 <run_shortest+0x1390>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4a10      	ldr	r2, [pc, #64]	; (80104b8 <run_shortest+0x1398>)
 8010476:	332c      	adds	r3, #44	; 0x2c
 8010478:	005b      	lsls	r3, r3, #1
 801047a:	4413      	add	r3, r2
 801047c:	885a      	ldrh	r2, [r3, #2]
 801047e:	4b0c      	ldr	r3, [pc, #48]	; (80104b0 <run_shortest+0x1390>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	43d2      	mvns	r2, r2
 8010484:	b291      	uxth	r1, r2
 8010486:	4a0c      	ldr	r2, [pc, #48]	; (80104b8 <run_shortest+0x1398>)
 8010488:	332c      	adds	r3, #44	; 0x2c
 801048a:	005b      	lsls	r3, r3, #1
 801048c:	4413      	add	r3, r2
 801048e:	460a      	mov	r2, r1
 8010490:	805a      	strh	r2, [r3, #2]
		t++;
 8010492:	4b07      	ldr	r3, [pc, #28]	; (80104b0 <run_shortest+0x1390>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	3301      	adds	r3, #1
 8010498:	4a05      	ldr	r2, [pc, #20]	; (80104b0 <run_shortest+0x1390>)
 801049a:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 801049c:	4b04      	ldr	r3, [pc, #16]	; (80104b0 <run_shortest+0x1390>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	2b0e      	cmp	r3, #14
 80104a2:	ddd4      	ble.n	801044e <run_shortest+0x132e>
	}

}
 80104a4:	bf00      	nop
 80104a6:	bf00      	nop
 80104a8:	3740      	adds	r7, #64	; 0x40
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bdb0      	pop	{r4, r5, r7, pc}
 80104ae:	bf00      	nop
 80104b0:	20000c38 	.word	0x20000c38
 80104b4:	20000cb4 	.word	0x20000cb4
 80104b8:	20000c3c 	.word	0x20000c3c

080104bc <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 80104bc:	b580      	push	{r7, lr}
 80104be:	b08a      	sub	sp, #40	; 0x28
 80104c0:	af02      	add	r7, sp, #8
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	607a      	str	r2, [r7, #4]
 80104c8:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 80104ca:	2301      	movs	r3, #1
 80104cc:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 80104ce:	2301      	movs	r3, #1
 80104d0:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 80104d2:	2301      	movs	r3, #1
 80104d4:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 80104de:	f107 0114 	add.w	r1, r7, #20
 80104e2:	f107 0318 	add.w	r3, r7, #24
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7fd fe3f 	bl	800e16c <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 80104ee:	69b8      	ldr	r0, [r7, #24]
 80104f0:	6979      	ldr	r1, [r7, #20]
 80104f2:	f107 021e 	add.w	r2, r7, #30
 80104f6:	f107 031c 	add.w	r3, r7, #28
 80104fa:	9301      	str	r3, [sp, #4]
 80104fc:	f107 031d 	add.w	r3, r7, #29
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	4613      	mov	r3, r2
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	f000 fe27 	bl	8011158 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 801050a:	7fbb      	ldrb	r3, [r7, #30]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d007      	beq.n	8010520 <decision_kitiku+0x64>
 8010510:	7f7b      	ldrb	r3, [r7, #29]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d004      	beq.n	8010520 <decision_kitiku+0x64>
 8010516:	7f3b      	ldrb	r3, [r7, #28]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d001      	beq.n	8010520 <decision_kitiku+0x64>
 801051c:	2301      	movs	r3, #1
 801051e:	e000      	b.n	8010522 <decision_kitiku+0x66>
 8010520:	2300      	movs	r3, #0
 8010522:	77fb      	strb	r3, [r7, #31]
 8010524:	7ffb      	ldrb	r3, [r7, #31]
 8010526:	f003 0301 	and.w	r3, r3, #1
 801052a:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 801052c:	7ffb      	ldrb	r3, [r7, #31]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d02b      	beq.n	801058a <decision_kitiku+0xce>
 8010532:	887a      	ldrh	r2, [r7, #2]
 8010534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010536:	429a      	cmp	r2, r3
 8010538:	d827      	bhi.n	801058a <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 801053a:	887a      	ldrh	r2, [r7, #2]
 801053c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801053e:	429a      	cmp	r2, r3
 8010540:	d823      	bhi.n	801058a <decision_kitiku+0xce>
 8010542:	887a      	ldrh	r2, [r7, #2]
 8010544:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010546:	429a      	cmp	r2, r3
 8010548:	d81f      	bhi.n	801058a <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d102      	bne.n	8010556 <decision_kitiku+0x9a>
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	2b0d      	cmp	r3, #13
 8010554:	dc11      	bgt.n	801057a <decision_kitiku+0xbe>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2b02      	cmp	r3, #2
 801055a:	d102      	bne.n	8010562 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2b0d      	cmp	r3, #13
 8010560:	dc0b      	bgt.n	801057a <decision_kitiku+0xbe>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b03      	cmp	r3, #3
 8010566:	d102      	bne.n	801056e <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b01      	cmp	r3, #1
 801056c:	dd05      	ble.n	801057a <decision_kitiku+0xbe>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b04      	cmp	r3, #4
 8010572:	d106      	bne.n	8010582 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2b01      	cmp	r3, #1
 8010578:	dc03      	bgt.n	8010582 <decision_kitiku+0xc6>
			kitikukan = 0;
 801057a:	4b08      	ldr	r3, [pc, #32]	; (801059c <decision_kitiku+0xe0>)
 801057c:	2200      	movs	r2, #0
 801057e:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010580:	e007      	b.n	8010592 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 8010582:	4b06      	ldr	r3, [pc, #24]	; (801059c <decision_kitiku+0xe0>)
 8010584:	2201      	movs	r2, #1
 8010586:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010588:	e003      	b.n	8010592 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 801058a:	4b04      	ldr	r3, [pc, #16]	; (801059c <decision_kitiku+0xe0>)
 801058c:	2200      	movs	r2, #0
 801058e:	601a      	str	r2, [r3, #0]
	}


}
 8010590:	bf00      	nop
 8010592:	bf00      	nop
 8010594:	3720      	adds	r7, #32
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	20000838 	.word	0x20000838

080105a0 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 80105a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105a2:	b099      	sub	sp, #100	; 0x64
 80105a4:	af04      	add	r7, sp, #16
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 80105ac:	4b9f      	ldr	r3, [pc, #636]	; (801082c <compress_kitiku+0x28c>)
 80105ae:	2201      	movs	r2, #1
 80105b0:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 80105b2:	4b9f      	ldr	r3, [pc, #636]	; (8010830 <compress_kitiku+0x290>)
 80105b4:	2201      	movs	r2, #1
 80105b6:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	637b      	str	r3, [r7, #52]	; 0x34
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	633b      	str	r3, [r7, #48]	; 0x30
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 80105ca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80105ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80105d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7fd fdc9 	bl	800e16c <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 80105da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80105e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e4:	627b      	str	r3, [r7, #36]	; 0x24
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	623b      	str	r3, [r7, #32]
 80105ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ec:	61fb      	str	r3, [r7, #28]
 80105ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f0:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 80105f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80105f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80105fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fd fdb5 	bl	800e16c <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010606:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801060a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801060e:	9301      	str	r3, [sp, #4]
 8010610:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010614:	9300      	str	r3, [sp, #0]
 8010616:	4613      	mov	r3, r2
 8010618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801061a:	f000 fd9d 	bl	8011158 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 801061e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010622:	2b00      	cmp	r3, #0
 8010624:	d009      	beq.n	801063a <compress_kitiku+0x9a>
 8010626:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801062a:	2b00      	cmp	r3, #0
 801062c:	d005      	beq.n	801063a <compress_kitiku+0x9a>
 801062e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010632:	2b00      	cmp	r3, #0
 8010634:	d001      	beq.n	801063a <compress_kitiku+0x9a>
 8010636:	2301      	movs	r3, #1
 8010638:	e000      	b.n	801063c <compress_kitiku+0x9c>
 801063a:	2300      	movs	r3, #0
 801063c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010640:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010644:	f003 0301 	and.w	r3, r3, #1
 8010648:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 801064c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801064e:	2b04      	cmp	r3, #4
 8010650:	d102      	bne.n	8010658 <compress_kitiku+0xb8>
 8010652:	2301      	movs	r3, #1
 8010654:	64bb      	str	r3, [r7, #72]	; 0x48
 8010656:	e002      	b.n	801065e <compress_kitiku+0xbe>
 8010658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801065a:	3301      	adds	r3, #1
 801065c:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 801065e:	f107 0120 	add.w	r1, r7, #32
 8010662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010668:	4618      	mov	r0, r3
 801066a:	f7fd fd7f 	bl	800e16c <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 801066e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010670:	6a39      	ldr	r1, [r7, #32]
 8010672:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010676:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801067a:	9301      	str	r3, [sp, #4]
 801067c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	4613      	mov	r3, r2
 8010684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010686:	f000 fd67 	bl	8011158 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 801068a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801068e:	2b00      	cmp	r3, #0
 8010690:	d009      	beq.n	80106a6 <compress_kitiku+0x106>
 8010692:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010696:	2b00      	cmp	r3, #0
 8010698:	d005      	beq.n	80106a6 <compress_kitiku+0x106>
 801069a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d001      	beq.n	80106a6 <compress_kitiku+0x106>
 80106a2:	2301      	movs	r3, #1
 80106a4:	e000      	b.n	80106a8 <compress_kitiku+0x108>
 80106a6:	2300      	movs	r3, #0
 80106a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80106ac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80106b0:	f003 0301 	and.w	r3, r3, #1
 80106b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 80106b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d102      	bne.n	80106c4 <compress_kitiku+0x124>
 80106be:	2304      	movs	r3, #4
 80106c0:	647b      	str	r3, [r7, #68]	; 0x44
 80106c2:	e002      	b.n	80106ca <compress_kitiku+0x12a>
 80106c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106c6:	3b01      	subs	r3, #1
 80106c8:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 80106ca:	f107 0118 	add.w	r1, r7, #24
 80106ce:	f107 031c 	add.w	r3, r7, #28
 80106d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fd fd49 	bl	800e16c <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 80106da:	69f8      	ldr	r0, [r7, #28]
 80106dc:	69b9      	ldr	r1, [r7, #24]
 80106de:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80106e2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80106e6:	9301      	str	r3, [sp, #4]
 80106e8:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80106ec:	9300      	str	r3, [sp, #0]
 80106ee:	4613      	mov	r3, r2
 80106f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106f2:	f000 fd31 	bl	8011158 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 80106f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d009      	beq.n	8010712 <compress_kitiku+0x172>
 80106fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010702:	2b00      	cmp	r3, #0
 8010704:	d005      	beq.n	8010712 <compress_kitiku+0x172>
 8010706:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801070a:	2b00      	cmp	r3, #0
 801070c:	d001      	beq.n	8010712 <compress_kitiku+0x172>
 801070e:	2301      	movs	r3, #1
 8010710:	e000      	b.n	8010714 <compress_kitiku+0x174>
 8010712:	2300      	movs	r3, #0
 8010714:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010718:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801071c:	f003 0301 	and.w	r3, r3, #1
 8010720:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 8010724:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010728:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801072c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010730:	9301      	str	r3, [sp, #4]
 8010732:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	4613      	mov	r3, r2
 801073a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801073c:	f000 fb98 	bl	8010e70 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010744:	f107 0610 	add.w	r6, r7, #16
 8010748:	f107 0512 	add.w	r5, r7, #18
 801074c:	f107 0414 	add.w	r4, r7, #20
 8010750:	f107 0016 	add.w	r0, r7, #22
 8010754:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010756:	9102      	str	r1, [sp, #8]
 8010758:	9201      	str	r2, [sp, #4]
 801075a:	9300      	str	r3, [sp, #0]
 801075c:	4633      	mov	r3, r6
 801075e:	462a      	mov	r2, r5
 8010760:	4621      	mov	r1, r4
 8010762:	f000 fe79 	bl	8011458 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 8010766:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801076a:	2b00      	cmp	r3, #0
 801076c:	d001      	beq.n	8010772 <compress_kitiku+0x1d2>
 801076e:	23ff      	movs	r3, #255	; 0xff
 8010770:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 8010772:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010776:	2b00      	cmp	r3, #0
 8010778:	d001      	beq.n	801077e <compress_kitiku+0x1de>
 801077a:	23ff      	movs	r3, #255	; 0xff
 801077c:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 801077e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010782:	2b00      	cmp	r3, #0
 8010784:	d001      	beq.n	801078a <compress_kitiku+0x1ea>
 8010786:	23ff      	movs	r3, #255	; 0xff
 8010788:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[16 * x_now + y_now] <= 1) {
 801078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078c:	011a      	lsls	r2, r3, #4
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	4413      	add	r3, r2
 8010792:	4a28      	ldr	r2, [pc, #160]	; (8010834 <compress_kitiku+0x294>)
 8010794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010798:	2b01      	cmp	r3, #1
 801079a:	f240 80a9 	bls.w	80108f0 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 801079e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d103      	bne.n	80107ac <compress_kitiku+0x20c>
 80107a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a6:	2b0d      	cmp	r3, #13
 80107a8:	f300 80a4 	bgt.w	80108f4 <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 80107ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ae:	2b02      	cmp	r3, #2
 80107b0:	d103      	bne.n	80107ba <compress_kitiku+0x21a>
 80107b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107b4:	2b0d      	cmp	r3, #13
 80107b6:	f300 809f 	bgt.w	80108f8 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 80107ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107bc:	2b03      	cmp	r3, #3
 80107be:	d103      	bne.n	80107c8 <compress_kitiku+0x228>
 80107c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	f340 809a 	ble.w	80108fc <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 80107c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ca:	2b04      	cmp	r3, #4
 80107cc:	d103      	bne.n	80107d6 <compress_kitiku+0x236>
 80107ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	f340 8095 	ble.w	8010900 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80107d6:	8afb      	ldrh	r3, [r7, #22]
 80107d8:	2bff      	cmp	r3, #255	; 0xff
 80107da:	d10c      	bne.n	80107f6 <compress_kitiku+0x256>
 80107dc:	8abb      	ldrh	r3, [r7, #20]
 80107de:	2bff      	cmp	r3, #255	; 0xff
 80107e0:	d109      	bne.n	80107f6 <compress_kitiku+0x256>
 80107e2:	8a3b      	ldrh	r3, [r7, #16]
 80107e4:	2bff      	cmp	r3, #255	; 0xff
 80107e6:	d106      	bne.n	80107f6 <compress_kitiku+0x256>
 80107e8:	8a7b      	ldrh	r3, [r7, #18]
 80107ea:	2bff      	cmp	r3, #255	; 0xff
 80107ec:	d103      	bne.n	80107f6 <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 80107ee:	4b12      	ldr	r3, [pc, #72]	; (8010838 <compress_kitiku+0x298>)
 80107f0:	2201      	movs	r2, #1
 80107f2:	701a      	strb	r2, [r3, #0]
		break;
 80107f4:	e087      	b.n	8010906 <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80107f6:	8afa      	ldrh	r2, [r7, #22]
 80107f8:	8abb      	ldrh	r3, [r7, #20]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d81e      	bhi.n	801083c <compress_kitiku+0x29c>
 80107fe:	8afa      	ldrh	r2, [r7, #22]
 8010800:	8a3b      	ldrh	r3, [r7, #16]
 8010802:	429a      	cmp	r2, r3
 8010804:	d81a      	bhi.n	801083c <compress_kitiku+0x29c>
 8010806:	8afa      	ldrh	r2, [r7, #22]
 8010808:	8a7b      	ldrh	r3, [r7, #18]
 801080a:	429a      	cmp	r2, r3
 801080c:	d816      	bhi.n	801083c <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 801080e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010812:	2b00      	cmp	r3, #0
 8010814:	d005      	beq.n	8010822 <compress_kitiku+0x282>
				kitiku_distance += 2;
 8010816:	4b05      	ldr	r3, [pc, #20]	; (801082c <compress_kitiku+0x28c>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	3302      	adds	r3, #2
 801081c:	4a03      	ldr	r2, [pc, #12]	; (801082c <compress_kitiku+0x28c>)
 801081e:	6013      	str	r3, [r2, #0]
 8010820:	e00c      	b.n	801083c <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 8010822:	4b03      	ldr	r3, [pc, #12]	; (8010830 <compress_kitiku+0x290>)
 8010824:	2200      	movs	r2, #0
 8010826:	701a      	strb	r2, [r3, #0]
				break;
 8010828:	e06d      	b.n	8010906 <compress_kitiku+0x366>
 801082a:	bf00      	nop
 801082c:	2000082c 	.word	0x2000082c
 8010830:	20000829 	.word	0x20000829
 8010834:	20000d2c 	.word	0x20000d2c
 8010838:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801083c:	8aba      	ldrh	r2, [r7, #20]
 801083e:	8afb      	ldrh	r3, [r7, #22]
 8010840:	429a      	cmp	r2, r3
 8010842:	d213      	bcs.n	801086c <compress_kitiku+0x2cc>
 8010844:	8aba      	ldrh	r2, [r7, #20]
 8010846:	8a3b      	ldrh	r3, [r7, #16]
 8010848:	429a      	cmp	r2, r3
 801084a:	d80f      	bhi.n	801086c <compress_kitiku+0x2cc>
 801084c:	8aba      	ldrh	r2, [r7, #20]
 801084e:	8a7b      	ldrh	r3, [r7, #18]
 8010850:	429a      	cmp	r2, r3
 8010852:	d80b      	bhi.n	801086c <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 8010854:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010858:	2b00      	cmp	r3, #0
 801085a:	d003      	beq.n	8010864 <compress_kitiku+0x2c4>
				kitiku = 0;
 801085c:	4b40      	ldr	r3, [pc, #256]	; (8010960 <compress_kitiku+0x3c0>)
 801085e:	2200      	movs	r2, #0
 8010860:	701a      	strb	r2, [r3, #0]
				break;
 8010862:	e050      	b.n	8010906 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 8010864:	4b3e      	ldr	r3, [pc, #248]	; (8010960 <compress_kitiku+0x3c0>)
 8010866:	2200      	movs	r2, #0
 8010868:	701a      	strb	r2, [r3, #0]
				break;
 801086a:	e04c      	b.n	8010906 <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801086c:	8a3a      	ldrh	r2, [r7, #16]
 801086e:	8afb      	ldrh	r3, [r7, #22]
 8010870:	429a      	cmp	r2, r3
 8010872:	d213      	bcs.n	801089c <compress_kitiku+0x2fc>
 8010874:	8a3a      	ldrh	r2, [r7, #16]
 8010876:	8abb      	ldrh	r3, [r7, #20]
 8010878:	429a      	cmp	r2, r3
 801087a:	d20f      	bcs.n	801089c <compress_kitiku+0x2fc>
 801087c:	8a3a      	ldrh	r2, [r7, #16]
 801087e:	8a7b      	ldrh	r3, [r7, #18]
 8010880:	429a      	cmp	r2, r3
 8010882:	d80b      	bhi.n	801089c <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 8010884:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010888:	2b00      	cmp	r3, #0
 801088a:	d003      	beq.n	8010894 <compress_kitiku+0x2f4>
				kitiku = 0;
 801088c:	4b34      	ldr	r3, [pc, #208]	; (8010960 <compress_kitiku+0x3c0>)
 801088e:	2200      	movs	r2, #0
 8010890:	701a      	strb	r2, [r3, #0]
				break;
 8010892:	e038      	b.n	8010906 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 8010894:	4b32      	ldr	r3, [pc, #200]	; (8010960 <compress_kitiku+0x3c0>)
 8010896:	2200      	movs	r2, #0
 8010898:	701a      	strb	r2, [r3, #0]
				break;
 801089a:	e034      	b.n	8010906 <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 801089c:	8a7a      	ldrh	r2, [r7, #18]
 801089e:	8afb      	ldrh	r3, [r7, #22]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d20b      	bcs.n	80108bc <compress_kitiku+0x31c>
 80108a4:	8a7a      	ldrh	r2, [r7, #18]
 80108a6:	8abb      	ldrh	r3, [r7, #20]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d207      	bcs.n	80108bc <compress_kitiku+0x31c>
								&& back_count < left_count){
 80108ac:	8a7a      	ldrh	r2, [r7, #18]
 80108ae:	8a3b      	ldrh	r3, [r7, #16]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d203      	bcs.n	80108bc <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 80108b4:	4b2a      	ldr	r3, [pc, #168]	; (8010960 <compress_kitiku+0x3c0>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	701a      	strb	r2, [r3, #0]
			break;
 80108ba:	e024      	b.n	8010906 <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 80108bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108be:	2b05      	cmp	r3, #5
 80108c0:	d101      	bne.n	80108c6 <compress_kitiku+0x326>
			direction_now = 1;
 80108c2:	2301      	movs	r3, #1
 80108c4:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 80108c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108c8:	2b06      	cmp	r3, #6
 80108ca:	d101      	bne.n	80108d0 <compress_kitiku+0x330>
			direction_now = 2;
 80108cc:	2302      	movs	r3, #2
 80108ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 80108d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d101      	bne.n	80108da <compress_kitiku+0x33a>
			direction_now = 4;
 80108d6:	2304      	movs	r3, #4
 80108d8:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 80108da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e0:	d101      	bne.n	80108e6 <compress_kitiku+0x346>
			direction_now = 3;
 80108e2:	2303      	movs	r3, #3
 80108e4:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 80108e6:	4b1e      	ldr	r3, [pc, #120]	; (8010960 <compress_kitiku+0x3c0>)
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00a      	beq.n	8010904 <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 80108ee:	e66c      	b.n	80105ca <compress_kitiku+0x2a>
			break;
 80108f0:	bf00      	nop
 80108f2:	e008      	b.n	8010906 <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 80108f4:	bf00      	nop
 80108f6:	e006      	b.n	8010906 <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 80108f8:	bf00      	nop
 80108fa:	e004      	b.n	8010906 <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 80108fc:	bf00      	nop
 80108fe:	e002      	b.n	8010906 <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 8010900:	bf00      	nop
 8010902:	e000      	b.n	8010906 <compress_kitiku+0x366>

			break;
 8010904:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 8010906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010908:	3302      	adds	r3, #2
 801090a:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 801090c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801090e:	2b05      	cmp	r3, #5
 8010910:	d101      	bne.n	8010916 <compress_kitiku+0x376>
				direction2 = 1;
 8010912:	2301      	movs	r3, #1
 8010914:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 8010916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010918:	2b06      	cmp	r3, #6
 801091a:	d101      	bne.n	8010920 <compress_kitiku+0x380>
				direction2 = 2;
 801091c:	2302      	movs	r3, #2
 801091e:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 8010920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010922:	2b00      	cmp	r3, #0
 8010924:	d101      	bne.n	801092a <compress_kitiku+0x38a>
				direction2 = 4;
 8010926:	2304      	movs	r3, #4
 8010928:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 801092a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010930:	d101      	bne.n	8010936 <compress_kitiku+0x396>
				direction2 = 3;
 8010932:	2303      	movs	r3, #3
 8010934:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 8010936:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801093a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801093e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010940:	4618      	mov	r0, r3
 8010942:	f7fd fc13 	bl	800e16c <update_coordinate>

	*x=x_now;
 8010946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	601a      	str	r2, [r3, #0]
	*y=y_now;
 801094c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010956:	601a      	str	r2, [r3, #0]

}
 8010958:	bf00      	nop
 801095a:	3754      	adds	r7, #84	; 0x54
 801095c:	46bd      	mov	sp, r7
 801095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010960:	20000829 	.word	0x20000829

08010964 <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	607a      	str	r2, [r7, #4]
 8010970:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	3b01      	subs	r3, #1
 8010976:	2b03      	cmp	r3, #3
 8010978:	f200 8272 	bhi.w	8010e60 <update_wall+0x4fc>
 801097c:	a201      	add	r2, pc, #4	; (adr r2, 8010984 <update_wall+0x20>)
 801097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010982:	bf00      	nop
 8010984:	08010995 	.word	0x08010995
 8010988:	08010abb 	.word	0x08010abb
 801098c:	08010bf1 	.word	0x08010bf1
 8010990:	08010d1f 	.word	0x08010d1f
	case 1:
		if (y <= 14) {
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	2b0e      	cmp	r3, #14
 8010998:	dc2e      	bgt.n	80109f8 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 801099a:	4a94      	ldr	r2, [pc, #592]	; (8010bec <update_wall+0x288>)
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	332c      	adds	r3, #44	; 0x2c
 80109a0:	005b      	lsls	r3, r3, #1
 80109a2:	4413      	add	r3, r2
 80109a4:	885b      	ldrh	r3, [r3, #2]
 80109a6:	b21a      	sxth	r2, r3
 80109a8:	2101      	movs	r1, #1
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	fa01 f303 	lsl.w	r3, r1, r3
 80109b0:	b21b      	sxth	r3, r3
 80109b2:	4313      	orrs	r3, r2
 80109b4:	b21b      	sxth	r3, r3
 80109b6:	b299      	uxth	r1, r3
 80109b8:	4a8c      	ldr	r2, [pc, #560]	; (8010bec <update_wall+0x288>)
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	332c      	adds	r3, #44	; 0x2c
 80109be:	005b      	lsls	r3, r3, #1
 80109c0:	4413      	add	r3, r2
 80109c2:	460a      	mov	r2, r1
 80109c4:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80109c6:	78fb      	ldrb	r3, [r7, #3]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d015      	beq.n	80109f8 <update_wall+0x94>
 80109cc:	4a87      	ldr	r2, [pc, #540]	; (8010bec <update_wall+0x288>)
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	330c      	adds	r3, #12
 80109d2:	005b      	lsls	r3, r3, #1
 80109d4:	4413      	add	r3, r2
 80109d6:	88db      	ldrh	r3, [r3, #6]
 80109d8:	b21a      	sxth	r2, r3
 80109da:	2101      	movs	r1, #1
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	fa01 f303 	lsl.w	r3, r1, r3
 80109e2:	b21b      	sxth	r3, r3
 80109e4:	4313      	orrs	r3, r2
 80109e6:	b21b      	sxth	r3, r3
 80109e8:	b299      	uxth	r1, r3
 80109ea:	4a80      	ldr	r2, [pc, #512]	; (8010bec <update_wall+0x288>)
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	330c      	adds	r3, #12
 80109f0:	005b      	lsls	r3, r3, #1
 80109f2:	4413      	add	r3, r2
 80109f4:	460a      	mov	r2, r1
 80109f6:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	dd2d      	ble.n	8010a5a <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	3b01      	subs	r3, #1
 8010a02:	4a7a      	ldr	r2, [pc, #488]	; (8010bec <update_wall+0x288>)
 8010a04:	331c      	adds	r3, #28
 8010a06:	005b      	lsls	r3, r3, #1
 8010a08:	4413      	add	r3, r2
 8010a0a:	889b      	ldrh	r3, [r3, #4]
 8010a0c:	b21a      	sxth	r2, r3
 8010a0e:	2101      	movs	r1, #1
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	fa01 f303 	lsl.w	r3, r1, r3
 8010a16:	b21b      	sxth	r3, r3
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	b21a      	sxth	r2, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	b291      	uxth	r1, r2
 8010a22:	4a72      	ldr	r2, [pc, #456]	; (8010bec <update_wall+0x288>)
 8010a24:	331c      	adds	r3, #28
 8010a26:	005b      	lsls	r3, r3, #1
 8010a28:	4413      	add	r3, r2
 8010a2a:	460a      	mov	r2, r1
 8010a2c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010a2e:	7f3b      	ldrb	r3, [r7, #28]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d012      	beq.n	8010a5a <update_wall+0xf6>
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	3b01      	subs	r3, #1
 8010a38:	4a6c      	ldr	r2, [pc, #432]	; (8010bec <update_wall+0x288>)
 8010a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a3e:	b21a      	sxth	r2, r3
 8010a40:	2101      	movs	r1, #1
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	fa01 f303 	lsl.w	r3, r1, r3
 8010a48:	b21b      	sxth	r3, r3
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	b21a      	sxth	r2, r3
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	3b01      	subs	r3, #1
 8010a52:	b291      	uxth	r1, r2
 8010a54:	4a65      	ldr	r2, [pc, #404]	; (8010bec <update_wall+0x288>)
 8010a56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2b0e      	cmp	r3, #14
 8010a5e:	f300 81f8 	bgt.w	8010e52 <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010a62:	4a62      	ldr	r2, [pc, #392]	; (8010bec <update_wall+0x288>)
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	331c      	adds	r3, #28
 8010a68:	005b      	lsls	r3, r3, #1
 8010a6a:	4413      	add	r3, r2
 8010a6c:	889b      	ldrh	r3, [r3, #4]
 8010a6e:	b21a      	sxth	r2, r3
 8010a70:	2101      	movs	r1, #1
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	fa01 f303 	lsl.w	r3, r1, r3
 8010a78:	b21b      	sxth	r3, r3
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	b21b      	sxth	r3, r3
 8010a7e:	b299      	uxth	r1, r3
 8010a80:	4a5a      	ldr	r2, [pc, #360]	; (8010bec <update_wall+0x288>)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	331c      	adds	r3, #28
 8010a86:	005b      	lsls	r3, r3, #1
 8010a88:	4413      	add	r3, r2
 8010a8a:	460a      	mov	r2, r1
 8010a8c:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010a8e:	7e3b      	ldrb	r3, [r7, #24]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	f000 81de 	beq.w	8010e52 <update_wall+0x4ee>
 8010a96:	4a55      	ldr	r2, [pc, #340]	; (8010bec <update_wall+0x288>)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a9e:	b21a      	sxth	r2, r3
 8010aa0:	2101      	movs	r1, #1
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8010aa8:	b21b      	sxth	r3, r3
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	b21b      	sxth	r3, r3
 8010aae:	b299      	uxth	r1, r3
 8010ab0:	4a4e      	ldr	r2, [pc, #312]	; (8010bec <update_wall+0x288>)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010ab8:	e1cb      	b.n	8010e52 <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2b0e      	cmp	r3, #14
 8010abe:	dc29      	bgt.n	8010b14 <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010ac0:	4a4a      	ldr	r2, [pc, #296]	; (8010bec <update_wall+0x288>)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	331c      	adds	r3, #28
 8010ac6:	005b      	lsls	r3, r3, #1
 8010ac8:	4413      	add	r3, r2
 8010aca:	889b      	ldrh	r3, [r3, #4]
 8010acc:	b21a      	sxth	r2, r3
 8010ace:	2101      	movs	r1, #1
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ad6:	b21b      	sxth	r3, r3
 8010ad8:	4313      	orrs	r3, r2
 8010ada:	b21b      	sxth	r3, r3
 8010adc:	b299      	uxth	r1, r3
 8010ade:	4a43      	ldr	r2, [pc, #268]	; (8010bec <update_wall+0x288>)
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	331c      	adds	r3, #28
 8010ae4:	005b      	lsls	r3, r3, #1
 8010ae6:	4413      	add	r3, r2
 8010ae8:	460a      	mov	r2, r1
 8010aea:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010aec:	78fb      	ldrb	r3, [r7, #3]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d010      	beq.n	8010b14 <update_wall+0x1b0>
 8010af2:	4a3e      	ldr	r2, [pc, #248]	; (8010bec <update_wall+0x288>)
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010afa:	b21a      	sxth	r2, r3
 8010afc:	2101      	movs	r1, #1
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	fa01 f303 	lsl.w	r3, r1, r3
 8010b04:	b21b      	sxth	r3, r3
 8010b06:	4313      	orrs	r3, r2
 8010b08:	b21b      	sxth	r3, r3
 8010b0a:	b299      	uxth	r1, r3
 8010b0c:	4a37      	ldr	r2, [pc, #220]	; (8010bec <update_wall+0x288>)
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	2b0e      	cmp	r3, #14
 8010b18:	dc2e      	bgt.n	8010b78 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010b1a:	4a34      	ldr	r2, [pc, #208]	; (8010bec <update_wall+0x288>)
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	332c      	adds	r3, #44	; 0x2c
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	4413      	add	r3, r2
 8010b24:	885b      	ldrh	r3, [r3, #2]
 8010b26:	b21a      	sxth	r2, r3
 8010b28:	2101      	movs	r1, #1
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8010b30:	b21b      	sxth	r3, r3
 8010b32:	4313      	orrs	r3, r2
 8010b34:	b21b      	sxth	r3, r3
 8010b36:	b299      	uxth	r1, r3
 8010b38:	4a2c      	ldr	r2, [pc, #176]	; (8010bec <update_wall+0x288>)
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	332c      	adds	r3, #44	; 0x2c
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	4413      	add	r3, r2
 8010b42:	460a      	mov	r2, r1
 8010b44:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010b46:	7f3b      	ldrb	r3, [r7, #28]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d015      	beq.n	8010b78 <update_wall+0x214>
 8010b4c:	4a27      	ldr	r2, [pc, #156]	; (8010bec <update_wall+0x288>)
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	330c      	adds	r3, #12
 8010b52:	005b      	lsls	r3, r3, #1
 8010b54:	4413      	add	r3, r2
 8010b56:	88db      	ldrh	r3, [r3, #6]
 8010b58:	b21a      	sxth	r2, r3
 8010b5a:	2101      	movs	r1, #1
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8010b62:	b21b      	sxth	r3, r3
 8010b64:	4313      	orrs	r3, r2
 8010b66:	b21b      	sxth	r3, r3
 8010b68:	b299      	uxth	r1, r3
 8010b6a:	4a20      	ldr	r2, [pc, #128]	; (8010bec <update_wall+0x288>)
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	330c      	adds	r3, #12
 8010b70:	005b      	lsls	r3, r3, #1
 8010b72:	4413      	add	r3, r2
 8010b74:	460a      	mov	r2, r1
 8010b76:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f340 816b 	ble.w	8010e56 <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	3b01      	subs	r3, #1
 8010b84:	4a19      	ldr	r2, [pc, #100]	; (8010bec <update_wall+0x288>)
 8010b86:	332c      	adds	r3, #44	; 0x2c
 8010b88:	005b      	lsls	r3, r3, #1
 8010b8a:	4413      	add	r3, r2
 8010b8c:	885b      	ldrh	r3, [r3, #2]
 8010b8e:	b21a      	sxth	r2, r3
 8010b90:	2101      	movs	r1, #1
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	fa01 f303 	lsl.w	r3, r1, r3
 8010b98:	b21b      	sxth	r3, r3
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	b21a      	sxth	r2, r3
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	3b01      	subs	r3, #1
 8010ba2:	b291      	uxth	r1, r2
 8010ba4:	4a11      	ldr	r2, [pc, #68]	; (8010bec <update_wall+0x288>)
 8010ba6:	332c      	adds	r3, #44	; 0x2c
 8010ba8:	005b      	lsls	r3, r3, #1
 8010baa:	4413      	add	r3, r2
 8010bac:	460a      	mov	r2, r1
 8010bae:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010bb0:	7e3b      	ldrb	r3, [r7, #24]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f000 814f 	beq.w	8010e56 <update_wall+0x4f2>
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	3b01      	subs	r3, #1
 8010bbc:	4a0b      	ldr	r2, [pc, #44]	; (8010bec <update_wall+0x288>)
 8010bbe:	330c      	adds	r3, #12
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	4413      	add	r3, r2
 8010bc4:	88db      	ldrh	r3, [r3, #6]
 8010bc6:	b21a      	sxth	r2, r3
 8010bc8:	2101      	movs	r1, #1
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8010bd0:	b21b      	sxth	r3, r3
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	b21a      	sxth	r2, r3
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	b291      	uxth	r1, r2
 8010bdc:	4a03      	ldr	r2, [pc, #12]	; (8010bec <update_wall+0x288>)
 8010bde:	330c      	adds	r3, #12
 8010be0:	005b      	lsls	r3, r3, #1
 8010be2:	4413      	add	r3, r2
 8010be4:	460a      	mov	r2, r1
 8010be6:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010be8:	e135      	b.n	8010e56 <update_wall+0x4f2>
 8010bea:	bf00      	nop
 8010bec:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	dd32      	ble.n	8010c5c <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	4a9c      	ldr	r2, [pc, #624]	; (8010e6c <update_wall+0x508>)
 8010bfc:	332c      	adds	r3, #44	; 0x2c
 8010bfe:	005b      	lsls	r3, r3, #1
 8010c00:	4413      	add	r3, r2
 8010c02:	885b      	ldrh	r3, [r3, #2]
 8010c04:	b21a      	sxth	r2, r3
 8010c06:	2101      	movs	r1, #1
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c0e:	b21b      	sxth	r3, r3
 8010c10:	4313      	orrs	r3, r2
 8010c12:	b21a      	sxth	r2, r3
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	3b01      	subs	r3, #1
 8010c18:	b291      	uxth	r1, r2
 8010c1a:	4a94      	ldr	r2, [pc, #592]	; (8010e6c <update_wall+0x508>)
 8010c1c:	332c      	adds	r3, #44	; 0x2c
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4413      	add	r3, r2
 8010c22:	460a      	mov	r2, r1
 8010c24:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010c26:	78fb      	ldrb	r3, [r7, #3]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d017      	beq.n	8010c5c <update_wall+0x2f8>
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	4a8e      	ldr	r2, [pc, #568]	; (8010e6c <update_wall+0x508>)
 8010c32:	330c      	adds	r3, #12
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	4413      	add	r3, r2
 8010c38:	88db      	ldrh	r3, [r3, #6]
 8010c3a:	b21a      	sxth	r2, r3
 8010c3c:	2101      	movs	r1, #1
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	fa01 f303 	lsl.w	r3, r1, r3
 8010c44:	b21b      	sxth	r3, r3
 8010c46:	4313      	orrs	r3, r2
 8010c48:	b21a      	sxth	r2, r3
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	3b01      	subs	r3, #1
 8010c4e:	b291      	uxth	r1, r2
 8010c50:	4a86      	ldr	r2, [pc, #536]	; (8010e6c <update_wall+0x508>)
 8010c52:	330c      	adds	r3, #12
 8010c54:	005b      	lsls	r3, r3, #1
 8010c56:	4413      	add	r3, r2
 8010c58:	460a      	mov	r2, r1
 8010c5a:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2b0e      	cmp	r3, #14
 8010c60:	dc29      	bgt.n	8010cb6 <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010c62:	4a82      	ldr	r2, [pc, #520]	; (8010e6c <update_wall+0x508>)
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	331c      	adds	r3, #28
 8010c68:	005b      	lsls	r3, r3, #1
 8010c6a:	4413      	add	r3, r2
 8010c6c:	889b      	ldrh	r3, [r3, #4]
 8010c6e:	b21a      	sxth	r2, r3
 8010c70:	2101      	movs	r1, #1
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	fa01 f303 	lsl.w	r3, r1, r3
 8010c78:	b21b      	sxth	r3, r3
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	b21b      	sxth	r3, r3
 8010c7e:	b299      	uxth	r1, r3
 8010c80:	4a7a      	ldr	r2, [pc, #488]	; (8010e6c <update_wall+0x508>)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	331c      	adds	r3, #28
 8010c86:	005b      	lsls	r3, r3, #1
 8010c88:	4413      	add	r3, r2
 8010c8a:	460a      	mov	r2, r1
 8010c8c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010c8e:	7f3b      	ldrb	r3, [r7, #28]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d010      	beq.n	8010cb6 <update_wall+0x352>
 8010c94:	4a75      	ldr	r2, [pc, #468]	; (8010e6c <update_wall+0x508>)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c9c:	b21a      	sxth	r2, r3
 8010c9e:	2101      	movs	r1, #1
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca6:	b21b      	sxth	r3, r3
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	b21b      	sxth	r3, r3
 8010cac:	b299      	uxth	r1, r3
 8010cae:	4a6f      	ldr	r2, [pc, #444]	; (8010e6c <update_wall+0x508>)
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	f340 80ce 	ble.w	8010e5a <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	3b01      	subs	r3, #1
 8010cc2:	4a6a      	ldr	r2, [pc, #424]	; (8010e6c <update_wall+0x508>)
 8010cc4:	331c      	adds	r3, #28
 8010cc6:	005b      	lsls	r3, r3, #1
 8010cc8:	4413      	add	r3, r2
 8010cca:	889b      	ldrh	r3, [r3, #4]
 8010ccc:	b21a      	sxth	r2, r3
 8010cce:	2101      	movs	r1, #1
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cd6:	b21b      	sxth	r3, r3
 8010cd8:	4313      	orrs	r3, r2
 8010cda:	b21a      	sxth	r2, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	b291      	uxth	r1, r2
 8010ce2:	4a62      	ldr	r2, [pc, #392]	; (8010e6c <update_wall+0x508>)
 8010ce4:	331c      	adds	r3, #28
 8010ce6:	005b      	lsls	r3, r3, #1
 8010ce8:	4413      	add	r3, r2
 8010cea:	460a      	mov	r2, r1
 8010cec:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010cee:	7e3b      	ldrb	r3, [r7, #24]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f000 80b2 	beq.w	8010e5a <update_wall+0x4f6>
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	3b01      	subs	r3, #1
 8010cfa:	4a5c      	ldr	r2, [pc, #368]	; (8010e6c <update_wall+0x508>)
 8010cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d00:	b21a      	sxth	r2, r3
 8010d02:	2101      	movs	r1, #1
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	fa01 f303 	lsl.w	r3, r1, r3
 8010d0a:	b21b      	sxth	r3, r3
 8010d0c:	4313      	orrs	r3, r2
 8010d0e:	b21a      	sxth	r2, r3
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	3b01      	subs	r3, #1
 8010d14:	b291      	uxth	r1, r2
 8010d16:	4a55      	ldr	r2, [pc, #340]	; (8010e6c <update_wall+0x508>)
 8010d18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010d1c:	e09d      	b.n	8010e5a <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	dd2d      	ble.n	8010d80 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	3b01      	subs	r3, #1
 8010d28:	4a50      	ldr	r2, [pc, #320]	; (8010e6c <update_wall+0x508>)
 8010d2a:	331c      	adds	r3, #28
 8010d2c:	005b      	lsls	r3, r3, #1
 8010d2e:	4413      	add	r3, r2
 8010d30:	889b      	ldrh	r3, [r3, #4]
 8010d32:	b21a      	sxth	r2, r3
 8010d34:	2101      	movs	r1, #1
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	fa01 f303 	lsl.w	r3, r1, r3
 8010d3c:	b21b      	sxth	r3, r3
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	b21a      	sxth	r2, r3
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3b01      	subs	r3, #1
 8010d46:	b291      	uxth	r1, r2
 8010d48:	4a48      	ldr	r2, [pc, #288]	; (8010e6c <update_wall+0x508>)
 8010d4a:	331c      	adds	r3, #28
 8010d4c:	005b      	lsls	r3, r3, #1
 8010d4e:	4413      	add	r3, r2
 8010d50:	460a      	mov	r2, r1
 8010d52:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010d54:	78fb      	ldrb	r3, [r7, #3]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d012      	beq.n	8010d80 <update_wall+0x41c>
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	3b01      	subs	r3, #1
 8010d5e:	4a43      	ldr	r2, [pc, #268]	; (8010e6c <update_wall+0x508>)
 8010d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d64:	b21a      	sxth	r2, r3
 8010d66:	2101      	movs	r1, #1
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d6e:	b21b      	sxth	r3, r3
 8010d70:	4313      	orrs	r3, r2
 8010d72:	b21a      	sxth	r2, r3
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	3b01      	subs	r3, #1
 8010d78:	b291      	uxth	r1, r2
 8010d7a:	4a3c      	ldr	r2, [pc, #240]	; (8010e6c <update_wall+0x508>)
 8010d7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	dd32      	ble.n	8010dec <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	4a38      	ldr	r2, [pc, #224]	; (8010e6c <update_wall+0x508>)
 8010d8c:	332c      	adds	r3, #44	; 0x2c
 8010d8e:	005b      	lsls	r3, r3, #1
 8010d90:	4413      	add	r3, r2
 8010d92:	885b      	ldrh	r3, [r3, #2]
 8010d94:	b21a      	sxth	r2, r3
 8010d96:	2101      	movs	r1, #1
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d9e:	b21b      	sxth	r3, r3
 8010da0:	4313      	orrs	r3, r2
 8010da2:	b21a      	sxth	r2, r3
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	3b01      	subs	r3, #1
 8010da8:	b291      	uxth	r1, r2
 8010daa:	4a30      	ldr	r2, [pc, #192]	; (8010e6c <update_wall+0x508>)
 8010dac:	332c      	adds	r3, #44	; 0x2c
 8010dae:	005b      	lsls	r3, r3, #1
 8010db0:	4413      	add	r3, r2
 8010db2:	460a      	mov	r2, r1
 8010db4:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010db6:	7f3b      	ldrb	r3, [r7, #28]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d017      	beq.n	8010dec <update_wall+0x488>
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	4a2a      	ldr	r2, [pc, #168]	; (8010e6c <update_wall+0x508>)
 8010dc2:	330c      	adds	r3, #12
 8010dc4:	005b      	lsls	r3, r3, #1
 8010dc6:	4413      	add	r3, r2
 8010dc8:	88db      	ldrh	r3, [r3, #6]
 8010dca:	b21a      	sxth	r2, r3
 8010dcc:	2101      	movs	r1, #1
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8010dd4:	b21b      	sxth	r3, r3
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	b21a      	sxth	r2, r3
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	b291      	uxth	r1, r2
 8010de0:	4a22      	ldr	r2, [pc, #136]	; (8010e6c <update_wall+0x508>)
 8010de2:	330c      	adds	r3, #12
 8010de4:	005b      	lsls	r3, r3, #1
 8010de6:	4413      	add	r3, r2
 8010de8:	460a      	mov	r2, r1
 8010dea:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b0e      	cmp	r3, #14
 8010df0:	dc35      	bgt.n	8010e5e <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010df2:	4a1e      	ldr	r2, [pc, #120]	; (8010e6c <update_wall+0x508>)
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	332c      	adds	r3, #44	; 0x2c
 8010df8:	005b      	lsls	r3, r3, #1
 8010dfa:	4413      	add	r3, r2
 8010dfc:	885b      	ldrh	r3, [r3, #2]
 8010dfe:	b21a      	sxth	r2, r3
 8010e00:	2101      	movs	r1, #1
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	fa01 f303 	lsl.w	r3, r1, r3
 8010e08:	b21b      	sxth	r3, r3
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	b21b      	sxth	r3, r3
 8010e0e:	b299      	uxth	r1, r3
 8010e10:	4a16      	ldr	r2, [pc, #88]	; (8010e6c <update_wall+0x508>)
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	332c      	adds	r3, #44	; 0x2c
 8010e16:	005b      	lsls	r3, r3, #1
 8010e18:	4413      	add	r3, r2
 8010e1a:	460a      	mov	r2, r1
 8010e1c:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010e1e:	7e3b      	ldrb	r3, [r7, #24]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d01c      	beq.n	8010e5e <update_wall+0x4fa>
 8010e24:	4a11      	ldr	r2, [pc, #68]	; (8010e6c <update_wall+0x508>)
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	330c      	adds	r3, #12
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	4413      	add	r3, r2
 8010e2e:	88db      	ldrh	r3, [r3, #6]
 8010e30:	b21a      	sxth	r2, r3
 8010e32:	2101      	movs	r1, #1
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	fa01 f303 	lsl.w	r3, r1, r3
 8010e3a:	b21b      	sxth	r3, r3
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	b21b      	sxth	r3, r3
 8010e40:	b299      	uxth	r1, r3
 8010e42:	4a0a      	ldr	r2, [pc, #40]	; (8010e6c <update_wall+0x508>)
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	330c      	adds	r3, #12
 8010e48:	005b      	lsls	r3, r3, #1
 8010e4a:	4413      	add	r3, r2
 8010e4c:	460a      	mov	r2, r1
 8010e4e:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010e50:	e005      	b.n	8010e5e <update_wall+0x4fa>
		break;
 8010e52:	bf00      	nop
 8010e54:	e004      	b.n	8010e60 <update_wall+0x4fc>
		break;
 8010e56:	bf00      	nop
 8010e58:	e002      	b.n	8010e60 <update_wall+0x4fc>
		break;
 8010e5a:	bf00      	nop
 8010e5c:	e000      	b.n	8010e60 <update_wall+0x4fc>
		break;
 8010e5e:	bf00      	nop

	}


}
 8010e60:	bf00      	nop
 8010e62:	3714      	adds	r7, #20
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr
 8010e6c:	20000c3c 	.word	0x20000c3c

08010e70 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010e70:	b480      	push	{r7}
 8010e72:	b085      	sub	sp, #20
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	607a      	str	r2, [r7, #4]
 8010e7c:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	2201      	movs	r2, #1
 8010e82:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010e84:	69bb      	ldr	r3, [r7, #24]
 8010e86:	2201      	movs	r2, #1
 8010e88:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	3b01      	subs	r3, #1
 8010e94:	2b03      	cmp	r3, #3
 8010e96:	f200 8156 	bhi.w	8011146 <get_wall+0x2d6>
 8010e9a:	a201      	add	r2, pc, #4	; (adr r2, 8010ea0 <get_wall+0x30>)
 8010e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea0:	08010eb1 	.word	0x08010eb1
 8010ea4:	08010f51 	.word	0x08010f51
 8010ea8:	08010ff5 	.word	0x08010ff5
 8010eac:	08011095 	.word	0x08011095
	case 1:
		if (y <= 14) {
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	2b0e      	cmp	r3, #14
 8010eb4:	dc17      	bgt.n	8010ee6 <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010eb6:	4aa7      	ldr	r2, [pc, #668]	; (8011154 <get_wall+0x2e4>)
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	330c      	adds	r3, #12
 8010ebc:	005b      	lsls	r3, r3, #1
 8010ebe:	4413      	add	r3, r2
 8010ec0:	88db      	ldrh	r3, [r3, #6]
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8010ecc:	ea01 0203 	and.w	r2, r1, r3
 8010ed0:	2101      	movs	r1, #1
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	bf0c      	ite	eq
 8010edc:	2301      	moveq	r3, #1
 8010ede:	2300      	movne	r3, #0
 8010ee0:	b2da      	uxtb	r2, r3
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	dd16      	ble.n	8010f1a <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	4a98      	ldr	r2, [pc, #608]	; (8011154 <get_wall+0x2e4>)
 8010ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	2201      	movs	r2, #1
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	fa02 f303 	lsl.w	r3, r2, r3
 8010f00:	ea01 0203 	and.w	r2, r1, r3
 8010f04:	2101      	movs	r1, #1
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	fa01 f303 	lsl.w	r3, r1, r3
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	bf0c      	ite	eq
 8010f10:	2301      	moveq	r3, #1
 8010f12:	2300      	movne	r3, #0
 8010f14:	b2da      	uxtb	r2, r3
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2b0e      	cmp	r3, #14
 8010f1e:	f300 810b 	bgt.w	8011138 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f22:	4a8c      	ldr	r2, [pc, #560]	; (8011154 <get_wall+0x2e4>)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	fa02 f303 	lsl.w	r3, r2, r3
 8010f34:	ea01 0203 	and.w	r2, r1, r3
 8010f38:	2101      	movs	r1, #1
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8010f40:	429a      	cmp	r2, r3
 8010f42:	bf0c      	ite	eq
 8010f44:	2301      	moveq	r3, #1
 8010f46:	2300      	movne	r3, #0
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	69bb      	ldr	r3, [r7, #24]
 8010f4c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010f4e:	e0f3      	b.n	8011138 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2b0e      	cmp	r3, #14
 8010f54:	dc15      	bgt.n	8010f82 <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f56:	4a7f      	ldr	r2, [pc, #508]	; (8011154 <get_wall+0x2e4>)
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f5e:	4619      	mov	r1, r3
 8010f60:	2201      	movs	r2, #1
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	fa02 f303 	lsl.w	r3, r2, r3
 8010f68:	ea01 0203 	and.w	r2, r1, r3
 8010f6c:	2101      	movs	r1, #1
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	fa01 f303 	lsl.w	r3, r1, r3
 8010f74:	429a      	cmp	r2, r3
 8010f76:	bf0c      	ite	eq
 8010f78:	2301      	moveq	r3, #1
 8010f7a:	2300      	movne	r3, #0
 8010f7c:	b2da      	uxtb	r2, r3
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	2b0e      	cmp	r3, #14
 8010f86:	dc17      	bgt.n	8010fb8 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010f88:	4a72      	ldr	r2, [pc, #456]	; (8011154 <get_wall+0x2e4>)
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	330c      	adds	r3, #12
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	4413      	add	r3, r2
 8010f92:	88db      	ldrh	r3, [r3, #6]
 8010f94:	4619      	mov	r1, r3
 8010f96:	2201      	movs	r2, #1
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f9e:	ea01 0203 	and.w	r2, r1, r3
 8010fa2:	2101      	movs	r1, #1
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8010faa:	429a      	cmp	r2, r3
 8010fac:	bf0c      	ite	eq
 8010fae:	2301      	moveq	r3, #1
 8010fb0:	2300      	movne	r3, #0
 8010fb2:	b2da      	uxtb	r2, r3
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f340 80be 	ble.w	801113c <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	3b01      	subs	r3, #1
 8010fc4:	4a63      	ldr	r2, [pc, #396]	; (8011154 <get_wall+0x2e4>)
 8010fc6:	330c      	adds	r3, #12
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	4413      	add	r3, r2
 8010fcc:	88db      	ldrh	r3, [r3, #6]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8010fd8:	ea01 0203 	and.w	r2, r1, r3
 8010fdc:	2101      	movs	r1, #1
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	bf0c      	ite	eq
 8010fe8:	2301      	moveq	r3, #1
 8010fea:	2300      	movne	r3, #0
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	69bb      	ldr	r3, [r7, #24]
 8010ff0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010ff2:	e0a3      	b.n	801113c <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dd18      	ble.n	801102c <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	4a55      	ldr	r2, [pc, #340]	; (8011154 <get_wall+0x2e4>)
 8011000:	330c      	adds	r3, #12
 8011002:	005b      	lsls	r3, r3, #1
 8011004:	4413      	add	r3, r2
 8011006:	88db      	ldrh	r3, [r3, #6]
 8011008:	4619      	mov	r1, r3
 801100a:	2201      	movs	r2, #1
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	fa02 f303 	lsl.w	r3, r2, r3
 8011012:	ea01 0203 	and.w	r2, r1, r3
 8011016:	2101      	movs	r1, #1
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	fa01 f303 	lsl.w	r3, r1, r3
 801101e:	429a      	cmp	r2, r3
 8011020:	bf0c      	ite	eq
 8011022:	2301      	moveq	r3, #1
 8011024:	2300      	movne	r3, #0
 8011026:	b2da      	uxtb	r2, r3
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b0e      	cmp	r3, #14
 8011030:	dc15      	bgt.n	801105e <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8011032:	4a48      	ldr	r2, [pc, #288]	; (8011154 <get_wall+0x2e4>)
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801103a:	4619      	mov	r1, r3
 801103c:	2201      	movs	r2, #1
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	fa02 f303 	lsl.w	r3, r2, r3
 8011044:	ea01 0203 	and.w	r2, r1, r3
 8011048:	2101      	movs	r1, #1
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	fa01 f303 	lsl.w	r3, r1, r3
 8011050:	429a      	cmp	r2, r3
 8011052:	bf0c      	ite	eq
 8011054:	2301      	moveq	r3, #1
 8011056:	2300      	movne	r3, #0
 8011058:	b2da      	uxtb	r2, r3
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2b00      	cmp	r3, #0
 8011062:	dd6d      	ble.n	8011140 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	3b01      	subs	r3, #1
 8011068:	4a3a      	ldr	r2, [pc, #232]	; (8011154 <get_wall+0x2e4>)
 801106a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801106e:	4619      	mov	r1, r3
 8011070:	2201      	movs	r2, #1
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	fa02 f303 	lsl.w	r3, r2, r3
 8011078:	ea01 0203 	and.w	r2, r1, r3
 801107c:	2101      	movs	r1, #1
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	fa01 f303 	lsl.w	r3, r1, r3
 8011084:	429a      	cmp	r2, r3
 8011086:	bf0c      	ite	eq
 8011088:	2301      	moveq	r3, #1
 801108a:	2300      	movne	r3, #0
 801108c:	b2da      	uxtb	r2, r3
 801108e:	69bb      	ldr	r3, [r7, #24]
 8011090:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011092:	e055      	b.n	8011140 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2b00      	cmp	r3, #0
 8011098:	dd16      	ble.n	80110c8 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	3b01      	subs	r3, #1
 801109e:	4a2d      	ldr	r2, [pc, #180]	; (8011154 <get_wall+0x2e4>)
 80110a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110a4:	4619      	mov	r1, r3
 80110a6:	2201      	movs	r2, #1
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	fa02 f303 	lsl.w	r3, r2, r3
 80110ae:	ea01 0203 	and.w	r2, r1, r3
 80110b2:	2101      	movs	r1, #1
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	fa01 f303 	lsl.w	r3, r1, r3
 80110ba:	429a      	cmp	r2, r3
 80110bc:	bf0c      	ite	eq
 80110be:	2301      	moveq	r3, #1
 80110c0:	2300      	movne	r3, #0
 80110c2:	b2da      	uxtb	r2, r3
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	dd18      	ble.n	8011100 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	3b01      	subs	r3, #1
 80110d2:	4a20      	ldr	r2, [pc, #128]	; (8011154 <get_wall+0x2e4>)
 80110d4:	330c      	adds	r3, #12
 80110d6:	005b      	lsls	r3, r3, #1
 80110d8:	4413      	add	r3, r2
 80110da:	88db      	ldrh	r3, [r3, #6]
 80110dc:	4619      	mov	r1, r3
 80110de:	2201      	movs	r2, #1
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	fa02 f303 	lsl.w	r3, r2, r3
 80110e6:	ea01 0203 	and.w	r2, r1, r3
 80110ea:	2101      	movs	r1, #1
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	fa01 f303 	lsl.w	r3, r1, r3
 80110f2:	429a      	cmp	r2, r3
 80110f4:	bf0c      	ite	eq
 80110f6:	2301      	moveq	r3, #1
 80110f8:	2300      	movne	r3, #0
 80110fa:	b2da      	uxtb	r2, r3
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	2b0e      	cmp	r3, #14
 8011104:	dc1e      	bgt.n	8011144 <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8011106:	4a13      	ldr	r2, [pc, #76]	; (8011154 <get_wall+0x2e4>)
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	330c      	adds	r3, #12
 801110c:	005b      	lsls	r3, r3, #1
 801110e:	4413      	add	r3, r2
 8011110:	88db      	ldrh	r3, [r3, #6]
 8011112:	4619      	mov	r1, r3
 8011114:	2201      	movs	r2, #1
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	fa02 f303 	lsl.w	r3, r2, r3
 801111c:	ea01 0203 	and.w	r2, r1, r3
 8011120:	2101      	movs	r1, #1
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	fa01 f303 	lsl.w	r3, r1, r3
 8011128:	429a      	cmp	r2, r3
 801112a:	bf0c      	ite	eq
 801112c:	2301      	moveq	r3, #1
 801112e:	2300      	movne	r3, #0
 8011130:	b2da      	uxtb	r2, r3
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011136:	e005      	b.n	8011144 <get_wall+0x2d4>
		break;
 8011138:	bf00      	nop
 801113a:	e004      	b.n	8011146 <get_wall+0x2d6>
		break;
 801113c:	bf00      	nop
 801113e:	e002      	b.n	8011146 <get_wall+0x2d6>
		break;
 8011140:	bf00      	nop
 8011142:	e000      	b.n	8011146 <get_wall+0x2d6>
		break;
 8011144:	bf00      	nop
	}

}
 8011146:	bf00      	nop
 8011148:	3714      	adds	r7, #20
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop
 8011154:	20000c3c 	.word	0x20000c3c

08011158 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011158:	b480      	push	{r7}
 801115a:	b085      	sub	sp, #20
 801115c:	af00      	add	r7, sp, #0
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	607a      	str	r2, [r7, #4]
 8011164:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	2201      	movs	r2, #1
 801116a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	2201      	movs	r2, #1
 8011170:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	2201      	movs	r2, #1
 8011176:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	3b01      	subs	r3, #1
 801117c:	2b03      	cmp	r3, #3
 801117e:	f200 8162 	bhi.w	8011446 <get_wall_look+0x2ee>
 8011182:	a201      	add	r2, pc, #4	; (adr r2, 8011188 <get_wall_look+0x30>)
 8011184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011188:	08011199 	.word	0x08011199
 801118c:	08011241 	.word	0x08011241
 8011190:	080112e9 	.word	0x080112e9
 8011194:	08011391 	.word	0x08011391
	case 1:
		if (y <= 14) {
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	2b0e      	cmp	r3, #14
 801119c:	dc17      	bgt.n	80111ce <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 801119e:	4aad      	ldr	r2, [pc, #692]	; (8011454 <get_wall_look+0x2fc>)
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	332c      	adds	r3, #44	; 0x2c
 80111a4:	005b      	lsls	r3, r3, #1
 80111a6:	4413      	add	r3, r2
 80111a8:	885b      	ldrh	r3, [r3, #2]
 80111aa:	4619      	mov	r1, r3
 80111ac:	2201      	movs	r2, #1
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	fa02 f303 	lsl.w	r3, r2, r3
 80111b4:	ea01 0203 	and.w	r2, r1, r3
 80111b8:	2101      	movs	r1, #1
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	fa01 f303 	lsl.w	r3, r1, r3
 80111c0:	429a      	cmp	r2, r3
 80111c2:	bf0c      	ite	eq
 80111c4:	2301      	moveq	r3, #1
 80111c6:	2300      	movne	r3, #0
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	dd18      	ble.n	8011206 <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	3b01      	subs	r3, #1
 80111d8:	4a9e      	ldr	r2, [pc, #632]	; (8011454 <get_wall_look+0x2fc>)
 80111da:	331c      	adds	r3, #28
 80111dc:	005b      	lsls	r3, r3, #1
 80111de:	4413      	add	r3, r2
 80111e0:	889b      	ldrh	r3, [r3, #4]
 80111e2:	4619      	mov	r1, r3
 80111e4:	2201      	movs	r2, #1
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	fa02 f303 	lsl.w	r3, r2, r3
 80111ec:	ea01 0203 	and.w	r2, r1, r3
 80111f0:	2101      	movs	r1, #1
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	fa01 f303 	lsl.w	r3, r1, r3
 80111f8:	429a      	cmp	r2, r3
 80111fa:	bf0c      	ite	eq
 80111fc:	2301      	moveq	r3, #1
 80111fe:	2300      	movne	r3, #0
 8011200:	b2da      	uxtb	r2, r3
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2b0e      	cmp	r3, #14
 801120a:	f300 8115 	bgt.w	8011438 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801120e:	4a91      	ldr	r2, [pc, #580]	; (8011454 <get_wall_look+0x2fc>)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	331c      	adds	r3, #28
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	4413      	add	r3, r2
 8011218:	889b      	ldrh	r3, [r3, #4]
 801121a:	4619      	mov	r1, r3
 801121c:	2201      	movs	r2, #1
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	fa02 f303 	lsl.w	r3, r2, r3
 8011224:	ea01 0203 	and.w	r2, r1, r3
 8011228:	2101      	movs	r1, #1
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	fa01 f303 	lsl.w	r3, r1, r3
 8011230:	429a      	cmp	r2, r3
 8011232:	bf0c      	ite	eq
 8011234:	2301      	moveq	r3, #1
 8011236:	2300      	movne	r3, #0
 8011238:	b2da      	uxtb	r2, r3
 801123a:	69bb      	ldr	r3, [r7, #24]
 801123c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801123e:	e0fb      	b.n	8011438 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2b0e      	cmp	r3, #14
 8011244:	dc17      	bgt.n	8011276 <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011246:	4a83      	ldr	r2, [pc, #524]	; (8011454 <get_wall_look+0x2fc>)
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	331c      	adds	r3, #28
 801124c:	005b      	lsls	r3, r3, #1
 801124e:	4413      	add	r3, r2
 8011250:	889b      	ldrh	r3, [r3, #4]
 8011252:	4619      	mov	r1, r3
 8011254:	2201      	movs	r2, #1
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	fa02 f303 	lsl.w	r3, r2, r3
 801125c:	ea01 0203 	and.w	r2, r1, r3
 8011260:	2101      	movs	r1, #1
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	fa01 f303 	lsl.w	r3, r1, r3
 8011268:	429a      	cmp	r2, r3
 801126a:	bf0c      	ite	eq
 801126c:	2301      	moveq	r3, #1
 801126e:	2300      	movne	r3, #0
 8011270:	b2da      	uxtb	r2, r3
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	2b0e      	cmp	r3, #14
 801127a:	dc17      	bgt.n	80112ac <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 801127c:	4a75      	ldr	r2, [pc, #468]	; (8011454 <get_wall_look+0x2fc>)
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	332c      	adds	r3, #44	; 0x2c
 8011282:	005b      	lsls	r3, r3, #1
 8011284:	4413      	add	r3, r2
 8011286:	885b      	ldrh	r3, [r3, #2]
 8011288:	4619      	mov	r1, r3
 801128a:	2201      	movs	r2, #1
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	fa02 f303 	lsl.w	r3, r2, r3
 8011292:	ea01 0203 	and.w	r2, r1, r3
 8011296:	2101      	movs	r1, #1
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	fa01 f303 	lsl.w	r3, r1, r3
 801129e:	429a      	cmp	r2, r3
 80112a0:	bf0c      	ite	eq
 80112a2:	2301      	moveq	r3, #1
 80112a4:	2300      	movne	r3, #0
 80112a6:	b2da      	uxtb	r2, r3
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f340 80c4 	ble.w	801143c <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	3b01      	subs	r3, #1
 80112b8:	4a66      	ldr	r2, [pc, #408]	; (8011454 <get_wall_look+0x2fc>)
 80112ba:	332c      	adds	r3, #44	; 0x2c
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	4413      	add	r3, r2
 80112c0:	885b      	ldrh	r3, [r3, #2]
 80112c2:	4619      	mov	r1, r3
 80112c4:	2201      	movs	r2, #1
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	fa02 f303 	lsl.w	r3, r2, r3
 80112cc:	ea01 0203 	and.w	r2, r1, r3
 80112d0:	2101      	movs	r1, #1
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	fa01 f303 	lsl.w	r3, r1, r3
 80112d8:	429a      	cmp	r2, r3
 80112da:	bf0c      	ite	eq
 80112dc:	2301      	moveq	r3, #1
 80112de:	2300      	movne	r3, #0
 80112e0:	b2da      	uxtb	r2, r3
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80112e6:	e0a9      	b.n	801143c <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	dd18      	ble.n	8011320 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	3b01      	subs	r3, #1
 80112f2:	4a58      	ldr	r2, [pc, #352]	; (8011454 <get_wall_look+0x2fc>)
 80112f4:	332c      	adds	r3, #44	; 0x2c
 80112f6:	005b      	lsls	r3, r3, #1
 80112f8:	4413      	add	r3, r2
 80112fa:	885b      	ldrh	r3, [r3, #2]
 80112fc:	4619      	mov	r1, r3
 80112fe:	2201      	movs	r2, #1
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	fa02 f303 	lsl.w	r3, r2, r3
 8011306:	ea01 0203 	and.w	r2, r1, r3
 801130a:	2101      	movs	r1, #1
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	fa01 f303 	lsl.w	r3, r1, r3
 8011312:	429a      	cmp	r2, r3
 8011314:	bf0c      	ite	eq
 8011316:	2301      	moveq	r3, #1
 8011318:	2300      	movne	r3, #0
 801131a:	b2da      	uxtb	r2, r3
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2b0e      	cmp	r3, #14
 8011324:	dc17      	bgt.n	8011356 <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011326:	4a4b      	ldr	r2, [pc, #300]	; (8011454 <get_wall_look+0x2fc>)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	331c      	adds	r3, #28
 801132c:	005b      	lsls	r3, r3, #1
 801132e:	4413      	add	r3, r2
 8011330:	889b      	ldrh	r3, [r3, #4]
 8011332:	4619      	mov	r1, r3
 8011334:	2201      	movs	r2, #1
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	fa02 f303 	lsl.w	r3, r2, r3
 801133c:	ea01 0203 	and.w	r2, r1, r3
 8011340:	2101      	movs	r1, #1
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	fa01 f303 	lsl.w	r3, r1, r3
 8011348:	429a      	cmp	r2, r3
 801134a:	bf0c      	ite	eq
 801134c:	2301      	moveq	r3, #1
 801134e:	2300      	movne	r3, #0
 8011350:	b2da      	uxtb	r2, r3
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2b00      	cmp	r3, #0
 801135a:	dd71      	ble.n	8011440 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	3b01      	subs	r3, #1
 8011360:	4a3c      	ldr	r2, [pc, #240]	; (8011454 <get_wall_look+0x2fc>)
 8011362:	331c      	adds	r3, #28
 8011364:	005b      	lsls	r3, r3, #1
 8011366:	4413      	add	r3, r2
 8011368:	889b      	ldrh	r3, [r3, #4]
 801136a:	4619      	mov	r1, r3
 801136c:	2201      	movs	r2, #1
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	fa02 f303 	lsl.w	r3, r2, r3
 8011374:	ea01 0203 	and.w	r2, r1, r3
 8011378:	2101      	movs	r1, #1
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	fa01 f303 	lsl.w	r3, r1, r3
 8011380:	429a      	cmp	r2, r3
 8011382:	bf0c      	ite	eq
 8011384:	2301      	moveq	r3, #1
 8011386:	2300      	movne	r3, #0
 8011388:	b2da      	uxtb	r2, r3
 801138a:	69bb      	ldr	r3, [r7, #24]
 801138c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801138e:	e057      	b.n	8011440 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2b00      	cmp	r3, #0
 8011394:	dd18      	ble.n	80113c8 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	3b01      	subs	r3, #1
 801139a:	4a2e      	ldr	r2, [pc, #184]	; (8011454 <get_wall_look+0x2fc>)
 801139c:	331c      	adds	r3, #28
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	4413      	add	r3, r2
 80113a2:	889b      	ldrh	r3, [r3, #4]
 80113a4:	4619      	mov	r1, r3
 80113a6:	2201      	movs	r2, #1
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	fa02 f303 	lsl.w	r3, r2, r3
 80113ae:	ea01 0203 	and.w	r2, r1, r3
 80113b2:	2101      	movs	r1, #1
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	fa01 f303 	lsl.w	r3, r1, r3
 80113ba:	429a      	cmp	r2, r3
 80113bc:	bf0c      	ite	eq
 80113be:	2301      	moveq	r3, #1
 80113c0:	2300      	movne	r3, #0
 80113c2:	b2da      	uxtb	r2, r3
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	dd18      	ble.n	8011400 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	4a20      	ldr	r2, [pc, #128]	; (8011454 <get_wall_look+0x2fc>)
 80113d4:	332c      	adds	r3, #44	; 0x2c
 80113d6:	005b      	lsls	r3, r3, #1
 80113d8:	4413      	add	r3, r2
 80113da:	885b      	ldrh	r3, [r3, #2]
 80113dc:	4619      	mov	r1, r3
 80113de:	2201      	movs	r2, #1
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	fa02 f303 	lsl.w	r3, r2, r3
 80113e6:	ea01 0203 	and.w	r2, r1, r3
 80113ea:	2101      	movs	r1, #1
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	fa01 f303 	lsl.w	r3, r1, r3
 80113f2:	429a      	cmp	r2, r3
 80113f4:	bf0c      	ite	eq
 80113f6:	2301      	moveq	r3, #1
 80113f8:	2300      	movne	r3, #0
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	2b0e      	cmp	r3, #14
 8011404:	dc1e      	bgt.n	8011444 <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011406:	4a13      	ldr	r2, [pc, #76]	; (8011454 <get_wall_look+0x2fc>)
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	332c      	adds	r3, #44	; 0x2c
 801140c:	005b      	lsls	r3, r3, #1
 801140e:	4413      	add	r3, r2
 8011410:	885b      	ldrh	r3, [r3, #2]
 8011412:	4619      	mov	r1, r3
 8011414:	2201      	movs	r2, #1
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	fa02 f303 	lsl.w	r3, r2, r3
 801141c:	ea01 0203 	and.w	r2, r1, r3
 8011420:	2101      	movs	r1, #1
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	fa01 f303 	lsl.w	r3, r1, r3
 8011428:	429a      	cmp	r2, r3
 801142a:	bf0c      	ite	eq
 801142c:	2301      	moveq	r3, #1
 801142e:	2300      	movne	r3, #0
 8011430:	b2da      	uxtb	r2, r3
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011436:	e005      	b.n	8011444 <get_wall_look+0x2ec>
		break;
 8011438:	bf00      	nop
 801143a:	e004      	b.n	8011446 <get_wall_look+0x2ee>
		break;
 801143c:	bf00      	nop
 801143e:	e002      	b.n	8011446 <get_wall_look+0x2ee>
		break;
 8011440:	bf00      	nop
 8011442:	e000      	b.n	8011446 <get_wall_look+0x2ee>
		break;
 8011444:	bf00      	nop
	}

}
 8011446:	bf00      	nop
 8011448:	3714      	adds	r7, #20
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	20000c3c 	.word	0x20000c3c

08011458 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011458:	b480      	push	{r7}
 801145a:	b087      	sub	sp, #28
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
 8011464:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8011466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011468:	2b0e      	cmp	r3, #14
 801146a:	dd02      	ble.n	8011472 <search_AroundWalkCount+0x1a>
 801146c:	23ff      	movs	r3, #255	; 0xff
 801146e:	82fb      	strh	r3, [r7, #22]
 8011470:	e008      	b.n	8011484 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[16 * x + y + 1];}
 8011472:	6a3b      	ldr	r3, [r7, #32]
 8011474:	011a      	lsls	r2, r3, #4
 8011476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011478:	4413      	add	r3, r2
 801147a:	3301      	adds	r3, #1
 801147c:	4a3c      	ldr	r2, [pc, #240]	; (8011570 <search_AroundWalkCount+0x118>)
 801147e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011482:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8011484:	6a3b      	ldr	r3, [r7, #32]
 8011486:	2b0e      	cmp	r3, #14
 8011488:	dd02      	ble.n	8011490 <search_AroundWalkCount+0x38>
 801148a:	23ff      	movs	r3, #255	; 0xff
 801148c:	82bb      	strh	r3, [r7, #20]
 801148e:	e008      	b.n	80114a2 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[16 * (x + 1) + y];}
 8011490:	6a3b      	ldr	r3, [r7, #32]
 8011492:	3301      	adds	r3, #1
 8011494:	011a      	lsls	r2, r3, #4
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	4413      	add	r3, r2
 801149a:	4a35      	ldr	r2, [pc, #212]	; (8011570 <search_AroundWalkCount+0x118>)
 801149c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114a0:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	dc02      	bgt.n	80114ae <search_AroundWalkCount+0x56>
 80114a8:	23ff      	movs	r3, #255	; 0xff
 80114aa:	827b      	strh	r3, [r7, #18]
 80114ac:	e008      	b.n	80114c0 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[16 * x + y - 1];}
 80114ae:	6a3b      	ldr	r3, [r7, #32]
 80114b0:	011a      	lsls	r2, r3, #4
 80114b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b4:	4413      	add	r3, r2
 80114b6:	3b01      	subs	r3, #1
 80114b8:	4a2d      	ldr	r2, [pc, #180]	; (8011570 <search_AroundWalkCount+0x118>)
 80114ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114be:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 80114c0:	6a3b      	ldr	r3, [r7, #32]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	dc02      	bgt.n	80114cc <search_AroundWalkCount+0x74>
 80114c6:	23ff      	movs	r3, #255	; 0xff
 80114c8:	823b      	strh	r3, [r7, #16]
 80114ca:	e008      	b.n	80114de <search_AroundWalkCount+0x86>
	else {west_count = walk_count[16 * (x - 1) + y];}
 80114cc:	6a3b      	ldr	r3, [r7, #32]
 80114ce:	3b01      	subs	r3, #1
 80114d0:	011a      	lsls	r2, r3, #4
 80114d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d4:	4413      	add	r3, r2
 80114d6:	4a26      	ldr	r2, [pc, #152]	; (8011570 <search_AroundWalkCount+0x118>)
 80114d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114dc:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80114de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e0:	3b01      	subs	r3, #1
 80114e2:	2b03      	cmp	r3, #3
 80114e4:	d83e      	bhi.n	8011564 <search_AroundWalkCount+0x10c>
 80114e6:	a201      	add	r2, pc, #4	; (adr r2, 80114ec <search_AroundWalkCount+0x94>)
 80114e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ec:	080114fd 	.word	0x080114fd
 80114f0:	08011517 	.word	0x08011517
 80114f4:	08011531 	.word	0x08011531
 80114f8:	0801154b 	.word	0x0801154b
	case 1:
		*front_count = north_count;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	8afa      	ldrh	r2, [r7, #22]
 8011500:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	8aba      	ldrh	r2, [r7, #20]
 8011506:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	8a7a      	ldrh	r2, [r7, #18]
 801150c:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	8a3a      	ldrh	r2, [r7, #16]
 8011512:	801a      	strh	r2, [r3, #0]
		break;
 8011514:	e026      	b.n	8011564 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	8aba      	ldrh	r2, [r7, #20]
 801151a:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	8a7a      	ldrh	r2, [r7, #18]
 8011520:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	8a3a      	ldrh	r2, [r7, #16]
 8011526:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	8afa      	ldrh	r2, [r7, #22]
 801152c:	801a      	strh	r2, [r3, #0]
		break;
 801152e:	e019      	b.n	8011564 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	8a7a      	ldrh	r2, [r7, #18]
 8011534:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	8a3a      	ldrh	r2, [r7, #16]
 801153a:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	8afa      	ldrh	r2, [r7, #22]
 8011540:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	8aba      	ldrh	r2, [r7, #20]
 8011546:	801a      	strh	r2, [r3, #0]
		break;
 8011548:	e00c      	b.n	8011564 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	8a3a      	ldrh	r2, [r7, #16]
 801154e:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	8afa      	ldrh	r2, [r7, #22]
 8011554:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	8aba      	ldrh	r2, [r7, #20]
 801155a:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	8a7a      	ldrh	r2, [r7, #18]
 8011560:	801a      	strh	r2, [r3, #0]
		break;
 8011562:	bf00      	nop

	}


}
 8011564:	bf00      	nop
 8011566:	371c      	adds	r7, #28
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr
 8011570:	20000d2c 	.word	0x20000d2c

08011574 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011574:	b480      	push	{r7}
 8011576:	b087      	sub	sp, #28
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	607a      	str	r2, [r7, #4]
 8011580:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 8011582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011584:	2b0e      	cmp	r3, #14
 8011586:	dd03      	ble.n	8011590 <search_AroundDijkstraCount+0x1c>
 8011588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801158c:	82fb      	strh	r3, [r7, #22]
 801158e:	e00a      	b.n	80115a6 <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 8011590:	4944      	ldr	r1, [pc, #272]	; (80116a4 <search_AroundDijkstraCount+0x130>)
 8011592:	6a3a      	ldr	r2, [r7, #32]
 8011594:	4613      	mov	r3, r2
 8011596:	011b      	lsls	r3, r3, #4
 8011598:	1a9b      	subs	r3, r3, r2
 801159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801159c:	4413      	add	r3, r2
 801159e:	33f0      	adds	r3, #240	; 0xf0
 80115a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115a4:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 80115a6:	6a3b      	ldr	r3, [r7, #32]
 80115a8:	2b0e      	cmp	r3, #14
 80115aa:	dd03      	ble.n	80115b4 <search_AroundDijkstraCount+0x40>
 80115ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115b0:	82bb      	strh	r3, [r7, #20]
 80115b2:	e009      	b.n	80115c8 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 80115b4:	493b      	ldr	r1, [pc, #236]	; (80116a4 <search_AroundDijkstraCount+0x130>)
 80115b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115b8:	4613      	mov	r3, r2
 80115ba:	011b      	lsls	r3, r3, #4
 80115bc:	1a9b      	subs	r3, r3, r2
 80115be:	6a3a      	ldr	r2, [r7, #32]
 80115c0:	4413      	add	r3, r2
 80115c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115c6:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 80115c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	dc03      	bgt.n	80115d6 <search_AroundDijkstraCount+0x62>
 80115ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115d2:	827b      	strh	r3, [r7, #18]
 80115d4:	e00b      	b.n	80115ee <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 80115d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d8:	1e59      	subs	r1, r3, #1
 80115da:	4832      	ldr	r0, [pc, #200]	; (80116a4 <search_AroundDijkstraCount+0x130>)
 80115dc:	6a3a      	ldr	r2, [r7, #32]
 80115de:	4613      	mov	r3, r2
 80115e0:	011b      	lsls	r3, r3, #4
 80115e2:	1a9b      	subs	r3, r3, r2
 80115e4:	440b      	add	r3, r1
 80115e6:	33f0      	adds	r3, #240	; 0xf0
 80115e8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80115ec:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 80115ee:	6a3b      	ldr	r3, [r7, #32]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	dc03      	bgt.n	80115fc <search_AroundDijkstraCount+0x88>
 80115f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115f8:	823b      	strh	r3, [r7, #16]
 80115fa:	e00a      	b.n	8011612 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 80115fc:	6a3b      	ldr	r3, [r7, #32]
 80115fe:	1e59      	subs	r1, r3, #1
 8011600:	4828      	ldr	r0, [pc, #160]	; (80116a4 <search_AroundDijkstraCount+0x130>)
 8011602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011604:	4613      	mov	r3, r2
 8011606:	011b      	lsls	r3, r3, #4
 8011608:	1a9b      	subs	r3, r3, r2
 801160a:	440b      	add	r3, r1
 801160c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011610:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011614:	3b01      	subs	r3, #1
 8011616:	2b03      	cmp	r3, #3
 8011618:	d83e      	bhi.n	8011698 <search_AroundDijkstraCount+0x124>
 801161a:	a201      	add	r2, pc, #4	; (adr r2, 8011620 <search_AroundDijkstraCount+0xac>)
 801161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011620:	08011631 	.word	0x08011631
 8011624:	0801164b 	.word	0x0801164b
 8011628:	08011665 	.word	0x08011665
 801162c:	0801167f 	.word	0x0801167f
	case 1:
		*front_count = north_count;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	8afa      	ldrh	r2, [r7, #22]
 8011634:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	8aba      	ldrh	r2, [r7, #20]
 801163a:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	8a7a      	ldrh	r2, [r7, #18]
 8011640:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	8a3a      	ldrh	r2, [r7, #16]
 8011646:	801a      	strh	r2, [r3, #0]
		break;
 8011648:	e026      	b.n	8011698 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	8aba      	ldrh	r2, [r7, #20]
 801164e:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	8a7a      	ldrh	r2, [r7, #18]
 8011654:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	8a3a      	ldrh	r2, [r7, #16]
 801165a:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	8afa      	ldrh	r2, [r7, #22]
 8011660:	801a      	strh	r2, [r3, #0]
		break;
 8011662:	e019      	b.n	8011698 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	8a7a      	ldrh	r2, [r7, #18]
 8011668:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	8a3a      	ldrh	r2, [r7, #16]
 801166e:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	8afa      	ldrh	r2, [r7, #22]
 8011674:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	8aba      	ldrh	r2, [r7, #20]
 801167a:	801a      	strh	r2, [r3, #0]
		break;
 801167c:	e00c      	b.n	8011698 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	8a3a      	ldrh	r2, [r7, #16]
 8011682:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	8afa      	ldrh	r2, [r7, #22]
 8011688:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	8aba      	ldrh	r2, [r7, #20]
 801168e:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	8a7a      	ldrh	r2, [r7, #18]
 8011694:	801a      	strh	r2, [r3, #0]
		break;
 8011696:	bf00      	nop

	}


}
 8011698:	bf00      	nop
 801169a:	371c      	adds	r7, #28
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	20000f2c 	.word	0x20000f2c

080116a8 <create_DijkstraMap>:
		}

}


void create_DijkstraMap(void){
 80116a8:	b590      	push	{r4, r7, lr}
 80116aa:	f5ad 5ddd 	sub.w	sp, sp, #7072	; 0x1ba0
 80116ae:	b087      	sub	sp, #28
 80116b0:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 80116b2:	23b4      	movs	r3, #180	; 0xb4
 80116b4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80116b8:	f102 0216 	add.w	r2, r2, #22
 80116bc:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 80116be:	237f      	movs	r3, #127	; 0x7f
 80116c0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80116c4:	f102 0214 	add.w	r2, r2, #20
 80116c8:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 80116ca:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80116ce:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80116d2:	4ae0      	ldr	r2, [pc, #896]	; (8011a54 <create_DijkstraMap+0x3ac>)
 80116d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80116d6:	c303      	stmia	r3!, {r0, r1}
 80116d8:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 80116da:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80116de:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80116e2:	4add      	ldr	r2, [pc, #884]	; (8011a58 <create_DijkstraMap+0x3b0>)
 80116e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80116e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 80116ea:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80116ee:	f103 031c 	add.w	r3, r3, #28
 80116f2:	4618      	mov	r0, r3
 80116f4:	f002 fee8 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_y);
 80116f8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80116fc:	f103 031c 	add.w	r3, r3, #28
 8011700:	4618      	mov	r0, r3
 8011702:	f002 fee1 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_matrix);
 8011706:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801170a:	3b1c      	subs	r3, #28
 801170c:	4618      	mov	r0, r3
 801170e:	f002 fedb 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_direction);
 8011712:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011716:	3b1c      	subs	r3, #28
 8011718:	4618      	mov	r0, r3
 801171a:	f002 fed5 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_cost);
 801171e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011722:	3b1c      	subs	r3, #28
 8011724:	4618      	mov	r0, r3
 8011726:	f002 fecf 	bl	80144c8 <initStack_walk>
	for(int i=0;i<=15;i++){
 801172a:	2300      	movs	r3, #0
 801172c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011730:	f102 020c 	add.w	r2, r2, #12
 8011734:	6013      	str	r3, [r2, #0]
 8011736:	e04a      	b.n	80117ce <create_DijkstraMap+0x126>
		for(int j=0;j<=14;j++){
 8011738:	2300      	movs	r3, #0
 801173a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801173e:	f102 0208 	add.w	r2, r2, #8
 8011742:	6013      	str	r3, [r2, #0]
 8011744:	e031      	b.n	80117aa <create_DijkstraMap+0x102>
			Dijkstra.column_count[i][j]=65535;
 8011746:	49c5      	ldr	r1, [pc, #788]	; (8011a5c <create_DijkstraMap+0x3b4>)
 8011748:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801174c:	f103 030c 	add.w	r3, r3, #12
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	4613      	mov	r3, r2
 8011754:	011b      	lsls	r3, r3, #4
 8011756:	1a9b      	subs	r3, r3, r2
 8011758:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801175c:	f102 0208 	add.w	r2, r2, #8
 8011760:	6812      	ldr	r2, [r2, #0]
 8011762:	4413      	add	r3, r2
 8011764:	33f0      	adds	r3, #240	; 0xf0
 8011766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801176a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 801176e:	49bb      	ldr	r1, [pc, #748]	; (8011a5c <create_DijkstraMap+0x3b4>)
 8011770:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011774:	f103 030c 	add.w	r3, r3, #12
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	4613      	mov	r3, r2
 801177c:	011b      	lsls	r3, r3, #4
 801177e:	1a9b      	subs	r3, r3, r2
 8011780:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011784:	f102 0208 	add.w	r2, r2, #8
 8011788:	6812      	ldr	r2, [r2, #0]
 801178a:	4413      	add	r3, r2
 801178c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011790:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 8011794:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011798:	f103 0308 	add.w	r3, r3, #8
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	3301      	adds	r3, #1
 80117a0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80117a4:	f102 0208 	add.w	r2, r2, #8
 80117a8:	6013      	str	r3, [r2, #0]
 80117aa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80117ae:	f103 0308 	add.w	r3, r3, #8
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2b0e      	cmp	r3, #14
 80117b6:	ddc6      	ble.n	8011746 <create_DijkstraMap+0x9e>
	for(int i=0;i<=15;i++){
 80117b8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80117bc:	f103 030c 	add.w	r3, r3, #12
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	3301      	adds	r3, #1
 80117c4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80117c8:	f102 020c 	add.w	r2, r2, #12
 80117cc:	6013      	str	r3, [r2, #0]
 80117ce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80117d2:	f103 030c 	add.w	r3, r3, #12
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2b0f      	cmp	r3, #15
 80117da:	ddad      	ble.n	8011738 <create_DijkstraMap+0x90>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 80117dc:	4b9f      	ldr	r3, [pc, #636]	; (8011a5c <create_DijkstraMap+0x3b4>)
 80117de:	2200      	movs	r2, #0
 80117e0:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 80117e4:	4b9d      	ldr	r3, [pc, #628]	; (8011a5c <create_DijkstraMap+0x3b4>)
 80117e6:	2200      	movs	r2, #0
 80117e8:	f8a3 2340 	strh.w	r2, [r3, #832]	; 0x340
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 80117ec:	4b9b      	ldr	r3, [pc, #620]	; (8011a5c <create_DijkstraMap+0x3b4>)
 80117ee:	2200      	movs	r2, #0
 80117f0:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 80117f4:	4b99      	ldr	r3, [pc, #612]	; (8011a5c <create_DijkstraMap+0x3b4>)
 80117f6:	2200      	movs	r2, #0
 80117f8:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80117fc:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011800:	f103 031c 	add.w	r3, r3, #28
 8011804:	210a      	movs	r1, #10
 8011806:	4618      	mov	r0, r3
 8011808:	f002 fe6e 	bl	80144e8 <pushStack_walk>
 801180c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011810:	f103 031c 	add.w	r3, r3, #28
 8011814:	210b      	movs	r1, #11
 8011816:	4618      	mov	r0, r3
 8011818:	f002 fe66 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801181c:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011820:	3b1c      	subs	r3, #28
 8011822:	2100      	movs	r1, #0
 8011824:	4618      	mov	r0, r3
 8011826:	f002 fe5f 	bl	80144e8 <pushStack_walk>
 801182a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801182e:	3b1c      	subs	r3, #28
 8011830:	2108      	movs	r1, #8
 8011832:	4618      	mov	r0, r3
 8011834:	f002 fe58 	bl	80144e8 <pushStack_walk>
 8011838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801183c:	3b1c      	subs	r3, #28
 801183e:	2100      	movs	r1, #0
 8011840:	4618      	mov	r0, r3
 8011842:	f002 fe51 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 8011846:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801184a:	f103 031c 	add.w	r3, r3, #28
 801184e:	210b      	movs	r1, #11
 8011850:	4618      	mov	r0, r3
 8011852:	f002 fe49 	bl	80144e8 <pushStack_walk>
 8011856:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801185a:	f103 031c 	add.w	r3, r3, #28
 801185e:	210b      	movs	r1, #11
 8011860:	4618      	mov	r0, r3
 8011862:	f002 fe41 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011866:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801186a:	3b1c      	subs	r3, #28
 801186c:	2100      	movs	r1, #0
 801186e:	4618      	mov	r0, r3
 8011870:	f002 fe3a 	bl	80144e8 <pushStack_walk>
 8011874:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011878:	3b1c      	subs	r3, #28
 801187a:	2108      	movs	r1, #8
 801187c:	4618      	mov	r0, r3
 801187e:	f002 fe33 	bl	80144e8 <pushStack_walk>
 8011882:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011886:	3b1c      	subs	r3, #28
 8011888:	2100      	movs	r1, #0
 801188a:	4618      	mov	r0, r3
 801188c:	f002 fe2c 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011890:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011894:	f103 031c 	add.w	r3, r3, #28
 8011898:	210a      	movs	r1, #10
 801189a:	4618      	mov	r0, r3
 801189c:	f002 fe24 	bl	80144e8 <pushStack_walk>
 80118a0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80118a4:	f103 031c 	add.w	r3, r3, #28
 80118a8:	210b      	movs	r1, #11
 80118aa:	4618      	mov	r0, r3
 80118ac:	f002 fe1c 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118b0:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80118b4:	3b1c      	subs	r3, #28
 80118b6:	2101      	movs	r1, #1
 80118b8:	4618      	mov	r0, r3
 80118ba:	f002 fe15 	bl	80144e8 <pushStack_walk>
 80118be:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80118c2:	3b1c      	subs	r3, #28
 80118c4:	2108      	movs	r1, #8
 80118c6:	4618      	mov	r0, r3
 80118c8:	f002 fe0e 	bl	80144e8 <pushStack_walk>
 80118cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80118d0:	3b1c      	subs	r3, #28
 80118d2:	2100      	movs	r1, #0
 80118d4:	4618      	mov	r0, r3
 80118d6:	f002 fe07 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 80118da:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80118de:	f103 031c 	add.w	r3, r3, #28
 80118e2:	210a      	movs	r1, #10
 80118e4:	4618      	mov	r0, r3
 80118e6:	f002 fdff 	bl	80144e8 <pushStack_walk>
 80118ea:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80118ee:	f103 031c 	add.w	r3, r3, #28
 80118f2:	210c      	movs	r1, #12
 80118f4:	4618      	mov	r0, r3
 80118f6:	f002 fdf7 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118fa:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80118fe:	3b1c      	subs	r3, #28
 8011900:	2101      	movs	r1, #1
 8011902:	4618      	mov	r0, r3
 8011904:	f002 fdf0 	bl	80144e8 <pushStack_walk>
 8011908:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801190c:	3b1c      	subs	r3, #28
 801190e:	2108      	movs	r1, #8
 8011910:	4618      	mov	r0, r3
 8011912:	f002 fde9 	bl	80144e8 <pushStack_walk>
 8011916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801191a:	3b1c      	subs	r3, #28
 801191c:	2100      	movs	r1, #0
 801191e:	4618      	mov	r0, r3
 8011920:	f002 fde2 	bl	80144e8 <pushStack_walk>



	unsigned short count_number = 1;
 8011924:	2301      	movs	r3, #1
 8011926:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801192a:	f102 0206 	add.w	r2, r2, #6
 801192e:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 8011930:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011934:	f103 031c 	add.w	r3, r3, #28
 8011938:	4618      	mov	r0, r3
 801193a:	f002 fdff 	bl	801453c <popStack_walk>
 801193e:	4603      	mov	r3, r0
 8011940:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011944:	f102 0204 	add.w	r2, r2, #4
 8011948:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801194a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801194e:	f103 031c 	add.w	r3, r3, #28
 8011952:	4618      	mov	r0, r3
 8011954:	f002 fdf2 	bl	801453c <popStack_walk>
 8011958:	4603      	mov	r3, r0
 801195a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801195e:	f102 0202 	add.w	r2, r2, #2
 8011962:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 8011964:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011968:	3b1c      	subs	r3, #28
 801196a:	4618      	mov	r0, r3
 801196c:	f002 fde6 	bl	801453c <popStack_walk>
 8011970:	4603      	mov	r3, r0
 8011972:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011976:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8011978:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801197c:	3b1c      	subs	r3, #28
 801197e:	4618      	mov	r0, r3
 8011980:	f002 fddc 	bl	801453c <popStack_walk>
 8011984:	4603      	mov	r3, r0
 8011986:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 801198a:	f102 021e 	add.w	r2, r2, #30
 801198e:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 8011990:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011994:	3b1c      	subs	r3, #28
 8011996:	4618      	mov	r0, r3
 8011998:	f002 fdd0 	bl	801453c <popStack_walk>
 801199c:	4603      	mov	r3, r0
 801199e:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 80119a2:	f102 021c 	add.w	r2, r2, #28
 80119a6:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80119a8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119ac:	f103 0304 	add.w	r3, r3, #4
 80119b0:	881b      	ldrh	r3, [r3, #0]
 80119b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119b6:	4293      	cmp	r3, r2
 80119b8:	f001 8399 	beq.w	80130ee <create_DijkstraMap+0x1a46>
 80119bc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119c0:	f103 0302 	add.w	r3, r3, #2
 80119c4:	881b      	ldrh	r3, [r3, #0]
 80119c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ca:	4293      	cmp	r3, r2
 80119cc:	f001 838f 	beq.w	80130ee <create_DijkstraMap+0x1a46>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 80119d0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	f040 85c0 	bne.w	801255c <create_DijkstraMap+0xeb4>
			if(Ycoordinate <= 13){
 80119dc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119e0:	f103 0302 	add.w	r3, r3, #2
 80119e4:	881b      	ldrh	r3, [r3, #0]
 80119e6:	2b0d      	cmp	r3, #13
 80119e8:	f200 80f5 	bhi.w	8011bd6 <create_DijkstraMap+0x52e>
				if(Direction==SLANT_NORTH){
 80119ec:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80119f0:	f103 031e 	add.w	r3, r3, #30
 80119f4:	881b      	ldrh	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d132      	bne.n	8011a60 <create_DijkstraMap+0x3b8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80119fa:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80119fe:	f103 031c 	add.w	r3, r3, #28
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	3301      	adds	r3, #1
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a0c:	f102 0212 	add.w	r2, r2, #18
 8011a10:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011a12:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a16:	f103 0312 	add.w	r3, r3, #18
 8011a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a1e:	2b04      	cmp	r3, #4
 8011a20:	dd05      	ble.n	8011a2e <create_DijkstraMap+0x386>
 8011a22:	2304      	movs	r3, #4
 8011a24:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a28:	f102 0212 	add.w	r2, r2, #18
 8011a2c:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011a2e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a32:	f103 0312 	add.w	r3, r3, #18
 8011a36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a3a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011a3e:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011a42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011a46:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a4a:	f102 0216 	add.w	r2, r2, #22
 8011a4e:	8013      	strh	r3, [r2, #0]
 8011a50:	e016      	b.n	8011a80 <create_DijkstraMap+0x3d8>
 8011a52:	bf00      	nop
 8011a54:	080221c8 	.word	0x080221c8
 8011a58:	080221d4 	.word	0x080221d4
 8011a5c:	20000f2c 	.word	0x20000f2c
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011a60:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011a64:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011a68:	881b      	ldrh	r3, [r3, #0]
 8011a6a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a6e:	f102 0216 	add.w	r2, r2, #22
 8011a72:	8013      	strh	r3, [r2, #0]
 8011a74:	2300      	movs	r3, #0
 8011a76:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a7a:	f102 0212 	add.w	r2, r2, #18
 8011a7e:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011a80:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a84:	f103 0302 	add.w	r3, r3, #2
 8011a88:	881b      	ldrh	r3, [r3, #0]
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	4a6f      	ldr	r2, [pc, #444]	; (8011c4c <create_DijkstraMap+0x5a4>)
 8011a8e:	330c      	adds	r3, #12
 8011a90:	005b      	lsls	r3, r3, #1
 8011a92:	4413      	add	r3, r2
 8011a94:	88db      	ldrh	r3, [r3, #6]
 8011a96:	461a      	mov	r2, r3
 8011a98:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a9c:	f103 0304 	add.w	r3, r3, #4
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	fa42 f303 	asr.w	r3, r2, r3
 8011aa6:	f003 0301 	and.w	r3, r3, #1
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	f040 8093 	bne.w	8011bd6 <create_DijkstraMap+0x52e>
 8011ab0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ab4:	f103 0304 	add.w	r3, r3, #4
 8011ab8:	881a      	ldrh	r2, [r3, #0]
 8011aba:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011abe:	f103 0302 	add.w	r3, r3, #2
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	1c59      	adds	r1, r3, #1
 8011ac6:	4862      	ldr	r0, [pc, #392]	; (8011c50 <create_DijkstraMap+0x5a8>)
 8011ac8:	4613      	mov	r3, r2
 8011aca:	011b      	lsls	r3, r3, #4
 8011acc:	1a9b      	subs	r3, r3, r2
 8011ace:	440b      	add	r3, r1
 8011ad0:	33f0      	adds	r3, #240	; 0xf0
 8011ad2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ad6:	461c      	mov	r4, r3
 8011ad8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011adc:	f103 0304 	add.w	r3, r3, #4
 8011ae0:	881a      	ldrh	r2, [r3, #0]
 8011ae2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ae6:	f103 0302 	add.w	r3, r3, #2
 8011aea:	8819      	ldrh	r1, [r3, #0]
 8011aec:	4858      	ldr	r0, [pc, #352]	; (8011c50 <create_DijkstraMap+0x5a8>)
 8011aee:	4613      	mov	r3, r2
 8011af0:	011b      	lsls	r3, r3, #4
 8011af2:	1a9b      	subs	r3, r3, r2
 8011af4:	440b      	add	r3, r1
 8011af6:	33f0      	adds	r3, #240	; 0xf0
 8011af8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011afc:	461a      	mov	r2, r3
 8011afe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b02:	f103 0316 	add.w	r3, r3, #22
 8011b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	429c      	cmp	r4, r3
 8011b0e:	dd62      	ble.n	8011bd6 <create_DijkstraMap+0x52e>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011b10:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b14:	f103 0304 	add.w	r3, r3, #4
 8011b18:	881a      	ldrh	r2, [r3, #0]
 8011b1a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b1e:	f103 0302 	add.w	r3, r3, #2
 8011b22:	8819      	ldrh	r1, [r3, #0]
 8011b24:	484a      	ldr	r0, [pc, #296]	; (8011c50 <create_DijkstraMap+0x5a8>)
 8011b26:	4613      	mov	r3, r2
 8011b28:	011b      	lsls	r3, r3, #4
 8011b2a:	1a9b      	subs	r3, r3, r2
 8011b2c:	440b      	add	r3, r1
 8011b2e:	33f0      	adds	r3, #240	; 0xf0
 8011b30:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011b34:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b38:	f103 0316 	add.w	r3, r3, #22
 8011b3c:	881b      	ldrh	r3, [r3, #0]
 8011b3e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011b42:	f102 0204 	add.w	r2, r2, #4
 8011b46:	8812      	ldrh	r2, [r2, #0]
 8011b48:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011b4c:	f101 0102 	add.w	r1, r1, #2
 8011b50:	8809      	ldrh	r1, [r1, #0]
 8011b52:	3101      	adds	r1, #1
 8011b54:	4403      	add	r3, r0
 8011b56:	b29c      	uxth	r4, r3
 8011b58:	483d      	ldr	r0, [pc, #244]	; (8011c50 <create_DijkstraMap+0x5a8>)
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	011b      	lsls	r3, r3, #4
 8011b5e:	1a9b      	subs	r3, r3, r2
 8011b60:	440b      	add	r3, r1
 8011b62:	33f0      	adds	r3, #240	; 0xf0
 8011b64:	4622      	mov	r2, r4
 8011b66:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011b6a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b6e:	f103 0304 	add.w	r3, r3, #4
 8011b72:	881a      	ldrh	r2, [r3, #0]
 8011b74:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011b78:	f103 031c 	add.w	r3, r3, #28
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f002 fcb2 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011b84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b88:	f103 0302 	add.w	r3, r3, #2
 8011b8c:	881b      	ldrh	r3, [r3, #0]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011b96:	f103 031c 	add.w	r3, r3, #28
 8011b9a:	4611      	mov	r1, r2
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f002 fca3 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011ba2:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011ba6:	3b1c      	subs	r3, #28
 8011ba8:	2100      	movs	r1, #0
 8011baa:	4618      	mov	r0, r3
 8011bac:	f002 fc9c 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011bb0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011bb4:	3b1c      	subs	r3, #28
 8011bb6:	2100      	movs	r1, #0
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f002 fc95 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011bbe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bc2:	f103 0312 	add.w	r3, r3, #18
 8011bc6:	881a      	ldrh	r2, [r3, #0]
 8011bc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011bcc:	3b1c      	subs	r3, #28
 8011bce:	4611      	mov	r1, r2
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f002 fc89 	bl	80144e8 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011bd6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bda:	f103 0302 	add.w	r3, r3, #2
 8011bde:	881b      	ldrh	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f000 80f2 	beq.w	8011dca <create_DijkstraMap+0x722>
				if(Direction==SLANT_SOUTH){
 8011be6:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011bea:	f103 031e 	add.w	r3, r3, #30
 8011bee:	881b      	ldrh	r3, [r3, #0]
 8011bf0:	2b04      	cmp	r3, #4
 8011bf2:	d12f      	bne.n	8011c54 <create_DijkstraMap+0x5ac>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011bf4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011bf8:	f103 031c 	add.w	r3, r3, #28
 8011bfc:	881b      	ldrh	r3, [r3, #0]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c06:	f102 0212 	add.w	r2, r2, #18
 8011c0a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011c0c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c10:	f103 0312 	add.w	r3, r3, #18
 8011c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c18:	2b04      	cmp	r3, #4
 8011c1a:	dd05      	ble.n	8011c28 <create_DijkstraMap+0x580>
 8011c1c:	2304      	movs	r3, #4
 8011c1e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c22:	f102 0212 	add.w	r2, r2, #18
 8011c26:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011c28:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c2c:	f103 0312 	add.w	r3, r3, #18
 8011c30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c34:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011c38:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011c3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011c40:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c44:	f102 0216 	add.w	r2, r2, #22
 8011c48:	8013      	strh	r3, [r2, #0]
 8011c4a:	e013      	b.n	8011c74 <create_DijkstraMap+0x5cc>
 8011c4c:	20000c3c 	.word	0x20000c3c
 8011c50:	20000f2c 	.word	0x20000f2c
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011c54:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011c58:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c62:	f102 0216 	add.w	r2, r2, #22
 8011c66:	8013      	strh	r3, [r2, #0]
 8011c68:	2300      	movs	r3, #0
 8011c6a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c6e:	f102 0212 	add.w	r2, r2, #18
 8011c72:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011c74:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c78:	f103 0302 	add.w	r3, r3, #2
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	4a6f      	ldr	r2, [pc, #444]	; (8011e40 <create_DijkstraMap+0x798>)
 8011c82:	330c      	adds	r3, #12
 8011c84:	005b      	lsls	r3, r3, #1
 8011c86:	4413      	add	r3, r2
 8011c88:	88db      	ldrh	r3, [r3, #6]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c90:	f103 0304 	add.w	r3, r3, #4
 8011c94:	881b      	ldrh	r3, [r3, #0]
 8011c96:	fa42 f303 	asr.w	r3, r2, r3
 8011c9a:	f003 0301 	and.w	r3, r3, #1
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f040 8093 	bne.w	8011dca <create_DijkstraMap+0x722>
 8011ca4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ca8:	f103 0304 	add.w	r3, r3, #4
 8011cac:	881a      	ldrh	r2, [r3, #0]
 8011cae:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cb2:	f103 0302 	add.w	r3, r3, #2
 8011cb6:	881b      	ldrh	r3, [r3, #0]
 8011cb8:	1e59      	subs	r1, r3, #1
 8011cba:	4862      	ldr	r0, [pc, #392]	; (8011e44 <create_DijkstraMap+0x79c>)
 8011cbc:	4613      	mov	r3, r2
 8011cbe:	011b      	lsls	r3, r3, #4
 8011cc0:	1a9b      	subs	r3, r3, r2
 8011cc2:	440b      	add	r3, r1
 8011cc4:	33f0      	adds	r3, #240	; 0xf0
 8011cc6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011cca:	461c      	mov	r4, r3
 8011ccc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cd0:	f103 0304 	add.w	r3, r3, #4
 8011cd4:	881a      	ldrh	r2, [r3, #0]
 8011cd6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cda:	f103 0302 	add.w	r3, r3, #2
 8011cde:	8819      	ldrh	r1, [r3, #0]
 8011ce0:	4858      	ldr	r0, [pc, #352]	; (8011e44 <create_DijkstraMap+0x79c>)
 8011ce2:	4613      	mov	r3, r2
 8011ce4:	011b      	lsls	r3, r3, #4
 8011ce6:	1a9b      	subs	r3, r3, r2
 8011ce8:	440b      	add	r3, r1
 8011cea:	33f0      	adds	r3, #240	; 0xf0
 8011cec:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cf6:	f103 0316 	add.w	r3, r3, #22
 8011cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cfe:	4413      	add	r3, r2
 8011d00:	429c      	cmp	r4, r3
 8011d02:	dd62      	ble.n	8011dca <create_DijkstraMap+0x722>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011d04:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d08:	f103 0304 	add.w	r3, r3, #4
 8011d0c:	881a      	ldrh	r2, [r3, #0]
 8011d0e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d12:	f103 0302 	add.w	r3, r3, #2
 8011d16:	8819      	ldrh	r1, [r3, #0]
 8011d18:	484a      	ldr	r0, [pc, #296]	; (8011e44 <create_DijkstraMap+0x79c>)
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	011b      	lsls	r3, r3, #4
 8011d1e:	1a9b      	subs	r3, r3, r2
 8011d20:	440b      	add	r3, r1
 8011d22:	33f0      	adds	r3, #240	; 0xf0
 8011d24:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011d28:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d2c:	f103 0316 	add.w	r3, r3, #22
 8011d30:	881b      	ldrh	r3, [r3, #0]
 8011d32:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011d36:	f102 0204 	add.w	r2, r2, #4
 8011d3a:	8812      	ldrh	r2, [r2, #0]
 8011d3c:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011d40:	f101 0102 	add.w	r1, r1, #2
 8011d44:	8809      	ldrh	r1, [r1, #0]
 8011d46:	3901      	subs	r1, #1
 8011d48:	4403      	add	r3, r0
 8011d4a:	b29c      	uxth	r4, r3
 8011d4c:	483d      	ldr	r0, [pc, #244]	; (8011e44 <create_DijkstraMap+0x79c>)
 8011d4e:	4613      	mov	r3, r2
 8011d50:	011b      	lsls	r3, r3, #4
 8011d52:	1a9b      	subs	r3, r3, r2
 8011d54:	440b      	add	r3, r1
 8011d56:	33f0      	adds	r3, #240	; 0xf0
 8011d58:	4622      	mov	r2, r4
 8011d5a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011d5e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d62:	f103 0304 	add.w	r3, r3, #4
 8011d66:	881a      	ldrh	r2, [r3, #0]
 8011d68:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011d6c:	f103 031c 	add.w	r3, r3, #28
 8011d70:	4611      	mov	r1, r2
 8011d72:	4618      	mov	r0, r3
 8011d74:	f002 fbb8 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011d78:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d7c:	f103 0302 	add.w	r3, r3, #2
 8011d80:	881b      	ldrh	r3, [r3, #0]
 8011d82:	3b01      	subs	r3, #1
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011d8a:	f103 031c 	add.w	r3, r3, #28
 8011d8e:	4611      	mov	r1, r2
 8011d90:	4618      	mov	r0, r3
 8011d92:	f002 fba9 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011d96:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011d9a:	3b1c      	subs	r3, #28
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f002 fba2 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011da4:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011da8:	3b1c      	subs	r3, #28
 8011daa:	2104      	movs	r1, #4
 8011dac:	4618      	mov	r0, r3
 8011dae:	f002 fb9b 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011db2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011db6:	f103 0312 	add.w	r3, r3, #18
 8011dba:	881a      	ldrh	r2, [r3, #0]
 8011dbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011dc0:	3b1c      	subs	r3, #28
 8011dc2:	4611      	mov	r1, r2
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f002 fb8f 	bl	80144e8 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011dca:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011dce:	f103 0304 	add.w	r3, r3, #4
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	2b0e      	cmp	r3, #14
 8011dd6:	f200 81d8 	bhi.w	801218a <create_DijkstraMap+0xae2>
				if(Direction==SLANT_SOUTH_EAST){
 8011dda:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011dde:	f103 031e 	add.w	r3, r3, #30
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d12f      	bne.n	8011e48 <create_DijkstraMap+0x7a0>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011de8:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011dec:	f103 031c 	add.w	r3, r3, #28
 8011df0:	881b      	ldrh	r3, [r3, #0]
 8011df2:	3301      	adds	r3, #1
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011dfa:	f102 0212 	add.w	r2, r2, #18
 8011dfe:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011e00:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e04:	f103 0312 	add.w	r3, r3, #18
 8011e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e0c:	2b05      	cmp	r3, #5
 8011e0e:	dd05      	ble.n	8011e1c <create_DijkstraMap+0x774>
 8011e10:	2305      	movs	r3, #5
 8011e12:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e16:	f102 0212 	add.w	r2, r2, #18
 8011e1a:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011e1c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e20:	f103 0312 	add.w	r3, r3, #18
 8011e24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011e28:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011e2c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011e30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011e34:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e38:	f102 0214 	add.w	r2, r2, #20
 8011e3c:	8013      	strh	r3, [r2, #0]
 8011e3e:	e013      	b.n	8011e68 <create_DijkstraMap+0x7c0>
 8011e40:	20000c3c 	.word	0x20000c3c
 8011e44:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011e48:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011e4c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011e50:	881b      	ldrh	r3, [r3, #0]
 8011e52:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e56:	f102 0214 	add.w	r2, r2, #20
 8011e5a:	8013      	strh	r3, [r2, #0]
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e62:	f102 0212 	add.w	r2, r2, #18
 8011e66:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011e68:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e6c:	f103 0304 	add.w	r3, r3, #4
 8011e70:	881b      	ldrh	r3, [r3, #0]
 8011e72:	4a68      	ldr	r2, [pc, #416]	; (8012014 <create_DijkstraMap+0x96c>)
 8011e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e78:	461a      	mov	r2, r3
 8011e7a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e7e:	f103 0302 	add.w	r3, r3, #2
 8011e82:	881b      	ldrh	r3, [r3, #0]
 8011e84:	fa42 f303 	asr.w	r3, r2, r3
 8011e88:	f003 0301 	and.w	r3, r3, #1
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	f040 808d 	bne.w	8011fac <create_DijkstraMap+0x904>
 8011e92:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e96:	f103 0302 	add.w	r3, r3, #2
 8011e9a:	881a      	ldrh	r2, [r3, #0]
 8011e9c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ea0:	f103 0304 	add.w	r3, r3, #4
 8011ea4:	8819      	ldrh	r1, [r3, #0]
 8011ea6:	485c      	ldr	r0, [pc, #368]	; (8012018 <create_DijkstraMap+0x970>)
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	011b      	lsls	r3, r3, #4
 8011eac:	1a9b      	subs	r3, r3, r2
 8011eae:	440b      	add	r3, r1
 8011eb0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011eb4:	461c      	mov	r4, r3
 8011eb6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011eba:	f103 0304 	add.w	r3, r3, #4
 8011ebe:	881a      	ldrh	r2, [r3, #0]
 8011ec0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ec4:	f103 0302 	add.w	r3, r3, #2
 8011ec8:	8819      	ldrh	r1, [r3, #0]
 8011eca:	4853      	ldr	r0, [pc, #332]	; (8012018 <create_DijkstraMap+0x970>)
 8011ecc:	4613      	mov	r3, r2
 8011ece:	011b      	lsls	r3, r3, #4
 8011ed0:	1a9b      	subs	r3, r3, r2
 8011ed2:	440b      	add	r3, r1
 8011ed4:	33f0      	adds	r3, #240	; 0xf0
 8011ed6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011eda:	461a      	mov	r2, r3
 8011edc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ee0:	f103 0314 	add.w	r3, r3, #20
 8011ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ee8:	4413      	add	r3, r2
 8011eea:	429c      	cmp	r4, r3
 8011eec:	dd5e      	ble.n	8011fac <create_DijkstraMap+0x904>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011eee:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ef2:	f103 0304 	add.w	r3, r3, #4
 8011ef6:	881a      	ldrh	r2, [r3, #0]
 8011ef8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011efc:	f103 0302 	add.w	r3, r3, #2
 8011f00:	8819      	ldrh	r1, [r3, #0]
 8011f02:	4845      	ldr	r0, [pc, #276]	; (8012018 <create_DijkstraMap+0x970>)
 8011f04:	4613      	mov	r3, r2
 8011f06:	011b      	lsls	r3, r3, #4
 8011f08:	1a9b      	subs	r3, r3, r2
 8011f0a:	440b      	add	r3, r1
 8011f0c:	33f0      	adds	r3, #240	; 0xf0
 8011f0e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011f12:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f16:	f103 0314 	add.w	r3, r3, #20
 8011f1a:	881b      	ldrh	r3, [r3, #0]
 8011f1c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f20:	f102 0202 	add.w	r2, r2, #2
 8011f24:	8812      	ldrh	r2, [r2, #0]
 8011f26:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011f2a:	f101 0104 	add.w	r1, r1, #4
 8011f2e:	8809      	ldrh	r1, [r1, #0]
 8011f30:	4403      	add	r3, r0
 8011f32:	b29c      	uxth	r4, r3
 8011f34:	4838      	ldr	r0, [pc, #224]	; (8012018 <create_DijkstraMap+0x970>)
 8011f36:	4613      	mov	r3, r2
 8011f38:	011b      	lsls	r3, r3, #4
 8011f3a:	1a9b      	subs	r3, r3, r2
 8011f3c:	440b      	add	r3, r1
 8011f3e:	4622      	mov	r2, r4
 8011f40:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011f44:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f48:	f103 0304 	add.w	r3, r3, #4
 8011f4c:	881a      	ldrh	r2, [r3, #0]
 8011f4e:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011f52:	f103 031c 	add.w	r3, r3, #28
 8011f56:	4611      	mov	r1, r2
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f002 fac5 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011f5e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f62:	f103 0302 	add.w	r3, r3, #2
 8011f66:	881a      	ldrh	r2, [r3, #0]
 8011f68:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011f6c:	f103 031c 	add.w	r3, r3, #28
 8011f70:	4611      	mov	r1, r2
 8011f72:	4618      	mov	r0, r3
 8011f74:	f002 fab8 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011f78:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011f7c:	3b1c      	subs	r3, #28
 8011f7e:	2101      	movs	r1, #1
 8011f80:	4618      	mov	r0, r3
 8011f82:	f002 fab1 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011f86:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011f8a:	3b1c      	subs	r3, #28
 8011f8c:	2103      	movs	r1, #3
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f002 faaa 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011f94:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f98:	f103 0312 	add.w	r3, r3, #18
 8011f9c:	881a      	ldrh	r2, [r3, #0]
 8011f9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011fa2:	3b1c      	subs	r3, #28
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f002 fa9e 	bl	80144e8 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011fac:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011fb0:	f103 031e 	add.w	r3, r3, #30
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	2b01      	cmp	r3, #1
 8011fb8:	d130      	bne.n	801201c <create_DijkstraMap+0x974>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011fba:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011fbe:	f103 031c 	add.w	r3, r3, #28
 8011fc2:	881b      	ldrh	r3, [r3, #0]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fcc:	f102 0212 	add.w	r2, r2, #18
 8011fd0:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011fd2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fd6:	f103 0312 	add.w	r3, r3, #18
 8011fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fde:	2b05      	cmp	r3, #5
 8011fe0:	dd05      	ble.n	8011fee <create_DijkstraMap+0x946>
 8011fe2:	2305      	movs	r3, #5
 8011fe4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fe8:	f102 0212 	add.w	r2, r2, #18
 8011fec:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011fee:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ff2:	f103 0312 	add.w	r3, r3, #18
 8011ff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ffa:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011ffe:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012002:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012006:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801200a:	f102 0214 	add.w	r2, r2, #20
 801200e:	8013      	strh	r3, [r2, #0]
 8012010:	e014      	b.n	801203c <create_DijkstraMap+0x994>
 8012012:	bf00      	nop
 8012014:	20000c3c 	.word	0x20000c3c
 8012018:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801201c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012020:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012024:	881b      	ldrh	r3, [r3, #0]
 8012026:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801202a:	f102 0214 	add.w	r2, r2, #20
 801202e:	8013      	strh	r3, [r2, #0]
 8012030:	2300      	movs	r3, #0
 8012032:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012036:	f102 0212 	add.w	r2, r2, #18
 801203a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 801203c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012040:	f103 0304 	add.w	r3, r3, #4
 8012044:	881b      	ldrh	r3, [r3, #0]
 8012046:	4a6e      	ldr	r2, [pc, #440]	; (8012200 <create_DijkstraMap+0xb58>)
 8012048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801204c:	461a      	mov	r2, r3
 801204e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012052:	f103 0302 	add.w	r3, r3, #2
 8012056:	881b      	ldrh	r3, [r3, #0]
 8012058:	3301      	adds	r3, #1
 801205a:	fa42 f303 	asr.w	r3, r2, r3
 801205e:	f003 0301 	and.w	r3, r3, #1
 8012062:	2b00      	cmp	r3, #0
 8012064:	f040 8091 	bne.w	801218a <create_DijkstraMap+0xae2>
 8012068:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801206c:	f103 0302 	add.w	r3, r3, #2
 8012070:	881b      	ldrh	r3, [r3, #0]
 8012072:	1c5a      	adds	r2, r3, #1
 8012074:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012078:	f103 0304 	add.w	r3, r3, #4
 801207c:	8819      	ldrh	r1, [r3, #0]
 801207e:	4861      	ldr	r0, [pc, #388]	; (8012204 <create_DijkstraMap+0xb5c>)
 8012080:	4613      	mov	r3, r2
 8012082:	011b      	lsls	r3, r3, #4
 8012084:	1a9b      	subs	r3, r3, r2
 8012086:	440b      	add	r3, r1
 8012088:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801208c:	461c      	mov	r4, r3
 801208e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012092:	f103 0304 	add.w	r3, r3, #4
 8012096:	881a      	ldrh	r2, [r3, #0]
 8012098:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801209c:	f103 0302 	add.w	r3, r3, #2
 80120a0:	8819      	ldrh	r1, [r3, #0]
 80120a2:	4858      	ldr	r0, [pc, #352]	; (8012204 <create_DijkstraMap+0xb5c>)
 80120a4:	4613      	mov	r3, r2
 80120a6:	011b      	lsls	r3, r3, #4
 80120a8:	1a9b      	subs	r3, r3, r2
 80120aa:	440b      	add	r3, r1
 80120ac:	33f0      	adds	r3, #240	; 0xf0
 80120ae:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120b2:	461a      	mov	r2, r3
 80120b4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120b8:	f103 0314 	add.w	r3, r3, #20
 80120bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120c0:	4413      	add	r3, r2
 80120c2:	429c      	cmp	r4, r3
 80120c4:	dd61      	ble.n	801218a <create_DijkstraMap+0xae2>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80120c6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120ca:	f103 0304 	add.w	r3, r3, #4
 80120ce:	881a      	ldrh	r2, [r3, #0]
 80120d0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120d4:	f103 0302 	add.w	r3, r3, #2
 80120d8:	8819      	ldrh	r1, [r3, #0]
 80120da:	484a      	ldr	r0, [pc, #296]	; (8012204 <create_DijkstraMap+0xb5c>)
 80120dc:	4613      	mov	r3, r2
 80120de:	011b      	lsls	r3, r3, #4
 80120e0:	1a9b      	subs	r3, r3, r2
 80120e2:	440b      	add	r3, r1
 80120e4:	33f0      	adds	r3, #240	; 0xf0
 80120e6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80120ea:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120ee:	f103 0314 	add.w	r3, r3, #20
 80120f2:	881b      	ldrh	r3, [r3, #0]
 80120f4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80120f8:	f102 0202 	add.w	r2, r2, #2
 80120fc:	8812      	ldrh	r2, [r2, #0]
 80120fe:	3201      	adds	r2, #1
 8012100:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012104:	f101 0104 	add.w	r1, r1, #4
 8012108:	8809      	ldrh	r1, [r1, #0]
 801210a:	4403      	add	r3, r0
 801210c:	b29c      	uxth	r4, r3
 801210e:	483d      	ldr	r0, [pc, #244]	; (8012204 <create_DijkstraMap+0xb5c>)
 8012110:	4613      	mov	r3, r2
 8012112:	011b      	lsls	r3, r3, #4
 8012114:	1a9b      	subs	r3, r3, r2
 8012116:	440b      	add	r3, r1
 8012118:	4622      	mov	r2, r4
 801211a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 801211e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012122:	f103 0304 	add.w	r3, r3, #4
 8012126:	881a      	ldrh	r2, [r3, #0]
 8012128:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801212c:	f103 031c 	add.w	r3, r3, #28
 8012130:	4611      	mov	r1, r2
 8012132:	4618      	mov	r0, r3
 8012134:	f002 f9d8 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012138:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801213c:	f103 0302 	add.w	r3, r3, #2
 8012140:	881b      	ldrh	r3, [r3, #0]
 8012142:	3301      	adds	r3, #1
 8012144:	b29a      	uxth	r2, r3
 8012146:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801214a:	f103 031c 	add.w	r3, r3, #28
 801214e:	4611      	mov	r1, r2
 8012150:	4618      	mov	r0, r3
 8012152:	f002 f9c9 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012156:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801215a:	3b1c      	subs	r3, #28
 801215c:	2101      	movs	r1, #1
 801215e:	4618      	mov	r0, r3
 8012160:	f002 f9c2 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012164:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012168:	3b1c      	subs	r3, #28
 801216a:	2101      	movs	r1, #1
 801216c:	4618      	mov	r0, r3
 801216e:	f002 f9bb 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012172:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012176:	f103 0312 	add.w	r3, r3, #18
 801217a:	881a      	ldrh	r2, [r3, #0]
 801217c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012180:	3b1c      	subs	r3, #28
 8012182:	4611      	mov	r1, r2
 8012184:	4618      	mov	r0, r3
 8012186:	f002 f9af 	bl	80144e8 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 801218a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801218e:	f103 0304 	add.w	r3, r3, #4
 8012192:	881b      	ldrh	r3, [r3, #0]
 8012194:	2b00      	cmp	r3, #0
 8012196:	f000 81e1 	beq.w	801255c <create_DijkstraMap+0xeb4>
				if(Direction==SLANT_SOUTH_WEST){
 801219a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801219e:	f103 031e 	add.w	r3, r3, #30
 80121a2:	881b      	ldrh	r3, [r3, #0]
 80121a4:	2b05      	cmp	r3, #5
 80121a6:	d12f      	bne.n	8012208 <create_DijkstraMap+0xb60>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80121a8:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80121ac:	f103 031c 	add.w	r3, r3, #28
 80121b0:	881b      	ldrh	r3, [r3, #0]
 80121b2:	3301      	adds	r3, #1
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121ba:	f102 0212 	add.w	r2, r2, #18
 80121be:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80121c0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121c4:	f103 0312 	add.w	r3, r3, #18
 80121c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121cc:	2b05      	cmp	r3, #5
 80121ce:	dd05      	ble.n	80121dc <create_DijkstraMap+0xb34>
 80121d0:	2305      	movs	r3, #5
 80121d2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121d6:	f102 0212 	add.w	r2, r2, #18
 80121da:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80121dc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121e0:	f103 0312 	add.w	r3, r3, #18
 80121e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80121e8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80121ec:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80121f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80121f4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121f8:	f102 0214 	add.w	r2, r2, #20
 80121fc:	8013      	strh	r3, [r2, #0]
 80121fe:	e013      	b.n	8012228 <create_DijkstraMap+0xb80>
 8012200:	20000c3c 	.word	0x20000c3c
 8012204:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012208:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801220c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012210:	881b      	ldrh	r3, [r3, #0]
 8012212:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012216:	f102 0214 	add.w	r2, r2, #20
 801221a:	8013      	strh	r3, [r2, #0]
 801221c:	2300      	movs	r3, #0
 801221e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012222:	f102 0212 	add.w	r2, r2, #18
 8012226:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012228:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801222c:	f103 0304 	add.w	r3, r3, #4
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	3b01      	subs	r3, #1
 8012234:	4a69      	ldr	r2, [pc, #420]	; (80123dc <create_DijkstraMap+0xd34>)
 8012236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801223a:	461a      	mov	r2, r3
 801223c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012240:	f103 0302 	add.w	r3, r3, #2
 8012244:	881b      	ldrh	r3, [r3, #0]
 8012246:	fa42 f303 	asr.w	r3, r2, r3
 801224a:	f003 0301 	and.w	r3, r3, #1
 801224e:	2b00      	cmp	r3, #0
 8012250:	f040 8091 	bne.w	8012376 <create_DijkstraMap+0xcce>
 8012254:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012258:	f103 0302 	add.w	r3, r3, #2
 801225c:	881a      	ldrh	r2, [r3, #0]
 801225e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012262:	f103 0304 	add.w	r3, r3, #4
 8012266:	881b      	ldrh	r3, [r3, #0]
 8012268:	1e59      	subs	r1, r3, #1
 801226a:	485d      	ldr	r0, [pc, #372]	; (80123e0 <create_DijkstraMap+0xd38>)
 801226c:	4613      	mov	r3, r2
 801226e:	011b      	lsls	r3, r3, #4
 8012270:	1a9b      	subs	r3, r3, r2
 8012272:	440b      	add	r3, r1
 8012274:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012278:	461c      	mov	r4, r3
 801227a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801227e:	f103 0304 	add.w	r3, r3, #4
 8012282:	881a      	ldrh	r2, [r3, #0]
 8012284:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012288:	f103 0302 	add.w	r3, r3, #2
 801228c:	8819      	ldrh	r1, [r3, #0]
 801228e:	4854      	ldr	r0, [pc, #336]	; (80123e0 <create_DijkstraMap+0xd38>)
 8012290:	4613      	mov	r3, r2
 8012292:	011b      	lsls	r3, r3, #4
 8012294:	1a9b      	subs	r3, r3, r2
 8012296:	440b      	add	r3, r1
 8012298:	33f0      	adds	r3, #240	; 0xf0
 801229a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801229e:	461a      	mov	r2, r3
 80122a0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122a4:	f103 0314 	add.w	r3, r3, #20
 80122a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122ac:	4413      	add	r3, r2
 80122ae:	429c      	cmp	r4, r3
 80122b0:	dd61      	ble.n	8012376 <create_DijkstraMap+0xcce>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80122b2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122b6:	f103 0304 	add.w	r3, r3, #4
 80122ba:	881a      	ldrh	r2, [r3, #0]
 80122bc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122c0:	f103 0302 	add.w	r3, r3, #2
 80122c4:	8819      	ldrh	r1, [r3, #0]
 80122c6:	4846      	ldr	r0, [pc, #280]	; (80123e0 <create_DijkstraMap+0xd38>)
 80122c8:	4613      	mov	r3, r2
 80122ca:	011b      	lsls	r3, r3, #4
 80122cc:	1a9b      	subs	r3, r3, r2
 80122ce:	440b      	add	r3, r1
 80122d0:	33f0      	adds	r3, #240	; 0xf0
 80122d2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80122d6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122da:	f103 0314 	add.w	r3, r3, #20
 80122de:	881b      	ldrh	r3, [r3, #0]
 80122e0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80122e4:	f102 0202 	add.w	r2, r2, #2
 80122e8:	8812      	ldrh	r2, [r2, #0]
 80122ea:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80122ee:	f101 0104 	add.w	r1, r1, #4
 80122f2:	8809      	ldrh	r1, [r1, #0]
 80122f4:	3901      	subs	r1, #1
 80122f6:	4403      	add	r3, r0
 80122f8:	b29c      	uxth	r4, r3
 80122fa:	4839      	ldr	r0, [pc, #228]	; (80123e0 <create_DijkstraMap+0xd38>)
 80122fc:	4613      	mov	r3, r2
 80122fe:	011b      	lsls	r3, r3, #4
 8012300:	1a9b      	subs	r3, r3, r2
 8012302:	440b      	add	r3, r1
 8012304:	4622      	mov	r2, r4
 8012306:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 801230a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801230e:	f103 0304 	add.w	r3, r3, #4
 8012312:	881b      	ldrh	r3, [r3, #0]
 8012314:	3b01      	subs	r3, #1
 8012316:	b29a      	uxth	r2, r3
 8012318:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801231c:	f103 031c 	add.w	r3, r3, #28
 8012320:	4611      	mov	r1, r2
 8012322:	4618      	mov	r0, r3
 8012324:	f002 f8e0 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012328:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801232c:	f103 0302 	add.w	r3, r3, #2
 8012330:	881a      	ldrh	r2, [r3, #0]
 8012332:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012336:	f103 031c 	add.w	r3, r3, #28
 801233a:	4611      	mov	r1, r2
 801233c:	4618      	mov	r0, r3
 801233e:	f002 f8d3 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012342:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012346:	3b1c      	subs	r3, #28
 8012348:	2101      	movs	r1, #1
 801234a:	4618      	mov	r0, r3
 801234c:	f002 f8cc 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012350:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012354:	3b1c      	subs	r3, #28
 8012356:	2105      	movs	r1, #5
 8012358:	4618      	mov	r0, r3
 801235a:	f002 f8c5 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801235e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012362:	f103 0312 	add.w	r3, r3, #18
 8012366:	881a      	ldrh	r2, [r3, #0]
 8012368:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801236c:	3b1c      	subs	r3, #28
 801236e:	4611      	mov	r1, r2
 8012370:	4618      	mov	r0, r3
 8012372:	f002 f8b9 	bl	80144e8 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 8012376:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801237a:	f103 031e 	add.w	r3, r3, #30
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	2b07      	cmp	r3, #7
 8012382:	d12f      	bne.n	80123e4 <create_DijkstraMap+0xd3c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012384:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012388:	f103 031c 	add.w	r3, r3, #28
 801238c:	881b      	ldrh	r3, [r3, #0]
 801238e:	3301      	adds	r3, #1
 8012390:	b29b      	uxth	r3, r3
 8012392:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012396:	f102 0212 	add.w	r2, r2, #18
 801239a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801239c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123a0:	f103 0312 	add.w	r3, r3, #18
 80123a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123a8:	2b05      	cmp	r3, #5
 80123aa:	dd05      	ble.n	80123b8 <create_DijkstraMap+0xd10>
 80123ac:	2305      	movs	r3, #5
 80123ae:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123b2:	f102 0212 	add.w	r2, r2, #18
 80123b6:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80123b8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123bc:	f103 0312 	add.w	r3, r3, #18
 80123c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80123c4:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80123c8:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80123cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80123d0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123d4:	f102 0214 	add.w	r2, r2, #20
 80123d8:	8013      	strh	r3, [r2, #0]
 80123da:	e013      	b.n	8012404 <create_DijkstraMap+0xd5c>
 80123dc:	20000c3c 	.word	0x20000c3c
 80123e0:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80123e4:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80123e8:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80123ec:	881b      	ldrh	r3, [r3, #0]
 80123ee:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123f2:	f102 0214 	add.w	r2, r2, #20
 80123f6:	8013      	strh	r3, [r2, #0]
 80123f8:	2300      	movs	r3, #0
 80123fa:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123fe:	f102 0212 	add.w	r2, r2, #18
 8012402:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012404:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012408:	f103 0304 	add.w	r3, r3, #4
 801240c:	881b      	ldrh	r3, [r3, #0]
 801240e:	3b01      	subs	r3, #1
 8012410:	4a73      	ldr	r2, [pc, #460]	; (80125e0 <create_DijkstraMap+0xf38>)
 8012412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012416:	461a      	mov	r2, r3
 8012418:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801241c:	f103 0302 	add.w	r3, r3, #2
 8012420:	881b      	ldrh	r3, [r3, #0]
 8012422:	3301      	adds	r3, #1
 8012424:	fa42 f303 	asr.w	r3, r2, r3
 8012428:	f003 0301 	and.w	r3, r3, #1
 801242c:	2b00      	cmp	r3, #0
 801242e:	f040 8095 	bne.w	801255c <create_DijkstraMap+0xeb4>
 8012432:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012436:	f103 0302 	add.w	r3, r3, #2
 801243a:	881b      	ldrh	r3, [r3, #0]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012442:	f103 0304 	add.w	r3, r3, #4
 8012446:	881b      	ldrh	r3, [r3, #0]
 8012448:	1e59      	subs	r1, r3, #1
 801244a:	4866      	ldr	r0, [pc, #408]	; (80125e4 <create_DijkstraMap+0xf3c>)
 801244c:	4613      	mov	r3, r2
 801244e:	011b      	lsls	r3, r3, #4
 8012450:	1a9b      	subs	r3, r3, r2
 8012452:	440b      	add	r3, r1
 8012454:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012458:	461c      	mov	r4, r3
 801245a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801245e:	f103 0304 	add.w	r3, r3, #4
 8012462:	881a      	ldrh	r2, [r3, #0]
 8012464:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012468:	f103 0302 	add.w	r3, r3, #2
 801246c:	8819      	ldrh	r1, [r3, #0]
 801246e:	485d      	ldr	r0, [pc, #372]	; (80125e4 <create_DijkstraMap+0xf3c>)
 8012470:	4613      	mov	r3, r2
 8012472:	011b      	lsls	r3, r3, #4
 8012474:	1a9b      	subs	r3, r3, r2
 8012476:	440b      	add	r3, r1
 8012478:	33f0      	adds	r3, #240	; 0xf0
 801247a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801247e:	461a      	mov	r2, r3
 8012480:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012484:	f103 0314 	add.w	r3, r3, #20
 8012488:	f9b3 3000 	ldrsh.w	r3, [r3]
 801248c:	4413      	add	r3, r2
 801248e:	429c      	cmp	r4, r3
 8012490:	dd64      	ble.n	801255c <create_DijkstraMap+0xeb4>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012492:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012496:	f103 0304 	add.w	r3, r3, #4
 801249a:	881a      	ldrh	r2, [r3, #0]
 801249c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124a0:	f103 0302 	add.w	r3, r3, #2
 80124a4:	8819      	ldrh	r1, [r3, #0]
 80124a6:	484f      	ldr	r0, [pc, #316]	; (80125e4 <create_DijkstraMap+0xf3c>)
 80124a8:	4613      	mov	r3, r2
 80124aa:	011b      	lsls	r3, r3, #4
 80124ac:	1a9b      	subs	r3, r3, r2
 80124ae:	440b      	add	r3, r1
 80124b0:	33f0      	adds	r3, #240	; 0xf0
 80124b2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80124b6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124ba:	f103 0314 	add.w	r3, r3, #20
 80124be:	881b      	ldrh	r3, [r3, #0]
 80124c0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80124c4:	f102 0202 	add.w	r2, r2, #2
 80124c8:	8812      	ldrh	r2, [r2, #0]
 80124ca:	3201      	adds	r2, #1
 80124cc:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80124d0:	f101 0104 	add.w	r1, r1, #4
 80124d4:	8809      	ldrh	r1, [r1, #0]
 80124d6:	3901      	subs	r1, #1
 80124d8:	4403      	add	r3, r0
 80124da:	b29c      	uxth	r4, r3
 80124dc:	4841      	ldr	r0, [pc, #260]	; (80125e4 <create_DijkstraMap+0xf3c>)
 80124de:	4613      	mov	r3, r2
 80124e0:	011b      	lsls	r3, r3, #4
 80124e2:	1a9b      	subs	r3, r3, r2
 80124e4:	440b      	add	r3, r1
 80124e6:	4622      	mov	r2, r4
 80124e8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80124ec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124f0:	f103 0304 	add.w	r3, r3, #4
 80124f4:	881b      	ldrh	r3, [r3, #0]
 80124f6:	3b01      	subs	r3, #1
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80124fe:	f103 031c 	add.w	r3, r3, #28
 8012502:	4611      	mov	r1, r2
 8012504:	4618      	mov	r0, r3
 8012506:	f001 ffef 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 801250a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801250e:	f103 0302 	add.w	r3, r3, #2
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	3301      	adds	r3, #1
 8012516:	b29a      	uxth	r2, r3
 8012518:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801251c:	f103 031c 	add.w	r3, r3, #28
 8012520:	4611      	mov	r1, r2
 8012522:	4618      	mov	r0, r3
 8012524:	f001 ffe0 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012528:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801252c:	3b1c      	subs	r3, #28
 801252e:	2101      	movs	r1, #1
 8012530:	4618      	mov	r0, r3
 8012532:	f001 ffd9 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012536:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801253a:	3b1c      	subs	r3, #28
 801253c:	2107      	movs	r1, #7
 801253e:	4618      	mov	r0, r3
 8012540:	f001 ffd2 	bl	80144e8 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012544:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012548:	f103 0312 	add.w	r3, r3, #18
 801254c:	881a      	ldrh	r2, [r3, #0]
 801254e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012552:	3b1c      	subs	r3, #28
 8012554:	4611      	mov	r1, r2
 8012556:	4618      	mov	r0, r3
 8012558:	f001 ffc6 	bl	80144e8 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 801255c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012560:	881b      	ldrh	r3, [r3, #0]
 8012562:	2b01      	cmp	r3, #1
 8012564:	f040 85b6 	bne.w	80130d4 <create_DijkstraMap+0x1a2c>
					if(Xcoordinate <= 13){
 8012568:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801256c:	f103 0304 	add.w	r3, r3, #4
 8012570:	881b      	ldrh	r3, [r3, #0]
 8012572:	2b0d      	cmp	r3, #13
 8012574:	f200 80ed 	bhi.w	8012752 <create_DijkstraMap+0x10aa>
						if(Direction==SLANT_EAST){
 8012578:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801257c:	f103 031e 	add.w	r3, r3, #30
 8012580:	881b      	ldrh	r3, [r3, #0]
 8012582:	2b02      	cmp	r3, #2
 8012584:	d130      	bne.n	80125e8 <create_DijkstraMap+0xf40>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012586:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801258a:	f103 031c 	add.w	r3, r3, #28
 801258e:	881b      	ldrh	r3, [r3, #0]
 8012590:	3301      	adds	r3, #1
 8012592:	b29b      	uxth	r3, r3
 8012594:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012598:	f102 0212 	add.w	r2, r2, #18
 801259c:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801259e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125a2:	f103 0312 	add.w	r3, r3, #18
 80125a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125aa:	2b04      	cmp	r3, #4
 80125ac:	dd05      	ble.n	80125ba <create_DijkstraMap+0xf12>
 80125ae:	2304      	movs	r3, #4
 80125b0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125b4:	f102 0212 	add.w	r2, r2, #18
 80125b8:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80125ba:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125be:	f103 0312 	add.w	r3, r3, #18
 80125c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125c6:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80125ca:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80125ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80125d2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125d6:	f102 0216 	add.w	r2, r2, #22
 80125da:	8013      	strh	r3, [r2, #0]
 80125dc:	e014      	b.n	8012608 <create_DijkstraMap+0xf60>
 80125de:	bf00      	nop
 80125e0:	20000c3c 	.word	0x20000c3c
 80125e4:	20000f2c 	.word	0x20000f2c
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80125e8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80125ec:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80125f0:	881b      	ldrh	r3, [r3, #0]
 80125f2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125f6:	f102 0216 	add.w	r2, r2, #22
 80125fa:	8013      	strh	r3, [r2, #0]
 80125fc:	2300      	movs	r3, #0
 80125fe:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012602:	f102 0212 	add.w	r2, r2, #18
 8012606:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012608:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801260c:	f103 0304 	add.w	r3, r3, #4
 8012610:	881b      	ldrh	r3, [r3, #0]
 8012612:	3301      	adds	r3, #1
 8012614:	4a6c      	ldr	r2, [pc, #432]	; (80127c8 <create_DijkstraMap+0x1120>)
 8012616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801261a:	461a      	mov	r2, r3
 801261c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012620:	f103 0302 	add.w	r3, r3, #2
 8012624:	881b      	ldrh	r3, [r3, #0]
 8012626:	fa42 f303 	asr.w	r3, r2, r3
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	2b00      	cmp	r3, #0
 8012630:	f040 808f 	bne.w	8012752 <create_DijkstraMap+0x10aa>
 8012634:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012638:	f103 0302 	add.w	r3, r3, #2
 801263c:	881a      	ldrh	r2, [r3, #0]
 801263e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012642:	f103 0304 	add.w	r3, r3, #4
 8012646:	881b      	ldrh	r3, [r3, #0]
 8012648:	1c59      	adds	r1, r3, #1
 801264a:	4860      	ldr	r0, [pc, #384]	; (80127cc <create_DijkstraMap+0x1124>)
 801264c:	4613      	mov	r3, r2
 801264e:	011b      	lsls	r3, r3, #4
 8012650:	1a9b      	subs	r3, r3, r2
 8012652:	440b      	add	r3, r1
 8012654:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012658:	461c      	mov	r4, r3
 801265a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801265e:	f103 0302 	add.w	r3, r3, #2
 8012662:	881a      	ldrh	r2, [r3, #0]
 8012664:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012668:	f103 0304 	add.w	r3, r3, #4
 801266c:	8819      	ldrh	r1, [r3, #0]
 801266e:	4857      	ldr	r0, [pc, #348]	; (80127cc <create_DijkstraMap+0x1124>)
 8012670:	4613      	mov	r3, r2
 8012672:	011b      	lsls	r3, r3, #4
 8012674:	1a9b      	subs	r3, r3, r2
 8012676:	440b      	add	r3, r1
 8012678:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801267c:	461a      	mov	r2, r3
 801267e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012682:	f103 0316 	add.w	r3, r3, #22
 8012686:	f9b3 3000 	ldrsh.w	r3, [r3]
 801268a:	4413      	add	r3, r2
 801268c:	429c      	cmp	r4, r3
 801268e:	dd60      	ble.n	8012752 <create_DijkstraMap+0x10aa>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012690:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012694:	f103 0302 	add.w	r3, r3, #2
 8012698:	881a      	ldrh	r2, [r3, #0]
 801269a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801269e:	f103 0304 	add.w	r3, r3, #4
 80126a2:	8819      	ldrh	r1, [r3, #0]
 80126a4:	4849      	ldr	r0, [pc, #292]	; (80127cc <create_DijkstraMap+0x1124>)
 80126a6:	4613      	mov	r3, r2
 80126a8:	011b      	lsls	r3, r3, #4
 80126aa:	1a9b      	subs	r3, r3, r2
 80126ac:	440b      	add	r3, r1
 80126ae:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80126b2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126b6:	f103 0316 	add.w	r3, r3, #22
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80126c0:	f102 0202 	add.w	r2, r2, #2
 80126c4:	8812      	ldrh	r2, [r2, #0]
 80126c6:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80126ca:	f101 0104 	add.w	r1, r1, #4
 80126ce:	8809      	ldrh	r1, [r1, #0]
 80126d0:	3101      	adds	r1, #1
 80126d2:	4403      	add	r3, r0
 80126d4:	b29c      	uxth	r4, r3
 80126d6:	483d      	ldr	r0, [pc, #244]	; (80127cc <create_DijkstraMap+0x1124>)
 80126d8:	4613      	mov	r3, r2
 80126da:	011b      	lsls	r3, r3, #4
 80126dc:	1a9b      	subs	r3, r3, r2
 80126de:	440b      	add	r3, r1
 80126e0:	4622      	mov	r2, r4
 80126e2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 80126e6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126ea:	f103 0304 	add.w	r3, r3, #4
 80126ee:	881b      	ldrh	r3, [r3, #0]
 80126f0:	3301      	adds	r3, #1
 80126f2:	b29a      	uxth	r2, r3
 80126f4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80126f8:	f103 031c 	add.w	r3, r3, #28
 80126fc:	4611      	mov	r1, r2
 80126fe:	4618      	mov	r0, r3
 8012700:	f001 fef2 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012704:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012708:	f103 0302 	add.w	r3, r3, #2
 801270c:	881a      	ldrh	r2, [r3, #0]
 801270e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012712:	f103 031c 	add.w	r3, r3, #28
 8012716:	4611      	mov	r1, r2
 8012718:	4618      	mov	r0, r3
 801271a:	f001 fee5 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 801271e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012722:	3b1c      	subs	r3, #28
 8012724:	2101      	movs	r1, #1
 8012726:	4618      	mov	r0, r3
 8012728:	f001 fede 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 801272c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012730:	3b1c      	subs	r3, #28
 8012732:	2102      	movs	r1, #2
 8012734:	4618      	mov	r0, r3
 8012736:	f001 fed7 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 801273a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801273e:	f103 0312 	add.w	r3, r3, #18
 8012742:	881a      	ldrh	r2, [r3, #0]
 8012744:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012748:	3b1c      	subs	r3, #28
 801274a:	4611      	mov	r1, r2
 801274c:	4618      	mov	r0, r3
 801274e:	f001 fecb 	bl	80144e8 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 8012752:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012756:	f103 0304 	add.w	r3, r3, #4
 801275a:	881b      	ldrh	r3, [r3, #0]
 801275c:	2b00      	cmp	r3, #0
 801275e:	f000 80ec 	beq.w	801293a <create_DijkstraMap+0x1292>
						if(Direction==SLANT_WEST){
 8012762:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012766:	f103 031e 	add.w	r3, r3, #30
 801276a:	881b      	ldrh	r3, [r3, #0]
 801276c:	2b06      	cmp	r3, #6
 801276e:	d12f      	bne.n	80127d0 <create_DijkstraMap+0x1128>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012770:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012774:	f103 031c 	add.w	r3, r3, #28
 8012778:	881b      	ldrh	r3, [r3, #0]
 801277a:	3301      	adds	r3, #1
 801277c:	b29b      	uxth	r3, r3
 801277e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012782:	f102 0212 	add.w	r2, r2, #18
 8012786:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012788:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801278c:	f103 0312 	add.w	r3, r3, #18
 8012790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012794:	2b04      	cmp	r3, #4
 8012796:	dd05      	ble.n	80127a4 <create_DijkstraMap+0x10fc>
 8012798:	2304      	movs	r3, #4
 801279a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801279e:	f102 0212 	add.w	r2, r2, #18
 80127a2:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80127a4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127a8:	f103 0312 	add.w	r3, r3, #18
 80127ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80127b0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80127b4:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80127b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80127bc:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80127c0:	f102 0216 	add.w	r2, r2, #22
 80127c4:	8013      	strh	r3, [r2, #0]
 80127c6:	e013      	b.n	80127f0 <create_DijkstraMap+0x1148>
 80127c8:	20000c3c 	.word	0x20000c3c
 80127cc:	20000f2c 	.word	0x20000f2c
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80127d0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80127d4:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80127d8:	881b      	ldrh	r3, [r3, #0]
 80127da:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80127de:	f102 0216 	add.w	r2, r2, #22
 80127e2:	8013      	strh	r3, [r2, #0]
 80127e4:	2300      	movs	r3, #0
 80127e6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80127ea:	f102 0212 	add.w	r2, r2, #18
 80127ee:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80127f0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127f4:	f103 0304 	add.w	r3, r3, #4
 80127f8:	881b      	ldrh	r3, [r3, #0]
 80127fa:	3b01      	subs	r3, #1
 80127fc:	4a6c      	ldr	r2, [pc, #432]	; (80129b0 <create_DijkstraMap+0x1308>)
 80127fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012802:	461a      	mov	r2, r3
 8012804:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012808:	f103 0302 	add.w	r3, r3, #2
 801280c:	881b      	ldrh	r3, [r3, #0]
 801280e:	fa42 f303 	asr.w	r3, r2, r3
 8012812:	f003 0301 	and.w	r3, r3, #1
 8012816:	2b00      	cmp	r3, #0
 8012818:	f040 808f 	bne.w	801293a <create_DijkstraMap+0x1292>
 801281c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012820:	f103 0302 	add.w	r3, r3, #2
 8012824:	881a      	ldrh	r2, [r3, #0]
 8012826:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801282a:	f103 0304 	add.w	r3, r3, #4
 801282e:	881b      	ldrh	r3, [r3, #0]
 8012830:	1e59      	subs	r1, r3, #1
 8012832:	4860      	ldr	r0, [pc, #384]	; (80129b4 <create_DijkstraMap+0x130c>)
 8012834:	4613      	mov	r3, r2
 8012836:	011b      	lsls	r3, r3, #4
 8012838:	1a9b      	subs	r3, r3, r2
 801283a:	440b      	add	r3, r1
 801283c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012840:	461c      	mov	r4, r3
 8012842:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012846:	f103 0302 	add.w	r3, r3, #2
 801284a:	881a      	ldrh	r2, [r3, #0]
 801284c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012850:	f103 0304 	add.w	r3, r3, #4
 8012854:	8819      	ldrh	r1, [r3, #0]
 8012856:	4857      	ldr	r0, [pc, #348]	; (80129b4 <create_DijkstraMap+0x130c>)
 8012858:	4613      	mov	r3, r2
 801285a:	011b      	lsls	r3, r3, #4
 801285c:	1a9b      	subs	r3, r3, r2
 801285e:	440b      	add	r3, r1
 8012860:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012864:	461a      	mov	r2, r3
 8012866:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801286a:	f103 0316 	add.w	r3, r3, #22
 801286e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012872:	4413      	add	r3, r2
 8012874:	429c      	cmp	r4, r3
 8012876:	dd60      	ble.n	801293a <create_DijkstraMap+0x1292>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012878:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801287c:	f103 0302 	add.w	r3, r3, #2
 8012880:	881a      	ldrh	r2, [r3, #0]
 8012882:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012886:	f103 0304 	add.w	r3, r3, #4
 801288a:	8819      	ldrh	r1, [r3, #0]
 801288c:	4849      	ldr	r0, [pc, #292]	; (80129b4 <create_DijkstraMap+0x130c>)
 801288e:	4613      	mov	r3, r2
 8012890:	011b      	lsls	r3, r3, #4
 8012892:	1a9b      	subs	r3, r3, r2
 8012894:	440b      	add	r3, r1
 8012896:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801289a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801289e:	f103 0316 	add.w	r3, r3, #22
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80128a8:	f102 0202 	add.w	r2, r2, #2
 80128ac:	8812      	ldrh	r2, [r2, #0]
 80128ae:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80128b2:	f101 0104 	add.w	r1, r1, #4
 80128b6:	8809      	ldrh	r1, [r1, #0]
 80128b8:	3901      	subs	r1, #1
 80128ba:	4403      	add	r3, r0
 80128bc:	b29c      	uxth	r4, r3
 80128be:	483d      	ldr	r0, [pc, #244]	; (80129b4 <create_DijkstraMap+0x130c>)
 80128c0:	4613      	mov	r3, r2
 80128c2:	011b      	lsls	r3, r3, #4
 80128c4:	1a9b      	subs	r3, r3, r2
 80128c6:	440b      	add	r3, r1
 80128c8:	4622      	mov	r2, r4
 80128ca:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 80128ce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128d2:	f103 0304 	add.w	r3, r3, #4
 80128d6:	881b      	ldrh	r3, [r3, #0]
 80128d8:	3b01      	subs	r3, #1
 80128da:	b29a      	uxth	r2, r3
 80128dc:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80128e0:	f103 031c 	add.w	r3, r3, #28
 80128e4:	4611      	mov	r1, r2
 80128e6:	4618      	mov	r0, r3
 80128e8:	f001 fdfe 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80128ec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128f0:	f103 0302 	add.w	r3, r3, #2
 80128f4:	881a      	ldrh	r2, [r3, #0]
 80128f6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80128fa:	f103 031c 	add.w	r3, r3, #28
 80128fe:	4611      	mov	r1, r2
 8012900:	4618      	mov	r0, r3
 8012902:	f001 fdf1 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012906:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801290a:	3b1c      	subs	r3, #28
 801290c:	2101      	movs	r1, #1
 801290e:	4618      	mov	r0, r3
 8012910:	f001 fdea 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 8012914:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012918:	3b1c      	subs	r3, #28
 801291a:	2106      	movs	r1, #6
 801291c:	4618      	mov	r0, r3
 801291e:	f001 fde3 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012922:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012926:	f103 0312 	add.w	r3, r3, #18
 801292a:	881a      	ldrh	r2, [r3, #0]
 801292c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012930:	3b1c      	subs	r3, #28
 8012932:	4611      	mov	r1, r2
 8012934:	4618      	mov	r0, r3
 8012936:	f001 fdd7 	bl	80144e8 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 801293a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801293e:	f103 0302 	add.w	r3, r3, #2
 8012942:	881b      	ldrh	r3, [r3, #0]
 8012944:	2b0e      	cmp	r3, #14
 8012946:	f200 81dc 	bhi.w	8012d02 <create_DijkstraMap+0x165a>
						if(Direction==SLANT_NORTH_WEST){
 801294a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801294e:	f103 031e 	add.w	r3, r3, #30
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	2b07      	cmp	r3, #7
 8012956:	d12f      	bne.n	80129b8 <create_DijkstraMap+0x1310>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012958:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801295c:	f103 031c 	add.w	r3, r3, #28
 8012960:	881b      	ldrh	r3, [r3, #0]
 8012962:	3301      	adds	r3, #1
 8012964:	b29b      	uxth	r3, r3
 8012966:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801296a:	f102 0212 	add.w	r2, r2, #18
 801296e:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012970:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012974:	f103 0312 	add.w	r3, r3, #18
 8012978:	f9b3 3000 	ldrsh.w	r3, [r3]
 801297c:	2b05      	cmp	r3, #5
 801297e:	dd05      	ble.n	801298c <create_DijkstraMap+0x12e4>
 8012980:	2305      	movs	r3, #5
 8012982:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012986:	f102 0212 	add.w	r2, r2, #18
 801298a:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801298c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012990:	f103 0312 	add.w	r3, r3, #18
 8012994:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012998:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801299c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80129a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80129a4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80129a8:	f102 0214 	add.w	r2, r2, #20
 80129ac:	8013      	strh	r3, [r2, #0]
 80129ae:	e013      	b.n	80129d8 <create_DijkstraMap+0x1330>
 80129b0:	20000c3c 	.word	0x20000c3c
 80129b4:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80129b8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80129bc:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80129c6:	f102 0214 	add.w	r2, r2, #20
 80129ca:	8013      	strh	r3, [r2, #0]
 80129cc:	2300      	movs	r3, #0
 80129ce:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80129d2:	f102 0212 	add.w	r2, r2, #18
 80129d6:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 80129d8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129dc:	f103 0302 	add.w	r3, r3, #2
 80129e0:	881b      	ldrh	r3, [r3, #0]
 80129e2:	4a69      	ldr	r2, [pc, #420]	; (8012b88 <create_DijkstraMap+0x14e0>)
 80129e4:	330c      	adds	r3, #12
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	4413      	add	r3, r2
 80129ea:	88db      	ldrh	r3, [r3, #6]
 80129ec:	461a      	mov	r2, r3
 80129ee:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129f2:	f103 0304 	add.w	r3, r3, #4
 80129f6:	881b      	ldrh	r3, [r3, #0]
 80129f8:	fa42 f303 	asr.w	r3, r2, r3
 80129fc:	f003 0301 	and.w	r3, r3, #1
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f040 808d 	bne.w	8012b20 <create_DijkstraMap+0x1478>
 8012a06:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a0a:	f103 0304 	add.w	r3, r3, #4
 8012a0e:	881a      	ldrh	r2, [r3, #0]
 8012a10:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a14:	f103 0302 	add.w	r3, r3, #2
 8012a18:	8819      	ldrh	r1, [r3, #0]
 8012a1a:	485c      	ldr	r0, [pc, #368]	; (8012b8c <create_DijkstraMap+0x14e4>)
 8012a1c:	4613      	mov	r3, r2
 8012a1e:	011b      	lsls	r3, r3, #4
 8012a20:	1a9b      	subs	r3, r3, r2
 8012a22:	440b      	add	r3, r1
 8012a24:	33f0      	adds	r3, #240	; 0xf0
 8012a26:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012a2a:	461c      	mov	r4, r3
 8012a2c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a30:	f103 0302 	add.w	r3, r3, #2
 8012a34:	881a      	ldrh	r2, [r3, #0]
 8012a36:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a3a:	f103 0304 	add.w	r3, r3, #4
 8012a3e:	8819      	ldrh	r1, [r3, #0]
 8012a40:	4852      	ldr	r0, [pc, #328]	; (8012b8c <create_DijkstraMap+0x14e4>)
 8012a42:	4613      	mov	r3, r2
 8012a44:	011b      	lsls	r3, r3, #4
 8012a46:	1a9b      	subs	r3, r3, r2
 8012a48:	440b      	add	r3, r1
 8012a4a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012a4e:	461a      	mov	r2, r3
 8012a50:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a54:	f103 0314 	add.w	r3, r3, #20
 8012a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	429c      	cmp	r4, r3
 8012a60:	dd5e      	ble.n	8012b20 <create_DijkstraMap+0x1478>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012a62:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a66:	f103 0302 	add.w	r3, r3, #2
 8012a6a:	881a      	ldrh	r2, [r3, #0]
 8012a6c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a70:	f103 0304 	add.w	r3, r3, #4
 8012a74:	8819      	ldrh	r1, [r3, #0]
 8012a76:	4845      	ldr	r0, [pc, #276]	; (8012b8c <create_DijkstraMap+0x14e4>)
 8012a78:	4613      	mov	r3, r2
 8012a7a:	011b      	lsls	r3, r3, #4
 8012a7c:	1a9b      	subs	r3, r3, r2
 8012a7e:	440b      	add	r3, r1
 8012a80:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012a84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a88:	f103 0314 	add.w	r3, r3, #20
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012a92:	f102 0204 	add.w	r2, r2, #4
 8012a96:	8812      	ldrh	r2, [r2, #0]
 8012a98:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012a9c:	f101 0102 	add.w	r1, r1, #2
 8012aa0:	8809      	ldrh	r1, [r1, #0]
 8012aa2:	4403      	add	r3, r0
 8012aa4:	b29c      	uxth	r4, r3
 8012aa6:	4839      	ldr	r0, [pc, #228]	; (8012b8c <create_DijkstraMap+0x14e4>)
 8012aa8:	4613      	mov	r3, r2
 8012aaa:	011b      	lsls	r3, r3, #4
 8012aac:	1a9b      	subs	r3, r3, r2
 8012aae:	440b      	add	r3, r1
 8012ab0:	33f0      	adds	r3, #240	; 0xf0
 8012ab2:	4622      	mov	r2, r4
 8012ab4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012ab8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012abc:	f103 0304 	add.w	r3, r3, #4
 8012ac0:	881a      	ldrh	r2, [r3, #0]
 8012ac2:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012ac6:	f103 031c 	add.w	r3, r3, #28
 8012aca:	4611      	mov	r1, r2
 8012acc:	4618      	mov	r0, r3
 8012ace:	f001 fd0b 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012ad2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ad6:	f103 0302 	add.w	r3, r3, #2
 8012ada:	881a      	ldrh	r2, [r3, #0]
 8012adc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012ae0:	f103 031c 	add.w	r3, r3, #28
 8012ae4:	4611      	mov	r1, r2
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f001 fcfe 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012aec:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012af0:	3b1c      	subs	r3, #28
 8012af2:	2100      	movs	r1, #0
 8012af4:	4618      	mov	r0, r3
 8012af6:	f001 fcf7 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012afa:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012afe:	3b1c      	subs	r3, #28
 8012b00:	2107      	movs	r1, #7
 8012b02:	4618      	mov	r0, r3
 8012b04:	f001 fcf0 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012b08:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b0c:	f103 0312 	add.w	r3, r3, #18
 8012b10:	881a      	ldrh	r2, [r3, #0]
 8012b12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012b16:	3b1c      	subs	r3, #28
 8012b18:	4611      	mov	r1, r2
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f001 fce4 	bl	80144e8 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8012b20:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012b24:	f103 031e 	add.w	r3, r3, #30
 8012b28:	881b      	ldrh	r3, [r3, #0]
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	d130      	bne.n	8012b90 <create_DijkstraMap+0x14e8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012b2e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012b32:	f103 031c 	add.w	r3, r3, #28
 8012b36:	881b      	ldrh	r3, [r3, #0]
 8012b38:	3301      	adds	r3, #1
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b40:	f102 0212 	add.w	r2, r2, #18
 8012b44:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012b46:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b4a:	f103 0312 	add.w	r3, r3, #18
 8012b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b52:	2b05      	cmp	r3, #5
 8012b54:	dd05      	ble.n	8012b62 <create_DijkstraMap+0x14ba>
 8012b56:	2305      	movs	r3, #5
 8012b58:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b5c:	f102 0212 	add.w	r2, r2, #18
 8012b60:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012b62:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b66:	f103 0312 	add.w	r3, r3, #18
 8012b6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b6e:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012b72:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012b76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012b7a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b7e:	f102 0214 	add.w	r2, r2, #20
 8012b82:	8013      	strh	r3, [r2, #0]
 8012b84:	e014      	b.n	8012bb0 <create_DijkstraMap+0x1508>
 8012b86:	bf00      	nop
 8012b88:	20000c3c 	.word	0x20000c3c
 8012b8c:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012b90:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012b94:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012b98:	881b      	ldrh	r3, [r3, #0]
 8012b9a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b9e:	f102 0214 	add.w	r2, r2, #20
 8012ba2:	8013      	strh	r3, [r2, #0]
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012baa:	f102 0212 	add.w	r2, r2, #18
 8012bae:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012bb0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bb4:	f103 0302 	add.w	r3, r3, #2
 8012bb8:	881b      	ldrh	r3, [r3, #0]
 8012bba:	4a6f      	ldr	r2, [pc, #444]	; (8012d78 <create_DijkstraMap+0x16d0>)
 8012bbc:	330c      	adds	r3, #12
 8012bbe:	005b      	lsls	r3, r3, #1
 8012bc0:	4413      	add	r3, r2
 8012bc2:	88db      	ldrh	r3, [r3, #6]
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bca:	f103 0304 	add.w	r3, r3, #4
 8012bce:	881b      	ldrh	r3, [r3, #0]
 8012bd0:	3301      	adds	r3, #1
 8012bd2:	fa42 f303 	asr.w	r3, r2, r3
 8012bd6:	f003 0301 	and.w	r3, r3, #1
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	f040 8091 	bne.w	8012d02 <create_DijkstraMap+0x165a>
 8012be0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012be4:	f103 0304 	add.w	r3, r3, #4
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	1c5a      	adds	r2, r3, #1
 8012bec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bf0:	f103 0302 	add.w	r3, r3, #2
 8012bf4:	8819      	ldrh	r1, [r3, #0]
 8012bf6:	4861      	ldr	r0, [pc, #388]	; (8012d7c <create_DijkstraMap+0x16d4>)
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	011b      	lsls	r3, r3, #4
 8012bfc:	1a9b      	subs	r3, r3, r2
 8012bfe:	440b      	add	r3, r1
 8012c00:	33f0      	adds	r3, #240	; 0xf0
 8012c02:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c06:	461c      	mov	r4, r3
 8012c08:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c0c:	f103 0302 	add.w	r3, r3, #2
 8012c10:	881a      	ldrh	r2, [r3, #0]
 8012c12:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c16:	f103 0304 	add.w	r3, r3, #4
 8012c1a:	8819      	ldrh	r1, [r3, #0]
 8012c1c:	4857      	ldr	r0, [pc, #348]	; (8012d7c <create_DijkstraMap+0x16d4>)
 8012c1e:	4613      	mov	r3, r2
 8012c20:	011b      	lsls	r3, r3, #4
 8012c22:	1a9b      	subs	r3, r3, r2
 8012c24:	440b      	add	r3, r1
 8012c26:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c30:	f103 0314 	add.w	r3, r3, #20
 8012c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c38:	4413      	add	r3, r2
 8012c3a:	429c      	cmp	r4, r3
 8012c3c:	dd61      	ble.n	8012d02 <create_DijkstraMap+0x165a>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012c3e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c42:	f103 0302 	add.w	r3, r3, #2
 8012c46:	881a      	ldrh	r2, [r3, #0]
 8012c48:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c4c:	f103 0304 	add.w	r3, r3, #4
 8012c50:	8819      	ldrh	r1, [r3, #0]
 8012c52:	484a      	ldr	r0, [pc, #296]	; (8012d7c <create_DijkstraMap+0x16d4>)
 8012c54:	4613      	mov	r3, r2
 8012c56:	011b      	lsls	r3, r3, #4
 8012c58:	1a9b      	subs	r3, r3, r2
 8012c5a:	440b      	add	r3, r1
 8012c5c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012c60:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c64:	f103 0314 	add.w	r3, r3, #20
 8012c68:	881b      	ldrh	r3, [r3, #0]
 8012c6a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c6e:	f102 0204 	add.w	r2, r2, #4
 8012c72:	8812      	ldrh	r2, [r2, #0]
 8012c74:	3201      	adds	r2, #1
 8012c76:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012c7a:	f101 0102 	add.w	r1, r1, #2
 8012c7e:	8809      	ldrh	r1, [r1, #0]
 8012c80:	4403      	add	r3, r0
 8012c82:	b29c      	uxth	r4, r3
 8012c84:	483d      	ldr	r0, [pc, #244]	; (8012d7c <create_DijkstraMap+0x16d4>)
 8012c86:	4613      	mov	r3, r2
 8012c88:	011b      	lsls	r3, r3, #4
 8012c8a:	1a9b      	subs	r3, r3, r2
 8012c8c:	440b      	add	r3, r1
 8012c8e:	33f0      	adds	r3, #240	; 0xf0
 8012c90:	4622      	mov	r2, r4
 8012c92:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012c96:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c9a:	f103 0304 	add.w	r3, r3, #4
 8012c9e:	881b      	ldrh	r3, [r3, #0]
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	b29a      	uxth	r2, r3
 8012ca4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012ca8:	f103 031c 	add.w	r3, r3, #28
 8012cac:	4611      	mov	r1, r2
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f001 fc1a 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012cb4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cb8:	f103 0302 	add.w	r3, r3, #2
 8012cbc:	881a      	ldrh	r2, [r3, #0]
 8012cbe:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012cc2:	f103 031c 	add.w	r3, r3, #28
 8012cc6:	4611      	mov	r1, r2
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f001 fc0d 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012cce:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012cd2:	3b1c      	subs	r3, #28
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f001 fc06 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012cdc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012ce0:	3b1c      	subs	r3, #28
 8012ce2:	2101      	movs	r1, #1
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f001 fbff 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012cea:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cee:	f103 0312 	add.w	r3, r3, #18
 8012cf2:	881a      	ldrh	r2, [r3, #0]
 8012cf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012cf8:	3b1c      	subs	r3, #28
 8012cfa:	4611      	mov	r1, r2
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f001 fbf3 	bl	80144e8 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012d02:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d06:	f103 0302 	add.w	r3, r3, #2
 8012d0a:	881b      	ldrh	r3, [r3, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	f000 81e1 	beq.w	80130d4 <create_DijkstraMap+0x1a2c>
						if(Direction==SLANT_SOUTH_WEST){
 8012d12:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012d16:	f103 031e 	add.w	r3, r3, #30
 8012d1a:	881b      	ldrh	r3, [r3, #0]
 8012d1c:	2b05      	cmp	r3, #5
 8012d1e:	d12f      	bne.n	8012d80 <create_DijkstraMap+0x16d8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012d20:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012d24:	f103 031c 	add.w	r3, r3, #28
 8012d28:	881b      	ldrh	r3, [r3, #0]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d32:	f102 0212 	add.w	r2, r2, #18
 8012d36:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012d38:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d3c:	f103 0312 	add.w	r3, r3, #18
 8012d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d44:	2b05      	cmp	r3, #5
 8012d46:	dd05      	ble.n	8012d54 <create_DijkstraMap+0x16ac>
 8012d48:	2305      	movs	r3, #5
 8012d4a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d4e:	f102 0212 	add.w	r2, r2, #18
 8012d52:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012d54:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d58:	f103 0312 	add.w	r3, r3, #18
 8012d5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012d60:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012d64:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012d68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012d6c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d70:	f102 0214 	add.w	r2, r2, #20
 8012d74:	8013      	strh	r3, [r2, #0]
 8012d76:	e013      	b.n	8012da0 <create_DijkstraMap+0x16f8>
 8012d78:	20000c3c 	.word	0x20000c3c
 8012d7c:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012d80:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012d84:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d8e:	f102 0214 	add.w	r2, r2, #20
 8012d92:	8013      	strh	r3, [r2, #0]
 8012d94:	2300      	movs	r3, #0
 8012d96:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d9a:	f102 0212 	add.w	r2, r2, #18
 8012d9e:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012da0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012da4:	f103 0302 	add.w	r3, r3, #2
 8012da8:	881b      	ldrh	r3, [r3, #0]
 8012daa:	3b01      	subs	r3, #1
 8012dac:	4ad3      	ldr	r2, [pc, #844]	; (80130fc <create_DijkstraMap+0x1a54>)
 8012dae:	330c      	adds	r3, #12
 8012db0:	005b      	lsls	r3, r3, #1
 8012db2:	4413      	add	r3, r2
 8012db4:	88db      	ldrh	r3, [r3, #6]
 8012db6:	461a      	mov	r2, r3
 8012db8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dbc:	f103 0304 	add.w	r3, r3, #4
 8012dc0:	881b      	ldrh	r3, [r3, #0]
 8012dc2:	fa42 f303 	asr.w	r3, r2, r3
 8012dc6:	f003 0301 	and.w	r3, r3, #1
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	f040 8091 	bne.w	8012ef2 <create_DijkstraMap+0x184a>
 8012dd0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dd4:	f103 0304 	add.w	r3, r3, #4
 8012dd8:	881a      	ldrh	r2, [r3, #0]
 8012dda:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dde:	f103 0302 	add.w	r3, r3, #2
 8012de2:	881b      	ldrh	r3, [r3, #0]
 8012de4:	1e59      	subs	r1, r3, #1
 8012de6:	48c6      	ldr	r0, [pc, #792]	; (8013100 <create_DijkstraMap+0x1a58>)
 8012de8:	4613      	mov	r3, r2
 8012dea:	011b      	lsls	r3, r3, #4
 8012dec:	1a9b      	subs	r3, r3, r2
 8012dee:	440b      	add	r3, r1
 8012df0:	33f0      	adds	r3, #240	; 0xf0
 8012df2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012df6:	461c      	mov	r4, r3
 8012df8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dfc:	f103 0302 	add.w	r3, r3, #2
 8012e00:	881a      	ldrh	r2, [r3, #0]
 8012e02:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e06:	f103 0304 	add.w	r3, r3, #4
 8012e0a:	8819      	ldrh	r1, [r3, #0]
 8012e0c:	48bc      	ldr	r0, [pc, #752]	; (8013100 <create_DijkstraMap+0x1a58>)
 8012e0e:	4613      	mov	r3, r2
 8012e10:	011b      	lsls	r3, r3, #4
 8012e12:	1a9b      	subs	r3, r3, r2
 8012e14:	440b      	add	r3, r1
 8012e16:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e20:	f103 0314 	add.w	r3, r3, #20
 8012e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e28:	4413      	add	r3, r2
 8012e2a:	429c      	cmp	r4, r3
 8012e2c:	dd61      	ble.n	8012ef2 <create_DijkstraMap+0x184a>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012e2e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e32:	f103 0302 	add.w	r3, r3, #2
 8012e36:	881a      	ldrh	r2, [r3, #0]
 8012e38:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e3c:	f103 0304 	add.w	r3, r3, #4
 8012e40:	8819      	ldrh	r1, [r3, #0]
 8012e42:	48af      	ldr	r0, [pc, #700]	; (8013100 <create_DijkstraMap+0x1a58>)
 8012e44:	4613      	mov	r3, r2
 8012e46:	011b      	lsls	r3, r3, #4
 8012e48:	1a9b      	subs	r3, r3, r2
 8012e4a:	440b      	add	r3, r1
 8012e4c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012e50:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e54:	f103 0314 	add.w	r3, r3, #20
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012e5e:	f102 0204 	add.w	r2, r2, #4
 8012e62:	8812      	ldrh	r2, [r2, #0]
 8012e64:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012e68:	f101 0102 	add.w	r1, r1, #2
 8012e6c:	8809      	ldrh	r1, [r1, #0]
 8012e6e:	3901      	subs	r1, #1
 8012e70:	4403      	add	r3, r0
 8012e72:	b29c      	uxth	r4, r3
 8012e74:	48a2      	ldr	r0, [pc, #648]	; (8013100 <create_DijkstraMap+0x1a58>)
 8012e76:	4613      	mov	r3, r2
 8012e78:	011b      	lsls	r3, r3, #4
 8012e7a:	1a9b      	subs	r3, r3, r2
 8012e7c:	440b      	add	r3, r1
 8012e7e:	33f0      	adds	r3, #240	; 0xf0
 8012e80:	4622      	mov	r2, r4
 8012e82:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012e86:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e8a:	f103 0304 	add.w	r3, r3, #4
 8012e8e:	881a      	ldrh	r2, [r3, #0]
 8012e90:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012e94:	f103 031c 	add.w	r3, r3, #28
 8012e98:	4611      	mov	r1, r2
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f001 fb24 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012ea0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ea4:	f103 0302 	add.w	r3, r3, #2
 8012ea8:	881b      	ldrh	r3, [r3, #0]
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012eb2:	f103 031c 	add.w	r3, r3, #28
 8012eb6:	4611      	mov	r1, r2
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f001 fb15 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012ebe:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012ec2:	3b1c      	subs	r3, #28
 8012ec4:	2100      	movs	r1, #0
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f001 fb0e 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012ecc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012ed0:	3b1c      	subs	r3, #28
 8012ed2:	2105      	movs	r1, #5
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f001 fb07 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012eda:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ede:	f103 0312 	add.w	r3, r3, #18
 8012ee2:	881a      	ldrh	r2, [r3, #0]
 8012ee4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ee8:	3b1c      	subs	r3, #28
 8012eea:	4611      	mov	r1, r2
 8012eec:	4618      	mov	r0, r3
 8012eee:	f001 fafb 	bl	80144e8 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012ef2:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012ef6:	f103 031e 	add.w	r3, r3, #30
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	2b03      	cmp	r3, #3
 8012efe:	d12b      	bne.n	8012f58 <create_DijkstraMap+0x18b0>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012f00:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012f04:	f103 031c 	add.w	r3, r3, #28
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f12:	f102 0212 	add.w	r2, r2, #18
 8012f16:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012f18:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f1c:	f103 0312 	add.w	r3, r3, #18
 8012f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f24:	2b05      	cmp	r3, #5
 8012f26:	dd05      	ble.n	8012f34 <create_DijkstraMap+0x188c>
 8012f28:	2305      	movs	r3, #5
 8012f2a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f2e:	f102 0212 	add.w	r2, r2, #18
 8012f32:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012f34:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f38:	f103 0312 	add.w	r3, r3, #18
 8012f3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f40:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012f44:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012f48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012f4c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f50:	f102 0214 	add.w	r2, r2, #20
 8012f54:	8013      	strh	r3, [r2, #0]
 8012f56:	e00f      	b.n	8012f78 <create_DijkstraMap+0x18d0>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012f58:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012f5c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f66:	f102 0214 	add.w	r2, r2, #20
 8012f6a:	8013      	strh	r3, [r2, #0]
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f72:	f102 0212 	add.w	r2, r2, #18
 8012f76:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012f78:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f7c:	f103 0302 	add.w	r3, r3, #2
 8012f80:	881b      	ldrh	r3, [r3, #0]
 8012f82:	3b01      	subs	r3, #1
 8012f84:	4a5d      	ldr	r2, [pc, #372]	; (80130fc <create_DijkstraMap+0x1a54>)
 8012f86:	330c      	adds	r3, #12
 8012f88:	005b      	lsls	r3, r3, #1
 8012f8a:	4413      	add	r3, r2
 8012f8c:	88db      	ldrh	r3, [r3, #6]
 8012f8e:	461a      	mov	r2, r3
 8012f90:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f94:	f103 0304 	add.w	r3, r3, #4
 8012f98:	881b      	ldrh	r3, [r3, #0]
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	fa42 f303 	asr.w	r3, r2, r3
 8012fa0:	f003 0301 	and.w	r3, r3, #1
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f040 8095 	bne.w	80130d4 <create_DijkstraMap+0x1a2c>
 8012faa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012fae:	f103 0304 	add.w	r3, r3, #4
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	1c5a      	adds	r2, r3, #1
 8012fb6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012fba:	f103 0302 	add.w	r3, r3, #2
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	1e59      	subs	r1, r3, #1
 8012fc2:	484f      	ldr	r0, [pc, #316]	; (8013100 <create_DijkstraMap+0x1a58>)
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	011b      	lsls	r3, r3, #4
 8012fc8:	1a9b      	subs	r3, r3, r2
 8012fca:	440b      	add	r3, r1
 8012fcc:	33f0      	adds	r3, #240	; 0xf0
 8012fce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012fd2:	461c      	mov	r4, r3
 8012fd4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012fd8:	f103 0302 	add.w	r3, r3, #2
 8012fdc:	881a      	ldrh	r2, [r3, #0]
 8012fde:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012fe2:	f103 0304 	add.w	r3, r3, #4
 8012fe6:	8819      	ldrh	r1, [r3, #0]
 8012fe8:	4845      	ldr	r0, [pc, #276]	; (8013100 <create_DijkstraMap+0x1a58>)
 8012fea:	4613      	mov	r3, r2
 8012fec:	011b      	lsls	r3, r3, #4
 8012fee:	1a9b      	subs	r3, r3, r2
 8012ff0:	440b      	add	r3, r1
 8012ff2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012ff6:	461a      	mov	r2, r3
 8012ff8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ffc:	f103 0314 	add.w	r3, r3, #20
 8013000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013004:	4413      	add	r3, r2
 8013006:	429c      	cmp	r4, r3
 8013008:	dd64      	ble.n	80130d4 <create_DijkstraMap+0x1a2c>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 801300a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801300e:	f103 0302 	add.w	r3, r3, #2
 8013012:	881a      	ldrh	r2, [r3, #0]
 8013014:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013018:	f103 0304 	add.w	r3, r3, #4
 801301c:	8819      	ldrh	r1, [r3, #0]
 801301e:	4838      	ldr	r0, [pc, #224]	; (8013100 <create_DijkstraMap+0x1a58>)
 8013020:	4613      	mov	r3, r2
 8013022:	011b      	lsls	r3, r3, #4
 8013024:	1a9b      	subs	r3, r3, r2
 8013026:	440b      	add	r3, r1
 8013028:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801302c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013030:	f103 0314 	add.w	r3, r3, #20
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801303a:	f102 0204 	add.w	r2, r2, #4
 801303e:	8812      	ldrh	r2, [r2, #0]
 8013040:	3201      	adds	r2, #1
 8013042:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8013046:	f101 0102 	add.w	r1, r1, #2
 801304a:	8809      	ldrh	r1, [r1, #0]
 801304c:	3901      	subs	r1, #1
 801304e:	4403      	add	r3, r0
 8013050:	b29c      	uxth	r4, r3
 8013052:	482b      	ldr	r0, [pc, #172]	; (8013100 <create_DijkstraMap+0x1a58>)
 8013054:	4613      	mov	r3, r2
 8013056:	011b      	lsls	r3, r3, #4
 8013058:	1a9b      	subs	r3, r3, r2
 801305a:	440b      	add	r3, r1
 801305c:	33f0      	adds	r3, #240	; 0xf0
 801305e:	4622      	mov	r2, r4
 8013060:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8013064:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013068:	f103 0304 	add.w	r3, r3, #4
 801306c:	881b      	ldrh	r3, [r3, #0]
 801306e:	3301      	adds	r3, #1
 8013070:	b29a      	uxth	r2, r3
 8013072:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013076:	f103 031c 	add.w	r3, r3, #28
 801307a:	4611      	mov	r1, r2
 801307c:	4618      	mov	r0, r3
 801307e:	f001 fa33 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8013082:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013086:	f103 0302 	add.w	r3, r3, #2
 801308a:	881b      	ldrh	r3, [r3, #0]
 801308c:	3b01      	subs	r3, #1
 801308e:	b29a      	uxth	r2, r3
 8013090:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8013094:	f103 031c 	add.w	r3, r3, #28
 8013098:	4611      	mov	r1, r2
 801309a:	4618      	mov	r0, r3
 801309c:	f001 fa24 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80130a0:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80130a4:	3b1c      	subs	r3, #28
 80130a6:	2100      	movs	r1, #0
 80130a8:	4618      	mov	r0, r3
 80130aa:	f001 fa1d 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 80130ae:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80130b2:	3b1c      	subs	r3, #28
 80130b4:	2103      	movs	r1, #3
 80130b6:	4618      	mov	r0, r3
 80130b8:	f001 fa16 	bl	80144e8 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80130bc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130c0:	f103 0312 	add.w	r3, r3, #18
 80130c4:	881a      	ldrh	r2, [r3, #0]
 80130c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80130ca:	3b1c      	subs	r3, #28
 80130cc:	4611      	mov	r1, r2
 80130ce:	4618      	mov	r0, r3
 80130d0:	f001 fa0a 	bl	80144e8 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 80130d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130d8:	f103 0306 	add.w	r3, r3, #6
 80130dc:	881b      	ldrh	r3, [r3, #0]
 80130de:	3301      	adds	r3, #1
 80130e0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80130e4:	f102 0206 	add.w	r2, r2, #6
 80130e8:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 80130ea:	f7fe bc21 	b.w	8011930 <create_DijkstraMap+0x288>

		}



}
 80130ee:	bf00      	nop
 80130f0:	f507 57dd 	add.w	r7, r7, #7072	; 0x1ba0
 80130f4:	371c      	adds	r7, #28
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd90      	pop	{r4, r7, pc}
 80130fa:	bf00      	nop
 80130fc:	20000c3c 	.word	0x20000c3c
 8013100:	20000f2c 	.word	0x20000f2c

08013104 <route_Dijkstra>:





void route_Dijkstra(void){
 8013104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013106:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 801310a:	b08d      	sub	sp, #52	; 0x34
 801310c:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 801310e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013112:	f103 0314 	add.w	r3, r3, #20
 8013116:	4618      	mov	r0, r3
 8013118:	f001 f9d6 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_y);
 801311c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013120:	f103 0314 	add.w	r3, r3, #20
 8013124:	4618      	mov	r0, r3
 8013126:	f001 f9cf 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_matrix);
 801312a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801312e:	3b0c      	subs	r3, #12
 8013130:	4618      	mov	r0, r3
 8013132:	f001 f9c9 	bl	80144c8 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8013136:	48c9      	ldr	r0, [pc, #804]	; (801345c <route_Dijkstra+0x358>)
 8013138:	f001 f9c6 	bl	80144c8 <initStack_walk>
	initStack_walk(&g_Goal_y);
 801313c:	48c8      	ldr	r0, [pc, #800]	; (8013460 <route_Dijkstra+0x35c>)
 801313e:	f001 f9c3 	bl	80144c8 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013142:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013146:	f103 0314 	add.w	r3, r3, #20
 801314a:	2100      	movs	r1, #0
 801314c:	4618      	mov	r0, r3
 801314e:	f001 f9cb 	bl	80144e8 <pushStack_walk>
 8013152:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013156:	f103 0314 	add.w	r3, r3, #20
 801315a:	2100      	movs	r1, #0
 801315c:	4618      	mov	r0, r3
 801315e:	f001 f9c3 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 8013162:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013166:	3b0c      	subs	r3, #12
 8013168:	2100      	movs	r1, #0
 801316a:	4618      	mov	r0, r3
 801316c:	f001 f9bc 	bl	80144e8 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 8013170:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013174:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013178:	2200      	movs	r2, #0
 801317a:	601a      	str	r2, [r3, #0]
	int y = 0;
 801317c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013180:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013184:	2200      	movs	r2, #0
 8013186:	601a      	str	r2, [r3, #0]
	int direction = 1;
 8013188:	2301      	movs	r3, #1
 801318a:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 801318e:	f102 021c 	add.w	r2, r2, #28
 8013192:	6013      	str	r3, [r2, #0]
	create_DijkstraMap();
 8013194:	f7fe fa88 	bl	80116a8 <create_DijkstraMap>

	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8013198:	f107 0120 	add.w	r1, r7, #32
 801319c:	3920      	subs	r1, #32
 801319e:	f107 0320 	add.w	r3, r7, #32
 80131a2:	3b1c      	subs	r3, #28
 80131a4:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80131a8:	f102 021c 	add.w	r2, r2, #28
 80131ac:	6812      	ldr	r2, [r2, #0]
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7fa ffdc 	bl	800e16c <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 80131b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b0a      	cmp	r3, #10
 80131c0:	d006      	beq.n	80131d0 <route_Dijkstra+0xcc>
 80131c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	2b0b      	cmp	r3, #11
 80131ce:	d10f      	bne.n	80131f0 <route_Dijkstra+0xec>
 80131d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b0b      	cmp	r3, #11
 80131dc:	f000 8355 	beq.w	801388a <route_Dijkstra+0x786>
 80131e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b0c      	cmp	r3, #12
 80131ec:	f000 834d 	beq.w	801388a <route_Dijkstra+0x786>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 80131f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80131f8:	6818      	ldr	r0, [r3, #0]
 80131fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013202:	6819      	ldr	r1, [r3, #0]
 8013204:	f107 0220 	add.w	r2, r7, #32
 8013208:	3a15      	subs	r2, #21
 801320a:	f107 0320 	add.w	r3, r7, #32
 801320e:	3b17      	subs	r3, #23
 8013210:	9301      	str	r3, [sp, #4]
 8013212:	f107 0320 	add.w	r3, r7, #32
 8013216:	3b16      	subs	r3, #22
 8013218:	9300      	str	r3, [sp, #0]
 801321a:	4613      	mov	r3, r2
 801321c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013220:	f102 021c 	add.w	r2, r2, #28
 8013224:	6812      	ldr	r2, [r2, #0]
 8013226:	f7fd fe23 	bl	8010e70 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 801322a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801322e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013232:	681c      	ldr	r4, [r3, #0]
 8013234:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013238:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801323c:	681d      	ldr	r5, [r3, #0]
 801323e:	f107 0320 	add.w	r3, r7, #32
 8013242:	3b14      	subs	r3, #20
 8013244:	f107 0220 	add.w	r2, r7, #32
 8013248:	3a12      	subs	r2, #18
 801324a:	f107 0120 	add.w	r1, r7, #32
 801324e:	3910      	subs	r1, #16
 8013250:	f107 0020 	add.w	r0, r7, #32
 8013254:	380e      	subs	r0, #14
 8013256:	f507 5604 	add.w	r6, r7, #8448	; 0x2100
 801325a:	f106 061c 	add.w	r6, r6, #28
 801325e:	6836      	ldr	r6, [r6, #0]
 8013260:	9602      	str	r6, [sp, #8]
 8013262:	9501      	str	r5, [sp, #4]
 8013264:	9400      	str	r4, [sp, #0]
 8013266:	f7fe f985 	bl	8011574 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 801326a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801326e:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d006      	beq.n	8013286 <route_Dijkstra+0x182>
 8013278:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801327c:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013284:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013286:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801328a:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d006      	beq.n	80132a2 <route_Dijkstra+0x19e>
 8013294:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013298:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801329c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132a0:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 80132a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132a6:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d006      	beq.n	80132be <route_Dijkstra+0x1ba>
 80132b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80132b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132bc:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 80132be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132c2:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80132c6:	881b      	ldrh	r3, [r3, #0]
 80132c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132cc:	4293      	cmp	r3, r2
 80132ce:	d11b      	bne.n	8013308 <route_Dijkstra+0x204>
 80132d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80132d8:	881b      	ldrh	r3, [r3, #0]
 80132da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132de:	4293      	cmp	r3, r2
 80132e0:	d112      	bne.n	8013308 <route_Dijkstra+0x204>
 80132e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80132ea:	881b      	ldrh	r3, [r3, #0]
 80132ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132f0:	4293      	cmp	r3, r2
 80132f2:	d109      	bne.n	8013308 <route_Dijkstra+0x204>
 80132f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132f8:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80132fc:	881b      	ldrh	r3, [r3, #0]
 80132fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013302:	4293      	cmp	r3, r2
 8013304:	f000 82c0 	beq.w	8013888 <route_Dijkstra+0x784>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8013308:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801330c:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013310:	881a      	ldrh	r2, [r3, #0]
 8013312:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013316:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801331a:	881b      	ldrh	r3, [r3, #0]
 801331c:	429a      	cmp	r2, r3
 801331e:	f200 80c7 	bhi.w	80134b0 <route_Dijkstra+0x3ac>
 8013322:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013326:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 801332a:	881a      	ldrh	r2, [r3, #0]
 801332c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013330:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013334:	881b      	ldrh	r3, [r3, #0]
 8013336:	429a      	cmp	r2, r3
 8013338:	f200 80ba 	bhi.w	80134b0 <route_Dijkstra+0x3ac>
 801333c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013340:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013344:	881a      	ldrh	r2, [r3, #0]
 8013346:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801334a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 801334e:	881b      	ldrh	r3, [r3, #0]
 8013350:	429a      	cmp	r2, r3
 8013352:	f200 80ad 	bhi.w	80134b0 <route_Dijkstra+0x3ac>
			// 直進
			switch (direction) {		//
 8013356:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801335a:	f103 031c 	add.w	r3, r3, #28
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	3b01      	subs	r3, #1
 8013362:	2b03      	cmp	r3, #3
 8013364:	f200 80a5 	bhi.w	80134b2 <route_Dijkstra+0x3ae>
 8013368:	a201      	add	r2, pc, #4	; (adr r2, 8013370 <route_Dijkstra+0x26c>)
 801336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801336e:	bf00      	nop
 8013370:	08013381 	.word	0x08013381
 8013374:	080133c9 	.word	0x080133c9
 8013378:	08013411 	.word	0x08013411
 801337c:	08013465 	.word	0x08013465
			case 1:
				pushStack_walk(&stack_x,x);
 8013380:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013384:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	b29a      	uxth	r2, r3
 801338c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013390:	f103 0314 	add.w	r3, r3, #20
 8013394:	4611      	mov	r1, r2
 8013396:	4618      	mov	r0, r3
 8013398:	f001 f8a6 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801339c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80133ac:	f103 0314 	add.w	r3, r3, #20
 80133b0:	4611      	mov	r1, r2
 80133b2:	4618      	mov	r0, r3
 80133b4:	f001 f898 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80133b8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80133bc:	3b0c      	subs	r3, #12
 80133be:	2100      	movs	r1, #0
 80133c0:	4618      	mov	r0, r3
 80133c2:	f001 f891 	bl	80144e8 <pushStack_walk>
				break;
 80133c6:	e074      	b.n	80134b2 <route_Dijkstra+0x3ae>
			case 2:
				pushStack_walk(&stack_x,x);
 80133c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	b29a      	uxth	r2, r3
 80133d4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80133d8:	f103 0314 	add.w	r3, r3, #20
 80133dc:	4611      	mov	r1, r2
 80133de:	4618      	mov	r0, r3
 80133e0:	f001 f882 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80133e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80133f4:	f103 0314 	add.w	r3, r3, #20
 80133f8:	4611      	mov	r1, r2
 80133fa:	4618      	mov	r0, r3
 80133fc:	f001 f874 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013400:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013404:	3b0c      	subs	r3, #12
 8013406:	2101      	movs	r1, #1
 8013408:	4618      	mov	r0, r3
 801340a:	f001 f86d 	bl	80144e8 <pushStack_walk>
				break;
 801340e:	e050      	b.n	80134b2 <route_Dijkstra+0x3ae>
			case 3:
				pushStack_walk(&stack_x,x);
 8013410:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013414:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	b29a      	uxth	r2, r3
 801341c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013420:	f103 0314 	add.w	r3, r3, #20
 8013424:	4611      	mov	r1, r2
 8013426:	4618      	mov	r0, r3
 8013428:	f001 f85e 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801342c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013430:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	b29b      	uxth	r3, r3
 8013438:	3b01      	subs	r3, #1
 801343a:	b29a      	uxth	r2, r3
 801343c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013440:	f103 0314 	add.w	r3, r3, #20
 8013444:	4611      	mov	r1, r2
 8013446:	4618      	mov	r0, r3
 8013448:	f001 f84e 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801344c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013450:	3b0c      	subs	r3, #12
 8013452:	2100      	movs	r1, #0
 8013454:	4618      	mov	r0, r3
 8013456:	f001 f847 	bl	80144e8 <pushStack_walk>
				break;
 801345a:	e02a      	b.n	80134b2 <route_Dijkstra+0x3ae>
 801345c:	200012ec 	.word	0x200012ec
 8013460:	2000186c 	.word	0x2000186c
			case 4:
				pushStack_walk(&stack_x,x-1);
 8013464:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013468:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	b29b      	uxth	r3, r3
 8013470:	3b01      	subs	r3, #1
 8013472:	b29a      	uxth	r2, r3
 8013474:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013478:	f103 0314 	add.w	r3, r3, #20
 801347c:	4611      	mov	r1, r2
 801347e:	4618      	mov	r0, r3
 8013480:	f001 f832 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013484:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013488:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	b29a      	uxth	r2, r3
 8013490:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013494:	f103 0314 	add.w	r3, r3, #20
 8013498:	4611      	mov	r1, r2
 801349a:	4618      	mov	r0, r3
 801349c:	f001 f824 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80134a0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80134a4:	3b0c      	subs	r3, #12
 80134a6:	2101      	movs	r1, #1
 80134a8:	4618      	mov	r0, r3
 80134aa:	f001 f81d 	bl	80144e8 <pushStack_walk>
				break;
 80134ae:	e000      	b.n	80134b2 <route_Dijkstra+0x3ae>
			}

		}
 80134b0:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 80134b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80134ba:	881a      	ldrh	r2, [r3, #0]
 80134bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134c0:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	f080 80cd 	bcs.w	8013666 <route_Dijkstra+0x562>
 80134cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80134d4:	881a      	ldrh	r2, [r3, #0]
 80134d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80134de:	881b      	ldrh	r3, [r3, #0]
 80134e0:	429a      	cmp	r2, r3
 80134e2:	f200 80c0 	bhi.w	8013666 <route_Dijkstra+0x562>
 80134e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80134ee:	881a      	ldrh	r2, [r3, #0]
 80134f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134f4:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80134f8:	881b      	ldrh	r3, [r3, #0]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	f200 80b3 	bhi.w	8013666 <route_Dijkstra+0x562>
			// 右旋回
			switch (direction) {		//
 8013500:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013504:	f103 031c 	add.w	r3, r3, #28
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	3b01      	subs	r3, #1
 801350c:	2b03      	cmp	r3, #3
 801350e:	f200 809f 	bhi.w	8013650 <route_Dijkstra+0x54c>
 8013512:	a201      	add	r2, pc, #4	; (adr r2, 8013518 <route_Dijkstra+0x414>)
 8013514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013518:	08013529 	.word	0x08013529
 801351c:	08013571 	.word	0x08013571
 8013520:	080135bd 	.word	0x080135bd
 8013524:	08013609 	.word	0x08013609
			case 1:
				pushStack_walk(&stack_x,x);
 8013528:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801352c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	b29a      	uxth	r2, r3
 8013534:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013538:	f103 0314 	add.w	r3, r3, #20
 801353c:	4611      	mov	r1, r2
 801353e:	4618      	mov	r0, r3
 8013540:	f000 ffd2 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013544:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013548:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	b29a      	uxth	r2, r3
 8013550:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013554:	f103 0314 	add.w	r3, r3, #20
 8013558:	4611      	mov	r1, r2
 801355a:	4618      	mov	r0, r3
 801355c:	f000 ffc4 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013560:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013564:	3b0c      	subs	r3, #12
 8013566:	2101      	movs	r1, #1
 8013568:	4618      	mov	r0, r3
 801356a:	f000 ffbd 	bl	80144e8 <pushStack_walk>
				break;
 801356e:	e06f      	b.n	8013650 <route_Dijkstra+0x54c>
			case 2:
				pushStack_walk(&stack_x,x);
 8013570:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013574:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	b29a      	uxth	r2, r3
 801357c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013580:	f103 0314 	add.w	r3, r3, #20
 8013584:	4611      	mov	r1, r2
 8013586:	4618      	mov	r0, r3
 8013588:	f000 ffae 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801358c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013590:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	b29b      	uxth	r3, r3
 8013598:	3b01      	subs	r3, #1
 801359a:	b29a      	uxth	r2, r3
 801359c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80135a0:	f103 0314 	add.w	r3, r3, #20
 80135a4:	4611      	mov	r1, r2
 80135a6:	4618      	mov	r0, r3
 80135a8:	f000 ff9e 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80135ac:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80135b0:	3b0c      	subs	r3, #12
 80135b2:	2100      	movs	r1, #0
 80135b4:	4618      	mov	r0, r3
 80135b6:	f000 ff97 	bl	80144e8 <pushStack_walk>
				break;
 80135ba:	e049      	b.n	8013650 <route_Dijkstra+0x54c>
			case 3:
				pushStack_walk(&stack_x,x-1);
 80135bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	3b01      	subs	r3, #1
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80135d0:	f103 0314 	add.w	r3, r3, #20
 80135d4:	4611      	mov	r1, r2
 80135d6:	4618      	mov	r0, r3
 80135d8:	f000 ff86 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80135dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	b29a      	uxth	r2, r3
 80135e8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80135ec:	f103 0314 	add.w	r3, r3, #20
 80135f0:	4611      	mov	r1, r2
 80135f2:	4618      	mov	r0, r3
 80135f4:	f000 ff78 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80135f8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80135fc:	3b0c      	subs	r3, #12
 80135fe:	2101      	movs	r1, #1
 8013600:	4618      	mov	r0, r3
 8013602:	f000 ff71 	bl	80144e8 <pushStack_walk>
				break;
 8013606:	e023      	b.n	8013650 <route_Dijkstra+0x54c>
			case 4:
				pushStack_walk(&stack_x,x);
 8013608:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801360c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	b29a      	uxth	r2, r3
 8013614:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013618:	f103 0314 	add.w	r3, r3, #20
 801361c:	4611      	mov	r1, r2
 801361e:	4618      	mov	r0, r3
 8013620:	f000 ff62 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013624:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013628:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	b29a      	uxth	r2, r3
 8013630:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013634:	f103 0314 	add.w	r3, r3, #20
 8013638:	4611      	mov	r1, r2
 801363a:	4618      	mov	r0, r3
 801363c:	f000 ff54 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013640:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013644:	3b0c      	subs	r3, #12
 8013646:	2100      	movs	r1, #0
 8013648:	4618      	mov	r0, r3
 801364a:	f000 ff4d 	bl	80144e8 <pushStack_walk>
				break;
 801364e:	bf00      	nop
			}
			direction++;
 8013650:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013654:	f103 031c 	add.w	r3, r3, #28
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	3301      	adds	r3, #1
 801365c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013660:	f102 021c 	add.w	r2, r2, #28
 8013664:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8013666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801366a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801366e:	881a      	ldrh	r2, [r3, #0]
 8013670:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013674:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013678:	881b      	ldrh	r3, [r3, #0]
 801367a:	429a      	cmp	r2, r3
 801367c:	f080 80cd 	bcs.w	801381a <route_Dijkstra+0x716>
 8013680:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013684:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013688:	881a      	ldrh	r2, [r3, #0]
 801368a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801368e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013692:	881b      	ldrh	r3, [r3, #0]
 8013694:	429a      	cmp	r2, r3
 8013696:	f080 80c0 	bcs.w	801381a <route_Dijkstra+0x716>
 801369a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801369e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80136a2:	881a      	ldrh	r2, [r3, #0]
 80136a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136a8:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80136ac:	881b      	ldrh	r3, [r3, #0]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	f200 80b3 	bhi.w	801381a <route_Dijkstra+0x716>
			// 左旋回
			switch (direction) {		//
 80136b4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136b8:	f103 031c 	add.w	r3, r3, #28
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	3b01      	subs	r3, #1
 80136c0:	2b03      	cmp	r3, #3
 80136c2:	f200 809f 	bhi.w	8013804 <route_Dijkstra+0x700>
 80136c6:	a201      	add	r2, pc, #4	; (adr r2, 80136cc <route_Dijkstra+0x5c8>)
 80136c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136cc:	080136dd 	.word	0x080136dd
 80136d0:	08013729 	.word	0x08013729
 80136d4:	08013771 	.word	0x08013771
 80136d8:	080137b9 	.word	0x080137b9
			case 1:
				pushStack_walk(&stack_x,x-1);
 80136dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	3b01      	subs	r3, #1
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80136f0:	f103 0314 	add.w	r3, r3, #20
 80136f4:	4611      	mov	r1, r2
 80136f6:	4618      	mov	r0, r3
 80136f8:	f000 fef6 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80136fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013700:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	b29a      	uxth	r2, r3
 8013708:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801370c:	f103 0314 	add.w	r3, r3, #20
 8013710:	4611      	mov	r1, r2
 8013712:	4618      	mov	r0, r3
 8013714:	f000 fee8 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013718:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801371c:	3b0c      	subs	r3, #12
 801371e:	2101      	movs	r1, #1
 8013720:	4618      	mov	r0, r3
 8013722:	f000 fee1 	bl	80144e8 <pushStack_walk>
				break;
 8013726:	e06d      	b.n	8013804 <route_Dijkstra+0x700>
			case 2:
				pushStack_walk(&stack_x,x);
 8013728:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801372c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	b29a      	uxth	r2, r3
 8013734:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013738:	f103 0314 	add.w	r3, r3, #20
 801373c:	4611      	mov	r1, r2
 801373e:	4618      	mov	r0, r3
 8013740:	f000 fed2 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013744:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013748:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	b29a      	uxth	r2, r3
 8013750:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013754:	f103 0314 	add.w	r3, r3, #20
 8013758:	4611      	mov	r1, r2
 801375a:	4618      	mov	r0, r3
 801375c:	f000 fec4 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013760:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013764:	3b0c      	subs	r3, #12
 8013766:	2100      	movs	r1, #0
 8013768:	4618      	mov	r0, r3
 801376a:	f000 febd 	bl	80144e8 <pushStack_walk>
				break;
 801376e:	e049      	b.n	8013804 <route_Dijkstra+0x700>
			case 3:
				pushStack_walk(&stack_x,x);
 8013770:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013774:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	b29a      	uxth	r2, r3
 801377c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013780:	f103 0314 	add.w	r3, r3, #20
 8013784:	4611      	mov	r1, r2
 8013786:	4618      	mov	r0, r3
 8013788:	f000 feae 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801378c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013790:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	b29a      	uxth	r2, r3
 8013798:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801379c:	f103 0314 	add.w	r3, r3, #20
 80137a0:	4611      	mov	r1, r2
 80137a2:	4618      	mov	r0, r3
 80137a4:	f000 fea0 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80137a8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80137ac:	3b0c      	subs	r3, #12
 80137ae:	2101      	movs	r1, #1
 80137b0:	4618      	mov	r0, r3
 80137b2:	f000 fe99 	bl	80144e8 <pushStack_walk>
				break;
 80137b6:	e025      	b.n	8013804 <route_Dijkstra+0x700>
			case 4:
				pushStack_walk(&stack_x,x);
 80137b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80137bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80137c8:	f103 0314 	add.w	r3, r3, #20
 80137cc:	4611      	mov	r1, r2
 80137ce:	4618      	mov	r0, r3
 80137d0:	f000 fe8a 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80137d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80137d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	b29b      	uxth	r3, r3
 80137e0:	3b01      	subs	r3, #1
 80137e2:	b29a      	uxth	r2, r3
 80137e4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80137e8:	f103 0314 	add.w	r3, r3, #20
 80137ec:	4611      	mov	r1, r2
 80137ee:	4618      	mov	r0, r3
 80137f0:	f000 fe7a 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80137f4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80137f8:	3b0c      	subs	r3, #12
 80137fa:	2100      	movs	r1, #0
 80137fc:	4618      	mov	r0, r3
 80137fe:	f000 fe73 	bl	80144e8 <pushStack_walk>
				break;
 8013802:	bf00      	nop
			}
			direction--;
 8013804:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013808:	f103 031c 	add.w	r3, r3, #28
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	3b01      	subs	r3, #1
 8013810:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013814:	f102 021c 	add.w	r2, r2, #28
 8013818:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 801381a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801381e:	f103 031c 	add.w	r3, r3, #28
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	2b05      	cmp	r3, #5
 8013826:	d105      	bne.n	8013834 <route_Dijkstra+0x730>
			direction = 1;
 8013828:	2301      	movs	r3, #1
 801382a:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 801382e:	f102 021c 	add.w	r2, r2, #28
 8013832:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 8013834:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013838:	f103 031c 	add.w	r3, r3, #28
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	2b06      	cmp	r3, #6
 8013840:	d105      	bne.n	801384e <route_Dijkstra+0x74a>
			direction = 2;
 8013842:	2302      	movs	r3, #2
 8013844:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013848:	f102 021c 	add.w	r2, r2, #28
 801384c:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 801384e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013852:	f103 031c 	add.w	r3, r3, #28
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d105      	bne.n	8013868 <route_Dijkstra+0x764>
			direction = 4;
 801385c:	2304      	movs	r3, #4
 801385e:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013862:	f102 021c 	add.w	r2, r2, #28
 8013866:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013868:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801386c:	f103 031c 	add.w	r3, r3, #28
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013876:	f47f ac8f 	bne.w	8013198 <route_Dijkstra+0x94>
			direction = 3;
 801387a:	2303      	movs	r3, #3
 801387c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013880:	f102 021c 	add.w	r2, r2, #28
 8013884:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 8013886:	e487      	b.n	8013198 <route_Dijkstra+0x94>
			break;
 8013888:	bf00      	nop

	}
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 801388a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801388e:	f103 0314 	add.w	r3, r3, #20
 8013892:	4618      	mov	r0, r3
 8013894:	f000 fe52 	bl	801453c <popStack_walk>
 8013898:	4603      	mov	r3, r0
 801389a:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 801389e:	f102 021a 	add.w	r2, r2, #26
 80138a2:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 80138a4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80138a8:	f103 0314 	add.w	r3, r3, #20
 80138ac:	4618      	mov	r0, r3
 80138ae:	f000 fe45 	bl	801453c <popStack_walk>
 80138b2:	4603      	mov	r3, r0
 80138b4:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80138b8:	f102 0218 	add.w	r2, r2, #24
 80138bc:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 80138be:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80138c2:	3b0c      	subs	r3, #12
 80138c4:	4618      	mov	r0, r3
 80138c6:	f000 fe39 	bl	801453c <popStack_walk>
 80138ca:	4603      	mov	r3, r0
 80138cc:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80138d0:	f102 0216 	add.w	r2, r2, #22
 80138d4:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80138d6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80138da:	f103 031a 	add.w	r3, r3, #26
 80138de:	881b      	ldrh	r3, [r3, #0]
 80138e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138e4:	4293      	cmp	r3, r2
 80138e6:	f000 80d5 	beq.w	8013a94 <route_Dijkstra+0x990>
 80138ea:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80138ee:	f103 0318 	add.w	r3, r3, #24
 80138f2:	881b      	ldrh	r3, [r3, #0]
 80138f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138f8:	4293      	cmp	r3, r2
 80138fa:	f000 80cb 	beq.w	8013a94 <route_Dijkstra+0x990>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 80138fe:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013902:	f103 0316 	add.w	r3, r3, #22
 8013906:	881b      	ldrh	r3, [r3, #0]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d15c      	bne.n	80139c6 <route_Dijkstra+0x8c2>
 801390c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013910:	f103 0318 	add.w	r3, r3, #24
 8013914:	881b      	ldrh	r3, [r3, #0]
 8013916:	4a62      	ldr	r2, [pc, #392]	; (8013aa0 <route_Dijkstra+0x99c>)
 8013918:	332c      	adds	r3, #44	; 0x2c
 801391a:	005b      	lsls	r3, r3, #1
 801391c:	4413      	add	r3, r2
 801391e:	885b      	ldrh	r3, [r3, #2]
 8013920:	461a      	mov	r2, r3
 8013922:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013926:	f103 031a 	add.w	r3, r3, #26
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	fa42 f303 	asr.w	r3, r2, r3
 8013930:	f003 0301 	and.w	r3, r3, #1
 8013934:	2b00      	cmp	r3, #0
 8013936:	d146      	bne.n	80139c6 <route_Dijkstra+0x8c2>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 8013938:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801393c:	f103 031a 	add.w	r3, r3, #26
 8013940:	881b      	ldrh	r3, [r3, #0]
 8013942:	011a      	lsls	r2, r3, #4
 8013944:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013948:	f103 0318 	add.w	r3, r3, #24
 801394c:	881b      	ldrh	r3, [r3, #0]
 801394e:	4413      	add	r3, r2
 8013950:	4a54      	ldr	r2, [pc, #336]	; (8013aa4 <route_Dijkstra+0x9a0>)
 8013952:	2100      	movs	r1, #0
 8013954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[(Xcoordinate * 16) + Ycoordinate+1] = 0;
 8013958:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801395c:	f103 031a 	add.w	r3, r3, #26
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	011a      	lsls	r2, r3, #4
 8013964:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013968:	f103 0318 	add.w	r3, r3, #24
 801396c:	881b      	ldrh	r3, [r3, #0]
 801396e:	4413      	add	r3, r2
 8013970:	3301      	adds	r3, #1
 8013972:	4a4c      	ldr	r2, [pc, #304]	; (8013aa4 <route_Dijkstra+0x9a0>)
 8013974:	2100      	movs	r1, #0
 8013976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 801397a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801397e:	f103 031a 	add.w	r3, r3, #26
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	4619      	mov	r1, r3
 8013986:	4848      	ldr	r0, [pc, #288]	; (8013aa8 <route_Dijkstra+0x9a4>)
 8013988:	f000 fdae 	bl	80144e8 <pushStack_walk>
 801398c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013990:	f103 0318 	add.w	r3, r3, #24
 8013994:	881b      	ldrh	r3, [r3, #0]
 8013996:	4619      	mov	r1, r3
 8013998:	4844      	ldr	r0, [pc, #272]	; (8013aac <route_Dijkstra+0x9a8>)
 801399a:	f000 fda5 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 801399e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139a2:	f103 031a 	add.w	r3, r3, #26
 80139a6:	881b      	ldrh	r3, [r3, #0]
 80139a8:	4619      	mov	r1, r3
 80139aa:	483f      	ldr	r0, [pc, #252]	; (8013aa8 <route_Dijkstra+0x9a4>)
 80139ac:	f000 fd9c 	bl	80144e8 <pushStack_walk>
 80139b0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139b4:	f103 0318 	add.w	r3, r3, #24
 80139b8:	881b      	ldrh	r3, [r3, #0]
 80139ba:	3301      	adds	r3, #1
 80139bc:	b29b      	uxth	r3, r3
 80139be:	4619      	mov	r1, r3
 80139c0:	483a      	ldr	r0, [pc, #232]	; (8013aac <route_Dijkstra+0x9a8>)
 80139c2:	f000 fd91 	bl	80144e8 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 80139c6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139ca:	f103 0316 	add.w	r3, r3, #22
 80139ce:	881b      	ldrh	r3, [r3, #0]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	f47f af5a 	bne.w	801388a <route_Dijkstra+0x786>
 80139d6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139da:	f103 031a 	add.w	r3, r3, #26
 80139de:	881b      	ldrh	r3, [r3, #0]
 80139e0:	4a2f      	ldr	r2, [pc, #188]	; (8013aa0 <route_Dijkstra+0x99c>)
 80139e2:	331c      	adds	r3, #28
 80139e4:	005b      	lsls	r3, r3, #1
 80139e6:	4413      	add	r3, r2
 80139e8:	889b      	ldrh	r3, [r3, #4]
 80139ea:	461a      	mov	r2, r3
 80139ec:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80139f0:	f103 0318 	add.w	r3, r3, #24
 80139f4:	881b      	ldrh	r3, [r3, #0]
 80139f6:	fa42 f303 	asr.w	r3, r2, r3
 80139fa:	f003 0301 	and.w	r3, r3, #1
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	f47f af43 	bne.w	801388a <route_Dijkstra+0x786>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 8013a04:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a08:	f103 031a 	add.w	r3, r3, #26
 8013a0c:	881b      	ldrh	r3, [r3, #0]
 8013a0e:	011a      	lsls	r2, r3, #4
 8013a10:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a14:	f103 0318 	add.w	r3, r3, #24
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	4413      	add	r3, r2
 8013a1c:	4a21      	ldr	r2, [pc, #132]	; (8013aa4 <route_Dijkstra+0x9a0>)
 8013a1e:	2100      	movs	r1, #0
 8013a20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[((Xcoordinate+1) * 16) + Ycoordinate] = 0;
 8013a24:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a28:	f103 031a 	add.w	r3, r3, #26
 8013a2c:	881b      	ldrh	r3, [r3, #0]
 8013a2e:	3301      	adds	r3, #1
 8013a30:	011a      	lsls	r2, r3, #4
 8013a32:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a36:	f103 0318 	add.w	r3, r3, #24
 8013a3a:	881b      	ldrh	r3, [r3, #0]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	4a19      	ldr	r2, [pc, #100]	; (8013aa4 <route_Dijkstra+0x9a0>)
 8013a40:	2100      	movs	r1, #0
 8013a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013a46:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a4a:	f103 031a 	add.w	r3, r3, #26
 8013a4e:	881b      	ldrh	r3, [r3, #0]
 8013a50:	4619      	mov	r1, r3
 8013a52:	4815      	ldr	r0, [pc, #84]	; (8013aa8 <route_Dijkstra+0x9a4>)
 8013a54:	f000 fd48 	bl	80144e8 <pushStack_walk>
 8013a58:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a5c:	f103 0318 	add.w	r3, r3, #24
 8013a60:	881b      	ldrh	r3, [r3, #0]
 8013a62:	4619      	mov	r1, r3
 8013a64:	4811      	ldr	r0, [pc, #68]	; (8013aac <route_Dijkstra+0x9a8>)
 8013a66:	f000 fd3f 	bl	80144e8 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013a6a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a6e:	f103 031a 	add.w	r3, r3, #26
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	3301      	adds	r3, #1
 8013a76:	b29b      	uxth	r3, r3
 8013a78:	4619      	mov	r1, r3
 8013a7a:	480b      	ldr	r0, [pc, #44]	; (8013aa8 <route_Dijkstra+0x9a4>)
 8013a7c:	f000 fd34 	bl	80144e8 <pushStack_walk>
 8013a80:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a84:	f103 0318 	add.w	r3, r3, #24
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	4807      	ldr	r0, [pc, #28]	; (8013aac <route_Dijkstra+0x9a8>)
 8013a8e:	f000 fd2b 	bl	80144e8 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013a92:	e6fa      	b.n	801388a <route_Dijkstra+0x786>
			}
	}


}
 8013a94:	bf00      	nop
 8013a96:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 8013a9a:	3724      	adds	r7, #36	; 0x24
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aa0:	20000c3c 	.word	0x20000c3c
 8013aa4:	20000d2c 	.word	0x20000d2c
 8013aa8:	200012ec 	.word	0x200012ec
 8013aac:	2000186c 	.word	0x2000186c

08013ab0 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013ab6:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013ab8:	2300      	movs	r3, #0
 8013aba:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013abe:	e00a      	b.n	8013ad6 <create_StepCountMap_unknown+0x26>
 8013ac0:	4a39      	ldr	r2, [pc, #228]	; (8013ba8 <create_StepCountMap_unknown+0xf8>)
 8013ac2:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013ac6:	21ff      	movs	r1, #255	; 0xff
 8013ac8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013acc:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013ad6:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013ada:	2bff      	cmp	r3, #255	; 0xff
 8013adc:	ddf0      	ble.n	8013ac0 <create_StepCountMap_unknown+0x10>

	initStack_walk(&stack_x);
 8013ade:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f000 fcf0 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_y);
 8013ae8:	463b      	mov	r3, r7
 8013aea:	4618      	mov	r0, r3
 8013aec:	f000 fcec 	bl	80144c8 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013af0:	482e      	ldr	r0, [pc, #184]	; (8013bac <create_StepCountMap_unknown+0xfc>)
 8013af2:	f000 fd23 	bl	801453c <popStack_walk>
 8013af6:	4603      	mov	r3, r0
 8013af8:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
			goalY = popStack_walk(&g_Goal_y);
 8013afc:	482c      	ldr	r0, [pc, #176]	; (8013bb0 <create_StepCountMap_unknown+0x100>)
 8013afe:	f000 fd1d 	bl	801453c <popStack_walk>
 8013b02:	4603      	mov	r3, r0
 8013b04:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 8013b08:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d01f      	beq.n	8013b54 <create_StepCountMap_unknown+0xa4>
 8013b14:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	d019      	beq.n	8013b54 <create_StepCountMap_unknown+0xa4>
				//printf("stack_end\n");
				break;
			}
			walk_count[(goalX * 16) + goalY] = 0;
 8013b20:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013b24:	011a      	lsls	r2, r3, #4
 8013b26:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013b2a:	4413      	add	r3, r2
 8013b2c:	4a1e      	ldr	r2, [pc, #120]	; (8013ba8 <create_StepCountMap_unknown+0xf8>)
 8013b2e:	2100      	movs	r1, #0
 8013b30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013b34:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8013b38:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b3c:	4611      	mov	r1, r2
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f000 fcd2 	bl	80144e8 <pushStack_walk>
 8013b44:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8013b48:	463b      	mov	r3, r7
 8013b4a:	4611      	mov	r1, r2
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f000 fccb 	bl	80144e8 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013b52:	e7cd      	b.n	8013af0 <create_StepCountMap_unknown+0x40>
	}
	if(stack_x.tail == stack_x.head){
 8013b54:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013b58:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013b5c:	685a      	ldr	r2, [r3, #4]
 8013b5e:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013b62:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d10d      	bne.n	8013b88 <create_StepCountMap_unknown+0xd8>
		walk_count[0] = 0;
 8013b6c:	4b0e      	ldr	r3, [pc, #56]	; (8013ba8 <create_StepCountMap_unknown+0xf8>)
 8013b6e:	2200      	movs	r2, #0
 8013b70:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013b72:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b76:	2100      	movs	r1, #0
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f000 fcb5 	bl	80144e8 <pushStack_walk>
 8013b7e:	463b      	mov	r3, r7
 8013b80:	2100      	movs	r1, #0
 8013b82:	4618      	mov	r0, r3
 8013b84:	f000 fcb0 	bl	80144e8 <pushStack_walk>
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013b8e:	2301      	movs	r3, #1
 8013b90:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013b94:	2301      	movs	r3, #1
 8013b96:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013ba6:	e141      	b.n	8013e2c <create_StepCountMap_unknown+0x37c>
 8013ba8:	20000d2c 	.word	0x20000d2c
 8013bac:	200012ec 	.word	0x200012ec
 8013bb0:	2000186c 	.word	0x2000186c

		Xcoordinate = popStack_walk(&stack_x);
 8013bb4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f000 fcbf 	bl	801453c <popStack_walk>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		Ycoordinate = popStack_walk(&stack_y);
 8013bc4:	463b      	mov	r3, r7
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f000 fcb8 	bl	801453c <popStack_walk>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	f8a7 3b02 	strh.w	r3, [r7, #2818]	; 0xb02
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013bd2:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	f000 812b 	beq.w	8013e36 <create_StepCountMap_unknown+0x386>
 8013be0:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013be8:	4293      	cmp	r3, r2
 8013bea:	f000 8124 	beq.w	8013e36 <create_StepCountMap_unknown+0x386>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8013bee:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013bf2:	011b      	lsls	r3, r3, #4
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013bfa:	4413      	add	r3, r2
 8013bfc:	f8a7 3b00 	strh.w	r3, [r7, #2816]	; 0xb00
		if (Ycoordinate <= 14) {
 8013c00:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013c04:	2b0e      	cmp	r3, #14
 8013c06:	d811      	bhi.n	8013c2c <create_StepCountMap_unknown+0x17c>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013c08:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013c0c:	4a8c      	ldr	r2, [pc, #560]	; (8013e40 <create_StepCountMap_unknown+0x390>)
 8013c0e:	330c      	adds	r3, #12
 8013c10:	005b      	lsls	r3, r3, #1
 8013c12:	4413      	add	r3, r2
 8013c14:	88db      	ldrh	r3, [r3, #6]
 8013c16:	b21a      	sxth	r2, r3
 8013c18:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013c1c:	2101      	movs	r1, #1
 8013c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8013c22:	b21b      	sxth	r3, r3
 8013c24:	4013      	ands	r3, r2
 8013c26:	b21b      	sxth	r3, r3
 8013c28:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8013c2c:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d012      	beq.n	8013c5a <create_StepCountMap_unknown+0x1aa>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013c34:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013c38:	3b01      	subs	r3, #1
 8013c3a:	4a81      	ldr	r2, [pc, #516]	; (8013e40 <create_StepCountMap_unknown+0x390>)
 8013c3c:	330c      	adds	r3, #12
 8013c3e:	005b      	lsls	r3, r3, #1
 8013c40:	4413      	add	r3, r2
 8013c42:	88db      	ldrh	r3, [r3, #6]
 8013c44:	b21a      	sxth	r2, r3
 8013c46:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013c4a:	2101      	movs	r1, #1
 8013c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8013c50:	b21b      	sxth	r3, r3
 8013c52:	4013      	ands	r3, r2
 8013c54:	b21b      	sxth	r3, r3
 8013c56:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8013c5a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013c5e:	2b0e      	cmp	r3, #14
 8013c60:	d80f      	bhi.n	8013c82 <create_StepCountMap_unknown+0x1d2>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013c62:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013c66:	4a76      	ldr	r2, [pc, #472]	; (8013e40 <create_StepCountMap_unknown+0x390>)
 8013c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c6c:	b21a      	sxth	r2, r3
 8013c6e:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013c72:	2101      	movs	r1, #1
 8013c74:	fa01 f303 	lsl.w	r3, r1, r3
 8013c78:	b21b      	sxth	r3, r3
 8013c7a:	4013      	ands	r3, r2
 8013c7c:	b21b      	sxth	r3, r3
 8013c7e:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8013c82:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d010      	beq.n	8013cac <create_StepCountMap_unknown+0x1fc>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013c8a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013c8e:	3b01      	subs	r3, #1
 8013c90:	4a6b      	ldr	r2, [pc, #428]	; (8013e40 <create_StepCountMap_unknown+0x390>)
 8013c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c96:	b21a      	sxth	r2, r3
 8013c98:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013c9c:	2101      	movs	r1, #1
 8013c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8013ca2:	b21b      	sxth	r3, r3
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	b21b      	sxth	r3, r3
 8013ca8:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013cac:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013cb0:	3301      	adds	r3, #1
 8013cb2:	4a64      	ldr	r2, [pc, #400]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013cb8:	2bff      	cmp	r3, #255	; 0xff
 8013cba:	d125      	bne.n	8013d08 <create_StepCountMap_unknown+0x258>
 8013cbc:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013cc0:	2b0f      	cmp	r3, #15
 8013cc2:	d021      	beq.n	8013d08 <create_StepCountMap_unknown+0x258>
 8013cc4:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d11d      	bne.n	8013d08 <create_StepCountMap_unknown+0x258>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8013ccc:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013cd0:	4a5c      	ldr	r2, [pc, #368]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013cd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013cd6:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013cda:	3301      	adds	r3, #1
 8013cdc:	3201      	adds	r2, #1
 8013cde:	b291      	uxth	r1, r2
 8013ce0:	4a58      	ldr	r2, [pc, #352]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013ce2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013ce6:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013cea:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013cee:	4611      	mov	r1, r2
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f000 fbf9 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013cf6:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	b29a      	uxth	r2, r3
 8013cfe:	463b      	mov	r3, r7
 8013d00:	4611      	mov	r1, r2
 8013d02:	4618      	mov	r0, r3
 8013d04:	f000 fbf0 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013d08:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013d0c:	3b01      	subs	r3, #1
 8013d0e:	4a4d      	ldr	r2, [pc, #308]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d14:	2bff      	cmp	r3, #255	; 0xff
 8013d16:	d125      	bne.n	8013d64 <create_StepCountMap_unknown+0x2b4>
 8013d18:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d021      	beq.n	8013d64 <create_StepCountMap_unknown+0x2b4>
 8013d20:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d11d      	bne.n	8013d64 <create_StepCountMap_unknown+0x2b4>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8013d28:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013d2c:	4a45      	ldr	r2, [pc, #276]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013d2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013d32:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013d36:	3b01      	subs	r3, #1
 8013d38:	3201      	adds	r2, #1
 8013d3a:	b291      	uxth	r1, r2
 8013d3c:	4a41      	ldr	r2, [pc, #260]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013d3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013d42:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013d46:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d4a:	4611      	mov	r1, r2
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f000 fbcb 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013d52:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013d56:	3b01      	subs	r3, #1
 8013d58:	b29a      	uxth	r2, r3
 8013d5a:	463b      	mov	r3, r7
 8013d5c:	4611      	mov	r1, r2
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f000 fbc2 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013d64:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013d68:	3310      	adds	r3, #16
 8013d6a:	4a36      	ldr	r2, [pc, #216]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d70:	2bff      	cmp	r3, #255	; 0xff
 8013d72:	d125      	bne.n	8013dc0 <create_StepCountMap_unknown+0x310>
 8013d74:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013d78:	2b0f      	cmp	r3, #15
 8013d7a:	d021      	beq.n	8013dc0 <create_StepCountMap_unknown+0x310>
 8013d7c:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d11d      	bne.n	8013dc0 <create_StepCountMap_unknown+0x310>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 8013d84:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013d88:	4a2e      	ldr	r2, [pc, #184]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013d8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013d8e:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013d92:	3310      	adds	r3, #16
 8013d94:	3201      	adds	r2, #1
 8013d96:	b291      	uxth	r1, r2
 8013d98:	4a2a      	ldr	r2, [pc, #168]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013d9e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013da2:	3301      	adds	r3, #1
 8013da4:	b29a      	uxth	r2, r3
 8013da6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013daa:	4611      	mov	r1, r2
 8013dac:	4618      	mov	r0, r3
 8013dae:	f000 fb9b 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013db2:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013db6:	463b      	mov	r3, r7
 8013db8:	4611      	mov	r1, r2
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f000 fb94 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013dc0:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013dc4:	3b10      	subs	r3, #16
 8013dc6:	4a1f      	ldr	r2, [pc, #124]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013dcc:	2bff      	cmp	r3, #255	; 0xff
 8013dce:	d125      	bne.n	8013e1c <create_StepCountMap_unknown+0x36c>
 8013dd0:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d021      	beq.n	8013e1c <create_StepCountMap_unknown+0x36c>
 8013dd8:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d11d      	bne.n	8013e1c <create_StepCountMap_unknown+0x36c>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8013de0:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013de4:	4a17      	ldr	r2, [pc, #92]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013de6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013dea:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013dee:	3b10      	subs	r3, #16
 8013df0:	3201      	adds	r2, #1
 8013df2:	b291      	uxth	r1, r2
 8013df4:	4a13      	ldr	r2, [pc, #76]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013dfa:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013e06:	4611      	mov	r1, r2
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f000 fb6d 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013e0e:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013e12:	463b      	mov	r3, r7
 8013e14:	4611      	mov	r1, r2
 8013e16:	4618      	mov	r0, r3
 8013e18:	f000 fb66 	bl	80144e8 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8013e1c:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013e20:	4a08      	ldr	r2, [pc, #32]	; (8013e44 <create_StepCountMap_unknown+0x394>)
 8013e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e26:	3301      	adds	r3, #1
 8013e28:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8013e2c:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8013e30:	2bfe      	cmp	r3, #254	; 0xfe
 8013e32:	f67f aebf 	bls.w	8013bb4 <create_StepCountMap_unknown+0x104>

		}

}
 8013e36:	bf00      	nop
 8013e38:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	20000c3c 	.word	0x20000c3c
 8013e44:	20000d2c 	.word	0x20000d2c

08013e48 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013e4e:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013e50:	2300      	movs	r3, #0
 8013e52:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013e56:	e00a      	b.n	8013e6e <create_StepCountMap_queue+0x26>
 8013e58:	4a31      	ldr	r2, [pc, #196]	; (8013f20 <create_StepCountMap_queue+0xd8>)
 8013e5a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013e5e:	21ff      	movs	r1, #255	; 0xff
 8013e60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013e64:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013e68:	3301      	adds	r3, #1
 8013e6a:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013e6e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013e72:	2bff      	cmp	r3, #255	; 0xff
 8013e74:	ddf0      	ble.n	8013e58 <create_StepCountMap_queue+0x10>
	initStack_walk(&stack_x);
 8013e76:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f000 fb24 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_y);
 8013e80:	1d3b      	adds	r3, r7, #4
 8013e82:	4618      	mov	r0, r3
 8013e84:	f000 fb20 	bl	80144c8 <initStack_walk>


	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8013e88:	4b25      	ldr	r3, [pc, #148]	; (8013f20 <create_StepCountMap_queue+0xd8>)
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 8013e90:	4b23      	ldr	r3, [pc, #140]	; (8013f20 <create_StepCountMap_queue+0xd8>)
 8013e92:	2200      	movs	r2, #0
 8013e94:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 8013e98:	4b21      	ldr	r3, [pc, #132]	; (8013f20 <create_StepCountMap_queue+0xd8>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 8013ea0:	4b1f      	ldr	r3, [pc, #124]	; (8013f20 <create_StepCountMap_queue+0xd8>)
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8013ea8:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013eac:	210a      	movs	r1, #10
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f000 fb1a 	bl	80144e8 <pushStack_walk>
 8013eb4:	1d3b      	adds	r3, r7, #4
 8013eb6:	210b      	movs	r1, #11
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f000 fb15 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8013ebe:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013ec2:	210b      	movs	r1, #11
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f000 fb0f 	bl	80144e8 <pushStack_walk>
 8013eca:	1d3b      	adds	r3, r7, #4
 8013ecc:	210b      	movs	r1, #11
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f000 fb0a 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013ed4:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013ed8:	210a      	movs	r1, #10
 8013eda:	4618      	mov	r0, r3
 8013edc:	f000 fb04 	bl	80144e8 <pushStack_walk>
 8013ee0:	1d3b      	adds	r3, r7, #4
 8013ee2:	210c      	movs	r1, #12
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f000 faff 	bl	80144e8 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013eea:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013eee:	210b      	movs	r1, #11
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f000 faf9 	bl	80144e8 <pushStack_walk>
 8013ef6:	1d3b      	adds	r3, r7, #4
 8013ef8:	210c      	movs	r1, #12
 8013efa:	4618      	mov	r0, r3
 8013efc:	f000 faf4 	bl	80144e8 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013f00:	2301      	movs	r3, #1
 8013f02:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013f06:	2301      	movs	r3, #1
 8013f08:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013f12:	2301      	movs	r3, #1
 8013f14:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013f18:	2301      	movs	r3, #1
 8013f1a:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013f1e:	e13d      	b.n	801419c <create_StepCountMap_queue+0x354>
 8013f20:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013f24:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f000 fb07 	bl	801453c <popStack_walk>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 8013f34:	1d3b      	adds	r3, r7, #4
 8013f36:	4618      	mov	r0, r3
 8013f38:	f000 fb00 	bl	801453c <popStack_walk>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013f42:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	f000 812b 	beq.w	80141a6 <create_StepCountMap_queue+0x35e>
 8013f50:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f58:	4293      	cmp	r3, r2
 8013f5a:	f000 8124 	beq.w	80141a6 <create_StepCountMap_queue+0x35e>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8013f5e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013f62:	011b      	lsls	r3, r3, #4
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013f6a:	4413      	add	r3, r2
 8013f6c:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8013f70:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013f74:	2b0e      	cmp	r3, #14
 8013f76:	d811      	bhi.n	8013f9c <create_StepCountMap_queue+0x154>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013f78:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013f7c:	4a8c      	ldr	r2, [pc, #560]	; (80141b0 <create_StepCountMap_queue+0x368>)
 8013f7e:	330c      	adds	r3, #12
 8013f80:	005b      	lsls	r3, r3, #1
 8013f82:	4413      	add	r3, r2
 8013f84:	88db      	ldrh	r3, [r3, #6]
 8013f86:	b21a      	sxth	r2, r3
 8013f88:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013f8c:	2101      	movs	r1, #1
 8013f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8013f92:	b21b      	sxth	r3, r3
 8013f94:	4013      	ands	r3, r2
 8013f96:	b21b      	sxth	r3, r3
 8013f98:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8013f9c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d012      	beq.n	8013fca <create_StepCountMap_queue+0x182>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013fa4:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013fa8:	3b01      	subs	r3, #1
 8013faa:	4a81      	ldr	r2, [pc, #516]	; (80141b0 <create_StepCountMap_queue+0x368>)
 8013fac:	330c      	adds	r3, #12
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	88db      	ldrh	r3, [r3, #6]
 8013fb4:	b21a      	sxth	r2, r3
 8013fb6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013fba:	2101      	movs	r1, #1
 8013fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8013fc0:	b21b      	sxth	r3, r3
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	b21b      	sxth	r3, r3
 8013fc6:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8013fca:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013fce:	2b0e      	cmp	r3, #14
 8013fd0:	d80f      	bhi.n	8013ff2 <create_StepCountMap_queue+0x1aa>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013fd2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013fd6:	4a76      	ldr	r2, [pc, #472]	; (80141b0 <create_StepCountMap_queue+0x368>)
 8013fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013fdc:	b21a      	sxth	r2, r3
 8013fde:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013fe2:	2101      	movs	r1, #1
 8013fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8013fe8:	b21b      	sxth	r3, r3
 8013fea:	4013      	ands	r3, r2
 8013fec:	b21b      	sxth	r3, r3
 8013fee:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8013ff2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d010      	beq.n	801401c <create_StepCountMap_queue+0x1d4>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013ffa:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013ffe:	3b01      	subs	r3, #1
 8014000:	4a6b      	ldr	r2, [pc, #428]	; (80141b0 <create_StepCountMap_queue+0x368>)
 8014002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014006:	b21a      	sxth	r2, r3
 8014008:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801400c:	2101      	movs	r1, #1
 801400e:	fa01 f303 	lsl.w	r3, r1, r3
 8014012:	b21b      	sxth	r3, r3
 8014014:	4013      	ands	r3, r2
 8014016:	b21b      	sxth	r3, r3
 8014018:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 801401c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014020:	3301      	adds	r3, #1
 8014022:	4a64      	ldr	r2, [pc, #400]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 8014024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014028:	2bff      	cmp	r3, #255	; 0xff
 801402a:	d125      	bne.n	8014078 <create_StepCountMap_queue+0x230>
 801402c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014030:	2b0f      	cmp	r3, #15
 8014032:	d021      	beq.n	8014078 <create_StepCountMap_queue+0x230>
 8014034:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8014038:	2b00      	cmp	r3, #0
 801403a:	d11d      	bne.n	8014078 <create_StepCountMap_queue+0x230>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 801403c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014040:	4a5c      	ldr	r2, [pc, #368]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 8014042:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014046:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801404a:	3301      	adds	r3, #1
 801404c:	3201      	adds	r2, #1
 801404e:	b291      	uxth	r1, r2
 8014050:	4a58      	ldr	r2, [pc, #352]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 8014052:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014056:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 801405a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801405e:	4611      	mov	r1, r2
 8014060:	4618      	mov	r0, r3
 8014062:	f000 fa41 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014066:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801406a:	3301      	adds	r3, #1
 801406c:	b29a      	uxth	r2, r3
 801406e:	1d3b      	adds	r3, r7, #4
 8014070:	4611      	mov	r1, r2
 8014072:	4618      	mov	r0, r3
 8014074:	f000 fa38 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014078:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801407c:	3b01      	subs	r3, #1
 801407e:	4a4d      	ldr	r2, [pc, #308]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 8014080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014084:	2bff      	cmp	r3, #255	; 0xff
 8014086:	d125      	bne.n	80140d4 <create_StepCountMap_queue+0x28c>
 8014088:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801408c:	2b00      	cmp	r3, #0
 801408e:	d021      	beq.n	80140d4 <create_StepCountMap_queue+0x28c>
 8014090:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8014094:	2b00      	cmp	r3, #0
 8014096:	d11d      	bne.n	80140d4 <create_StepCountMap_queue+0x28c>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8014098:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801409c:	4a45      	ldr	r2, [pc, #276]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 801409e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80140a2:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80140a6:	3b01      	subs	r3, #1
 80140a8:	3201      	adds	r2, #1
 80140aa:	b291      	uxth	r1, r2
 80140ac:	4a41      	ldr	r2, [pc, #260]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 80140ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80140b2:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 80140b6:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80140ba:	4611      	mov	r1, r2
 80140bc:	4618      	mov	r0, r3
 80140be:	f000 fa13 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80140c2:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80140c6:	3b01      	subs	r3, #1
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	1d3b      	adds	r3, r7, #4
 80140cc:	4611      	mov	r1, r2
 80140ce:	4618      	mov	r0, r3
 80140d0:	f000 fa0a 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80140d4:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80140d8:	3310      	adds	r3, #16
 80140da:	4a36      	ldr	r2, [pc, #216]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 80140dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140e0:	2bff      	cmp	r3, #255	; 0xff
 80140e2:	d125      	bne.n	8014130 <create_StepCountMap_queue+0x2e8>
 80140e4:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140e8:	2b0f      	cmp	r3, #15
 80140ea:	d021      	beq.n	8014130 <create_StepCountMap_queue+0x2e8>
 80140ec:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d11d      	bne.n	8014130 <create_StepCountMap_queue+0x2e8>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 80140f4:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80140f8:	4a2e      	ldr	r2, [pc, #184]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 80140fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80140fe:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014102:	3310      	adds	r3, #16
 8014104:	3201      	adds	r2, #1
 8014106:	b291      	uxth	r1, r2
 8014108:	4a2a      	ldr	r2, [pc, #168]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 801410a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801410e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014112:	3301      	adds	r3, #1
 8014114:	b29a      	uxth	r2, r3
 8014116:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801411a:	4611      	mov	r1, r2
 801411c:	4618      	mov	r0, r3
 801411e:	f000 f9e3 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014122:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8014126:	1d3b      	adds	r3, r7, #4
 8014128:	4611      	mov	r1, r2
 801412a:	4618      	mov	r0, r3
 801412c:	f000 f9dc 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014130:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014134:	3b10      	subs	r3, #16
 8014136:	4a1f      	ldr	r2, [pc, #124]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 8014138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801413c:	2bff      	cmp	r3, #255	; 0xff
 801413e:	d125      	bne.n	801418c <create_StepCountMap_queue+0x344>
 8014140:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014144:	2b00      	cmp	r3, #0
 8014146:	d021      	beq.n	801418c <create_StepCountMap_queue+0x344>
 8014148:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 801414c:	2b00      	cmp	r3, #0
 801414e:	d11d      	bne.n	801418c <create_StepCountMap_queue+0x344>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8014150:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014154:	4a17      	ldr	r2, [pc, #92]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 8014156:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801415a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801415e:	3b10      	subs	r3, #16
 8014160:	3201      	adds	r2, #1
 8014162:	b291      	uxth	r1, r2
 8014164:	4a13      	ldr	r2, [pc, #76]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 8014166:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801416a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801416e:	3b01      	subs	r3, #1
 8014170:	b29a      	uxth	r2, r3
 8014172:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014176:	4611      	mov	r1, r2
 8014178:	4618      	mov	r0, r3
 801417a:	f000 f9b5 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801417e:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8014182:	1d3b      	adds	r3, r7, #4
 8014184:	4611      	mov	r1, r2
 8014186:	4618      	mov	r0, r3
 8014188:	f000 f9ae 	bl	80144e8 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 801418c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014190:	4a08      	ldr	r2, [pc, #32]	; (80141b4 <create_StepCountMap_queue+0x36c>)
 8014192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014196:	3301      	adds	r3, #1
 8014198:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 801419c:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 80141a0:	2bfe      	cmp	r3, #254	; 0xfe
 80141a2:	f67f aebf 	bls.w	8013f24 <create_StepCountMap_queue+0xdc>

		}

}
 80141a6:	bf00      	nop
 80141a8:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	20000c3c 	.word	0x20000c3c
 80141b4:	20000d2c 	.word	0x20000d2c

080141b8 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 80141b8:	b580      	push	{r7, lr}
 80141ba:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 80141be:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 80141c0:	2300      	movs	r3, #0
 80141c2:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 80141c6:	e00a      	b.n	80141de <create_StepCountMapBack_queue+0x26>
 80141c8:	4abd      	ldr	r2, [pc, #756]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 80141ca:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80141ce:	21ff      	movs	r1, #255	; 0xff
 80141d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80141d4:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80141d8:	3301      	adds	r3, #1
 80141da:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 80141de:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80141e2:	2bff      	cmp	r3, #255	; 0xff
 80141e4:	ddf0      	ble.n	80141c8 <create_StepCountMapBack_queue+0x10>
	initStack_walk(&stack_x);
 80141e6:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80141ea:	4618      	mov	r0, r3
 80141ec:	f000 f96c 	bl	80144c8 <initStack_walk>
	initStack_walk(&stack_y);
 80141f0:	1d3b      	adds	r3, r7, #4
 80141f2:	4618      	mov	r0, r3
 80141f4:	f000 f968 	bl	80144c8 <initStack_walk>


	walk_count[0] = 0;
 80141f8:	4bb1      	ldr	r3, [pc, #708]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 80141fa:	2200      	movs	r2, #0
 80141fc:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80141fe:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014202:	2100      	movs	r1, #0
 8014204:	4618      	mov	r0, r3
 8014206:	f000 f96f 	bl	80144e8 <pushStack_walk>
 801420a:	1d3b      	adds	r3, r7, #4
 801420c:	2100      	movs	r1, #0
 801420e:	4618      	mov	r0, r3
 8014210:	f000 f96a 	bl	80144e8 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8014214:	2301      	movs	r3, #1
 8014216:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 801421a:	2301      	movs	r3, #1
 801421c:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8014220:	2301      	movs	r3, #1
 8014222:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8014226:	2301      	movs	r3, #1
 8014228:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 801422c:	2301      	movs	r3, #1
 801422e:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8014232:	e13b      	b.n	80144ac <create_StepCountMapBack_queue+0x2f4>

		Xcoordinate = popStack_walk(&stack_x);
 8014234:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014238:	4618      	mov	r0, r3
 801423a:	f000 f97f 	bl	801453c <popStack_walk>
 801423e:	4603      	mov	r3, r0
 8014240:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 8014244:	1d3b      	adds	r3, r7, #4
 8014246:	4618      	mov	r0, r3
 8014248:	f000 f978 	bl	801453c <popStack_walk>
 801424c:	4603      	mov	r3, r0
 801424e:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8014252:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801425a:	4293      	cmp	r3, r2
 801425c:	f000 812b 	beq.w	80144b6 <create_StepCountMapBack_queue+0x2fe>
 8014260:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014268:	4293      	cmp	r3, r2
 801426a:	f000 8124 	beq.w	80144b6 <create_StepCountMapBack_queue+0x2fe>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 801426e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014272:	011b      	lsls	r3, r3, #4
 8014274:	b29a      	uxth	r2, r3
 8014276:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801427a:	4413      	add	r3, r2
 801427c:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8014280:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014284:	2b0e      	cmp	r3, #14
 8014286:	d811      	bhi.n	80142ac <create_StepCountMapBack_queue+0xf4>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014288:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801428c:	4a8d      	ldr	r2, [pc, #564]	; (80144c4 <create_StepCountMapBack_queue+0x30c>)
 801428e:	330c      	adds	r3, #12
 8014290:	005b      	lsls	r3, r3, #1
 8014292:	4413      	add	r3, r2
 8014294:	88db      	ldrh	r3, [r3, #6]
 8014296:	b21a      	sxth	r2, r3
 8014298:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801429c:	2101      	movs	r1, #1
 801429e:	fa01 f303 	lsl.w	r3, r1, r3
 80142a2:	b21b      	sxth	r3, r3
 80142a4:	4013      	ands	r3, r2
 80142a6:	b21b      	sxth	r3, r3
 80142a8:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 80142ac:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d012      	beq.n	80142da <create_StepCountMapBack_queue+0x122>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80142b4:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80142b8:	3b01      	subs	r3, #1
 80142ba:	4a82      	ldr	r2, [pc, #520]	; (80144c4 <create_StepCountMapBack_queue+0x30c>)
 80142bc:	330c      	adds	r3, #12
 80142be:	005b      	lsls	r3, r3, #1
 80142c0:	4413      	add	r3, r2
 80142c2:	88db      	ldrh	r3, [r3, #6]
 80142c4:	b21a      	sxth	r2, r3
 80142c6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80142ca:	2101      	movs	r1, #1
 80142cc:	fa01 f303 	lsl.w	r3, r1, r3
 80142d0:	b21b      	sxth	r3, r3
 80142d2:	4013      	ands	r3, r2
 80142d4:	b21b      	sxth	r3, r3
 80142d6:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 80142da:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80142de:	2b0e      	cmp	r3, #14
 80142e0:	d80f      	bhi.n	8014302 <create_StepCountMapBack_queue+0x14a>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80142e2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80142e6:	4a77      	ldr	r2, [pc, #476]	; (80144c4 <create_StepCountMapBack_queue+0x30c>)
 80142e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80142ec:	b21a      	sxth	r2, r3
 80142ee:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80142f2:	2101      	movs	r1, #1
 80142f4:	fa01 f303 	lsl.w	r3, r1, r3
 80142f8:	b21b      	sxth	r3, r3
 80142fa:	4013      	ands	r3, r2
 80142fc:	b21b      	sxth	r3, r3
 80142fe:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8014302:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014306:	2b00      	cmp	r3, #0
 8014308:	d010      	beq.n	801432c <create_StepCountMapBack_queue+0x174>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 801430a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801430e:	3b01      	subs	r3, #1
 8014310:	4a6c      	ldr	r2, [pc, #432]	; (80144c4 <create_StepCountMapBack_queue+0x30c>)
 8014312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014316:	b21a      	sxth	r2, r3
 8014318:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801431c:	2101      	movs	r1, #1
 801431e:	fa01 f303 	lsl.w	r3, r1, r3
 8014322:	b21b      	sxth	r3, r3
 8014324:	4013      	ands	r3, r2
 8014326:	b21b      	sxth	r3, r3
 8014328:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 801432c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014330:	3301      	adds	r3, #1
 8014332:	4a63      	ldr	r2, [pc, #396]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 8014334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014338:	2bff      	cmp	r3, #255	; 0xff
 801433a:	d125      	bne.n	8014388 <create_StepCountMapBack_queue+0x1d0>
 801433c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014340:	2b0f      	cmp	r3, #15
 8014342:	d021      	beq.n	8014388 <create_StepCountMapBack_queue+0x1d0>
 8014344:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8014348:	2b00      	cmp	r3, #0
 801434a:	d11d      	bne.n	8014388 <create_StepCountMapBack_queue+0x1d0>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 801434c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014350:	4a5b      	ldr	r2, [pc, #364]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 8014352:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014356:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801435a:	3301      	adds	r3, #1
 801435c:	3201      	adds	r2, #1
 801435e:	b291      	uxth	r1, r2
 8014360:	4a57      	ldr	r2, [pc, #348]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 8014362:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014366:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 801436a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801436e:	4611      	mov	r1, r2
 8014370:	4618      	mov	r0, r3
 8014372:	f000 f8b9 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014376:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801437a:	3301      	adds	r3, #1
 801437c:	b29a      	uxth	r2, r3
 801437e:	1d3b      	adds	r3, r7, #4
 8014380:	4611      	mov	r1, r2
 8014382:	4618      	mov	r0, r3
 8014384:	f000 f8b0 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014388:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801438c:	3b01      	subs	r3, #1
 801438e:	4a4c      	ldr	r2, [pc, #304]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 8014390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014394:	2bff      	cmp	r3, #255	; 0xff
 8014396:	d125      	bne.n	80143e4 <create_StepCountMapBack_queue+0x22c>
 8014398:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801439c:	2b00      	cmp	r3, #0
 801439e:	d021      	beq.n	80143e4 <create_StepCountMapBack_queue+0x22c>
 80143a0:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d11d      	bne.n	80143e4 <create_StepCountMapBack_queue+0x22c>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 80143a8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80143ac:	4a44      	ldr	r2, [pc, #272]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 80143ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80143b2:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80143b6:	3b01      	subs	r3, #1
 80143b8:	3201      	adds	r2, #1
 80143ba:	b291      	uxth	r1, r2
 80143bc:	4a40      	ldr	r2, [pc, #256]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 80143be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80143c2:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 80143c6:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80143ca:	4611      	mov	r1, r2
 80143cc:	4618      	mov	r0, r3
 80143ce:	f000 f88b 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80143d2:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80143d6:	3b01      	subs	r3, #1
 80143d8:	b29a      	uxth	r2, r3
 80143da:	1d3b      	adds	r3, r7, #4
 80143dc:	4611      	mov	r1, r2
 80143de:	4618      	mov	r0, r3
 80143e0:	f000 f882 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80143e4:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80143e8:	3310      	adds	r3, #16
 80143ea:	4a35      	ldr	r2, [pc, #212]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 80143ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143f0:	2bff      	cmp	r3, #255	; 0xff
 80143f2:	d125      	bne.n	8014440 <create_StepCountMapBack_queue+0x288>
 80143f4:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80143f8:	2b0f      	cmp	r3, #15
 80143fa:	d021      	beq.n	8014440 <create_StepCountMapBack_queue+0x288>
 80143fc:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 8014400:	2b00      	cmp	r3, #0
 8014402:	d11d      	bne.n	8014440 <create_StepCountMapBack_queue+0x288>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 8014404:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014408:	4a2d      	ldr	r2, [pc, #180]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 801440a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801440e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014412:	3310      	adds	r3, #16
 8014414:	3201      	adds	r2, #1
 8014416:	b291      	uxth	r1, r2
 8014418:	4a29      	ldr	r2, [pc, #164]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 801441a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801441e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014422:	3301      	adds	r3, #1
 8014424:	b29a      	uxth	r2, r3
 8014426:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801442a:	4611      	mov	r1, r2
 801442c:	4618      	mov	r0, r3
 801442e:	f000 f85b 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014432:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8014436:	1d3b      	adds	r3, r7, #4
 8014438:	4611      	mov	r1, r2
 801443a:	4618      	mov	r0, r3
 801443c:	f000 f854 	bl	80144e8 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014440:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014444:	3b10      	subs	r3, #16
 8014446:	4a1e      	ldr	r2, [pc, #120]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 8014448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801444c:	2bff      	cmp	r3, #255	; 0xff
 801444e:	d125      	bne.n	801449c <create_StepCountMapBack_queue+0x2e4>
 8014450:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014454:	2b00      	cmp	r3, #0
 8014456:	d021      	beq.n	801449c <create_StepCountMapBack_queue+0x2e4>
 8014458:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 801445c:	2b00      	cmp	r3, #0
 801445e:	d11d      	bne.n	801449c <create_StepCountMapBack_queue+0x2e4>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8014460:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014464:	4a16      	ldr	r2, [pc, #88]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 8014466:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801446a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801446e:	3b10      	subs	r3, #16
 8014470:	3201      	adds	r2, #1
 8014472:	b291      	uxth	r1, r2
 8014474:	4a12      	ldr	r2, [pc, #72]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 8014476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801447a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801447e:	3b01      	subs	r3, #1
 8014480:	b29a      	uxth	r2, r3
 8014482:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014486:	4611      	mov	r1, r2
 8014488:	4618      	mov	r0, r3
 801448a:	f000 f82d 	bl	80144e8 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801448e:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8014492:	1d3b      	adds	r3, r7, #4
 8014494:	4611      	mov	r1, r2
 8014496:	4618      	mov	r0, r3
 8014498:	f000 f826 	bl	80144e8 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 801449c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80144a0:	4a07      	ldr	r2, [pc, #28]	; (80144c0 <create_StepCountMapBack_queue+0x308>)
 80144a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144a6:	3301      	adds	r3, #1
 80144a8:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 80144ac:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 80144b0:	2bfe      	cmp	r3, #254	; 0xfe
 80144b2:	f67f aebf 	bls.w	8014234 <create_StepCountMapBack_queue+0x7c>

		}

}
 80144b6:	bf00      	nop
 80144b8:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	20000d2c 	.word	0x20000d2c
 80144c4:	20000c3c 	.word	0x20000c3c

080144c8 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 80144c8:	b480      	push	{r7}
 80144ca:	b083      	sub	sp, #12
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2200      	movs	r2, #0
 80144d4:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2200      	movs	r2, #0
 80144da:	605a      	str	r2, [r3, #4]
}
 80144dc:	bf00      	nop
 80144de:	370c      	adds	r7, #12
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr

080144e8 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b082      	sub	sp, #8
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	460b      	mov	r3, r1
 80144f2:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	685a      	ldr	r2, [r3, #4]
 80144f8:	8879      	ldrh	r1, [r7, #2]
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	3202      	adds	r2, #2
 80144fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	1c5a      	adds	r2, r3, #1
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8014514:	d102      	bne.n	801451c <pushStack_walk+0x34>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2200      	movs	r2, #0
 801451a:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	685a      	ldr	r2, [r3, #4]
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	429a      	cmp	r2, r3
 8014526:	d103      	bne.n	8014530 <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014528:	4803      	ldr	r0, [pc, #12]	; (8014538 <pushStack_walk+0x50>)
 801452a:	f00b fab7 	bl	801fa9c <puts>
        return;
 801452e:	bf00      	nop
    }
}
 8014530:	3708      	adds	r7, #8
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	080221e0 	.word	0x080221e0

0801453c <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 801453c:	b480      	push	{r7}
 801453e:	b085      	sub	sp, #20
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014544:	2300      	movs	r3, #0
 8014546:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	685a      	ldr	r2, [r3, #4]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	429a      	cmp	r2, r3
 8014552:	d102      	bne.n	801455a <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014558:	e014      	b.n	8014584 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	3202      	adds	r2, #2
 8014562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014566:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	1c5a      	adds	r2, r3, #1
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 801457a:	d102      	bne.n	8014582 <popStack_walk+0x46>
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2200      	movs	r2, #0
 8014580:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 8014582:	89fb      	ldrh	r3, [r7, #14]
}
 8014584:	4618      	mov	r0, r3
 8014586:	3714      	adds	r7, #20
 8014588:	46bd      	mov	sp, r7
 801458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458e:	4770      	bx	lr

08014590 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014590:	b580      	push	{r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0

	int tt = 14;
 8014596:	230e      	movs	r3, #14
 8014598:	607b      	str	r3, [r7, #4]
	int ss = 0;
 801459a:	2300      	movs	r3, #0
 801459c:	603b      	str	r3, [r7, #0]

	printf(
 801459e:	4881      	ldr	r0, [pc, #516]	; (80147a4 <maze_display+0x214>)
 80145a0:	f00b fa7c 	bl	801fa9c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80145a4:	230e      	movs	r3, #14
 80145a6:	607b      	str	r3, [r7, #4]
 80145a8:	e06e      	b.n	8014688 <maze_display+0xf8>

		printf("|%5d", walk_count[tt + 1]);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	3301      	adds	r3, #1
 80145ae:	4a7e      	ldr	r2, [pc, #504]	; (80147a8 <maze_display+0x218>)
 80145b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145b4:	4619      	mov	r1, r3
 80145b6:	487d      	ldr	r0, [pc, #500]	; (80147ac <maze_display+0x21c>)
 80145b8:	f00b f9d4 	bl	801f964 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80145bc:	2300      	movs	r3, #0
 80145be:	603b      	str	r3, [r7, #0]
 80145c0:	e030      	b.n	8014624 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80145c2:	4a7b      	ldr	r2, [pc, #492]	; (80147b0 <maze_display+0x220>)
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145ca:	4619      	mov	r1, r3
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	3301      	adds	r3, #1
 80145d0:	2201      	movs	r2, #1
 80145d2:	fa02 f303 	lsl.w	r3, r2, r3
 80145d6:	ea01 0203 	and.w	r2, r1, r3
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	3301      	adds	r3, #1
 80145de:	2101      	movs	r1, #1
 80145e0:	fa01 f303 	lsl.w	r3, r1, r3
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d10d      	bne.n	8014604 <maze_display+0x74>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	1c5a      	adds	r2, r3, #1
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	3301      	adds	r3, #1
 80145f0:	011b      	lsls	r3, r3, #4
 80145f2:	4413      	add	r3, r2
 80145f4:	4a6c      	ldr	r2, [pc, #432]	; (80147a8 <maze_display+0x218>)
 80145f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145fa:	4619      	mov	r1, r3
 80145fc:	486b      	ldr	r0, [pc, #428]	; (80147ac <maze_display+0x21c>)
 80145fe:	f00b f9b1 	bl	801f964 <iprintf>
 8014602:	e00c      	b.n	801461e <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	1c5a      	adds	r2, r3, #1
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	3301      	adds	r3, #1
 801460c:	011b      	lsls	r3, r3, #4
 801460e:	4413      	add	r3, r2
 8014610:	4a65      	ldr	r2, [pc, #404]	; (80147a8 <maze_display+0x218>)
 8014612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014616:	4619      	mov	r1, r3
 8014618:	4866      	ldr	r0, [pc, #408]	; (80147b4 <maze_display+0x224>)
 801461a:	f00b f9a3 	bl	801f964 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	3301      	adds	r3, #1
 8014622:	603b      	str	r3, [r7, #0]
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	2b0e      	cmp	r3, #14
 8014628:	ddcb      	ble.n	80145c2 <maze_display+0x32>
			}
		}
		printf("|\n");
 801462a:	4863      	ldr	r0, [pc, #396]	; (80147b8 <maze_display+0x228>)
 801462c:	f00b fa36 	bl	801fa9c <puts>
		if (tt <= -1) {
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	db2d      	blt.n	8014692 <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014636:	2300      	movs	r3, #0
 8014638:	603b      	str	r3, [r7, #0]
 801463a:	e01c      	b.n	8014676 <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 801463c:	4a5c      	ldr	r2, [pc, #368]	; (80147b0 <maze_display+0x220>)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	330c      	adds	r3, #12
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	4413      	add	r3, r2
 8014646:	88db      	ldrh	r3, [r3, #6]
 8014648:	4619      	mov	r1, r3
 801464a:	2201      	movs	r2, #1
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	fa02 f303 	lsl.w	r3, r2, r3
 8014652:	ea01 0203 	and.w	r2, r1, r3
 8014656:	2101      	movs	r1, #1
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	fa01 f303 	lsl.w	r3, r1, r3
 801465e:	429a      	cmp	r2, r3
 8014660:	d103      	bne.n	801466a <maze_display+0xda>
				printf("+-----");
 8014662:	4856      	ldr	r0, [pc, #344]	; (80147bc <maze_display+0x22c>)
 8014664:	f00b f97e 	bl	801f964 <iprintf>
 8014668:	e002      	b.n	8014670 <maze_display+0xe0>
			}else{
				printf("+     ");
 801466a:	4855      	ldr	r0, [pc, #340]	; (80147c0 <maze_display+0x230>)
 801466c:	f00b f97a 	bl	801f964 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	3301      	adds	r3, #1
 8014674:	603b      	str	r3, [r7, #0]
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	2b0f      	cmp	r3, #15
 801467a:	dddf      	ble.n	801463c <maze_display+0xac>
			}
		}

		printf("+\n");
 801467c:	4851      	ldr	r0, [pc, #324]	; (80147c4 <maze_display+0x234>)
 801467e:	f00b fa0d 	bl	801fa9c <puts>
	for (tt = 14;tt >= -1;tt--){
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	3b01      	subs	r3, #1
 8014686:	607b      	str	r3, [r7, #4]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801468e:	da8c      	bge.n	80145aa <maze_display+0x1a>
 8014690:	e000      	b.n	8014694 <maze_display+0x104>
			break;
 8014692:	bf00      	nop

	}

	printf(
 8014694:	484c      	ldr	r0, [pc, #304]	; (80147c8 <maze_display+0x238>)
 8014696:	f00b fa01 	bl	801fa9c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 801469a:	4842      	ldr	r0, [pc, #264]	; (80147a4 <maze_display+0x214>)
 801469c:	f00b f9fe 	bl	801fa9c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 80146a0:	230e      	movs	r3, #14
 80146a2:	607b      	str	r3, [r7, #4]
 80146a4:	e070      	b.n	8014788 <maze_display+0x1f8>
		printf("|%5d", walk_count[tt + 1]);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	3301      	adds	r3, #1
 80146aa:	4a3f      	ldr	r2, [pc, #252]	; (80147a8 <maze_display+0x218>)
 80146ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146b0:	4619      	mov	r1, r3
 80146b2:	483e      	ldr	r0, [pc, #248]	; (80147ac <maze_display+0x21c>)
 80146b4:	f00b f956 	bl	801f964 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80146b8:	2300      	movs	r3, #0
 80146ba:	603b      	str	r3, [r7, #0]
 80146bc:	e032      	b.n	8014724 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80146be:	4a3c      	ldr	r2, [pc, #240]	; (80147b0 <maze_display+0x220>)
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	331c      	adds	r3, #28
 80146c4:	005b      	lsls	r3, r3, #1
 80146c6:	4413      	add	r3, r2
 80146c8:	889b      	ldrh	r3, [r3, #4]
 80146ca:	4619      	mov	r1, r3
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	3301      	adds	r3, #1
 80146d0:	2201      	movs	r2, #1
 80146d2:	fa02 f303 	lsl.w	r3, r2, r3
 80146d6:	ea01 0203 	and.w	r2, r1, r3
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	3301      	adds	r3, #1
 80146de:	2101      	movs	r1, #1
 80146e0:	fa01 f303 	lsl.w	r3, r1, r3
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d10d      	bne.n	8014704 <maze_display+0x174>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	1c5a      	adds	r2, r3, #1
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	3301      	adds	r3, #1
 80146f0:	011b      	lsls	r3, r3, #4
 80146f2:	4413      	add	r3, r2
 80146f4:	4a2c      	ldr	r2, [pc, #176]	; (80147a8 <maze_display+0x218>)
 80146f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146fa:	4619      	mov	r1, r3
 80146fc:	482b      	ldr	r0, [pc, #172]	; (80147ac <maze_display+0x21c>)
 80146fe:	f00b f931 	bl	801f964 <iprintf>
 8014702:	e00c      	b.n	801471e <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	1c5a      	adds	r2, r3, #1
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	3301      	adds	r3, #1
 801470c:	011b      	lsls	r3, r3, #4
 801470e:	4413      	add	r3, r2
 8014710:	4a25      	ldr	r2, [pc, #148]	; (80147a8 <maze_display+0x218>)
 8014712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014716:	4619      	mov	r1, r3
 8014718:	4826      	ldr	r0, [pc, #152]	; (80147b4 <maze_display+0x224>)
 801471a:	f00b f923 	bl	801f964 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	3301      	adds	r3, #1
 8014722:	603b      	str	r3, [r7, #0]
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	2b0e      	cmp	r3, #14
 8014728:	ddc9      	ble.n	80146be <maze_display+0x12e>
			}
		}
		printf("|\n");
 801472a:	4823      	ldr	r0, [pc, #140]	; (80147b8 <maze_display+0x228>)
 801472c:	f00b f9b6 	bl	801fa9c <puts>
		if (tt <= -1) {
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2b00      	cmp	r3, #0
 8014734:	db2d      	blt.n	8014792 <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014736:	2300      	movs	r3, #0
 8014738:	603b      	str	r3, [r7, #0]
 801473a:	e01c      	b.n	8014776 <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 801473c:	4a1c      	ldr	r2, [pc, #112]	; (80147b0 <maze_display+0x220>)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	332c      	adds	r3, #44	; 0x2c
 8014742:	005b      	lsls	r3, r3, #1
 8014744:	4413      	add	r3, r2
 8014746:	885b      	ldrh	r3, [r3, #2]
 8014748:	4619      	mov	r1, r3
 801474a:	2201      	movs	r2, #1
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	fa02 f303 	lsl.w	r3, r2, r3
 8014752:	ea01 0203 	and.w	r2, r1, r3
 8014756:	2101      	movs	r1, #1
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	fa01 f303 	lsl.w	r3, r1, r3
 801475e:	429a      	cmp	r2, r3
 8014760:	d103      	bne.n	801476a <maze_display+0x1da>
				printf("+-----");
 8014762:	4816      	ldr	r0, [pc, #88]	; (80147bc <maze_display+0x22c>)
 8014764:	f00b f8fe 	bl	801f964 <iprintf>
 8014768:	e002      	b.n	8014770 <maze_display+0x1e0>
			}else{
				printf("+     ");
 801476a:	4815      	ldr	r0, [pc, #84]	; (80147c0 <maze_display+0x230>)
 801476c:	f00b f8fa 	bl	801f964 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	3301      	adds	r3, #1
 8014774:	603b      	str	r3, [r7, #0]
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	2b0f      	cmp	r3, #15
 801477a:	dddf      	ble.n	801473c <maze_display+0x1ac>
			}
		}
		printf("+\n");
 801477c:	4811      	ldr	r0, [pc, #68]	; (80147c4 <maze_display+0x234>)
 801477e:	f00b f98d 	bl	801fa9c <puts>
	for (tt = 14;tt >= -1;tt--){
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	3b01      	subs	r3, #1
 8014786:	607b      	str	r3, [r7, #4]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801478e:	da8a      	bge.n	80146a6 <maze_display+0x116>
 8014790:	e000      	b.n	8014794 <maze_display+0x204>
			break;
 8014792:	bf00      	nop
	}

	printf(
 8014794:	480c      	ldr	r0, [pc, #48]	; (80147c8 <maze_display+0x238>)
 8014796:	f00b f981 	bl	801fa9c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 801479a:	bf00      	nop
 801479c:	3708      	adds	r7, #8
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	080221ec 	.word	0x080221ec
 80147a8:	20000d2c 	.word	0x20000d2c
 80147ac:	08022250 	.word	0x08022250
 80147b0:	20000c3c 	.word	0x20000c3c
 80147b4:	08022258 	.word	0x08022258
 80147b8:	08022260 	.word	0x08022260
 80147bc:	08022264 	.word	0x08022264
 80147c0:	0802226c 	.word	0x0802226c
 80147c4:	08022274 	.word	0x08022274
 80147c8:	08022278 	.word	0x08022278

080147cc <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0

	int tt = 14;
 80147d2:	230e      	movs	r3, #14
 80147d4:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80147d6:	2300      	movs	r3, #0
 80147d8:	603b      	str	r3, [r7, #0]

	printf(
 80147da:	4865      	ldr	r0, [pc, #404]	; (8014970 <maze_display_Dijkstra+0x1a4>)
 80147dc:	f00b f95e 	bl	801fa9c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80147e0:	230e      	movs	r3, #14
 80147e2:	607b      	str	r3, [r7, #4]
 80147e4:	e06a      	b.n	80148bc <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 80147e6:	4863      	ldr	r0, [pc, #396]	; (8014974 <maze_display_Dijkstra+0x1a8>)
 80147e8:	f00b f8bc 	bl	801f964 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80147ec:	2300      	movs	r3, #0
 80147ee:	603b      	str	r3, [r7, #0]
 80147f0:	e027      	b.n	8014842 <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80147f2:	4a61      	ldr	r2, [pc, #388]	; (8014978 <maze_display_Dijkstra+0x1ac>)
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147fa:	4619      	mov	r1, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	3301      	adds	r3, #1
 8014800:	2201      	movs	r2, #1
 8014802:	fa02 f303 	lsl.w	r3, r2, r3
 8014806:	ea01 0203 	and.w	r2, r1, r3
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	3301      	adds	r3, #1
 801480e:	2101      	movs	r1, #1
 8014810:	fa01 f303 	lsl.w	r3, r1, r3
 8014814:	429a      	cmp	r2, r3
 8014816:	d103      	bne.n	8014820 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8014818:	4858      	ldr	r0, [pc, #352]	; (801497c <maze_display_Dijkstra+0x1b0>)
 801481a:	f00b f8a3 	bl	801f964 <iprintf>
 801481e:	e00d      	b.n	801483c <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	1c5a      	adds	r2, r3, #1
 8014824:	4956      	ldr	r1, [pc, #344]	; (8014980 <maze_display_Dijkstra+0x1b4>)
 8014826:	4613      	mov	r3, r2
 8014828:	011b      	lsls	r3, r3, #4
 801482a:	1a9b      	subs	r3, r3, r2
 801482c:	683a      	ldr	r2, [r7, #0]
 801482e:	4413      	add	r3, r2
 8014830:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014834:	4619      	mov	r1, r3
 8014836:	4853      	ldr	r0, [pc, #332]	; (8014984 <maze_display_Dijkstra+0x1b8>)
 8014838:	f00b f894 	bl	801f964 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	3301      	adds	r3, #1
 8014840:	603b      	str	r3, [r7, #0]
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	2b0e      	cmp	r3, #14
 8014846:	ddd4      	ble.n	80147f2 <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8014848:	484f      	ldr	r0, [pc, #316]	; (8014988 <maze_display_Dijkstra+0x1bc>)
 801484a:	f00b f927 	bl	801fa9c <puts>
		if (tt <= -1) {
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2b00      	cmp	r3, #0
 8014852:	db38      	blt.n	80148c6 <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014854:	2300      	movs	r3, #0
 8014856:	603b      	str	r3, [r7, #0]
 8014858:	e027      	b.n	80148aa <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 801485a:	4a47      	ldr	r2, [pc, #284]	; (8014978 <maze_display_Dijkstra+0x1ac>)
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	330c      	adds	r3, #12
 8014860:	005b      	lsls	r3, r3, #1
 8014862:	4413      	add	r3, r2
 8014864:	88db      	ldrh	r3, [r3, #6]
 8014866:	4619      	mov	r1, r3
 8014868:	2201      	movs	r2, #1
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	fa02 f303 	lsl.w	r3, r2, r3
 8014870:	ea01 0203 	and.w	r2, r1, r3
 8014874:	2101      	movs	r1, #1
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	fa01 f303 	lsl.w	r3, r1, r3
 801487c:	429a      	cmp	r2, r3
 801487e:	d103      	bne.n	8014888 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 8014880:	4842      	ldr	r0, [pc, #264]	; (801498c <maze_display_Dijkstra+0x1c0>)
 8014882:	f00b f86f 	bl	801f964 <iprintf>
 8014886:	e00d      	b.n	80148a4 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014888:	493d      	ldr	r1, [pc, #244]	; (8014980 <maze_display_Dijkstra+0x1b4>)
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	4613      	mov	r3, r2
 801488e:	011b      	lsls	r3, r3, #4
 8014890:	1a9b      	subs	r3, r3, r2
 8014892:	687a      	ldr	r2, [r7, #4]
 8014894:	4413      	add	r3, r2
 8014896:	33f0      	adds	r3, #240	; 0xf0
 8014898:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801489c:	4619      	mov	r1, r3
 801489e:	483c      	ldr	r0, [pc, #240]	; (8014990 <maze_display_Dijkstra+0x1c4>)
 80148a0:	f00b f860 	bl	801f964 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	3301      	adds	r3, #1
 80148a8:	603b      	str	r3, [r7, #0]
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	2b0f      	cmp	r3, #15
 80148ae:	ddd4      	ble.n	801485a <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 80148b0:	4838      	ldr	r0, [pc, #224]	; (8014994 <maze_display_Dijkstra+0x1c8>)
 80148b2:	f00b f8f3 	bl	801fa9c <puts>
	for (tt = 14;tt >= -1;tt--){
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	3b01      	subs	r3, #1
 80148ba:	607b      	str	r3, [r7, #4]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148c2:	da90      	bge.n	80147e6 <maze_display_Dijkstra+0x1a>
 80148c4:	e000      	b.n	80148c8 <maze_display_Dijkstra+0xfc>
			break;
 80148c6:	bf00      	nop

	}

	printf(
 80148c8:	4833      	ldr	r0, [pc, #204]	; (8014998 <maze_display_Dijkstra+0x1cc>)
 80148ca:	f00b f8e7 	bl	801fa9c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 80148ce:	4828      	ldr	r0, [pc, #160]	; (8014970 <maze_display_Dijkstra+0x1a4>)
 80148d0:	f00b f8e4 	bl	801fa9c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80148d4:	230e      	movs	r3, #14
 80148d6:	607b      	str	r3, [r7, #4]
 80148d8:	e03c      	b.n	8014954 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 80148da:	4826      	ldr	r0, [pc, #152]	; (8014974 <maze_display_Dijkstra+0x1a8>)
 80148dc:	f00b f842 	bl	801f964 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80148e0:	2300      	movs	r3, #0
 80148e2:	603b      	str	r3, [r7, #0]
 80148e4:	e010      	b.n	8014908 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	1c5a      	adds	r2, r3, #1
 80148ea:	4925      	ldr	r1, [pc, #148]	; (8014980 <maze_display_Dijkstra+0x1b4>)
 80148ec:	4613      	mov	r3, r2
 80148ee:	011b      	lsls	r3, r3, #4
 80148f0:	1a9b      	subs	r3, r3, r2
 80148f2:	683a      	ldr	r2, [r7, #0]
 80148f4:	4413      	add	r3, r2
 80148f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80148fa:	4619      	mov	r1, r3
 80148fc:	4821      	ldr	r0, [pc, #132]	; (8014984 <maze_display_Dijkstra+0x1b8>)
 80148fe:	f00b f831 	bl	801f964 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	3301      	adds	r3, #1
 8014906:	603b      	str	r3, [r7, #0]
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	2b0e      	cmp	r3, #14
 801490c:	ddeb      	ble.n	80148e6 <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 801490e:	481e      	ldr	r0, [pc, #120]	; (8014988 <maze_display_Dijkstra+0x1bc>)
 8014910:	f00b f8c4 	bl	801fa9c <puts>
		if (tt <= -1) {
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2b00      	cmp	r3, #0
 8014918:	db21      	blt.n	801495e <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801491a:	2300      	movs	r3, #0
 801491c:	603b      	str	r3, [r7, #0]
 801491e:	e010      	b.n	8014942 <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014920:	4917      	ldr	r1, [pc, #92]	; (8014980 <maze_display_Dijkstra+0x1b4>)
 8014922:	683a      	ldr	r2, [r7, #0]
 8014924:	4613      	mov	r3, r2
 8014926:	011b      	lsls	r3, r3, #4
 8014928:	1a9b      	subs	r3, r3, r2
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	4413      	add	r3, r2
 801492e:	33f0      	adds	r3, #240	; 0xf0
 8014930:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014934:	4619      	mov	r1, r3
 8014936:	4816      	ldr	r0, [pc, #88]	; (8014990 <maze_display_Dijkstra+0x1c4>)
 8014938:	f00b f814 	bl	801f964 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	3301      	adds	r3, #1
 8014940:	603b      	str	r3, [r7, #0]
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	2b0f      	cmp	r3, #15
 8014946:	ddeb      	ble.n	8014920 <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 8014948:	4812      	ldr	r0, [pc, #72]	; (8014994 <maze_display_Dijkstra+0x1c8>)
 801494a:	f00b f8a7 	bl	801fa9c <puts>
	for (tt = 14;tt >= -1;tt--){
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	3b01      	subs	r3, #1
 8014952:	607b      	str	r3, [r7, #4]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f1b3 3fff 	cmp.w	r3, #4294967295
 801495a:	dabe      	bge.n	80148da <maze_display_Dijkstra+0x10e>
 801495c:	e000      	b.n	8014960 <maze_display_Dijkstra+0x194>
			break;
 801495e:	bf00      	nop

	}

	printf(
 8014960:	480d      	ldr	r0, [pc, #52]	; (8014998 <maze_display_Dijkstra+0x1cc>)
 8014962:	f00b f89b 	bl	801fa9c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 8014966:	bf00      	nop
 8014968:	3708      	adds	r7, #8
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
 801496e:	bf00      	nop
 8014970:	080221ec 	.word	0x080221ec
 8014974:	080222dc 	.word	0x080222dc
 8014978:	20000c3c 	.word	0x20000c3c
 801497c:	080222e4 	.word	0x080222e4
 8014980:	20000f2c 	.word	0x20000f2c
 8014984:	080222ec 	.word	0x080222ec
 8014988:	080222f4 	.word	0x080222f4
 801498c:	08022264 	.word	0x08022264
 8014990:	080222fc 	.word	0x080222fc
 8014994:	08022274 	.word	0x08022274
 8014998:	08022278 	.word	0x08022278

0801499c <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	4603      	mov	r3, r0
 80149a4:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 80149a6:	2300      	movs	r3, #0
 80149a8:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80149aa:	2300      	movs	r3, #0
 80149ac:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 80149ae:	2300      	movs	r3, #0
 80149b0:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 80149b2:	4b71      	ldr	r3, [pc, #452]	; (8014b78 <mode_decision+0x1dc>)
 80149b4:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 80149b6:	79fb      	ldrb	r3, [r7, #7]
 80149b8:	f003 030f 	and.w	r3, r3, #15
 80149bc:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80149be:	79fb      	ldrb	r3, [r7, #7]
 80149c0:	091b      	lsrs	r3, r3, #4
 80149c2:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80149c4:	7bbb      	ldrb	r3, [r7, #14]
 80149c6:	011b      	lsls	r3, r3, #4
 80149c8:	b2da      	uxtb	r2, r3
 80149ca:	7bfb      	ldrb	r3, [r7, #15]
 80149cc:	4413      	add	r3, r2
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7f2 fb2b 	bl	800702c <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 80149d6:	e07f      	b.n	8014ad8 <mode_decision+0x13c>
				HAL_Delay(1);
 80149d8:	2001      	movs	r0, #1
 80149da:	f003 f871 	bl	8017ac0 <HAL_Delay>
				if (E_distanceR >= dis8) {
 80149de:	4b67      	ldr	r3, [pc, #412]	; (8014b7c <mode_decision+0x1e0>)
 80149e0:	edd3 7a00 	vldr	s15, [r3]
 80149e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80149e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f0:	d813      	bhi.n	8014a1a <mode_decision+0x7e>
					if (main_modeR == 15) {
 80149f2:	7bfb      	ldrb	r3, [r7, #15]
 80149f4:	2b0f      	cmp	r3, #15
 80149f6:	d102      	bne.n	80149fe <mode_decision+0x62>
						main_modeR = 0;
 80149f8:	2300      	movs	r3, #0
 80149fa:	73fb      	strb	r3, [r7, #15]
 80149fc:	e002      	b.n	8014a04 <mode_decision+0x68>
					} else {
						main_modeR++;
 80149fe:	7bfb      	ldrb	r3, [r7, #15]
 8014a00:	3301      	adds	r3, #1
 8014a02:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014a04:	f7ec faca 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014a08:	7bbb      	ldrb	r3, [r7, #14]
 8014a0a:	011b      	lsls	r3, r3, #4
 8014a0c:	b2da      	uxtb	r2, r3
 8014a0e:	7bfb      	ldrb	r3, [r7, #15]
 8014a10:	4413      	add	r3, r2
 8014a12:	b2db      	uxtb	r3, r3
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7f2 fb09 	bl	800702c <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8014a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8014a1e:	eeb1 7a67 	vneg.f32	s14, s15
 8014a22:	4b56      	ldr	r3, [pc, #344]	; (8014b7c <mode_decision+0x1e0>)
 8014a24:	edd3 7a00 	vldr	s15, [r3]
 8014a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a30:	db13      	blt.n	8014a5a <mode_decision+0xbe>
					if (main_modeR == 0) {
 8014a32:	7bfb      	ldrb	r3, [r7, #15]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d102      	bne.n	8014a3e <mode_decision+0xa2>
						main_modeR = 15;
 8014a38:	230f      	movs	r3, #15
 8014a3a:	73fb      	strb	r3, [r7, #15]
 8014a3c:	e002      	b.n	8014a44 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8014a3e:	7bfb      	ldrb	r3, [r7, #15]
 8014a40:	3b01      	subs	r3, #1
 8014a42:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014a44:	f7ec faaa 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014a48:	7bbb      	ldrb	r3, [r7, #14]
 8014a4a:	011b      	lsls	r3, r3, #4
 8014a4c:	b2da      	uxtb	r2, r3
 8014a4e:	7bfb      	ldrb	r3, [r7, #15]
 8014a50:	4413      	add	r3, r2
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7f2 fae9 	bl	800702c <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8014a5a:	4b49      	ldr	r3, [pc, #292]	; (8014b80 <mode_decision+0x1e4>)
 8014a5c:	edd3 7a00 	vldr	s15, [r3]
 8014a60:	ed97 7a02 	vldr	s14, [r7, #8]
 8014a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a6c:	d813      	bhi.n	8014a96 <mode_decision+0xfa>
					if (main_modeL == 15) {
 8014a6e:	7bbb      	ldrb	r3, [r7, #14]
 8014a70:	2b0f      	cmp	r3, #15
 8014a72:	d102      	bne.n	8014a7a <mode_decision+0xde>
						main_modeL = 0;
 8014a74:	2300      	movs	r3, #0
 8014a76:	73bb      	strb	r3, [r7, #14]
 8014a78:	e002      	b.n	8014a80 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8014a7a:	7bbb      	ldrb	r3, [r7, #14]
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014a80:	f7ec fa8c 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014a84:	7bbb      	ldrb	r3, [r7, #14]
 8014a86:	011b      	lsls	r3, r3, #4
 8014a88:	b2da      	uxtb	r2, r3
 8014a8a:	7bfb      	ldrb	r3, [r7, #15]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7f2 facb 	bl	800702c <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8014a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8014a9a:	eeb1 7a67 	vneg.f32	s14, s15
 8014a9e:	4b38      	ldr	r3, [pc, #224]	; (8014b80 <mode_decision+0x1e4>)
 8014aa0:	edd3 7a00 	vldr	s15, [r3]
 8014aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aac:	da00      	bge.n	8014ab0 <mode_decision+0x114>
 8014aae:	e013      	b.n	8014ad8 <mode_decision+0x13c>
					if (main_modeL == 0) {
 8014ab0:	7bbb      	ldrb	r3, [r7, #14]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d102      	bne.n	8014abc <mode_decision+0x120>
						main_modeL = 15;
 8014ab6:	230f      	movs	r3, #15
 8014ab8:	73bb      	strb	r3, [r7, #14]
 8014aba:	e002      	b.n	8014ac2 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8014abc:	7bbb      	ldrb	r3, [r7, #14]
 8014abe:	3b01      	subs	r3, #1
 8014ac0:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014ac2:	f7ec fa6b 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014ac6:	7bbb      	ldrb	r3, [r7, #14]
 8014ac8:	011b      	lsls	r3, r3, #4
 8014aca:	b2da      	uxtb	r2, r3
 8014acc:	7bfb      	ldrb	r3, [r7, #15]
 8014ace:	4413      	add	r3, r2
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7f2 faaa 	bl	800702c <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8014ad8:	4b2a      	ldr	r3, [pc, #168]	; (8014b84 <mode_decision+0x1e8>)
 8014ada:	edd3 7a00 	vldr	s15, [r3]
 8014ade:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8014b88 <mode_decision+0x1ec>
 8014ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aea:	f67f af75 	bls.w	80149d8 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8014aee:	f7f2 fa63 	bl	8006fb8 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8014af2:	2001      	movs	r0, #1
 8014af4:	f7f2 fb4a 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014af8:	2001      	movs	r0, #1
 8014afa:	f7f2 fb59 	bl	80071b0 <pl_l_blue_LED>
			HAL_Delay(1000);
 8014afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014b02:	f002 ffdd 	bl	8017ac0 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8014b06:	e011      	b.n	8014b2c <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8014b08:	4b1e      	ldr	r3, [pc, #120]	; (8014b84 <mode_decision+0x1e8>)
 8014b0a:	edd3 7a00 	vldr	s15, [r3]
 8014b0e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8014b88 <mode_decision+0x1ec>
 8014b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1a:	db04      	blt.n	8014b26 <mode_decision+0x18a>
					main_modeL = 0;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8014b20:	2300      	movs	r3, #0
 8014b22:	73fb      	strb	r3, [r7, #15]
					break;
 8014b24:	e013      	b.n	8014b4e <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8014b26:	2001      	movs	r0, #1
 8014b28:	f002 ffca 	bl	8017ac0 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8014b2c:	4b17      	ldr	r3, [pc, #92]	; (8014b8c <mode_decision+0x1f0>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b34:	dde8      	ble.n	8014b08 <mode_decision+0x16c>
 8014b36:	4b15      	ldr	r3, [pc, #84]	; (8014b8c <mode_decision+0x1f0>)
 8014b38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014b3c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b40:	dde2      	ble.n	8014b08 <mode_decision+0x16c>
 8014b42:	4b12      	ldr	r3, [pc, #72]	; (8014b8c <mode_decision+0x1f0>)
 8014b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014b48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b4c:	dddc      	ble.n	8014b08 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8014b4e:	2000      	movs	r0, #0
 8014b50:	f7f2 fb1c 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014b54:	2000      	movs	r0, #0
 8014b56:	f7f2 fb2b 	bl	80071b0 <pl_l_blue_LED>
			pl_yellow_LED_off();
 8014b5a:	f7f2 fa2d 	bl	8006fb8 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8014b5e:	7bbb      	ldrb	r3, [r7, #14]
 8014b60:	011b      	lsls	r3, r3, #4
 8014b62:	b25a      	sxtb	r2, r3
 8014b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b68:	4313      	orrs	r3, r2
 8014b6a:	b25b      	sxtb	r3, r3
 8014b6c:	737b      	strb	r3, [r7, #13]

return main_mode;
 8014b6e:	7b7b      	ldrb	r3, [r7, #13]
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3710      	adds	r7, #16
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	41200000 	.word	0x41200000
 8014b7c:	20000224 	.word	0x20000224
 8014b80:	20000220 	.word	0x20000220
 8014b84:	20000270 	.word	0x20000270
 8014b88:	43c80000 	.word	0x43c80000
 8014b8c:	200002b8 	.word	0x200002b8

08014b90 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8014b90:	b590      	push	{r4, r7, lr}
 8014b92:	b0d7      	sub	sp, #348	; 0x15c
 8014b94:	af52      	add	r7, sp, #328	; 0x148
 8014b96:	4603      	mov	r3, r0
 8014b98:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8014ba2:	79fb      	ldrb	r3, [r7, #7]
 8014ba4:	f003 030f 	and.w	r3, r3, #15
 8014ba8:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014baa:	79fb      	ldrb	r3, [r7, #7]
 8014bac:	091b      	lsrs	r3, r3, #4
 8014bae:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8014bb0:	7bbb      	ldrb	r3, [r7, #14]
 8014bb2:	2b0f      	cmp	r3, #15
 8014bb4:	d854      	bhi.n	8014c60 <mode_execution+0xd0>
 8014bb6:	a201      	add	r2, pc, #4	; (adr r2, 8014bbc <mode_execution+0x2c>)
 8014bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bbc:	08014bfd 	.word	0x08014bfd
 8014bc0:	08014c07 	.word	0x08014c07
 8014bc4:	08014c5f 	.word	0x08014c5f
 8014bc8:	08014c11 	.word	0x08014c11
 8014bcc:	08014c1b 	.word	0x08014c1b
 8014bd0:	08014c25 	.word	0x08014c25
 8014bd4:	08014c55 	.word	0x08014c55
 8014bd8:	08014c5f 	.word	0x08014c5f
 8014bdc:	08014c5f 	.word	0x08014c5f
 8014be0:	08014c5f 	.word	0x08014c5f
 8014be4:	08014c5f 	.word	0x08014c5f
 8014be8:	08014c5f 	.word	0x08014c5f
 8014bec:	08014c5f 	.word	0x08014c5f
 8014bf0:	08014c5f 	.word	0x08014c5f
 8014bf4:	08014c5f 	.word	0x08014c5f
 8014bf8:	08014c5f 	.word	0x08014c5f
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8014bfc:	7bfb      	ldrb	r3, [r7, #15]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f000 f836 	bl	8014c70 <mode_PLtest>
	break;
 8014c04:	e02c      	b.n	8014c60 <mode_execution+0xd0>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8014c06:	7bfb      	ldrb	r3, [r7, #15]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f000 f9f1 	bl	8014ff0 <mode_Running>
	break;
 8014c0e:	e027      	b.n	8014c60 <mode_execution+0xd0>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8014c10:	7bfb      	ldrb	r3, [r7, #15]
 8014c12:	4618      	mov	r0, r3
 8014c14:	f000 fb7e 	bl	8015314 <mode_Tuning0>
	break;
 8014c18:	e022      	b.n	8014c60 <mode_execution+0xd0>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8014c1a:	7bfb      	ldrb	r3, [r7, #15]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f000 fe89 	bl	8015934 <mode_WallSensorTuning>
	break;
 8014c22:	e01d      	b.n	8014c60 <mode_execution+0xd0>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8014c24:	7bfb      	ldrb	r3, [r7, #15]
 8014c26:	4c10      	ldr	r4, [pc, #64]	; (8014c68 <mode_execution+0xd8>)
 8014c28:	2201      	movs	r2, #1
 8014c2a:	9251      	str	r2, [sp, #324]	; 0x144
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	9250      	str	r2, [sp, #320]	; 0x140
 8014c30:	2201      	movs	r2, #1
 8014c32:	924f      	str	r2, [sp, #316]	; 0x13c
 8014c34:	934e      	str	r3, [sp, #312]	; 0x138
 8014c36:	4668      	mov	r0, sp
 8014c38:	f104 0310 	add.w	r3, r4, #16
 8014c3c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014c40:	4619      	mov	r1, r3
 8014c42:	f00a fa0f 	bl	801f064 <memcpy>
 8014c46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c4a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014c6c <mode_execution+0xdc>
 8014c4e:	f7f9 f907 	bl	800de60 <testturning>
	break;
 8014c52:	e005      	b.n	8014c60 <mode_execution+0xd0>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8014c54:	7bfb      	ldrb	r3, [r7, #15]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f001 f8aa 	bl	8015db0 <mode_WallSensorTuning_fast>
	break;
 8014c5c:	e000      	b.n	8014c60 <mode_execution+0xd0>
	break;
 8014c5e:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8014c60:	bf00      	nop
 8014c62:	3714      	adds	r7, #20
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd90      	pop	{r4, r7, pc}
 8014c68:	2000df04 	.word	0x2000df04
 8014c6c:	3f028f5c 	.word	0x3f028f5c

08014c70 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8014c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014c74:	b092      	sub	sp, #72	; 0x48
 8014c76:	af0a      	add	r7, sp, #40	; 0x28
 8014c78:	4603      	mov	r3, r0
 8014c7a:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	61fb      	str	r3, [r7, #28]
 8014c80:	2300      	movs	r3, #0
 8014c82:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8014c84:	7dfb      	ldrb	r3, [r7, #23]
 8014c86:	2b0f      	cmp	r3, #15
 8014c88:	f200 819f 	bhi.w	8014fca <mode_PLtest+0x35a>
 8014c8c:	a201      	add	r2, pc, #4	; (adr r2, 8014c94 <mode_PLtest+0x24>)
 8014c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c92:	bf00      	nop
 8014c94:	08014fc9 	.word	0x08014fc9
 8014c98:	08014cd5 	.word	0x08014cd5
 8014c9c:	08014d07 	.word	0x08014d07
 8014ca0:	08014d83 	.word	0x08014d83
 8014ca4:	08014de7 	.word	0x08014de7
 8014ca8:	08014e67 	.word	0x08014e67
 8014cac:	08014e6d 	.word	0x08014e6d
 8014cb0:	08014fcb 	.word	0x08014fcb
 8014cb4:	08014fcb 	.word	0x08014fcb
 8014cb8:	08014ef3 	.word	0x08014ef3
 8014cbc:	08014f5b 	.word	0x08014f5b
 8014cc0:	08014fcb 	.word	0x08014fcb
 8014cc4:	08014fcb 	.word	0x08014fcb
 8014cc8:	08014fcb 	.word	0x08014fcb
 8014ccc:	08014fcb 	.word	0x08014fcb
 8014cd0:	08014fc3 	.word	0x08014fc3
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014cd4:	4bbf      	ldr	r3, [pc, #764]	; (8014fd4 <mode_PLtest+0x364>)
 8014cd6:	6819      	ldr	r1, [r3, #0]
 8014cd8:	4bbe      	ldr	r3, [pc, #760]	; (8014fd4 <mode_PLtest+0x364>)
 8014cda:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014cdc:	4bbd      	ldr	r3, [pc, #756]	; (8014fd4 <mode_PLtest+0x364>)
 8014cde:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8014ce2:	4bbc      	ldr	r3, [pc, #752]	; (8014fd4 <mode_PLtest+0x364>)
 8014ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014ce8:	4aba      	ldr	r2, [pc, #744]	; (8014fd4 <mode_PLtest+0x364>)
 8014cea:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8014cee:	9201      	str	r2, [sp, #4]
 8014cf0:	9300      	str	r3, [sp, #0]
 8014cf2:	4623      	mov	r3, r4
 8014cf4:	4602      	mov	r2, r0
 8014cf6:	48b8      	ldr	r0, [pc, #736]	; (8014fd8 <mode_PLtest+0x368>)
 8014cf8:	f00a fe34 	bl	801f964 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8014cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014d00:	f7f3 f9ee 	bl	80080e0 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014d04:	e7e6      	b.n	8014cd4 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8014d06:	2001      	movs	r0, #1
 8014d08:	f7f2 fa40 	bl	800718c <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014d0c:	2001      	movs	r0, #1
 8014d0e:	f7f2 fa4f 	bl	80071b0 <pl_l_blue_LED>
		record_mode = 1;
 8014d12:	4bb2      	ldr	r3, [pc, #712]	; (8014fdc <mode_PLtest+0x36c>)
 8014d14:	2201      	movs	r2, #1
 8014d16:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8014d18:	f44f 7161 	mov.w	r1, #900	; 0x384
 8014d1c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014d20:	f7f2 ff64 	bl	8007bec <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8014d24:	2001      	movs	r0, #1
 8014d26:	f7f2 ff1f 	bl	8007b68 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8014d2a:	2001      	movs	r0, #1
 8014d2c:	f7f2 fef4 	bl	8007b18 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8014d30:	f7f2 ff40 	bl	8007bb4 <pl_DriveMotor_start>
		wait_ms(2500);
 8014d34:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014d38:	f7f3 f9d2 	bl	80080e0 <wait_ms>
		pl_DriveMotor_stop();
 8014d3c:	f7f2 ff48 	bl	8007bd0 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014d40:	2000      	movs	r0, #0
 8014d42:	f7f2 fa23 	bl	800718c <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014d46:	2000      	movs	r0, #0
 8014d48:	f7f2 fa32 	bl	80071b0 <pl_l_blue_LED>
		record_mode = 0;
 8014d4c:	4ba3      	ldr	r3, [pc, #652]	; (8014fdc <mode_PLtest+0x36c>)
 8014d4e:	2200      	movs	r2, #0
 8014d50:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014d52:	e002      	b.n	8014d5a <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014d54:	2001      	movs	r0, #1
 8014d56:	f7f3 f9c3 	bl	80080e0 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014d5a:	4b9e      	ldr	r3, [pc, #632]	; (8014fd4 <mode_PLtest+0x364>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d62:	ddf7      	ble.n	8014d54 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014d64:	4b9b      	ldr	r3, [pc, #620]	; (8014fd4 <mode_PLtest+0x364>)
 8014d66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014d6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d6e:	ddf1      	ble.n	8014d54 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014d70:	4b98      	ldr	r3, [pc, #608]	; (8014fd4 <mode_PLtest+0x364>)
 8014d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014d76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d7a:	ddeb      	ble.n	8014d54 <mode_PLtest+0xe4>
		}
		record_print();
 8014d7c:	f001 fa82 	bl	8016284 <record_print>
		break;
 8014d80:	e123      	b.n	8014fca <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 8014d82:	f7ec fd3d 	bl	8001800 <reset_gyro>
		reset_speed();
 8014d86:	f7ec f947 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 8014d8a:	2001      	movs	r0, #1
 8014d8c:	f7f2 f9fe 	bl	800718c <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014d90:	2001      	movs	r0, #1
 8014d92:	f7f2 fa0d 	bl	80071b0 <pl_l_blue_LED>
		record_mode = 2;
 8014d96:	4b91      	ldr	r3, [pc, #580]	; (8014fdc <mode_PLtest+0x36c>)
 8014d98:	2202      	movs	r2, #2
 8014d9a:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8014d9c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014da0:	f7f3 f99e 	bl	80080e0 <wait_ms>
		pl_r_blue_LED(OFF);
 8014da4:	2000      	movs	r0, #0
 8014da6:	f7f2 f9f1 	bl	800718c <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014daa:	2000      	movs	r0, #0
 8014dac:	f7f2 fa00 	bl	80071b0 <pl_l_blue_LED>
		record_mode = 0;
 8014db0:	4b8a      	ldr	r3, [pc, #552]	; (8014fdc <mode_PLtest+0x36c>)
 8014db2:	2200      	movs	r2, #0
 8014db4:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014db6:	e002      	b.n	8014dbe <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014db8:	2001      	movs	r0, #1
 8014dba:	f7f3 f991 	bl	80080e0 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014dbe:	4b85      	ldr	r3, [pc, #532]	; (8014fd4 <mode_PLtest+0x364>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014dc6:	ddf7      	ble.n	8014db8 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014dc8:	4b82      	ldr	r3, [pc, #520]	; (8014fd4 <mode_PLtest+0x364>)
 8014dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014dce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014dd2:	ddf1      	ble.n	8014db8 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014dd4:	4b7f      	ldr	r3, [pc, #508]	; (8014fd4 <mode_PLtest+0x364>)
 8014dd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014dda:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014dde:	ddeb      	ble.n	8014db8 <mode_PLtest+0x148>
		}
		record_print();
 8014de0:	f001 fa50 	bl	8016284 <record_print>
		break;
 8014de4:	e0f1      	b.n	8014fca <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014de6:	4b7e      	ldr	r3, [pc, #504]	; (8014fe0 <mode_PLtest+0x370>)
 8014de8:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7eb fbd4 	bl	8000598 <__aeabi_f2d>
 8014df0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014df4:	4b7a      	ldr	r3, [pc, #488]	; (8014fe0 <mode_PLtest+0x370>)
 8014df6:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7eb fbcd 	bl	8000598 <__aeabi_f2d>
 8014dfe:	4604      	mov	r4, r0
 8014e00:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014e02:	4b77      	ldr	r3, [pc, #476]	; (8014fe0 <mode_PLtest+0x370>)
 8014e04:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7eb fbc6 	bl	8000598 <__aeabi_f2d>
 8014e0c:	4680      	mov	r8, r0
 8014e0e:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014e10:	4b73      	ldr	r3, [pc, #460]	; (8014fe0 <mode_PLtest+0x370>)
 8014e12:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7eb fbbf 	bl	8000598 <__aeabi_f2d>
 8014e1a:	4682      	mov	sl, r0
 8014e1c:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014e1e:	4b70      	ldr	r3, [pc, #448]	; (8014fe0 <mode_PLtest+0x370>)
 8014e20:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7eb fbb8 	bl	8000598 <__aeabi_f2d>
 8014e28:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014e2c:	4b6c      	ldr	r3, [pc, #432]	; (8014fe0 <mode_PLtest+0x370>)
 8014e2e:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7eb fbb1 	bl	8000598 <__aeabi_f2d>
 8014e36:	4602      	mov	r2, r0
 8014e38:	460b      	mov	r3, r1
 8014e3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014e3e:	ed97 7b00 	vldr	d7, [r7]
 8014e42:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014e46:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8014e4a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014e4e:	e9cd 4500 	strd	r4, r5, [sp]
 8014e52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014e56:	4863      	ldr	r0, [pc, #396]	; (8014fe4 <mode_PLtest+0x374>)
 8014e58:	f00a fd84 	bl	801f964 <iprintf>
			wait_ms(500);
 8014e5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014e60:	f7f3 f93e 	bl	80080e0 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014e64:	e7bf      	b.n	8014de6 <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8014e66:	f7f2 fae1 	bl	800742c <test_flash>
		break;
 8014e6a:	e0ae      	b.n	8014fca <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 8014e6c:	4b5b      	ldr	r3, [pc, #364]	; (8014fdc <mode_PLtest+0x36c>)
 8014e6e:	2206      	movs	r2, #6
 8014e70:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8014e72:	2001      	movs	r0, #1
 8014e74:	f7f2 f98a 	bl	800718c <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014e78:	2001      	movs	r0, #1
 8014e7a:	f7f2 f999 	bl	80071b0 <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8014e7e:	f107 0218 	add.w	r2, r7, #24
 8014e82:	f107 031c 	add.w	r3, r7, #28
 8014e86:	4611      	mov	r1, r2
 8014e88:	4618      	mov	r0, r3
 8014e8a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8014e8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014e92:	f7ed f833 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8014e96:	69fb      	ldr	r3, [r7, #28]
 8014e98:	69ba      	ldr	r2, [r7, #24]
 8014e9a:	4611      	mov	r1, r2
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7f2 fea5 	bl	8007bec <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8014ea2:	f7f2 fe87 	bl	8007bb4 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014ea6:	e00a      	b.n	8014ebe <mode_PLtest+0x24e>
			wait_ms(1);
 8014ea8:	2001      	movs	r0, #1
 8014eaa:	f7f3 f919 	bl	80080e0 <wait_ms>
			if(record_rupe_flag==1){
 8014eae:	4b4e      	ldr	r3, [pc, #312]	; (8014fe8 <mode_PLtest+0x378>)
 8014eb0:	781b      	ldrb	r3, [r3, #0]
 8014eb2:	2b01      	cmp	r3, #1
 8014eb4:	d103      	bne.n	8014ebe <mode_PLtest+0x24e>
				record_mode=0;
 8014eb6:	4b49      	ldr	r3, [pc, #292]	; (8014fdc <mode_PLtest+0x36c>)
 8014eb8:	2200      	movs	r2, #0
 8014eba:	701a      	strb	r2, [r3, #0]
				break;
 8014ebc:	e010      	b.n	8014ee0 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014ebe:	4b45      	ldr	r3, [pc, #276]	; (8014fd4 <mode_PLtest+0x364>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014ec6:	ddef      	ble.n	8014ea8 <mode_PLtest+0x238>
 8014ec8:	4b42      	ldr	r3, [pc, #264]	; (8014fd4 <mode_PLtest+0x364>)
 8014eca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014ece:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014ed2:	dde9      	ble.n	8014ea8 <mode_PLtest+0x238>
 8014ed4:	4b3f      	ldr	r3, [pc, #252]	; (8014fd4 <mode_PLtest+0x364>)
 8014ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014eda:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014ede:	dde3      	ble.n	8014ea8 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8014ee0:	f7f2 fe76 	bl	8007bd0 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	f7f2 f951 	bl	800718c <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014eea:	2000      	movs	r0, #0
 8014eec:	f7f2 f960 	bl	80071b0 <pl_l_blue_LED>

		break;
 8014ef0:	e06b      	b.n	8014fca <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8014ef2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014ef6:	f7f2 fea3 	bl	8007c40 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8014efa:	f7f2 fe8d 	bl	8007c18 <pl_FunMotor_start>
			HAL_Delay(2000);
 8014efe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014f02:	f002 fddd 	bl	8017ac0 <HAL_Delay>
			reset_gyro();
 8014f06:	f7ec fc7b 	bl	8001800 <reset_gyro>
			reset_speed();
 8014f0a:	f7ec f885 	bl	8001018 <reset_speed>
			clear_Ierror();
 8014f0e:	f7ef fce5 	bl	80048dc <clear_Ierror>
			pl_r_blue_LED(ON);
 8014f12:	2001      	movs	r0, #1
 8014f14:	f7f2 f93a 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014f18:	2001      	movs	r0, #1
 8014f1a:	f7f2 f949 	bl	80071b0 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014f1e:	e002      	b.n	8014f26 <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8014f20:	2001      	movs	r0, #1
 8014f22:	f002 fdcd 	bl	8017ac0 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014f26:	4b2b      	ldr	r3, [pc, #172]	; (8014fd4 <mode_PLtest+0x364>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014f2e:	ddf7      	ble.n	8014f20 <mode_PLtest+0x2b0>
 8014f30:	4b28      	ldr	r3, [pc, #160]	; (8014fd4 <mode_PLtest+0x364>)
 8014f32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014f36:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014f3a:	ddf1      	ble.n	8014f20 <mode_PLtest+0x2b0>
 8014f3c:	4b25      	ldr	r3, [pc, #148]	; (8014fd4 <mode_PLtest+0x364>)
 8014f3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014f42:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014f46:	ddeb      	ble.n	8014f20 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8014f48:	2000      	movs	r0, #0
 8014f4a:	f7f2 f91f 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014f4e:	2000      	movs	r0, #0
 8014f50:	f7f2 f92e 	bl	80071b0 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8014f54:	f7f2 fe6a 	bl	8007c2c <pl_FunMotor_stop>
		break;
 8014f58:	e037      	b.n	8014fca <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8014f5a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8014fec <mode_PLtest+0x37c>
 8014f5e:	f7f2 fe6f 	bl	8007c40 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8014f62:	f7f2 fe59 	bl	8007c18 <pl_FunMotor_start>
			HAL_Delay(2000);
 8014f66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014f6a:	f002 fda9 	bl	8017ac0 <HAL_Delay>
			reset_gyro();
 8014f6e:	f7ec fc47 	bl	8001800 <reset_gyro>
			reset_speed();
 8014f72:	f7ec f851 	bl	8001018 <reset_speed>
			clear_Ierror();
 8014f76:	f7ef fcb1 	bl	80048dc <clear_Ierror>
			pl_r_blue_LED(ON);
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	f7f2 f906 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014f80:	2001      	movs	r0, #1
 8014f82:	f7f2 f915 	bl	80071b0 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014f86:	e002      	b.n	8014f8e <mode_PLtest+0x31e>
				HAL_Delay(1);
 8014f88:	2001      	movs	r0, #1
 8014f8a:	f002 fd99 	bl	8017ac0 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014f8e:	4b11      	ldr	r3, [pc, #68]	; (8014fd4 <mode_PLtest+0x364>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014f96:	ddf7      	ble.n	8014f88 <mode_PLtest+0x318>
 8014f98:	4b0e      	ldr	r3, [pc, #56]	; (8014fd4 <mode_PLtest+0x364>)
 8014f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014f9e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014fa2:	ddf1      	ble.n	8014f88 <mode_PLtest+0x318>
 8014fa4:	4b0b      	ldr	r3, [pc, #44]	; (8014fd4 <mode_PLtest+0x364>)
 8014fa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014faa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014fae:	ddeb      	ble.n	8014f88 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 8014fb0:	2000      	movs	r0, #0
 8014fb2:	f7f2 f8eb 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014fb6:	2000      	movs	r0, #0
 8014fb8:	f7f2 f8fa 	bl	80071b0 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8014fbc:	f7f2 fe36 	bl	8007c2c <pl_FunMotor_stop>
		break;
 8014fc0:	e003      	b.n	8014fca <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 8014fc2:	f001 f95f 	bl	8016284 <record_print>
		break;
 8014fc6:	e000      	b.n	8014fca <mode_PLtest+0x35a>
		break;
 8014fc8:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 8014fca:	bf00      	nop
 8014fcc:	3720      	adds	r7, #32
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014fd4:	200002b8 	.word	0x200002b8
 8014fd8:	08022304 	.word	0x08022304
 8014fdc:	2000d96c 	.word	0x2000d96c
 8014fe0:	200006e4 	.word	0x200006e4
 8014fe4:	08022330 	.word	0x08022330
 8014fe8:	2000d978 	.word	0x2000d978
 8014fec:	3f7d70a4 	.word	0x3f7d70a4

08014ff0 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8014ff0:	b5b0      	push	{r4, r5, r7, lr}
 8014ff2:	b0dc      	sub	sp, #368	; 0x170
 8014ff4:	af54      	add	r7, sp, #336	; 0x150
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	71fb      	strb	r3, [r7, #7]
	int a=0;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	61fb      	str	r3, [r7, #28]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8014ffe:	2003      	movs	r0, #3
 8015000:	f7f2 fd8a 	bl	8007b18 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015004:	2003      	movs	r0, #3
 8015006:	f7f2 fdaf 	bl	8007b68 <pl_R_DriveMotor_mode>
	reset_gyro();
 801500a:	f7ec fbf9 	bl	8001800 <reset_gyro>
	reset_speed();
 801500e:	f7ec f803 	bl	8001018 <reset_speed>
	reset_distance();
 8015012:	f7eb ffc3 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015016:	f7ef fc61 	bl	80048dc <clear_Ierror>
	switch (main_modeR) {
 801501a:	79fb      	ldrb	r3, [r7, #7]
 801501c:	2b0f      	cmp	r3, #15
 801501e:	f200 8155 	bhi.w	80152cc <mode_Running+0x2dc>
 8015022:	a201      	add	r2, pc, #4	; (adr r2, 8015028 <mode_Running+0x38>)
 8015024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015028:	08015069 	.word	0x08015069
 801502c:	08015131 	.word	0x08015131
 8015030:	08015169 	.word	0x08015169
 8015034:	0801516f 	.word	0x0801516f
 8015038:	080151a7 	.word	0x080151a7
 801503c:	080151d9 	.word	0x080151d9
 8015040:	0801520b 	.word	0x0801520b
 8015044:	0801523d 	.word	0x0801523d
 8015048:	0801526f 	.word	0x0801526f
 801504c:	08015275 	.word	0x08015275
 8015050:	0801527b 	.word	0x0801527b
 8015054:	08015281 	.word	0x08015281
 8015058:	08015287 	.word	0x08015287
 801505c:	0801528d 	.word	0x0801528d
 8015060:	08015293 	.word	0x08015293
 8015064:	08015299 	.word	0x08015299
//
//			route_Dijkstra();
//			create_StepCountMap_unknown();
//			maze_display();

			tic_timer();
 8015068:	f7f3 f80c 	bl	8008084 <tic_timer>
			for(int j=0;j<50000;j++){
 801506c:	2300      	movs	r3, #0
 801506e:	61bb      	str	r3, [r7, #24]
 8015070:	e005      	b.n	801507e <mode_Running+0x8e>
				a=a+1;
 8015072:	69fb      	ldr	r3, [r7, #28]
 8015074:	3301      	adds	r3, #1
 8015076:	61fb      	str	r3, [r7, #28]
			for(int j=0;j<50000;j++){
 8015078:	69bb      	ldr	r3, [r7, #24]
 801507a:	3301      	adds	r3, #1
 801507c:	61bb      	str	r3, [r7, #24]
 801507e:	69bb      	ldr	r3, [r7, #24]
 8015080:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8015084:	4293      	cmp	r3, r2
 8015086:	ddf4      	ble.n	8015072 <mode_Running+0x82>
			}
			float tim1 = toc_timer();
 8015088:	f7f3 f80e 	bl	80080a8 <toc_timer>
 801508c:	ed87 0a03 	vstr	s0, [r7, #12]
			printf("tim1=%f\n", tim1);
 8015090:	68f8      	ldr	r0, [r7, #12]
 8015092:	f7eb fa81 	bl	8000598 <__aeabi_f2d>
 8015096:	4602      	mov	r2, r0
 8015098:	460b      	mov	r3, r1
 801509a:	488e      	ldr	r0, [pc, #568]	; (80152d4 <mode_Running+0x2e4>)
 801509c:	f00a fc62 	bl	801f964 <iprintf>

			tic_timer();
 80150a0:	f7f2 fff0 	bl	8008084 <tic_timer>
			for(int j=0;j<5000;j++){
 80150a4:	2300      	movs	r3, #0
 80150a6:	617b      	str	r3, [r7, #20]
 80150a8:	e004      	b.n	80150b4 <mode_Running+0xc4>
			create_StepCountMap_queue();
 80150aa:	f7fe fecd 	bl	8013e48 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	3301      	adds	r3, #1
 80150b2:	617b      	str	r3, [r7, #20]
 80150b4:	697b      	ldr	r3, [r7, #20]
 80150b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80150ba:	4293      	cmp	r3, r2
 80150bc:	ddf5      	ble.n	80150aa <mode_Running+0xba>
			}
			float tim2 = toc_timer();
 80150be:	f7f2 fff3 	bl	80080a8 <toc_timer>
 80150c2:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 80150c6:	f7ff fa63 	bl	8014590 <maze_display>
			printf("tim2=%f\n", tim2);
 80150ca:	68b8      	ldr	r0, [r7, #8]
 80150cc:	f7eb fa64 	bl	8000598 <__aeabi_f2d>
 80150d0:	4602      	mov	r2, r0
 80150d2:	460b      	mov	r3, r1
 80150d4:	4880      	ldr	r0, [pc, #512]	; (80152d8 <mode_Running+0x2e8>)
 80150d6:	f00a fc45 	bl	801f964 <iprintf>
			tic_timer();
 80150da:	f7f2 ffd3 	bl	8008084 <tic_timer>
			for(int j=0;j<5000;j++){
 80150de:	2300      	movs	r3, #0
 80150e0:	613b      	str	r3, [r7, #16]
 80150e2:	e006      	b.n	80150f2 <mode_Running+0x102>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 80150e4:	f7fe f80e 	bl	8013104 <route_Dijkstra>
			create_StepCountMap_unknown();
 80150e8:	f7fe fce2 	bl	8013ab0 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	3301      	adds	r3, #1
 80150f0:	613b      	str	r3, [r7, #16]
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	f241 3287 	movw	r2, #4999	; 0x1387
 80150f8:	4293      	cmp	r3, r2
 80150fa:	ddf3      	ble.n	80150e4 <mode_Running+0xf4>

			}
			tim1 = toc_timer();
 80150fc:	f7f2 ffd4 	bl	80080a8 <toc_timer>
 8015100:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 8015104:	f7ff fa44 	bl	8014590 <maze_display>
			maze_display_Dijkstra();
 8015108:	f7ff fb60 	bl	80147cc <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 801510c:	68f8      	ldr	r0, [r7, #12]
 801510e:	f7eb fa43 	bl	8000598 <__aeabi_f2d>
 8015112:	4604      	mov	r4, r0
 8015114:	460d      	mov	r5, r1
 8015116:	68b8      	ldr	r0, [r7, #8]
 8015118:	f7eb fa3e 	bl	8000598 <__aeabi_f2d>
 801511c:	4602      	mov	r2, r0
 801511e:	460b      	mov	r3, r1
 8015120:	e9cd 2300 	strd	r2, r3, [sp]
 8015124:	4622      	mov	r2, r4
 8015126:	462b      	mov	r3, r5
 8015128:	486c      	ldr	r0, [pc, #432]	; (80152dc <mode_Running+0x2ec>)
 801512a:	f00a fc1b 	bl	801f964 <iprintf>
		break;
 801512e:	e0cd      	b.n	80152cc <mode_Running+0x2dc>
		case 0b0001://足立法(遅い)
			tic_timer();
 8015130:	f7f2 ffa8 	bl	8008084 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8015134:	4c6a      	ldr	r4, [pc, #424]	; (80152e0 <mode_Running+0x2f0>)
 8015136:	2300      	movs	r3, #0
 8015138:	934f      	str	r3, [sp, #316]	; 0x13c
 801513a:	2301      	movs	r3, #1
 801513c:	934e      	str	r3, [sp, #312]	; 0x138
 801513e:	4668      	mov	r0, sp
 8015140:	f104 0310 	add.w	r3, r4, #16
 8015144:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015148:	4619      	mov	r1, r3
 801514a:	f009 ff8b 	bl	801f064 <memcpy>
 801514e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015152:	eddf 1a64 	vldr	s3, [pc, #400]	; 80152e4 <mode_Running+0x2f4>
 8015156:	ed9f 1a64 	vldr	s2, [pc, #400]	; 80152e8 <mode_Running+0x2f8>
 801515a:	eddf 0a64 	vldr	s1, [pc, #400]	; 80152ec <mode_Running+0x2fc>
 801515e:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80152f0 <mode_Running+0x300>
 8015162:	f7f9 f837 	bl	800e1d4 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8015166:	e0b1      	b.n	80152cc <mode_Running+0x2dc>
		case 0b0010://Flashから
			record_out();
 8015168:	f7f2 fa7e 	bl	8007668 <record_out>
		break;
 801516c:	e0ae      	b.n	80152cc <mode_Running+0x2dc>
		case 0b0011://ゴミ
			tic_timer();
 801516e:	f7f2 ff89 	bl	8008084 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8015172:	4c5b      	ldr	r4, [pc, #364]	; (80152e0 <mode_Running+0x2f0>)
 8015174:	2301      	movs	r3, #1
 8015176:	934f      	str	r3, [sp, #316]	; 0x13c
 8015178:	2301      	movs	r3, #1
 801517a:	934e      	str	r3, [sp, #312]	; 0x138
 801517c:	4668      	mov	r0, sp
 801517e:	f104 0310 	add.w	r3, r4, #16
 8015182:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015186:	4619      	mov	r1, r3
 8015188:	f009 ff6c 	bl	801f064 <memcpy>
 801518c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015190:	eddf 1a54 	vldr	s3, [pc, #336]	; 80152e4 <mode_Running+0x2f4>
 8015194:	ed9f 1a54 	vldr	s2, [pc, #336]	; 80152e8 <mode_Running+0x2f8>
 8015198:	eddf 0a54 	vldr	s1, [pc, #336]	; 80152ec <mode_Running+0x2fc>
 801519c:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80152f0 <mode_Running+0x300>
 80151a0:	f7f9 f818 	bl	800e1d4 <AdatiWayReturn>
		break;
 80151a4:	e092      	b.n	80152cc <mode_Running+0x2dc>
		case 0b0100://ゴミ
			record_out();
 80151a6:	f7f2 fa5f 	bl	8007668 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 80151aa:	2300      	movs	r3, #0
 80151ac:	9352      	str	r3, [sp, #328]	; 0x148
 80151ae:	4a51      	ldr	r2, [pc, #324]	; (80152f4 <mode_Running+0x304>)
 80151b0:	466b      	mov	r3, sp
 80151b2:	4611      	mov	r1, r2
 80151b4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80151b8:	4618      	mov	r0, r3
 80151ba:	f009 ff53 	bl	801f064 <memcpy>
 80151be:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 80152f8 <mode_Running+0x308>
 80151c2:	2300      	movs	r3, #0
 80151c4:	2200      	movs	r2, #0
 80151c6:	2100      	movs	r1, #0
 80151c8:	2000      	movs	r0, #0
 80151ca:	eddf 0a46 	vldr	s1, [pc, #280]	; 80152e4 <mode_Running+0x2f4>
 80151ce:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80152fc <mode_Running+0x30c>
 80151d2:	f7f9 ffa5 	bl	800f120 <run_shortest>
		break;
 80151d6:	e079      	b.n	80152cc <mode_Running+0x2dc>
		case 0b0101://
			record_out();
 80151d8:	f7f2 fa46 	bl	8007668 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 80151dc:	2301      	movs	r3, #1
 80151de:	9352      	str	r3, [sp, #328]	; 0x148
 80151e0:	4a47      	ldr	r2, [pc, #284]	; (8015300 <mode_Running+0x310>)
 80151e2:	466b      	mov	r3, sp
 80151e4:	4611      	mov	r1, r2
 80151e6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80151ea:	4618      	mov	r0, r3
 80151ec:	f009 ff3a 	bl	801f064 <memcpy>
 80151f0:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80152f8 <mode_Running+0x308>
 80151f4:	2300      	movs	r3, #0
 80151f6:	2200      	movs	r2, #0
 80151f8:	2101      	movs	r1, #1
 80151fa:	2000      	movs	r0, #0
 80151fc:	eddf 0a39 	vldr	s1, [pc, #228]	; 80152e4 <mode_Running+0x2f4>
 8015200:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80152fc <mode_Running+0x30c>
 8015204:	f7f9 ff8c 	bl	800f120 <run_shortest>
		break;
 8015208:	e060      	b.n	80152cc <mode_Running+0x2dc>
		case 0b0110://吸引なしで斜め走行
			record_out();
 801520a:	f7f2 fa2d 	bl	8007668 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 801520e:	2301      	movs	r3, #1
 8015210:	9352      	str	r3, [sp, #328]	; 0x148
 8015212:	4a3b      	ldr	r2, [pc, #236]	; (8015300 <mode_Running+0x310>)
 8015214:	466b      	mov	r3, sp
 8015216:	4611      	mov	r1, r2
 8015218:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801521c:	4618      	mov	r0, r3
 801521e:	f009 ff21 	bl	801f064 <memcpy>
 8015222:	ed9f 1a35 	vldr	s2, [pc, #212]	; 80152f8 <mode_Running+0x308>
 8015226:	2301      	movs	r3, #1
 8015228:	2200      	movs	r2, #0
 801522a:	2101      	movs	r1, #1
 801522c:	2000      	movs	r0, #0
 801522e:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80152e4 <mode_Running+0x2f4>
 8015232:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80152fc <mode_Running+0x30c>
 8015236:	f7f9 ff73 	bl	800f120 <run_shortest>
		break;
 801523a:	e047      	b.n	80152cc <mode_Running+0x2dc>
		case 0b0111://吸引ありで斜め走行
			record_out();
 801523c:	f7f2 fa14 	bl	8007668 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed600_shortest_mollifier,0.99,1);
 8015240:	2301      	movs	r3, #1
 8015242:	9352      	str	r3, [sp, #328]	; 0x148
 8015244:	4a2e      	ldr	r2, [pc, #184]	; (8015300 <mode_Running+0x310>)
 8015246:	466b      	mov	r3, sp
 8015248:	4611      	mov	r1, r2
 801524a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801524e:	4618      	mov	r0, r3
 8015250:	f009 ff08 	bl	801f064 <memcpy>
 8015254:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8015304 <mode_Running+0x314>
 8015258:	2301      	movs	r3, #1
 801525a:	2201      	movs	r2, #1
 801525c:	2101      	movs	r1, #1
 801525e:	2000      	movs	r0, #0
 8015260:	eddf 0a29 	vldr	s1, [pc, #164]	; 8015308 <mode_Running+0x318>
 8015264:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80152e4 <mode_Running+0x2f4>
 8015268:	f7f9 ff5a 	bl	800f120 <run_shortest>
		break;
 801526c:	e02e      	b.n	80152cc <mode_Running+0x2dc>
		case 0b1000://
			record_out();
 801526e:	f7f2 f9fb 	bl	8007668 <record_out>
			//run_shortest(2000,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed500_shortest,0.3,0);
		break;
 8015272:	e02b      	b.n	80152cc <mode_Running+0x2dc>
		case 0b1001:
			record_out();
 8015274:	f7f2 f9f8 	bl	8007668 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015278:	e028      	b.n	80152cc <mode_Running+0x2dc>
		case 0b1010:
			record_out();
 801527a:	f7f2 f9f5 	bl	8007668 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 801527e:	e025      	b.n	80152cc <mode_Running+0x2dc>
		case 0b1011:
			record_out();
 8015280:	f7f2 f9f2 	bl	8007668 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015284:	e022      	b.n	80152cc <mode_Running+0x2dc>
		case 0b1100:
			record_out();
 8015286:	f7f2 f9ef 	bl	8007668 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 801528a:	e01f      	b.n	80152cc <mode_Running+0x2dc>
		case 0b1101:
			record_out();
 801528c:	f7f2 f9ec 	bl	8007668 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015290:	e01c      	b.n	80152cc <mode_Running+0x2dc>
		case 0b1110:
			record_out();
 8015292:	f7f2 f9e9 	bl	8007668 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015296:	e019      	b.n	80152cc <mode_Running+0x2dc>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015298:	4c1c      	ldr	r4, [pc, #112]	; (801530c <mode_Running+0x31c>)
 801529a:	2300      	movs	r3, #0
 801529c:	934f      	str	r3, [sp, #316]	; 0x13c
 801529e:	2301      	movs	r3, #1
 80152a0:	934e      	str	r3, [sp, #312]	; 0x138
 80152a2:	4668      	mov	r0, sp
 80152a4:	f104 0310 	add.w	r3, r4, #16
 80152a8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80152ac:	4619      	mov	r1, r3
 80152ae:	f009 fed9 	bl	801f064 <memcpy>
 80152b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80152b6:	eddf 1a0b 	vldr	s3, [pc, #44]	; 80152e4 <mode_Running+0x2f4>
 80152ba:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 80152e8 <mode_Running+0x2f8>
 80152be:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80152ec <mode_Running+0x2fc>
 80152c2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015310 <mode_Running+0x320>
 80152c6:	f7f8 ff85 	bl	800e1d4 <AdatiWayReturn>
		break;
 80152ca:	bf00      	nop
	}


}
 80152cc:	bf00      	nop
 80152ce:	3720      	adds	r7, #32
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bdb0      	pop	{r4, r5, r7, pc}
 80152d4:	0802237c 	.word	0x0802237c
 80152d8:	08022388 	.word	0x08022388
 80152dc:	08022394 	.word	0x08022394
 80152e0:	2000db2c 	.word	0x2000db2c
 80152e4:	453b8000 	.word	0x453b8000
 80152e8:	44fa0000 	.word	0x44fa0000
 80152ec:	43c80000 	.word	0x43c80000
 80152f0:	43960000 	.word	0x43960000
 80152f4:	2000ddbc 	.word	0x2000ddbc
 80152f8:	3e99999a 	.word	0x3e99999a
 80152fc:	447a0000 	.word	0x447a0000
 8015300:	2000df04 	.word	0x2000df04
 8015304:	3f7d70a4 	.word	0x3f7d70a4
 8015308:	461c4000 	.word	0x461c4000
 801530c:	2000dc74 	.word	0x2000dc74
 8015310:	437a0000 	.word	0x437a0000

08015314 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8015314:	b590      	push	{r4, r7, lr}
 8015316:	b0db      	sub	sp, #364	; 0x16c
 8015318:	af52      	add	r7, sp, #328	; 0x148
 801531a:	4603      	mov	r3, r0
 801531c:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 801531e:	2300      	movs	r3, #0
 8015320:	60fb      	str	r3, [r7, #12]
 8015322:	2300      	movs	r3, #0
 8015324:	60bb      	str	r3, [r7, #8]
	mode.WallControlMode=0;
 8015326:	2300      	movs	r3, #0
 8015328:	743b      	strb	r3, [r7, #16]
	mode.WallControlStatus=0;
 801532a:	2300      	movs	r3, #0
 801532c:	747b      	strb	r3, [r7, #17]
	mode.WallCutMode=0;
 801532e:	2300      	movs	r3, #0
 8015330:	74fb      	strb	r3, [r7, #19]
	mode.calMazeMode=0;
 8015332:	2300      	movs	r3, #0
 8015334:	74bb      	strb	r3, [r7, #18]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015336:	2003      	movs	r0, #3
 8015338:	f7f2 fbee 	bl	8007b18 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801533c:	2003      	movs	r0, #3
 801533e:	f7f2 fc13 	bl	8007b68 <pl_R_DriveMotor_mode>
	reset_gyro();
 8015342:	f7ec fa5d 	bl	8001800 <reset_gyro>
	reset_speed();
 8015346:	f7eb fe67 	bl	8001018 <reset_speed>
	reset_distance();
 801534a:	f7eb fe27 	bl	8000f9c <reset_distance>
	clear_Ierror();
 801534e:	f7ef fac5 	bl	80048dc <clear_Ierror>

	switch (main_modeR) {
 8015352:	79fb      	ldrb	r3, [r7, #7]
 8015354:	2b0f      	cmp	r3, #15
 8015356:	f200 8294 	bhi.w	8015882 <mode_Tuning0+0x56e>
 801535a:	a201      	add	r2, pc, #4	; (adr r2, 8015360 <mode_Tuning0+0x4c>)
 801535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015360:	080153a1 	.word	0x080153a1
 8015364:	0801542b 	.word	0x0801542b
 8015368:	08015451 	.word	0x08015451
 801536c:	08015477 	.word	0x08015477
 8015370:	080154a7 	.word	0x080154a7
 8015374:	080154d7 	.word	0x080154d7
 8015378:	080154fd 	.word	0x080154fd
 801537c:	08015523 	.word	0x08015523
 8015380:	08015549 	.word	0x08015549
 8015384:	0801556d 	.word	0x0801556d
 8015388:	080155ed 	.word	0x080155ed
 801538c:	08015673 	.word	0x08015673
 8015390:	08015699 	.word	0x08015699
 8015394:	08015739 	.word	0x08015739
 8015398:	08015805 	.word	0x08015805
 801539c:	08015837 	.word	0x08015837
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 80153a0:	4bca      	ldr	r3, [pc, #808]	; (80156cc <mode_Tuning0+0x3b8>)
 80153a2:	2203      	movs	r2, #3
 80153a4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80153a6:	2300      	movs	r3, #0
 80153a8:	743b      	strb	r3, [r7, #16]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 80153aa:	6938      	ldr	r0, [r7, #16]
 80153ac:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 80156d0 <mode_Tuning0+0x3bc>
 80153b0:	eddf 1ac8 	vldr	s3, [pc, #800]	; 80156d4 <mode_Tuning0+0x3c0>
 80153b4:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 80156d8 <mode_Tuning0+0x3c4>
 80153b8:	eddf 0ac7 	vldr	s1, [pc, #796]	; 80156d8 <mode_Tuning0+0x3c4>
 80153bc:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 80156dc <mode_Tuning0+0x3c8>
 80153c0:	f7ed fe70 	bl	80030a4 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 80153c4:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 80156e0 <mode_Tuning0+0x3cc>
 80153c8:	eddf 1ac6 	vldr	s3, [pc, #792]	; 80156e4 <mode_Tuning0+0x3d0>
 80153cc:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 80156d8 <mode_Tuning0+0x3c4>
 80153d0:	eddf 0ac1 	vldr	s1, [pc, #772]	; 80156d8 <mode_Tuning0+0x3c4>
 80153d4:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 80156e8 <mode_Tuning0+0x3d4>
 80153d8:	f7ee fb72 	bl	8003ac0 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 80153dc:	6938      	ldr	r0, [r7, #16]
 80153de:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 80156ec <mode_Tuning0+0x3d8>
 80153e2:	eddf 1ac3 	vldr	s3, [pc, #780]	; 80156f0 <mode_Tuning0+0x3dc>
 80153e6:	ed9f 1abc 	vldr	s2, [pc, #752]	; 80156d8 <mode_Tuning0+0x3c4>
 80153ea:	eddf 0abb 	vldr	s1, [pc, #748]	; 80156d8 <mode_Tuning0+0x3c4>
 80153ee:	ed9f 0abb 	vldr	s0, [pc, #748]	; 80156dc <mode_Tuning0+0x3c8>
 80153f2:	f7ed fe57 	bl	80030a4 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 80153f6:	ed9f 2aba 	vldr	s4, [pc, #744]	; 80156e0 <mode_Tuning0+0x3cc>
 80153fa:	eddf 1aba 	vldr	s3, [pc, #744]	; 80156e4 <mode_Tuning0+0x3d0>
 80153fe:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 80156d8 <mode_Tuning0+0x3c4>
 8015402:	eddf 0ab5 	vldr	s1, [pc, #724]	; 80156d8 <mode_Tuning0+0x3c4>
 8015406:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 80156e8 <mode_Tuning0+0x3d4>
 801540a:	f7ee fb59 	bl	8003ac0 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 801540e:	6938      	ldr	r0, [r7, #16]
 8015410:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 80156f4 <mode_Tuning0+0x3e0>
 8015414:	eddf 1ab8 	vldr	s3, [pc, #736]	; 80156f8 <mode_Tuning0+0x3e4>
 8015418:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 80156d8 <mode_Tuning0+0x3c4>
 801541c:	eddf 0aae 	vldr	s1, [pc, #696]	; 80156d8 <mode_Tuning0+0x3c4>
 8015420:	ed9f 0aae 	vldr	s0, [pc, #696]	; 80156dc <mode_Tuning0+0x3c8>
 8015424:	f7ed fe3e 	bl	80030a4 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015428:	e22b      	b.n	8015882 <mode_Tuning0+0x56e>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 801542a:	4ba8      	ldr	r3, [pc, #672]	; (80156cc <mode_Tuning0+0x3b8>)
 801542c:	2205      	movs	r2, #5
 801542e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015430:	2300      	movs	r3, #0
 8015432:	743b      	strb	r3, [r7, #16]
			straight_table2(400, 0, 0, 400, 3000,mode);
 8015434:	6938      	ldr	r0, [r7, #16]
 8015436:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 80156fc <mode_Tuning0+0x3e8>
 801543a:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80156e4 <mode_Tuning0+0x3d0>
 801543e:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 80156d8 <mode_Tuning0+0x3c4>
 8015442:	eddf 0aa5 	vldr	s1, [pc, #660]	; 80156d8 <mode_Tuning0+0x3c4>
 8015446:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 80156e4 <mode_Tuning0+0x3d0>
 801544a:	f7ed fe2b 	bl	80030a4 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 801544e:	e218      	b.n	8015882 <mode_Tuning0+0x56e>
		case 2://壁制御
			record_mode=6;
 8015450:	4b9e      	ldr	r3, [pc, #632]	; (80156cc <mode_Tuning0+0x3b8>)
 8015452:	2206      	movs	r2, #6
 8015454:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015456:	2301      	movs	r3, #1
 8015458:	743b      	strb	r3, [r7, #16]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 801545a:	6938      	ldr	r0, [r7, #16]
 801545c:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 8015700 <mode_Tuning0+0x3ec>
 8015460:	eddf 1aa8 	vldr	s3, [pc, #672]	; 8015704 <mode_Tuning0+0x3f0>
 8015464:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 80156d8 <mode_Tuning0+0x3c4>
 8015468:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80156d8 <mode_Tuning0+0x3c4>
 801546c:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8015708 <mode_Tuning0+0x3f4>
 8015470:	f7ed fe18 	bl	80030a4 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015474:	e205      	b.n	8015882 <mode_Tuning0+0x56e>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8015476:	4ca5      	ldr	r4, [pc, #660]	; (801570c <mode_Tuning0+0x3f8>)
 8015478:	2300      	movs	r3, #0
 801547a:	9351      	str	r3, [sp, #324]	; 0x144
 801547c:	2300      	movs	r3, #0
 801547e:	9350      	str	r3, [sp, #320]	; 0x140
 8015480:	2300      	movs	r3, #0
 8015482:	934f      	str	r3, [sp, #316]	; 0x13c
 8015484:	2300      	movs	r3, #0
 8015486:	934e      	str	r3, [sp, #312]	; 0x138
 8015488:	4668      	mov	r0, sp
 801548a:	f104 0310 	add.w	r3, r4, #16
 801548e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015492:	4619      	mov	r1, r3
 8015494:	f009 fde6 	bl	801f064 <memcpy>
 8015498:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801549c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80156d8 <mode_Tuning0+0x3c4>
 80154a0:	f7f8 fcde 	bl	800de60 <testturning>
		break;
 80154a4:	e1ed      	b.n	8015882 <mode_Tuning0+0x56e>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 80154a6:	4c99      	ldr	r4, [pc, #612]	; (801570c <mode_Tuning0+0x3f8>)
 80154a8:	2300      	movs	r3, #0
 80154aa:	9351      	str	r3, [sp, #324]	; 0x144
 80154ac:	2300      	movs	r3, #0
 80154ae:	9350      	str	r3, [sp, #320]	; 0x140
 80154b0:	2300      	movs	r3, #0
 80154b2:	934f      	str	r3, [sp, #316]	; 0x13c
 80154b4:	2301      	movs	r3, #1
 80154b6:	934e      	str	r3, [sp, #312]	; 0x138
 80154b8:	4668      	mov	r0, sp
 80154ba:	f104 0310 	add.w	r3, r4, #16
 80154be:	f44f 729c 	mov.w	r2, #312	; 0x138
 80154c2:	4619      	mov	r1, r3
 80154c4:	f009 fdce 	bl	801f064 <memcpy>
 80154c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80154cc:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80156d8 <mode_Tuning0+0x3c4>
 80154d0:	f7f8 fcc6 	bl	800de60 <testturning>
		break;
 80154d4:	e1d5      	b.n	8015882 <mode_Tuning0+0x56e>
		case 5://直進(制御なし)
			record_mode=7;
 80154d6:	4b7d      	ldr	r3, [pc, #500]	; (80156cc <mode_Tuning0+0x3b8>)
 80154d8:	2207      	movs	r2, #7
 80154da:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80154dc:	2300      	movs	r3, #0
 80154de:	743b      	strb	r3, [r7, #16]
			straight_table2(180, 0, 0, 300, 6000,mode);
 80154e0:	6938      	ldr	r0, [r7, #16]
 80154e2:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015700 <mode_Tuning0+0x3ec>
 80154e6:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015704 <mode_Tuning0+0x3f0>
 80154ea:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 80156d8 <mode_Tuning0+0x3c4>
 80154ee:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80156d8 <mode_Tuning0+0x3c4>
 80154f2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80156e8 <mode_Tuning0+0x3d4>
 80154f6:	f7ed fdd5 	bl	80030a4 <straight_table2>
		break;
 80154fa:	e1c2      	b.n	8015882 <mode_Tuning0+0x56e>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 80154fc:	4b73      	ldr	r3, [pc, #460]	; (80156cc <mode_Tuning0+0x3b8>)
 80154fe:	2207      	movs	r2, #7
 8015500:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015502:	2300      	movs	r3, #0
 8015504:	743b      	strb	r3, [r7, #16]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8015506:	6938      	ldr	r0, [r7, #16]
 8015508:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8015700 <mode_Tuning0+0x3ec>
 801550c:	eddf 1a80 	vldr	s3, [pc, #512]	; 8015710 <mode_Tuning0+0x3fc>
 8015510:	ed9f 1a71 	vldr	s2, [pc, #452]	; 80156d8 <mode_Tuning0+0x3c4>
 8015514:	eddf 0a70 	vldr	s1, [pc, #448]	; 80156d8 <mode_Tuning0+0x3c4>
 8015518:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8015714 <mode_Tuning0+0x400>
 801551c:	f7ed fdc2 	bl	80030a4 <straight_table2>
		break;
 8015520:	e1af      	b.n	8015882 <mode_Tuning0+0x56e>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015522:	4b6a      	ldr	r3, [pc, #424]	; (80156cc <mode_Tuning0+0x3b8>)
 8015524:	2207      	movs	r2, #7
 8015526:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015528:	2303      	movs	r3, #3
 801552a:	743b      	strb	r3, [r7, #16]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 801552c:	6938      	ldr	r0, [r7, #16]
 801552e:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8015700 <mode_Tuning0+0x3ec>
 8015532:	eddf 1a6f 	vldr	s3, [pc, #444]	; 80156f0 <mode_Tuning0+0x3dc>
 8015536:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80156d8 <mode_Tuning0+0x3c4>
 801553a:	eddf 0a67 	vldr	s1, [pc, #412]	; 80156d8 <mode_Tuning0+0x3c4>
 801553e:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8015714 <mode_Tuning0+0x400>
 8015542:	f7ed fdaf 	bl	80030a4 <straight_table2>
		break;
 8015546:	e19c      	b.n	8015882 <mode_Tuning0+0x56e>
		case 8://宴会芸
			record_mode=2;
 8015548:	4b60      	ldr	r3, [pc, #384]	; (80156cc <mode_Tuning0+0x3b8>)
 801554a:	2202      	movs	r2, #2
 801554c:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 801554e:	2001      	movs	r0, #1
 8015550:	f7f1 fe1c 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015554:	2001      	movs	r0, #1
 8015556:	f7f1 fe2b 	bl	80071b0 <pl_l_blue_LED>
			no_angle();
 801555a:	f7ee fcc5 	bl	8003ee8 <no_angle>
			pl_r_blue_LED(OFF);
 801555e:	2000      	movs	r0, #0
 8015560:	f7f1 fe14 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015564:	2000      	movs	r0, #0
 8015566:	f7f1 fe23 	bl	80071b0 <pl_l_blue_LED>
		break;
 801556a:	e18a      	b.n	8015882 <mode_Tuning0+0x56e>
		case 9://システム同定enc
			record_mode=6;
 801556c:	4b57      	ldr	r3, [pc, #348]	; (80156cc <mode_Tuning0+0x3b8>)
 801556e:	2206      	movs	r2, #6
 8015570:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015572:	2001      	movs	r0, #1
 8015574:	f7f1 fe0a 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015578:	2001      	movs	r0, #1
 801557a:	f7f1 fe19 	bl	80071b0 <pl_l_blue_LED>
			straight_table_ff(90, 0, 300, 300, 500);
 801557e:	ed9f 2a64 	vldr	s4, [pc, #400]	; 8015710 <mode_Tuning0+0x3fc>
 8015582:	eddf 1a60 	vldr	s3, [pc, #384]	; 8015704 <mode_Tuning0+0x3f0>
 8015586:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8015704 <mode_Tuning0+0x3f0>
 801558a:	eddf 0a53 	vldr	s1, [pc, #332]	; 80156d8 <mode_Tuning0+0x3c4>
 801558e:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8015718 <mode_Tuning0+0x404>
 8015592:	f7ee fdd9 	bl	8004148 <straight_table_ff>
			straight_table_ff(90, 300, 600, 600, 1500);
 8015596:	ed9f 2a61 	vldr	s4, [pc, #388]	; 801571c <mode_Tuning0+0x408>
 801559a:	eddf 1a61 	vldr	s3, [pc, #388]	; 8015720 <mode_Tuning0+0x40c>
 801559e:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8015720 <mode_Tuning0+0x40c>
 80155a2:	eddf 0a58 	vldr	s1, [pc, #352]	; 8015704 <mode_Tuning0+0x3f0>
 80155a6:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8015718 <mode_Tuning0+0x404>
 80155aa:	f7ee fdcd 	bl	8004148 <straight_table_ff>
			straight_table_ff(90, 600, 300, 600, 1500);
 80155ae:	ed9f 2a5b 	vldr	s4, [pc, #364]	; 801571c <mode_Tuning0+0x408>
 80155b2:	eddf 1a5b 	vldr	s3, [pc, #364]	; 8015720 <mode_Tuning0+0x40c>
 80155b6:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8015704 <mode_Tuning0+0x3f0>
 80155ba:	eddf 0a59 	vldr	s1, [pc, #356]	; 8015720 <mode_Tuning0+0x40c>
 80155be:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8015718 <mode_Tuning0+0x404>
 80155c2:	f7ee fdc1 	bl	8004148 <straight_table_ff>
			straight_table_ff(90, 300, 0, 300, 500);
 80155c6:	ed9f 2a52 	vldr	s4, [pc, #328]	; 8015710 <mode_Tuning0+0x3fc>
 80155ca:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8015704 <mode_Tuning0+0x3f0>
 80155ce:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80156d8 <mode_Tuning0+0x3c4>
 80155d2:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8015704 <mode_Tuning0+0x3f0>
 80155d6:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8015718 <mode_Tuning0+0x404>
 80155da:	f7ee fdb5 	bl	8004148 <straight_table_ff>
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 80155de:	2000      	movs	r0, #0
 80155e0:	f7f1 fdd4 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80155e4:	2000      	movs	r0, #0
 80155e6:	f7f1 fde3 	bl	80071b0 <pl_l_blue_LED>
		break;
 80155ea:	e14a      	b.n	8015882 <mode_Tuning0+0x56e>
		case 10://システム同定gyro
			record_mode=6;
 80155ec:	4b37      	ldr	r3, [pc, #220]	; (80156cc <mode_Tuning0+0x3b8>)
 80155ee:	2206      	movs	r2, #6
 80155f0:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80155f2:	2001      	movs	r0, #1
 80155f4:	f7f1 fdca 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80155f8:	2001      	movs	r0, #1
 80155fa:	f7f1 fdd9 	bl	80071b0 <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 80155fe:	f107 0208 	add.w	r2, r7, #8
 8015602:	f107 030c 	add.w	r3, r7, #12
 8015606:	4611      	mov	r1, r2
 8015608:	4618      	mov	r0, r3
 801560a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801560e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015612:	f7ec fc73 	bl	8001efc <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	68ba      	ldr	r2, [r7, #8]
 801561a:	4611      	mov	r1, r2
 801561c:	4618      	mov	r0, r3
 801561e:	f7f2 fae5 	bl	8007bec <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015622:	f7f2 fac7 	bl	8007bb4 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015626:	e00a      	b.n	801563e <mode_Tuning0+0x32a>
				wait_ms(1);
 8015628:	2001      	movs	r0, #1
 801562a:	f7f2 fd59 	bl	80080e0 <wait_ms>
				if(record_rupe_flag==1){
 801562e:	4b3d      	ldr	r3, [pc, #244]	; (8015724 <mode_Tuning0+0x410>)
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	2b01      	cmp	r3, #1
 8015634:	d103      	bne.n	801563e <mode_Tuning0+0x32a>
					record_mode=0;
 8015636:	4b25      	ldr	r3, [pc, #148]	; (80156cc <mode_Tuning0+0x3b8>)
 8015638:	2200      	movs	r2, #0
 801563a:	701a      	strb	r2, [r3, #0]
					break;
 801563c:	e010      	b.n	8015660 <mode_Tuning0+0x34c>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801563e:	4b3a      	ldr	r3, [pc, #232]	; (8015728 <mode_Tuning0+0x414>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015646:	ddef      	ble.n	8015628 <mode_Tuning0+0x314>
 8015648:	4b37      	ldr	r3, [pc, #220]	; (8015728 <mode_Tuning0+0x414>)
 801564a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801564e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015652:	dde9      	ble.n	8015628 <mode_Tuning0+0x314>
 8015654:	4b34      	ldr	r3, [pc, #208]	; (8015728 <mode_Tuning0+0x414>)
 8015656:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801565a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801565e:	dde3      	ble.n	8015628 <mode_Tuning0+0x314>
				}
			}
			pl_DriveMotor_stop();
 8015660:	f7f2 fab6 	bl	8007bd0 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015664:	2000      	movs	r0, #0
 8015666:	f7f1 fd91 	bl	800718c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801566a:	2000      	movs	r0, #0
 801566c:	f7f1 fda0 	bl	80071b0 <pl_l_blue_LED>
		break;
 8015670:	e107      	b.n	8015882 <mode_Tuning0+0x56e>
		case 11:
		record_mode=1;
 8015672:	4b16      	ldr	r3, [pc, #88]	; (80156cc <mode_Tuning0+0x3b8>)
 8015674:	2201      	movs	r2, #1
 8015676:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8015678:	2300      	movs	r3, #0
 801567a:	743b      	strb	r3, [r7, #16]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 801567c:	6938      	ldr	r0, [r7, #16]
 801567e:	ed9f 2a20 	vldr	s4, [pc, #128]	; 8015700 <mode_Tuning0+0x3ec>
 8015682:	eddf 1a20 	vldr	s3, [pc, #128]	; 8015704 <mode_Tuning0+0x3f0>
 8015686:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80156d8 <mode_Tuning0+0x3c4>
 801568a:	eddf 0a13 	vldr	s1, [pc, #76]	; 80156d8 <mode_Tuning0+0x3c4>
 801568e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 801572c <mode_Tuning0+0x418>
 8015692:	f7ed fd07 	bl	80030a4 <straight_table2>
		break;
 8015696:	e0f4      	b.n	8015882 <mode_Tuning0+0x56e>
		case 12:
		record_mode=2;
 8015698:	4b0c      	ldr	r3, [pc, #48]	; (80156cc <mode_Tuning0+0x3b8>)
 801569a:	2202      	movs	r2, #2
 801569c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 801569e:	2300      	movs	r3, #0
 80156a0:	61fb      	str	r3, [r7, #28]
 80156a2:	e00e      	b.n	80156c2 <mode_Tuning0+0x3ae>
		turning_table2(90, 0, 0, 930, 11000);
 80156a4:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8015730 <mode_Tuning0+0x41c>
 80156a8:	eddf 1a22 	vldr	s3, [pc, #136]	; 8015734 <mode_Tuning0+0x420>
 80156ac:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80156d8 <mode_Tuning0+0x3c4>
 80156b0:	eddf 0a09 	vldr	s1, [pc, #36]	; 80156d8 <mode_Tuning0+0x3c4>
 80156b4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8015718 <mode_Tuning0+0x404>
 80156b8:	f7ee fa02 	bl	8003ac0 <turning_table2>
		for(int i=0;i<40;i++){
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	3301      	adds	r3, #1
 80156c0:	61fb      	str	r3, [r7, #28]
 80156c2:	69fb      	ldr	r3, [r7, #28]
 80156c4:	2b27      	cmp	r3, #39	; 0x27
 80156c6:	dded      	ble.n	80156a4 <mode_Tuning0+0x390>
		}
		break;
 80156c8:	e0db      	b.n	8015882 <mode_Tuning0+0x56e>
 80156ca:	bf00      	nop
 80156cc:	2000d96c 	.word	0x2000d96c
 80156d0:	464b2000 	.word	0x464b2000
 80156d4:	44c80000 	.word	0x44c80000
 80156d8:	00000000 	.word	0x00000000
 80156dc:	44070000 	.word	0x44070000
 80156e0:	457a0000 	.word	0x457a0000
 80156e4:	43c80000 	.word	0x43c80000
 80156e8:	43340000 	.word	0x43340000
 80156ec:	466a6000 	.word	0x466a6000
 80156f0:	44fa0000 	.word	0x44fa0000
 80156f4:	469c4000 	.word	0x469c4000
 80156f8:	45160000 	.word	0x45160000
 80156fc:	453b8000 	.word	0x453b8000
 8015700:	45bb8000 	.word	0x45bb8000
 8015704:	43960000 	.word	0x43960000
 8015708:	44340000 	.word	0x44340000
 801570c:	2000db2c 	.word	0x2000db2c
 8015710:	43fa0000 	.word	0x43fa0000
 8015714:	443eeb39 	.word	0x443eeb39
 8015718:	42b40000 	.word	0x42b40000
 801571c:	44bb8000 	.word	0x44bb8000
 8015720:	44160000 	.word	0x44160000
 8015724:	2000d978 	.word	0x2000d978
 8015728:	200002b8 	.word	0x200002b8
 801572c:	420a0000 	.word	0x420a0000
 8015730:	462be000 	.word	0x462be000
 8015734:	44688000 	.word	0x44688000
		case 13:
			record_mode=2;
 8015738:	4b6f      	ldr	r3, [pc, #444]	; (80158f8 <mode_Tuning0+0x5e4>)
 801573a:	2202      	movs	r2, #2
 801573c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801573e:	2301      	movs	r3, #1
 8015740:	743b      	strb	r3, [r7, #16]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015742:	4b6e      	ldr	r3, [pc, #440]	; (80158fc <mode_Tuning0+0x5e8>)
 8015744:	edd3 6a02 	vldr	s13, [r3, #8]
 8015748:	4b6c      	ldr	r3, [pc, #432]	; (80158fc <mode_Tuning0+0x5e8>)
 801574a:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 801574e:	4b6b      	ldr	r3, [pc, #428]	; (80158fc <mode_Tuning0+0x5e8>)
 8015750:	ed93 7a02 	vldr	s14, [r3, #8]
 8015754:	4b69      	ldr	r3, [pc, #420]	; (80158fc <mode_Tuning0+0x5e8>)
 8015756:	edd3 7a02 	vldr	s15, [r3, #8]
 801575a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801575e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015762:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015766:	eddf 5a66 	vldr	s11, [pc, #408]	; 8015900 <mode_Tuning0+0x5ec>
 801576a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 801576e:	6938      	ldr	r0, [r7, #16]
 8015770:	eeb0 2a47 	vmov.f32	s4, s14
 8015774:	eef0 1a46 	vmov.f32	s3, s12
 8015778:	eeb0 1a66 	vmov.f32	s2, s13
 801577c:	eddf 0a61 	vldr	s1, [pc, #388]	; 8015904 <mode_Tuning0+0x5f0>
 8015780:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8015908 <mode_Tuning0+0x5f4>
 8015784:	f7ed fc8e 	bl	80030a4 <straight_table2>
			for(int i=0;i<40;i++){
 8015788:	2300      	movs	r3, #0
 801578a:	61bb      	str	r3, [r7, #24]
 801578c:	e011      	b.n	80157b2 <mode_Tuning0+0x49e>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 801578e:	4b5b      	ldr	r3, [pc, #364]	; (80158fc <mode_Tuning0+0x5e8>)
 8015790:	2200      	movs	r2, #0
 8015792:	9203      	str	r2, [sp, #12]
 8015794:	2200      	movs	r2, #0
 8015796:	9202      	str	r2, [sp, #8]
 8015798:	2200      	movs	r2, #0
 801579a:	9201      	str	r2, [sp, #4]
 801579c:	699a      	ldr	r2, [r3, #24]
 801579e:	9200      	str	r2, [sp, #0]
 80157a0:	3308      	adds	r3, #8
 80157a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80157a4:	ed9f 0a59 	vldr	s0, [pc, #356]	; 801590c <mode_Tuning0+0x5f8>
 80157a8:	f7f4 fd6e 	bl	800a288 <slalomR>
			for(int i=0;i<40;i++){
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	3301      	adds	r3, #1
 80157b0:	61bb      	str	r3, [r7, #24]
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	2b27      	cmp	r3, #39	; 0x27
 80157b6:	ddea      	ble.n	801578e <mode_Tuning0+0x47a>
			}
			mode.WallControlMode=0;
 80157b8:	2300      	movs	r3, #0
 80157ba:	743b      	strb	r3, [r7, #16]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 80157bc:	4b4f      	ldr	r3, [pc, #316]	; (80158fc <mode_Tuning0+0x5e8>)
 80157be:	edd3 6a02 	vldr	s13, [r3, #8]
 80157c2:	4b4e      	ldr	r3, [pc, #312]	; (80158fc <mode_Tuning0+0x5e8>)
 80157c4:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80157c8:	4b4c      	ldr	r3, [pc, #304]	; (80158fc <mode_Tuning0+0x5e8>)
 80157ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80157ce:	4b4b      	ldr	r3, [pc, #300]	; (80158fc <mode_Tuning0+0x5e8>)
 80157d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80157d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80157d8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80157dc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 80157e0:	eddf 5a47 	vldr	s11, [pc, #284]	; 8015900 <mode_Tuning0+0x5ec>
 80157e4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80157e8:	6938      	ldr	r0, [r7, #16]
 80157ea:	eeb0 2a47 	vmov.f32	s4, s14
 80157ee:	eef0 1a46 	vmov.f32	s3, s12
 80157f2:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8015904 <mode_Tuning0+0x5f0>
 80157f6:	eef0 0a66 	vmov.f32	s1, s13
 80157fa:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8015900 <mode_Tuning0+0x5ec>
 80157fe:	f7ed fc51 	bl	80030a4 <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8015802:	e03e      	b.n	8015882 <mode_Tuning0+0x56e>
		case 14://宴会芸＋吸引
			record_mode=2;
 8015804:	4b3c      	ldr	r3, [pc, #240]	; (80158f8 <mode_Tuning0+0x5e4>)
 8015806:	2202      	movs	r2, #2
 8015808:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<40;i++){
 801580a:	2300      	movs	r3, #0
 801580c:	617b      	str	r3, [r7, #20]
 801580e:	e00e      	b.n	801582e <mode_Tuning0+0x51a>
			turning_table2(90, 0, 0, 400, 3000);
 8015810:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 8015910 <mode_Tuning0+0x5fc>
 8015814:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8015914 <mode_Tuning0+0x600>
 8015818:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8015904 <mode_Tuning0+0x5f0>
 801581c:	eddf 0a39 	vldr	s1, [pc, #228]	; 8015904 <mode_Tuning0+0x5f0>
 8015820:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8015918 <mode_Tuning0+0x604>
 8015824:	f7ee f94c 	bl	8003ac0 <turning_table2>
			for(int i=0;i<40;i++){
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	3301      	adds	r3, #1
 801582c:	617b      	str	r3, [r7, #20]
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	2b27      	cmp	r3, #39	; 0x27
 8015832:	dded      	ble.n	8015810 <mode_Tuning0+0x4fc>
//			record_mode=3;
////			mode.WallControlMode=0;
////			straight_table2(90*32, 0, 0, 4000, 17000,mode);
//			mode.WallControlMode=1;
//			straight_table2(90*8, 0, 0, 3000, 12000,mode);
		break;
 8015834:	e025      	b.n	8015882 <mode_Tuning0+0x56e>
		case 15:
			highspeed_mode = 1;
 8015836:	4b39      	ldr	r3, [pc, #228]	; (801591c <mode_Tuning0+0x608>)
 8015838:	2201      	movs	r2, #1
 801583a:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 801583c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8015920 <mode_Tuning0+0x60c>
 8015840:	f7f2 f9fe 	bl	8007c40 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 8015844:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015848:	f002 f93a 	bl	8017ac0 <HAL_Delay>
						reset_gyro();
 801584c:	f7eb ffd8 	bl	8001800 <reset_gyro>
						reset_speed();
 8015850:	f7eb fbe2 	bl	8001018 <reset_speed>
						reset_distance();
 8015854:	f7eb fba2 	bl	8000f9c <reset_distance>
						clear_Ierror();
 8015858:	f7ef f840 	bl	80048dc <clear_Ierror>
						record_mode=3;
 801585c:	4b26      	ldr	r3, [pc, #152]	; (80158f8 <mode_Tuning0+0x5e4>)
 801585e:	2203      	movs	r2, #3
 8015860:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 8015862:	2301      	movs	r3, #1
 8015864:	743b      	strb	r3, [r7, #16]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 8015866:	6938      	ldr	r0, [r7, #16]
 8015868:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8015924 <mode_Tuning0+0x610>
 801586c:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8015928 <mode_Tuning0+0x614>
 8015870:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015904 <mode_Tuning0+0x5f0>
 8015874:	eddf 0a23 	vldr	s1, [pc, #140]	; 8015904 <mode_Tuning0+0x5f0>
 8015878:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801592c <mode_Tuning0+0x618>
 801587c:	f7ed fc12 	bl	80030a4 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8015880:	bf00      	nop
	}
	record_mode=0;
 8015882:	4b1d      	ldr	r3, [pc, #116]	; (80158f8 <mode_Tuning0+0x5e4>)
 8015884:	2200      	movs	r2, #0
 8015886:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015888:	2003      	movs	r0, #3
 801588a:	f7f2 f96d 	bl	8007b68 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801588e:	2003      	movs	r0, #3
 8015890:	f7f2 f942 	bl	8007b18 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015898:	f7f2 fc66 	bl	8008168 <wait_ms_NoReset>
	pl_FunMotor_stop();
 801589c:	f7f2 f9c6 	bl	8007c2c <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 80158a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80158a4:	f7f2 fc60 	bl	8008168 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80158a8:	2000      	movs	r0, #0
 80158aa:	f7f2 f92b 	bl	8007b04 <pl_DriveMotor_standby>
	record_mode=0;
 80158ae:	4b12      	ldr	r3, [pc, #72]	; (80158f8 <mode_Tuning0+0x5e4>)
 80158b0:	2200      	movs	r2, #0
 80158b2:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158b4:	e002      	b.n	80158bc <mode_Tuning0+0x5a8>
		HAL_Delay(1);
 80158b6:	2001      	movs	r0, #1
 80158b8:	f002 f902 	bl	8017ac0 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158bc:	4b1c      	ldr	r3, [pc, #112]	; (8015930 <mode_Tuning0+0x61c>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158c4:	ddf7      	ble.n	80158b6 <mode_Tuning0+0x5a2>
 80158c6:	4b1a      	ldr	r3, [pc, #104]	; (8015930 <mode_Tuning0+0x61c>)
 80158c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80158cc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158d0:	ddf1      	ble.n	80158b6 <mode_Tuning0+0x5a2>
 80158d2:	4b17      	ldr	r3, [pc, #92]	; (8015930 <mode_Tuning0+0x61c>)
 80158d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80158d8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158dc:	ddeb      	ble.n	80158b6 <mode_Tuning0+0x5a2>
	}
	pl_r_blue_LED(ON);
 80158de:	2001      	movs	r0, #1
 80158e0:	f7f1 fc54 	bl	800718c <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80158e4:	2001      	movs	r0, #1
 80158e6:	f7f1 fc63 	bl	80071b0 <pl_l_blue_LED>
	record_print();
 80158ea:	f000 fccb 	bl	8016284 <record_print>



}
 80158ee:	bf00      	nop
 80158f0:	3724      	adds	r7, #36	; 0x24
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd90      	pop	{r4, r7, pc}
 80158f6:	bf00      	nop
 80158f8:	2000d96c 	.word	0x2000d96c
 80158fc:	2000db2c 	.word	0x2000db2c
 8015900:	42340000 	.word	0x42340000
 8015904:	00000000 	.word	0x00000000
 8015908:	431b8000 	.word	0x431b8000
 801590c:	43960000 	.word	0x43960000
 8015910:	453b8000 	.word	0x453b8000
 8015914:	43c80000 	.word	0x43c80000
 8015918:	42b40000 	.word	0x42b40000
 801591c:	20000808 	.word	0x20000808
 8015920:	3f733333 	.word	0x3f733333
 8015924:	45dac000 	.word	0x45dac000
 8015928:	447a0000 	.word	0x447a0000
 801592c:	44340000 	.word	0x44340000
 8015930:	200002b8 	.word	0x200002b8

08015934 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	4603      	mov	r3, r0
 801593c:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 801593e:	2300      	movs	r3, #0
 8015940:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8015942:	2300      	movs	r3, #0
 8015944:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8015946:	2300      	movs	r3, #0
 8015948:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 801594a:	2300      	movs	r3, #0
 801594c:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 801594e:	2001      	movs	r0, #1
 8015950:	f7f2 f8d8 	bl	8007b04 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015954:	2003      	movs	r0, #3
 8015956:	f7f2 f8df 	bl	8007b18 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801595a:	2003      	movs	r0, #3
 801595c:	f7f2 f904 	bl	8007b68 <pl_R_DriveMotor_mode>
	reset_gyro();
 8015960:	f7eb ff4e 	bl	8001800 <reset_gyro>
	reset_speed();
 8015964:	f7eb fb58 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015968:	f7ee ffb8 	bl	80048dc <clear_Ierror>

	switch (main_modeR) {
 801596c:	79fb      	ldrb	r3, [r7, #7]
 801596e:	2b0f      	cmp	r3, #15
 8015970:	f200 81b0 	bhi.w	8015cd4 <mode_WallSensorTuning+0x3a0>
 8015974:	a201      	add	r2, pc, #4	; (adr r2, 801597c <mode_WallSensorTuning+0x48>)
 8015976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801597a:	bf00      	nop
 801597c:	080159bd 	.word	0x080159bd
 8015980:	080159e3 	.word	0x080159e3
 8015984:	080159fb 	.word	0x080159fb
 8015988:	08015a71 	.word	0x08015a71
 801598c:	08015ae7 	.word	0x08015ae7
 8015990:	08015b5d 	.word	0x08015b5d
 8015994:	08015bcd 	.word	0x08015bcd
 8015998:	08015bf3 	.word	0x08015bf3
 801599c:	08015c19 	.word	0x08015c19
 80159a0:	08015c3f 	.word	0x08015c3f
 80159a4:	08015cd5 	.word	0x08015cd5
 80159a8:	08015cd5 	.word	0x08015cd5
 80159ac:	08015cd5 	.word	0x08015cd5
 80159b0:	08015cd5 	.word	0x08015cd5
 80159b4:	08015cd5 	.word	0x08015cd5
 80159b8:	08015c65 	.word	0x08015c65
		case 0://横壁追従制御
			record_mode=16;
 80159bc:	4bd2      	ldr	r3, [pc, #840]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 80159be:	2210      	movs	r2, #16
 80159c0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80159c2:	2301      	movs	r3, #1
 80159c4:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 80159c6:	68b8      	ldr	r0, [r7, #8]
 80159c8:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8015d0c <mode_WallSensorTuning+0x3d8>
 80159cc:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8015d10 <mode_WallSensorTuning+0x3dc>
 80159d0:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 80159d4:	eddf 0acf 	vldr	s1, [pc, #828]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 80159d8:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8015d18 <mode_WallSensorTuning+0x3e4>
 80159dc:	f7ed fb62 	bl	80030a4 <straight_table2>
		break;
 80159e0:	e178      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 80159e2:	2300      	movs	r3, #0
 80159e4:	60fb      	str	r3, [r7, #12]
 80159e6:	e004      	b.n	80159f2 <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 80159e8:	f7ee fb66 	bl	80040b8 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	3301      	adds	r3, #1
 80159f0:	60fb      	str	r3, [r7, #12]
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	2b14      	cmp	r3, #20
 80159f6:	ddf7      	ble.n	80159e8 <mode_WallSensorTuning+0xb4>
			}
		break;
 80159f8:	e16c      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 80159fa:	4bc3      	ldr	r3, [pc, #780]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 80159fc:	2207      	movs	r2, #7
 80159fe:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015a00:	2300      	movs	r3, #0
 8015a02:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015a04:	2300      	movs	r3, #0
 8015a06:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8015a10:	68b8      	ldr	r0, [r7, #8]
 8015a12:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015a16:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a1a:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a1e:	eddf 0abd 	vldr	s1, [pc, #756]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015a22:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8015d24 <mode_WallSensorTuning+0x3f0>
 8015a26:	f7ed fb3d 	bl	80030a4 <straight_table2>
			mode.WallCutMode=1;
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8015a32:	68b8      	ldr	r0, [r7, #8]
 8015a34:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015a38:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a3c:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a40:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a44:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015d28 <mode_WallSensorTuning+0x3f4>
 8015a48:	f7ed fb2c 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015a50:	2300      	movs	r3, #0
 8015a52:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8015a54:	68b8      	ldr	r0, [r7, #8]
 8015a56:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015a5a:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a5e:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015a62:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a66:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8015d2c <mode_WallSensorTuning+0x3f8>
 8015a6a:	f7ed fb1b 	bl	80030a4 <straight_table2>
		break;
 8015a6e:	e131      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8015a70:	4ba5      	ldr	r3, [pc, #660]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 8015a72:	2208      	movs	r2, #8
 8015a74:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015a82:	2300      	movs	r3, #0
 8015a84:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 8015a86:	68b8      	ldr	r0, [r7, #8]
 8015a88:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015a8c:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a90:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015a94:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015a98:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8015d30 <mode_WallSensorTuning+0x3fc>
 8015a9c:	f7ed fb02 	bl	80030a4 <straight_table2>
			mode.WallCutMode=2;
 8015aa0:	2302      	movs	r3, #2
 8015aa2:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8015aa8:	68b8      	ldr	r0, [r7, #8]
 8015aaa:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015aae:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015ab2:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015ab6:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015aba:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8015d28 <mode_WallSensorTuning+0x3f4>
 8015abe:	f7ed faf1 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8015aca:	68b8      	ldr	r0, [r7, #8]
 8015acc:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015ad0:	eddf 1a93 	vldr	s3, [pc, #588]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015ad4:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015ad8:	eddf 0a91 	vldr	s1, [pc, #580]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015adc:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8015d2c <mode_WallSensorTuning+0x3f8>
 8015ae0:	f7ed fae0 	bl	80030a4 <straight_table2>
		break;
 8015ae4:	e0f6      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 8015ae6:	4b88      	ldr	r3, [pc, #544]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 8015ae8:	2208      	movs	r2, #8
 8015aea:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015aec:	2300      	movs	r3, #0
 8015aee:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015af0:	2300      	movs	r3, #0
 8015af2:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015af4:	2300      	movs	r3, #0
 8015af6:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015af8:	2300      	movs	r3, #0
 8015afa:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8015afc:	68b8      	ldr	r0, [r7, #8]
 8015afe:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015b02:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b06:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b0a:	eddf 0a82 	vldr	s1, [pc, #520]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015b0e:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8015d34 <mode_WallSensorTuning+0x400>
 8015b12:	f7ed fac7 	bl	80030a4 <straight_table2>
			mode.WallCutMode=3;
 8015b16:	2303      	movs	r3, #3
 8015b18:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8015b1e:	68b8      	ldr	r0, [r7, #8]
 8015b20:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015b24:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b28:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b2c:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b30:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8015d38 <mode_WallSensorTuning+0x404>
 8015b34:	f7ed fab6 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8015b40:	68b8      	ldr	r0, [r7, #8]
 8015b42:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015b46:	eddf 1a76 	vldr	s3, [pc, #472]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b4a:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015b4e:	eddf 0a74 	vldr	s1, [pc, #464]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b52:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8015d3c <mode_WallSensorTuning+0x408>
 8015b56:	f7ed faa5 	bl	80030a4 <straight_table2>
		break;
 8015b5a:	e0bb      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015b60:	2300      	movs	r3, #0
 8015b62:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015b64:	2300      	movs	r3, #0
 8015b66:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8015b6c:	68b8      	ldr	r0, [r7, #8]
 8015b6e:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015b72:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b76:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b7a:	eddf 0a66 	vldr	s1, [pc, #408]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015b7e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015d34 <mode_WallSensorTuning+0x400>
 8015b82:	f7ed fa8f 	bl	80030a4 <straight_table2>
			mode.WallCutMode=4;
 8015b86:	2304      	movs	r3, #4
 8015b88:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8015b8e:	68b8      	ldr	r0, [r7, #8]
 8015b90:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015b94:	eddf 1a62 	vldr	s3, [pc, #392]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b98:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015b9c:	eddf 0a60 	vldr	s1, [pc, #384]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015ba0:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8015d38 <mode_WallSensorTuning+0x404>
 8015ba4:	f7ed fa7e 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015ba8:	2300      	movs	r3, #0
 8015baa:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015bac:	2300      	movs	r3, #0
 8015bae:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8015bb0:	68b8      	ldr	r0, [r7, #8]
 8015bb2:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015bb6:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015bba:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015bbe:	eddf 0a58 	vldr	s1, [pc, #352]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015bc2:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8015d3c <mode_WallSensorTuning+0x408>
 8015bc6:	f7ed fa6d 	bl	80030a4 <straight_table2>
		break;
 8015bca:	e083      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(制御あり)
			record_mode=9;
 8015bcc:	4b4e      	ldr	r3, [pc, #312]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 8015bce:	2209      	movs	r2, #9
 8015bd0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8015bd6:	68b8      	ldr	r0, [r7, #8]
 8015bd8:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015bdc:	eddf 1a50 	vldr	s3, [pc, #320]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015be0:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015be4:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015be8:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8015d40 <mode_WallSensorTuning+0x40c>
 8015bec:	f7ed fa5a 	bl	80030a4 <straight_table2>
		break;
 8015bf0:	e070      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=10;
 8015bf2:	4b45      	ldr	r3, [pc, #276]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 8015bf4:	220a      	movs	r2, #10
 8015bf6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8015bfc:	68b8      	ldr	r0, [r7, #8]
 8015bfe:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015d1c <mode_WallSensorTuning+0x3e8>
 8015c02:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015d20 <mode_WallSensorTuning+0x3ec>
 8015c06:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015c0a:	eddf 0a42 	vldr	s1, [pc, #264]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015c0e:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8015d40 <mode_WallSensorTuning+0x40c>
 8015c12:	f7ed fa47 	bl	80030a4 <straight_table2>

		break;
 8015c16:	e05d      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015c18:	4b3b      	ldr	r3, [pc, #236]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 8015c1a:	2207      	movs	r2, #7
 8015c1c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015c1e:	2303      	movs	r3, #3
 8015c20:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 15000,mode);
 8015c22:	68b8      	ldr	r0, [r7, #8]
 8015c24:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015d44 <mode_WallSensorTuning+0x410>
 8015c28:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015d48 <mode_WallSensorTuning+0x414>
 8015c2c:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015c30:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015c34:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8015d4c <mode_WallSensorTuning+0x418>
 8015c38:	f7ed fa34 	bl	80030a4 <straight_table2>
		break;
 8015c3c:	e04a      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8015c3e:	4b32      	ldr	r3, [pc, #200]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 8015c40:	2208      	movs	r2, #8
 8015c42:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015c44:	2303      	movs	r3, #3
 8015c46:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8015c48:	68b8      	ldr	r0, [r7, #8]
 8015c4a:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8015d50 <mode_WallSensorTuning+0x41c>
 8015c4e:	eddf 1a41 	vldr	s3, [pc, #260]	; 8015d54 <mode_WallSensorTuning+0x420>
 8015c52:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015c56:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015c5a:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8015d58 <mode_WallSensorTuning+0x424>
 8015c5e:	f7ed fa21 	bl	80030a4 <straight_table2>
		break;
 8015c62:	e037      	b.n	8015cd4 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8015c64:	2305      	movs	r3, #5
 8015c66:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015c70:	2300      	movs	r3, #0
 8015c72:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 8015c74:	68b8      	ldr	r0, [r7, #8]
 8015c76:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8015d5c <mode_WallSensorTuning+0x428>
 8015c7a:	eddf 1a25 	vldr	s3, [pc, #148]	; 8015d10 <mode_WallSensorTuning+0x3dc>
 8015c7e:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015d10 <mode_WallSensorTuning+0x3dc>
 8015c82:	eddf 0a24 	vldr	s1, [pc, #144]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015c86:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8015d60 <mode_WallSensorTuning+0x42c>
 8015c8a:	f7ed fa0b 	bl	80030a4 <straight_table2>
			mode.WallCutMode=2;
 8015c8e:	2302      	movs	r3, #2
 8015c90:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 8015c96:	68b8      	ldr	r0, [r7, #8]
 8015c98:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8015d5c <mode_WallSensorTuning+0x428>
 8015c9c:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8015d10 <mode_WallSensorTuning+0x3dc>
 8015ca0:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8015d10 <mode_WallSensorTuning+0x3dc>
 8015ca4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015d10 <mode_WallSensorTuning+0x3dc>
 8015ca8:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015d64 <mode_WallSensorTuning+0x430>
 8015cac:	f7ed f9fa 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 8015cb8:	68b8      	ldr	r0, [r7, #8]
 8015cba:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8015d5c <mode_WallSensorTuning+0x428>
 8015cbe:	eddf 1a14 	vldr	s3, [pc, #80]	; 8015d10 <mode_WallSensorTuning+0x3dc>
 8015cc2:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8015d14 <mode_WallSensorTuning+0x3e0>
 8015cc6:	eddf 0a12 	vldr	s1, [pc, #72]	; 8015d10 <mode_WallSensorTuning+0x3dc>
 8015cca:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8015d68 <mode_WallSensorTuning+0x434>
 8015cce:	f7ed f9e9 	bl	80030a4 <straight_table2>
		break;
 8015cd2:	bf00      	nop
	}
	record_mode=0;
 8015cd4:	4b0c      	ldr	r3, [pc, #48]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015cda:	2003      	movs	r0, #3
 8015cdc:	f7f1 ff44 	bl	8007b68 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015ce0:	2003      	movs	r0, #3
 8015ce2:	f7f1 ff19 	bl	8007b18 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015cea:	f7f2 fa3d 	bl	8008168 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015cee:	f7f1 ff9d 	bl	8007c2c <pl_FunMotor_stop>
	record_mode=0;
 8015cf2:	4b05      	ldr	r3, [pc, #20]	; (8015d08 <mode_WallSensorTuning+0x3d4>)
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8015cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015cfc:	f7f2 fa34 	bl	8008168 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015d00:	2000      	movs	r0, #0
 8015d02:	f7f1 feff 	bl	8007b04 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015d06:	e034      	b.n	8015d72 <mode_WallSensorTuning+0x43e>
 8015d08:	2000d96c 	.word	0x2000d96c
 8015d0c:	459c4000 	.word	0x459c4000
 8015d10:	43fa0000 	.word	0x43fa0000
 8015d14:	00000000 	.word	0x00000000
 8015d18:	44b40000 	.word	0x44b40000
 8015d1c:	453b8000 	.word	0x453b8000
 8015d20:	43960000 	.word	0x43960000
 8015d24:	431b8000 	.word	0x431b8000
 8015d28:	41b40000 	.word	0x41b40000
 8015d2c:	42870000 	.word	0x42870000
 8015d30:	42cd0000 	.word	0x42cd0000
 8015d34:	4329c77b 	.word	0x4329c77b
 8015d38:	41fe8ef6 	.word	0x41fe8ef6
 8015d3c:	42beeb39 	.word	0x42beeb39
 8015d40:	43beeb39 	.word	0x43beeb39
 8015d44:	466a6000 	.word	0x466a6000
 8015d48:	44fa0000 	.word	0x44fa0000
 8015d4c:	443eeb39 	.word	0x443eeb39
 8015d50:	461c4000 	.word	0x461c4000
 8015d54:	442f0000 	.word	0x442f0000
 8015d58:	4484977b 	.word	0x4484977b
 8015d5c:	44bb8000 	.word	0x44bb8000
 8015d60:	43488000 	.word	0x43488000
 8015d64:	42340000 	.word	0x42340000
 8015d68:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8015d6c:	2001      	movs	r0, #1
 8015d6e:	f001 fea7 	bl	8017ac0 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015d72:	4b0e      	ldr	r3, [pc, #56]	; (8015dac <mode_WallSensorTuning+0x478>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015d7a:	ddf7      	ble.n	8015d6c <mode_WallSensorTuning+0x438>
 8015d7c:	4b0b      	ldr	r3, [pc, #44]	; (8015dac <mode_WallSensorTuning+0x478>)
 8015d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015d82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015d86:	ddf1      	ble.n	8015d6c <mode_WallSensorTuning+0x438>
 8015d88:	4b08      	ldr	r3, [pc, #32]	; (8015dac <mode_WallSensorTuning+0x478>)
 8015d8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015d8e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015d92:	ddeb      	ble.n	8015d6c <mode_WallSensorTuning+0x438>
	}
	pl_r_blue_LED(ON);
 8015d94:	2001      	movs	r0, #1
 8015d96:	f7f1 f9f9 	bl	800718c <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015d9a:	2001      	movs	r0, #1
 8015d9c:	f7f1 fa08 	bl	80071b0 <pl_l_blue_LED>
	record_print();
 8015da0:	f000 fa70 	bl	8016284 <record_print>



}
 8015da4:	bf00      	nop
 8015da6:	3710      	adds	r7, #16
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	200002b8 	.word	0x200002b8

08015db0 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b084      	sub	sp, #16
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	4603      	mov	r3, r0
 8015db8:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8015dca:	2001      	movs	r0, #1
 8015dcc:	f7f1 fe9a 	bl	8007b04 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015dd0:	2003      	movs	r0, #3
 8015dd2:	f7f1 fea1 	bl	8007b18 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015dd6:	2003      	movs	r0, #3
 8015dd8:	f7f1 fec6 	bl	8007b68 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.56);
 8015ddc:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8016128 <mode_WallSensorTuning_fast+0x378>
 8015de0:	f7f1 ff2e 	bl	8007c40 <pl_FunMotor_duty>
	pl_FunMotor_start();
 8015de4:	f7f1 ff18 	bl	8007c18 <pl_FunMotor_start>
	HAL_Delay(600);
 8015de8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015dec:	f001 fe68 	bl	8017ac0 <HAL_Delay>
	reset_gyro();
 8015df0:	f7eb fd06 	bl	8001800 <reset_gyro>
	reset_speed();
 8015df4:	f7eb f910 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015df8:	f7ee fd70 	bl	80048dc <clear_Ierror>
	angle=0;
 8015dfc:	4bcb      	ldr	r3, [pc, #812]	; (801612c <mode_WallSensorTuning_fast+0x37c>)
 8015dfe:	f04f 0200 	mov.w	r2, #0
 8015e02:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8015e04:	79fb      	ldrb	r3, [r7, #7]
 8015e06:	2b0f      	cmp	r3, #15
 8015e08:	f200 8173 	bhi.w	80160f2 <mode_WallSensorTuning_fast+0x342>
 8015e0c:	a201      	add	r2, pc, #4	; (adr r2, 8015e14 <mode_WallSensorTuning_fast+0x64>)
 8015e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e12:	bf00      	nop
 8015e14:	08015e55 	.word	0x08015e55
 8015e18:	080160f3 	.word	0x080160f3
 8015e1c:	080160f3 	.word	0x080160f3
 8015e20:	08015e87 	.word	0x08015e87
 8015e24:	08015efd 	.word	0x08015efd
 8015e28:	08015f73 	.word	0x08015f73
 8015e2c:	08015fe9 	.word	0x08015fe9
 8015e30:	0801600f 	.word	0x0801600f
 8015e34:	08016035 	.word	0x08016035
 8015e38:	0801605b 	.word	0x0801605b
 8015e3c:	08016081 	.word	0x08016081
 8015e40:	080160a7 	.word	0x080160a7
 8015e44:	080160cd 	.word	0x080160cd
 8015e48:	080160f3 	.word	0x080160f3
 8015e4c:	080160f3 	.word	0x080160f3
 8015e50:	080160f3 	.word	0x080160f3
		case 0://横壁追従制御
			record_mode=15;
 8015e54:	4bb6      	ldr	r3, [pc, #728]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8015e56:	220f      	movs	r2, #15
 8015e58:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 8015e5e:	4bb5      	ldr	r3, [pc, #724]	; (8016134 <mode_WallSensorTuning_fast+0x384>)
 8015e60:	2201      	movs	r2, #1
 8015e62:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8015e64:	68f8      	ldr	r0, [r7, #12]
 8015e66:	ed9f 2ab4 	vldr	s4, [pc, #720]	; 8016138 <mode_WallSensorTuning_fast+0x388>
 8015e6a:	eddf 1ab4 	vldr	s3, [pc, #720]	; 801613c <mode_WallSensorTuning_fast+0x38c>
 8015e6e:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8015e72:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8015e76:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8016144 <mode_WallSensorTuning_fast+0x394>
 8015e7a:	f7ed f913 	bl	80030a4 <straight_table2>
			highspeed_mode=0;
 8015e7e:	4bad      	ldr	r3, [pc, #692]	; (8016134 <mode_WallSensorTuning_fast+0x384>)
 8015e80:	2200      	movs	r2, #0
 8015e82:	701a      	strb	r2, [r3, #0]
		break;
 8015e84:	e135      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 1://なし
		break;
		case 2://なし
		break;
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8015e86:	4baa      	ldr	r3, [pc, #680]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8015e88:	2208      	movs	r2, #8
 8015e8a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015e90:	2300      	movs	r3, #0
 8015e92:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015e94:	2300      	movs	r3, #0
 8015e96:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 600, 600,15000,mode);
 8015e9c:	68f8      	ldr	r0, [r7, #12]
 8015e9e:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8016148 <mode_WallSensorTuning_fast+0x398>
 8015ea2:	eddf 1aaa 	vldr	s3, [pc, #680]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015ea6:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015eaa:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8015eae:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8016150 <mode_WallSensorTuning_fast+0x3a0>
 8015eb2:	f7ed f8f7 	bl	80030a4 <straight_table2>
			mode.WallCutMode=2;
 8015eb6:	2302      	movs	r3, #2
 8015eb8:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015eba:	2300      	movs	r3, #0
 8015ebc:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 600, 600, 600,15000,mode);
 8015ebe:	68f8      	ldr	r0, [r7, #12]
 8015ec0:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 8016148 <mode_WallSensorTuning_fast+0x398>
 8015ec4:	eddf 1aa1 	vldr	s3, [pc, #644]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015ec8:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015ecc:	eddf 0a9f 	vldr	s1, [pc, #636]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015ed0:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8016154 <mode_WallSensorTuning_fast+0x3a4>
 8015ed4:	f7ed f8e6 	bl	80030a4 <straight_table2>
			mode.WallControlMode=1;
 8015ed8:	2301      	movs	r3, #1
 8015eda:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015edc:	2300      	movs	r3, #0
 8015ede:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 600, 0, 600,15000,mode);
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	ed9f 2a99 	vldr	s4, [pc, #612]	; 8016148 <mode_WallSensorTuning_fast+0x398>
 8015ee6:	eddf 1a99 	vldr	s3, [pc, #612]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015eea:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8015eee:	eddf 0a97 	vldr	s1, [pc, #604]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015ef2:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8016158 <mode_WallSensorTuning_fast+0x3a8>
 8015ef6:	f7ed f8d5 	bl	80030a4 <straight_table2>
		break;
 8015efa:	e0fa      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8015efc:	4b8c      	ldr	r3, [pc, #560]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8015efe:	2208      	movs	r2, #8
 8015f00:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015f02:	2300      	movs	r3, #0
 8015f04:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015f06:	2300      	movs	r3, #0
 8015f08:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 600, 600,10000,mode);
 8015f12:	68f8      	ldr	r0, [r7, #12]
 8015f14:	ed9f 2a91 	vldr	s4, [pc, #580]	; 801615c <mode_WallSensorTuning_fast+0x3ac>
 8015f18:	eddf 1a8c 	vldr	s3, [pc, #560]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f1c:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f20:	eddf 0a87 	vldr	s1, [pc, #540]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8015f24:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8016160 <mode_WallSensorTuning_fast+0x3b0>
 8015f28:	f7ed f8bc 	bl	80030a4 <straight_table2>
			mode.WallCutMode=3;
 8015f2c:	2303      	movs	r3, #3
 8015f2e:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015f30:	2300      	movs	r3, #0
 8015f32:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8015f34:	68f8      	ldr	r0, [r7, #12]
 8015f36:	ed9f 2a89 	vldr	s4, [pc, #548]	; 801615c <mode_WallSensorTuning_fast+0x3ac>
 8015f3a:	eddf 1a84 	vldr	s3, [pc, #528]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f3e:	ed9f 1a83 	vldr	s2, [pc, #524]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f42:	eddf 0a82 	vldr	s1, [pc, #520]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f46:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8016164 <mode_WallSensorTuning_fast+0x3b4>
 8015f4a:	f7ed f8ab 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8015f56:	68f8      	ldr	r0, [r7, #12]
 8015f58:	ed9f 2a80 	vldr	s4, [pc, #512]	; 801615c <mode_WallSensorTuning_fast+0x3ac>
 8015f5c:	eddf 1a7b 	vldr	s3, [pc, #492]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f60:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8015f64:	eddf 0a79 	vldr	s1, [pc, #484]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f68:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8016168 <mode_WallSensorTuning_fast+0x3b8>
 8015f6c:	f7ed f89a 	bl	80030a4 <straight_table2>
		break;
 8015f70:	e0bf      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8015f72:	4b6f      	ldr	r3, [pc, #444]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8015f74:	2208      	movs	r2, #8
 8015f76:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015f78:	2300      	movs	r3, #0
 8015f7a:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015f80:	2300      	movs	r3, #0
 8015f82:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015f84:	2300      	movs	r3, #0
 8015f86:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 600, 600,10000,mode);
 8015f88:	68f8      	ldr	r0, [r7, #12]
 8015f8a:	ed9f 2a74 	vldr	s4, [pc, #464]	; 801615c <mode_WallSensorTuning_fast+0x3ac>
 8015f8e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f92:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015f96:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8015f9a:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8016160 <mode_WallSensorTuning_fast+0x3b0>
 8015f9e:	f7ed f881 	bl	80030a4 <straight_table2>
			mode.WallCutMode=4;
 8015fa2:	2304      	movs	r3, #4
 8015fa4:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8015faa:	68f8      	ldr	r0, [r7, #12]
 8015fac:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 801615c <mode_WallSensorTuning_fast+0x3ac>
 8015fb0:	eddf 1a66 	vldr	s3, [pc, #408]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015fb4:	ed9f 1a65 	vldr	s2, [pc, #404]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015fb8:	eddf 0a64 	vldr	s1, [pc, #400]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015fbc:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8016164 <mode_WallSensorTuning_fast+0x3b4>
 8015fc0:	f7ed f870 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8015fcc:	68f8      	ldr	r0, [r7, #12]
 8015fce:	ed9f 2a63 	vldr	s4, [pc, #396]	; 801615c <mode_WallSensorTuning_fast+0x3ac>
 8015fd2:	eddf 1a5e 	vldr	s3, [pc, #376]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015fd6:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8015fda:	eddf 0a5c 	vldr	s1, [pc, #368]	; 801614c <mode_WallSensorTuning_fast+0x39c>
 8015fde:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8016168 <mode_WallSensorTuning_fast+0x3b8>
 8015fe2:	f7ed f85f 	bl	80030a4 <straight_table2>
		break;
 8015fe6:	e084      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 6://斜め直進(制御あり)
			record_mode=7;
 8015fe8:	4b51      	ldr	r3, [pc, #324]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8015fea:	2207      	movs	r2, #7
 8015fec:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8015ff2:	68f8      	ldr	r0, [r7, #12]
 8015ff4:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 801616c <mode_WallSensorTuning_fast+0x3bc>
 8015ff8:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8016170 <mode_WallSensorTuning_fast+0x3c0>
 8015ffc:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8016000:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8016004:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8016174 <mode_WallSensorTuning_fast+0x3c4>
 8016008:	f7ed f84c 	bl	80030a4 <straight_table2>
		break;
 801600c:	e071      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 801600e:	4b48      	ldr	r3, [pc, #288]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8016010:	2209      	movs	r2, #9
 8016012:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016014:	2300      	movs	r3, #0
 8016016:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	ed9f 2a54 	vldr	s4, [pc, #336]	; 801616c <mode_WallSensorTuning_fast+0x3bc>
 801601e:	eddf 1a54 	vldr	s3, [pc, #336]	; 8016170 <mode_WallSensorTuning_fast+0x3c0>
 8016022:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8016026:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 801602a:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8016174 <mode_WallSensorTuning_fast+0x3c4>
 801602e:	f7ed f839 	bl	80030a4 <straight_table2>

		break;
 8016032:	e05e      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016034:	4b3e      	ldr	r3, [pc, #248]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8016036:	2207      	movs	r2, #7
 8016038:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801603a:	2303      	movs	r3, #3
 801603c:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 801603e:	68f8      	ldr	r0, [r7, #12]
 8016040:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 801616c <mode_WallSensorTuning_fast+0x3bc>
 8016044:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8016178 <mode_WallSensorTuning_fast+0x3c8>
 8016048:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 801604c:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8016050:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801617c <mode_WallSensorTuning_fast+0x3cc>
 8016054:	f7ed f826 	bl	80030a4 <straight_table2>
		break;
 8016058:	e04b      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 9:
			record_mode=8;
 801605a:	4b35      	ldr	r3, [pc, #212]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 801605c:	2208      	movs	r2, #8
 801605e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016060:	2303      	movs	r3, #3
 8016062:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8016064:	68f8      	ldr	r0, [r7, #12]
 8016066:	ed9f 2a41 	vldr	s4, [pc, #260]	; 801616c <mode_WallSensorTuning_fast+0x3bc>
 801606a:	eddf 1a43 	vldr	s3, [pc, #268]	; 8016178 <mode_WallSensorTuning_fast+0x3c8>
 801606e:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8016072:	eddf 0a33 	vldr	s1, [pc, #204]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8016076:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8016180 <mode_WallSensorTuning_fast+0x3d0>
 801607a:	f7ed f813 	bl	80030a4 <straight_table2>
		break;
 801607e:	e038      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 10:
			record_mode=10;
 8016080:	4b2b      	ldr	r3, [pc, #172]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8016082:	220a      	movs	r2, #10
 8016084:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016086:	2303      	movs	r3, #3
 8016088:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 801608a:	68f8      	ldr	r0, [r7, #12]
 801608c:	ed9f 2a37 	vldr	s4, [pc, #220]	; 801616c <mode_WallSensorTuning_fast+0x3bc>
 8016090:	eddf 1a39 	vldr	s3, [pc, #228]	; 8016178 <mode_WallSensorTuning_fast+0x3c8>
 8016094:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 8016098:	eddf 0a29 	vldr	s1, [pc, #164]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 801609c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 801617c <mode_WallSensorTuning_fast+0x3cc>
 80160a0:	f7ed f800 	bl	80030a4 <straight_table2>
		break;
 80160a4:	e025      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 11:
			record_mode=11;
 80160a6:	4b22      	ldr	r3, [pc, #136]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 80160a8:	220b      	movs	r2, #11
 80160aa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80160ac:	2303      	movs	r3, #3
 80160ae:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8016148 <mode_WallSensorTuning_fast+0x398>
 80160b6:	eddf 1a33 	vldr	s3, [pc, #204]	; 8016184 <mode_WallSensorTuning_fast+0x3d4>
 80160ba:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 80160be:	eddf 0a20 	vldr	s1, [pc, #128]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 80160c2:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 801617c <mode_WallSensorTuning_fast+0x3cc>
 80160c6:	f7ec ffed 	bl	80030a4 <straight_table2>
		break;
 80160ca:	e012      	b.n	80160f2 <mode_WallSensorTuning_fast+0x342>
		case 12:
			record_mode=12;
 80160cc:	4b18      	ldr	r3, [pc, #96]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 80160ce:	220c      	movs	r2, #12
 80160d0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80160d2:	2303      	movs	r3, #3
 80160d4:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8016148 <mode_WallSensorTuning_fast+0x398>
 80160dc:	eddf 1a29 	vldr	s3, [pc, #164]	; 8016184 <mode_WallSensorTuning_fast+0x3d4>
 80160e0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 80160e4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8016140 <mode_WallSensorTuning_fast+0x390>
 80160e8:	ed9f 0a24 	vldr	s0, [pc, #144]	; 801617c <mode_WallSensorTuning_fast+0x3cc>
 80160ec:	f7ec ffda 	bl	80030a4 <straight_table2>
		break;
 80160f0:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 80160f2:	4b0f      	ldr	r3, [pc, #60]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 80160f4:	2200      	movs	r2, #0
 80160f6:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80160f8:	2003      	movs	r0, #3
 80160fa:	f7f1 fd35 	bl	8007b68 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80160fe:	2003      	movs	r0, #3
 8016100:	f7f1 fd0a 	bl	8007b18 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016108:	f7f2 f82e 	bl	8008168 <wait_ms_NoReset>
	pl_FunMotor_stop();
 801610c:	f7f1 fd8e 	bl	8007c2c <pl_FunMotor_stop>
	record_mode=0;
 8016110:	4b07      	ldr	r3, [pc, #28]	; (8016130 <mode_WallSensorTuning_fast+0x380>)
 8016112:	2200      	movs	r2, #0
 8016114:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016116:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801611a:	f7f2 f825 	bl	8008168 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801611e:	2000      	movs	r0, #0
 8016120:	f7f1 fcf0 	bl	8007b04 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016124:	e033      	b.n	801618e <mode_WallSensorTuning_fast+0x3de>
 8016126:	bf00      	nop
 8016128:	3f0f5c29 	.word	0x3f0f5c29
 801612c:	20000264 	.word	0x20000264
 8016130:	2000d96c 	.word	0x2000d96c
 8016134:	20000808 	.word	0x20000808
 8016138:	46bb8000 	.word	0x46bb8000
 801613c:	459c4000 	.word	0x459c4000
 8016140:	00000000 	.word	0x00000000
 8016144:	44e39000 	.word	0x44e39000
 8016148:	466a6000 	.word	0x466a6000
 801614c:	44160000 	.word	0x44160000
 8016150:	42cd0000 	.word	0x42cd0000
 8016154:	41b40000 	.word	0x41b40000
 8016158:	42e10000 	.word	0x42e10000
 801615c:	461c4000 	.word	0x461c4000
 8016160:	4321c77b 	.word	0x4321c77b
 8016164:	41fe8ef6 	.word	0x41fe8ef6
 8016168:	42beeb39 	.word	0x42beeb39
 801616c:	469c4000 	.word	0x469c4000
 8016170:	44fa0000 	.word	0x44fa0000
 8016174:	445ebd17 	.word	0x445ebd17
 8016178:	455ac000 	.word	0x455ac000
 801617c:	443eeb39 	.word	0x443eeb39
 8016180:	4484977b 	.word	0x4484977b
 8016184:	453b8000 	.word	0x453b8000
		HAL_Delay(1);
 8016188:	2001      	movs	r0, #1
 801618a:	f001 fc99 	bl	8017ac0 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801618e:	4b0e      	ldr	r3, [pc, #56]	; (80161c8 <mode_WallSensorTuning_fast+0x418>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016196:	ddf7      	ble.n	8016188 <mode_WallSensorTuning_fast+0x3d8>
 8016198:	4b0b      	ldr	r3, [pc, #44]	; (80161c8 <mode_WallSensorTuning_fast+0x418>)
 801619a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801619e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80161a2:	ddf1      	ble.n	8016188 <mode_WallSensorTuning_fast+0x3d8>
 80161a4:	4b08      	ldr	r3, [pc, #32]	; (80161c8 <mode_WallSensorTuning_fast+0x418>)
 80161a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80161aa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80161ae:	ddeb      	ble.n	8016188 <mode_WallSensorTuning_fast+0x3d8>
	}
	pl_r_blue_LED(ON);
 80161b0:	2001      	movs	r0, #1
 80161b2:	f7f0 ffeb 	bl	800718c <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80161b6:	2001      	movs	r0, #1
 80161b8:	f7f0 fffa 	bl	80071b0 <pl_l_blue_LED>
	record_print();
 80161bc:	f000 f862 	bl	8016284 <record_print>



}
 80161c0:	bf00      	nop
 80161c2:	3710      	adds	r7, #16
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	200002b8 	.word	0x200002b8

080161cc <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 80161cc:	b480      	push	{r7}
 80161ce:	af00      	add	r7, sp, #0
	record_mode = 0;
 80161d0:	4b06      	ldr	r3, [pc, #24]	; (80161ec <record_reset+0x20>)
 80161d2:	2200      	movs	r2, #0
 80161d4:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 80161d6:	4b06      	ldr	r3, [pc, #24]	; (80161f0 <record_reset+0x24>)
 80161d8:	2200      	movs	r2, #0
 80161da:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 80161dc:	4b05      	ldr	r3, [pc, #20]	; (80161f4 <record_reset+0x28>)
 80161de:	2200      	movs	r2, #0
 80161e0:	701a      	strb	r2, [r3, #0]
}
 80161e2:	bf00      	nop
 80161e4:	46bd      	mov	sp, r7
 80161e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ea:	4770      	bx	lr
 80161ec:	2000d96c 	.word	0x2000d96c
 80161f0:	2000d970 	.word	0x2000d970
 80161f4:	2000d978 	.word	0x2000d978

080161f8 <record_data>:

void record_data(float *input_record_data, int numlen) {
 80161f8:	b490      	push	{r4, r7}
 80161fa:	b084      	sub	sp, #16
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8016202:	2300      	movs	r3, #0
 8016204:	60fb      	str	r3, [r7, #12]
 8016206:	e013      	b.n	8016230 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	009b      	lsls	r3, r3, #2
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8016210:	4b18      	ldr	r3, [pc, #96]	; (8016274 <record_data+0x7c>)
 8016212:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8016214:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8016216:	4818      	ldr	r0, [pc, #96]	; (8016278 <record_data+0x80>)
 8016218:	68f9      	ldr	r1, [r7, #12]
 801621a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 801621e:	fb04 f101 	mul.w	r1, r4, r1
 8016222:	440b      	add	r3, r1
 8016224:	009b      	lsls	r3, r3, #2
 8016226:	4403      	add	r3, r0
 8016228:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	3301      	adds	r3, #1
 801622e:	60fb      	str	r3, [r7, #12]
 8016230:	68fa      	ldr	r2, [r7, #12]
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	429a      	cmp	r2, r3
 8016236:	dbe7      	blt.n	8016208 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016238:	4b10      	ldr	r3, [pc, #64]	; (801627c <record_data+0x84>)
 801623a:	781b      	ldrb	r3, [r3, #0]
 801623c:	2b01      	cmp	r3, #1
 801623e:	d103      	bne.n	8016248 <record_data+0x50>
		record_end_point = record_time;
 8016240:	4b0c      	ldr	r3, [pc, #48]	; (8016274 <record_data+0x7c>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	4a0e      	ldr	r2, [pc, #56]	; (8016280 <record_data+0x88>)
 8016246:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016248:	4b0a      	ldr	r3, [pc, #40]	; (8016274 <record_data+0x7c>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	3301      	adds	r3, #1
 801624e:	4a09      	ldr	r2, [pc, #36]	; (8016274 <record_data+0x7c>)
 8016250:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8016252:	4b08      	ldr	r3, [pc, #32]	; (8016274 <record_data+0x7c>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801625a:	4293      	cmp	r3, r2
 801625c:	dd05      	ble.n	801626a <record_data+0x72>
		record_time = 0;
 801625e:	4b05      	ldr	r3, [pc, #20]	; (8016274 <record_data+0x7c>)
 8016260:	2200      	movs	r2, #0
 8016262:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016264:	4b05      	ldr	r3, [pc, #20]	; (801627c <record_data+0x84>)
 8016266:	2201      	movs	r2, #1
 8016268:	701a      	strb	r2, [r3, #0]
	}

}
 801626a:	bf00      	nop
 801626c:	3710      	adds	r7, #16
 801626e:	46bd      	mov	sp, r7
 8016270:	bc90      	pop	{r4, r7}
 8016272:	4770      	bx	lr
 8016274:	2000d970 	.word	0x2000d970
 8016278:	20001dec 	.word	0x20001dec
 801627c:	2000d978 	.word	0x2000d978
 8016280:	2000d974 	.word	0x2000d974

08016284 <record_print>:

void record_print(void) {
 8016284:	b580      	push	{r7, lr}
 8016286:	b084      	sub	sp, #16
 8016288:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 801628a:	4b3a      	ldr	r3, [pc, #232]	; (8016374 <record_print+0xf0>)
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d12e      	bne.n	80162f0 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016292:	2300      	movs	r3, #0
 8016294:	60fb      	str	r3, [r7, #12]
 8016296:	e025      	b.n	80162e4 <record_print+0x60>

			printf("%d", a);
 8016298:	68f9      	ldr	r1, [r7, #12]
 801629a:	4837      	ldr	r0, [pc, #220]	; (8016378 <record_print+0xf4>)
 801629c:	f009 fb62 	bl	801f964 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 80162a0:	2300      	movs	r3, #0
 80162a2:	607b      	str	r3, [r7, #4]
 80162a4:	e015      	b.n	80162d2 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 80162a6:	4935      	ldr	r1, [pc, #212]	; (801637c <record_print+0xf8>)
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80162ae:	fb03 f202 	mul.w	r2, r3, r2
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	4413      	add	r3, r2
 80162b6:	009b      	lsls	r3, r3, #2
 80162b8:	440b      	add	r3, r1
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	4618      	mov	r0, r3
 80162be:	f7ea f96b 	bl	8000598 <__aeabi_f2d>
 80162c2:	4602      	mov	r2, r0
 80162c4:	460b      	mov	r3, r1
 80162c6:	482e      	ldr	r0, [pc, #184]	; (8016380 <record_print+0xfc>)
 80162c8:	f009 fb4c 	bl	801f964 <iprintf>
					record_count++) {
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	3301      	adds	r3, #1
 80162d0:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	2b03      	cmp	r3, #3
 80162d6:	dde6      	ble.n	80162a6 <record_print+0x22>
			}
			printf("\n");
 80162d8:	200a      	movs	r0, #10
 80162da:	f009 fb5b 	bl	801f994 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	3301      	adds	r3, #1
 80162e2:	60fb      	str	r3, [r7, #12]
 80162e4:	4b27      	ldr	r3, [pc, #156]	; (8016384 <record_print+0x100>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	68fa      	ldr	r2, [r7, #12]
 80162ea:	429a      	cmp	r2, r3
 80162ec:	dbd4      	blt.n	8016298 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 80162ee:	e03c      	b.n	801636a <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 80162f0:	2300      	movs	r3, #0
 80162f2:	60fb      	str	r3, [r7, #12]
 80162f4:	e034      	b.n	8016360 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 80162f6:	4b24      	ldr	r3, [pc, #144]	; (8016388 <record_print+0x104>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	3301      	adds	r3, #1
 80162fc:	68fa      	ldr	r2, [r7, #12]
 80162fe:	4413      	add	r3, r2
 8016300:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016308:	4293      	cmp	r3, r2
 801630a:	dd03      	ble.n	8016314 <record_print+0x90>
				time_index -= max_record_time;
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016312:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016314:	68f9      	ldr	r1, [r7, #12]
 8016316:	4818      	ldr	r0, [pc, #96]	; (8016378 <record_print+0xf4>)
 8016318:	f009 fb24 	bl	801f964 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 801631c:	2300      	movs	r3, #0
 801631e:	603b      	str	r3, [r7, #0]
 8016320:	e015      	b.n	801634e <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8016322:	4916      	ldr	r1, [pc, #88]	; (801637c <record_print+0xf8>)
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801632a:	fb03 f202 	mul.w	r2, r3, r2
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	4413      	add	r3, r2
 8016332:	009b      	lsls	r3, r3, #2
 8016334:	440b      	add	r3, r1
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	4618      	mov	r0, r3
 801633a:	f7ea f92d 	bl	8000598 <__aeabi_f2d>
 801633e:	4602      	mov	r2, r0
 8016340:	460b      	mov	r3, r1
 8016342:	480f      	ldr	r0, [pc, #60]	; (8016380 <record_print+0xfc>)
 8016344:	f009 fb0e 	bl	801f964 <iprintf>
					record_count++) {
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	3301      	adds	r3, #1
 801634c:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	2b03      	cmp	r3, #3
 8016352:	dde6      	ble.n	8016322 <record_print+0x9e>
			printf("\n");
 8016354:	200a      	movs	r0, #10
 8016356:	f009 fb1d 	bl	801f994 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	3301      	adds	r3, #1
 801635e:	60fb      	str	r3, [r7, #12]
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016366:	4293      	cmp	r3, r2
 8016368:	ddc5      	ble.n	80162f6 <record_print+0x72>
}
 801636a:	bf00      	nop
 801636c:	3710      	adds	r7, #16
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	2000d978 	.word	0x2000d978
 8016378:	080223a8 	.word	0x080223a8
 801637c:	20001dec 	.word	0x20001dec
 8016380:	080223ac 	.word	0x080223ac
 8016384:	2000d970 	.word	0x2000d970
 8016388:	2000d974 	.word	0x2000d974

0801638c <interrupt_record>:

void interrupt_record(void) {
 801638c:	b580      	push	{r7, lr}
 801638e:	b084      	sub	sp, #16
 8016390:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016392:	4baf      	ldr	r3, [pc, #700]	; (8016650 <interrupt_record+0x2c4>)
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	2b01      	cmp	r3, #1
 8016398:	d110      	bne.n	80163bc <interrupt_record+0x30>
			r_data[0] = E_speedR;
 801639a:	4bae      	ldr	r3, [pc, #696]	; (8016654 <interrupt_record+0x2c8>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 80163a0:	4bad      	ldr	r3, [pc, #692]	; (8016658 <interrupt_record+0x2cc>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 80163a6:	4bad      	ldr	r3, [pc, #692]	; (801665c <interrupt_record+0x2d0>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 80163ac:	4bac      	ldr	r3, [pc, #688]	; (8016660 <interrupt_record+0x2d4>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80163b2:	463b      	mov	r3, r7
 80163b4:	2104      	movs	r1, #4
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7ff ff1e 	bl	80161f8 <record_data>
		}
	if (record_mode == 2) {
 80163bc:	4ba4      	ldr	r3, [pc, #656]	; (8016650 <interrupt_record+0x2c4>)
 80163be:	781b      	ldrb	r3, [r3, #0]
 80163c0:	2b02      	cmp	r3, #2
 80163c2:	d11b      	bne.n	80163fc <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 80163c4:	4ba7      	ldr	r3, [pc, #668]	; (8016664 <interrupt_record+0x2d8>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 80163ca:	4ba7      	ldr	r3, [pc, #668]	; (8016668 <interrupt_record+0x2dc>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 80163d0:	4ba6      	ldr	r3, [pc, #664]	; (801666c <interrupt_record+0x2e0>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 80163d6:	4ba6      	ldr	r3, [pc, #664]	; (8016670 <interrupt_record+0x2e4>)
 80163d8:	ed93 7a00 	vldr	s14, [r3]
 80163dc:	4ba5      	ldr	r3, [pc, #660]	; (8016674 <interrupt_record+0x2e8>)
 80163de:	edd3 7a00 	vldr	s15, [r3]
 80163e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80163e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80163ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80163ee:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 80163f2:	463b      	mov	r3, r7
 80163f4:	2104      	movs	r1, #4
 80163f6:	4618      	mov	r0, r3
 80163f8:	f7ff fefe 	bl	80161f8 <record_data>
		}
	if (record_mode == 3) {
 80163fc:	4b94      	ldr	r3, [pc, #592]	; (8016650 <interrupt_record+0x2c4>)
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	2b03      	cmp	r3, #3
 8016402:	d126      	bne.n	8016452 <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8016404:	4b99      	ldr	r3, [pc, #612]	; (801666c <interrupt_record+0x2e0>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 801640a:	4b98      	ldr	r3, [pc, #608]	; (801666c <interrupt_record+0x2e0>)
 801640c:	689b      	ldr	r3, [r3, #8]
 801640e:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8016410:	4b97      	ldr	r3, [pc, #604]	; (8016670 <interrupt_record+0x2e4>)
 8016412:	ed93 7a00 	vldr	s14, [r3]
 8016416:	4b97      	ldr	r3, [pc, #604]	; (8016674 <interrupt_record+0x2e8>)
 8016418:	edd3 7a00 	vldr	s15, [r3]
 801641c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016420:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016428:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 801642c:	4b92      	ldr	r3, [pc, #584]	; (8016678 <interrupt_record+0x2ec>)
 801642e:	ed93 7a00 	vldr	s14, [r3]
 8016432:	4b92      	ldr	r3, [pc, #584]	; (801667c <interrupt_record+0x2f0>)
 8016434:	edd3 7a00 	vldr	s15, [r3]
 8016438:	ee37 7a27 	vadd.f32	s14, s14, s15
 801643c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016444:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016448:	463b      	mov	r3, r7
 801644a:	2104      	movs	r1, #4
 801644c:	4618      	mov	r0, r3
 801644e:	f7ff fed3 	bl	80161f8 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8016452:	4b7f      	ldr	r3, [pc, #508]	; (8016650 <interrupt_record+0x2c4>)
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	2b04      	cmp	r3, #4
 8016458:	d126      	bne.n	80164a8 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 801645a:	4b84      	ldr	r3, [pc, #528]	; (801666c <interrupt_record+0x2e0>)
 801645c:	689b      	ldr	r3, [r3, #8]
 801645e:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8016460:	4b7e      	ldr	r3, [pc, #504]	; (801665c <interrupt_record+0x2d0>)
 8016462:	ed93 7a00 	vldr	s14, [r3]
 8016466:	4b7e      	ldr	r3, [pc, #504]	; (8016660 <interrupt_record+0x2d4>)
 8016468:	edd3 7a00 	vldr	s15, [r3]
 801646c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016470:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016474:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016478:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 801647c:	4b80      	ldr	r3, [pc, #512]	; (8016680 <interrupt_record+0x2f4>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016482:	4b7d      	ldr	r3, [pc, #500]	; (8016678 <interrupt_record+0x2ec>)
 8016484:	ed93 7a00 	vldr	s14, [r3]
 8016488:	4b7c      	ldr	r3, [pc, #496]	; (801667c <interrupt_record+0x2f0>)
 801648a:	edd3 7a00 	vldr	s15, [r3]
 801648e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016492:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801649a:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 801649e:	463b      	mov	r3, r7
 80164a0:	2104      	movs	r1, #4
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7ff fea8 	bl	80161f8 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 80164a8:	4b69      	ldr	r3, [pc, #420]	; (8016650 <interrupt_record+0x2c4>)
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	2b05      	cmp	r3, #5
 80164ae:	d110      	bne.n	80164d2 <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 80164b0:	4b6e      	ldr	r3, [pc, #440]	; (801666c <interrupt_record+0x2e0>)
 80164b2:	689b      	ldr	r3, [r3, #8]
 80164b4:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 80164b6:	4b69      	ldr	r3, [pc, #420]	; (801665c <interrupt_record+0x2d0>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 80164bc:	4b68      	ldr	r3, [pc, #416]	; (8016660 <interrupt_record+0x2d4>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80164c2:	4b6f      	ldr	r3, [pc, #444]	; (8016680 <interrupt_record+0x2f4>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80164c8:	463b      	mov	r3, r7
 80164ca:	2104      	movs	r1, #4
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7ff fe93 	bl	80161f8 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 80164d2:	4b5f      	ldr	r3, [pc, #380]	; (8016650 <interrupt_record+0x2c4>)
 80164d4:	781b      	ldrb	r3, [r3, #0]
 80164d6:	2b05      	cmp	r3, #5
 80164d8:	d110      	bne.n	80164fc <interrupt_record+0x170>
			r_data[0] = g_V_L;
 80164da:	4b6a      	ldr	r3, [pc, #424]	; (8016684 <interrupt_record+0x2f8>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 80164e0:	4b5e      	ldr	r3, [pc, #376]	; (801665c <interrupt_record+0x2d0>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 80164e6:	4b5e      	ldr	r3, [pc, #376]	; (8016660 <interrupt_record+0x2d4>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80164ec:	4b64      	ldr	r3, [pc, #400]	; (8016680 <interrupt_record+0x2f4>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80164f2:	463b      	mov	r3, r7
 80164f4:	2104      	movs	r1, #4
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7ff fe7e 	bl	80161f8 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 80164fc:	4b54      	ldr	r3, [pc, #336]	; (8016650 <interrupt_record+0x2c4>)
 80164fe:	781b      	ldrb	r3, [r3, #0]
 8016500:	2b06      	cmp	r3, #6
 8016502:	d110      	bne.n	8016526 <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8016504:	4b59      	ldr	r3, [pc, #356]	; (801666c <interrupt_record+0x2e0>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 801650a:	4b5f      	ldr	r3, [pc, #380]	; (8016688 <interrupt_record+0x2fc>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8016510:	4b5e      	ldr	r3, [pc, #376]	; (801668c <interrupt_record+0x300>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8016516:	4b5e      	ldr	r3, [pc, #376]	; (8016690 <interrupt_record+0x304>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 801651c:	463b      	mov	r3, r7
 801651e:	2104      	movs	r1, #4
 8016520:	4618      	mov	r0, r3
 8016522:	f7ff fe69 	bl	80161f8 <record_data>
			}
	if (record_mode == 7) {
 8016526:	4b4a      	ldr	r3, [pc, #296]	; (8016650 <interrupt_record+0x2c4>)
 8016528:	781b      	ldrb	r3, [r3, #0]
 801652a:	2b07      	cmp	r3, #7
 801652c:	d125      	bne.n	801657a <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 801652e:	4b59      	ldr	r3, [pc, #356]	; (8016694 <interrupt_record+0x308>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	ee07 3a90 	vmov	s15, r3
 8016536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801653a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 801653e:	4b56      	ldr	r3, [pc, #344]	; (8016698 <interrupt_record+0x30c>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	ee07 3a90 	vmov	s15, r3
 8016546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801654a:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 801654e:	4b51      	ldr	r3, [pc, #324]	; (8016694 <interrupt_record+0x308>)
 8016550:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016554:	ee07 3a90 	vmov	s15, r3
 8016558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801655c:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8016560:	4b4d      	ldr	r3, [pc, #308]	; (8016698 <interrupt_record+0x30c>)
 8016562:	691b      	ldr	r3, [r3, #16]
 8016564:	ee07 3a90 	vmov	s15, r3
 8016568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801656c:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016570:	463b      	mov	r3, r7
 8016572:	2104      	movs	r1, #4
 8016574:	4618      	mov	r0, r3
 8016576:	f7ff fe3f 	bl	80161f8 <record_data>
		}
	if (record_mode == 8) {
 801657a:	4b35      	ldr	r3, [pc, #212]	; (8016650 <interrupt_record+0x2c4>)
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	2b08      	cmp	r3, #8
 8016580:	d125      	bne.n	80165ce <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016582:	4b44      	ldr	r3, [pc, #272]	; (8016694 <interrupt_record+0x308>)
 8016584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016586:	ee07 3a90 	vmov	s15, r3
 801658a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801658e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8016592:	4b42      	ldr	r3, [pc, #264]	; (801669c <interrupt_record+0x310>)
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	ee07 3a90 	vmov	s15, r3
 801659a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801659e:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 80165a2:	4b3c      	ldr	r3, [pc, #240]	; (8016694 <interrupt_record+0x308>)
 80165a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80165a8:	ee07 3a90 	vmov	s15, r3
 80165ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165b0:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 80165b4:	4b39      	ldr	r3, [pc, #228]	; (801669c <interrupt_record+0x310>)
 80165b6:	68db      	ldr	r3, [r3, #12]
 80165b8:	ee07 3a90 	vmov	s15, r3
 80165bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165c0:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80165c4:	463b      	mov	r3, r7
 80165c6:	2104      	movs	r1, #4
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7ff fe15 	bl	80161f8 <record_data>
		}
	if (record_mode == 9) { //90
 80165ce:	4b20      	ldr	r3, [pc, #128]	; (8016650 <interrupt_record+0x2c4>)
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	2b09      	cmp	r3, #9
 80165d4:	d11b      	bne.n	801660e <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80165d6:	4b2f      	ldr	r3, [pc, #188]	; (8016694 <interrupt_record+0x308>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	ee07 3a90 	vmov	s15, r3
 80165de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165e2:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 80165e6:	4b2b      	ldr	r3, [pc, #172]	; (8016694 <interrupt_record+0x308>)
 80165e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80165ec:	ee07 3a90 	vmov	s15, r3
 80165f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165f4:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80165f8:	4b29      	ldr	r3, [pc, #164]	; (80166a0 <interrupt_record+0x314>)
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80165fe:	4b29      	ldr	r3, [pc, #164]	; (80166a4 <interrupt_record+0x318>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016604:	463b      	mov	r3, r7
 8016606:	2104      	movs	r1, #4
 8016608:	4618      	mov	r0, r3
 801660a:	f7ff fdf5 	bl	80161f8 <record_data>
		}
	if (record_mode == 10) { //90
 801660e:	4b10      	ldr	r3, [pc, #64]	; (8016650 <interrupt_record+0x2c4>)
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	2b0a      	cmp	r3, #10
 8016614:	d148      	bne.n	80166a8 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016616:	4b1f      	ldr	r3, [pc, #124]	; (8016694 <interrupt_record+0x308>)
 8016618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801661a:	ee07 3a90 	vmov	s15, r3
 801661e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016622:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016626:	4b1b      	ldr	r3, [pc, #108]	; (8016694 <interrupt_record+0x308>)
 8016628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801662c:	ee07 3a90 	vmov	s15, r3
 8016630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016634:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8016638:	4b19      	ldr	r3, [pc, #100]	; (80166a0 <interrupt_record+0x314>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 801663e:	4b19      	ldr	r3, [pc, #100]	; (80166a4 <interrupt_record+0x318>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016644:	463b      	mov	r3, r7
 8016646:	2104      	movs	r1, #4
 8016648:	4618      	mov	r0, r3
 801664a:	f7ff fdd5 	bl	80161f8 <record_data>
 801664e:	e02b      	b.n	80166a8 <interrupt_record+0x31c>
 8016650:	2000d96c 	.word	0x2000d96c
 8016654:	2000022c 	.word	0x2000022c
 8016658:	20000228 	.word	0x20000228
 801665c:	20000224 	.word	0x20000224
 8016660:	20000220 	.word	0x20000220
 8016664:	200004e4 	.word	0x200004e4
 8016668:	20000268 	.word	0x20000268
 801666c:	200004d8 	.word	0x200004d8
 8016670:	2000025c 	.word	0x2000025c
 8016674:	20000258 	.word	0x20000258
 8016678:	20000254 	.word	0x20000254
 801667c:	20000250 	.word	0x20000250
 8016680:	2000027c 	.word	0x2000027c
 8016684:	2000052c 	.word	0x2000052c
 8016688:	20000238 	.word	0x20000238
 801668c:	2000023c 	.word	0x2000023c
 8016690:	20000278 	.word	0x20000278
 8016694:	200002b8 	.word	0x200002b8
 8016698:	20000448 	.word	0x20000448
 801669c:	2000045c 	.word	0x2000045c
 80166a0:	200005e0 	.word	0x200005e0
 80166a4:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 80166a8:	bf00      	nop
 80166aa:	3710      	adds	r7, #16
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80166b4:	4b1b      	ldr	r3, [pc, #108]	; (8016724 <MX_SPI1_Init+0x74>)
 80166b6:	4a1c      	ldr	r2, [pc, #112]	; (8016728 <MX_SPI1_Init+0x78>)
 80166b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80166ba:	4b1a      	ldr	r3, [pc, #104]	; (8016724 <MX_SPI1_Init+0x74>)
 80166bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80166c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80166c2:	4b18      	ldr	r3, [pc, #96]	; (8016724 <MX_SPI1_Init+0x74>)
 80166c4:	2200      	movs	r2, #0
 80166c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80166c8:	4b16      	ldr	r3, [pc, #88]	; (8016724 <MX_SPI1_Init+0x74>)
 80166ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80166ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80166d0:	4b14      	ldr	r3, [pc, #80]	; (8016724 <MX_SPI1_Init+0x74>)
 80166d2:	2200      	movs	r2, #0
 80166d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80166d6:	4b13      	ldr	r3, [pc, #76]	; (8016724 <MX_SPI1_Init+0x74>)
 80166d8:	2200      	movs	r2, #0
 80166da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80166dc:	4b11      	ldr	r3, [pc, #68]	; (8016724 <MX_SPI1_Init+0x74>)
 80166de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80166e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80166e4:	4b0f      	ldr	r3, [pc, #60]	; (8016724 <MX_SPI1_Init+0x74>)
 80166e6:	2208      	movs	r2, #8
 80166e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80166ea:	4b0e      	ldr	r3, [pc, #56]	; (8016724 <MX_SPI1_Init+0x74>)
 80166ec:	2200      	movs	r2, #0
 80166ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80166f0:	4b0c      	ldr	r3, [pc, #48]	; (8016724 <MX_SPI1_Init+0x74>)
 80166f2:	2200      	movs	r2, #0
 80166f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80166f6:	4b0b      	ldr	r3, [pc, #44]	; (8016724 <MX_SPI1_Init+0x74>)
 80166f8:	2200      	movs	r2, #0
 80166fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80166fc:	4b09      	ldr	r3, [pc, #36]	; (8016724 <MX_SPI1_Init+0x74>)
 80166fe:	2207      	movs	r2, #7
 8016700:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016702:	4b08      	ldr	r3, [pc, #32]	; (8016724 <MX_SPI1_Init+0x74>)
 8016704:	2200      	movs	r2, #0
 8016706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8016708:	4b06      	ldr	r3, [pc, #24]	; (8016724 <MX_SPI1_Init+0x74>)
 801670a:	2208      	movs	r2, #8
 801670c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801670e:	4805      	ldr	r0, [pc, #20]	; (8016724 <MX_SPI1_Init+0x74>)
 8016710:	f005 fbca 	bl	801bea8 <HAL_SPI_Init>
 8016714:	4603      	mov	r3, r0
 8016716:	2b00      	cmp	r3, #0
 8016718:	d001      	beq.n	801671e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 801671a:	f7f3 fce6 	bl	800a0ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801671e:	bf00      	nop
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	2000d97c 	.word	0x2000d97c
 8016728:	40013000 	.word	0x40013000

0801672c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8016730:	4b1b      	ldr	r3, [pc, #108]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016732:	4a1c      	ldr	r2, [pc, #112]	; (80167a4 <MX_SPI3_Init+0x78>)
 8016734:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8016736:	4b1a      	ldr	r3, [pc, #104]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016738:	f44f 7282 	mov.w	r2, #260	; 0x104
 801673c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801673e:	4b18      	ldr	r3, [pc, #96]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016740:	2200      	movs	r2, #0
 8016742:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8016744:	4b16      	ldr	r3, [pc, #88]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016746:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801674a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 801674c:	4b14      	ldr	r3, [pc, #80]	; (80167a0 <MX_SPI3_Init+0x74>)
 801674e:	2200      	movs	r2, #0
 8016750:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8016752:	4b13      	ldr	r3, [pc, #76]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016754:	2201      	movs	r2, #1
 8016756:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8016758:	4b11      	ldr	r3, [pc, #68]	; (80167a0 <MX_SPI3_Init+0x74>)
 801675a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801675e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016760:	4b0f      	ldr	r3, [pc, #60]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016762:	2200      	movs	r2, #0
 8016764:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016766:	4b0e      	ldr	r3, [pc, #56]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016768:	2200      	movs	r2, #0
 801676a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 801676c:	4b0c      	ldr	r3, [pc, #48]	; (80167a0 <MX_SPI3_Init+0x74>)
 801676e:	2200      	movs	r2, #0
 8016770:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016772:	4b0b      	ldr	r3, [pc, #44]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016774:	2200      	movs	r2, #0
 8016776:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8016778:	4b09      	ldr	r3, [pc, #36]	; (80167a0 <MX_SPI3_Init+0x74>)
 801677a:	2207      	movs	r2, #7
 801677c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801677e:	4b08      	ldr	r3, [pc, #32]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016780:	2200      	movs	r2, #0
 8016782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8016784:	4b06      	ldr	r3, [pc, #24]	; (80167a0 <MX_SPI3_Init+0x74>)
 8016786:	2200      	movs	r2, #0
 8016788:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801678a:	4805      	ldr	r0, [pc, #20]	; (80167a0 <MX_SPI3_Init+0x74>)
 801678c:	f005 fb8c 	bl	801bea8 <HAL_SPI_Init>
 8016790:	4603      	mov	r3, r0
 8016792:	2b00      	cmp	r3, #0
 8016794:	d001      	beq.n	801679a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8016796:	f7f3 fca8 	bl	800a0ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801679a:	bf00      	nop
 801679c:	bd80      	pop	{r7, pc}
 801679e:	bf00      	nop
 80167a0:	2000d9e0 	.word	0x2000d9e0
 80167a4:	40003c00 	.word	0x40003c00

080167a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b08c      	sub	sp, #48	; 0x30
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80167b0:	f107 031c 	add.w	r3, r7, #28
 80167b4:	2200      	movs	r2, #0
 80167b6:	601a      	str	r2, [r3, #0]
 80167b8:	605a      	str	r2, [r3, #4]
 80167ba:	609a      	str	r2, [r3, #8]
 80167bc:	60da      	str	r2, [r3, #12]
 80167be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4a3d      	ldr	r2, [pc, #244]	; (80168bc <HAL_SPI_MspInit+0x114>)
 80167c6:	4293      	cmp	r3, r2
 80167c8:	d129      	bne.n	801681e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80167ca:	4b3d      	ldr	r3, [pc, #244]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 80167cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167ce:	4a3c      	ldr	r2, [pc, #240]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 80167d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80167d4:	6613      	str	r3, [r2, #96]	; 0x60
 80167d6:	4b3a      	ldr	r3, [pc, #232]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 80167d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80167de:	61bb      	str	r3, [r7, #24]
 80167e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80167e2:	4b37      	ldr	r3, [pc, #220]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 80167e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80167e6:	4a36      	ldr	r2, [pc, #216]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 80167e8:	f043 0301 	orr.w	r3, r3, #1
 80167ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80167ee:	4b34      	ldr	r3, [pc, #208]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 80167f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80167f2:	f003 0301 	and.w	r3, r3, #1
 80167f6:	617b      	str	r3, [r7, #20]
 80167f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80167fa:	23e0      	movs	r3, #224	; 0xe0
 80167fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80167fe:	2302      	movs	r3, #2
 8016800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016802:	2300      	movs	r3, #0
 8016804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016806:	2300      	movs	r3, #0
 8016808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801680a:	2305      	movs	r3, #5
 801680c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801680e:	f107 031c 	add.w	r3, r7, #28
 8016812:	4619      	mov	r1, r3
 8016814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016818:	f004 f98c 	bl	801ab34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 801681c:	e049      	b.n	80168b2 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	4a28      	ldr	r2, [pc, #160]	; (80168c4 <HAL_SPI_MspInit+0x11c>)
 8016824:	4293      	cmp	r3, r2
 8016826:	d144      	bne.n	80168b2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8016828:	4b25      	ldr	r3, [pc, #148]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 801682a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801682c:	4a24      	ldr	r2, [pc, #144]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 801682e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016832:	6593      	str	r3, [r2, #88]	; 0x58
 8016834:	4b22      	ldr	r3, [pc, #136]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 8016836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801683c:	613b      	str	r3, [r7, #16]
 801683e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8016840:	4b1f      	ldr	r3, [pc, #124]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 8016842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016844:	4a1e      	ldr	r2, [pc, #120]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 8016846:	f043 0304 	orr.w	r3, r3, #4
 801684a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801684c:	4b1c      	ldr	r3, [pc, #112]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 801684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016850:	f003 0304 	and.w	r3, r3, #4
 8016854:	60fb      	str	r3, [r7, #12]
 8016856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016858:	4b19      	ldr	r3, [pc, #100]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 801685a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801685c:	4a18      	ldr	r2, [pc, #96]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 801685e:	f043 0302 	orr.w	r3, r3, #2
 8016862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016864:	4b16      	ldr	r3, [pc, #88]	; (80168c0 <HAL_SPI_MspInit+0x118>)
 8016866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016868:	f003 0302 	and.w	r3, r3, #2
 801686c:	60bb      	str	r3, [r7, #8]
 801686e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8016870:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8016874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016876:	2302      	movs	r3, #2
 8016878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801687a:	2300      	movs	r3, #0
 801687c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801687e:	2300      	movs	r3, #0
 8016880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8016882:	2306      	movs	r3, #6
 8016884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016886:	f107 031c 	add.w	r3, r7, #28
 801688a:	4619      	mov	r1, r3
 801688c:	480e      	ldr	r0, [pc, #56]	; (80168c8 <HAL_SPI_MspInit+0x120>)
 801688e:	f004 f951 	bl	801ab34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8016892:	2320      	movs	r3, #32
 8016894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016896:	2302      	movs	r3, #2
 8016898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801689a:	2300      	movs	r3, #0
 801689c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801689e:	2300      	movs	r3, #0
 80168a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80168a2:	2306      	movs	r3, #6
 80168a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80168a6:	f107 031c 	add.w	r3, r7, #28
 80168aa:	4619      	mov	r1, r3
 80168ac:	4807      	ldr	r0, [pc, #28]	; (80168cc <HAL_SPI_MspInit+0x124>)
 80168ae:	f004 f941 	bl	801ab34 <HAL_GPIO_Init>
}
 80168b2:	bf00      	nop
 80168b4:	3730      	adds	r7, #48	; 0x30
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	40013000 	.word	0x40013000
 80168c0:	40021000 	.word	0x40021000
 80168c4:	40003c00 	.word	0x40003c00
 80168c8:	48000800 	.word	0x48000800
 80168cc:	48000400 	.word	0x48000400

080168d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80168d6:	4b0f      	ldr	r3, [pc, #60]	; (8016914 <HAL_MspInit+0x44>)
 80168d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168da:	4a0e      	ldr	r2, [pc, #56]	; (8016914 <HAL_MspInit+0x44>)
 80168dc:	f043 0301 	orr.w	r3, r3, #1
 80168e0:	6613      	str	r3, [r2, #96]	; 0x60
 80168e2:	4b0c      	ldr	r3, [pc, #48]	; (8016914 <HAL_MspInit+0x44>)
 80168e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168e6:	f003 0301 	and.w	r3, r3, #1
 80168ea:	607b      	str	r3, [r7, #4]
 80168ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80168ee:	4b09      	ldr	r3, [pc, #36]	; (8016914 <HAL_MspInit+0x44>)
 80168f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168f2:	4a08      	ldr	r2, [pc, #32]	; (8016914 <HAL_MspInit+0x44>)
 80168f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80168f8:	6593      	str	r3, [r2, #88]	; 0x58
 80168fa:	4b06      	ldr	r3, [pc, #24]	; (8016914 <HAL_MspInit+0x44>)
 80168fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016902:	603b      	str	r3, [r7, #0]
 8016904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8016906:	f004 fb53 	bl	801afb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801690a:	bf00      	nop
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	40021000 	.word	0x40021000

08016918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016918:	b480      	push	{r7}
 801691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801691c:	e7fe      	b.n	801691c <NMI_Handler+0x4>

0801691e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801691e:	b480      	push	{r7}
 8016920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016922:	e7fe      	b.n	8016922 <HardFault_Handler+0x4>

08016924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016924:	b480      	push	{r7}
 8016926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016928:	e7fe      	b.n	8016928 <MemManage_Handler+0x4>

0801692a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801692a:	b480      	push	{r7}
 801692c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801692e:	e7fe      	b.n	801692e <BusFault_Handler+0x4>

08016930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016930:	b480      	push	{r7}
 8016932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016934:	e7fe      	b.n	8016934 <UsageFault_Handler+0x4>

08016936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016936:	b480      	push	{r7}
 8016938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801693a:	bf00      	nop
 801693c:	46bd      	mov	sp, r7
 801693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016942:	4770      	bx	lr

08016944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016944:	b480      	push	{r7}
 8016946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016948:	bf00      	nop
 801694a:	46bd      	mov	sp, r7
 801694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016950:	4770      	bx	lr

08016952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8016952:	b480      	push	{r7}
 8016954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016956:	bf00      	nop
 8016958:	46bd      	mov	sp, r7
 801695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695e:	4770      	bx	lr

08016960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016964:	f001 f88e 	bl	8017a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016968:	bf00      	nop
 801696a:	bd80      	pop	{r7, pc}

0801696c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8016970:	4802      	ldr	r0, [pc, #8]	; (801697c <DMA1_Channel1_IRQHandler+0x10>)
 8016972:	f003 fd27 	bl	801a3c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8016976:	bf00      	nop
 8016978:	bd80      	pop	{r7, pc}
 801697a:	bf00      	nop
 801697c:	200007a0 	.word	0x200007a0

08016980 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8016984:	4802      	ldr	r0, [pc, #8]	; (8016990 <ADC1_2_IRQHandler+0x10>)
 8016986:	f002 f82d 	bl	80189e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 801698a:	bf00      	nop
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	20000734 	.word	0x20000734

08016994 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8016998:	480d      	ldr	r0, [pc, #52]	; (80169d0 <TIM6_DAC_IRQHandler+0x3c>)
 801699a:	f006 fc65 	bl	801d268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 801699e:	f7f1 fb47 	bl	8008030 <interrupt_timer>
  interupt_calSensor();
 80169a2:	f7eb f9b3 	bl	8001d0c <interupt_calSensor>
  ICM20602_DataUpdate();
 80169a6:	f7f1 f84b 	bl	8007a40 <ICM20602_DataUpdate>
  interrupt_calGyro();
 80169aa:	f7ea ffbd 	bl	8001928 <interrupt_calGyro>
  AS5047_DataUpdate();
 80169ae:	f7f0 fd03 	bl	80073b8 <AS5047_DataUpdate>
  interupt_calEncoder();
 80169b2:	f7ea fb59 	bl	8001068 <interupt_calEncoder>
  interupt_calFusion();
 80169b6:	f7ea fd17 	bl	80013e8 <interupt_calFusion>
  interrupt_WallCut();
 80169ba:	f7ef fccd 	bl	8006358 <interrupt_WallCut>
  interupt_DriveMotor();
 80169be:	f7eb fb2f 	bl	8002020 <interupt_DriveMotor>

  interrupt_FailSafe();
 80169c2:	f7f3 f87d 	bl	8009ac0 <interrupt_FailSafe>
  interrupt_record();
 80169c6:	f7ff fce1 	bl	801638c <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80169ca:	bf00      	nop
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	2000da48 	.word	0x2000da48

080169d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80169d4:	b480      	push	{r7}
 80169d6:	af00      	add	r7, sp, #0
	return 1;
 80169d8:	2301      	movs	r3, #1
}
 80169da:	4618      	mov	r0, r3
 80169dc:	46bd      	mov	sp, r7
 80169de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e2:	4770      	bx	lr

080169e4 <_kill>:

int _kill(int pid, int sig)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b082      	sub	sp, #8
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
 80169ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80169ee:	f008 fb0f 	bl	801f010 <__errno>
 80169f2:	4603      	mov	r3, r0
 80169f4:	2216      	movs	r2, #22
 80169f6:	601a      	str	r2, [r3, #0]
	return -1;
 80169f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <_exit>:

void _exit (int status)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8016a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f7ff ffe7 	bl	80169e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8016a16:	e7fe      	b.n	8016a16 <_exit+0x12>

08016a18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b086      	sub	sp, #24
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	60b9      	str	r1, [r7, #8]
 8016a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016a24:	2300      	movs	r3, #0
 8016a26:	617b      	str	r3, [r7, #20]
 8016a28:	e00a      	b.n	8016a40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8016a2a:	f3af 8000 	nop.w
 8016a2e:	4601      	mov	r1, r0
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	1c5a      	adds	r2, r3, #1
 8016a34:	60ba      	str	r2, [r7, #8]
 8016a36:	b2ca      	uxtb	r2, r1
 8016a38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016a3a:	697b      	ldr	r3, [r7, #20]
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	617b      	str	r3, [r7, #20]
 8016a40:	697a      	ldr	r2, [r7, #20]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	429a      	cmp	r2, r3
 8016a46:	dbf0      	blt.n	8016a2a <_read+0x12>
	}

return len;
 8016a48:	687b      	ldr	r3, [r7, #4]
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3718      	adds	r7, #24
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
	...

08016a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b086      	sub	sp, #24
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	60f8      	str	r0, [r7, #12]
 8016a5c:	60b9      	str	r1, [r7, #8]
 8016a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016a60:	2300      	movs	r3, #0
 8016a62:	617b      	str	r3, [r7, #20]
 8016a64:	e00a      	b.n	8016a7c <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8016a66:	68b9      	ldr	r1, [r7, #8]
 8016a68:	1c4b      	adds	r3, r1, #1
 8016a6a:	60bb      	str	r3, [r7, #8]
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	2201      	movs	r2, #1
 8016a70:	4807      	ldr	r0, [pc, #28]	; (8016a90 <_write+0x3c>)
 8016a72:	f007 fc83 	bl	801e37c <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	3301      	adds	r3, #1
 8016a7a:	617b      	str	r3, [r7, #20]
 8016a7c:	697a      	ldr	r2, [r7, #20]
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	429a      	cmp	r2, r3
 8016a82:	dbf0      	blt.n	8016a66 <_write+0x12>
	}
	return len;
 8016a84:	687b      	ldr	r3, [r7, #4]
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3718      	adds	r7, #24
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}
 8016a8e:	bf00      	nop
 8016a90:	2000e04c 	.word	0x2000e04c

08016a94 <_close>:

int _close(int file)
{
 8016a94:	b480      	push	{r7}
 8016a96:	b083      	sub	sp, #12
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
	return -1;
 8016a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	370c      	adds	r7, #12
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aaa:	4770      	bx	lr

08016aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016aac:	b480      	push	{r7}
 8016aae:	b083      	sub	sp, #12
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016abc:	605a      	str	r2, [r3, #4]
	return 0;
 8016abe:	2300      	movs	r3, #0
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	370c      	adds	r7, #12
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aca:	4770      	bx	lr

08016acc <_isatty>:

int _isatty(int file)
{
 8016acc:	b480      	push	{r7}
 8016ace:	b083      	sub	sp, #12
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
	return 1;
 8016ad4:	2301      	movs	r3, #1
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	370c      	adds	r7, #12
 8016ada:	46bd      	mov	sp, r7
 8016adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae0:	4770      	bx	lr

08016ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8016ae2:	b480      	push	{r7}
 8016ae4:	b085      	sub	sp, #20
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	60f8      	str	r0, [r7, #12]
 8016aea:	60b9      	str	r1, [r7, #8]
 8016aec:	607a      	str	r2, [r7, #4]
	return 0;
 8016aee:	2300      	movs	r3, #0
}
 8016af0:	4618      	mov	r0, r3
 8016af2:	3714      	adds	r7, #20
 8016af4:	46bd      	mov	sp, r7
 8016af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afa:	4770      	bx	lr

08016afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b086      	sub	sp, #24
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8016b04:	4a14      	ldr	r2, [pc, #80]	; (8016b58 <_sbrk+0x5c>)
 8016b06:	4b15      	ldr	r3, [pc, #84]	; (8016b5c <_sbrk+0x60>)
 8016b08:	1ad3      	subs	r3, r2, r3
 8016b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016b10:	4b13      	ldr	r3, [pc, #76]	; (8016b60 <_sbrk+0x64>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d102      	bne.n	8016b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016b18:	4b11      	ldr	r3, [pc, #68]	; (8016b60 <_sbrk+0x64>)
 8016b1a:	4a12      	ldr	r2, [pc, #72]	; (8016b64 <_sbrk+0x68>)
 8016b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8016b1e:	4b10      	ldr	r3, [pc, #64]	; (8016b60 <_sbrk+0x64>)
 8016b20:	681a      	ldr	r2, [r3, #0]
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	4413      	add	r3, r2
 8016b26:	693a      	ldr	r2, [r7, #16]
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d207      	bcs.n	8016b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8016b2c:	f008 fa70 	bl	801f010 <__errno>
 8016b30:	4603      	mov	r3, r0
 8016b32:	220c      	movs	r2, #12
 8016b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8016b36:	f04f 33ff 	mov.w	r3, #4294967295
 8016b3a:	e009      	b.n	8016b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8016b3c:	4b08      	ldr	r3, [pc, #32]	; (8016b60 <_sbrk+0x64>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016b42:	4b07      	ldr	r3, [pc, #28]	; (8016b60 <_sbrk+0x64>)
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	4413      	add	r3, r2
 8016b4a:	4a05      	ldr	r2, [pc, #20]	; (8016b60 <_sbrk+0x64>)
 8016b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3718      	adds	r7, #24
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	2001c000 	.word	0x2001c000
 8016b5c:	00000400 	.word	0x00000400
 8016b60:	2000da44 	.word	0x2000da44
 8016b64:	2000e0f0 	.word	0x2000e0f0

08016b68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8016b68:	b480      	push	{r7}
 8016b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8016b6c:	4b06      	ldr	r3, [pc, #24]	; (8016b88 <SystemInit+0x20>)
 8016b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b72:	4a05      	ldr	r2, [pc, #20]	; (8016b88 <SystemInit+0x20>)
 8016b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016b7c:	bf00      	nop
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b84:	4770      	bx	lr
 8016b86:	bf00      	nop
 8016b88:	e000ed00 	.word	0xe000ed00

08016b8c <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016b92:	1d3b      	adds	r3, r7, #4
 8016b94:	2200      	movs	r2, #0
 8016b96:	601a      	str	r2, [r3, #0]
 8016b98:	605a      	str	r2, [r3, #4]
 8016b9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8016b9c:	4b14      	ldr	r3, [pc, #80]	; (8016bf0 <MX_TIM6_Init+0x64>)
 8016b9e:	4a15      	ldr	r2, [pc, #84]	; (8016bf4 <MX_TIM6_Init+0x68>)
 8016ba0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 8016ba2:	4b13      	ldr	r3, [pc, #76]	; (8016bf0 <MX_TIM6_Init+0x64>)
 8016ba4:	2254      	movs	r2, #84	; 0x54
 8016ba6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016ba8:	4b11      	ldr	r3, [pc, #68]	; (8016bf0 <MX_TIM6_Init+0x64>)
 8016baa:	2200      	movs	r2, #0
 8016bac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8016bae:	4b10      	ldr	r3, [pc, #64]	; (8016bf0 <MX_TIM6_Init+0x64>)
 8016bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8016bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016bb6:	4b0e      	ldr	r3, [pc, #56]	; (8016bf0 <MX_TIM6_Init+0x64>)
 8016bb8:	2200      	movs	r2, #0
 8016bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8016bbc:	480c      	ldr	r0, [pc, #48]	; (8016bf0 <MX_TIM6_Init+0x64>)
 8016bbe:	f006 f88b 	bl	801ccd8 <HAL_TIM_Base_Init>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d001      	beq.n	8016bcc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8016bc8:	f7f3 fa8f 	bl	800a0ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8016bd4:	1d3b      	adds	r3, r7, #4
 8016bd6:	4619      	mov	r1, r3
 8016bd8:	4805      	ldr	r0, [pc, #20]	; (8016bf0 <MX_TIM6_Init+0x64>)
 8016bda:	f007 f9f9 	bl	801dfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8016bde:	4603      	mov	r3, r0
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d001      	beq.n	8016be8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8016be4:	f7f3 fa81 	bl	800a0ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8016be8:	bf00      	nop
 8016bea:	3710      	adds	r7, #16
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}
 8016bf0:	2000da48 	.word	0x2000da48
 8016bf4:	40001000 	.word	0x40001000

08016bf8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b098      	sub	sp, #96	; 0x60
 8016bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016c02:	2200      	movs	r2, #0
 8016c04:	601a      	str	r2, [r3, #0]
 8016c06:	605a      	str	r2, [r3, #4]
 8016c08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016c0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c0e:	2200      	movs	r2, #0
 8016c10:	601a      	str	r2, [r3, #0]
 8016c12:	605a      	str	r2, [r3, #4]
 8016c14:	609a      	str	r2, [r3, #8]
 8016c16:	60da      	str	r2, [r3, #12]
 8016c18:	611a      	str	r2, [r3, #16]
 8016c1a:	615a      	str	r2, [r3, #20]
 8016c1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016c1e:	1d3b      	adds	r3, r7, #4
 8016c20:	2234      	movs	r2, #52	; 0x34
 8016c22:	2100      	movs	r1, #0
 8016c24:	4618      	mov	r0, r3
 8016c26:	f008 fa2b 	bl	801f080 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8016c2a:	4b41      	ldr	r3, [pc, #260]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c2c:	4a41      	ldr	r2, [pc, #260]	; (8016d34 <MX_TIM8_Init+0x13c>)
 8016c2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8016c30:	4b3f      	ldr	r3, [pc, #252]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c32:	2201      	movs	r2, #1
 8016c34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016c36:	4b3e      	ldr	r3, [pc, #248]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c38:	2200      	movs	r2, #0
 8016c3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8016c3c:	4b3c      	ldr	r3, [pc, #240]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c3e:	f240 628f 	movw	r2, #1679	; 0x68f
 8016c42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016c44:	4b3a      	ldr	r3, [pc, #232]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c46:	2200      	movs	r2, #0
 8016c48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8016c4a:	4b39      	ldr	r3, [pc, #228]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016c50:	4b37      	ldr	r3, [pc, #220]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c52:	2200      	movs	r2, #0
 8016c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8016c56:	4836      	ldr	r0, [pc, #216]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c58:	f006 f906 	bl	801ce68 <HAL_TIM_PWM_Init>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d001      	beq.n	8016c66 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8016c62:	f7f3 fa42 	bl	800a0ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016c66:	2300      	movs	r3, #0
 8016c68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8016c72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016c76:	4619      	mov	r1, r3
 8016c78:	482d      	ldr	r0, [pc, #180]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016c7a:	f007 f9a9 	bl	801dfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d001      	beq.n	8016c88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8016c84:	f7f3 fa31 	bl	800a0ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016c88:	2360      	movs	r3, #96	; 0x60
 8016c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8016c8c:	f240 13a3 	movw	r3, #419	; 0x1a3
 8016c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016c92:	2300      	movs	r3, #0
 8016c94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016c96:	2300      	movs	r3, #0
 8016c98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016caa:	2200      	movs	r2, #0
 8016cac:	4619      	mov	r1, r3
 8016cae:	4820      	ldr	r0, [pc, #128]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016cb0:	f006 fc5a 	bl	801d568 <HAL_TIM_PWM_ConfigChannel>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d001      	beq.n	8016cbe <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8016cba:	f7f3 fa16 	bl	800a0ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8016cbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016cc2:	2208      	movs	r2, #8
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	481a      	ldr	r0, [pc, #104]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016cc8:	f006 fc4e 	bl	801d568 <HAL_TIM_PWM_ConfigChannel>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d001      	beq.n	8016cd6 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8016cd2:	f7f3 fa0a 	bl	800a0ea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016cda:	2300      	movs	r3, #0
 8016cdc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016cee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8016cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016d00:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8016d02:	2300      	movs	r3, #0
 8016d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8016d06:	2300      	movs	r3, #0
 8016d08:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8016d0e:	1d3b      	adds	r3, r7, #4
 8016d10:	4619      	mov	r1, r3
 8016d12:	4807      	ldr	r0, [pc, #28]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016d14:	f007 f9ea 	bl	801e0ec <HAL_TIMEx_ConfigBreakDeadTime>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d001      	beq.n	8016d22 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8016d1e:	f7f3 f9e4 	bl	800a0ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8016d22:	4803      	ldr	r0, [pc, #12]	; (8016d30 <MX_TIM8_Init+0x138>)
 8016d24:	f000 f8da 	bl	8016edc <HAL_TIM_MspPostInit>

}
 8016d28:	bf00      	nop
 8016d2a:	3760      	adds	r7, #96	; 0x60
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	bd80      	pop	{r7, pc}
 8016d30:	2000da94 	.word	0x2000da94
 8016d34:	40013400 	.word	0x40013400

08016d38 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b094      	sub	sp, #80	; 0x50
 8016d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8016d3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016d42:	2200      	movs	r2, #0
 8016d44:	601a      	str	r2, [r3, #0]
 8016d46:	605a      	str	r2, [r3, #4]
 8016d48:	609a      	str	r2, [r3, #8]
 8016d4a:	60da      	str	r2, [r3, #12]
 8016d4c:	611a      	str	r2, [r3, #16]
 8016d4e:	615a      	str	r2, [r3, #20]
 8016d50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016d52:	463b      	mov	r3, r7
 8016d54:	2234      	movs	r2, #52	; 0x34
 8016d56:	2100      	movs	r1, #0
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f008 f991 	bl	801f080 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8016d5e:	4b30      	ldr	r3, [pc, #192]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d60:	4a30      	ldr	r2, [pc, #192]	; (8016e24 <MX_TIM16_Init+0xec>)
 8016d62:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8016d64:	4b2e      	ldr	r3, [pc, #184]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d66:	2201      	movs	r2, #1
 8016d68:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016d6a:	4b2d      	ldr	r3, [pc, #180]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8016d70:	4b2b      	ldr	r3, [pc, #172]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d72:	2264      	movs	r2, #100	; 0x64
 8016d74:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016d76:	4b2a      	ldr	r3, [pc, #168]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d78:	2200      	movs	r2, #0
 8016d7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8016d7c:	4b28      	ldr	r3, [pc, #160]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d7e:	2200      	movs	r2, #0
 8016d80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016d82:	4b27      	ldr	r3, [pc, #156]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d84:	2200      	movs	r2, #0
 8016d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8016d88:	4825      	ldr	r0, [pc, #148]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d8a:	f005 ffa5 	bl	801ccd8 <HAL_TIM_Base_Init>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d001      	beq.n	8016d98 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8016d94:	f7f3 f9a9 	bl	800a0ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8016d98:	4821      	ldr	r0, [pc, #132]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016d9a:	f006 f865 	bl	801ce68 <HAL_TIM_PWM_Init>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d001      	beq.n	8016da8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8016da4:	f7f3 f9a1 	bl	800a0ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016da8:	2360      	movs	r3, #96	; 0x60
 8016daa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8016dac:	231e      	movs	r3, #30
 8016dae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016db0:	2300      	movs	r3, #0
 8016db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016db4:	2300      	movs	r3, #0
 8016db6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016db8:	2300      	movs	r3, #0
 8016dba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016dc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016dc8:	2200      	movs	r2, #0
 8016dca:	4619      	mov	r1, r3
 8016dcc:	4814      	ldr	r0, [pc, #80]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016dce:	f006 fbcb 	bl	801d568 <HAL_TIM_PWM_ConfigChannel>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d001      	beq.n	8016ddc <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8016dd8:	f7f3 f987 	bl	800a0ea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016de0:	2300      	movs	r3, #0
 8016de2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016de4:	2300      	movs	r3, #0
 8016de6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016de8:	2300      	movs	r3, #0
 8016dea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016dec:	2300      	movs	r3, #0
 8016dee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016df4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016df6:	2300      	movs	r3, #0
 8016df8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8016dfe:	463b      	mov	r3, r7
 8016e00:	4619      	mov	r1, r3
 8016e02:	4807      	ldr	r0, [pc, #28]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016e04:	f007 f972 	bl	801e0ec <HAL_TIMEx_ConfigBreakDeadTime>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d001      	beq.n	8016e12 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8016e0e:	f7f3 f96c 	bl	800a0ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8016e12:	4803      	ldr	r0, [pc, #12]	; (8016e20 <MX_TIM16_Init+0xe8>)
 8016e14:	f000 f862 	bl	8016edc <HAL_TIM_MspPostInit>

}
 8016e18:	bf00      	nop
 8016e1a:	3750      	adds	r7, #80	; 0x50
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	bd80      	pop	{r7, pc}
 8016e20:	2000dae0 	.word	0x2000dae0
 8016e24:	40014400 	.word	0x40014400

08016e28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	4a16      	ldr	r2, [pc, #88]	; (8016e90 <HAL_TIM_Base_MspInit+0x68>)
 8016e36:	4293      	cmp	r3, r2
 8016e38:	d114      	bne.n	8016e64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8016e3a:	4b16      	ldr	r3, [pc, #88]	; (8016e94 <HAL_TIM_Base_MspInit+0x6c>)
 8016e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e3e:	4a15      	ldr	r2, [pc, #84]	; (8016e94 <HAL_TIM_Base_MspInit+0x6c>)
 8016e40:	f043 0310 	orr.w	r3, r3, #16
 8016e44:	6593      	str	r3, [r2, #88]	; 0x58
 8016e46:	4b13      	ldr	r3, [pc, #76]	; (8016e94 <HAL_TIM_Base_MspInit+0x6c>)
 8016e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e4a:	f003 0310 	and.w	r3, r3, #16
 8016e4e:	60fb      	str	r3, [r7, #12]
 8016e50:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8016e52:	2200      	movs	r2, #0
 8016e54:	2103      	movs	r1, #3
 8016e56:	2036      	movs	r0, #54	; 0x36
 8016e58:	f003 f903 	bl	801a062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8016e5c:	2036      	movs	r0, #54	; 0x36
 8016e5e:	f003 f91a 	bl	801a096 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8016e62:	e010      	b.n	8016e86 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	4a0b      	ldr	r2, [pc, #44]	; (8016e98 <HAL_TIM_Base_MspInit+0x70>)
 8016e6a:	4293      	cmp	r3, r2
 8016e6c:	d10b      	bne.n	8016e86 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8016e6e:	4b09      	ldr	r3, [pc, #36]	; (8016e94 <HAL_TIM_Base_MspInit+0x6c>)
 8016e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e72:	4a08      	ldr	r2, [pc, #32]	; (8016e94 <HAL_TIM_Base_MspInit+0x6c>)
 8016e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016e78:	6613      	str	r3, [r2, #96]	; 0x60
 8016e7a:	4b06      	ldr	r3, [pc, #24]	; (8016e94 <HAL_TIM_Base_MspInit+0x6c>)
 8016e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016e82:	60bb      	str	r3, [r7, #8]
 8016e84:	68bb      	ldr	r3, [r7, #8]
}
 8016e86:	bf00      	nop
 8016e88:	3710      	adds	r7, #16
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}
 8016e8e:	bf00      	nop
 8016e90:	40001000 	.word	0x40001000
 8016e94:	40021000 	.word	0x40021000
 8016e98:	40014400 	.word	0x40014400

08016e9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	b085      	sub	sp, #20
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	4a0a      	ldr	r2, [pc, #40]	; (8016ed4 <HAL_TIM_PWM_MspInit+0x38>)
 8016eaa:	4293      	cmp	r3, r2
 8016eac:	d10b      	bne.n	8016ec6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8016eae:	4b0a      	ldr	r3, [pc, #40]	; (8016ed8 <HAL_TIM_PWM_MspInit+0x3c>)
 8016eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016eb2:	4a09      	ldr	r2, [pc, #36]	; (8016ed8 <HAL_TIM_PWM_MspInit+0x3c>)
 8016eb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8016eba:	4b07      	ldr	r3, [pc, #28]	; (8016ed8 <HAL_TIM_PWM_MspInit+0x3c>)
 8016ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016ec2:	60fb      	str	r3, [r7, #12]
 8016ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8016ec6:	bf00      	nop
 8016ec8:	3714      	adds	r7, #20
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed0:	4770      	bx	lr
 8016ed2:	bf00      	nop
 8016ed4:	40013400 	.word	0x40013400
 8016ed8:	40021000 	.word	0x40021000

08016edc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b08a      	sub	sp, #40	; 0x28
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016ee4:	f107 0314 	add.w	r3, r7, #20
 8016ee8:	2200      	movs	r2, #0
 8016eea:	601a      	str	r2, [r3, #0]
 8016eec:	605a      	str	r2, [r3, #4]
 8016eee:	609a      	str	r2, [r3, #8]
 8016ef0:	60da      	str	r2, [r3, #12]
 8016ef2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	4a2b      	ldr	r2, [pc, #172]	; (8016fa8 <HAL_TIM_MspPostInit+0xcc>)
 8016efa:	4293      	cmp	r3, r2
 8016efc:	d12d      	bne.n	8016f5a <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016efe:	4b2b      	ldr	r3, [pc, #172]	; (8016fac <HAL_TIM_MspPostInit+0xd0>)
 8016f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f02:	4a2a      	ldr	r2, [pc, #168]	; (8016fac <HAL_TIM_MspPostInit+0xd0>)
 8016f04:	f043 0302 	orr.w	r3, r3, #2
 8016f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016f0a:	4b28      	ldr	r3, [pc, #160]	; (8016fac <HAL_TIM_MspPostInit+0xd0>)
 8016f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f0e:	f003 0302 	and.w	r3, r3, #2
 8016f12:	613b      	str	r3, [r7, #16]
 8016f14:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8016f16:	2340      	movs	r3, #64	; 0x40
 8016f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f1a:	2302      	movs	r3, #2
 8016f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016f22:	2300      	movs	r3, #0
 8016f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8016f26:	2305      	movs	r3, #5
 8016f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016f2a:	f107 0314 	add.w	r3, r7, #20
 8016f2e:	4619      	mov	r1, r3
 8016f30:	481f      	ldr	r0, [pc, #124]	; (8016fb0 <HAL_TIM_MspPostInit+0xd4>)
 8016f32:	f003 fdff 	bl	801ab34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8016f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f3c:	2302      	movs	r3, #2
 8016f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f40:	2300      	movs	r3, #0
 8016f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016f44:	2300      	movs	r3, #0
 8016f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8016f48:	230a      	movs	r3, #10
 8016f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016f4c:	f107 0314 	add.w	r3, r7, #20
 8016f50:	4619      	mov	r1, r3
 8016f52:	4817      	ldr	r0, [pc, #92]	; (8016fb0 <HAL_TIM_MspPostInit+0xd4>)
 8016f54:	f003 fdee 	bl	801ab34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8016f58:	e022      	b.n	8016fa0 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	4a15      	ldr	r2, [pc, #84]	; (8016fb4 <HAL_TIM_MspPostInit+0xd8>)
 8016f60:	4293      	cmp	r3, r2
 8016f62:	d11d      	bne.n	8016fa0 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016f64:	4b11      	ldr	r3, [pc, #68]	; (8016fac <HAL_TIM_MspPostInit+0xd0>)
 8016f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f68:	4a10      	ldr	r2, [pc, #64]	; (8016fac <HAL_TIM_MspPostInit+0xd0>)
 8016f6a:	f043 0301 	orr.w	r3, r3, #1
 8016f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016f70:	4b0e      	ldr	r3, [pc, #56]	; (8016fac <HAL_TIM_MspPostInit+0xd0>)
 8016f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f74:	f003 0301 	and.w	r3, r3, #1
 8016f78:	60fb      	str	r3, [r7, #12]
 8016f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8016f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f82:	2302      	movs	r3, #2
 8016f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f86:	2300      	movs	r3, #0
 8016f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8016f8e:	2301      	movs	r3, #1
 8016f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8016f92:	f107 0314 	add.w	r3, r7, #20
 8016f96:	4619      	mov	r1, r3
 8016f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016f9c:	f003 fdca 	bl	801ab34 <HAL_GPIO_Init>
}
 8016fa0:	bf00      	nop
 8016fa2:	3728      	adds	r7, #40	; 0x28
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}
 8016fa8:	40013400 	.word	0x40013400
 8016fac:	40021000 	.word	0x40021000
 8016fb0:	48000400 	.word	0x48000400
 8016fb4:	40014400 	.word	0x40014400

08016fb8 <get_center_velocity>:

parameter_speed speed600_shortest;

parameter_speed speed600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8016fb8:	b084      	sub	sp, #16
 8016fba:	b480      	push	{r7}
 8016fbc:	b083      	sub	sp, #12
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	f107 0c10 	add.w	ip, r7, #16
 8016fc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8016fc8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016fcc:	f113 0f02 	cmn.w	r3, #2
 8016fd0:	d102      	bne.n	8016fd8 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8016fd2:	69bb      	ldr	r3, [r7, #24]
 8016fd4:	607b      	str	r3, [r7, #4]
 8016fd6:	e083      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8016fd8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016fdc:	f113 0f03 	cmn.w	r3, #3
 8016fe0:	d102      	bne.n	8016fe8 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8016fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe4:	607b      	str	r3, [r7, #4]
 8016fe6:	e07b      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8016fe8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016fec:	f113 0f04 	cmn.w	r3, #4
 8016ff0:	d102      	bne.n	8016ff8 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8016ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ff4:	607b      	str	r3, [r7, #4]
 8016ff6:	e073      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8016ff8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016ffc:	f113 0f05 	cmn.w	r3, #5
 8017000:	d102      	bne.n	8017008 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8017002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017004:	607b      	str	r3, [r7, #4]
 8017006:	e06b      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8017008:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801700c:	f113 0f06 	cmn.w	r3, #6
 8017010:	d102      	bne.n	8017018 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8017012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017014:	607b      	str	r3, [r7, #4]
 8017016:	e063      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8017018:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801701c:	f113 0f07 	cmn.w	r3, #7
 8017020:	d102      	bne.n	8017028 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8017022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017024:	607b      	str	r3, [r7, #4]
 8017026:	e05b      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8017028:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801702c:	f113 0f08 	cmn.w	r3, #8
 8017030:	d103      	bne.n	801703a <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 8017032:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017036:	607b      	str	r3, [r7, #4]
 8017038:	e052      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 801703a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801703e:	f113 0f09 	cmn.w	r3, #9
 8017042:	d103      	bne.n	801704c <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8017044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017048:	607b      	str	r3, [r7, #4]
 801704a:	e049      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 801704c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017050:	f113 0f0a 	cmn.w	r3, #10
 8017054:	d103      	bne.n	801705e <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8017056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801705a:	607b      	str	r3, [r7, #4]
 801705c:	e040      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 801705e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017062:	f113 0f0b 	cmn.w	r3, #11
 8017066:	d103      	bne.n	8017070 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8017068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801706c:	607b      	str	r3, [r7, #4]
 801706e:	e037      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8017070:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017074:	f113 0f0c 	cmn.w	r3, #12
 8017078:	d103      	bne.n	8017082 <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 801707a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801707e:	607b      	str	r3, [r7, #4]
 8017080:	e02e      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8017082:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017086:	f113 0f0d 	cmn.w	r3, #13
 801708a:	d103      	bne.n	8017094 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 801708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017090:	607b      	str	r3, [r7, #4]
 8017092:	e025      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8017094:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017098:	f113 0f0e 	cmn.w	r3, #14
 801709c:	d103      	bne.n	80170a6 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 801709e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80170a2:	607b      	str	r3, [r7, #4]
 80170a4:	e01c      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 80170a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80170aa:	f113 0f0f 	cmn.w	r3, #15
 80170ae:	d103      	bne.n	80170b8 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 80170b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80170b4:	607b      	str	r3, [r7, #4]
 80170b6:	e013      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 80170b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80170bc:	f113 0f10 	cmn.w	r3, #16
 80170c0:	d103      	bne.n	80170ca <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 80170c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80170c6:	607b      	str	r3, [r7, #4]
 80170c8:	e00a      	b.n	80170e0 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 80170ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80170ce:	f113 0f11 	cmn.w	r3, #17
 80170d2:	d103      	bne.n	80170dc <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 80170d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80170d8:	607b      	str	r3, [r7, #4]
 80170da:	e001      	b.n	80170e0 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	ee07 3a90 	vmov	s15, r3
}
 80170e6:	eeb0 0a67 	vmov.f32	s0, s15
 80170ea:	370c      	adds	r7, #12
 80170ec:	46bd      	mov	sp, r7
 80170ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f2:	b004      	add	sp, #16
 80170f4:	4770      	bx	lr
	...

080170f8 <input_parameter>:

void input_parameter(void) {
 80170f8:	b480      	push	{r7}
 80170fa:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 80170fc:	4b8f      	ldr	r3, [pc, #572]	; (801733c <input_parameter+0x244>)
 80170fe:	4a90      	ldr	r2, [pc, #576]	; (8017340 <input_parameter+0x248>)
 8017100:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8017102:	4b8e      	ldr	r3, [pc, #568]	; (801733c <input_parameter+0x244>)
 8017104:	4a8e      	ldr	r2, [pc, #568]	; (8017340 <input_parameter+0x248>)
 8017106:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017108:	4b8c      	ldr	r3, [pc, #560]	; (801733c <input_parameter+0x244>)
 801710a:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 801710c:	4a8b      	ldr	r2, [pc, #556]	; (801733c <input_parameter+0x244>)
 801710e:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 930; //550
 8017110:	4b8a      	ldr	r3, [pc, #552]	; (801733c <input_parameter+0x244>)
 8017112:	4a8c      	ldr	r2, [pc, #560]	; (8017344 <input_parameter+0x24c>)
 8017114:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 11000; //10000
 8017116:	4b89      	ldr	r3, [pc, #548]	; (801733c <input_parameter+0x244>)
 8017118:	4a8b      	ldr	r2, [pc, #556]	; (8017348 <input_parameter+0x250>)
 801711a:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 0.5; //55;
 801711c:	4b87      	ldr	r3, [pc, #540]	; (801733c <input_parameter+0x244>)
 801711e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017122:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8017124:	4b85      	ldr	r3, [pc, #532]	; (801733c <input_parameter+0x244>)
 8017126:	4a89      	ldr	r2, [pc, #548]	; (801734c <input_parameter+0x254>)
 8017128:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 801712a:	4b84      	ldr	r3, [pc, #528]	; (801733c <input_parameter+0x244>)
 801712c:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 801712e:	4a83      	ldr	r2, [pc, #524]	; (801733c <input_parameter+0x244>)
 8017130:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 930;
 8017132:	4b82      	ldr	r3, [pc, #520]	; (801733c <input_parameter+0x244>)
 8017134:	4a83      	ldr	r2, [pc, #524]	; (8017344 <input_parameter+0x24c>)
 8017136:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 11000;
 8017138:	4b80      	ldr	r3, [pc, #512]	; (801733c <input_parameter+0x244>)
 801713a:	4a83      	ldr	r2, [pc, #524]	; (8017348 <input_parameter+0x250>)
 801713c:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 0.5; //50;
 801713e:	4b7f      	ldr	r3, [pc, #508]	; (801733c <input_parameter+0x244>)
 8017140:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017144:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8017146:	4b7d      	ldr	r3, [pc, #500]	; (801733c <input_parameter+0x244>)
 8017148:	4a81      	ldr	r2, [pc, #516]	; (8017350 <input_parameter+0x258>)
 801714a:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 801714c:	4b81      	ldr	r3, [pc, #516]	; (8017354 <input_parameter+0x25c>)
 801714e:	4a82      	ldr	r2, [pc, #520]	; (8017358 <input_parameter+0x260>)
 8017150:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8017152:	4b80      	ldr	r3, [pc, #512]	; (8017354 <input_parameter+0x25c>)
 8017154:	4a80      	ldr	r2, [pc, #512]	; (8017358 <input_parameter+0x260>)
 8017156:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017158:	4b7e      	ldr	r3, [pc, #504]	; (8017354 <input_parameter+0x25c>)
 801715a:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 801715c:	4a7d      	ldr	r2, [pc, #500]	; (8017354 <input_parameter+0x25c>)
 801715e:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8017160:	4b7c      	ldr	r3, [pc, #496]	; (8017354 <input_parameter+0x25c>)
 8017162:	4a7e      	ldr	r2, [pc, #504]	; (801735c <input_parameter+0x264>)
 8017164:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8017166:	4b7b      	ldr	r3, [pc, #492]	; (8017354 <input_parameter+0x25c>)
 8017168:	4a7d      	ldr	r2, [pc, #500]	; (8017360 <input_parameter+0x268>)
 801716a:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 801716c:	4b79      	ldr	r3, [pc, #484]	; (8017354 <input_parameter+0x25c>)
 801716e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017172:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017174:	4b77      	ldr	r3, [pc, #476]	; (8017354 <input_parameter+0x25c>)
 8017176:	4a75      	ldr	r2, [pc, #468]	; (801734c <input_parameter+0x254>)
 8017178:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 801717a:	4b76      	ldr	r3, [pc, #472]	; (8017354 <input_parameter+0x25c>)
 801717c:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 801717e:	4a75      	ldr	r2, [pc, #468]	; (8017354 <input_parameter+0x25c>)
 8017180:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017182:	4b74      	ldr	r3, [pc, #464]	; (8017354 <input_parameter+0x25c>)
 8017184:	4a77      	ldr	r2, [pc, #476]	; (8017364 <input_parameter+0x26c>)
 8017186:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8017188:	4b72      	ldr	r3, [pc, #456]	; (8017354 <input_parameter+0x25c>)
 801718a:	4a75      	ldr	r2, [pc, #468]	; (8017360 <input_parameter+0x268>)
 801718c:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 801718e:	4b71      	ldr	r3, [pc, #452]	; (8017354 <input_parameter+0x25c>)
 8017190:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017194:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8017196:	4b6f      	ldr	r3, [pc, #444]	; (8017354 <input_parameter+0x25c>)
 8017198:	4a6d      	ldr	r2, [pc, #436]	; (8017350 <input_parameter+0x258>)
 801719a:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 801719c:	4b67      	ldr	r3, [pc, #412]	; (801733c <input_parameter+0x244>)
 801719e:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 80171a0:	4a71      	ldr	r2, [pc, #452]	; (8017368 <input_parameter+0x270>)
 80171a2:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 80171a4:	4b65      	ldr	r3, [pc, #404]	; (801733c <input_parameter+0x244>)
 80171a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80171aa:	ed9f 7a70 	vldr	s14, [pc, #448]	; 801736c <input_parameter+0x274>
 80171ae:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 80171b2:	4b6d      	ldr	r3, [pc, #436]	; (8017368 <input_parameter+0x270>)
 80171b4:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 80171b8:	4b60      	ldr	r3, [pc, #384]	; (801733c <input_parameter+0x244>)
 80171ba:	689b      	ldr	r3, [r3, #8]
 80171bc:	4a6a      	ldr	r2, [pc, #424]	; (8017368 <input_parameter+0x270>)
 80171be:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 80171c0:	4b5e      	ldr	r3, [pc, #376]	; (801733c <input_parameter+0x244>)
 80171c2:	695b      	ldr	r3, [r3, #20]
 80171c4:	4a68      	ldr	r2, [pc, #416]	; (8017368 <input_parameter+0x270>)
 80171c6:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 80171c8:	4b5c      	ldr	r3, [pc, #368]	; (801733c <input_parameter+0x244>)
 80171ca:	699b      	ldr	r3, [r3, #24]
 80171cc:	4a66      	ldr	r2, [pc, #408]	; (8017368 <input_parameter+0x270>)
 80171ce:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 80171d0:	4b5a      	ldr	r3, [pc, #360]	; (801733c <input_parameter+0x244>)
 80171d2:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 80171d6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80171da:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 80171de:	4b62      	ldr	r3, [pc, #392]	; (8017368 <input_parameter+0x270>)
 80171e0:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 80171e4:	4b55      	ldr	r3, [pc, #340]	; (801733c <input_parameter+0x244>)
 80171e6:	691b      	ldr	r3, [r3, #16]
 80171e8:	4a5f      	ldr	r2, [pc, #380]	; (8017368 <input_parameter+0x270>)
 80171ea:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 80171ec:	4b53      	ldr	r3, [pc, #332]	; (801733c <input_parameter+0x244>)
 80171ee:	69db      	ldr	r3, [r3, #28]
 80171f0:	4a5d      	ldr	r2, [pc, #372]	; (8017368 <input_parameter+0x270>)
 80171f2:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 80171f4:	4b51      	ldr	r3, [pc, #324]	; (801733c <input_parameter+0x244>)
 80171f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171f8:	4a5b      	ldr	r2, [pc, #364]	; (8017368 <input_parameter+0x270>)
 80171fa:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 80171fc:	4b4f      	ldr	r3, [pc, #316]	; (801733c <input_parameter+0x244>)
 80171fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017200:	4a59      	ldr	r2, [pc, #356]	; (8017368 <input_parameter+0x270>)
 8017202:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017204:	4b4d      	ldr	r3, [pc, #308]	; (801733c <input_parameter+0x244>)
 8017206:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 801720a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801720e:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017212:	4b55      	ldr	r3, [pc, #340]	; (8017368 <input_parameter+0x270>)
 8017214:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8017218:	4b48      	ldr	r3, [pc, #288]	; (801733c <input_parameter+0x244>)
 801721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801721c:	4a52      	ldr	r2, [pc, #328]	; (8017368 <input_parameter+0x270>)
 801721e:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017220:	4b51      	ldr	r3, [pc, #324]	; (8017368 <input_parameter+0x270>)
 8017222:	685b      	ldr	r3, [r3, #4]
 8017224:	4a50      	ldr	r2, [pc, #320]	; (8017368 <input_parameter+0x270>)
 8017226:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8017228:	4b4f      	ldr	r3, [pc, #316]	; (8017368 <input_parameter+0x270>)
 801722a:	4a51      	ldr	r2, [pc, #324]	; (8017370 <input_parameter+0x278>)
 801722c:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 801722e:	4b4e      	ldr	r3, [pc, #312]	; (8017368 <input_parameter+0x270>)
 8017230:	4a50      	ldr	r2, [pc, #320]	; (8017374 <input_parameter+0x27c>)
 8017232:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8017234:	4b4c      	ldr	r3, [pc, #304]	; (8017368 <input_parameter+0x270>)
 8017236:	4a50      	ldr	r2, [pc, #320]	; (8017378 <input_parameter+0x280>)
 8017238:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 801723a:	4b4b      	ldr	r3, [pc, #300]	; (8017368 <input_parameter+0x270>)
 801723c:	4a4f      	ldr	r2, [pc, #316]	; (801737c <input_parameter+0x284>)
 801723e:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017240:	4b49      	ldr	r3, [pc, #292]	; (8017368 <input_parameter+0x270>)
 8017242:	685b      	ldr	r3, [r3, #4]
 8017244:	4a48      	ldr	r2, [pc, #288]	; (8017368 <input_parameter+0x270>)
 8017246:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8017248:	4b47      	ldr	r3, [pc, #284]	; (8017368 <input_parameter+0x270>)
 801724a:	4a49      	ldr	r2, [pc, #292]	; (8017370 <input_parameter+0x278>)
 801724c:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 801724e:	4b46      	ldr	r3, [pc, #280]	; (8017368 <input_parameter+0x270>)
 8017250:	4a48      	ldr	r2, [pc, #288]	; (8017374 <input_parameter+0x27c>)
 8017252:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8017254:	4b44      	ldr	r3, [pc, #272]	; (8017368 <input_parameter+0x270>)
 8017256:	4a4a      	ldr	r2, [pc, #296]	; (8017380 <input_parameter+0x288>)
 8017258:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 801725a:	4b43      	ldr	r3, [pc, #268]	; (8017368 <input_parameter+0x270>)
 801725c:	4a49      	ldr	r2, [pc, #292]	; (8017384 <input_parameter+0x28c>)
 801725e:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017260:	4b41      	ldr	r3, [pc, #260]	; (8017368 <input_parameter+0x270>)
 8017262:	685b      	ldr	r3, [r3, #4]
 8017264:	4a40      	ldr	r2, [pc, #256]	; (8017368 <input_parameter+0x270>)
 8017266:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017268:	4b3f      	ldr	r3, [pc, #252]	; (8017368 <input_parameter+0x270>)
 801726a:	4a47      	ldr	r2, [pc, #284]	; (8017388 <input_parameter+0x290>)
 801726c:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 801726e:	4b3e      	ldr	r3, [pc, #248]	; (8017368 <input_parameter+0x270>)
 8017270:	4a46      	ldr	r2, [pc, #280]	; (801738c <input_parameter+0x294>)
 8017272:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017274:	4b3c      	ldr	r3, [pc, #240]	; (8017368 <input_parameter+0x270>)
 8017276:	4a46      	ldr	r2, [pc, #280]	; (8017390 <input_parameter+0x298>)
 8017278:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 801727a:	4b3b      	ldr	r3, [pc, #236]	; (8017368 <input_parameter+0x270>)
 801727c:	4a45      	ldr	r2, [pc, #276]	; (8017394 <input_parameter+0x29c>)
 801727e:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017280:	4b39      	ldr	r3, [pc, #228]	; (8017368 <input_parameter+0x270>)
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	4a38      	ldr	r2, [pc, #224]	; (8017368 <input_parameter+0x270>)
 8017286:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017288:	4b37      	ldr	r3, [pc, #220]	; (8017368 <input_parameter+0x270>)
 801728a:	4a43      	ldr	r2, [pc, #268]	; (8017398 <input_parameter+0x2a0>)
 801728c:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 801728e:	4b36      	ldr	r3, [pc, #216]	; (8017368 <input_parameter+0x270>)
 8017290:	4a3e      	ldr	r2, [pc, #248]	; (801738c <input_parameter+0x294>)
 8017292:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017294:	4b34      	ldr	r3, [pc, #208]	; (8017368 <input_parameter+0x270>)
 8017296:	4a41      	ldr	r2, [pc, #260]	; (801739c <input_parameter+0x2a4>)
 8017298:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 801729a:	4b33      	ldr	r3, [pc, #204]	; (8017368 <input_parameter+0x270>)
 801729c:	4a40      	ldr	r2, [pc, #256]	; (80173a0 <input_parameter+0x2a8>)
 801729e:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 80172a0:	4b31      	ldr	r3, [pc, #196]	; (8017368 <input_parameter+0x270>)
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	4a30      	ldr	r2, [pc, #192]	; (8017368 <input_parameter+0x270>)
 80172a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 80172aa:	4b2f      	ldr	r3, [pc, #188]	; (8017368 <input_parameter+0x270>)
 80172ac:	4a30      	ldr	r2, [pc, #192]	; (8017370 <input_parameter+0x278>)
 80172ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 80172b2:	4b2d      	ldr	r3, [pc, #180]	; (8017368 <input_parameter+0x270>)
 80172b4:	4a2f      	ldr	r2, [pc, #188]	; (8017374 <input_parameter+0x27c>)
 80172b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 80172ba:	4b2b      	ldr	r3, [pc, #172]	; (8017368 <input_parameter+0x270>)
 80172bc:	4a39      	ldr	r2, [pc, #228]	; (80173a4 <input_parameter+0x2ac>)
 80172be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 80172c2:	4b29      	ldr	r3, [pc, #164]	; (8017368 <input_parameter+0x270>)
 80172c4:	4a38      	ldr	r2, [pc, #224]	; (80173a8 <input_parameter+0x2b0>)
 80172c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 80172ca:	4b27      	ldr	r3, [pc, #156]	; (8017368 <input_parameter+0x270>)
 80172cc:	685b      	ldr	r3, [r3, #4]
 80172ce:	4a26      	ldr	r2, [pc, #152]	; (8017368 <input_parameter+0x270>)
 80172d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 80172d4:	4b24      	ldr	r3, [pc, #144]	; (8017368 <input_parameter+0x270>)
 80172d6:	4a26      	ldr	r2, [pc, #152]	; (8017370 <input_parameter+0x278>)
 80172d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 80172dc:	4b22      	ldr	r3, [pc, #136]	; (8017368 <input_parameter+0x270>)
 80172de:	4a25      	ldr	r2, [pc, #148]	; (8017374 <input_parameter+0x27c>)
 80172e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 80172e4:	4b20      	ldr	r3, [pc, #128]	; (8017368 <input_parameter+0x270>)
 80172e6:	4a31      	ldr	r2, [pc, #196]	; (80173ac <input_parameter+0x2b4>)
 80172e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 80172ec:	4b1e      	ldr	r3, [pc, #120]	; (8017368 <input_parameter+0x270>)
 80172ee:	4a30      	ldr	r2, [pc, #192]	; (80173b0 <input_parameter+0x2b8>)
 80172f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80172f4:	4b1c      	ldr	r3, [pc, #112]	; (8017368 <input_parameter+0x270>)
 80172f6:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 80172f8:	4a1b      	ldr	r2, [pc, #108]	; (8017368 <input_parameter+0x270>)
 80172fa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 80172fe:	4b1a      	ldr	r3, [pc, #104]	; (8017368 <input_parameter+0x270>)
 8017300:	4a2c      	ldr	r2, [pc, #176]	; (80173b4 <input_parameter+0x2bc>)
 8017302:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8017306:	4b18      	ldr	r3, [pc, #96]	; (8017368 <input_parameter+0x270>)
 8017308:	4a20      	ldr	r2, [pc, #128]	; (801738c <input_parameter+0x294>)
 801730a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 801730e:	4b16      	ldr	r3, [pc, #88]	; (8017368 <input_parameter+0x270>)
 8017310:	4a29      	ldr	r2, [pc, #164]	; (80173b8 <input_parameter+0x2c0>)
 8017312:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8017316:	4b14      	ldr	r3, [pc, #80]	; (8017368 <input_parameter+0x270>)
 8017318:	4a28      	ldr	r2, [pc, #160]	; (80173bc <input_parameter+0x2c4>)
 801731a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 801731e:	4b12      	ldr	r3, [pc, #72]	; (8017368 <input_parameter+0x270>)
 8017320:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8017322:	4a11      	ldr	r2, [pc, #68]	; (8017368 <input_parameter+0x270>)
 8017324:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8017328:	4b0f      	ldr	r3, [pc, #60]	; (8017368 <input_parameter+0x270>)
 801732a:	4a22      	ldr	r2, [pc, #136]	; (80173b4 <input_parameter+0x2bc>)
 801732c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8017330:	4b0d      	ldr	r3, [pc, #52]	; (8017368 <input_parameter+0x270>)
 8017332:	4a16      	ldr	r2, [pc, #88]	; (801738c <input_parameter+0x294>)
 8017334:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8017338:	4b0b      	ldr	r3, [pc, #44]	; (8017368 <input_parameter+0x270>)
 801733a:	e041      	b.n	80173c0 <input_parameter+0x2c8>
 801733c:	2000db2c 	.word	0x2000db2c
 8017340:	43960000 	.word	0x43960000
 8017344:	44688000 	.word	0x44688000
 8017348:	462be000 	.word	0x462be000
 801734c:	41a00000 	.word	0x41a00000
 8017350:	41980000 	.word	0x41980000
 8017354:	2000dc74 	.word	0x2000dc74
 8017358:	437a0000 	.word	0x437a0000
 801735c:	444f8000 	.word	0x444f8000
 8017360:	460ca000 	.word	0x460ca000
 8017364:	44368000 	.word	0x44368000
 8017368:	2000ddbc 	.word	0x2000ddbc
 801736c:	43480000 	.word	0x43480000
 8017370:	44160000 	.word	0x44160000
 8017374:	461c4000 	.word	0x461c4000
 8017378:	42980000 	.word	0x42980000
 801737c:	42d60000 	.word	0x42d60000
 8017380:	429a0000 	.word	0x429a0000
 8017384:	42ce0000 	.word	0x42ce0000
 8017388:	43d70000 	.word	0x43d70000
 801738c:	45fa0000 	.word	0x45fa0000
 8017390:	42820000 	.word	0x42820000
 8017394:	42a00000 	.word	0x42a00000
 8017398:	43e10000 	.word	0x43e10000
 801739c:	42700000 	.word	0x42700000
 80173a0:	428e0000 	.word	0x428e0000
 80173a4:	41d80000 	.word	0x41d80000
 80173a8:	42b20000 	.word	0x42b20000
 80173ac:	42040000 	.word	0x42040000
 80173b0:	42b40000 	.word	0x42b40000
 80173b4:	44188000 	.word	0x44188000
 80173b8:	42860000 	.word	0x42860000
 80173bc:	42920000 	.word	0x42920000
 80173c0:	4a99      	ldr	r2, [pc, #612]	; (8017628 <input_parameter+0x530>)
 80173c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 80173c6:	4b99      	ldr	r3, [pc, #612]	; (801762c <input_parameter+0x534>)
 80173c8:	4a99      	ldr	r2, [pc, #612]	; (8017630 <input_parameter+0x538>)
 80173ca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80173ce:	4b97      	ldr	r3, [pc, #604]	; (801762c <input_parameter+0x534>)
 80173d0:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 80173d2:	4a96      	ldr	r2, [pc, #600]	; (801762c <input_parameter+0x534>)
 80173d4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 80173d8:	4b94      	ldr	r3, [pc, #592]	; (801762c <input_parameter+0x534>)
 80173da:	4a96      	ldr	r2, [pc, #600]	; (8017634 <input_parameter+0x53c>)
 80173dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 80173e0:	4b92      	ldr	r3, [pc, #584]	; (801762c <input_parameter+0x534>)
 80173e2:	4a95      	ldr	r2, [pc, #596]	; (8017638 <input_parameter+0x540>)
 80173e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 80173e8:	4b90      	ldr	r3, [pc, #576]	; (801762c <input_parameter+0x534>)
 80173ea:	4a94      	ldr	r2, [pc, #592]	; (801763c <input_parameter+0x544>)
 80173ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 80173f0:	4b8e      	ldr	r3, [pc, #568]	; (801762c <input_parameter+0x534>)
 80173f2:	4a92      	ldr	r2, [pc, #584]	; (801763c <input_parameter+0x544>)
 80173f4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80173f8:	4b8c      	ldr	r3, [pc, #560]	; (801762c <input_parameter+0x534>)
 80173fa:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 80173fc:	4a8b      	ldr	r2, [pc, #556]	; (801762c <input_parameter+0x534>)
 80173fe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8017402:	4b8a      	ldr	r3, [pc, #552]	; (801762c <input_parameter+0x534>)
 8017404:	4a8b      	ldr	r2, [pc, #556]	; (8017634 <input_parameter+0x53c>)
 8017406:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 801740a:	4b88      	ldr	r3, [pc, #544]	; (801762c <input_parameter+0x534>)
 801740c:	4a8a      	ldr	r2, [pc, #552]	; (8017638 <input_parameter+0x540>)
 801740e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8017412:	4b86      	ldr	r3, [pc, #536]	; (801762c <input_parameter+0x534>)
 8017414:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8017418:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 801741c:	4b83      	ldr	r3, [pc, #524]	; (801762c <input_parameter+0x534>)
 801741e:	4a88      	ldr	r2, [pc, #544]	; (8017640 <input_parameter+0x548>)
 8017420:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017424:	4b81      	ldr	r3, [pc, #516]	; (801762c <input_parameter+0x534>)
 8017426:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8017428:	4a80      	ldr	r2, [pc, #512]	; (801762c <input_parameter+0x534>)
 801742a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 801742e:	4b7f      	ldr	r3, [pc, #508]	; (801762c <input_parameter+0x534>)
 8017430:	4a84      	ldr	r2, [pc, #528]	; (8017644 <input_parameter+0x54c>)
 8017432:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 8017436:	4b7d      	ldr	r3, [pc, #500]	; (801762c <input_parameter+0x534>)
 8017438:	4a83      	ldr	r2, [pc, #524]	; (8017648 <input_parameter+0x550>)
 801743a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 801743e:	4b7b      	ldr	r3, [pc, #492]	; (801762c <input_parameter+0x534>)
 8017440:	4a82      	ldr	r2, [pc, #520]	; (801764c <input_parameter+0x554>)
 8017442:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 8017446:	4b79      	ldr	r3, [pc, #484]	; (801762c <input_parameter+0x534>)
 8017448:	4a81      	ldr	r2, [pc, #516]	; (8017650 <input_parameter+0x558>)
 801744a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 801744e:	4b77      	ldr	r3, [pc, #476]	; (801762c <input_parameter+0x534>)
 8017450:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 8017452:	4a76      	ldr	r2, [pc, #472]	; (801762c <input_parameter+0x534>)
 8017454:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8017458:	4b74      	ldr	r3, [pc, #464]	; (801762c <input_parameter+0x534>)
 801745a:	4a7a      	ldr	r2, [pc, #488]	; (8017644 <input_parameter+0x54c>)
 801745c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8017460:	4b72      	ldr	r3, [pc, #456]	; (801762c <input_parameter+0x534>)
 8017462:	4a79      	ldr	r2, [pc, #484]	; (8017648 <input_parameter+0x550>)
 8017464:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8017468:	4b70      	ldr	r3, [pc, #448]	; (801762c <input_parameter+0x534>)
 801746a:	4a78      	ldr	r2, [pc, #480]	; (801764c <input_parameter+0x554>)
 801746c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8017470:	4b6e      	ldr	r3, [pc, #440]	; (801762c <input_parameter+0x534>)
 8017472:	4a78      	ldr	r2, [pc, #480]	; (8017654 <input_parameter+0x55c>)
 8017474:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017478:	4b6c      	ldr	r3, [pc, #432]	; (801762c <input_parameter+0x534>)
 801747a:	685b      	ldr	r3, [r3, #4]
 801747c:	4a6b      	ldr	r2, [pc, #428]	; (801762c <input_parameter+0x534>)
 801747e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8017482:	4b6a      	ldr	r3, [pc, #424]	; (801762c <input_parameter+0x534>)
 8017484:	4a74      	ldr	r2, [pc, #464]	; (8017658 <input_parameter+0x560>)
 8017486:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 801748a:	4b68      	ldr	r3, [pc, #416]	; (801762c <input_parameter+0x534>)
 801748c:	4a73      	ldr	r2, [pc, #460]	; (801765c <input_parameter+0x564>)
 801748e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8017492:	4b66      	ldr	r3, [pc, #408]	; (801762c <input_parameter+0x534>)
 8017494:	4a72      	ldr	r2, [pc, #456]	; (8017660 <input_parameter+0x568>)
 8017496:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 801749a:	4b64      	ldr	r3, [pc, #400]	; (801762c <input_parameter+0x534>)
 801749c:	4a71      	ldr	r2, [pc, #452]	; (8017664 <input_parameter+0x56c>)
 801749e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 80174a2:	4b62      	ldr	r3, [pc, #392]	; (801762c <input_parameter+0x534>)
 80174a4:	685b      	ldr	r3, [r3, #4]
 80174a6:	4a61      	ldr	r2, [pc, #388]	; (801762c <input_parameter+0x534>)
 80174a8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 80174ac:	4b5f      	ldr	r3, [pc, #380]	; (801762c <input_parameter+0x534>)
 80174ae:	4a6a      	ldr	r2, [pc, #424]	; (8017658 <input_parameter+0x560>)
 80174b0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 80174b4:	4b5d      	ldr	r3, [pc, #372]	; (801762c <input_parameter+0x534>)
 80174b6:	4a69      	ldr	r2, [pc, #420]	; (801765c <input_parameter+0x564>)
 80174b8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 80174bc:	4b5b      	ldr	r3, [pc, #364]	; (801762c <input_parameter+0x534>)
 80174be:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80174c2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 80174c6:	4b59      	ldr	r3, [pc, #356]	; (801762c <input_parameter+0x534>)
 80174c8:	4a67      	ldr	r2, [pc, #412]	; (8017668 <input_parameter+0x570>)
 80174ca:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 80174ce:	4b67      	ldr	r3, [pc, #412]	; (801766c <input_parameter+0x574>)
 80174d0:	4a58      	ldr	r2, [pc, #352]	; (8017634 <input_parameter+0x53c>)
 80174d2:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 80174d4:	4b65      	ldr	r3, [pc, #404]	; (801766c <input_parameter+0x574>)
 80174d6:	4a57      	ldr	r2, [pc, #348]	; (8017634 <input_parameter+0x53c>)
 80174d8:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 80174da:	4b64      	ldr	r3, [pc, #400]	; (801766c <input_parameter+0x574>)
 80174dc:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 80174de:	4a63      	ldr	r2, [pc, #396]	; (801766c <input_parameter+0x574>)
 80174e0:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 80174e2:	4b62      	ldr	r3, [pc, #392]	; (801766c <input_parameter+0x574>)
 80174e4:	4a62      	ldr	r2, [pc, #392]	; (8017670 <input_parameter+0x578>)
 80174e6:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 80174e8:	4b60      	ldr	r3, [pc, #384]	; (801766c <input_parameter+0x574>)
 80174ea:	4a62      	ldr	r2, [pc, #392]	; (8017674 <input_parameter+0x57c>)
 80174ec:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 80174ee:	4b5f      	ldr	r3, [pc, #380]	; (801766c <input_parameter+0x574>)
 80174f0:	4a61      	ldr	r2, [pc, #388]	; (8017678 <input_parameter+0x580>)
 80174f2:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 80174f4:	4b5d      	ldr	r3, [pc, #372]	; (801766c <input_parameter+0x574>)
 80174f6:	4a61      	ldr	r2, [pc, #388]	; (801767c <input_parameter+0x584>)
 80174f8:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 80174fa:	4b5c      	ldr	r3, [pc, #368]	; (801766c <input_parameter+0x574>)
 80174fc:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 80174fe:	4a5b      	ldr	r2, [pc, #364]	; (801766c <input_parameter+0x574>)
 8017500:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8017502:	4b5a      	ldr	r3, [pc, #360]	; (801766c <input_parameter+0x574>)
 8017504:	4a5a      	ldr	r2, [pc, #360]	; (8017670 <input_parameter+0x578>)
 8017506:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8017508:	4b58      	ldr	r3, [pc, #352]	; (801766c <input_parameter+0x574>)
 801750a:	4a5a      	ldr	r2, [pc, #360]	; (8017674 <input_parameter+0x57c>)
 801750c:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 801750e:	4b57      	ldr	r3, [pc, #348]	; (801766c <input_parameter+0x574>)
 8017510:	4a59      	ldr	r2, [pc, #356]	; (8017678 <input_parameter+0x580>)
 8017512:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8017514:	4b55      	ldr	r3, [pc, #340]	; (801766c <input_parameter+0x574>)
 8017516:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801751a:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 801751c:	4b53      	ldr	r3, [pc, #332]	; (801766c <input_parameter+0x574>)
 801751e:	4a45      	ldr	r2, [pc, #276]	; (8017634 <input_parameter+0x53c>)
 8017520:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8017522:	4b52      	ldr	r3, [pc, #328]	; (801766c <input_parameter+0x574>)
 8017524:	4a56      	ldr	r2, [pc, #344]	; (8017680 <input_parameter+0x588>)
 8017526:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8017528:	4b50      	ldr	r3, [pc, #320]	; (801766c <input_parameter+0x574>)
 801752a:	4a56      	ldr	r2, [pc, #344]	; (8017684 <input_parameter+0x58c>)
 801752c:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 801752e:	4b4f      	ldr	r3, [pc, #316]	; (801766c <input_parameter+0x574>)
 8017530:	4a55      	ldr	r2, [pc, #340]	; (8017688 <input_parameter+0x590>)
 8017532:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8017534:	4b4d      	ldr	r3, [pc, #308]	; (801766c <input_parameter+0x574>)
 8017536:	4a54      	ldr	r2, [pc, #336]	; (8017688 <input_parameter+0x590>)
 8017538:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 801753a:	4b4c      	ldr	r3, [pc, #304]	; (801766c <input_parameter+0x574>)
 801753c:	4a3d      	ldr	r2, [pc, #244]	; (8017634 <input_parameter+0x53c>)
 801753e:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8017540:	4b4a      	ldr	r3, [pc, #296]	; (801766c <input_parameter+0x574>)
 8017542:	4a4f      	ldr	r2, [pc, #316]	; (8017680 <input_parameter+0x588>)
 8017544:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8017546:	4b49      	ldr	r3, [pc, #292]	; (801766c <input_parameter+0x574>)
 8017548:	4a4e      	ldr	r2, [pc, #312]	; (8017684 <input_parameter+0x58c>)
 801754a:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 801754c:	4b47      	ldr	r3, [pc, #284]	; (801766c <input_parameter+0x574>)
 801754e:	4a4e      	ldr	r2, [pc, #312]	; (8017688 <input_parameter+0x590>)
 8017550:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8017552:	4b46      	ldr	r3, [pc, #280]	; (801766c <input_parameter+0x574>)
 8017554:	4a42      	ldr	r2, [pc, #264]	; (8017660 <input_parameter+0x568>)
 8017556:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8017558:	4b44      	ldr	r3, [pc, #272]	; (801766c <input_parameter+0x574>)
 801755a:	4a36      	ldr	r2, [pc, #216]	; (8017634 <input_parameter+0x53c>)
 801755c:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 801755e:	4b43      	ldr	r3, [pc, #268]	; (801766c <input_parameter+0x574>)
 8017560:	4a4a      	ldr	r2, [pc, #296]	; (801768c <input_parameter+0x594>)
 8017562:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8017564:	4b41      	ldr	r3, [pc, #260]	; (801766c <input_parameter+0x574>)
 8017566:	4a4a      	ldr	r2, [pc, #296]	; (8017690 <input_parameter+0x598>)
 8017568:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 801756a:	4b40      	ldr	r3, [pc, #256]	; (801766c <input_parameter+0x574>)
 801756c:	4a49      	ldr	r2, [pc, #292]	; (8017694 <input_parameter+0x59c>)
 801756e:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8017570:	4b3e      	ldr	r3, [pc, #248]	; (801766c <input_parameter+0x574>)
 8017572:	4a49      	ldr	r2, [pc, #292]	; (8017698 <input_parameter+0x5a0>)
 8017574:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8017576:	4b3d      	ldr	r3, [pc, #244]	; (801766c <input_parameter+0x574>)
 8017578:	4a2e      	ldr	r2, [pc, #184]	; (8017634 <input_parameter+0x53c>)
 801757a:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 801757c:	4b3b      	ldr	r3, [pc, #236]	; (801766c <input_parameter+0x574>)
 801757e:	4a47      	ldr	r2, [pc, #284]	; (801769c <input_parameter+0x5a4>)
 8017580:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8017582:	4b3a      	ldr	r3, [pc, #232]	; (801766c <input_parameter+0x574>)
 8017584:	4a42      	ldr	r2, [pc, #264]	; (8017690 <input_parameter+0x598>)
 8017586:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8017588:	4b38      	ldr	r3, [pc, #224]	; (801766c <input_parameter+0x574>)
 801758a:	4a42      	ldr	r2, [pc, #264]	; (8017694 <input_parameter+0x59c>)
 801758c:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 801758e:	4b37      	ldr	r3, [pc, #220]	; (801766c <input_parameter+0x574>)
 8017590:	4a43      	ldr	r2, [pc, #268]	; (80176a0 <input_parameter+0x5a8>)
 8017592:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8017594:	4b35      	ldr	r3, [pc, #212]	; (801766c <input_parameter+0x574>)
 8017596:	4a27      	ldr	r2, [pc, #156]	; (8017634 <input_parameter+0x53c>)
 8017598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 801759c:	4b33      	ldr	r3, [pc, #204]	; (801766c <input_parameter+0x574>)
 801759e:	4a41      	ldr	r2, [pc, #260]	; (80176a4 <input_parameter+0x5ac>)
 80175a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 80175a4:	4b31      	ldr	r3, [pc, #196]	; (801766c <input_parameter+0x574>)
 80175a6:	4a40      	ldr	r2, [pc, #256]	; (80176a8 <input_parameter+0x5b0>)
 80175a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 80175ac:	4b2f      	ldr	r3, [pc, #188]	; (801766c <input_parameter+0x574>)
 80175ae:	4a3f      	ldr	r2, [pc, #252]	; (80176ac <input_parameter+0x5b4>)
 80175b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 80175b4:	4b2d      	ldr	r3, [pc, #180]	; (801766c <input_parameter+0x574>)
 80175b6:	4a3e      	ldr	r2, [pc, #248]	; (80176b0 <input_parameter+0x5b8>)
 80175b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 80175bc:	4b2b      	ldr	r3, [pc, #172]	; (801766c <input_parameter+0x574>)
 80175be:	4a1d      	ldr	r2, [pc, #116]	; (8017634 <input_parameter+0x53c>)
 80175c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 80175c4:	4b29      	ldr	r3, [pc, #164]	; (801766c <input_parameter+0x574>)
 80175c6:	4a3b      	ldr	r2, [pc, #236]	; (80176b4 <input_parameter+0x5bc>)
 80175c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 80175cc:	4b27      	ldr	r3, [pc, #156]	; (801766c <input_parameter+0x574>)
 80175ce:	4a36      	ldr	r2, [pc, #216]	; (80176a8 <input_parameter+0x5b0>)
 80175d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 80175d4:	4b25      	ldr	r3, [pc, #148]	; (801766c <input_parameter+0x574>)
 80175d6:	4a38      	ldr	r2, [pc, #224]	; (80176b8 <input_parameter+0x5c0>)
 80175d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 80175dc:	4b23      	ldr	r3, [pc, #140]	; (801766c <input_parameter+0x574>)
 80175de:	4a37      	ldr	r2, [pc, #220]	; (80176bc <input_parameter+0x5c4>)
 80175e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 80175e4:	4b21      	ldr	r3, [pc, #132]	; (801766c <input_parameter+0x574>)
 80175e6:	4a13      	ldr	r2, [pc, #76]	; (8017634 <input_parameter+0x53c>)
 80175e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 80175ec:	4b1f      	ldr	r3, [pc, #124]	; (801766c <input_parameter+0x574>)
 80175ee:	4a34      	ldr	r2, [pc, #208]	; (80176c0 <input_parameter+0x5c8>)
 80175f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 80175f4:	4b1d      	ldr	r3, [pc, #116]	; (801766c <input_parameter+0x574>)
 80175f6:	4a26      	ldr	r2, [pc, #152]	; (8017690 <input_parameter+0x598>)
 80175f8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 80175fc:	4b1b      	ldr	r3, [pc, #108]	; (801766c <input_parameter+0x574>)
 80175fe:	4a31      	ldr	r2, [pc, #196]	; (80176c4 <input_parameter+0x5cc>)
 8017600:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8017604:	4b19      	ldr	r3, [pc, #100]	; (801766c <input_parameter+0x574>)
 8017606:	4a2d      	ldr	r2, [pc, #180]	; (80176bc <input_parameter+0x5c4>)
 8017608:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 801760c:	4b17      	ldr	r3, [pc, #92]	; (801766c <input_parameter+0x574>)
 801760e:	4a09      	ldr	r2, [pc, #36]	; (8017634 <input_parameter+0x53c>)
 8017610:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8017614:	4b15      	ldr	r3, [pc, #84]	; (801766c <input_parameter+0x574>)
 8017616:	4a2c      	ldr	r2, [pc, #176]	; (80176c8 <input_parameter+0x5d0>)
 8017618:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 801761c:	4b13      	ldr	r3, [pc, #76]	; (801766c <input_parameter+0x574>)
 801761e:	4a1c      	ldr	r2, [pc, #112]	; (8017690 <input_parameter+0x598>)
 8017620:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8017624:	e052      	b.n	80176cc <input_parameter+0x5d4>
 8017626:	bf00      	nop
 8017628:	42860000 	.word	0x42860000
 801762c:	2000ddbc 	.word	0x2000ddbc
 8017630:	42920000 	.word	0x42920000
 8017634:	44160000 	.word	0x44160000
 8017638:	461c4000 	.word	0x461c4000
 801763c:	42640000 	.word	0x42640000
 8017640:	42500000 	.word	0x42500000
 8017644:	44250000 	.word	0x44250000
 8017648:	45fa0000 	.word	0x45fa0000
 801764c:	425c0000 	.word	0x425c0000
 8017650:	42c80000 	.word	0x42c80000
 8017654:	42ce0000 	.word	0x42ce0000
 8017658:	442f0000 	.word	0x442f0000
 801765c:	462be000 	.word	0x462be000
 8017660:	420c0000 	.word	0x420c0000
 8017664:	42600000 	.word	0x42600000
 8017668:	42700000 	.word	0x42700000
 801766c:	2000df04 	.word	0x2000df04
 8017670:	44898000 	.word	0x44898000
 8017674:	476a6000 	.word	0x476a6000
 8017678:	40a00000 	.word	0x40a00000
 801767c:	41e00000 	.word	0x41e00000
 8017680:	446d8000 	.word	0x446d8000
 8017684:	466a6000 	.word	0x466a6000
 8017688:	41f80000 	.word	0x41f80000
 801768c:	44520000 	.word	0x44520000
 8017690:	465ac000 	.word	0x465ac000
 8017694:	40e00000 	.word	0x40e00000
 8017698:	41a00000 	.word	0x41a00000
 801769c:	444d0000 	.word	0x444d0000
 80176a0:	41900000 	.word	0x41900000
 80176a4:	444f8000 	.word	0x444f8000
 80176a8:	463b8000 	.word	0x463b8000
 80176ac:	41500000 	.word	0x41500000
 80176b0:	42180000 	.word	0x42180000
 80176b4:	44608000 	.word	0x44608000
 80176b8:	41400000 	.word	0x41400000
 80176bc:	42100000 	.word	0x42100000
 80176c0:	446b0000 	.word	0x446b0000
 80176c4:	41180000 	.word	0x41180000
 80176c8:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 80176cc:	4b43      	ldr	r3, [pc, #268]	; (80177dc <input_parameter+0x6e4>)
 80176ce:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80176d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 80176d6:	4b41      	ldr	r3, [pc, #260]	; (80177dc <input_parameter+0x6e4>)
 80176d8:	4a41      	ldr	r2, [pc, #260]	; (80177e0 <input_parameter+0x6e8>)
 80176da:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 80176de:	4b3f      	ldr	r3, [pc, #252]	; (80177dc <input_parameter+0x6e4>)
 80176e0:	4a40      	ldr	r2, [pc, #256]	; (80177e4 <input_parameter+0x6ec>)
 80176e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 80176e6:	4b3d      	ldr	r3, [pc, #244]	; (80177dc <input_parameter+0x6e4>)
 80176e8:	4a3f      	ldr	r2, [pc, #252]	; (80177e8 <input_parameter+0x6f0>)
 80176ea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 80176ee:	4b3b      	ldr	r3, [pc, #236]	; (80177dc <input_parameter+0x6e4>)
 80176f0:	4a3e      	ldr	r2, [pc, #248]	; (80177ec <input_parameter+0x6f4>)
 80176f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 80176f6:	4b39      	ldr	r3, [pc, #228]	; (80177dc <input_parameter+0x6e4>)
 80176f8:	4a3d      	ldr	r2, [pc, #244]	; (80177f0 <input_parameter+0x6f8>)
 80176fa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80176fe:	4b37      	ldr	r3, [pc, #220]	; (80177dc <input_parameter+0x6e4>)
 8017700:	4a3c      	ldr	r2, [pc, #240]	; (80177f4 <input_parameter+0x6fc>)
 8017702:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8017706:	4b35      	ldr	r3, [pc, #212]	; (80177dc <input_parameter+0x6e4>)
 8017708:	4a36      	ldr	r2, [pc, #216]	; (80177e4 <input_parameter+0x6ec>)
 801770a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 801770e:	4b33      	ldr	r3, [pc, #204]	; (80177dc <input_parameter+0x6e4>)
 8017710:	4a39      	ldr	r2, [pc, #228]	; (80177f8 <input_parameter+0x700>)
 8017712:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8017716:	4b31      	ldr	r3, [pc, #196]	; (80177dc <input_parameter+0x6e4>)
 8017718:	4a34      	ldr	r2, [pc, #208]	; (80177ec <input_parameter+0x6f4>)
 801771a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 801771e:	4b2f      	ldr	r3, [pc, #188]	; (80177dc <input_parameter+0x6e4>)
 8017720:	4a36      	ldr	r2, [pc, #216]	; (80177fc <input_parameter+0x704>)
 8017722:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8017726:	4b2d      	ldr	r3, [pc, #180]	; (80177dc <input_parameter+0x6e4>)
 8017728:	4a35      	ldr	r2, [pc, #212]	; (8017800 <input_parameter+0x708>)
 801772a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 801772e:	4b2b      	ldr	r3, [pc, #172]	; (80177dc <input_parameter+0x6e4>)
 8017730:	4a2c      	ldr	r2, [pc, #176]	; (80177e4 <input_parameter+0x6ec>)
 8017732:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8017736:	4b29      	ldr	r3, [pc, #164]	; (80177dc <input_parameter+0x6e4>)
 8017738:	4a32      	ldr	r2, [pc, #200]	; (8017804 <input_parameter+0x70c>)
 801773a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 801773e:	4b27      	ldr	r3, [pc, #156]	; (80177dc <input_parameter+0x6e4>)
 8017740:	4a31      	ldr	r2, [pc, #196]	; (8017808 <input_parameter+0x710>)
 8017742:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8017746:	4b25      	ldr	r3, [pc, #148]	; (80177dc <input_parameter+0x6e4>)
 8017748:	4a30      	ldr	r2, [pc, #192]	; (801780c <input_parameter+0x714>)
 801774a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 801774e:	4b23      	ldr	r3, [pc, #140]	; (80177dc <input_parameter+0x6e4>)
 8017750:	4a28      	ldr	r2, [pc, #160]	; (80177f4 <input_parameter+0x6fc>)
 8017752:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 8017756:	4b21      	ldr	r3, [pc, #132]	; (80177dc <input_parameter+0x6e4>)
 8017758:	4a22      	ldr	r2, [pc, #136]	; (80177e4 <input_parameter+0x6ec>)
 801775a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 801775e:	4b1f      	ldr	r3, [pc, #124]	; (80177dc <input_parameter+0x6e4>)
 8017760:	4a2b      	ldr	r2, [pc, #172]	; (8017810 <input_parameter+0x718>)
 8017762:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 8017766:	4b1d      	ldr	r3, [pc, #116]	; (80177dc <input_parameter+0x6e4>)
 8017768:	4a2a      	ldr	r2, [pc, #168]	; (8017814 <input_parameter+0x71c>)
 801776a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 801776e:	4b1b      	ldr	r3, [pc, #108]	; (80177dc <input_parameter+0x6e4>)
 8017770:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8017774:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8017778:	4b18      	ldr	r3, [pc, #96]	; (80177dc <input_parameter+0x6e4>)
 801777a:	4a27      	ldr	r2, [pc, #156]	; (8017818 <input_parameter+0x720>)
 801777c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8017780:	4b16      	ldr	r3, [pc, #88]	; (80177dc <input_parameter+0x6e4>)
 8017782:	4a18      	ldr	r2, [pc, #96]	; (80177e4 <input_parameter+0x6ec>)
 8017784:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8017788:	4b14      	ldr	r3, [pc, #80]	; (80177dc <input_parameter+0x6e4>)
 801778a:	4a24      	ldr	r2, [pc, #144]	; (801781c <input_parameter+0x724>)
 801778c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8017790:	4b12      	ldr	r3, [pc, #72]	; (80177dc <input_parameter+0x6e4>)
 8017792:	4a1d      	ldr	r2, [pc, #116]	; (8017808 <input_parameter+0x710>)
 8017794:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8017798:	4b10      	ldr	r3, [pc, #64]	; (80177dc <input_parameter+0x6e4>)
 801779a:	4a21      	ldr	r2, [pc, #132]	; (8017820 <input_parameter+0x728>)
 801779c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 80177a0:	4b0e      	ldr	r3, [pc, #56]	; (80177dc <input_parameter+0x6e4>)
 80177a2:	4a20      	ldr	r2, [pc, #128]	; (8017824 <input_parameter+0x72c>)
 80177a4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 80177a8:	4b0c      	ldr	r3, [pc, #48]	; (80177dc <input_parameter+0x6e4>)
 80177aa:	4a0e      	ldr	r2, [pc, #56]	; (80177e4 <input_parameter+0x6ec>)
 80177ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 80177b0:	4b0a      	ldr	r3, [pc, #40]	; (80177dc <input_parameter+0x6e4>)
 80177b2:	4a1d      	ldr	r2, [pc, #116]	; (8017828 <input_parameter+0x730>)
 80177b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 80177b8:	4b08      	ldr	r3, [pc, #32]	; (80177dc <input_parameter+0x6e4>)
 80177ba:	4a1c      	ldr	r2, [pc, #112]	; (801782c <input_parameter+0x734>)
 80177bc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 80177c0:	4b06      	ldr	r3, [pc, #24]	; (80177dc <input_parameter+0x6e4>)
 80177c2:	4a1b      	ldr	r2, [pc, #108]	; (8017830 <input_parameter+0x738>)
 80177c4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 80177c8:	4b04      	ldr	r3, [pc, #16]	; (80177dc <input_parameter+0x6e4>)
 80177ca:	4a16      	ldr	r2, [pc, #88]	; (8017824 <input_parameter+0x72c>)
 80177cc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



}
 80177d0:	bf00      	nop
 80177d2:	46bd      	mov	sp, r7
 80177d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d8:	4770      	bx	lr
 80177da:	bf00      	nop
 80177dc:	2000df04 	.word	0x2000df04
 80177e0:	42080000 	.word	0x42080000
 80177e4:	44160000 	.word	0x44160000
 80177e8:	44340000 	.word	0x44340000
 80177ec:	463b8000 	.word	0x463b8000
 80177f0:	422c0000 	.word	0x422c0000
 80177f4:	41b00000 	.word	0x41b00000
 80177f8:	443b8000 	.word	0x443b8000
 80177fc:	42200000 	.word	0x42200000
 8017800:	41c00000 	.word	0x41c00000
 8017804:	44660000 	.word	0x44660000
 8017808:	466a6000 	.word	0x466a6000
 801780c:	40a00000 	.word	0x40a00000
 8017810:	445e8000 	.word	0x445e8000
 8017814:	465ac000 	.word	0x465ac000
 8017818:	42100000 	.word	0x42100000
 801781c:	446b0000 	.word	0x446b0000
 8017820:	41880000 	.word	0x41880000
 8017824:	41a00000 	.word	0x41a00000
 8017828:	44700000 	.word	0x44700000
 801782c:	467a0000 	.word	0x467a0000
 8017830:	41200000 	.word	0x41200000

08017834 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8017838:	4b22      	ldr	r3, [pc, #136]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 801783a:	4a23      	ldr	r2, [pc, #140]	; (80178c8 <MX_USART1_UART_Init+0x94>)
 801783c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801783e:	4b21      	ldr	r3, [pc, #132]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 8017840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8017846:	4b1f      	ldr	r3, [pc, #124]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 8017848:	2200      	movs	r2, #0
 801784a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801784c:	4b1d      	ldr	r3, [pc, #116]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 801784e:	2200      	movs	r2, #0
 8017850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8017852:	4b1c      	ldr	r3, [pc, #112]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 8017854:	2200      	movs	r2, #0
 8017856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8017858:	4b1a      	ldr	r3, [pc, #104]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 801785a:	220c      	movs	r2, #12
 801785c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801785e:	4b19      	ldr	r3, [pc, #100]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 8017860:	2200      	movs	r2, #0
 8017862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8017864:	4b17      	ldr	r3, [pc, #92]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 8017866:	2200      	movs	r2, #0
 8017868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801786a:	4b16      	ldr	r3, [pc, #88]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 801786c:	2200      	movs	r2, #0
 801786e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017870:	4b14      	ldr	r3, [pc, #80]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 8017872:	2200      	movs	r2, #0
 8017874:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017876:	4b13      	ldr	r3, [pc, #76]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 8017878:	2200      	movs	r2, #0
 801787a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801787c:	4811      	ldr	r0, [pc, #68]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 801787e:	f006 fd2d 	bl	801e2dc <HAL_UART_Init>
 8017882:	4603      	mov	r3, r0
 8017884:	2b00      	cmp	r3, #0
 8017886:	d001      	beq.n	801788c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8017888:	f7f2 fc2f 	bl	800a0ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801788c:	2100      	movs	r1, #0
 801788e:	480d      	ldr	r0, [pc, #52]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 8017890:	f007 faf4 	bl	801ee7c <HAL_UARTEx_SetTxFifoThreshold>
 8017894:	4603      	mov	r3, r0
 8017896:	2b00      	cmp	r3, #0
 8017898:	d001      	beq.n	801789e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 801789a:	f7f2 fc26 	bl	800a0ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801789e:	2100      	movs	r1, #0
 80178a0:	4808      	ldr	r0, [pc, #32]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 80178a2:	f007 fb29 	bl	801eef8 <HAL_UARTEx_SetRxFifoThreshold>
 80178a6:	4603      	mov	r3, r0
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d001      	beq.n	80178b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80178ac:	f7f2 fc1d 	bl	800a0ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80178b0:	4804      	ldr	r0, [pc, #16]	; (80178c4 <MX_USART1_UART_Init+0x90>)
 80178b2:	f007 faaa 	bl	801ee0a <HAL_UARTEx_DisableFifoMode>
 80178b6:	4603      	mov	r3, r0
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d001      	beq.n	80178c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80178bc:	f7f2 fc15 	bl	800a0ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80178c0:	bf00      	nop
 80178c2:	bd80      	pop	{r7, pc}
 80178c4:	2000e04c 	.word	0x2000e04c
 80178c8:	40013800 	.word	0x40013800

080178cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b09e      	sub	sp, #120	; 0x78
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80178d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80178d8:	2200      	movs	r2, #0
 80178da:	601a      	str	r2, [r3, #0]
 80178dc:	605a      	str	r2, [r3, #4]
 80178de:	609a      	str	r2, [r3, #8]
 80178e0:	60da      	str	r2, [r3, #12]
 80178e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80178e4:	f107 0314 	add.w	r3, r7, #20
 80178e8:	2250      	movs	r2, #80	; 0x50
 80178ea:	2100      	movs	r1, #0
 80178ec:	4618      	mov	r0, r3
 80178ee:	f007 fbc7 	bl	801f080 <memset>
  if(uartHandle->Instance==USART1)
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	4a1f      	ldr	r2, [pc, #124]	; (8017974 <HAL_UART_MspInit+0xa8>)
 80178f8:	4293      	cmp	r3, r2
 80178fa:	d137      	bne.n	801796c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80178fc:	2301      	movs	r3, #1
 80178fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8017900:	2300      	movs	r3, #0
 8017902:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017904:	f107 0314 	add.w	r3, r7, #20
 8017908:	4618      	mov	r0, r3
 801790a:	f004 f891 	bl	801ba30 <HAL_RCCEx_PeriphCLKConfig>
 801790e:	4603      	mov	r3, r0
 8017910:	2b00      	cmp	r3, #0
 8017912:	d001      	beq.n	8017918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8017914:	f7f2 fbe9 	bl	800a0ea <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017918:	4b17      	ldr	r3, [pc, #92]	; (8017978 <HAL_UART_MspInit+0xac>)
 801791a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801791c:	4a16      	ldr	r2, [pc, #88]	; (8017978 <HAL_UART_MspInit+0xac>)
 801791e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017922:	6613      	str	r3, [r2, #96]	; 0x60
 8017924:	4b14      	ldr	r3, [pc, #80]	; (8017978 <HAL_UART_MspInit+0xac>)
 8017926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801792c:	613b      	str	r3, [r7, #16]
 801792e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017930:	4b11      	ldr	r3, [pc, #68]	; (8017978 <HAL_UART_MspInit+0xac>)
 8017932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017934:	4a10      	ldr	r2, [pc, #64]	; (8017978 <HAL_UART_MspInit+0xac>)
 8017936:	f043 0301 	orr.w	r3, r3, #1
 801793a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801793c:	4b0e      	ldr	r3, [pc, #56]	; (8017978 <HAL_UART_MspInit+0xac>)
 801793e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017940:	f003 0301 	and.w	r3, r3, #1
 8017944:	60fb      	str	r3, [r7, #12]
 8017946:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8017948:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801794c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801794e:	2302      	movs	r3, #2
 8017950:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017952:	2300      	movs	r3, #0
 8017954:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017956:	2300      	movs	r3, #0
 8017958:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801795a:	2307      	movs	r3, #7
 801795c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801795e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017962:	4619      	mov	r1, r3
 8017964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017968:	f003 f8e4 	bl	801ab34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801796c:	bf00      	nop
 801796e:	3778      	adds	r7, #120	; 0x78
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}
 8017974:	40013800 	.word	0x40013800
 8017978:	40021000 	.word	0x40021000

0801797c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801797c:	480d      	ldr	r0, [pc, #52]	; (80179b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801797e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8017980:	480d      	ldr	r0, [pc, #52]	; (80179b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8017982:	490e      	ldr	r1, [pc, #56]	; (80179bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8017984:	4a0e      	ldr	r2, [pc, #56]	; (80179c0 <LoopForever+0xe>)
  movs r3, #0
 8017986:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8017988:	e002      	b.n	8017990 <LoopCopyDataInit>

0801798a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801798a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801798c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801798e:	3304      	adds	r3, #4

08017990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017994:	d3f9      	bcc.n	801798a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8017996:	4a0b      	ldr	r2, [pc, #44]	; (80179c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8017998:	4c0b      	ldr	r4, [pc, #44]	; (80179c8 <LoopForever+0x16>)
  movs r3, #0
 801799a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801799c:	e001      	b.n	80179a2 <LoopFillZerobss>

0801799e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801799e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80179a0:	3204      	adds	r2, #4

080179a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80179a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80179a4:	d3fb      	bcc.n	801799e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80179a6:	f7ff f8df 	bl	8016b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80179aa:	f007 fb37 	bl	801f01c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80179ae:	f7f2 fa37 	bl	8009e20 <main>

080179b2 <LoopForever>:

LoopForever:
    b LoopForever
 80179b2:	e7fe      	b.n	80179b2 <LoopForever>
  ldr   r0, =_estack
 80179b4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80179b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80179bc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80179c0:	08022810 	.word	0x08022810
  ldr r2, =_sbss
 80179c4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80179c8:	2000e0f0 	.word	0x2000e0f0

080179cc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80179cc:	e7fe      	b.n	80179cc <ADC3_IRQHandler>
	...

080179d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b082      	sub	sp, #8
 80179d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80179d6:	2300      	movs	r3, #0
 80179d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80179da:	4b0c      	ldr	r3, [pc, #48]	; (8017a0c <HAL_Init+0x3c>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	4a0b      	ldr	r2, [pc, #44]	; (8017a0c <HAL_Init+0x3c>)
 80179e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80179e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80179e6:	2003      	movs	r0, #3
 80179e8:	f002 fb30 	bl	801a04c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80179ec:	200f      	movs	r0, #15
 80179ee:	f000 f80f 	bl	8017a10 <HAL_InitTick>
 80179f2:	4603      	mov	r3, r0
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d002      	beq.n	80179fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80179f8:	2301      	movs	r3, #1
 80179fa:	71fb      	strb	r3, [r7, #7]
 80179fc:	e001      	b.n	8017a02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80179fe:	f7fe ff67 	bl	80168d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8017a02:	79fb      	ldrb	r3, [r7, #7]

}
 8017a04:	4618      	mov	r0, r3
 8017a06:	3708      	adds	r7, #8
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}
 8017a0c:	40022000 	.word	0x40022000

08017a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b084      	sub	sp, #16
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8017a1c:	4b16      	ldr	r3, [pc, #88]	; (8017a78 <HAL_InitTick+0x68>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d022      	beq.n	8017a6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8017a24:	4b15      	ldr	r3, [pc, #84]	; (8017a7c <HAL_InitTick+0x6c>)
 8017a26:	681a      	ldr	r2, [r3, #0]
 8017a28:	4b13      	ldr	r3, [pc, #76]	; (8017a78 <HAL_InitTick+0x68>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8017a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f002 fb3a 	bl	801a0b2 <HAL_SYSTICK_Config>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d10f      	bne.n	8017a64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	2b0f      	cmp	r3, #15
 8017a48:	d809      	bhi.n	8017a5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	6879      	ldr	r1, [r7, #4]
 8017a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a52:	f002 fb06 	bl	801a062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8017a56:	4a0a      	ldr	r2, [pc, #40]	; (8017a80 <HAL_InitTick+0x70>)
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	6013      	str	r3, [r2, #0]
 8017a5c:	e007      	b.n	8017a6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8017a5e:	2301      	movs	r3, #1
 8017a60:	73fb      	strb	r3, [r7, #15]
 8017a62:	e004      	b.n	8017a6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8017a64:	2301      	movs	r3, #1
 8017a66:	73fb      	strb	r3, [r7, #15]
 8017a68:	e001      	b.n	8017a6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8017a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	3710      	adds	r7, #16
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	20000008 	.word	0x20000008
 8017a7c:	20000000 	.word	0x20000000
 8017a80:	20000004 	.word	0x20000004

08017a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8017a84:	b480      	push	{r7}
 8017a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8017a88:	4b05      	ldr	r3, [pc, #20]	; (8017aa0 <HAL_IncTick+0x1c>)
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	4b05      	ldr	r3, [pc, #20]	; (8017aa4 <HAL_IncTick+0x20>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	4413      	add	r3, r2
 8017a92:	4a03      	ldr	r2, [pc, #12]	; (8017aa0 <HAL_IncTick+0x1c>)
 8017a94:	6013      	str	r3, [r2, #0]
}
 8017a96:	bf00      	nop
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9e:	4770      	bx	lr
 8017aa0:	2000e0dc 	.word	0x2000e0dc
 8017aa4:	20000008 	.word	0x20000008

08017aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017aa8:	b480      	push	{r7}
 8017aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8017aac:	4b03      	ldr	r3, [pc, #12]	; (8017abc <HAL_GetTick+0x14>)
 8017aae:	681b      	ldr	r3, [r3, #0]
}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab8:	4770      	bx	lr
 8017aba:	bf00      	nop
 8017abc:	2000e0dc 	.word	0x2000e0dc

08017ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b084      	sub	sp, #16
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017ac8:	f7ff ffee 	bl	8017aa8 <HAL_GetTick>
 8017acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ad8:	d004      	beq.n	8017ae4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8017ada:	4b09      	ldr	r3, [pc, #36]	; (8017b00 <HAL_Delay+0x40>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	68fa      	ldr	r2, [r7, #12]
 8017ae0:	4413      	add	r3, r2
 8017ae2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017ae4:	bf00      	nop
 8017ae6:	f7ff ffdf 	bl	8017aa8 <HAL_GetTick>
 8017aea:	4602      	mov	r2, r0
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	1ad3      	subs	r3, r2, r3
 8017af0:	68fa      	ldr	r2, [r7, #12]
 8017af2:	429a      	cmp	r2, r3
 8017af4:	d8f7      	bhi.n	8017ae6 <HAL_Delay+0x26>
  {
  }
}
 8017af6:	bf00      	nop
 8017af8:	bf00      	nop
 8017afa:	3710      	adds	r7, #16
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}
 8017b00:	20000008 	.word	0x20000008

08017b04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8017b04:	b480      	push	{r7}
 8017b06:	b083      	sub	sp, #12
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
 8017b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	689b      	ldr	r3, [r3, #8]
 8017b12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	431a      	orrs	r2, r3
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	609a      	str	r2, [r3, #8]
}
 8017b1e:	bf00      	nop
 8017b20:	370c      	adds	r7, #12
 8017b22:	46bd      	mov	sp, r7
 8017b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b28:	4770      	bx	lr

08017b2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8017b2a:	b480      	push	{r7}
 8017b2c:	b083      	sub	sp, #12
 8017b2e:	af00      	add	r7, sp, #0
 8017b30:	6078      	str	r0, [r7, #4]
 8017b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	689b      	ldr	r3, [r3, #8]
 8017b38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	431a      	orrs	r2, r3
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	609a      	str	r2, [r3, #8]
}
 8017b44:	bf00      	nop
 8017b46:	370c      	adds	r7, #12
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4e:	4770      	bx	lr

08017b50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017b50:	b480      	push	{r7}
 8017b52:	b083      	sub	sp, #12
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	689b      	ldr	r3, [r3, #8]
 8017b5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8017b60:	4618      	mov	r0, r3
 8017b62:	370c      	adds	r7, #12
 8017b64:	46bd      	mov	sp, r7
 8017b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6a:	4770      	bx	lr

08017b6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	b087      	sub	sp, #28
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	60f8      	str	r0, [r7, #12]
 8017b74:	60b9      	str	r1, [r7, #8]
 8017b76:	607a      	str	r2, [r7, #4]
 8017b78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	3360      	adds	r3, #96	; 0x60
 8017b7e:	461a      	mov	r2, r3
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	009b      	lsls	r3, r3, #2
 8017b84:	4413      	add	r3, r2
 8017b86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	681a      	ldr	r2, [r3, #0]
 8017b8c:	4b08      	ldr	r3, [pc, #32]	; (8017bb0 <LL_ADC_SetOffset+0x44>)
 8017b8e:	4013      	ands	r3, r2
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8017b96:	683a      	ldr	r2, [r7, #0]
 8017b98:	430a      	orrs	r2, r1
 8017b9a:	4313      	orrs	r3, r2
 8017b9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8017ba4:	bf00      	nop
 8017ba6:	371c      	adds	r7, #28
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bae:	4770      	bx	lr
 8017bb0:	03fff000 	.word	0x03fff000

08017bb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8017bb4:	b480      	push	{r7}
 8017bb6:	b085      	sub	sp, #20
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	3360      	adds	r3, #96	; 0x60
 8017bc2:	461a      	mov	r2, r3
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	009b      	lsls	r3, r3, #2
 8017bc8:	4413      	add	r3, r2
 8017bca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	3714      	adds	r7, #20
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bde:	4770      	bx	lr

08017be0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8017be0:	b480      	push	{r7}
 8017be2:	b087      	sub	sp, #28
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	3360      	adds	r3, #96	; 0x60
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	009b      	lsls	r3, r3, #2
 8017bf6:	4413      	add	r3, r2
 8017bf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	431a      	orrs	r2, r3
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8017c0a:	bf00      	nop
 8017c0c:	371c      	adds	r7, #28
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c14:	4770      	bx	lr

08017c16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8017c16:	b480      	push	{r7}
 8017c18:	b087      	sub	sp, #28
 8017c1a:	af00      	add	r7, sp, #0
 8017c1c:	60f8      	str	r0, [r7, #12]
 8017c1e:	60b9      	str	r1, [r7, #8]
 8017c20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	3360      	adds	r3, #96	; 0x60
 8017c26:	461a      	mov	r2, r3
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	009b      	lsls	r3, r3, #2
 8017c2c:	4413      	add	r3, r2
 8017c2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017c30:	697b      	ldr	r3, [r7, #20]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	431a      	orrs	r2, r3
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8017c40:	bf00      	nop
 8017c42:	371c      	adds	r7, #28
 8017c44:	46bd      	mov	sp, r7
 8017c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4a:	4770      	bx	lr

08017c4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8017c4c:	b480      	push	{r7}
 8017c4e:	b087      	sub	sp, #28
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	60f8      	str	r0, [r7, #12]
 8017c54:	60b9      	str	r1, [r7, #8]
 8017c56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	3360      	adds	r3, #96	; 0x60
 8017c5c:	461a      	mov	r2, r3
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	009b      	lsls	r3, r3, #2
 8017c62:	4413      	add	r3, r2
 8017c64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017c66:	697b      	ldr	r3, [r7, #20]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	431a      	orrs	r2, r3
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8017c76:	bf00      	nop
 8017c78:	371c      	adds	r7, #28
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c80:	4770      	bx	lr

08017c82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8017c82:	b480      	push	{r7}
 8017c84:	b083      	sub	sp, #12
 8017c86:	af00      	add	r7, sp, #0
 8017c88:	6078      	str	r0, [r7, #4]
 8017c8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	695b      	ldr	r3, [r3, #20]
 8017c90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	431a      	orrs	r2, r3
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	615a      	str	r2, [r3, #20]
}
 8017c9c:	bf00      	nop
 8017c9e:	370c      	adds	r7, #12
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca6:	4770      	bx	lr

08017ca8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017ca8:	b480      	push	{r7}
 8017caa:	b083      	sub	sp, #12
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	68db      	ldr	r3, [r3, #12]
 8017cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d101      	bne.n	8017cc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8017cbc:	2301      	movs	r3, #1
 8017cbe:	e000      	b.n	8017cc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8017cc0:	2300      	movs	r3, #0
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	370c      	adds	r7, #12
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ccc:	4770      	bx	lr

08017cce <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8017cce:	b480      	push	{r7}
 8017cd0:	b087      	sub	sp, #28
 8017cd2:	af00      	add	r7, sp, #0
 8017cd4:	60f8      	str	r0, [r7, #12]
 8017cd6:	60b9      	str	r1, [r7, #8]
 8017cd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	3330      	adds	r3, #48	; 0x30
 8017cde:	461a      	mov	r2, r3
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	0a1b      	lsrs	r3, r3, #8
 8017ce4:	009b      	lsls	r3, r3, #2
 8017ce6:	f003 030c 	and.w	r3, r3, #12
 8017cea:	4413      	add	r3, r2
 8017cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	681a      	ldr	r2, [r3, #0]
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	f003 031f 	and.w	r3, r3, #31
 8017cf8:	211f      	movs	r1, #31
 8017cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8017cfe:	43db      	mvns	r3, r3
 8017d00:	401a      	ands	r2, r3
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	0e9b      	lsrs	r3, r3, #26
 8017d06:	f003 011f 	and.w	r1, r3, #31
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	f003 031f 	and.w	r3, r3, #31
 8017d10:	fa01 f303 	lsl.w	r3, r1, r3
 8017d14:	431a      	orrs	r2, r3
 8017d16:	697b      	ldr	r3, [r7, #20]
 8017d18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8017d1a:	bf00      	nop
 8017d1c:	371c      	adds	r7, #28
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d24:	4770      	bx	lr

08017d26 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017d26:	b480      	push	{r7}
 8017d28:	b083      	sub	sp, #12
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d32:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d101      	bne.n	8017d3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8017d3a:	2301      	movs	r3, #1
 8017d3c:	e000      	b.n	8017d40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8017d3e:	2300      	movs	r3, #0
}
 8017d40:	4618      	mov	r0, r3
 8017d42:	370c      	adds	r7, #12
 8017d44:	46bd      	mov	sp, r7
 8017d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4a:	4770      	bx	lr

08017d4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8017d4c:	b480      	push	{r7}
 8017d4e:	b087      	sub	sp, #28
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	60b9      	str	r1, [r7, #8]
 8017d56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	3314      	adds	r3, #20
 8017d5c:	461a      	mov	r2, r3
 8017d5e:	68bb      	ldr	r3, [r7, #8]
 8017d60:	0e5b      	lsrs	r3, r3, #25
 8017d62:	009b      	lsls	r3, r3, #2
 8017d64:	f003 0304 	and.w	r3, r3, #4
 8017d68:	4413      	add	r3, r2
 8017d6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017d6c:	697b      	ldr	r3, [r7, #20]
 8017d6e:	681a      	ldr	r2, [r3, #0]
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	0d1b      	lsrs	r3, r3, #20
 8017d74:	f003 031f 	and.w	r3, r3, #31
 8017d78:	2107      	movs	r1, #7
 8017d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8017d7e:	43db      	mvns	r3, r3
 8017d80:	401a      	ands	r2, r3
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	0d1b      	lsrs	r3, r3, #20
 8017d86:	f003 031f 	and.w	r3, r3, #31
 8017d8a:	6879      	ldr	r1, [r7, #4]
 8017d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8017d90:	431a      	orrs	r2, r3
 8017d92:	697b      	ldr	r3, [r7, #20]
 8017d94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8017d96:	bf00      	nop
 8017d98:	371c      	adds	r7, #28
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da0:	4770      	bx	lr
	...

08017da4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8017da4:	b480      	push	{r7}
 8017da6:	b085      	sub	sp, #20
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	60f8      	str	r0, [r7, #12]
 8017dac:	60b9      	str	r1, [r7, #8]
 8017dae:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	4a0f      	ldr	r2, [pc, #60]	; (8017df0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8017db4:	4293      	cmp	r3, r2
 8017db6:	d10a      	bne.n	8017dce <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017dc4:	431a      	orrs	r2, r3
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8017dcc:	e00a      	b.n	8017de4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017dda:	43db      	mvns	r3, r3
 8017ddc:	401a      	ands	r2, r3
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8017de4:	bf00      	nop
 8017de6:	3714      	adds	r7, #20
 8017de8:	46bd      	mov	sp, r7
 8017dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dee:	4770      	bx	lr
 8017df0:	407f0000 	.word	0x407f0000

08017df4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017df4:	b480      	push	{r7}
 8017df6:	b083      	sub	sp, #12
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	689b      	ldr	r3, [r3, #8]
 8017e00:	f003 031f 	and.w	r3, r3, #31
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	370c      	adds	r7, #12
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0e:	4770      	bx	lr

08017e10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017e10:	b480      	push	{r7}
 8017e12:	b083      	sub	sp, #12
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	689b      	ldr	r3, [r3, #8]
 8017e1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8017e20:	4618      	mov	r0, r3
 8017e22:	370c      	adds	r7, #12
 8017e24:	46bd      	mov	sp, r7
 8017e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2a:	4770      	bx	lr

08017e2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8017e2c:	b480      	push	{r7}
 8017e2e:	b083      	sub	sp, #12
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	689b      	ldr	r3, [r3, #8]
 8017e38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8017e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017e40:	687a      	ldr	r2, [r7, #4]
 8017e42:	6093      	str	r3, [r2, #8]
}
 8017e44:	bf00      	nop
 8017e46:	370c      	adds	r7, #12
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4e:	4770      	bx	lr

08017e50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8017e50:	b480      	push	{r7}
 8017e52:	b083      	sub	sp, #12
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	689b      	ldr	r3, [r3, #8]
 8017e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017e64:	d101      	bne.n	8017e6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8017e66:	2301      	movs	r3, #1
 8017e68:	e000      	b.n	8017e6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8017e6a:	2300      	movs	r3, #0
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	370c      	adds	r7, #12
 8017e70:	46bd      	mov	sp, r7
 8017e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e76:	4770      	bx	lr

08017e78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8017e78:	b480      	push	{r7}
 8017e7a:	b083      	sub	sp, #12
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	689b      	ldr	r3, [r3, #8]
 8017e84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8017e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017e8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8017e94:	bf00      	nop
 8017e96:	370c      	adds	r7, #12
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9e:	4770      	bx	lr

08017ea0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8017ea0:	b480      	push	{r7}
 8017ea2:	b083      	sub	sp, #12
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	689b      	ldr	r3, [r3, #8]
 8017eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017eb4:	d101      	bne.n	8017eba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8017eb6:	2301      	movs	r3, #1
 8017eb8:	e000      	b.n	8017ebc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8017eba:	2300      	movs	r3, #0
}
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	370c      	adds	r7, #12
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec6:	4770      	bx	lr

08017ec8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8017ec8:	b480      	push	{r7}
 8017eca:	b083      	sub	sp, #12
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	689b      	ldr	r3, [r3, #8]
 8017ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017edc:	f043 0201 	orr.w	r2, r3, #1
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8017ee4:	bf00      	nop
 8017ee6:	370c      	adds	r7, #12
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eee:	4770      	bx	lr

08017ef0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	b083      	sub	sp, #12
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	689b      	ldr	r3, [r3, #8]
 8017efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017f04:	f043 0202 	orr.w	r2, r3, #2
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8017f0c:	bf00      	nop
 8017f0e:	370c      	adds	r7, #12
 8017f10:	46bd      	mov	sp, r7
 8017f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f16:	4770      	bx	lr

08017f18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8017f18:	b480      	push	{r7}
 8017f1a:	b083      	sub	sp, #12
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	689b      	ldr	r3, [r3, #8]
 8017f24:	f003 0301 	and.w	r3, r3, #1
 8017f28:	2b01      	cmp	r3, #1
 8017f2a:	d101      	bne.n	8017f30 <LL_ADC_IsEnabled+0x18>
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	e000      	b.n	8017f32 <LL_ADC_IsEnabled+0x1a>
 8017f30:	2300      	movs	r3, #0
}
 8017f32:	4618      	mov	r0, r3
 8017f34:	370c      	adds	r7, #12
 8017f36:	46bd      	mov	sp, r7
 8017f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3c:	4770      	bx	lr

08017f3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8017f3e:	b480      	push	{r7}
 8017f40:	b083      	sub	sp, #12
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	689b      	ldr	r3, [r3, #8]
 8017f4a:	f003 0302 	and.w	r3, r3, #2
 8017f4e:	2b02      	cmp	r3, #2
 8017f50:	d101      	bne.n	8017f56 <LL_ADC_IsDisableOngoing+0x18>
 8017f52:	2301      	movs	r3, #1
 8017f54:	e000      	b.n	8017f58 <LL_ADC_IsDisableOngoing+0x1a>
 8017f56:	2300      	movs	r3, #0
}
 8017f58:	4618      	mov	r0, r3
 8017f5a:	370c      	adds	r7, #12
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f62:	4770      	bx	lr

08017f64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8017f64:	b480      	push	{r7}
 8017f66:	b083      	sub	sp, #12
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	689b      	ldr	r3, [r3, #8]
 8017f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017f78:	f043 0204 	orr.w	r2, r3, #4
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8017f80:	bf00      	nop
 8017f82:	370c      	adds	r7, #12
 8017f84:	46bd      	mov	sp, r7
 8017f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8a:	4770      	bx	lr

08017f8c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b083      	sub	sp, #12
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	689b      	ldr	r3, [r3, #8]
 8017f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017fa0:	f043 0210 	orr.w	r2, r3, #16
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8017fa8:	bf00      	nop
 8017faa:	370c      	adds	r7, #12
 8017fac:	46bd      	mov	sp, r7
 8017fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb2:	4770      	bx	lr

08017fb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8017fb4:	b480      	push	{r7}
 8017fb6:	b083      	sub	sp, #12
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	689b      	ldr	r3, [r3, #8]
 8017fc0:	f003 0304 	and.w	r3, r3, #4
 8017fc4:	2b04      	cmp	r3, #4
 8017fc6:	d101      	bne.n	8017fcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8017fc8:	2301      	movs	r3, #1
 8017fca:	e000      	b.n	8017fce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8017fcc:	2300      	movs	r3, #0
}
 8017fce:	4618      	mov	r0, r3
 8017fd0:	370c      	adds	r7, #12
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd8:	4770      	bx	lr

08017fda <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8017fda:	b480      	push	{r7}
 8017fdc:	b083      	sub	sp, #12
 8017fde:	af00      	add	r7, sp, #0
 8017fe0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	689b      	ldr	r3, [r3, #8]
 8017fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017fea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017fee:	f043 0220 	orr.w	r2, r3, #32
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8017ff6:	bf00      	nop
 8017ff8:	370c      	adds	r7, #12
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018000:	4770      	bx	lr

08018002 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8018002:	b480      	push	{r7}
 8018004:	b083      	sub	sp, #12
 8018006:	af00      	add	r7, sp, #0
 8018008:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	689b      	ldr	r3, [r3, #8]
 801800e:	f003 0308 	and.w	r3, r3, #8
 8018012:	2b08      	cmp	r3, #8
 8018014:	d101      	bne.n	801801a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8018016:	2301      	movs	r3, #1
 8018018:	e000      	b.n	801801c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 801801a:	2300      	movs	r3, #0
}
 801801c:	4618      	mov	r0, r3
 801801e:	370c      	adds	r7, #12
 8018020:	46bd      	mov	sp, r7
 8018022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018026:	4770      	bx	lr

08018028 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8018028:	b590      	push	{r4, r7, lr}
 801802a:	b089      	sub	sp, #36	; 0x24
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018030:	2300      	movs	r3, #0
 8018032:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8018034:	2300      	movs	r3, #0
 8018036:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d101      	bne.n	8018042 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 801803e:	2301      	movs	r3, #1
 8018040:	e1a1      	b.n	8018386 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	695b      	ldr	r3, [r3, #20]
 8018046:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801804c:	2b00      	cmp	r3, #0
 801804e:	d109      	bne.n	8018064 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f7f0 f991 	bl	8008378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	2200      	movs	r2, #0
 801805a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2200      	movs	r2, #0
 8018060:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	4618      	mov	r0, r3
 801806a:	f7ff fef1 	bl	8017e50 <LL_ADC_IsDeepPowerDownEnabled>
 801806e:	4603      	mov	r3, r0
 8018070:	2b00      	cmp	r3, #0
 8018072:	d004      	beq.n	801807e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	4618      	mov	r0, r3
 801807a:	f7ff fed7 	bl	8017e2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	4618      	mov	r0, r3
 8018084:	f7ff ff0c 	bl	8017ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d115      	bne.n	80180ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	4618      	mov	r0, r3
 8018094:	f7ff fef0 	bl	8017e78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8018098:	4b9a      	ldr	r3, [pc, #616]	; (8018304 <HAL_ADC_Init+0x2dc>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	099b      	lsrs	r3, r3, #6
 801809e:	4a9a      	ldr	r2, [pc, #616]	; (8018308 <HAL_ADC_Init+0x2e0>)
 80180a0:	fba2 2303 	umull	r2, r3, r2, r3
 80180a4:	099b      	lsrs	r3, r3, #6
 80180a6:	3301      	adds	r3, #1
 80180a8:	005b      	lsls	r3, r3, #1
 80180aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80180ac:	e002      	b.n	80180b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	3b01      	subs	r3, #1
 80180b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d1f9      	bne.n	80180ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	4618      	mov	r0, r3
 80180c0:	f7ff feee 	bl	8017ea0 <LL_ADC_IsInternalRegulatorEnabled>
 80180c4:	4603      	mov	r3, r0
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d10d      	bne.n	80180e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80180ce:	f043 0210 	orr.w	r2, r3, #16
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180da:	f043 0201 	orr.w	r2, r3, #1
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80180e2:	2301      	movs	r3, #1
 80180e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7ff ff62 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 80180f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80180f6:	f003 0310 	and.w	r3, r3, #16
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	f040 813a 	bne.w	8018374 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8018100:	697b      	ldr	r3, [r7, #20]
 8018102:	2b00      	cmp	r3, #0
 8018104:	f040 8136 	bne.w	8018374 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801810c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8018110:	f043 0202 	orr.w	r2, r3, #2
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	4618      	mov	r0, r3
 801811e:	f7ff fefb 	bl	8017f18 <LL_ADC_IsEnabled>
 8018122:	4603      	mov	r3, r0
 8018124:	2b00      	cmp	r3, #0
 8018126:	d137      	bne.n	8018198 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018130:	d004      	beq.n	801813c <HAL_ADC_Init+0x114>
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	4a75      	ldr	r2, [pc, #468]	; (801830c <HAL_ADC_Init+0x2e4>)
 8018138:	4293      	cmp	r3, r2
 801813a:	d10f      	bne.n	801815c <HAL_ADC_Init+0x134>
 801813c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8018140:	f7ff feea 	bl	8017f18 <LL_ADC_IsEnabled>
 8018144:	4604      	mov	r4, r0
 8018146:	4871      	ldr	r0, [pc, #452]	; (801830c <HAL_ADC_Init+0x2e4>)
 8018148:	f7ff fee6 	bl	8017f18 <LL_ADC_IsEnabled>
 801814c:	4603      	mov	r3, r0
 801814e:	4323      	orrs	r3, r4
 8018150:	2b00      	cmp	r3, #0
 8018152:	bf0c      	ite	eq
 8018154:	2301      	moveq	r3, #1
 8018156:	2300      	movne	r3, #0
 8018158:	b2db      	uxtb	r3, r3
 801815a:	e008      	b.n	801816e <HAL_ADC_Init+0x146>
 801815c:	486c      	ldr	r0, [pc, #432]	; (8018310 <HAL_ADC_Init+0x2e8>)
 801815e:	f7ff fedb 	bl	8017f18 <LL_ADC_IsEnabled>
 8018162:	4603      	mov	r3, r0
 8018164:	2b00      	cmp	r3, #0
 8018166:	bf0c      	ite	eq
 8018168:	2301      	moveq	r3, #1
 801816a:	2300      	movne	r3, #0
 801816c:	b2db      	uxtb	r3, r3
 801816e:	2b00      	cmp	r3, #0
 8018170:	d012      	beq.n	8018198 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801817a:	d004      	beq.n	8018186 <HAL_ADC_Init+0x15e>
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	4a62      	ldr	r2, [pc, #392]	; (801830c <HAL_ADC_Init+0x2e4>)
 8018182:	4293      	cmp	r3, r2
 8018184:	d101      	bne.n	801818a <HAL_ADC_Init+0x162>
 8018186:	4a63      	ldr	r2, [pc, #396]	; (8018314 <HAL_ADC_Init+0x2ec>)
 8018188:	e000      	b.n	801818c <HAL_ADC_Init+0x164>
 801818a:	4a63      	ldr	r2, [pc, #396]	; (8018318 <HAL_ADC_Init+0x2f0>)
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	685b      	ldr	r3, [r3, #4]
 8018190:	4619      	mov	r1, r3
 8018192:	4610      	mov	r0, r2
 8018194:	f7ff fcb6 	bl	8017b04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	7f5b      	ldrb	r3, [r3, #29]
 801819c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80181a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80181a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80181ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80181b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80181b8:	4313      	orrs	r3, r2
 80181ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80181c2:	2b01      	cmp	r3, #1
 80181c4:	d106      	bne.n	80181d4 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181ca:	3b01      	subs	r3, #1
 80181cc:	045b      	lsls	r3, r3, #17
 80181ce:	69ba      	ldr	r2, [r7, #24]
 80181d0:	4313      	orrs	r3, r2
 80181d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d009      	beq.n	80181f0 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80181ea:	69ba      	ldr	r2, [r7, #24]
 80181ec:	4313      	orrs	r3, r2
 80181ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	68da      	ldr	r2, [r3, #12]
 80181f6:	4b49      	ldr	r3, [pc, #292]	; (801831c <HAL_ADC_Init+0x2f4>)
 80181f8:	4013      	ands	r3, r2
 80181fa:	687a      	ldr	r2, [r7, #4]
 80181fc:	6812      	ldr	r2, [r2, #0]
 80181fe:	69b9      	ldr	r1, [r7, #24]
 8018200:	430b      	orrs	r3, r1
 8018202:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	691b      	ldr	r3, [r3, #16]
 801820a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	430a      	orrs	r2, r1
 8018218:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	4618      	mov	r0, r3
 8018220:	f7ff fec8 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 8018224:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	4618      	mov	r0, r3
 801822c:	f7ff fee9 	bl	8018002 <LL_ADC_INJ_IsConversionOngoing>
 8018230:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d17b      	bne.n	8018330 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d178      	bne.n	8018330 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8018242:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801824a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801824c:	4313      	orrs	r3, r2
 801824e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	68db      	ldr	r3, [r3, #12]
 8018256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801825a:	f023 0302 	bic.w	r3, r3, #2
 801825e:	687a      	ldr	r2, [r7, #4]
 8018260:	6812      	ldr	r2, [r2, #0]
 8018262:	69b9      	ldr	r1, [r7, #24]
 8018264:	430b      	orrs	r3, r1
 8018266:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	691b      	ldr	r3, [r3, #16]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d017      	beq.n	80182a0 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	691a      	ldr	r2, [r3, #16]
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801827e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018288:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801828c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018290:	687a      	ldr	r2, [r7, #4]
 8018292:	6911      	ldr	r1, [r2, #16]
 8018294:	687a      	ldr	r2, [r7, #4]
 8018296:	6812      	ldr	r2, [r2, #0]
 8018298:	430b      	orrs	r3, r1
 801829a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 801829e:	e013      	b.n	80182c8 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	691a      	ldr	r2, [r3, #16]
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80182ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80182b8:	687a      	ldr	r2, [r7, #4]
 80182ba:	6812      	ldr	r2, [r2, #0]
 80182bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80182c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80182c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80182ce:	2b01      	cmp	r3, #1
 80182d0:	d126      	bne.n	8018320 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	691b      	ldr	r3, [r3, #16]
 80182d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80182dc:	f023 0304 	bic.w	r3, r3, #4
 80182e0:	687a      	ldr	r2, [r7, #4]
 80182e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80182e4:	687a      	ldr	r2, [r7, #4]
 80182e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80182e8:	4311      	orrs	r1, r2
 80182ea:	687a      	ldr	r2, [r7, #4]
 80182ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80182ee:	4311      	orrs	r1, r2
 80182f0:	687a      	ldr	r2, [r7, #4]
 80182f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80182f4:	430a      	orrs	r2, r1
 80182f6:	431a      	orrs	r2, r3
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	f042 0201 	orr.w	r2, r2, #1
 8018300:	611a      	str	r2, [r3, #16]
 8018302:	e015      	b.n	8018330 <HAL_ADC_Init+0x308>
 8018304:	20000000 	.word	0x20000000
 8018308:	053e2d63 	.word	0x053e2d63
 801830c:	50000100 	.word	0x50000100
 8018310:	50000400 	.word	0x50000400
 8018314:	50000300 	.word	0x50000300
 8018318:	50000700 	.word	0x50000700
 801831c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	691a      	ldr	r2, [r3, #16]
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	f022 0201 	bic.w	r2, r2, #1
 801832e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	695b      	ldr	r3, [r3, #20]
 8018334:	2b01      	cmp	r3, #1
 8018336:	d10c      	bne.n	8018352 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801833e:	f023 010f 	bic.w	r1, r3, #15
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	6a1b      	ldr	r3, [r3, #32]
 8018346:	1e5a      	subs	r2, r3, #1
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	430a      	orrs	r2, r1
 801834e:	631a      	str	r2, [r3, #48]	; 0x30
 8018350:	e007      	b.n	8018362 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	f022 020f 	bic.w	r2, r2, #15
 8018360:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018366:	f023 0303 	bic.w	r3, r3, #3
 801836a:	f043 0201 	orr.w	r2, r3, #1
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	65da      	str	r2, [r3, #92]	; 0x5c
 8018372:	e007      	b.n	8018384 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018378:	f043 0210 	orr.w	r2, r3, #16
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8018380:	2301      	movs	r3, #1
 8018382:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8018384:	7ffb      	ldrb	r3, [r7, #31]
}
 8018386:	4618      	mov	r0, r3
 8018388:	3724      	adds	r7, #36	; 0x24
 801838a:	46bd      	mov	sp, r7
 801838c:	bd90      	pop	{r4, r7, pc}
 801838e:	bf00      	nop

08018390 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b086      	sub	sp, #24
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80183a0:	d004      	beq.n	80183ac <HAL_ADC_Start+0x1c>
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	4a5c      	ldr	r2, [pc, #368]	; (8018518 <HAL_ADC_Start+0x188>)
 80183a8:	4293      	cmp	r3, r2
 80183aa:	d101      	bne.n	80183b0 <HAL_ADC_Start+0x20>
 80183ac:	4b5b      	ldr	r3, [pc, #364]	; (801851c <HAL_ADC_Start+0x18c>)
 80183ae:	e000      	b.n	80183b2 <HAL_ADC_Start+0x22>
 80183b0:	4b5b      	ldr	r3, [pc, #364]	; (8018520 <HAL_ADC_Start+0x190>)
 80183b2:	4618      	mov	r0, r3
 80183b4:	f7ff fd1e 	bl	8017df4 <LL_ADC_GetMultimode>
 80183b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	4618      	mov	r0, r3
 80183c0:	f7ff fdf8 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 80183c4:	4603      	mov	r3, r0
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	f040 809f 	bne.w	801850a <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80183d2:	2b01      	cmp	r3, #1
 80183d4:	d101      	bne.n	80183da <HAL_ADC_Start+0x4a>
 80183d6:	2302      	movs	r3, #2
 80183d8:	e09a      	b.n	8018510 <HAL_ADC_Start+0x180>
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	2201      	movs	r2, #1
 80183de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80183e2:	6878      	ldr	r0, [r7, #4]
 80183e4:	f001 fa3e 	bl	8019864 <ADC_Enable>
 80183e8:	4603      	mov	r3, r0
 80183ea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80183ec:	7dfb      	ldrb	r3, [r7, #23]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	f040 8086 	bne.w	8018500 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80183fc:	f023 0301 	bic.w	r3, r3, #1
 8018400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	4a42      	ldr	r2, [pc, #264]	; (8018518 <HAL_ADC_Start+0x188>)
 801840e:	4293      	cmp	r3, r2
 8018410:	d002      	beq.n	8018418 <HAL_ADC_Start+0x88>
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	e001      	b.n	801841c <HAL_ADC_Start+0x8c>
 8018418:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801841c:	687a      	ldr	r2, [r7, #4]
 801841e:	6812      	ldr	r2, [r2, #0]
 8018420:	4293      	cmp	r3, r2
 8018422:	d002      	beq.n	801842a <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018424:	693b      	ldr	r3, [r7, #16]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d105      	bne.n	8018436 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801842e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801843a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801843e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018442:	d106      	bne.n	8018452 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018448:	f023 0206 	bic.w	r2, r3, #6
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	661a      	str	r2, [r3, #96]	; 0x60
 8018450:	e002      	b.n	8018458 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	2200      	movs	r2, #0
 8018456:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	221c      	movs	r2, #28
 801845e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	2200      	movs	r2, #0
 8018464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	4a2a      	ldr	r2, [pc, #168]	; (8018518 <HAL_ADC_Start+0x188>)
 801846e:	4293      	cmp	r3, r2
 8018470:	d002      	beq.n	8018478 <HAL_ADC_Start+0xe8>
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	e001      	b.n	801847c <HAL_ADC_Start+0xec>
 8018478:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801847c:	687a      	ldr	r2, [r7, #4]
 801847e:	6812      	ldr	r2, [r2, #0]
 8018480:	4293      	cmp	r3, r2
 8018482:	d008      	beq.n	8018496 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018484:	693b      	ldr	r3, [r7, #16]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d005      	beq.n	8018496 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801848a:	693b      	ldr	r3, [r7, #16]
 801848c:	2b05      	cmp	r3, #5
 801848e:	d002      	beq.n	8018496 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018490:	693b      	ldr	r3, [r7, #16]
 8018492:	2b09      	cmp	r3, #9
 8018494:	d114      	bne.n	80184c0 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	68db      	ldr	r3, [r3, #12]
 801849c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d007      	beq.n	80184b4 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80184ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	4618      	mov	r0, r3
 80184ba:	f7ff fd53 	bl	8017f64 <LL_ADC_REG_StartConversion>
 80184be:	e026      	b.n	801850e <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	4a11      	ldr	r2, [pc, #68]	; (8018518 <HAL_ADC_Start+0x188>)
 80184d2:	4293      	cmp	r3, r2
 80184d4:	d002      	beq.n	80184dc <HAL_ADC_Start+0x14c>
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	e001      	b.n	80184e0 <HAL_ADC_Start+0x150>
 80184dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80184e0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	68db      	ldr	r3, [r3, #12]
 80184e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d00f      	beq.n	801850e <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80184f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80184fe:	e006      	b.n	801850e <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2200      	movs	r2, #0
 8018504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8018508:	e001      	b.n	801850e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801850a:	2302      	movs	r3, #2
 801850c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801850e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018510:	4618      	mov	r0, r3
 8018512:	3718      	adds	r7, #24
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}
 8018518:	50000100 	.word	0x50000100
 801851c:	50000300 	.word	0x50000300
 8018520:	50000700 	.word	0x50000700

08018524 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b084      	sub	sp, #16
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018532:	2b01      	cmp	r3, #1
 8018534:	d101      	bne.n	801853a <HAL_ADC_Stop+0x16>
 8018536:	2302      	movs	r3, #2
 8018538:	e023      	b.n	8018582 <HAL_ADC_Stop+0x5e>
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	2201      	movs	r2, #1
 801853e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8018542:	2103      	movs	r1, #3
 8018544:	6878      	ldr	r0, [r7, #4]
 8018546:	f001 f8d1 	bl	80196ec <ADC_ConversionStop>
 801854a:	4603      	mov	r3, r0
 801854c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801854e:	7bfb      	ldrb	r3, [r7, #15]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d111      	bne.n	8018578 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f001 f9e7 	bl	8019928 <ADC_Disable>
 801855a:	4603      	mov	r3, r0
 801855c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801855e:	7bfb      	ldrb	r3, [r7, #15]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d109      	bne.n	8018578 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018568:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801856c:	f023 0301 	bic.w	r3, r3, #1
 8018570:	f043 0201 	orr.w	r2, r3, #1
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2200      	movs	r2, #0
 801857c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8018580:	7bfb      	ldrb	r3, [r7, #15]
}
 8018582:	4618      	mov	r0, r3
 8018584:	3710      	adds	r7, #16
 8018586:	46bd      	mov	sp, r7
 8018588:	bd80      	pop	{r7, pc}
	...

0801858c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b088      	sub	sp, #32
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801859e:	d004      	beq.n	80185aa <HAL_ADC_PollForConversion+0x1e>
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	4a70      	ldr	r2, [pc, #448]	; (8018768 <HAL_ADC_PollForConversion+0x1dc>)
 80185a6:	4293      	cmp	r3, r2
 80185a8:	d101      	bne.n	80185ae <HAL_ADC_PollForConversion+0x22>
 80185aa:	4b70      	ldr	r3, [pc, #448]	; (801876c <HAL_ADC_PollForConversion+0x1e0>)
 80185ac:	e000      	b.n	80185b0 <HAL_ADC_PollForConversion+0x24>
 80185ae:	4b70      	ldr	r3, [pc, #448]	; (8018770 <HAL_ADC_PollForConversion+0x1e4>)
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7ff fc1f 	bl	8017df4 <LL_ADC_GetMultimode>
 80185b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	699b      	ldr	r3, [r3, #24]
 80185bc:	2b08      	cmp	r3, #8
 80185be:	d102      	bne.n	80185c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80185c0:	2308      	movs	r3, #8
 80185c2:	61fb      	str	r3, [r7, #28]
 80185c4:	e037      	b.n	8018636 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d005      	beq.n	80185d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	2b05      	cmp	r3, #5
 80185d0:	d002      	beq.n	80185d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	2b09      	cmp	r3, #9
 80185d6:	d111      	bne.n	80185fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	f003 0301 	and.w	r3, r3, #1
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d007      	beq.n	80185f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185ea:	f043 0220 	orr.w	r2, r3, #32
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80185f2:	2301      	movs	r3, #1
 80185f4:	e0b3      	b.n	801875e <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80185f6:	2304      	movs	r3, #4
 80185f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80185fa:	e01c      	b.n	8018636 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018604:	d004      	beq.n	8018610 <HAL_ADC_PollForConversion+0x84>
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	4a57      	ldr	r2, [pc, #348]	; (8018768 <HAL_ADC_PollForConversion+0x1dc>)
 801860c:	4293      	cmp	r3, r2
 801860e:	d101      	bne.n	8018614 <HAL_ADC_PollForConversion+0x88>
 8018610:	4b56      	ldr	r3, [pc, #344]	; (801876c <HAL_ADC_PollForConversion+0x1e0>)
 8018612:	e000      	b.n	8018616 <HAL_ADC_PollForConversion+0x8a>
 8018614:	4b56      	ldr	r3, [pc, #344]	; (8018770 <HAL_ADC_PollForConversion+0x1e4>)
 8018616:	4618      	mov	r0, r3
 8018618:	f7ff fbfa 	bl	8017e10 <LL_ADC_GetMultiDMATransfer>
 801861c:	4603      	mov	r3, r0
 801861e:	2b00      	cmp	r3, #0
 8018620:	d007      	beq.n	8018632 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018626:	f043 0220 	orr.w	r2, r3, #32
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801862e:	2301      	movs	r3, #1
 8018630:	e095      	b.n	801875e <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8018632:	2304      	movs	r3, #4
 8018634:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8018636:	f7ff fa37 	bl	8017aa8 <HAL_GetTick>
 801863a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801863c:	e021      	b.n	8018682 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801863e:	683b      	ldr	r3, [r7, #0]
 8018640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018644:	d01d      	beq.n	8018682 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8018646:	f7ff fa2f 	bl	8017aa8 <HAL_GetTick>
 801864a:	4602      	mov	r2, r0
 801864c:	693b      	ldr	r3, [r7, #16]
 801864e:	1ad3      	subs	r3, r2, r3
 8018650:	683a      	ldr	r2, [r7, #0]
 8018652:	429a      	cmp	r2, r3
 8018654:	d302      	bcc.n	801865c <HAL_ADC_PollForConversion+0xd0>
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d112      	bne.n	8018682 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	69fb      	ldr	r3, [r7, #28]
 8018664:	4013      	ands	r3, r2
 8018666:	2b00      	cmp	r3, #0
 8018668:	d10b      	bne.n	8018682 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801866e:	f043 0204 	orr.w	r2, r3, #4
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2200      	movs	r2, #0
 801867a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 801867e:	2303      	movs	r3, #3
 8018680:	e06d      	b.n	801875e <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	681a      	ldr	r2, [r3, #0]
 8018688:	69fb      	ldr	r3, [r7, #28]
 801868a:	4013      	ands	r3, r2
 801868c:	2b00      	cmp	r3, #0
 801868e:	d0d6      	beq.n	801863e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018694:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	4618      	mov	r0, r3
 80186a2:	f7ff fb01 	bl	8017ca8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80186a6:	4603      	mov	r3, r0
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d01c      	beq.n	80186e6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	7f5b      	ldrb	r3, [r3, #29]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d118      	bne.n	80186e6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	f003 0308 	and.w	r3, r3, #8
 80186be:	2b08      	cmp	r3, #8
 80186c0:	d111      	bne.n	80186e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d105      	bne.n	80186e6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186de:	f043 0201 	orr.w	r2, r3, #1
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	4a1f      	ldr	r2, [pc, #124]	; (8018768 <HAL_ADC_PollForConversion+0x1dc>)
 80186ec:	4293      	cmp	r3, r2
 80186ee:	d002      	beq.n	80186f6 <HAL_ADC_PollForConversion+0x16a>
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	e001      	b.n	80186fa <HAL_ADC_PollForConversion+0x16e>
 80186f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80186fa:	687a      	ldr	r2, [r7, #4]
 80186fc:	6812      	ldr	r2, [r2, #0]
 80186fe:	4293      	cmp	r3, r2
 8018700:	d008      	beq.n	8018714 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d005      	beq.n	8018714 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	2b05      	cmp	r3, #5
 801870c:	d002      	beq.n	8018714 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801870e:	697b      	ldr	r3, [r7, #20]
 8018710:	2b09      	cmp	r3, #9
 8018712:	d104      	bne.n	801871e <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	68db      	ldr	r3, [r3, #12]
 801871a:	61bb      	str	r3, [r7, #24]
 801871c:	e00d      	b.n	801873a <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	4a11      	ldr	r2, [pc, #68]	; (8018768 <HAL_ADC_PollForConversion+0x1dc>)
 8018724:	4293      	cmp	r3, r2
 8018726:	d002      	beq.n	801872e <HAL_ADC_PollForConversion+0x1a2>
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	e001      	b.n	8018732 <HAL_ADC_PollForConversion+0x1a6>
 801872e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018732:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	68db      	ldr	r3, [r3, #12]
 8018738:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	2b08      	cmp	r3, #8
 801873e:	d104      	bne.n	801874a <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	2208      	movs	r2, #8
 8018746:	601a      	str	r2, [r3, #0]
 8018748:	e008      	b.n	801875c <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 801874a:	69bb      	ldr	r3, [r7, #24]
 801874c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018750:	2b00      	cmp	r3, #0
 8018752:	d103      	bne.n	801875c <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	220c      	movs	r2, #12
 801875a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 801875c:	2300      	movs	r3, #0
}
 801875e:	4618      	mov	r0, r3
 8018760:	3720      	adds	r7, #32
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}
 8018766:	bf00      	nop
 8018768:	50000100 	.word	0x50000100
 801876c:	50000300 	.word	0x50000300
 8018770:	50000700 	.word	0x50000700

08018774 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b086      	sub	sp, #24
 8018778:	af00      	add	r7, sp, #0
 801877a:	60f8      	str	r0, [r7, #12]
 801877c:	60b9      	str	r1, [r7, #8]
 801877e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018788:	d004      	beq.n	8018794 <HAL_ADC_Start_DMA+0x20>
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	4a57      	ldr	r2, [pc, #348]	; (80188ec <HAL_ADC_Start_DMA+0x178>)
 8018790:	4293      	cmp	r3, r2
 8018792:	d101      	bne.n	8018798 <HAL_ADC_Start_DMA+0x24>
 8018794:	4b56      	ldr	r3, [pc, #344]	; (80188f0 <HAL_ADC_Start_DMA+0x17c>)
 8018796:	e000      	b.n	801879a <HAL_ADC_Start_DMA+0x26>
 8018798:	4b56      	ldr	r3, [pc, #344]	; (80188f4 <HAL_ADC_Start_DMA+0x180>)
 801879a:	4618      	mov	r0, r3
 801879c:	f7ff fb2a 	bl	8017df4 <LL_ADC_GetMultimode>
 80187a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	4618      	mov	r0, r3
 80187a8:	f7ff fc04 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 80187ac:	4603      	mov	r3, r0
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	f040 8094 	bne.w	80188dc <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80187ba:	2b01      	cmp	r3, #1
 80187bc:	d101      	bne.n	80187c2 <HAL_ADC_Start_DMA+0x4e>
 80187be:	2302      	movs	r3, #2
 80187c0:	e08f      	b.n	80188e2 <HAL_ADC_Start_DMA+0x16e>
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	2201      	movs	r2, #1
 80187c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	4a4a      	ldr	r2, [pc, #296]	; (80188f8 <HAL_ADC_Start_DMA+0x184>)
 80187d0:	4293      	cmp	r3, r2
 80187d2:	d008      	beq.n	80187e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80187d4:	693b      	ldr	r3, [r7, #16]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d005      	beq.n	80187e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	2b05      	cmp	r3, #5
 80187de:	d002      	beq.n	80187e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	2b09      	cmp	r3, #9
 80187e4:	d173      	bne.n	80188ce <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80187e6:	68f8      	ldr	r0, [r7, #12]
 80187e8:	f001 f83c 	bl	8019864 <ADC_Enable>
 80187ec:	4603      	mov	r3, r0
 80187ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80187f0:	7dfb      	ldrb	r3, [r7, #23]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d166      	bne.n	80188c4 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80187fe:	f023 0301 	bic.w	r3, r3, #1
 8018802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	4a37      	ldr	r2, [pc, #220]	; (80188ec <HAL_ADC_Start_DMA+0x178>)
 8018810:	4293      	cmp	r3, r2
 8018812:	d002      	beq.n	801881a <HAL_ADC_Start_DMA+0xa6>
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	e001      	b.n	801881e <HAL_ADC_Start_DMA+0xaa>
 801881a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801881e:	68fa      	ldr	r2, [r7, #12]
 8018820:	6812      	ldr	r2, [r2, #0]
 8018822:	4293      	cmp	r3, r2
 8018824:	d002      	beq.n	801882c <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018826:	693b      	ldr	r3, [r7, #16]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d105      	bne.n	8018838 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018830:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801883c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018840:	2b00      	cmp	r3, #0
 8018842:	d006      	beq.n	8018852 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018848:	f023 0206 	bic.w	r2, r3, #6
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	661a      	str	r2, [r3, #96]	; 0x60
 8018850:	e002      	b.n	8018858 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	2200      	movs	r2, #0
 8018856:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801885c:	4a27      	ldr	r2, [pc, #156]	; (80188fc <HAL_ADC_Start_DMA+0x188>)
 801885e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018864:	4a26      	ldr	r2, [pc, #152]	; (8018900 <HAL_ADC_Start_DMA+0x18c>)
 8018866:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801886c:	4a25      	ldr	r2, [pc, #148]	; (8018904 <HAL_ADC_Start_DMA+0x190>)
 801886e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	221c      	movs	r2, #28
 8018876:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	2200      	movs	r2, #0
 801887c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	685a      	ldr	r2, [r3, #4]
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	f042 0210 	orr.w	r2, r2, #16
 801888e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	68da      	ldr	r2, [r3, #12]
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	f042 0201 	orr.w	r2, r2, #1
 801889e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	3340      	adds	r3, #64	; 0x40
 80188aa:	4619      	mov	r1, r3
 80188ac:	68ba      	ldr	r2, [r7, #8]
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	f001 fcb4 	bl	801a21c <HAL_DMA_Start_IT>
 80188b4:	4603      	mov	r3, r0
 80188b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	4618      	mov	r0, r3
 80188be:	f7ff fb51 	bl	8017f64 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80188c2:	e00d      	b.n	80188e0 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	2200      	movs	r2, #0
 80188c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80188cc:	e008      	b.n	80188e0 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80188ce:	2301      	movs	r3, #1
 80188d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	2200      	movs	r2, #0
 80188d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80188da:	e001      	b.n	80188e0 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80188dc:	2302      	movs	r3, #2
 80188de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80188e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80188e2:	4618      	mov	r0, r3
 80188e4:	3718      	adds	r7, #24
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bd80      	pop	{r7, pc}
 80188ea:	bf00      	nop
 80188ec:	50000100 	.word	0x50000100
 80188f0:	50000300 	.word	0x50000300
 80188f4:	50000700 	.word	0x50000700
 80188f8:	50000400 	.word	0x50000400
 80188fc:	080199e7 	.word	0x080199e7
 8018900:	08019abf 	.word	0x08019abf
 8018904:	08019adb 	.word	0x08019adb

08018908 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b084      	sub	sp, #16
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018916:	2b01      	cmp	r3, #1
 8018918:	d101      	bne.n	801891e <HAL_ADC_Stop_DMA+0x16>
 801891a:	2302      	movs	r3, #2
 801891c:	e051      	b.n	80189c2 <HAL_ADC_Stop_DMA+0xba>
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2201      	movs	r2, #1
 8018922:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8018926:	2103      	movs	r1, #3
 8018928:	6878      	ldr	r0, [r7, #4]
 801892a:	f000 fedf 	bl	80196ec <ADC_ConversionStop>
 801892e:	4603      	mov	r3, r0
 8018930:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8018932:	7bfb      	ldrb	r3, [r7, #15]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d13f      	bne.n	80189b8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	68da      	ldr	r2, [r3, #12]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	f022 0201 	bic.w	r2, r2, #1
 8018946:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801894c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018950:	b2db      	uxtb	r3, r3
 8018952:	2b02      	cmp	r3, #2
 8018954:	d10f      	bne.n	8018976 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801895a:	4618      	mov	r0, r3
 801895c:	f001 fcd9 	bl	801a312 <HAL_DMA_Abort>
 8018960:	4603      	mov	r3, r0
 8018962:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8018964:	7bfb      	ldrb	r3, [r7, #15]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d005      	beq.n	8018976 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801896e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	685a      	ldr	r2, [r3, #4]
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	f022 0210 	bic.w	r2, r2, #16
 8018984:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8018986:	7bfb      	ldrb	r3, [r7, #15]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d105      	bne.n	8018998 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 801898c:	6878      	ldr	r0, [r7, #4]
 801898e:	f000 ffcb 	bl	8019928 <ADC_Disable>
 8018992:	4603      	mov	r3, r0
 8018994:	73fb      	strb	r3, [r7, #15]
 8018996:	e002      	b.n	801899e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	f000 ffc5 	bl	8019928 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801899e:	7bfb      	ldrb	r3, [r7, #15]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d109      	bne.n	80189b8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80189ac:	f023 0301 	bic.w	r3, r3, #1
 80189b0:	f043 0201 	orr.w	r2, r3, #1
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	2200      	movs	r2, #0
 80189bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80189c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	3710      	adds	r7, #16
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}

080189ca <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80189ca:	b480      	push	{r7}
 80189cc:	b083      	sub	sp, #12
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80189d8:	4618      	mov	r0, r3
 80189da:	370c      	adds	r7, #12
 80189dc:	46bd      	mov	sp, r7
 80189de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e2:	4770      	bx	lr

080189e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b08a      	sub	sp, #40	; 0x28
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80189ec:	2300      	movs	r3, #0
 80189ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018a08:	d004      	beq.n	8018a14 <HAL_ADC_IRQHandler+0x30>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	4a87      	ldr	r2, [pc, #540]	; (8018c2c <HAL_ADC_IRQHandler+0x248>)
 8018a10:	4293      	cmp	r3, r2
 8018a12:	d101      	bne.n	8018a18 <HAL_ADC_IRQHandler+0x34>
 8018a14:	4b86      	ldr	r3, [pc, #536]	; (8018c30 <HAL_ADC_IRQHandler+0x24c>)
 8018a16:	e000      	b.n	8018a1a <HAL_ADC_IRQHandler+0x36>
 8018a18:	4b86      	ldr	r3, [pc, #536]	; (8018c34 <HAL_ADC_IRQHandler+0x250>)
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f7ff f9ea 	bl	8017df4 <LL_ADC_GetMultimode>
 8018a20:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8018a22:	69fb      	ldr	r3, [r7, #28]
 8018a24:	f003 0302 	and.w	r3, r3, #2
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d017      	beq.n	8018a5c <HAL_ADC_IRQHandler+0x78>
 8018a2c:	69bb      	ldr	r3, [r7, #24]
 8018a2e:	f003 0302 	and.w	r3, r3, #2
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d012      	beq.n	8018a5c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a3a:	f003 0310 	and.w	r3, r3, #16
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d105      	bne.n	8018a4e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a46:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	f001 f93a 	bl	8019cc8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	2202      	movs	r2, #2
 8018a5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8018a5c:	69fb      	ldr	r3, [r7, #28]
 8018a5e:	f003 0304 	and.w	r3, r3, #4
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d004      	beq.n	8018a70 <HAL_ADC_IRQHandler+0x8c>
 8018a66:	69bb      	ldr	r3, [r7, #24]
 8018a68:	f003 0304 	and.w	r3, r3, #4
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d10a      	bne.n	8018a86 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8018a70:	69fb      	ldr	r3, [r7, #28]
 8018a72:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	f000 8085 	beq.w	8018b86 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8018a7c:	69bb      	ldr	r3, [r7, #24]
 8018a7e:	f003 0308 	and.w	r3, r3, #8
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d07f      	beq.n	8018b86 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a8a:	f003 0310 	and.w	r3, r3, #16
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d105      	bne.n	8018a9e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f7ff f900 	bl	8017ca8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d064      	beq.n	8018b78 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	4a5e      	ldr	r2, [pc, #376]	; (8018c2c <HAL_ADC_IRQHandler+0x248>)
 8018ab4:	4293      	cmp	r3, r2
 8018ab6:	d002      	beq.n	8018abe <HAL_ADC_IRQHandler+0xda>
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	e001      	b.n	8018ac2 <HAL_ADC_IRQHandler+0xde>
 8018abe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018ac2:	687a      	ldr	r2, [r7, #4]
 8018ac4:	6812      	ldr	r2, [r2, #0]
 8018ac6:	4293      	cmp	r3, r2
 8018ac8:	d008      	beq.n	8018adc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018aca:	697b      	ldr	r3, [r7, #20]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d005      	beq.n	8018adc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018ad0:	697b      	ldr	r3, [r7, #20]
 8018ad2:	2b05      	cmp	r3, #5
 8018ad4:	d002      	beq.n	8018adc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018ad6:	697b      	ldr	r3, [r7, #20]
 8018ad8:	2b09      	cmp	r3, #9
 8018ada:	d104      	bne.n	8018ae6 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	68db      	ldr	r3, [r3, #12]
 8018ae2:	623b      	str	r3, [r7, #32]
 8018ae4:	e00d      	b.n	8018b02 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	4a50      	ldr	r2, [pc, #320]	; (8018c2c <HAL_ADC_IRQHandler+0x248>)
 8018aec:	4293      	cmp	r3, r2
 8018aee:	d002      	beq.n	8018af6 <HAL_ADC_IRQHandler+0x112>
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	e001      	b.n	8018afa <HAL_ADC_IRQHandler+0x116>
 8018af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018afa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8018afc:	693b      	ldr	r3, [r7, #16]
 8018afe:	68db      	ldr	r3, [r3, #12]
 8018b00:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8018b02:	6a3b      	ldr	r3, [r7, #32]
 8018b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d135      	bne.n	8018b78 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	f003 0308 	and.w	r3, r3, #8
 8018b16:	2b08      	cmp	r3, #8
 8018b18:	d12e      	bne.n	8018b78 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7ff fa48 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 8018b24:	4603      	mov	r3, r0
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d11a      	bne.n	8018b60 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	685a      	ldr	r2, [r3, #4]
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	f022 020c 	bic.w	r2, r2, #12
 8018b38:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d112      	bne.n	8018b78 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b56:	f043 0201 	orr.w	r2, r3, #1
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8018b5e:	e00b      	b.n	8018b78 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b64:	f043 0210 	orr.w	r2, r3, #16
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018b70:	f043 0201 	orr.w	r2, r3, #1
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f7ef fca5 	bl	80084c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	220c      	movs	r2, #12
 8018b84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8018b86:	69fb      	ldr	r3, [r7, #28]
 8018b88:	f003 0320 	and.w	r3, r3, #32
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d004      	beq.n	8018b9a <HAL_ADC_IRQHandler+0x1b6>
 8018b90:	69bb      	ldr	r3, [r7, #24]
 8018b92:	f003 0320 	and.w	r3, r3, #32
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d10b      	bne.n	8018bb2 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8018b9a:	69fb      	ldr	r3, [r7, #28]
 8018b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	f000 80a1 	beq.w	8018ce8 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8018ba6:	69bb      	ldr	r3, [r7, #24]
 8018ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	f000 809b 	beq.w	8018ce8 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bb6:	f003 0310 	and.w	r3, r3, #16
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d105      	bne.n	8018bca <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bc2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7ff f8a9 	bl	8017d26 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8018bd4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	4618      	mov	r0, r3
 8018bdc:	f7ff f864 	bl	8017ca8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8018be0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	4a11      	ldr	r2, [pc, #68]	; (8018c2c <HAL_ADC_IRQHandler+0x248>)
 8018be8:	4293      	cmp	r3, r2
 8018bea:	d002      	beq.n	8018bf2 <HAL_ADC_IRQHandler+0x20e>
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	e001      	b.n	8018bf6 <HAL_ADC_IRQHandler+0x212>
 8018bf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018bf6:	687a      	ldr	r2, [r7, #4]
 8018bf8:	6812      	ldr	r2, [r2, #0]
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	d008      	beq.n	8018c10 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018bfe:	697b      	ldr	r3, [r7, #20]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d005      	beq.n	8018c10 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8018c04:	697b      	ldr	r3, [r7, #20]
 8018c06:	2b06      	cmp	r3, #6
 8018c08:	d002      	beq.n	8018c10 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	2b07      	cmp	r3, #7
 8018c0e:	d104      	bne.n	8018c1a <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	68db      	ldr	r3, [r3, #12]
 8018c16:	623b      	str	r3, [r7, #32]
 8018c18:	e014      	b.n	8018c44 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	4a03      	ldr	r2, [pc, #12]	; (8018c2c <HAL_ADC_IRQHandler+0x248>)
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d009      	beq.n	8018c38 <HAL_ADC_IRQHandler+0x254>
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	e008      	b.n	8018c3c <HAL_ADC_IRQHandler+0x258>
 8018c2a:	bf00      	nop
 8018c2c:	50000100 	.word	0x50000100
 8018c30:	50000300 	.word	0x50000300
 8018c34:	50000700 	.word	0x50000700
 8018c38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018c3c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8018c3e:	693b      	ldr	r3, [r7, #16]
 8018c40:	68db      	ldr	r3, [r3, #12]
 8018c42:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d047      	beq.n	8018cda <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8018c4a:	6a3b      	ldr	r3, [r7, #32]
 8018c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d007      	beq.n	8018c64 <HAL_ADC_IRQHandler+0x280>
 8018c54:	68bb      	ldr	r3, [r7, #8]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d03f      	beq.n	8018cda <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8018c5a:	6a3b      	ldr	r3, [r7, #32]
 8018c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d13a      	bne.n	8018cda <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c6e:	2b40      	cmp	r3, #64	; 0x40
 8018c70:	d133      	bne.n	8018cda <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8018c72:	6a3b      	ldr	r3, [r7, #32]
 8018c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d12e      	bne.n	8018cda <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7ff f9be 	bl	8018002 <LL_ADC_INJ_IsConversionOngoing>
 8018c86:	4603      	mov	r3, r0
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d11a      	bne.n	8018cc2 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	685a      	ldr	r2, [r3, #4]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018c9a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ca0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d112      	bne.n	8018cda <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cb8:	f043 0201 	orr.w	r2, r3, #1
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8018cc0:	e00b      	b.n	8018cda <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cc6:	f043 0210 	orr.w	r2, r3, #16
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018cd2:	f043 0201 	orr.w	r2, r3, #1
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8018cda:	6878      	ldr	r0, [r7, #4]
 8018cdc:	f000 ffcc 	bl	8019c78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	2260      	movs	r2, #96	; 0x60
 8018ce6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8018ce8:	69fb      	ldr	r3, [r7, #28]
 8018cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d011      	beq.n	8018d16 <HAL_ADC_IRQHandler+0x332>
 8018cf2:	69bb      	ldr	r3, [r7, #24]
 8018cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d00c      	beq.n	8018d16 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8018d08:	6878      	ldr	r0, [r7, #4]
 8018d0a:	f000 f8af 	bl	8018e6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	2280      	movs	r2, #128	; 0x80
 8018d14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8018d16:	69fb      	ldr	r3, [r7, #28]
 8018d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d012      	beq.n	8018d46 <HAL_ADC_IRQHandler+0x362>
 8018d20:	69bb      	ldr	r3, [r7, #24]
 8018d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d00d      	beq.n	8018d46 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8018d36:	6878      	ldr	r0, [r7, #4]
 8018d38:	f000 ffb2 	bl	8019ca0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018d44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8018d46:	69fb      	ldr	r3, [r7, #28]
 8018d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d012      	beq.n	8018d76 <HAL_ADC_IRQHandler+0x392>
 8018d50:	69bb      	ldr	r3, [r7, #24]
 8018d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d00d      	beq.n	8018d76 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8018d66:	6878      	ldr	r0, [r7, #4]
 8018d68:	f000 ffa4 	bl	8019cb4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018d74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8018d76:	69fb      	ldr	r3, [r7, #28]
 8018d78:	f003 0310 	and.w	r3, r3, #16
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d043      	beq.n	8018e08 <HAL_ADC_IRQHandler+0x424>
 8018d80:	69bb      	ldr	r3, [r7, #24]
 8018d82:	f003 0310 	and.w	r3, r3, #16
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d03e      	beq.n	8018e08 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d102      	bne.n	8018d98 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8018d92:	2301      	movs	r3, #1
 8018d94:	627b      	str	r3, [r7, #36]	; 0x24
 8018d96:	e021      	b.n	8018ddc <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8018d98:	697b      	ldr	r3, [r7, #20]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d015      	beq.n	8018dca <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018da6:	d004      	beq.n	8018db2 <HAL_ADC_IRQHandler+0x3ce>
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	4a27      	ldr	r2, [pc, #156]	; (8018e4c <HAL_ADC_IRQHandler+0x468>)
 8018dae:	4293      	cmp	r3, r2
 8018db0:	d101      	bne.n	8018db6 <HAL_ADC_IRQHandler+0x3d2>
 8018db2:	4b27      	ldr	r3, [pc, #156]	; (8018e50 <HAL_ADC_IRQHandler+0x46c>)
 8018db4:	e000      	b.n	8018db8 <HAL_ADC_IRQHandler+0x3d4>
 8018db6:	4b27      	ldr	r3, [pc, #156]	; (8018e54 <HAL_ADC_IRQHandler+0x470>)
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7ff f829 	bl	8017e10 <LL_ADC_GetMultiDMATransfer>
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d00b      	beq.n	8018ddc <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018dc4:	2301      	movs	r3, #1
 8018dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8018dc8:	e008      	b.n	8018ddc <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	68db      	ldr	r3, [r3, #12]
 8018dd0:	f003 0301 	and.w	r3, r3, #1
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d001      	beq.n	8018ddc <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018dd8:	2301      	movs	r3, #1
 8018dda:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8018ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	d10e      	bne.n	8018e00 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018de6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018df2:	f043 0202 	orr.w	r2, r3, #2
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8018dfa:	6878      	ldr	r0, [r7, #4]
 8018dfc:	f000 f840 	bl	8018e80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	2210      	movs	r2, #16
 8018e06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8018e08:	69fb      	ldr	r3, [r7, #28]
 8018e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d018      	beq.n	8018e44 <HAL_ADC_IRQHandler+0x460>
 8018e12:	69bb      	ldr	r3, [r7, #24]
 8018e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d013      	beq.n	8018e44 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e20:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018e2c:	f043 0208 	orr.w	r2, r3, #8
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018e3c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8018e3e:	6878      	ldr	r0, [r7, #4]
 8018e40:	f000 ff24 	bl	8019c8c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8018e44:	bf00      	nop
 8018e46:	3728      	adds	r7, #40	; 0x28
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}
 8018e4c:	50000100 	.word	0x50000100
 8018e50:	50000300 	.word	0x50000300
 8018e54:	50000700 	.word	0x50000700

08018e58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8018e58:	b480      	push	{r7}
 8018e5a:	b083      	sub	sp, #12
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8018e60:	bf00      	nop
 8018e62:	370c      	adds	r7, #12
 8018e64:	46bd      	mov	sp, r7
 8018e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6a:	4770      	bx	lr

08018e6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8018e6c:	b480      	push	{r7}
 8018e6e:	b083      	sub	sp, #12
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8018e74:	bf00      	nop
 8018e76:	370c      	adds	r7, #12
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7e:	4770      	bx	lr

08018e80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8018e80:	b480      	push	{r7}
 8018e82:	b083      	sub	sp, #12
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8018e88:	bf00      	nop
 8018e8a:	370c      	adds	r7, #12
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e92:	4770      	bx	lr

08018e94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b0b6      	sub	sp, #216	; 0xd8
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
 8018e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018eae:	2b01      	cmp	r3, #1
 8018eb0:	d102      	bne.n	8018eb8 <HAL_ADC_ConfigChannel+0x24>
 8018eb2:	2302      	movs	r3, #2
 8018eb4:	f000 bc04 	b.w	80196c0 <HAL_ADC_ConfigChannel+0x82c>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2201      	movs	r2, #1
 8018ebc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f7ff f875 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 8018eca:	4603      	mov	r3, r0
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	f040 83e8 	bne.w	80196a2 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	6818      	ldr	r0, [r3, #0]
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	6859      	ldr	r1, [r3, #4]
 8018eda:	683b      	ldr	r3, [r7, #0]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	461a      	mov	r2, r3
 8018ee0:	f7fe fef5 	bl	8017cce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	4618      	mov	r0, r3
 8018eea:	f7ff f863 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 8018eee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	f7ff f883 	bl	8018002 <LL_ADC_INJ_IsConversionOngoing>
 8018efc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8018f00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	f040 81d9 	bne.w	80192bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8018f0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	f040 81d4 	bne.w	80192bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	689b      	ldr	r3, [r3, #8]
 8018f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018f1c:	d10f      	bne.n	8018f3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	6818      	ldr	r0, [r3, #0]
 8018f22:	683b      	ldr	r3, [r7, #0]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	2200      	movs	r2, #0
 8018f28:	4619      	mov	r1, r3
 8018f2a:	f7fe ff0f 	bl	8017d4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7fe fea3 	bl	8017c82 <LL_ADC_SetSamplingTimeCommonConfig>
 8018f3c:	e00e      	b.n	8018f5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	6818      	ldr	r0, [r3, #0]
 8018f42:	683b      	ldr	r3, [r7, #0]
 8018f44:	6819      	ldr	r1, [r3, #0]
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	689b      	ldr	r3, [r3, #8]
 8018f4a:	461a      	mov	r2, r3
 8018f4c:	f7fe fefe 	bl	8017d4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	2100      	movs	r1, #0
 8018f56:	4618      	mov	r0, r3
 8018f58:	f7fe fe93 	bl	8017c82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	695a      	ldr	r2, [r3, #20]
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	68db      	ldr	r3, [r3, #12]
 8018f66:	08db      	lsrs	r3, r3, #3
 8018f68:	f003 0303 	and.w	r3, r3, #3
 8018f6c:	005b      	lsls	r3, r3, #1
 8018f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8018f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	691b      	ldr	r3, [r3, #16]
 8018f7a:	2b04      	cmp	r3, #4
 8018f7c:	d022      	beq.n	8018fc4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	6818      	ldr	r0, [r3, #0]
 8018f82:	683b      	ldr	r3, [r7, #0]
 8018f84:	6919      	ldr	r1, [r3, #16]
 8018f86:	683b      	ldr	r3, [r7, #0]
 8018f88:	681a      	ldr	r2, [r3, #0]
 8018f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018f8e:	f7fe fded 	bl	8017b6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	6818      	ldr	r0, [r3, #0]
 8018f96:	683b      	ldr	r3, [r7, #0]
 8018f98:	6919      	ldr	r1, [r3, #16]
 8018f9a:	683b      	ldr	r3, [r7, #0]
 8018f9c:	699b      	ldr	r3, [r3, #24]
 8018f9e:	461a      	mov	r2, r3
 8018fa0:	f7fe fe39 	bl	8017c16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6818      	ldr	r0, [r3, #0]
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	6919      	ldr	r1, [r3, #16]
 8018fac:	683b      	ldr	r3, [r7, #0]
 8018fae:	7f1b      	ldrb	r3, [r3, #28]
 8018fb0:	2b01      	cmp	r3, #1
 8018fb2:	d102      	bne.n	8018fba <HAL_ADC_ConfigChannel+0x126>
 8018fb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018fb8:	e000      	b.n	8018fbc <HAL_ADC_ConfigChannel+0x128>
 8018fba:	2300      	movs	r3, #0
 8018fbc:	461a      	mov	r2, r3
 8018fbe:	f7fe fe45 	bl	8017c4c <LL_ADC_SetOffsetSaturation>
 8018fc2:	e17b      	b.n	80192bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	2100      	movs	r1, #0
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f7fe fdf2 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d10a      	bne.n	8018ff0 <HAL_ADC_ConfigChannel+0x15c>
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	2100      	movs	r1, #0
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7fe fde7 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	0e9b      	lsrs	r3, r3, #26
 8018fea:	f003 021f 	and.w	r2, r3, #31
 8018fee:	e01e      	b.n	801902e <HAL_ADC_ConfigChannel+0x19a>
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	2100      	movs	r1, #0
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7fe fddc 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019006:	fa93 f3a3 	rbit	r3, r3
 801900a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801900e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8019016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801901a:	2b00      	cmp	r3, #0
 801901c:	d101      	bne.n	8019022 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801901e:	2320      	movs	r3, #32
 8019020:	e004      	b.n	801902c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8019022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019026:	fab3 f383 	clz	r3, r3
 801902a:	b2db      	uxtb	r3, r3
 801902c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801902e:	683b      	ldr	r3, [r7, #0]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019036:	2b00      	cmp	r3, #0
 8019038:	d105      	bne.n	8019046 <HAL_ADC_ConfigChannel+0x1b2>
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	0e9b      	lsrs	r3, r3, #26
 8019040:	f003 031f 	and.w	r3, r3, #31
 8019044:	e018      	b.n	8019078 <HAL_ADC_ConfigChannel+0x1e4>
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801904e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019052:	fa93 f3a3 	rbit	r3, r3
 8019056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801905a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801905e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8019062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019066:	2b00      	cmp	r3, #0
 8019068:	d101      	bne.n	801906e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801906a:	2320      	movs	r3, #32
 801906c:	e004      	b.n	8019078 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801906e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019072:	fab3 f383 	clz	r3, r3
 8019076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8019078:	429a      	cmp	r2, r3
 801907a:	d106      	bne.n	801908a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2200      	movs	r2, #0
 8019082:	2100      	movs	r1, #0
 8019084:	4618      	mov	r0, r3
 8019086:	f7fe fdab 	bl	8017be0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	2101      	movs	r1, #1
 8019090:	4618      	mov	r0, r3
 8019092:	f7fe fd8f 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 8019096:	4603      	mov	r3, r0
 8019098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801909c:	2b00      	cmp	r3, #0
 801909e:	d10a      	bne.n	80190b6 <HAL_ADC_ConfigChannel+0x222>
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	2101      	movs	r1, #1
 80190a6:	4618      	mov	r0, r3
 80190a8:	f7fe fd84 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 80190ac:	4603      	mov	r3, r0
 80190ae:	0e9b      	lsrs	r3, r3, #26
 80190b0:	f003 021f 	and.w	r2, r3, #31
 80190b4:	e01e      	b.n	80190f4 <HAL_ADC_ConfigChannel+0x260>
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	2101      	movs	r1, #1
 80190bc:	4618      	mov	r0, r3
 80190be:	f7fe fd79 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 80190c2:	4603      	mov	r3, r0
 80190c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80190c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80190cc:	fa93 f3a3 	rbit	r3, r3
 80190d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80190d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80190d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80190dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d101      	bne.n	80190e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80190e4:	2320      	movs	r3, #32
 80190e6:	e004      	b.n	80190f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80190e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80190ec:	fab3 f383 	clz	r3, r3
 80190f0:	b2db      	uxtb	r3, r3
 80190f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80190f4:	683b      	ldr	r3, [r7, #0]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d105      	bne.n	801910c <HAL_ADC_ConfigChannel+0x278>
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	0e9b      	lsrs	r3, r3, #26
 8019106:	f003 031f 	and.w	r3, r3, #31
 801910a:	e018      	b.n	801913e <HAL_ADC_ConfigChannel+0x2aa>
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019118:	fa93 f3a3 	rbit	r3, r3
 801911c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8019120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8019128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801912c:	2b00      	cmp	r3, #0
 801912e:	d101      	bne.n	8019134 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8019130:	2320      	movs	r3, #32
 8019132:	e004      	b.n	801913e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8019134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019138:	fab3 f383 	clz	r3, r3
 801913c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801913e:	429a      	cmp	r2, r3
 8019140:	d106      	bne.n	8019150 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	2200      	movs	r2, #0
 8019148:	2101      	movs	r1, #1
 801914a:	4618      	mov	r0, r3
 801914c:	f7fe fd48 	bl	8017be0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	2102      	movs	r1, #2
 8019156:	4618      	mov	r0, r3
 8019158:	f7fe fd2c 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 801915c:	4603      	mov	r3, r0
 801915e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019162:	2b00      	cmp	r3, #0
 8019164:	d10a      	bne.n	801917c <HAL_ADC_ConfigChannel+0x2e8>
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	2102      	movs	r1, #2
 801916c:	4618      	mov	r0, r3
 801916e:	f7fe fd21 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 8019172:	4603      	mov	r3, r0
 8019174:	0e9b      	lsrs	r3, r3, #26
 8019176:	f003 021f 	and.w	r2, r3, #31
 801917a:	e01e      	b.n	80191ba <HAL_ADC_ConfigChannel+0x326>
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	2102      	movs	r1, #2
 8019182:	4618      	mov	r0, r3
 8019184:	f7fe fd16 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 8019188:	4603      	mov	r3, r0
 801918a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801918e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019192:	fa93 f3a3 	rbit	r3, r3
 8019196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801919a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801919e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80191a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d101      	bne.n	80191ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80191aa:	2320      	movs	r3, #32
 80191ac:	e004      	b.n	80191b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80191ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80191b2:	fab3 f383 	clz	r3, r3
 80191b6:	b2db      	uxtb	r3, r3
 80191b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80191ba:	683b      	ldr	r3, [r7, #0]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d105      	bne.n	80191d2 <HAL_ADC_ConfigChannel+0x33e>
 80191c6:	683b      	ldr	r3, [r7, #0]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	0e9b      	lsrs	r3, r3, #26
 80191cc:	f003 031f 	and.w	r3, r3, #31
 80191d0:	e016      	b.n	8019200 <HAL_ADC_ConfigChannel+0x36c>
 80191d2:	683b      	ldr	r3, [r7, #0]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80191da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80191de:	fa93 f3a3 	rbit	r3, r3
 80191e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80191e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80191e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80191ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d101      	bne.n	80191f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80191f2:	2320      	movs	r3, #32
 80191f4:	e004      	b.n	8019200 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80191f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80191fa:	fab3 f383 	clz	r3, r3
 80191fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8019200:	429a      	cmp	r2, r3
 8019202:	d106      	bne.n	8019212 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	2200      	movs	r2, #0
 801920a:	2102      	movs	r1, #2
 801920c:	4618      	mov	r0, r3
 801920e:	f7fe fce7 	bl	8017be0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	2103      	movs	r1, #3
 8019218:	4618      	mov	r0, r3
 801921a:	f7fe fccb 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 801921e:	4603      	mov	r3, r0
 8019220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019224:	2b00      	cmp	r3, #0
 8019226:	d10a      	bne.n	801923e <HAL_ADC_ConfigChannel+0x3aa>
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	2103      	movs	r1, #3
 801922e:	4618      	mov	r0, r3
 8019230:	f7fe fcc0 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 8019234:	4603      	mov	r3, r0
 8019236:	0e9b      	lsrs	r3, r3, #26
 8019238:	f003 021f 	and.w	r2, r3, #31
 801923c:	e017      	b.n	801926e <HAL_ADC_ConfigChannel+0x3da>
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	2103      	movs	r1, #3
 8019244:	4618      	mov	r0, r3
 8019246:	f7fe fcb5 	bl	8017bb4 <LL_ADC_GetOffsetChannel>
 801924a:	4603      	mov	r3, r0
 801924c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801924e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019250:	fa93 f3a3 	rbit	r3, r3
 8019254:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8019256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019258:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801925a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801925c:	2b00      	cmp	r3, #0
 801925e:	d101      	bne.n	8019264 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8019260:	2320      	movs	r3, #32
 8019262:	e003      	b.n	801926c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8019264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019266:	fab3 f383 	clz	r3, r3
 801926a:	b2db      	uxtb	r3, r3
 801926c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801926e:	683b      	ldr	r3, [r7, #0]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019276:	2b00      	cmp	r3, #0
 8019278:	d105      	bne.n	8019286 <HAL_ADC_ConfigChannel+0x3f2>
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	0e9b      	lsrs	r3, r3, #26
 8019280:	f003 031f 	and.w	r3, r3, #31
 8019284:	e011      	b.n	80192aa <HAL_ADC_ConfigChannel+0x416>
 8019286:	683b      	ldr	r3, [r7, #0]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801928c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801928e:	fa93 f3a3 	rbit	r3, r3
 8019292:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8019294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019296:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8019298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801929a:	2b00      	cmp	r3, #0
 801929c:	d101      	bne.n	80192a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801929e:	2320      	movs	r3, #32
 80192a0:	e003      	b.n	80192aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80192a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192a4:	fab3 f383 	clz	r3, r3
 80192a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d106      	bne.n	80192bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	2200      	movs	r2, #0
 80192b4:	2103      	movs	r1, #3
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7fe fc92 	bl	8017be0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7fe fe29 	bl	8017f18 <LL_ADC_IsEnabled>
 80192c6:	4603      	mov	r3, r0
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	f040 813d 	bne.w	8019548 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	6818      	ldr	r0, [r3, #0]
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	6819      	ldr	r1, [r3, #0]
 80192d6:	683b      	ldr	r3, [r7, #0]
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	461a      	mov	r2, r3
 80192dc:	f7fe fd62 	bl	8017da4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	68db      	ldr	r3, [r3, #12]
 80192e4:	4aa2      	ldr	r2, [pc, #648]	; (8019570 <HAL_ADC_ConfigChannel+0x6dc>)
 80192e6:	4293      	cmp	r3, r2
 80192e8:	f040 812e 	bne.w	8019548 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d10b      	bne.n	8019314 <HAL_ADC_ConfigChannel+0x480>
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	0e9b      	lsrs	r3, r3, #26
 8019302:	3301      	adds	r3, #1
 8019304:	f003 031f 	and.w	r3, r3, #31
 8019308:	2b09      	cmp	r3, #9
 801930a:	bf94      	ite	ls
 801930c:	2301      	movls	r3, #1
 801930e:	2300      	movhi	r3, #0
 8019310:	b2db      	uxtb	r3, r3
 8019312:	e019      	b.n	8019348 <HAL_ADC_ConfigChannel+0x4b4>
 8019314:	683b      	ldr	r3, [r7, #0]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801931a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801931c:	fa93 f3a3 	rbit	r3, r3
 8019320:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8019322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019324:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8019326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019328:	2b00      	cmp	r3, #0
 801932a:	d101      	bne.n	8019330 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801932c:	2320      	movs	r3, #32
 801932e:	e003      	b.n	8019338 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8019330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019332:	fab3 f383 	clz	r3, r3
 8019336:	b2db      	uxtb	r3, r3
 8019338:	3301      	adds	r3, #1
 801933a:	f003 031f 	and.w	r3, r3, #31
 801933e:	2b09      	cmp	r3, #9
 8019340:	bf94      	ite	ls
 8019342:	2301      	movls	r3, #1
 8019344:	2300      	movhi	r3, #0
 8019346:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019348:	2b00      	cmp	r3, #0
 801934a:	d079      	beq.n	8019440 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801934c:	683b      	ldr	r3, [r7, #0]
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019354:	2b00      	cmp	r3, #0
 8019356:	d107      	bne.n	8019368 <HAL_ADC_ConfigChannel+0x4d4>
 8019358:	683b      	ldr	r3, [r7, #0]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	0e9b      	lsrs	r3, r3, #26
 801935e:	3301      	adds	r3, #1
 8019360:	069b      	lsls	r3, r3, #26
 8019362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019366:	e015      	b.n	8019394 <HAL_ADC_ConfigChannel+0x500>
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801936e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019370:	fa93 f3a3 	rbit	r3, r3
 8019374:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8019376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019378:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801937a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801937c:	2b00      	cmp	r3, #0
 801937e:	d101      	bne.n	8019384 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8019380:	2320      	movs	r3, #32
 8019382:	e003      	b.n	801938c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8019384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019386:	fab3 f383 	clz	r3, r3
 801938a:	b2db      	uxtb	r3, r3
 801938c:	3301      	adds	r3, #1
 801938e:	069b      	lsls	r3, r3, #26
 8019390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801939c:	2b00      	cmp	r3, #0
 801939e:	d109      	bne.n	80193b4 <HAL_ADC_ConfigChannel+0x520>
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	0e9b      	lsrs	r3, r3, #26
 80193a6:	3301      	adds	r3, #1
 80193a8:	f003 031f 	and.w	r3, r3, #31
 80193ac:	2101      	movs	r1, #1
 80193ae:	fa01 f303 	lsl.w	r3, r1, r3
 80193b2:	e017      	b.n	80193e4 <HAL_ADC_ConfigChannel+0x550>
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80193ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193bc:	fa93 f3a3 	rbit	r3, r3
 80193c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80193c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80193c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d101      	bne.n	80193d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80193cc:	2320      	movs	r3, #32
 80193ce:	e003      	b.n	80193d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80193d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80193d2:	fab3 f383 	clz	r3, r3
 80193d6:	b2db      	uxtb	r3, r3
 80193d8:	3301      	adds	r3, #1
 80193da:	f003 031f 	and.w	r3, r3, #31
 80193de:	2101      	movs	r1, #1
 80193e0:	fa01 f303 	lsl.w	r3, r1, r3
 80193e4:	ea42 0103 	orr.w	r1, r2, r3
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d10a      	bne.n	801940a <HAL_ADC_ConfigChannel+0x576>
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	0e9b      	lsrs	r3, r3, #26
 80193fa:	3301      	adds	r3, #1
 80193fc:	f003 021f 	and.w	r2, r3, #31
 8019400:	4613      	mov	r3, r2
 8019402:	005b      	lsls	r3, r3, #1
 8019404:	4413      	add	r3, r2
 8019406:	051b      	lsls	r3, r3, #20
 8019408:	e018      	b.n	801943c <HAL_ADC_ConfigChannel+0x5a8>
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019412:	fa93 f3a3 	rbit	r3, r3
 8019416:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8019418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801941a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801941c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801941e:	2b00      	cmp	r3, #0
 8019420:	d101      	bne.n	8019426 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8019422:	2320      	movs	r3, #32
 8019424:	e003      	b.n	801942e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8019426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019428:	fab3 f383 	clz	r3, r3
 801942c:	b2db      	uxtb	r3, r3
 801942e:	3301      	adds	r3, #1
 8019430:	f003 021f 	and.w	r2, r3, #31
 8019434:	4613      	mov	r3, r2
 8019436:	005b      	lsls	r3, r3, #1
 8019438:	4413      	add	r3, r2
 801943a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801943c:	430b      	orrs	r3, r1
 801943e:	e07e      	b.n	801953e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8019440:	683b      	ldr	r3, [r7, #0]
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019448:	2b00      	cmp	r3, #0
 801944a:	d107      	bne.n	801945c <HAL_ADC_ConfigChannel+0x5c8>
 801944c:	683b      	ldr	r3, [r7, #0]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	0e9b      	lsrs	r3, r3, #26
 8019452:	3301      	adds	r3, #1
 8019454:	069b      	lsls	r3, r3, #26
 8019456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801945a:	e015      	b.n	8019488 <HAL_ADC_ConfigChannel+0x5f4>
 801945c:	683b      	ldr	r3, [r7, #0]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019464:	fa93 f3a3 	rbit	r3, r3
 8019468:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801946c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019470:	2b00      	cmp	r3, #0
 8019472:	d101      	bne.n	8019478 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8019474:	2320      	movs	r3, #32
 8019476:	e003      	b.n	8019480 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8019478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801947a:	fab3 f383 	clz	r3, r3
 801947e:	b2db      	uxtb	r3, r3
 8019480:	3301      	adds	r3, #1
 8019482:	069b      	lsls	r3, r3, #26
 8019484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019490:	2b00      	cmp	r3, #0
 8019492:	d109      	bne.n	80194a8 <HAL_ADC_ConfigChannel+0x614>
 8019494:	683b      	ldr	r3, [r7, #0]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	0e9b      	lsrs	r3, r3, #26
 801949a:	3301      	adds	r3, #1
 801949c:	f003 031f 	and.w	r3, r3, #31
 80194a0:	2101      	movs	r1, #1
 80194a2:	fa01 f303 	lsl.w	r3, r1, r3
 80194a6:	e017      	b.n	80194d8 <HAL_ADC_ConfigChannel+0x644>
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80194ae:	6a3b      	ldr	r3, [r7, #32]
 80194b0:	fa93 f3a3 	rbit	r3, r3
 80194b4:	61fb      	str	r3, [r7, #28]
  return result;
 80194b6:	69fb      	ldr	r3, [r7, #28]
 80194b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80194ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d101      	bne.n	80194c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80194c0:	2320      	movs	r3, #32
 80194c2:	e003      	b.n	80194cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80194c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194c6:	fab3 f383 	clz	r3, r3
 80194ca:	b2db      	uxtb	r3, r3
 80194cc:	3301      	adds	r3, #1
 80194ce:	f003 031f 	and.w	r3, r3, #31
 80194d2:	2101      	movs	r1, #1
 80194d4:	fa01 f303 	lsl.w	r3, r1, r3
 80194d8:	ea42 0103 	orr.w	r1, r2, r3
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d10d      	bne.n	8019504 <HAL_ADC_ConfigChannel+0x670>
 80194e8:	683b      	ldr	r3, [r7, #0]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	0e9b      	lsrs	r3, r3, #26
 80194ee:	3301      	adds	r3, #1
 80194f0:	f003 021f 	and.w	r2, r3, #31
 80194f4:	4613      	mov	r3, r2
 80194f6:	005b      	lsls	r3, r3, #1
 80194f8:	4413      	add	r3, r2
 80194fa:	3b1e      	subs	r3, #30
 80194fc:	051b      	lsls	r3, r3, #20
 80194fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019502:	e01b      	b.n	801953c <HAL_ADC_ConfigChannel+0x6a8>
 8019504:	683b      	ldr	r3, [r7, #0]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	fa93 f3a3 	rbit	r3, r3
 8019510:	613b      	str	r3, [r7, #16]
  return result;
 8019512:	693b      	ldr	r3, [r7, #16]
 8019514:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019516:	69bb      	ldr	r3, [r7, #24]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d101      	bne.n	8019520 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801951c:	2320      	movs	r3, #32
 801951e:	e003      	b.n	8019528 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8019520:	69bb      	ldr	r3, [r7, #24]
 8019522:	fab3 f383 	clz	r3, r3
 8019526:	b2db      	uxtb	r3, r3
 8019528:	3301      	adds	r3, #1
 801952a:	f003 021f 	and.w	r2, r3, #31
 801952e:	4613      	mov	r3, r2
 8019530:	005b      	lsls	r3, r3, #1
 8019532:	4413      	add	r3, r2
 8019534:	3b1e      	subs	r3, #30
 8019536:	051b      	lsls	r3, r3, #20
 8019538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801953c:	430b      	orrs	r3, r1
 801953e:	683a      	ldr	r2, [r7, #0]
 8019540:	6892      	ldr	r2, [r2, #8]
 8019542:	4619      	mov	r1, r3
 8019544:	f7fe fc02 	bl	8017d4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	681a      	ldr	r2, [r3, #0]
 801954c:	4b09      	ldr	r3, [pc, #36]	; (8019574 <HAL_ADC_ConfigChannel+0x6e0>)
 801954e:	4013      	ands	r3, r2
 8019550:	2b00      	cmp	r3, #0
 8019552:	f000 80af 	beq.w	80196b4 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801955e:	d004      	beq.n	801956a <HAL_ADC_ConfigChannel+0x6d6>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	4a04      	ldr	r2, [pc, #16]	; (8019578 <HAL_ADC_ConfigChannel+0x6e4>)
 8019566:	4293      	cmp	r3, r2
 8019568:	d10a      	bne.n	8019580 <HAL_ADC_ConfigChannel+0x6ec>
 801956a:	4b04      	ldr	r3, [pc, #16]	; (801957c <HAL_ADC_ConfigChannel+0x6e8>)
 801956c:	e009      	b.n	8019582 <HAL_ADC_ConfigChannel+0x6ee>
 801956e:	bf00      	nop
 8019570:	407f0000 	.word	0x407f0000
 8019574:	80080000 	.word	0x80080000
 8019578:	50000100 	.word	0x50000100
 801957c:	50000300 	.word	0x50000300
 8019580:	4b51      	ldr	r3, [pc, #324]	; (80196c8 <HAL_ADC_ConfigChannel+0x834>)
 8019582:	4618      	mov	r0, r3
 8019584:	f7fe fae4 	bl	8017b50 <LL_ADC_GetCommonPathInternalCh>
 8019588:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	4a4e      	ldr	r2, [pc, #312]	; (80196cc <HAL_ADC_ConfigChannel+0x838>)
 8019592:	4293      	cmp	r3, r2
 8019594:	d004      	beq.n	80195a0 <HAL_ADC_ConfigChannel+0x70c>
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	4a4d      	ldr	r2, [pc, #308]	; (80196d0 <HAL_ADC_ConfigChannel+0x83c>)
 801959c:	4293      	cmp	r3, r2
 801959e:	d134      	bne.n	801960a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80195a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80195a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d12e      	bne.n	801960a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80195b4:	d17e      	bne.n	80196b4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80195be:	d004      	beq.n	80195ca <HAL_ADC_ConfigChannel+0x736>
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	4a43      	ldr	r2, [pc, #268]	; (80196d4 <HAL_ADC_ConfigChannel+0x840>)
 80195c6:	4293      	cmp	r3, r2
 80195c8:	d101      	bne.n	80195ce <HAL_ADC_ConfigChannel+0x73a>
 80195ca:	4a43      	ldr	r2, [pc, #268]	; (80196d8 <HAL_ADC_ConfigChannel+0x844>)
 80195cc:	e000      	b.n	80195d0 <HAL_ADC_ConfigChannel+0x73c>
 80195ce:	4a3e      	ldr	r2, [pc, #248]	; (80196c8 <HAL_ADC_ConfigChannel+0x834>)
 80195d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80195d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80195d8:	4619      	mov	r1, r3
 80195da:	4610      	mov	r0, r2
 80195dc:	f7fe faa5 	bl	8017b2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80195e0:	4b3e      	ldr	r3, [pc, #248]	; (80196dc <HAL_ADC_ConfigChannel+0x848>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	099b      	lsrs	r3, r3, #6
 80195e6:	4a3e      	ldr	r2, [pc, #248]	; (80196e0 <HAL_ADC_ConfigChannel+0x84c>)
 80195e8:	fba2 2303 	umull	r2, r3, r2, r3
 80195ec:	099b      	lsrs	r3, r3, #6
 80195ee:	1c5a      	adds	r2, r3, #1
 80195f0:	4613      	mov	r3, r2
 80195f2:	005b      	lsls	r3, r3, #1
 80195f4:	4413      	add	r3, r2
 80195f6:	009b      	lsls	r3, r3, #2
 80195f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80195fa:	e002      	b.n	8019602 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	3b01      	subs	r3, #1
 8019600:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d1f9      	bne.n	80195fc <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8019608:	e054      	b.n	80196b4 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801960a:	683b      	ldr	r3, [r7, #0]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	4a35      	ldr	r2, [pc, #212]	; (80196e4 <HAL_ADC_ConfigChannel+0x850>)
 8019610:	4293      	cmp	r3, r2
 8019612:	d120      	bne.n	8019656 <HAL_ADC_ConfigChannel+0x7c2>
 8019614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801961c:	2b00      	cmp	r3, #0
 801961e:	d11a      	bne.n	8019656 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019628:	d144      	bne.n	80196b4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019632:	d004      	beq.n	801963e <HAL_ADC_ConfigChannel+0x7aa>
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	4a26      	ldr	r2, [pc, #152]	; (80196d4 <HAL_ADC_ConfigChannel+0x840>)
 801963a:	4293      	cmp	r3, r2
 801963c:	d101      	bne.n	8019642 <HAL_ADC_ConfigChannel+0x7ae>
 801963e:	4a26      	ldr	r2, [pc, #152]	; (80196d8 <HAL_ADC_ConfigChannel+0x844>)
 8019640:	e000      	b.n	8019644 <HAL_ADC_ConfigChannel+0x7b0>
 8019642:	4a21      	ldr	r2, [pc, #132]	; (80196c8 <HAL_ADC_ConfigChannel+0x834>)
 8019644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801964c:	4619      	mov	r1, r3
 801964e:	4610      	mov	r0, r2
 8019650:	f7fe fa6b 	bl	8017b2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8019654:	e02e      	b.n	80196b4 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	4a23      	ldr	r2, [pc, #140]	; (80196e8 <HAL_ADC_ConfigChannel+0x854>)
 801965c:	4293      	cmp	r3, r2
 801965e:	d129      	bne.n	80196b4 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8019660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019668:	2b00      	cmp	r3, #0
 801966a:	d123      	bne.n	80196b4 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	4a18      	ldr	r2, [pc, #96]	; (80196d4 <HAL_ADC_ConfigChannel+0x840>)
 8019672:	4293      	cmp	r3, r2
 8019674:	d01e      	beq.n	80196b4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801967e:	d004      	beq.n	801968a <HAL_ADC_ConfigChannel+0x7f6>
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	4a13      	ldr	r2, [pc, #76]	; (80196d4 <HAL_ADC_ConfigChannel+0x840>)
 8019686:	4293      	cmp	r3, r2
 8019688:	d101      	bne.n	801968e <HAL_ADC_ConfigChannel+0x7fa>
 801968a:	4a13      	ldr	r2, [pc, #76]	; (80196d8 <HAL_ADC_ConfigChannel+0x844>)
 801968c:	e000      	b.n	8019690 <HAL_ADC_ConfigChannel+0x7fc>
 801968e:	4a0e      	ldr	r2, [pc, #56]	; (80196c8 <HAL_ADC_ConfigChannel+0x834>)
 8019690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8019698:	4619      	mov	r1, r3
 801969a:	4610      	mov	r0, r2
 801969c:	f7fe fa45 	bl	8017b2a <LL_ADC_SetCommonPathInternalCh>
 80196a0:	e008      	b.n	80196b4 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196a6:	f043 0220 	orr.w	r2, r3, #32
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80196ae:	2301      	movs	r3, #1
 80196b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	2200      	movs	r2, #0
 80196b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80196bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80196c0:	4618      	mov	r0, r3
 80196c2:	37d8      	adds	r7, #216	; 0xd8
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bd80      	pop	{r7, pc}
 80196c8:	50000700 	.word	0x50000700
 80196cc:	c3210000 	.word	0xc3210000
 80196d0:	90c00010 	.word	0x90c00010
 80196d4:	50000100 	.word	0x50000100
 80196d8:	50000300 	.word	0x50000300
 80196dc:	20000000 	.word	0x20000000
 80196e0:	053e2d63 	.word	0x053e2d63
 80196e4:	c7520000 	.word	0xc7520000
 80196e8:	cb840000 	.word	0xcb840000

080196ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b088      	sub	sp, #32
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
 80196f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80196f6:	2300      	movs	r3, #0
 80196f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	4618      	mov	r0, r3
 8019704:	f7fe fc56 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 8019708:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	4618      	mov	r0, r3
 8019710:	f7fe fc77 	bl	8018002 <LL_ADC_INJ_IsConversionOngoing>
 8019714:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8019716:	693b      	ldr	r3, [r7, #16]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d103      	bne.n	8019724 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	2b00      	cmp	r3, #0
 8019720:	f000 8098 	beq.w	8019854 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	68db      	ldr	r3, [r3, #12]
 801972a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801972e:	2b00      	cmp	r3, #0
 8019730:	d02a      	beq.n	8019788 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	7f5b      	ldrb	r3, [r3, #29]
 8019736:	2b01      	cmp	r3, #1
 8019738:	d126      	bne.n	8019788 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	7f1b      	ldrb	r3, [r3, #28]
 801973e:	2b01      	cmp	r3, #1
 8019740:	d122      	bne.n	8019788 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8019742:	2301      	movs	r3, #1
 8019744:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8019746:	e014      	b.n	8019772 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8019748:	69fb      	ldr	r3, [r7, #28]
 801974a:	4a45      	ldr	r2, [pc, #276]	; (8019860 <ADC_ConversionStop+0x174>)
 801974c:	4293      	cmp	r3, r2
 801974e:	d90d      	bls.n	801976c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019754:	f043 0210 	orr.w	r2, r3, #16
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019760:	f043 0201 	orr.w	r2, r3, #1
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8019768:	2301      	movs	r3, #1
 801976a:	e074      	b.n	8019856 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801976c:	69fb      	ldr	r3, [r7, #28]
 801976e:	3301      	adds	r3, #1
 8019770:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801977c:	2b40      	cmp	r3, #64	; 0x40
 801977e:	d1e3      	bne.n	8019748 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	2240      	movs	r2, #64	; 0x40
 8019786:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8019788:	69bb      	ldr	r3, [r7, #24]
 801978a:	2b02      	cmp	r3, #2
 801978c:	d014      	beq.n	80197b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	4618      	mov	r0, r3
 8019794:	f7fe fc0e 	bl	8017fb4 <LL_ADC_REG_IsConversionOngoing>
 8019798:	4603      	mov	r3, r0
 801979a:	2b00      	cmp	r3, #0
 801979c:	d00c      	beq.n	80197b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	4618      	mov	r0, r3
 80197a4:	f7fe fbcb 	bl	8017f3e <LL_ADC_IsDisableOngoing>
 80197a8:	4603      	mov	r3, r0
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d104      	bne.n	80197b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7fe fbea 	bl	8017f8c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80197b8:	69bb      	ldr	r3, [r7, #24]
 80197ba:	2b01      	cmp	r3, #1
 80197bc:	d014      	beq.n	80197e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7fe fc1d 	bl	8018002 <LL_ADC_INJ_IsConversionOngoing>
 80197c8:	4603      	mov	r3, r0
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d00c      	beq.n	80197e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7fe fbb3 	bl	8017f3e <LL_ADC_IsDisableOngoing>
 80197d8:	4603      	mov	r3, r0
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d104      	bne.n	80197e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7fe fbf9 	bl	8017fda <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80197e8:	69bb      	ldr	r3, [r7, #24]
 80197ea:	2b02      	cmp	r3, #2
 80197ec:	d005      	beq.n	80197fa <ADC_ConversionStop+0x10e>
 80197ee:	69bb      	ldr	r3, [r7, #24]
 80197f0:	2b03      	cmp	r3, #3
 80197f2:	d105      	bne.n	8019800 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80197f4:	230c      	movs	r3, #12
 80197f6:	617b      	str	r3, [r7, #20]
        break;
 80197f8:	e005      	b.n	8019806 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80197fa:	2308      	movs	r3, #8
 80197fc:	617b      	str	r3, [r7, #20]
        break;
 80197fe:	e002      	b.n	8019806 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8019800:	2304      	movs	r3, #4
 8019802:	617b      	str	r3, [r7, #20]
        break;
 8019804:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8019806:	f7fe f94f 	bl	8017aa8 <HAL_GetTick>
 801980a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801980c:	e01b      	b.n	8019846 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801980e:	f7fe f94b 	bl	8017aa8 <HAL_GetTick>
 8019812:	4602      	mov	r2, r0
 8019814:	68bb      	ldr	r3, [r7, #8]
 8019816:	1ad3      	subs	r3, r2, r3
 8019818:	2b05      	cmp	r3, #5
 801981a:	d914      	bls.n	8019846 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	689a      	ldr	r2, [r3, #8]
 8019822:	697b      	ldr	r3, [r7, #20]
 8019824:	4013      	ands	r3, r2
 8019826:	2b00      	cmp	r3, #0
 8019828:	d00d      	beq.n	8019846 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801982e:	f043 0210 	orr.w	r2, r3, #16
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801983a:	f043 0201 	orr.w	r2, r3, #1
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8019842:	2301      	movs	r3, #1
 8019844:	e007      	b.n	8019856 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	689a      	ldr	r2, [r3, #8]
 801984c:	697b      	ldr	r3, [r7, #20]
 801984e:	4013      	ands	r3, r2
 8019850:	2b00      	cmp	r3, #0
 8019852:	d1dc      	bne.n	801980e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8019854:	2300      	movs	r3, #0
}
 8019856:	4618      	mov	r0, r3
 8019858:	3720      	adds	r7, #32
 801985a:	46bd      	mov	sp, r7
 801985c:	bd80      	pop	{r7, pc}
 801985e:	bf00      	nop
 8019860:	a33fffff 	.word	0xa33fffff

08019864 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8019864:	b580      	push	{r7, lr}
 8019866:	b084      	sub	sp, #16
 8019868:	af00      	add	r7, sp, #0
 801986a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	4618      	mov	r0, r3
 8019872:	f7fe fb51 	bl	8017f18 <LL_ADC_IsEnabled>
 8019876:	4603      	mov	r3, r0
 8019878:	2b00      	cmp	r3, #0
 801987a:	d14d      	bne.n	8019918 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	689a      	ldr	r2, [r3, #8]
 8019882:	4b28      	ldr	r3, [pc, #160]	; (8019924 <ADC_Enable+0xc0>)
 8019884:	4013      	ands	r3, r2
 8019886:	2b00      	cmp	r3, #0
 8019888:	d00d      	beq.n	80198a6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801988e:	f043 0210 	orr.w	r2, r3, #16
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801989a:	f043 0201 	orr.w	r2, r3, #1
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80198a2:	2301      	movs	r3, #1
 80198a4:	e039      	b.n	801991a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	4618      	mov	r0, r3
 80198ac:	f7fe fb0c 	bl	8017ec8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80198b0:	f7fe f8fa 	bl	8017aa8 <HAL_GetTick>
 80198b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80198b6:	e028      	b.n	801990a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	4618      	mov	r0, r3
 80198be:	f7fe fb2b 	bl	8017f18 <LL_ADC_IsEnabled>
 80198c2:	4603      	mov	r3, r0
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d104      	bne.n	80198d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7fe fafb 	bl	8017ec8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80198d2:	f7fe f8e9 	bl	8017aa8 <HAL_GetTick>
 80198d6:	4602      	mov	r2, r0
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	1ad3      	subs	r3, r2, r3
 80198dc:	2b02      	cmp	r3, #2
 80198de:	d914      	bls.n	801990a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	f003 0301 	and.w	r3, r3, #1
 80198ea:	2b01      	cmp	r3, #1
 80198ec:	d00d      	beq.n	801990a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198f2:	f043 0210 	orr.w	r2, r3, #16
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80198fe:	f043 0201 	orr.w	r2, r3, #1
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8019906:	2301      	movs	r3, #1
 8019908:	e007      	b.n	801991a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	f003 0301 	and.w	r3, r3, #1
 8019914:	2b01      	cmp	r3, #1
 8019916:	d1cf      	bne.n	80198b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8019918:	2300      	movs	r3, #0
}
 801991a:	4618      	mov	r0, r3
 801991c:	3710      	adds	r7, #16
 801991e:	46bd      	mov	sp, r7
 8019920:	bd80      	pop	{r7, pc}
 8019922:	bf00      	nop
 8019924:	8000003f 	.word	0x8000003f

08019928 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b084      	sub	sp, #16
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	4618      	mov	r0, r3
 8019936:	f7fe fb02 	bl	8017f3e <LL_ADC_IsDisableOngoing>
 801993a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	4618      	mov	r0, r3
 8019942:	f7fe fae9 	bl	8017f18 <LL_ADC_IsEnabled>
 8019946:	4603      	mov	r3, r0
 8019948:	2b00      	cmp	r3, #0
 801994a:	d047      	beq.n	80199dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d144      	bne.n	80199dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	689b      	ldr	r3, [r3, #8]
 8019958:	f003 030d 	and.w	r3, r3, #13
 801995c:	2b01      	cmp	r3, #1
 801995e:	d10c      	bne.n	801997a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	4618      	mov	r0, r3
 8019966:	f7fe fac3 	bl	8017ef0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	2203      	movs	r2, #3
 8019970:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8019972:	f7fe f899 	bl	8017aa8 <HAL_GetTick>
 8019976:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019978:	e029      	b.n	80199ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801997e:	f043 0210 	orr.w	r2, r3, #16
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801998a:	f043 0201 	orr.w	r2, r3, #1
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8019992:	2301      	movs	r3, #1
 8019994:	e023      	b.n	80199de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8019996:	f7fe f887 	bl	8017aa8 <HAL_GetTick>
 801999a:	4602      	mov	r2, r0
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	1ad3      	subs	r3, r2, r3
 80199a0:	2b02      	cmp	r3, #2
 80199a2:	d914      	bls.n	80199ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	689b      	ldr	r3, [r3, #8]
 80199aa:	f003 0301 	and.w	r3, r3, #1
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d00d      	beq.n	80199ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199b6:	f043 0210 	orr.w	r2, r3, #16
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80199c2:	f043 0201 	orr.w	r2, r3, #1
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80199ca:	2301      	movs	r3, #1
 80199cc:	e007      	b.n	80199de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	689b      	ldr	r3, [r3, #8]
 80199d4:	f003 0301 	and.w	r3, r3, #1
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d1dc      	bne.n	8019996 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80199dc:	2300      	movs	r3, #0
}
 80199de:	4618      	mov	r0, r3
 80199e0:	3710      	adds	r7, #16
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}

080199e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80199e6:	b580      	push	{r7, lr}
 80199e8:	b084      	sub	sp, #16
 80199ea:	af00      	add	r7, sp, #0
 80199ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d14b      	bne.n	8019a98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	f003 0308 	and.w	r3, r3, #8
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d021      	beq.n	8019a5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7fe f942 	bl	8017ca8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019a24:	4603      	mov	r3, r0
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d032      	beq.n	8019a90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	68db      	ldr	r3, [r3, #12]
 8019a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d12b      	bne.n	8019a90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d11f      	bne.n	8019a90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a54:	f043 0201 	orr.w	r2, r3, #1
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8019a5c:	e018      	b.n	8019a90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	68db      	ldr	r3, [r3, #12]
 8019a64:	f003 0302 	and.w	r3, r3, #2
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d111      	bne.n	8019a90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d105      	bne.n	8019a90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a88:	f043 0201 	orr.w	r2, r3, #1
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019a90:	68f8      	ldr	r0, [r7, #12]
 8019a92:	f7ee fd19 	bl	80084c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8019a96:	e00e      	b.n	8019ab6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a9c:	f003 0310 	and.w	r3, r3, #16
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d003      	beq.n	8019aac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8019aa4:	68f8      	ldr	r0, [r7, #12]
 8019aa6:	f7ff f9eb 	bl	8018e80 <HAL_ADC_ErrorCallback>
}
 8019aaa:	e004      	b.n	8019ab6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ab2:	6878      	ldr	r0, [r7, #4]
 8019ab4:	4798      	blx	r3
}
 8019ab6:	bf00      	nop
 8019ab8:	3710      	adds	r7, #16
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}

08019abe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8019abe:	b580      	push	{r7, lr}
 8019ac0:	b084      	sub	sp, #16
 8019ac2:	af00      	add	r7, sp, #0
 8019ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019aca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8019acc:	68f8      	ldr	r0, [r7, #12]
 8019ace:	f7ff f9c3 	bl	8018e58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8019ad2:	bf00      	nop
 8019ad4:	3710      	adds	r7, #16
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	bd80      	pop	{r7, pc}

08019ada <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8019ada:	b580      	push	{r7, lr}
 8019adc:	b084      	sub	sp, #16
 8019ade:	af00      	add	r7, sp, #0
 8019ae0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ae6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019aec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019af8:	f043 0204 	orr.w	r2, r3, #4
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8019b00:	68f8      	ldr	r0, [r7, #12]
 8019b02:	f7ff f9bd 	bl	8018e80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8019b06:	bf00      	nop
 8019b08:	3710      	adds	r7, #16
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	bd80      	pop	{r7, pc}

08019b0e <LL_ADC_IsEnabled>:
{
 8019b0e:	b480      	push	{r7}
 8019b10:	b083      	sub	sp, #12
 8019b12:	af00      	add	r7, sp, #0
 8019b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	689b      	ldr	r3, [r3, #8]
 8019b1a:	f003 0301 	and.w	r3, r3, #1
 8019b1e:	2b01      	cmp	r3, #1
 8019b20:	d101      	bne.n	8019b26 <LL_ADC_IsEnabled+0x18>
 8019b22:	2301      	movs	r3, #1
 8019b24:	e000      	b.n	8019b28 <LL_ADC_IsEnabled+0x1a>
 8019b26:	2300      	movs	r3, #0
}
 8019b28:	4618      	mov	r0, r3
 8019b2a:	370c      	adds	r7, #12
 8019b2c:	46bd      	mov	sp, r7
 8019b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b32:	4770      	bx	lr

08019b34 <LL_ADC_StartCalibration>:
{
 8019b34:	b480      	push	{r7}
 8019b36:	b083      	sub	sp, #12
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
 8019b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	689b      	ldr	r3, [r3, #8]
 8019b42:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8019b46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019b4a:	683a      	ldr	r2, [r7, #0]
 8019b4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8019b50:	4313      	orrs	r3, r2
 8019b52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	609a      	str	r2, [r3, #8]
}
 8019b5a:	bf00      	nop
 8019b5c:	370c      	adds	r7, #12
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b64:	4770      	bx	lr

08019b66 <LL_ADC_IsCalibrationOnGoing>:
{
 8019b66:	b480      	push	{r7}
 8019b68:	b083      	sub	sp, #12
 8019b6a:	af00      	add	r7, sp, #0
 8019b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	689b      	ldr	r3, [r3, #8]
 8019b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019b7a:	d101      	bne.n	8019b80 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8019b7c:	2301      	movs	r3, #1
 8019b7e:	e000      	b.n	8019b82 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8019b80:	2300      	movs	r3, #0
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	370c      	adds	r7, #12
 8019b86:	46bd      	mov	sp, r7
 8019b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b8c:	4770      	bx	lr

08019b8e <LL_ADC_REG_IsConversionOngoing>:
{
 8019b8e:	b480      	push	{r7}
 8019b90:	b083      	sub	sp, #12
 8019b92:	af00      	add	r7, sp, #0
 8019b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	689b      	ldr	r3, [r3, #8]
 8019b9a:	f003 0304 	and.w	r3, r3, #4
 8019b9e:	2b04      	cmp	r3, #4
 8019ba0:	d101      	bne.n	8019ba6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	e000      	b.n	8019ba8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8019ba6:	2300      	movs	r3, #0
}
 8019ba8:	4618      	mov	r0, r3
 8019baa:	370c      	adds	r7, #12
 8019bac:	46bd      	mov	sp, r7
 8019bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb2:	4770      	bx	lr

08019bb4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b084      	sub	sp, #16
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
 8019bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019bc8:	2b01      	cmp	r3, #1
 8019bca:	d101      	bne.n	8019bd0 <HAL_ADCEx_Calibration_Start+0x1c>
 8019bcc:	2302      	movs	r3, #2
 8019bce:	e04d      	b.n	8019c6c <HAL_ADCEx_Calibration_Start+0xb8>
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	2201      	movs	r2, #1
 8019bd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8019bd8:	6878      	ldr	r0, [r7, #4]
 8019bda:	f7ff fea5 	bl	8019928 <ADC_Disable>
 8019bde:	4603      	mov	r3, r0
 8019be0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8019be2:	7bfb      	ldrb	r3, [r7, #15]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d136      	bne.n	8019c56 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019bf0:	f023 0302 	bic.w	r3, r3, #2
 8019bf4:	f043 0202 	orr.w	r2, r3, #2
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	6839      	ldr	r1, [r7, #0]
 8019c02:	4618      	mov	r0, r3
 8019c04:	f7ff ff96 	bl	8019b34 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8019c08:	e014      	b.n	8019c34 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8019c0a:	68bb      	ldr	r3, [r7, #8]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8019c10:	68bb      	ldr	r3, [r7, #8]
 8019c12:	4a18      	ldr	r2, [pc, #96]	; (8019c74 <HAL_ADCEx_Calibration_Start+0xc0>)
 8019c14:	4293      	cmp	r3, r2
 8019c16:	d90d      	bls.n	8019c34 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c1c:	f023 0312 	bic.w	r3, r3, #18
 8019c20:	f043 0210 	orr.w	r2, r3, #16
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8019c30:	2301      	movs	r3, #1
 8019c32:	e01b      	b.n	8019c6c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	4618      	mov	r0, r3
 8019c3a:	f7ff ff94 	bl	8019b66 <LL_ADC_IsCalibrationOnGoing>
 8019c3e:	4603      	mov	r3, r0
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d1e2      	bne.n	8019c0a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c48:	f023 0303 	bic.w	r3, r3, #3
 8019c4c:	f043 0201 	orr.w	r2, r3, #1
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	65da      	str	r2, [r3, #92]	; 0x5c
 8019c54:	e005      	b.n	8019c62 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c5a:	f043 0210 	orr.w	r2, r3, #16
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	2200      	movs	r2, #0
 8019c66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	3710      	adds	r7, #16
 8019c70:	46bd      	mov	sp, r7
 8019c72:	bd80      	pop	{r7, pc}
 8019c74:	0004de01 	.word	0x0004de01

08019c78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019c78:	b480      	push	{r7}
 8019c7a:	b083      	sub	sp, #12
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8019c80:	bf00      	nop
 8019c82:	370c      	adds	r7, #12
 8019c84:	46bd      	mov	sp, r7
 8019c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8a:	4770      	bx	lr

08019c8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8019c8c:	b480      	push	{r7}
 8019c8e:	b083      	sub	sp, #12
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8019c94:	bf00      	nop
 8019c96:	370c      	adds	r7, #12
 8019c98:	46bd      	mov	sp, r7
 8019c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c9e:	4770      	bx	lr

08019ca0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8019ca0:	b480      	push	{r7}
 8019ca2:	b083      	sub	sp, #12
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8019ca8:	bf00      	nop
 8019caa:	370c      	adds	r7, #12
 8019cac:	46bd      	mov	sp, r7
 8019cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb2:	4770      	bx	lr

08019cb4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8019cb4:	b480      	push	{r7}
 8019cb6:	b083      	sub	sp, #12
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8019cbc:	bf00      	nop
 8019cbe:	370c      	adds	r7, #12
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc6:	4770      	bx	lr

08019cc8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8019cc8:	b480      	push	{r7}
 8019cca:	b083      	sub	sp, #12
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8019cd0:	bf00      	nop
 8019cd2:	370c      	adds	r7, #12
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cda:	4770      	bx	lr

08019cdc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8019cdc:	b590      	push	{r4, r7, lr}
 8019cde:	b0a1      	sub	sp, #132	; 0x84
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
 8019ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019cf2:	2b01      	cmp	r3, #1
 8019cf4:	d101      	bne.n	8019cfa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8019cf6:	2302      	movs	r3, #2
 8019cf8:	e0cb      	b.n	8019e92 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	2201      	movs	r2, #1
 8019cfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8019d02:	2300      	movs	r3, #0
 8019d04:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8019d06:	2300      	movs	r3, #0
 8019d08:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019d12:	d102      	bne.n	8019d1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8019d14:	4b61      	ldr	r3, [pc, #388]	; (8019e9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019d16:	60bb      	str	r3, [r7, #8]
 8019d18:	e001      	b.n	8019d1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8019d1e:	68bb      	ldr	r3, [r7, #8]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d10b      	bne.n	8019d3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d28:	f043 0220 	orr.w	r2, r3, #32
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	2200      	movs	r2, #0
 8019d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8019d38:	2301      	movs	r3, #1
 8019d3a:	e0aa      	b.n	8019e92 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8019d3c:	68bb      	ldr	r3, [r7, #8]
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7ff ff25 	bl	8019b8e <LL_ADC_REG_IsConversionOngoing>
 8019d44:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	f7ff ff1f 	bl	8019b8e <LL_ADC_REG_IsConversionOngoing>
 8019d50:	4603      	mov	r3, r0
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	f040 808c 	bne.w	8019e70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8019d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	f040 8088 	bne.w	8019e70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019d68:	d004      	beq.n	8019d74 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	4a4b      	ldr	r2, [pc, #300]	; (8019e9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019d70:	4293      	cmp	r3, r2
 8019d72:	d101      	bne.n	8019d78 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8019d74:	4b4a      	ldr	r3, [pc, #296]	; (8019ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8019d76:	e000      	b.n	8019d7a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8019d78:	4b4a      	ldr	r3, [pc, #296]	; (8019ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8019d7a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019d7c:	683b      	ldr	r3, [r7, #0]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d041      	beq.n	8019e08 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8019d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d86:	689b      	ldr	r3, [r3, #8]
 8019d88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	6859      	ldr	r1, [r3, #4]
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019d96:	035b      	lsls	r3, r3, #13
 8019d98:	430b      	orrs	r3, r1
 8019d9a:	431a      	orrs	r2, r3
 8019d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019da8:	d004      	beq.n	8019db4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	4a3b      	ldr	r2, [pc, #236]	; (8019e9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019db0:	4293      	cmp	r3, r2
 8019db2:	d10f      	bne.n	8019dd4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8019db4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019db8:	f7ff fea9 	bl	8019b0e <LL_ADC_IsEnabled>
 8019dbc:	4604      	mov	r4, r0
 8019dbe:	4837      	ldr	r0, [pc, #220]	; (8019e9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019dc0:	f7ff fea5 	bl	8019b0e <LL_ADC_IsEnabled>
 8019dc4:	4603      	mov	r3, r0
 8019dc6:	4323      	orrs	r3, r4
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	bf0c      	ite	eq
 8019dcc:	2301      	moveq	r3, #1
 8019dce:	2300      	movne	r3, #0
 8019dd0:	b2db      	uxtb	r3, r3
 8019dd2:	e008      	b.n	8019de6 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8019dd4:	4834      	ldr	r0, [pc, #208]	; (8019ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019dd6:	f7ff fe9a 	bl	8019b0e <LL_ADC_IsEnabled>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	bf0c      	ite	eq
 8019de0:	2301      	moveq	r3, #1
 8019de2:	2300      	movne	r3, #0
 8019de4:	b2db      	uxtb	r3, r3
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d04c      	beq.n	8019e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8019dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019dec:	689b      	ldr	r3, [r3, #8]
 8019dee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019df2:	f023 030f 	bic.w	r3, r3, #15
 8019df6:	683a      	ldr	r2, [r7, #0]
 8019df8:	6811      	ldr	r1, [r2, #0]
 8019dfa:	683a      	ldr	r2, [r7, #0]
 8019dfc:	6892      	ldr	r2, [r2, #8]
 8019dfe:	430a      	orrs	r2, r1
 8019e00:	431a      	orrs	r2, r3
 8019e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019e04:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019e06:	e03d      	b.n	8019e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8019e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019e0a:	689b      	ldr	r3, [r3, #8]
 8019e0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019e12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019e1c:	d004      	beq.n	8019e28 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	4a1e      	ldr	r2, [pc, #120]	; (8019e9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019e24:	4293      	cmp	r3, r2
 8019e26:	d10f      	bne.n	8019e48 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8019e28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019e2c:	f7ff fe6f 	bl	8019b0e <LL_ADC_IsEnabled>
 8019e30:	4604      	mov	r4, r0
 8019e32:	481a      	ldr	r0, [pc, #104]	; (8019e9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019e34:	f7ff fe6b 	bl	8019b0e <LL_ADC_IsEnabled>
 8019e38:	4603      	mov	r3, r0
 8019e3a:	4323      	orrs	r3, r4
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	bf0c      	ite	eq
 8019e40:	2301      	moveq	r3, #1
 8019e42:	2300      	movne	r3, #0
 8019e44:	b2db      	uxtb	r3, r3
 8019e46:	e008      	b.n	8019e5a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8019e48:	4817      	ldr	r0, [pc, #92]	; (8019ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019e4a:	f7ff fe60 	bl	8019b0e <LL_ADC_IsEnabled>
 8019e4e:	4603      	mov	r3, r0
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	bf0c      	ite	eq
 8019e54:	2301      	moveq	r3, #1
 8019e56:	2300      	movne	r3, #0
 8019e58:	b2db      	uxtb	r3, r3
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d012      	beq.n	8019e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8019e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019e60:	689b      	ldr	r3, [r3, #8]
 8019e62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019e66:	f023 030f 	bic.w	r3, r3, #15
 8019e6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019e6c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019e6e:	e009      	b.n	8019e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e74:	f043 0220 	orr.w	r2, r3, #32
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8019e82:	e000      	b.n	8019e86 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019e84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2200      	movs	r2, #0
 8019e8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019e8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8019e92:	4618      	mov	r0, r3
 8019e94:	3784      	adds	r7, #132	; 0x84
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd90      	pop	{r4, r7, pc}
 8019e9a:	bf00      	nop
 8019e9c:	50000100 	.word	0x50000100
 8019ea0:	50000300 	.word	0x50000300
 8019ea4:	50000700 	.word	0x50000700
 8019ea8:	50000400 	.word	0x50000400

08019eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019eac:	b480      	push	{r7}
 8019eae:	b085      	sub	sp, #20
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	f003 0307 	and.w	r3, r3, #7
 8019eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019ebc:	4b0c      	ldr	r3, [pc, #48]	; (8019ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8019ebe:	68db      	ldr	r3, [r3, #12]
 8019ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019ec2:	68ba      	ldr	r2, [r7, #8]
 8019ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8019ec8:	4013      	ands	r3, r2
 8019eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019ed0:	68bb      	ldr	r3, [r7, #8]
 8019ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8019ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8019ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019ede:	4a04      	ldr	r2, [pc, #16]	; (8019ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8019ee0:	68bb      	ldr	r3, [r7, #8]
 8019ee2:	60d3      	str	r3, [r2, #12]
}
 8019ee4:	bf00      	nop
 8019ee6:	3714      	adds	r7, #20
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eee:	4770      	bx	lr
 8019ef0:	e000ed00 	.word	0xe000ed00

08019ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8019ef4:	b480      	push	{r7}
 8019ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019ef8:	4b04      	ldr	r3, [pc, #16]	; (8019f0c <__NVIC_GetPriorityGrouping+0x18>)
 8019efa:	68db      	ldr	r3, [r3, #12]
 8019efc:	0a1b      	lsrs	r3, r3, #8
 8019efe:	f003 0307 	and.w	r3, r3, #7
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	46bd      	mov	sp, r7
 8019f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f0a:	4770      	bx	lr
 8019f0c:	e000ed00 	.word	0xe000ed00

08019f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019f10:	b480      	push	{r7}
 8019f12:	b083      	sub	sp, #12
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	4603      	mov	r3, r0
 8019f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	db0b      	blt.n	8019f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019f22:	79fb      	ldrb	r3, [r7, #7]
 8019f24:	f003 021f 	and.w	r2, r3, #31
 8019f28:	4907      	ldr	r1, [pc, #28]	; (8019f48 <__NVIC_EnableIRQ+0x38>)
 8019f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f2e:	095b      	lsrs	r3, r3, #5
 8019f30:	2001      	movs	r0, #1
 8019f32:	fa00 f202 	lsl.w	r2, r0, r2
 8019f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8019f3a:	bf00      	nop
 8019f3c:	370c      	adds	r7, #12
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f44:	4770      	bx	lr
 8019f46:	bf00      	nop
 8019f48:	e000e100 	.word	0xe000e100

08019f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8019f4c:	b480      	push	{r7}
 8019f4e:	b083      	sub	sp, #12
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	4603      	mov	r3, r0
 8019f54:	6039      	str	r1, [r7, #0]
 8019f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	db0a      	blt.n	8019f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019f60:	683b      	ldr	r3, [r7, #0]
 8019f62:	b2da      	uxtb	r2, r3
 8019f64:	490c      	ldr	r1, [pc, #48]	; (8019f98 <__NVIC_SetPriority+0x4c>)
 8019f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f6a:	0112      	lsls	r2, r2, #4
 8019f6c:	b2d2      	uxtb	r2, r2
 8019f6e:	440b      	add	r3, r1
 8019f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8019f74:	e00a      	b.n	8019f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019f76:	683b      	ldr	r3, [r7, #0]
 8019f78:	b2da      	uxtb	r2, r3
 8019f7a:	4908      	ldr	r1, [pc, #32]	; (8019f9c <__NVIC_SetPriority+0x50>)
 8019f7c:	79fb      	ldrb	r3, [r7, #7]
 8019f7e:	f003 030f 	and.w	r3, r3, #15
 8019f82:	3b04      	subs	r3, #4
 8019f84:	0112      	lsls	r2, r2, #4
 8019f86:	b2d2      	uxtb	r2, r2
 8019f88:	440b      	add	r3, r1
 8019f8a:	761a      	strb	r2, [r3, #24]
}
 8019f8c:	bf00      	nop
 8019f8e:	370c      	adds	r7, #12
 8019f90:	46bd      	mov	sp, r7
 8019f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f96:	4770      	bx	lr
 8019f98:	e000e100 	.word	0xe000e100
 8019f9c:	e000ed00 	.word	0xe000ed00

08019fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019fa0:	b480      	push	{r7}
 8019fa2:	b089      	sub	sp, #36	; 0x24
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	60f8      	str	r0, [r7, #12]
 8019fa8:	60b9      	str	r1, [r7, #8]
 8019faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	f003 0307 	and.w	r3, r3, #7
 8019fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019fb4:	69fb      	ldr	r3, [r7, #28]
 8019fb6:	f1c3 0307 	rsb	r3, r3, #7
 8019fba:	2b04      	cmp	r3, #4
 8019fbc:	bf28      	it	cs
 8019fbe:	2304      	movcs	r3, #4
 8019fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019fc2:	69fb      	ldr	r3, [r7, #28]
 8019fc4:	3304      	adds	r3, #4
 8019fc6:	2b06      	cmp	r3, #6
 8019fc8:	d902      	bls.n	8019fd0 <NVIC_EncodePriority+0x30>
 8019fca:	69fb      	ldr	r3, [r7, #28]
 8019fcc:	3b03      	subs	r3, #3
 8019fce:	e000      	b.n	8019fd2 <NVIC_EncodePriority+0x32>
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8019fd8:	69bb      	ldr	r3, [r7, #24]
 8019fda:	fa02 f303 	lsl.w	r3, r2, r3
 8019fde:	43da      	mvns	r2, r3
 8019fe0:	68bb      	ldr	r3, [r7, #8]
 8019fe2:	401a      	ands	r2, r3
 8019fe4:	697b      	ldr	r3, [r7, #20]
 8019fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8019fec:	697b      	ldr	r3, [r7, #20]
 8019fee:	fa01 f303 	lsl.w	r3, r1, r3
 8019ff2:	43d9      	mvns	r1, r3
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019ff8:	4313      	orrs	r3, r2
         );
}
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	3724      	adds	r7, #36	; 0x24
 8019ffe:	46bd      	mov	sp, r7
 801a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a004:	4770      	bx	lr
	...

0801a008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b082      	sub	sp, #8
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	3b01      	subs	r3, #1
 801a014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a018:	d301      	bcc.n	801a01e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a01a:	2301      	movs	r3, #1
 801a01c:	e00f      	b.n	801a03e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a01e:	4a0a      	ldr	r2, [pc, #40]	; (801a048 <SysTick_Config+0x40>)
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	3b01      	subs	r3, #1
 801a024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a026:	210f      	movs	r1, #15
 801a028:	f04f 30ff 	mov.w	r0, #4294967295
 801a02c:	f7ff ff8e 	bl	8019f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a030:	4b05      	ldr	r3, [pc, #20]	; (801a048 <SysTick_Config+0x40>)
 801a032:	2200      	movs	r2, #0
 801a034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a036:	4b04      	ldr	r3, [pc, #16]	; (801a048 <SysTick_Config+0x40>)
 801a038:	2207      	movs	r2, #7
 801a03a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a03c:	2300      	movs	r3, #0
}
 801a03e:	4618      	mov	r0, r3
 801a040:	3708      	adds	r7, #8
 801a042:	46bd      	mov	sp, r7
 801a044:	bd80      	pop	{r7, pc}
 801a046:	bf00      	nop
 801a048:	e000e010 	.word	0xe000e010

0801a04c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b082      	sub	sp, #8
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a054:	6878      	ldr	r0, [r7, #4]
 801a056:	f7ff ff29 	bl	8019eac <__NVIC_SetPriorityGrouping>
}
 801a05a:	bf00      	nop
 801a05c:	3708      	adds	r7, #8
 801a05e:	46bd      	mov	sp, r7
 801a060:	bd80      	pop	{r7, pc}

0801a062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a062:	b580      	push	{r7, lr}
 801a064:	b086      	sub	sp, #24
 801a066:	af00      	add	r7, sp, #0
 801a068:	4603      	mov	r3, r0
 801a06a:	60b9      	str	r1, [r7, #8]
 801a06c:	607a      	str	r2, [r7, #4]
 801a06e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801a070:	f7ff ff40 	bl	8019ef4 <__NVIC_GetPriorityGrouping>
 801a074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a076:	687a      	ldr	r2, [r7, #4]
 801a078:	68b9      	ldr	r1, [r7, #8]
 801a07a:	6978      	ldr	r0, [r7, #20]
 801a07c:	f7ff ff90 	bl	8019fa0 <NVIC_EncodePriority>
 801a080:	4602      	mov	r2, r0
 801a082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a086:	4611      	mov	r1, r2
 801a088:	4618      	mov	r0, r3
 801a08a:	f7ff ff5f 	bl	8019f4c <__NVIC_SetPriority>
}
 801a08e:	bf00      	nop
 801a090:	3718      	adds	r7, #24
 801a092:	46bd      	mov	sp, r7
 801a094:	bd80      	pop	{r7, pc}

0801a096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a096:	b580      	push	{r7, lr}
 801a098:	b082      	sub	sp, #8
 801a09a:	af00      	add	r7, sp, #0
 801a09c:	4603      	mov	r3, r0
 801a09e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a0a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	f7ff ff33 	bl	8019f10 <__NVIC_EnableIRQ>
}
 801a0aa:	bf00      	nop
 801a0ac:	3708      	adds	r7, #8
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	bd80      	pop	{r7, pc}

0801a0b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a0b2:	b580      	push	{r7, lr}
 801a0b4:	b082      	sub	sp, #8
 801a0b6:	af00      	add	r7, sp, #0
 801a0b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f7ff ffa4 	bl	801a008 <SysTick_Config>
 801a0c0:	4603      	mov	r3, r0
}
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	3708      	adds	r7, #8
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bd80      	pop	{r7, pc}
	...

0801a0cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b084      	sub	sp, #16
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d101      	bne.n	801a0de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801a0da:	2301      	movs	r3, #1
 801a0dc:	e08d      	b.n	801a1fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	4b47      	ldr	r3, [pc, #284]	; (801a204 <HAL_DMA_Init+0x138>)
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	d80f      	bhi.n	801a10a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	461a      	mov	r2, r3
 801a0f0:	4b45      	ldr	r3, [pc, #276]	; (801a208 <HAL_DMA_Init+0x13c>)
 801a0f2:	4413      	add	r3, r2
 801a0f4:	4a45      	ldr	r2, [pc, #276]	; (801a20c <HAL_DMA_Init+0x140>)
 801a0f6:	fba2 2303 	umull	r2, r3, r2, r3
 801a0fa:	091b      	lsrs	r3, r3, #4
 801a0fc:	009a      	lsls	r2, r3, #2
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	4a42      	ldr	r2, [pc, #264]	; (801a210 <HAL_DMA_Init+0x144>)
 801a106:	641a      	str	r2, [r3, #64]	; 0x40
 801a108:	e00e      	b.n	801a128 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	461a      	mov	r2, r3
 801a110:	4b40      	ldr	r3, [pc, #256]	; (801a214 <HAL_DMA_Init+0x148>)
 801a112:	4413      	add	r3, r2
 801a114:	4a3d      	ldr	r2, [pc, #244]	; (801a20c <HAL_DMA_Init+0x140>)
 801a116:	fba2 2303 	umull	r2, r3, r2, r3
 801a11a:	091b      	lsrs	r3, r3, #4
 801a11c:	009a      	lsls	r2, r3, #2
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	4a3c      	ldr	r2, [pc, #240]	; (801a218 <HAL_DMA_Init+0x14c>)
 801a126:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2202      	movs	r2, #2
 801a12c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801a13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a142:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801a14c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	691b      	ldr	r3, [r3, #16]
 801a152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a158:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	699b      	ldr	r3, [r3, #24]
 801a15e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a164:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	6a1b      	ldr	r3, [r3, #32]
 801a16a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801a16c:	68fa      	ldr	r2, [r7, #12]
 801a16e:	4313      	orrs	r3, r2
 801a170:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	68fa      	ldr	r2, [r7, #12]
 801a178:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a17a:	6878      	ldr	r0, [r7, #4]
 801a17c:	f000 fa10 	bl	801a5a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	689b      	ldr	r3, [r3, #8]
 801a184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a188:	d102      	bne.n	801a190 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	2200      	movs	r2, #0
 801a18e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	685a      	ldr	r2, [r3, #4]
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a198:	b2d2      	uxtb	r2, r2
 801a19a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a1a0:	687a      	ldr	r2, [r7, #4]
 801a1a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a1a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	685b      	ldr	r3, [r3, #4]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d010      	beq.n	801a1d0 <HAL_DMA_Init+0x104>
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	685b      	ldr	r3, [r3, #4]
 801a1b2:	2b04      	cmp	r3, #4
 801a1b4:	d80c      	bhi.n	801a1d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a1b6:	6878      	ldr	r0, [r7, #4]
 801a1b8:	f000 fa30 	bl	801a61c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a1c0:	2200      	movs	r2, #0
 801a1c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a1c8:	687a      	ldr	r2, [r7, #4]
 801a1ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a1cc:	605a      	str	r2, [r3, #4]
 801a1ce:	e008      	b.n	801a1e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	2200      	movs	r2, #0
 801a1da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	2200      	movs	r2, #0
 801a1e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	2200      	movs	r2, #0
 801a1e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	2201      	movs	r2, #1
 801a1ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801a1f8:	2300      	movs	r3, #0
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3710      	adds	r7, #16
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
 801a202:	bf00      	nop
 801a204:	40020407 	.word	0x40020407
 801a208:	bffdfff8 	.word	0xbffdfff8
 801a20c:	cccccccd 	.word	0xcccccccd
 801a210:	40020000 	.word	0x40020000
 801a214:	bffdfbf8 	.word	0xbffdfbf8
 801a218:	40020400 	.word	0x40020400

0801a21c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b086      	sub	sp, #24
 801a220:	af00      	add	r7, sp, #0
 801a222:	60f8      	str	r0, [r7, #12]
 801a224:	60b9      	str	r1, [r7, #8]
 801a226:	607a      	str	r2, [r7, #4]
 801a228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a22a:	2300      	movs	r3, #0
 801a22c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a234:	2b01      	cmp	r3, #1
 801a236:	d101      	bne.n	801a23c <HAL_DMA_Start_IT+0x20>
 801a238:	2302      	movs	r3, #2
 801a23a:	e066      	b.n	801a30a <HAL_DMA_Start_IT+0xee>
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	2201      	movs	r2, #1
 801a240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a24a:	b2db      	uxtb	r3, r3
 801a24c:	2b01      	cmp	r3, #1
 801a24e:	d155      	bne.n	801a2fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	2202      	movs	r2, #2
 801a254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	2200      	movs	r2, #0
 801a25c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	681a      	ldr	r2, [r3, #0]
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	f022 0201 	bic.w	r2, r2, #1
 801a26c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801a26e:	683b      	ldr	r3, [r7, #0]
 801a270:	687a      	ldr	r2, [r7, #4]
 801a272:	68b9      	ldr	r1, [r7, #8]
 801a274:	68f8      	ldr	r0, [r7, #12]
 801a276:	f000 f954 	bl	801a522 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d008      	beq.n	801a294 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	681a      	ldr	r2, [r3, #0]
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	f042 020e 	orr.w	r2, r2, #14
 801a290:	601a      	str	r2, [r3, #0]
 801a292:	e00f      	b.n	801a2b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	681a      	ldr	r2, [r3, #0]
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	f022 0204 	bic.w	r2, r2, #4
 801a2a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	681a      	ldr	r2, [r3, #0]
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	f042 020a 	orr.w	r2, r2, #10
 801a2b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d007      	beq.n	801a2d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a2c6:	681a      	ldr	r2, [r3, #0]
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a2cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a2d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d007      	beq.n	801a2ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2de:	681a      	ldr	r2, [r3, #0]
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a2e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	681a      	ldr	r2, [r3, #0]
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	f042 0201 	orr.w	r2, r2, #1
 801a2f8:	601a      	str	r2, [r3, #0]
 801a2fa:	e005      	b.n	801a308 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	2200      	movs	r2, #0
 801a300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801a304:	2302      	movs	r3, #2
 801a306:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801a308:	7dfb      	ldrb	r3, [r7, #23]
}
 801a30a:	4618      	mov	r0, r3
 801a30c:	3718      	adds	r7, #24
 801a30e:	46bd      	mov	sp, r7
 801a310:	bd80      	pop	{r7, pc}

0801a312 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a312:	b480      	push	{r7}
 801a314:	b085      	sub	sp, #20
 801a316:	af00      	add	r7, sp, #0
 801a318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a31a:	2300      	movs	r3, #0
 801a31c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a324:	b2db      	uxtb	r3, r3
 801a326:	2b02      	cmp	r3, #2
 801a328:	d005      	beq.n	801a336 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	2204      	movs	r2, #4
 801a32e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801a330:	2301      	movs	r3, #1
 801a332:	73fb      	strb	r3, [r7, #15]
 801a334:	e037      	b.n	801a3a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	681a      	ldr	r2, [r3, #0]
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	f022 020e 	bic.w	r2, r2, #14
 801a344:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a34a:	681a      	ldr	r2, [r3, #0]
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a354:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	681a      	ldr	r2, [r3, #0]
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	f022 0201 	bic.w	r2, r2, #1
 801a364:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a36a:	f003 021f 	and.w	r2, r3, #31
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a372:	2101      	movs	r1, #1
 801a374:	fa01 f202 	lsl.w	r2, r1, r2
 801a378:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a37e:	687a      	ldr	r2, [r7, #4]
 801a380:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a382:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d00c      	beq.n	801a3a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a390:	681a      	ldr	r2, [r3, #0]
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a39a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a3a0:	687a      	ldr	r2, [r7, #4]
 801a3a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a3a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	2201      	movs	r2, #1
 801a3aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801a3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	3714      	adds	r7, #20
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c2:	4770      	bx	lr

0801a3c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a3c4:	b580      	push	{r7, lr}
 801a3c6:	b084      	sub	sp, #16
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3e0:	f003 031f 	and.w	r3, r3, #31
 801a3e4:	2204      	movs	r2, #4
 801a3e6:	409a      	lsls	r2, r3
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	4013      	ands	r3, r2
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d026      	beq.n	801a43e <HAL_DMA_IRQHandler+0x7a>
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	f003 0304 	and.w	r3, r3, #4
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d021      	beq.n	801a43e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	f003 0320 	and.w	r3, r3, #32
 801a404:	2b00      	cmp	r3, #0
 801a406:	d107      	bne.n	801a418 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	681a      	ldr	r2, [r3, #0]
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	f022 0204 	bic.w	r2, r2, #4
 801a416:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a41c:	f003 021f 	and.w	r2, r3, #31
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a424:	2104      	movs	r1, #4
 801a426:	fa01 f202 	lsl.w	r2, r1, r2
 801a42a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a430:	2b00      	cmp	r3, #0
 801a432:	d071      	beq.n	801a518 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a438:	6878      	ldr	r0, [r7, #4]
 801a43a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801a43c:	e06c      	b.n	801a518 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a442:	f003 031f 	and.w	r3, r3, #31
 801a446:	2202      	movs	r2, #2
 801a448:	409a      	lsls	r2, r3
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	4013      	ands	r3, r2
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d02e      	beq.n	801a4b0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801a452:	68bb      	ldr	r3, [r7, #8]
 801a454:	f003 0302 	and.w	r3, r3, #2
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d029      	beq.n	801a4b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	f003 0320 	and.w	r3, r3, #32
 801a466:	2b00      	cmp	r3, #0
 801a468:	d10b      	bne.n	801a482 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	681a      	ldr	r2, [r3, #0]
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	f022 020a 	bic.w	r2, r2, #10
 801a478:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	2201      	movs	r2, #1
 801a47e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a486:	f003 021f 	and.w	r2, r3, #31
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a48e:	2102      	movs	r1, #2
 801a490:	fa01 f202 	lsl.w	r2, r1, r2
 801a494:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	2200      	movs	r2, #0
 801a49a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d038      	beq.n	801a518 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4aa:	6878      	ldr	r0, [r7, #4]
 801a4ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801a4ae:	e033      	b.n	801a518 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4b4:	f003 031f 	and.w	r3, r3, #31
 801a4b8:	2208      	movs	r2, #8
 801a4ba:	409a      	lsls	r2, r3
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	4013      	ands	r3, r2
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d02a      	beq.n	801a51a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801a4c4:	68bb      	ldr	r3, [r7, #8]
 801a4c6:	f003 0308 	and.w	r3, r3, #8
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d025      	beq.n	801a51a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	681a      	ldr	r2, [r3, #0]
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	f022 020e 	bic.w	r2, r2, #14
 801a4dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4e2:	f003 021f 	and.w	r2, r3, #31
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4ea:	2101      	movs	r1, #1
 801a4ec:	fa01 f202 	lsl.w	r2, r1, r2
 801a4f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	2201      	movs	r2, #1
 801a4f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	2201      	movs	r2, #1
 801a4fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	2200      	movs	r2, #0
 801a504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d004      	beq.n	801a51a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a514:	6878      	ldr	r0, [r7, #4]
 801a516:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801a518:	bf00      	nop
 801a51a:	bf00      	nop
}
 801a51c:	3710      	adds	r7, #16
 801a51e:	46bd      	mov	sp, r7
 801a520:	bd80      	pop	{r7, pc}

0801a522 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801a522:	b480      	push	{r7}
 801a524:	b085      	sub	sp, #20
 801a526:	af00      	add	r7, sp, #0
 801a528:	60f8      	str	r0, [r7, #12]
 801a52a:	60b9      	str	r1, [r7, #8]
 801a52c:	607a      	str	r2, [r7, #4]
 801a52e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a534:	68fa      	ldr	r2, [r7, #12]
 801a536:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a538:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d004      	beq.n	801a54c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a546:	68fa      	ldr	r2, [r7, #12]
 801a548:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a54a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a550:	f003 021f 	and.w	r2, r3, #31
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a558:	2101      	movs	r1, #1
 801a55a:	fa01 f202 	lsl.w	r2, r1, r2
 801a55e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	683a      	ldr	r2, [r7, #0]
 801a566:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	689b      	ldr	r3, [r3, #8]
 801a56c:	2b10      	cmp	r3, #16
 801a56e:	d108      	bne.n	801a582 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	687a      	ldr	r2, [r7, #4]
 801a576:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	68ba      	ldr	r2, [r7, #8]
 801a57e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801a580:	e007      	b.n	801a592 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	68ba      	ldr	r2, [r7, #8]
 801a588:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	687a      	ldr	r2, [r7, #4]
 801a590:	60da      	str	r2, [r3, #12]
}
 801a592:	bf00      	nop
 801a594:	3714      	adds	r7, #20
 801a596:	46bd      	mov	sp, r7
 801a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59c:	4770      	bx	lr
	...

0801a5a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a5a0:	b480      	push	{r7}
 801a5a2:	b087      	sub	sp, #28
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	461a      	mov	r2, r3
 801a5ae:	4b16      	ldr	r3, [pc, #88]	; (801a608 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801a5b0:	429a      	cmp	r2, r3
 801a5b2:	d802      	bhi.n	801a5ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801a5b4:	4b15      	ldr	r3, [pc, #84]	; (801a60c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801a5b6:	617b      	str	r3, [r7, #20]
 801a5b8:	e001      	b.n	801a5be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801a5ba:	4b15      	ldr	r3, [pc, #84]	; (801a610 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801a5bc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801a5be:	697b      	ldr	r3, [r7, #20]
 801a5c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	b2db      	uxtb	r3, r3
 801a5c8:	3b08      	subs	r3, #8
 801a5ca:	4a12      	ldr	r2, [pc, #72]	; (801a614 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801a5cc:	fba2 2303 	umull	r2, r3, r2, r3
 801a5d0:	091b      	lsrs	r3, r3, #4
 801a5d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5d8:	089b      	lsrs	r3, r3, #2
 801a5da:	009a      	lsls	r2, r3, #2
 801a5dc:	693b      	ldr	r3, [r7, #16]
 801a5de:	4413      	add	r3, r2
 801a5e0:	461a      	mov	r2, r3
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	4a0b      	ldr	r2, [pc, #44]	; (801a618 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801a5ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	f003 031f 	and.w	r3, r3, #31
 801a5f2:	2201      	movs	r2, #1
 801a5f4:	409a      	lsls	r2, r3
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 801a5fa:	bf00      	nop
 801a5fc:	371c      	adds	r7, #28
 801a5fe:	46bd      	mov	sp, r7
 801a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a604:	4770      	bx	lr
 801a606:	bf00      	nop
 801a608:	40020407 	.word	0x40020407
 801a60c:	40020800 	.word	0x40020800
 801a610:	40020820 	.word	0x40020820
 801a614:	cccccccd 	.word	0xcccccccd
 801a618:	40020880 	.word	0x40020880

0801a61c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a61c:	b480      	push	{r7}
 801a61e:	b085      	sub	sp, #20
 801a620:	af00      	add	r7, sp, #0
 801a622:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	685b      	ldr	r3, [r3, #4]
 801a628:	b2db      	uxtb	r3, r3
 801a62a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801a62c:	68fa      	ldr	r2, [r7, #12]
 801a62e:	4b0b      	ldr	r3, [pc, #44]	; (801a65c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801a630:	4413      	add	r3, r2
 801a632:	009b      	lsls	r3, r3, #2
 801a634:	461a      	mov	r2, r3
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	4a08      	ldr	r2, [pc, #32]	; (801a660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801a63e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	3b01      	subs	r3, #1
 801a644:	f003 031f 	and.w	r3, r3, #31
 801a648:	2201      	movs	r2, #1
 801a64a:	409a      	lsls	r2, r3
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801a650:	bf00      	nop
 801a652:	3714      	adds	r7, #20
 801a654:	46bd      	mov	sp, r7
 801a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a65a:	4770      	bx	lr
 801a65c:	1000823f 	.word	0x1000823f
 801a660:	40020940 	.word	0x40020940

0801a664 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801a664:	b580      	push	{r7, lr}
 801a666:	b086      	sub	sp, #24
 801a668:	af00      	add	r7, sp, #0
 801a66a:	60f8      	str	r0, [r7, #12]
 801a66c:	60b9      	str	r1, [r7, #8]
 801a66e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801a672:	2300      	movs	r3, #0
 801a674:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a676:	4b24      	ldr	r3, [pc, #144]	; (801a708 <HAL_FLASH_Program+0xa4>)
 801a678:	781b      	ldrb	r3, [r3, #0]
 801a67a:	2b01      	cmp	r3, #1
 801a67c:	d101      	bne.n	801a682 <HAL_FLASH_Program+0x1e>
 801a67e:	2302      	movs	r3, #2
 801a680:	e03e      	b.n	801a700 <HAL_FLASH_Program+0x9c>
 801a682:	4b21      	ldr	r3, [pc, #132]	; (801a708 <HAL_FLASH_Program+0xa4>)
 801a684:	2201      	movs	r2, #1
 801a686:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a68c:	f000 f87c 	bl	801a788 <FLASH_WaitForLastOperation>
 801a690:	4603      	mov	r3, r0
 801a692:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801a694:	7dfb      	ldrb	r3, [r7, #23]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d12e      	bne.n	801a6f8 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a69a:	4b1b      	ldr	r3, [pc, #108]	; (801a708 <HAL_FLASH_Program+0xa4>)
 801a69c:	2200      	movs	r2, #0
 801a69e:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d107      	bne.n	801a6b6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801a6a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a6aa:	68b8      	ldr	r0, [r7, #8]
 801a6ac:	f000 f8c0 	bl	801a830 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	613b      	str	r3, [r7, #16]
 801a6b4:	e010      	b.n	801a6d8 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	2b01      	cmp	r3, #1
 801a6ba:	d002      	beq.n	801a6c2 <HAL_FLASH_Program+0x5e>
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	2b02      	cmp	r3, #2
 801a6c0:	d10a      	bne.n	801a6d8 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	4619      	mov	r1, r3
 801a6c6:	68b8      	ldr	r0, [r7, #8]
 801a6c8:	f000 f8d8 	bl	801a87c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	2b02      	cmp	r3, #2
 801a6d0:	d102      	bne.n	801a6d8 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801a6d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a6d6:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a6d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a6dc:	f000 f854 	bl	801a788 <FLASH_WaitForLastOperation>
 801a6e0:	4603      	mov	r3, r0
 801a6e2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801a6e4:	693b      	ldr	r3, [r7, #16]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d006      	beq.n	801a6f8 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801a6ea:	4b08      	ldr	r3, [pc, #32]	; (801a70c <HAL_FLASH_Program+0xa8>)
 801a6ec:	695a      	ldr	r2, [r3, #20]
 801a6ee:	693b      	ldr	r3, [r7, #16]
 801a6f0:	43db      	mvns	r3, r3
 801a6f2:	4906      	ldr	r1, [pc, #24]	; (801a70c <HAL_FLASH_Program+0xa8>)
 801a6f4:	4013      	ands	r3, r2
 801a6f6:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a6f8:	4b03      	ldr	r3, [pc, #12]	; (801a708 <HAL_FLASH_Program+0xa4>)
 801a6fa:	2200      	movs	r2, #0
 801a6fc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801a6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 801a700:	4618      	mov	r0, r3
 801a702:	3718      	adds	r7, #24
 801a704:	46bd      	mov	sp, r7
 801a706:	bd80      	pop	{r7, pc}
 801a708:	2000000c 	.word	0x2000000c
 801a70c:	40022000 	.word	0x40022000

0801a710 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801a710:	b480      	push	{r7}
 801a712:	b083      	sub	sp, #12
 801a714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801a716:	2300      	movs	r3, #0
 801a718:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a71a:	4b0b      	ldr	r3, [pc, #44]	; (801a748 <HAL_FLASH_Unlock+0x38>)
 801a71c:	695b      	ldr	r3, [r3, #20]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	da0b      	bge.n	801a73a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801a722:	4b09      	ldr	r3, [pc, #36]	; (801a748 <HAL_FLASH_Unlock+0x38>)
 801a724:	4a09      	ldr	r2, [pc, #36]	; (801a74c <HAL_FLASH_Unlock+0x3c>)
 801a726:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801a728:	4b07      	ldr	r3, [pc, #28]	; (801a748 <HAL_FLASH_Unlock+0x38>)
 801a72a:	4a09      	ldr	r2, [pc, #36]	; (801a750 <HAL_FLASH_Unlock+0x40>)
 801a72c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a72e:	4b06      	ldr	r3, [pc, #24]	; (801a748 <HAL_FLASH_Unlock+0x38>)
 801a730:	695b      	ldr	r3, [r3, #20]
 801a732:	2b00      	cmp	r3, #0
 801a734:	da01      	bge.n	801a73a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801a736:	2301      	movs	r3, #1
 801a738:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801a73a:	79fb      	ldrb	r3, [r7, #7]
}
 801a73c:	4618      	mov	r0, r3
 801a73e:	370c      	adds	r7, #12
 801a740:	46bd      	mov	sp, r7
 801a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a746:	4770      	bx	lr
 801a748:	40022000 	.word	0x40022000
 801a74c:	45670123 	.word	0x45670123
 801a750:	cdef89ab 	.word	0xcdef89ab

0801a754 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801a754:	b480      	push	{r7}
 801a756:	b083      	sub	sp, #12
 801a758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801a75a:	2301      	movs	r3, #1
 801a75c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801a75e:	4b09      	ldr	r3, [pc, #36]	; (801a784 <HAL_FLASH_Lock+0x30>)
 801a760:	695b      	ldr	r3, [r3, #20]
 801a762:	4a08      	ldr	r2, [pc, #32]	; (801a784 <HAL_FLASH_Lock+0x30>)
 801a764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801a768:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a76a:	4b06      	ldr	r3, [pc, #24]	; (801a784 <HAL_FLASH_Lock+0x30>)
 801a76c:	695b      	ldr	r3, [r3, #20]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	da01      	bge.n	801a776 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801a772:	2300      	movs	r3, #0
 801a774:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801a776:	79fb      	ldrb	r3, [r7, #7]
}
 801a778:	4618      	mov	r0, r3
 801a77a:	370c      	adds	r7, #12
 801a77c:	46bd      	mov	sp, r7
 801a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a782:	4770      	bx	lr
 801a784:	40022000 	.word	0x40022000

0801a788 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801a788:	b580      	push	{r7, lr}
 801a78a:	b084      	sub	sp, #16
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801a790:	f7fd f98a 	bl	8017aa8 <HAL_GetTick>
 801a794:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a796:	e009      	b.n	801a7ac <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801a798:	f7fd f986 	bl	8017aa8 <HAL_GetTick>
 801a79c:	4602      	mov	r2, r0
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	1ad3      	subs	r3, r2, r3
 801a7a2:	687a      	ldr	r2, [r7, #4]
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d201      	bcs.n	801a7ac <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801a7a8:	2303      	movs	r3, #3
 801a7aa:	e038      	b.n	801a81e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a7ac:	4b1e      	ldr	r3, [pc, #120]	; (801a828 <FLASH_WaitForLastOperation+0xa0>)
 801a7ae:	691b      	ldr	r3, [r3, #16]
 801a7b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a7b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a7b8:	d0ee      	beq.n	801a798 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801a7ba:	4b1b      	ldr	r3, [pc, #108]	; (801a828 <FLASH_WaitForLastOperation+0xa0>)
 801a7bc:	691a      	ldr	r2, [r3, #16]
 801a7be:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801a7c2:	4013      	ands	r3, r2
 801a7c4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801a7c6:	68bb      	ldr	r3, [r7, #8]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d01e      	beq.n	801a80a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801a7cc:	4b17      	ldr	r3, [pc, #92]	; (801a82c <FLASH_WaitForLastOperation+0xa4>)
 801a7ce:	685a      	ldr	r2, [r3, #4]
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	4313      	orrs	r3, r2
 801a7d4:	4a15      	ldr	r2, [pc, #84]	; (801a82c <FLASH_WaitForLastOperation+0xa4>)
 801a7d6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d007      	beq.n	801a7f2 <FLASH_WaitForLastOperation+0x6a>
 801a7e2:	4b11      	ldr	r3, [pc, #68]	; (801a828 <FLASH_WaitForLastOperation+0xa0>)
 801a7e4:	699a      	ldr	r2, [r3, #24]
 801a7e6:	68bb      	ldr	r3, [r7, #8]
 801a7e8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a7ec:	490e      	ldr	r1, [pc, #56]	; (801a828 <FLASH_WaitForLastOperation+0xa0>)
 801a7ee:	4313      	orrs	r3, r2
 801a7f0:	618b      	str	r3, [r1, #24]
 801a7f2:	68bb      	ldr	r3, [r7, #8]
 801a7f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d004      	beq.n	801a806 <FLASH_WaitForLastOperation+0x7e>
 801a7fc:	4a0a      	ldr	r2, [pc, #40]	; (801a828 <FLASH_WaitForLastOperation+0xa0>)
 801a7fe:	68bb      	ldr	r3, [r7, #8]
 801a800:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a804:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801a806:	2301      	movs	r3, #1
 801a808:	e009      	b.n	801a81e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801a80a:	4b07      	ldr	r3, [pc, #28]	; (801a828 <FLASH_WaitForLastOperation+0xa0>)
 801a80c:	691b      	ldr	r3, [r3, #16]
 801a80e:	f003 0301 	and.w	r3, r3, #1
 801a812:	2b01      	cmp	r3, #1
 801a814:	d102      	bne.n	801a81c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801a816:	4b04      	ldr	r3, [pc, #16]	; (801a828 <FLASH_WaitForLastOperation+0xa0>)
 801a818:	2201      	movs	r2, #1
 801a81a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801a81c:	2300      	movs	r3, #0
}
 801a81e:	4618      	mov	r0, r3
 801a820:	3710      	adds	r7, #16
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}
 801a826:	bf00      	nop
 801a828:	40022000 	.word	0x40022000
 801a82c:	2000000c 	.word	0x2000000c

0801a830 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801a830:	b480      	push	{r7}
 801a832:	b085      	sub	sp, #20
 801a834:	af00      	add	r7, sp, #0
 801a836:	60f8      	str	r0, [r7, #12]
 801a838:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801a83c:	4b0e      	ldr	r3, [pc, #56]	; (801a878 <FLASH_Program_DoubleWord+0x48>)
 801a83e:	695b      	ldr	r3, [r3, #20]
 801a840:	4a0d      	ldr	r2, [pc, #52]	; (801a878 <FLASH_Program_DoubleWord+0x48>)
 801a842:	f043 0301 	orr.w	r3, r3, #1
 801a846:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	683a      	ldr	r2, [r7, #0]
 801a84c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801a84e:	f3bf 8f6f 	isb	sy
}
 801a852:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801a854:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a858:	f04f 0200 	mov.w	r2, #0
 801a85c:	f04f 0300 	mov.w	r3, #0
 801a860:	000a      	movs	r2, r1
 801a862:	2300      	movs	r3, #0
 801a864:	68f9      	ldr	r1, [r7, #12]
 801a866:	3104      	adds	r1, #4
 801a868:	4613      	mov	r3, r2
 801a86a:	600b      	str	r3, [r1, #0]
}
 801a86c:	bf00      	nop
 801a86e:	3714      	adds	r7, #20
 801a870:	46bd      	mov	sp, r7
 801a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a876:	4770      	bx	lr
 801a878:	40022000 	.word	0x40022000

0801a87c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801a87c:	b480      	push	{r7}
 801a87e:	b089      	sub	sp, #36	; 0x24
 801a880:	af00      	add	r7, sp, #0
 801a882:	6078      	str	r0, [r7, #4]
 801a884:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801a886:	2340      	movs	r3, #64	; 0x40
 801a888:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801a88e:	683b      	ldr	r3, [r7, #0]
 801a890:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801a892:	4b14      	ldr	r3, [pc, #80]	; (801a8e4 <FLASH_Program_Fast+0x68>)
 801a894:	695b      	ldr	r3, [r3, #20]
 801a896:	4a13      	ldr	r2, [pc, #76]	; (801a8e4 <FLASH_Program_Fast+0x68>)
 801a898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a89c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a89e:	f3ef 8310 	mrs	r3, PRIMASK
 801a8a2:	60fb      	str	r3, [r7, #12]
  return(result);
 801a8a4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801a8a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8a8:	b672      	cpsid	i
}
 801a8aa:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801a8ac:	697b      	ldr	r3, [r7, #20]
 801a8ae:	681a      	ldr	r2, [r3, #0]
 801a8b0:	69bb      	ldr	r3, [r7, #24]
 801a8b2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801a8b4:	69bb      	ldr	r3, [r7, #24]
 801a8b6:	3304      	adds	r3, #4
 801a8b8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801a8ba:	697b      	ldr	r3, [r7, #20]
 801a8bc:	3304      	adds	r3, #4
 801a8be:	617b      	str	r3, [r7, #20]
    row_index--;
 801a8c0:	7ffb      	ldrb	r3, [r7, #31]
 801a8c2:	3b01      	subs	r3, #1
 801a8c4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801a8c6:	7ffb      	ldrb	r3, [r7, #31]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d1ef      	bne.n	801a8ac <FLASH_Program_Fast+0x30>
 801a8cc:	693b      	ldr	r3, [r7, #16]
 801a8ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	f383 8810 	msr	PRIMASK, r3
}
 801a8d6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801a8d8:	bf00      	nop
 801a8da:	3724      	adds	r7, #36	; 0x24
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e2:	4770      	bx	lr
 801a8e4:	40022000 	.word	0x40022000

0801a8e8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b084      	sub	sp, #16
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
 801a8f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a8f2:	4b48      	ldr	r3, [pc, #288]	; (801aa14 <HAL_FLASHEx_Erase+0x12c>)
 801a8f4:	781b      	ldrb	r3, [r3, #0]
 801a8f6:	2b01      	cmp	r3, #1
 801a8f8:	d101      	bne.n	801a8fe <HAL_FLASHEx_Erase+0x16>
 801a8fa:	2302      	movs	r3, #2
 801a8fc:	e085      	b.n	801aa0a <HAL_FLASHEx_Erase+0x122>
 801a8fe:	4b45      	ldr	r3, [pc, #276]	; (801aa14 <HAL_FLASHEx_Erase+0x12c>)
 801a900:	2201      	movs	r2, #1
 801a902:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a908:	f7ff ff3e 	bl	801a788 <FLASH_WaitForLastOperation>
 801a90c:	4603      	mov	r3, r0
 801a90e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801a910:	7bfb      	ldrb	r3, [r7, #15]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d175      	bne.n	801aa02 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a916:	4b3f      	ldr	r3, [pc, #252]	; (801aa14 <HAL_FLASHEx_Erase+0x12c>)
 801a918:	2200      	movs	r2, #0
 801a91a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801a91c:	4b3e      	ldr	r3, [pc, #248]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a924:	2b00      	cmp	r3, #0
 801a926:	d013      	beq.n	801a950 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801a928:	4b3b      	ldr	r3, [pc, #236]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a930:	2b00      	cmp	r3, #0
 801a932:	d009      	beq.n	801a948 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801a934:	4b38      	ldr	r3, [pc, #224]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	4a37      	ldr	r2, [pc, #220]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a93a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a93e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801a940:	4b34      	ldr	r3, [pc, #208]	; (801aa14 <HAL_FLASHEx_Erase+0x12c>)
 801a942:	2203      	movs	r2, #3
 801a944:	771a      	strb	r2, [r3, #28]
 801a946:	e016      	b.n	801a976 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801a948:	4b32      	ldr	r3, [pc, #200]	; (801aa14 <HAL_FLASHEx_Erase+0x12c>)
 801a94a:	2201      	movs	r2, #1
 801a94c:	771a      	strb	r2, [r3, #28]
 801a94e:	e012      	b.n	801a976 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801a950:	4b31      	ldr	r3, [pc, #196]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d009      	beq.n	801a970 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801a95c:	4b2e      	ldr	r3, [pc, #184]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	4a2d      	ldr	r2, [pc, #180]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a966:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801a968:	4b2a      	ldr	r3, [pc, #168]	; (801aa14 <HAL_FLASHEx_Erase+0x12c>)
 801a96a:	2202      	movs	r2, #2
 801a96c:	771a      	strb	r2, [r3, #28]
 801a96e:	e002      	b.n	801a976 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801a970:	4b28      	ldr	r3, [pc, #160]	; (801aa14 <HAL_FLASHEx_Erase+0x12c>)
 801a972:	2200      	movs	r2, #0
 801a974:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	2b01      	cmp	r3, #1
 801a97c:	d111      	bne.n	801a9a2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	685b      	ldr	r3, [r3, #4]
 801a982:	4618      	mov	r0, r3
 801a984:	f000 f84a 	bl	801aa1c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a98c:	f7ff fefc 	bl	801a788 <FLASH_WaitForLastOperation>
 801a990:	4603      	mov	r3, r0
 801a992:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801a994:	4b20      	ldr	r3, [pc, #128]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a996:	695b      	ldr	r3, [r3, #20]
 801a998:	4a1f      	ldr	r2, [pc, #124]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a99a:	f023 0304 	bic.w	r3, r3, #4
 801a99e:	6153      	str	r3, [r2, #20]
 801a9a0:	e02d      	b.n	801a9fe <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801a9a2:	683b      	ldr	r3, [r7, #0]
 801a9a4:	f04f 32ff 	mov.w	r2, #4294967295
 801a9a8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	689b      	ldr	r3, [r3, #8]
 801a9ae:	60bb      	str	r3, [r7, #8]
 801a9b0:	e01d      	b.n	801a9ee <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	685b      	ldr	r3, [r3, #4]
 801a9b6:	4619      	mov	r1, r3
 801a9b8:	68b8      	ldr	r0, [r7, #8]
 801a9ba:	f000 f84d 	bl	801aa58 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a9be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a9c2:	f7ff fee1 	bl	801a788 <FLASH_WaitForLastOperation>
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801a9ca:	4b13      	ldr	r3, [pc, #76]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a9cc:	695b      	ldr	r3, [r3, #20]
 801a9ce:	4a12      	ldr	r2, [pc, #72]	; (801aa18 <HAL_FLASHEx_Erase+0x130>)
 801a9d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801a9d4:	f023 0302 	bic.w	r3, r3, #2
 801a9d8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801a9da:	7bfb      	ldrb	r3, [r7, #15]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d003      	beq.n	801a9e8 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	68ba      	ldr	r2, [r7, #8]
 801a9e4:	601a      	str	r2, [r3, #0]
          break;
 801a9e6:	e00a      	b.n	801a9fe <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	3301      	adds	r3, #1
 801a9ec:	60bb      	str	r3, [r7, #8]
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	689a      	ldr	r2, [r3, #8]
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	68db      	ldr	r3, [r3, #12]
 801a9f6:	4413      	add	r3, r2
 801a9f8:	68ba      	ldr	r2, [r7, #8]
 801a9fa:	429a      	cmp	r2, r3
 801a9fc:	d3d9      	bcc.n	801a9b2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801a9fe:	f000 f84f 	bl	801aaa0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801aa02:	4b04      	ldr	r3, [pc, #16]	; (801aa14 <HAL_FLASHEx_Erase+0x12c>)
 801aa04:	2200      	movs	r2, #0
 801aa06:	701a      	strb	r2, [r3, #0]

  return status;
 801aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa0a:	4618      	mov	r0, r3
 801aa0c:	3710      	adds	r7, #16
 801aa0e:	46bd      	mov	sp, r7
 801aa10:	bd80      	pop	{r7, pc}
 801aa12:	bf00      	nop
 801aa14:	2000000c 	.word	0x2000000c
 801aa18:	40022000 	.word	0x40022000

0801aa1c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801aa1c:	b480      	push	{r7}
 801aa1e:	b083      	sub	sp, #12
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	f003 0301 	and.w	r3, r3, #1
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d005      	beq.n	801aa3a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801aa2e:	4b09      	ldr	r3, [pc, #36]	; (801aa54 <FLASH_MassErase+0x38>)
 801aa30:	695b      	ldr	r3, [r3, #20]
 801aa32:	4a08      	ldr	r2, [pc, #32]	; (801aa54 <FLASH_MassErase+0x38>)
 801aa34:	f043 0304 	orr.w	r3, r3, #4
 801aa38:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801aa3a:	4b06      	ldr	r3, [pc, #24]	; (801aa54 <FLASH_MassErase+0x38>)
 801aa3c:	695b      	ldr	r3, [r3, #20]
 801aa3e:	4a05      	ldr	r2, [pc, #20]	; (801aa54 <FLASH_MassErase+0x38>)
 801aa40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801aa44:	6153      	str	r3, [r2, #20]
}
 801aa46:	bf00      	nop
 801aa48:	370c      	adds	r7, #12
 801aa4a:	46bd      	mov	sp, r7
 801aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa50:	4770      	bx	lr
 801aa52:	bf00      	nop
 801aa54:	40022000 	.word	0x40022000

0801aa58 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801aa58:	b480      	push	{r7}
 801aa5a:	b083      	sub	sp, #12
 801aa5c:	af00      	add	r7, sp, #0
 801aa5e:	6078      	str	r0, [r7, #4]
 801aa60:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801aa62:	4b0e      	ldr	r3, [pc, #56]	; (801aa9c <FLASH_PageErase+0x44>)
 801aa64:	695b      	ldr	r3, [r3, #20]
 801aa66:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	00db      	lsls	r3, r3, #3
 801aa6e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801aa72:	490a      	ldr	r1, [pc, #40]	; (801aa9c <FLASH_PageErase+0x44>)
 801aa74:	4313      	orrs	r3, r2
 801aa76:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801aa78:	4b08      	ldr	r3, [pc, #32]	; (801aa9c <FLASH_PageErase+0x44>)
 801aa7a:	695b      	ldr	r3, [r3, #20]
 801aa7c:	4a07      	ldr	r2, [pc, #28]	; (801aa9c <FLASH_PageErase+0x44>)
 801aa7e:	f043 0302 	orr.w	r3, r3, #2
 801aa82:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801aa84:	4b05      	ldr	r3, [pc, #20]	; (801aa9c <FLASH_PageErase+0x44>)
 801aa86:	695b      	ldr	r3, [r3, #20]
 801aa88:	4a04      	ldr	r2, [pc, #16]	; (801aa9c <FLASH_PageErase+0x44>)
 801aa8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801aa8e:	6153      	str	r3, [r2, #20]
}
 801aa90:	bf00      	nop
 801aa92:	370c      	adds	r7, #12
 801aa94:	46bd      	mov	sp, r7
 801aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9a:	4770      	bx	lr
 801aa9c:	40022000 	.word	0x40022000

0801aaa0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801aaa0:	b480      	push	{r7}
 801aaa2:	b083      	sub	sp, #12
 801aaa4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801aaa6:	4b21      	ldr	r3, [pc, #132]	; (801ab2c <FLASH_FlushCaches+0x8c>)
 801aaa8:	7f1b      	ldrb	r3, [r3, #28]
 801aaaa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801aaac:	79fb      	ldrb	r3, [r7, #7]
 801aaae:	2b01      	cmp	r3, #1
 801aab0:	d002      	beq.n	801aab8 <FLASH_FlushCaches+0x18>
 801aab2:	79fb      	ldrb	r3, [r7, #7]
 801aab4:	2b03      	cmp	r3, #3
 801aab6:	d117      	bne.n	801aae8 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801aab8:	4b1d      	ldr	r3, [pc, #116]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	4a1c      	ldr	r2, [pc, #112]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aabe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801aac2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801aac4:	4b1a      	ldr	r3, [pc, #104]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	4a19      	ldr	r2, [pc, #100]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aaca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801aace:	6013      	str	r3, [r2, #0]
 801aad0:	4b17      	ldr	r3, [pc, #92]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	4a16      	ldr	r2, [pc, #88]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801aada:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801aadc:	4b14      	ldr	r3, [pc, #80]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	4a13      	ldr	r2, [pc, #76]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801aae6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801aae8:	79fb      	ldrb	r3, [r7, #7]
 801aaea:	2b02      	cmp	r3, #2
 801aaec:	d002      	beq.n	801aaf4 <FLASH_FlushCaches+0x54>
 801aaee:	79fb      	ldrb	r3, [r7, #7]
 801aaf0:	2b03      	cmp	r3, #3
 801aaf2:	d111      	bne.n	801ab18 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801aaf4:	4b0e      	ldr	r3, [pc, #56]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	4a0d      	ldr	r2, [pc, #52]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801aafa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801aafe:	6013      	str	r3, [r2, #0]
 801ab00:	4b0b      	ldr	r3, [pc, #44]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4a0a      	ldr	r2, [pc, #40]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801ab06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ab0a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801ab0c:	4b08      	ldr	r3, [pc, #32]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	4a07      	ldr	r2, [pc, #28]	; (801ab30 <FLASH_FlushCaches+0x90>)
 801ab12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801ab16:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801ab18:	4b04      	ldr	r3, [pc, #16]	; (801ab2c <FLASH_FlushCaches+0x8c>)
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	771a      	strb	r2, [r3, #28]
}
 801ab1e:	bf00      	nop
 801ab20:	370c      	adds	r7, #12
 801ab22:	46bd      	mov	sp, r7
 801ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab28:	4770      	bx	lr
 801ab2a:	bf00      	nop
 801ab2c:	2000000c 	.word	0x2000000c
 801ab30:	40022000 	.word	0x40022000

0801ab34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801ab34:	b480      	push	{r7}
 801ab36:	b087      	sub	sp, #28
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
 801ab3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801ab3e:	2300      	movs	r3, #0
 801ab40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801ab42:	e15a      	b.n	801adfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801ab44:	683b      	ldr	r3, [r7, #0]
 801ab46:	681a      	ldr	r2, [r3, #0]
 801ab48:	2101      	movs	r1, #1
 801ab4a:	697b      	ldr	r3, [r7, #20]
 801ab4c:	fa01 f303 	lsl.w	r3, r1, r3
 801ab50:	4013      	ands	r3, r2
 801ab52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	f000 814c 	beq.w	801adf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801ab5c:	683b      	ldr	r3, [r7, #0]
 801ab5e:	685b      	ldr	r3, [r3, #4]
 801ab60:	f003 0303 	and.w	r3, r3, #3
 801ab64:	2b01      	cmp	r3, #1
 801ab66:	d005      	beq.n	801ab74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801ab68:	683b      	ldr	r3, [r7, #0]
 801ab6a:	685b      	ldr	r3, [r3, #4]
 801ab6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801ab70:	2b02      	cmp	r3, #2
 801ab72:	d130      	bne.n	801abd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	689b      	ldr	r3, [r3, #8]
 801ab78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801ab7a:	697b      	ldr	r3, [r7, #20]
 801ab7c:	005b      	lsls	r3, r3, #1
 801ab7e:	2203      	movs	r2, #3
 801ab80:	fa02 f303 	lsl.w	r3, r2, r3
 801ab84:	43db      	mvns	r3, r3
 801ab86:	693a      	ldr	r2, [r7, #16]
 801ab88:	4013      	ands	r3, r2
 801ab8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801ab8c:	683b      	ldr	r3, [r7, #0]
 801ab8e:	68da      	ldr	r2, [r3, #12]
 801ab90:	697b      	ldr	r3, [r7, #20]
 801ab92:	005b      	lsls	r3, r3, #1
 801ab94:	fa02 f303 	lsl.w	r3, r2, r3
 801ab98:	693a      	ldr	r2, [r7, #16]
 801ab9a:	4313      	orrs	r3, r2
 801ab9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	693a      	ldr	r2, [r7, #16]
 801aba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	685b      	ldr	r3, [r3, #4]
 801aba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801abaa:	2201      	movs	r2, #1
 801abac:	697b      	ldr	r3, [r7, #20]
 801abae:	fa02 f303 	lsl.w	r3, r2, r3
 801abb2:	43db      	mvns	r3, r3
 801abb4:	693a      	ldr	r2, [r7, #16]
 801abb6:	4013      	ands	r3, r2
 801abb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801abba:	683b      	ldr	r3, [r7, #0]
 801abbc:	685b      	ldr	r3, [r3, #4]
 801abbe:	091b      	lsrs	r3, r3, #4
 801abc0:	f003 0201 	and.w	r2, r3, #1
 801abc4:	697b      	ldr	r3, [r7, #20]
 801abc6:	fa02 f303 	lsl.w	r3, r2, r3
 801abca:	693a      	ldr	r2, [r7, #16]
 801abcc:	4313      	orrs	r3, r2
 801abce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	693a      	ldr	r2, [r7, #16]
 801abd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801abd6:	683b      	ldr	r3, [r7, #0]
 801abd8:	685b      	ldr	r3, [r3, #4]
 801abda:	f003 0303 	and.w	r3, r3, #3
 801abde:	2b03      	cmp	r3, #3
 801abe0:	d017      	beq.n	801ac12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	68db      	ldr	r3, [r3, #12]
 801abe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801abe8:	697b      	ldr	r3, [r7, #20]
 801abea:	005b      	lsls	r3, r3, #1
 801abec:	2203      	movs	r2, #3
 801abee:	fa02 f303 	lsl.w	r3, r2, r3
 801abf2:	43db      	mvns	r3, r3
 801abf4:	693a      	ldr	r2, [r7, #16]
 801abf6:	4013      	ands	r3, r2
 801abf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	689a      	ldr	r2, [r3, #8]
 801abfe:	697b      	ldr	r3, [r7, #20]
 801ac00:	005b      	lsls	r3, r3, #1
 801ac02:	fa02 f303 	lsl.w	r3, r2, r3
 801ac06:	693a      	ldr	r2, [r7, #16]
 801ac08:	4313      	orrs	r3, r2
 801ac0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	693a      	ldr	r2, [r7, #16]
 801ac10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ac12:	683b      	ldr	r3, [r7, #0]
 801ac14:	685b      	ldr	r3, [r3, #4]
 801ac16:	f003 0303 	and.w	r3, r3, #3
 801ac1a:	2b02      	cmp	r3, #2
 801ac1c:	d123      	bne.n	801ac66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ac1e:	697b      	ldr	r3, [r7, #20]
 801ac20:	08da      	lsrs	r2, r3, #3
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	3208      	adds	r2, #8
 801ac26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801ac2c:	697b      	ldr	r3, [r7, #20]
 801ac2e:	f003 0307 	and.w	r3, r3, #7
 801ac32:	009b      	lsls	r3, r3, #2
 801ac34:	220f      	movs	r2, #15
 801ac36:	fa02 f303 	lsl.w	r3, r2, r3
 801ac3a:	43db      	mvns	r3, r3
 801ac3c:	693a      	ldr	r2, [r7, #16]
 801ac3e:	4013      	ands	r3, r2
 801ac40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801ac42:	683b      	ldr	r3, [r7, #0]
 801ac44:	691a      	ldr	r2, [r3, #16]
 801ac46:	697b      	ldr	r3, [r7, #20]
 801ac48:	f003 0307 	and.w	r3, r3, #7
 801ac4c:	009b      	lsls	r3, r3, #2
 801ac4e:	fa02 f303 	lsl.w	r3, r2, r3
 801ac52:	693a      	ldr	r2, [r7, #16]
 801ac54:	4313      	orrs	r3, r2
 801ac56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801ac58:	697b      	ldr	r3, [r7, #20]
 801ac5a:	08da      	lsrs	r2, r3, #3
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	3208      	adds	r2, #8
 801ac60:	6939      	ldr	r1, [r7, #16]
 801ac62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801ac6c:	697b      	ldr	r3, [r7, #20]
 801ac6e:	005b      	lsls	r3, r3, #1
 801ac70:	2203      	movs	r2, #3
 801ac72:	fa02 f303 	lsl.w	r3, r2, r3
 801ac76:	43db      	mvns	r3, r3
 801ac78:	693a      	ldr	r2, [r7, #16]
 801ac7a:	4013      	ands	r3, r2
 801ac7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801ac7e:	683b      	ldr	r3, [r7, #0]
 801ac80:	685b      	ldr	r3, [r3, #4]
 801ac82:	f003 0203 	and.w	r2, r3, #3
 801ac86:	697b      	ldr	r3, [r7, #20]
 801ac88:	005b      	lsls	r3, r3, #1
 801ac8a:	fa02 f303 	lsl.w	r3, r2, r3
 801ac8e:	693a      	ldr	r2, [r7, #16]
 801ac90:	4313      	orrs	r3, r2
 801ac92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	693a      	ldr	r2, [r7, #16]
 801ac98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801ac9a:	683b      	ldr	r3, [r7, #0]
 801ac9c:	685b      	ldr	r3, [r3, #4]
 801ac9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	f000 80a6 	beq.w	801adf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801aca8:	4b5b      	ldr	r3, [pc, #364]	; (801ae18 <HAL_GPIO_Init+0x2e4>)
 801acaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801acac:	4a5a      	ldr	r2, [pc, #360]	; (801ae18 <HAL_GPIO_Init+0x2e4>)
 801acae:	f043 0301 	orr.w	r3, r3, #1
 801acb2:	6613      	str	r3, [r2, #96]	; 0x60
 801acb4:	4b58      	ldr	r3, [pc, #352]	; (801ae18 <HAL_GPIO_Init+0x2e4>)
 801acb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801acb8:	f003 0301 	and.w	r3, r3, #1
 801acbc:	60bb      	str	r3, [r7, #8]
 801acbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801acc0:	4a56      	ldr	r2, [pc, #344]	; (801ae1c <HAL_GPIO_Init+0x2e8>)
 801acc2:	697b      	ldr	r3, [r7, #20]
 801acc4:	089b      	lsrs	r3, r3, #2
 801acc6:	3302      	adds	r3, #2
 801acc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801accc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801acce:	697b      	ldr	r3, [r7, #20]
 801acd0:	f003 0303 	and.w	r3, r3, #3
 801acd4:	009b      	lsls	r3, r3, #2
 801acd6:	220f      	movs	r2, #15
 801acd8:	fa02 f303 	lsl.w	r3, r2, r3
 801acdc:	43db      	mvns	r3, r3
 801acde:	693a      	ldr	r2, [r7, #16]
 801ace0:	4013      	ands	r3, r2
 801ace2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801acea:	d01f      	beq.n	801ad2c <HAL_GPIO_Init+0x1f8>
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	4a4c      	ldr	r2, [pc, #304]	; (801ae20 <HAL_GPIO_Init+0x2ec>)
 801acf0:	4293      	cmp	r3, r2
 801acf2:	d019      	beq.n	801ad28 <HAL_GPIO_Init+0x1f4>
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	4a4b      	ldr	r2, [pc, #300]	; (801ae24 <HAL_GPIO_Init+0x2f0>)
 801acf8:	4293      	cmp	r3, r2
 801acfa:	d013      	beq.n	801ad24 <HAL_GPIO_Init+0x1f0>
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	4a4a      	ldr	r2, [pc, #296]	; (801ae28 <HAL_GPIO_Init+0x2f4>)
 801ad00:	4293      	cmp	r3, r2
 801ad02:	d00d      	beq.n	801ad20 <HAL_GPIO_Init+0x1ec>
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	4a49      	ldr	r2, [pc, #292]	; (801ae2c <HAL_GPIO_Init+0x2f8>)
 801ad08:	4293      	cmp	r3, r2
 801ad0a:	d007      	beq.n	801ad1c <HAL_GPIO_Init+0x1e8>
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	4a48      	ldr	r2, [pc, #288]	; (801ae30 <HAL_GPIO_Init+0x2fc>)
 801ad10:	4293      	cmp	r3, r2
 801ad12:	d101      	bne.n	801ad18 <HAL_GPIO_Init+0x1e4>
 801ad14:	2305      	movs	r3, #5
 801ad16:	e00a      	b.n	801ad2e <HAL_GPIO_Init+0x1fa>
 801ad18:	2306      	movs	r3, #6
 801ad1a:	e008      	b.n	801ad2e <HAL_GPIO_Init+0x1fa>
 801ad1c:	2304      	movs	r3, #4
 801ad1e:	e006      	b.n	801ad2e <HAL_GPIO_Init+0x1fa>
 801ad20:	2303      	movs	r3, #3
 801ad22:	e004      	b.n	801ad2e <HAL_GPIO_Init+0x1fa>
 801ad24:	2302      	movs	r3, #2
 801ad26:	e002      	b.n	801ad2e <HAL_GPIO_Init+0x1fa>
 801ad28:	2301      	movs	r3, #1
 801ad2a:	e000      	b.n	801ad2e <HAL_GPIO_Init+0x1fa>
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	697a      	ldr	r2, [r7, #20]
 801ad30:	f002 0203 	and.w	r2, r2, #3
 801ad34:	0092      	lsls	r2, r2, #2
 801ad36:	4093      	lsls	r3, r2
 801ad38:	693a      	ldr	r2, [r7, #16]
 801ad3a:	4313      	orrs	r3, r2
 801ad3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801ad3e:	4937      	ldr	r1, [pc, #220]	; (801ae1c <HAL_GPIO_Init+0x2e8>)
 801ad40:	697b      	ldr	r3, [r7, #20]
 801ad42:	089b      	lsrs	r3, r3, #2
 801ad44:	3302      	adds	r3, #2
 801ad46:	693a      	ldr	r2, [r7, #16]
 801ad48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801ad4c:	4b39      	ldr	r3, [pc, #228]	; (801ae34 <HAL_GPIO_Init+0x300>)
 801ad4e:	689b      	ldr	r3, [r3, #8]
 801ad50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	43db      	mvns	r3, r3
 801ad56:	693a      	ldr	r2, [r7, #16]
 801ad58:	4013      	ands	r3, r2
 801ad5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ad5c:	683b      	ldr	r3, [r7, #0]
 801ad5e:	685b      	ldr	r3, [r3, #4]
 801ad60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d003      	beq.n	801ad70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801ad68:	693a      	ldr	r2, [r7, #16]
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	4313      	orrs	r3, r2
 801ad6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801ad70:	4a30      	ldr	r2, [pc, #192]	; (801ae34 <HAL_GPIO_Init+0x300>)
 801ad72:	693b      	ldr	r3, [r7, #16]
 801ad74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801ad76:	4b2f      	ldr	r3, [pc, #188]	; (801ae34 <HAL_GPIO_Init+0x300>)
 801ad78:	68db      	ldr	r3, [r3, #12]
 801ad7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	43db      	mvns	r3, r3
 801ad80:	693a      	ldr	r2, [r7, #16]
 801ad82:	4013      	ands	r3, r2
 801ad84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	685b      	ldr	r3, [r3, #4]
 801ad8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d003      	beq.n	801ad9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801ad92:	693a      	ldr	r2, [r7, #16]
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	4313      	orrs	r3, r2
 801ad98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801ad9a:	4a26      	ldr	r2, [pc, #152]	; (801ae34 <HAL_GPIO_Init+0x300>)
 801ad9c:	693b      	ldr	r3, [r7, #16]
 801ad9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801ada0:	4b24      	ldr	r3, [pc, #144]	; (801ae34 <HAL_GPIO_Init+0x300>)
 801ada2:	685b      	ldr	r3, [r3, #4]
 801ada4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	43db      	mvns	r3, r3
 801adaa:	693a      	ldr	r2, [r7, #16]
 801adac:	4013      	ands	r3, r2
 801adae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801adb0:	683b      	ldr	r3, [r7, #0]
 801adb2:	685b      	ldr	r3, [r3, #4]
 801adb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d003      	beq.n	801adc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801adbc:	693a      	ldr	r2, [r7, #16]
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	4313      	orrs	r3, r2
 801adc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801adc4:	4a1b      	ldr	r2, [pc, #108]	; (801ae34 <HAL_GPIO_Init+0x300>)
 801adc6:	693b      	ldr	r3, [r7, #16]
 801adc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801adca:	4b1a      	ldr	r3, [pc, #104]	; (801ae34 <HAL_GPIO_Init+0x300>)
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	43db      	mvns	r3, r3
 801add4:	693a      	ldr	r2, [r7, #16]
 801add6:	4013      	ands	r3, r2
 801add8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	685b      	ldr	r3, [r3, #4]
 801adde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d003      	beq.n	801adee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801ade6:	693a      	ldr	r2, [r7, #16]
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	4313      	orrs	r3, r2
 801adec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801adee:	4a11      	ldr	r2, [pc, #68]	; (801ae34 <HAL_GPIO_Init+0x300>)
 801adf0:	693b      	ldr	r3, [r7, #16]
 801adf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801adf4:	697b      	ldr	r3, [r7, #20]
 801adf6:	3301      	adds	r3, #1
 801adf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	681a      	ldr	r2, [r3, #0]
 801adfe:	697b      	ldr	r3, [r7, #20]
 801ae00:	fa22 f303 	lsr.w	r3, r2, r3
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	f47f ae9d 	bne.w	801ab44 <HAL_GPIO_Init+0x10>
  }
}
 801ae0a:	bf00      	nop
 801ae0c:	bf00      	nop
 801ae0e:	371c      	adds	r7, #28
 801ae10:	46bd      	mov	sp, r7
 801ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae16:	4770      	bx	lr
 801ae18:	40021000 	.word	0x40021000
 801ae1c:	40010000 	.word	0x40010000
 801ae20:	48000400 	.word	0x48000400
 801ae24:	48000800 	.word	0x48000800
 801ae28:	48000c00 	.word	0x48000c00
 801ae2c:	48001000 	.word	0x48001000
 801ae30:	48001400 	.word	0x48001400
 801ae34:	40010400 	.word	0x40010400

0801ae38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ae38:	b480      	push	{r7}
 801ae3a:	b083      	sub	sp, #12
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
 801ae40:	460b      	mov	r3, r1
 801ae42:	807b      	strh	r3, [r7, #2]
 801ae44:	4613      	mov	r3, r2
 801ae46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ae48:	787b      	ldrb	r3, [r7, #1]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d003      	beq.n	801ae56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801ae4e:	887a      	ldrh	r2, [r7, #2]
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801ae54:	e002      	b.n	801ae5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801ae56:	887a      	ldrh	r2, [r7, #2]
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ae5c:	bf00      	nop
 801ae5e:	370c      	adds	r7, #12
 801ae60:	46bd      	mov	sp, r7
 801ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae66:	4770      	bx	lr

0801ae68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801ae68:	b480      	push	{r7}
 801ae6a:	b085      	sub	sp, #20
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d141      	bne.n	801aefa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801ae76:	4b4b      	ldr	r3, [pc, #300]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ae7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ae82:	d131      	bne.n	801aee8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ae84:	4b47      	ldr	r3, [pc, #284]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ae8a:	4a46      	ldr	r2, [pc, #280]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ae90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801ae94:	4b43      	ldr	r3, [pc, #268]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ae9c:	4a41      	ldr	r2, [pc, #260]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801aea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801aea4:	4b40      	ldr	r3, [pc, #256]	; (801afa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	2232      	movs	r2, #50	; 0x32
 801aeaa:	fb02 f303 	mul.w	r3, r2, r3
 801aeae:	4a3f      	ldr	r2, [pc, #252]	; (801afac <HAL_PWREx_ControlVoltageScaling+0x144>)
 801aeb0:	fba2 2303 	umull	r2, r3, r2, r3
 801aeb4:	0c9b      	lsrs	r3, r3, #18
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801aeba:	e002      	b.n	801aec2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	3b01      	subs	r3, #1
 801aec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801aec2:	4b38      	ldr	r3, [pc, #224]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aec4:	695b      	ldr	r3, [r3, #20]
 801aec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aeca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aece:	d102      	bne.n	801aed6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d1f2      	bne.n	801aebc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801aed6:	4b33      	ldr	r3, [pc, #204]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aed8:	695b      	ldr	r3, [r3, #20]
 801aeda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aee2:	d158      	bne.n	801af96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801aee4:	2303      	movs	r3, #3
 801aee6:	e057      	b.n	801af98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801aee8:	4b2e      	ldr	r3, [pc, #184]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aeea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801aeee:	4a2d      	ldr	r2, [pc, #180]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801aef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801aef8:	e04d      	b.n	801af96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801af00:	d141      	bne.n	801af86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801af02:	4b28      	ldr	r3, [pc, #160]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801af0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801af0e:	d131      	bne.n	801af74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801af10:	4b24      	ldr	r3, [pc, #144]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801af16:	4a23      	ldr	r2, [pc, #140]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801af1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801af20:	4b20      	ldr	r3, [pc, #128]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801af28:	4a1e      	ldr	r2, [pc, #120]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801af2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801af30:	4b1d      	ldr	r3, [pc, #116]	; (801afa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	2232      	movs	r2, #50	; 0x32
 801af36:	fb02 f303 	mul.w	r3, r2, r3
 801af3a:	4a1c      	ldr	r2, [pc, #112]	; (801afac <HAL_PWREx_ControlVoltageScaling+0x144>)
 801af3c:	fba2 2303 	umull	r2, r3, r2, r3
 801af40:	0c9b      	lsrs	r3, r3, #18
 801af42:	3301      	adds	r3, #1
 801af44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801af46:	e002      	b.n	801af4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	3b01      	subs	r3, #1
 801af4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801af4e:	4b15      	ldr	r3, [pc, #84]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af50:	695b      	ldr	r3, [r3, #20]
 801af52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801af56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801af5a:	d102      	bne.n	801af62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d1f2      	bne.n	801af48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801af62:	4b10      	ldr	r3, [pc, #64]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af64:	695b      	ldr	r3, [r3, #20]
 801af66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801af6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801af6e:	d112      	bne.n	801af96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801af70:	2303      	movs	r3, #3
 801af72:	e011      	b.n	801af98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801af74:	4b0b      	ldr	r3, [pc, #44]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801af7a:	4a0a      	ldr	r2, [pc, #40]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801af80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801af84:	e007      	b.n	801af96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801af86:	4b07      	ldr	r3, [pc, #28]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801af8e:	4a05      	ldr	r2, [pc, #20]	; (801afa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801af90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801af94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801af96:	2300      	movs	r3, #0
}
 801af98:	4618      	mov	r0, r3
 801af9a:	3714      	adds	r7, #20
 801af9c:	46bd      	mov	sp, r7
 801af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa2:	4770      	bx	lr
 801afa4:	40007000 	.word	0x40007000
 801afa8:	20000000 	.word	0x20000000
 801afac:	431bde83 	.word	0x431bde83

0801afb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801afb0:	b480      	push	{r7}
 801afb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801afb4:	4b05      	ldr	r3, [pc, #20]	; (801afcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801afb6:	689b      	ldr	r3, [r3, #8]
 801afb8:	4a04      	ldr	r2, [pc, #16]	; (801afcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801afba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801afbe:	6093      	str	r3, [r2, #8]
}
 801afc0:	bf00      	nop
 801afc2:	46bd      	mov	sp, r7
 801afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afc8:	4770      	bx	lr
 801afca:	bf00      	nop
 801afcc:	40007000 	.word	0x40007000

0801afd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b088      	sub	sp, #32
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d101      	bne.n	801afe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801afde:	2301      	movs	r3, #1
 801afe0:	e306      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	f003 0301 	and.w	r3, r3, #1
 801afea:	2b00      	cmp	r3, #0
 801afec:	d075      	beq.n	801b0da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801afee:	4b97      	ldr	r3, [pc, #604]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801aff0:	689b      	ldr	r3, [r3, #8]
 801aff2:	f003 030c 	and.w	r3, r3, #12
 801aff6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801aff8:	4b94      	ldr	r3, [pc, #592]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801affa:	68db      	ldr	r3, [r3, #12]
 801affc:	f003 0303 	and.w	r3, r3, #3
 801b000:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801b002:	69bb      	ldr	r3, [r7, #24]
 801b004:	2b0c      	cmp	r3, #12
 801b006:	d102      	bne.n	801b00e <HAL_RCC_OscConfig+0x3e>
 801b008:	697b      	ldr	r3, [r7, #20]
 801b00a:	2b03      	cmp	r3, #3
 801b00c:	d002      	beq.n	801b014 <HAL_RCC_OscConfig+0x44>
 801b00e:	69bb      	ldr	r3, [r7, #24]
 801b010:	2b08      	cmp	r3, #8
 801b012:	d10b      	bne.n	801b02c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b014:	4b8d      	ldr	r3, [pc, #564]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d05b      	beq.n	801b0d8 <HAL_RCC_OscConfig+0x108>
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	685b      	ldr	r3, [r3, #4]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d157      	bne.n	801b0d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801b028:	2301      	movs	r3, #1
 801b02a:	e2e1      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	685b      	ldr	r3, [r3, #4]
 801b030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b034:	d106      	bne.n	801b044 <HAL_RCC_OscConfig+0x74>
 801b036:	4b85      	ldr	r3, [pc, #532]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	4a84      	ldr	r2, [pc, #528]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b03c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b040:	6013      	str	r3, [r2, #0]
 801b042:	e01d      	b.n	801b080 <HAL_RCC_OscConfig+0xb0>
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	685b      	ldr	r3, [r3, #4]
 801b048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b04c:	d10c      	bne.n	801b068 <HAL_RCC_OscConfig+0x98>
 801b04e:	4b7f      	ldr	r3, [pc, #508]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	4a7e      	ldr	r2, [pc, #504]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b058:	6013      	str	r3, [r2, #0]
 801b05a:	4b7c      	ldr	r3, [pc, #496]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	4a7b      	ldr	r2, [pc, #492]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b064:	6013      	str	r3, [r2, #0]
 801b066:	e00b      	b.n	801b080 <HAL_RCC_OscConfig+0xb0>
 801b068:	4b78      	ldr	r3, [pc, #480]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	4a77      	ldr	r2, [pc, #476]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b06e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b072:	6013      	str	r3, [r2, #0]
 801b074:	4b75      	ldr	r3, [pc, #468]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	4a74      	ldr	r2, [pc, #464]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b07a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b07e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	685b      	ldr	r3, [r3, #4]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d013      	beq.n	801b0b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b088:	f7fc fd0e 	bl	8017aa8 <HAL_GetTick>
 801b08c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b08e:	e008      	b.n	801b0a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b090:	f7fc fd0a 	bl	8017aa8 <HAL_GetTick>
 801b094:	4602      	mov	r2, r0
 801b096:	693b      	ldr	r3, [r7, #16]
 801b098:	1ad3      	subs	r3, r2, r3
 801b09a:	2b64      	cmp	r3, #100	; 0x64
 801b09c:	d901      	bls.n	801b0a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801b09e:	2303      	movs	r3, #3
 801b0a0:	e2a6      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b0a2:	4b6a      	ldr	r3, [pc, #424]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d0f0      	beq.n	801b090 <HAL_RCC_OscConfig+0xc0>
 801b0ae:	e014      	b.n	801b0da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b0b0:	f7fc fcfa 	bl	8017aa8 <HAL_GetTick>
 801b0b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801b0b6:	e008      	b.n	801b0ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b0b8:	f7fc fcf6 	bl	8017aa8 <HAL_GetTick>
 801b0bc:	4602      	mov	r2, r0
 801b0be:	693b      	ldr	r3, [r7, #16]
 801b0c0:	1ad3      	subs	r3, r2, r3
 801b0c2:	2b64      	cmp	r3, #100	; 0x64
 801b0c4:	d901      	bls.n	801b0ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b0c6:	2303      	movs	r3, #3
 801b0c8:	e292      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801b0ca:	4b60      	ldr	r3, [pc, #384]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d1f0      	bne.n	801b0b8 <HAL_RCC_OscConfig+0xe8>
 801b0d6:	e000      	b.n	801b0da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b0d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	f003 0302 	and.w	r3, r3, #2
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d075      	beq.n	801b1d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b0e6:	4b59      	ldr	r3, [pc, #356]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b0e8:	689b      	ldr	r3, [r3, #8]
 801b0ea:	f003 030c 	and.w	r3, r3, #12
 801b0ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b0f0:	4b56      	ldr	r3, [pc, #344]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b0f2:	68db      	ldr	r3, [r3, #12]
 801b0f4:	f003 0303 	and.w	r3, r3, #3
 801b0f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801b0fa:	69bb      	ldr	r3, [r7, #24]
 801b0fc:	2b0c      	cmp	r3, #12
 801b0fe:	d102      	bne.n	801b106 <HAL_RCC_OscConfig+0x136>
 801b100:	697b      	ldr	r3, [r7, #20]
 801b102:	2b02      	cmp	r3, #2
 801b104:	d002      	beq.n	801b10c <HAL_RCC_OscConfig+0x13c>
 801b106:	69bb      	ldr	r3, [r7, #24]
 801b108:	2b04      	cmp	r3, #4
 801b10a:	d11f      	bne.n	801b14c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b10c:	4b4f      	ldr	r3, [pc, #316]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b114:	2b00      	cmp	r3, #0
 801b116:	d005      	beq.n	801b124 <HAL_RCC_OscConfig+0x154>
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	68db      	ldr	r3, [r3, #12]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d101      	bne.n	801b124 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801b120:	2301      	movs	r3, #1
 801b122:	e265      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b124:	4b49      	ldr	r3, [pc, #292]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b126:	685b      	ldr	r3, [r3, #4]
 801b128:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	691b      	ldr	r3, [r3, #16]
 801b130:	061b      	lsls	r3, r3, #24
 801b132:	4946      	ldr	r1, [pc, #280]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b134:	4313      	orrs	r3, r2
 801b136:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801b138:	4b45      	ldr	r3, [pc, #276]	; (801b250 <HAL_RCC_OscConfig+0x280>)
 801b13a:	681b      	ldr	r3, [r3, #0]
 801b13c:	4618      	mov	r0, r3
 801b13e:	f7fc fc67 	bl	8017a10 <HAL_InitTick>
 801b142:	4603      	mov	r3, r0
 801b144:	2b00      	cmp	r3, #0
 801b146:	d043      	beq.n	801b1d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801b148:	2301      	movs	r3, #1
 801b14a:	e251      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	68db      	ldr	r3, [r3, #12]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d023      	beq.n	801b19c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b154:	4b3d      	ldr	r3, [pc, #244]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	4a3c      	ldr	r2, [pc, #240]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b15a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b15e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b160:	f7fc fca2 	bl	8017aa8 <HAL_GetTick>
 801b164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b166:	e008      	b.n	801b17a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b168:	f7fc fc9e 	bl	8017aa8 <HAL_GetTick>
 801b16c:	4602      	mov	r2, r0
 801b16e:	693b      	ldr	r3, [r7, #16]
 801b170:	1ad3      	subs	r3, r2, r3
 801b172:	2b02      	cmp	r3, #2
 801b174:	d901      	bls.n	801b17a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801b176:	2303      	movs	r3, #3
 801b178:	e23a      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b17a:	4b34      	ldr	r3, [pc, #208]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b182:	2b00      	cmp	r3, #0
 801b184:	d0f0      	beq.n	801b168 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b186:	4b31      	ldr	r3, [pc, #196]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b188:	685b      	ldr	r3, [r3, #4]
 801b18a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	691b      	ldr	r3, [r3, #16]
 801b192:	061b      	lsls	r3, r3, #24
 801b194:	492d      	ldr	r1, [pc, #180]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b196:	4313      	orrs	r3, r2
 801b198:	604b      	str	r3, [r1, #4]
 801b19a:	e01a      	b.n	801b1d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b19c:	4b2b      	ldr	r3, [pc, #172]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	4a2a      	ldr	r2, [pc, #168]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b1a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b1a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b1a8:	f7fc fc7e 	bl	8017aa8 <HAL_GetTick>
 801b1ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801b1ae:	e008      	b.n	801b1c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b1b0:	f7fc fc7a 	bl	8017aa8 <HAL_GetTick>
 801b1b4:	4602      	mov	r2, r0
 801b1b6:	693b      	ldr	r3, [r7, #16]
 801b1b8:	1ad3      	subs	r3, r2, r3
 801b1ba:	2b02      	cmp	r3, #2
 801b1bc:	d901      	bls.n	801b1c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801b1be:	2303      	movs	r3, #3
 801b1c0:	e216      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801b1c2:	4b22      	ldr	r3, [pc, #136]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d1f0      	bne.n	801b1b0 <HAL_RCC_OscConfig+0x1e0>
 801b1ce:	e000      	b.n	801b1d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b1d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	f003 0308 	and.w	r3, r3, #8
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d041      	beq.n	801b262 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	695b      	ldr	r3, [r3, #20]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d01c      	beq.n	801b220 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b1e6:	4b19      	ldr	r3, [pc, #100]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b1e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b1ec:	4a17      	ldr	r2, [pc, #92]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b1ee:	f043 0301 	orr.w	r3, r3, #1
 801b1f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b1f6:	f7fc fc57 	bl	8017aa8 <HAL_GetTick>
 801b1fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801b1fc:	e008      	b.n	801b210 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b1fe:	f7fc fc53 	bl	8017aa8 <HAL_GetTick>
 801b202:	4602      	mov	r2, r0
 801b204:	693b      	ldr	r3, [r7, #16]
 801b206:	1ad3      	subs	r3, r2, r3
 801b208:	2b02      	cmp	r3, #2
 801b20a:	d901      	bls.n	801b210 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801b20c:	2303      	movs	r3, #3
 801b20e:	e1ef      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801b210:	4b0e      	ldr	r3, [pc, #56]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b216:	f003 0302 	and.w	r3, r3, #2
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d0ef      	beq.n	801b1fe <HAL_RCC_OscConfig+0x22e>
 801b21e:	e020      	b.n	801b262 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b220:	4b0a      	ldr	r3, [pc, #40]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b226:	4a09      	ldr	r2, [pc, #36]	; (801b24c <HAL_RCC_OscConfig+0x27c>)
 801b228:	f023 0301 	bic.w	r3, r3, #1
 801b22c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b230:	f7fc fc3a 	bl	8017aa8 <HAL_GetTick>
 801b234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b236:	e00d      	b.n	801b254 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b238:	f7fc fc36 	bl	8017aa8 <HAL_GetTick>
 801b23c:	4602      	mov	r2, r0
 801b23e:	693b      	ldr	r3, [r7, #16]
 801b240:	1ad3      	subs	r3, r2, r3
 801b242:	2b02      	cmp	r3, #2
 801b244:	d906      	bls.n	801b254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801b246:	2303      	movs	r3, #3
 801b248:	e1d2      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
 801b24a:	bf00      	nop
 801b24c:	40021000 	.word	0x40021000
 801b250:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b254:	4b8c      	ldr	r3, [pc, #560]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b25a:	f003 0302 	and.w	r3, r3, #2
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d1ea      	bne.n	801b238 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	f003 0304 	and.w	r3, r3, #4
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	f000 80a6 	beq.w	801b3bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b270:	2300      	movs	r3, #0
 801b272:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801b274:	4b84      	ldr	r3, [pc, #528]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d101      	bne.n	801b284 <HAL_RCC_OscConfig+0x2b4>
 801b280:	2301      	movs	r3, #1
 801b282:	e000      	b.n	801b286 <HAL_RCC_OscConfig+0x2b6>
 801b284:	2300      	movs	r3, #0
 801b286:	2b00      	cmp	r3, #0
 801b288:	d00d      	beq.n	801b2a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b28a:	4b7f      	ldr	r3, [pc, #508]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b28e:	4a7e      	ldr	r2, [pc, #504]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b294:	6593      	str	r3, [r2, #88]	; 0x58
 801b296:	4b7c      	ldr	r3, [pc, #496]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b29a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b29e:	60fb      	str	r3, [r7, #12]
 801b2a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801b2a2:	2301      	movs	r3, #1
 801b2a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b2a6:	4b79      	ldr	r3, [pc, #484]	; (801b48c <HAL_RCC_OscConfig+0x4bc>)
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d118      	bne.n	801b2e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b2b2:	4b76      	ldr	r3, [pc, #472]	; (801b48c <HAL_RCC_OscConfig+0x4bc>)
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	4a75      	ldr	r2, [pc, #468]	; (801b48c <HAL_RCC_OscConfig+0x4bc>)
 801b2b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b2bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b2be:	f7fc fbf3 	bl	8017aa8 <HAL_GetTick>
 801b2c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b2c4:	e008      	b.n	801b2d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b2c6:	f7fc fbef 	bl	8017aa8 <HAL_GetTick>
 801b2ca:	4602      	mov	r2, r0
 801b2cc:	693b      	ldr	r3, [r7, #16]
 801b2ce:	1ad3      	subs	r3, r2, r3
 801b2d0:	2b02      	cmp	r3, #2
 801b2d2:	d901      	bls.n	801b2d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801b2d4:	2303      	movs	r3, #3
 801b2d6:	e18b      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b2d8:	4b6c      	ldr	r3, [pc, #432]	; (801b48c <HAL_RCC_OscConfig+0x4bc>)
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d0f0      	beq.n	801b2c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	689b      	ldr	r3, [r3, #8]
 801b2e8:	2b01      	cmp	r3, #1
 801b2ea:	d108      	bne.n	801b2fe <HAL_RCC_OscConfig+0x32e>
 801b2ec:	4b66      	ldr	r3, [pc, #408]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b2f2:	4a65      	ldr	r2, [pc, #404]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b2f4:	f043 0301 	orr.w	r3, r3, #1
 801b2f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b2fc:	e024      	b.n	801b348 <HAL_RCC_OscConfig+0x378>
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	689b      	ldr	r3, [r3, #8]
 801b302:	2b05      	cmp	r3, #5
 801b304:	d110      	bne.n	801b328 <HAL_RCC_OscConfig+0x358>
 801b306:	4b60      	ldr	r3, [pc, #384]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b30c:	4a5e      	ldr	r2, [pc, #376]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b30e:	f043 0304 	orr.w	r3, r3, #4
 801b312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b316:	4b5c      	ldr	r3, [pc, #368]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b31c:	4a5a      	ldr	r2, [pc, #360]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b31e:	f043 0301 	orr.w	r3, r3, #1
 801b322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b326:	e00f      	b.n	801b348 <HAL_RCC_OscConfig+0x378>
 801b328:	4b57      	ldr	r3, [pc, #348]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b32e:	4a56      	ldr	r2, [pc, #344]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b330:	f023 0301 	bic.w	r3, r3, #1
 801b334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b338:	4b53      	ldr	r3, [pc, #332]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b33e:	4a52      	ldr	r2, [pc, #328]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b340:	f023 0304 	bic.w	r3, r3, #4
 801b344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	689b      	ldr	r3, [r3, #8]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d016      	beq.n	801b37e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b350:	f7fc fbaa 	bl	8017aa8 <HAL_GetTick>
 801b354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b356:	e00a      	b.n	801b36e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b358:	f7fc fba6 	bl	8017aa8 <HAL_GetTick>
 801b35c:	4602      	mov	r2, r0
 801b35e:	693b      	ldr	r3, [r7, #16]
 801b360:	1ad3      	subs	r3, r2, r3
 801b362:	f241 3288 	movw	r2, #5000	; 0x1388
 801b366:	4293      	cmp	r3, r2
 801b368:	d901      	bls.n	801b36e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801b36a:	2303      	movs	r3, #3
 801b36c:	e140      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b36e:	4b46      	ldr	r3, [pc, #280]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b374:	f003 0302 	and.w	r3, r3, #2
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d0ed      	beq.n	801b358 <HAL_RCC_OscConfig+0x388>
 801b37c:	e015      	b.n	801b3aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b37e:	f7fc fb93 	bl	8017aa8 <HAL_GetTick>
 801b382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b384:	e00a      	b.n	801b39c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b386:	f7fc fb8f 	bl	8017aa8 <HAL_GetTick>
 801b38a:	4602      	mov	r2, r0
 801b38c:	693b      	ldr	r3, [r7, #16]
 801b38e:	1ad3      	subs	r3, r2, r3
 801b390:	f241 3288 	movw	r2, #5000	; 0x1388
 801b394:	4293      	cmp	r3, r2
 801b396:	d901      	bls.n	801b39c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801b398:	2303      	movs	r3, #3
 801b39a:	e129      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b39c:	4b3a      	ldr	r3, [pc, #232]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b3a2:	f003 0302 	and.w	r3, r3, #2
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d1ed      	bne.n	801b386 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801b3aa:	7ffb      	ldrb	r3, [r7, #31]
 801b3ac:	2b01      	cmp	r3, #1
 801b3ae:	d105      	bne.n	801b3bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b3b0:	4b35      	ldr	r3, [pc, #212]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3b4:	4a34      	ldr	r2, [pc, #208]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b3b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b3ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	f003 0320 	and.w	r3, r3, #32
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d03c      	beq.n	801b442 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	699b      	ldr	r3, [r3, #24]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d01c      	beq.n	801b40a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b3d0:	4b2d      	ldr	r3, [pc, #180]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b3d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b3d6:	4a2c      	ldr	r2, [pc, #176]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b3d8:	f043 0301 	orr.w	r3, r3, #1
 801b3dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b3e0:	f7fc fb62 	bl	8017aa8 <HAL_GetTick>
 801b3e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b3e6:	e008      	b.n	801b3fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b3e8:	f7fc fb5e 	bl	8017aa8 <HAL_GetTick>
 801b3ec:	4602      	mov	r2, r0
 801b3ee:	693b      	ldr	r3, [r7, #16]
 801b3f0:	1ad3      	subs	r3, r2, r3
 801b3f2:	2b02      	cmp	r3, #2
 801b3f4:	d901      	bls.n	801b3fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801b3f6:	2303      	movs	r3, #3
 801b3f8:	e0fa      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b3fa:	4b23      	ldr	r3, [pc, #140]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b3fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b400:	f003 0302 	and.w	r3, r3, #2
 801b404:	2b00      	cmp	r3, #0
 801b406:	d0ef      	beq.n	801b3e8 <HAL_RCC_OscConfig+0x418>
 801b408:	e01b      	b.n	801b442 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b40a:	4b1f      	ldr	r3, [pc, #124]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b40c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b410:	4a1d      	ldr	r2, [pc, #116]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b412:	f023 0301 	bic.w	r3, r3, #1
 801b416:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b41a:	f7fc fb45 	bl	8017aa8 <HAL_GetTick>
 801b41e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b420:	e008      	b.n	801b434 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b422:	f7fc fb41 	bl	8017aa8 <HAL_GetTick>
 801b426:	4602      	mov	r2, r0
 801b428:	693b      	ldr	r3, [r7, #16]
 801b42a:	1ad3      	subs	r3, r2, r3
 801b42c:	2b02      	cmp	r3, #2
 801b42e:	d901      	bls.n	801b434 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801b430:	2303      	movs	r3, #3
 801b432:	e0dd      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b434:	4b14      	ldr	r3, [pc, #80]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b43a:	f003 0302 	and.w	r3, r3, #2
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d1ef      	bne.n	801b422 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	69db      	ldr	r3, [r3, #28]
 801b446:	2b00      	cmp	r3, #0
 801b448:	f000 80d1 	beq.w	801b5ee <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801b44c:	4b0e      	ldr	r3, [pc, #56]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b44e:	689b      	ldr	r3, [r3, #8]
 801b450:	f003 030c 	and.w	r3, r3, #12
 801b454:	2b0c      	cmp	r3, #12
 801b456:	f000 808b 	beq.w	801b570 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	69db      	ldr	r3, [r3, #28]
 801b45e:	2b02      	cmp	r3, #2
 801b460:	d15e      	bne.n	801b520 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b462:	4b09      	ldr	r3, [pc, #36]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	4a08      	ldr	r2, [pc, #32]	; (801b488 <HAL_RCC_OscConfig+0x4b8>)
 801b468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b46c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b46e:	f7fc fb1b 	bl	8017aa8 <HAL_GetTick>
 801b472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b474:	e00c      	b.n	801b490 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b476:	f7fc fb17 	bl	8017aa8 <HAL_GetTick>
 801b47a:	4602      	mov	r2, r0
 801b47c:	693b      	ldr	r3, [r7, #16]
 801b47e:	1ad3      	subs	r3, r2, r3
 801b480:	2b02      	cmp	r3, #2
 801b482:	d905      	bls.n	801b490 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801b484:	2303      	movs	r3, #3
 801b486:	e0b3      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
 801b488:	40021000 	.word	0x40021000
 801b48c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b490:	4b59      	ldr	r3, [pc, #356]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d1ec      	bne.n	801b476 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b49c:	4b56      	ldr	r3, [pc, #344]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b49e:	68da      	ldr	r2, [r3, #12]
 801b4a0:	4b56      	ldr	r3, [pc, #344]	; (801b5fc <HAL_RCC_OscConfig+0x62c>)
 801b4a2:	4013      	ands	r3, r2
 801b4a4:	687a      	ldr	r2, [r7, #4]
 801b4a6:	6a11      	ldr	r1, [r2, #32]
 801b4a8:	687a      	ldr	r2, [r7, #4]
 801b4aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b4ac:	3a01      	subs	r2, #1
 801b4ae:	0112      	lsls	r2, r2, #4
 801b4b0:	4311      	orrs	r1, r2
 801b4b2:	687a      	ldr	r2, [r7, #4]
 801b4b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801b4b6:	0212      	lsls	r2, r2, #8
 801b4b8:	4311      	orrs	r1, r2
 801b4ba:	687a      	ldr	r2, [r7, #4]
 801b4bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801b4be:	0852      	lsrs	r2, r2, #1
 801b4c0:	3a01      	subs	r2, #1
 801b4c2:	0552      	lsls	r2, r2, #21
 801b4c4:	4311      	orrs	r1, r2
 801b4c6:	687a      	ldr	r2, [r7, #4]
 801b4c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b4ca:	0852      	lsrs	r2, r2, #1
 801b4cc:	3a01      	subs	r2, #1
 801b4ce:	0652      	lsls	r2, r2, #25
 801b4d0:	4311      	orrs	r1, r2
 801b4d2:	687a      	ldr	r2, [r7, #4]
 801b4d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b4d6:	06d2      	lsls	r2, r2, #27
 801b4d8:	430a      	orrs	r2, r1
 801b4da:	4947      	ldr	r1, [pc, #284]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b4dc:	4313      	orrs	r3, r2
 801b4de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b4e0:	4b45      	ldr	r3, [pc, #276]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	4a44      	ldr	r2, [pc, #272]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b4e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b4ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801b4ec:	4b42      	ldr	r3, [pc, #264]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b4ee:	68db      	ldr	r3, [r3, #12]
 801b4f0:	4a41      	ldr	r2, [pc, #260]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b4f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b4f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4f8:	f7fc fad6 	bl	8017aa8 <HAL_GetTick>
 801b4fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b4fe:	e008      	b.n	801b512 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b500:	f7fc fad2 	bl	8017aa8 <HAL_GetTick>
 801b504:	4602      	mov	r2, r0
 801b506:	693b      	ldr	r3, [r7, #16]
 801b508:	1ad3      	subs	r3, r2, r3
 801b50a:	2b02      	cmp	r3, #2
 801b50c:	d901      	bls.n	801b512 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801b50e:	2303      	movs	r3, #3
 801b510:	e06e      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b512:	4b39      	ldr	r3, [pc, #228]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d0f0      	beq.n	801b500 <HAL_RCC_OscConfig+0x530>
 801b51e:	e066      	b.n	801b5ee <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b520:	4b35      	ldr	r3, [pc, #212]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	4a34      	ldr	r2, [pc, #208]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b52a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801b52c:	4b32      	ldr	r3, [pc, #200]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b52e:	68db      	ldr	r3, [r3, #12]
 801b530:	4a31      	ldr	r2, [pc, #196]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b532:	f023 0303 	bic.w	r3, r3, #3
 801b536:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801b538:	4b2f      	ldr	r3, [pc, #188]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b53a:	68db      	ldr	r3, [r3, #12]
 801b53c:	4a2e      	ldr	r2, [pc, #184]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b53e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801b542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b546:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b548:	f7fc faae 	bl	8017aa8 <HAL_GetTick>
 801b54c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b54e:	e008      	b.n	801b562 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b550:	f7fc faaa 	bl	8017aa8 <HAL_GetTick>
 801b554:	4602      	mov	r2, r0
 801b556:	693b      	ldr	r3, [r7, #16]
 801b558:	1ad3      	subs	r3, r2, r3
 801b55a:	2b02      	cmp	r3, #2
 801b55c:	d901      	bls.n	801b562 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801b55e:	2303      	movs	r3, #3
 801b560:	e046      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b562:	4b25      	ldr	r3, [pc, #148]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d1f0      	bne.n	801b550 <HAL_RCC_OscConfig+0x580>
 801b56e:	e03e      	b.n	801b5ee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	69db      	ldr	r3, [r3, #28]
 801b574:	2b01      	cmp	r3, #1
 801b576:	d101      	bne.n	801b57c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801b578:	2301      	movs	r3, #1
 801b57a:	e039      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801b57c:	4b1e      	ldr	r3, [pc, #120]	; (801b5f8 <HAL_RCC_OscConfig+0x628>)
 801b57e:	68db      	ldr	r3, [r3, #12]
 801b580:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	f003 0203 	and.w	r2, r3, #3
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	6a1b      	ldr	r3, [r3, #32]
 801b58c:	429a      	cmp	r2, r3
 801b58e:	d12c      	bne.n	801b5ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b59a:	3b01      	subs	r3, #1
 801b59c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b59e:	429a      	cmp	r2, r3
 801b5a0:	d123      	bne.n	801b5ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	d11b      	bne.n	801b5ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b5b2:	697b      	ldr	r3, [r7, #20]
 801b5b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b5be:	429a      	cmp	r2, r3
 801b5c0:	d113      	bne.n	801b5ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b5c2:	697b      	ldr	r3, [r7, #20]
 801b5c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5cc:	085b      	lsrs	r3, r3, #1
 801b5ce:	3b01      	subs	r3, #1
 801b5d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b5d2:	429a      	cmp	r2, r3
 801b5d4:	d109      	bne.n	801b5ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801b5d6:	697b      	ldr	r3, [r7, #20]
 801b5d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b5e0:	085b      	lsrs	r3, r3, #1
 801b5e2:	3b01      	subs	r3, #1
 801b5e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b5e6:	429a      	cmp	r2, r3
 801b5e8:	d001      	beq.n	801b5ee <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801b5ea:	2301      	movs	r3, #1
 801b5ec:	e000      	b.n	801b5f0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801b5ee:	2300      	movs	r3, #0
}
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	3720      	adds	r7, #32
 801b5f4:	46bd      	mov	sp, r7
 801b5f6:	bd80      	pop	{r7, pc}
 801b5f8:	40021000 	.word	0x40021000
 801b5fc:	019f800c 	.word	0x019f800c

0801b600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b600:	b580      	push	{r7, lr}
 801b602:	b086      	sub	sp, #24
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
 801b608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801b60a:	2300      	movs	r3, #0
 801b60c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d101      	bne.n	801b618 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801b614:	2301      	movs	r3, #1
 801b616:	e11e      	b.n	801b856 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b618:	4b91      	ldr	r3, [pc, #580]	; (801b860 <HAL_RCC_ClockConfig+0x260>)
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	f003 030f 	and.w	r3, r3, #15
 801b620:	683a      	ldr	r2, [r7, #0]
 801b622:	429a      	cmp	r2, r3
 801b624:	d910      	bls.n	801b648 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b626:	4b8e      	ldr	r3, [pc, #568]	; (801b860 <HAL_RCC_ClockConfig+0x260>)
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	f023 020f 	bic.w	r2, r3, #15
 801b62e:	498c      	ldr	r1, [pc, #560]	; (801b860 <HAL_RCC_ClockConfig+0x260>)
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	4313      	orrs	r3, r2
 801b634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b636:	4b8a      	ldr	r3, [pc, #552]	; (801b860 <HAL_RCC_ClockConfig+0x260>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	f003 030f 	and.w	r3, r3, #15
 801b63e:	683a      	ldr	r2, [r7, #0]
 801b640:	429a      	cmp	r2, r3
 801b642:	d001      	beq.n	801b648 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801b644:	2301      	movs	r3, #1
 801b646:	e106      	b.n	801b856 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	f003 0301 	and.w	r3, r3, #1
 801b650:	2b00      	cmp	r3, #0
 801b652:	d073      	beq.n	801b73c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	685b      	ldr	r3, [r3, #4]
 801b658:	2b03      	cmp	r3, #3
 801b65a:	d129      	bne.n	801b6b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b65c:	4b81      	ldr	r3, [pc, #516]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b664:	2b00      	cmp	r3, #0
 801b666:	d101      	bne.n	801b66c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801b668:	2301      	movs	r3, #1
 801b66a:	e0f4      	b.n	801b856 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801b66c:	f000 f99c 	bl	801b9a8 <RCC_GetSysClockFreqFromPLLSource>
 801b670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801b672:	693b      	ldr	r3, [r7, #16]
 801b674:	4a7c      	ldr	r2, [pc, #496]	; (801b868 <HAL_RCC_ClockConfig+0x268>)
 801b676:	4293      	cmp	r3, r2
 801b678:	d93f      	bls.n	801b6fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b67a:	4b7a      	ldr	r3, [pc, #488]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b67c:	689b      	ldr	r3, [r3, #8]
 801b67e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b682:	2b00      	cmp	r3, #0
 801b684:	d009      	beq.n	801b69a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d033      	beq.n	801b6fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b696:	2b00      	cmp	r3, #0
 801b698:	d12f      	bne.n	801b6fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b69a:	4b72      	ldr	r3, [pc, #456]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b69c:	689b      	ldr	r3, [r3, #8]
 801b69e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b6a2:	4a70      	ldr	r2, [pc, #448]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b6a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801b6aa:	2380      	movs	r3, #128	; 0x80
 801b6ac:	617b      	str	r3, [r7, #20]
 801b6ae:	e024      	b.n	801b6fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	685b      	ldr	r3, [r3, #4]
 801b6b4:	2b02      	cmp	r3, #2
 801b6b6:	d107      	bne.n	801b6c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b6b8:	4b6a      	ldr	r3, [pc, #424]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d109      	bne.n	801b6d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b6c4:	2301      	movs	r3, #1
 801b6c6:	e0c6      	b.n	801b856 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b6c8:	4b66      	ldr	r3, [pc, #408]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d101      	bne.n	801b6d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b6d4:	2301      	movs	r3, #1
 801b6d6:	e0be      	b.n	801b856 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801b6d8:	f000 f8ce 	bl	801b878 <HAL_RCC_GetSysClockFreq>
 801b6dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801b6de:	693b      	ldr	r3, [r7, #16]
 801b6e0:	4a61      	ldr	r2, [pc, #388]	; (801b868 <HAL_RCC_ClockConfig+0x268>)
 801b6e2:	4293      	cmp	r3, r2
 801b6e4:	d909      	bls.n	801b6fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b6e6:	4b5f      	ldr	r3, [pc, #380]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b6e8:	689b      	ldr	r3, [r3, #8]
 801b6ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b6ee:	4a5d      	ldr	r2, [pc, #372]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b6f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801b6f6:	2380      	movs	r3, #128	; 0x80
 801b6f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b6fa:	4b5a      	ldr	r3, [pc, #360]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b6fc:	689b      	ldr	r3, [r3, #8]
 801b6fe:	f023 0203 	bic.w	r2, r3, #3
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	685b      	ldr	r3, [r3, #4]
 801b706:	4957      	ldr	r1, [pc, #348]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b708:	4313      	orrs	r3, r2
 801b70a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b70c:	f7fc f9cc 	bl	8017aa8 <HAL_GetTick>
 801b710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b712:	e00a      	b.n	801b72a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b714:	f7fc f9c8 	bl	8017aa8 <HAL_GetTick>
 801b718:	4602      	mov	r2, r0
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	1ad3      	subs	r3, r2, r3
 801b71e:	f241 3288 	movw	r2, #5000	; 0x1388
 801b722:	4293      	cmp	r3, r2
 801b724:	d901      	bls.n	801b72a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801b726:	2303      	movs	r3, #3
 801b728:	e095      	b.n	801b856 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b72a:	4b4e      	ldr	r3, [pc, #312]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b72c:	689b      	ldr	r3, [r3, #8]
 801b72e:	f003 020c 	and.w	r2, r3, #12
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	685b      	ldr	r3, [r3, #4]
 801b736:	009b      	lsls	r3, r3, #2
 801b738:	429a      	cmp	r2, r3
 801b73a:	d1eb      	bne.n	801b714 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	f003 0302 	and.w	r3, r3, #2
 801b744:	2b00      	cmp	r3, #0
 801b746:	d023      	beq.n	801b790 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	f003 0304 	and.w	r3, r3, #4
 801b750:	2b00      	cmp	r3, #0
 801b752:	d005      	beq.n	801b760 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b754:	4b43      	ldr	r3, [pc, #268]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b756:	689b      	ldr	r3, [r3, #8]
 801b758:	4a42      	ldr	r2, [pc, #264]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b75a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b75e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	f003 0308 	and.w	r3, r3, #8
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d007      	beq.n	801b77c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801b76c:	4b3d      	ldr	r3, [pc, #244]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b76e:	689b      	ldr	r3, [r3, #8]
 801b770:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b774:	4a3b      	ldr	r2, [pc, #236]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b77a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b77c:	4b39      	ldr	r3, [pc, #228]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b77e:	689b      	ldr	r3, [r3, #8]
 801b780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	689b      	ldr	r3, [r3, #8]
 801b788:	4936      	ldr	r1, [pc, #216]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b78a:	4313      	orrs	r3, r2
 801b78c:	608b      	str	r3, [r1, #8]
 801b78e:	e008      	b.n	801b7a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801b790:	697b      	ldr	r3, [r7, #20]
 801b792:	2b80      	cmp	r3, #128	; 0x80
 801b794:	d105      	bne.n	801b7a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801b796:	4b33      	ldr	r3, [pc, #204]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b798:	689b      	ldr	r3, [r3, #8]
 801b79a:	4a32      	ldr	r2, [pc, #200]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b79c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b7a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b7a2:	4b2f      	ldr	r3, [pc, #188]	; (801b860 <HAL_RCC_ClockConfig+0x260>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	f003 030f 	and.w	r3, r3, #15
 801b7aa:	683a      	ldr	r2, [r7, #0]
 801b7ac:	429a      	cmp	r2, r3
 801b7ae:	d21d      	bcs.n	801b7ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b7b0:	4b2b      	ldr	r3, [pc, #172]	; (801b860 <HAL_RCC_ClockConfig+0x260>)
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	f023 020f 	bic.w	r2, r3, #15
 801b7b8:	4929      	ldr	r1, [pc, #164]	; (801b860 <HAL_RCC_ClockConfig+0x260>)
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	4313      	orrs	r3, r2
 801b7be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b7c0:	f7fc f972 	bl	8017aa8 <HAL_GetTick>
 801b7c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b7c6:	e00a      	b.n	801b7de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b7c8:	f7fc f96e 	bl	8017aa8 <HAL_GetTick>
 801b7cc:	4602      	mov	r2, r0
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	1ad3      	subs	r3, r2, r3
 801b7d2:	f241 3288 	movw	r2, #5000	; 0x1388
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	d901      	bls.n	801b7de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801b7da:	2303      	movs	r3, #3
 801b7dc:	e03b      	b.n	801b856 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b7de:	4b20      	ldr	r3, [pc, #128]	; (801b860 <HAL_RCC_ClockConfig+0x260>)
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	f003 030f 	and.w	r3, r3, #15
 801b7e6:	683a      	ldr	r2, [r7, #0]
 801b7e8:	429a      	cmp	r2, r3
 801b7ea:	d1ed      	bne.n	801b7c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	f003 0304 	and.w	r3, r3, #4
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d008      	beq.n	801b80a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b7f8:	4b1a      	ldr	r3, [pc, #104]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b7fa:	689b      	ldr	r3, [r3, #8]
 801b7fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	68db      	ldr	r3, [r3, #12]
 801b804:	4917      	ldr	r1, [pc, #92]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b806:	4313      	orrs	r3, r2
 801b808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	f003 0308 	and.w	r3, r3, #8
 801b812:	2b00      	cmp	r3, #0
 801b814:	d009      	beq.n	801b82a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b816:	4b13      	ldr	r3, [pc, #76]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b818:	689b      	ldr	r3, [r3, #8]
 801b81a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	691b      	ldr	r3, [r3, #16]
 801b822:	00db      	lsls	r3, r3, #3
 801b824:	490f      	ldr	r1, [pc, #60]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b826:	4313      	orrs	r3, r2
 801b828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801b82a:	f000 f825 	bl	801b878 <HAL_RCC_GetSysClockFreq>
 801b82e:	4602      	mov	r2, r0
 801b830:	4b0c      	ldr	r3, [pc, #48]	; (801b864 <HAL_RCC_ClockConfig+0x264>)
 801b832:	689b      	ldr	r3, [r3, #8]
 801b834:	091b      	lsrs	r3, r3, #4
 801b836:	f003 030f 	and.w	r3, r3, #15
 801b83a:	490c      	ldr	r1, [pc, #48]	; (801b86c <HAL_RCC_ClockConfig+0x26c>)
 801b83c:	5ccb      	ldrb	r3, [r1, r3]
 801b83e:	f003 031f 	and.w	r3, r3, #31
 801b842:	fa22 f303 	lsr.w	r3, r2, r3
 801b846:	4a0a      	ldr	r2, [pc, #40]	; (801b870 <HAL_RCC_ClockConfig+0x270>)
 801b848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801b84a:	4b0a      	ldr	r3, [pc, #40]	; (801b874 <HAL_RCC_ClockConfig+0x274>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	4618      	mov	r0, r3
 801b850:	f7fc f8de 	bl	8017a10 <HAL_InitTick>
 801b854:	4603      	mov	r3, r0
}
 801b856:	4618      	mov	r0, r3
 801b858:	3718      	adds	r7, #24
 801b85a:	46bd      	mov	sp, r7
 801b85c:	bd80      	pop	{r7, pc}
 801b85e:	bf00      	nop
 801b860:	40022000 	.word	0x40022000
 801b864:	40021000 	.word	0x40021000
 801b868:	04c4b400 	.word	0x04c4b400
 801b86c:	080223b0 	.word	0x080223b0
 801b870:	20000000 	.word	0x20000000
 801b874:	20000004 	.word	0x20000004

0801b878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b878:	b480      	push	{r7}
 801b87a:	b087      	sub	sp, #28
 801b87c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801b87e:	4b2c      	ldr	r3, [pc, #176]	; (801b930 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b880:	689b      	ldr	r3, [r3, #8]
 801b882:	f003 030c 	and.w	r3, r3, #12
 801b886:	2b04      	cmp	r3, #4
 801b888:	d102      	bne.n	801b890 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801b88a:	4b2a      	ldr	r3, [pc, #168]	; (801b934 <HAL_RCC_GetSysClockFreq+0xbc>)
 801b88c:	613b      	str	r3, [r7, #16]
 801b88e:	e047      	b.n	801b920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801b890:	4b27      	ldr	r3, [pc, #156]	; (801b930 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b892:	689b      	ldr	r3, [r3, #8]
 801b894:	f003 030c 	and.w	r3, r3, #12
 801b898:	2b08      	cmp	r3, #8
 801b89a:	d102      	bne.n	801b8a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801b89c:	4b25      	ldr	r3, [pc, #148]	; (801b934 <HAL_RCC_GetSysClockFreq+0xbc>)
 801b89e:	613b      	str	r3, [r7, #16]
 801b8a0:	e03e      	b.n	801b920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801b8a2:	4b23      	ldr	r3, [pc, #140]	; (801b930 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b8a4:	689b      	ldr	r3, [r3, #8]
 801b8a6:	f003 030c 	and.w	r3, r3, #12
 801b8aa:	2b0c      	cmp	r3, #12
 801b8ac:	d136      	bne.n	801b91c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801b8ae:	4b20      	ldr	r3, [pc, #128]	; (801b930 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b8b0:	68db      	ldr	r3, [r3, #12]
 801b8b2:	f003 0303 	and.w	r3, r3, #3
 801b8b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801b8b8:	4b1d      	ldr	r3, [pc, #116]	; (801b930 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b8ba:	68db      	ldr	r3, [r3, #12]
 801b8bc:	091b      	lsrs	r3, r3, #4
 801b8be:	f003 030f 	and.w	r3, r3, #15
 801b8c2:	3301      	adds	r3, #1
 801b8c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801b8c6:	68fb      	ldr	r3, [r7, #12]
 801b8c8:	2b03      	cmp	r3, #3
 801b8ca:	d10c      	bne.n	801b8e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b8cc:	4a19      	ldr	r2, [pc, #100]	; (801b934 <HAL_RCC_GetSysClockFreq+0xbc>)
 801b8ce:	68bb      	ldr	r3, [r7, #8]
 801b8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8d4:	4a16      	ldr	r2, [pc, #88]	; (801b930 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b8d6:	68d2      	ldr	r2, [r2, #12]
 801b8d8:	0a12      	lsrs	r2, r2, #8
 801b8da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b8de:	fb02 f303 	mul.w	r3, r2, r3
 801b8e2:	617b      	str	r3, [r7, #20]
      break;
 801b8e4:	e00c      	b.n	801b900 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b8e6:	4a13      	ldr	r2, [pc, #76]	; (801b934 <HAL_RCC_GetSysClockFreq+0xbc>)
 801b8e8:	68bb      	ldr	r3, [r7, #8]
 801b8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8ee:	4a10      	ldr	r2, [pc, #64]	; (801b930 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b8f0:	68d2      	ldr	r2, [r2, #12]
 801b8f2:	0a12      	lsrs	r2, r2, #8
 801b8f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b8f8:	fb02 f303 	mul.w	r3, r2, r3
 801b8fc:	617b      	str	r3, [r7, #20]
      break;
 801b8fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801b900:	4b0b      	ldr	r3, [pc, #44]	; (801b930 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b902:	68db      	ldr	r3, [r3, #12]
 801b904:	0e5b      	lsrs	r3, r3, #25
 801b906:	f003 0303 	and.w	r3, r3, #3
 801b90a:	3301      	adds	r3, #1
 801b90c:	005b      	lsls	r3, r3, #1
 801b90e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801b910:	697a      	ldr	r2, [r7, #20]
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	fbb2 f3f3 	udiv	r3, r2, r3
 801b918:	613b      	str	r3, [r7, #16]
 801b91a:	e001      	b.n	801b920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801b91c:	2300      	movs	r3, #0
 801b91e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801b920:	693b      	ldr	r3, [r7, #16]
}
 801b922:	4618      	mov	r0, r3
 801b924:	371c      	adds	r7, #28
 801b926:	46bd      	mov	sp, r7
 801b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b92c:	4770      	bx	lr
 801b92e:	bf00      	nop
 801b930:	40021000 	.word	0x40021000
 801b934:	00f42400 	.word	0x00f42400

0801b938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b938:	b480      	push	{r7}
 801b93a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b93c:	4b03      	ldr	r3, [pc, #12]	; (801b94c <HAL_RCC_GetHCLKFreq+0x14>)
 801b93e:	681b      	ldr	r3, [r3, #0]
}
 801b940:	4618      	mov	r0, r3
 801b942:	46bd      	mov	sp, r7
 801b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b948:	4770      	bx	lr
 801b94a:	bf00      	nop
 801b94c:	20000000 	.word	0x20000000

0801b950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b950:	b580      	push	{r7, lr}
 801b952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801b954:	f7ff fff0 	bl	801b938 <HAL_RCC_GetHCLKFreq>
 801b958:	4602      	mov	r2, r0
 801b95a:	4b06      	ldr	r3, [pc, #24]	; (801b974 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b95c:	689b      	ldr	r3, [r3, #8]
 801b95e:	0a1b      	lsrs	r3, r3, #8
 801b960:	f003 0307 	and.w	r3, r3, #7
 801b964:	4904      	ldr	r1, [pc, #16]	; (801b978 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b966:	5ccb      	ldrb	r3, [r1, r3]
 801b968:	f003 031f 	and.w	r3, r3, #31
 801b96c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b970:	4618      	mov	r0, r3
 801b972:	bd80      	pop	{r7, pc}
 801b974:	40021000 	.word	0x40021000
 801b978:	080223c0 	.word	0x080223c0

0801b97c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b97c:	b580      	push	{r7, lr}
 801b97e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801b980:	f7ff ffda 	bl	801b938 <HAL_RCC_GetHCLKFreq>
 801b984:	4602      	mov	r2, r0
 801b986:	4b06      	ldr	r3, [pc, #24]	; (801b9a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b988:	689b      	ldr	r3, [r3, #8]
 801b98a:	0adb      	lsrs	r3, r3, #11
 801b98c:	f003 0307 	and.w	r3, r3, #7
 801b990:	4904      	ldr	r1, [pc, #16]	; (801b9a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b992:	5ccb      	ldrb	r3, [r1, r3]
 801b994:	f003 031f 	and.w	r3, r3, #31
 801b998:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	bd80      	pop	{r7, pc}
 801b9a0:	40021000 	.word	0x40021000
 801b9a4:	080223c0 	.word	0x080223c0

0801b9a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801b9a8:	b480      	push	{r7}
 801b9aa:	b087      	sub	sp, #28
 801b9ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801b9ae:	4b1e      	ldr	r3, [pc, #120]	; (801ba28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b9b0:	68db      	ldr	r3, [r3, #12]
 801b9b2:	f003 0303 	and.w	r3, r3, #3
 801b9b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801b9b8:	4b1b      	ldr	r3, [pc, #108]	; (801ba28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b9ba:	68db      	ldr	r3, [r3, #12]
 801b9bc:	091b      	lsrs	r3, r3, #4
 801b9be:	f003 030f 	and.w	r3, r3, #15
 801b9c2:	3301      	adds	r3, #1
 801b9c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801b9c6:	693b      	ldr	r3, [r7, #16]
 801b9c8:	2b03      	cmp	r3, #3
 801b9ca:	d10c      	bne.n	801b9e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b9cc:	4a17      	ldr	r2, [pc, #92]	; (801ba2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9d4:	4a14      	ldr	r2, [pc, #80]	; (801ba28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b9d6:	68d2      	ldr	r2, [r2, #12]
 801b9d8:	0a12      	lsrs	r2, r2, #8
 801b9da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b9de:	fb02 f303 	mul.w	r3, r2, r3
 801b9e2:	617b      	str	r3, [r7, #20]
    break;
 801b9e4:	e00c      	b.n	801ba00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b9e6:	4a11      	ldr	r2, [pc, #68]	; (801ba2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9ee:	4a0e      	ldr	r2, [pc, #56]	; (801ba28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b9f0:	68d2      	ldr	r2, [r2, #12]
 801b9f2:	0a12      	lsrs	r2, r2, #8
 801b9f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b9f8:	fb02 f303 	mul.w	r3, r2, r3
 801b9fc:	617b      	str	r3, [r7, #20]
    break;
 801b9fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801ba00:	4b09      	ldr	r3, [pc, #36]	; (801ba28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801ba02:	68db      	ldr	r3, [r3, #12]
 801ba04:	0e5b      	lsrs	r3, r3, #25
 801ba06:	f003 0303 	and.w	r3, r3, #3
 801ba0a:	3301      	adds	r3, #1
 801ba0c:	005b      	lsls	r3, r3, #1
 801ba0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801ba10:	697a      	ldr	r2, [r7, #20]
 801ba12:	68bb      	ldr	r3, [r7, #8]
 801ba14:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801ba1a:	687b      	ldr	r3, [r7, #4]
}
 801ba1c:	4618      	mov	r0, r3
 801ba1e:	371c      	adds	r7, #28
 801ba20:	46bd      	mov	sp, r7
 801ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba26:	4770      	bx	lr
 801ba28:	40021000 	.word	0x40021000
 801ba2c:	00f42400 	.word	0x00f42400

0801ba30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b086      	sub	sp, #24
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801ba38:	2300      	movs	r3, #0
 801ba3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	f000 8098 	beq.w	801bb7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ba4e:	2300      	movs	r3, #0
 801ba50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ba52:	4b43      	ldr	r3, [pc, #268]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d10d      	bne.n	801ba7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ba5e:	4b40      	ldr	r3, [pc, #256]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba62:	4a3f      	ldr	r2, [pc, #252]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba68:	6593      	str	r3, [r2, #88]	; 0x58
 801ba6a:	4b3d      	ldr	r3, [pc, #244]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ba72:	60bb      	str	r3, [r7, #8]
 801ba74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801ba76:	2301      	movs	r3, #1
 801ba78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801ba7a:	4b3a      	ldr	r3, [pc, #232]	; (801bb64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	4a39      	ldr	r2, [pc, #228]	; (801bb64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801ba80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ba84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801ba86:	f7fc f80f 	bl	8017aa8 <HAL_GetTick>
 801ba8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ba8c:	e009      	b.n	801baa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ba8e:	f7fc f80b 	bl	8017aa8 <HAL_GetTick>
 801ba92:	4602      	mov	r2, r0
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	1ad3      	subs	r3, r2, r3
 801ba98:	2b02      	cmp	r3, #2
 801ba9a:	d902      	bls.n	801baa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801ba9c:	2303      	movs	r3, #3
 801ba9e:	74fb      	strb	r3, [r7, #19]
        break;
 801baa0:	e005      	b.n	801baae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801baa2:	4b30      	ldr	r3, [pc, #192]	; (801bb64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d0ef      	beq.n	801ba8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801baae:	7cfb      	ldrb	r3, [r7, #19]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d159      	bne.n	801bb68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801bab4:	4b2a      	ldr	r3, [pc, #168]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801baba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801babe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801bac0:	697b      	ldr	r3, [r7, #20]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d01e      	beq.n	801bb04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801baca:	697a      	ldr	r2, [r7, #20]
 801bacc:	429a      	cmp	r2, r3
 801bace:	d019      	beq.n	801bb04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801bad0:	4b23      	ldr	r3, [pc, #140]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bada:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801badc:	4b20      	ldr	r3, [pc, #128]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bae2:	4a1f      	ldr	r2, [pc, #124]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801baec:	4b1c      	ldr	r3, [pc, #112]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801baee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801baf2:	4a1b      	ldr	r2, [pc, #108]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801baf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801baf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801bafc:	4a18      	ldr	r2, [pc, #96]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bafe:	697b      	ldr	r3, [r7, #20]
 801bb00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	f003 0301 	and.w	r3, r3, #1
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d016      	beq.n	801bb3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb0e:	f7fb ffcb 	bl	8017aa8 <HAL_GetTick>
 801bb12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801bb14:	e00b      	b.n	801bb2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bb16:	f7fb ffc7 	bl	8017aa8 <HAL_GetTick>
 801bb1a:	4602      	mov	r2, r0
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	1ad3      	subs	r3, r2, r3
 801bb20:	f241 3288 	movw	r2, #5000	; 0x1388
 801bb24:	4293      	cmp	r3, r2
 801bb26:	d902      	bls.n	801bb2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801bb28:	2303      	movs	r3, #3
 801bb2a:	74fb      	strb	r3, [r7, #19]
            break;
 801bb2c:	e006      	b.n	801bb3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801bb2e:	4b0c      	ldr	r3, [pc, #48]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bb30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bb34:	f003 0302 	and.w	r3, r3, #2
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d0ec      	beq.n	801bb16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801bb3c:	7cfb      	ldrb	r3, [r7, #19]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d10b      	bne.n	801bb5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bb42:	4b07      	ldr	r3, [pc, #28]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bb44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bb48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bb50:	4903      	ldr	r1, [pc, #12]	; (801bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801bb52:	4313      	orrs	r3, r2
 801bb54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801bb58:	e008      	b.n	801bb6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801bb5a:	7cfb      	ldrb	r3, [r7, #19]
 801bb5c:	74bb      	strb	r3, [r7, #18]
 801bb5e:	e005      	b.n	801bb6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801bb60:	40021000 	.word	0x40021000
 801bb64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bb68:	7cfb      	ldrb	r3, [r7, #19]
 801bb6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bb6c:	7c7b      	ldrb	r3, [r7, #17]
 801bb6e:	2b01      	cmp	r3, #1
 801bb70:	d105      	bne.n	801bb7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bb72:	4ba7      	ldr	r3, [pc, #668]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bb76:	4aa6      	ldr	r2, [pc, #664]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bb7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	f003 0301 	and.w	r3, r3, #1
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d00a      	beq.n	801bba0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801bb8a:	4ba1      	ldr	r3, [pc, #644]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb90:	f023 0203 	bic.w	r2, r3, #3
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	685b      	ldr	r3, [r3, #4]
 801bb98:	499d      	ldr	r1, [pc, #628]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb9a:	4313      	orrs	r3, r2
 801bb9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	681b      	ldr	r3, [r3, #0]
 801bba4:	f003 0302 	and.w	r3, r3, #2
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d00a      	beq.n	801bbc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801bbac:	4b98      	ldr	r3, [pc, #608]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbb2:	f023 020c 	bic.w	r2, r3, #12
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	689b      	ldr	r3, [r3, #8]
 801bbba:	4995      	ldr	r1, [pc, #596]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbbc:	4313      	orrs	r3, r2
 801bbbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	f003 0304 	and.w	r3, r3, #4
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d00a      	beq.n	801bbe4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801bbce:	4b90      	ldr	r3, [pc, #576]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	68db      	ldr	r3, [r3, #12]
 801bbdc:	498c      	ldr	r1, [pc, #560]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbde:	4313      	orrs	r3, r2
 801bbe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	f003 0308 	and.w	r3, r3, #8
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d00a      	beq.n	801bc06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801bbf0:	4b87      	ldr	r3, [pc, #540]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	691b      	ldr	r3, [r3, #16]
 801bbfe:	4984      	ldr	r1, [pc, #528]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc00:	4313      	orrs	r3, r2
 801bc02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	f003 0310 	and.w	r3, r3, #16
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d00a      	beq.n	801bc28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801bc12:	4b7f      	ldr	r3, [pc, #508]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	695b      	ldr	r3, [r3, #20]
 801bc20:	497b      	ldr	r1, [pc, #492]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc22:	4313      	orrs	r3, r2
 801bc24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	f003 0320 	and.w	r3, r3, #32
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d00a      	beq.n	801bc4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bc34:	4b76      	ldr	r3, [pc, #472]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	699b      	ldr	r3, [r3, #24]
 801bc42:	4973      	ldr	r1, [pc, #460]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc44:	4313      	orrs	r3, r2
 801bc46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d00a      	beq.n	801bc6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801bc56:	4b6e      	ldr	r3, [pc, #440]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	69db      	ldr	r3, [r3, #28]
 801bc64:	496a      	ldr	r1, [pc, #424]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc66:	4313      	orrs	r3, r2
 801bc68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d00a      	beq.n	801bc8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801bc78:	4b65      	ldr	r3, [pc, #404]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	6a1b      	ldr	r3, [r3, #32]
 801bc86:	4962      	ldr	r1, [pc, #392]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc88:	4313      	orrs	r3, r2
 801bc8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d00a      	beq.n	801bcb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801bc9a:	4b5d      	ldr	r3, [pc, #372]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bca8:	4959      	ldr	r1, [pc, #356]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcaa:	4313      	orrs	r3, r2
 801bcac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d00a      	beq.n	801bcd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801bcbc:	4b54      	ldr	r3, [pc, #336]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bcc2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcca:	4951      	ldr	r1, [pc, #324]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bccc:	4313      	orrs	r3, r2
 801bcce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d015      	beq.n	801bd0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bcde:	4b4c      	ldr	r3, [pc, #304]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcec:	4948      	ldr	r1, [pc, #288]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcee:	4313      	orrs	r3, r2
 801bcf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bcfc:	d105      	bne.n	801bd0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bcfe:	4b44      	ldr	r3, [pc, #272]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd00:	68db      	ldr	r3, [r3, #12]
 801bd02:	4a43      	ldr	r2, [pc, #268]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bd08:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d015      	beq.n	801bd42 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801bd16:	4b3e      	ldr	r3, [pc, #248]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd24:	493a      	ldr	r1, [pc, #232]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd26:	4313      	orrs	r3, r2
 801bd28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bd34:	d105      	bne.n	801bd42 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bd36:	4b36      	ldr	r3, [pc, #216]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd38:	68db      	ldr	r3, [r3, #12]
 801bd3a:	4a35      	ldr	r2, [pc, #212]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bd40:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d015      	beq.n	801bd7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801bd4e:	4b30      	ldr	r3, [pc, #192]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd5c:	492c      	ldr	r1, [pc, #176]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd5e:	4313      	orrs	r3, r2
 801bd60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bd6c:	d105      	bne.n	801bd7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bd6e:	4b28      	ldr	r3, [pc, #160]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd70:	68db      	ldr	r3, [r3, #12]
 801bd72:	4a27      	ldr	r2, [pc, #156]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bd78:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d015      	beq.n	801bdb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801bd86:	4b22      	ldr	r3, [pc, #136]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd94:	491e      	ldr	r1, [pc, #120]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd96:	4313      	orrs	r3, r2
 801bd98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bda0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bda4:	d105      	bne.n	801bdb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bda6:	4b1a      	ldr	r3, [pc, #104]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bda8:	68db      	ldr	r3, [r3, #12]
 801bdaa:	4a19      	ldr	r2, [pc, #100]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bdac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bdb0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d015      	beq.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801bdbe:	4b14      	ldr	r3, [pc, #80]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bdc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bdc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bdcc:	4910      	ldr	r1, [pc, #64]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bdce:	4313      	orrs	r3, r2
 801bdd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bdd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bddc:	d105      	bne.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bdde:	4b0c      	ldr	r3, [pc, #48]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bde0:	68db      	ldr	r3, [r3, #12]
 801bde2:	4a0b      	ldr	r2, [pc, #44]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bde4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bde8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d018      	beq.n	801be28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801bdf6:	4b06      	ldr	r3, [pc, #24]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bdf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bdfc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be04:	4902      	ldr	r1, [pc, #8]	; (801be10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801be06:	4313      	orrs	r3, r2
 801be08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	e001      	b.n	801be14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801be10:	40021000 	.word	0x40021000
 801be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801be1a:	d105      	bne.n	801be28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801be1c:	4b21      	ldr	r3, [pc, #132]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be1e:	68db      	ldr	r3, [r3, #12]
 801be20:	4a20      	ldr	r2, [pc, #128]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801be26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801be30:	2b00      	cmp	r3, #0
 801be32:	d015      	beq.n	801be60 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801be34:	4b1b      	ldr	r3, [pc, #108]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be3a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be42:	4918      	ldr	r1, [pc, #96]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be44:	4313      	orrs	r3, r2
 801be46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801be52:	d105      	bne.n	801be60 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801be54:	4b13      	ldr	r3, [pc, #76]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be56:	68db      	ldr	r3, [r3, #12]
 801be58:	4a12      	ldr	r2, [pc, #72]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801be5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d015      	beq.n	801be98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801be6c:	4b0d      	ldr	r3, [pc, #52]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801be72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be7a:	490a      	ldr	r1, [pc, #40]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be7c:	4313      	orrs	r3, r2
 801be7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801be8a:	d105      	bne.n	801be98 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801be8c:	4b05      	ldr	r3, [pc, #20]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be8e:	68db      	ldr	r3, [r3, #12]
 801be90:	4a04      	ldr	r2, [pc, #16]	; (801bea4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801be92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801be96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801be98:	7cbb      	ldrb	r3, [r7, #18]
}
 801be9a:	4618      	mov	r0, r3
 801be9c:	3718      	adds	r7, #24
 801be9e:	46bd      	mov	sp, r7
 801bea0:	bd80      	pop	{r7, pc}
 801bea2:	bf00      	nop
 801bea4:	40021000 	.word	0x40021000

0801bea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b084      	sub	sp, #16
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d101      	bne.n	801beba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801beb6:	2301      	movs	r3, #1
 801beb8:	e09d      	b.n	801bff6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d108      	bne.n	801bed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	685b      	ldr	r3, [r3, #4]
 801bec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801beca:	d009      	beq.n	801bee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	2200      	movs	r2, #0
 801bed0:	61da      	str	r2, [r3, #28]
 801bed2:	e005      	b.n	801bee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	2200      	movs	r2, #0
 801bed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	2200      	movs	r2, #0
 801bede:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	2200      	movs	r2, #0
 801bee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801beec:	b2db      	uxtb	r3, r3
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d106      	bne.n	801bf00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	2200      	movs	r2, #0
 801bef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801befa:	6878      	ldr	r0, [r7, #4]
 801befc:	f7fa fc54 	bl	80167a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	2202      	movs	r2, #2
 801bf04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	681a      	ldr	r2, [r3, #0]
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801bf16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	68db      	ldr	r3, [r3, #12]
 801bf1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801bf20:	d902      	bls.n	801bf28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801bf22:	2300      	movs	r3, #0
 801bf24:	60fb      	str	r3, [r7, #12]
 801bf26:	e002      	b.n	801bf2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801bf28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801bf2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	68db      	ldr	r3, [r3, #12]
 801bf32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801bf36:	d007      	beq.n	801bf48 <HAL_SPI_Init+0xa0>
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	68db      	ldr	r3, [r3, #12]
 801bf3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801bf40:	d002      	beq.n	801bf48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	2200      	movs	r2, #0
 801bf46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	685b      	ldr	r3, [r3, #4]
 801bf4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	689b      	ldr	r3, [r3, #8]
 801bf54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801bf58:	431a      	orrs	r2, r3
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	691b      	ldr	r3, [r3, #16]
 801bf5e:	f003 0302 	and.w	r3, r3, #2
 801bf62:	431a      	orrs	r2, r3
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	695b      	ldr	r3, [r3, #20]
 801bf68:	f003 0301 	and.w	r3, r3, #1
 801bf6c:	431a      	orrs	r2, r3
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	699b      	ldr	r3, [r3, #24]
 801bf72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bf76:	431a      	orrs	r2, r3
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	69db      	ldr	r3, [r3, #28]
 801bf7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801bf80:	431a      	orrs	r2, r3
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	6a1b      	ldr	r3, [r3, #32]
 801bf86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bf8a:	ea42 0103 	orr.w	r1, r2, r3
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	430a      	orrs	r2, r1
 801bf9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	699b      	ldr	r3, [r3, #24]
 801bfa2:	0c1b      	lsrs	r3, r3, #16
 801bfa4:	f003 0204 	and.w	r2, r3, #4
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfac:	f003 0310 	and.w	r3, r3, #16
 801bfb0:	431a      	orrs	r2, r3
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bfb6:	f003 0308 	and.w	r3, r3, #8
 801bfba:	431a      	orrs	r2, r3
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	68db      	ldr	r3, [r3, #12]
 801bfc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801bfc4:	ea42 0103 	orr.w	r1, r2, r3
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	430a      	orrs	r2, r1
 801bfd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	69da      	ldr	r2, [r3, #28]
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bfe4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	2200      	movs	r2, #0
 801bfea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	2201      	movs	r2, #1
 801bff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801bff4:	2300      	movs	r3, #0
}
 801bff6:	4618      	mov	r0, r3
 801bff8:	3710      	adds	r7, #16
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bd80      	pop	{r7, pc}

0801bffe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bffe:	b580      	push	{r7, lr}
 801c000:	b088      	sub	sp, #32
 801c002:	af00      	add	r7, sp, #0
 801c004:	60f8      	str	r0, [r7, #12]
 801c006:	60b9      	str	r1, [r7, #8]
 801c008:	603b      	str	r3, [r7, #0]
 801c00a:	4613      	mov	r3, r2
 801c00c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c00e:	2300      	movs	r3, #0
 801c010:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c018:	2b01      	cmp	r3, #1
 801c01a:	d101      	bne.n	801c020 <HAL_SPI_Transmit+0x22>
 801c01c:	2302      	movs	r3, #2
 801c01e:	e158      	b.n	801c2d2 <HAL_SPI_Transmit+0x2d4>
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	2201      	movs	r2, #1
 801c024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c028:	f7fb fd3e 	bl	8017aa8 <HAL_GetTick>
 801c02c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c02e:	88fb      	ldrh	r3, [r7, #6]
 801c030:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c038:	b2db      	uxtb	r3, r3
 801c03a:	2b01      	cmp	r3, #1
 801c03c:	d002      	beq.n	801c044 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c03e:	2302      	movs	r3, #2
 801c040:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c042:	e13d      	b.n	801c2c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801c044:	68bb      	ldr	r3, [r7, #8]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d002      	beq.n	801c050 <HAL_SPI_Transmit+0x52>
 801c04a:	88fb      	ldrh	r3, [r7, #6]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d102      	bne.n	801c056 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c050:	2301      	movs	r3, #1
 801c052:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c054:	e134      	b.n	801c2c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	2203      	movs	r2, #3
 801c05a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	2200      	movs	r2, #0
 801c062:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	68ba      	ldr	r2, [r7, #8]
 801c068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	88fa      	ldrh	r2, [r7, #6]
 801c06e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	88fa      	ldrh	r2, [r7, #6]
 801c074:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	2200      	movs	r2, #0
 801c07a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	2200      	movs	r2, #0
 801c080:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	2200      	movs	r2, #0
 801c088:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	2200      	movs	r2, #0
 801c090:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	2200      	movs	r2, #0
 801c096:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	689b      	ldr	r3, [r3, #8]
 801c09c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c0a0:	d10f      	bne.n	801c0c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	681a      	ldr	r2, [r3, #0]
 801c0a8:	68fb      	ldr	r3, [r7, #12]
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c0b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	681a      	ldr	r2, [r3, #0]
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c0c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c0cc:	2b40      	cmp	r3, #64	; 0x40
 801c0ce:	d007      	beq.n	801c0e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	681a      	ldr	r2, [r3, #0]
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c0de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	68db      	ldr	r3, [r3, #12]
 801c0e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c0e8:	d94b      	bls.n	801c182 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	685b      	ldr	r3, [r3, #4]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d002      	beq.n	801c0f8 <HAL_SPI_Transmit+0xfa>
 801c0f2:	8afb      	ldrh	r3, [r7, #22]
 801c0f4:	2b01      	cmp	r3, #1
 801c0f6:	d13e      	bne.n	801c176 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0fc:	881a      	ldrh	r2, [r3, #0]
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c108:	1c9a      	adds	r2, r3, #2
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c112:	b29b      	uxth	r3, r3
 801c114:	3b01      	subs	r3, #1
 801c116:	b29a      	uxth	r2, r3
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c11c:	e02b      	b.n	801c176 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	689b      	ldr	r3, [r3, #8]
 801c124:	f003 0302 	and.w	r3, r3, #2
 801c128:	2b02      	cmp	r3, #2
 801c12a:	d112      	bne.n	801c152 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c130:	881a      	ldrh	r2, [r3, #0]
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c13c:	1c9a      	adds	r2, r3, #2
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c146:	b29b      	uxth	r3, r3
 801c148:	3b01      	subs	r3, #1
 801c14a:	b29a      	uxth	r2, r3
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c150:	e011      	b.n	801c176 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c152:	f7fb fca9 	bl	8017aa8 <HAL_GetTick>
 801c156:	4602      	mov	r2, r0
 801c158:	69bb      	ldr	r3, [r7, #24]
 801c15a:	1ad3      	subs	r3, r2, r3
 801c15c:	683a      	ldr	r2, [r7, #0]
 801c15e:	429a      	cmp	r2, r3
 801c160:	d803      	bhi.n	801c16a <HAL_SPI_Transmit+0x16c>
 801c162:	683b      	ldr	r3, [r7, #0]
 801c164:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c168:	d102      	bne.n	801c170 <HAL_SPI_Transmit+0x172>
 801c16a:	683b      	ldr	r3, [r7, #0]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d102      	bne.n	801c176 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801c170:	2303      	movs	r3, #3
 801c172:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c174:	e0a4      	b.n	801c2c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c17a:	b29b      	uxth	r3, r3
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d1ce      	bne.n	801c11e <HAL_SPI_Transmit+0x120>
 801c180:	e07c      	b.n	801c27c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	685b      	ldr	r3, [r3, #4]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d002      	beq.n	801c190 <HAL_SPI_Transmit+0x192>
 801c18a:	8afb      	ldrh	r3, [r7, #22]
 801c18c:	2b01      	cmp	r3, #1
 801c18e:	d170      	bne.n	801c272 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c194:	b29b      	uxth	r3, r3
 801c196:	2b01      	cmp	r3, #1
 801c198:	d912      	bls.n	801c1c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c19e:	881a      	ldrh	r2, [r3, #0]
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1aa:	1c9a      	adds	r2, r3, #2
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c1b4:	b29b      	uxth	r3, r3
 801c1b6:	3b02      	subs	r3, #2
 801c1b8:	b29a      	uxth	r2, r3
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c1be:	e058      	b.n	801c272 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	330c      	adds	r3, #12
 801c1ca:	7812      	ldrb	r2, [r2, #0]
 801c1cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1d2:	1c5a      	adds	r2, r3, #1
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c1dc:	b29b      	uxth	r3, r3
 801c1de:	3b01      	subs	r3, #1
 801c1e0:	b29a      	uxth	r2, r3
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801c1e6:	e044      	b.n	801c272 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	689b      	ldr	r3, [r3, #8]
 801c1ee:	f003 0302 	and.w	r3, r3, #2
 801c1f2:	2b02      	cmp	r3, #2
 801c1f4:	d12b      	bne.n	801c24e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c1fa:	b29b      	uxth	r3, r3
 801c1fc:	2b01      	cmp	r3, #1
 801c1fe:	d912      	bls.n	801c226 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c204:	881a      	ldrh	r2, [r3, #0]
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c210:	1c9a      	adds	r2, r3, #2
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c216:	68fb      	ldr	r3, [r7, #12]
 801c218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c21a:	b29b      	uxth	r3, r3
 801c21c:	3b02      	subs	r3, #2
 801c21e:	b29a      	uxth	r2, r3
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c224:	e025      	b.n	801c272 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	330c      	adds	r3, #12
 801c230:	7812      	ldrb	r2, [r2, #0]
 801c232:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c238:	1c5a      	adds	r2, r3, #1
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c242:	b29b      	uxth	r3, r3
 801c244:	3b01      	subs	r3, #1
 801c246:	b29a      	uxth	r2, r3
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c24c:	e011      	b.n	801c272 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c24e:	f7fb fc2b 	bl	8017aa8 <HAL_GetTick>
 801c252:	4602      	mov	r2, r0
 801c254:	69bb      	ldr	r3, [r7, #24]
 801c256:	1ad3      	subs	r3, r2, r3
 801c258:	683a      	ldr	r2, [r7, #0]
 801c25a:	429a      	cmp	r2, r3
 801c25c:	d803      	bhi.n	801c266 <HAL_SPI_Transmit+0x268>
 801c25e:	683b      	ldr	r3, [r7, #0]
 801c260:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c264:	d102      	bne.n	801c26c <HAL_SPI_Transmit+0x26e>
 801c266:	683b      	ldr	r3, [r7, #0]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d102      	bne.n	801c272 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801c26c:	2303      	movs	r3, #3
 801c26e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c270:	e026      	b.n	801c2c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c276:	b29b      	uxth	r3, r3
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d1b5      	bne.n	801c1e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c27c:	69ba      	ldr	r2, [r7, #24]
 801c27e:	6839      	ldr	r1, [r7, #0]
 801c280:	68f8      	ldr	r0, [r7, #12]
 801c282:	f000 fce3 	bl	801cc4c <SPI_EndRxTxTransaction>
 801c286:	4603      	mov	r3, r0
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d002      	beq.n	801c292 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	2220      	movs	r2, #32
 801c290:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	689b      	ldr	r3, [r3, #8]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d10a      	bne.n	801c2b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c29a:	2300      	movs	r3, #0
 801c29c:	613b      	str	r3, [r7, #16]
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	68db      	ldr	r3, [r3, #12]
 801c2a4:	613b      	str	r3, [r7, #16]
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	689b      	ldr	r3, [r3, #8]
 801c2ac:	613b      	str	r3, [r7, #16]
 801c2ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d002      	beq.n	801c2be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801c2b8:	2301      	movs	r3, #1
 801c2ba:	77fb      	strb	r3, [r7, #31]
 801c2bc:	e000      	b.n	801c2c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801c2be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	2201      	movs	r2, #1
 801c2c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	2200      	movs	r2, #0
 801c2cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c2d0:	7ffb      	ldrb	r3, [r7, #31]
}
 801c2d2:	4618      	mov	r0, r3
 801c2d4:	3720      	adds	r7, #32
 801c2d6:	46bd      	mov	sp, r7
 801c2d8:	bd80      	pop	{r7, pc}

0801c2da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c2da:	b580      	push	{r7, lr}
 801c2dc:	b088      	sub	sp, #32
 801c2de:	af02      	add	r7, sp, #8
 801c2e0:	60f8      	str	r0, [r7, #12]
 801c2e2:	60b9      	str	r1, [r7, #8]
 801c2e4:	603b      	str	r3, [r7, #0]
 801c2e6:	4613      	mov	r3, r2
 801c2e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c2ea:	2300      	movs	r3, #0
 801c2ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	685b      	ldr	r3, [r3, #4]
 801c2f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c2f6:	d112      	bne.n	801c31e <HAL_SPI_Receive+0x44>
 801c2f8:	68fb      	ldr	r3, [r7, #12]
 801c2fa:	689b      	ldr	r3, [r3, #8]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d10e      	bne.n	801c31e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	2204      	movs	r2, #4
 801c304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c308:	88fa      	ldrh	r2, [r7, #6]
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	9300      	str	r3, [sp, #0]
 801c30e:	4613      	mov	r3, r2
 801c310:	68ba      	ldr	r2, [r7, #8]
 801c312:	68b9      	ldr	r1, [r7, #8]
 801c314:	68f8      	ldr	r0, [r7, #12]
 801c316:	f000 f910 	bl	801c53a <HAL_SPI_TransmitReceive>
 801c31a:	4603      	mov	r3, r0
 801c31c:	e109      	b.n	801c532 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c324:	2b01      	cmp	r3, #1
 801c326:	d101      	bne.n	801c32c <HAL_SPI_Receive+0x52>
 801c328:	2302      	movs	r3, #2
 801c32a:	e102      	b.n	801c532 <HAL_SPI_Receive+0x258>
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	2201      	movs	r2, #1
 801c330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c334:	f7fb fbb8 	bl	8017aa8 <HAL_GetTick>
 801c338:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c340:	b2db      	uxtb	r3, r3
 801c342:	2b01      	cmp	r3, #1
 801c344:	d002      	beq.n	801c34c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c346:	2302      	movs	r3, #2
 801c348:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c34a:	e0e9      	b.n	801c520 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801c34c:	68bb      	ldr	r3, [r7, #8]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d002      	beq.n	801c358 <HAL_SPI_Receive+0x7e>
 801c352:	88fb      	ldrh	r3, [r7, #6]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d102      	bne.n	801c35e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c358:	2301      	movs	r3, #1
 801c35a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c35c:	e0e0      	b.n	801c520 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	2204      	movs	r2, #4
 801c362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	2200      	movs	r2, #0
 801c36a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	68ba      	ldr	r2, [r7, #8]
 801c370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	88fa      	ldrh	r2, [r7, #6]
 801c376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	88fa      	ldrh	r2, [r7, #6]
 801c37e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	2200      	movs	r2, #0
 801c386:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	2200      	movs	r2, #0
 801c38c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	2200      	movs	r2, #0
 801c392:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	2200      	movs	r2, #0
 801c398:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	2200      	movs	r2, #0
 801c39e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	68db      	ldr	r3, [r3, #12]
 801c3a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c3a8:	d908      	bls.n	801c3bc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	685a      	ldr	r2, [r3, #4]
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c3b8:	605a      	str	r2, [r3, #4]
 801c3ba:	e007      	b.n	801c3cc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	685a      	ldr	r2, [r3, #4]
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c3ca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	689b      	ldr	r3, [r3, #8]
 801c3d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c3d4:	d10f      	bne.n	801c3f6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	681a      	ldr	r2, [r3, #0]
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c3e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	681a      	ldr	r2, [r3, #0]
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c3f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c400:	2b40      	cmp	r3, #64	; 0x40
 801c402:	d007      	beq.n	801c414 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	681a      	ldr	r2, [r3, #0]
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c412:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	68db      	ldr	r3, [r3, #12]
 801c418:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c41c:	d867      	bhi.n	801c4ee <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c41e:	e030      	b.n	801c482 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	689b      	ldr	r3, [r3, #8]
 801c426:	f003 0301 	and.w	r3, r3, #1
 801c42a:	2b01      	cmp	r3, #1
 801c42c:	d117      	bne.n	801c45e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	f103 020c 	add.w	r2, r3, #12
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c43a:	7812      	ldrb	r2, [r2, #0]
 801c43c:	b2d2      	uxtb	r2, r2
 801c43e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c444:	1c5a      	adds	r2, r3, #1
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c450:	b29b      	uxth	r3, r3
 801c452:	3b01      	subs	r3, #1
 801c454:	b29a      	uxth	r2, r3
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c45c:	e011      	b.n	801c482 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c45e:	f7fb fb23 	bl	8017aa8 <HAL_GetTick>
 801c462:	4602      	mov	r2, r0
 801c464:	693b      	ldr	r3, [r7, #16]
 801c466:	1ad3      	subs	r3, r2, r3
 801c468:	683a      	ldr	r2, [r7, #0]
 801c46a:	429a      	cmp	r2, r3
 801c46c:	d803      	bhi.n	801c476 <HAL_SPI_Receive+0x19c>
 801c46e:	683b      	ldr	r3, [r7, #0]
 801c470:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c474:	d102      	bne.n	801c47c <HAL_SPI_Receive+0x1a2>
 801c476:	683b      	ldr	r3, [r7, #0]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d102      	bne.n	801c482 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801c47c:	2303      	movs	r3, #3
 801c47e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c480:	e04e      	b.n	801c520 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c488:	b29b      	uxth	r3, r3
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d1c8      	bne.n	801c420 <HAL_SPI_Receive+0x146>
 801c48e:	e034      	b.n	801c4fa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	689b      	ldr	r3, [r3, #8]
 801c496:	f003 0301 	and.w	r3, r3, #1
 801c49a:	2b01      	cmp	r3, #1
 801c49c:	d115      	bne.n	801c4ca <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	68da      	ldr	r2, [r3, #12]
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4a8:	b292      	uxth	r2, r2
 801c4aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4b0:	1c9a      	adds	r2, r3, #2
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c4bc:	b29b      	uxth	r3, r3
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	b29a      	uxth	r2, r3
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c4c8:	e011      	b.n	801c4ee <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c4ca:	f7fb faed 	bl	8017aa8 <HAL_GetTick>
 801c4ce:	4602      	mov	r2, r0
 801c4d0:	693b      	ldr	r3, [r7, #16]
 801c4d2:	1ad3      	subs	r3, r2, r3
 801c4d4:	683a      	ldr	r2, [r7, #0]
 801c4d6:	429a      	cmp	r2, r3
 801c4d8:	d803      	bhi.n	801c4e2 <HAL_SPI_Receive+0x208>
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4e0:	d102      	bne.n	801c4e8 <HAL_SPI_Receive+0x20e>
 801c4e2:	683b      	ldr	r3, [r7, #0]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d102      	bne.n	801c4ee <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801c4e8:	2303      	movs	r3, #3
 801c4ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c4ec:	e018      	b.n	801c520 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c4f4:	b29b      	uxth	r3, r3
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d1ca      	bne.n	801c490 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c4fa:	693a      	ldr	r2, [r7, #16]
 801c4fc:	6839      	ldr	r1, [r7, #0]
 801c4fe:	68f8      	ldr	r0, [r7, #12]
 801c500:	f000 fb4c 	bl	801cb9c <SPI_EndRxTransaction>
 801c504:	4603      	mov	r3, r0
 801c506:	2b00      	cmp	r3, #0
 801c508:	d002      	beq.n	801c510 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	2220      	movs	r2, #32
 801c50e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c514:	2b00      	cmp	r3, #0
 801c516:	d002      	beq.n	801c51e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801c518:	2301      	movs	r3, #1
 801c51a:	75fb      	strb	r3, [r7, #23]
 801c51c:	e000      	b.n	801c520 <HAL_SPI_Receive+0x246>
  }

error :
 801c51e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	2201      	movs	r2, #1
 801c524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	2200      	movs	r2, #0
 801c52c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c530:	7dfb      	ldrb	r3, [r7, #23]
}
 801c532:	4618      	mov	r0, r3
 801c534:	3718      	adds	r7, #24
 801c536:	46bd      	mov	sp, r7
 801c538:	bd80      	pop	{r7, pc}

0801c53a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c53a:	b580      	push	{r7, lr}
 801c53c:	b08a      	sub	sp, #40	; 0x28
 801c53e:	af00      	add	r7, sp, #0
 801c540:	60f8      	str	r0, [r7, #12]
 801c542:	60b9      	str	r1, [r7, #8]
 801c544:	607a      	str	r2, [r7, #4]
 801c546:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c548:	2301      	movs	r3, #1
 801c54a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c54c:	2300      	movs	r3, #0
 801c54e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c558:	2b01      	cmp	r3, #1
 801c55a:	d101      	bne.n	801c560 <HAL_SPI_TransmitReceive+0x26>
 801c55c:	2302      	movs	r3, #2
 801c55e:	e1fb      	b.n	801c958 <HAL_SPI_TransmitReceive+0x41e>
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	2201      	movs	r2, #1
 801c564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c568:	f7fb fa9e 	bl	8017aa8 <HAL_GetTick>
 801c56c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c574:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	685b      	ldr	r3, [r3, #4]
 801c57a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801c57c:	887b      	ldrh	r3, [r7, #2]
 801c57e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801c580:	887b      	ldrh	r3, [r7, #2]
 801c582:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c584:	7efb      	ldrb	r3, [r7, #27]
 801c586:	2b01      	cmp	r3, #1
 801c588:	d00e      	beq.n	801c5a8 <HAL_SPI_TransmitReceive+0x6e>
 801c58a:	697b      	ldr	r3, [r7, #20]
 801c58c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c590:	d106      	bne.n	801c5a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	689b      	ldr	r3, [r3, #8]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d102      	bne.n	801c5a0 <HAL_SPI_TransmitReceive+0x66>
 801c59a:	7efb      	ldrb	r3, [r7, #27]
 801c59c:	2b04      	cmp	r3, #4
 801c59e:	d003      	beq.n	801c5a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801c5a0:	2302      	movs	r3, #2
 801c5a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c5a6:	e1cd      	b.n	801c944 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c5a8:	68bb      	ldr	r3, [r7, #8]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d005      	beq.n	801c5ba <HAL_SPI_TransmitReceive+0x80>
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d002      	beq.n	801c5ba <HAL_SPI_TransmitReceive+0x80>
 801c5b4:	887b      	ldrh	r3, [r7, #2]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d103      	bne.n	801c5c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801c5ba:	2301      	movs	r3, #1
 801c5bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c5c0:	e1c0      	b.n	801c944 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c5c8:	b2db      	uxtb	r3, r3
 801c5ca:	2b04      	cmp	r3, #4
 801c5cc:	d003      	beq.n	801c5d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	2205      	movs	r2, #5
 801c5d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	2200      	movs	r2, #0
 801c5da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	687a      	ldr	r2, [r7, #4]
 801c5e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	887a      	ldrh	r2, [r7, #2]
 801c5e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	887a      	ldrh	r2, [r7, #2]
 801c5ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	68ba      	ldr	r2, [r7, #8]
 801c5f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	887a      	ldrh	r2, [r7, #2]
 801c5fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	887a      	ldrh	r2, [r7, #2]
 801c602:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	2200      	movs	r2, #0
 801c608:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	2200      	movs	r2, #0
 801c60e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	68db      	ldr	r3, [r3, #12]
 801c614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c618:	d802      	bhi.n	801c620 <HAL_SPI_TransmitReceive+0xe6>
 801c61a:	8a3b      	ldrh	r3, [r7, #16]
 801c61c:	2b01      	cmp	r3, #1
 801c61e:	d908      	bls.n	801c632 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	685a      	ldr	r2, [r3, #4]
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c62e:	605a      	str	r2, [r3, #4]
 801c630:	e007      	b.n	801c642 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	685a      	ldr	r2, [r3, #4]
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c640:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c642:	68fb      	ldr	r3, [r7, #12]
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c64c:	2b40      	cmp	r3, #64	; 0x40
 801c64e:	d007      	beq.n	801c660 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	681a      	ldr	r2, [r3, #0]
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c65e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	68db      	ldr	r3, [r3, #12]
 801c664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c668:	d97c      	bls.n	801c764 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c66a:	68fb      	ldr	r3, [r7, #12]
 801c66c:	685b      	ldr	r3, [r3, #4]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d002      	beq.n	801c678 <HAL_SPI_TransmitReceive+0x13e>
 801c672:	8a7b      	ldrh	r3, [r7, #18]
 801c674:	2b01      	cmp	r3, #1
 801c676:	d169      	bne.n	801c74c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c67c:	881a      	ldrh	r2, [r3, #0]
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c688:	1c9a      	adds	r2, r3, #2
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c692:	b29b      	uxth	r3, r3
 801c694:	3b01      	subs	r3, #1
 801c696:	b29a      	uxth	r2, r3
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c69c:	e056      	b.n	801c74c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	689b      	ldr	r3, [r3, #8]
 801c6a4:	f003 0302 	and.w	r3, r3, #2
 801c6a8:	2b02      	cmp	r3, #2
 801c6aa:	d11b      	bne.n	801c6e4 <HAL_SPI_TransmitReceive+0x1aa>
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c6b0:	b29b      	uxth	r3, r3
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d016      	beq.n	801c6e4 <HAL_SPI_TransmitReceive+0x1aa>
 801c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6b8:	2b01      	cmp	r3, #1
 801c6ba:	d113      	bne.n	801c6e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6c0:	881a      	ldrh	r2, [r3, #0]
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6cc:	1c9a      	adds	r2, r3, #2
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c6d6:	b29b      	uxth	r3, r3
 801c6d8:	3b01      	subs	r3, #1
 801c6da:	b29a      	uxth	r2, r3
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c6e0:	2300      	movs	r3, #0
 801c6e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	689b      	ldr	r3, [r3, #8]
 801c6ea:	f003 0301 	and.w	r3, r3, #1
 801c6ee:	2b01      	cmp	r3, #1
 801c6f0:	d11c      	bne.n	801c72c <HAL_SPI_TransmitReceive+0x1f2>
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c6f8:	b29b      	uxth	r3, r3
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d016      	beq.n	801c72c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	68da      	ldr	r2, [r3, #12]
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c708:	b292      	uxth	r2, r2
 801c70a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c710:	1c9a      	adds	r2, r3, #2
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c71c:	b29b      	uxth	r3, r3
 801c71e:	3b01      	subs	r3, #1
 801c720:	b29a      	uxth	r2, r3
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c728:	2301      	movs	r3, #1
 801c72a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c72c:	f7fb f9bc 	bl	8017aa8 <HAL_GetTick>
 801c730:	4602      	mov	r2, r0
 801c732:	69fb      	ldr	r3, [r7, #28]
 801c734:	1ad3      	subs	r3, r2, r3
 801c736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c738:	429a      	cmp	r2, r3
 801c73a:	d807      	bhi.n	801c74c <HAL_SPI_TransmitReceive+0x212>
 801c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c742:	d003      	beq.n	801c74c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801c744:	2303      	movs	r3, #3
 801c746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c74a:	e0fb      	b.n	801c944 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c750:	b29b      	uxth	r3, r3
 801c752:	2b00      	cmp	r3, #0
 801c754:	d1a3      	bne.n	801c69e <HAL_SPI_TransmitReceive+0x164>
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c75c:	b29b      	uxth	r3, r3
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d19d      	bne.n	801c69e <HAL_SPI_TransmitReceive+0x164>
 801c762:	e0df      	b.n	801c924 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	685b      	ldr	r3, [r3, #4]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d003      	beq.n	801c774 <HAL_SPI_TransmitReceive+0x23a>
 801c76c:	8a7b      	ldrh	r3, [r7, #18]
 801c76e:	2b01      	cmp	r3, #1
 801c770:	f040 80cb 	bne.w	801c90a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c778:	b29b      	uxth	r3, r3
 801c77a:	2b01      	cmp	r3, #1
 801c77c:	d912      	bls.n	801c7a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c782:	881a      	ldrh	r2, [r3, #0]
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c78e:	1c9a      	adds	r2, r3, #2
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c798:	b29b      	uxth	r3, r3
 801c79a:	3b02      	subs	r3, #2
 801c79c:	b29a      	uxth	r2, r3
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c7a2:	e0b2      	b.n	801c90a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	330c      	adds	r3, #12
 801c7ae:	7812      	ldrb	r2, [r2, #0]
 801c7b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7b6:	1c5a      	adds	r2, r3, #1
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7c0:	b29b      	uxth	r3, r3
 801c7c2:	3b01      	subs	r3, #1
 801c7c4:	b29a      	uxth	r2, r3
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c7ca:	e09e      	b.n	801c90a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	689b      	ldr	r3, [r3, #8]
 801c7d2:	f003 0302 	and.w	r3, r3, #2
 801c7d6:	2b02      	cmp	r3, #2
 801c7d8:	d134      	bne.n	801c844 <HAL_SPI_TransmitReceive+0x30a>
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7de:	b29b      	uxth	r3, r3
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d02f      	beq.n	801c844 <HAL_SPI_TransmitReceive+0x30a>
 801c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7e6:	2b01      	cmp	r3, #1
 801c7e8:	d12c      	bne.n	801c844 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7ee:	b29b      	uxth	r3, r3
 801c7f0:	2b01      	cmp	r3, #1
 801c7f2:	d912      	bls.n	801c81a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7f8:	881a      	ldrh	r2, [r3, #0]
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c804:	1c9a      	adds	r2, r3, #2
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c80e:	b29b      	uxth	r3, r3
 801c810:	3b02      	subs	r3, #2
 801c812:	b29a      	uxth	r2, r3
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c818:	e012      	b.n	801c840 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	330c      	adds	r3, #12
 801c824:	7812      	ldrb	r2, [r2, #0]
 801c826:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c82c:	1c5a      	adds	r2, r3, #1
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c836:	b29b      	uxth	r3, r3
 801c838:	3b01      	subs	r3, #1
 801c83a:	b29a      	uxth	r2, r3
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c840:	2300      	movs	r3, #0
 801c842:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	689b      	ldr	r3, [r3, #8]
 801c84a:	f003 0301 	and.w	r3, r3, #1
 801c84e:	2b01      	cmp	r3, #1
 801c850:	d148      	bne.n	801c8e4 <HAL_SPI_TransmitReceive+0x3aa>
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c858:	b29b      	uxth	r3, r3
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d042      	beq.n	801c8e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c864:	b29b      	uxth	r3, r3
 801c866:	2b01      	cmp	r3, #1
 801c868:	d923      	bls.n	801c8b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	68da      	ldr	r2, [r3, #12]
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c874:	b292      	uxth	r2, r2
 801c876:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c87c:	1c9a      	adds	r2, r3, #2
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c888:	b29b      	uxth	r3, r3
 801c88a:	3b02      	subs	r3, #2
 801c88c:	b29a      	uxth	r2, r3
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c89a:	b29b      	uxth	r3, r3
 801c89c:	2b01      	cmp	r3, #1
 801c89e:	d81f      	bhi.n	801c8e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	685a      	ldr	r2, [r3, #4]
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c8ae:	605a      	str	r2, [r3, #4]
 801c8b0:	e016      	b.n	801c8e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	f103 020c 	add.w	r2, r3, #12
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8be:	7812      	ldrb	r2, [r2, #0]
 801c8c0:	b2d2      	uxtb	r2, r2
 801c8c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8c8:	1c5a      	adds	r2, r3, #1
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c8d4:	b29b      	uxth	r3, r3
 801c8d6:	3b01      	subs	r3, #1
 801c8d8:	b29a      	uxth	r2, r3
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c8e0:	2301      	movs	r3, #1
 801c8e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c8e4:	f7fb f8e0 	bl	8017aa8 <HAL_GetTick>
 801c8e8:	4602      	mov	r2, r0
 801c8ea:	69fb      	ldr	r3, [r7, #28]
 801c8ec:	1ad3      	subs	r3, r2, r3
 801c8ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c8f0:	429a      	cmp	r2, r3
 801c8f2:	d803      	bhi.n	801c8fc <HAL_SPI_TransmitReceive+0x3c2>
 801c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8fa:	d102      	bne.n	801c902 <HAL_SPI_TransmitReceive+0x3c8>
 801c8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d103      	bne.n	801c90a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801c902:	2303      	movs	r3, #3
 801c904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c908:	e01c      	b.n	801c944 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c90e:	b29b      	uxth	r3, r3
 801c910:	2b00      	cmp	r3, #0
 801c912:	f47f af5b 	bne.w	801c7cc <HAL_SPI_TransmitReceive+0x292>
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c91c:	b29b      	uxth	r3, r3
 801c91e:	2b00      	cmp	r3, #0
 801c920:	f47f af54 	bne.w	801c7cc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c924:	69fa      	ldr	r2, [r7, #28]
 801c926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c928:	68f8      	ldr	r0, [r7, #12]
 801c92a:	f000 f98f 	bl	801cc4c <SPI_EndRxTxTransaction>
 801c92e:	4603      	mov	r3, r0
 801c930:	2b00      	cmp	r3, #0
 801c932:	d006      	beq.n	801c942 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801c934:	2301      	movs	r3, #1
 801c936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	2220      	movs	r2, #32
 801c93e:	661a      	str	r2, [r3, #96]	; 0x60
 801c940:	e000      	b.n	801c944 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801c942:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c944:	68fb      	ldr	r3, [r7, #12]
 801c946:	2201      	movs	r2, #1
 801c948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	2200      	movs	r2, #0
 801c950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801c958:	4618      	mov	r0, r3
 801c95a:	3728      	adds	r7, #40	; 0x28
 801c95c:	46bd      	mov	sp, r7
 801c95e:	bd80      	pop	{r7, pc}

0801c960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c960:	b580      	push	{r7, lr}
 801c962:	b088      	sub	sp, #32
 801c964:	af00      	add	r7, sp, #0
 801c966:	60f8      	str	r0, [r7, #12]
 801c968:	60b9      	str	r1, [r7, #8]
 801c96a:	603b      	str	r3, [r7, #0]
 801c96c:	4613      	mov	r3, r2
 801c96e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801c970:	f7fb f89a 	bl	8017aa8 <HAL_GetTick>
 801c974:	4602      	mov	r2, r0
 801c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c978:	1a9b      	subs	r3, r3, r2
 801c97a:	683a      	ldr	r2, [r7, #0]
 801c97c:	4413      	add	r3, r2
 801c97e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801c980:	f7fb f892 	bl	8017aa8 <HAL_GetTick>
 801c984:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801c986:	4b39      	ldr	r3, [pc, #228]	; (801ca6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	015b      	lsls	r3, r3, #5
 801c98c:	0d1b      	lsrs	r3, r3, #20
 801c98e:	69fa      	ldr	r2, [r7, #28]
 801c990:	fb02 f303 	mul.w	r3, r2, r3
 801c994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c996:	e054      	b.n	801ca42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c99e:	d050      	beq.n	801ca42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801c9a0:	f7fb f882 	bl	8017aa8 <HAL_GetTick>
 801c9a4:	4602      	mov	r2, r0
 801c9a6:	69bb      	ldr	r3, [r7, #24]
 801c9a8:	1ad3      	subs	r3, r2, r3
 801c9aa:	69fa      	ldr	r2, [r7, #28]
 801c9ac:	429a      	cmp	r2, r3
 801c9ae:	d902      	bls.n	801c9b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 801c9b0:	69fb      	ldr	r3, [r7, #28]
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d13d      	bne.n	801ca32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	685a      	ldr	r2, [r3, #4]
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c9c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	685b      	ldr	r3, [r3, #4]
 801c9ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c9ce:	d111      	bne.n	801c9f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	689b      	ldr	r3, [r3, #8]
 801c9d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c9d8:	d004      	beq.n	801c9e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	689b      	ldr	r3, [r3, #8]
 801c9de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9e2:	d107      	bne.n	801c9f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801c9e4:	68fb      	ldr	r3, [r7, #12]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	681a      	ldr	r2, [r3, #0]
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c9f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c9fc:	d10f      	bne.n	801ca1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	681a      	ldr	r2, [r3, #0]
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ca0c:	601a      	str	r2, [r3, #0]
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	681a      	ldr	r2, [r3, #0]
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ca1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	2201      	movs	r2, #1
 801ca22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	2200      	movs	r2, #0
 801ca2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801ca2e:	2303      	movs	r3, #3
 801ca30:	e017      	b.n	801ca62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801ca32:	697b      	ldr	r3, [r7, #20]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d101      	bne.n	801ca3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801ca38:	2300      	movs	r3, #0
 801ca3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801ca3c:	697b      	ldr	r3, [r7, #20]
 801ca3e:	3b01      	subs	r3, #1
 801ca40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	689a      	ldr	r2, [r3, #8]
 801ca48:	68bb      	ldr	r3, [r7, #8]
 801ca4a:	4013      	ands	r3, r2
 801ca4c:	68ba      	ldr	r2, [r7, #8]
 801ca4e:	429a      	cmp	r2, r3
 801ca50:	bf0c      	ite	eq
 801ca52:	2301      	moveq	r3, #1
 801ca54:	2300      	movne	r3, #0
 801ca56:	b2db      	uxtb	r3, r3
 801ca58:	461a      	mov	r2, r3
 801ca5a:	79fb      	ldrb	r3, [r7, #7]
 801ca5c:	429a      	cmp	r2, r3
 801ca5e:	d19b      	bne.n	801c998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801ca60:	2300      	movs	r3, #0
}
 801ca62:	4618      	mov	r0, r3
 801ca64:	3720      	adds	r7, #32
 801ca66:	46bd      	mov	sp, r7
 801ca68:	bd80      	pop	{r7, pc}
 801ca6a:	bf00      	nop
 801ca6c:	20000000 	.word	0x20000000

0801ca70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b08a      	sub	sp, #40	; 0x28
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	60f8      	str	r0, [r7, #12]
 801ca78:	60b9      	str	r1, [r7, #8]
 801ca7a:	607a      	str	r2, [r7, #4]
 801ca7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801ca7e:	2300      	movs	r3, #0
 801ca80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801ca82:	f7fb f811 	bl	8017aa8 <HAL_GetTick>
 801ca86:	4602      	mov	r2, r0
 801ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca8a:	1a9b      	subs	r3, r3, r2
 801ca8c:	683a      	ldr	r2, [r7, #0]
 801ca8e:	4413      	add	r3, r2
 801ca90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801ca92:	f7fb f809 	bl	8017aa8 <HAL_GetTick>
 801ca96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	330c      	adds	r3, #12
 801ca9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801caa0:	4b3d      	ldr	r3, [pc, #244]	; (801cb98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801caa2:	681a      	ldr	r2, [r3, #0]
 801caa4:	4613      	mov	r3, r2
 801caa6:	009b      	lsls	r3, r3, #2
 801caa8:	4413      	add	r3, r2
 801caaa:	00da      	lsls	r2, r3, #3
 801caac:	1ad3      	subs	r3, r2, r3
 801caae:	0d1b      	lsrs	r3, r3, #20
 801cab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cab2:	fb02 f303 	mul.w	r3, r2, r3
 801cab6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801cab8:	e060      	b.n	801cb7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801caba:	68bb      	ldr	r3, [r7, #8]
 801cabc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801cac0:	d107      	bne.n	801cad2 <SPI_WaitFifoStateUntilTimeout+0x62>
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d104      	bne.n	801cad2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801cac8:	69fb      	ldr	r3, [r7, #28]
 801caca:	781b      	ldrb	r3, [r3, #0]
 801cacc:	b2db      	uxtb	r3, r3
 801cace:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801cad0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801cad2:	683b      	ldr	r3, [r7, #0]
 801cad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cad8:	d050      	beq.n	801cb7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cada:	f7fa ffe5 	bl	8017aa8 <HAL_GetTick>
 801cade:	4602      	mov	r2, r0
 801cae0:	6a3b      	ldr	r3, [r7, #32]
 801cae2:	1ad3      	subs	r3, r2, r3
 801cae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cae6:	429a      	cmp	r2, r3
 801cae8:	d902      	bls.n	801caf0 <SPI_WaitFifoStateUntilTimeout+0x80>
 801caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caec:	2b00      	cmp	r3, #0
 801caee:	d13d      	bne.n	801cb6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	685a      	ldr	r2, [r3, #4]
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cafe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	685b      	ldr	r3, [r3, #4]
 801cb04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cb08:	d111      	bne.n	801cb2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	689b      	ldr	r3, [r3, #8]
 801cb0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cb12:	d004      	beq.n	801cb1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	689b      	ldr	r3, [r3, #8]
 801cb18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb1c:	d107      	bne.n	801cb2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	681a      	ldr	r2, [r3, #0]
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cb2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cb36:	d10f      	bne.n	801cb58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801cb38:	68fb      	ldr	r3, [r7, #12]
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	681a      	ldr	r2, [r3, #0]
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cb46:	601a      	str	r2, [r3, #0]
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	681a      	ldr	r2, [r3, #0]
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cb56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	2201      	movs	r2, #1
 801cb5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	2200      	movs	r2, #0
 801cb64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801cb68:	2303      	movs	r3, #3
 801cb6a:	e010      	b.n	801cb8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cb6c:	69bb      	ldr	r3, [r7, #24]
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d101      	bne.n	801cb76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801cb72:	2300      	movs	r3, #0
 801cb74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801cb76:	69bb      	ldr	r3, [r7, #24]
 801cb78:	3b01      	subs	r3, #1
 801cb7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	689a      	ldr	r2, [r3, #8]
 801cb82:	68bb      	ldr	r3, [r7, #8]
 801cb84:	4013      	ands	r3, r2
 801cb86:	687a      	ldr	r2, [r7, #4]
 801cb88:	429a      	cmp	r2, r3
 801cb8a:	d196      	bne.n	801caba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801cb8c:	2300      	movs	r3, #0
}
 801cb8e:	4618      	mov	r0, r3
 801cb90:	3728      	adds	r7, #40	; 0x28
 801cb92:	46bd      	mov	sp, r7
 801cb94:	bd80      	pop	{r7, pc}
 801cb96:	bf00      	nop
 801cb98:	20000000 	.word	0x20000000

0801cb9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cb9c:	b580      	push	{r7, lr}
 801cb9e:	b086      	sub	sp, #24
 801cba0:	af02      	add	r7, sp, #8
 801cba2:	60f8      	str	r0, [r7, #12]
 801cba4:	60b9      	str	r1, [r7, #8]
 801cba6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	685b      	ldr	r3, [r3, #4]
 801cbac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cbb0:	d111      	bne.n	801cbd6 <SPI_EndRxTransaction+0x3a>
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	689b      	ldr	r3, [r3, #8]
 801cbb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cbba:	d004      	beq.n	801cbc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	689b      	ldr	r3, [r3, #8]
 801cbc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cbc4:	d107      	bne.n	801cbd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	681a      	ldr	r2, [r3, #0]
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cbd4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	9300      	str	r3, [sp, #0]
 801cbda:	68bb      	ldr	r3, [r7, #8]
 801cbdc:	2200      	movs	r2, #0
 801cbde:	2180      	movs	r1, #128	; 0x80
 801cbe0:	68f8      	ldr	r0, [r7, #12]
 801cbe2:	f7ff febd 	bl	801c960 <SPI_WaitFlagStateUntilTimeout>
 801cbe6:	4603      	mov	r3, r0
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d007      	beq.n	801cbfc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cbf0:	f043 0220 	orr.w	r2, r3, #32
 801cbf4:	68fb      	ldr	r3, [r7, #12]
 801cbf6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801cbf8:	2303      	movs	r3, #3
 801cbfa:	e023      	b.n	801cc44 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	685b      	ldr	r3, [r3, #4]
 801cc00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cc04:	d11d      	bne.n	801cc42 <SPI_EndRxTransaction+0xa6>
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	689b      	ldr	r3, [r3, #8]
 801cc0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cc0e:	d004      	beq.n	801cc1a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	689b      	ldr	r3, [r3, #8]
 801cc14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cc18:	d113      	bne.n	801cc42 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	9300      	str	r3, [sp, #0]
 801cc1e:	68bb      	ldr	r3, [r7, #8]
 801cc20:	2200      	movs	r2, #0
 801cc22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801cc26:	68f8      	ldr	r0, [r7, #12]
 801cc28:	f7ff ff22 	bl	801ca70 <SPI_WaitFifoStateUntilTimeout>
 801cc2c:	4603      	mov	r3, r0
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d007      	beq.n	801cc42 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cc36:	f043 0220 	orr.w	r2, r3, #32
 801cc3a:	68fb      	ldr	r3, [r7, #12]
 801cc3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801cc3e:	2303      	movs	r3, #3
 801cc40:	e000      	b.n	801cc44 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801cc42:	2300      	movs	r3, #0
}
 801cc44:	4618      	mov	r0, r3
 801cc46:	3710      	adds	r7, #16
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	bd80      	pop	{r7, pc}

0801cc4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	b086      	sub	sp, #24
 801cc50:	af02      	add	r7, sp, #8
 801cc52:	60f8      	str	r0, [r7, #12]
 801cc54:	60b9      	str	r1, [r7, #8]
 801cc56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	9300      	str	r3, [sp, #0]
 801cc5c:	68bb      	ldr	r3, [r7, #8]
 801cc5e:	2200      	movs	r2, #0
 801cc60:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801cc64:	68f8      	ldr	r0, [r7, #12]
 801cc66:	f7ff ff03 	bl	801ca70 <SPI_WaitFifoStateUntilTimeout>
 801cc6a:	4603      	mov	r3, r0
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d007      	beq.n	801cc80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cc74:	f043 0220 	orr.w	r2, r3, #32
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801cc7c:	2303      	movs	r3, #3
 801cc7e:	e027      	b.n	801ccd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	9300      	str	r3, [sp, #0]
 801cc84:	68bb      	ldr	r3, [r7, #8]
 801cc86:	2200      	movs	r2, #0
 801cc88:	2180      	movs	r1, #128	; 0x80
 801cc8a:	68f8      	ldr	r0, [r7, #12]
 801cc8c:	f7ff fe68 	bl	801c960 <SPI_WaitFlagStateUntilTimeout>
 801cc90:	4603      	mov	r3, r0
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d007      	beq.n	801cca6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cc9a:	f043 0220 	orr.w	r2, r3, #32
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801cca2:	2303      	movs	r3, #3
 801cca4:	e014      	b.n	801ccd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	9300      	str	r3, [sp, #0]
 801ccaa:	68bb      	ldr	r3, [r7, #8]
 801ccac:	2200      	movs	r2, #0
 801ccae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ccb2:	68f8      	ldr	r0, [r7, #12]
 801ccb4:	f7ff fedc 	bl	801ca70 <SPI_WaitFifoStateUntilTimeout>
 801ccb8:	4603      	mov	r3, r0
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d007      	beq.n	801ccce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ccc2:	f043 0220 	orr.w	r2, r3, #32
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ccca:	2303      	movs	r3, #3
 801cccc:	e000      	b.n	801ccd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801ccce:	2300      	movs	r3, #0
}
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	3710      	adds	r7, #16
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bd80      	pop	{r7, pc}

0801ccd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ccd8:	b580      	push	{r7, lr}
 801ccda:	b082      	sub	sp, #8
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d101      	bne.n	801ccea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cce6:	2301      	movs	r3, #1
 801cce8:	e049      	b.n	801cd7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ccf0:	b2db      	uxtb	r3, r3
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d106      	bne.n	801cd04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	2200      	movs	r2, #0
 801ccfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ccfe:	6878      	ldr	r0, [r7, #4]
 801cd00:	f7fa f892 	bl	8016e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	2202      	movs	r2, #2
 801cd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	681a      	ldr	r2, [r3, #0]
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	3304      	adds	r3, #4
 801cd14:	4619      	mov	r1, r3
 801cd16:	4610      	mov	r0, r2
 801cd18:	f000 fd6c 	bl	801d7f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	2201      	movs	r2, #1
 801cd20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2201      	movs	r2, #1
 801cd28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	2201      	movs	r2, #1
 801cd30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2201      	movs	r2, #1
 801cd38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	2201      	movs	r2, #1
 801cd40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	2201      	movs	r2, #1
 801cd48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	2201      	movs	r2, #1
 801cd50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	2201      	movs	r2, #1
 801cd58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	2201      	movs	r2, #1
 801cd60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	2201      	movs	r2, #1
 801cd68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	2201      	movs	r2, #1
 801cd70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	2201      	movs	r2, #1
 801cd78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cd7c:	2300      	movs	r3, #0
}
 801cd7e:	4618      	mov	r0, r3
 801cd80:	3708      	adds	r7, #8
 801cd82:	46bd      	mov	sp, r7
 801cd84:	bd80      	pop	{r7, pc}
	...

0801cd88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cd88:	b480      	push	{r7}
 801cd8a:	b085      	sub	sp, #20
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cd96:	b2db      	uxtb	r3, r3
 801cd98:	2b01      	cmp	r3, #1
 801cd9a:	d001      	beq.n	801cda0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	e04f      	b.n	801ce40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	2202      	movs	r2, #2
 801cda4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	68da      	ldr	r2, [r3, #12]
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	f042 0201 	orr.w	r2, r2, #1
 801cdb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	4a23      	ldr	r2, [pc, #140]	; (801ce4c <HAL_TIM_Base_Start_IT+0xc4>)
 801cdbe:	4293      	cmp	r3, r2
 801cdc0:	d01d      	beq.n	801cdfe <HAL_TIM_Base_Start_IT+0x76>
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cdca:	d018      	beq.n	801cdfe <HAL_TIM_Base_Start_IT+0x76>
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	4a1f      	ldr	r2, [pc, #124]	; (801ce50 <HAL_TIM_Base_Start_IT+0xc8>)
 801cdd2:	4293      	cmp	r3, r2
 801cdd4:	d013      	beq.n	801cdfe <HAL_TIM_Base_Start_IT+0x76>
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	4a1e      	ldr	r2, [pc, #120]	; (801ce54 <HAL_TIM_Base_Start_IT+0xcc>)
 801cddc:	4293      	cmp	r3, r2
 801cdde:	d00e      	beq.n	801cdfe <HAL_TIM_Base_Start_IT+0x76>
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	4a1c      	ldr	r2, [pc, #112]	; (801ce58 <HAL_TIM_Base_Start_IT+0xd0>)
 801cde6:	4293      	cmp	r3, r2
 801cde8:	d009      	beq.n	801cdfe <HAL_TIM_Base_Start_IT+0x76>
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	4a1b      	ldr	r2, [pc, #108]	; (801ce5c <HAL_TIM_Base_Start_IT+0xd4>)
 801cdf0:	4293      	cmp	r3, r2
 801cdf2:	d004      	beq.n	801cdfe <HAL_TIM_Base_Start_IT+0x76>
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	4a19      	ldr	r2, [pc, #100]	; (801ce60 <HAL_TIM_Base_Start_IT+0xd8>)
 801cdfa:	4293      	cmp	r3, r2
 801cdfc:	d115      	bne.n	801ce2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	689a      	ldr	r2, [r3, #8]
 801ce04:	4b17      	ldr	r3, [pc, #92]	; (801ce64 <HAL_TIM_Base_Start_IT+0xdc>)
 801ce06:	4013      	ands	r3, r2
 801ce08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	2b06      	cmp	r3, #6
 801ce0e:	d015      	beq.n	801ce3c <HAL_TIM_Base_Start_IT+0xb4>
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ce16:	d011      	beq.n	801ce3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	681a      	ldr	r2, [r3, #0]
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	f042 0201 	orr.w	r2, r2, #1
 801ce26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce28:	e008      	b.n	801ce3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	681a      	ldr	r2, [r3, #0]
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	f042 0201 	orr.w	r2, r2, #1
 801ce38:	601a      	str	r2, [r3, #0]
 801ce3a:	e000      	b.n	801ce3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ce3e:	2300      	movs	r3, #0
}
 801ce40:	4618      	mov	r0, r3
 801ce42:	3714      	adds	r7, #20
 801ce44:	46bd      	mov	sp, r7
 801ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce4a:	4770      	bx	lr
 801ce4c:	40012c00 	.word	0x40012c00
 801ce50:	40000400 	.word	0x40000400
 801ce54:	40000800 	.word	0x40000800
 801ce58:	40013400 	.word	0x40013400
 801ce5c:	40014000 	.word	0x40014000
 801ce60:	40015000 	.word	0x40015000
 801ce64:	00010007 	.word	0x00010007

0801ce68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ce68:	b580      	push	{r7, lr}
 801ce6a:	b082      	sub	sp, #8
 801ce6c:	af00      	add	r7, sp, #0
 801ce6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d101      	bne.n	801ce7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ce76:	2301      	movs	r3, #1
 801ce78:	e049      	b.n	801cf0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce80:	b2db      	uxtb	r3, r3
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d106      	bne.n	801ce94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	2200      	movs	r2, #0
 801ce8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ce8e:	6878      	ldr	r0, [r7, #4]
 801ce90:	f7fa f804 	bl	8016e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2202      	movs	r2, #2
 801ce98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	681a      	ldr	r2, [r3, #0]
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	3304      	adds	r3, #4
 801cea4:	4619      	mov	r1, r3
 801cea6:	4610      	mov	r0, r2
 801cea8:	f000 fca4 	bl	801d7f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	2201      	movs	r2, #1
 801ceb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	2201      	movs	r2, #1
 801ceb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	2201      	movs	r2, #1
 801cec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	2201      	movs	r2, #1
 801cec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	2201      	movs	r2, #1
 801ced0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	2201      	movs	r2, #1
 801ced8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	2201      	movs	r2, #1
 801cee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	2201      	movs	r2, #1
 801cee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	2201      	movs	r2, #1
 801cef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	2201      	movs	r2, #1
 801cef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	2201      	movs	r2, #1
 801cf00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	2201      	movs	r2, #1
 801cf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cf0c:	2300      	movs	r3, #0
}
 801cf0e:	4618      	mov	r0, r3
 801cf10:	3708      	adds	r7, #8
 801cf12:	46bd      	mov	sp, r7
 801cf14:	bd80      	pop	{r7, pc}
	...

0801cf18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cf18:	b580      	push	{r7, lr}
 801cf1a:	b084      	sub	sp, #16
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	6078      	str	r0, [r7, #4]
 801cf20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801cf22:	683b      	ldr	r3, [r7, #0]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d109      	bne.n	801cf3c <HAL_TIM_PWM_Start+0x24>
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801cf2e:	b2db      	uxtb	r3, r3
 801cf30:	2b01      	cmp	r3, #1
 801cf32:	bf14      	ite	ne
 801cf34:	2301      	movne	r3, #1
 801cf36:	2300      	moveq	r3, #0
 801cf38:	b2db      	uxtb	r3, r3
 801cf3a:	e03c      	b.n	801cfb6 <HAL_TIM_PWM_Start+0x9e>
 801cf3c:	683b      	ldr	r3, [r7, #0]
 801cf3e:	2b04      	cmp	r3, #4
 801cf40:	d109      	bne.n	801cf56 <HAL_TIM_PWM_Start+0x3e>
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801cf48:	b2db      	uxtb	r3, r3
 801cf4a:	2b01      	cmp	r3, #1
 801cf4c:	bf14      	ite	ne
 801cf4e:	2301      	movne	r3, #1
 801cf50:	2300      	moveq	r3, #0
 801cf52:	b2db      	uxtb	r3, r3
 801cf54:	e02f      	b.n	801cfb6 <HAL_TIM_PWM_Start+0x9e>
 801cf56:	683b      	ldr	r3, [r7, #0]
 801cf58:	2b08      	cmp	r3, #8
 801cf5a:	d109      	bne.n	801cf70 <HAL_TIM_PWM_Start+0x58>
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801cf62:	b2db      	uxtb	r3, r3
 801cf64:	2b01      	cmp	r3, #1
 801cf66:	bf14      	ite	ne
 801cf68:	2301      	movne	r3, #1
 801cf6a:	2300      	moveq	r3, #0
 801cf6c:	b2db      	uxtb	r3, r3
 801cf6e:	e022      	b.n	801cfb6 <HAL_TIM_PWM_Start+0x9e>
 801cf70:	683b      	ldr	r3, [r7, #0]
 801cf72:	2b0c      	cmp	r3, #12
 801cf74:	d109      	bne.n	801cf8a <HAL_TIM_PWM_Start+0x72>
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801cf7c:	b2db      	uxtb	r3, r3
 801cf7e:	2b01      	cmp	r3, #1
 801cf80:	bf14      	ite	ne
 801cf82:	2301      	movne	r3, #1
 801cf84:	2300      	moveq	r3, #0
 801cf86:	b2db      	uxtb	r3, r3
 801cf88:	e015      	b.n	801cfb6 <HAL_TIM_PWM_Start+0x9e>
 801cf8a:	683b      	ldr	r3, [r7, #0]
 801cf8c:	2b10      	cmp	r3, #16
 801cf8e:	d109      	bne.n	801cfa4 <HAL_TIM_PWM_Start+0x8c>
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cf96:	b2db      	uxtb	r3, r3
 801cf98:	2b01      	cmp	r3, #1
 801cf9a:	bf14      	ite	ne
 801cf9c:	2301      	movne	r3, #1
 801cf9e:	2300      	moveq	r3, #0
 801cfa0:	b2db      	uxtb	r3, r3
 801cfa2:	e008      	b.n	801cfb6 <HAL_TIM_PWM_Start+0x9e>
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801cfaa:	b2db      	uxtb	r3, r3
 801cfac:	2b01      	cmp	r3, #1
 801cfae:	bf14      	ite	ne
 801cfb0:	2301      	movne	r3, #1
 801cfb2:	2300      	moveq	r3, #0
 801cfb4:	b2db      	uxtb	r3, r3
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d001      	beq.n	801cfbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801cfba:	2301      	movs	r3, #1
 801cfbc:	e0a1      	b.n	801d102 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cfbe:	683b      	ldr	r3, [r7, #0]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d104      	bne.n	801cfce <HAL_TIM_PWM_Start+0xb6>
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	2202      	movs	r2, #2
 801cfc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cfcc:	e023      	b.n	801d016 <HAL_TIM_PWM_Start+0xfe>
 801cfce:	683b      	ldr	r3, [r7, #0]
 801cfd0:	2b04      	cmp	r3, #4
 801cfd2:	d104      	bne.n	801cfde <HAL_TIM_PWM_Start+0xc6>
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	2202      	movs	r2, #2
 801cfd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cfdc:	e01b      	b.n	801d016 <HAL_TIM_PWM_Start+0xfe>
 801cfde:	683b      	ldr	r3, [r7, #0]
 801cfe0:	2b08      	cmp	r3, #8
 801cfe2:	d104      	bne.n	801cfee <HAL_TIM_PWM_Start+0xd6>
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	2202      	movs	r2, #2
 801cfe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cfec:	e013      	b.n	801d016 <HAL_TIM_PWM_Start+0xfe>
 801cfee:	683b      	ldr	r3, [r7, #0]
 801cff0:	2b0c      	cmp	r3, #12
 801cff2:	d104      	bne.n	801cffe <HAL_TIM_PWM_Start+0xe6>
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	2202      	movs	r2, #2
 801cff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cffc:	e00b      	b.n	801d016 <HAL_TIM_PWM_Start+0xfe>
 801cffe:	683b      	ldr	r3, [r7, #0]
 801d000:	2b10      	cmp	r3, #16
 801d002:	d104      	bne.n	801d00e <HAL_TIM_PWM_Start+0xf6>
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	2202      	movs	r2, #2
 801d008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d00c:	e003      	b.n	801d016 <HAL_TIM_PWM_Start+0xfe>
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	2202      	movs	r2, #2
 801d012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	2201      	movs	r2, #1
 801d01c:	6839      	ldr	r1, [r7, #0]
 801d01e:	4618      	mov	r0, r3
 801d020:	f000 ffb0 	bl	801df84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	4a38      	ldr	r2, [pc, #224]	; (801d10c <HAL_TIM_PWM_Start+0x1f4>)
 801d02a:	4293      	cmp	r3, r2
 801d02c:	d018      	beq.n	801d060 <HAL_TIM_PWM_Start+0x148>
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	4a37      	ldr	r2, [pc, #220]	; (801d110 <HAL_TIM_PWM_Start+0x1f8>)
 801d034:	4293      	cmp	r3, r2
 801d036:	d013      	beq.n	801d060 <HAL_TIM_PWM_Start+0x148>
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	4a35      	ldr	r2, [pc, #212]	; (801d114 <HAL_TIM_PWM_Start+0x1fc>)
 801d03e:	4293      	cmp	r3, r2
 801d040:	d00e      	beq.n	801d060 <HAL_TIM_PWM_Start+0x148>
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	4a34      	ldr	r2, [pc, #208]	; (801d118 <HAL_TIM_PWM_Start+0x200>)
 801d048:	4293      	cmp	r3, r2
 801d04a:	d009      	beq.n	801d060 <HAL_TIM_PWM_Start+0x148>
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	4a32      	ldr	r2, [pc, #200]	; (801d11c <HAL_TIM_PWM_Start+0x204>)
 801d052:	4293      	cmp	r3, r2
 801d054:	d004      	beq.n	801d060 <HAL_TIM_PWM_Start+0x148>
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	4a31      	ldr	r2, [pc, #196]	; (801d120 <HAL_TIM_PWM_Start+0x208>)
 801d05c:	4293      	cmp	r3, r2
 801d05e:	d101      	bne.n	801d064 <HAL_TIM_PWM_Start+0x14c>
 801d060:	2301      	movs	r3, #1
 801d062:	e000      	b.n	801d066 <HAL_TIM_PWM_Start+0x14e>
 801d064:	2300      	movs	r3, #0
 801d066:	2b00      	cmp	r3, #0
 801d068:	d007      	beq.n	801d07a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801d078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	4a23      	ldr	r2, [pc, #140]	; (801d10c <HAL_TIM_PWM_Start+0x1f4>)
 801d080:	4293      	cmp	r3, r2
 801d082:	d01d      	beq.n	801d0c0 <HAL_TIM_PWM_Start+0x1a8>
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d08c:	d018      	beq.n	801d0c0 <HAL_TIM_PWM_Start+0x1a8>
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	4a24      	ldr	r2, [pc, #144]	; (801d124 <HAL_TIM_PWM_Start+0x20c>)
 801d094:	4293      	cmp	r3, r2
 801d096:	d013      	beq.n	801d0c0 <HAL_TIM_PWM_Start+0x1a8>
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	4a22      	ldr	r2, [pc, #136]	; (801d128 <HAL_TIM_PWM_Start+0x210>)
 801d09e:	4293      	cmp	r3, r2
 801d0a0:	d00e      	beq.n	801d0c0 <HAL_TIM_PWM_Start+0x1a8>
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	4a1a      	ldr	r2, [pc, #104]	; (801d110 <HAL_TIM_PWM_Start+0x1f8>)
 801d0a8:	4293      	cmp	r3, r2
 801d0aa:	d009      	beq.n	801d0c0 <HAL_TIM_PWM_Start+0x1a8>
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	4a18      	ldr	r2, [pc, #96]	; (801d114 <HAL_TIM_PWM_Start+0x1fc>)
 801d0b2:	4293      	cmp	r3, r2
 801d0b4:	d004      	beq.n	801d0c0 <HAL_TIM_PWM_Start+0x1a8>
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	4a19      	ldr	r2, [pc, #100]	; (801d120 <HAL_TIM_PWM_Start+0x208>)
 801d0bc:	4293      	cmp	r3, r2
 801d0be:	d115      	bne.n	801d0ec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	689a      	ldr	r2, [r3, #8]
 801d0c6:	4b19      	ldr	r3, [pc, #100]	; (801d12c <HAL_TIM_PWM_Start+0x214>)
 801d0c8:	4013      	ands	r3, r2
 801d0ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	2b06      	cmp	r3, #6
 801d0d0:	d015      	beq.n	801d0fe <HAL_TIM_PWM_Start+0x1e6>
 801d0d2:	68fb      	ldr	r3, [r7, #12]
 801d0d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d0d8:	d011      	beq.n	801d0fe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	681a      	ldr	r2, [r3, #0]
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	f042 0201 	orr.w	r2, r2, #1
 801d0e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d0ea:	e008      	b.n	801d0fe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	681a      	ldr	r2, [r3, #0]
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	f042 0201 	orr.w	r2, r2, #1
 801d0fa:	601a      	str	r2, [r3, #0]
 801d0fc:	e000      	b.n	801d100 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d0fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801d100:	2300      	movs	r3, #0
}
 801d102:	4618      	mov	r0, r3
 801d104:	3710      	adds	r7, #16
 801d106:	46bd      	mov	sp, r7
 801d108:	bd80      	pop	{r7, pc}
 801d10a:	bf00      	nop
 801d10c:	40012c00 	.word	0x40012c00
 801d110:	40013400 	.word	0x40013400
 801d114:	40014000 	.word	0x40014000
 801d118:	40014400 	.word	0x40014400
 801d11c:	40014800 	.word	0x40014800
 801d120:	40015000 	.word	0x40015000
 801d124:	40000400 	.word	0x40000400
 801d128:	40000800 	.word	0x40000800
 801d12c:	00010007 	.word	0x00010007

0801d130 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d130:	b580      	push	{r7, lr}
 801d132:	b082      	sub	sp, #8
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
 801d138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	2200      	movs	r2, #0
 801d140:	6839      	ldr	r1, [r7, #0]
 801d142:	4618      	mov	r0, r3
 801d144:	f000 ff1e 	bl	801df84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	681b      	ldr	r3, [r3, #0]
 801d14c:	4a40      	ldr	r2, [pc, #256]	; (801d250 <HAL_TIM_PWM_Stop+0x120>)
 801d14e:	4293      	cmp	r3, r2
 801d150:	d018      	beq.n	801d184 <HAL_TIM_PWM_Stop+0x54>
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	4a3f      	ldr	r2, [pc, #252]	; (801d254 <HAL_TIM_PWM_Stop+0x124>)
 801d158:	4293      	cmp	r3, r2
 801d15a:	d013      	beq.n	801d184 <HAL_TIM_PWM_Stop+0x54>
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	4a3d      	ldr	r2, [pc, #244]	; (801d258 <HAL_TIM_PWM_Stop+0x128>)
 801d162:	4293      	cmp	r3, r2
 801d164:	d00e      	beq.n	801d184 <HAL_TIM_PWM_Stop+0x54>
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	4a3c      	ldr	r2, [pc, #240]	; (801d25c <HAL_TIM_PWM_Stop+0x12c>)
 801d16c:	4293      	cmp	r3, r2
 801d16e:	d009      	beq.n	801d184 <HAL_TIM_PWM_Stop+0x54>
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	4a3a      	ldr	r2, [pc, #232]	; (801d260 <HAL_TIM_PWM_Stop+0x130>)
 801d176:	4293      	cmp	r3, r2
 801d178:	d004      	beq.n	801d184 <HAL_TIM_PWM_Stop+0x54>
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	4a39      	ldr	r2, [pc, #228]	; (801d264 <HAL_TIM_PWM_Stop+0x134>)
 801d180:	4293      	cmp	r3, r2
 801d182:	d101      	bne.n	801d188 <HAL_TIM_PWM_Stop+0x58>
 801d184:	2301      	movs	r3, #1
 801d186:	e000      	b.n	801d18a <HAL_TIM_PWM_Stop+0x5a>
 801d188:	2300      	movs	r3, #0
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d017      	beq.n	801d1be <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	6a1a      	ldr	r2, [r3, #32]
 801d194:	f241 1311 	movw	r3, #4369	; 0x1111
 801d198:	4013      	ands	r3, r2
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d10f      	bne.n	801d1be <HAL_TIM_PWM_Stop+0x8e>
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	6a1a      	ldr	r2, [r3, #32]
 801d1a4:	f244 4344 	movw	r3, #17476	; 0x4444
 801d1a8:	4013      	ands	r3, r2
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d107      	bne.n	801d1be <HAL_TIM_PWM_Stop+0x8e>
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d1bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	6a1a      	ldr	r2, [r3, #32]
 801d1c4:	f241 1311 	movw	r3, #4369	; 0x1111
 801d1c8:	4013      	ands	r3, r2
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d10f      	bne.n	801d1ee <HAL_TIM_PWM_Stop+0xbe>
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	6a1a      	ldr	r2, [r3, #32]
 801d1d4:	f244 4344 	movw	r3, #17476	; 0x4444
 801d1d8:	4013      	ands	r3, r2
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d107      	bne.n	801d1ee <HAL_TIM_PWM_Stop+0xbe>
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	681a      	ldr	r2, [r3, #0]
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	f022 0201 	bic.w	r2, r2, #1
 801d1ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801d1ee:	683b      	ldr	r3, [r7, #0]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d104      	bne.n	801d1fe <HAL_TIM_PWM_Stop+0xce>
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	2201      	movs	r2, #1
 801d1f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d1fc:	e023      	b.n	801d246 <HAL_TIM_PWM_Stop+0x116>
 801d1fe:	683b      	ldr	r3, [r7, #0]
 801d200:	2b04      	cmp	r3, #4
 801d202:	d104      	bne.n	801d20e <HAL_TIM_PWM_Stop+0xde>
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	2201      	movs	r2, #1
 801d208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d20c:	e01b      	b.n	801d246 <HAL_TIM_PWM_Stop+0x116>
 801d20e:	683b      	ldr	r3, [r7, #0]
 801d210:	2b08      	cmp	r3, #8
 801d212:	d104      	bne.n	801d21e <HAL_TIM_PWM_Stop+0xee>
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	2201      	movs	r2, #1
 801d218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d21c:	e013      	b.n	801d246 <HAL_TIM_PWM_Stop+0x116>
 801d21e:	683b      	ldr	r3, [r7, #0]
 801d220:	2b0c      	cmp	r3, #12
 801d222:	d104      	bne.n	801d22e <HAL_TIM_PWM_Stop+0xfe>
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	2201      	movs	r2, #1
 801d228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801d22c:	e00b      	b.n	801d246 <HAL_TIM_PWM_Stop+0x116>
 801d22e:	683b      	ldr	r3, [r7, #0]
 801d230:	2b10      	cmp	r3, #16
 801d232:	d104      	bne.n	801d23e <HAL_TIM_PWM_Stop+0x10e>
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	2201      	movs	r2, #1
 801d238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d23c:	e003      	b.n	801d246 <HAL_TIM_PWM_Stop+0x116>
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	2201      	movs	r2, #1
 801d242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801d246:	2300      	movs	r3, #0
}
 801d248:	4618      	mov	r0, r3
 801d24a:	3708      	adds	r7, #8
 801d24c:	46bd      	mov	sp, r7
 801d24e:	bd80      	pop	{r7, pc}
 801d250:	40012c00 	.word	0x40012c00
 801d254:	40013400 	.word	0x40013400
 801d258:	40014000 	.word	0x40014000
 801d25c:	40014400 	.word	0x40014400
 801d260:	40014800 	.word	0x40014800
 801d264:	40015000 	.word	0x40015000

0801d268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d268:	b580      	push	{r7, lr}
 801d26a:	b082      	sub	sp, #8
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	691b      	ldr	r3, [r3, #16]
 801d276:	f003 0302 	and.w	r3, r3, #2
 801d27a:	2b02      	cmp	r3, #2
 801d27c:	d122      	bne.n	801d2c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	68db      	ldr	r3, [r3, #12]
 801d284:	f003 0302 	and.w	r3, r3, #2
 801d288:	2b02      	cmp	r3, #2
 801d28a:	d11b      	bne.n	801d2c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	f06f 0202 	mvn.w	r2, #2
 801d294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	2201      	movs	r2, #1
 801d29a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	699b      	ldr	r3, [r3, #24]
 801d2a2:	f003 0303 	and.w	r3, r3, #3
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d003      	beq.n	801d2b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d2aa:	6878      	ldr	r0, [r7, #4]
 801d2ac:	f000 fa84 	bl	801d7b8 <HAL_TIM_IC_CaptureCallback>
 801d2b0:	e005      	b.n	801d2be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d2b2:	6878      	ldr	r0, [r7, #4]
 801d2b4:	f000 fa76 	bl	801d7a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d2b8:	6878      	ldr	r0, [r7, #4]
 801d2ba:	f000 fa87 	bl	801d7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	2200      	movs	r2, #0
 801d2c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	691b      	ldr	r3, [r3, #16]
 801d2ca:	f003 0304 	and.w	r3, r3, #4
 801d2ce:	2b04      	cmp	r3, #4
 801d2d0:	d122      	bne.n	801d318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	68db      	ldr	r3, [r3, #12]
 801d2d8:	f003 0304 	and.w	r3, r3, #4
 801d2dc:	2b04      	cmp	r3, #4
 801d2de:	d11b      	bne.n	801d318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	f06f 0204 	mvn.w	r2, #4
 801d2e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	2202      	movs	r2, #2
 801d2ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	699b      	ldr	r3, [r3, #24]
 801d2f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d003      	beq.n	801d306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d2fe:	6878      	ldr	r0, [r7, #4]
 801d300:	f000 fa5a 	bl	801d7b8 <HAL_TIM_IC_CaptureCallback>
 801d304:	e005      	b.n	801d312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d306:	6878      	ldr	r0, [r7, #4]
 801d308:	f000 fa4c 	bl	801d7a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d30c:	6878      	ldr	r0, [r7, #4]
 801d30e:	f000 fa5d 	bl	801d7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	2200      	movs	r2, #0
 801d316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	691b      	ldr	r3, [r3, #16]
 801d31e:	f003 0308 	and.w	r3, r3, #8
 801d322:	2b08      	cmp	r3, #8
 801d324:	d122      	bne.n	801d36c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	68db      	ldr	r3, [r3, #12]
 801d32c:	f003 0308 	and.w	r3, r3, #8
 801d330:	2b08      	cmp	r3, #8
 801d332:	d11b      	bne.n	801d36c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	f06f 0208 	mvn.w	r2, #8
 801d33c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	2204      	movs	r2, #4
 801d342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	69db      	ldr	r3, [r3, #28]
 801d34a:	f003 0303 	and.w	r3, r3, #3
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d003      	beq.n	801d35a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d352:	6878      	ldr	r0, [r7, #4]
 801d354:	f000 fa30 	bl	801d7b8 <HAL_TIM_IC_CaptureCallback>
 801d358:	e005      	b.n	801d366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d35a:	6878      	ldr	r0, [r7, #4]
 801d35c:	f000 fa22 	bl	801d7a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d360:	6878      	ldr	r0, [r7, #4]
 801d362:	f000 fa33 	bl	801d7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	2200      	movs	r2, #0
 801d36a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	691b      	ldr	r3, [r3, #16]
 801d372:	f003 0310 	and.w	r3, r3, #16
 801d376:	2b10      	cmp	r3, #16
 801d378:	d122      	bne.n	801d3c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	68db      	ldr	r3, [r3, #12]
 801d380:	f003 0310 	and.w	r3, r3, #16
 801d384:	2b10      	cmp	r3, #16
 801d386:	d11b      	bne.n	801d3c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	f06f 0210 	mvn.w	r2, #16
 801d390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	2208      	movs	r2, #8
 801d396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	69db      	ldr	r3, [r3, #28]
 801d39e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d003      	beq.n	801d3ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d3a6:	6878      	ldr	r0, [r7, #4]
 801d3a8:	f000 fa06 	bl	801d7b8 <HAL_TIM_IC_CaptureCallback>
 801d3ac:	e005      	b.n	801d3ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d3ae:	6878      	ldr	r0, [r7, #4]
 801d3b0:	f000 f9f8 	bl	801d7a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d3b4:	6878      	ldr	r0, [r7, #4]
 801d3b6:	f000 fa09 	bl	801d7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	2200      	movs	r2, #0
 801d3be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	691b      	ldr	r3, [r3, #16]
 801d3c6:	f003 0301 	and.w	r3, r3, #1
 801d3ca:	2b01      	cmp	r3, #1
 801d3cc:	d10e      	bne.n	801d3ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	68db      	ldr	r3, [r3, #12]
 801d3d4:	f003 0301 	and.w	r3, r3, #1
 801d3d8:	2b01      	cmp	r3, #1
 801d3da:	d107      	bne.n	801d3ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	f06f 0201 	mvn.w	r2, #1
 801d3e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d3e6:	6878      	ldr	r0, [r7, #4]
 801d3e8:	f000 f9d2 	bl	801d790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	691b      	ldr	r3, [r3, #16]
 801d3f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d3f6:	2b80      	cmp	r3, #128	; 0x80
 801d3f8:	d10e      	bne.n	801d418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	68db      	ldr	r3, [r3, #12]
 801d400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d404:	2b80      	cmp	r3, #128	; 0x80
 801d406:	d107      	bne.n	801d418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d412:	6878      	ldr	r0, [r7, #4]
 801d414:	f000 ff26 	bl	801e264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	691b      	ldr	r3, [r3, #16]
 801d41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d426:	d10e      	bne.n	801d446 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	68db      	ldr	r3, [r3, #12]
 801d42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d432:	2b80      	cmp	r3, #128	; 0x80
 801d434:	d107      	bne.n	801d446 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d43e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d440:	6878      	ldr	r0, [r7, #4]
 801d442:	f000 ff19 	bl	801e278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	691b      	ldr	r3, [r3, #16]
 801d44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d450:	2b40      	cmp	r3, #64	; 0x40
 801d452:	d10e      	bne.n	801d472 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	68db      	ldr	r3, [r3, #12]
 801d45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d45e:	2b40      	cmp	r3, #64	; 0x40
 801d460:	d107      	bne.n	801d472 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d46c:	6878      	ldr	r0, [r7, #4]
 801d46e:	f000 f9b7 	bl	801d7e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	691b      	ldr	r3, [r3, #16]
 801d478:	f003 0320 	and.w	r3, r3, #32
 801d47c:	2b20      	cmp	r3, #32
 801d47e:	d10e      	bne.n	801d49e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	681b      	ldr	r3, [r3, #0]
 801d484:	68db      	ldr	r3, [r3, #12]
 801d486:	f003 0320 	and.w	r3, r3, #32
 801d48a:	2b20      	cmp	r3, #32
 801d48c:	d107      	bne.n	801d49e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	f06f 0220 	mvn.w	r2, #32
 801d496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d498:	6878      	ldr	r0, [r7, #4]
 801d49a:	f000 fed9 	bl	801e250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	691b      	ldr	r3, [r3, #16]
 801d4a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d4a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d4ac:	d10f      	bne.n	801d4ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	68db      	ldr	r3, [r3, #12]
 801d4b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d4b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d4bc:	d107      	bne.n	801d4ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801d4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801d4c8:	6878      	ldr	r0, [r7, #4]
 801d4ca:	f000 fedf 	bl	801e28c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	691b      	ldr	r3, [r3, #16]
 801d4d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d4d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d4dc:	d10f      	bne.n	801d4fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	68db      	ldr	r3, [r3, #12]
 801d4e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d4e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d4ec:	d107      	bne.n	801d4fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801d4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801d4f8:	6878      	ldr	r0, [r7, #4]
 801d4fa:	f000 fed1 	bl	801e2a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	691b      	ldr	r3, [r3, #16]
 801d504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d50c:	d10f      	bne.n	801d52e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	68db      	ldr	r3, [r3, #12]
 801d514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d51c:	d107      	bne.n	801d52e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801d526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801d528:	6878      	ldr	r0, [r7, #4]
 801d52a:	f000 fec3 	bl	801e2b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	681b      	ldr	r3, [r3, #0]
 801d532:	691b      	ldr	r3, [r3, #16]
 801d534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d538:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d53c:	d10f      	bne.n	801d55e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	68db      	ldr	r3, [r3, #12]
 801d544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d54c:	d107      	bne.n	801d55e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801d556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801d558:	6878      	ldr	r0, [r7, #4]
 801d55a:	f000 feb5 	bl	801e2c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d55e:	bf00      	nop
 801d560:	3708      	adds	r7, #8
 801d562:	46bd      	mov	sp, r7
 801d564:	bd80      	pop	{r7, pc}
	...

0801d568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d568:	b580      	push	{r7, lr}
 801d56a:	b086      	sub	sp, #24
 801d56c:	af00      	add	r7, sp, #0
 801d56e:	60f8      	str	r0, [r7, #12]
 801d570:	60b9      	str	r1, [r7, #8]
 801d572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d574:	2300      	movs	r3, #0
 801d576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d57e:	2b01      	cmp	r3, #1
 801d580:	d101      	bne.n	801d586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801d582:	2302      	movs	r3, #2
 801d584:	e0ff      	b.n	801d786 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	2201      	movs	r2, #1
 801d58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	2b14      	cmp	r3, #20
 801d592:	f200 80f0 	bhi.w	801d776 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801d596:	a201      	add	r2, pc, #4	; (adr r2, 801d59c <HAL_TIM_PWM_ConfigChannel+0x34>)
 801d598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d59c:	0801d5f1 	.word	0x0801d5f1
 801d5a0:	0801d777 	.word	0x0801d777
 801d5a4:	0801d777 	.word	0x0801d777
 801d5a8:	0801d777 	.word	0x0801d777
 801d5ac:	0801d631 	.word	0x0801d631
 801d5b0:	0801d777 	.word	0x0801d777
 801d5b4:	0801d777 	.word	0x0801d777
 801d5b8:	0801d777 	.word	0x0801d777
 801d5bc:	0801d673 	.word	0x0801d673
 801d5c0:	0801d777 	.word	0x0801d777
 801d5c4:	0801d777 	.word	0x0801d777
 801d5c8:	0801d777 	.word	0x0801d777
 801d5cc:	0801d6b3 	.word	0x0801d6b3
 801d5d0:	0801d777 	.word	0x0801d777
 801d5d4:	0801d777 	.word	0x0801d777
 801d5d8:	0801d777 	.word	0x0801d777
 801d5dc:	0801d6f5 	.word	0x0801d6f5
 801d5e0:	0801d777 	.word	0x0801d777
 801d5e4:	0801d777 	.word	0x0801d777
 801d5e8:	0801d777 	.word	0x0801d777
 801d5ec:	0801d735 	.word	0x0801d735
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	68b9      	ldr	r1, [r7, #8]
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	f000 f99a 	bl	801d930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	699a      	ldr	r2, [r3, #24]
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	f042 0208 	orr.w	r2, r2, #8
 801d60a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	699a      	ldr	r2, [r3, #24]
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	f022 0204 	bic.w	r2, r2, #4
 801d61a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	6999      	ldr	r1, [r3, #24]
 801d622:	68bb      	ldr	r3, [r7, #8]
 801d624:	691a      	ldr	r2, [r3, #16]
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	430a      	orrs	r2, r1
 801d62c:	619a      	str	r2, [r3, #24]
      break;
 801d62e:	e0a5      	b.n	801d77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d630:	68fb      	ldr	r3, [r7, #12]
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	68b9      	ldr	r1, [r7, #8]
 801d636:	4618      	mov	r0, r3
 801d638:	f000 fa14 	bl	801da64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	699a      	ldr	r2, [r3, #24]
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d64a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	699a      	ldr	r2, [r3, #24]
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d65a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	6999      	ldr	r1, [r3, #24]
 801d662:	68bb      	ldr	r3, [r7, #8]
 801d664:	691b      	ldr	r3, [r3, #16]
 801d666:	021a      	lsls	r2, r3, #8
 801d668:	68fb      	ldr	r3, [r7, #12]
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	430a      	orrs	r2, r1
 801d66e:	619a      	str	r2, [r3, #24]
      break;
 801d670:	e084      	b.n	801d77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	68b9      	ldr	r1, [r7, #8]
 801d678:	4618      	mov	r0, r3
 801d67a:	f000 fa87 	bl	801db8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	681b      	ldr	r3, [r3, #0]
 801d682:	69da      	ldr	r2, [r3, #28]
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	f042 0208 	orr.w	r2, r2, #8
 801d68c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	69da      	ldr	r2, [r3, #28]
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	f022 0204 	bic.w	r2, r2, #4
 801d69c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	69d9      	ldr	r1, [r3, #28]
 801d6a4:	68bb      	ldr	r3, [r7, #8]
 801d6a6:	691a      	ldr	r2, [r3, #16]
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	430a      	orrs	r2, r1
 801d6ae:	61da      	str	r2, [r3, #28]
      break;
 801d6b0:	e064      	b.n	801d77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	68b9      	ldr	r1, [r7, #8]
 801d6b8:	4618      	mov	r0, r3
 801d6ba:	f000 faf9 	bl	801dcb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	69da      	ldr	r2, [r3, #28]
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d6cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	69da      	ldr	r2, [r3, #28]
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	681b      	ldr	r3, [r3, #0]
 801d6d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d6dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	69d9      	ldr	r1, [r3, #28]
 801d6e4:	68bb      	ldr	r3, [r7, #8]
 801d6e6:	691b      	ldr	r3, [r3, #16]
 801d6e8:	021a      	lsls	r2, r3, #8
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	430a      	orrs	r2, r1
 801d6f0:	61da      	str	r2, [r3, #28]
      break;
 801d6f2:	e043      	b.n	801d77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	68b9      	ldr	r1, [r7, #8]
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	f000 fb6c 	bl	801ddd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	f042 0208 	orr.w	r2, r2, #8
 801d70e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	f022 0204 	bic.w	r2, r2, #4
 801d71e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d726:	68bb      	ldr	r3, [r7, #8]
 801d728:	691a      	ldr	r2, [r3, #16]
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	430a      	orrs	r2, r1
 801d730:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d732:	e023      	b.n	801d77c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	68b9      	ldr	r1, [r7, #8]
 801d73a:	4618      	mov	r0, r3
 801d73c:	f000 fbb6 	bl	801deac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	681b      	ldr	r3, [r3, #0]
 801d74a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d74e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d75e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d766:	68bb      	ldr	r3, [r7, #8]
 801d768:	691b      	ldr	r3, [r3, #16]
 801d76a:	021a      	lsls	r2, r3, #8
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	430a      	orrs	r2, r1
 801d772:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d774:	e002      	b.n	801d77c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801d776:	2301      	movs	r3, #1
 801d778:	75fb      	strb	r3, [r7, #23]
      break;
 801d77a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	2200      	movs	r2, #0
 801d780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d784:	7dfb      	ldrb	r3, [r7, #23]
}
 801d786:	4618      	mov	r0, r3
 801d788:	3718      	adds	r7, #24
 801d78a:	46bd      	mov	sp, r7
 801d78c:	bd80      	pop	{r7, pc}
 801d78e:	bf00      	nop

0801d790 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d790:	b480      	push	{r7}
 801d792:	b083      	sub	sp, #12
 801d794:	af00      	add	r7, sp, #0
 801d796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801d798:	bf00      	nop
 801d79a:	370c      	adds	r7, #12
 801d79c:	46bd      	mov	sp, r7
 801d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7a2:	4770      	bx	lr

0801d7a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d7a4:	b480      	push	{r7}
 801d7a6:	b083      	sub	sp, #12
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d7ac:	bf00      	nop
 801d7ae:	370c      	adds	r7, #12
 801d7b0:	46bd      	mov	sp, r7
 801d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7b6:	4770      	bx	lr

0801d7b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d7b8:	b480      	push	{r7}
 801d7ba:	b083      	sub	sp, #12
 801d7bc:	af00      	add	r7, sp, #0
 801d7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d7c0:	bf00      	nop
 801d7c2:	370c      	adds	r7, #12
 801d7c4:	46bd      	mov	sp, r7
 801d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ca:	4770      	bx	lr

0801d7cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d7cc:	b480      	push	{r7}
 801d7ce:	b083      	sub	sp, #12
 801d7d0:	af00      	add	r7, sp, #0
 801d7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d7d4:	bf00      	nop
 801d7d6:	370c      	adds	r7, #12
 801d7d8:	46bd      	mov	sp, r7
 801d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7de:	4770      	bx	lr

0801d7e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d7e0:	b480      	push	{r7}
 801d7e2:	b083      	sub	sp, #12
 801d7e4:	af00      	add	r7, sp, #0
 801d7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d7e8:	bf00      	nop
 801d7ea:	370c      	adds	r7, #12
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7f2:	4770      	bx	lr

0801d7f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d7f4:	b480      	push	{r7}
 801d7f6:	b085      	sub	sp, #20
 801d7f8:	af00      	add	r7, sp, #0
 801d7fa:	6078      	str	r0, [r7, #4]
 801d7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	4a42      	ldr	r2, [pc, #264]	; (801d910 <TIM_Base_SetConfig+0x11c>)
 801d808:	4293      	cmp	r3, r2
 801d80a:	d013      	beq.n	801d834 <TIM_Base_SetConfig+0x40>
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d812:	d00f      	beq.n	801d834 <TIM_Base_SetConfig+0x40>
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	4a3f      	ldr	r2, [pc, #252]	; (801d914 <TIM_Base_SetConfig+0x120>)
 801d818:	4293      	cmp	r3, r2
 801d81a:	d00b      	beq.n	801d834 <TIM_Base_SetConfig+0x40>
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	4a3e      	ldr	r2, [pc, #248]	; (801d918 <TIM_Base_SetConfig+0x124>)
 801d820:	4293      	cmp	r3, r2
 801d822:	d007      	beq.n	801d834 <TIM_Base_SetConfig+0x40>
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	4a3d      	ldr	r2, [pc, #244]	; (801d91c <TIM_Base_SetConfig+0x128>)
 801d828:	4293      	cmp	r3, r2
 801d82a:	d003      	beq.n	801d834 <TIM_Base_SetConfig+0x40>
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	4a3c      	ldr	r2, [pc, #240]	; (801d920 <TIM_Base_SetConfig+0x12c>)
 801d830:	4293      	cmp	r3, r2
 801d832:	d108      	bne.n	801d846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d83a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d83c:	683b      	ldr	r3, [r7, #0]
 801d83e:	685b      	ldr	r3, [r3, #4]
 801d840:	68fa      	ldr	r2, [r7, #12]
 801d842:	4313      	orrs	r3, r2
 801d844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	4a31      	ldr	r2, [pc, #196]	; (801d910 <TIM_Base_SetConfig+0x11c>)
 801d84a:	4293      	cmp	r3, r2
 801d84c:	d01f      	beq.n	801d88e <TIM_Base_SetConfig+0x9a>
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d854:	d01b      	beq.n	801d88e <TIM_Base_SetConfig+0x9a>
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	4a2e      	ldr	r2, [pc, #184]	; (801d914 <TIM_Base_SetConfig+0x120>)
 801d85a:	4293      	cmp	r3, r2
 801d85c:	d017      	beq.n	801d88e <TIM_Base_SetConfig+0x9a>
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	4a2d      	ldr	r2, [pc, #180]	; (801d918 <TIM_Base_SetConfig+0x124>)
 801d862:	4293      	cmp	r3, r2
 801d864:	d013      	beq.n	801d88e <TIM_Base_SetConfig+0x9a>
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	4a2c      	ldr	r2, [pc, #176]	; (801d91c <TIM_Base_SetConfig+0x128>)
 801d86a:	4293      	cmp	r3, r2
 801d86c:	d00f      	beq.n	801d88e <TIM_Base_SetConfig+0x9a>
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	4a2c      	ldr	r2, [pc, #176]	; (801d924 <TIM_Base_SetConfig+0x130>)
 801d872:	4293      	cmp	r3, r2
 801d874:	d00b      	beq.n	801d88e <TIM_Base_SetConfig+0x9a>
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	4a2b      	ldr	r2, [pc, #172]	; (801d928 <TIM_Base_SetConfig+0x134>)
 801d87a:	4293      	cmp	r3, r2
 801d87c:	d007      	beq.n	801d88e <TIM_Base_SetConfig+0x9a>
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	4a2a      	ldr	r2, [pc, #168]	; (801d92c <TIM_Base_SetConfig+0x138>)
 801d882:	4293      	cmp	r3, r2
 801d884:	d003      	beq.n	801d88e <TIM_Base_SetConfig+0x9a>
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	4a25      	ldr	r2, [pc, #148]	; (801d920 <TIM_Base_SetConfig+0x12c>)
 801d88a:	4293      	cmp	r3, r2
 801d88c:	d108      	bne.n	801d8a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d896:	683b      	ldr	r3, [r7, #0]
 801d898:	68db      	ldr	r3, [r3, #12]
 801d89a:	68fa      	ldr	r2, [r7, #12]
 801d89c:	4313      	orrs	r3, r2
 801d89e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d8a6:	683b      	ldr	r3, [r7, #0]
 801d8a8:	695b      	ldr	r3, [r3, #20]
 801d8aa:	4313      	orrs	r3, r2
 801d8ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	68fa      	ldr	r2, [r7, #12]
 801d8b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d8b4:	683b      	ldr	r3, [r7, #0]
 801d8b6:	689a      	ldr	r2, [r3, #8]
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d8bc:	683b      	ldr	r3, [r7, #0]
 801d8be:	681a      	ldr	r2, [r3, #0]
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	4a12      	ldr	r2, [pc, #72]	; (801d910 <TIM_Base_SetConfig+0x11c>)
 801d8c8:	4293      	cmp	r3, r2
 801d8ca:	d013      	beq.n	801d8f4 <TIM_Base_SetConfig+0x100>
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	4a13      	ldr	r2, [pc, #76]	; (801d91c <TIM_Base_SetConfig+0x128>)
 801d8d0:	4293      	cmp	r3, r2
 801d8d2:	d00f      	beq.n	801d8f4 <TIM_Base_SetConfig+0x100>
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	4a13      	ldr	r2, [pc, #76]	; (801d924 <TIM_Base_SetConfig+0x130>)
 801d8d8:	4293      	cmp	r3, r2
 801d8da:	d00b      	beq.n	801d8f4 <TIM_Base_SetConfig+0x100>
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	4a12      	ldr	r2, [pc, #72]	; (801d928 <TIM_Base_SetConfig+0x134>)
 801d8e0:	4293      	cmp	r3, r2
 801d8e2:	d007      	beq.n	801d8f4 <TIM_Base_SetConfig+0x100>
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	4a11      	ldr	r2, [pc, #68]	; (801d92c <TIM_Base_SetConfig+0x138>)
 801d8e8:	4293      	cmp	r3, r2
 801d8ea:	d003      	beq.n	801d8f4 <TIM_Base_SetConfig+0x100>
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	4a0c      	ldr	r2, [pc, #48]	; (801d920 <TIM_Base_SetConfig+0x12c>)
 801d8f0:	4293      	cmp	r3, r2
 801d8f2:	d103      	bne.n	801d8fc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d8f4:	683b      	ldr	r3, [r7, #0]
 801d8f6:	691a      	ldr	r2, [r3, #16]
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	2201      	movs	r2, #1
 801d900:	615a      	str	r2, [r3, #20]
}
 801d902:	bf00      	nop
 801d904:	3714      	adds	r7, #20
 801d906:	46bd      	mov	sp, r7
 801d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d90c:	4770      	bx	lr
 801d90e:	bf00      	nop
 801d910:	40012c00 	.word	0x40012c00
 801d914:	40000400 	.word	0x40000400
 801d918:	40000800 	.word	0x40000800
 801d91c:	40013400 	.word	0x40013400
 801d920:	40015000 	.word	0x40015000
 801d924:	40014000 	.word	0x40014000
 801d928:	40014400 	.word	0x40014400
 801d92c:	40014800 	.word	0x40014800

0801d930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d930:	b480      	push	{r7}
 801d932:	b087      	sub	sp, #28
 801d934:	af00      	add	r7, sp, #0
 801d936:	6078      	str	r0, [r7, #4]
 801d938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	6a1b      	ldr	r3, [r3, #32]
 801d93e:	f023 0201 	bic.w	r2, r3, #1
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	6a1b      	ldr	r3, [r3, #32]
 801d94a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	685b      	ldr	r3, [r3, #4]
 801d950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	699b      	ldr	r3, [r3, #24]
 801d956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	f023 0303 	bic.w	r3, r3, #3
 801d96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d96c:	683b      	ldr	r3, [r7, #0]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	68fa      	ldr	r2, [r7, #12]
 801d972:	4313      	orrs	r3, r2
 801d974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d976:	697b      	ldr	r3, [r7, #20]
 801d978:	f023 0302 	bic.w	r3, r3, #2
 801d97c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d97e:	683b      	ldr	r3, [r7, #0]
 801d980:	689b      	ldr	r3, [r3, #8]
 801d982:	697a      	ldr	r2, [r7, #20]
 801d984:	4313      	orrs	r3, r2
 801d986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	4a30      	ldr	r2, [pc, #192]	; (801da4c <TIM_OC1_SetConfig+0x11c>)
 801d98c:	4293      	cmp	r3, r2
 801d98e:	d013      	beq.n	801d9b8 <TIM_OC1_SetConfig+0x88>
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	4a2f      	ldr	r2, [pc, #188]	; (801da50 <TIM_OC1_SetConfig+0x120>)
 801d994:	4293      	cmp	r3, r2
 801d996:	d00f      	beq.n	801d9b8 <TIM_OC1_SetConfig+0x88>
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	4a2e      	ldr	r2, [pc, #184]	; (801da54 <TIM_OC1_SetConfig+0x124>)
 801d99c:	4293      	cmp	r3, r2
 801d99e:	d00b      	beq.n	801d9b8 <TIM_OC1_SetConfig+0x88>
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	4a2d      	ldr	r2, [pc, #180]	; (801da58 <TIM_OC1_SetConfig+0x128>)
 801d9a4:	4293      	cmp	r3, r2
 801d9a6:	d007      	beq.n	801d9b8 <TIM_OC1_SetConfig+0x88>
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	4a2c      	ldr	r2, [pc, #176]	; (801da5c <TIM_OC1_SetConfig+0x12c>)
 801d9ac:	4293      	cmp	r3, r2
 801d9ae:	d003      	beq.n	801d9b8 <TIM_OC1_SetConfig+0x88>
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	4a2b      	ldr	r2, [pc, #172]	; (801da60 <TIM_OC1_SetConfig+0x130>)
 801d9b4:	4293      	cmp	r3, r2
 801d9b6:	d10c      	bne.n	801d9d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d9b8:	697b      	ldr	r3, [r7, #20]
 801d9ba:	f023 0308 	bic.w	r3, r3, #8
 801d9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d9c0:	683b      	ldr	r3, [r7, #0]
 801d9c2:	68db      	ldr	r3, [r3, #12]
 801d9c4:	697a      	ldr	r2, [r7, #20]
 801d9c6:	4313      	orrs	r3, r2
 801d9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d9ca:	697b      	ldr	r3, [r7, #20]
 801d9cc:	f023 0304 	bic.w	r3, r3, #4
 801d9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	4a1d      	ldr	r2, [pc, #116]	; (801da4c <TIM_OC1_SetConfig+0x11c>)
 801d9d6:	4293      	cmp	r3, r2
 801d9d8:	d013      	beq.n	801da02 <TIM_OC1_SetConfig+0xd2>
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	4a1c      	ldr	r2, [pc, #112]	; (801da50 <TIM_OC1_SetConfig+0x120>)
 801d9de:	4293      	cmp	r3, r2
 801d9e0:	d00f      	beq.n	801da02 <TIM_OC1_SetConfig+0xd2>
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	4a1b      	ldr	r2, [pc, #108]	; (801da54 <TIM_OC1_SetConfig+0x124>)
 801d9e6:	4293      	cmp	r3, r2
 801d9e8:	d00b      	beq.n	801da02 <TIM_OC1_SetConfig+0xd2>
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	4a1a      	ldr	r2, [pc, #104]	; (801da58 <TIM_OC1_SetConfig+0x128>)
 801d9ee:	4293      	cmp	r3, r2
 801d9f0:	d007      	beq.n	801da02 <TIM_OC1_SetConfig+0xd2>
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	4a19      	ldr	r2, [pc, #100]	; (801da5c <TIM_OC1_SetConfig+0x12c>)
 801d9f6:	4293      	cmp	r3, r2
 801d9f8:	d003      	beq.n	801da02 <TIM_OC1_SetConfig+0xd2>
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	4a18      	ldr	r2, [pc, #96]	; (801da60 <TIM_OC1_SetConfig+0x130>)
 801d9fe:	4293      	cmp	r3, r2
 801da00:	d111      	bne.n	801da26 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801da02:	693b      	ldr	r3, [r7, #16]
 801da04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801da08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801da0a:	693b      	ldr	r3, [r7, #16]
 801da0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801da10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801da12:	683b      	ldr	r3, [r7, #0]
 801da14:	695b      	ldr	r3, [r3, #20]
 801da16:	693a      	ldr	r2, [r7, #16]
 801da18:	4313      	orrs	r3, r2
 801da1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801da1c:	683b      	ldr	r3, [r7, #0]
 801da1e:	699b      	ldr	r3, [r3, #24]
 801da20:	693a      	ldr	r2, [r7, #16]
 801da22:	4313      	orrs	r3, r2
 801da24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	693a      	ldr	r2, [r7, #16]
 801da2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	68fa      	ldr	r2, [r7, #12]
 801da30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801da32:	683b      	ldr	r3, [r7, #0]
 801da34:	685a      	ldr	r2, [r3, #4]
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	697a      	ldr	r2, [r7, #20]
 801da3e:	621a      	str	r2, [r3, #32]
}
 801da40:	bf00      	nop
 801da42:	371c      	adds	r7, #28
 801da44:	46bd      	mov	sp, r7
 801da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da4a:	4770      	bx	lr
 801da4c:	40012c00 	.word	0x40012c00
 801da50:	40013400 	.word	0x40013400
 801da54:	40014000 	.word	0x40014000
 801da58:	40014400 	.word	0x40014400
 801da5c:	40014800 	.word	0x40014800
 801da60:	40015000 	.word	0x40015000

0801da64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801da64:	b480      	push	{r7}
 801da66:	b087      	sub	sp, #28
 801da68:	af00      	add	r7, sp, #0
 801da6a:	6078      	str	r0, [r7, #4]
 801da6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	6a1b      	ldr	r3, [r3, #32]
 801da72:	f023 0210 	bic.w	r2, r3, #16
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	6a1b      	ldr	r3, [r3, #32]
 801da7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	685b      	ldr	r3, [r3, #4]
 801da84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	699b      	ldr	r3, [r3, #24]
 801da8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801da92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801da96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801da9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801daa0:	683b      	ldr	r3, [r7, #0]
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	021b      	lsls	r3, r3, #8
 801daa6:	68fa      	ldr	r2, [r7, #12]
 801daa8:	4313      	orrs	r3, r2
 801daaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801daac:	697b      	ldr	r3, [r7, #20]
 801daae:	f023 0320 	bic.w	r3, r3, #32
 801dab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801dab4:	683b      	ldr	r3, [r7, #0]
 801dab6:	689b      	ldr	r3, [r3, #8]
 801dab8:	011b      	lsls	r3, r3, #4
 801daba:	697a      	ldr	r2, [r7, #20]
 801dabc:	4313      	orrs	r3, r2
 801dabe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	4a2c      	ldr	r2, [pc, #176]	; (801db74 <TIM_OC2_SetConfig+0x110>)
 801dac4:	4293      	cmp	r3, r2
 801dac6:	d007      	beq.n	801dad8 <TIM_OC2_SetConfig+0x74>
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	4a2b      	ldr	r2, [pc, #172]	; (801db78 <TIM_OC2_SetConfig+0x114>)
 801dacc:	4293      	cmp	r3, r2
 801dace:	d003      	beq.n	801dad8 <TIM_OC2_SetConfig+0x74>
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	4a2a      	ldr	r2, [pc, #168]	; (801db7c <TIM_OC2_SetConfig+0x118>)
 801dad4:	4293      	cmp	r3, r2
 801dad6:	d10d      	bne.n	801daf4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801dad8:	697b      	ldr	r3, [r7, #20]
 801dada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801dae0:	683b      	ldr	r3, [r7, #0]
 801dae2:	68db      	ldr	r3, [r3, #12]
 801dae4:	011b      	lsls	r3, r3, #4
 801dae6:	697a      	ldr	r2, [r7, #20]
 801dae8:	4313      	orrs	r3, r2
 801daea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801daec:	697b      	ldr	r3, [r7, #20]
 801daee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801daf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	4a1f      	ldr	r2, [pc, #124]	; (801db74 <TIM_OC2_SetConfig+0x110>)
 801daf8:	4293      	cmp	r3, r2
 801dafa:	d013      	beq.n	801db24 <TIM_OC2_SetConfig+0xc0>
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	4a1e      	ldr	r2, [pc, #120]	; (801db78 <TIM_OC2_SetConfig+0x114>)
 801db00:	4293      	cmp	r3, r2
 801db02:	d00f      	beq.n	801db24 <TIM_OC2_SetConfig+0xc0>
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	4a1e      	ldr	r2, [pc, #120]	; (801db80 <TIM_OC2_SetConfig+0x11c>)
 801db08:	4293      	cmp	r3, r2
 801db0a:	d00b      	beq.n	801db24 <TIM_OC2_SetConfig+0xc0>
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	4a1d      	ldr	r2, [pc, #116]	; (801db84 <TIM_OC2_SetConfig+0x120>)
 801db10:	4293      	cmp	r3, r2
 801db12:	d007      	beq.n	801db24 <TIM_OC2_SetConfig+0xc0>
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	4a1c      	ldr	r2, [pc, #112]	; (801db88 <TIM_OC2_SetConfig+0x124>)
 801db18:	4293      	cmp	r3, r2
 801db1a:	d003      	beq.n	801db24 <TIM_OC2_SetConfig+0xc0>
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	4a17      	ldr	r2, [pc, #92]	; (801db7c <TIM_OC2_SetConfig+0x118>)
 801db20:	4293      	cmp	r3, r2
 801db22:	d113      	bne.n	801db4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801db24:	693b      	ldr	r3, [r7, #16]
 801db26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801db2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801db2c:	693b      	ldr	r3, [r7, #16]
 801db2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801db32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801db34:	683b      	ldr	r3, [r7, #0]
 801db36:	695b      	ldr	r3, [r3, #20]
 801db38:	009b      	lsls	r3, r3, #2
 801db3a:	693a      	ldr	r2, [r7, #16]
 801db3c:	4313      	orrs	r3, r2
 801db3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801db40:	683b      	ldr	r3, [r7, #0]
 801db42:	699b      	ldr	r3, [r3, #24]
 801db44:	009b      	lsls	r3, r3, #2
 801db46:	693a      	ldr	r2, [r7, #16]
 801db48:	4313      	orrs	r3, r2
 801db4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	693a      	ldr	r2, [r7, #16]
 801db50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	68fa      	ldr	r2, [r7, #12]
 801db56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801db58:	683b      	ldr	r3, [r7, #0]
 801db5a:	685a      	ldr	r2, [r3, #4]
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	697a      	ldr	r2, [r7, #20]
 801db64:	621a      	str	r2, [r3, #32]
}
 801db66:	bf00      	nop
 801db68:	371c      	adds	r7, #28
 801db6a:	46bd      	mov	sp, r7
 801db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db70:	4770      	bx	lr
 801db72:	bf00      	nop
 801db74:	40012c00 	.word	0x40012c00
 801db78:	40013400 	.word	0x40013400
 801db7c:	40015000 	.word	0x40015000
 801db80:	40014000 	.word	0x40014000
 801db84:	40014400 	.word	0x40014400
 801db88:	40014800 	.word	0x40014800

0801db8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801db8c:	b480      	push	{r7}
 801db8e:	b087      	sub	sp, #28
 801db90:	af00      	add	r7, sp, #0
 801db92:	6078      	str	r0, [r7, #4]
 801db94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	6a1b      	ldr	r3, [r3, #32]
 801db9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	6a1b      	ldr	r3, [r3, #32]
 801dba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	685b      	ldr	r3, [r3, #4]
 801dbac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	69db      	ldr	r3, [r3, #28]
 801dbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801dbb4:	68fb      	ldr	r3, [r7, #12]
 801dbb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dbba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dbbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801dbc0:	68fb      	ldr	r3, [r7, #12]
 801dbc2:	f023 0303 	bic.w	r3, r3, #3
 801dbc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dbc8:	683b      	ldr	r3, [r7, #0]
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	68fa      	ldr	r2, [r7, #12]
 801dbce:	4313      	orrs	r3, r2
 801dbd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801dbd2:	697b      	ldr	r3, [r7, #20]
 801dbd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801dbd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801dbda:	683b      	ldr	r3, [r7, #0]
 801dbdc:	689b      	ldr	r3, [r3, #8]
 801dbde:	021b      	lsls	r3, r3, #8
 801dbe0:	697a      	ldr	r2, [r7, #20]
 801dbe2:	4313      	orrs	r3, r2
 801dbe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	4a2b      	ldr	r2, [pc, #172]	; (801dc98 <TIM_OC3_SetConfig+0x10c>)
 801dbea:	4293      	cmp	r3, r2
 801dbec:	d007      	beq.n	801dbfe <TIM_OC3_SetConfig+0x72>
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	4a2a      	ldr	r2, [pc, #168]	; (801dc9c <TIM_OC3_SetConfig+0x110>)
 801dbf2:	4293      	cmp	r3, r2
 801dbf4:	d003      	beq.n	801dbfe <TIM_OC3_SetConfig+0x72>
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	4a29      	ldr	r2, [pc, #164]	; (801dca0 <TIM_OC3_SetConfig+0x114>)
 801dbfa:	4293      	cmp	r3, r2
 801dbfc:	d10d      	bne.n	801dc1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801dbfe:	697b      	ldr	r3, [r7, #20]
 801dc00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dc04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801dc06:	683b      	ldr	r3, [r7, #0]
 801dc08:	68db      	ldr	r3, [r3, #12]
 801dc0a:	021b      	lsls	r3, r3, #8
 801dc0c:	697a      	ldr	r2, [r7, #20]
 801dc0e:	4313      	orrs	r3, r2
 801dc10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801dc12:	697b      	ldr	r3, [r7, #20]
 801dc14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801dc18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	4a1e      	ldr	r2, [pc, #120]	; (801dc98 <TIM_OC3_SetConfig+0x10c>)
 801dc1e:	4293      	cmp	r3, r2
 801dc20:	d013      	beq.n	801dc4a <TIM_OC3_SetConfig+0xbe>
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	4a1d      	ldr	r2, [pc, #116]	; (801dc9c <TIM_OC3_SetConfig+0x110>)
 801dc26:	4293      	cmp	r3, r2
 801dc28:	d00f      	beq.n	801dc4a <TIM_OC3_SetConfig+0xbe>
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	4a1d      	ldr	r2, [pc, #116]	; (801dca4 <TIM_OC3_SetConfig+0x118>)
 801dc2e:	4293      	cmp	r3, r2
 801dc30:	d00b      	beq.n	801dc4a <TIM_OC3_SetConfig+0xbe>
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	4a1c      	ldr	r2, [pc, #112]	; (801dca8 <TIM_OC3_SetConfig+0x11c>)
 801dc36:	4293      	cmp	r3, r2
 801dc38:	d007      	beq.n	801dc4a <TIM_OC3_SetConfig+0xbe>
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	4a1b      	ldr	r2, [pc, #108]	; (801dcac <TIM_OC3_SetConfig+0x120>)
 801dc3e:	4293      	cmp	r3, r2
 801dc40:	d003      	beq.n	801dc4a <TIM_OC3_SetConfig+0xbe>
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	4a16      	ldr	r2, [pc, #88]	; (801dca0 <TIM_OC3_SetConfig+0x114>)
 801dc46:	4293      	cmp	r3, r2
 801dc48:	d113      	bne.n	801dc72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801dc4a:	693b      	ldr	r3, [r7, #16]
 801dc4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dc50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801dc52:	693b      	ldr	r3, [r7, #16]
 801dc54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dc58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801dc5a:	683b      	ldr	r3, [r7, #0]
 801dc5c:	695b      	ldr	r3, [r3, #20]
 801dc5e:	011b      	lsls	r3, r3, #4
 801dc60:	693a      	ldr	r2, [r7, #16]
 801dc62:	4313      	orrs	r3, r2
 801dc64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801dc66:	683b      	ldr	r3, [r7, #0]
 801dc68:	699b      	ldr	r3, [r3, #24]
 801dc6a:	011b      	lsls	r3, r3, #4
 801dc6c:	693a      	ldr	r2, [r7, #16]
 801dc6e:	4313      	orrs	r3, r2
 801dc70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	693a      	ldr	r2, [r7, #16]
 801dc76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	68fa      	ldr	r2, [r7, #12]
 801dc7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801dc7e:	683b      	ldr	r3, [r7, #0]
 801dc80:	685a      	ldr	r2, [r3, #4]
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	697a      	ldr	r2, [r7, #20]
 801dc8a:	621a      	str	r2, [r3, #32]
}
 801dc8c:	bf00      	nop
 801dc8e:	371c      	adds	r7, #28
 801dc90:	46bd      	mov	sp, r7
 801dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc96:	4770      	bx	lr
 801dc98:	40012c00 	.word	0x40012c00
 801dc9c:	40013400 	.word	0x40013400
 801dca0:	40015000 	.word	0x40015000
 801dca4:	40014000 	.word	0x40014000
 801dca8:	40014400 	.word	0x40014400
 801dcac:	40014800 	.word	0x40014800

0801dcb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dcb0:	b480      	push	{r7}
 801dcb2:	b087      	sub	sp, #28
 801dcb4:	af00      	add	r7, sp, #0
 801dcb6:	6078      	str	r0, [r7, #4]
 801dcb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	6a1b      	ldr	r3, [r3, #32]
 801dcbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	6a1b      	ldr	r3, [r3, #32]
 801dcca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	685b      	ldr	r3, [r3, #4]
 801dcd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	69db      	ldr	r3, [r3, #28]
 801dcd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dcde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801dcea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dcec:	683b      	ldr	r3, [r7, #0]
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	021b      	lsls	r3, r3, #8
 801dcf2:	68fa      	ldr	r2, [r7, #12]
 801dcf4:	4313      	orrs	r3, r2
 801dcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801dcf8:	697b      	ldr	r3, [r7, #20]
 801dcfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dcfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801dd00:	683b      	ldr	r3, [r7, #0]
 801dd02:	689b      	ldr	r3, [r3, #8]
 801dd04:	031b      	lsls	r3, r3, #12
 801dd06:	697a      	ldr	r2, [r7, #20]
 801dd08:	4313      	orrs	r3, r2
 801dd0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	4a2c      	ldr	r2, [pc, #176]	; (801ddc0 <TIM_OC4_SetConfig+0x110>)
 801dd10:	4293      	cmp	r3, r2
 801dd12:	d007      	beq.n	801dd24 <TIM_OC4_SetConfig+0x74>
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	4a2b      	ldr	r2, [pc, #172]	; (801ddc4 <TIM_OC4_SetConfig+0x114>)
 801dd18:	4293      	cmp	r3, r2
 801dd1a:	d003      	beq.n	801dd24 <TIM_OC4_SetConfig+0x74>
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	4a2a      	ldr	r2, [pc, #168]	; (801ddc8 <TIM_OC4_SetConfig+0x118>)
 801dd20:	4293      	cmp	r3, r2
 801dd22:	d10d      	bne.n	801dd40 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801dd24:	697b      	ldr	r3, [r7, #20]
 801dd26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801dd2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801dd2c:	683b      	ldr	r3, [r7, #0]
 801dd2e:	68db      	ldr	r3, [r3, #12]
 801dd30:	031b      	lsls	r3, r3, #12
 801dd32:	697a      	ldr	r2, [r7, #20]
 801dd34:	4313      	orrs	r3, r2
 801dd36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801dd38:	697b      	ldr	r3, [r7, #20]
 801dd3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dd3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	4a1f      	ldr	r2, [pc, #124]	; (801ddc0 <TIM_OC4_SetConfig+0x110>)
 801dd44:	4293      	cmp	r3, r2
 801dd46:	d013      	beq.n	801dd70 <TIM_OC4_SetConfig+0xc0>
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	4a1e      	ldr	r2, [pc, #120]	; (801ddc4 <TIM_OC4_SetConfig+0x114>)
 801dd4c:	4293      	cmp	r3, r2
 801dd4e:	d00f      	beq.n	801dd70 <TIM_OC4_SetConfig+0xc0>
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	4a1e      	ldr	r2, [pc, #120]	; (801ddcc <TIM_OC4_SetConfig+0x11c>)
 801dd54:	4293      	cmp	r3, r2
 801dd56:	d00b      	beq.n	801dd70 <TIM_OC4_SetConfig+0xc0>
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	4a1d      	ldr	r2, [pc, #116]	; (801ddd0 <TIM_OC4_SetConfig+0x120>)
 801dd5c:	4293      	cmp	r3, r2
 801dd5e:	d007      	beq.n	801dd70 <TIM_OC4_SetConfig+0xc0>
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	4a1c      	ldr	r2, [pc, #112]	; (801ddd4 <TIM_OC4_SetConfig+0x124>)
 801dd64:	4293      	cmp	r3, r2
 801dd66:	d003      	beq.n	801dd70 <TIM_OC4_SetConfig+0xc0>
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	4a17      	ldr	r2, [pc, #92]	; (801ddc8 <TIM_OC4_SetConfig+0x118>)
 801dd6c:	4293      	cmp	r3, r2
 801dd6e:	d113      	bne.n	801dd98 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801dd70:	693b      	ldr	r3, [r7, #16]
 801dd72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dd76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801dd78:	693b      	ldr	r3, [r7, #16]
 801dd7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801dd7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801dd80:	683b      	ldr	r3, [r7, #0]
 801dd82:	695b      	ldr	r3, [r3, #20]
 801dd84:	019b      	lsls	r3, r3, #6
 801dd86:	693a      	ldr	r2, [r7, #16]
 801dd88:	4313      	orrs	r3, r2
 801dd8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801dd8c:	683b      	ldr	r3, [r7, #0]
 801dd8e:	699b      	ldr	r3, [r3, #24]
 801dd90:	019b      	lsls	r3, r3, #6
 801dd92:	693a      	ldr	r2, [r7, #16]
 801dd94:	4313      	orrs	r3, r2
 801dd96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	693a      	ldr	r2, [r7, #16]
 801dd9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	68fa      	ldr	r2, [r7, #12]
 801dda2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801dda4:	683b      	ldr	r3, [r7, #0]
 801dda6:	685a      	ldr	r2, [r3, #4]
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	697a      	ldr	r2, [r7, #20]
 801ddb0:	621a      	str	r2, [r3, #32]
}
 801ddb2:	bf00      	nop
 801ddb4:	371c      	adds	r7, #28
 801ddb6:	46bd      	mov	sp, r7
 801ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddbc:	4770      	bx	lr
 801ddbe:	bf00      	nop
 801ddc0:	40012c00 	.word	0x40012c00
 801ddc4:	40013400 	.word	0x40013400
 801ddc8:	40015000 	.word	0x40015000
 801ddcc:	40014000 	.word	0x40014000
 801ddd0:	40014400 	.word	0x40014400
 801ddd4:	40014800 	.word	0x40014800

0801ddd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801ddd8:	b480      	push	{r7}
 801ddda:	b087      	sub	sp, #28
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	6078      	str	r0, [r7, #4]
 801dde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	6a1b      	ldr	r3, [r3, #32]
 801dde6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	6a1b      	ldr	r3, [r3, #32]
 801ddf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	685b      	ldr	r3, [r3, #4]
 801ddf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ddfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801de06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801de0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801de0c:	683b      	ldr	r3, [r7, #0]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	68fa      	ldr	r2, [r7, #12]
 801de12:	4313      	orrs	r3, r2
 801de14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801de16:	693b      	ldr	r3, [r7, #16]
 801de18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801de1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801de1e:	683b      	ldr	r3, [r7, #0]
 801de20:	689b      	ldr	r3, [r3, #8]
 801de22:	041b      	lsls	r3, r3, #16
 801de24:	693a      	ldr	r2, [r7, #16]
 801de26:	4313      	orrs	r3, r2
 801de28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	4a19      	ldr	r2, [pc, #100]	; (801de94 <TIM_OC5_SetConfig+0xbc>)
 801de2e:	4293      	cmp	r3, r2
 801de30:	d013      	beq.n	801de5a <TIM_OC5_SetConfig+0x82>
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	4a18      	ldr	r2, [pc, #96]	; (801de98 <TIM_OC5_SetConfig+0xc0>)
 801de36:	4293      	cmp	r3, r2
 801de38:	d00f      	beq.n	801de5a <TIM_OC5_SetConfig+0x82>
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	4a17      	ldr	r2, [pc, #92]	; (801de9c <TIM_OC5_SetConfig+0xc4>)
 801de3e:	4293      	cmp	r3, r2
 801de40:	d00b      	beq.n	801de5a <TIM_OC5_SetConfig+0x82>
 801de42:	687b      	ldr	r3, [r7, #4]
 801de44:	4a16      	ldr	r2, [pc, #88]	; (801dea0 <TIM_OC5_SetConfig+0xc8>)
 801de46:	4293      	cmp	r3, r2
 801de48:	d007      	beq.n	801de5a <TIM_OC5_SetConfig+0x82>
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	4a15      	ldr	r2, [pc, #84]	; (801dea4 <TIM_OC5_SetConfig+0xcc>)
 801de4e:	4293      	cmp	r3, r2
 801de50:	d003      	beq.n	801de5a <TIM_OC5_SetConfig+0x82>
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	4a14      	ldr	r2, [pc, #80]	; (801dea8 <TIM_OC5_SetConfig+0xd0>)
 801de56:	4293      	cmp	r3, r2
 801de58:	d109      	bne.n	801de6e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801de5a:	697b      	ldr	r3, [r7, #20]
 801de5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801de60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801de62:	683b      	ldr	r3, [r7, #0]
 801de64:	695b      	ldr	r3, [r3, #20]
 801de66:	021b      	lsls	r3, r3, #8
 801de68:	697a      	ldr	r2, [r7, #20]
 801de6a:	4313      	orrs	r3, r2
 801de6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	697a      	ldr	r2, [r7, #20]
 801de72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	68fa      	ldr	r2, [r7, #12]
 801de78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801de7a:	683b      	ldr	r3, [r7, #0]
 801de7c:	685a      	ldr	r2, [r3, #4]
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	693a      	ldr	r2, [r7, #16]
 801de86:	621a      	str	r2, [r3, #32]
}
 801de88:	bf00      	nop
 801de8a:	371c      	adds	r7, #28
 801de8c:	46bd      	mov	sp, r7
 801de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de92:	4770      	bx	lr
 801de94:	40012c00 	.word	0x40012c00
 801de98:	40013400 	.word	0x40013400
 801de9c:	40014000 	.word	0x40014000
 801dea0:	40014400 	.word	0x40014400
 801dea4:	40014800 	.word	0x40014800
 801dea8:	40015000 	.word	0x40015000

0801deac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801deac:	b480      	push	{r7}
 801deae:	b087      	sub	sp, #28
 801deb0:	af00      	add	r7, sp, #0
 801deb2:	6078      	str	r0, [r7, #4]
 801deb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	6a1b      	ldr	r3, [r3, #32]
 801deba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	6a1b      	ldr	r3, [r3, #32]
 801dec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	685b      	ldr	r3, [r3, #4]
 801decc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ded2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801deda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dee0:	683b      	ldr	r3, [r7, #0]
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	021b      	lsls	r3, r3, #8
 801dee6:	68fa      	ldr	r2, [r7, #12]
 801dee8:	4313      	orrs	r3, r2
 801deea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801deec:	693b      	ldr	r3, [r7, #16]
 801deee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801def2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801def4:	683b      	ldr	r3, [r7, #0]
 801def6:	689b      	ldr	r3, [r3, #8]
 801def8:	051b      	lsls	r3, r3, #20
 801defa:	693a      	ldr	r2, [r7, #16]
 801defc:	4313      	orrs	r3, r2
 801defe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	4a1a      	ldr	r2, [pc, #104]	; (801df6c <TIM_OC6_SetConfig+0xc0>)
 801df04:	4293      	cmp	r3, r2
 801df06:	d013      	beq.n	801df30 <TIM_OC6_SetConfig+0x84>
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	4a19      	ldr	r2, [pc, #100]	; (801df70 <TIM_OC6_SetConfig+0xc4>)
 801df0c:	4293      	cmp	r3, r2
 801df0e:	d00f      	beq.n	801df30 <TIM_OC6_SetConfig+0x84>
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	4a18      	ldr	r2, [pc, #96]	; (801df74 <TIM_OC6_SetConfig+0xc8>)
 801df14:	4293      	cmp	r3, r2
 801df16:	d00b      	beq.n	801df30 <TIM_OC6_SetConfig+0x84>
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	4a17      	ldr	r2, [pc, #92]	; (801df78 <TIM_OC6_SetConfig+0xcc>)
 801df1c:	4293      	cmp	r3, r2
 801df1e:	d007      	beq.n	801df30 <TIM_OC6_SetConfig+0x84>
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	4a16      	ldr	r2, [pc, #88]	; (801df7c <TIM_OC6_SetConfig+0xd0>)
 801df24:	4293      	cmp	r3, r2
 801df26:	d003      	beq.n	801df30 <TIM_OC6_SetConfig+0x84>
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	4a15      	ldr	r2, [pc, #84]	; (801df80 <TIM_OC6_SetConfig+0xd4>)
 801df2c:	4293      	cmp	r3, r2
 801df2e:	d109      	bne.n	801df44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801df30:	697b      	ldr	r3, [r7, #20]
 801df32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801df36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801df38:	683b      	ldr	r3, [r7, #0]
 801df3a:	695b      	ldr	r3, [r3, #20]
 801df3c:	029b      	lsls	r3, r3, #10
 801df3e:	697a      	ldr	r2, [r7, #20]
 801df40:	4313      	orrs	r3, r2
 801df42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	697a      	ldr	r2, [r7, #20]
 801df48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	68fa      	ldr	r2, [r7, #12]
 801df4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801df50:	683b      	ldr	r3, [r7, #0]
 801df52:	685a      	ldr	r2, [r3, #4]
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	693a      	ldr	r2, [r7, #16]
 801df5c:	621a      	str	r2, [r3, #32]
}
 801df5e:	bf00      	nop
 801df60:	371c      	adds	r7, #28
 801df62:	46bd      	mov	sp, r7
 801df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df68:	4770      	bx	lr
 801df6a:	bf00      	nop
 801df6c:	40012c00 	.word	0x40012c00
 801df70:	40013400 	.word	0x40013400
 801df74:	40014000 	.word	0x40014000
 801df78:	40014400 	.word	0x40014400
 801df7c:	40014800 	.word	0x40014800
 801df80:	40015000 	.word	0x40015000

0801df84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801df84:	b480      	push	{r7}
 801df86:	b087      	sub	sp, #28
 801df88:	af00      	add	r7, sp, #0
 801df8a:	60f8      	str	r0, [r7, #12]
 801df8c:	60b9      	str	r1, [r7, #8]
 801df8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801df90:	68bb      	ldr	r3, [r7, #8]
 801df92:	f003 031f 	and.w	r3, r3, #31
 801df96:	2201      	movs	r2, #1
 801df98:	fa02 f303 	lsl.w	r3, r2, r3
 801df9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	6a1a      	ldr	r2, [r3, #32]
 801dfa2:	697b      	ldr	r3, [r7, #20]
 801dfa4:	43db      	mvns	r3, r3
 801dfa6:	401a      	ands	r2, r3
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801dfac:	68fb      	ldr	r3, [r7, #12]
 801dfae:	6a1a      	ldr	r2, [r3, #32]
 801dfb0:	68bb      	ldr	r3, [r7, #8]
 801dfb2:	f003 031f 	and.w	r3, r3, #31
 801dfb6:	6879      	ldr	r1, [r7, #4]
 801dfb8:	fa01 f303 	lsl.w	r3, r1, r3
 801dfbc:	431a      	orrs	r2, r3
 801dfbe:	68fb      	ldr	r3, [r7, #12]
 801dfc0:	621a      	str	r2, [r3, #32]
}
 801dfc2:	bf00      	nop
 801dfc4:	371c      	adds	r7, #28
 801dfc6:	46bd      	mov	sp, r7
 801dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfcc:	4770      	bx	lr
	...

0801dfd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801dfd0:	b480      	push	{r7}
 801dfd2:	b085      	sub	sp, #20
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
 801dfd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dfe0:	2b01      	cmp	r3, #1
 801dfe2:	d101      	bne.n	801dfe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801dfe4:	2302      	movs	r3, #2
 801dfe6:	e06f      	b.n	801e0c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	2201      	movs	r2, #1
 801dfec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	2202      	movs	r2, #2
 801dff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	685b      	ldr	r3, [r3, #4]
 801dffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	689b      	ldr	r3, [r3, #8]
 801e006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	4a31      	ldr	r2, [pc, #196]	; (801e0d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801e00e:	4293      	cmp	r3, r2
 801e010:	d009      	beq.n	801e026 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	4a30      	ldr	r2, [pc, #192]	; (801e0d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801e018:	4293      	cmp	r3, r2
 801e01a:	d004      	beq.n	801e026 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	4a2e      	ldr	r2, [pc, #184]	; (801e0dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801e022:	4293      	cmp	r3, r2
 801e024:	d108      	bne.n	801e038 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801e02c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801e02e:	683b      	ldr	r3, [r7, #0]
 801e030:	685b      	ldr	r3, [r3, #4]
 801e032:	68fa      	ldr	r2, [r7, #12]
 801e034:	4313      	orrs	r3, r2
 801e036:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801e03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801e044:	683b      	ldr	r3, [r7, #0]
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	68fa      	ldr	r2, [r7, #12]
 801e04a:	4313      	orrs	r3, r2
 801e04c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	68fa      	ldr	r2, [r7, #12]
 801e054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	4a1e      	ldr	r2, [pc, #120]	; (801e0d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801e05c:	4293      	cmp	r3, r2
 801e05e:	d01d      	beq.n	801e09c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e068:	d018      	beq.n	801e09c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	681b      	ldr	r3, [r3, #0]
 801e06e:	4a1c      	ldr	r2, [pc, #112]	; (801e0e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801e070:	4293      	cmp	r3, r2
 801e072:	d013      	beq.n	801e09c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	4a1a      	ldr	r2, [pc, #104]	; (801e0e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801e07a:	4293      	cmp	r3, r2
 801e07c:	d00e      	beq.n	801e09c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	4a15      	ldr	r2, [pc, #84]	; (801e0d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801e084:	4293      	cmp	r3, r2
 801e086:	d009      	beq.n	801e09c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	4a16      	ldr	r2, [pc, #88]	; (801e0e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801e08e:	4293      	cmp	r3, r2
 801e090:	d004      	beq.n	801e09c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	4a11      	ldr	r2, [pc, #68]	; (801e0dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801e098:	4293      	cmp	r3, r2
 801e09a:	d10c      	bne.n	801e0b6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801e09c:	68bb      	ldr	r3, [r7, #8]
 801e09e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e0a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801e0a4:	683b      	ldr	r3, [r7, #0]
 801e0a6:	689b      	ldr	r3, [r3, #8]
 801e0a8:	68ba      	ldr	r2, [r7, #8]
 801e0aa:	4313      	orrs	r3, r2
 801e0ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	68ba      	ldr	r2, [r7, #8]
 801e0b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	2201      	movs	r2, #1
 801e0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	2200      	movs	r2, #0
 801e0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e0c6:	2300      	movs	r3, #0
}
 801e0c8:	4618      	mov	r0, r3
 801e0ca:	3714      	adds	r7, #20
 801e0cc:	46bd      	mov	sp, r7
 801e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0d2:	4770      	bx	lr
 801e0d4:	40012c00 	.word	0x40012c00
 801e0d8:	40013400 	.word	0x40013400
 801e0dc:	40015000 	.word	0x40015000
 801e0e0:	40000400 	.word	0x40000400
 801e0e4:	40000800 	.word	0x40000800
 801e0e8:	40014000 	.word	0x40014000

0801e0ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801e0ec:	b480      	push	{r7}
 801e0ee:	b085      	sub	sp, #20
 801e0f0:	af00      	add	r7, sp, #0
 801e0f2:	6078      	str	r0, [r7, #4]
 801e0f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e100:	2b01      	cmp	r3, #1
 801e102:	d101      	bne.n	801e108 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801e104:	2302      	movs	r3, #2
 801e106:	e096      	b.n	801e236 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	2201      	movs	r2, #1
 801e10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801e116:	683b      	ldr	r3, [r7, #0]
 801e118:	68db      	ldr	r3, [r3, #12]
 801e11a:	4313      	orrs	r3, r2
 801e11c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801e124:	683b      	ldr	r3, [r7, #0]
 801e126:	689b      	ldr	r3, [r3, #8]
 801e128:	4313      	orrs	r3, r2
 801e12a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801e12c:	68fb      	ldr	r3, [r7, #12]
 801e12e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801e132:	683b      	ldr	r3, [r7, #0]
 801e134:	685b      	ldr	r3, [r3, #4]
 801e136:	4313      	orrs	r3, r2
 801e138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801e13a:	68fb      	ldr	r3, [r7, #12]
 801e13c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801e140:	683b      	ldr	r3, [r7, #0]
 801e142:	681b      	ldr	r3, [r3, #0]
 801e144:	4313      	orrs	r3, r2
 801e146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801e148:	68fb      	ldr	r3, [r7, #12]
 801e14a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801e14e:	683b      	ldr	r3, [r7, #0]
 801e150:	691b      	ldr	r3, [r3, #16]
 801e152:	4313      	orrs	r3, r2
 801e154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801e156:	68fb      	ldr	r3, [r7, #12]
 801e158:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801e15c:	683b      	ldr	r3, [r7, #0]
 801e15e:	695b      	ldr	r3, [r3, #20]
 801e160:	4313      	orrs	r3, r2
 801e162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801e16a:	683b      	ldr	r3, [r7, #0]
 801e16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e16e:	4313      	orrs	r3, r2
 801e170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801e178:	683b      	ldr	r3, [r7, #0]
 801e17a:	699b      	ldr	r3, [r3, #24]
 801e17c:	041b      	lsls	r3, r3, #16
 801e17e:	4313      	orrs	r3, r2
 801e180:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	4a2f      	ldr	r2, [pc, #188]	; (801e244 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e188:	4293      	cmp	r3, r2
 801e18a:	d009      	beq.n	801e1a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	4a2d      	ldr	r2, [pc, #180]	; (801e248 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e192:	4293      	cmp	r3, r2
 801e194:	d004      	beq.n	801e1a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	4a2c      	ldr	r2, [pc, #176]	; (801e24c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e19c:	4293      	cmp	r3, r2
 801e19e:	d106      	bne.n	801e1ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801e1a6:	683b      	ldr	r3, [r7, #0]
 801e1a8:	69db      	ldr	r3, [r3, #28]
 801e1aa:	4313      	orrs	r3, r2
 801e1ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	4a24      	ldr	r2, [pc, #144]	; (801e244 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e1b4:	4293      	cmp	r3, r2
 801e1b6:	d009      	beq.n	801e1cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	4a22      	ldr	r2, [pc, #136]	; (801e248 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e1be:	4293      	cmp	r3, r2
 801e1c0:	d004      	beq.n	801e1cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	4a21      	ldr	r2, [pc, #132]	; (801e24c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e1c8:	4293      	cmp	r3, r2
 801e1ca:	d12b      	bne.n	801e224 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801e1d2:	683b      	ldr	r3, [r7, #0]
 801e1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1d6:	051b      	lsls	r3, r3, #20
 801e1d8:	4313      	orrs	r3, r2
 801e1da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801e1e2:	683b      	ldr	r3, [r7, #0]
 801e1e4:	6a1b      	ldr	r3, [r3, #32]
 801e1e6:	4313      	orrs	r3, r2
 801e1e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801e1f0:	683b      	ldr	r3, [r7, #0]
 801e1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1f4:	4313      	orrs	r3, r2
 801e1f6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	4a11      	ldr	r2, [pc, #68]	; (801e244 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e1fe:	4293      	cmp	r3, r2
 801e200:	d009      	beq.n	801e216 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	4a10      	ldr	r2, [pc, #64]	; (801e248 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e208:	4293      	cmp	r3, r2
 801e20a:	d004      	beq.n	801e216 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	681b      	ldr	r3, [r3, #0]
 801e210:	4a0e      	ldr	r2, [pc, #56]	; (801e24c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e212:	4293      	cmp	r3, r2
 801e214:	d106      	bne.n	801e224 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801e21c:	683b      	ldr	r3, [r7, #0]
 801e21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e220:	4313      	orrs	r3, r2
 801e222:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	681b      	ldr	r3, [r3, #0]
 801e228:	68fa      	ldr	r2, [r7, #12]
 801e22a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	2200      	movs	r2, #0
 801e230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e234:	2300      	movs	r3, #0
}
 801e236:	4618      	mov	r0, r3
 801e238:	3714      	adds	r7, #20
 801e23a:	46bd      	mov	sp, r7
 801e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e240:	4770      	bx	lr
 801e242:	bf00      	nop
 801e244:	40012c00 	.word	0x40012c00
 801e248:	40013400 	.word	0x40013400
 801e24c:	40015000 	.word	0x40015000

0801e250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801e250:	b480      	push	{r7}
 801e252:	b083      	sub	sp, #12
 801e254:	af00      	add	r7, sp, #0
 801e256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801e258:	bf00      	nop
 801e25a:	370c      	adds	r7, #12
 801e25c:	46bd      	mov	sp, r7
 801e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e262:	4770      	bx	lr

0801e264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801e264:	b480      	push	{r7}
 801e266:	b083      	sub	sp, #12
 801e268:	af00      	add	r7, sp, #0
 801e26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801e26c:	bf00      	nop
 801e26e:	370c      	adds	r7, #12
 801e270:	46bd      	mov	sp, r7
 801e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e276:	4770      	bx	lr

0801e278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e278:	b480      	push	{r7}
 801e27a:	b083      	sub	sp, #12
 801e27c:	af00      	add	r7, sp, #0
 801e27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e280:	bf00      	nop
 801e282:	370c      	adds	r7, #12
 801e284:	46bd      	mov	sp, r7
 801e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e28a:	4770      	bx	lr

0801e28c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801e28c:	b480      	push	{r7}
 801e28e:	b083      	sub	sp, #12
 801e290:	af00      	add	r7, sp, #0
 801e292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801e294:	bf00      	nop
 801e296:	370c      	adds	r7, #12
 801e298:	46bd      	mov	sp, r7
 801e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e29e:	4770      	bx	lr

0801e2a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801e2a0:	b480      	push	{r7}
 801e2a2:	b083      	sub	sp, #12
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801e2a8:	bf00      	nop
 801e2aa:	370c      	adds	r7, #12
 801e2ac:	46bd      	mov	sp, r7
 801e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2b2:	4770      	bx	lr

0801e2b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801e2b4:	b480      	push	{r7}
 801e2b6:	b083      	sub	sp, #12
 801e2b8:	af00      	add	r7, sp, #0
 801e2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801e2bc:	bf00      	nop
 801e2be:	370c      	adds	r7, #12
 801e2c0:	46bd      	mov	sp, r7
 801e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2c6:	4770      	bx	lr

0801e2c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801e2c8:	b480      	push	{r7}
 801e2ca:	b083      	sub	sp, #12
 801e2cc:	af00      	add	r7, sp, #0
 801e2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801e2d0:	bf00      	nop
 801e2d2:	370c      	adds	r7, #12
 801e2d4:	46bd      	mov	sp, r7
 801e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2da:	4770      	bx	lr

0801e2dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e2dc:	b580      	push	{r7, lr}
 801e2de:	b082      	sub	sp, #8
 801e2e0:	af00      	add	r7, sp, #0
 801e2e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d101      	bne.n	801e2ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e2ea:	2301      	movs	r3, #1
 801e2ec:	e042      	b.n	801e374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d106      	bne.n	801e306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e300:	6878      	ldr	r0, [r7, #4]
 801e302:	f7f9 fae3 	bl	80178cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	2224      	movs	r2, #36	; 0x24
 801e30a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	681a      	ldr	r2, [r3, #0]
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	f022 0201 	bic.w	r2, r2, #1
 801e31c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e31e:	6878      	ldr	r0, [r7, #4]
 801e320:	f000 f8c2 	bl	801e4a8 <UART_SetConfig>
 801e324:	4603      	mov	r3, r0
 801e326:	2b01      	cmp	r3, #1
 801e328:	d101      	bne.n	801e32e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801e32a:	2301      	movs	r3, #1
 801e32c:	e022      	b.n	801e374 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e332:	2b00      	cmp	r3, #0
 801e334:	d002      	beq.n	801e33c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801e336:	6878      	ldr	r0, [r7, #4]
 801e338:	f000 fbb2 	bl	801eaa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	685a      	ldr	r2, [r3, #4]
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801e34a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	689a      	ldr	r2, [r3, #8]
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801e35a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	681a      	ldr	r2, [r3, #0]
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	f042 0201 	orr.w	r2, r2, #1
 801e36a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e36c:	6878      	ldr	r0, [r7, #4]
 801e36e:	f000 fc39 	bl	801ebe4 <UART_CheckIdleState>
 801e372:	4603      	mov	r3, r0
}
 801e374:	4618      	mov	r0, r3
 801e376:	3708      	adds	r7, #8
 801e378:	46bd      	mov	sp, r7
 801e37a:	bd80      	pop	{r7, pc}

0801e37c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e37c:	b580      	push	{r7, lr}
 801e37e:	b08a      	sub	sp, #40	; 0x28
 801e380:	af02      	add	r7, sp, #8
 801e382:	60f8      	str	r0, [r7, #12]
 801e384:	60b9      	str	r1, [r7, #8]
 801e386:	603b      	str	r3, [r7, #0]
 801e388:	4613      	mov	r3, r2
 801e38a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e38c:	68fb      	ldr	r3, [r7, #12]
 801e38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e392:	2b20      	cmp	r3, #32
 801e394:	f040 8083 	bne.w	801e49e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801e398:	68bb      	ldr	r3, [r7, #8]
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	d002      	beq.n	801e3a4 <HAL_UART_Transmit+0x28>
 801e39e:	88fb      	ldrh	r3, [r7, #6]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d101      	bne.n	801e3a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801e3a4:	2301      	movs	r3, #1
 801e3a6:	e07b      	b.n	801e4a0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801e3ae:	2b01      	cmp	r3, #1
 801e3b0:	d101      	bne.n	801e3b6 <HAL_UART_Transmit+0x3a>
 801e3b2:	2302      	movs	r3, #2
 801e3b4:	e074      	b.n	801e4a0 <HAL_UART_Transmit+0x124>
 801e3b6:	68fb      	ldr	r3, [r7, #12]
 801e3b8:	2201      	movs	r2, #1
 801e3ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	2200      	movs	r2, #0
 801e3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	2221      	movs	r2, #33	; 0x21
 801e3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e3ce:	f7f9 fb6b 	bl	8017aa8 <HAL_GetTick>
 801e3d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e3d4:	68fb      	ldr	r3, [r7, #12]
 801e3d6:	88fa      	ldrh	r2, [r7, #6]
 801e3d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	88fa      	ldrh	r2, [r7, #6]
 801e3e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e3e4:	68fb      	ldr	r3, [r7, #12]
 801e3e6:	689b      	ldr	r3, [r3, #8]
 801e3e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e3ec:	d108      	bne.n	801e400 <HAL_UART_Transmit+0x84>
 801e3ee:	68fb      	ldr	r3, [r7, #12]
 801e3f0:	691b      	ldr	r3, [r3, #16]
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d104      	bne.n	801e400 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801e3f6:	2300      	movs	r3, #0
 801e3f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e3fa:	68bb      	ldr	r3, [r7, #8]
 801e3fc:	61bb      	str	r3, [r7, #24]
 801e3fe:	e003      	b.n	801e408 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801e400:	68bb      	ldr	r3, [r7, #8]
 801e402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e404:	2300      	movs	r3, #0
 801e406:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	2200      	movs	r2, #0
 801e40c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801e410:	e02c      	b.n	801e46c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e412:	683b      	ldr	r3, [r7, #0]
 801e414:	9300      	str	r3, [sp, #0]
 801e416:	697b      	ldr	r3, [r7, #20]
 801e418:	2200      	movs	r2, #0
 801e41a:	2180      	movs	r1, #128	; 0x80
 801e41c:	68f8      	ldr	r0, [r7, #12]
 801e41e:	f000 fc2c 	bl	801ec7a <UART_WaitOnFlagUntilTimeout>
 801e422:	4603      	mov	r3, r0
 801e424:	2b00      	cmp	r3, #0
 801e426:	d001      	beq.n	801e42c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801e428:	2303      	movs	r3, #3
 801e42a:	e039      	b.n	801e4a0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801e42c:	69fb      	ldr	r3, [r7, #28]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d10b      	bne.n	801e44a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e432:	69bb      	ldr	r3, [r7, #24]
 801e434:	881b      	ldrh	r3, [r3, #0]
 801e436:	461a      	mov	r2, r3
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e440:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801e442:	69bb      	ldr	r3, [r7, #24]
 801e444:	3302      	adds	r3, #2
 801e446:	61bb      	str	r3, [r7, #24]
 801e448:	e007      	b.n	801e45a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e44a:	69fb      	ldr	r3, [r7, #28]
 801e44c:	781a      	ldrb	r2, [r3, #0]
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801e454:	69fb      	ldr	r3, [r7, #28]
 801e456:	3301      	adds	r3, #1
 801e458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e460:	b29b      	uxth	r3, r3
 801e462:	3b01      	subs	r3, #1
 801e464:	b29a      	uxth	r2, r3
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801e46c:	68fb      	ldr	r3, [r7, #12]
 801e46e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e472:	b29b      	uxth	r3, r3
 801e474:	2b00      	cmp	r3, #0
 801e476:	d1cc      	bne.n	801e412 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e478:	683b      	ldr	r3, [r7, #0]
 801e47a:	9300      	str	r3, [sp, #0]
 801e47c:	697b      	ldr	r3, [r7, #20]
 801e47e:	2200      	movs	r2, #0
 801e480:	2140      	movs	r1, #64	; 0x40
 801e482:	68f8      	ldr	r0, [r7, #12]
 801e484:	f000 fbf9 	bl	801ec7a <UART_WaitOnFlagUntilTimeout>
 801e488:	4603      	mov	r3, r0
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d001      	beq.n	801e492 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801e48e:	2303      	movs	r3, #3
 801e490:	e006      	b.n	801e4a0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	2220      	movs	r2, #32
 801e496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801e49a:	2300      	movs	r3, #0
 801e49c:	e000      	b.n	801e4a0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801e49e:	2302      	movs	r3, #2
  }
}
 801e4a0:	4618      	mov	r0, r3
 801e4a2:	3720      	adds	r7, #32
 801e4a4:	46bd      	mov	sp, r7
 801e4a6:	bd80      	pop	{r7, pc}

0801e4a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e4a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e4ac:	b08c      	sub	sp, #48	; 0x30
 801e4ae:	af00      	add	r7, sp, #0
 801e4b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e4b2:	2300      	movs	r3, #0
 801e4b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e4b8:	697b      	ldr	r3, [r7, #20]
 801e4ba:	689a      	ldr	r2, [r3, #8]
 801e4bc:	697b      	ldr	r3, [r7, #20]
 801e4be:	691b      	ldr	r3, [r3, #16]
 801e4c0:	431a      	orrs	r2, r3
 801e4c2:	697b      	ldr	r3, [r7, #20]
 801e4c4:	695b      	ldr	r3, [r3, #20]
 801e4c6:	431a      	orrs	r2, r3
 801e4c8:	697b      	ldr	r3, [r7, #20]
 801e4ca:	69db      	ldr	r3, [r3, #28]
 801e4cc:	4313      	orrs	r3, r2
 801e4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e4d0:	697b      	ldr	r3, [r7, #20]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	681a      	ldr	r2, [r3, #0]
 801e4d6:	4baa      	ldr	r3, [pc, #680]	; (801e780 <UART_SetConfig+0x2d8>)
 801e4d8:	4013      	ands	r3, r2
 801e4da:	697a      	ldr	r2, [r7, #20]
 801e4dc:	6812      	ldr	r2, [r2, #0]
 801e4de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e4e0:	430b      	orrs	r3, r1
 801e4e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e4e4:	697b      	ldr	r3, [r7, #20]
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	685b      	ldr	r3, [r3, #4]
 801e4ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801e4ee:	697b      	ldr	r3, [r7, #20]
 801e4f0:	68da      	ldr	r2, [r3, #12]
 801e4f2:	697b      	ldr	r3, [r7, #20]
 801e4f4:	681b      	ldr	r3, [r3, #0]
 801e4f6:	430a      	orrs	r2, r1
 801e4f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e4fa:	697b      	ldr	r3, [r7, #20]
 801e4fc:	699b      	ldr	r3, [r3, #24]
 801e4fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e500:	697b      	ldr	r3, [r7, #20]
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	4a9f      	ldr	r2, [pc, #636]	; (801e784 <UART_SetConfig+0x2dc>)
 801e506:	4293      	cmp	r3, r2
 801e508:	d004      	beq.n	801e514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e50a:	697b      	ldr	r3, [r7, #20]
 801e50c:	6a1b      	ldr	r3, [r3, #32]
 801e50e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e510:	4313      	orrs	r3, r2
 801e512:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e514:	697b      	ldr	r3, [r7, #20]
 801e516:	681b      	ldr	r3, [r3, #0]
 801e518:	689b      	ldr	r3, [r3, #8]
 801e51a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801e51e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801e522:	697a      	ldr	r2, [r7, #20]
 801e524:	6812      	ldr	r2, [r2, #0]
 801e526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e528:	430b      	orrs	r3, r1
 801e52a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801e52c:	697b      	ldr	r3, [r7, #20]
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e532:	f023 010f 	bic.w	r1, r3, #15
 801e536:	697b      	ldr	r3, [r7, #20]
 801e538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e53a:	697b      	ldr	r3, [r7, #20]
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	430a      	orrs	r2, r1
 801e540:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e542:	697b      	ldr	r3, [r7, #20]
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	4a90      	ldr	r2, [pc, #576]	; (801e788 <UART_SetConfig+0x2e0>)
 801e548:	4293      	cmp	r3, r2
 801e54a:	d125      	bne.n	801e598 <UART_SetConfig+0xf0>
 801e54c:	4b8f      	ldr	r3, [pc, #572]	; (801e78c <UART_SetConfig+0x2e4>)
 801e54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e552:	f003 0303 	and.w	r3, r3, #3
 801e556:	2b03      	cmp	r3, #3
 801e558:	d81a      	bhi.n	801e590 <UART_SetConfig+0xe8>
 801e55a:	a201      	add	r2, pc, #4	; (adr r2, 801e560 <UART_SetConfig+0xb8>)
 801e55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e560:	0801e571 	.word	0x0801e571
 801e564:	0801e581 	.word	0x0801e581
 801e568:	0801e579 	.word	0x0801e579
 801e56c:	0801e589 	.word	0x0801e589
 801e570:	2301      	movs	r3, #1
 801e572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e576:	e116      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e578:	2302      	movs	r3, #2
 801e57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e57e:	e112      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e580:	2304      	movs	r3, #4
 801e582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e586:	e10e      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e588:	2308      	movs	r3, #8
 801e58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e58e:	e10a      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e590:	2310      	movs	r3, #16
 801e592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e596:	e106      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e598:	697b      	ldr	r3, [r7, #20]
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	4a7c      	ldr	r2, [pc, #496]	; (801e790 <UART_SetConfig+0x2e8>)
 801e59e:	4293      	cmp	r3, r2
 801e5a0:	d138      	bne.n	801e614 <UART_SetConfig+0x16c>
 801e5a2:	4b7a      	ldr	r3, [pc, #488]	; (801e78c <UART_SetConfig+0x2e4>)
 801e5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e5a8:	f003 030c 	and.w	r3, r3, #12
 801e5ac:	2b0c      	cmp	r3, #12
 801e5ae:	d82d      	bhi.n	801e60c <UART_SetConfig+0x164>
 801e5b0:	a201      	add	r2, pc, #4	; (adr r2, 801e5b8 <UART_SetConfig+0x110>)
 801e5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e5b6:	bf00      	nop
 801e5b8:	0801e5ed 	.word	0x0801e5ed
 801e5bc:	0801e60d 	.word	0x0801e60d
 801e5c0:	0801e60d 	.word	0x0801e60d
 801e5c4:	0801e60d 	.word	0x0801e60d
 801e5c8:	0801e5fd 	.word	0x0801e5fd
 801e5cc:	0801e60d 	.word	0x0801e60d
 801e5d0:	0801e60d 	.word	0x0801e60d
 801e5d4:	0801e60d 	.word	0x0801e60d
 801e5d8:	0801e5f5 	.word	0x0801e5f5
 801e5dc:	0801e60d 	.word	0x0801e60d
 801e5e0:	0801e60d 	.word	0x0801e60d
 801e5e4:	0801e60d 	.word	0x0801e60d
 801e5e8:	0801e605 	.word	0x0801e605
 801e5ec:	2300      	movs	r3, #0
 801e5ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5f2:	e0d8      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e5f4:	2302      	movs	r3, #2
 801e5f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5fa:	e0d4      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e5fc:	2304      	movs	r3, #4
 801e5fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e602:	e0d0      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e604:	2308      	movs	r3, #8
 801e606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e60a:	e0cc      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e60c:	2310      	movs	r3, #16
 801e60e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e612:	e0c8      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e614:	697b      	ldr	r3, [r7, #20]
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	4a5e      	ldr	r2, [pc, #376]	; (801e794 <UART_SetConfig+0x2ec>)
 801e61a:	4293      	cmp	r3, r2
 801e61c:	d125      	bne.n	801e66a <UART_SetConfig+0x1c2>
 801e61e:	4b5b      	ldr	r3, [pc, #364]	; (801e78c <UART_SetConfig+0x2e4>)
 801e620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e624:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801e628:	2b30      	cmp	r3, #48	; 0x30
 801e62a:	d016      	beq.n	801e65a <UART_SetConfig+0x1b2>
 801e62c:	2b30      	cmp	r3, #48	; 0x30
 801e62e:	d818      	bhi.n	801e662 <UART_SetConfig+0x1ba>
 801e630:	2b20      	cmp	r3, #32
 801e632:	d00a      	beq.n	801e64a <UART_SetConfig+0x1a2>
 801e634:	2b20      	cmp	r3, #32
 801e636:	d814      	bhi.n	801e662 <UART_SetConfig+0x1ba>
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d002      	beq.n	801e642 <UART_SetConfig+0x19a>
 801e63c:	2b10      	cmp	r3, #16
 801e63e:	d008      	beq.n	801e652 <UART_SetConfig+0x1aa>
 801e640:	e00f      	b.n	801e662 <UART_SetConfig+0x1ba>
 801e642:	2300      	movs	r3, #0
 801e644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e648:	e0ad      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e64a:	2302      	movs	r3, #2
 801e64c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e650:	e0a9      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e652:	2304      	movs	r3, #4
 801e654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e658:	e0a5      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e65a:	2308      	movs	r3, #8
 801e65c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e660:	e0a1      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e662:	2310      	movs	r3, #16
 801e664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e668:	e09d      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e66a:	697b      	ldr	r3, [r7, #20]
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	4a4a      	ldr	r2, [pc, #296]	; (801e798 <UART_SetConfig+0x2f0>)
 801e670:	4293      	cmp	r3, r2
 801e672:	d125      	bne.n	801e6c0 <UART_SetConfig+0x218>
 801e674:	4b45      	ldr	r3, [pc, #276]	; (801e78c <UART_SetConfig+0x2e4>)
 801e676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e67a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e67e:	2bc0      	cmp	r3, #192	; 0xc0
 801e680:	d016      	beq.n	801e6b0 <UART_SetConfig+0x208>
 801e682:	2bc0      	cmp	r3, #192	; 0xc0
 801e684:	d818      	bhi.n	801e6b8 <UART_SetConfig+0x210>
 801e686:	2b80      	cmp	r3, #128	; 0x80
 801e688:	d00a      	beq.n	801e6a0 <UART_SetConfig+0x1f8>
 801e68a:	2b80      	cmp	r3, #128	; 0x80
 801e68c:	d814      	bhi.n	801e6b8 <UART_SetConfig+0x210>
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d002      	beq.n	801e698 <UART_SetConfig+0x1f0>
 801e692:	2b40      	cmp	r3, #64	; 0x40
 801e694:	d008      	beq.n	801e6a8 <UART_SetConfig+0x200>
 801e696:	e00f      	b.n	801e6b8 <UART_SetConfig+0x210>
 801e698:	2300      	movs	r3, #0
 801e69a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e69e:	e082      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e6a0:	2302      	movs	r3, #2
 801e6a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6a6:	e07e      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e6a8:	2304      	movs	r3, #4
 801e6aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6ae:	e07a      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e6b0:	2308      	movs	r3, #8
 801e6b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6b6:	e076      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e6b8:	2310      	movs	r3, #16
 801e6ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6be:	e072      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e6c0:	697b      	ldr	r3, [r7, #20]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	4a35      	ldr	r2, [pc, #212]	; (801e79c <UART_SetConfig+0x2f4>)
 801e6c6:	4293      	cmp	r3, r2
 801e6c8:	d12a      	bne.n	801e720 <UART_SetConfig+0x278>
 801e6ca:	4b30      	ldr	r3, [pc, #192]	; (801e78c <UART_SetConfig+0x2e4>)
 801e6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e6d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e6d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e6d8:	d01a      	beq.n	801e710 <UART_SetConfig+0x268>
 801e6da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e6de:	d81b      	bhi.n	801e718 <UART_SetConfig+0x270>
 801e6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e6e4:	d00c      	beq.n	801e700 <UART_SetConfig+0x258>
 801e6e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e6ea:	d815      	bhi.n	801e718 <UART_SetConfig+0x270>
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	d003      	beq.n	801e6f8 <UART_SetConfig+0x250>
 801e6f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e6f4:	d008      	beq.n	801e708 <UART_SetConfig+0x260>
 801e6f6:	e00f      	b.n	801e718 <UART_SetConfig+0x270>
 801e6f8:	2300      	movs	r3, #0
 801e6fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6fe:	e052      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e700:	2302      	movs	r3, #2
 801e702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e706:	e04e      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e708:	2304      	movs	r3, #4
 801e70a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e70e:	e04a      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e710:	2308      	movs	r3, #8
 801e712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e716:	e046      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e718:	2310      	movs	r3, #16
 801e71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e71e:	e042      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e720:	697b      	ldr	r3, [r7, #20]
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	4a17      	ldr	r2, [pc, #92]	; (801e784 <UART_SetConfig+0x2dc>)
 801e726:	4293      	cmp	r3, r2
 801e728:	d13a      	bne.n	801e7a0 <UART_SetConfig+0x2f8>
 801e72a:	4b18      	ldr	r3, [pc, #96]	; (801e78c <UART_SetConfig+0x2e4>)
 801e72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e730:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801e734:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e738:	d01a      	beq.n	801e770 <UART_SetConfig+0x2c8>
 801e73a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e73e:	d81b      	bhi.n	801e778 <UART_SetConfig+0x2d0>
 801e740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e744:	d00c      	beq.n	801e760 <UART_SetConfig+0x2b8>
 801e746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e74a:	d815      	bhi.n	801e778 <UART_SetConfig+0x2d0>
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d003      	beq.n	801e758 <UART_SetConfig+0x2b0>
 801e750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e754:	d008      	beq.n	801e768 <UART_SetConfig+0x2c0>
 801e756:	e00f      	b.n	801e778 <UART_SetConfig+0x2d0>
 801e758:	2300      	movs	r3, #0
 801e75a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e75e:	e022      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e760:	2302      	movs	r3, #2
 801e762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e766:	e01e      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e768:	2304      	movs	r3, #4
 801e76a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e76e:	e01a      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e770:	2308      	movs	r3, #8
 801e772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e776:	e016      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e778:	2310      	movs	r3, #16
 801e77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e77e:	e012      	b.n	801e7a6 <UART_SetConfig+0x2fe>
 801e780:	cfff69f3 	.word	0xcfff69f3
 801e784:	40008000 	.word	0x40008000
 801e788:	40013800 	.word	0x40013800
 801e78c:	40021000 	.word	0x40021000
 801e790:	40004400 	.word	0x40004400
 801e794:	40004800 	.word	0x40004800
 801e798:	40004c00 	.word	0x40004c00
 801e79c:	40005000 	.word	0x40005000
 801e7a0:	2310      	movs	r3, #16
 801e7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e7a6:	697b      	ldr	r3, [r7, #20]
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	4aae      	ldr	r2, [pc, #696]	; (801ea64 <UART_SetConfig+0x5bc>)
 801e7ac:	4293      	cmp	r3, r2
 801e7ae:	f040 8097 	bne.w	801e8e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e7b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e7b6:	2b08      	cmp	r3, #8
 801e7b8:	d823      	bhi.n	801e802 <UART_SetConfig+0x35a>
 801e7ba:	a201      	add	r2, pc, #4	; (adr r2, 801e7c0 <UART_SetConfig+0x318>)
 801e7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e7c0:	0801e7e5 	.word	0x0801e7e5
 801e7c4:	0801e803 	.word	0x0801e803
 801e7c8:	0801e7ed 	.word	0x0801e7ed
 801e7cc:	0801e803 	.word	0x0801e803
 801e7d0:	0801e7f3 	.word	0x0801e7f3
 801e7d4:	0801e803 	.word	0x0801e803
 801e7d8:	0801e803 	.word	0x0801e803
 801e7dc:	0801e803 	.word	0x0801e803
 801e7e0:	0801e7fb 	.word	0x0801e7fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e7e4:	f7fd f8b4 	bl	801b950 <HAL_RCC_GetPCLK1Freq>
 801e7e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e7ea:	e010      	b.n	801e80e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e7ec:	4b9e      	ldr	r3, [pc, #632]	; (801ea68 <UART_SetConfig+0x5c0>)
 801e7ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e7f0:	e00d      	b.n	801e80e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e7f2:	f7fd f841 	bl	801b878 <HAL_RCC_GetSysClockFreq>
 801e7f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e7f8:	e009      	b.n	801e80e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e7fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e7fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e800:	e005      	b.n	801e80e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801e802:	2300      	movs	r3, #0
 801e804:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e806:	2301      	movs	r3, #1
 801e808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e80c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e810:	2b00      	cmp	r3, #0
 801e812:	f000 8130 	beq.w	801ea76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801e816:	697b      	ldr	r3, [r7, #20]
 801e818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e81a:	4a94      	ldr	r2, [pc, #592]	; (801ea6c <UART_SetConfig+0x5c4>)
 801e81c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e820:	461a      	mov	r2, r3
 801e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e824:	fbb3 f3f2 	udiv	r3, r3, r2
 801e828:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e82a:	697b      	ldr	r3, [r7, #20]
 801e82c:	685a      	ldr	r2, [r3, #4]
 801e82e:	4613      	mov	r3, r2
 801e830:	005b      	lsls	r3, r3, #1
 801e832:	4413      	add	r3, r2
 801e834:	69ba      	ldr	r2, [r7, #24]
 801e836:	429a      	cmp	r2, r3
 801e838:	d305      	bcc.n	801e846 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801e83a:	697b      	ldr	r3, [r7, #20]
 801e83c:	685b      	ldr	r3, [r3, #4]
 801e83e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e840:	69ba      	ldr	r2, [r7, #24]
 801e842:	429a      	cmp	r2, r3
 801e844:	d903      	bls.n	801e84e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801e846:	2301      	movs	r3, #1
 801e848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e84c:	e113      	b.n	801ea76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e850:	2200      	movs	r2, #0
 801e852:	60bb      	str	r3, [r7, #8]
 801e854:	60fa      	str	r2, [r7, #12]
 801e856:	697b      	ldr	r3, [r7, #20]
 801e858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e85a:	4a84      	ldr	r2, [pc, #528]	; (801ea6c <UART_SetConfig+0x5c4>)
 801e85c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e860:	b29b      	uxth	r3, r3
 801e862:	2200      	movs	r2, #0
 801e864:	603b      	str	r3, [r7, #0]
 801e866:	607a      	str	r2, [r7, #4]
 801e868:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e86c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801e870:	f7e2 fa12 	bl	8000c98 <__aeabi_uldivmod>
 801e874:	4602      	mov	r2, r0
 801e876:	460b      	mov	r3, r1
 801e878:	4610      	mov	r0, r2
 801e87a:	4619      	mov	r1, r3
 801e87c:	f04f 0200 	mov.w	r2, #0
 801e880:	f04f 0300 	mov.w	r3, #0
 801e884:	020b      	lsls	r3, r1, #8
 801e886:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801e88a:	0202      	lsls	r2, r0, #8
 801e88c:	6979      	ldr	r1, [r7, #20]
 801e88e:	6849      	ldr	r1, [r1, #4]
 801e890:	0849      	lsrs	r1, r1, #1
 801e892:	2000      	movs	r0, #0
 801e894:	460c      	mov	r4, r1
 801e896:	4605      	mov	r5, r0
 801e898:	eb12 0804 	adds.w	r8, r2, r4
 801e89c:	eb43 0905 	adc.w	r9, r3, r5
 801e8a0:	697b      	ldr	r3, [r7, #20]
 801e8a2:	685b      	ldr	r3, [r3, #4]
 801e8a4:	2200      	movs	r2, #0
 801e8a6:	469a      	mov	sl, r3
 801e8a8:	4693      	mov	fp, r2
 801e8aa:	4652      	mov	r2, sl
 801e8ac:	465b      	mov	r3, fp
 801e8ae:	4640      	mov	r0, r8
 801e8b0:	4649      	mov	r1, r9
 801e8b2:	f7e2 f9f1 	bl	8000c98 <__aeabi_uldivmod>
 801e8b6:	4602      	mov	r2, r0
 801e8b8:	460b      	mov	r3, r1
 801e8ba:	4613      	mov	r3, r2
 801e8bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e8be:	6a3b      	ldr	r3, [r7, #32]
 801e8c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e8c4:	d308      	bcc.n	801e8d8 <UART_SetConfig+0x430>
 801e8c6:	6a3b      	ldr	r3, [r7, #32]
 801e8c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e8cc:	d204      	bcs.n	801e8d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801e8ce:	697b      	ldr	r3, [r7, #20]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	6a3a      	ldr	r2, [r7, #32]
 801e8d4:	60da      	str	r2, [r3, #12]
 801e8d6:	e0ce      	b.n	801ea76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801e8d8:	2301      	movs	r3, #1
 801e8da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e8de:	e0ca      	b.n	801ea76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e8e0:	697b      	ldr	r3, [r7, #20]
 801e8e2:	69db      	ldr	r3, [r3, #28]
 801e8e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e8e8:	d166      	bne.n	801e9b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801e8ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e8ee:	2b08      	cmp	r3, #8
 801e8f0:	d827      	bhi.n	801e942 <UART_SetConfig+0x49a>
 801e8f2:	a201      	add	r2, pc, #4	; (adr r2, 801e8f8 <UART_SetConfig+0x450>)
 801e8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8f8:	0801e91d 	.word	0x0801e91d
 801e8fc:	0801e925 	.word	0x0801e925
 801e900:	0801e92d 	.word	0x0801e92d
 801e904:	0801e943 	.word	0x0801e943
 801e908:	0801e933 	.word	0x0801e933
 801e90c:	0801e943 	.word	0x0801e943
 801e910:	0801e943 	.word	0x0801e943
 801e914:	0801e943 	.word	0x0801e943
 801e918:	0801e93b 	.word	0x0801e93b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e91c:	f7fd f818 	bl	801b950 <HAL_RCC_GetPCLK1Freq>
 801e920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e922:	e014      	b.n	801e94e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e924:	f7fd f82a 	bl	801b97c <HAL_RCC_GetPCLK2Freq>
 801e928:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e92a:	e010      	b.n	801e94e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e92c:	4b4e      	ldr	r3, [pc, #312]	; (801ea68 <UART_SetConfig+0x5c0>)
 801e92e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e930:	e00d      	b.n	801e94e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e932:	f7fc ffa1 	bl	801b878 <HAL_RCC_GetSysClockFreq>
 801e936:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e938:	e009      	b.n	801e94e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e93a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e93e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e940:	e005      	b.n	801e94e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801e942:	2300      	movs	r3, #0
 801e944:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e946:	2301      	movs	r3, #1
 801e948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e94c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e950:	2b00      	cmp	r3, #0
 801e952:	f000 8090 	beq.w	801ea76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e956:	697b      	ldr	r3, [r7, #20]
 801e958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e95a:	4a44      	ldr	r2, [pc, #272]	; (801ea6c <UART_SetConfig+0x5c4>)
 801e95c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e960:	461a      	mov	r2, r3
 801e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e964:	fbb3 f3f2 	udiv	r3, r3, r2
 801e968:	005a      	lsls	r2, r3, #1
 801e96a:	697b      	ldr	r3, [r7, #20]
 801e96c:	685b      	ldr	r3, [r3, #4]
 801e96e:	085b      	lsrs	r3, r3, #1
 801e970:	441a      	add	r2, r3
 801e972:	697b      	ldr	r3, [r7, #20]
 801e974:	685b      	ldr	r3, [r3, #4]
 801e976:	fbb2 f3f3 	udiv	r3, r2, r3
 801e97a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e97c:	6a3b      	ldr	r3, [r7, #32]
 801e97e:	2b0f      	cmp	r3, #15
 801e980:	d916      	bls.n	801e9b0 <UART_SetConfig+0x508>
 801e982:	6a3b      	ldr	r3, [r7, #32]
 801e984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e988:	d212      	bcs.n	801e9b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e98a:	6a3b      	ldr	r3, [r7, #32]
 801e98c:	b29b      	uxth	r3, r3
 801e98e:	f023 030f 	bic.w	r3, r3, #15
 801e992:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e994:	6a3b      	ldr	r3, [r7, #32]
 801e996:	085b      	lsrs	r3, r3, #1
 801e998:	b29b      	uxth	r3, r3
 801e99a:	f003 0307 	and.w	r3, r3, #7
 801e99e:	b29a      	uxth	r2, r3
 801e9a0:	8bfb      	ldrh	r3, [r7, #30]
 801e9a2:	4313      	orrs	r3, r2
 801e9a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801e9a6:	697b      	ldr	r3, [r7, #20]
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	8bfa      	ldrh	r2, [r7, #30]
 801e9ac:	60da      	str	r2, [r3, #12]
 801e9ae:	e062      	b.n	801ea76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801e9b0:	2301      	movs	r3, #1
 801e9b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e9b6:	e05e      	b.n	801ea76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e9b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e9bc:	2b08      	cmp	r3, #8
 801e9be:	d828      	bhi.n	801ea12 <UART_SetConfig+0x56a>
 801e9c0:	a201      	add	r2, pc, #4	; (adr r2, 801e9c8 <UART_SetConfig+0x520>)
 801e9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e9c6:	bf00      	nop
 801e9c8:	0801e9ed 	.word	0x0801e9ed
 801e9cc:	0801e9f5 	.word	0x0801e9f5
 801e9d0:	0801e9fd 	.word	0x0801e9fd
 801e9d4:	0801ea13 	.word	0x0801ea13
 801e9d8:	0801ea03 	.word	0x0801ea03
 801e9dc:	0801ea13 	.word	0x0801ea13
 801e9e0:	0801ea13 	.word	0x0801ea13
 801e9e4:	0801ea13 	.word	0x0801ea13
 801e9e8:	0801ea0b 	.word	0x0801ea0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e9ec:	f7fc ffb0 	bl	801b950 <HAL_RCC_GetPCLK1Freq>
 801e9f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e9f2:	e014      	b.n	801ea1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e9f4:	f7fc ffc2 	bl	801b97c <HAL_RCC_GetPCLK2Freq>
 801e9f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e9fa:	e010      	b.n	801ea1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e9fc:	4b1a      	ldr	r3, [pc, #104]	; (801ea68 <UART_SetConfig+0x5c0>)
 801e9fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ea00:	e00d      	b.n	801ea1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ea02:	f7fc ff39 	bl	801b878 <HAL_RCC_GetSysClockFreq>
 801ea06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ea08:	e009      	b.n	801ea1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ea0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ea0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ea10:	e005      	b.n	801ea1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801ea12:	2300      	movs	r3, #0
 801ea14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801ea16:	2301      	movs	r3, #1
 801ea18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801ea1c:	bf00      	nop
    }

    if (pclk != 0U)
 801ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	d028      	beq.n	801ea76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ea24:	697b      	ldr	r3, [r7, #20]
 801ea26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea28:	4a10      	ldr	r2, [pc, #64]	; (801ea6c <UART_SetConfig+0x5c4>)
 801ea2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ea2e:	461a      	mov	r2, r3
 801ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea32:	fbb3 f2f2 	udiv	r2, r3, r2
 801ea36:	697b      	ldr	r3, [r7, #20]
 801ea38:	685b      	ldr	r3, [r3, #4]
 801ea3a:	085b      	lsrs	r3, r3, #1
 801ea3c:	441a      	add	r2, r3
 801ea3e:	697b      	ldr	r3, [r7, #20]
 801ea40:	685b      	ldr	r3, [r3, #4]
 801ea42:	fbb2 f3f3 	udiv	r3, r2, r3
 801ea46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ea48:	6a3b      	ldr	r3, [r7, #32]
 801ea4a:	2b0f      	cmp	r3, #15
 801ea4c:	d910      	bls.n	801ea70 <UART_SetConfig+0x5c8>
 801ea4e:	6a3b      	ldr	r3, [r7, #32]
 801ea50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ea54:	d20c      	bcs.n	801ea70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ea56:	6a3b      	ldr	r3, [r7, #32]
 801ea58:	b29a      	uxth	r2, r3
 801ea5a:	697b      	ldr	r3, [r7, #20]
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	60da      	str	r2, [r3, #12]
 801ea60:	e009      	b.n	801ea76 <UART_SetConfig+0x5ce>
 801ea62:	bf00      	nop
 801ea64:	40008000 	.word	0x40008000
 801ea68:	00f42400 	.word	0x00f42400
 801ea6c:	080223c8 	.word	0x080223c8
      }
      else
      {
        ret = HAL_ERROR;
 801ea70:	2301      	movs	r3, #1
 801ea72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801ea76:	697b      	ldr	r3, [r7, #20]
 801ea78:	2201      	movs	r2, #1
 801ea7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801ea7e:	697b      	ldr	r3, [r7, #20]
 801ea80:	2201      	movs	r2, #1
 801ea82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ea86:	697b      	ldr	r3, [r7, #20]
 801ea88:	2200      	movs	r2, #0
 801ea8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801ea8c:	697b      	ldr	r3, [r7, #20]
 801ea8e:	2200      	movs	r2, #0
 801ea90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801ea92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801ea96:	4618      	mov	r0, r3
 801ea98:	3730      	adds	r7, #48	; 0x30
 801ea9a:	46bd      	mov	sp, r7
 801ea9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801eaa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801eaa0:	b480      	push	{r7}
 801eaa2:	b083      	sub	sp, #12
 801eaa4:	af00      	add	r7, sp, #0
 801eaa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eaac:	f003 0301 	and.w	r3, r3, #1
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	d00a      	beq.n	801eaca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	685b      	ldr	r3, [r3, #4]
 801eaba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	430a      	orrs	r2, r1
 801eac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eace:	f003 0302 	and.w	r3, r3, #2
 801ead2:	2b00      	cmp	r3, #0
 801ead4:	d00a      	beq.n	801eaec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ead6:	687b      	ldr	r3, [r7, #4]
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	685b      	ldr	r3, [r3, #4]
 801eadc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801eae4:	687b      	ldr	r3, [r7, #4]
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	430a      	orrs	r2, r1
 801eaea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eaf0:	f003 0304 	and.w	r3, r3, #4
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d00a      	beq.n	801eb0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	685b      	ldr	r3, [r3, #4]
 801eafe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	430a      	orrs	r2, r1
 801eb0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb12:	f003 0308 	and.w	r3, r3, #8
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d00a      	beq.n	801eb30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	685b      	ldr	r3, [r3, #4]
 801eb20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	681b      	ldr	r3, [r3, #0]
 801eb2c:	430a      	orrs	r2, r1
 801eb2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb34:	f003 0310 	and.w	r3, r3, #16
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d00a      	beq.n	801eb52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	681b      	ldr	r3, [r3, #0]
 801eb40:	689b      	ldr	r3, [r3, #8]
 801eb42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	430a      	orrs	r2, r1
 801eb50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb56:	f003 0320 	and.w	r3, r3, #32
 801eb5a:	2b00      	cmp	r3, #0
 801eb5c:	d00a      	beq.n	801eb74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	681b      	ldr	r3, [r3, #0]
 801eb62:	689b      	ldr	r3, [r3, #8]
 801eb64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	430a      	orrs	r2, r1
 801eb72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d01a      	beq.n	801ebb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	685b      	ldr	r3, [r3, #4]
 801eb86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	430a      	orrs	r2, r1
 801eb94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eb9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801eb9e:	d10a      	bne.n	801ebb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	685b      	ldr	r3, [r3, #4]
 801eba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	681b      	ldr	r3, [r3, #0]
 801ebb2:	430a      	orrs	r2, r1
 801ebb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ebba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d00a      	beq.n	801ebd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	681b      	ldr	r3, [r3, #0]
 801ebc6:	685b      	ldr	r3, [r3, #4]
 801ebc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	681b      	ldr	r3, [r3, #0]
 801ebd4:	430a      	orrs	r2, r1
 801ebd6:	605a      	str	r2, [r3, #4]
  }
}
 801ebd8:	bf00      	nop
 801ebda:	370c      	adds	r7, #12
 801ebdc:	46bd      	mov	sp, r7
 801ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebe2:	4770      	bx	lr

0801ebe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ebe4:	b580      	push	{r7, lr}
 801ebe6:	b086      	sub	sp, #24
 801ebe8:	af02      	add	r7, sp, #8
 801ebea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	2200      	movs	r2, #0
 801ebf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801ebf4:	f7f8 ff58 	bl	8017aa8 <HAL_GetTick>
 801ebf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	f003 0308 	and.w	r3, r3, #8
 801ec04:	2b08      	cmp	r3, #8
 801ec06:	d10e      	bne.n	801ec26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ec08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801ec0c:	9300      	str	r3, [sp, #0]
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	2200      	movs	r2, #0
 801ec12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ec16:	6878      	ldr	r0, [r7, #4]
 801ec18:	f000 f82f 	bl	801ec7a <UART_WaitOnFlagUntilTimeout>
 801ec1c:	4603      	mov	r3, r0
 801ec1e:	2b00      	cmp	r3, #0
 801ec20:	d001      	beq.n	801ec26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ec22:	2303      	movs	r3, #3
 801ec24:	e025      	b.n	801ec72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	681b      	ldr	r3, [r3, #0]
 801ec2a:	681b      	ldr	r3, [r3, #0]
 801ec2c:	f003 0304 	and.w	r3, r3, #4
 801ec30:	2b04      	cmp	r3, #4
 801ec32:	d10e      	bne.n	801ec52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ec34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801ec38:	9300      	str	r3, [sp, #0]
 801ec3a:	68fb      	ldr	r3, [r7, #12]
 801ec3c:	2200      	movs	r2, #0
 801ec3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801ec42:	6878      	ldr	r0, [r7, #4]
 801ec44:	f000 f819 	bl	801ec7a <UART_WaitOnFlagUntilTimeout>
 801ec48:	4603      	mov	r3, r0
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d001      	beq.n	801ec52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ec4e:	2303      	movs	r3, #3
 801ec50:	e00f      	b.n	801ec72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ec52:	687b      	ldr	r3, [r7, #4]
 801ec54:	2220      	movs	r2, #32
 801ec56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	2220      	movs	r2, #32
 801ec5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ec62:	687b      	ldr	r3, [r7, #4]
 801ec64:	2200      	movs	r2, #0
 801ec66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	2200      	movs	r2, #0
 801ec6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ec70:	2300      	movs	r3, #0
}
 801ec72:	4618      	mov	r0, r3
 801ec74:	3710      	adds	r7, #16
 801ec76:	46bd      	mov	sp, r7
 801ec78:	bd80      	pop	{r7, pc}

0801ec7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ec7a:	b580      	push	{r7, lr}
 801ec7c:	b09c      	sub	sp, #112	; 0x70
 801ec7e:	af00      	add	r7, sp, #0
 801ec80:	60f8      	str	r0, [r7, #12]
 801ec82:	60b9      	str	r1, [r7, #8]
 801ec84:	603b      	str	r3, [r7, #0]
 801ec86:	4613      	mov	r3, r2
 801ec88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ec8a:	e0a9      	b.n	801ede0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ec8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ec8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ec92:	f000 80a5 	beq.w	801ede0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ec96:	f7f8 ff07 	bl	8017aa8 <HAL_GetTick>
 801ec9a:	4602      	mov	r2, r0
 801ec9c:	683b      	ldr	r3, [r7, #0]
 801ec9e:	1ad3      	subs	r3, r2, r3
 801eca0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801eca2:	429a      	cmp	r2, r3
 801eca4:	d302      	bcc.n	801ecac <UART_WaitOnFlagUntilTimeout+0x32>
 801eca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d140      	bne.n	801ed2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ecac:	68fb      	ldr	r3, [r7, #12]
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ecb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ecb4:	e853 3f00 	ldrex	r3, [r3]
 801ecb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ecba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ecbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ecc0:	667b      	str	r3, [r7, #100]	; 0x64
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	461a      	mov	r2, r3
 801ecc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ecca:	65fb      	str	r3, [r7, #92]	; 0x5c
 801eccc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ecce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ecd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ecd2:	e841 2300 	strex	r3, r2, [r1]
 801ecd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ecd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d1e6      	bne.n	801ecac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ecde:	68fb      	ldr	r3, [r7, #12]
 801ece0:	681b      	ldr	r3, [r3, #0]
 801ece2:	3308      	adds	r3, #8
 801ece4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ece6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ece8:	e853 3f00 	ldrex	r3, [r3]
 801ecec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ecee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ecf0:	f023 0301 	bic.w	r3, r3, #1
 801ecf4:	663b      	str	r3, [r7, #96]	; 0x60
 801ecf6:	68fb      	ldr	r3, [r7, #12]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	3308      	adds	r3, #8
 801ecfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ecfe:	64ba      	str	r2, [r7, #72]	; 0x48
 801ed00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ed02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ed04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ed06:	e841 2300 	strex	r3, r2, [r1]
 801ed0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801ed0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d1e5      	bne.n	801ecde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	2220      	movs	r2, #32
 801ed16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	2220      	movs	r2, #32
 801ed1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801ed22:	68fb      	ldr	r3, [r7, #12]
 801ed24:	2200      	movs	r2, #0
 801ed26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801ed2a:	2303      	movs	r3, #3
 801ed2c:	e069      	b.n	801ee02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ed2e:	68fb      	ldr	r3, [r7, #12]
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	f003 0304 	and.w	r3, r3, #4
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d051      	beq.n	801ede0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	69db      	ldr	r3, [r3, #28]
 801ed42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ed46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ed4a:	d149      	bne.n	801ede0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	681b      	ldr	r3, [r3, #0]
 801ed50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ed54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ed56:	68fb      	ldr	r3, [r7, #12]
 801ed58:	681b      	ldr	r3, [r3, #0]
 801ed5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed5e:	e853 3f00 	ldrex	r3, [r3]
 801ed62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ed6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ed6c:	68fb      	ldr	r3, [r7, #12]
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	461a      	mov	r2, r3
 801ed72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ed74:	637b      	str	r3, [r7, #52]	; 0x34
 801ed76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ed78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ed7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ed7c:	e841 2300 	strex	r3, r2, [r1]
 801ed80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	d1e6      	bne.n	801ed56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	3308      	adds	r3, #8
 801ed8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ed90:	697b      	ldr	r3, [r7, #20]
 801ed92:	e853 3f00 	ldrex	r3, [r3]
 801ed96:	613b      	str	r3, [r7, #16]
   return(result);
 801ed98:	693b      	ldr	r3, [r7, #16]
 801ed9a:	f023 0301 	bic.w	r3, r3, #1
 801ed9e:	66bb      	str	r3, [r7, #104]	; 0x68
 801eda0:	68fb      	ldr	r3, [r7, #12]
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	3308      	adds	r3, #8
 801eda6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eda8:	623a      	str	r2, [r7, #32]
 801edaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801edac:	69f9      	ldr	r1, [r7, #28]
 801edae:	6a3a      	ldr	r2, [r7, #32]
 801edb0:	e841 2300 	strex	r3, r2, [r1]
 801edb4:	61bb      	str	r3, [r7, #24]
   return(result);
 801edb6:	69bb      	ldr	r3, [r7, #24]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d1e5      	bne.n	801ed88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801edbc:	68fb      	ldr	r3, [r7, #12]
 801edbe:	2220      	movs	r2, #32
 801edc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801edc4:	68fb      	ldr	r3, [r7, #12]
 801edc6:	2220      	movs	r2, #32
 801edc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801edcc:	68fb      	ldr	r3, [r7, #12]
 801edce:	2220      	movs	r2, #32
 801edd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801edd4:	68fb      	ldr	r3, [r7, #12]
 801edd6:	2200      	movs	r2, #0
 801edd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801eddc:	2303      	movs	r3, #3
 801edde:	e010      	b.n	801ee02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	681b      	ldr	r3, [r3, #0]
 801ede4:	69da      	ldr	r2, [r3, #28]
 801ede6:	68bb      	ldr	r3, [r7, #8]
 801ede8:	4013      	ands	r3, r2
 801edea:	68ba      	ldr	r2, [r7, #8]
 801edec:	429a      	cmp	r2, r3
 801edee:	bf0c      	ite	eq
 801edf0:	2301      	moveq	r3, #1
 801edf2:	2300      	movne	r3, #0
 801edf4:	b2db      	uxtb	r3, r3
 801edf6:	461a      	mov	r2, r3
 801edf8:	79fb      	ldrb	r3, [r7, #7]
 801edfa:	429a      	cmp	r2, r3
 801edfc:	f43f af46 	beq.w	801ec8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ee00:	2300      	movs	r3, #0
}
 801ee02:	4618      	mov	r0, r3
 801ee04:	3770      	adds	r7, #112	; 0x70
 801ee06:	46bd      	mov	sp, r7
 801ee08:	bd80      	pop	{r7, pc}

0801ee0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ee0a:	b480      	push	{r7}
 801ee0c:	b085      	sub	sp, #20
 801ee0e:	af00      	add	r7, sp, #0
 801ee10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ee18:	2b01      	cmp	r3, #1
 801ee1a:	d101      	bne.n	801ee20 <HAL_UARTEx_DisableFifoMode+0x16>
 801ee1c:	2302      	movs	r3, #2
 801ee1e:	e027      	b.n	801ee70 <HAL_UARTEx_DisableFifoMode+0x66>
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	2201      	movs	r2, #1
 801ee24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	2224      	movs	r2, #36	; 0x24
 801ee2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	681a      	ldr	r2, [r3, #0]
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	681b      	ldr	r3, [r3, #0]
 801ee42:	f022 0201 	bic.w	r2, r2, #1
 801ee46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801ee4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	2200      	movs	r2, #0
 801ee54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	681b      	ldr	r3, [r3, #0]
 801ee5a:	68fa      	ldr	r2, [r7, #12]
 801ee5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	2220      	movs	r2, #32
 801ee62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	2200      	movs	r2, #0
 801ee6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ee6e:	2300      	movs	r3, #0
}
 801ee70:	4618      	mov	r0, r3
 801ee72:	3714      	adds	r7, #20
 801ee74:	46bd      	mov	sp, r7
 801ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee7a:	4770      	bx	lr

0801ee7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ee7c:	b580      	push	{r7, lr}
 801ee7e:	b084      	sub	sp, #16
 801ee80:	af00      	add	r7, sp, #0
 801ee82:	6078      	str	r0, [r7, #4]
 801ee84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ee8c:	2b01      	cmp	r3, #1
 801ee8e:	d101      	bne.n	801ee94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ee90:	2302      	movs	r3, #2
 801ee92:	e02d      	b.n	801eef0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	2201      	movs	r2, #1
 801ee98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	2224      	movs	r2, #36	; 0x24
 801eea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	681b      	ldr	r3, [r3, #0]
 801eeb0:	681a      	ldr	r2, [r3, #0]
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	f022 0201 	bic.w	r2, r2, #1
 801eeba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	689b      	ldr	r3, [r3, #8]
 801eec2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	683a      	ldr	r2, [r7, #0]
 801eecc:	430a      	orrs	r2, r1
 801eece:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801eed0:	6878      	ldr	r0, [r7, #4]
 801eed2:	f000 f84f 	bl	801ef74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	68fa      	ldr	r2, [r7, #12]
 801eedc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	2220      	movs	r2, #32
 801eee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	2200      	movs	r2, #0
 801eeea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801eeee:	2300      	movs	r3, #0
}
 801eef0:	4618      	mov	r0, r3
 801eef2:	3710      	adds	r7, #16
 801eef4:	46bd      	mov	sp, r7
 801eef6:	bd80      	pop	{r7, pc}

0801eef8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801eef8:	b580      	push	{r7, lr}
 801eefa:	b084      	sub	sp, #16
 801eefc:	af00      	add	r7, sp, #0
 801eefe:	6078      	str	r0, [r7, #4]
 801ef00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ef08:	2b01      	cmp	r3, #1
 801ef0a:	d101      	bne.n	801ef10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ef0c:	2302      	movs	r3, #2
 801ef0e:	e02d      	b.n	801ef6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	2201      	movs	r2, #1
 801ef14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	2224      	movs	r2, #36	; 0x24
 801ef1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ef20:	687b      	ldr	r3, [r7, #4]
 801ef22:	681b      	ldr	r3, [r3, #0]
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	681a      	ldr	r2, [r3, #0]
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	681b      	ldr	r3, [r3, #0]
 801ef32:	f022 0201 	bic.w	r2, r2, #1
 801ef36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	681b      	ldr	r3, [r3, #0]
 801ef3c:	689b      	ldr	r3, [r3, #8]
 801ef3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	681b      	ldr	r3, [r3, #0]
 801ef46:	683a      	ldr	r2, [r7, #0]
 801ef48:	430a      	orrs	r2, r1
 801ef4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ef4c:	6878      	ldr	r0, [r7, #4]
 801ef4e:	f000 f811 	bl	801ef74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	681b      	ldr	r3, [r3, #0]
 801ef56:	68fa      	ldr	r2, [r7, #12]
 801ef58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	2220      	movs	r2, #32
 801ef5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	2200      	movs	r2, #0
 801ef66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ef6a:	2300      	movs	r3, #0
}
 801ef6c:	4618      	mov	r0, r3
 801ef6e:	3710      	adds	r7, #16
 801ef70:	46bd      	mov	sp, r7
 801ef72:	bd80      	pop	{r7, pc}

0801ef74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ef74:	b480      	push	{r7}
 801ef76:	b085      	sub	sp, #20
 801ef78:	af00      	add	r7, sp, #0
 801ef7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	d108      	bne.n	801ef96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	2201      	movs	r2, #1
 801ef88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	2201      	movs	r2, #1
 801ef90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ef94:	e031      	b.n	801effa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ef96:	2308      	movs	r3, #8
 801ef98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ef9a:	2308      	movs	r3, #8
 801ef9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	689b      	ldr	r3, [r3, #8]
 801efa4:	0e5b      	lsrs	r3, r3, #25
 801efa6:	b2db      	uxtb	r3, r3
 801efa8:	f003 0307 	and.w	r3, r3, #7
 801efac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	689b      	ldr	r3, [r3, #8]
 801efb4:	0f5b      	lsrs	r3, r3, #29
 801efb6:	b2db      	uxtb	r3, r3
 801efb8:	f003 0307 	and.w	r3, r3, #7
 801efbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801efbe:	7bbb      	ldrb	r3, [r7, #14]
 801efc0:	7b3a      	ldrb	r2, [r7, #12]
 801efc2:	4911      	ldr	r1, [pc, #68]	; (801f008 <UARTEx_SetNbDataToProcess+0x94>)
 801efc4:	5c8a      	ldrb	r2, [r1, r2]
 801efc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801efca:	7b3a      	ldrb	r2, [r7, #12]
 801efcc:	490f      	ldr	r1, [pc, #60]	; (801f00c <UARTEx_SetNbDataToProcess+0x98>)
 801efce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801efd0:	fb93 f3f2 	sdiv	r3, r3, r2
 801efd4:	b29a      	uxth	r2, r3
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801efdc:	7bfb      	ldrb	r3, [r7, #15]
 801efde:	7b7a      	ldrb	r2, [r7, #13]
 801efe0:	4909      	ldr	r1, [pc, #36]	; (801f008 <UARTEx_SetNbDataToProcess+0x94>)
 801efe2:	5c8a      	ldrb	r2, [r1, r2]
 801efe4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801efe8:	7b7a      	ldrb	r2, [r7, #13]
 801efea:	4908      	ldr	r1, [pc, #32]	; (801f00c <UARTEx_SetNbDataToProcess+0x98>)
 801efec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801efee:	fb93 f3f2 	sdiv	r3, r3, r2
 801eff2:	b29a      	uxth	r2, r3
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801effa:	bf00      	nop
 801effc:	3714      	adds	r7, #20
 801effe:	46bd      	mov	sp, r7
 801f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f004:	4770      	bx	lr
 801f006:	bf00      	nop
 801f008:	080223e0 	.word	0x080223e0
 801f00c:	080223e8 	.word	0x080223e8

0801f010 <__errno>:
 801f010:	4b01      	ldr	r3, [pc, #4]	; (801f018 <__errno+0x8>)
 801f012:	6818      	ldr	r0, [r3, #0]
 801f014:	4770      	bx	lr
 801f016:	bf00      	nop
 801f018:	2000002c 	.word	0x2000002c

0801f01c <__libc_init_array>:
 801f01c:	b570      	push	{r4, r5, r6, lr}
 801f01e:	4d0d      	ldr	r5, [pc, #52]	; (801f054 <__libc_init_array+0x38>)
 801f020:	4c0d      	ldr	r4, [pc, #52]	; (801f058 <__libc_init_array+0x3c>)
 801f022:	1b64      	subs	r4, r4, r5
 801f024:	10a4      	asrs	r4, r4, #2
 801f026:	2600      	movs	r6, #0
 801f028:	42a6      	cmp	r6, r4
 801f02a:	d109      	bne.n	801f040 <__libc_init_array+0x24>
 801f02c:	4d0b      	ldr	r5, [pc, #44]	; (801f05c <__libc_init_array+0x40>)
 801f02e:	4c0c      	ldr	r4, [pc, #48]	; (801f060 <__libc_init_array+0x44>)
 801f030:	f003 f828 	bl	8022084 <_init>
 801f034:	1b64      	subs	r4, r4, r5
 801f036:	10a4      	asrs	r4, r4, #2
 801f038:	2600      	movs	r6, #0
 801f03a:	42a6      	cmp	r6, r4
 801f03c:	d105      	bne.n	801f04a <__libc_init_array+0x2e>
 801f03e:	bd70      	pop	{r4, r5, r6, pc}
 801f040:	f855 3b04 	ldr.w	r3, [r5], #4
 801f044:	4798      	blx	r3
 801f046:	3601      	adds	r6, #1
 801f048:	e7ee      	b.n	801f028 <__libc_init_array+0xc>
 801f04a:	f855 3b04 	ldr.w	r3, [r5], #4
 801f04e:	4798      	blx	r3
 801f050:	3601      	adds	r6, #1
 801f052:	e7f2      	b.n	801f03a <__libc_init_array+0x1e>
 801f054:	08022808 	.word	0x08022808
 801f058:	08022808 	.word	0x08022808
 801f05c:	08022808 	.word	0x08022808
 801f060:	0802280c 	.word	0x0802280c

0801f064 <memcpy>:
 801f064:	440a      	add	r2, r1
 801f066:	4291      	cmp	r1, r2
 801f068:	f100 33ff 	add.w	r3, r0, #4294967295
 801f06c:	d100      	bne.n	801f070 <memcpy+0xc>
 801f06e:	4770      	bx	lr
 801f070:	b510      	push	{r4, lr}
 801f072:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f076:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f07a:	4291      	cmp	r1, r2
 801f07c:	d1f9      	bne.n	801f072 <memcpy+0xe>
 801f07e:	bd10      	pop	{r4, pc}

0801f080 <memset>:
 801f080:	4402      	add	r2, r0
 801f082:	4603      	mov	r3, r0
 801f084:	4293      	cmp	r3, r2
 801f086:	d100      	bne.n	801f08a <memset+0xa>
 801f088:	4770      	bx	lr
 801f08a:	f803 1b01 	strb.w	r1, [r3], #1
 801f08e:	e7f9      	b.n	801f084 <memset+0x4>

0801f090 <__cvt>:
 801f090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f094:	ec55 4b10 	vmov	r4, r5, d0
 801f098:	2d00      	cmp	r5, #0
 801f09a:	460e      	mov	r6, r1
 801f09c:	4619      	mov	r1, r3
 801f09e:	462b      	mov	r3, r5
 801f0a0:	bfbb      	ittet	lt
 801f0a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f0a6:	461d      	movlt	r5, r3
 801f0a8:	2300      	movge	r3, #0
 801f0aa:	232d      	movlt	r3, #45	; 0x2d
 801f0ac:	700b      	strb	r3, [r1, #0]
 801f0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f0b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f0b4:	4691      	mov	r9, r2
 801f0b6:	f023 0820 	bic.w	r8, r3, #32
 801f0ba:	bfbc      	itt	lt
 801f0bc:	4622      	movlt	r2, r4
 801f0be:	4614      	movlt	r4, r2
 801f0c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f0c4:	d005      	beq.n	801f0d2 <__cvt+0x42>
 801f0c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f0ca:	d100      	bne.n	801f0ce <__cvt+0x3e>
 801f0cc:	3601      	adds	r6, #1
 801f0ce:	2102      	movs	r1, #2
 801f0d0:	e000      	b.n	801f0d4 <__cvt+0x44>
 801f0d2:	2103      	movs	r1, #3
 801f0d4:	ab03      	add	r3, sp, #12
 801f0d6:	9301      	str	r3, [sp, #4]
 801f0d8:	ab02      	add	r3, sp, #8
 801f0da:	9300      	str	r3, [sp, #0]
 801f0dc:	ec45 4b10 	vmov	d0, r4, r5
 801f0e0:	4653      	mov	r3, sl
 801f0e2:	4632      	mov	r2, r6
 801f0e4:	f000 fe30 	bl	801fd48 <_dtoa_r>
 801f0e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f0ec:	4607      	mov	r7, r0
 801f0ee:	d102      	bne.n	801f0f6 <__cvt+0x66>
 801f0f0:	f019 0f01 	tst.w	r9, #1
 801f0f4:	d022      	beq.n	801f13c <__cvt+0xac>
 801f0f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f0fa:	eb07 0906 	add.w	r9, r7, r6
 801f0fe:	d110      	bne.n	801f122 <__cvt+0x92>
 801f100:	783b      	ldrb	r3, [r7, #0]
 801f102:	2b30      	cmp	r3, #48	; 0x30
 801f104:	d10a      	bne.n	801f11c <__cvt+0x8c>
 801f106:	2200      	movs	r2, #0
 801f108:	2300      	movs	r3, #0
 801f10a:	4620      	mov	r0, r4
 801f10c:	4629      	mov	r1, r5
 801f10e:	f7e1 fd03 	bl	8000b18 <__aeabi_dcmpeq>
 801f112:	b918      	cbnz	r0, 801f11c <__cvt+0x8c>
 801f114:	f1c6 0601 	rsb	r6, r6, #1
 801f118:	f8ca 6000 	str.w	r6, [sl]
 801f11c:	f8da 3000 	ldr.w	r3, [sl]
 801f120:	4499      	add	r9, r3
 801f122:	2200      	movs	r2, #0
 801f124:	2300      	movs	r3, #0
 801f126:	4620      	mov	r0, r4
 801f128:	4629      	mov	r1, r5
 801f12a:	f7e1 fcf5 	bl	8000b18 <__aeabi_dcmpeq>
 801f12e:	b108      	cbz	r0, 801f134 <__cvt+0xa4>
 801f130:	f8cd 900c 	str.w	r9, [sp, #12]
 801f134:	2230      	movs	r2, #48	; 0x30
 801f136:	9b03      	ldr	r3, [sp, #12]
 801f138:	454b      	cmp	r3, r9
 801f13a:	d307      	bcc.n	801f14c <__cvt+0xbc>
 801f13c:	9b03      	ldr	r3, [sp, #12]
 801f13e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f140:	1bdb      	subs	r3, r3, r7
 801f142:	4638      	mov	r0, r7
 801f144:	6013      	str	r3, [r2, #0]
 801f146:	b004      	add	sp, #16
 801f148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f14c:	1c59      	adds	r1, r3, #1
 801f14e:	9103      	str	r1, [sp, #12]
 801f150:	701a      	strb	r2, [r3, #0]
 801f152:	e7f0      	b.n	801f136 <__cvt+0xa6>

0801f154 <__exponent>:
 801f154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f156:	4603      	mov	r3, r0
 801f158:	2900      	cmp	r1, #0
 801f15a:	bfb8      	it	lt
 801f15c:	4249      	neglt	r1, r1
 801f15e:	f803 2b02 	strb.w	r2, [r3], #2
 801f162:	bfb4      	ite	lt
 801f164:	222d      	movlt	r2, #45	; 0x2d
 801f166:	222b      	movge	r2, #43	; 0x2b
 801f168:	2909      	cmp	r1, #9
 801f16a:	7042      	strb	r2, [r0, #1]
 801f16c:	dd2a      	ble.n	801f1c4 <__exponent+0x70>
 801f16e:	f10d 0407 	add.w	r4, sp, #7
 801f172:	46a4      	mov	ip, r4
 801f174:	270a      	movs	r7, #10
 801f176:	46a6      	mov	lr, r4
 801f178:	460a      	mov	r2, r1
 801f17a:	fb91 f6f7 	sdiv	r6, r1, r7
 801f17e:	fb07 1516 	mls	r5, r7, r6, r1
 801f182:	3530      	adds	r5, #48	; 0x30
 801f184:	2a63      	cmp	r2, #99	; 0x63
 801f186:	f104 34ff 	add.w	r4, r4, #4294967295
 801f18a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f18e:	4631      	mov	r1, r6
 801f190:	dcf1      	bgt.n	801f176 <__exponent+0x22>
 801f192:	3130      	adds	r1, #48	; 0x30
 801f194:	f1ae 0502 	sub.w	r5, lr, #2
 801f198:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f19c:	1c44      	adds	r4, r0, #1
 801f19e:	4629      	mov	r1, r5
 801f1a0:	4561      	cmp	r1, ip
 801f1a2:	d30a      	bcc.n	801f1ba <__exponent+0x66>
 801f1a4:	f10d 0209 	add.w	r2, sp, #9
 801f1a8:	eba2 020e 	sub.w	r2, r2, lr
 801f1ac:	4565      	cmp	r5, ip
 801f1ae:	bf88      	it	hi
 801f1b0:	2200      	movhi	r2, #0
 801f1b2:	4413      	add	r3, r2
 801f1b4:	1a18      	subs	r0, r3, r0
 801f1b6:	b003      	add	sp, #12
 801f1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f1be:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f1c2:	e7ed      	b.n	801f1a0 <__exponent+0x4c>
 801f1c4:	2330      	movs	r3, #48	; 0x30
 801f1c6:	3130      	adds	r1, #48	; 0x30
 801f1c8:	7083      	strb	r3, [r0, #2]
 801f1ca:	70c1      	strb	r1, [r0, #3]
 801f1cc:	1d03      	adds	r3, r0, #4
 801f1ce:	e7f1      	b.n	801f1b4 <__exponent+0x60>

0801f1d0 <_printf_float>:
 801f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1d4:	ed2d 8b02 	vpush	{d8}
 801f1d8:	b08d      	sub	sp, #52	; 0x34
 801f1da:	460c      	mov	r4, r1
 801f1dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f1e0:	4616      	mov	r6, r2
 801f1e2:	461f      	mov	r7, r3
 801f1e4:	4605      	mov	r5, r0
 801f1e6:	f001 fd55 	bl	8020c94 <_localeconv_r>
 801f1ea:	f8d0 a000 	ldr.w	sl, [r0]
 801f1ee:	4650      	mov	r0, sl
 801f1f0:	f7e1 f816 	bl	8000220 <strlen>
 801f1f4:	2300      	movs	r3, #0
 801f1f6:	930a      	str	r3, [sp, #40]	; 0x28
 801f1f8:	6823      	ldr	r3, [r4, #0]
 801f1fa:	9305      	str	r3, [sp, #20]
 801f1fc:	f8d8 3000 	ldr.w	r3, [r8]
 801f200:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f204:	3307      	adds	r3, #7
 801f206:	f023 0307 	bic.w	r3, r3, #7
 801f20a:	f103 0208 	add.w	r2, r3, #8
 801f20e:	f8c8 2000 	str.w	r2, [r8]
 801f212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f216:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f21a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f21e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f222:	9307      	str	r3, [sp, #28]
 801f224:	f8cd 8018 	str.w	r8, [sp, #24]
 801f228:	ee08 0a10 	vmov	s16, r0
 801f22c:	4b9f      	ldr	r3, [pc, #636]	; (801f4ac <_printf_float+0x2dc>)
 801f22e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f232:	f04f 32ff 	mov.w	r2, #4294967295
 801f236:	f7e1 fca1 	bl	8000b7c <__aeabi_dcmpun>
 801f23a:	bb88      	cbnz	r0, 801f2a0 <_printf_float+0xd0>
 801f23c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f240:	4b9a      	ldr	r3, [pc, #616]	; (801f4ac <_printf_float+0x2dc>)
 801f242:	f04f 32ff 	mov.w	r2, #4294967295
 801f246:	f7e1 fc7b 	bl	8000b40 <__aeabi_dcmple>
 801f24a:	bb48      	cbnz	r0, 801f2a0 <_printf_float+0xd0>
 801f24c:	2200      	movs	r2, #0
 801f24e:	2300      	movs	r3, #0
 801f250:	4640      	mov	r0, r8
 801f252:	4649      	mov	r1, r9
 801f254:	f7e1 fc6a 	bl	8000b2c <__aeabi_dcmplt>
 801f258:	b110      	cbz	r0, 801f260 <_printf_float+0x90>
 801f25a:	232d      	movs	r3, #45	; 0x2d
 801f25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f260:	4b93      	ldr	r3, [pc, #588]	; (801f4b0 <_printf_float+0x2e0>)
 801f262:	4894      	ldr	r0, [pc, #592]	; (801f4b4 <_printf_float+0x2e4>)
 801f264:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f268:	bf94      	ite	ls
 801f26a:	4698      	movls	r8, r3
 801f26c:	4680      	movhi	r8, r0
 801f26e:	2303      	movs	r3, #3
 801f270:	6123      	str	r3, [r4, #16]
 801f272:	9b05      	ldr	r3, [sp, #20]
 801f274:	f023 0204 	bic.w	r2, r3, #4
 801f278:	6022      	str	r2, [r4, #0]
 801f27a:	f04f 0900 	mov.w	r9, #0
 801f27e:	9700      	str	r7, [sp, #0]
 801f280:	4633      	mov	r3, r6
 801f282:	aa0b      	add	r2, sp, #44	; 0x2c
 801f284:	4621      	mov	r1, r4
 801f286:	4628      	mov	r0, r5
 801f288:	f000 f9d8 	bl	801f63c <_printf_common>
 801f28c:	3001      	adds	r0, #1
 801f28e:	f040 8090 	bne.w	801f3b2 <_printf_float+0x1e2>
 801f292:	f04f 30ff 	mov.w	r0, #4294967295
 801f296:	b00d      	add	sp, #52	; 0x34
 801f298:	ecbd 8b02 	vpop	{d8}
 801f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2a0:	4642      	mov	r2, r8
 801f2a2:	464b      	mov	r3, r9
 801f2a4:	4640      	mov	r0, r8
 801f2a6:	4649      	mov	r1, r9
 801f2a8:	f7e1 fc68 	bl	8000b7c <__aeabi_dcmpun>
 801f2ac:	b140      	cbz	r0, 801f2c0 <_printf_float+0xf0>
 801f2ae:	464b      	mov	r3, r9
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	bfbc      	itt	lt
 801f2b4:	232d      	movlt	r3, #45	; 0x2d
 801f2b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f2ba:	487f      	ldr	r0, [pc, #508]	; (801f4b8 <_printf_float+0x2e8>)
 801f2bc:	4b7f      	ldr	r3, [pc, #508]	; (801f4bc <_printf_float+0x2ec>)
 801f2be:	e7d1      	b.n	801f264 <_printf_float+0x94>
 801f2c0:	6863      	ldr	r3, [r4, #4]
 801f2c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f2c6:	9206      	str	r2, [sp, #24]
 801f2c8:	1c5a      	adds	r2, r3, #1
 801f2ca:	d13f      	bne.n	801f34c <_printf_float+0x17c>
 801f2cc:	2306      	movs	r3, #6
 801f2ce:	6063      	str	r3, [r4, #4]
 801f2d0:	9b05      	ldr	r3, [sp, #20]
 801f2d2:	6861      	ldr	r1, [r4, #4]
 801f2d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f2d8:	2300      	movs	r3, #0
 801f2da:	9303      	str	r3, [sp, #12]
 801f2dc:	ab0a      	add	r3, sp, #40	; 0x28
 801f2de:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f2e2:	ab09      	add	r3, sp, #36	; 0x24
 801f2e4:	ec49 8b10 	vmov	d0, r8, r9
 801f2e8:	9300      	str	r3, [sp, #0]
 801f2ea:	6022      	str	r2, [r4, #0]
 801f2ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f2f0:	4628      	mov	r0, r5
 801f2f2:	f7ff fecd 	bl	801f090 <__cvt>
 801f2f6:	9b06      	ldr	r3, [sp, #24]
 801f2f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f2fa:	2b47      	cmp	r3, #71	; 0x47
 801f2fc:	4680      	mov	r8, r0
 801f2fe:	d108      	bne.n	801f312 <_printf_float+0x142>
 801f300:	1cc8      	adds	r0, r1, #3
 801f302:	db02      	blt.n	801f30a <_printf_float+0x13a>
 801f304:	6863      	ldr	r3, [r4, #4]
 801f306:	4299      	cmp	r1, r3
 801f308:	dd41      	ble.n	801f38e <_printf_float+0x1be>
 801f30a:	f1ab 0b02 	sub.w	fp, fp, #2
 801f30e:	fa5f fb8b 	uxtb.w	fp, fp
 801f312:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f316:	d820      	bhi.n	801f35a <_printf_float+0x18a>
 801f318:	3901      	subs	r1, #1
 801f31a:	465a      	mov	r2, fp
 801f31c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f320:	9109      	str	r1, [sp, #36]	; 0x24
 801f322:	f7ff ff17 	bl	801f154 <__exponent>
 801f326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f328:	1813      	adds	r3, r2, r0
 801f32a:	2a01      	cmp	r2, #1
 801f32c:	4681      	mov	r9, r0
 801f32e:	6123      	str	r3, [r4, #16]
 801f330:	dc02      	bgt.n	801f338 <_printf_float+0x168>
 801f332:	6822      	ldr	r2, [r4, #0]
 801f334:	07d2      	lsls	r2, r2, #31
 801f336:	d501      	bpl.n	801f33c <_printf_float+0x16c>
 801f338:	3301      	adds	r3, #1
 801f33a:	6123      	str	r3, [r4, #16]
 801f33c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f340:	2b00      	cmp	r3, #0
 801f342:	d09c      	beq.n	801f27e <_printf_float+0xae>
 801f344:	232d      	movs	r3, #45	; 0x2d
 801f346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f34a:	e798      	b.n	801f27e <_printf_float+0xae>
 801f34c:	9a06      	ldr	r2, [sp, #24]
 801f34e:	2a47      	cmp	r2, #71	; 0x47
 801f350:	d1be      	bne.n	801f2d0 <_printf_float+0x100>
 801f352:	2b00      	cmp	r3, #0
 801f354:	d1bc      	bne.n	801f2d0 <_printf_float+0x100>
 801f356:	2301      	movs	r3, #1
 801f358:	e7b9      	b.n	801f2ce <_printf_float+0xfe>
 801f35a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f35e:	d118      	bne.n	801f392 <_printf_float+0x1c2>
 801f360:	2900      	cmp	r1, #0
 801f362:	6863      	ldr	r3, [r4, #4]
 801f364:	dd0b      	ble.n	801f37e <_printf_float+0x1ae>
 801f366:	6121      	str	r1, [r4, #16]
 801f368:	b913      	cbnz	r3, 801f370 <_printf_float+0x1a0>
 801f36a:	6822      	ldr	r2, [r4, #0]
 801f36c:	07d0      	lsls	r0, r2, #31
 801f36e:	d502      	bpl.n	801f376 <_printf_float+0x1a6>
 801f370:	3301      	adds	r3, #1
 801f372:	440b      	add	r3, r1
 801f374:	6123      	str	r3, [r4, #16]
 801f376:	65a1      	str	r1, [r4, #88]	; 0x58
 801f378:	f04f 0900 	mov.w	r9, #0
 801f37c:	e7de      	b.n	801f33c <_printf_float+0x16c>
 801f37e:	b913      	cbnz	r3, 801f386 <_printf_float+0x1b6>
 801f380:	6822      	ldr	r2, [r4, #0]
 801f382:	07d2      	lsls	r2, r2, #31
 801f384:	d501      	bpl.n	801f38a <_printf_float+0x1ba>
 801f386:	3302      	adds	r3, #2
 801f388:	e7f4      	b.n	801f374 <_printf_float+0x1a4>
 801f38a:	2301      	movs	r3, #1
 801f38c:	e7f2      	b.n	801f374 <_printf_float+0x1a4>
 801f38e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f394:	4299      	cmp	r1, r3
 801f396:	db05      	blt.n	801f3a4 <_printf_float+0x1d4>
 801f398:	6823      	ldr	r3, [r4, #0]
 801f39a:	6121      	str	r1, [r4, #16]
 801f39c:	07d8      	lsls	r0, r3, #31
 801f39e:	d5ea      	bpl.n	801f376 <_printf_float+0x1a6>
 801f3a0:	1c4b      	adds	r3, r1, #1
 801f3a2:	e7e7      	b.n	801f374 <_printf_float+0x1a4>
 801f3a4:	2900      	cmp	r1, #0
 801f3a6:	bfd4      	ite	le
 801f3a8:	f1c1 0202 	rsble	r2, r1, #2
 801f3ac:	2201      	movgt	r2, #1
 801f3ae:	4413      	add	r3, r2
 801f3b0:	e7e0      	b.n	801f374 <_printf_float+0x1a4>
 801f3b2:	6823      	ldr	r3, [r4, #0]
 801f3b4:	055a      	lsls	r2, r3, #21
 801f3b6:	d407      	bmi.n	801f3c8 <_printf_float+0x1f8>
 801f3b8:	6923      	ldr	r3, [r4, #16]
 801f3ba:	4642      	mov	r2, r8
 801f3bc:	4631      	mov	r1, r6
 801f3be:	4628      	mov	r0, r5
 801f3c0:	47b8      	blx	r7
 801f3c2:	3001      	adds	r0, #1
 801f3c4:	d12c      	bne.n	801f420 <_printf_float+0x250>
 801f3c6:	e764      	b.n	801f292 <_printf_float+0xc2>
 801f3c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f3cc:	f240 80e0 	bls.w	801f590 <_printf_float+0x3c0>
 801f3d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f3d4:	2200      	movs	r2, #0
 801f3d6:	2300      	movs	r3, #0
 801f3d8:	f7e1 fb9e 	bl	8000b18 <__aeabi_dcmpeq>
 801f3dc:	2800      	cmp	r0, #0
 801f3de:	d034      	beq.n	801f44a <_printf_float+0x27a>
 801f3e0:	4a37      	ldr	r2, [pc, #220]	; (801f4c0 <_printf_float+0x2f0>)
 801f3e2:	2301      	movs	r3, #1
 801f3e4:	4631      	mov	r1, r6
 801f3e6:	4628      	mov	r0, r5
 801f3e8:	47b8      	blx	r7
 801f3ea:	3001      	adds	r0, #1
 801f3ec:	f43f af51 	beq.w	801f292 <_printf_float+0xc2>
 801f3f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f3f4:	429a      	cmp	r2, r3
 801f3f6:	db02      	blt.n	801f3fe <_printf_float+0x22e>
 801f3f8:	6823      	ldr	r3, [r4, #0]
 801f3fa:	07d8      	lsls	r0, r3, #31
 801f3fc:	d510      	bpl.n	801f420 <_printf_float+0x250>
 801f3fe:	ee18 3a10 	vmov	r3, s16
 801f402:	4652      	mov	r2, sl
 801f404:	4631      	mov	r1, r6
 801f406:	4628      	mov	r0, r5
 801f408:	47b8      	blx	r7
 801f40a:	3001      	adds	r0, #1
 801f40c:	f43f af41 	beq.w	801f292 <_printf_float+0xc2>
 801f410:	f04f 0800 	mov.w	r8, #0
 801f414:	f104 091a 	add.w	r9, r4, #26
 801f418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f41a:	3b01      	subs	r3, #1
 801f41c:	4543      	cmp	r3, r8
 801f41e:	dc09      	bgt.n	801f434 <_printf_float+0x264>
 801f420:	6823      	ldr	r3, [r4, #0]
 801f422:	079b      	lsls	r3, r3, #30
 801f424:	f100 8105 	bmi.w	801f632 <_printf_float+0x462>
 801f428:	68e0      	ldr	r0, [r4, #12]
 801f42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f42c:	4298      	cmp	r0, r3
 801f42e:	bfb8      	it	lt
 801f430:	4618      	movlt	r0, r3
 801f432:	e730      	b.n	801f296 <_printf_float+0xc6>
 801f434:	2301      	movs	r3, #1
 801f436:	464a      	mov	r2, r9
 801f438:	4631      	mov	r1, r6
 801f43a:	4628      	mov	r0, r5
 801f43c:	47b8      	blx	r7
 801f43e:	3001      	adds	r0, #1
 801f440:	f43f af27 	beq.w	801f292 <_printf_float+0xc2>
 801f444:	f108 0801 	add.w	r8, r8, #1
 801f448:	e7e6      	b.n	801f418 <_printf_float+0x248>
 801f44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	dc39      	bgt.n	801f4c4 <_printf_float+0x2f4>
 801f450:	4a1b      	ldr	r2, [pc, #108]	; (801f4c0 <_printf_float+0x2f0>)
 801f452:	2301      	movs	r3, #1
 801f454:	4631      	mov	r1, r6
 801f456:	4628      	mov	r0, r5
 801f458:	47b8      	blx	r7
 801f45a:	3001      	adds	r0, #1
 801f45c:	f43f af19 	beq.w	801f292 <_printf_float+0xc2>
 801f460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f464:	4313      	orrs	r3, r2
 801f466:	d102      	bne.n	801f46e <_printf_float+0x29e>
 801f468:	6823      	ldr	r3, [r4, #0]
 801f46a:	07d9      	lsls	r1, r3, #31
 801f46c:	d5d8      	bpl.n	801f420 <_printf_float+0x250>
 801f46e:	ee18 3a10 	vmov	r3, s16
 801f472:	4652      	mov	r2, sl
 801f474:	4631      	mov	r1, r6
 801f476:	4628      	mov	r0, r5
 801f478:	47b8      	blx	r7
 801f47a:	3001      	adds	r0, #1
 801f47c:	f43f af09 	beq.w	801f292 <_printf_float+0xc2>
 801f480:	f04f 0900 	mov.w	r9, #0
 801f484:	f104 0a1a 	add.w	sl, r4, #26
 801f488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f48a:	425b      	negs	r3, r3
 801f48c:	454b      	cmp	r3, r9
 801f48e:	dc01      	bgt.n	801f494 <_printf_float+0x2c4>
 801f490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f492:	e792      	b.n	801f3ba <_printf_float+0x1ea>
 801f494:	2301      	movs	r3, #1
 801f496:	4652      	mov	r2, sl
 801f498:	4631      	mov	r1, r6
 801f49a:	4628      	mov	r0, r5
 801f49c:	47b8      	blx	r7
 801f49e:	3001      	adds	r0, #1
 801f4a0:	f43f aef7 	beq.w	801f292 <_printf_float+0xc2>
 801f4a4:	f109 0901 	add.w	r9, r9, #1
 801f4a8:	e7ee      	b.n	801f488 <_printf_float+0x2b8>
 801f4aa:	bf00      	nop
 801f4ac:	7fefffff 	.word	0x7fefffff
 801f4b0:	080223f4 	.word	0x080223f4
 801f4b4:	080223f8 	.word	0x080223f8
 801f4b8:	08022400 	.word	0x08022400
 801f4bc:	080223fc 	.word	0x080223fc
 801f4c0:	08022404 	.word	0x08022404
 801f4c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f4c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f4c8:	429a      	cmp	r2, r3
 801f4ca:	bfa8      	it	ge
 801f4cc:	461a      	movge	r2, r3
 801f4ce:	2a00      	cmp	r2, #0
 801f4d0:	4691      	mov	r9, r2
 801f4d2:	dc37      	bgt.n	801f544 <_printf_float+0x374>
 801f4d4:	f04f 0b00 	mov.w	fp, #0
 801f4d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f4dc:	f104 021a 	add.w	r2, r4, #26
 801f4e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f4e2:	9305      	str	r3, [sp, #20]
 801f4e4:	eba3 0309 	sub.w	r3, r3, r9
 801f4e8:	455b      	cmp	r3, fp
 801f4ea:	dc33      	bgt.n	801f554 <_printf_float+0x384>
 801f4ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f4f0:	429a      	cmp	r2, r3
 801f4f2:	db3b      	blt.n	801f56c <_printf_float+0x39c>
 801f4f4:	6823      	ldr	r3, [r4, #0]
 801f4f6:	07da      	lsls	r2, r3, #31
 801f4f8:	d438      	bmi.n	801f56c <_printf_float+0x39c>
 801f4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4fc:	9a05      	ldr	r2, [sp, #20]
 801f4fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f500:	1a9a      	subs	r2, r3, r2
 801f502:	eba3 0901 	sub.w	r9, r3, r1
 801f506:	4591      	cmp	r9, r2
 801f508:	bfa8      	it	ge
 801f50a:	4691      	movge	r9, r2
 801f50c:	f1b9 0f00 	cmp.w	r9, #0
 801f510:	dc35      	bgt.n	801f57e <_printf_float+0x3ae>
 801f512:	f04f 0800 	mov.w	r8, #0
 801f516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f51a:	f104 0a1a 	add.w	sl, r4, #26
 801f51e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f522:	1a9b      	subs	r3, r3, r2
 801f524:	eba3 0309 	sub.w	r3, r3, r9
 801f528:	4543      	cmp	r3, r8
 801f52a:	f77f af79 	ble.w	801f420 <_printf_float+0x250>
 801f52e:	2301      	movs	r3, #1
 801f530:	4652      	mov	r2, sl
 801f532:	4631      	mov	r1, r6
 801f534:	4628      	mov	r0, r5
 801f536:	47b8      	blx	r7
 801f538:	3001      	adds	r0, #1
 801f53a:	f43f aeaa 	beq.w	801f292 <_printf_float+0xc2>
 801f53e:	f108 0801 	add.w	r8, r8, #1
 801f542:	e7ec      	b.n	801f51e <_printf_float+0x34e>
 801f544:	4613      	mov	r3, r2
 801f546:	4631      	mov	r1, r6
 801f548:	4642      	mov	r2, r8
 801f54a:	4628      	mov	r0, r5
 801f54c:	47b8      	blx	r7
 801f54e:	3001      	adds	r0, #1
 801f550:	d1c0      	bne.n	801f4d4 <_printf_float+0x304>
 801f552:	e69e      	b.n	801f292 <_printf_float+0xc2>
 801f554:	2301      	movs	r3, #1
 801f556:	4631      	mov	r1, r6
 801f558:	4628      	mov	r0, r5
 801f55a:	9205      	str	r2, [sp, #20]
 801f55c:	47b8      	blx	r7
 801f55e:	3001      	adds	r0, #1
 801f560:	f43f ae97 	beq.w	801f292 <_printf_float+0xc2>
 801f564:	9a05      	ldr	r2, [sp, #20]
 801f566:	f10b 0b01 	add.w	fp, fp, #1
 801f56a:	e7b9      	b.n	801f4e0 <_printf_float+0x310>
 801f56c:	ee18 3a10 	vmov	r3, s16
 801f570:	4652      	mov	r2, sl
 801f572:	4631      	mov	r1, r6
 801f574:	4628      	mov	r0, r5
 801f576:	47b8      	blx	r7
 801f578:	3001      	adds	r0, #1
 801f57a:	d1be      	bne.n	801f4fa <_printf_float+0x32a>
 801f57c:	e689      	b.n	801f292 <_printf_float+0xc2>
 801f57e:	9a05      	ldr	r2, [sp, #20]
 801f580:	464b      	mov	r3, r9
 801f582:	4442      	add	r2, r8
 801f584:	4631      	mov	r1, r6
 801f586:	4628      	mov	r0, r5
 801f588:	47b8      	blx	r7
 801f58a:	3001      	adds	r0, #1
 801f58c:	d1c1      	bne.n	801f512 <_printf_float+0x342>
 801f58e:	e680      	b.n	801f292 <_printf_float+0xc2>
 801f590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f592:	2a01      	cmp	r2, #1
 801f594:	dc01      	bgt.n	801f59a <_printf_float+0x3ca>
 801f596:	07db      	lsls	r3, r3, #31
 801f598:	d538      	bpl.n	801f60c <_printf_float+0x43c>
 801f59a:	2301      	movs	r3, #1
 801f59c:	4642      	mov	r2, r8
 801f59e:	4631      	mov	r1, r6
 801f5a0:	4628      	mov	r0, r5
 801f5a2:	47b8      	blx	r7
 801f5a4:	3001      	adds	r0, #1
 801f5a6:	f43f ae74 	beq.w	801f292 <_printf_float+0xc2>
 801f5aa:	ee18 3a10 	vmov	r3, s16
 801f5ae:	4652      	mov	r2, sl
 801f5b0:	4631      	mov	r1, r6
 801f5b2:	4628      	mov	r0, r5
 801f5b4:	47b8      	blx	r7
 801f5b6:	3001      	adds	r0, #1
 801f5b8:	f43f ae6b 	beq.w	801f292 <_printf_float+0xc2>
 801f5bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f5c0:	2200      	movs	r2, #0
 801f5c2:	2300      	movs	r3, #0
 801f5c4:	f7e1 faa8 	bl	8000b18 <__aeabi_dcmpeq>
 801f5c8:	b9d8      	cbnz	r0, 801f602 <_printf_float+0x432>
 801f5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5cc:	f108 0201 	add.w	r2, r8, #1
 801f5d0:	3b01      	subs	r3, #1
 801f5d2:	4631      	mov	r1, r6
 801f5d4:	4628      	mov	r0, r5
 801f5d6:	47b8      	blx	r7
 801f5d8:	3001      	adds	r0, #1
 801f5da:	d10e      	bne.n	801f5fa <_printf_float+0x42a>
 801f5dc:	e659      	b.n	801f292 <_printf_float+0xc2>
 801f5de:	2301      	movs	r3, #1
 801f5e0:	4652      	mov	r2, sl
 801f5e2:	4631      	mov	r1, r6
 801f5e4:	4628      	mov	r0, r5
 801f5e6:	47b8      	blx	r7
 801f5e8:	3001      	adds	r0, #1
 801f5ea:	f43f ae52 	beq.w	801f292 <_printf_float+0xc2>
 801f5ee:	f108 0801 	add.w	r8, r8, #1
 801f5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5f4:	3b01      	subs	r3, #1
 801f5f6:	4543      	cmp	r3, r8
 801f5f8:	dcf1      	bgt.n	801f5de <_printf_float+0x40e>
 801f5fa:	464b      	mov	r3, r9
 801f5fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f600:	e6dc      	b.n	801f3bc <_printf_float+0x1ec>
 801f602:	f04f 0800 	mov.w	r8, #0
 801f606:	f104 0a1a 	add.w	sl, r4, #26
 801f60a:	e7f2      	b.n	801f5f2 <_printf_float+0x422>
 801f60c:	2301      	movs	r3, #1
 801f60e:	4642      	mov	r2, r8
 801f610:	e7df      	b.n	801f5d2 <_printf_float+0x402>
 801f612:	2301      	movs	r3, #1
 801f614:	464a      	mov	r2, r9
 801f616:	4631      	mov	r1, r6
 801f618:	4628      	mov	r0, r5
 801f61a:	47b8      	blx	r7
 801f61c:	3001      	adds	r0, #1
 801f61e:	f43f ae38 	beq.w	801f292 <_printf_float+0xc2>
 801f622:	f108 0801 	add.w	r8, r8, #1
 801f626:	68e3      	ldr	r3, [r4, #12]
 801f628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f62a:	1a5b      	subs	r3, r3, r1
 801f62c:	4543      	cmp	r3, r8
 801f62e:	dcf0      	bgt.n	801f612 <_printf_float+0x442>
 801f630:	e6fa      	b.n	801f428 <_printf_float+0x258>
 801f632:	f04f 0800 	mov.w	r8, #0
 801f636:	f104 0919 	add.w	r9, r4, #25
 801f63a:	e7f4      	b.n	801f626 <_printf_float+0x456>

0801f63c <_printf_common>:
 801f63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f640:	4616      	mov	r6, r2
 801f642:	4699      	mov	r9, r3
 801f644:	688a      	ldr	r2, [r1, #8]
 801f646:	690b      	ldr	r3, [r1, #16]
 801f648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f64c:	4293      	cmp	r3, r2
 801f64e:	bfb8      	it	lt
 801f650:	4613      	movlt	r3, r2
 801f652:	6033      	str	r3, [r6, #0]
 801f654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f658:	4607      	mov	r7, r0
 801f65a:	460c      	mov	r4, r1
 801f65c:	b10a      	cbz	r2, 801f662 <_printf_common+0x26>
 801f65e:	3301      	adds	r3, #1
 801f660:	6033      	str	r3, [r6, #0]
 801f662:	6823      	ldr	r3, [r4, #0]
 801f664:	0699      	lsls	r1, r3, #26
 801f666:	bf42      	ittt	mi
 801f668:	6833      	ldrmi	r3, [r6, #0]
 801f66a:	3302      	addmi	r3, #2
 801f66c:	6033      	strmi	r3, [r6, #0]
 801f66e:	6825      	ldr	r5, [r4, #0]
 801f670:	f015 0506 	ands.w	r5, r5, #6
 801f674:	d106      	bne.n	801f684 <_printf_common+0x48>
 801f676:	f104 0a19 	add.w	sl, r4, #25
 801f67a:	68e3      	ldr	r3, [r4, #12]
 801f67c:	6832      	ldr	r2, [r6, #0]
 801f67e:	1a9b      	subs	r3, r3, r2
 801f680:	42ab      	cmp	r3, r5
 801f682:	dc26      	bgt.n	801f6d2 <_printf_common+0x96>
 801f684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f688:	1e13      	subs	r3, r2, #0
 801f68a:	6822      	ldr	r2, [r4, #0]
 801f68c:	bf18      	it	ne
 801f68e:	2301      	movne	r3, #1
 801f690:	0692      	lsls	r2, r2, #26
 801f692:	d42b      	bmi.n	801f6ec <_printf_common+0xb0>
 801f694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f698:	4649      	mov	r1, r9
 801f69a:	4638      	mov	r0, r7
 801f69c:	47c0      	blx	r8
 801f69e:	3001      	adds	r0, #1
 801f6a0:	d01e      	beq.n	801f6e0 <_printf_common+0xa4>
 801f6a2:	6823      	ldr	r3, [r4, #0]
 801f6a4:	68e5      	ldr	r5, [r4, #12]
 801f6a6:	6832      	ldr	r2, [r6, #0]
 801f6a8:	f003 0306 	and.w	r3, r3, #6
 801f6ac:	2b04      	cmp	r3, #4
 801f6ae:	bf08      	it	eq
 801f6b0:	1aad      	subeq	r5, r5, r2
 801f6b2:	68a3      	ldr	r3, [r4, #8]
 801f6b4:	6922      	ldr	r2, [r4, #16]
 801f6b6:	bf0c      	ite	eq
 801f6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f6bc:	2500      	movne	r5, #0
 801f6be:	4293      	cmp	r3, r2
 801f6c0:	bfc4      	itt	gt
 801f6c2:	1a9b      	subgt	r3, r3, r2
 801f6c4:	18ed      	addgt	r5, r5, r3
 801f6c6:	2600      	movs	r6, #0
 801f6c8:	341a      	adds	r4, #26
 801f6ca:	42b5      	cmp	r5, r6
 801f6cc:	d11a      	bne.n	801f704 <_printf_common+0xc8>
 801f6ce:	2000      	movs	r0, #0
 801f6d0:	e008      	b.n	801f6e4 <_printf_common+0xa8>
 801f6d2:	2301      	movs	r3, #1
 801f6d4:	4652      	mov	r2, sl
 801f6d6:	4649      	mov	r1, r9
 801f6d8:	4638      	mov	r0, r7
 801f6da:	47c0      	blx	r8
 801f6dc:	3001      	adds	r0, #1
 801f6de:	d103      	bne.n	801f6e8 <_printf_common+0xac>
 801f6e0:	f04f 30ff 	mov.w	r0, #4294967295
 801f6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6e8:	3501      	adds	r5, #1
 801f6ea:	e7c6      	b.n	801f67a <_printf_common+0x3e>
 801f6ec:	18e1      	adds	r1, r4, r3
 801f6ee:	1c5a      	adds	r2, r3, #1
 801f6f0:	2030      	movs	r0, #48	; 0x30
 801f6f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f6f6:	4422      	add	r2, r4
 801f6f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f6fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f700:	3302      	adds	r3, #2
 801f702:	e7c7      	b.n	801f694 <_printf_common+0x58>
 801f704:	2301      	movs	r3, #1
 801f706:	4622      	mov	r2, r4
 801f708:	4649      	mov	r1, r9
 801f70a:	4638      	mov	r0, r7
 801f70c:	47c0      	blx	r8
 801f70e:	3001      	adds	r0, #1
 801f710:	d0e6      	beq.n	801f6e0 <_printf_common+0xa4>
 801f712:	3601      	adds	r6, #1
 801f714:	e7d9      	b.n	801f6ca <_printf_common+0x8e>
	...

0801f718 <_printf_i>:
 801f718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f71c:	7e0f      	ldrb	r7, [r1, #24]
 801f71e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f720:	2f78      	cmp	r7, #120	; 0x78
 801f722:	4691      	mov	r9, r2
 801f724:	4680      	mov	r8, r0
 801f726:	460c      	mov	r4, r1
 801f728:	469a      	mov	sl, r3
 801f72a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f72e:	d807      	bhi.n	801f740 <_printf_i+0x28>
 801f730:	2f62      	cmp	r7, #98	; 0x62
 801f732:	d80a      	bhi.n	801f74a <_printf_i+0x32>
 801f734:	2f00      	cmp	r7, #0
 801f736:	f000 80d8 	beq.w	801f8ea <_printf_i+0x1d2>
 801f73a:	2f58      	cmp	r7, #88	; 0x58
 801f73c:	f000 80a3 	beq.w	801f886 <_printf_i+0x16e>
 801f740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f748:	e03a      	b.n	801f7c0 <_printf_i+0xa8>
 801f74a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f74e:	2b15      	cmp	r3, #21
 801f750:	d8f6      	bhi.n	801f740 <_printf_i+0x28>
 801f752:	a101      	add	r1, pc, #4	; (adr r1, 801f758 <_printf_i+0x40>)
 801f754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f758:	0801f7b1 	.word	0x0801f7b1
 801f75c:	0801f7c5 	.word	0x0801f7c5
 801f760:	0801f741 	.word	0x0801f741
 801f764:	0801f741 	.word	0x0801f741
 801f768:	0801f741 	.word	0x0801f741
 801f76c:	0801f741 	.word	0x0801f741
 801f770:	0801f7c5 	.word	0x0801f7c5
 801f774:	0801f741 	.word	0x0801f741
 801f778:	0801f741 	.word	0x0801f741
 801f77c:	0801f741 	.word	0x0801f741
 801f780:	0801f741 	.word	0x0801f741
 801f784:	0801f8d1 	.word	0x0801f8d1
 801f788:	0801f7f5 	.word	0x0801f7f5
 801f78c:	0801f8b3 	.word	0x0801f8b3
 801f790:	0801f741 	.word	0x0801f741
 801f794:	0801f741 	.word	0x0801f741
 801f798:	0801f8f3 	.word	0x0801f8f3
 801f79c:	0801f741 	.word	0x0801f741
 801f7a0:	0801f7f5 	.word	0x0801f7f5
 801f7a4:	0801f741 	.word	0x0801f741
 801f7a8:	0801f741 	.word	0x0801f741
 801f7ac:	0801f8bb 	.word	0x0801f8bb
 801f7b0:	682b      	ldr	r3, [r5, #0]
 801f7b2:	1d1a      	adds	r2, r3, #4
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	602a      	str	r2, [r5, #0]
 801f7b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f7bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f7c0:	2301      	movs	r3, #1
 801f7c2:	e0a3      	b.n	801f90c <_printf_i+0x1f4>
 801f7c4:	6820      	ldr	r0, [r4, #0]
 801f7c6:	6829      	ldr	r1, [r5, #0]
 801f7c8:	0606      	lsls	r6, r0, #24
 801f7ca:	f101 0304 	add.w	r3, r1, #4
 801f7ce:	d50a      	bpl.n	801f7e6 <_printf_i+0xce>
 801f7d0:	680e      	ldr	r6, [r1, #0]
 801f7d2:	602b      	str	r3, [r5, #0]
 801f7d4:	2e00      	cmp	r6, #0
 801f7d6:	da03      	bge.n	801f7e0 <_printf_i+0xc8>
 801f7d8:	232d      	movs	r3, #45	; 0x2d
 801f7da:	4276      	negs	r6, r6
 801f7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f7e0:	485e      	ldr	r0, [pc, #376]	; (801f95c <_printf_i+0x244>)
 801f7e2:	230a      	movs	r3, #10
 801f7e4:	e019      	b.n	801f81a <_printf_i+0x102>
 801f7e6:	680e      	ldr	r6, [r1, #0]
 801f7e8:	602b      	str	r3, [r5, #0]
 801f7ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f7ee:	bf18      	it	ne
 801f7f0:	b236      	sxthne	r6, r6
 801f7f2:	e7ef      	b.n	801f7d4 <_printf_i+0xbc>
 801f7f4:	682b      	ldr	r3, [r5, #0]
 801f7f6:	6820      	ldr	r0, [r4, #0]
 801f7f8:	1d19      	adds	r1, r3, #4
 801f7fa:	6029      	str	r1, [r5, #0]
 801f7fc:	0601      	lsls	r1, r0, #24
 801f7fe:	d501      	bpl.n	801f804 <_printf_i+0xec>
 801f800:	681e      	ldr	r6, [r3, #0]
 801f802:	e002      	b.n	801f80a <_printf_i+0xf2>
 801f804:	0646      	lsls	r6, r0, #25
 801f806:	d5fb      	bpl.n	801f800 <_printf_i+0xe8>
 801f808:	881e      	ldrh	r6, [r3, #0]
 801f80a:	4854      	ldr	r0, [pc, #336]	; (801f95c <_printf_i+0x244>)
 801f80c:	2f6f      	cmp	r7, #111	; 0x6f
 801f80e:	bf0c      	ite	eq
 801f810:	2308      	moveq	r3, #8
 801f812:	230a      	movne	r3, #10
 801f814:	2100      	movs	r1, #0
 801f816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f81a:	6865      	ldr	r5, [r4, #4]
 801f81c:	60a5      	str	r5, [r4, #8]
 801f81e:	2d00      	cmp	r5, #0
 801f820:	bfa2      	ittt	ge
 801f822:	6821      	ldrge	r1, [r4, #0]
 801f824:	f021 0104 	bicge.w	r1, r1, #4
 801f828:	6021      	strge	r1, [r4, #0]
 801f82a:	b90e      	cbnz	r6, 801f830 <_printf_i+0x118>
 801f82c:	2d00      	cmp	r5, #0
 801f82e:	d04d      	beq.n	801f8cc <_printf_i+0x1b4>
 801f830:	4615      	mov	r5, r2
 801f832:	fbb6 f1f3 	udiv	r1, r6, r3
 801f836:	fb03 6711 	mls	r7, r3, r1, r6
 801f83a:	5dc7      	ldrb	r7, [r0, r7]
 801f83c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f840:	4637      	mov	r7, r6
 801f842:	42bb      	cmp	r3, r7
 801f844:	460e      	mov	r6, r1
 801f846:	d9f4      	bls.n	801f832 <_printf_i+0x11a>
 801f848:	2b08      	cmp	r3, #8
 801f84a:	d10b      	bne.n	801f864 <_printf_i+0x14c>
 801f84c:	6823      	ldr	r3, [r4, #0]
 801f84e:	07de      	lsls	r6, r3, #31
 801f850:	d508      	bpl.n	801f864 <_printf_i+0x14c>
 801f852:	6923      	ldr	r3, [r4, #16]
 801f854:	6861      	ldr	r1, [r4, #4]
 801f856:	4299      	cmp	r1, r3
 801f858:	bfde      	ittt	le
 801f85a:	2330      	movle	r3, #48	; 0x30
 801f85c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f860:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f864:	1b52      	subs	r2, r2, r5
 801f866:	6122      	str	r2, [r4, #16]
 801f868:	f8cd a000 	str.w	sl, [sp]
 801f86c:	464b      	mov	r3, r9
 801f86e:	aa03      	add	r2, sp, #12
 801f870:	4621      	mov	r1, r4
 801f872:	4640      	mov	r0, r8
 801f874:	f7ff fee2 	bl	801f63c <_printf_common>
 801f878:	3001      	adds	r0, #1
 801f87a:	d14c      	bne.n	801f916 <_printf_i+0x1fe>
 801f87c:	f04f 30ff 	mov.w	r0, #4294967295
 801f880:	b004      	add	sp, #16
 801f882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f886:	4835      	ldr	r0, [pc, #212]	; (801f95c <_printf_i+0x244>)
 801f888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f88c:	6829      	ldr	r1, [r5, #0]
 801f88e:	6823      	ldr	r3, [r4, #0]
 801f890:	f851 6b04 	ldr.w	r6, [r1], #4
 801f894:	6029      	str	r1, [r5, #0]
 801f896:	061d      	lsls	r5, r3, #24
 801f898:	d514      	bpl.n	801f8c4 <_printf_i+0x1ac>
 801f89a:	07df      	lsls	r7, r3, #31
 801f89c:	bf44      	itt	mi
 801f89e:	f043 0320 	orrmi.w	r3, r3, #32
 801f8a2:	6023      	strmi	r3, [r4, #0]
 801f8a4:	b91e      	cbnz	r6, 801f8ae <_printf_i+0x196>
 801f8a6:	6823      	ldr	r3, [r4, #0]
 801f8a8:	f023 0320 	bic.w	r3, r3, #32
 801f8ac:	6023      	str	r3, [r4, #0]
 801f8ae:	2310      	movs	r3, #16
 801f8b0:	e7b0      	b.n	801f814 <_printf_i+0xfc>
 801f8b2:	6823      	ldr	r3, [r4, #0]
 801f8b4:	f043 0320 	orr.w	r3, r3, #32
 801f8b8:	6023      	str	r3, [r4, #0]
 801f8ba:	2378      	movs	r3, #120	; 0x78
 801f8bc:	4828      	ldr	r0, [pc, #160]	; (801f960 <_printf_i+0x248>)
 801f8be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f8c2:	e7e3      	b.n	801f88c <_printf_i+0x174>
 801f8c4:	0659      	lsls	r1, r3, #25
 801f8c6:	bf48      	it	mi
 801f8c8:	b2b6      	uxthmi	r6, r6
 801f8ca:	e7e6      	b.n	801f89a <_printf_i+0x182>
 801f8cc:	4615      	mov	r5, r2
 801f8ce:	e7bb      	b.n	801f848 <_printf_i+0x130>
 801f8d0:	682b      	ldr	r3, [r5, #0]
 801f8d2:	6826      	ldr	r6, [r4, #0]
 801f8d4:	6961      	ldr	r1, [r4, #20]
 801f8d6:	1d18      	adds	r0, r3, #4
 801f8d8:	6028      	str	r0, [r5, #0]
 801f8da:	0635      	lsls	r5, r6, #24
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	d501      	bpl.n	801f8e4 <_printf_i+0x1cc>
 801f8e0:	6019      	str	r1, [r3, #0]
 801f8e2:	e002      	b.n	801f8ea <_printf_i+0x1d2>
 801f8e4:	0670      	lsls	r0, r6, #25
 801f8e6:	d5fb      	bpl.n	801f8e0 <_printf_i+0x1c8>
 801f8e8:	8019      	strh	r1, [r3, #0]
 801f8ea:	2300      	movs	r3, #0
 801f8ec:	6123      	str	r3, [r4, #16]
 801f8ee:	4615      	mov	r5, r2
 801f8f0:	e7ba      	b.n	801f868 <_printf_i+0x150>
 801f8f2:	682b      	ldr	r3, [r5, #0]
 801f8f4:	1d1a      	adds	r2, r3, #4
 801f8f6:	602a      	str	r2, [r5, #0]
 801f8f8:	681d      	ldr	r5, [r3, #0]
 801f8fa:	6862      	ldr	r2, [r4, #4]
 801f8fc:	2100      	movs	r1, #0
 801f8fe:	4628      	mov	r0, r5
 801f900:	f7e0 fc96 	bl	8000230 <memchr>
 801f904:	b108      	cbz	r0, 801f90a <_printf_i+0x1f2>
 801f906:	1b40      	subs	r0, r0, r5
 801f908:	6060      	str	r0, [r4, #4]
 801f90a:	6863      	ldr	r3, [r4, #4]
 801f90c:	6123      	str	r3, [r4, #16]
 801f90e:	2300      	movs	r3, #0
 801f910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f914:	e7a8      	b.n	801f868 <_printf_i+0x150>
 801f916:	6923      	ldr	r3, [r4, #16]
 801f918:	462a      	mov	r2, r5
 801f91a:	4649      	mov	r1, r9
 801f91c:	4640      	mov	r0, r8
 801f91e:	47d0      	blx	sl
 801f920:	3001      	adds	r0, #1
 801f922:	d0ab      	beq.n	801f87c <_printf_i+0x164>
 801f924:	6823      	ldr	r3, [r4, #0]
 801f926:	079b      	lsls	r3, r3, #30
 801f928:	d413      	bmi.n	801f952 <_printf_i+0x23a>
 801f92a:	68e0      	ldr	r0, [r4, #12]
 801f92c:	9b03      	ldr	r3, [sp, #12]
 801f92e:	4298      	cmp	r0, r3
 801f930:	bfb8      	it	lt
 801f932:	4618      	movlt	r0, r3
 801f934:	e7a4      	b.n	801f880 <_printf_i+0x168>
 801f936:	2301      	movs	r3, #1
 801f938:	4632      	mov	r2, r6
 801f93a:	4649      	mov	r1, r9
 801f93c:	4640      	mov	r0, r8
 801f93e:	47d0      	blx	sl
 801f940:	3001      	adds	r0, #1
 801f942:	d09b      	beq.n	801f87c <_printf_i+0x164>
 801f944:	3501      	adds	r5, #1
 801f946:	68e3      	ldr	r3, [r4, #12]
 801f948:	9903      	ldr	r1, [sp, #12]
 801f94a:	1a5b      	subs	r3, r3, r1
 801f94c:	42ab      	cmp	r3, r5
 801f94e:	dcf2      	bgt.n	801f936 <_printf_i+0x21e>
 801f950:	e7eb      	b.n	801f92a <_printf_i+0x212>
 801f952:	2500      	movs	r5, #0
 801f954:	f104 0619 	add.w	r6, r4, #25
 801f958:	e7f5      	b.n	801f946 <_printf_i+0x22e>
 801f95a:	bf00      	nop
 801f95c:	08022406 	.word	0x08022406
 801f960:	08022417 	.word	0x08022417

0801f964 <iprintf>:
 801f964:	b40f      	push	{r0, r1, r2, r3}
 801f966:	4b0a      	ldr	r3, [pc, #40]	; (801f990 <iprintf+0x2c>)
 801f968:	b513      	push	{r0, r1, r4, lr}
 801f96a:	681c      	ldr	r4, [r3, #0]
 801f96c:	b124      	cbz	r4, 801f978 <iprintf+0x14>
 801f96e:	69a3      	ldr	r3, [r4, #24]
 801f970:	b913      	cbnz	r3, 801f978 <iprintf+0x14>
 801f972:	4620      	mov	r0, r4
 801f974:	f001 f8f0 	bl	8020b58 <__sinit>
 801f978:	ab05      	add	r3, sp, #20
 801f97a:	9a04      	ldr	r2, [sp, #16]
 801f97c:	68a1      	ldr	r1, [r4, #8]
 801f97e:	9301      	str	r3, [sp, #4]
 801f980:	4620      	mov	r0, r4
 801f982:	f001 fe9f 	bl	80216c4 <_vfiprintf_r>
 801f986:	b002      	add	sp, #8
 801f988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f98c:	b004      	add	sp, #16
 801f98e:	4770      	bx	lr
 801f990:	2000002c 	.word	0x2000002c

0801f994 <putchar>:
 801f994:	4b09      	ldr	r3, [pc, #36]	; (801f9bc <putchar+0x28>)
 801f996:	b513      	push	{r0, r1, r4, lr}
 801f998:	681c      	ldr	r4, [r3, #0]
 801f99a:	4601      	mov	r1, r0
 801f99c:	b134      	cbz	r4, 801f9ac <putchar+0x18>
 801f99e:	69a3      	ldr	r3, [r4, #24]
 801f9a0:	b923      	cbnz	r3, 801f9ac <putchar+0x18>
 801f9a2:	9001      	str	r0, [sp, #4]
 801f9a4:	4620      	mov	r0, r4
 801f9a6:	f001 f8d7 	bl	8020b58 <__sinit>
 801f9aa:	9901      	ldr	r1, [sp, #4]
 801f9ac:	68a2      	ldr	r2, [r4, #8]
 801f9ae:	4620      	mov	r0, r4
 801f9b0:	b002      	add	sp, #8
 801f9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9b6:	f001 bfb5 	b.w	8021924 <_putc_r>
 801f9ba:	bf00      	nop
 801f9bc:	2000002c 	.word	0x2000002c

0801f9c0 <_puts_r>:
 801f9c0:	b570      	push	{r4, r5, r6, lr}
 801f9c2:	460e      	mov	r6, r1
 801f9c4:	4605      	mov	r5, r0
 801f9c6:	b118      	cbz	r0, 801f9d0 <_puts_r+0x10>
 801f9c8:	6983      	ldr	r3, [r0, #24]
 801f9ca:	b90b      	cbnz	r3, 801f9d0 <_puts_r+0x10>
 801f9cc:	f001 f8c4 	bl	8020b58 <__sinit>
 801f9d0:	69ab      	ldr	r3, [r5, #24]
 801f9d2:	68ac      	ldr	r4, [r5, #8]
 801f9d4:	b913      	cbnz	r3, 801f9dc <_puts_r+0x1c>
 801f9d6:	4628      	mov	r0, r5
 801f9d8:	f001 f8be 	bl	8020b58 <__sinit>
 801f9dc:	4b2c      	ldr	r3, [pc, #176]	; (801fa90 <_puts_r+0xd0>)
 801f9de:	429c      	cmp	r4, r3
 801f9e0:	d120      	bne.n	801fa24 <_puts_r+0x64>
 801f9e2:	686c      	ldr	r4, [r5, #4]
 801f9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f9e6:	07db      	lsls	r3, r3, #31
 801f9e8:	d405      	bmi.n	801f9f6 <_puts_r+0x36>
 801f9ea:	89a3      	ldrh	r3, [r4, #12]
 801f9ec:	0598      	lsls	r0, r3, #22
 801f9ee:	d402      	bmi.n	801f9f6 <_puts_r+0x36>
 801f9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f9f2:	f001 f954 	bl	8020c9e <__retarget_lock_acquire_recursive>
 801f9f6:	89a3      	ldrh	r3, [r4, #12]
 801f9f8:	0719      	lsls	r1, r3, #28
 801f9fa:	d51d      	bpl.n	801fa38 <_puts_r+0x78>
 801f9fc:	6923      	ldr	r3, [r4, #16]
 801f9fe:	b1db      	cbz	r3, 801fa38 <_puts_r+0x78>
 801fa00:	3e01      	subs	r6, #1
 801fa02:	68a3      	ldr	r3, [r4, #8]
 801fa04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fa08:	3b01      	subs	r3, #1
 801fa0a:	60a3      	str	r3, [r4, #8]
 801fa0c:	bb39      	cbnz	r1, 801fa5e <_puts_r+0x9e>
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	da38      	bge.n	801fa84 <_puts_r+0xc4>
 801fa12:	4622      	mov	r2, r4
 801fa14:	210a      	movs	r1, #10
 801fa16:	4628      	mov	r0, r5
 801fa18:	f000 f848 	bl	801faac <__swbuf_r>
 801fa1c:	3001      	adds	r0, #1
 801fa1e:	d011      	beq.n	801fa44 <_puts_r+0x84>
 801fa20:	250a      	movs	r5, #10
 801fa22:	e011      	b.n	801fa48 <_puts_r+0x88>
 801fa24:	4b1b      	ldr	r3, [pc, #108]	; (801fa94 <_puts_r+0xd4>)
 801fa26:	429c      	cmp	r4, r3
 801fa28:	d101      	bne.n	801fa2e <_puts_r+0x6e>
 801fa2a:	68ac      	ldr	r4, [r5, #8]
 801fa2c:	e7da      	b.n	801f9e4 <_puts_r+0x24>
 801fa2e:	4b1a      	ldr	r3, [pc, #104]	; (801fa98 <_puts_r+0xd8>)
 801fa30:	429c      	cmp	r4, r3
 801fa32:	bf08      	it	eq
 801fa34:	68ec      	ldreq	r4, [r5, #12]
 801fa36:	e7d5      	b.n	801f9e4 <_puts_r+0x24>
 801fa38:	4621      	mov	r1, r4
 801fa3a:	4628      	mov	r0, r5
 801fa3c:	f000 f888 	bl	801fb50 <__swsetup_r>
 801fa40:	2800      	cmp	r0, #0
 801fa42:	d0dd      	beq.n	801fa00 <_puts_r+0x40>
 801fa44:	f04f 35ff 	mov.w	r5, #4294967295
 801fa48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa4a:	07da      	lsls	r2, r3, #31
 801fa4c:	d405      	bmi.n	801fa5a <_puts_r+0x9a>
 801fa4e:	89a3      	ldrh	r3, [r4, #12]
 801fa50:	059b      	lsls	r3, r3, #22
 801fa52:	d402      	bmi.n	801fa5a <_puts_r+0x9a>
 801fa54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa56:	f001 f923 	bl	8020ca0 <__retarget_lock_release_recursive>
 801fa5a:	4628      	mov	r0, r5
 801fa5c:	bd70      	pop	{r4, r5, r6, pc}
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	da04      	bge.n	801fa6c <_puts_r+0xac>
 801fa62:	69a2      	ldr	r2, [r4, #24]
 801fa64:	429a      	cmp	r2, r3
 801fa66:	dc06      	bgt.n	801fa76 <_puts_r+0xb6>
 801fa68:	290a      	cmp	r1, #10
 801fa6a:	d004      	beq.n	801fa76 <_puts_r+0xb6>
 801fa6c:	6823      	ldr	r3, [r4, #0]
 801fa6e:	1c5a      	adds	r2, r3, #1
 801fa70:	6022      	str	r2, [r4, #0]
 801fa72:	7019      	strb	r1, [r3, #0]
 801fa74:	e7c5      	b.n	801fa02 <_puts_r+0x42>
 801fa76:	4622      	mov	r2, r4
 801fa78:	4628      	mov	r0, r5
 801fa7a:	f000 f817 	bl	801faac <__swbuf_r>
 801fa7e:	3001      	adds	r0, #1
 801fa80:	d1bf      	bne.n	801fa02 <_puts_r+0x42>
 801fa82:	e7df      	b.n	801fa44 <_puts_r+0x84>
 801fa84:	6823      	ldr	r3, [r4, #0]
 801fa86:	250a      	movs	r5, #10
 801fa88:	1c5a      	adds	r2, r3, #1
 801fa8a:	6022      	str	r2, [r4, #0]
 801fa8c:	701d      	strb	r5, [r3, #0]
 801fa8e:	e7db      	b.n	801fa48 <_puts_r+0x88>
 801fa90:	080224d8 	.word	0x080224d8
 801fa94:	080224f8 	.word	0x080224f8
 801fa98:	080224b8 	.word	0x080224b8

0801fa9c <puts>:
 801fa9c:	4b02      	ldr	r3, [pc, #8]	; (801faa8 <puts+0xc>)
 801fa9e:	4601      	mov	r1, r0
 801faa0:	6818      	ldr	r0, [r3, #0]
 801faa2:	f7ff bf8d 	b.w	801f9c0 <_puts_r>
 801faa6:	bf00      	nop
 801faa8:	2000002c 	.word	0x2000002c

0801faac <__swbuf_r>:
 801faac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801faae:	460e      	mov	r6, r1
 801fab0:	4614      	mov	r4, r2
 801fab2:	4605      	mov	r5, r0
 801fab4:	b118      	cbz	r0, 801fabe <__swbuf_r+0x12>
 801fab6:	6983      	ldr	r3, [r0, #24]
 801fab8:	b90b      	cbnz	r3, 801fabe <__swbuf_r+0x12>
 801faba:	f001 f84d 	bl	8020b58 <__sinit>
 801fabe:	4b21      	ldr	r3, [pc, #132]	; (801fb44 <__swbuf_r+0x98>)
 801fac0:	429c      	cmp	r4, r3
 801fac2:	d12b      	bne.n	801fb1c <__swbuf_r+0x70>
 801fac4:	686c      	ldr	r4, [r5, #4]
 801fac6:	69a3      	ldr	r3, [r4, #24]
 801fac8:	60a3      	str	r3, [r4, #8]
 801faca:	89a3      	ldrh	r3, [r4, #12]
 801facc:	071a      	lsls	r2, r3, #28
 801face:	d52f      	bpl.n	801fb30 <__swbuf_r+0x84>
 801fad0:	6923      	ldr	r3, [r4, #16]
 801fad2:	b36b      	cbz	r3, 801fb30 <__swbuf_r+0x84>
 801fad4:	6923      	ldr	r3, [r4, #16]
 801fad6:	6820      	ldr	r0, [r4, #0]
 801fad8:	1ac0      	subs	r0, r0, r3
 801fada:	6963      	ldr	r3, [r4, #20]
 801fadc:	b2f6      	uxtb	r6, r6
 801fade:	4283      	cmp	r3, r0
 801fae0:	4637      	mov	r7, r6
 801fae2:	dc04      	bgt.n	801faee <__swbuf_r+0x42>
 801fae4:	4621      	mov	r1, r4
 801fae6:	4628      	mov	r0, r5
 801fae8:	f000 ffa2 	bl	8020a30 <_fflush_r>
 801faec:	bb30      	cbnz	r0, 801fb3c <__swbuf_r+0x90>
 801faee:	68a3      	ldr	r3, [r4, #8]
 801faf0:	3b01      	subs	r3, #1
 801faf2:	60a3      	str	r3, [r4, #8]
 801faf4:	6823      	ldr	r3, [r4, #0]
 801faf6:	1c5a      	adds	r2, r3, #1
 801faf8:	6022      	str	r2, [r4, #0]
 801fafa:	701e      	strb	r6, [r3, #0]
 801fafc:	6963      	ldr	r3, [r4, #20]
 801fafe:	3001      	adds	r0, #1
 801fb00:	4283      	cmp	r3, r0
 801fb02:	d004      	beq.n	801fb0e <__swbuf_r+0x62>
 801fb04:	89a3      	ldrh	r3, [r4, #12]
 801fb06:	07db      	lsls	r3, r3, #31
 801fb08:	d506      	bpl.n	801fb18 <__swbuf_r+0x6c>
 801fb0a:	2e0a      	cmp	r6, #10
 801fb0c:	d104      	bne.n	801fb18 <__swbuf_r+0x6c>
 801fb0e:	4621      	mov	r1, r4
 801fb10:	4628      	mov	r0, r5
 801fb12:	f000 ff8d 	bl	8020a30 <_fflush_r>
 801fb16:	b988      	cbnz	r0, 801fb3c <__swbuf_r+0x90>
 801fb18:	4638      	mov	r0, r7
 801fb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb1c:	4b0a      	ldr	r3, [pc, #40]	; (801fb48 <__swbuf_r+0x9c>)
 801fb1e:	429c      	cmp	r4, r3
 801fb20:	d101      	bne.n	801fb26 <__swbuf_r+0x7a>
 801fb22:	68ac      	ldr	r4, [r5, #8]
 801fb24:	e7cf      	b.n	801fac6 <__swbuf_r+0x1a>
 801fb26:	4b09      	ldr	r3, [pc, #36]	; (801fb4c <__swbuf_r+0xa0>)
 801fb28:	429c      	cmp	r4, r3
 801fb2a:	bf08      	it	eq
 801fb2c:	68ec      	ldreq	r4, [r5, #12]
 801fb2e:	e7ca      	b.n	801fac6 <__swbuf_r+0x1a>
 801fb30:	4621      	mov	r1, r4
 801fb32:	4628      	mov	r0, r5
 801fb34:	f000 f80c 	bl	801fb50 <__swsetup_r>
 801fb38:	2800      	cmp	r0, #0
 801fb3a:	d0cb      	beq.n	801fad4 <__swbuf_r+0x28>
 801fb3c:	f04f 37ff 	mov.w	r7, #4294967295
 801fb40:	e7ea      	b.n	801fb18 <__swbuf_r+0x6c>
 801fb42:	bf00      	nop
 801fb44:	080224d8 	.word	0x080224d8
 801fb48:	080224f8 	.word	0x080224f8
 801fb4c:	080224b8 	.word	0x080224b8

0801fb50 <__swsetup_r>:
 801fb50:	4b32      	ldr	r3, [pc, #200]	; (801fc1c <__swsetup_r+0xcc>)
 801fb52:	b570      	push	{r4, r5, r6, lr}
 801fb54:	681d      	ldr	r5, [r3, #0]
 801fb56:	4606      	mov	r6, r0
 801fb58:	460c      	mov	r4, r1
 801fb5a:	b125      	cbz	r5, 801fb66 <__swsetup_r+0x16>
 801fb5c:	69ab      	ldr	r3, [r5, #24]
 801fb5e:	b913      	cbnz	r3, 801fb66 <__swsetup_r+0x16>
 801fb60:	4628      	mov	r0, r5
 801fb62:	f000 fff9 	bl	8020b58 <__sinit>
 801fb66:	4b2e      	ldr	r3, [pc, #184]	; (801fc20 <__swsetup_r+0xd0>)
 801fb68:	429c      	cmp	r4, r3
 801fb6a:	d10f      	bne.n	801fb8c <__swsetup_r+0x3c>
 801fb6c:	686c      	ldr	r4, [r5, #4]
 801fb6e:	89a3      	ldrh	r3, [r4, #12]
 801fb70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb74:	0719      	lsls	r1, r3, #28
 801fb76:	d42c      	bmi.n	801fbd2 <__swsetup_r+0x82>
 801fb78:	06dd      	lsls	r5, r3, #27
 801fb7a:	d411      	bmi.n	801fba0 <__swsetup_r+0x50>
 801fb7c:	2309      	movs	r3, #9
 801fb7e:	6033      	str	r3, [r6, #0]
 801fb80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fb84:	81a3      	strh	r3, [r4, #12]
 801fb86:	f04f 30ff 	mov.w	r0, #4294967295
 801fb8a:	e03e      	b.n	801fc0a <__swsetup_r+0xba>
 801fb8c:	4b25      	ldr	r3, [pc, #148]	; (801fc24 <__swsetup_r+0xd4>)
 801fb8e:	429c      	cmp	r4, r3
 801fb90:	d101      	bne.n	801fb96 <__swsetup_r+0x46>
 801fb92:	68ac      	ldr	r4, [r5, #8]
 801fb94:	e7eb      	b.n	801fb6e <__swsetup_r+0x1e>
 801fb96:	4b24      	ldr	r3, [pc, #144]	; (801fc28 <__swsetup_r+0xd8>)
 801fb98:	429c      	cmp	r4, r3
 801fb9a:	bf08      	it	eq
 801fb9c:	68ec      	ldreq	r4, [r5, #12]
 801fb9e:	e7e6      	b.n	801fb6e <__swsetup_r+0x1e>
 801fba0:	0758      	lsls	r0, r3, #29
 801fba2:	d512      	bpl.n	801fbca <__swsetup_r+0x7a>
 801fba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fba6:	b141      	cbz	r1, 801fbba <__swsetup_r+0x6a>
 801fba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fbac:	4299      	cmp	r1, r3
 801fbae:	d002      	beq.n	801fbb6 <__swsetup_r+0x66>
 801fbb0:	4630      	mov	r0, r6
 801fbb2:	f001 fc7d 	bl	80214b0 <_free_r>
 801fbb6:	2300      	movs	r3, #0
 801fbb8:	6363      	str	r3, [r4, #52]	; 0x34
 801fbba:	89a3      	ldrh	r3, [r4, #12]
 801fbbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fbc0:	81a3      	strh	r3, [r4, #12]
 801fbc2:	2300      	movs	r3, #0
 801fbc4:	6063      	str	r3, [r4, #4]
 801fbc6:	6923      	ldr	r3, [r4, #16]
 801fbc8:	6023      	str	r3, [r4, #0]
 801fbca:	89a3      	ldrh	r3, [r4, #12]
 801fbcc:	f043 0308 	orr.w	r3, r3, #8
 801fbd0:	81a3      	strh	r3, [r4, #12]
 801fbd2:	6923      	ldr	r3, [r4, #16]
 801fbd4:	b94b      	cbnz	r3, 801fbea <__swsetup_r+0x9a>
 801fbd6:	89a3      	ldrh	r3, [r4, #12]
 801fbd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fbdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fbe0:	d003      	beq.n	801fbea <__swsetup_r+0x9a>
 801fbe2:	4621      	mov	r1, r4
 801fbe4:	4630      	mov	r0, r6
 801fbe6:	f001 f881 	bl	8020cec <__smakebuf_r>
 801fbea:	89a0      	ldrh	r0, [r4, #12]
 801fbec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fbf0:	f010 0301 	ands.w	r3, r0, #1
 801fbf4:	d00a      	beq.n	801fc0c <__swsetup_r+0xbc>
 801fbf6:	2300      	movs	r3, #0
 801fbf8:	60a3      	str	r3, [r4, #8]
 801fbfa:	6963      	ldr	r3, [r4, #20]
 801fbfc:	425b      	negs	r3, r3
 801fbfe:	61a3      	str	r3, [r4, #24]
 801fc00:	6923      	ldr	r3, [r4, #16]
 801fc02:	b943      	cbnz	r3, 801fc16 <__swsetup_r+0xc6>
 801fc04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fc08:	d1ba      	bne.n	801fb80 <__swsetup_r+0x30>
 801fc0a:	bd70      	pop	{r4, r5, r6, pc}
 801fc0c:	0781      	lsls	r1, r0, #30
 801fc0e:	bf58      	it	pl
 801fc10:	6963      	ldrpl	r3, [r4, #20]
 801fc12:	60a3      	str	r3, [r4, #8]
 801fc14:	e7f4      	b.n	801fc00 <__swsetup_r+0xb0>
 801fc16:	2000      	movs	r0, #0
 801fc18:	e7f7      	b.n	801fc0a <__swsetup_r+0xba>
 801fc1a:	bf00      	nop
 801fc1c:	2000002c 	.word	0x2000002c
 801fc20:	080224d8 	.word	0x080224d8
 801fc24:	080224f8 	.word	0x080224f8
 801fc28:	080224b8 	.word	0x080224b8

0801fc2c <quorem>:
 801fc2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc30:	6903      	ldr	r3, [r0, #16]
 801fc32:	690c      	ldr	r4, [r1, #16]
 801fc34:	42a3      	cmp	r3, r4
 801fc36:	4607      	mov	r7, r0
 801fc38:	f2c0 8081 	blt.w	801fd3e <quorem+0x112>
 801fc3c:	3c01      	subs	r4, #1
 801fc3e:	f101 0814 	add.w	r8, r1, #20
 801fc42:	f100 0514 	add.w	r5, r0, #20
 801fc46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fc4a:	9301      	str	r3, [sp, #4]
 801fc4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fc50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fc54:	3301      	adds	r3, #1
 801fc56:	429a      	cmp	r2, r3
 801fc58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fc5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fc60:	fbb2 f6f3 	udiv	r6, r2, r3
 801fc64:	d331      	bcc.n	801fcca <quorem+0x9e>
 801fc66:	f04f 0e00 	mov.w	lr, #0
 801fc6a:	4640      	mov	r0, r8
 801fc6c:	46ac      	mov	ip, r5
 801fc6e:	46f2      	mov	sl, lr
 801fc70:	f850 2b04 	ldr.w	r2, [r0], #4
 801fc74:	b293      	uxth	r3, r2
 801fc76:	fb06 e303 	mla	r3, r6, r3, lr
 801fc7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fc7e:	b29b      	uxth	r3, r3
 801fc80:	ebaa 0303 	sub.w	r3, sl, r3
 801fc84:	f8dc a000 	ldr.w	sl, [ip]
 801fc88:	0c12      	lsrs	r2, r2, #16
 801fc8a:	fa13 f38a 	uxtah	r3, r3, sl
 801fc8e:	fb06 e202 	mla	r2, r6, r2, lr
 801fc92:	9300      	str	r3, [sp, #0]
 801fc94:	9b00      	ldr	r3, [sp, #0]
 801fc96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fc9a:	b292      	uxth	r2, r2
 801fc9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fca4:	f8bd 3000 	ldrh.w	r3, [sp]
 801fca8:	4581      	cmp	r9, r0
 801fcaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fcae:	f84c 3b04 	str.w	r3, [ip], #4
 801fcb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fcb6:	d2db      	bcs.n	801fc70 <quorem+0x44>
 801fcb8:	f855 300b 	ldr.w	r3, [r5, fp]
 801fcbc:	b92b      	cbnz	r3, 801fcca <quorem+0x9e>
 801fcbe:	9b01      	ldr	r3, [sp, #4]
 801fcc0:	3b04      	subs	r3, #4
 801fcc2:	429d      	cmp	r5, r3
 801fcc4:	461a      	mov	r2, r3
 801fcc6:	d32e      	bcc.n	801fd26 <quorem+0xfa>
 801fcc8:	613c      	str	r4, [r7, #16]
 801fcca:	4638      	mov	r0, r7
 801fccc:	f001 fad8 	bl	8021280 <__mcmp>
 801fcd0:	2800      	cmp	r0, #0
 801fcd2:	db24      	blt.n	801fd1e <quorem+0xf2>
 801fcd4:	3601      	adds	r6, #1
 801fcd6:	4628      	mov	r0, r5
 801fcd8:	f04f 0c00 	mov.w	ip, #0
 801fcdc:	f858 2b04 	ldr.w	r2, [r8], #4
 801fce0:	f8d0 e000 	ldr.w	lr, [r0]
 801fce4:	b293      	uxth	r3, r2
 801fce6:	ebac 0303 	sub.w	r3, ip, r3
 801fcea:	0c12      	lsrs	r2, r2, #16
 801fcec:	fa13 f38e 	uxtah	r3, r3, lr
 801fcf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801fcf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fcf8:	b29b      	uxth	r3, r3
 801fcfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fcfe:	45c1      	cmp	r9, r8
 801fd00:	f840 3b04 	str.w	r3, [r0], #4
 801fd04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fd08:	d2e8      	bcs.n	801fcdc <quorem+0xb0>
 801fd0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fd0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fd12:	b922      	cbnz	r2, 801fd1e <quorem+0xf2>
 801fd14:	3b04      	subs	r3, #4
 801fd16:	429d      	cmp	r5, r3
 801fd18:	461a      	mov	r2, r3
 801fd1a:	d30a      	bcc.n	801fd32 <quorem+0x106>
 801fd1c:	613c      	str	r4, [r7, #16]
 801fd1e:	4630      	mov	r0, r6
 801fd20:	b003      	add	sp, #12
 801fd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd26:	6812      	ldr	r2, [r2, #0]
 801fd28:	3b04      	subs	r3, #4
 801fd2a:	2a00      	cmp	r2, #0
 801fd2c:	d1cc      	bne.n	801fcc8 <quorem+0x9c>
 801fd2e:	3c01      	subs	r4, #1
 801fd30:	e7c7      	b.n	801fcc2 <quorem+0x96>
 801fd32:	6812      	ldr	r2, [r2, #0]
 801fd34:	3b04      	subs	r3, #4
 801fd36:	2a00      	cmp	r2, #0
 801fd38:	d1f0      	bne.n	801fd1c <quorem+0xf0>
 801fd3a:	3c01      	subs	r4, #1
 801fd3c:	e7eb      	b.n	801fd16 <quorem+0xea>
 801fd3e:	2000      	movs	r0, #0
 801fd40:	e7ee      	b.n	801fd20 <quorem+0xf4>
 801fd42:	0000      	movs	r0, r0
 801fd44:	0000      	movs	r0, r0
	...

0801fd48 <_dtoa_r>:
 801fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd4c:	ed2d 8b04 	vpush	{d8-d9}
 801fd50:	ec57 6b10 	vmov	r6, r7, d0
 801fd54:	b093      	sub	sp, #76	; 0x4c
 801fd56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801fd58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fd5c:	9106      	str	r1, [sp, #24]
 801fd5e:	ee10 aa10 	vmov	sl, s0
 801fd62:	4604      	mov	r4, r0
 801fd64:	9209      	str	r2, [sp, #36]	; 0x24
 801fd66:	930c      	str	r3, [sp, #48]	; 0x30
 801fd68:	46bb      	mov	fp, r7
 801fd6a:	b975      	cbnz	r5, 801fd8a <_dtoa_r+0x42>
 801fd6c:	2010      	movs	r0, #16
 801fd6e:	f000 fffd 	bl	8020d6c <malloc>
 801fd72:	4602      	mov	r2, r0
 801fd74:	6260      	str	r0, [r4, #36]	; 0x24
 801fd76:	b920      	cbnz	r0, 801fd82 <_dtoa_r+0x3a>
 801fd78:	4ba7      	ldr	r3, [pc, #668]	; (8020018 <_dtoa_r+0x2d0>)
 801fd7a:	21ea      	movs	r1, #234	; 0xea
 801fd7c:	48a7      	ldr	r0, [pc, #668]	; (802001c <_dtoa_r+0x2d4>)
 801fd7e:	f001 fe7f 	bl	8021a80 <__assert_func>
 801fd82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fd86:	6005      	str	r5, [r0, #0]
 801fd88:	60c5      	str	r5, [r0, #12]
 801fd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fd8c:	6819      	ldr	r1, [r3, #0]
 801fd8e:	b151      	cbz	r1, 801fda6 <_dtoa_r+0x5e>
 801fd90:	685a      	ldr	r2, [r3, #4]
 801fd92:	604a      	str	r2, [r1, #4]
 801fd94:	2301      	movs	r3, #1
 801fd96:	4093      	lsls	r3, r2
 801fd98:	608b      	str	r3, [r1, #8]
 801fd9a:	4620      	mov	r0, r4
 801fd9c:	f001 f82e 	bl	8020dfc <_Bfree>
 801fda0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fda2:	2200      	movs	r2, #0
 801fda4:	601a      	str	r2, [r3, #0]
 801fda6:	1e3b      	subs	r3, r7, #0
 801fda8:	bfaa      	itet	ge
 801fdaa:	2300      	movge	r3, #0
 801fdac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801fdb0:	f8c8 3000 	strge.w	r3, [r8]
 801fdb4:	4b9a      	ldr	r3, [pc, #616]	; (8020020 <_dtoa_r+0x2d8>)
 801fdb6:	bfbc      	itt	lt
 801fdb8:	2201      	movlt	r2, #1
 801fdba:	f8c8 2000 	strlt.w	r2, [r8]
 801fdbe:	ea33 030b 	bics.w	r3, r3, fp
 801fdc2:	d11b      	bne.n	801fdfc <_dtoa_r+0xb4>
 801fdc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fdc6:	f242 730f 	movw	r3, #9999	; 0x270f
 801fdca:	6013      	str	r3, [r2, #0]
 801fdcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fdd0:	4333      	orrs	r3, r6
 801fdd2:	f000 8592 	beq.w	80208fa <_dtoa_r+0xbb2>
 801fdd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fdd8:	b963      	cbnz	r3, 801fdf4 <_dtoa_r+0xac>
 801fdda:	4b92      	ldr	r3, [pc, #584]	; (8020024 <_dtoa_r+0x2dc>)
 801fddc:	e022      	b.n	801fe24 <_dtoa_r+0xdc>
 801fdde:	4b92      	ldr	r3, [pc, #584]	; (8020028 <_dtoa_r+0x2e0>)
 801fde0:	9301      	str	r3, [sp, #4]
 801fde2:	3308      	adds	r3, #8
 801fde4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fde6:	6013      	str	r3, [r2, #0]
 801fde8:	9801      	ldr	r0, [sp, #4]
 801fdea:	b013      	add	sp, #76	; 0x4c
 801fdec:	ecbd 8b04 	vpop	{d8-d9}
 801fdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdf4:	4b8b      	ldr	r3, [pc, #556]	; (8020024 <_dtoa_r+0x2dc>)
 801fdf6:	9301      	str	r3, [sp, #4]
 801fdf8:	3303      	adds	r3, #3
 801fdfa:	e7f3      	b.n	801fde4 <_dtoa_r+0x9c>
 801fdfc:	2200      	movs	r2, #0
 801fdfe:	2300      	movs	r3, #0
 801fe00:	4650      	mov	r0, sl
 801fe02:	4659      	mov	r1, fp
 801fe04:	f7e0 fe88 	bl	8000b18 <__aeabi_dcmpeq>
 801fe08:	ec4b ab19 	vmov	d9, sl, fp
 801fe0c:	4680      	mov	r8, r0
 801fe0e:	b158      	cbz	r0, 801fe28 <_dtoa_r+0xe0>
 801fe10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fe12:	2301      	movs	r3, #1
 801fe14:	6013      	str	r3, [r2, #0]
 801fe16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	f000 856b 	beq.w	80208f4 <_dtoa_r+0xbac>
 801fe1e:	4883      	ldr	r0, [pc, #524]	; (802002c <_dtoa_r+0x2e4>)
 801fe20:	6018      	str	r0, [r3, #0]
 801fe22:	1e43      	subs	r3, r0, #1
 801fe24:	9301      	str	r3, [sp, #4]
 801fe26:	e7df      	b.n	801fde8 <_dtoa_r+0xa0>
 801fe28:	ec4b ab10 	vmov	d0, sl, fp
 801fe2c:	aa10      	add	r2, sp, #64	; 0x40
 801fe2e:	a911      	add	r1, sp, #68	; 0x44
 801fe30:	4620      	mov	r0, r4
 801fe32:	f001 facb 	bl	80213cc <__d2b>
 801fe36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801fe3a:	ee08 0a10 	vmov	s16, r0
 801fe3e:	2d00      	cmp	r5, #0
 801fe40:	f000 8084 	beq.w	801ff4c <_dtoa_r+0x204>
 801fe44:	ee19 3a90 	vmov	r3, s19
 801fe48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fe4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801fe50:	4656      	mov	r6, sl
 801fe52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801fe56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fe5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fe5e:	4b74      	ldr	r3, [pc, #464]	; (8020030 <_dtoa_r+0x2e8>)
 801fe60:	2200      	movs	r2, #0
 801fe62:	4630      	mov	r0, r6
 801fe64:	4639      	mov	r1, r7
 801fe66:	f7e0 fa37 	bl	80002d8 <__aeabi_dsub>
 801fe6a:	a365      	add	r3, pc, #404	; (adr r3, 8020000 <_dtoa_r+0x2b8>)
 801fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe70:	f7e0 fbea 	bl	8000648 <__aeabi_dmul>
 801fe74:	a364      	add	r3, pc, #400	; (adr r3, 8020008 <_dtoa_r+0x2c0>)
 801fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe7a:	f7e0 fa2f 	bl	80002dc <__adddf3>
 801fe7e:	4606      	mov	r6, r0
 801fe80:	4628      	mov	r0, r5
 801fe82:	460f      	mov	r7, r1
 801fe84:	f7e0 fb76 	bl	8000574 <__aeabi_i2d>
 801fe88:	a361      	add	r3, pc, #388	; (adr r3, 8020010 <_dtoa_r+0x2c8>)
 801fe8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe8e:	f7e0 fbdb 	bl	8000648 <__aeabi_dmul>
 801fe92:	4602      	mov	r2, r0
 801fe94:	460b      	mov	r3, r1
 801fe96:	4630      	mov	r0, r6
 801fe98:	4639      	mov	r1, r7
 801fe9a:	f7e0 fa1f 	bl	80002dc <__adddf3>
 801fe9e:	4606      	mov	r6, r0
 801fea0:	460f      	mov	r7, r1
 801fea2:	f7e0 fe81 	bl	8000ba8 <__aeabi_d2iz>
 801fea6:	2200      	movs	r2, #0
 801fea8:	9000      	str	r0, [sp, #0]
 801feaa:	2300      	movs	r3, #0
 801feac:	4630      	mov	r0, r6
 801feae:	4639      	mov	r1, r7
 801feb0:	f7e0 fe3c 	bl	8000b2c <__aeabi_dcmplt>
 801feb4:	b150      	cbz	r0, 801fecc <_dtoa_r+0x184>
 801feb6:	9800      	ldr	r0, [sp, #0]
 801feb8:	f7e0 fb5c 	bl	8000574 <__aeabi_i2d>
 801febc:	4632      	mov	r2, r6
 801febe:	463b      	mov	r3, r7
 801fec0:	f7e0 fe2a 	bl	8000b18 <__aeabi_dcmpeq>
 801fec4:	b910      	cbnz	r0, 801fecc <_dtoa_r+0x184>
 801fec6:	9b00      	ldr	r3, [sp, #0]
 801fec8:	3b01      	subs	r3, #1
 801feca:	9300      	str	r3, [sp, #0]
 801fecc:	9b00      	ldr	r3, [sp, #0]
 801fece:	2b16      	cmp	r3, #22
 801fed0:	d85a      	bhi.n	801ff88 <_dtoa_r+0x240>
 801fed2:	9a00      	ldr	r2, [sp, #0]
 801fed4:	4b57      	ldr	r3, [pc, #348]	; (8020034 <_dtoa_r+0x2ec>)
 801fed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fede:	ec51 0b19 	vmov	r0, r1, d9
 801fee2:	f7e0 fe23 	bl	8000b2c <__aeabi_dcmplt>
 801fee6:	2800      	cmp	r0, #0
 801fee8:	d050      	beq.n	801ff8c <_dtoa_r+0x244>
 801feea:	9b00      	ldr	r3, [sp, #0]
 801feec:	3b01      	subs	r3, #1
 801feee:	9300      	str	r3, [sp, #0]
 801fef0:	2300      	movs	r3, #0
 801fef2:	930b      	str	r3, [sp, #44]	; 0x2c
 801fef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fef6:	1b5d      	subs	r5, r3, r5
 801fef8:	1e6b      	subs	r3, r5, #1
 801fefa:	9305      	str	r3, [sp, #20]
 801fefc:	bf45      	ittet	mi
 801fefe:	f1c5 0301 	rsbmi	r3, r5, #1
 801ff02:	9304      	strmi	r3, [sp, #16]
 801ff04:	2300      	movpl	r3, #0
 801ff06:	2300      	movmi	r3, #0
 801ff08:	bf4c      	ite	mi
 801ff0a:	9305      	strmi	r3, [sp, #20]
 801ff0c:	9304      	strpl	r3, [sp, #16]
 801ff0e:	9b00      	ldr	r3, [sp, #0]
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	db3d      	blt.n	801ff90 <_dtoa_r+0x248>
 801ff14:	9b05      	ldr	r3, [sp, #20]
 801ff16:	9a00      	ldr	r2, [sp, #0]
 801ff18:	920a      	str	r2, [sp, #40]	; 0x28
 801ff1a:	4413      	add	r3, r2
 801ff1c:	9305      	str	r3, [sp, #20]
 801ff1e:	2300      	movs	r3, #0
 801ff20:	9307      	str	r3, [sp, #28]
 801ff22:	9b06      	ldr	r3, [sp, #24]
 801ff24:	2b09      	cmp	r3, #9
 801ff26:	f200 8089 	bhi.w	802003c <_dtoa_r+0x2f4>
 801ff2a:	2b05      	cmp	r3, #5
 801ff2c:	bfc4      	itt	gt
 801ff2e:	3b04      	subgt	r3, #4
 801ff30:	9306      	strgt	r3, [sp, #24]
 801ff32:	9b06      	ldr	r3, [sp, #24]
 801ff34:	f1a3 0302 	sub.w	r3, r3, #2
 801ff38:	bfcc      	ite	gt
 801ff3a:	2500      	movgt	r5, #0
 801ff3c:	2501      	movle	r5, #1
 801ff3e:	2b03      	cmp	r3, #3
 801ff40:	f200 8087 	bhi.w	8020052 <_dtoa_r+0x30a>
 801ff44:	e8df f003 	tbb	[pc, r3]
 801ff48:	59383a2d 	.word	0x59383a2d
 801ff4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801ff50:	441d      	add	r5, r3
 801ff52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ff56:	2b20      	cmp	r3, #32
 801ff58:	bfc1      	itttt	gt
 801ff5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ff5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ff62:	fa0b f303 	lslgt.w	r3, fp, r3
 801ff66:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ff6a:	bfda      	itte	le
 801ff6c:	f1c3 0320 	rsble	r3, r3, #32
 801ff70:	fa06 f003 	lslle.w	r0, r6, r3
 801ff74:	4318      	orrgt	r0, r3
 801ff76:	f7e0 faed 	bl	8000554 <__aeabi_ui2d>
 801ff7a:	2301      	movs	r3, #1
 801ff7c:	4606      	mov	r6, r0
 801ff7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ff82:	3d01      	subs	r5, #1
 801ff84:	930e      	str	r3, [sp, #56]	; 0x38
 801ff86:	e76a      	b.n	801fe5e <_dtoa_r+0x116>
 801ff88:	2301      	movs	r3, #1
 801ff8a:	e7b2      	b.n	801fef2 <_dtoa_r+0x1aa>
 801ff8c:	900b      	str	r0, [sp, #44]	; 0x2c
 801ff8e:	e7b1      	b.n	801fef4 <_dtoa_r+0x1ac>
 801ff90:	9b04      	ldr	r3, [sp, #16]
 801ff92:	9a00      	ldr	r2, [sp, #0]
 801ff94:	1a9b      	subs	r3, r3, r2
 801ff96:	9304      	str	r3, [sp, #16]
 801ff98:	4253      	negs	r3, r2
 801ff9a:	9307      	str	r3, [sp, #28]
 801ff9c:	2300      	movs	r3, #0
 801ff9e:	930a      	str	r3, [sp, #40]	; 0x28
 801ffa0:	e7bf      	b.n	801ff22 <_dtoa_r+0x1da>
 801ffa2:	2300      	movs	r3, #0
 801ffa4:	9308      	str	r3, [sp, #32]
 801ffa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	dc55      	bgt.n	8020058 <_dtoa_r+0x310>
 801ffac:	2301      	movs	r3, #1
 801ffae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ffb2:	461a      	mov	r2, r3
 801ffb4:	9209      	str	r2, [sp, #36]	; 0x24
 801ffb6:	e00c      	b.n	801ffd2 <_dtoa_r+0x28a>
 801ffb8:	2301      	movs	r3, #1
 801ffba:	e7f3      	b.n	801ffa4 <_dtoa_r+0x25c>
 801ffbc:	2300      	movs	r3, #0
 801ffbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ffc0:	9308      	str	r3, [sp, #32]
 801ffc2:	9b00      	ldr	r3, [sp, #0]
 801ffc4:	4413      	add	r3, r2
 801ffc6:	9302      	str	r3, [sp, #8]
 801ffc8:	3301      	adds	r3, #1
 801ffca:	2b01      	cmp	r3, #1
 801ffcc:	9303      	str	r3, [sp, #12]
 801ffce:	bfb8      	it	lt
 801ffd0:	2301      	movlt	r3, #1
 801ffd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ffd4:	2200      	movs	r2, #0
 801ffd6:	6042      	str	r2, [r0, #4]
 801ffd8:	2204      	movs	r2, #4
 801ffda:	f102 0614 	add.w	r6, r2, #20
 801ffde:	429e      	cmp	r6, r3
 801ffe0:	6841      	ldr	r1, [r0, #4]
 801ffe2:	d93d      	bls.n	8020060 <_dtoa_r+0x318>
 801ffe4:	4620      	mov	r0, r4
 801ffe6:	f000 fec9 	bl	8020d7c <_Balloc>
 801ffea:	9001      	str	r0, [sp, #4]
 801ffec:	2800      	cmp	r0, #0
 801ffee:	d13b      	bne.n	8020068 <_dtoa_r+0x320>
 801fff0:	4b11      	ldr	r3, [pc, #68]	; (8020038 <_dtoa_r+0x2f0>)
 801fff2:	4602      	mov	r2, r0
 801fff4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801fff8:	e6c0      	b.n	801fd7c <_dtoa_r+0x34>
 801fffa:	2301      	movs	r3, #1
 801fffc:	e7df      	b.n	801ffbe <_dtoa_r+0x276>
 801fffe:	bf00      	nop
 8020000:	636f4361 	.word	0x636f4361
 8020004:	3fd287a7 	.word	0x3fd287a7
 8020008:	8b60c8b3 	.word	0x8b60c8b3
 802000c:	3fc68a28 	.word	0x3fc68a28
 8020010:	509f79fb 	.word	0x509f79fb
 8020014:	3fd34413 	.word	0x3fd34413
 8020018:	08022435 	.word	0x08022435
 802001c:	0802244c 	.word	0x0802244c
 8020020:	7ff00000 	.word	0x7ff00000
 8020024:	08022431 	.word	0x08022431
 8020028:	08022428 	.word	0x08022428
 802002c:	08022405 	.word	0x08022405
 8020030:	3ff80000 	.word	0x3ff80000
 8020034:	080225a0 	.word	0x080225a0
 8020038:	080224a7 	.word	0x080224a7
 802003c:	2501      	movs	r5, #1
 802003e:	2300      	movs	r3, #0
 8020040:	9306      	str	r3, [sp, #24]
 8020042:	9508      	str	r5, [sp, #32]
 8020044:	f04f 33ff 	mov.w	r3, #4294967295
 8020048:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802004c:	2200      	movs	r2, #0
 802004e:	2312      	movs	r3, #18
 8020050:	e7b0      	b.n	801ffb4 <_dtoa_r+0x26c>
 8020052:	2301      	movs	r3, #1
 8020054:	9308      	str	r3, [sp, #32]
 8020056:	e7f5      	b.n	8020044 <_dtoa_r+0x2fc>
 8020058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802005a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802005e:	e7b8      	b.n	801ffd2 <_dtoa_r+0x28a>
 8020060:	3101      	adds	r1, #1
 8020062:	6041      	str	r1, [r0, #4]
 8020064:	0052      	lsls	r2, r2, #1
 8020066:	e7b8      	b.n	801ffda <_dtoa_r+0x292>
 8020068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802006a:	9a01      	ldr	r2, [sp, #4]
 802006c:	601a      	str	r2, [r3, #0]
 802006e:	9b03      	ldr	r3, [sp, #12]
 8020070:	2b0e      	cmp	r3, #14
 8020072:	f200 809d 	bhi.w	80201b0 <_dtoa_r+0x468>
 8020076:	2d00      	cmp	r5, #0
 8020078:	f000 809a 	beq.w	80201b0 <_dtoa_r+0x468>
 802007c:	9b00      	ldr	r3, [sp, #0]
 802007e:	2b00      	cmp	r3, #0
 8020080:	dd32      	ble.n	80200e8 <_dtoa_r+0x3a0>
 8020082:	4ab7      	ldr	r2, [pc, #732]	; (8020360 <_dtoa_r+0x618>)
 8020084:	f003 030f 	and.w	r3, r3, #15
 8020088:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802008c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020090:	9b00      	ldr	r3, [sp, #0]
 8020092:	05d8      	lsls	r0, r3, #23
 8020094:	ea4f 1723 	mov.w	r7, r3, asr #4
 8020098:	d516      	bpl.n	80200c8 <_dtoa_r+0x380>
 802009a:	4bb2      	ldr	r3, [pc, #712]	; (8020364 <_dtoa_r+0x61c>)
 802009c:	ec51 0b19 	vmov	r0, r1, d9
 80200a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80200a4:	f7e0 fbfa 	bl	800089c <__aeabi_ddiv>
 80200a8:	f007 070f 	and.w	r7, r7, #15
 80200ac:	4682      	mov	sl, r0
 80200ae:	468b      	mov	fp, r1
 80200b0:	2503      	movs	r5, #3
 80200b2:	4eac      	ldr	r6, [pc, #688]	; (8020364 <_dtoa_r+0x61c>)
 80200b4:	b957      	cbnz	r7, 80200cc <_dtoa_r+0x384>
 80200b6:	4642      	mov	r2, r8
 80200b8:	464b      	mov	r3, r9
 80200ba:	4650      	mov	r0, sl
 80200bc:	4659      	mov	r1, fp
 80200be:	f7e0 fbed 	bl	800089c <__aeabi_ddiv>
 80200c2:	4682      	mov	sl, r0
 80200c4:	468b      	mov	fp, r1
 80200c6:	e028      	b.n	802011a <_dtoa_r+0x3d2>
 80200c8:	2502      	movs	r5, #2
 80200ca:	e7f2      	b.n	80200b2 <_dtoa_r+0x36a>
 80200cc:	07f9      	lsls	r1, r7, #31
 80200ce:	d508      	bpl.n	80200e2 <_dtoa_r+0x39a>
 80200d0:	4640      	mov	r0, r8
 80200d2:	4649      	mov	r1, r9
 80200d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80200d8:	f7e0 fab6 	bl	8000648 <__aeabi_dmul>
 80200dc:	3501      	adds	r5, #1
 80200de:	4680      	mov	r8, r0
 80200e0:	4689      	mov	r9, r1
 80200e2:	107f      	asrs	r7, r7, #1
 80200e4:	3608      	adds	r6, #8
 80200e6:	e7e5      	b.n	80200b4 <_dtoa_r+0x36c>
 80200e8:	f000 809b 	beq.w	8020222 <_dtoa_r+0x4da>
 80200ec:	9b00      	ldr	r3, [sp, #0]
 80200ee:	4f9d      	ldr	r7, [pc, #628]	; (8020364 <_dtoa_r+0x61c>)
 80200f0:	425e      	negs	r6, r3
 80200f2:	4b9b      	ldr	r3, [pc, #620]	; (8020360 <_dtoa_r+0x618>)
 80200f4:	f006 020f 	and.w	r2, r6, #15
 80200f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80200fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020100:	ec51 0b19 	vmov	r0, r1, d9
 8020104:	f7e0 faa0 	bl	8000648 <__aeabi_dmul>
 8020108:	1136      	asrs	r6, r6, #4
 802010a:	4682      	mov	sl, r0
 802010c:	468b      	mov	fp, r1
 802010e:	2300      	movs	r3, #0
 8020110:	2502      	movs	r5, #2
 8020112:	2e00      	cmp	r6, #0
 8020114:	d17a      	bne.n	802020c <_dtoa_r+0x4c4>
 8020116:	2b00      	cmp	r3, #0
 8020118:	d1d3      	bne.n	80200c2 <_dtoa_r+0x37a>
 802011a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802011c:	2b00      	cmp	r3, #0
 802011e:	f000 8082 	beq.w	8020226 <_dtoa_r+0x4de>
 8020122:	4b91      	ldr	r3, [pc, #580]	; (8020368 <_dtoa_r+0x620>)
 8020124:	2200      	movs	r2, #0
 8020126:	4650      	mov	r0, sl
 8020128:	4659      	mov	r1, fp
 802012a:	f7e0 fcff 	bl	8000b2c <__aeabi_dcmplt>
 802012e:	2800      	cmp	r0, #0
 8020130:	d079      	beq.n	8020226 <_dtoa_r+0x4de>
 8020132:	9b03      	ldr	r3, [sp, #12]
 8020134:	2b00      	cmp	r3, #0
 8020136:	d076      	beq.n	8020226 <_dtoa_r+0x4de>
 8020138:	9b02      	ldr	r3, [sp, #8]
 802013a:	2b00      	cmp	r3, #0
 802013c:	dd36      	ble.n	80201ac <_dtoa_r+0x464>
 802013e:	9b00      	ldr	r3, [sp, #0]
 8020140:	4650      	mov	r0, sl
 8020142:	4659      	mov	r1, fp
 8020144:	1e5f      	subs	r7, r3, #1
 8020146:	2200      	movs	r2, #0
 8020148:	4b88      	ldr	r3, [pc, #544]	; (802036c <_dtoa_r+0x624>)
 802014a:	f7e0 fa7d 	bl	8000648 <__aeabi_dmul>
 802014e:	9e02      	ldr	r6, [sp, #8]
 8020150:	4682      	mov	sl, r0
 8020152:	468b      	mov	fp, r1
 8020154:	3501      	adds	r5, #1
 8020156:	4628      	mov	r0, r5
 8020158:	f7e0 fa0c 	bl	8000574 <__aeabi_i2d>
 802015c:	4652      	mov	r2, sl
 802015e:	465b      	mov	r3, fp
 8020160:	f7e0 fa72 	bl	8000648 <__aeabi_dmul>
 8020164:	4b82      	ldr	r3, [pc, #520]	; (8020370 <_dtoa_r+0x628>)
 8020166:	2200      	movs	r2, #0
 8020168:	f7e0 f8b8 	bl	80002dc <__adddf3>
 802016c:	46d0      	mov	r8, sl
 802016e:	46d9      	mov	r9, fp
 8020170:	4682      	mov	sl, r0
 8020172:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020176:	2e00      	cmp	r6, #0
 8020178:	d158      	bne.n	802022c <_dtoa_r+0x4e4>
 802017a:	4b7e      	ldr	r3, [pc, #504]	; (8020374 <_dtoa_r+0x62c>)
 802017c:	2200      	movs	r2, #0
 802017e:	4640      	mov	r0, r8
 8020180:	4649      	mov	r1, r9
 8020182:	f7e0 f8a9 	bl	80002d8 <__aeabi_dsub>
 8020186:	4652      	mov	r2, sl
 8020188:	465b      	mov	r3, fp
 802018a:	4680      	mov	r8, r0
 802018c:	4689      	mov	r9, r1
 802018e:	f7e0 fceb 	bl	8000b68 <__aeabi_dcmpgt>
 8020192:	2800      	cmp	r0, #0
 8020194:	f040 8295 	bne.w	80206c2 <_dtoa_r+0x97a>
 8020198:	4652      	mov	r2, sl
 802019a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802019e:	4640      	mov	r0, r8
 80201a0:	4649      	mov	r1, r9
 80201a2:	f7e0 fcc3 	bl	8000b2c <__aeabi_dcmplt>
 80201a6:	2800      	cmp	r0, #0
 80201a8:	f040 8289 	bne.w	80206be <_dtoa_r+0x976>
 80201ac:	ec5b ab19 	vmov	sl, fp, d9
 80201b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	f2c0 8148 	blt.w	8020448 <_dtoa_r+0x700>
 80201b8:	9a00      	ldr	r2, [sp, #0]
 80201ba:	2a0e      	cmp	r2, #14
 80201bc:	f300 8144 	bgt.w	8020448 <_dtoa_r+0x700>
 80201c0:	4b67      	ldr	r3, [pc, #412]	; (8020360 <_dtoa_r+0x618>)
 80201c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80201c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80201ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	f280 80d5 	bge.w	802037c <_dtoa_r+0x634>
 80201d2:	9b03      	ldr	r3, [sp, #12]
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	f300 80d1 	bgt.w	802037c <_dtoa_r+0x634>
 80201da:	f040 826f 	bne.w	80206bc <_dtoa_r+0x974>
 80201de:	4b65      	ldr	r3, [pc, #404]	; (8020374 <_dtoa_r+0x62c>)
 80201e0:	2200      	movs	r2, #0
 80201e2:	4640      	mov	r0, r8
 80201e4:	4649      	mov	r1, r9
 80201e6:	f7e0 fa2f 	bl	8000648 <__aeabi_dmul>
 80201ea:	4652      	mov	r2, sl
 80201ec:	465b      	mov	r3, fp
 80201ee:	f7e0 fcb1 	bl	8000b54 <__aeabi_dcmpge>
 80201f2:	9e03      	ldr	r6, [sp, #12]
 80201f4:	4637      	mov	r7, r6
 80201f6:	2800      	cmp	r0, #0
 80201f8:	f040 8245 	bne.w	8020686 <_dtoa_r+0x93e>
 80201fc:	9d01      	ldr	r5, [sp, #4]
 80201fe:	2331      	movs	r3, #49	; 0x31
 8020200:	f805 3b01 	strb.w	r3, [r5], #1
 8020204:	9b00      	ldr	r3, [sp, #0]
 8020206:	3301      	adds	r3, #1
 8020208:	9300      	str	r3, [sp, #0]
 802020a:	e240      	b.n	802068e <_dtoa_r+0x946>
 802020c:	07f2      	lsls	r2, r6, #31
 802020e:	d505      	bpl.n	802021c <_dtoa_r+0x4d4>
 8020210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020214:	f7e0 fa18 	bl	8000648 <__aeabi_dmul>
 8020218:	3501      	adds	r5, #1
 802021a:	2301      	movs	r3, #1
 802021c:	1076      	asrs	r6, r6, #1
 802021e:	3708      	adds	r7, #8
 8020220:	e777      	b.n	8020112 <_dtoa_r+0x3ca>
 8020222:	2502      	movs	r5, #2
 8020224:	e779      	b.n	802011a <_dtoa_r+0x3d2>
 8020226:	9f00      	ldr	r7, [sp, #0]
 8020228:	9e03      	ldr	r6, [sp, #12]
 802022a:	e794      	b.n	8020156 <_dtoa_r+0x40e>
 802022c:	9901      	ldr	r1, [sp, #4]
 802022e:	4b4c      	ldr	r3, [pc, #304]	; (8020360 <_dtoa_r+0x618>)
 8020230:	4431      	add	r1, r6
 8020232:	910d      	str	r1, [sp, #52]	; 0x34
 8020234:	9908      	ldr	r1, [sp, #32]
 8020236:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802023a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802023e:	2900      	cmp	r1, #0
 8020240:	d043      	beq.n	80202ca <_dtoa_r+0x582>
 8020242:	494d      	ldr	r1, [pc, #308]	; (8020378 <_dtoa_r+0x630>)
 8020244:	2000      	movs	r0, #0
 8020246:	f7e0 fb29 	bl	800089c <__aeabi_ddiv>
 802024a:	4652      	mov	r2, sl
 802024c:	465b      	mov	r3, fp
 802024e:	f7e0 f843 	bl	80002d8 <__aeabi_dsub>
 8020252:	9d01      	ldr	r5, [sp, #4]
 8020254:	4682      	mov	sl, r0
 8020256:	468b      	mov	fp, r1
 8020258:	4649      	mov	r1, r9
 802025a:	4640      	mov	r0, r8
 802025c:	f7e0 fca4 	bl	8000ba8 <__aeabi_d2iz>
 8020260:	4606      	mov	r6, r0
 8020262:	f7e0 f987 	bl	8000574 <__aeabi_i2d>
 8020266:	4602      	mov	r2, r0
 8020268:	460b      	mov	r3, r1
 802026a:	4640      	mov	r0, r8
 802026c:	4649      	mov	r1, r9
 802026e:	f7e0 f833 	bl	80002d8 <__aeabi_dsub>
 8020272:	3630      	adds	r6, #48	; 0x30
 8020274:	f805 6b01 	strb.w	r6, [r5], #1
 8020278:	4652      	mov	r2, sl
 802027a:	465b      	mov	r3, fp
 802027c:	4680      	mov	r8, r0
 802027e:	4689      	mov	r9, r1
 8020280:	f7e0 fc54 	bl	8000b2c <__aeabi_dcmplt>
 8020284:	2800      	cmp	r0, #0
 8020286:	d163      	bne.n	8020350 <_dtoa_r+0x608>
 8020288:	4642      	mov	r2, r8
 802028a:	464b      	mov	r3, r9
 802028c:	4936      	ldr	r1, [pc, #216]	; (8020368 <_dtoa_r+0x620>)
 802028e:	2000      	movs	r0, #0
 8020290:	f7e0 f822 	bl	80002d8 <__aeabi_dsub>
 8020294:	4652      	mov	r2, sl
 8020296:	465b      	mov	r3, fp
 8020298:	f7e0 fc48 	bl	8000b2c <__aeabi_dcmplt>
 802029c:	2800      	cmp	r0, #0
 802029e:	f040 80b5 	bne.w	802040c <_dtoa_r+0x6c4>
 80202a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80202a4:	429d      	cmp	r5, r3
 80202a6:	d081      	beq.n	80201ac <_dtoa_r+0x464>
 80202a8:	4b30      	ldr	r3, [pc, #192]	; (802036c <_dtoa_r+0x624>)
 80202aa:	2200      	movs	r2, #0
 80202ac:	4650      	mov	r0, sl
 80202ae:	4659      	mov	r1, fp
 80202b0:	f7e0 f9ca 	bl	8000648 <__aeabi_dmul>
 80202b4:	4b2d      	ldr	r3, [pc, #180]	; (802036c <_dtoa_r+0x624>)
 80202b6:	4682      	mov	sl, r0
 80202b8:	468b      	mov	fp, r1
 80202ba:	4640      	mov	r0, r8
 80202bc:	4649      	mov	r1, r9
 80202be:	2200      	movs	r2, #0
 80202c0:	f7e0 f9c2 	bl	8000648 <__aeabi_dmul>
 80202c4:	4680      	mov	r8, r0
 80202c6:	4689      	mov	r9, r1
 80202c8:	e7c6      	b.n	8020258 <_dtoa_r+0x510>
 80202ca:	4650      	mov	r0, sl
 80202cc:	4659      	mov	r1, fp
 80202ce:	f7e0 f9bb 	bl	8000648 <__aeabi_dmul>
 80202d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80202d4:	9d01      	ldr	r5, [sp, #4]
 80202d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80202d8:	4682      	mov	sl, r0
 80202da:	468b      	mov	fp, r1
 80202dc:	4649      	mov	r1, r9
 80202de:	4640      	mov	r0, r8
 80202e0:	f7e0 fc62 	bl	8000ba8 <__aeabi_d2iz>
 80202e4:	4606      	mov	r6, r0
 80202e6:	f7e0 f945 	bl	8000574 <__aeabi_i2d>
 80202ea:	3630      	adds	r6, #48	; 0x30
 80202ec:	4602      	mov	r2, r0
 80202ee:	460b      	mov	r3, r1
 80202f0:	4640      	mov	r0, r8
 80202f2:	4649      	mov	r1, r9
 80202f4:	f7df fff0 	bl	80002d8 <__aeabi_dsub>
 80202f8:	f805 6b01 	strb.w	r6, [r5], #1
 80202fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80202fe:	429d      	cmp	r5, r3
 8020300:	4680      	mov	r8, r0
 8020302:	4689      	mov	r9, r1
 8020304:	f04f 0200 	mov.w	r2, #0
 8020308:	d124      	bne.n	8020354 <_dtoa_r+0x60c>
 802030a:	4b1b      	ldr	r3, [pc, #108]	; (8020378 <_dtoa_r+0x630>)
 802030c:	4650      	mov	r0, sl
 802030e:	4659      	mov	r1, fp
 8020310:	f7df ffe4 	bl	80002dc <__adddf3>
 8020314:	4602      	mov	r2, r0
 8020316:	460b      	mov	r3, r1
 8020318:	4640      	mov	r0, r8
 802031a:	4649      	mov	r1, r9
 802031c:	f7e0 fc24 	bl	8000b68 <__aeabi_dcmpgt>
 8020320:	2800      	cmp	r0, #0
 8020322:	d173      	bne.n	802040c <_dtoa_r+0x6c4>
 8020324:	4652      	mov	r2, sl
 8020326:	465b      	mov	r3, fp
 8020328:	4913      	ldr	r1, [pc, #76]	; (8020378 <_dtoa_r+0x630>)
 802032a:	2000      	movs	r0, #0
 802032c:	f7df ffd4 	bl	80002d8 <__aeabi_dsub>
 8020330:	4602      	mov	r2, r0
 8020332:	460b      	mov	r3, r1
 8020334:	4640      	mov	r0, r8
 8020336:	4649      	mov	r1, r9
 8020338:	f7e0 fbf8 	bl	8000b2c <__aeabi_dcmplt>
 802033c:	2800      	cmp	r0, #0
 802033e:	f43f af35 	beq.w	80201ac <_dtoa_r+0x464>
 8020342:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020344:	1e6b      	subs	r3, r5, #1
 8020346:	930f      	str	r3, [sp, #60]	; 0x3c
 8020348:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802034c:	2b30      	cmp	r3, #48	; 0x30
 802034e:	d0f8      	beq.n	8020342 <_dtoa_r+0x5fa>
 8020350:	9700      	str	r7, [sp, #0]
 8020352:	e049      	b.n	80203e8 <_dtoa_r+0x6a0>
 8020354:	4b05      	ldr	r3, [pc, #20]	; (802036c <_dtoa_r+0x624>)
 8020356:	f7e0 f977 	bl	8000648 <__aeabi_dmul>
 802035a:	4680      	mov	r8, r0
 802035c:	4689      	mov	r9, r1
 802035e:	e7bd      	b.n	80202dc <_dtoa_r+0x594>
 8020360:	080225a0 	.word	0x080225a0
 8020364:	08022578 	.word	0x08022578
 8020368:	3ff00000 	.word	0x3ff00000
 802036c:	40240000 	.word	0x40240000
 8020370:	401c0000 	.word	0x401c0000
 8020374:	40140000 	.word	0x40140000
 8020378:	3fe00000 	.word	0x3fe00000
 802037c:	9d01      	ldr	r5, [sp, #4]
 802037e:	4656      	mov	r6, sl
 8020380:	465f      	mov	r7, fp
 8020382:	4642      	mov	r2, r8
 8020384:	464b      	mov	r3, r9
 8020386:	4630      	mov	r0, r6
 8020388:	4639      	mov	r1, r7
 802038a:	f7e0 fa87 	bl	800089c <__aeabi_ddiv>
 802038e:	f7e0 fc0b 	bl	8000ba8 <__aeabi_d2iz>
 8020392:	4682      	mov	sl, r0
 8020394:	f7e0 f8ee 	bl	8000574 <__aeabi_i2d>
 8020398:	4642      	mov	r2, r8
 802039a:	464b      	mov	r3, r9
 802039c:	f7e0 f954 	bl	8000648 <__aeabi_dmul>
 80203a0:	4602      	mov	r2, r0
 80203a2:	460b      	mov	r3, r1
 80203a4:	4630      	mov	r0, r6
 80203a6:	4639      	mov	r1, r7
 80203a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80203ac:	f7df ff94 	bl	80002d8 <__aeabi_dsub>
 80203b0:	f805 6b01 	strb.w	r6, [r5], #1
 80203b4:	9e01      	ldr	r6, [sp, #4]
 80203b6:	9f03      	ldr	r7, [sp, #12]
 80203b8:	1bae      	subs	r6, r5, r6
 80203ba:	42b7      	cmp	r7, r6
 80203bc:	4602      	mov	r2, r0
 80203be:	460b      	mov	r3, r1
 80203c0:	d135      	bne.n	802042e <_dtoa_r+0x6e6>
 80203c2:	f7df ff8b 	bl	80002dc <__adddf3>
 80203c6:	4642      	mov	r2, r8
 80203c8:	464b      	mov	r3, r9
 80203ca:	4606      	mov	r6, r0
 80203cc:	460f      	mov	r7, r1
 80203ce:	f7e0 fbcb 	bl	8000b68 <__aeabi_dcmpgt>
 80203d2:	b9d0      	cbnz	r0, 802040a <_dtoa_r+0x6c2>
 80203d4:	4642      	mov	r2, r8
 80203d6:	464b      	mov	r3, r9
 80203d8:	4630      	mov	r0, r6
 80203da:	4639      	mov	r1, r7
 80203dc:	f7e0 fb9c 	bl	8000b18 <__aeabi_dcmpeq>
 80203e0:	b110      	cbz	r0, 80203e8 <_dtoa_r+0x6a0>
 80203e2:	f01a 0f01 	tst.w	sl, #1
 80203e6:	d110      	bne.n	802040a <_dtoa_r+0x6c2>
 80203e8:	4620      	mov	r0, r4
 80203ea:	ee18 1a10 	vmov	r1, s16
 80203ee:	f000 fd05 	bl	8020dfc <_Bfree>
 80203f2:	2300      	movs	r3, #0
 80203f4:	9800      	ldr	r0, [sp, #0]
 80203f6:	702b      	strb	r3, [r5, #0]
 80203f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80203fa:	3001      	adds	r0, #1
 80203fc:	6018      	str	r0, [r3, #0]
 80203fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020400:	2b00      	cmp	r3, #0
 8020402:	f43f acf1 	beq.w	801fde8 <_dtoa_r+0xa0>
 8020406:	601d      	str	r5, [r3, #0]
 8020408:	e4ee      	b.n	801fde8 <_dtoa_r+0xa0>
 802040a:	9f00      	ldr	r7, [sp, #0]
 802040c:	462b      	mov	r3, r5
 802040e:	461d      	mov	r5, r3
 8020410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020414:	2a39      	cmp	r2, #57	; 0x39
 8020416:	d106      	bne.n	8020426 <_dtoa_r+0x6de>
 8020418:	9a01      	ldr	r2, [sp, #4]
 802041a:	429a      	cmp	r2, r3
 802041c:	d1f7      	bne.n	802040e <_dtoa_r+0x6c6>
 802041e:	9901      	ldr	r1, [sp, #4]
 8020420:	2230      	movs	r2, #48	; 0x30
 8020422:	3701      	adds	r7, #1
 8020424:	700a      	strb	r2, [r1, #0]
 8020426:	781a      	ldrb	r2, [r3, #0]
 8020428:	3201      	adds	r2, #1
 802042a:	701a      	strb	r2, [r3, #0]
 802042c:	e790      	b.n	8020350 <_dtoa_r+0x608>
 802042e:	4ba6      	ldr	r3, [pc, #664]	; (80206c8 <_dtoa_r+0x980>)
 8020430:	2200      	movs	r2, #0
 8020432:	f7e0 f909 	bl	8000648 <__aeabi_dmul>
 8020436:	2200      	movs	r2, #0
 8020438:	2300      	movs	r3, #0
 802043a:	4606      	mov	r6, r0
 802043c:	460f      	mov	r7, r1
 802043e:	f7e0 fb6b 	bl	8000b18 <__aeabi_dcmpeq>
 8020442:	2800      	cmp	r0, #0
 8020444:	d09d      	beq.n	8020382 <_dtoa_r+0x63a>
 8020446:	e7cf      	b.n	80203e8 <_dtoa_r+0x6a0>
 8020448:	9a08      	ldr	r2, [sp, #32]
 802044a:	2a00      	cmp	r2, #0
 802044c:	f000 80d7 	beq.w	80205fe <_dtoa_r+0x8b6>
 8020450:	9a06      	ldr	r2, [sp, #24]
 8020452:	2a01      	cmp	r2, #1
 8020454:	f300 80ba 	bgt.w	80205cc <_dtoa_r+0x884>
 8020458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802045a:	2a00      	cmp	r2, #0
 802045c:	f000 80b2 	beq.w	80205c4 <_dtoa_r+0x87c>
 8020460:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020464:	9e07      	ldr	r6, [sp, #28]
 8020466:	9d04      	ldr	r5, [sp, #16]
 8020468:	9a04      	ldr	r2, [sp, #16]
 802046a:	441a      	add	r2, r3
 802046c:	9204      	str	r2, [sp, #16]
 802046e:	9a05      	ldr	r2, [sp, #20]
 8020470:	2101      	movs	r1, #1
 8020472:	441a      	add	r2, r3
 8020474:	4620      	mov	r0, r4
 8020476:	9205      	str	r2, [sp, #20]
 8020478:	f000 fd78 	bl	8020f6c <__i2b>
 802047c:	4607      	mov	r7, r0
 802047e:	2d00      	cmp	r5, #0
 8020480:	dd0c      	ble.n	802049c <_dtoa_r+0x754>
 8020482:	9b05      	ldr	r3, [sp, #20]
 8020484:	2b00      	cmp	r3, #0
 8020486:	dd09      	ble.n	802049c <_dtoa_r+0x754>
 8020488:	42ab      	cmp	r3, r5
 802048a:	9a04      	ldr	r2, [sp, #16]
 802048c:	bfa8      	it	ge
 802048e:	462b      	movge	r3, r5
 8020490:	1ad2      	subs	r2, r2, r3
 8020492:	9204      	str	r2, [sp, #16]
 8020494:	9a05      	ldr	r2, [sp, #20]
 8020496:	1aed      	subs	r5, r5, r3
 8020498:	1ad3      	subs	r3, r2, r3
 802049a:	9305      	str	r3, [sp, #20]
 802049c:	9b07      	ldr	r3, [sp, #28]
 802049e:	b31b      	cbz	r3, 80204e8 <_dtoa_r+0x7a0>
 80204a0:	9b08      	ldr	r3, [sp, #32]
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	f000 80af 	beq.w	8020606 <_dtoa_r+0x8be>
 80204a8:	2e00      	cmp	r6, #0
 80204aa:	dd13      	ble.n	80204d4 <_dtoa_r+0x78c>
 80204ac:	4639      	mov	r1, r7
 80204ae:	4632      	mov	r2, r6
 80204b0:	4620      	mov	r0, r4
 80204b2:	f000 fe1b 	bl	80210ec <__pow5mult>
 80204b6:	ee18 2a10 	vmov	r2, s16
 80204ba:	4601      	mov	r1, r0
 80204bc:	4607      	mov	r7, r0
 80204be:	4620      	mov	r0, r4
 80204c0:	f000 fd6a 	bl	8020f98 <__multiply>
 80204c4:	ee18 1a10 	vmov	r1, s16
 80204c8:	4680      	mov	r8, r0
 80204ca:	4620      	mov	r0, r4
 80204cc:	f000 fc96 	bl	8020dfc <_Bfree>
 80204d0:	ee08 8a10 	vmov	s16, r8
 80204d4:	9b07      	ldr	r3, [sp, #28]
 80204d6:	1b9a      	subs	r2, r3, r6
 80204d8:	d006      	beq.n	80204e8 <_dtoa_r+0x7a0>
 80204da:	ee18 1a10 	vmov	r1, s16
 80204de:	4620      	mov	r0, r4
 80204e0:	f000 fe04 	bl	80210ec <__pow5mult>
 80204e4:	ee08 0a10 	vmov	s16, r0
 80204e8:	2101      	movs	r1, #1
 80204ea:	4620      	mov	r0, r4
 80204ec:	f000 fd3e 	bl	8020f6c <__i2b>
 80204f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	4606      	mov	r6, r0
 80204f6:	f340 8088 	ble.w	802060a <_dtoa_r+0x8c2>
 80204fa:	461a      	mov	r2, r3
 80204fc:	4601      	mov	r1, r0
 80204fe:	4620      	mov	r0, r4
 8020500:	f000 fdf4 	bl	80210ec <__pow5mult>
 8020504:	9b06      	ldr	r3, [sp, #24]
 8020506:	2b01      	cmp	r3, #1
 8020508:	4606      	mov	r6, r0
 802050a:	f340 8081 	ble.w	8020610 <_dtoa_r+0x8c8>
 802050e:	f04f 0800 	mov.w	r8, #0
 8020512:	6933      	ldr	r3, [r6, #16]
 8020514:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020518:	6918      	ldr	r0, [r3, #16]
 802051a:	f000 fcd7 	bl	8020ecc <__hi0bits>
 802051e:	f1c0 0020 	rsb	r0, r0, #32
 8020522:	9b05      	ldr	r3, [sp, #20]
 8020524:	4418      	add	r0, r3
 8020526:	f010 001f 	ands.w	r0, r0, #31
 802052a:	f000 8092 	beq.w	8020652 <_dtoa_r+0x90a>
 802052e:	f1c0 0320 	rsb	r3, r0, #32
 8020532:	2b04      	cmp	r3, #4
 8020534:	f340 808a 	ble.w	802064c <_dtoa_r+0x904>
 8020538:	f1c0 001c 	rsb	r0, r0, #28
 802053c:	9b04      	ldr	r3, [sp, #16]
 802053e:	4403      	add	r3, r0
 8020540:	9304      	str	r3, [sp, #16]
 8020542:	9b05      	ldr	r3, [sp, #20]
 8020544:	4403      	add	r3, r0
 8020546:	4405      	add	r5, r0
 8020548:	9305      	str	r3, [sp, #20]
 802054a:	9b04      	ldr	r3, [sp, #16]
 802054c:	2b00      	cmp	r3, #0
 802054e:	dd07      	ble.n	8020560 <_dtoa_r+0x818>
 8020550:	ee18 1a10 	vmov	r1, s16
 8020554:	461a      	mov	r2, r3
 8020556:	4620      	mov	r0, r4
 8020558:	f000 fe22 	bl	80211a0 <__lshift>
 802055c:	ee08 0a10 	vmov	s16, r0
 8020560:	9b05      	ldr	r3, [sp, #20]
 8020562:	2b00      	cmp	r3, #0
 8020564:	dd05      	ble.n	8020572 <_dtoa_r+0x82a>
 8020566:	4631      	mov	r1, r6
 8020568:	461a      	mov	r2, r3
 802056a:	4620      	mov	r0, r4
 802056c:	f000 fe18 	bl	80211a0 <__lshift>
 8020570:	4606      	mov	r6, r0
 8020572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020574:	2b00      	cmp	r3, #0
 8020576:	d06e      	beq.n	8020656 <_dtoa_r+0x90e>
 8020578:	ee18 0a10 	vmov	r0, s16
 802057c:	4631      	mov	r1, r6
 802057e:	f000 fe7f 	bl	8021280 <__mcmp>
 8020582:	2800      	cmp	r0, #0
 8020584:	da67      	bge.n	8020656 <_dtoa_r+0x90e>
 8020586:	9b00      	ldr	r3, [sp, #0]
 8020588:	3b01      	subs	r3, #1
 802058a:	ee18 1a10 	vmov	r1, s16
 802058e:	9300      	str	r3, [sp, #0]
 8020590:	220a      	movs	r2, #10
 8020592:	2300      	movs	r3, #0
 8020594:	4620      	mov	r0, r4
 8020596:	f000 fc53 	bl	8020e40 <__multadd>
 802059a:	9b08      	ldr	r3, [sp, #32]
 802059c:	ee08 0a10 	vmov	s16, r0
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	f000 81b1 	beq.w	8020908 <_dtoa_r+0xbc0>
 80205a6:	2300      	movs	r3, #0
 80205a8:	4639      	mov	r1, r7
 80205aa:	220a      	movs	r2, #10
 80205ac:	4620      	mov	r0, r4
 80205ae:	f000 fc47 	bl	8020e40 <__multadd>
 80205b2:	9b02      	ldr	r3, [sp, #8]
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	4607      	mov	r7, r0
 80205b8:	f300 808e 	bgt.w	80206d8 <_dtoa_r+0x990>
 80205bc:	9b06      	ldr	r3, [sp, #24]
 80205be:	2b02      	cmp	r3, #2
 80205c0:	dc51      	bgt.n	8020666 <_dtoa_r+0x91e>
 80205c2:	e089      	b.n	80206d8 <_dtoa_r+0x990>
 80205c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80205ca:	e74b      	b.n	8020464 <_dtoa_r+0x71c>
 80205cc:	9b03      	ldr	r3, [sp, #12]
 80205ce:	1e5e      	subs	r6, r3, #1
 80205d0:	9b07      	ldr	r3, [sp, #28]
 80205d2:	42b3      	cmp	r3, r6
 80205d4:	bfbf      	itttt	lt
 80205d6:	9b07      	ldrlt	r3, [sp, #28]
 80205d8:	9607      	strlt	r6, [sp, #28]
 80205da:	1af2      	sublt	r2, r6, r3
 80205dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80205de:	bfb6      	itet	lt
 80205e0:	189b      	addlt	r3, r3, r2
 80205e2:	1b9e      	subge	r6, r3, r6
 80205e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80205e6:	9b03      	ldr	r3, [sp, #12]
 80205e8:	bfb8      	it	lt
 80205ea:	2600      	movlt	r6, #0
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	bfb7      	itett	lt
 80205f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80205f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80205f8:	1a9d      	sublt	r5, r3, r2
 80205fa:	2300      	movlt	r3, #0
 80205fc:	e734      	b.n	8020468 <_dtoa_r+0x720>
 80205fe:	9e07      	ldr	r6, [sp, #28]
 8020600:	9d04      	ldr	r5, [sp, #16]
 8020602:	9f08      	ldr	r7, [sp, #32]
 8020604:	e73b      	b.n	802047e <_dtoa_r+0x736>
 8020606:	9a07      	ldr	r2, [sp, #28]
 8020608:	e767      	b.n	80204da <_dtoa_r+0x792>
 802060a:	9b06      	ldr	r3, [sp, #24]
 802060c:	2b01      	cmp	r3, #1
 802060e:	dc18      	bgt.n	8020642 <_dtoa_r+0x8fa>
 8020610:	f1ba 0f00 	cmp.w	sl, #0
 8020614:	d115      	bne.n	8020642 <_dtoa_r+0x8fa>
 8020616:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802061a:	b993      	cbnz	r3, 8020642 <_dtoa_r+0x8fa>
 802061c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020620:	0d1b      	lsrs	r3, r3, #20
 8020622:	051b      	lsls	r3, r3, #20
 8020624:	b183      	cbz	r3, 8020648 <_dtoa_r+0x900>
 8020626:	9b04      	ldr	r3, [sp, #16]
 8020628:	3301      	adds	r3, #1
 802062a:	9304      	str	r3, [sp, #16]
 802062c:	9b05      	ldr	r3, [sp, #20]
 802062e:	3301      	adds	r3, #1
 8020630:	9305      	str	r3, [sp, #20]
 8020632:	f04f 0801 	mov.w	r8, #1
 8020636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020638:	2b00      	cmp	r3, #0
 802063a:	f47f af6a 	bne.w	8020512 <_dtoa_r+0x7ca>
 802063e:	2001      	movs	r0, #1
 8020640:	e76f      	b.n	8020522 <_dtoa_r+0x7da>
 8020642:	f04f 0800 	mov.w	r8, #0
 8020646:	e7f6      	b.n	8020636 <_dtoa_r+0x8ee>
 8020648:	4698      	mov	r8, r3
 802064a:	e7f4      	b.n	8020636 <_dtoa_r+0x8ee>
 802064c:	f43f af7d 	beq.w	802054a <_dtoa_r+0x802>
 8020650:	4618      	mov	r0, r3
 8020652:	301c      	adds	r0, #28
 8020654:	e772      	b.n	802053c <_dtoa_r+0x7f4>
 8020656:	9b03      	ldr	r3, [sp, #12]
 8020658:	2b00      	cmp	r3, #0
 802065a:	dc37      	bgt.n	80206cc <_dtoa_r+0x984>
 802065c:	9b06      	ldr	r3, [sp, #24]
 802065e:	2b02      	cmp	r3, #2
 8020660:	dd34      	ble.n	80206cc <_dtoa_r+0x984>
 8020662:	9b03      	ldr	r3, [sp, #12]
 8020664:	9302      	str	r3, [sp, #8]
 8020666:	9b02      	ldr	r3, [sp, #8]
 8020668:	b96b      	cbnz	r3, 8020686 <_dtoa_r+0x93e>
 802066a:	4631      	mov	r1, r6
 802066c:	2205      	movs	r2, #5
 802066e:	4620      	mov	r0, r4
 8020670:	f000 fbe6 	bl	8020e40 <__multadd>
 8020674:	4601      	mov	r1, r0
 8020676:	4606      	mov	r6, r0
 8020678:	ee18 0a10 	vmov	r0, s16
 802067c:	f000 fe00 	bl	8021280 <__mcmp>
 8020680:	2800      	cmp	r0, #0
 8020682:	f73f adbb 	bgt.w	80201fc <_dtoa_r+0x4b4>
 8020686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020688:	9d01      	ldr	r5, [sp, #4]
 802068a:	43db      	mvns	r3, r3
 802068c:	9300      	str	r3, [sp, #0]
 802068e:	f04f 0800 	mov.w	r8, #0
 8020692:	4631      	mov	r1, r6
 8020694:	4620      	mov	r0, r4
 8020696:	f000 fbb1 	bl	8020dfc <_Bfree>
 802069a:	2f00      	cmp	r7, #0
 802069c:	f43f aea4 	beq.w	80203e8 <_dtoa_r+0x6a0>
 80206a0:	f1b8 0f00 	cmp.w	r8, #0
 80206a4:	d005      	beq.n	80206b2 <_dtoa_r+0x96a>
 80206a6:	45b8      	cmp	r8, r7
 80206a8:	d003      	beq.n	80206b2 <_dtoa_r+0x96a>
 80206aa:	4641      	mov	r1, r8
 80206ac:	4620      	mov	r0, r4
 80206ae:	f000 fba5 	bl	8020dfc <_Bfree>
 80206b2:	4639      	mov	r1, r7
 80206b4:	4620      	mov	r0, r4
 80206b6:	f000 fba1 	bl	8020dfc <_Bfree>
 80206ba:	e695      	b.n	80203e8 <_dtoa_r+0x6a0>
 80206bc:	2600      	movs	r6, #0
 80206be:	4637      	mov	r7, r6
 80206c0:	e7e1      	b.n	8020686 <_dtoa_r+0x93e>
 80206c2:	9700      	str	r7, [sp, #0]
 80206c4:	4637      	mov	r7, r6
 80206c6:	e599      	b.n	80201fc <_dtoa_r+0x4b4>
 80206c8:	40240000 	.word	0x40240000
 80206cc:	9b08      	ldr	r3, [sp, #32]
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	f000 80ca 	beq.w	8020868 <_dtoa_r+0xb20>
 80206d4:	9b03      	ldr	r3, [sp, #12]
 80206d6:	9302      	str	r3, [sp, #8]
 80206d8:	2d00      	cmp	r5, #0
 80206da:	dd05      	ble.n	80206e8 <_dtoa_r+0x9a0>
 80206dc:	4639      	mov	r1, r7
 80206de:	462a      	mov	r2, r5
 80206e0:	4620      	mov	r0, r4
 80206e2:	f000 fd5d 	bl	80211a0 <__lshift>
 80206e6:	4607      	mov	r7, r0
 80206e8:	f1b8 0f00 	cmp.w	r8, #0
 80206ec:	d05b      	beq.n	80207a6 <_dtoa_r+0xa5e>
 80206ee:	6879      	ldr	r1, [r7, #4]
 80206f0:	4620      	mov	r0, r4
 80206f2:	f000 fb43 	bl	8020d7c <_Balloc>
 80206f6:	4605      	mov	r5, r0
 80206f8:	b928      	cbnz	r0, 8020706 <_dtoa_r+0x9be>
 80206fa:	4b87      	ldr	r3, [pc, #540]	; (8020918 <_dtoa_r+0xbd0>)
 80206fc:	4602      	mov	r2, r0
 80206fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020702:	f7ff bb3b 	b.w	801fd7c <_dtoa_r+0x34>
 8020706:	693a      	ldr	r2, [r7, #16]
 8020708:	3202      	adds	r2, #2
 802070a:	0092      	lsls	r2, r2, #2
 802070c:	f107 010c 	add.w	r1, r7, #12
 8020710:	300c      	adds	r0, #12
 8020712:	f7fe fca7 	bl	801f064 <memcpy>
 8020716:	2201      	movs	r2, #1
 8020718:	4629      	mov	r1, r5
 802071a:	4620      	mov	r0, r4
 802071c:	f000 fd40 	bl	80211a0 <__lshift>
 8020720:	9b01      	ldr	r3, [sp, #4]
 8020722:	f103 0901 	add.w	r9, r3, #1
 8020726:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802072a:	4413      	add	r3, r2
 802072c:	9305      	str	r3, [sp, #20]
 802072e:	f00a 0301 	and.w	r3, sl, #1
 8020732:	46b8      	mov	r8, r7
 8020734:	9304      	str	r3, [sp, #16]
 8020736:	4607      	mov	r7, r0
 8020738:	4631      	mov	r1, r6
 802073a:	ee18 0a10 	vmov	r0, s16
 802073e:	f7ff fa75 	bl	801fc2c <quorem>
 8020742:	4641      	mov	r1, r8
 8020744:	9002      	str	r0, [sp, #8]
 8020746:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802074a:	ee18 0a10 	vmov	r0, s16
 802074e:	f000 fd97 	bl	8021280 <__mcmp>
 8020752:	463a      	mov	r2, r7
 8020754:	9003      	str	r0, [sp, #12]
 8020756:	4631      	mov	r1, r6
 8020758:	4620      	mov	r0, r4
 802075a:	f000 fdad 	bl	80212b8 <__mdiff>
 802075e:	68c2      	ldr	r2, [r0, #12]
 8020760:	f109 3bff 	add.w	fp, r9, #4294967295
 8020764:	4605      	mov	r5, r0
 8020766:	bb02      	cbnz	r2, 80207aa <_dtoa_r+0xa62>
 8020768:	4601      	mov	r1, r0
 802076a:	ee18 0a10 	vmov	r0, s16
 802076e:	f000 fd87 	bl	8021280 <__mcmp>
 8020772:	4602      	mov	r2, r0
 8020774:	4629      	mov	r1, r5
 8020776:	4620      	mov	r0, r4
 8020778:	9207      	str	r2, [sp, #28]
 802077a:	f000 fb3f 	bl	8020dfc <_Bfree>
 802077e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020782:	ea43 0102 	orr.w	r1, r3, r2
 8020786:	9b04      	ldr	r3, [sp, #16]
 8020788:	430b      	orrs	r3, r1
 802078a:	464d      	mov	r5, r9
 802078c:	d10f      	bne.n	80207ae <_dtoa_r+0xa66>
 802078e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020792:	d02a      	beq.n	80207ea <_dtoa_r+0xaa2>
 8020794:	9b03      	ldr	r3, [sp, #12]
 8020796:	2b00      	cmp	r3, #0
 8020798:	dd02      	ble.n	80207a0 <_dtoa_r+0xa58>
 802079a:	9b02      	ldr	r3, [sp, #8]
 802079c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80207a0:	f88b a000 	strb.w	sl, [fp]
 80207a4:	e775      	b.n	8020692 <_dtoa_r+0x94a>
 80207a6:	4638      	mov	r0, r7
 80207a8:	e7ba      	b.n	8020720 <_dtoa_r+0x9d8>
 80207aa:	2201      	movs	r2, #1
 80207ac:	e7e2      	b.n	8020774 <_dtoa_r+0xa2c>
 80207ae:	9b03      	ldr	r3, [sp, #12]
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	db04      	blt.n	80207be <_dtoa_r+0xa76>
 80207b4:	9906      	ldr	r1, [sp, #24]
 80207b6:	430b      	orrs	r3, r1
 80207b8:	9904      	ldr	r1, [sp, #16]
 80207ba:	430b      	orrs	r3, r1
 80207bc:	d122      	bne.n	8020804 <_dtoa_r+0xabc>
 80207be:	2a00      	cmp	r2, #0
 80207c0:	ddee      	ble.n	80207a0 <_dtoa_r+0xa58>
 80207c2:	ee18 1a10 	vmov	r1, s16
 80207c6:	2201      	movs	r2, #1
 80207c8:	4620      	mov	r0, r4
 80207ca:	f000 fce9 	bl	80211a0 <__lshift>
 80207ce:	4631      	mov	r1, r6
 80207d0:	ee08 0a10 	vmov	s16, r0
 80207d4:	f000 fd54 	bl	8021280 <__mcmp>
 80207d8:	2800      	cmp	r0, #0
 80207da:	dc03      	bgt.n	80207e4 <_dtoa_r+0xa9c>
 80207dc:	d1e0      	bne.n	80207a0 <_dtoa_r+0xa58>
 80207de:	f01a 0f01 	tst.w	sl, #1
 80207e2:	d0dd      	beq.n	80207a0 <_dtoa_r+0xa58>
 80207e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80207e8:	d1d7      	bne.n	802079a <_dtoa_r+0xa52>
 80207ea:	2339      	movs	r3, #57	; 0x39
 80207ec:	f88b 3000 	strb.w	r3, [fp]
 80207f0:	462b      	mov	r3, r5
 80207f2:	461d      	mov	r5, r3
 80207f4:	3b01      	subs	r3, #1
 80207f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80207fa:	2a39      	cmp	r2, #57	; 0x39
 80207fc:	d071      	beq.n	80208e2 <_dtoa_r+0xb9a>
 80207fe:	3201      	adds	r2, #1
 8020800:	701a      	strb	r2, [r3, #0]
 8020802:	e746      	b.n	8020692 <_dtoa_r+0x94a>
 8020804:	2a00      	cmp	r2, #0
 8020806:	dd07      	ble.n	8020818 <_dtoa_r+0xad0>
 8020808:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802080c:	d0ed      	beq.n	80207ea <_dtoa_r+0xaa2>
 802080e:	f10a 0301 	add.w	r3, sl, #1
 8020812:	f88b 3000 	strb.w	r3, [fp]
 8020816:	e73c      	b.n	8020692 <_dtoa_r+0x94a>
 8020818:	9b05      	ldr	r3, [sp, #20]
 802081a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802081e:	4599      	cmp	r9, r3
 8020820:	d047      	beq.n	80208b2 <_dtoa_r+0xb6a>
 8020822:	ee18 1a10 	vmov	r1, s16
 8020826:	2300      	movs	r3, #0
 8020828:	220a      	movs	r2, #10
 802082a:	4620      	mov	r0, r4
 802082c:	f000 fb08 	bl	8020e40 <__multadd>
 8020830:	45b8      	cmp	r8, r7
 8020832:	ee08 0a10 	vmov	s16, r0
 8020836:	f04f 0300 	mov.w	r3, #0
 802083a:	f04f 020a 	mov.w	r2, #10
 802083e:	4641      	mov	r1, r8
 8020840:	4620      	mov	r0, r4
 8020842:	d106      	bne.n	8020852 <_dtoa_r+0xb0a>
 8020844:	f000 fafc 	bl	8020e40 <__multadd>
 8020848:	4680      	mov	r8, r0
 802084a:	4607      	mov	r7, r0
 802084c:	f109 0901 	add.w	r9, r9, #1
 8020850:	e772      	b.n	8020738 <_dtoa_r+0x9f0>
 8020852:	f000 faf5 	bl	8020e40 <__multadd>
 8020856:	4639      	mov	r1, r7
 8020858:	4680      	mov	r8, r0
 802085a:	2300      	movs	r3, #0
 802085c:	220a      	movs	r2, #10
 802085e:	4620      	mov	r0, r4
 8020860:	f000 faee 	bl	8020e40 <__multadd>
 8020864:	4607      	mov	r7, r0
 8020866:	e7f1      	b.n	802084c <_dtoa_r+0xb04>
 8020868:	9b03      	ldr	r3, [sp, #12]
 802086a:	9302      	str	r3, [sp, #8]
 802086c:	9d01      	ldr	r5, [sp, #4]
 802086e:	ee18 0a10 	vmov	r0, s16
 8020872:	4631      	mov	r1, r6
 8020874:	f7ff f9da 	bl	801fc2c <quorem>
 8020878:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802087c:	9b01      	ldr	r3, [sp, #4]
 802087e:	f805 ab01 	strb.w	sl, [r5], #1
 8020882:	1aea      	subs	r2, r5, r3
 8020884:	9b02      	ldr	r3, [sp, #8]
 8020886:	4293      	cmp	r3, r2
 8020888:	dd09      	ble.n	802089e <_dtoa_r+0xb56>
 802088a:	ee18 1a10 	vmov	r1, s16
 802088e:	2300      	movs	r3, #0
 8020890:	220a      	movs	r2, #10
 8020892:	4620      	mov	r0, r4
 8020894:	f000 fad4 	bl	8020e40 <__multadd>
 8020898:	ee08 0a10 	vmov	s16, r0
 802089c:	e7e7      	b.n	802086e <_dtoa_r+0xb26>
 802089e:	9b02      	ldr	r3, [sp, #8]
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	bfc8      	it	gt
 80208a4:	461d      	movgt	r5, r3
 80208a6:	9b01      	ldr	r3, [sp, #4]
 80208a8:	bfd8      	it	le
 80208aa:	2501      	movle	r5, #1
 80208ac:	441d      	add	r5, r3
 80208ae:	f04f 0800 	mov.w	r8, #0
 80208b2:	ee18 1a10 	vmov	r1, s16
 80208b6:	2201      	movs	r2, #1
 80208b8:	4620      	mov	r0, r4
 80208ba:	f000 fc71 	bl	80211a0 <__lshift>
 80208be:	4631      	mov	r1, r6
 80208c0:	ee08 0a10 	vmov	s16, r0
 80208c4:	f000 fcdc 	bl	8021280 <__mcmp>
 80208c8:	2800      	cmp	r0, #0
 80208ca:	dc91      	bgt.n	80207f0 <_dtoa_r+0xaa8>
 80208cc:	d102      	bne.n	80208d4 <_dtoa_r+0xb8c>
 80208ce:	f01a 0f01 	tst.w	sl, #1
 80208d2:	d18d      	bne.n	80207f0 <_dtoa_r+0xaa8>
 80208d4:	462b      	mov	r3, r5
 80208d6:	461d      	mov	r5, r3
 80208d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80208dc:	2a30      	cmp	r2, #48	; 0x30
 80208de:	d0fa      	beq.n	80208d6 <_dtoa_r+0xb8e>
 80208e0:	e6d7      	b.n	8020692 <_dtoa_r+0x94a>
 80208e2:	9a01      	ldr	r2, [sp, #4]
 80208e4:	429a      	cmp	r2, r3
 80208e6:	d184      	bne.n	80207f2 <_dtoa_r+0xaaa>
 80208e8:	9b00      	ldr	r3, [sp, #0]
 80208ea:	3301      	adds	r3, #1
 80208ec:	9300      	str	r3, [sp, #0]
 80208ee:	2331      	movs	r3, #49	; 0x31
 80208f0:	7013      	strb	r3, [r2, #0]
 80208f2:	e6ce      	b.n	8020692 <_dtoa_r+0x94a>
 80208f4:	4b09      	ldr	r3, [pc, #36]	; (802091c <_dtoa_r+0xbd4>)
 80208f6:	f7ff ba95 	b.w	801fe24 <_dtoa_r+0xdc>
 80208fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208fc:	2b00      	cmp	r3, #0
 80208fe:	f47f aa6e 	bne.w	801fdde <_dtoa_r+0x96>
 8020902:	4b07      	ldr	r3, [pc, #28]	; (8020920 <_dtoa_r+0xbd8>)
 8020904:	f7ff ba8e 	b.w	801fe24 <_dtoa_r+0xdc>
 8020908:	9b02      	ldr	r3, [sp, #8]
 802090a:	2b00      	cmp	r3, #0
 802090c:	dcae      	bgt.n	802086c <_dtoa_r+0xb24>
 802090e:	9b06      	ldr	r3, [sp, #24]
 8020910:	2b02      	cmp	r3, #2
 8020912:	f73f aea8 	bgt.w	8020666 <_dtoa_r+0x91e>
 8020916:	e7a9      	b.n	802086c <_dtoa_r+0xb24>
 8020918:	080224a7 	.word	0x080224a7
 802091c:	08022404 	.word	0x08022404
 8020920:	08022428 	.word	0x08022428

08020924 <__sflush_r>:
 8020924:	898a      	ldrh	r2, [r1, #12]
 8020926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802092a:	4605      	mov	r5, r0
 802092c:	0710      	lsls	r0, r2, #28
 802092e:	460c      	mov	r4, r1
 8020930:	d458      	bmi.n	80209e4 <__sflush_r+0xc0>
 8020932:	684b      	ldr	r3, [r1, #4]
 8020934:	2b00      	cmp	r3, #0
 8020936:	dc05      	bgt.n	8020944 <__sflush_r+0x20>
 8020938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802093a:	2b00      	cmp	r3, #0
 802093c:	dc02      	bgt.n	8020944 <__sflush_r+0x20>
 802093e:	2000      	movs	r0, #0
 8020940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020946:	2e00      	cmp	r6, #0
 8020948:	d0f9      	beq.n	802093e <__sflush_r+0x1a>
 802094a:	2300      	movs	r3, #0
 802094c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020950:	682f      	ldr	r7, [r5, #0]
 8020952:	602b      	str	r3, [r5, #0]
 8020954:	d032      	beq.n	80209bc <__sflush_r+0x98>
 8020956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020958:	89a3      	ldrh	r3, [r4, #12]
 802095a:	075a      	lsls	r2, r3, #29
 802095c:	d505      	bpl.n	802096a <__sflush_r+0x46>
 802095e:	6863      	ldr	r3, [r4, #4]
 8020960:	1ac0      	subs	r0, r0, r3
 8020962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020964:	b10b      	cbz	r3, 802096a <__sflush_r+0x46>
 8020966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020968:	1ac0      	subs	r0, r0, r3
 802096a:	2300      	movs	r3, #0
 802096c:	4602      	mov	r2, r0
 802096e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020970:	6a21      	ldr	r1, [r4, #32]
 8020972:	4628      	mov	r0, r5
 8020974:	47b0      	blx	r6
 8020976:	1c43      	adds	r3, r0, #1
 8020978:	89a3      	ldrh	r3, [r4, #12]
 802097a:	d106      	bne.n	802098a <__sflush_r+0x66>
 802097c:	6829      	ldr	r1, [r5, #0]
 802097e:	291d      	cmp	r1, #29
 8020980:	d82c      	bhi.n	80209dc <__sflush_r+0xb8>
 8020982:	4a2a      	ldr	r2, [pc, #168]	; (8020a2c <__sflush_r+0x108>)
 8020984:	40ca      	lsrs	r2, r1
 8020986:	07d6      	lsls	r6, r2, #31
 8020988:	d528      	bpl.n	80209dc <__sflush_r+0xb8>
 802098a:	2200      	movs	r2, #0
 802098c:	6062      	str	r2, [r4, #4]
 802098e:	04d9      	lsls	r1, r3, #19
 8020990:	6922      	ldr	r2, [r4, #16]
 8020992:	6022      	str	r2, [r4, #0]
 8020994:	d504      	bpl.n	80209a0 <__sflush_r+0x7c>
 8020996:	1c42      	adds	r2, r0, #1
 8020998:	d101      	bne.n	802099e <__sflush_r+0x7a>
 802099a:	682b      	ldr	r3, [r5, #0]
 802099c:	b903      	cbnz	r3, 80209a0 <__sflush_r+0x7c>
 802099e:	6560      	str	r0, [r4, #84]	; 0x54
 80209a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80209a2:	602f      	str	r7, [r5, #0]
 80209a4:	2900      	cmp	r1, #0
 80209a6:	d0ca      	beq.n	802093e <__sflush_r+0x1a>
 80209a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80209ac:	4299      	cmp	r1, r3
 80209ae:	d002      	beq.n	80209b6 <__sflush_r+0x92>
 80209b0:	4628      	mov	r0, r5
 80209b2:	f000 fd7d 	bl	80214b0 <_free_r>
 80209b6:	2000      	movs	r0, #0
 80209b8:	6360      	str	r0, [r4, #52]	; 0x34
 80209ba:	e7c1      	b.n	8020940 <__sflush_r+0x1c>
 80209bc:	6a21      	ldr	r1, [r4, #32]
 80209be:	2301      	movs	r3, #1
 80209c0:	4628      	mov	r0, r5
 80209c2:	47b0      	blx	r6
 80209c4:	1c41      	adds	r1, r0, #1
 80209c6:	d1c7      	bne.n	8020958 <__sflush_r+0x34>
 80209c8:	682b      	ldr	r3, [r5, #0]
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d0c4      	beq.n	8020958 <__sflush_r+0x34>
 80209ce:	2b1d      	cmp	r3, #29
 80209d0:	d001      	beq.n	80209d6 <__sflush_r+0xb2>
 80209d2:	2b16      	cmp	r3, #22
 80209d4:	d101      	bne.n	80209da <__sflush_r+0xb6>
 80209d6:	602f      	str	r7, [r5, #0]
 80209d8:	e7b1      	b.n	802093e <__sflush_r+0x1a>
 80209da:	89a3      	ldrh	r3, [r4, #12]
 80209dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80209e0:	81a3      	strh	r3, [r4, #12]
 80209e2:	e7ad      	b.n	8020940 <__sflush_r+0x1c>
 80209e4:	690f      	ldr	r7, [r1, #16]
 80209e6:	2f00      	cmp	r7, #0
 80209e8:	d0a9      	beq.n	802093e <__sflush_r+0x1a>
 80209ea:	0793      	lsls	r3, r2, #30
 80209ec:	680e      	ldr	r6, [r1, #0]
 80209ee:	bf08      	it	eq
 80209f0:	694b      	ldreq	r3, [r1, #20]
 80209f2:	600f      	str	r7, [r1, #0]
 80209f4:	bf18      	it	ne
 80209f6:	2300      	movne	r3, #0
 80209f8:	eba6 0807 	sub.w	r8, r6, r7
 80209fc:	608b      	str	r3, [r1, #8]
 80209fe:	f1b8 0f00 	cmp.w	r8, #0
 8020a02:	dd9c      	ble.n	802093e <__sflush_r+0x1a>
 8020a04:	6a21      	ldr	r1, [r4, #32]
 8020a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020a08:	4643      	mov	r3, r8
 8020a0a:	463a      	mov	r2, r7
 8020a0c:	4628      	mov	r0, r5
 8020a0e:	47b0      	blx	r6
 8020a10:	2800      	cmp	r0, #0
 8020a12:	dc06      	bgt.n	8020a22 <__sflush_r+0xfe>
 8020a14:	89a3      	ldrh	r3, [r4, #12]
 8020a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a1a:	81a3      	strh	r3, [r4, #12]
 8020a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8020a20:	e78e      	b.n	8020940 <__sflush_r+0x1c>
 8020a22:	4407      	add	r7, r0
 8020a24:	eba8 0800 	sub.w	r8, r8, r0
 8020a28:	e7e9      	b.n	80209fe <__sflush_r+0xda>
 8020a2a:	bf00      	nop
 8020a2c:	20400001 	.word	0x20400001

08020a30 <_fflush_r>:
 8020a30:	b538      	push	{r3, r4, r5, lr}
 8020a32:	690b      	ldr	r3, [r1, #16]
 8020a34:	4605      	mov	r5, r0
 8020a36:	460c      	mov	r4, r1
 8020a38:	b913      	cbnz	r3, 8020a40 <_fflush_r+0x10>
 8020a3a:	2500      	movs	r5, #0
 8020a3c:	4628      	mov	r0, r5
 8020a3e:	bd38      	pop	{r3, r4, r5, pc}
 8020a40:	b118      	cbz	r0, 8020a4a <_fflush_r+0x1a>
 8020a42:	6983      	ldr	r3, [r0, #24]
 8020a44:	b90b      	cbnz	r3, 8020a4a <_fflush_r+0x1a>
 8020a46:	f000 f887 	bl	8020b58 <__sinit>
 8020a4a:	4b14      	ldr	r3, [pc, #80]	; (8020a9c <_fflush_r+0x6c>)
 8020a4c:	429c      	cmp	r4, r3
 8020a4e:	d11b      	bne.n	8020a88 <_fflush_r+0x58>
 8020a50:	686c      	ldr	r4, [r5, #4]
 8020a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	d0ef      	beq.n	8020a3a <_fflush_r+0xa>
 8020a5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020a5c:	07d0      	lsls	r0, r2, #31
 8020a5e:	d404      	bmi.n	8020a6a <_fflush_r+0x3a>
 8020a60:	0599      	lsls	r1, r3, #22
 8020a62:	d402      	bmi.n	8020a6a <_fflush_r+0x3a>
 8020a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a66:	f000 f91a 	bl	8020c9e <__retarget_lock_acquire_recursive>
 8020a6a:	4628      	mov	r0, r5
 8020a6c:	4621      	mov	r1, r4
 8020a6e:	f7ff ff59 	bl	8020924 <__sflush_r>
 8020a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020a74:	07da      	lsls	r2, r3, #31
 8020a76:	4605      	mov	r5, r0
 8020a78:	d4e0      	bmi.n	8020a3c <_fflush_r+0xc>
 8020a7a:	89a3      	ldrh	r3, [r4, #12]
 8020a7c:	059b      	lsls	r3, r3, #22
 8020a7e:	d4dd      	bmi.n	8020a3c <_fflush_r+0xc>
 8020a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a82:	f000 f90d 	bl	8020ca0 <__retarget_lock_release_recursive>
 8020a86:	e7d9      	b.n	8020a3c <_fflush_r+0xc>
 8020a88:	4b05      	ldr	r3, [pc, #20]	; (8020aa0 <_fflush_r+0x70>)
 8020a8a:	429c      	cmp	r4, r3
 8020a8c:	d101      	bne.n	8020a92 <_fflush_r+0x62>
 8020a8e:	68ac      	ldr	r4, [r5, #8]
 8020a90:	e7df      	b.n	8020a52 <_fflush_r+0x22>
 8020a92:	4b04      	ldr	r3, [pc, #16]	; (8020aa4 <_fflush_r+0x74>)
 8020a94:	429c      	cmp	r4, r3
 8020a96:	bf08      	it	eq
 8020a98:	68ec      	ldreq	r4, [r5, #12]
 8020a9a:	e7da      	b.n	8020a52 <_fflush_r+0x22>
 8020a9c:	080224d8 	.word	0x080224d8
 8020aa0:	080224f8 	.word	0x080224f8
 8020aa4:	080224b8 	.word	0x080224b8

08020aa8 <std>:
 8020aa8:	2300      	movs	r3, #0
 8020aaa:	b510      	push	{r4, lr}
 8020aac:	4604      	mov	r4, r0
 8020aae:	e9c0 3300 	strd	r3, r3, [r0]
 8020ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020ab6:	6083      	str	r3, [r0, #8]
 8020ab8:	8181      	strh	r1, [r0, #12]
 8020aba:	6643      	str	r3, [r0, #100]	; 0x64
 8020abc:	81c2      	strh	r2, [r0, #14]
 8020abe:	6183      	str	r3, [r0, #24]
 8020ac0:	4619      	mov	r1, r3
 8020ac2:	2208      	movs	r2, #8
 8020ac4:	305c      	adds	r0, #92	; 0x5c
 8020ac6:	f7fe fadb 	bl	801f080 <memset>
 8020aca:	4b05      	ldr	r3, [pc, #20]	; (8020ae0 <std+0x38>)
 8020acc:	6263      	str	r3, [r4, #36]	; 0x24
 8020ace:	4b05      	ldr	r3, [pc, #20]	; (8020ae4 <std+0x3c>)
 8020ad0:	62a3      	str	r3, [r4, #40]	; 0x28
 8020ad2:	4b05      	ldr	r3, [pc, #20]	; (8020ae8 <std+0x40>)
 8020ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020ad6:	4b05      	ldr	r3, [pc, #20]	; (8020aec <std+0x44>)
 8020ad8:	6224      	str	r4, [r4, #32]
 8020ada:	6323      	str	r3, [r4, #48]	; 0x30
 8020adc:	bd10      	pop	{r4, pc}
 8020ade:	bf00      	nop
 8020ae0:	080219d5 	.word	0x080219d5
 8020ae4:	080219f7 	.word	0x080219f7
 8020ae8:	08021a2f 	.word	0x08021a2f
 8020aec:	08021a53 	.word	0x08021a53

08020af0 <_cleanup_r>:
 8020af0:	4901      	ldr	r1, [pc, #4]	; (8020af8 <_cleanup_r+0x8>)
 8020af2:	f000 b8af 	b.w	8020c54 <_fwalk_reent>
 8020af6:	bf00      	nop
 8020af8:	08020a31 	.word	0x08020a31

08020afc <__sfmoreglue>:
 8020afc:	b570      	push	{r4, r5, r6, lr}
 8020afe:	2268      	movs	r2, #104	; 0x68
 8020b00:	1e4d      	subs	r5, r1, #1
 8020b02:	4355      	muls	r5, r2
 8020b04:	460e      	mov	r6, r1
 8020b06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020b0a:	f000 fd3d 	bl	8021588 <_malloc_r>
 8020b0e:	4604      	mov	r4, r0
 8020b10:	b140      	cbz	r0, 8020b24 <__sfmoreglue+0x28>
 8020b12:	2100      	movs	r1, #0
 8020b14:	e9c0 1600 	strd	r1, r6, [r0]
 8020b18:	300c      	adds	r0, #12
 8020b1a:	60a0      	str	r0, [r4, #8]
 8020b1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020b20:	f7fe faae 	bl	801f080 <memset>
 8020b24:	4620      	mov	r0, r4
 8020b26:	bd70      	pop	{r4, r5, r6, pc}

08020b28 <__sfp_lock_acquire>:
 8020b28:	4801      	ldr	r0, [pc, #4]	; (8020b30 <__sfp_lock_acquire+0x8>)
 8020b2a:	f000 b8b8 	b.w	8020c9e <__retarget_lock_acquire_recursive>
 8020b2e:	bf00      	nop
 8020b30:	2000e0e1 	.word	0x2000e0e1

08020b34 <__sfp_lock_release>:
 8020b34:	4801      	ldr	r0, [pc, #4]	; (8020b3c <__sfp_lock_release+0x8>)
 8020b36:	f000 b8b3 	b.w	8020ca0 <__retarget_lock_release_recursive>
 8020b3a:	bf00      	nop
 8020b3c:	2000e0e1 	.word	0x2000e0e1

08020b40 <__sinit_lock_acquire>:
 8020b40:	4801      	ldr	r0, [pc, #4]	; (8020b48 <__sinit_lock_acquire+0x8>)
 8020b42:	f000 b8ac 	b.w	8020c9e <__retarget_lock_acquire_recursive>
 8020b46:	bf00      	nop
 8020b48:	2000e0e2 	.word	0x2000e0e2

08020b4c <__sinit_lock_release>:
 8020b4c:	4801      	ldr	r0, [pc, #4]	; (8020b54 <__sinit_lock_release+0x8>)
 8020b4e:	f000 b8a7 	b.w	8020ca0 <__retarget_lock_release_recursive>
 8020b52:	bf00      	nop
 8020b54:	2000e0e2 	.word	0x2000e0e2

08020b58 <__sinit>:
 8020b58:	b510      	push	{r4, lr}
 8020b5a:	4604      	mov	r4, r0
 8020b5c:	f7ff fff0 	bl	8020b40 <__sinit_lock_acquire>
 8020b60:	69a3      	ldr	r3, [r4, #24]
 8020b62:	b11b      	cbz	r3, 8020b6c <__sinit+0x14>
 8020b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b68:	f7ff bff0 	b.w	8020b4c <__sinit_lock_release>
 8020b6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020b70:	6523      	str	r3, [r4, #80]	; 0x50
 8020b72:	4b13      	ldr	r3, [pc, #76]	; (8020bc0 <__sinit+0x68>)
 8020b74:	4a13      	ldr	r2, [pc, #76]	; (8020bc4 <__sinit+0x6c>)
 8020b76:	681b      	ldr	r3, [r3, #0]
 8020b78:	62a2      	str	r2, [r4, #40]	; 0x28
 8020b7a:	42a3      	cmp	r3, r4
 8020b7c:	bf04      	itt	eq
 8020b7e:	2301      	moveq	r3, #1
 8020b80:	61a3      	streq	r3, [r4, #24]
 8020b82:	4620      	mov	r0, r4
 8020b84:	f000 f820 	bl	8020bc8 <__sfp>
 8020b88:	6060      	str	r0, [r4, #4]
 8020b8a:	4620      	mov	r0, r4
 8020b8c:	f000 f81c 	bl	8020bc8 <__sfp>
 8020b90:	60a0      	str	r0, [r4, #8]
 8020b92:	4620      	mov	r0, r4
 8020b94:	f000 f818 	bl	8020bc8 <__sfp>
 8020b98:	2200      	movs	r2, #0
 8020b9a:	60e0      	str	r0, [r4, #12]
 8020b9c:	2104      	movs	r1, #4
 8020b9e:	6860      	ldr	r0, [r4, #4]
 8020ba0:	f7ff ff82 	bl	8020aa8 <std>
 8020ba4:	68a0      	ldr	r0, [r4, #8]
 8020ba6:	2201      	movs	r2, #1
 8020ba8:	2109      	movs	r1, #9
 8020baa:	f7ff ff7d 	bl	8020aa8 <std>
 8020bae:	68e0      	ldr	r0, [r4, #12]
 8020bb0:	2202      	movs	r2, #2
 8020bb2:	2112      	movs	r1, #18
 8020bb4:	f7ff ff78 	bl	8020aa8 <std>
 8020bb8:	2301      	movs	r3, #1
 8020bba:	61a3      	str	r3, [r4, #24]
 8020bbc:	e7d2      	b.n	8020b64 <__sinit+0xc>
 8020bbe:	bf00      	nop
 8020bc0:	080223f0 	.word	0x080223f0
 8020bc4:	08020af1 	.word	0x08020af1

08020bc8 <__sfp>:
 8020bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bca:	4607      	mov	r7, r0
 8020bcc:	f7ff ffac 	bl	8020b28 <__sfp_lock_acquire>
 8020bd0:	4b1e      	ldr	r3, [pc, #120]	; (8020c4c <__sfp+0x84>)
 8020bd2:	681e      	ldr	r6, [r3, #0]
 8020bd4:	69b3      	ldr	r3, [r6, #24]
 8020bd6:	b913      	cbnz	r3, 8020bde <__sfp+0x16>
 8020bd8:	4630      	mov	r0, r6
 8020bda:	f7ff ffbd 	bl	8020b58 <__sinit>
 8020bde:	3648      	adds	r6, #72	; 0x48
 8020be0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020be4:	3b01      	subs	r3, #1
 8020be6:	d503      	bpl.n	8020bf0 <__sfp+0x28>
 8020be8:	6833      	ldr	r3, [r6, #0]
 8020bea:	b30b      	cbz	r3, 8020c30 <__sfp+0x68>
 8020bec:	6836      	ldr	r6, [r6, #0]
 8020bee:	e7f7      	b.n	8020be0 <__sfp+0x18>
 8020bf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020bf4:	b9d5      	cbnz	r5, 8020c2c <__sfp+0x64>
 8020bf6:	4b16      	ldr	r3, [pc, #88]	; (8020c50 <__sfp+0x88>)
 8020bf8:	60e3      	str	r3, [r4, #12]
 8020bfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020bfe:	6665      	str	r5, [r4, #100]	; 0x64
 8020c00:	f000 f84c 	bl	8020c9c <__retarget_lock_init_recursive>
 8020c04:	f7ff ff96 	bl	8020b34 <__sfp_lock_release>
 8020c08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020c0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020c10:	6025      	str	r5, [r4, #0]
 8020c12:	61a5      	str	r5, [r4, #24]
 8020c14:	2208      	movs	r2, #8
 8020c16:	4629      	mov	r1, r5
 8020c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020c1c:	f7fe fa30 	bl	801f080 <memset>
 8020c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020c28:	4620      	mov	r0, r4
 8020c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c2c:	3468      	adds	r4, #104	; 0x68
 8020c2e:	e7d9      	b.n	8020be4 <__sfp+0x1c>
 8020c30:	2104      	movs	r1, #4
 8020c32:	4638      	mov	r0, r7
 8020c34:	f7ff ff62 	bl	8020afc <__sfmoreglue>
 8020c38:	4604      	mov	r4, r0
 8020c3a:	6030      	str	r0, [r6, #0]
 8020c3c:	2800      	cmp	r0, #0
 8020c3e:	d1d5      	bne.n	8020bec <__sfp+0x24>
 8020c40:	f7ff ff78 	bl	8020b34 <__sfp_lock_release>
 8020c44:	230c      	movs	r3, #12
 8020c46:	603b      	str	r3, [r7, #0]
 8020c48:	e7ee      	b.n	8020c28 <__sfp+0x60>
 8020c4a:	bf00      	nop
 8020c4c:	080223f0 	.word	0x080223f0
 8020c50:	ffff0001 	.word	0xffff0001

08020c54 <_fwalk_reent>:
 8020c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020c58:	4606      	mov	r6, r0
 8020c5a:	4688      	mov	r8, r1
 8020c5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020c60:	2700      	movs	r7, #0
 8020c62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020c66:	f1b9 0901 	subs.w	r9, r9, #1
 8020c6a:	d505      	bpl.n	8020c78 <_fwalk_reent+0x24>
 8020c6c:	6824      	ldr	r4, [r4, #0]
 8020c6e:	2c00      	cmp	r4, #0
 8020c70:	d1f7      	bne.n	8020c62 <_fwalk_reent+0xe>
 8020c72:	4638      	mov	r0, r7
 8020c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020c78:	89ab      	ldrh	r3, [r5, #12]
 8020c7a:	2b01      	cmp	r3, #1
 8020c7c:	d907      	bls.n	8020c8e <_fwalk_reent+0x3a>
 8020c7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020c82:	3301      	adds	r3, #1
 8020c84:	d003      	beq.n	8020c8e <_fwalk_reent+0x3a>
 8020c86:	4629      	mov	r1, r5
 8020c88:	4630      	mov	r0, r6
 8020c8a:	47c0      	blx	r8
 8020c8c:	4307      	orrs	r7, r0
 8020c8e:	3568      	adds	r5, #104	; 0x68
 8020c90:	e7e9      	b.n	8020c66 <_fwalk_reent+0x12>
	...

08020c94 <_localeconv_r>:
 8020c94:	4800      	ldr	r0, [pc, #0]	; (8020c98 <_localeconv_r+0x4>)
 8020c96:	4770      	bx	lr
 8020c98:	20000180 	.word	0x20000180

08020c9c <__retarget_lock_init_recursive>:
 8020c9c:	4770      	bx	lr

08020c9e <__retarget_lock_acquire_recursive>:
 8020c9e:	4770      	bx	lr

08020ca0 <__retarget_lock_release_recursive>:
 8020ca0:	4770      	bx	lr

08020ca2 <__swhatbuf_r>:
 8020ca2:	b570      	push	{r4, r5, r6, lr}
 8020ca4:	460e      	mov	r6, r1
 8020ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020caa:	2900      	cmp	r1, #0
 8020cac:	b096      	sub	sp, #88	; 0x58
 8020cae:	4614      	mov	r4, r2
 8020cb0:	461d      	mov	r5, r3
 8020cb2:	da08      	bge.n	8020cc6 <__swhatbuf_r+0x24>
 8020cb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020cb8:	2200      	movs	r2, #0
 8020cba:	602a      	str	r2, [r5, #0]
 8020cbc:	061a      	lsls	r2, r3, #24
 8020cbe:	d410      	bmi.n	8020ce2 <__swhatbuf_r+0x40>
 8020cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020cc4:	e00e      	b.n	8020ce4 <__swhatbuf_r+0x42>
 8020cc6:	466a      	mov	r2, sp
 8020cc8:	f000 ff1a 	bl	8021b00 <_fstat_r>
 8020ccc:	2800      	cmp	r0, #0
 8020cce:	dbf1      	blt.n	8020cb4 <__swhatbuf_r+0x12>
 8020cd0:	9a01      	ldr	r2, [sp, #4]
 8020cd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020cd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020cda:	425a      	negs	r2, r3
 8020cdc:	415a      	adcs	r2, r3
 8020cde:	602a      	str	r2, [r5, #0]
 8020ce0:	e7ee      	b.n	8020cc0 <__swhatbuf_r+0x1e>
 8020ce2:	2340      	movs	r3, #64	; 0x40
 8020ce4:	2000      	movs	r0, #0
 8020ce6:	6023      	str	r3, [r4, #0]
 8020ce8:	b016      	add	sp, #88	; 0x58
 8020cea:	bd70      	pop	{r4, r5, r6, pc}

08020cec <__smakebuf_r>:
 8020cec:	898b      	ldrh	r3, [r1, #12]
 8020cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020cf0:	079d      	lsls	r5, r3, #30
 8020cf2:	4606      	mov	r6, r0
 8020cf4:	460c      	mov	r4, r1
 8020cf6:	d507      	bpl.n	8020d08 <__smakebuf_r+0x1c>
 8020cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020cfc:	6023      	str	r3, [r4, #0]
 8020cfe:	6123      	str	r3, [r4, #16]
 8020d00:	2301      	movs	r3, #1
 8020d02:	6163      	str	r3, [r4, #20]
 8020d04:	b002      	add	sp, #8
 8020d06:	bd70      	pop	{r4, r5, r6, pc}
 8020d08:	ab01      	add	r3, sp, #4
 8020d0a:	466a      	mov	r2, sp
 8020d0c:	f7ff ffc9 	bl	8020ca2 <__swhatbuf_r>
 8020d10:	9900      	ldr	r1, [sp, #0]
 8020d12:	4605      	mov	r5, r0
 8020d14:	4630      	mov	r0, r6
 8020d16:	f000 fc37 	bl	8021588 <_malloc_r>
 8020d1a:	b948      	cbnz	r0, 8020d30 <__smakebuf_r+0x44>
 8020d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d20:	059a      	lsls	r2, r3, #22
 8020d22:	d4ef      	bmi.n	8020d04 <__smakebuf_r+0x18>
 8020d24:	f023 0303 	bic.w	r3, r3, #3
 8020d28:	f043 0302 	orr.w	r3, r3, #2
 8020d2c:	81a3      	strh	r3, [r4, #12]
 8020d2e:	e7e3      	b.n	8020cf8 <__smakebuf_r+0xc>
 8020d30:	4b0d      	ldr	r3, [pc, #52]	; (8020d68 <__smakebuf_r+0x7c>)
 8020d32:	62b3      	str	r3, [r6, #40]	; 0x28
 8020d34:	89a3      	ldrh	r3, [r4, #12]
 8020d36:	6020      	str	r0, [r4, #0]
 8020d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d3c:	81a3      	strh	r3, [r4, #12]
 8020d3e:	9b00      	ldr	r3, [sp, #0]
 8020d40:	6163      	str	r3, [r4, #20]
 8020d42:	9b01      	ldr	r3, [sp, #4]
 8020d44:	6120      	str	r0, [r4, #16]
 8020d46:	b15b      	cbz	r3, 8020d60 <__smakebuf_r+0x74>
 8020d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d4c:	4630      	mov	r0, r6
 8020d4e:	f000 fee9 	bl	8021b24 <_isatty_r>
 8020d52:	b128      	cbz	r0, 8020d60 <__smakebuf_r+0x74>
 8020d54:	89a3      	ldrh	r3, [r4, #12]
 8020d56:	f023 0303 	bic.w	r3, r3, #3
 8020d5a:	f043 0301 	orr.w	r3, r3, #1
 8020d5e:	81a3      	strh	r3, [r4, #12]
 8020d60:	89a0      	ldrh	r0, [r4, #12]
 8020d62:	4305      	orrs	r5, r0
 8020d64:	81a5      	strh	r5, [r4, #12]
 8020d66:	e7cd      	b.n	8020d04 <__smakebuf_r+0x18>
 8020d68:	08020af1 	.word	0x08020af1

08020d6c <malloc>:
 8020d6c:	4b02      	ldr	r3, [pc, #8]	; (8020d78 <malloc+0xc>)
 8020d6e:	4601      	mov	r1, r0
 8020d70:	6818      	ldr	r0, [r3, #0]
 8020d72:	f000 bc09 	b.w	8021588 <_malloc_r>
 8020d76:	bf00      	nop
 8020d78:	2000002c 	.word	0x2000002c

08020d7c <_Balloc>:
 8020d7c:	b570      	push	{r4, r5, r6, lr}
 8020d7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020d80:	4604      	mov	r4, r0
 8020d82:	460d      	mov	r5, r1
 8020d84:	b976      	cbnz	r6, 8020da4 <_Balloc+0x28>
 8020d86:	2010      	movs	r0, #16
 8020d88:	f7ff fff0 	bl	8020d6c <malloc>
 8020d8c:	4602      	mov	r2, r0
 8020d8e:	6260      	str	r0, [r4, #36]	; 0x24
 8020d90:	b920      	cbnz	r0, 8020d9c <_Balloc+0x20>
 8020d92:	4b18      	ldr	r3, [pc, #96]	; (8020df4 <_Balloc+0x78>)
 8020d94:	4818      	ldr	r0, [pc, #96]	; (8020df8 <_Balloc+0x7c>)
 8020d96:	2166      	movs	r1, #102	; 0x66
 8020d98:	f000 fe72 	bl	8021a80 <__assert_func>
 8020d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020da0:	6006      	str	r6, [r0, #0]
 8020da2:	60c6      	str	r6, [r0, #12]
 8020da4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020da6:	68f3      	ldr	r3, [r6, #12]
 8020da8:	b183      	cbz	r3, 8020dcc <_Balloc+0x50>
 8020daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020dac:	68db      	ldr	r3, [r3, #12]
 8020dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020db2:	b9b8      	cbnz	r0, 8020de4 <_Balloc+0x68>
 8020db4:	2101      	movs	r1, #1
 8020db6:	fa01 f605 	lsl.w	r6, r1, r5
 8020dba:	1d72      	adds	r2, r6, #5
 8020dbc:	0092      	lsls	r2, r2, #2
 8020dbe:	4620      	mov	r0, r4
 8020dc0:	f000 fb60 	bl	8021484 <_calloc_r>
 8020dc4:	b160      	cbz	r0, 8020de0 <_Balloc+0x64>
 8020dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020dca:	e00e      	b.n	8020dea <_Balloc+0x6e>
 8020dcc:	2221      	movs	r2, #33	; 0x21
 8020dce:	2104      	movs	r1, #4
 8020dd0:	4620      	mov	r0, r4
 8020dd2:	f000 fb57 	bl	8021484 <_calloc_r>
 8020dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020dd8:	60f0      	str	r0, [r6, #12]
 8020dda:	68db      	ldr	r3, [r3, #12]
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d1e4      	bne.n	8020daa <_Balloc+0x2e>
 8020de0:	2000      	movs	r0, #0
 8020de2:	bd70      	pop	{r4, r5, r6, pc}
 8020de4:	6802      	ldr	r2, [r0, #0]
 8020de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020dea:	2300      	movs	r3, #0
 8020dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020df0:	e7f7      	b.n	8020de2 <_Balloc+0x66>
 8020df2:	bf00      	nop
 8020df4:	08022435 	.word	0x08022435
 8020df8:	08022518 	.word	0x08022518

08020dfc <_Bfree>:
 8020dfc:	b570      	push	{r4, r5, r6, lr}
 8020dfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020e00:	4605      	mov	r5, r0
 8020e02:	460c      	mov	r4, r1
 8020e04:	b976      	cbnz	r6, 8020e24 <_Bfree+0x28>
 8020e06:	2010      	movs	r0, #16
 8020e08:	f7ff ffb0 	bl	8020d6c <malloc>
 8020e0c:	4602      	mov	r2, r0
 8020e0e:	6268      	str	r0, [r5, #36]	; 0x24
 8020e10:	b920      	cbnz	r0, 8020e1c <_Bfree+0x20>
 8020e12:	4b09      	ldr	r3, [pc, #36]	; (8020e38 <_Bfree+0x3c>)
 8020e14:	4809      	ldr	r0, [pc, #36]	; (8020e3c <_Bfree+0x40>)
 8020e16:	218a      	movs	r1, #138	; 0x8a
 8020e18:	f000 fe32 	bl	8021a80 <__assert_func>
 8020e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020e20:	6006      	str	r6, [r0, #0]
 8020e22:	60c6      	str	r6, [r0, #12]
 8020e24:	b13c      	cbz	r4, 8020e36 <_Bfree+0x3a>
 8020e26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020e28:	6862      	ldr	r2, [r4, #4]
 8020e2a:	68db      	ldr	r3, [r3, #12]
 8020e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020e30:	6021      	str	r1, [r4, #0]
 8020e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020e36:	bd70      	pop	{r4, r5, r6, pc}
 8020e38:	08022435 	.word	0x08022435
 8020e3c:	08022518 	.word	0x08022518

08020e40 <__multadd>:
 8020e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e44:	690d      	ldr	r5, [r1, #16]
 8020e46:	4607      	mov	r7, r0
 8020e48:	460c      	mov	r4, r1
 8020e4a:	461e      	mov	r6, r3
 8020e4c:	f101 0c14 	add.w	ip, r1, #20
 8020e50:	2000      	movs	r0, #0
 8020e52:	f8dc 3000 	ldr.w	r3, [ip]
 8020e56:	b299      	uxth	r1, r3
 8020e58:	fb02 6101 	mla	r1, r2, r1, r6
 8020e5c:	0c1e      	lsrs	r6, r3, #16
 8020e5e:	0c0b      	lsrs	r3, r1, #16
 8020e60:	fb02 3306 	mla	r3, r2, r6, r3
 8020e64:	b289      	uxth	r1, r1
 8020e66:	3001      	adds	r0, #1
 8020e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020e6c:	4285      	cmp	r5, r0
 8020e6e:	f84c 1b04 	str.w	r1, [ip], #4
 8020e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020e76:	dcec      	bgt.n	8020e52 <__multadd+0x12>
 8020e78:	b30e      	cbz	r6, 8020ebe <__multadd+0x7e>
 8020e7a:	68a3      	ldr	r3, [r4, #8]
 8020e7c:	42ab      	cmp	r3, r5
 8020e7e:	dc19      	bgt.n	8020eb4 <__multadd+0x74>
 8020e80:	6861      	ldr	r1, [r4, #4]
 8020e82:	4638      	mov	r0, r7
 8020e84:	3101      	adds	r1, #1
 8020e86:	f7ff ff79 	bl	8020d7c <_Balloc>
 8020e8a:	4680      	mov	r8, r0
 8020e8c:	b928      	cbnz	r0, 8020e9a <__multadd+0x5a>
 8020e8e:	4602      	mov	r2, r0
 8020e90:	4b0c      	ldr	r3, [pc, #48]	; (8020ec4 <__multadd+0x84>)
 8020e92:	480d      	ldr	r0, [pc, #52]	; (8020ec8 <__multadd+0x88>)
 8020e94:	21b5      	movs	r1, #181	; 0xb5
 8020e96:	f000 fdf3 	bl	8021a80 <__assert_func>
 8020e9a:	6922      	ldr	r2, [r4, #16]
 8020e9c:	3202      	adds	r2, #2
 8020e9e:	f104 010c 	add.w	r1, r4, #12
 8020ea2:	0092      	lsls	r2, r2, #2
 8020ea4:	300c      	adds	r0, #12
 8020ea6:	f7fe f8dd 	bl	801f064 <memcpy>
 8020eaa:	4621      	mov	r1, r4
 8020eac:	4638      	mov	r0, r7
 8020eae:	f7ff ffa5 	bl	8020dfc <_Bfree>
 8020eb2:	4644      	mov	r4, r8
 8020eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020eb8:	3501      	adds	r5, #1
 8020eba:	615e      	str	r6, [r3, #20]
 8020ebc:	6125      	str	r5, [r4, #16]
 8020ebe:	4620      	mov	r0, r4
 8020ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ec4:	080224a7 	.word	0x080224a7
 8020ec8:	08022518 	.word	0x08022518

08020ecc <__hi0bits>:
 8020ecc:	0c03      	lsrs	r3, r0, #16
 8020ece:	041b      	lsls	r3, r3, #16
 8020ed0:	b9d3      	cbnz	r3, 8020f08 <__hi0bits+0x3c>
 8020ed2:	0400      	lsls	r0, r0, #16
 8020ed4:	2310      	movs	r3, #16
 8020ed6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020eda:	bf04      	itt	eq
 8020edc:	0200      	lsleq	r0, r0, #8
 8020ede:	3308      	addeq	r3, #8
 8020ee0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020ee4:	bf04      	itt	eq
 8020ee6:	0100      	lsleq	r0, r0, #4
 8020ee8:	3304      	addeq	r3, #4
 8020eea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020eee:	bf04      	itt	eq
 8020ef0:	0080      	lsleq	r0, r0, #2
 8020ef2:	3302      	addeq	r3, #2
 8020ef4:	2800      	cmp	r0, #0
 8020ef6:	db05      	blt.n	8020f04 <__hi0bits+0x38>
 8020ef8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020efc:	f103 0301 	add.w	r3, r3, #1
 8020f00:	bf08      	it	eq
 8020f02:	2320      	moveq	r3, #32
 8020f04:	4618      	mov	r0, r3
 8020f06:	4770      	bx	lr
 8020f08:	2300      	movs	r3, #0
 8020f0a:	e7e4      	b.n	8020ed6 <__hi0bits+0xa>

08020f0c <__lo0bits>:
 8020f0c:	6803      	ldr	r3, [r0, #0]
 8020f0e:	f013 0207 	ands.w	r2, r3, #7
 8020f12:	4601      	mov	r1, r0
 8020f14:	d00b      	beq.n	8020f2e <__lo0bits+0x22>
 8020f16:	07da      	lsls	r2, r3, #31
 8020f18:	d423      	bmi.n	8020f62 <__lo0bits+0x56>
 8020f1a:	0798      	lsls	r0, r3, #30
 8020f1c:	bf49      	itett	mi
 8020f1e:	085b      	lsrmi	r3, r3, #1
 8020f20:	089b      	lsrpl	r3, r3, #2
 8020f22:	2001      	movmi	r0, #1
 8020f24:	600b      	strmi	r3, [r1, #0]
 8020f26:	bf5c      	itt	pl
 8020f28:	600b      	strpl	r3, [r1, #0]
 8020f2a:	2002      	movpl	r0, #2
 8020f2c:	4770      	bx	lr
 8020f2e:	b298      	uxth	r0, r3
 8020f30:	b9a8      	cbnz	r0, 8020f5e <__lo0bits+0x52>
 8020f32:	0c1b      	lsrs	r3, r3, #16
 8020f34:	2010      	movs	r0, #16
 8020f36:	b2da      	uxtb	r2, r3
 8020f38:	b90a      	cbnz	r2, 8020f3e <__lo0bits+0x32>
 8020f3a:	3008      	adds	r0, #8
 8020f3c:	0a1b      	lsrs	r3, r3, #8
 8020f3e:	071a      	lsls	r2, r3, #28
 8020f40:	bf04      	itt	eq
 8020f42:	091b      	lsreq	r3, r3, #4
 8020f44:	3004      	addeq	r0, #4
 8020f46:	079a      	lsls	r2, r3, #30
 8020f48:	bf04      	itt	eq
 8020f4a:	089b      	lsreq	r3, r3, #2
 8020f4c:	3002      	addeq	r0, #2
 8020f4e:	07da      	lsls	r2, r3, #31
 8020f50:	d403      	bmi.n	8020f5a <__lo0bits+0x4e>
 8020f52:	085b      	lsrs	r3, r3, #1
 8020f54:	f100 0001 	add.w	r0, r0, #1
 8020f58:	d005      	beq.n	8020f66 <__lo0bits+0x5a>
 8020f5a:	600b      	str	r3, [r1, #0]
 8020f5c:	4770      	bx	lr
 8020f5e:	4610      	mov	r0, r2
 8020f60:	e7e9      	b.n	8020f36 <__lo0bits+0x2a>
 8020f62:	2000      	movs	r0, #0
 8020f64:	4770      	bx	lr
 8020f66:	2020      	movs	r0, #32
 8020f68:	4770      	bx	lr
	...

08020f6c <__i2b>:
 8020f6c:	b510      	push	{r4, lr}
 8020f6e:	460c      	mov	r4, r1
 8020f70:	2101      	movs	r1, #1
 8020f72:	f7ff ff03 	bl	8020d7c <_Balloc>
 8020f76:	4602      	mov	r2, r0
 8020f78:	b928      	cbnz	r0, 8020f86 <__i2b+0x1a>
 8020f7a:	4b05      	ldr	r3, [pc, #20]	; (8020f90 <__i2b+0x24>)
 8020f7c:	4805      	ldr	r0, [pc, #20]	; (8020f94 <__i2b+0x28>)
 8020f7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020f82:	f000 fd7d 	bl	8021a80 <__assert_func>
 8020f86:	2301      	movs	r3, #1
 8020f88:	6144      	str	r4, [r0, #20]
 8020f8a:	6103      	str	r3, [r0, #16]
 8020f8c:	bd10      	pop	{r4, pc}
 8020f8e:	bf00      	nop
 8020f90:	080224a7 	.word	0x080224a7
 8020f94:	08022518 	.word	0x08022518

08020f98 <__multiply>:
 8020f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f9c:	4691      	mov	r9, r2
 8020f9e:	690a      	ldr	r2, [r1, #16]
 8020fa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020fa4:	429a      	cmp	r2, r3
 8020fa6:	bfb8      	it	lt
 8020fa8:	460b      	movlt	r3, r1
 8020faa:	460c      	mov	r4, r1
 8020fac:	bfbc      	itt	lt
 8020fae:	464c      	movlt	r4, r9
 8020fb0:	4699      	movlt	r9, r3
 8020fb2:	6927      	ldr	r7, [r4, #16]
 8020fb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020fb8:	68a3      	ldr	r3, [r4, #8]
 8020fba:	6861      	ldr	r1, [r4, #4]
 8020fbc:	eb07 060a 	add.w	r6, r7, sl
 8020fc0:	42b3      	cmp	r3, r6
 8020fc2:	b085      	sub	sp, #20
 8020fc4:	bfb8      	it	lt
 8020fc6:	3101      	addlt	r1, #1
 8020fc8:	f7ff fed8 	bl	8020d7c <_Balloc>
 8020fcc:	b930      	cbnz	r0, 8020fdc <__multiply+0x44>
 8020fce:	4602      	mov	r2, r0
 8020fd0:	4b44      	ldr	r3, [pc, #272]	; (80210e4 <__multiply+0x14c>)
 8020fd2:	4845      	ldr	r0, [pc, #276]	; (80210e8 <__multiply+0x150>)
 8020fd4:	f240 115d 	movw	r1, #349	; 0x15d
 8020fd8:	f000 fd52 	bl	8021a80 <__assert_func>
 8020fdc:	f100 0514 	add.w	r5, r0, #20
 8020fe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020fe4:	462b      	mov	r3, r5
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	4543      	cmp	r3, r8
 8020fea:	d321      	bcc.n	8021030 <__multiply+0x98>
 8020fec:	f104 0314 	add.w	r3, r4, #20
 8020ff0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020ff4:	f109 0314 	add.w	r3, r9, #20
 8020ff8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8020ffc:	9202      	str	r2, [sp, #8]
 8020ffe:	1b3a      	subs	r2, r7, r4
 8021000:	3a15      	subs	r2, #21
 8021002:	f022 0203 	bic.w	r2, r2, #3
 8021006:	3204      	adds	r2, #4
 8021008:	f104 0115 	add.w	r1, r4, #21
 802100c:	428f      	cmp	r7, r1
 802100e:	bf38      	it	cc
 8021010:	2204      	movcc	r2, #4
 8021012:	9201      	str	r2, [sp, #4]
 8021014:	9a02      	ldr	r2, [sp, #8]
 8021016:	9303      	str	r3, [sp, #12]
 8021018:	429a      	cmp	r2, r3
 802101a:	d80c      	bhi.n	8021036 <__multiply+0x9e>
 802101c:	2e00      	cmp	r6, #0
 802101e:	dd03      	ble.n	8021028 <__multiply+0x90>
 8021020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021024:	2b00      	cmp	r3, #0
 8021026:	d05a      	beq.n	80210de <__multiply+0x146>
 8021028:	6106      	str	r6, [r0, #16]
 802102a:	b005      	add	sp, #20
 802102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021030:	f843 2b04 	str.w	r2, [r3], #4
 8021034:	e7d8      	b.n	8020fe8 <__multiply+0x50>
 8021036:	f8b3 a000 	ldrh.w	sl, [r3]
 802103a:	f1ba 0f00 	cmp.w	sl, #0
 802103e:	d024      	beq.n	802108a <__multiply+0xf2>
 8021040:	f104 0e14 	add.w	lr, r4, #20
 8021044:	46a9      	mov	r9, r5
 8021046:	f04f 0c00 	mov.w	ip, #0
 802104a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802104e:	f8d9 1000 	ldr.w	r1, [r9]
 8021052:	fa1f fb82 	uxth.w	fp, r2
 8021056:	b289      	uxth	r1, r1
 8021058:	fb0a 110b 	mla	r1, sl, fp, r1
 802105c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021060:	f8d9 2000 	ldr.w	r2, [r9]
 8021064:	4461      	add	r1, ip
 8021066:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802106a:	fb0a c20b 	mla	r2, sl, fp, ip
 802106e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021072:	b289      	uxth	r1, r1
 8021074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021078:	4577      	cmp	r7, lr
 802107a:	f849 1b04 	str.w	r1, [r9], #4
 802107e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021082:	d8e2      	bhi.n	802104a <__multiply+0xb2>
 8021084:	9a01      	ldr	r2, [sp, #4]
 8021086:	f845 c002 	str.w	ip, [r5, r2]
 802108a:	9a03      	ldr	r2, [sp, #12]
 802108c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021090:	3304      	adds	r3, #4
 8021092:	f1b9 0f00 	cmp.w	r9, #0
 8021096:	d020      	beq.n	80210da <__multiply+0x142>
 8021098:	6829      	ldr	r1, [r5, #0]
 802109a:	f104 0c14 	add.w	ip, r4, #20
 802109e:	46ae      	mov	lr, r5
 80210a0:	f04f 0a00 	mov.w	sl, #0
 80210a4:	f8bc b000 	ldrh.w	fp, [ip]
 80210a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80210ac:	fb09 220b 	mla	r2, r9, fp, r2
 80210b0:	4492      	add	sl, r2
 80210b2:	b289      	uxth	r1, r1
 80210b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80210b8:	f84e 1b04 	str.w	r1, [lr], #4
 80210bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80210c0:	f8be 1000 	ldrh.w	r1, [lr]
 80210c4:	0c12      	lsrs	r2, r2, #16
 80210c6:	fb09 1102 	mla	r1, r9, r2, r1
 80210ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80210ce:	4567      	cmp	r7, ip
 80210d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80210d4:	d8e6      	bhi.n	80210a4 <__multiply+0x10c>
 80210d6:	9a01      	ldr	r2, [sp, #4]
 80210d8:	50a9      	str	r1, [r5, r2]
 80210da:	3504      	adds	r5, #4
 80210dc:	e79a      	b.n	8021014 <__multiply+0x7c>
 80210de:	3e01      	subs	r6, #1
 80210e0:	e79c      	b.n	802101c <__multiply+0x84>
 80210e2:	bf00      	nop
 80210e4:	080224a7 	.word	0x080224a7
 80210e8:	08022518 	.word	0x08022518

080210ec <__pow5mult>:
 80210ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210f0:	4615      	mov	r5, r2
 80210f2:	f012 0203 	ands.w	r2, r2, #3
 80210f6:	4606      	mov	r6, r0
 80210f8:	460f      	mov	r7, r1
 80210fa:	d007      	beq.n	802110c <__pow5mult+0x20>
 80210fc:	4c25      	ldr	r4, [pc, #148]	; (8021194 <__pow5mult+0xa8>)
 80210fe:	3a01      	subs	r2, #1
 8021100:	2300      	movs	r3, #0
 8021102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021106:	f7ff fe9b 	bl	8020e40 <__multadd>
 802110a:	4607      	mov	r7, r0
 802110c:	10ad      	asrs	r5, r5, #2
 802110e:	d03d      	beq.n	802118c <__pow5mult+0xa0>
 8021110:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021112:	b97c      	cbnz	r4, 8021134 <__pow5mult+0x48>
 8021114:	2010      	movs	r0, #16
 8021116:	f7ff fe29 	bl	8020d6c <malloc>
 802111a:	4602      	mov	r2, r0
 802111c:	6270      	str	r0, [r6, #36]	; 0x24
 802111e:	b928      	cbnz	r0, 802112c <__pow5mult+0x40>
 8021120:	4b1d      	ldr	r3, [pc, #116]	; (8021198 <__pow5mult+0xac>)
 8021122:	481e      	ldr	r0, [pc, #120]	; (802119c <__pow5mult+0xb0>)
 8021124:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021128:	f000 fcaa 	bl	8021a80 <__assert_func>
 802112c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021130:	6004      	str	r4, [r0, #0]
 8021132:	60c4      	str	r4, [r0, #12]
 8021134:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021138:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802113c:	b94c      	cbnz	r4, 8021152 <__pow5mult+0x66>
 802113e:	f240 2171 	movw	r1, #625	; 0x271
 8021142:	4630      	mov	r0, r6
 8021144:	f7ff ff12 	bl	8020f6c <__i2b>
 8021148:	2300      	movs	r3, #0
 802114a:	f8c8 0008 	str.w	r0, [r8, #8]
 802114e:	4604      	mov	r4, r0
 8021150:	6003      	str	r3, [r0, #0]
 8021152:	f04f 0900 	mov.w	r9, #0
 8021156:	07eb      	lsls	r3, r5, #31
 8021158:	d50a      	bpl.n	8021170 <__pow5mult+0x84>
 802115a:	4639      	mov	r1, r7
 802115c:	4622      	mov	r2, r4
 802115e:	4630      	mov	r0, r6
 8021160:	f7ff ff1a 	bl	8020f98 <__multiply>
 8021164:	4639      	mov	r1, r7
 8021166:	4680      	mov	r8, r0
 8021168:	4630      	mov	r0, r6
 802116a:	f7ff fe47 	bl	8020dfc <_Bfree>
 802116e:	4647      	mov	r7, r8
 8021170:	106d      	asrs	r5, r5, #1
 8021172:	d00b      	beq.n	802118c <__pow5mult+0xa0>
 8021174:	6820      	ldr	r0, [r4, #0]
 8021176:	b938      	cbnz	r0, 8021188 <__pow5mult+0x9c>
 8021178:	4622      	mov	r2, r4
 802117a:	4621      	mov	r1, r4
 802117c:	4630      	mov	r0, r6
 802117e:	f7ff ff0b 	bl	8020f98 <__multiply>
 8021182:	6020      	str	r0, [r4, #0]
 8021184:	f8c0 9000 	str.w	r9, [r0]
 8021188:	4604      	mov	r4, r0
 802118a:	e7e4      	b.n	8021156 <__pow5mult+0x6a>
 802118c:	4638      	mov	r0, r7
 802118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021192:	bf00      	nop
 8021194:	08022668 	.word	0x08022668
 8021198:	08022435 	.word	0x08022435
 802119c:	08022518 	.word	0x08022518

080211a0 <__lshift>:
 80211a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211a4:	460c      	mov	r4, r1
 80211a6:	6849      	ldr	r1, [r1, #4]
 80211a8:	6923      	ldr	r3, [r4, #16]
 80211aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80211ae:	68a3      	ldr	r3, [r4, #8]
 80211b0:	4607      	mov	r7, r0
 80211b2:	4691      	mov	r9, r2
 80211b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80211b8:	f108 0601 	add.w	r6, r8, #1
 80211bc:	42b3      	cmp	r3, r6
 80211be:	db0b      	blt.n	80211d8 <__lshift+0x38>
 80211c0:	4638      	mov	r0, r7
 80211c2:	f7ff fddb 	bl	8020d7c <_Balloc>
 80211c6:	4605      	mov	r5, r0
 80211c8:	b948      	cbnz	r0, 80211de <__lshift+0x3e>
 80211ca:	4602      	mov	r2, r0
 80211cc:	4b2a      	ldr	r3, [pc, #168]	; (8021278 <__lshift+0xd8>)
 80211ce:	482b      	ldr	r0, [pc, #172]	; (802127c <__lshift+0xdc>)
 80211d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80211d4:	f000 fc54 	bl	8021a80 <__assert_func>
 80211d8:	3101      	adds	r1, #1
 80211da:	005b      	lsls	r3, r3, #1
 80211dc:	e7ee      	b.n	80211bc <__lshift+0x1c>
 80211de:	2300      	movs	r3, #0
 80211e0:	f100 0114 	add.w	r1, r0, #20
 80211e4:	f100 0210 	add.w	r2, r0, #16
 80211e8:	4618      	mov	r0, r3
 80211ea:	4553      	cmp	r3, sl
 80211ec:	db37      	blt.n	802125e <__lshift+0xbe>
 80211ee:	6920      	ldr	r0, [r4, #16]
 80211f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80211f4:	f104 0314 	add.w	r3, r4, #20
 80211f8:	f019 091f 	ands.w	r9, r9, #31
 80211fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021200:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021204:	d02f      	beq.n	8021266 <__lshift+0xc6>
 8021206:	f1c9 0e20 	rsb	lr, r9, #32
 802120a:	468a      	mov	sl, r1
 802120c:	f04f 0c00 	mov.w	ip, #0
 8021210:	681a      	ldr	r2, [r3, #0]
 8021212:	fa02 f209 	lsl.w	r2, r2, r9
 8021216:	ea42 020c 	orr.w	r2, r2, ip
 802121a:	f84a 2b04 	str.w	r2, [sl], #4
 802121e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021222:	4298      	cmp	r0, r3
 8021224:	fa22 fc0e 	lsr.w	ip, r2, lr
 8021228:	d8f2      	bhi.n	8021210 <__lshift+0x70>
 802122a:	1b03      	subs	r3, r0, r4
 802122c:	3b15      	subs	r3, #21
 802122e:	f023 0303 	bic.w	r3, r3, #3
 8021232:	3304      	adds	r3, #4
 8021234:	f104 0215 	add.w	r2, r4, #21
 8021238:	4290      	cmp	r0, r2
 802123a:	bf38      	it	cc
 802123c:	2304      	movcc	r3, #4
 802123e:	f841 c003 	str.w	ip, [r1, r3]
 8021242:	f1bc 0f00 	cmp.w	ip, #0
 8021246:	d001      	beq.n	802124c <__lshift+0xac>
 8021248:	f108 0602 	add.w	r6, r8, #2
 802124c:	3e01      	subs	r6, #1
 802124e:	4638      	mov	r0, r7
 8021250:	612e      	str	r6, [r5, #16]
 8021252:	4621      	mov	r1, r4
 8021254:	f7ff fdd2 	bl	8020dfc <_Bfree>
 8021258:	4628      	mov	r0, r5
 802125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802125e:	f842 0f04 	str.w	r0, [r2, #4]!
 8021262:	3301      	adds	r3, #1
 8021264:	e7c1      	b.n	80211ea <__lshift+0x4a>
 8021266:	3904      	subs	r1, #4
 8021268:	f853 2b04 	ldr.w	r2, [r3], #4
 802126c:	f841 2f04 	str.w	r2, [r1, #4]!
 8021270:	4298      	cmp	r0, r3
 8021272:	d8f9      	bhi.n	8021268 <__lshift+0xc8>
 8021274:	e7ea      	b.n	802124c <__lshift+0xac>
 8021276:	bf00      	nop
 8021278:	080224a7 	.word	0x080224a7
 802127c:	08022518 	.word	0x08022518

08021280 <__mcmp>:
 8021280:	b530      	push	{r4, r5, lr}
 8021282:	6902      	ldr	r2, [r0, #16]
 8021284:	690c      	ldr	r4, [r1, #16]
 8021286:	1b12      	subs	r2, r2, r4
 8021288:	d10e      	bne.n	80212a8 <__mcmp+0x28>
 802128a:	f100 0314 	add.w	r3, r0, #20
 802128e:	3114      	adds	r1, #20
 8021290:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021294:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021298:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802129c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80212a0:	42a5      	cmp	r5, r4
 80212a2:	d003      	beq.n	80212ac <__mcmp+0x2c>
 80212a4:	d305      	bcc.n	80212b2 <__mcmp+0x32>
 80212a6:	2201      	movs	r2, #1
 80212a8:	4610      	mov	r0, r2
 80212aa:	bd30      	pop	{r4, r5, pc}
 80212ac:	4283      	cmp	r3, r0
 80212ae:	d3f3      	bcc.n	8021298 <__mcmp+0x18>
 80212b0:	e7fa      	b.n	80212a8 <__mcmp+0x28>
 80212b2:	f04f 32ff 	mov.w	r2, #4294967295
 80212b6:	e7f7      	b.n	80212a8 <__mcmp+0x28>

080212b8 <__mdiff>:
 80212b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212bc:	460c      	mov	r4, r1
 80212be:	4606      	mov	r6, r0
 80212c0:	4611      	mov	r1, r2
 80212c2:	4620      	mov	r0, r4
 80212c4:	4690      	mov	r8, r2
 80212c6:	f7ff ffdb 	bl	8021280 <__mcmp>
 80212ca:	1e05      	subs	r5, r0, #0
 80212cc:	d110      	bne.n	80212f0 <__mdiff+0x38>
 80212ce:	4629      	mov	r1, r5
 80212d0:	4630      	mov	r0, r6
 80212d2:	f7ff fd53 	bl	8020d7c <_Balloc>
 80212d6:	b930      	cbnz	r0, 80212e6 <__mdiff+0x2e>
 80212d8:	4b3a      	ldr	r3, [pc, #232]	; (80213c4 <__mdiff+0x10c>)
 80212da:	4602      	mov	r2, r0
 80212dc:	f240 2132 	movw	r1, #562	; 0x232
 80212e0:	4839      	ldr	r0, [pc, #228]	; (80213c8 <__mdiff+0x110>)
 80212e2:	f000 fbcd 	bl	8021a80 <__assert_func>
 80212e6:	2301      	movs	r3, #1
 80212e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80212ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212f0:	bfa4      	itt	ge
 80212f2:	4643      	movge	r3, r8
 80212f4:	46a0      	movge	r8, r4
 80212f6:	4630      	mov	r0, r6
 80212f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80212fc:	bfa6      	itte	ge
 80212fe:	461c      	movge	r4, r3
 8021300:	2500      	movge	r5, #0
 8021302:	2501      	movlt	r5, #1
 8021304:	f7ff fd3a 	bl	8020d7c <_Balloc>
 8021308:	b920      	cbnz	r0, 8021314 <__mdiff+0x5c>
 802130a:	4b2e      	ldr	r3, [pc, #184]	; (80213c4 <__mdiff+0x10c>)
 802130c:	4602      	mov	r2, r0
 802130e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021312:	e7e5      	b.n	80212e0 <__mdiff+0x28>
 8021314:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021318:	6926      	ldr	r6, [r4, #16]
 802131a:	60c5      	str	r5, [r0, #12]
 802131c:	f104 0914 	add.w	r9, r4, #20
 8021320:	f108 0514 	add.w	r5, r8, #20
 8021324:	f100 0e14 	add.w	lr, r0, #20
 8021328:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802132c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021330:	f108 0210 	add.w	r2, r8, #16
 8021334:	46f2      	mov	sl, lr
 8021336:	2100      	movs	r1, #0
 8021338:	f859 3b04 	ldr.w	r3, [r9], #4
 802133c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021340:	fa1f f883 	uxth.w	r8, r3
 8021344:	fa11 f18b 	uxtah	r1, r1, fp
 8021348:	0c1b      	lsrs	r3, r3, #16
 802134a:	eba1 0808 	sub.w	r8, r1, r8
 802134e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021352:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021356:	fa1f f888 	uxth.w	r8, r8
 802135a:	1419      	asrs	r1, r3, #16
 802135c:	454e      	cmp	r6, r9
 802135e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021362:	f84a 3b04 	str.w	r3, [sl], #4
 8021366:	d8e7      	bhi.n	8021338 <__mdiff+0x80>
 8021368:	1b33      	subs	r3, r6, r4
 802136a:	3b15      	subs	r3, #21
 802136c:	f023 0303 	bic.w	r3, r3, #3
 8021370:	3304      	adds	r3, #4
 8021372:	3415      	adds	r4, #21
 8021374:	42a6      	cmp	r6, r4
 8021376:	bf38      	it	cc
 8021378:	2304      	movcc	r3, #4
 802137a:	441d      	add	r5, r3
 802137c:	4473      	add	r3, lr
 802137e:	469e      	mov	lr, r3
 8021380:	462e      	mov	r6, r5
 8021382:	4566      	cmp	r6, ip
 8021384:	d30e      	bcc.n	80213a4 <__mdiff+0xec>
 8021386:	f10c 0203 	add.w	r2, ip, #3
 802138a:	1b52      	subs	r2, r2, r5
 802138c:	f022 0203 	bic.w	r2, r2, #3
 8021390:	3d03      	subs	r5, #3
 8021392:	45ac      	cmp	ip, r5
 8021394:	bf38      	it	cc
 8021396:	2200      	movcc	r2, #0
 8021398:	441a      	add	r2, r3
 802139a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802139e:	b17b      	cbz	r3, 80213c0 <__mdiff+0x108>
 80213a0:	6107      	str	r7, [r0, #16]
 80213a2:	e7a3      	b.n	80212ec <__mdiff+0x34>
 80213a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80213a8:	fa11 f288 	uxtah	r2, r1, r8
 80213ac:	1414      	asrs	r4, r2, #16
 80213ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80213b2:	b292      	uxth	r2, r2
 80213b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80213b8:	f84e 2b04 	str.w	r2, [lr], #4
 80213bc:	1421      	asrs	r1, r4, #16
 80213be:	e7e0      	b.n	8021382 <__mdiff+0xca>
 80213c0:	3f01      	subs	r7, #1
 80213c2:	e7ea      	b.n	802139a <__mdiff+0xe2>
 80213c4:	080224a7 	.word	0x080224a7
 80213c8:	08022518 	.word	0x08022518

080213cc <__d2b>:
 80213cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80213d0:	4689      	mov	r9, r1
 80213d2:	2101      	movs	r1, #1
 80213d4:	ec57 6b10 	vmov	r6, r7, d0
 80213d8:	4690      	mov	r8, r2
 80213da:	f7ff fccf 	bl	8020d7c <_Balloc>
 80213de:	4604      	mov	r4, r0
 80213e0:	b930      	cbnz	r0, 80213f0 <__d2b+0x24>
 80213e2:	4602      	mov	r2, r0
 80213e4:	4b25      	ldr	r3, [pc, #148]	; (802147c <__d2b+0xb0>)
 80213e6:	4826      	ldr	r0, [pc, #152]	; (8021480 <__d2b+0xb4>)
 80213e8:	f240 310a 	movw	r1, #778	; 0x30a
 80213ec:	f000 fb48 	bl	8021a80 <__assert_func>
 80213f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80213f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80213f8:	bb35      	cbnz	r5, 8021448 <__d2b+0x7c>
 80213fa:	2e00      	cmp	r6, #0
 80213fc:	9301      	str	r3, [sp, #4]
 80213fe:	d028      	beq.n	8021452 <__d2b+0x86>
 8021400:	4668      	mov	r0, sp
 8021402:	9600      	str	r6, [sp, #0]
 8021404:	f7ff fd82 	bl	8020f0c <__lo0bits>
 8021408:	9900      	ldr	r1, [sp, #0]
 802140a:	b300      	cbz	r0, 802144e <__d2b+0x82>
 802140c:	9a01      	ldr	r2, [sp, #4]
 802140e:	f1c0 0320 	rsb	r3, r0, #32
 8021412:	fa02 f303 	lsl.w	r3, r2, r3
 8021416:	430b      	orrs	r3, r1
 8021418:	40c2      	lsrs	r2, r0
 802141a:	6163      	str	r3, [r4, #20]
 802141c:	9201      	str	r2, [sp, #4]
 802141e:	9b01      	ldr	r3, [sp, #4]
 8021420:	61a3      	str	r3, [r4, #24]
 8021422:	2b00      	cmp	r3, #0
 8021424:	bf14      	ite	ne
 8021426:	2202      	movne	r2, #2
 8021428:	2201      	moveq	r2, #1
 802142a:	6122      	str	r2, [r4, #16]
 802142c:	b1d5      	cbz	r5, 8021464 <__d2b+0x98>
 802142e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021432:	4405      	add	r5, r0
 8021434:	f8c9 5000 	str.w	r5, [r9]
 8021438:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802143c:	f8c8 0000 	str.w	r0, [r8]
 8021440:	4620      	mov	r0, r4
 8021442:	b003      	add	sp, #12
 8021444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802144c:	e7d5      	b.n	80213fa <__d2b+0x2e>
 802144e:	6161      	str	r1, [r4, #20]
 8021450:	e7e5      	b.n	802141e <__d2b+0x52>
 8021452:	a801      	add	r0, sp, #4
 8021454:	f7ff fd5a 	bl	8020f0c <__lo0bits>
 8021458:	9b01      	ldr	r3, [sp, #4]
 802145a:	6163      	str	r3, [r4, #20]
 802145c:	2201      	movs	r2, #1
 802145e:	6122      	str	r2, [r4, #16]
 8021460:	3020      	adds	r0, #32
 8021462:	e7e3      	b.n	802142c <__d2b+0x60>
 8021464:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021468:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802146c:	f8c9 0000 	str.w	r0, [r9]
 8021470:	6918      	ldr	r0, [r3, #16]
 8021472:	f7ff fd2b 	bl	8020ecc <__hi0bits>
 8021476:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802147a:	e7df      	b.n	802143c <__d2b+0x70>
 802147c:	080224a7 	.word	0x080224a7
 8021480:	08022518 	.word	0x08022518

08021484 <_calloc_r>:
 8021484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021486:	fba1 2402 	umull	r2, r4, r1, r2
 802148a:	b94c      	cbnz	r4, 80214a0 <_calloc_r+0x1c>
 802148c:	4611      	mov	r1, r2
 802148e:	9201      	str	r2, [sp, #4]
 8021490:	f000 f87a 	bl	8021588 <_malloc_r>
 8021494:	9a01      	ldr	r2, [sp, #4]
 8021496:	4605      	mov	r5, r0
 8021498:	b930      	cbnz	r0, 80214a8 <_calloc_r+0x24>
 802149a:	4628      	mov	r0, r5
 802149c:	b003      	add	sp, #12
 802149e:	bd30      	pop	{r4, r5, pc}
 80214a0:	220c      	movs	r2, #12
 80214a2:	6002      	str	r2, [r0, #0]
 80214a4:	2500      	movs	r5, #0
 80214a6:	e7f8      	b.n	802149a <_calloc_r+0x16>
 80214a8:	4621      	mov	r1, r4
 80214aa:	f7fd fde9 	bl	801f080 <memset>
 80214ae:	e7f4      	b.n	802149a <_calloc_r+0x16>

080214b0 <_free_r>:
 80214b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80214b2:	2900      	cmp	r1, #0
 80214b4:	d044      	beq.n	8021540 <_free_r+0x90>
 80214b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80214ba:	9001      	str	r0, [sp, #4]
 80214bc:	2b00      	cmp	r3, #0
 80214be:	f1a1 0404 	sub.w	r4, r1, #4
 80214c2:	bfb8      	it	lt
 80214c4:	18e4      	addlt	r4, r4, r3
 80214c6:	f000 fb61 	bl	8021b8c <__malloc_lock>
 80214ca:	4a1e      	ldr	r2, [pc, #120]	; (8021544 <_free_r+0x94>)
 80214cc:	9801      	ldr	r0, [sp, #4]
 80214ce:	6813      	ldr	r3, [r2, #0]
 80214d0:	b933      	cbnz	r3, 80214e0 <_free_r+0x30>
 80214d2:	6063      	str	r3, [r4, #4]
 80214d4:	6014      	str	r4, [r2, #0]
 80214d6:	b003      	add	sp, #12
 80214d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80214dc:	f000 bb5c 	b.w	8021b98 <__malloc_unlock>
 80214e0:	42a3      	cmp	r3, r4
 80214e2:	d908      	bls.n	80214f6 <_free_r+0x46>
 80214e4:	6825      	ldr	r5, [r4, #0]
 80214e6:	1961      	adds	r1, r4, r5
 80214e8:	428b      	cmp	r3, r1
 80214ea:	bf01      	itttt	eq
 80214ec:	6819      	ldreq	r1, [r3, #0]
 80214ee:	685b      	ldreq	r3, [r3, #4]
 80214f0:	1949      	addeq	r1, r1, r5
 80214f2:	6021      	streq	r1, [r4, #0]
 80214f4:	e7ed      	b.n	80214d2 <_free_r+0x22>
 80214f6:	461a      	mov	r2, r3
 80214f8:	685b      	ldr	r3, [r3, #4]
 80214fa:	b10b      	cbz	r3, 8021500 <_free_r+0x50>
 80214fc:	42a3      	cmp	r3, r4
 80214fe:	d9fa      	bls.n	80214f6 <_free_r+0x46>
 8021500:	6811      	ldr	r1, [r2, #0]
 8021502:	1855      	adds	r5, r2, r1
 8021504:	42a5      	cmp	r5, r4
 8021506:	d10b      	bne.n	8021520 <_free_r+0x70>
 8021508:	6824      	ldr	r4, [r4, #0]
 802150a:	4421      	add	r1, r4
 802150c:	1854      	adds	r4, r2, r1
 802150e:	42a3      	cmp	r3, r4
 8021510:	6011      	str	r1, [r2, #0]
 8021512:	d1e0      	bne.n	80214d6 <_free_r+0x26>
 8021514:	681c      	ldr	r4, [r3, #0]
 8021516:	685b      	ldr	r3, [r3, #4]
 8021518:	6053      	str	r3, [r2, #4]
 802151a:	4421      	add	r1, r4
 802151c:	6011      	str	r1, [r2, #0]
 802151e:	e7da      	b.n	80214d6 <_free_r+0x26>
 8021520:	d902      	bls.n	8021528 <_free_r+0x78>
 8021522:	230c      	movs	r3, #12
 8021524:	6003      	str	r3, [r0, #0]
 8021526:	e7d6      	b.n	80214d6 <_free_r+0x26>
 8021528:	6825      	ldr	r5, [r4, #0]
 802152a:	1961      	adds	r1, r4, r5
 802152c:	428b      	cmp	r3, r1
 802152e:	bf04      	itt	eq
 8021530:	6819      	ldreq	r1, [r3, #0]
 8021532:	685b      	ldreq	r3, [r3, #4]
 8021534:	6063      	str	r3, [r4, #4]
 8021536:	bf04      	itt	eq
 8021538:	1949      	addeq	r1, r1, r5
 802153a:	6021      	streq	r1, [r4, #0]
 802153c:	6054      	str	r4, [r2, #4]
 802153e:	e7ca      	b.n	80214d6 <_free_r+0x26>
 8021540:	b003      	add	sp, #12
 8021542:	bd30      	pop	{r4, r5, pc}
 8021544:	2000e0e4 	.word	0x2000e0e4

08021548 <sbrk_aligned>:
 8021548:	b570      	push	{r4, r5, r6, lr}
 802154a:	4e0e      	ldr	r6, [pc, #56]	; (8021584 <sbrk_aligned+0x3c>)
 802154c:	460c      	mov	r4, r1
 802154e:	6831      	ldr	r1, [r6, #0]
 8021550:	4605      	mov	r5, r0
 8021552:	b911      	cbnz	r1, 802155a <sbrk_aligned+0x12>
 8021554:	f000 fa2e 	bl	80219b4 <_sbrk_r>
 8021558:	6030      	str	r0, [r6, #0]
 802155a:	4621      	mov	r1, r4
 802155c:	4628      	mov	r0, r5
 802155e:	f000 fa29 	bl	80219b4 <_sbrk_r>
 8021562:	1c43      	adds	r3, r0, #1
 8021564:	d00a      	beq.n	802157c <sbrk_aligned+0x34>
 8021566:	1cc4      	adds	r4, r0, #3
 8021568:	f024 0403 	bic.w	r4, r4, #3
 802156c:	42a0      	cmp	r0, r4
 802156e:	d007      	beq.n	8021580 <sbrk_aligned+0x38>
 8021570:	1a21      	subs	r1, r4, r0
 8021572:	4628      	mov	r0, r5
 8021574:	f000 fa1e 	bl	80219b4 <_sbrk_r>
 8021578:	3001      	adds	r0, #1
 802157a:	d101      	bne.n	8021580 <sbrk_aligned+0x38>
 802157c:	f04f 34ff 	mov.w	r4, #4294967295
 8021580:	4620      	mov	r0, r4
 8021582:	bd70      	pop	{r4, r5, r6, pc}
 8021584:	2000e0e8 	.word	0x2000e0e8

08021588 <_malloc_r>:
 8021588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802158c:	1ccd      	adds	r5, r1, #3
 802158e:	f025 0503 	bic.w	r5, r5, #3
 8021592:	3508      	adds	r5, #8
 8021594:	2d0c      	cmp	r5, #12
 8021596:	bf38      	it	cc
 8021598:	250c      	movcc	r5, #12
 802159a:	2d00      	cmp	r5, #0
 802159c:	4607      	mov	r7, r0
 802159e:	db01      	blt.n	80215a4 <_malloc_r+0x1c>
 80215a0:	42a9      	cmp	r1, r5
 80215a2:	d905      	bls.n	80215b0 <_malloc_r+0x28>
 80215a4:	230c      	movs	r3, #12
 80215a6:	603b      	str	r3, [r7, #0]
 80215a8:	2600      	movs	r6, #0
 80215aa:	4630      	mov	r0, r6
 80215ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215b0:	4e2e      	ldr	r6, [pc, #184]	; (802166c <_malloc_r+0xe4>)
 80215b2:	f000 faeb 	bl	8021b8c <__malloc_lock>
 80215b6:	6833      	ldr	r3, [r6, #0]
 80215b8:	461c      	mov	r4, r3
 80215ba:	bb34      	cbnz	r4, 802160a <_malloc_r+0x82>
 80215bc:	4629      	mov	r1, r5
 80215be:	4638      	mov	r0, r7
 80215c0:	f7ff ffc2 	bl	8021548 <sbrk_aligned>
 80215c4:	1c43      	adds	r3, r0, #1
 80215c6:	4604      	mov	r4, r0
 80215c8:	d14d      	bne.n	8021666 <_malloc_r+0xde>
 80215ca:	6834      	ldr	r4, [r6, #0]
 80215cc:	4626      	mov	r6, r4
 80215ce:	2e00      	cmp	r6, #0
 80215d0:	d140      	bne.n	8021654 <_malloc_r+0xcc>
 80215d2:	6823      	ldr	r3, [r4, #0]
 80215d4:	4631      	mov	r1, r6
 80215d6:	4638      	mov	r0, r7
 80215d8:	eb04 0803 	add.w	r8, r4, r3
 80215dc:	f000 f9ea 	bl	80219b4 <_sbrk_r>
 80215e0:	4580      	cmp	r8, r0
 80215e2:	d13a      	bne.n	802165a <_malloc_r+0xd2>
 80215e4:	6821      	ldr	r1, [r4, #0]
 80215e6:	3503      	adds	r5, #3
 80215e8:	1a6d      	subs	r5, r5, r1
 80215ea:	f025 0503 	bic.w	r5, r5, #3
 80215ee:	3508      	adds	r5, #8
 80215f0:	2d0c      	cmp	r5, #12
 80215f2:	bf38      	it	cc
 80215f4:	250c      	movcc	r5, #12
 80215f6:	4629      	mov	r1, r5
 80215f8:	4638      	mov	r0, r7
 80215fa:	f7ff ffa5 	bl	8021548 <sbrk_aligned>
 80215fe:	3001      	adds	r0, #1
 8021600:	d02b      	beq.n	802165a <_malloc_r+0xd2>
 8021602:	6823      	ldr	r3, [r4, #0]
 8021604:	442b      	add	r3, r5
 8021606:	6023      	str	r3, [r4, #0]
 8021608:	e00e      	b.n	8021628 <_malloc_r+0xa0>
 802160a:	6822      	ldr	r2, [r4, #0]
 802160c:	1b52      	subs	r2, r2, r5
 802160e:	d41e      	bmi.n	802164e <_malloc_r+0xc6>
 8021610:	2a0b      	cmp	r2, #11
 8021612:	d916      	bls.n	8021642 <_malloc_r+0xba>
 8021614:	1961      	adds	r1, r4, r5
 8021616:	42a3      	cmp	r3, r4
 8021618:	6025      	str	r5, [r4, #0]
 802161a:	bf18      	it	ne
 802161c:	6059      	strne	r1, [r3, #4]
 802161e:	6863      	ldr	r3, [r4, #4]
 8021620:	bf08      	it	eq
 8021622:	6031      	streq	r1, [r6, #0]
 8021624:	5162      	str	r2, [r4, r5]
 8021626:	604b      	str	r3, [r1, #4]
 8021628:	4638      	mov	r0, r7
 802162a:	f104 060b 	add.w	r6, r4, #11
 802162e:	f000 fab3 	bl	8021b98 <__malloc_unlock>
 8021632:	f026 0607 	bic.w	r6, r6, #7
 8021636:	1d23      	adds	r3, r4, #4
 8021638:	1af2      	subs	r2, r6, r3
 802163a:	d0b6      	beq.n	80215aa <_malloc_r+0x22>
 802163c:	1b9b      	subs	r3, r3, r6
 802163e:	50a3      	str	r3, [r4, r2]
 8021640:	e7b3      	b.n	80215aa <_malloc_r+0x22>
 8021642:	6862      	ldr	r2, [r4, #4]
 8021644:	42a3      	cmp	r3, r4
 8021646:	bf0c      	ite	eq
 8021648:	6032      	streq	r2, [r6, #0]
 802164a:	605a      	strne	r2, [r3, #4]
 802164c:	e7ec      	b.n	8021628 <_malloc_r+0xa0>
 802164e:	4623      	mov	r3, r4
 8021650:	6864      	ldr	r4, [r4, #4]
 8021652:	e7b2      	b.n	80215ba <_malloc_r+0x32>
 8021654:	4634      	mov	r4, r6
 8021656:	6876      	ldr	r6, [r6, #4]
 8021658:	e7b9      	b.n	80215ce <_malloc_r+0x46>
 802165a:	230c      	movs	r3, #12
 802165c:	603b      	str	r3, [r7, #0]
 802165e:	4638      	mov	r0, r7
 8021660:	f000 fa9a 	bl	8021b98 <__malloc_unlock>
 8021664:	e7a1      	b.n	80215aa <_malloc_r+0x22>
 8021666:	6025      	str	r5, [r4, #0]
 8021668:	e7de      	b.n	8021628 <_malloc_r+0xa0>
 802166a:	bf00      	nop
 802166c:	2000e0e4 	.word	0x2000e0e4

08021670 <__sfputc_r>:
 8021670:	6893      	ldr	r3, [r2, #8]
 8021672:	3b01      	subs	r3, #1
 8021674:	2b00      	cmp	r3, #0
 8021676:	b410      	push	{r4}
 8021678:	6093      	str	r3, [r2, #8]
 802167a:	da08      	bge.n	802168e <__sfputc_r+0x1e>
 802167c:	6994      	ldr	r4, [r2, #24]
 802167e:	42a3      	cmp	r3, r4
 8021680:	db01      	blt.n	8021686 <__sfputc_r+0x16>
 8021682:	290a      	cmp	r1, #10
 8021684:	d103      	bne.n	802168e <__sfputc_r+0x1e>
 8021686:	f85d 4b04 	ldr.w	r4, [sp], #4
 802168a:	f7fe ba0f 	b.w	801faac <__swbuf_r>
 802168e:	6813      	ldr	r3, [r2, #0]
 8021690:	1c58      	adds	r0, r3, #1
 8021692:	6010      	str	r0, [r2, #0]
 8021694:	7019      	strb	r1, [r3, #0]
 8021696:	4608      	mov	r0, r1
 8021698:	f85d 4b04 	ldr.w	r4, [sp], #4
 802169c:	4770      	bx	lr

0802169e <__sfputs_r>:
 802169e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216a0:	4606      	mov	r6, r0
 80216a2:	460f      	mov	r7, r1
 80216a4:	4614      	mov	r4, r2
 80216a6:	18d5      	adds	r5, r2, r3
 80216a8:	42ac      	cmp	r4, r5
 80216aa:	d101      	bne.n	80216b0 <__sfputs_r+0x12>
 80216ac:	2000      	movs	r0, #0
 80216ae:	e007      	b.n	80216c0 <__sfputs_r+0x22>
 80216b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216b4:	463a      	mov	r2, r7
 80216b6:	4630      	mov	r0, r6
 80216b8:	f7ff ffda 	bl	8021670 <__sfputc_r>
 80216bc:	1c43      	adds	r3, r0, #1
 80216be:	d1f3      	bne.n	80216a8 <__sfputs_r+0xa>
 80216c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080216c4 <_vfiprintf_r>:
 80216c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216c8:	460d      	mov	r5, r1
 80216ca:	b09d      	sub	sp, #116	; 0x74
 80216cc:	4614      	mov	r4, r2
 80216ce:	4698      	mov	r8, r3
 80216d0:	4606      	mov	r6, r0
 80216d2:	b118      	cbz	r0, 80216dc <_vfiprintf_r+0x18>
 80216d4:	6983      	ldr	r3, [r0, #24]
 80216d6:	b90b      	cbnz	r3, 80216dc <_vfiprintf_r+0x18>
 80216d8:	f7ff fa3e 	bl	8020b58 <__sinit>
 80216dc:	4b89      	ldr	r3, [pc, #548]	; (8021904 <_vfiprintf_r+0x240>)
 80216de:	429d      	cmp	r5, r3
 80216e0:	d11b      	bne.n	802171a <_vfiprintf_r+0x56>
 80216e2:	6875      	ldr	r5, [r6, #4]
 80216e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80216e6:	07d9      	lsls	r1, r3, #31
 80216e8:	d405      	bmi.n	80216f6 <_vfiprintf_r+0x32>
 80216ea:	89ab      	ldrh	r3, [r5, #12]
 80216ec:	059a      	lsls	r2, r3, #22
 80216ee:	d402      	bmi.n	80216f6 <_vfiprintf_r+0x32>
 80216f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80216f2:	f7ff fad4 	bl	8020c9e <__retarget_lock_acquire_recursive>
 80216f6:	89ab      	ldrh	r3, [r5, #12]
 80216f8:	071b      	lsls	r3, r3, #28
 80216fa:	d501      	bpl.n	8021700 <_vfiprintf_r+0x3c>
 80216fc:	692b      	ldr	r3, [r5, #16]
 80216fe:	b9eb      	cbnz	r3, 802173c <_vfiprintf_r+0x78>
 8021700:	4629      	mov	r1, r5
 8021702:	4630      	mov	r0, r6
 8021704:	f7fe fa24 	bl	801fb50 <__swsetup_r>
 8021708:	b1c0      	cbz	r0, 802173c <_vfiprintf_r+0x78>
 802170a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802170c:	07dc      	lsls	r4, r3, #31
 802170e:	d50e      	bpl.n	802172e <_vfiprintf_r+0x6a>
 8021710:	f04f 30ff 	mov.w	r0, #4294967295
 8021714:	b01d      	add	sp, #116	; 0x74
 8021716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802171a:	4b7b      	ldr	r3, [pc, #492]	; (8021908 <_vfiprintf_r+0x244>)
 802171c:	429d      	cmp	r5, r3
 802171e:	d101      	bne.n	8021724 <_vfiprintf_r+0x60>
 8021720:	68b5      	ldr	r5, [r6, #8]
 8021722:	e7df      	b.n	80216e4 <_vfiprintf_r+0x20>
 8021724:	4b79      	ldr	r3, [pc, #484]	; (802190c <_vfiprintf_r+0x248>)
 8021726:	429d      	cmp	r5, r3
 8021728:	bf08      	it	eq
 802172a:	68f5      	ldreq	r5, [r6, #12]
 802172c:	e7da      	b.n	80216e4 <_vfiprintf_r+0x20>
 802172e:	89ab      	ldrh	r3, [r5, #12]
 8021730:	0598      	lsls	r0, r3, #22
 8021732:	d4ed      	bmi.n	8021710 <_vfiprintf_r+0x4c>
 8021734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021736:	f7ff fab3 	bl	8020ca0 <__retarget_lock_release_recursive>
 802173a:	e7e9      	b.n	8021710 <_vfiprintf_r+0x4c>
 802173c:	2300      	movs	r3, #0
 802173e:	9309      	str	r3, [sp, #36]	; 0x24
 8021740:	2320      	movs	r3, #32
 8021742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021746:	f8cd 800c 	str.w	r8, [sp, #12]
 802174a:	2330      	movs	r3, #48	; 0x30
 802174c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021910 <_vfiprintf_r+0x24c>
 8021750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021754:	f04f 0901 	mov.w	r9, #1
 8021758:	4623      	mov	r3, r4
 802175a:	469a      	mov	sl, r3
 802175c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021760:	b10a      	cbz	r2, 8021766 <_vfiprintf_r+0xa2>
 8021762:	2a25      	cmp	r2, #37	; 0x25
 8021764:	d1f9      	bne.n	802175a <_vfiprintf_r+0x96>
 8021766:	ebba 0b04 	subs.w	fp, sl, r4
 802176a:	d00b      	beq.n	8021784 <_vfiprintf_r+0xc0>
 802176c:	465b      	mov	r3, fp
 802176e:	4622      	mov	r2, r4
 8021770:	4629      	mov	r1, r5
 8021772:	4630      	mov	r0, r6
 8021774:	f7ff ff93 	bl	802169e <__sfputs_r>
 8021778:	3001      	adds	r0, #1
 802177a:	f000 80aa 	beq.w	80218d2 <_vfiprintf_r+0x20e>
 802177e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021780:	445a      	add	r2, fp
 8021782:	9209      	str	r2, [sp, #36]	; 0x24
 8021784:	f89a 3000 	ldrb.w	r3, [sl]
 8021788:	2b00      	cmp	r3, #0
 802178a:	f000 80a2 	beq.w	80218d2 <_vfiprintf_r+0x20e>
 802178e:	2300      	movs	r3, #0
 8021790:	f04f 32ff 	mov.w	r2, #4294967295
 8021794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021798:	f10a 0a01 	add.w	sl, sl, #1
 802179c:	9304      	str	r3, [sp, #16]
 802179e:	9307      	str	r3, [sp, #28]
 80217a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80217a4:	931a      	str	r3, [sp, #104]	; 0x68
 80217a6:	4654      	mov	r4, sl
 80217a8:	2205      	movs	r2, #5
 80217aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80217ae:	4858      	ldr	r0, [pc, #352]	; (8021910 <_vfiprintf_r+0x24c>)
 80217b0:	f7de fd3e 	bl	8000230 <memchr>
 80217b4:	9a04      	ldr	r2, [sp, #16]
 80217b6:	b9d8      	cbnz	r0, 80217f0 <_vfiprintf_r+0x12c>
 80217b8:	06d1      	lsls	r1, r2, #27
 80217ba:	bf44      	itt	mi
 80217bc:	2320      	movmi	r3, #32
 80217be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80217c2:	0713      	lsls	r3, r2, #28
 80217c4:	bf44      	itt	mi
 80217c6:	232b      	movmi	r3, #43	; 0x2b
 80217c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80217cc:	f89a 3000 	ldrb.w	r3, [sl]
 80217d0:	2b2a      	cmp	r3, #42	; 0x2a
 80217d2:	d015      	beq.n	8021800 <_vfiprintf_r+0x13c>
 80217d4:	9a07      	ldr	r2, [sp, #28]
 80217d6:	4654      	mov	r4, sl
 80217d8:	2000      	movs	r0, #0
 80217da:	f04f 0c0a 	mov.w	ip, #10
 80217de:	4621      	mov	r1, r4
 80217e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80217e4:	3b30      	subs	r3, #48	; 0x30
 80217e6:	2b09      	cmp	r3, #9
 80217e8:	d94e      	bls.n	8021888 <_vfiprintf_r+0x1c4>
 80217ea:	b1b0      	cbz	r0, 802181a <_vfiprintf_r+0x156>
 80217ec:	9207      	str	r2, [sp, #28]
 80217ee:	e014      	b.n	802181a <_vfiprintf_r+0x156>
 80217f0:	eba0 0308 	sub.w	r3, r0, r8
 80217f4:	fa09 f303 	lsl.w	r3, r9, r3
 80217f8:	4313      	orrs	r3, r2
 80217fa:	9304      	str	r3, [sp, #16]
 80217fc:	46a2      	mov	sl, r4
 80217fe:	e7d2      	b.n	80217a6 <_vfiprintf_r+0xe2>
 8021800:	9b03      	ldr	r3, [sp, #12]
 8021802:	1d19      	adds	r1, r3, #4
 8021804:	681b      	ldr	r3, [r3, #0]
 8021806:	9103      	str	r1, [sp, #12]
 8021808:	2b00      	cmp	r3, #0
 802180a:	bfbb      	ittet	lt
 802180c:	425b      	neglt	r3, r3
 802180e:	f042 0202 	orrlt.w	r2, r2, #2
 8021812:	9307      	strge	r3, [sp, #28]
 8021814:	9307      	strlt	r3, [sp, #28]
 8021816:	bfb8      	it	lt
 8021818:	9204      	strlt	r2, [sp, #16]
 802181a:	7823      	ldrb	r3, [r4, #0]
 802181c:	2b2e      	cmp	r3, #46	; 0x2e
 802181e:	d10c      	bne.n	802183a <_vfiprintf_r+0x176>
 8021820:	7863      	ldrb	r3, [r4, #1]
 8021822:	2b2a      	cmp	r3, #42	; 0x2a
 8021824:	d135      	bne.n	8021892 <_vfiprintf_r+0x1ce>
 8021826:	9b03      	ldr	r3, [sp, #12]
 8021828:	1d1a      	adds	r2, r3, #4
 802182a:	681b      	ldr	r3, [r3, #0]
 802182c:	9203      	str	r2, [sp, #12]
 802182e:	2b00      	cmp	r3, #0
 8021830:	bfb8      	it	lt
 8021832:	f04f 33ff 	movlt.w	r3, #4294967295
 8021836:	3402      	adds	r4, #2
 8021838:	9305      	str	r3, [sp, #20]
 802183a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021920 <_vfiprintf_r+0x25c>
 802183e:	7821      	ldrb	r1, [r4, #0]
 8021840:	2203      	movs	r2, #3
 8021842:	4650      	mov	r0, sl
 8021844:	f7de fcf4 	bl	8000230 <memchr>
 8021848:	b140      	cbz	r0, 802185c <_vfiprintf_r+0x198>
 802184a:	2340      	movs	r3, #64	; 0x40
 802184c:	eba0 000a 	sub.w	r0, r0, sl
 8021850:	fa03 f000 	lsl.w	r0, r3, r0
 8021854:	9b04      	ldr	r3, [sp, #16]
 8021856:	4303      	orrs	r3, r0
 8021858:	3401      	adds	r4, #1
 802185a:	9304      	str	r3, [sp, #16]
 802185c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021860:	482c      	ldr	r0, [pc, #176]	; (8021914 <_vfiprintf_r+0x250>)
 8021862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021866:	2206      	movs	r2, #6
 8021868:	f7de fce2 	bl	8000230 <memchr>
 802186c:	2800      	cmp	r0, #0
 802186e:	d03f      	beq.n	80218f0 <_vfiprintf_r+0x22c>
 8021870:	4b29      	ldr	r3, [pc, #164]	; (8021918 <_vfiprintf_r+0x254>)
 8021872:	bb1b      	cbnz	r3, 80218bc <_vfiprintf_r+0x1f8>
 8021874:	9b03      	ldr	r3, [sp, #12]
 8021876:	3307      	adds	r3, #7
 8021878:	f023 0307 	bic.w	r3, r3, #7
 802187c:	3308      	adds	r3, #8
 802187e:	9303      	str	r3, [sp, #12]
 8021880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021882:	443b      	add	r3, r7
 8021884:	9309      	str	r3, [sp, #36]	; 0x24
 8021886:	e767      	b.n	8021758 <_vfiprintf_r+0x94>
 8021888:	fb0c 3202 	mla	r2, ip, r2, r3
 802188c:	460c      	mov	r4, r1
 802188e:	2001      	movs	r0, #1
 8021890:	e7a5      	b.n	80217de <_vfiprintf_r+0x11a>
 8021892:	2300      	movs	r3, #0
 8021894:	3401      	adds	r4, #1
 8021896:	9305      	str	r3, [sp, #20]
 8021898:	4619      	mov	r1, r3
 802189a:	f04f 0c0a 	mov.w	ip, #10
 802189e:	4620      	mov	r0, r4
 80218a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80218a4:	3a30      	subs	r2, #48	; 0x30
 80218a6:	2a09      	cmp	r2, #9
 80218a8:	d903      	bls.n	80218b2 <_vfiprintf_r+0x1ee>
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d0c5      	beq.n	802183a <_vfiprintf_r+0x176>
 80218ae:	9105      	str	r1, [sp, #20]
 80218b0:	e7c3      	b.n	802183a <_vfiprintf_r+0x176>
 80218b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80218b6:	4604      	mov	r4, r0
 80218b8:	2301      	movs	r3, #1
 80218ba:	e7f0      	b.n	802189e <_vfiprintf_r+0x1da>
 80218bc:	ab03      	add	r3, sp, #12
 80218be:	9300      	str	r3, [sp, #0]
 80218c0:	462a      	mov	r2, r5
 80218c2:	4b16      	ldr	r3, [pc, #88]	; (802191c <_vfiprintf_r+0x258>)
 80218c4:	a904      	add	r1, sp, #16
 80218c6:	4630      	mov	r0, r6
 80218c8:	f7fd fc82 	bl	801f1d0 <_printf_float>
 80218cc:	4607      	mov	r7, r0
 80218ce:	1c78      	adds	r0, r7, #1
 80218d0:	d1d6      	bne.n	8021880 <_vfiprintf_r+0x1bc>
 80218d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80218d4:	07d9      	lsls	r1, r3, #31
 80218d6:	d405      	bmi.n	80218e4 <_vfiprintf_r+0x220>
 80218d8:	89ab      	ldrh	r3, [r5, #12]
 80218da:	059a      	lsls	r2, r3, #22
 80218dc:	d402      	bmi.n	80218e4 <_vfiprintf_r+0x220>
 80218de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80218e0:	f7ff f9de 	bl	8020ca0 <__retarget_lock_release_recursive>
 80218e4:	89ab      	ldrh	r3, [r5, #12]
 80218e6:	065b      	lsls	r3, r3, #25
 80218e8:	f53f af12 	bmi.w	8021710 <_vfiprintf_r+0x4c>
 80218ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80218ee:	e711      	b.n	8021714 <_vfiprintf_r+0x50>
 80218f0:	ab03      	add	r3, sp, #12
 80218f2:	9300      	str	r3, [sp, #0]
 80218f4:	462a      	mov	r2, r5
 80218f6:	4b09      	ldr	r3, [pc, #36]	; (802191c <_vfiprintf_r+0x258>)
 80218f8:	a904      	add	r1, sp, #16
 80218fa:	4630      	mov	r0, r6
 80218fc:	f7fd ff0c 	bl	801f718 <_printf_i>
 8021900:	e7e4      	b.n	80218cc <_vfiprintf_r+0x208>
 8021902:	bf00      	nop
 8021904:	080224d8 	.word	0x080224d8
 8021908:	080224f8 	.word	0x080224f8
 802190c:	080224b8 	.word	0x080224b8
 8021910:	08022674 	.word	0x08022674
 8021914:	0802267e 	.word	0x0802267e
 8021918:	0801f1d1 	.word	0x0801f1d1
 802191c:	0802169f 	.word	0x0802169f
 8021920:	0802267a 	.word	0x0802267a

08021924 <_putc_r>:
 8021924:	b570      	push	{r4, r5, r6, lr}
 8021926:	460d      	mov	r5, r1
 8021928:	4614      	mov	r4, r2
 802192a:	4606      	mov	r6, r0
 802192c:	b118      	cbz	r0, 8021936 <_putc_r+0x12>
 802192e:	6983      	ldr	r3, [r0, #24]
 8021930:	b90b      	cbnz	r3, 8021936 <_putc_r+0x12>
 8021932:	f7ff f911 	bl	8020b58 <__sinit>
 8021936:	4b1c      	ldr	r3, [pc, #112]	; (80219a8 <_putc_r+0x84>)
 8021938:	429c      	cmp	r4, r3
 802193a:	d124      	bne.n	8021986 <_putc_r+0x62>
 802193c:	6874      	ldr	r4, [r6, #4]
 802193e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021940:	07d8      	lsls	r0, r3, #31
 8021942:	d405      	bmi.n	8021950 <_putc_r+0x2c>
 8021944:	89a3      	ldrh	r3, [r4, #12]
 8021946:	0599      	lsls	r1, r3, #22
 8021948:	d402      	bmi.n	8021950 <_putc_r+0x2c>
 802194a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802194c:	f7ff f9a7 	bl	8020c9e <__retarget_lock_acquire_recursive>
 8021950:	68a3      	ldr	r3, [r4, #8]
 8021952:	3b01      	subs	r3, #1
 8021954:	2b00      	cmp	r3, #0
 8021956:	60a3      	str	r3, [r4, #8]
 8021958:	da05      	bge.n	8021966 <_putc_r+0x42>
 802195a:	69a2      	ldr	r2, [r4, #24]
 802195c:	4293      	cmp	r3, r2
 802195e:	db1c      	blt.n	802199a <_putc_r+0x76>
 8021960:	b2eb      	uxtb	r3, r5
 8021962:	2b0a      	cmp	r3, #10
 8021964:	d019      	beq.n	802199a <_putc_r+0x76>
 8021966:	6823      	ldr	r3, [r4, #0]
 8021968:	1c5a      	adds	r2, r3, #1
 802196a:	6022      	str	r2, [r4, #0]
 802196c:	701d      	strb	r5, [r3, #0]
 802196e:	b2ed      	uxtb	r5, r5
 8021970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021972:	07da      	lsls	r2, r3, #31
 8021974:	d405      	bmi.n	8021982 <_putc_r+0x5e>
 8021976:	89a3      	ldrh	r3, [r4, #12]
 8021978:	059b      	lsls	r3, r3, #22
 802197a:	d402      	bmi.n	8021982 <_putc_r+0x5e>
 802197c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802197e:	f7ff f98f 	bl	8020ca0 <__retarget_lock_release_recursive>
 8021982:	4628      	mov	r0, r5
 8021984:	bd70      	pop	{r4, r5, r6, pc}
 8021986:	4b09      	ldr	r3, [pc, #36]	; (80219ac <_putc_r+0x88>)
 8021988:	429c      	cmp	r4, r3
 802198a:	d101      	bne.n	8021990 <_putc_r+0x6c>
 802198c:	68b4      	ldr	r4, [r6, #8]
 802198e:	e7d6      	b.n	802193e <_putc_r+0x1a>
 8021990:	4b07      	ldr	r3, [pc, #28]	; (80219b0 <_putc_r+0x8c>)
 8021992:	429c      	cmp	r4, r3
 8021994:	bf08      	it	eq
 8021996:	68f4      	ldreq	r4, [r6, #12]
 8021998:	e7d1      	b.n	802193e <_putc_r+0x1a>
 802199a:	4629      	mov	r1, r5
 802199c:	4622      	mov	r2, r4
 802199e:	4630      	mov	r0, r6
 80219a0:	f7fe f884 	bl	801faac <__swbuf_r>
 80219a4:	4605      	mov	r5, r0
 80219a6:	e7e3      	b.n	8021970 <_putc_r+0x4c>
 80219a8:	080224d8 	.word	0x080224d8
 80219ac:	080224f8 	.word	0x080224f8
 80219b0:	080224b8 	.word	0x080224b8

080219b4 <_sbrk_r>:
 80219b4:	b538      	push	{r3, r4, r5, lr}
 80219b6:	4d06      	ldr	r5, [pc, #24]	; (80219d0 <_sbrk_r+0x1c>)
 80219b8:	2300      	movs	r3, #0
 80219ba:	4604      	mov	r4, r0
 80219bc:	4608      	mov	r0, r1
 80219be:	602b      	str	r3, [r5, #0]
 80219c0:	f7f5 f89c 	bl	8016afc <_sbrk>
 80219c4:	1c43      	adds	r3, r0, #1
 80219c6:	d102      	bne.n	80219ce <_sbrk_r+0x1a>
 80219c8:	682b      	ldr	r3, [r5, #0]
 80219ca:	b103      	cbz	r3, 80219ce <_sbrk_r+0x1a>
 80219cc:	6023      	str	r3, [r4, #0]
 80219ce:	bd38      	pop	{r3, r4, r5, pc}
 80219d0:	2000e0ec 	.word	0x2000e0ec

080219d4 <__sread>:
 80219d4:	b510      	push	{r4, lr}
 80219d6:	460c      	mov	r4, r1
 80219d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219dc:	f000 f8e2 	bl	8021ba4 <_read_r>
 80219e0:	2800      	cmp	r0, #0
 80219e2:	bfab      	itete	ge
 80219e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80219e6:	89a3      	ldrhlt	r3, [r4, #12]
 80219e8:	181b      	addge	r3, r3, r0
 80219ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80219ee:	bfac      	ite	ge
 80219f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80219f2:	81a3      	strhlt	r3, [r4, #12]
 80219f4:	bd10      	pop	{r4, pc}

080219f6 <__swrite>:
 80219f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80219fa:	461f      	mov	r7, r3
 80219fc:	898b      	ldrh	r3, [r1, #12]
 80219fe:	05db      	lsls	r3, r3, #23
 8021a00:	4605      	mov	r5, r0
 8021a02:	460c      	mov	r4, r1
 8021a04:	4616      	mov	r6, r2
 8021a06:	d505      	bpl.n	8021a14 <__swrite+0x1e>
 8021a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a0c:	2302      	movs	r3, #2
 8021a0e:	2200      	movs	r2, #0
 8021a10:	f000 f898 	bl	8021b44 <_lseek_r>
 8021a14:	89a3      	ldrh	r3, [r4, #12]
 8021a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021a1e:	81a3      	strh	r3, [r4, #12]
 8021a20:	4632      	mov	r2, r6
 8021a22:	463b      	mov	r3, r7
 8021a24:	4628      	mov	r0, r5
 8021a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021a2a:	f000 b817 	b.w	8021a5c <_write_r>

08021a2e <__sseek>:
 8021a2e:	b510      	push	{r4, lr}
 8021a30:	460c      	mov	r4, r1
 8021a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a36:	f000 f885 	bl	8021b44 <_lseek_r>
 8021a3a:	1c43      	adds	r3, r0, #1
 8021a3c:	89a3      	ldrh	r3, [r4, #12]
 8021a3e:	bf15      	itete	ne
 8021a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8021a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021a4a:	81a3      	strheq	r3, [r4, #12]
 8021a4c:	bf18      	it	ne
 8021a4e:	81a3      	strhne	r3, [r4, #12]
 8021a50:	bd10      	pop	{r4, pc}

08021a52 <__sclose>:
 8021a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a56:	f000 b831 	b.w	8021abc <_close_r>
	...

08021a5c <_write_r>:
 8021a5c:	b538      	push	{r3, r4, r5, lr}
 8021a5e:	4d07      	ldr	r5, [pc, #28]	; (8021a7c <_write_r+0x20>)
 8021a60:	4604      	mov	r4, r0
 8021a62:	4608      	mov	r0, r1
 8021a64:	4611      	mov	r1, r2
 8021a66:	2200      	movs	r2, #0
 8021a68:	602a      	str	r2, [r5, #0]
 8021a6a:	461a      	mov	r2, r3
 8021a6c:	f7f4 fff2 	bl	8016a54 <_write>
 8021a70:	1c43      	adds	r3, r0, #1
 8021a72:	d102      	bne.n	8021a7a <_write_r+0x1e>
 8021a74:	682b      	ldr	r3, [r5, #0]
 8021a76:	b103      	cbz	r3, 8021a7a <_write_r+0x1e>
 8021a78:	6023      	str	r3, [r4, #0]
 8021a7a:	bd38      	pop	{r3, r4, r5, pc}
 8021a7c:	2000e0ec 	.word	0x2000e0ec

08021a80 <__assert_func>:
 8021a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021a82:	4614      	mov	r4, r2
 8021a84:	461a      	mov	r2, r3
 8021a86:	4b09      	ldr	r3, [pc, #36]	; (8021aac <__assert_func+0x2c>)
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	4605      	mov	r5, r0
 8021a8c:	68d8      	ldr	r0, [r3, #12]
 8021a8e:	b14c      	cbz	r4, 8021aa4 <__assert_func+0x24>
 8021a90:	4b07      	ldr	r3, [pc, #28]	; (8021ab0 <__assert_func+0x30>)
 8021a92:	9100      	str	r1, [sp, #0]
 8021a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021a98:	4906      	ldr	r1, [pc, #24]	; (8021ab4 <__assert_func+0x34>)
 8021a9a:	462b      	mov	r3, r5
 8021a9c:	f000 f81e 	bl	8021adc <fiprintf>
 8021aa0:	f000 f89f 	bl	8021be2 <abort>
 8021aa4:	4b04      	ldr	r3, [pc, #16]	; (8021ab8 <__assert_func+0x38>)
 8021aa6:	461c      	mov	r4, r3
 8021aa8:	e7f3      	b.n	8021a92 <__assert_func+0x12>
 8021aaa:	bf00      	nop
 8021aac:	2000002c 	.word	0x2000002c
 8021ab0:	08022685 	.word	0x08022685
 8021ab4:	08022692 	.word	0x08022692
 8021ab8:	080226c0 	.word	0x080226c0

08021abc <_close_r>:
 8021abc:	b538      	push	{r3, r4, r5, lr}
 8021abe:	4d06      	ldr	r5, [pc, #24]	; (8021ad8 <_close_r+0x1c>)
 8021ac0:	2300      	movs	r3, #0
 8021ac2:	4604      	mov	r4, r0
 8021ac4:	4608      	mov	r0, r1
 8021ac6:	602b      	str	r3, [r5, #0]
 8021ac8:	f7f4 ffe4 	bl	8016a94 <_close>
 8021acc:	1c43      	adds	r3, r0, #1
 8021ace:	d102      	bne.n	8021ad6 <_close_r+0x1a>
 8021ad0:	682b      	ldr	r3, [r5, #0]
 8021ad2:	b103      	cbz	r3, 8021ad6 <_close_r+0x1a>
 8021ad4:	6023      	str	r3, [r4, #0]
 8021ad6:	bd38      	pop	{r3, r4, r5, pc}
 8021ad8:	2000e0ec 	.word	0x2000e0ec

08021adc <fiprintf>:
 8021adc:	b40e      	push	{r1, r2, r3}
 8021ade:	b503      	push	{r0, r1, lr}
 8021ae0:	4601      	mov	r1, r0
 8021ae2:	ab03      	add	r3, sp, #12
 8021ae4:	4805      	ldr	r0, [pc, #20]	; (8021afc <fiprintf+0x20>)
 8021ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8021aea:	6800      	ldr	r0, [r0, #0]
 8021aec:	9301      	str	r3, [sp, #4]
 8021aee:	f7ff fde9 	bl	80216c4 <_vfiprintf_r>
 8021af2:	b002      	add	sp, #8
 8021af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8021af8:	b003      	add	sp, #12
 8021afa:	4770      	bx	lr
 8021afc:	2000002c 	.word	0x2000002c

08021b00 <_fstat_r>:
 8021b00:	b538      	push	{r3, r4, r5, lr}
 8021b02:	4d07      	ldr	r5, [pc, #28]	; (8021b20 <_fstat_r+0x20>)
 8021b04:	2300      	movs	r3, #0
 8021b06:	4604      	mov	r4, r0
 8021b08:	4608      	mov	r0, r1
 8021b0a:	4611      	mov	r1, r2
 8021b0c:	602b      	str	r3, [r5, #0]
 8021b0e:	f7f4 ffcd 	bl	8016aac <_fstat>
 8021b12:	1c43      	adds	r3, r0, #1
 8021b14:	d102      	bne.n	8021b1c <_fstat_r+0x1c>
 8021b16:	682b      	ldr	r3, [r5, #0]
 8021b18:	b103      	cbz	r3, 8021b1c <_fstat_r+0x1c>
 8021b1a:	6023      	str	r3, [r4, #0]
 8021b1c:	bd38      	pop	{r3, r4, r5, pc}
 8021b1e:	bf00      	nop
 8021b20:	2000e0ec 	.word	0x2000e0ec

08021b24 <_isatty_r>:
 8021b24:	b538      	push	{r3, r4, r5, lr}
 8021b26:	4d06      	ldr	r5, [pc, #24]	; (8021b40 <_isatty_r+0x1c>)
 8021b28:	2300      	movs	r3, #0
 8021b2a:	4604      	mov	r4, r0
 8021b2c:	4608      	mov	r0, r1
 8021b2e:	602b      	str	r3, [r5, #0]
 8021b30:	f7f4 ffcc 	bl	8016acc <_isatty>
 8021b34:	1c43      	adds	r3, r0, #1
 8021b36:	d102      	bne.n	8021b3e <_isatty_r+0x1a>
 8021b38:	682b      	ldr	r3, [r5, #0]
 8021b3a:	b103      	cbz	r3, 8021b3e <_isatty_r+0x1a>
 8021b3c:	6023      	str	r3, [r4, #0]
 8021b3e:	bd38      	pop	{r3, r4, r5, pc}
 8021b40:	2000e0ec 	.word	0x2000e0ec

08021b44 <_lseek_r>:
 8021b44:	b538      	push	{r3, r4, r5, lr}
 8021b46:	4d07      	ldr	r5, [pc, #28]	; (8021b64 <_lseek_r+0x20>)
 8021b48:	4604      	mov	r4, r0
 8021b4a:	4608      	mov	r0, r1
 8021b4c:	4611      	mov	r1, r2
 8021b4e:	2200      	movs	r2, #0
 8021b50:	602a      	str	r2, [r5, #0]
 8021b52:	461a      	mov	r2, r3
 8021b54:	f7f4 ffc5 	bl	8016ae2 <_lseek>
 8021b58:	1c43      	adds	r3, r0, #1
 8021b5a:	d102      	bne.n	8021b62 <_lseek_r+0x1e>
 8021b5c:	682b      	ldr	r3, [r5, #0]
 8021b5e:	b103      	cbz	r3, 8021b62 <_lseek_r+0x1e>
 8021b60:	6023      	str	r3, [r4, #0]
 8021b62:	bd38      	pop	{r3, r4, r5, pc}
 8021b64:	2000e0ec 	.word	0x2000e0ec

08021b68 <__ascii_mbtowc>:
 8021b68:	b082      	sub	sp, #8
 8021b6a:	b901      	cbnz	r1, 8021b6e <__ascii_mbtowc+0x6>
 8021b6c:	a901      	add	r1, sp, #4
 8021b6e:	b142      	cbz	r2, 8021b82 <__ascii_mbtowc+0x1a>
 8021b70:	b14b      	cbz	r3, 8021b86 <__ascii_mbtowc+0x1e>
 8021b72:	7813      	ldrb	r3, [r2, #0]
 8021b74:	600b      	str	r3, [r1, #0]
 8021b76:	7812      	ldrb	r2, [r2, #0]
 8021b78:	1e10      	subs	r0, r2, #0
 8021b7a:	bf18      	it	ne
 8021b7c:	2001      	movne	r0, #1
 8021b7e:	b002      	add	sp, #8
 8021b80:	4770      	bx	lr
 8021b82:	4610      	mov	r0, r2
 8021b84:	e7fb      	b.n	8021b7e <__ascii_mbtowc+0x16>
 8021b86:	f06f 0001 	mvn.w	r0, #1
 8021b8a:	e7f8      	b.n	8021b7e <__ascii_mbtowc+0x16>

08021b8c <__malloc_lock>:
 8021b8c:	4801      	ldr	r0, [pc, #4]	; (8021b94 <__malloc_lock+0x8>)
 8021b8e:	f7ff b886 	b.w	8020c9e <__retarget_lock_acquire_recursive>
 8021b92:	bf00      	nop
 8021b94:	2000e0e0 	.word	0x2000e0e0

08021b98 <__malloc_unlock>:
 8021b98:	4801      	ldr	r0, [pc, #4]	; (8021ba0 <__malloc_unlock+0x8>)
 8021b9a:	f7ff b881 	b.w	8020ca0 <__retarget_lock_release_recursive>
 8021b9e:	bf00      	nop
 8021ba0:	2000e0e0 	.word	0x2000e0e0

08021ba4 <_read_r>:
 8021ba4:	b538      	push	{r3, r4, r5, lr}
 8021ba6:	4d07      	ldr	r5, [pc, #28]	; (8021bc4 <_read_r+0x20>)
 8021ba8:	4604      	mov	r4, r0
 8021baa:	4608      	mov	r0, r1
 8021bac:	4611      	mov	r1, r2
 8021bae:	2200      	movs	r2, #0
 8021bb0:	602a      	str	r2, [r5, #0]
 8021bb2:	461a      	mov	r2, r3
 8021bb4:	f7f4 ff30 	bl	8016a18 <_read>
 8021bb8:	1c43      	adds	r3, r0, #1
 8021bba:	d102      	bne.n	8021bc2 <_read_r+0x1e>
 8021bbc:	682b      	ldr	r3, [r5, #0]
 8021bbe:	b103      	cbz	r3, 8021bc2 <_read_r+0x1e>
 8021bc0:	6023      	str	r3, [r4, #0]
 8021bc2:	bd38      	pop	{r3, r4, r5, pc}
 8021bc4:	2000e0ec 	.word	0x2000e0ec

08021bc8 <__ascii_wctomb>:
 8021bc8:	b149      	cbz	r1, 8021bde <__ascii_wctomb+0x16>
 8021bca:	2aff      	cmp	r2, #255	; 0xff
 8021bcc:	bf85      	ittet	hi
 8021bce:	238a      	movhi	r3, #138	; 0x8a
 8021bd0:	6003      	strhi	r3, [r0, #0]
 8021bd2:	700a      	strbls	r2, [r1, #0]
 8021bd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8021bd8:	bf98      	it	ls
 8021bda:	2001      	movls	r0, #1
 8021bdc:	4770      	bx	lr
 8021bde:	4608      	mov	r0, r1
 8021be0:	4770      	bx	lr

08021be2 <abort>:
 8021be2:	b508      	push	{r3, lr}
 8021be4:	2006      	movs	r0, #6
 8021be6:	f000 f82b 	bl	8021c40 <raise>
 8021bea:	2001      	movs	r0, #1
 8021bec:	f7f4 ff0a 	bl	8016a04 <_exit>

08021bf0 <_raise_r>:
 8021bf0:	291f      	cmp	r1, #31
 8021bf2:	b538      	push	{r3, r4, r5, lr}
 8021bf4:	4604      	mov	r4, r0
 8021bf6:	460d      	mov	r5, r1
 8021bf8:	d904      	bls.n	8021c04 <_raise_r+0x14>
 8021bfa:	2316      	movs	r3, #22
 8021bfc:	6003      	str	r3, [r0, #0]
 8021bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8021c02:	bd38      	pop	{r3, r4, r5, pc}
 8021c04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021c06:	b112      	cbz	r2, 8021c0e <_raise_r+0x1e>
 8021c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021c0c:	b94b      	cbnz	r3, 8021c22 <_raise_r+0x32>
 8021c0e:	4620      	mov	r0, r4
 8021c10:	f000 f830 	bl	8021c74 <_getpid_r>
 8021c14:	462a      	mov	r2, r5
 8021c16:	4601      	mov	r1, r0
 8021c18:	4620      	mov	r0, r4
 8021c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021c1e:	f000 b817 	b.w	8021c50 <_kill_r>
 8021c22:	2b01      	cmp	r3, #1
 8021c24:	d00a      	beq.n	8021c3c <_raise_r+0x4c>
 8021c26:	1c59      	adds	r1, r3, #1
 8021c28:	d103      	bne.n	8021c32 <_raise_r+0x42>
 8021c2a:	2316      	movs	r3, #22
 8021c2c:	6003      	str	r3, [r0, #0]
 8021c2e:	2001      	movs	r0, #1
 8021c30:	e7e7      	b.n	8021c02 <_raise_r+0x12>
 8021c32:	2400      	movs	r4, #0
 8021c34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021c38:	4628      	mov	r0, r5
 8021c3a:	4798      	blx	r3
 8021c3c:	2000      	movs	r0, #0
 8021c3e:	e7e0      	b.n	8021c02 <_raise_r+0x12>

08021c40 <raise>:
 8021c40:	4b02      	ldr	r3, [pc, #8]	; (8021c4c <raise+0xc>)
 8021c42:	4601      	mov	r1, r0
 8021c44:	6818      	ldr	r0, [r3, #0]
 8021c46:	f7ff bfd3 	b.w	8021bf0 <_raise_r>
 8021c4a:	bf00      	nop
 8021c4c:	2000002c 	.word	0x2000002c

08021c50 <_kill_r>:
 8021c50:	b538      	push	{r3, r4, r5, lr}
 8021c52:	4d07      	ldr	r5, [pc, #28]	; (8021c70 <_kill_r+0x20>)
 8021c54:	2300      	movs	r3, #0
 8021c56:	4604      	mov	r4, r0
 8021c58:	4608      	mov	r0, r1
 8021c5a:	4611      	mov	r1, r2
 8021c5c:	602b      	str	r3, [r5, #0]
 8021c5e:	f7f4 fec1 	bl	80169e4 <_kill>
 8021c62:	1c43      	adds	r3, r0, #1
 8021c64:	d102      	bne.n	8021c6c <_kill_r+0x1c>
 8021c66:	682b      	ldr	r3, [r5, #0]
 8021c68:	b103      	cbz	r3, 8021c6c <_kill_r+0x1c>
 8021c6a:	6023      	str	r3, [r4, #0]
 8021c6c:	bd38      	pop	{r3, r4, r5, pc}
 8021c6e:	bf00      	nop
 8021c70:	2000e0ec 	.word	0x2000e0ec

08021c74 <_getpid_r>:
 8021c74:	f7f4 beae 	b.w	80169d4 <_getpid>

08021c78 <exp>:
 8021c78:	b538      	push	{r3, r4, r5, lr}
 8021c7a:	ed2d 8b02 	vpush	{d8}
 8021c7e:	ec55 4b10 	vmov	r4, r5, d0
 8021c82:	f000 f841 	bl	8021d08 <__ieee754_exp>
 8021c86:	eeb0 8a40 	vmov.f32	s16, s0
 8021c8a:	eef0 8a60 	vmov.f32	s17, s1
 8021c8e:	ec45 4b10 	vmov	d0, r4, r5
 8021c92:	f000 f9eb 	bl	802206c <finite>
 8021c96:	b168      	cbz	r0, 8021cb4 <exp+0x3c>
 8021c98:	a317      	add	r3, pc, #92	; (adr r3, 8021cf8 <exp+0x80>)
 8021c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c9e:	4620      	mov	r0, r4
 8021ca0:	4629      	mov	r1, r5
 8021ca2:	f7de ff61 	bl	8000b68 <__aeabi_dcmpgt>
 8021ca6:	b160      	cbz	r0, 8021cc2 <exp+0x4a>
 8021ca8:	f7fd f9b2 	bl	801f010 <__errno>
 8021cac:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8021ce8 <exp+0x70>
 8021cb0:	2322      	movs	r3, #34	; 0x22
 8021cb2:	6003      	str	r3, [r0, #0]
 8021cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8021cb8:	eef0 0a68 	vmov.f32	s1, s17
 8021cbc:	ecbd 8b02 	vpop	{d8}
 8021cc0:	bd38      	pop	{r3, r4, r5, pc}
 8021cc2:	a30f      	add	r3, pc, #60	; (adr r3, 8021d00 <exp+0x88>)
 8021cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cc8:	4620      	mov	r0, r4
 8021cca:	4629      	mov	r1, r5
 8021ccc:	f7de ff2e 	bl	8000b2c <__aeabi_dcmplt>
 8021cd0:	2800      	cmp	r0, #0
 8021cd2:	d0ef      	beq.n	8021cb4 <exp+0x3c>
 8021cd4:	f7fd f99c 	bl	801f010 <__errno>
 8021cd8:	2322      	movs	r3, #34	; 0x22
 8021cda:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8021cf0 <exp+0x78>
 8021cde:	6003      	str	r3, [r0, #0]
 8021ce0:	e7e8      	b.n	8021cb4 <exp+0x3c>
 8021ce2:	bf00      	nop
 8021ce4:	f3af 8000 	nop.w
 8021ce8:	00000000 	.word	0x00000000
 8021cec:	7ff00000 	.word	0x7ff00000
	...
 8021cf8:	fefa39ef 	.word	0xfefa39ef
 8021cfc:	40862e42 	.word	0x40862e42
 8021d00:	d52d3051 	.word	0xd52d3051
 8021d04:	c0874910 	.word	0xc0874910

08021d08 <__ieee754_exp>:
 8021d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d0c:	ec55 4b10 	vmov	r4, r5, d0
 8021d10:	49b5      	ldr	r1, [pc, #724]	; (8021fe8 <__ieee754_exp+0x2e0>)
 8021d12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021d16:	428b      	cmp	r3, r1
 8021d18:	ed2d 8b04 	vpush	{d8-d9}
 8021d1c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8021d20:	d93d      	bls.n	8021d9e <__ieee754_exp+0x96>
 8021d22:	49b2      	ldr	r1, [pc, #712]	; (8021fec <__ieee754_exp+0x2e4>)
 8021d24:	428b      	cmp	r3, r1
 8021d26:	d918      	bls.n	8021d5a <__ieee754_exp+0x52>
 8021d28:	ee10 3a10 	vmov	r3, s0
 8021d2c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8021d30:	4313      	orrs	r3, r2
 8021d32:	d009      	beq.n	8021d48 <__ieee754_exp+0x40>
 8021d34:	ee10 2a10 	vmov	r2, s0
 8021d38:	462b      	mov	r3, r5
 8021d3a:	4620      	mov	r0, r4
 8021d3c:	4629      	mov	r1, r5
 8021d3e:	f7de facd 	bl	80002dc <__adddf3>
 8021d42:	4604      	mov	r4, r0
 8021d44:	460d      	mov	r5, r1
 8021d46:	e002      	b.n	8021d4e <__ieee754_exp+0x46>
 8021d48:	b10e      	cbz	r6, 8021d4e <__ieee754_exp+0x46>
 8021d4a:	2400      	movs	r4, #0
 8021d4c:	2500      	movs	r5, #0
 8021d4e:	ecbd 8b04 	vpop	{d8-d9}
 8021d52:	ec45 4b10 	vmov	d0, r4, r5
 8021d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d5a:	a38d      	add	r3, pc, #564	; (adr r3, 8021f90 <__ieee754_exp+0x288>)
 8021d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d60:	ee10 0a10 	vmov	r0, s0
 8021d64:	4629      	mov	r1, r5
 8021d66:	f7de feff 	bl	8000b68 <__aeabi_dcmpgt>
 8021d6a:	4607      	mov	r7, r0
 8021d6c:	b130      	cbz	r0, 8021d7c <__ieee754_exp+0x74>
 8021d6e:	ecbd 8b04 	vpop	{d8-d9}
 8021d72:	2000      	movs	r0, #0
 8021d74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d78:	f000 b96f 	b.w	802205a <__math_oflow>
 8021d7c:	a386      	add	r3, pc, #536	; (adr r3, 8021f98 <__ieee754_exp+0x290>)
 8021d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d82:	4620      	mov	r0, r4
 8021d84:	4629      	mov	r1, r5
 8021d86:	f7de fed1 	bl	8000b2c <__aeabi_dcmplt>
 8021d8a:	2800      	cmp	r0, #0
 8021d8c:	f000 808b 	beq.w	8021ea6 <__ieee754_exp+0x19e>
 8021d90:	ecbd 8b04 	vpop	{d8-d9}
 8021d94:	4638      	mov	r0, r7
 8021d96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d9a:	f000 b955 	b.w	8022048 <__math_uflow>
 8021d9e:	4a94      	ldr	r2, [pc, #592]	; (8021ff0 <__ieee754_exp+0x2e8>)
 8021da0:	4293      	cmp	r3, r2
 8021da2:	f240 80ac 	bls.w	8021efe <__ieee754_exp+0x1f6>
 8021da6:	4a93      	ldr	r2, [pc, #588]	; (8021ff4 <__ieee754_exp+0x2ec>)
 8021da8:	4293      	cmp	r3, r2
 8021daa:	d87c      	bhi.n	8021ea6 <__ieee754_exp+0x19e>
 8021dac:	4b92      	ldr	r3, [pc, #584]	; (8021ff8 <__ieee754_exp+0x2f0>)
 8021dae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021db6:	ee10 0a10 	vmov	r0, s0
 8021dba:	4629      	mov	r1, r5
 8021dbc:	f7de fa8c 	bl	80002d8 <__aeabi_dsub>
 8021dc0:	4b8e      	ldr	r3, [pc, #568]	; (8021ffc <__ieee754_exp+0x2f4>)
 8021dc2:	00f7      	lsls	r7, r6, #3
 8021dc4:	443b      	add	r3, r7
 8021dc6:	ed93 7b00 	vldr	d7, [r3]
 8021dca:	f1c6 0a01 	rsb	sl, r6, #1
 8021dce:	4680      	mov	r8, r0
 8021dd0:	4689      	mov	r9, r1
 8021dd2:	ebaa 0a06 	sub.w	sl, sl, r6
 8021dd6:	eeb0 8a47 	vmov.f32	s16, s14
 8021dda:	eef0 8a67 	vmov.f32	s17, s15
 8021dde:	ec53 2b18 	vmov	r2, r3, d8
 8021de2:	4640      	mov	r0, r8
 8021de4:	4649      	mov	r1, r9
 8021de6:	f7de fa77 	bl	80002d8 <__aeabi_dsub>
 8021dea:	4604      	mov	r4, r0
 8021dec:	460d      	mov	r5, r1
 8021dee:	4622      	mov	r2, r4
 8021df0:	462b      	mov	r3, r5
 8021df2:	4620      	mov	r0, r4
 8021df4:	4629      	mov	r1, r5
 8021df6:	f7de fc27 	bl	8000648 <__aeabi_dmul>
 8021dfa:	a369      	add	r3, pc, #420	; (adr r3, 8021fa0 <__ieee754_exp+0x298>)
 8021dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e00:	4606      	mov	r6, r0
 8021e02:	460f      	mov	r7, r1
 8021e04:	f7de fc20 	bl	8000648 <__aeabi_dmul>
 8021e08:	a367      	add	r3, pc, #412	; (adr r3, 8021fa8 <__ieee754_exp+0x2a0>)
 8021e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e0e:	f7de fa63 	bl	80002d8 <__aeabi_dsub>
 8021e12:	4632      	mov	r2, r6
 8021e14:	463b      	mov	r3, r7
 8021e16:	f7de fc17 	bl	8000648 <__aeabi_dmul>
 8021e1a:	a365      	add	r3, pc, #404	; (adr r3, 8021fb0 <__ieee754_exp+0x2a8>)
 8021e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e20:	f7de fa5c 	bl	80002dc <__adddf3>
 8021e24:	4632      	mov	r2, r6
 8021e26:	463b      	mov	r3, r7
 8021e28:	f7de fc0e 	bl	8000648 <__aeabi_dmul>
 8021e2c:	a362      	add	r3, pc, #392	; (adr r3, 8021fb8 <__ieee754_exp+0x2b0>)
 8021e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e32:	f7de fa51 	bl	80002d8 <__aeabi_dsub>
 8021e36:	4632      	mov	r2, r6
 8021e38:	463b      	mov	r3, r7
 8021e3a:	f7de fc05 	bl	8000648 <__aeabi_dmul>
 8021e3e:	a360      	add	r3, pc, #384	; (adr r3, 8021fc0 <__ieee754_exp+0x2b8>)
 8021e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e44:	f7de fa4a 	bl	80002dc <__adddf3>
 8021e48:	4632      	mov	r2, r6
 8021e4a:	463b      	mov	r3, r7
 8021e4c:	f7de fbfc 	bl	8000648 <__aeabi_dmul>
 8021e50:	4602      	mov	r2, r0
 8021e52:	460b      	mov	r3, r1
 8021e54:	4620      	mov	r0, r4
 8021e56:	4629      	mov	r1, r5
 8021e58:	f7de fa3e 	bl	80002d8 <__aeabi_dsub>
 8021e5c:	4602      	mov	r2, r0
 8021e5e:	460b      	mov	r3, r1
 8021e60:	4606      	mov	r6, r0
 8021e62:	460f      	mov	r7, r1
 8021e64:	4620      	mov	r0, r4
 8021e66:	4629      	mov	r1, r5
 8021e68:	f7de fbee 	bl	8000648 <__aeabi_dmul>
 8021e6c:	ec41 0b19 	vmov	d9, r0, r1
 8021e70:	f1ba 0f00 	cmp.w	sl, #0
 8021e74:	d15d      	bne.n	8021f32 <__ieee754_exp+0x22a>
 8021e76:	2200      	movs	r2, #0
 8021e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021e7c:	4630      	mov	r0, r6
 8021e7e:	4639      	mov	r1, r7
 8021e80:	f7de fa2a 	bl	80002d8 <__aeabi_dsub>
 8021e84:	4602      	mov	r2, r0
 8021e86:	460b      	mov	r3, r1
 8021e88:	ec51 0b19 	vmov	r0, r1, d9
 8021e8c:	f7de fd06 	bl	800089c <__aeabi_ddiv>
 8021e90:	4622      	mov	r2, r4
 8021e92:	462b      	mov	r3, r5
 8021e94:	f7de fa20 	bl	80002d8 <__aeabi_dsub>
 8021e98:	4602      	mov	r2, r0
 8021e9a:	460b      	mov	r3, r1
 8021e9c:	2000      	movs	r0, #0
 8021e9e:	4958      	ldr	r1, [pc, #352]	; (8022000 <__ieee754_exp+0x2f8>)
 8021ea0:	f7de fa1a 	bl	80002d8 <__aeabi_dsub>
 8021ea4:	e74d      	b.n	8021d42 <__ieee754_exp+0x3a>
 8021ea6:	4857      	ldr	r0, [pc, #348]	; (8022004 <__ieee754_exp+0x2fc>)
 8021ea8:	a347      	add	r3, pc, #284	; (adr r3, 8021fc8 <__ieee754_exp+0x2c0>)
 8021eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021eae:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8021eb2:	4629      	mov	r1, r5
 8021eb4:	4620      	mov	r0, r4
 8021eb6:	f7de fbc7 	bl	8000648 <__aeabi_dmul>
 8021eba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021ebe:	f7de fa0d 	bl	80002dc <__adddf3>
 8021ec2:	f7de fe71 	bl	8000ba8 <__aeabi_d2iz>
 8021ec6:	4682      	mov	sl, r0
 8021ec8:	f7de fb54 	bl	8000574 <__aeabi_i2d>
 8021ecc:	a340      	add	r3, pc, #256	; (adr r3, 8021fd0 <__ieee754_exp+0x2c8>)
 8021ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ed2:	4606      	mov	r6, r0
 8021ed4:	460f      	mov	r7, r1
 8021ed6:	f7de fbb7 	bl	8000648 <__aeabi_dmul>
 8021eda:	4602      	mov	r2, r0
 8021edc:	460b      	mov	r3, r1
 8021ede:	4620      	mov	r0, r4
 8021ee0:	4629      	mov	r1, r5
 8021ee2:	f7de f9f9 	bl	80002d8 <__aeabi_dsub>
 8021ee6:	a33c      	add	r3, pc, #240	; (adr r3, 8021fd8 <__ieee754_exp+0x2d0>)
 8021ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021eec:	4680      	mov	r8, r0
 8021eee:	4689      	mov	r9, r1
 8021ef0:	4630      	mov	r0, r6
 8021ef2:	4639      	mov	r1, r7
 8021ef4:	f7de fba8 	bl	8000648 <__aeabi_dmul>
 8021ef8:	ec41 0b18 	vmov	d8, r0, r1
 8021efc:	e76f      	b.n	8021dde <__ieee754_exp+0xd6>
 8021efe:	4a42      	ldr	r2, [pc, #264]	; (8022008 <__ieee754_exp+0x300>)
 8021f00:	4293      	cmp	r3, r2
 8021f02:	d811      	bhi.n	8021f28 <__ieee754_exp+0x220>
 8021f04:	a336      	add	r3, pc, #216	; (adr r3, 8021fe0 <__ieee754_exp+0x2d8>)
 8021f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f0a:	ee10 0a10 	vmov	r0, s0
 8021f0e:	4629      	mov	r1, r5
 8021f10:	f7de f9e4 	bl	80002dc <__adddf3>
 8021f14:	4b3a      	ldr	r3, [pc, #232]	; (8022000 <__ieee754_exp+0x2f8>)
 8021f16:	2200      	movs	r2, #0
 8021f18:	f7de fe26 	bl	8000b68 <__aeabi_dcmpgt>
 8021f1c:	b138      	cbz	r0, 8021f2e <__ieee754_exp+0x226>
 8021f1e:	4b38      	ldr	r3, [pc, #224]	; (8022000 <__ieee754_exp+0x2f8>)
 8021f20:	2200      	movs	r2, #0
 8021f22:	4620      	mov	r0, r4
 8021f24:	4629      	mov	r1, r5
 8021f26:	e70a      	b.n	8021d3e <__ieee754_exp+0x36>
 8021f28:	f04f 0a00 	mov.w	sl, #0
 8021f2c:	e75f      	b.n	8021dee <__ieee754_exp+0xe6>
 8021f2e:	4682      	mov	sl, r0
 8021f30:	e75d      	b.n	8021dee <__ieee754_exp+0xe6>
 8021f32:	4632      	mov	r2, r6
 8021f34:	463b      	mov	r3, r7
 8021f36:	2000      	movs	r0, #0
 8021f38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8021f3c:	f7de f9cc 	bl	80002d8 <__aeabi_dsub>
 8021f40:	4602      	mov	r2, r0
 8021f42:	460b      	mov	r3, r1
 8021f44:	ec51 0b19 	vmov	r0, r1, d9
 8021f48:	f7de fca8 	bl	800089c <__aeabi_ddiv>
 8021f4c:	4602      	mov	r2, r0
 8021f4e:	460b      	mov	r3, r1
 8021f50:	ec51 0b18 	vmov	r0, r1, d8
 8021f54:	f7de f9c0 	bl	80002d8 <__aeabi_dsub>
 8021f58:	4642      	mov	r2, r8
 8021f5a:	464b      	mov	r3, r9
 8021f5c:	f7de f9bc 	bl	80002d8 <__aeabi_dsub>
 8021f60:	4602      	mov	r2, r0
 8021f62:	460b      	mov	r3, r1
 8021f64:	2000      	movs	r0, #0
 8021f66:	4926      	ldr	r1, [pc, #152]	; (8022000 <__ieee754_exp+0x2f8>)
 8021f68:	f7de f9b6 	bl	80002d8 <__aeabi_dsub>
 8021f6c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8021f70:	4592      	cmp	sl, r2
 8021f72:	db02      	blt.n	8021f7a <__ieee754_exp+0x272>
 8021f74:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021f78:	e6e3      	b.n	8021d42 <__ieee754_exp+0x3a>
 8021f7a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8021f7e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021f82:	2200      	movs	r2, #0
 8021f84:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8021f88:	f7de fb5e 	bl	8000648 <__aeabi_dmul>
 8021f8c:	e6d9      	b.n	8021d42 <__ieee754_exp+0x3a>
 8021f8e:	bf00      	nop
 8021f90:	fefa39ef 	.word	0xfefa39ef
 8021f94:	40862e42 	.word	0x40862e42
 8021f98:	d52d3051 	.word	0xd52d3051
 8021f9c:	c0874910 	.word	0xc0874910
 8021fa0:	72bea4d0 	.word	0x72bea4d0
 8021fa4:	3e663769 	.word	0x3e663769
 8021fa8:	c5d26bf1 	.word	0xc5d26bf1
 8021fac:	3ebbbd41 	.word	0x3ebbbd41
 8021fb0:	af25de2c 	.word	0xaf25de2c
 8021fb4:	3f11566a 	.word	0x3f11566a
 8021fb8:	16bebd93 	.word	0x16bebd93
 8021fbc:	3f66c16c 	.word	0x3f66c16c
 8021fc0:	5555553e 	.word	0x5555553e
 8021fc4:	3fc55555 	.word	0x3fc55555
 8021fc8:	652b82fe 	.word	0x652b82fe
 8021fcc:	3ff71547 	.word	0x3ff71547
 8021fd0:	fee00000 	.word	0xfee00000
 8021fd4:	3fe62e42 	.word	0x3fe62e42
 8021fd8:	35793c76 	.word	0x35793c76
 8021fdc:	3dea39ef 	.word	0x3dea39ef
 8021fe0:	8800759c 	.word	0x8800759c
 8021fe4:	7e37e43c 	.word	0x7e37e43c
 8021fe8:	40862e41 	.word	0x40862e41
 8021fec:	7fefffff 	.word	0x7fefffff
 8021ff0:	3fd62e42 	.word	0x3fd62e42
 8021ff4:	3ff0a2b1 	.word	0x3ff0a2b1
 8021ff8:	080227e0 	.word	0x080227e0
 8021ffc:	080227f0 	.word	0x080227f0
 8022000:	3ff00000 	.word	0x3ff00000
 8022004:	080227d0 	.word	0x080227d0
 8022008:	3defffff 	.word	0x3defffff

0802200c <with_errno>:
 802200c:	b570      	push	{r4, r5, r6, lr}
 802200e:	4604      	mov	r4, r0
 8022010:	460d      	mov	r5, r1
 8022012:	4616      	mov	r6, r2
 8022014:	f7fc fffc 	bl	801f010 <__errno>
 8022018:	4629      	mov	r1, r5
 802201a:	6006      	str	r6, [r0, #0]
 802201c:	4620      	mov	r0, r4
 802201e:	bd70      	pop	{r4, r5, r6, pc}

08022020 <xflow>:
 8022020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022022:	4614      	mov	r4, r2
 8022024:	461d      	mov	r5, r3
 8022026:	b108      	cbz	r0, 802202c <xflow+0xc>
 8022028:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802202c:	e9cd 2300 	strd	r2, r3, [sp]
 8022030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022034:	4620      	mov	r0, r4
 8022036:	4629      	mov	r1, r5
 8022038:	f7de fb06 	bl	8000648 <__aeabi_dmul>
 802203c:	2222      	movs	r2, #34	; 0x22
 802203e:	b003      	add	sp, #12
 8022040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022044:	f7ff bfe2 	b.w	802200c <with_errno>

08022048 <__math_uflow>:
 8022048:	b508      	push	{r3, lr}
 802204a:	2200      	movs	r2, #0
 802204c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8022050:	f7ff ffe6 	bl	8022020 <xflow>
 8022054:	ec41 0b10 	vmov	d0, r0, r1
 8022058:	bd08      	pop	{r3, pc}

0802205a <__math_oflow>:
 802205a:	b508      	push	{r3, lr}
 802205c:	2200      	movs	r2, #0
 802205e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022062:	f7ff ffdd 	bl	8022020 <xflow>
 8022066:	ec41 0b10 	vmov	d0, r0, r1
 802206a:	bd08      	pop	{r3, pc}

0802206c <finite>:
 802206c:	b082      	sub	sp, #8
 802206e:	ed8d 0b00 	vstr	d0, [sp]
 8022072:	9801      	ldr	r0, [sp, #4]
 8022074:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8022078:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802207c:	0fc0      	lsrs	r0, r0, #31
 802207e:	b002      	add	sp, #8
 8022080:	4770      	bx	lr
	...

08022084 <_init>:
 8022084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022086:	bf00      	nop
 8022088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802208a:	bc08      	pop	{r3}
 802208c:	469e      	mov	lr, r3
 802208e:	4770      	bx	lr

08022090 <_fini>:
 8022090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022092:	bf00      	nop
 8022094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022096:	bc08      	pop	{r3}
 8022098:	469e      	mov	lr, r3
 802209a:	4770      	bx	lr
