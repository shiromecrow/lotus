
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021c74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08021e58  08021e58  00031e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022580  08022580  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08022580  08022580  00032580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022588  08022588  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022588  08022588  00032588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802258c  0802258c  0003258c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08022590  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000def4  200001fc  0802278c  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e0f0  0802278c  0004e0f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b87  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000600d  00000000  00000000  00067db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  0006ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  0006fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028533  00000000  00000000  00071a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031db6  00000000  00000000  00099fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2c3  00000000  00000000  000cbd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b702c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097e4  00000000  00000000  001b707c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021e3c 	.word	0x08021e3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08021e3c 	.word	0x08021e3c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <reset_speed+0x44>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <reset_speed+0x48>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <reset_speed+0x4c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <reset_speed+0x50>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <reset_speed+0x54>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <reset_speed+0x58>)
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <reset_speed+0x5c>)
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <reset_speed+0x60>)
 8001050:	601a      	str	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000248 	.word	0x20000248
 8001060:	2000024c 	.word	0x2000024c
 8001064:	20000238 	.word	0x20000238
 8001068:	2000023c 	.word	0x2000023c
 800106c:	20000258 	.word	0x20000258
 8001070:	2000025c 	.word	0x2000025c
 8001074:	20000260 	.word	0x20000260
 8001078:	3f266666 	.word	0x3f266666
 800107c:	00000000 	.word	0x00000000

08001080 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 8001086:	4bd0      	ldr	r3, [pc, #832]	; (80013c8 <interupt_calEncoder+0x348>)
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	4bcf      	ldr	r3, [pc, #828]	; (80013cc <interupt_calEncoder+0x34c>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013d0 <interupt_calEncoder+0x350>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd07      	ble.n	80010bc <interupt_calEncoder+0x3c>
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80013d4 <interupt_calEncoder+0x354>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c0:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80013d8 <interupt_calEncoder+0x358>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d507      	bpl.n	80010de <interupt_calEncoder+0x5e>
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80013d4 <interupt_calEncoder+0x354>
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010de:	4bbf      	ldr	r3, [pc, #764]	; (80013dc <interupt_calEncoder+0x35c>)
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4bbe      	ldr	r3, [pc, #760]	; (80013e0 <interupt_calEncoder+0x360>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	eef1 7a67 	vneg.f32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013d0 <interupt_calEncoder+0x350>
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd07      	ble.n	8001118 <interupt_calEncoder+0x98>
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013d4 <interupt_calEncoder+0x354>
 8001110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001114:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001118:	edd7 7a00 	vldr	s15, [r7]
 800111c:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80013d8 <interupt_calEncoder+0x358>
 8001120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d507      	bpl.n	800113a <interupt_calEncoder+0xba>
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013d4 <interupt_calEncoder+0x354>
 8001132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001136:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	a391      	add	r3, pc, #580	; (adr r3, 8001388 <interupt_calEncoder+0x308>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa7f 	bl	8000648 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4ba3      	ldr	r3, [pc, #652]	; (80013e4 <interupt_calEncoder+0x364>)
 8001158:	f7ff fba0 	bl	800089c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	a38a      	add	r3, pc, #552	; (adr r3, 8001390 <interupt_calEncoder+0x310>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa6d 	bl	8000648 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a388      	add	r3, pc, #544	; (adr r3, 8001398 <interupt_calEncoder+0x318>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa64 	bl	8000648 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a385      	add	r3, pc, #532	; (adr r3, 80013a0 <interupt_calEncoder+0x320>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa5b 	bl	8000648 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a383      	add	r3, pc, #524	; (adr r3, 80013a8 <interupt_calEncoder+0x328>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb7c 	bl	800089c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <interupt_calEncoder+0x368>)
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	a37c      	add	r3, pc, #496	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fb6a 	bl	800089c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d8:	f7ff fb60 	bl	800089c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b80      	ldr	r3, [pc, #512]	; (80013ec <interupt_calEncoder+0x36c>)
 80011ea:	f7ff fa2d 	bl	8000648 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	a370      	add	r3, pc, #448	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb4e 	bl	800089c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fcf6 	bl	8000bf8 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	4a78      	ldr	r2, [pc, #480]	; (80013f0 <interupt_calEncoder+0x370>)
 8001210:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff f9c0 	bl	8000598 <__aeabi_f2d>
 8001218:	a35b      	add	r3, pc, #364	; (adr r3, 8001388 <interupt_calEncoder+0x308>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fa13 	bl	8000648 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <interupt_calEncoder+0x364>)
 8001230:	f7ff fb34 	bl	800089c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	a354      	add	r3, pc, #336	; (adr r3, 8001390 <interupt_calEncoder+0x310>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff fa01 	bl	8000648 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a352      	add	r3, pc, #328	; (adr r3, 8001398 <interupt_calEncoder+0x318>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f9f8 	bl	8000648 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	a34f      	add	r3, pc, #316	; (adr r3, 80013a0 <interupt_calEncoder+0x320>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9ef 	bl	8000648 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	a34d      	add	r3, pc, #308	; (adr r3, 80013a8 <interupt_calEncoder+0x328>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff fb10 	bl	800089c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <interupt_calEncoder+0x368>)
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a34a      	add	r3, pc, #296	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fafe 	bl	800089c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b0:	f7ff faf4 	bl	800089c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <interupt_calEncoder+0x36c>)
 80012c2:	f7ff f9c1 	bl	8000648 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	a33a      	add	r3, pc, #232	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff fae2 	bl	800089c <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc8a 	bl	8000bf8 <__aeabi_d2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a43      	ldr	r2, [pc, #268]	; (80013f4 <interupt_calEncoder+0x374>)
 80012e8:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <interupt_calEncoder+0x378>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f952 	bl	8000598 <__aeabi_f2d>
 80012f4:	4604      	mov	r4, r0
 80012f6:	460d      	mov	r5, r1
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <interupt_calEncoder+0x370>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f94b 	bl	8000598 <__aeabi_f2d>
 8001302:	a32d      	add	r3, pc, #180	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f99e 	bl	8000648 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7fe ffe2 	bl	80002dc <__adddf3>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fc6a 	bl	8000bf8 <__aeabi_d2f>
 8001324:	4603      	mov	r3, r0
 8001326:	4a34      	ldr	r2, [pc, #208]	; (80013f8 <interupt_calEncoder+0x378>)
 8001328:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <interupt_calEncoder+0x37c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f932 	bl	8000598 <__aeabi_f2d>
 8001334:	4604      	mov	r4, r0
 8001336:	460d      	mov	r5, r1
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <interupt_calEncoder+0x374>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f92b 	bl	8000598 <__aeabi_f2d>
 8001342:	a31d      	add	r3, pc, #116	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f97e 	bl	8000648 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7fe ffc2 	bl	80002dc <__adddf3>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc4a 	bl	8000bf8 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	4a25      	ldr	r2, [pc, #148]	; (80013fc <interupt_calEncoder+0x37c>)
 8001368:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <interupt_calEncoder+0x35c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <interupt_calEncoder+0x360>)
 8001370:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <interupt_calEncoder+0x348>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <interupt_calEncoder+0x34c>)
 8001378:	6013      	str	r3, [r2, #0]

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	f3af 8000 	nop.w
 8001388:	54411744 	.word	0x54411744
 800138c:	400921fb 	.word	0x400921fb
 8001390:	4e70a65b 	.word	0x4e70a65b
 8001394:	3f882f36 	.word	0x3f882f36
 8001398:	a858793e 	.word	0xa858793e
 800139c:	3ff1cd35 	.word	0x3ff1cd35
 80013a0:	00000000 	.word	0x00000000
 80013a4:	4078c000 	.word	0x4078c000
 80013a8:	147ae148 	.word	0x147ae148
 80013ac:	4078fbae 	.word	0x4078fbae
 80013b0:	0a3d70a4 	.word	0x0a3d70a4
 80013b4:	4078efd7 	.word	0x4078efd7
 80013b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013bc:	3f50624d 	.word	0x3f50624d
 80013c0:	5c28f5c3 	.word	0x5c28f5c3
 80013c4:	40792a8f 	.word	0x40792a8f
 80013c8:	200006d8 	.word	0x200006d8
 80013cc:	20000218 	.word	0x20000218
 80013d0:	43340000 	.word	0x43340000
 80013d4:	43b40000 	.word	0x43b40000
 80013d8:	c3340000 	.word	0xc3340000
 80013dc:	200006dc 	.word	0x200006dc
 80013e0:	2000021c 	.word	0x2000021c
 80013e4:	40668000 	.word	0x40668000
 80013e8:	40790000 	.word	0x40790000
 80013ec:	408f4000 	.word	0x408f4000
 80013f0:	20000228 	.word	0x20000228
 80013f4:	2000022c 	.word	0x2000022c
 80013f8:	20000220 	.word	0x20000220
 80013fc:	20000224 	.word	0x20000224

08001400 <interupt_calFusion>:


void interupt_calFusion(void) {
 8001400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001404:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 8001406:	4ba4      	ldr	r3, [pc, #656]	; (8001698 <interupt_calFusion+0x298>)
 8001408:	ed93 7a00 	vldr	s14, [r3]
 800140c:	4ba3      	ldr	r3, [pc, #652]	; (800169c <interupt_calFusion+0x29c>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001416:	4ba0      	ldr	r3, [pc, #640]	; (8001698 <interupt_calFusion+0x298>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001420:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001424:	4b9e      	ldr	r3, [pc, #632]	; (80016a0 <interupt_calFusion+0x2a0>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	4b9a      	ldr	r3, [pc, #616]	; (800169c <interupt_calFusion+0x29c>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001438:	4b97      	ldr	r3, [pc, #604]	; (8001698 <interupt_calFusion+0x298>)
 800143a:	ed93 7a00 	vldr	s14, [r3]
 800143e:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <interupt_calFusion+0x2a4>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001448:	4b93      	ldr	r3, [pc, #588]	; (8001698 <interupt_calFusion+0x298>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001452:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001456:	4b94      	ldr	r3, [pc, #592]	; (80016a8 <interupt_calFusion+0x2a8>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <interupt_calFusion+0x2a4>)
 8001466:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800146a:	4b90      	ldr	r3, [pc, #576]	; (80016ac <interupt_calFusion+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f892 	bl	8000598 <__aeabi_f2d>
 8001474:	4604      	mov	r4, r0
 8001476:	460d      	mov	r5, r1
 8001478:	4b88      	ldr	r3, [pc, #544]	; (800169c <interupt_calFusion+0x29c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f88b 	bl	8000598 <__aeabi_f2d>
 8001482:	a383      	add	r3, pc, #524	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff f8de 	bl	8000648 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7fe ff22 	bl	80002dc <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fbaa 	bl	8000bf8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a81      	ldr	r2, [pc, #516]	; (80016ac <interupt_calFusion+0x2ac>)
 80014a8:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <interupt_calFusion+0x2b0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f872 	bl	8000598 <__aeabi_f2d>
 80014b4:	4604      	mov	r4, r0
 80014b6:	460d      	mov	r5, r1
 80014b8:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <interupt_calFusion+0x2a4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f86b 	bl	8000598 <__aeabi_f2d>
 80014c2:	a373      	add	r3, pc, #460	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f8be 	bl	8000648 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe ff02 	bl	80002dc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb8a 	bl	8000bf8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a72      	ldr	r2, [pc, #456]	; (80016b0 <interupt_calFusion+0x2b0>)
 80014e8:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 80014ea:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <interupt_calFusion+0x298>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f852 	bl	8000598 <__aeabi_f2d>
 80014f4:	4604      	mov	r4, r0
 80014f6:	460d      	mov	r5, r1
 80014f8:	4b6e      	ldr	r3, [pc, #440]	; (80016b4 <interupt_calFusion+0x2b4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f84b 	bl	8000598 <__aeabi_f2d>
 8001502:	4680      	mov	r8, r0
 8001504:	4689      	mov	r9, r1
 8001506:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <interupt_calFusion+0x2b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f844 	bl	8000598 <__aeabi_f2d>
 8001510:	a35f      	add	r3, pc, #380	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f897 	bl	8000648 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7fe fedb 	bl	80002dc <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f88b 	bl	8000648 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4614      	mov	r4, r2
 8001538:	461d      	mov	r5, r3
 800153a:	4b57      	ldr	r3, [pc, #348]	; (8001698 <interupt_calFusion+0x298>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001544:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <interupt_calFusion+0x2a0>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f7ff f81f 	bl	8000598 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe febb 	bl	80002dc <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb43 	bl	8000bf8 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <interupt_calFusion+0x2b4>)
 8001576:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <interupt_calFusion+0x298>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff f80b 	bl	8000598 <__aeabi_f2d>
 8001582:	4604      	mov	r4, r0
 8001584:	460d      	mov	r5, r1
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <interupt_calFusion+0x2b4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f804 	bl	8000598 <__aeabi_f2d>
 8001590:	4680      	mov	r8, r0
 8001592:	4689      	mov	r9, r1
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <interupt_calFusion+0x2b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fffd 	bl	8000598 <__aeabi_f2d>
 800159e:	a33c      	add	r3, pc, #240	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4640      	mov	r0, r8
 80015ae:	4649      	mov	r1, r9
 80015b0:	f7fe fe94 	bl	80002dc <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7ff f844 	bl	8000648 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4614      	mov	r4, r2
 80015c6:	461d      	mov	r5, r3
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <interupt_calFusion+0x298>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <interupt_calFusion+0x2a8>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e0:	ee17 0a90 	vmov	r0, s15
 80015e4:	f7fe ffd8 	bl	8000598 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe74 	bl	80002dc <__adddf3>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fafc 	bl	8000bf8 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <interupt_calFusion+0x2bc>)
 8001604:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <interupt_calFusion+0x2c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <interupt_calFusion+0x2b4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffbd 	bl	8000598 <__aeabi_f2d>
 800161e:	a31c      	add	r3, pc, #112	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f810 	bl	8000648 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4620      	mov	r0, r4
 800162e:	4629      	mov	r1, r5
 8001630:	f7fe fe54 	bl	80002dc <__adddf3>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fadc 	bl	8000bf8 <__aeabi_d2f>
 8001640:	4603      	mov	r3, r0
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <interupt_calFusion+0x2c0>)
 8001644:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <interupt_calFusion+0x2c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ffa4 	bl	8000598 <__aeabi_f2d>
 8001650:	4604      	mov	r4, r0
 8001652:	460d      	mov	r5, r1
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <interupt_calFusion+0x2bc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff9d 	bl	8000598 <__aeabi_f2d>
 800165e:	a30c      	add	r3, pc, #48	; (adr r3, 8001690 <interupt_calFusion+0x290>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fff0 	bl	8000648 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7fe fe34 	bl	80002dc <__adddf3>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fabc 	bl	8000bf8 <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <interupt_calFusion+0x2c4>)
 8001684:	6013      	str	r3, [r2, #0]

}
 8001686:	bf00      	nop
 8001688:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800168c:	f3af 8000 	nop.w
 8001690:	d2f1a9fc 	.word	0xd2f1a9fc
 8001694:	3f50624d 	.word	0x3f50624d
 8001698:	20000260 	.word	0x20000260
 800169c:	20000238 	.word	0x20000238
 80016a0:	20000228 	.word	0x20000228
 80016a4:	2000023c 	.word	0x2000023c
 80016a8:	2000022c 	.word	0x2000022c
 80016ac:	20000230 	.word	0x20000230
 80016b0:	20000234 	.word	0x20000234
 80016b4:	20000258 	.word	0x20000258
 80016b8:	20000280 	.word	0x20000280
 80016bc:	2000025c 	.word	0x2000025c
 80016c0:	20000250 	.word	0x20000250
 80016c4:	20000254 	.word	0x20000254

080016c8 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	int s = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
	angle = 0;
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <reset_gyro+0xfc>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <reset_gyro+0x100>)
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 80016e2:	2301      	movs	r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	e026      	b.n	8001736 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <reset_gyro+0x104>)
 80016ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <reset_gyro+0x100>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <reset_gyro+0x100>)
 80016fa:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <reset_gyro+0x104>)
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <reset_gyro+0x108>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <reset_gyro+0x108>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <reset_gyro+0x104>)
 8001716:	ed93 7a04 	vldr	s14, [r3, #16]
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <reset_gyro+0x10c>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <reset_gyro+0x10c>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f006 fc68 	bl	8008000 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3301      	adds	r3, #1
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800173c:	ddd4      	ble.n	80016e8 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <reset_gyro+0x100>)
 8001740:	ed93 7a00 	vldr	s14, [r3]
 8001744:	eddf 6a24 	vldr	s13, [pc, #144]	; 80017d8 <reset_gyro+0x110>
 8001748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <reset_gyro+0x100>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <reset_gyro+0x108>)
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80017d8 <reset_gyro+0x110>
 800175c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <reset_gyro+0x108>)
 8001762:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <reset_gyro+0x10c>)
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80017d8 <reset_gyro+0x110>
 8001770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <reset_gyro+0x10c>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <reset_gyro+0xfc>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <reset_gyro+0x114>)
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <reset_gyro+0x118>)
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <reset_gyro+0x11c>)
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e009      	b.n	80017b4 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <reset_gyro+0x120>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b09      	cmp	r3, #9
 80017b8:	ddf2      	ble.n	80017a0 <reset_gyro+0xd8>
	}
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000264 	.word	0x20000264
 80017c8:	20000288 	.word	0x20000288
 80017cc:	200006e4 	.word	0x200006e4
 80017d0:	20000284 	.word	0x20000284
 80017d4:	2000028c 	.word	0x2000028c
 80017d8:	447a0000 	.word	0x447a0000
 80017dc:	2000026c 	.word	0x2000026c
 80017e0:	20000278 	.word	0x20000278
 80017e4:	2000027c 	.word	0x2000027c
 80017e8:	20000290 	.word	0x20000290
 80017ec:	00000000 	.word	0x00000000

080017f0 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	int j = 9;
 80017f6:	2309      	movs	r3, #9
 80017f8:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 80017fa:	2309      	movs	r3, #9
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	e00d      	b.n	800181c <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	4aa6      	ldr	r2, [pc, #664]	; (8001aa0 <interrupt_calGyro+0x2b0>)
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	49a4      	ldr	r1, [pc, #656]	; (8001aa0 <interrupt_calGyro+0x2b0>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3b01      	subs	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	dcee      	bgt.n	8001800 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 8001822:	4ba0      	ldr	r3, [pc, #640]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 8001824:	ed93 7a02 	vldr	s14, [r3, #8]
 8001828:	4b9f      	ldr	r3, [pc, #636]	; (8001aa8 <interrupt_calGyro+0x2b8>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001832:	ee17 0a90 	vmov	r0, s15
 8001836:	f7fe feaf 	bl	8000598 <__aeabi_f2d>
 800183a:	a387      	add	r3, pc, #540	; (adr r3, 8001a58 <interrupt_calGyro+0x268>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe ff02 	bl	8000648 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	a384      	add	r3, pc, #528	; (adr r3, 8001a60 <interrupt_calGyro+0x270>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fef9 	bl	8000648 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	a382      	add	r3, pc, #520	; (adr r3, 8001a68 <interrupt_calGyro+0x278>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7ff f81a 	bl	800089c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f9c2 	bl	8000bf8 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4a8a      	ldr	r2, [pc, #552]	; (8001aa0 <interrupt_calGyro+0x2b0>)
 8001878:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 800187a:	4b89      	ldr	r3, [pc, #548]	; (8001aa0 <interrupt_calGyro+0x2b0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a8b      	ldr	r2, [pc, #556]	; (8001aac <interrupt_calGyro+0x2bc>)
 8001880:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a8a      	ldr	r2, [pc, #552]	; (8001ab0 <interrupt_calGyro+0x2c0>)
 8001888:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 800188a:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <interrupt_calGyro+0x2c4>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189a:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <interrupt_calGyro+0x2c8>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 80018a0:	4b86      	ldr	r3, [pc, #536]	; (8001abc <interrupt_calGyro+0x2cc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe77 	bl	8000598 <__aeabi_f2d>
 80018aa:	4604      	mov	r4, r0
 80018ac:	460d      	mov	r5, r1
 80018ae:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <interrupt_calGyro+0x2bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe70 	bl	8000598 <__aeabi_f2d>
 80018b8:	a36d      	add	r3, pc, #436	; (adr r3, 8001a70 <interrupt_calGyro+0x280>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fec3 	bl	8000648 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7fe fd07 	bl	80002dc <__adddf3>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f98f 	bl	8000bf8 <__aeabi_d2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a77      	ldr	r2, [pc, #476]	; (8001abc <interrupt_calGyro+0x2cc>)
 80018de:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 80018e0:	4b77      	ldr	r3, [pc, #476]	; (8001ac0 <interrupt_calGyro+0x2d0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe57 	bl	8000598 <__aeabi_f2d>
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
 80018ee:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 80018f0:	ed93 7a00 	vldr	s14, [r3]
 80018f4:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <interrupt_calGyro+0x2c4>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fe:	ee17 0a90 	vmov	r0, s15
 8001902:	f7fe fe49 	bl	8000598 <__aeabi_f2d>
 8001906:	a35a      	add	r3, pc, #360	; (adr r3, 8001a70 <interrupt_calGyro+0x280>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7fe fe9c 	bl	8000648 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fce0 	bl	80002dc <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f968 	bl	8000bf8 <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	4a65      	ldr	r2, [pc, #404]	; (8001ac0 <interrupt_calGyro+0x2d0>)
 800192c:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <interrupt_calGyro+0x2b4>)
 8001930:	ed93 7a04 	vldr	s14, [r3, #16]
 8001934:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <interrupt_calGyro+0x2d4>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	ee17 0a90 	vmov	r0, s15
 8001942:	f7fe fe29 	bl	8000598 <__aeabi_f2d>
 8001946:	a34c      	add	r3, pc, #304	; (adr r3, 8001a78 <interrupt_calGyro+0x288>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fe7c 	bl	8000648 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	a349      	add	r3, pc, #292	; (adr r3, 8001a80 <interrupt_calGyro+0x290>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	a347      	add	r3, pc, #284	; (adr r3, 8001a88 <interrupt_calGyro+0x298>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe ff94 	bl	800089c <__aeabi_ddiv>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <interrupt_calGyro+0x2d8>)
 8001982:	f7fe fe61 	bl	8000648 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	a340      	add	r3, pc, #256	; (adr r3, 8001a90 <interrupt_calGyro+0x2a0>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe ff82 	bl	800089c <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b49      	ldr	r3, [pc, #292]	; (8001acc <interrupt_calGyro+0x2dc>)
 80019a6:	f7fe fe4f 	bl	8000648 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	a339      	add	r3, pc, #228	; (adr r3, 8001a98 <interrupt_calGyro+0x2a8>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fe46 	bl	8000648 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f918 	bl	8000bf8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <interrupt_calGyro+0x2e0>)
 80019cc:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 80019ce:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <interrupt_calGyro+0x2e4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fde0 	bl	8000598 <__aeabi_f2d>
 80019d8:	4604      	mov	r4, r0
 80019da:	460d      	mov	r5, r1
 80019dc:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <interrupt_calGyro+0x2e0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdd9 	bl	8000598 <__aeabi_f2d>
 80019e6:	a322      	add	r3, pc, #136	; (adr r3, 8001a70 <interrupt_calGyro+0x280>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe2c 	bl	8000648 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe fc70 	bl	80002dc <__adddf3>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8f8 	bl	8000bf8 <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a32      	ldr	r2, [pc, #200]	; (8001ad4 <interrupt_calGyro+0x2e4>)
 8001a0c:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <interrupt_calGyro+0x2e8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdc0 	bl	8000598 <__aeabi_f2d>
 8001a18:	4604      	mov	r4, r0
 8001a1a:	460d      	mov	r5, r1
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <interrupt_calGyro+0x2e4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fdb9 	bl	8000598 <__aeabi_f2d>
 8001a26:	a312      	add	r3, pc, #72	; (adr r3, 8001a70 <interrupt_calGyro+0x280>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fe0c 	bl	8000648 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fc50 	bl	80002dc <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f8d8 	bl	8000bf8 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <interrupt_calGyro+0x2e8>)
 8001a4c:	6013      	str	r3, [r2, #0]




}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bdb0      	pop	{r4, r5, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	70a3d70a 	.word	0x70a3d70a
 8001a5c:	3fef0a3d 	.word	0x3fef0a3d
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40acd400 	.word	0x40acd400
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40ac2000 	.word	0x40ac2000
 8001a70:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a74:	3f50624d 	.word	0x3f50624d
 8001a78:	0fcf80dc 	.word	0x0fcf80dc
 8001a7c:	3ff0a423 	.word	0x3ff0a423
 8001a80:	00000000 	.word	0x00000000
 8001a84:	4078c000 	.word	0x4078c000
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	4077d000 	.word	0x4077d000
 8001a90:	00000000 	.word	0x00000000
 8001a94:	407a7000 	.word	0x407a7000
 8001a98:	3a92a305 	.word	0x3a92a305
 8001a9c:	40239d01 	.word	0x40239d01
 8001aa0:	20000290 	.word	0x20000290
 8001aa4:	200006e4 	.word	0x200006e4
 8001aa8:	20000288 	.word	0x20000288
 8001aac:	20000268 	.word	0x20000268
 8001ab0:	20000270 	.word	0x20000270
 8001ab4:	20000284 	.word	0x20000284
 8001ab8:	20000274 	.word	0x20000274
 8001abc:	20000264 	.word	0x20000264
 8001ac0:	2000026c 	.word	0x2000026c
 8001ac4:	2000028c 	.word	0x2000028c
 8001ac8:	40790000 	.word	0x40790000
 8001acc:	408f4000 	.word	0x408f4000
 8001ad0:	20000280 	.word	0x20000280
 8001ad4:	20000278 	.word	0x20000278
 8001ad8:	2000027c 	.word	0x2000027c
 8001adc:	00000000 	.word	0x00000000

08001ae0 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	e00f      	b.n	8001b0c <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001aec:	f006 f82c 	bl	8007b48 <pl_getbatt>
 8001af0:	eef0 7a40 	vmov.f32	s15, s0
 8001af4:	4a34      	ldr	r2, [pc, #208]	; (8001bc8 <battcheak+0xe8>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001b00:	200a      	movs	r0, #10
 8001b02:	f006 fa39 	bl	8007f78 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b13      	cmp	r3, #19
 8001b10:	ddec      	ble.n	8001aec <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <battcheak+0xec>)
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e010      	b.n	8001b42 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001b20:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <battcheak+0xe8>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	ed93 7a00 	vldr	s14, [r3]
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <battcheak+0xec>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <battcheak+0xec>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b13      	cmp	r3, #19
 8001b46:	ddeb      	ble.n	8001b20 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <battcheak+0xec>)
 8001b4a:	ed93 7a00 	vldr	s14, [r3]
 8001b4e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <battcheak+0xec>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <battcheak+0xec>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fd19 	bl	8000598 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <battcheak+0xf0>)
 8001b6c:	f01d fdd6 	bl	801f71c <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <battcheak+0xec>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd0f 	bl	8000598 <__aeabi_f2d>
 8001b7a:	a311      	add	r3, pc, #68	; (adr r3, 8001bc0 <battcheak+0xe0>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe ffde 	bl	8000b40 <__aeabi_dcmple>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d100      	bne.n	8001b8c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001b8a:	e014      	b.n	8001bb6 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f005 fa61 	bl	8007054 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f005 fa70 	bl	8007078 <pl_l_blue_LED>
		wait_ms(500);
 8001b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9c:	f006 f9ec 	bl	8007f78 <wait_ms>
		pl_r_blue_LED(OFF);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f005 fa57 	bl	8007054 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f005 fa66 	bl	8007078 <pl_l_blue_LED>
		wait_ms(500);
 8001bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb0:	f006 f9e2 	bl	8007f78 <wait_ms>
		pl_r_blue_LED(ON);
 8001bb4:	e7ea      	b.n	8001b8c <battcheak+0xac>
}
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	9999999a 	.word	0x9999999a
 8001bc4:	400d9999 	.word	0x400d9999
 8001bc8:	20000484 	.word	0x20000484
 8001bcc:	200004d4 	.word	0x200004d4
 8001bd0:	08021e58 	.word	0x08021e58

08001bd4 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001bda:	f006 f953 	bl	8007e84 <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001bde:	2313      	movs	r3, #19
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	e037      	b.n	8001c54 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	4a61      	ldr	r2, [pc, #388]	; (8001d70 <interupt_calSensor+0x19c>)
 8001bea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bee:	4960      	ldr	r1, [pc, #384]	; (8001d70 <interupt_calSensor+0x19c>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	4a5d      	ldr	r2, [pc, #372]	; (8001d70 <interupt_calSensor+0x19c>)
 8001bfc:	3314      	adds	r3, #20
 8001bfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c02:	495b      	ldr	r1, [pc, #364]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3314      	adds	r3, #20
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	4a57      	ldr	r2, [pc, #348]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c12:	3328      	adds	r3, #40	; 0x28
 8001c14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c18:	4955      	ldr	r1, [pc, #340]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3328      	adds	r3, #40	; 0x28
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c28:	333c      	adds	r3, #60	; 0x3c
 8001c2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c2e:	4950      	ldr	r1, [pc, #320]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	333c      	adds	r3, #60	; 0x3c
 8001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	4a4c      	ldr	r2, [pc, #304]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c3e:	3350      	adds	r3, #80	; 0x50
 8001c40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c44:	494a      	ldr	r1, [pc, #296]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3350      	adds	r3, #80	; 0x50
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	dcc4      	bgt.n	8001be4 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <interupt_calSensor+0x1a0>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b45      	ldr	r3, [pc, #276]	; (8001d78 <interupt_calSensor+0x1a4>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c68:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001c6a:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <interupt_calSensor+0x1a0>)
 8001c6c:	885b      	ldrh	r3, [r3, #2]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <interupt_calSensor+0x1a4>)
 8001c72:	885b      	ldrh	r3, [r3, #2]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	4a3e      	ldr	r2, [pc, #248]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c78:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <interupt_calSensor+0x1a0>)
 8001c7c:	889b      	ldrh	r3, [r3, #4]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <interupt_calSensor+0x1a4>)
 8001c82:	889b      	ldrh	r3, [r3, #4]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	4a3a      	ldr	r2, [pc, #232]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c88:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <interupt_calSensor+0x1a0>)
 8001c8e:	88db      	ldrh	r3, [r3, #6]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <interupt_calSensor+0x1a4>)
 8001c94:	88db      	ldrh	r3, [r3, #6]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <interupt_calSensor+0x19c>)
 8001c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <interupt_calSensor+0x1a0>)
 8001ca0:	891b      	ldrh	r3, [r3, #8]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <interupt_calSensor+0x1a4>)
 8001ca6:	891b      	ldrh	r3, [r3, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a31      	ldr	r2, [pc, #196]	; (8001d70 <interupt_calSensor+0x19c>)
 8001cac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	e053      	b.n	8001d5e <interupt_calSensor+0x18a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001cb6:	492e      	ldr	r1, [pc, #184]	; (8001d70 <interupt_calSensor+0x19c>)
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	440b      	add	r3, r1
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	482a      	ldr	r0, [pc, #168]	; (8001d70 <interupt_calSensor+0x19c>)
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4403      	add	r3, r0
 8001cd4:	332c      	adds	r3, #44	; 0x2c
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	1aca      	subs	r2, r1, r3
 8001cda:	4928      	ldr	r1, [pc, #160]	; (8001d7c <interupt_calSensor+0x1a8>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
 8001ce2:	4923      	ldr	r1, [pc, #140]	; (8001d70 <interupt_calSensor+0x19c>)
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	481f      	ldr	r0, [pc, #124]	; (8001d70 <interupt_calSensor+0x19c>)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4403      	add	r3, r0
 8001d00:	3318      	adds	r3, #24
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1aca      	subs	r2, r1, r3
 8001d06:	491e      	ldr	r1, [pc, #120]	; (8001d80 <interupt_calSensor+0x1ac>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001d0e:	4918      	ldr	r1, [pc, #96]	; (8001d70 <interupt_calSensor+0x19c>)
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	440b      	add	r3, r1
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	4814      	ldr	r0, [pc, #80]	; (8001d70 <interupt_calSensor+0x19c>)
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4403      	add	r3, r0
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4419      	add	r1, r3
 8001d32:	480f      	ldr	r0, [pc, #60]	; (8001d70 <interupt_calSensor+0x19c>)
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4403      	add	r3, r0
 8001d40:	3308      	adds	r3, #8
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	440b      	add	r3, r1
 8001d46:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <interupt_calSensor+0x1b0>)
 8001d48:	fb82 1203 	smull	r1, r2, r2, r3
 8001d4c:	17db      	asrs	r3, r3, #31
 8001d4e:	1ad2      	subs	r2, r2, r3
 8001d50:	490d      	ldr	r1, [pc, #52]	; (8001d88 <interupt_calSensor+0x1b4>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	dda8      	ble.n	8001cb6 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002b8 	.word	0x200002b8
 8001d74:	2000070c 	.word	0x2000070c
 8001d78:	20000718 	.word	0x20000718
 8001d7c:	20000448 	.word	0x20000448
 8001d80:	2000045c 	.word	0x2000045c
 8001d84:	55555556 	.word	0x55555556
 8001d88:	20000470 	.word	0x20000470

08001d8c <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <Control_mode_Init+0x28>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <Control_mode_Init+0x2c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <Control_mode_Init+0x30>)
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <Control_mode_Init+0x34>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]

}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000528 	.word	0x20000528
 8001db8:	20000805 	.word	0x20000805
 8001dbc:	20000800 	.word	0x20000800
 8001dc0:	20000529 	.word	0x20000529

08001dc4 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	ed87 0a03 	vstr	s0, [r7, #12]
 8001dce:	edc7 0a02 	vstr	s1, [r7, #8]
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001dd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	db14      	blt.n	8001e0e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f005 fde3 	bl	80079b0 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <get_duty+0x11c>)
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001ee4 <get_duty+0x120>
 8001dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e04:	ee17 2a90 	vmov	r2, s15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e015      	b.n	8001e3a <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001e0e:	2002      	movs	r0, #2
 8001e10:	f005 fdce 	bl	80079b0 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001e14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e18:	eef1 6a67 	vneg.f32	s13, s15
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <get_duty+0x11c>)
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e26:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ee4 <get_duty+0x120>
 8001e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e32:	ee17 2a90 	vmov	r2, s15
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	db14      	blt.n	8001e72 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f005 fdd9 	bl	8007a00 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <get_duty+0x11c>)
 8001e50:	ed93 7a00 	vldr	s14, [r3]
 8001e54:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e5c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ee4 <get_duty+0x120>
 8001e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e68:	ee17 2a90 	vmov	r2, s15
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e015      	b.n	8001e9e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001e72:	2002      	movs	r0, #2
 8001e74:	f005 fdc4 	bl	8007a00 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001e78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e7c:	eef1 6a67 	vneg.f32	s13, s15
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <get_duty+0x11c>)
 8001e82:	ed93 7a00 	vldr	s14, [r3]
 8001e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ee4 <get_duty+0x120>
 8001e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 2a90 	vmov	r2, s15
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f240 628c 	movw	r2, #1676	; 0x68c
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	dd03      	ble.n	8001ec2 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ec0:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f240 628c 	movw	r2, #1676	; 0x68c
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	dd03      	ble.n	8001ed6 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ed4:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200004d4 	.word	0x200004d4
 8001ee4:	44d1e000 	.word	0x44d1e000

08001ee8 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8001ee8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001eec:	b08c      	sub	sp, #48	; 0x30
 8001eee:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8001f16:	4bd2      	ldr	r3, [pc, #840]	; (8002260 <interupt_DriveMotor+0x378>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d108      	bne.n	8001f30 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8001f1e:	4bd1      	ldr	r3, [pc, #836]	; (8002264 <interupt_DriveMotor+0x37c>)
 8001f20:	2204      	movs	r2, #4
 8001f22:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8001f24:	4bd0      	ldr	r3, [pc, #832]	; (8002268 <interupt_DriveMotor+0x380>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8001f2a:	4bd0      	ldr	r3, [pc, #832]	; (800226c <interupt_DriveMotor+0x384>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8001f30:	4bcb      	ldr	r3, [pc, #812]	; (8002260 <interupt_DriveMotor+0x378>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	f040 828f 	bne.w	8002458 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8001f3a:	4bcc      	ldr	r3, [pc, #816]	; (800226c <interupt_DriveMotor+0x384>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8001f40:	4bcb      	ldr	r3, [pc, #812]	; (8002270 <interupt_DriveMotor+0x388>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	4aca      	ldr	r2, [pc, #808]	; (8002270 <interupt_DriveMotor+0x388>)
 8001f48:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001f4a:	4bca      	ldr	r3, [pc, #808]	; (8002274 <interupt_DriveMotor+0x38c>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fb22 	bl	8000598 <__aeabi_f2d>
 8001f54:	4604      	mov	r4, r0
 8001f56:	460d      	mov	r5, r1
 8001f58:	4bc6      	ldr	r3, [pc, #792]	; (8002274 <interupt_DriveMotor+0x38c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fb1b 	bl	8000598 <__aeabi_f2d>
 8001f62:	a3bb      	add	r3, pc, #748	; (adr r3, 8002250 <interupt_DriveMotor+0x368>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fb6e 	bl	8000648 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4690      	mov	r8, r2
 8001f72:	4699      	mov	r9, r3
 8001f74:	4bbf      	ldr	r3, [pc, #764]	; (8002274 <interupt_DriveMotor+0x38c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fb0d 	bl	8000598 <__aeabi_f2d>
 8001f7e:	a3b4      	add	r3, pc, #720	; (adr r3, 8002250 <interupt_DriveMotor+0x368>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	f7fe fb60 	bl	8000648 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	a3af      	add	r3, pc, #700	; (adr r3, 8002250 <interupt_DriveMotor+0x368>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fb57 	bl	8000648 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001faa:	f7fe fc77 	bl	800089c <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4640      	mov	r0, r8
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	f7fe f991 	bl	80002dc <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7fe f98b 	bl	80002dc <__adddf3>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fe13 	bl	8000bf8 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4aa7      	ldr	r2, [pc, #668]	; (8002274 <interupt_DriveMotor+0x38c>)
 8001fd6:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8001fd8:	4ba6      	ldr	r3, [pc, #664]	; (8002274 <interupt_DriveMotor+0x38c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fadb 	bl	8000598 <__aeabi_f2d>
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	460d      	mov	r5, r1
 8001fe6:	4ba3      	ldr	r3, [pc, #652]	; (8002274 <interupt_DriveMotor+0x38c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fad4 	bl	8000598 <__aeabi_f2d>
 8001ff0:	a397      	add	r3, pc, #604	; (adr r3, 8002250 <interupt_DriveMotor+0x368>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe fb27 	bl	8000648 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4620      	mov	r0, r4
 8002000:	4629      	mov	r1, r5
 8002002:	f7fe f96b 	bl	80002dc <__adddf3>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fdf3 	bl	8000bf8 <__aeabi_d2f>
 8002012:	4603      	mov	r3, r0
 8002014:	4a97      	ldr	r2, [pc, #604]	; (8002274 <interupt_DriveMotor+0x38c>)
 8002016:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002018:	4b97      	ldr	r3, [pc, #604]	; (8002278 <interupt_DriveMotor+0x390>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fabb 	bl	8000598 <__aeabi_f2d>
 8002022:	4604      	mov	r4, r0
 8002024:	460d      	mov	r5, r1
 8002026:	4b94      	ldr	r3, [pc, #592]	; (8002278 <interupt_DriveMotor+0x390>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fab4 	bl	8000598 <__aeabi_f2d>
 8002030:	a387      	add	r3, pc, #540	; (adr r3, 8002250 <interupt_DriveMotor+0x368>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe fb07 	bl	8000648 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4690      	mov	r8, r2
 8002040:	4699      	mov	r9, r3
 8002042:	4b8d      	ldr	r3, [pc, #564]	; (8002278 <interupt_DriveMotor+0x390>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe faa6 	bl	8000598 <__aeabi_f2d>
 800204c:	a380      	add	r3, pc, #512	; (adr r3, 8002250 <interupt_DriveMotor+0x368>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe faf9 	bl	8000648 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	a37c      	add	r3, pc, #496	; (adr r3, 8002250 <interupt_DriveMotor+0x368>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	f7fe faf0 	bl	8000648 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002078:	f7fe fc10 	bl	800089c <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4640      	mov	r0, r8
 8002082:	4649      	mov	r1, r9
 8002084:	f7fe f92a 	bl	80002dc <__adddf3>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe f924 	bl	80002dc <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fdac 	bl	8000bf8 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a75      	ldr	r2, [pc, #468]	; (8002278 <interupt_DriveMotor+0x390>)
 80020a4:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80020a6:	4b74      	ldr	r3, [pc, #464]	; (8002278 <interupt_DriveMotor+0x390>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa74 	bl	8000598 <__aeabi_f2d>
 80020b0:	4604      	mov	r4, r0
 80020b2:	460d      	mov	r5, r1
 80020b4:	4b70      	ldr	r3, [pc, #448]	; (8002278 <interupt_DriveMotor+0x390>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa6d 	bl	8000598 <__aeabi_f2d>
 80020be:	a364      	add	r3, pc, #400	; (adr r3, 8002250 <interupt_DriveMotor+0x368>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe fac0 	bl	8000648 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4620      	mov	r0, r4
 80020ce:	4629      	mov	r1, r5
 80020d0:	f7fe f904 	bl	80002dc <__adddf3>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f7fe fd8c 	bl	8000bf8 <__aeabi_d2f>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a65      	ldr	r2, [pc, #404]	; (8002278 <interupt_DriveMotor+0x390>)
 80020e4:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 80020e6:	4b65      	ldr	r3, [pc, #404]	; (800227c <interupt_DriveMotor+0x394>)
 80020e8:	4a62      	ldr	r2, [pc, #392]	; (8002274 <interupt_DriveMotor+0x38c>)
 80020ea:	9201      	str	r2, [sp, #4]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f2:	f006 f93f 	bl	8008374 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80020f6:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <interupt_DriveMotor+0x38c>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <interupt_DriveMotor+0x390>)
 80020fe:	ed93 7a00 	vldr	s14, [r3]
 8002102:	f107 020c 	add.w	r2, r7, #12
 8002106:	f107 0310 	add.w	r3, r7, #16
 800210a:	eef0 0a47 	vmov.f32	s1, s14
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f002 fb59 	bl	80047cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800211a:	4b59      	ldr	r3, [pc, #356]	; (8002280 <interupt_DriveMotor+0x398>)
 800211c:	ed93 7a00 	vldr	s14, [r3]
 8002120:	4b58      	ldr	r3, [pc, #352]	; (8002284 <interupt_DriveMotor+0x39c>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800212e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002132:	4b50      	ldr	r3, [pc, #320]	; (8002274 <interupt_DriveMotor+0x38c>)
 8002134:	edd3 7a01 	vldr	s15, [r3, #4]
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <interupt_DriveMotor+0x3a0>)
 800213a:	edd3 6a00 	vldr	s13, [r3]
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <interupt_DriveMotor+0x390>)
 8002140:	ed93 6a01 	vldr	s12, [r3, #4]
 8002144:	1d3a      	adds	r2, r7, #4
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	eef0 1a46 	vmov.f32	s3, s12
 800214e:	eeb0 1a66 	vmov.f32	s2, s13
 8002152:	4611      	mov	r1, r2
 8002154:	eef0 0a67 	vmov.f32	s1, s15
 8002158:	eeb0 0a47 	vmov.f32	s0, s14
 800215c:	4618      	mov	r0, r3
 800215e:	f002 f88f 	bl	8004280 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 8002162:	f002 fd29 	bl	8004bb8 <calWallConrol>
 8002166:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 800216a:	ed97 7a04 	vldr	s14, [r7, #16]
 800216e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002172:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002176:	edd7 7a07 	vldr	s15, [r7, #28]
 800217a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800217e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002186:	edd7 7a01 	vldr	s15, [r7, #4]
 800218a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800218e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002192:	ed97 7a04 	vldr	s14, [r7, #16]
 8002196:	edd7 7a03 	vldr	s15, [r7, #12]
 800219a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800219e:	edd7 7a07 	vldr	s15, [r7, #28]
 80021a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80021aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b6:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80021ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80021be:	edd7 7a02 	vldr	s15, [r7, #8]
 80021c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c6:	ee17 0a90 	vmov	r0, s15
 80021ca:	f7fe f9e5 	bl	8000598 <__aeabi_f2d>
 80021ce:	4604      	mov	r4, r0
 80021d0:	460d      	mov	r5, r1
 80021d2:	4b2e      	ldr	r3, [pc, #184]	; (800228c <interupt_DriveMotor+0x3a4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f9de 	bl	8000598 <__aeabi_f2d>
 80021dc:	a31e      	add	r3, pc, #120	; (adr r3, 8002258 <interupt_DriveMotor+0x370>)
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	f7fe fa31 	bl	8000648 <__aeabi_dmul>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4620      	mov	r0, r4
 80021ec:	4629      	mov	r1, r5
 80021ee:	f7fe fcbb 	bl	8000b68 <__aeabi_dcmpgt>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808d 	beq.w	8002314 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80021fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021fc:	f7fe f9cc 	bl	8000598 <__aeabi_f2d>
 8002200:	4604      	mov	r4, r0
 8002202:	460d      	mov	r5, r1
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <interupt_DriveMotor+0x3a4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f9c5 	bl	8000598 <__aeabi_f2d>
 800220e:	a312      	add	r3, pc, #72	; (adr r3, 8002258 <interupt_DriveMotor+0x370>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe fa18 	bl	8000648 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4690      	mov	r8, r2
 800221e:	4699      	mov	r9, r3
 8002220:	ed97 7a04 	vldr	s14, [r7, #16]
 8002224:	edd7 7a02 	vldr	s15, [r7, #8]
 8002228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222c:	ee17 0a90 	vmov	r0, s15
 8002230:	f7fe f9b2 	bl	8000598 <__aeabi_f2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4640      	mov	r0, r8
 800223a:	4649      	mov	r1, r9
 800223c:	f7fe f84c 	bl	80002d8 <__aeabi_dsub>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	e022      	b.n	8002290 <interupt_DriveMotor+0x3a8>
 800224a:	bf00      	nop
 800224c:	f3af 8000 	nop.w
 8002250:	d2f1a9fc 	.word	0xd2f1a9fc
 8002254:	3f50624d 	.word	0x3f50624d
 8002258:	d916872b 	.word	0xd916872b
 800225c:	3feff7ce 	.word	0x3feff7ce
 8002260:	20000528 	.word	0x20000528
 8002264:	20000804 	.word	0x20000804
 8002268:	20000590 	.word	0x20000590
 800226c:	20000592 	.word	0x20000592
 8002270:	20000524 	.word	0x20000524
 8002274:	200004d8 	.word	0x200004d8
 8002278:	200004e4 	.word	0x200004e4
 800227c:	200004f0 	.word	0x200004f0
 8002280:	20000238 	.word	0x20000238
 8002284:	2000023c 	.word	0x2000023c
 8002288:	20000268 	.word	0x20000268
 800228c:	200004d4 	.word	0x200004d4
 8002290:	f7fe f824 	bl	80002dc <__adddf3>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fcac 	bl	8000bf8 <__aeabi_d2f>
 80022a0:	4603      	mov	r3, r0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80022a4:	6a38      	ldr	r0, [r7, #32]
 80022a6:	f7fe f977 	bl	8000598 <__aeabi_f2d>
 80022aa:	4604      	mov	r4, r0
 80022ac:	460d      	mov	r5, r1
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <interupt_DriveMotor+0x428>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f970 	bl	8000598 <__aeabi_f2d>
 80022b8:	a313      	add	r3, pc, #76	; (adr r3, 8002308 <interupt_DriveMotor+0x420>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f9c3 	bl	8000648 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4690      	mov	r8, r2
 80022c8:	4699      	mov	r9, r3
 80022ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	ee17 0a90 	vmov	r0, s15
 80022da:	f7fe f95d 	bl	8000598 <__aeabi_f2d>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4640      	mov	r0, r8
 80022e4:	4649      	mov	r1, r9
 80022e6:	f7fd fff7 	bl	80002d8 <__aeabi_dsub>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4620      	mov	r0, r4
 80022f0:	4629      	mov	r1, r5
 80022f2:	f7fd fff3 	bl	80002dc <__adddf3>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fc7b 	bl	8000bf8 <__aeabi_d2f>
 8002302:	4603      	mov	r3, r0
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	e095      	b.n	8002434 <interupt_DriveMotor+0x54c>
 8002308:	d916872b 	.word	0xd916872b
 800230c:	3feff7ce 	.word	0x3feff7ce
 8002310:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002314:	ed97 7a04 	vldr	s14, [r7, #16]
 8002318:	edd7 7a02 	vldr	s15, [r7, #8]
 800231c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002320:	ee17 0a90 	vmov	r0, s15
 8002324:	f7fe f938 	bl	8000598 <__aeabi_f2d>
 8002328:	4604      	mov	r4, r0
 800232a:	460d      	mov	r5, r1
 800232c:	4bce      	ldr	r3, [pc, #824]	; (8002668 <interupt_DriveMotor+0x780>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	eef1 7a67 	vneg.f32	s15, s15
 8002336:	ee17 3a90 	vmov	r3, s15
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f92c 	bl	8000598 <__aeabi_f2d>
 8002340:	a3c5      	add	r3, pc, #788	; (adr r3, 8002658 <interupt_DriveMotor+0x770>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe f97f 	bl	8000648 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f7fe fbeb 	bl	8000b2c <__aeabi_dcmplt>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d06b      	beq.n	8002434 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800235c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800235e:	f7fe f91b 	bl	8000598 <__aeabi_f2d>
 8002362:	4604      	mov	r4, r0
 8002364:	460d      	mov	r5, r1
 8002366:	4bc0      	ldr	r3, [pc, #768]	; (8002668 <interupt_DriveMotor+0x780>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	eef1 7a67 	vneg.f32	s15, s15
 8002370:	ee17 3a90 	vmov	r3, s15
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f90f 	bl	8000598 <__aeabi_f2d>
 800237a:	a3b7      	add	r3, pc, #732	; (adr r3, 8002658 <interupt_DriveMotor+0x770>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe f962 	bl	8000648 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4690      	mov	r8, r2
 800238a:	4699      	mov	r9, r3
 800238c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002390:	edd7 7a02 	vldr	s15, [r7, #8]
 8002394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002398:	ee17 0a90 	vmov	r0, s15
 800239c:	f7fe f8fc 	bl	8000598 <__aeabi_f2d>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4640      	mov	r0, r8
 80023a6:	4649      	mov	r1, r9
 80023a8:	f7fd ff96 	bl	80002d8 <__aeabi_dsub>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff92 	bl	80002dc <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fc1a 	bl	8000bf8 <__aeabi_d2f>
 80023c4:	4603      	mov	r3, r0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023c8:	6a38      	ldr	r0, [r7, #32]
 80023ca:	f7fe f8e5 	bl	8000598 <__aeabi_f2d>
 80023ce:	4604      	mov	r4, r0
 80023d0:	460d      	mov	r5, r1
 80023d2:	4ba5      	ldr	r3, [pc, #660]	; (8002668 <interupt_DriveMotor+0x780>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	eef1 7a67 	vneg.f32	s15, s15
 80023dc:	ee17 3a90 	vmov	r3, s15
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8d9 	bl	8000598 <__aeabi_f2d>
 80023e6:	a39c      	add	r3, pc, #624	; (adr r3, 8002658 <interupt_DriveMotor+0x770>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f92c 	bl	8000648 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4690      	mov	r8, r2
 80023f6:	4699      	mov	r9, r3
 80023f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80023fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f8c6 	bl	8000598 <__aeabi_f2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4640      	mov	r0, r8
 8002412:	4649      	mov	r1, r9
 8002414:	f7fd ff60 	bl	80002d8 <__aeabi_dsub>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4620      	mov	r0, r4
 800241e:	4629      	mov	r1, r5
 8002420:	f7fd ff5c 	bl	80002dc <__adddf3>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f7fe fbe4 	bl	8000bf8 <__aeabi_d2f>
 8002430:	4603      	mov	r3, r0
 8002432:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002434:	f107 0214 	add.w	r2, r7, #20
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	edd7 0a08 	vldr	s1, [r7, #32]
 8002444:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002448:	f7ff fcbc 	bl	8001dc4 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f005 fb16 	bl	8007a84 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002458:	4b84      	ldr	r3, [pc, #528]	; (800266c <interupt_DriveMotor+0x784>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d004      	beq.n	800246a <interupt_DriveMotor+0x582>
 8002460:	4b82      	ldr	r3, [pc, #520]	; (800266c <interupt_DriveMotor+0x784>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b04      	cmp	r3, #4
 8002466:	f040 8287 	bne.w	8002978 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 800246a:	4b81      	ldr	r3, [pc, #516]	; (8002670 <interupt_DriveMotor+0x788>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002470:	4b80      	ldr	r3, [pc, #512]	; (8002674 <interupt_DriveMotor+0x78c>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002476:	4b80      	ldr	r3, [pc, #512]	; (8002678 <interupt_DriveMotor+0x790>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	4a7e      	ldr	r2, [pc, #504]	; (8002678 <interupt_DriveMotor+0x790>)
 800247e:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002480:	4b7e      	ldr	r3, [pc, #504]	; (800267c <interupt_DriveMotor+0x794>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f887 	bl	8000598 <__aeabi_f2d>
 800248a:	4604      	mov	r4, r0
 800248c:	460d      	mov	r5, r1
 800248e:	4b7b      	ldr	r3, [pc, #492]	; (800267c <interupt_DriveMotor+0x794>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f880 	bl	8000598 <__aeabi_f2d>
 8002498:	a371      	add	r3, pc, #452	; (adr r3, 8002660 <interupt_DriveMotor+0x778>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f7fe f8d3 	bl	8000648 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4690      	mov	r8, r2
 80024a8:	4699      	mov	r9, r3
 80024aa:	4b74      	ldr	r3, [pc, #464]	; (800267c <interupt_DriveMotor+0x794>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f872 	bl	8000598 <__aeabi_f2d>
 80024b4:	a36a      	add	r3, pc, #424	; (adr r3, 8002660 <interupt_DriveMotor+0x778>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f8c5 	bl	8000648 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	a366      	add	r3, pc, #408	; (adr r3, 8002660 <interupt_DriveMotor+0x778>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe f8bc 	bl	8000648 <__aeabi_dmul>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e0:	f7fe f9dc 	bl	800089c <__aeabi_ddiv>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4640      	mov	r0, r8
 80024ea:	4649      	mov	r1, r9
 80024ec:	f7fd fef6 	bl	80002dc <__adddf3>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4620      	mov	r0, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	f7fd fef0 	bl	80002dc <__adddf3>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe fb78 	bl	8000bf8 <__aeabi_d2f>
 8002508:	4603      	mov	r3, r0
 800250a:	4a5c      	ldr	r2, [pc, #368]	; (800267c <interupt_DriveMotor+0x794>)
 800250c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <interupt_DriveMotor+0x794>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f840 	bl	8000598 <__aeabi_f2d>
 8002518:	4604      	mov	r4, r0
 800251a:	460d      	mov	r5, r1
 800251c:	4b57      	ldr	r3, [pc, #348]	; (800267c <interupt_DriveMotor+0x794>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f839 	bl	8000598 <__aeabi_f2d>
 8002526:	a34e      	add	r3, pc, #312	; (adr r3, 8002660 <interupt_DriveMotor+0x778>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fe f88c 	bl	8000648 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4620      	mov	r0, r4
 8002536:	4629      	mov	r1, r5
 8002538:	f7fd fed0 	bl	80002dc <__adddf3>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fb58 	bl	8000bf8 <__aeabi_d2f>
 8002548:	4603      	mov	r3, r0
 800254a:	4a4c      	ldr	r2, [pc, #304]	; (800267c <interupt_DriveMotor+0x794>)
 800254c:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800254e:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <interupt_DriveMotor+0x798>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe f820 	bl	8000598 <__aeabi_f2d>
 8002558:	4604      	mov	r4, r0
 800255a:	460d      	mov	r5, r1
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <interupt_DriveMotor+0x798>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe f819 	bl	8000598 <__aeabi_f2d>
 8002566:	a33e      	add	r3, pc, #248	; (adr r3, 8002660 <interupt_DriveMotor+0x778>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe f86c 	bl	8000648 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4690      	mov	r8, r2
 8002576:	4699      	mov	r9, r3
 8002578:	4b41      	ldr	r3, [pc, #260]	; (8002680 <interupt_DriveMotor+0x798>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe f80b 	bl	8000598 <__aeabi_f2d>
 8002582:	a337      	add	r3, pc, #220	; (adr r3, 8002660 <interupt_DriveMotor+0x778>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fe f85e 	bl	8000648 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	a332      	add	r3, pc, #200	; (adr r3, 8002660 <interupt_DriveMotor+0x778>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fe f855 	bl	8000648 <__aeabi_dmul>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025ae:	f7fe f975 	bl	800089c <__aeabi_ddiv>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4640      	mov	r0, r8
 80025b8:	4649      	mov	r1, r9
 80025ba:	f7fd fe8f 	bl	80002dc <__adddf3>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4620      	mov	r0, r4
 80025c4:	4629      	mov	r1, r5
 80025c6:	f7fd fe89 	bl	80002dc <__adddf3>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fb11 	bl	8000bf8 <__aeabi_d2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a29      	ldr	r2, [pc, #164]	; (8002680 <interupt_DriveMotor+0x798>)
 80025da:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <interupt_DriveMotor+0x798>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffd9 	bl	8000598 <__aeabi_f2d>
 80025e6:	4604      	mov	r4, r0
 80025e8:	460d      	mov	r5, r1
 80025ea:	4b25      	ldr	r3, [pc, #148]	; (8002680 <interupt_DriveMotor+0x798>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffd2 	bl	8000598 <__aeabi_f2d>
 80025f4:	a31a      	add	r3, pc, #104	; (adr r3, 8002660 <interupt_DriveMotor+0x778>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f7fe f825 	bl	8000648 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4620      	mov	r0, r4
 8002604:	4629      	mov	r1, r5
 8002606:	f7fd fe69 	bl	80002dc <__adddf3>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe faf1 	bl	8000bf8 <__aeabi_d2f>
 8002616:	4603      	mov	r3, r0
 8002618:	4a19      	ldr	r2, [pc, #100]	; (8002680 <interupt_DriveMotor+0x798>)
 800261a:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <interupt_DriveMotor+0x79c>)
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <interupt_DriveMotor+0x798>)
 8002620:	9201      	str	r2, [sp, #4]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	9200      	str	r2, [sp, #0]
 8002626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002628:	f005 fea4 	bl	8008374 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <interupt_DriveMotor+0x794>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <interupt_DriveMotor+0x798>)
 8002634:	ed93 7a00 	vldr	s14, [r3]
 8002638:	f107 020c 	add.w	r2, r7, #12
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	eef0 0a47 	vmov.f32	s1, s14
 8002644:	eeb0 0a67 	vmov.f32	s0, s15
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f002 f8be 	bl	80047cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <interupt_DriveMotor+0x7a0>)
 8002652:	ed93 7a00 	vldr	s14, [r3]
 8002656:	e019      	b.n	800268c <interupt_DriveMotor+0x7a4>
 8002658:	d916872b 	.word	0xd916872b
 800265c:	3feff7ce 	.word	0x3feff7ce
 8002660:	d2f1a9fc 	.word	0xd2f1a9fc
 8002664:	3f50624d 	.word	0x3f50624d
 8002668:	200004d4 	.word	0x200004d4
 800266c:	20000528 	.word	0x20000528
 8002670:	20000590 	.word	0x20000590
 8002674:	20000592 	.word	0x20000592
 8002678:	20000524 	.word	0x20000524
 800267c:	200004d8 	.word	0x200004d8
 8002680:	200004e4 	.word	0x200004e4
 8002684:	20000504 	.word	0x20000504
 8002688:	20000238 	.word	0x20000238
 800268c:	4b64      	ldr	r3, [pc, #400]	; (8002820 <interupt_DriveMotor+0x938>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800269a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800269e:	4b61      	ldr	r3, [pc, #388]	; (8002824 <interupt_DriveMotor+0x93c>)
 80026a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a4:	4b60      	ldr	r3, [pc, #384]	; (8002828 <interupt_DriveMotor+0x940>)
 80026a6:	edd3 6a00 	vldr	s13, [r3]
 80026aa:	4b60      	ldr	r3, [pc, #384]	; (800282c <interupt_DriveMotor+0x944>)
 80026ac:	ed93 6a01 	vldr	s12, [r3, #4]
 80026b0:	1d3a      	adds	r2, r7, #4
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	eef0 1a46 	vmov.f32	s3, s12
 80026ba:	eeb0 1a66 	vmov.f32	s2, s13
 80026be:	4611      	mov	r1, r2
 80026c0:	eef0 0a67 	vmov.f32	s1, s15
 80026c4:	eeb0 0a47 	vmov.f32	s0, s14
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fdd9 	bl	8004280 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80026ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80026d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026da:	edd7 7a02 	vldr	s15, [r7, #8]
 80026de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80026ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80026f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80026fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002702:	edd7 7a01 	vldr	s15, [r7, #4]
 8002706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800270a:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800270e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002712:	edd7 7a02 	vldr	s15, [r7, #8]
 8002716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271a:	ee17 0a90 	vmov	r0, s15
 800271e:	f7fd ff3b 	bl	8000598 <__aeabi_f2d>
 8002722:	4604      	mov	r4, r0
 8002724:	460d      	mov	r5, r1
 8002726:	4b42      	ldr	r3, [pc, #264]	; (8002830 <interupt_DriveMotor+0x948>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff34 	bl	8000598 <__aeabi_f2d>
 8002730:	a339      	add	r3, pc, #228	; (adr r3, 8002818 <interupt_DriveMotor+0x930>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f7fd ff87 	bl	8000648 <__aeabi_dmul>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4620      	mov	r0, r4
 8002740:	4629      	mov	r1, r5
 8002742:	f7fe fa11 	bl	8000b68 <__aeabi_dcmpgt>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d073      	beq.n	8002834 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800274c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800274e:	f7fd ff23 	bl	8000598 <__aeabi_f2d>
 8002752:	4604      	mov	r4, r0
 8002754:	460d      	mov	r5, r1
 8002756:	4b36      	ldr	r3, [pc, #216]	; (8002830 <interupt_DriveMotor+0x948>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd ff1c 	bl	8000598 <__aeabi_f2d>
 8002760:	a32d      	add	r3, pc, #180	; (adr r3, 8002818 <interupt_DriveMotor+0x930>)
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	f7fd ff6f 	bl	8000648 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4690      	mov	r8, r2
 8002770:	4699      	mov	r9, r3
 8002772:	ed97 7a04 	vldr	s14, [r7, #16]
 8002776:	edd7 7a02 	vldr	s15, [r7, #8]
 800277a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277e:	ee17 0a90 	vmov	r0, s15
 8002782:	f7fd ff09 	bl	8000598 <__aeabi_f2d>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4640      	mov	r0, r8
 800278c:	4649      	mov	r1, r9
 800278e:	f7fd fda3 	bl	80002d8 <__aeabi_dsub>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4620      	mov	r0, r4
 8002798:	4629      	mov	r1, r5
 800279a:	f7fd fd9f 	bl	80002dc <__adddf3>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	f7fe fa27 	bl	8000bf8 <__aeabi_d2f>
 80027aa:	4603      	mov	r3, r0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027ae:	6a38      	ldr	r0, [r7, #32]
 80027b0:	f7fd fef2 	bl	8000598 <__aeabi_f2d>
 80027b4:	4604      	mov	r4, r0
 80027b6:	460d      	mov	r5, r1
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <interupt_DriveMotor+0x948>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd feeb 	bl	8000598 <__aeabi_f2d>
 80027c2:	a315      	add	r3, pc, #84	; (adr r3, 8002818 <interupt_DriveMotor+0x930>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fd ff3e 	bl	8000648 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4690      	mov	r8, r2
 80027d2:	4699      	mov	r9, r3
 80027d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80027d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e0:	ee17 0a90 	vmov	r0, s15
 80027e4:	f7fd fed8 	bl	8000598 <__aeabi_f2d>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4640      	mov	r0, r8
 80027ee:	4649      	mov	r1, r9
 80027f0:	f7fd fd72 	bl	80002d8 <__aeabi_dsub>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4620      	mov	r0, r4
 80027fa:	4629      	mov	r1, r5
 80027fc:	f7fd fd6e 	bl	80002dc <__adddf3>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	f7fe f9f6 	bl	8000bf8 <__aeabi_d2f>
 800280c:	4603      	mov	r3, r0
 800280e:	623b      	str	r3, [r7, #32]
 8002810:	e0a0      	b.n	8002954 <interupt_DriveMotor+0xa6c>
 8002812:	bf00      	nop
 8002814:	f3af 8000 	nop.w
 8002818:	d916872b 	.word	0xd916872b
 800281c:	3feff7ce 	.word	0x3feff7ce
 8002820:	2000023c 	.word	0x2000023c
 8002824:	200004d8 	.word	0x200004d8
 8002828:	20000268 	.word	0x20000268
 800282c:	200004e4 	.word	0x200004e4
 8002830:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002834:	ed97 7a04 	vldr	s14, [r7, #16]
 8002838:	edd7 7a02 	vldr	s15, [r7, #8]
 800283c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002840:	ee17 0a90 	vmov	r0, s15
 8002844:	f7fd fea8 	bl	8000598 <__aeabi_f2d>
 8002848:	4604      	mov	r4, r0
 800284a:	460d      	mov	r5, r1
 800284c:	4bd6      	ldr	r3, [pc, #856]	; (8002ba8 <interupt_DriveMotor+0xcc0>)
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	eef1 7a67 	vneg.f32	s15, s15
 8002856:	ee17 3a90 	vmov	r3, s15
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fe9c 	bl	8000598 <__aeabi_f2d>
 8002860:	a3cd      	add	r3, pc, #820	; (adr r3, 8002b98 <interupt_DriveMotor+0xcb0>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	f7fd feef 	bl	8000648 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fe f95b 	bl	8000b2c <__aeabi_dcmplt>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d06b      	beq.n	8002954 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800287c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800287e:	f7fd fe8b 	bl	8000598 <__aeabi_f2d>
 8002882:	4604      	mov	r4, r0
 8002884:	460d      	mov	r5, r1
 8002886:	4bc8      	ldr	r3, [pc, #800]	; (8002ba8 <interupt_DriveMotor+0xcc0>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	eef1 7a67 	vneg.f32	s15, s15
 8002890:	ee17 3a90 	vmov	r3, s15
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe7f 	bl	8000598 <__aeabi_f2d>
 800289a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002b98 <interupt_DriveMotor+0xcb0>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd fed2 	bl	8000648 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4690      	mov	r8, r2
 80028aa:	4699      	mov	r9, r3
 80028ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80028b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b8:	ee17 0a90 	vmov	r0, s15
 80028bc:	f7fd fe6c 	bl	8000598 <__aeabi_f2d>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4640      	mov	r0, r8
 80028c6:	4649      	mov	r1, r9
 80028c8:	f7fd fd06 	bl	80002d8 <__aeabi_dsub>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4620      	mov	r0, r4
 80028d2:	4629      	mov	r1, r5
 80028d4:	f7fd fd02 	bl	80002dc <__adddf3>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f7fe f98a 	bl	8000bf8 <__aeabi_d2f>
 80028e4:	4603      	mov	r3, r0
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028e8:	6a38      	ldr	r0, [r7, #32]
 80028ea:	f7fd fe55 	bl	8000598 <__aeabi_f2d>
 80028ee:	4604      	mov	r4, r0
 80028f0:	460d      	mov	r5, r1
 80028f2:	4bad      	ldr	r3, [pc, #692]	; (8002ba8 <interupt_DriveMotor+0xcc0>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	eef1 7a67 	vneg.f32	s15, s15
 80028fc:	ee17 3a90 	vmov	r3, s15
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe49 	bl	8000598 <__aeabi_f2d>
 8002906:	a3a4      	add	r3, pc, #656	; (adr r3, 8002b98 <interupt_DriveMotor+0xcb0>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fd fe9c 	bl	8000648 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4690      	mov	r8, r2
 8002916:	4699      	mov	r9, r3
 8002918:	ed97 7a04 	vldr	s14, [r7, #16]
 800291c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002924:	ee17 0a90 	vmov	r0, s15
 8002928:	f7fd fe36 	bl	8000598 <__aeabi_f2d>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4640      	mov	r0, r8
 8002932:	4649      	mov	r1, r9
 8002934:	f7fd fcd0 	bl	80002d8 <__aeabi_dsub>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4620      	mov	r0, r4
 800293e:	4629      	mov	r1, r5
 8002940:	f7fd fccc 	bl	80002dc <__adddf3>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7fe f954 	bl	8000bf8 <__aeabi_d2f>
 8002950:	4603      	mov	r3, r0
 8002952:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002954:	f107 0214 	add.w	r2, r7, #20
 8002958:	f107 0318 	add.w	r3, r7, #24
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	edd7 0a08 	vldr	s1, [r7, #32]
 8002964:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002968:	f7ff fa2c 	bl	8001dc4 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f005 f886 	bl	8007a84 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002978:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <interupt_DriveMotor+0xcc4>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b03      	cmp	r3, #3
 800297e:	f040 8137 	bne.w	8002bf0 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 8002982:	4b8b      	ldr	r3, [pc, #556]	; (8002bb0 <interupt_DriveMotor+0xcc8>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002988:	4b8a      	ldr	r3, [pc, #552]	; (8002bb4 <interupt_DriveMotor+0xccc>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 800298e:	4b8a      	ldr	r3, [pc, #552]	; (8002bb8 <interupt_DriveMotor+0xcd0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	4a88      	ldr	r2, [pc, #544]	; (8002bb8 <interupt_DriveMotor+0xcd0>)
 8002996:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002998:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <interupt_DriveMotor+0xcd4>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fdfb 	bl	8000598 <__aeabi_f2d>
 80029a2:	4604      	mov	r4, r0
 80029a4:	460d      	mov	r5, r1
 80029a6:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <interupt_DriveMotor+0xcd4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fdf4 	bl	8000598 <__aeabi_f2d>
 80029b0:	a37b      	add	r3, pc, #492	; (adr r3, 8002ba0 <interupt_DriveMotor+0xcb8>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fd fe47 	bl	8000648 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4690      	mov	r8, r2
 80029c0:	4699      	mov	r9, r3
 80029c2:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <interupt_DriveMotor+0xcd4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fde6 	bl	8000598 <__aeabi_f2d>
 80029cc:	a374      	add	r3, pc, #464	; (adr r3, 8002ba0 <interupt_DriveMotor+0xcb8>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fd fe39 	bl	8000648 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	a370      	add	r3, pc, #448	; (adr r3, 8002ba0 <interupt_DriveMotor+0xcb8>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe30 	bl	8000648 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029f8:	f7fd ff50 	bl	800089c <__aeabi_ddiv>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4640      	mov	r0, r8
 8002a02:	4649      	mov	r1, r9
 8002a04:	f7fd fc6a 	bl	80002dc <__adddf3>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	4629      	mov	r1, r5
 8002a10:	f7fd fc64 	bl	80002dc <__adddf3>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f7fe f8ec 	bl	8000bf8 <__aeabi_d2f>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4a66      	ldr	r2, [pc, #408]	; (8002bbc <interupt_DriveMotor+0xcd4>)
 8002a24:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <interupt_DriveMotor+0xcd4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fdb4 	bl	8000598 <__aeabi_f2d>
 8002a30:	4604      	mov	r4, r0
 8002a32:	460d      	mov	r5, r1
 8002a34:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <interupt_DriveMotor+0xcd4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fdad 	bl	8000598 <__aeabi_f2d>
 8002a3e:	a358      	add	r3, pc, #352	; (adr r3, 8002ba0 <interupt_DriveMotor+0xcb8>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fe00 	bl	8000648 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	4629      	mov	r1, r5
 8002a50:	f7fd fc44 	bl	80002dc <__adddf3>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7fe f8cc 	bl	8000bf8 <__aeabi_d2f>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4a56      	ldr	r2, [pc, #344]	; (8002bbc <interupt_DriveMotor+0xcd4>)
 8002a64:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a66:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <interupt_DriveMotor+0xcd8>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd94 	bl	8000598 <__aeabi_f2d>
 8002a70:	4604      	mov	r4, r0
 8002a72:	460d      	mov	r5, r1
 8002a74:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <interupt_DriveMotor+0xcd8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd8d 	bl	8000598 <__aeabi_f2d>
 8002a7e:	a348      	add	r3, pc, #288	; (adr r3, 8002ba0 <interupt_DriveMotor+0xcb8>)
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f7fd fde0 	bl	8000648 <__aeabi_dmul>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4690      	mov	r8, r2
 8002a8e:	4699      	mov	r9, r3
 8002a90:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <interupt_DriveMotor+0xcd8>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fd7f 	bl	8000598 <__aeabi_f2d>
 8002a9a:	a341      	add	r3, pc, #260	; (adr r3, 8002ba0 <interupt_DriveMotor+0xcb8>)
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	f7fd fdd2 	bl	8000648 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	a33c      	add	r3, pc, #240	; (adr r3, 8002ba0 <interupt_DriveMotor+0xcb8>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fdc9 	bl	8000648 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ac6:	f7fd fee9 	bl	800089c <__aeabi_ddiv>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4640      	mov	r0, r8
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	f7fd fc03 	bl	80002dc <__adddf3>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fbfd 	bl	80002dc <__adddf3>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fe f885 	bl	8000bf8 <__aeabi_d2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4a33      	ldr	r2, [pc, #204]	; (8002bc0 <interupt_DriveMotor+0xcd8>)
 8002af2:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <interupt_DriveMotor+0xcd8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fd4d 	bl	8000598 <__aeabi_f2d>
 8002afe:	4604      	mov	r4, r0
 8002b00:	460d      	mov	r5, r1
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <interupt_DriveMotor+0xcd8>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fd46 	bl	8000598 <__aeabi_f2d>
 8002b0c:	a324      	add	r3, pc, #144	; (adr r3, 8002ba0 <interupt_DriveMotor+0xcb8>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f7fd fd99 	bl	8000648 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f7fd fbdd 	bl	80002dc <__adddf3>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f7fe f865 	bl	8000bf8 <__aeabi_d2f>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <interupt_DriveMotor+0xcd8>)
 8002b32:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <interupt_DriveMotor+0xcd4>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <interupt_DriveMotor+0xcd8>)
 8002b3c:	ed93 7a00 	vldr	s14, [r3]
 8002b40:	f107 020c 	add.w	r2, r7, #12
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	eef0 0a47 	vmov.f32	s1, s14
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fe3a 	bl	80047cc <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002b58:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002b78:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b90:	e018      	b.n	8002bc4 <interupt_DriveMotor+0xcdc>
 8002b92:	bf00      	nop
 8002b94:	f3af 8000 	nop.w
 8002b98:	d916872b 	.word	0xd916872b
 8002b9c:	3feff7ce 	.word	0x3feff7ce
 8002ba0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ba4:	3f50624d 	.word	0x3f50624d
 8002ba8:	200004d4 	.word	0x200004d4
 8002bac:	20000528 	.word	0x20000528
 8002bb0:	20000590 	.word	0x20000590
 8002bb4:	20000592 	.word	0x20000592
 8002bb8:	20000524 	.word	0x20000524
 8002bbc:	200004d8 	.word	0x200004d8
 8002bc0:	200004e4 	.word	0x200004e4
 8002bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc8:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002bcc:	f107 0214 	add.w	r2, r7, #20
 8002bd0:	f107 0318 	add.w	r3, r7, #24
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	edd7 0a08 	vldr	s1, [r7, #32]
 8002bdc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002be0:	f7ff f8f0 	bl	8001dc4 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 ff4a 	bl	8007a84 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002bf0:	4bd3      	ldr	r3, [pc, #844]	; (8002f40 <interupt_DriveMotor+0x1058>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d137      	bne.n	8002c68 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002bf8:	4bd2      	ldr	r3, [pc, #840]	; (8002f44 <interupt_DriveMotor+0x105c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002bfe:	4bd2      	ldr	r3, [pc, #840]	; (8002f48 <interupt_DriveMotor+0x1060>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c04:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c10:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c30:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c38:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c40:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c44:	f107 0214 	add.w	r2, r7, #20
 8002c48:	f107 0318 	add.w	r3, r7, #24
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c54:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c58:	f7ff f8b4 	bl	8001dc4 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 ff0e 	bl	8007a84 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002c68:	4bb5      	ldr	r3, [pc, #724]	; (8002f40 <interupt_DriveMotor+0x1058>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	f040 8105 	bne.w	8002e7c <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002c72:	4bb4      	ldr	r3, [pc, #720]	; (8002f44 <interupt_DriveMotor+0x105c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002c78:	4bb3      	ldr	r3, [pc, #716]	; (8002f48 <interupt_DriveMotor+0x1060>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002c7e:	4bb3      	ldr	r3, [pc, #716]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fc88 	bl	8000598 <__aeabi_f2d>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	460d      	mov	r5, r1
 8002c8c:	4baf      	ldr	r3, [pc, #700]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fc81 	bl	8000598 <__aeabi_f2d>
 8002c96:	a3a8      	add	r3, pc, #672	; (adr r3, 8002f38 <interupt_DriveMotor+0x1050>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f7fd fcd4 	bl	8000648 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4690      	mov	r8, r2
 8002ca6:	4699      	mov	r9, r3
 8002ca8:	4ba8      	ldr	r3, [pc, #672]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc73 	bl	8000598 <__aeabi_f2d>
 8002cb2:	a3a1      	add	r3, pc, #644	; (adr r3, 8002f38 <interupt_DriveMotor+0x1050>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fcc6 	bl	8000648 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	a39c      	add	r3, pc, #624	; (adr r3, 8002f38 <interupt_DriveMotor+0x1050>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd fcbd 	bl	8000648 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cde:	f7fd fddd 	bl	800089c <__aeabi_ddiv>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	4649      	mov	r1, r9
 8002cea:	f7fd faf7 	bl	80002dc <__adddf3>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd faf1 	bl	80002dc <__adddf3>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd ff79 	bl	8000bf8 <__aeabi_d2f>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a90      	ldr	r2, [pc, #576]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002d0a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002d0c:	4b8f      	ldr	r3, [pc, #572]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc41 	bl	8000598 <__aeabi_f2d>
 8002d16:	4604      	mov	r4, r0
 8002d18:	460d      	mov	r5, r1
 8002d1a:	4b8c      	ldr	r3, [pc, #560]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc3a 	bl	8000598 <__aeabi_f2d>
 8002d24:	a384      	add	r3, pc, #528	; (adr r3, 8002f38 <interupt_DriveMotor+0x1050>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fc8d 	bl	8000648 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd fad1 	bl	80002dc <__adddf3>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd ff59 	bl	8000bf8 <__aeabi_d2f>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4a80      	ldr	r2, [pc, #512]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002d4a:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002d4c:	4b80      	ldr	r3, [pc, #512]	; (8002f50 <interupt_DriveMotor+0x1068>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fc21 	bl	8000598 <__aeabi_f2d>
 8002d56:	4604      	mov	r4, r0
 8002d58:	460d      	mov	r5, r1
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <interupt_DriveMotor+0x1068>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fc1a 	bl	8000598 <__aeabi_f2d>
 8002d64:	a374      	add	r3, pc, #464	; (adr r3, 8002f38 <interupt_DriveMotor+0x1050>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f7fd fc6d 	bl	8000648 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4620      	mov	r0, r4
 8002d74:	4629      	mov	r1, r5
 8002d76:	f7fd fab1 	bl	80002dc <__adddf3>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd ff39 	bl	8000bf8 <__aeabi_d2f>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4a71      	ldr	r2, [pc, #452]	; (8002f50 <interupt_DriveMotor+0x1068>)
 8002d8a:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002d8c:	4b71      	ldr	r3, [pc, #452]	; (8002f54 <interupt_DriveMotor+0x106c>)
 8002d8e:	edd3 6a00 	vldr	s13, [r3]
 8002d92:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d96:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d9a:	486d      	ldr	r0, [pc, #436]	; (8002f50 <interupt_DriveMotor+0x1068>)
 8002d9c:	eeb0 0a66 	vmov.f32	s0, s13
 8002da0:	eef0 0a47 	vmov.f32	s1, s14
 8002da4:	eeb0 1a67 	vmov.f32	s2, s15
 8002da8:	f005 fe3e 	bl	8008a28 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002dac:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <interupt_DriveMotor+0x1068>)
 8002db4:	ed93 7a00 	vldr	s14, [r3]
 8002db8:	f107 020c 	add.w	r2, r7, #12
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	eef0 0a47 	vmov.f32	s1, s14
 8002dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 fcfe 	bl	80047cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002dd0:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <interupt_DriveMotor+0x1070>)
 8002dd2:	ed93 7a00 	vldr	s14, [r3]
 8002dd6:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <interupt_DriveMotor+0x1074>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002de4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002de8:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dee:	4b5c      	ldr	r3, [pc, #368]	; (8002f60 <interupt_DriveMotor+0x1078>)
 8002df0:	edd3 6a00 	vldr	s13, [r3]
 8002df4:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <interupt_DriveMotor+0x1068>)
 8002df6:	ed93 6a01 	vldr	s12, [r3, #4]
 8002dfa:	1d3a      	adds	r2, r7, #4
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	eef0 1a46 	vmov.f32	s3, s12
 8002e04:	eeb0 1a66 	vmov.f32	s2, s13
 8002e08:	4611      	mov	r1, r2
 8002e0a:	eef0 0a67 	vmov.f32	s1, s15
 8002e0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 fa34 	bl	8004280 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002e18:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002e38:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e54:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002e58:	f107 0214 	add.w	r2, r7, #20
 8002e5c:	f107 0318 	add.w	r3, r7, #24
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	edd7 0a08 	vldr	s1, [r7, #32]
 8002e68:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e6c:	f7fe ffaa 	bl	8001dc4 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 fe04 	bl	8007a84 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002e7c:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <interupt_DriveMotor+0x1058>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d14b      	bne.n	8002f1c <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002e84:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <interupt_DriveMotor+0x1068>)
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e94:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <interupt_DriveMotor+0x1064>)
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <interupt_DriveMotor+0x1068>)
 8002e9c:	ed93 7a00 	vldr	s14, [r3]
 8002ea0:	f107 020c 	add.w	r2, r7, #12
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	eef0 0a47 	vmov.f32	s1, s14
 8002eac:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 fc8a 	bl	80047cc <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002eb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ebc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ec4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002ed8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002edc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ef8:	f107 0214 	add.w	r2, r7, #20
 8002efc:	f107 0318 	add.w	r3, r7, #24
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	edd7 0a08 	vldr	s1, [r7, #32]
 8002f08:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002f0c:	f7fe ff5a 	bl	8001dc4 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 fdb4 	bl	8007a84 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8002f1c:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <interupt_DriveMotor+0x107c>)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8002f22:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <interupt_DriveMotor+0x1080>)
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	6013      	str	r3, [r2, #0]



}
 8002f28:	bf00      	nop
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f32:	bf00      	nop
 8002f34:	f3af 8000 	nop.w
 8002f38:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f3c:	3f50624d 	.word	0x3f50624d
 8002f40:	20000528 	.word	0x20000528
 8002f44:	20000590 	.word	0x20000590
 8002f48:	20000592 	.word	0x20000592
 8002f4c:	200004d8 	.word	0x200004d8
 8002f50:	200004e4 	.word	0x200004e4
 8002f54:	20000518 	.word	0x20000518
 8002f58:	20000238 	.word	0x20000238
 8002f5c:	2000023c 	.word	0x2000023c
 8002f60:	20000268 	.word	0x20000268
 8002f64:	2000052c 	.word	0x2000052c
 8002f68:	20000530 	.word	0x20000530

08002f6c <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	ed87 0a05 	vstr	s0, [r7, #20]
 8002f76:	edc7 0a04 	vstr	s1, [r7, #16]
 8002f7a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002f7e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002f82:	ed87 2a01 	vstr	s4, [r7, #4]
 8002f86:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8002f88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8002f90:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f98:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8002f9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002fa0:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8002fa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fac:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8002fb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	d505      	bpl.n	8002fca <straight_table2+0x5e>
 8002fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fc2:	eef1 7a67 	vneg.f32	s15, s15
 8002fc6:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 8002fca:	4bb4      	ldr	r3, [pc, #720]	; (800329c <straight_table2+0x330>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8002fd6:	4ab2      	ldr	r2, [pc, #712]	; (80032a0 <straight_table2+0x334>)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8002fdc:	4ab0      	ldr	r2, [pc, #704]	; (80032a0 <straight_table2+0x334>)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8002fe2:	4aaf      	ldr	r2, [pc, #700]	; (80032a0 <straight_table2+0x334>)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8002fe8:	4aad      	ldr	r2, [pc, #692]	; (80032a0 <straight_table2+0x334>)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8002fee:	4aac      	ldr	r2, [pc, #688]	; (80032a0 <straight_table2+0x334>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8002ff4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	db03      	blt.n	800300a <straight_table2+0x9e>
 8003002:	4aa8      	ldr	r2, [pc, #672]	; (80032a4 <straight_table2+0x338>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6053      	str	r3, [r2, #4]
 8003008:	e006      	b.n	8003018 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 800300a:	edd7 7a01 	vldr	s15, [r7, #4]
 800300e:	eef1 7a67 	vneg.f32	s15, s15
 8003012:	4ba4      	ldr	r3, [pc, #656]	; (80032a4 <straight_table2+0x338>)
 8003014:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003018:	4aa2      	ldr	r2, [pc, #648]	; (80032a4 <straight_table2+0x338>)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800301e:	4ba1      	ldr	r3, [pc, #644]	; (80032a4 <straight_table2+0x338>)
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003026:	4ba0      	ldr	r3, [pc, #640]	; (80032a8 <straight_table2+0x33c>)
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800302e:	4b9e      	ldr	r3, [pc, #632]	; (80032a8 <straight_table2+0x33c>)
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8003036:	4b9c      	ldr	r3, [pc, #624]	; (80032a8 <straight_table2+0x33c>)
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800303e:	4b9b      	ldr	r3, [pc, #620]	; (80032ac <straight_table2+0x340>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003044:	4b9a      	ldr	r3, [pc, #616]	; (80032b0 <straight_table2+0x344>)
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800304a:	edd7 7a05 	vldr	s15, [r7, #20]
 800304e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	dd0e      	ble.n	8003076 <straight_table2+0x10a>
 8003058:	ed97 7a07 	vldr	s14, [r7, #28]
 800305c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003068:	dd05      	ble.n	8003076 <straight_table2+0x10a>
 800306a:	4b91      	ldr	r3, [pc, #580]	; (80032b0 <straight_table2+0x344>)
 800306c:	2205      	movs	r2, #5
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	4a8c      	ldr	r2, [pc, #560]	; (80032a4 <straight_table2+0x338>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003076:	edd7 7a05 	vldr	s15, [r7, #20]
 800307a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	dd14      	ble.n	80030ae <straight_table2+0x142>
 8003084:	edd7 7a05 	vldr	s15, [r7, #20]
 8003088:	eef1 7a67 	vneg.f32	s15, s15
 800308c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003098:	d509      	bpl.n	80030ae <straight_table2+0x142>
 800309a:	4b85      	ldr	r3, [pc, #532]	; (80032b0 <straight_table2+0x344>)
 800309c:	2206      	movs	r2, #6
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030a4:	eef1 7a67 	vneg.f32	s15, s15
 80030a8:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <straight_table2+0x338>)
 80030aa:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80030ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80030b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ba:	d514      	bpl.n	80030e6 <straight_table2+0x17a>
 80030bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80030c0:	eef1 7a67 	vneg.f32	s15, s15
 80030c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80030c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	dd09      	ble.n	80030e6 <straight_table2+0x17a>
 80030d2:	4b77      	ldr	r3, [pc, #476]	; (80032b0 <straight_table2+0x344>)
 80030d4:	2205      	movs	r2, #5
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030dc:	eef1 7a67 	vneg.f32	s15, s15
 80030e0:	4b70      	ldr	r3, [pc, #448]	; (80032a4 <straight_table2+0x338>)
 80030e2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80030e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	d50e      	bpl.n	8003112 <straight_table2+0x1a6>
 80030f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80030f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80030fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003104:	d505      	bpl.n	8003112 <straight_table2+0x1a6>
 8003106:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <straight_table2+0x344>)
 8003108:	2206      	movs	r2, #6
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <straight_table2+0x338>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003112:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <straight_table2+0x348>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003118:	783a      	ldrb	r2, [r7, #0]
 800311a:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <straight_table2+0x34c>)
 800311c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 800311e:	f004 fc95 	bl	8007a4c <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 80d3 	bne.w	80032d0 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800312a:	4b64      	ldr	r3, [pc, #400]	; (80032bc <straight_table2+0x350>)
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003132:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <straight_table2+0x344>)
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003138:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <straight_table2+0x338>)
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003140:	bf00      	nop
 8003142:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <straight_table2+0x354>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800314c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	d409      	bmi.n	800316a <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003156:	4b5a      	ldr	r3, [pc, #360]	; (80032c0 <straight_table2+0x354>)
 8003158:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 800315c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80032c4 <straight_table2+0x358>
 8003160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	dd18      	ble.n	800319c <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 800316a:	4b57      	ldr	r3, [pc, #348]	; (80032c8 <straight_table2+0x35c>)
 800316c:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003170:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	d409      	bmi.n	8003192 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 800317e:	4b52      	ldr	r3, [pc, #328]	; (80032c8 <straight_table2+0x35c>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003184:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80032c4 <straight_table2+0x358>
 8003188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003190:	dd04      	ble.n	800319c <straight_table2+0x230>
			  front_wall_break_90==0){}
 8003192:	4b4e      	ldr	r3, [pc, #312]	; (80032cc <straight_table2+0x360>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0d2      	beq.n	8003142 <straight_table2+0x1d6>
		straight.displacement=0;
 800319c:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <straight_table2+0x338>)
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80031a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80031a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	db03      	blt.n	80031ba <straight_table2+0x24e>
 80031b2:	4a3c      	ldr	r2, [pc, #240]	; (80032a4 <straight_table2+0x338>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6053      	str	r3, [r2, #4]
 80031b8:	e006      	b.n	80031c8 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 80031ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80031be:	eef1 7a67 	vneg.f32	s15, s15
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <straight_table2+0x338>)
 80031c4:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80031c8:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <straight_table2+0x344>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80031ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80031d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	dd0e      	ble.n	80031fa <straight_table2+0x28e>
 80031dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80031e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	dd05      	ble.n	80031fa <straight_table2+0x28e>
 80031ee:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <straight_table2+0x344>)
 80031f0:	2205      	movs	r2, #5
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <straight_table2+0x338>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80031fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80031fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	dd14      	ble.n	8003232 <straight_table2+0x2c6>
 8003208:	edd7 7a05 	vldr	s15, [r7, #20]
 800320c:	eef1 7a67 	vneg.f32	s15, s15
 8003210:	ed97 7a07 	vldr	s14, [r7, #28]
 8003214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	d509      	bpl.n	8003232 <straight_table2+0x2c6>
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <straight_table2+0x344>)
 8003220:	2206      	movs	r2, #6
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	edd7 7a01 	vldr	s15, [r7, #4]
 8003228:	eef1 7a67 	vneg.f32	s15, s15
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <straight_table2+0x338>)
 800322e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003232:	edd7 7a05 	vldr	s15, [r7, #20]
 8003236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	d514      	bpl.n	800326a <straight_table2+0x2fe>
 8003240:	edd7 7a05 	vldr	s15, [r7, #20]
 8003244:	eef1 7a67 	vneg.f32	s15, s15
 8003248:	ed97 7a07 	vldr	s14, [r7, #28]
 800324c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003254:	dd09      	ble.n	800326a <straight_table2+0x2fe>
 8003256:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <straight_table2+0x344>)
 8003258:	2205      	movs	r2, #5
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003260:	eef1 7a67 	vneg.f32	s15, s15
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <straight_table2+0x338>)
 8003266:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800326a:	edd7 7a05 	vldr	s15, [r7, #20]
 800326e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	f140 825b 	bpl.w	8003730 <straight_table2+0x7c4>
 800327a:	ed97 7a07 	vldr	s14, [r7, #28]
 800327e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328a:	f140 8251 	bpl.w	8003730 <straight_table2+0x7c4>
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <straight_table2+0x344>)
 8003290:	2206      	movs	r2, #6
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <straight_table2+0x338>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6053      	str	r3, [r2, #4]
 800329a:	e249      	b.n	8003730 <straight_table2+0x7c4>
 800329c:	20000529 	.word	0x20000529
 80032a0:	200004f0 	.word	0x200004f0
 80032a4:	200004d8 	.word	0x200004d8
 80032a8:	200004e4 	.word	0x200004e4
 80032ac:	20000805 	.word	0x20000805
 80032b0:	20000804 	.word	0x20000804
 80032b4:	20000528 	.word	0x20000528
 80032b8:	20000590 	.word	0x20000590
 80032bc:	20000534 	.word	0x20000534
 80032c0:	200005cc 	.word	0x200005cc
 80032c4:	425c0000 	.word	0x425c0000
 80032c8:	200005d0 	.word	0x200005d0
 80032cc:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	f040 80c9 	bne.w	800346a <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80032d8:	4bb8      	ldr	r3, [pc, #736]	; (80035bc <straight_table2+0x650>)
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80032e0:	4bb7      	ldr	r3, [pc, #732]	; (80035c0 <straight_table2+0x654>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80032e6:	4bb7      	ldr	r3, [pc, #732]	; (80035c4 <straight_table2+0x658>)
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80032ee:	bf00      	nop
 80032f0:	4bb5      	ldr	r3, [pc, #724]	; (80035c8 <straight_table2+0x65c>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	d913      	bls.n	8003328 <straight_table2+0x3bc>
 8003300:	4bb1      	ldr	r3, [pc, #708]	; (80035c8 <straight_table2+0x65c>)
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800330a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	d909      	bls.n	8003328 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003314:	4bac      	ldr	r3, [pc, #688]	; (80035c8 <straight_table2+0x65c>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800331a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80035cc <straight_table2+0x660>
 800331e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	db20      	blt.n	800336a <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003328:	4ba9      	ldr	r3, [pc, #676]	; (80035d0 <straight_table2+0x664>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800332e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	d913      	bls.n	8003360 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003338:	4ba5      	ldr	r3, [pc, #660]	; (80035d0 <straight_table2+0x664>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d909      	bls.n	8003360 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800334c:	4ba0      	ldr	r3, [pc, #640]	; (80035d0 <straight_table2+0x664>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003352:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80035cc <straight_table2+0x660>
 8003356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	db04      	blt.n	800336a <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 8003360:	4b9c      	ldr	r3, [pc, #624]	; (80035d4 <straight_table2+0x668>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0c2      	beq.n	80032f0 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 800336a:	4b96      	ldr	r3, [pc, #600]	; (80035c4 <straight_table2+0x658>)
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003372:	edd7 7a02 	vldr	s15, [r7, #8]
 8003376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337e:	db03      	blt.n	8003388 <straight_table2+0x41c>
 8003380:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <straight_table2+0x658>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6053      	str	r3, [r2, #4]
 8003386:	e006      	b.n	8003396 <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 8003388:	edd7 7a01 	vldr	s15, [r7, #4]
 800338c:	eef1 7a67 	vneg.f32	s15, s15
 8003390:	4b8c      	ldr	r3, [pc, #560]	; (80035c4 <straight_table2+0x658>)
 8003392:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003396:	4b8a      	ldr	r3, [pc, #552]	; (80035c0 <straight_table2+0x654>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800339c:	edd7 7a05 	vldr	s15, [r7, #20]
 80033a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	dd0e      	ble.n	80033c8 <straight_table2+0x45c>
 80033aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80033ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80033b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	dd05      	ble.n	80033c8 <straight_table2+0x45c>
 80033bc:	4b80      	ldr	r3, [pc, #512]	; (80035c0 <straight_table2+0x654>)
 80033be:	2205      	movs	r2, #5
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	4a80      	ldr	r2, [pc, #512]	; (80035c4 <straight_table2+0x658>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80033c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80033cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	dd14      	ble.n	8003400 <straight_table2+0x494>
 80033d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80033da:	eef1 7a67 	vneg.f32	s15, s15
 80033de:	ed97 7a07 	vldr	s14, [r7, #28]
 80033e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	d509      	bpl.n	8003400 <straight_table2+0x494>
 80033ec:	4b74      	ldr	r3, [pc, #464]	; (80035c0 <straight_table2+0x654>)
 80033ee:	2206      	movs	r2, #6
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033f6:	eef1 7a67 	vneg.f32	s15, s15
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <straight_table2+0x658>)
 80033fc:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003400:	edd7 7a05 	vldr	s15, [r7, #20]
 8003404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	d514      	bpl.n	8003438 <straight_table2+0x4cc>
 800340e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003412:	eef1 7a67 	vneg.f32	s15, s15
 8003416:	ed97 7a07 	vldr	s14, [r7, #28]
 800341a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	dd09      	ble.n	8003438 <straight_table2+0x4cc>
 8003424:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <straight_table2+0x654>)
 8003426:	2205      	movs	r2, #5
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	edd7 7a01 	vldr	s15, [r7, #4]
 800342e:	eef1 7a67 	vneg.f32	s15, s15
 8003432:	4b64      	ldr	r3, [pc, #400]	; (80035c4 <straight_table2+0x658>)
 8003434:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003438:	edd7 7a05 	vldr	s15, [r7, #20]
 800343c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	f140 8174 	bpl.w	8003730 <straight_table2+0x7c4>
 8003448:	ed97 7a07 	vldr	s14, [r7, #28]
 800344c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	f140 816a 	bpl.w	8003730 <straight_table2+0x7c4>
 800345c:	4b58      	ldr	r3, [pc, #352]	; (80035c0 <straight_table2+0x654>)
 800345e:	2206      	movs	r2, #6
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <straight_table2+0x658>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6053      	str	r3, [r2, #4]
 8003468:	e162      	b.n	8003730 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	2b03      	cmp	r3, #3
 800346e:	f040 80b9 	bne.w	80035e4 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003472:	4b52      	ldr	r3, [pc, #328]	; (80035bc <straight_table2+0x650>)
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800347a:	4b51      	ldr	r3, [pc, #324]	; (80035c0 <straight_table2+0x654>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <straight_table2+0x658>)
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003488:	bf00      	nop
 800348a:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <straight_table2+0x66c>)
 800348c:	edd3 7a00 	vldr	s15, [r3]
 8003490:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349c:	d409      	bmi.n	80034b2 <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800349e:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <straight_table2+0x66c>)
 80034a0:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80034a4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80035dc <straight_table2+0x670>
 80034a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	dd04      	ble.n	80034bc <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 80034b2:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <straight_table2+0x674>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0e6      	beq.n	800348a <straight_table2+0x51e>
		straight.displacement=0;
 80034bc:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <straight_table2+0x658>)
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	db03      	blt.n	80034da <straight_table2+0x56e>
 80034d2:	4a3c      	ldr	r2, [pc, #240]	; (80035c4 <straight_table2+0x658>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6053      	str	r3, [r2, #4]
 80034d8:	e006      	b.n	80034e8 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 80034da:	edd7 7a01 	vldr	s15, [r7, #4]
 80034de:	eef1 7a67 	vneg.f32	s15, s15
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <straight_table2+0x658>)
 80034e4:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <straight_table2+0x654>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80034ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80034f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fa:	dd0e      	ble.n	800351a <straight_table2+0x5ae>
 80034fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003500:	edd7 7a05 	vldr	s15, [r7, #20]
 8003504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	dd05      	ble.n	800351a <straight_table2+0x5ae>
 800350e:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <straight_table2+0x654>)
 8003510:	2205      	movs	r2, #5
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <straight_table2+0x658>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800351a:	edd7 7a05 	vldr	s15, [r7, #20]
 800351e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	dd14      	ble.n	8003552 <straight_table2+0x5e6>
 8003528:	edd7 7a05 	vldr	s15, [r7, #20]
 800352c:	eef1 7a67 	vneg.f32	s15, s15
 8003530:	ed97 7a07 	vldr	s14, [r7, #28]
 8003534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353c:	d509      	bpl.n	8003552 <straight_table2+0x5e6>
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <straight_table2+0x654>)
 8003540:	2206      	movs	r2, #6
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	edd7 7a01 	vldr	s15, [r7, #4]
 8003548:	eef1 7a67 	vneg.f32	s15, s15
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <straight_table2+0x658>)
 800354e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003552:	edd7 7a05 	vldr	s15, [r7, #20]
 8003556:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	d514      	bpl.n	800358a <straight_table2+0x61e>
 8003560:	edd7 7a05 	vldr	s15, [r7, #20]
 8003564:	eef1 7a67 	vneg.f32	s15, s15
 8003568:	ed97 7a07 	vldr	s14, [r7, #28]
 800356c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	dd09      	ble.n	800358a <straight_table2+0x61e>
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <straight_table2+0x654>)
 8003578:	2205      	movs	r2, #5
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003580:	eef1 7a67 	vneg.f32	s15, s15
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <straight_table2+0x658>)
 8003586:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800358a:	edd7 7a05 	vldr	s15, [r7, #20]
 800358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	f140 80cb 	bpl.w	8003730 <straight_table2+0x7c4>
 800359a:	ed97 7a07 	vldr	s14, [r7, #28]
 800359e:	edd7 7a05 	vldr	s15, [r7, #20]
 80035a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035aa:	f140 80c1 	bpl.w	8003730 <straight_table2+0x7c4>
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <straight_table2+0x654>)
 80035b0:	2206      	movs	r2, #6
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	4a03      	ldr	r2, [pc, #12]	; (80035c4 <straight_table2+0x658>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6053      	str	r3, [r2, #4]
 80035ba:	e0b9      	b.n	8003730 <straight_table2+0x7c4>
 80035bc:	20000534 	.word	0x20000534
 80035c0:	20000804 	.word	0x20000804
 80035c4:	200004d8 	.word	0x200004d8
 80035c8:	200005d4 	.word	0x200005d4
 80035cc:	42000000 	.word	0x42000000
 80035d0:	200005d8 	.word	0x200005d8
 80035d4:	200005f3 	.word	0x200005f3
 80035d8:	200005e4 	.word	0x200005e4
 80035dc:	420c0000 	.word	0x420c0000
 80035e0:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	f040 80a2 	bne.w	8003730 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035ec:	4ba6      	ldr	r3, [pc, #664]	; (8003888 <straight_table2+0x91c>)
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80035f4:	4ba5      	ldr	r3, [pc, #660]	; (800388c <straight_table2+0x920>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80035fa:	4ba5      	ldr	r3, [pc, #660]	; (8003890 <straight_table2+0x924>)
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003602:	bf00      	nop
 8003604:	4ba3      	ldr	r3, [pc, #652]	; (8003894 <straight_table2+0x928>)
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800360e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	d409      	bmi.n	800362c <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003618:	4b9e      	ldr	r3, [pc, #632]	; (8003894 <straight_table2+0x928>)
 800361a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800361e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003898 <straight_table2+0x92c>
 8003622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	dd04      	ble.n	8003636 <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 800362c:	4b9b      	ldr	r3, [pc, #620]	; (800389c <straight_table2+0x930>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0e6      	beq.n	8003604 <straight_table2+0x698>
		straight.displacement=0;
 8003636:	4b96      	ldr	r3, [pc, #600]	; (8003890 <straight_table2+0x924>)
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800363e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364a:	db03      	blt.n	8003654 <straight_table2+0x6e8>
 800364c:	4a90      	ldr	r2, [pc, #576]	; (8003890 <straight_table2+0x924>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6053      	str	r3, [r2, #4]
 8003652:	e006      	b.n	8003662 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 8003654:	edd7 7a01 	vldr	s15, [r7, #4]
 8003658:	eef1 7a67 	vneg.f32	s15, s15
 800365c:	4b8c      	ldr	r3, [pc, #560]	; (8003890 <straight_table2+0x924>)
 800365e:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003662:	4b8a      	ldr	r3, [pc, #552]	; (800388c <straight_table2+0x920>)
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003668:	edd7 7a05 	vldr	s15, [r7, #20]
 800366c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	dd0e      	ble.n	8003694 <straight_table2+0x728>
 8003676:	ed97 7a07 	vldr	s14, [r7, #28]
 800367a:	edd7 7a05 	vldr	s15, [r7, #20]
 800367e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	dd05      	ble.n	8003694 <straight_table2+0x728>
 8003688:	4b80      	ldr	r3, [pc, #512]	; (800388c <straight_table2+0x920>)
 800368a:	2205      	movs	r2, #5
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	4a80      	ldr	r2, [pc, #512]	; (8003890 <straight_table2+0x924>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003694:	edd7 7a05 	vldr	s15, [r7, #20]
 8003698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800369c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a0:	dd14      	ble.n	80036cc <straight_table2+0x760>
 80036a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036a6:	eef1 7a67 	vneg.f32	s15, s15
 80036aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b6:	d509      	bpl.n	80036cc <straight_table2+0x760>
 80036b8:	4b74      	ldr	r3, [pc, #464]	; (800388c <straight_table2+0x920>)
 80036ba:	2206      	movs	r2, #6
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c2:	eef1 7a67 	vneg.f32	s15, s15
 80036c6:	4b72      	ldr	r3, [pc, #456]	; (8003890 <straight_table2+0x924>)
 80036c8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80036cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d8:	d514      	bpl.n	8003704 <straight_table2+0x798>
 80036da:	edd7 7a05 	vldr	s15, [r7, #20]
 80036de:	eef1 7a67 	vneg.f32	s15, s15
 80036e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ee:	dd09      	ble.n	8003704 <straight_table2+0x798>
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <straight_table2+0x920>)
 80036f2:	2205      	movs	r2, #5
 80036f4:	701a      	strb	r2, [r3, #0]
 80036f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80036fa:	eef1 7a67 	vneg.f32	s15, s15
 80036fe:	4b64      	ldr	r3, [pc, #400]	; (8003890 <straight_table2+0x924>)
 8003700:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003704:	edd7 7a05 	vldr	s15, [r7, #20]
 8003708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	d50e      	bpl.n	8003730 <straight_table2+0x7c4>
 8003712:	ed97 7a07 	vldr	s14, [r7, #28]
 8003716:	edd7 7a05 	vldr	s15, [r7, #20]
 800371a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	d505      	bpl.n	8003730 <straight_table2+0x7c4>
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <straight_table2+0x920>)
 8003726:	2206      	movs	r2, #6
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	4a59      	ldr	r2, [pc, #356]	; (8003890 <straight_table2+0x924>)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003730:	78bb      	ldrb	r3, [r7, #2]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 809e 	bne.w	8003874 <straight_table2+0x908>
	while (g_acc_flag!=4){
 8003738:	e074      	b.n	8003824 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d120      	bne.n	8003782 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003740:	edd7 7a05 	vldr	s15, [r7, #20]
 8003744:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800374c:	4b54      	ldr	r3, [pc, #336]	; (80038a0 <straight_table2+0x934>)
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	d90e      	bls.n	800377a <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 800375c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003760:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003768:	4b4e      	ldr	r3, [pc, #312]	; (80038a4 <straight_table2+0x938>)
 800376a:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 800376e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	d900      	bls.n	800377a <straight_table2+0x80e>
 8003778:	e054      	b.n	8003824 <straight_table2+0x8b8>
				g_acc_flag=4;
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <straight_table2+0x920>)
 800377c:	2204      	movs	r2, #4
 800377e:	701a      	strb	r2, [r3, #0]
				break;
 8003780:	e055      	b.n	800382e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d121      	bne.n	80037cc <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003788:	edd7 7a05 	vldr	s15, [r7, #20]
 800378c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003794:	4b44      	ldr	r3, [pc, #272]	; (80038a8 <straight_table2+0x93c>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a2:	d900      	bls.n	80037a6 <straight_table2+0x83a>
 80037a4:	e03e      	b.n	8003824 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 80037a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80037aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80037ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037b2:	4b3e      	ldr	r3, [pc, #248]	; (80038ac <straight_table2+0x940>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80037b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	d900      	bls.n	80037c4 <straight_table2+0x858>
 80037c2:	e02f      	b.n	8003824 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <straight_table2+0x920>)
 80037c6:	2204      	movs	r2, #4
 80037c8:	701a      	strb	r2, [r3, #0]
				break;
 80037ca:	e030      	b.n	800382e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d112      	bne.n	80037f8 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 80037d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80037da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037de:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <straight_table2+0x944>)
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	d900      	bls.n	80037f0 <straight_table2+0x884>
 80037ee:	e019      	b.n	8003824 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037f0:	4b26      	ldr	r3, [pc, #152]	; (800388c <straight_table2+0x920>)
 80037f2:	2204      	movs	r2, #4
 80037f4:	701a      	strb	r2, [r3, #0]
				break;
 80037f6:	e01a      	b.n	800382e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d112      	bne.n	8003824 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 80037fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003802:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <straight_table2+0x928>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003818:	d900      	bls.n	800381c <straight_table2+0x8b0>
 800381a:	e003      	b.n	8003824 <straight_table2+0x8b8>
				g_acc_flag=4;
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <straight_table2+0x920>)
 800381e:	2204      	movs	r2, #4
 8003820:	701a      	strb	r2, [r3, #0]
				break;
 8003822:	e004      	b.n	800382e <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <straight_table2+0x920>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b04      	cmp	r3, #4
 800382c:	d185      	bne.n	800373a <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 800382e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003832:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383a:	d105      	bne.n	8003848 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 800383c:	2064      	movs	r0, #100	; 0x64
 800383e:	f004 fbdf 	bl	8008000 <wait_ms_NoReset>
		modeacc = 0;
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <straight_table2+0x948>)
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <straight_table2+0x94c>)
 800384a:	ed93 7a00 	vldr	s14, [r3]
 800384e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <straight_table2+0x94c>)
 8003858:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <straight_table2+0x950>)
 800385e:	ed93 7a00 	vldr	s14, [r3]
 8003862:	edd7 7a05 	vldr	s15, [r7, #20]
 8003866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <straight_table2+0x950>)
 800386c:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003870:	f004 f8fa 	bl	8007a68 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <straight_table2+0x924>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	ee07 3a90 	vmov	s15, r3



}
 800387c:	eeb0 0a67 	vmov.f32	s0, s15
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000534 	.word	0x20000534
 800388c:	20000804 	.word	0x20000804
 8003890:	200004d8 	.word	0x200004d8
 8003894:	200005e8 	.word	0x200005e8
 8003898:	420c0000 	.word	0x420c0000
 800389c:	200005f4 	.word	0x200005f4
 80038a0:	200005d0 	.word	0x200005d0
 80038a4:	200005cc 	.word	0x200005cc
 80038a8:	200005d8 	.word	0x200005d8
 80038ac:	200005d4 	.word	0x200005d4
 80038b0:	200005e4 	.word	0x200005e4
 80038b4:	20000528 	.word	0x20000528
 80038b8:	20000220 	.word	0x20000220
 80038bc:	20000224 	.word	0x20000224

080038c0 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80038ca:	60b8      	str	r0, [r7, #8]
 80038cc:	460b      	mov	r3, r1
 80038ce:	71fb      	strb	r3, [r7, #7]
 80038d0:	4613      	mov	r3, r2
 80038d2:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 80038d4:	e02f      	b.n	8003936 <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <End_straight+0x2e>
 80038e2:	79bb      	ldrb	r3, [r7, #6]
 80038e4:	f083 0301 	eor.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d023      	beq.n	8003936 <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d120      	bne.n	8003936 <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80038fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003900:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <End_straight+0xb4>)
 8003902:	edd3 7a00 	vldr	s15, [r3]
 8003906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	d90e      	bls.n	800392e <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003910:	edd7 7a03 	vldr	s15, [r7, #12]
 8003914:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003918:	ee37 7a87 	vadd.f32	s14, s15, s14
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <End_straight+0xb8>)
 800391e:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392a:	d900      	bls.n	800392e <End_straight+0x6e>
 800392c:	e003      	b.n	8003936 <End_straight+0x76>
						g_acc_flag=4;
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <End_straight+0xbc>)
 8003930:	2204      	movs	r2, #4
 8003932:	701a      	strb	r2, [r3, #0]
						break;
 8003934:	e004      	b.n	8003940 <End_straight+0x80>
	while (g_acc_flag!=4){
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <End_straight+0xbc>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b04      	cmp	r3, #4
 800393e:	d1ca      	bne.n	80038d6 <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <End_straight+0xc0>)
 8003942:	ed93 7a00 	vldr	s14, [r3]
 8003946:	edd7 7a03 	vldr	s15, [r7, #12]
 800394a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <End_straight+0xc0>)
 8003950:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <End_straight+0xc4>)
 8003956:	ed93 7a00 	vldr	s14, [r3]
 800395a:	edd7 7a03 	vldr	s15, [r7, #12]
 800395e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <End_straight+0xc4>)
 8003964:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003968:	f004 f87e 	bl	8007a68 <pl_DriveMotor_stop>
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200005d0 	.word	0x200005d0
 8003978:	200005cc 	.word	0x200005cc
 800397c:	20000804 	.word	0x20000804
 8003980:	20000220 	.word	0x20000220
 8003984:	20000224 	.word	0x20000224

08003988 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003992:	edc7 0a04 	vstr	s1, [r7, #16]
 8003996:	ed87 1a03 	vstr	s2, [r7, #12]
 800399a:	edc7 1a02 	vstr	s3, [r7, #8]
 800399e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80039a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80039aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80039ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039b2:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80039b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80039ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80039be:	ed97 7a01 	vldr	s14, [r7, #4]
 80039c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c6:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80039ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	d505      	bpl.n	80039e4 <turning_table2+0x5c>
 80039d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039dc:	eef1 7a67 	vneg.f32	s15, s15
 80039e0:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 80039e4:	4a69      	ldr	r2, [pc, #420]	; (8003b8c <turning_table2+0x204>)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 80039ea:	4a68      	ldr	r2, [pc, #416]	; (8003b8c <turning_table2+0x204>)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 80039f0:	4a66      	ldr	r2, [pc, #408]	; (8003b8c <turning_table2+0x204>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 80039f6:	4a65      	ldr	r2, [pc, #404]	; (8003b8c <turning_table2+0x204>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 80039fc:	4a63      	ldr	r2, [pc, #396]	; (8003b8c <turning_table2+0x204>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0e:	db03      	blt.n	8003a18 <turning_table2+0x90>
 8003a10:	4a5f      	ldr	r2, [pc, #380]	; (8003b90 <turning_table2+0x208>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	e006      	b.n	8003a26 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003a18:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a1c:	eef1 7a67 	vneg.f32	s15, s15
 8003a20:	4b5b      	ldr	r3, [pc, #364]	; (8003b90 <turning_table2+0x208>)
 8003a22:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003a26:	4a5a      	ldr	r2, [pc, #360]	; (8003b90 <turning_table2+0x208>)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003a2c:	4b58      	ldr	r3, [pc, #352]	; (8003b90 <turning_table2+0x208>)
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003a34:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <turning_table2+0x20c>)
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003a3c:	4b55      	ldr	r3, [pc, #340]	; (8003b94 <turning_table2+0x20c>)
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003a44:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <turning_table2+0x20c>)
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003a4c:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <turning_table2+0x210>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003a52:	4b52      	ldr	r3, [pc, #328]	; (8003b9c <turning_table2+0x214>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003a58:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a64:	dd0e      	ble.n	8003a84 <turning_table2+0xfc>
 8003a66:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a76:	dd05      	ble.n	8003a84 <turning_table2+0xfc>
 8003a78:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <turning_table2+0x214>)
 8003a7a:	2205      	movs	r2, #5
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	4a44      	ldr	r2, [pc, #272]	; (8003b90 <turning_table2+0x208>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	dd14      	ble.n	8003abc <turning_table2+0x134>
 8003a92:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a96:	eef1 7a67 	vneg.f32	s15, s15
 8003a9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa6:	d509      	bpl.n	8003abc <turning_table2+0x134>
 8003aa8:	4b3c      	ldr	r3, [pc, #240]	; (8003b9c <turning_table2+0x214>)
 8003aaa:	2206      	movs	r2, #6
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ab2:	eef1 7a67 	vneg.f32	s15, s15
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <turning_table2+0x208>)
 8003ab8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003abc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ac0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac8:	d514      	bpl.n	8003af4 <turning_table2+0x16c>
 8003aca:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ace:	eef1 7a67 	vneg.f32	s15, s15
 8003ad2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	dd09      	ble.n	8003af4 <turning_table2+0x16c>
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <turning_table2+0x214>)
 8003ae2:	2205      	movs	r2, #5
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aea:	eef1 7a67 	vneg.f32	s15, s15
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <turning_table2+0x208>)
 8003af0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	d50e      	bpl.n	8003b20 <turning_table2+0x198>
 8003b02:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b06:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b12:	d505      	bpl.n	8003b20 <turning_table2+0x198>
 8003b14:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <turning_table2+0x214>)
 8003b16:	2206      	movs	r2, #6
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <turning_table2+0x208>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <turning_table2+0x218>)
 8003b22:	2202      	movs	r2, #2
 8003b24:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003b26:	f003 ff91 	bl	8007a4c <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003b2a:	bf00      	nop
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <turning_table2+0x214>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d1fa      	bne.n	8003b2c <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	d106      	bne.n	8003b52 <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003b44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b48:	f004 fa5a 	bl	8008000 <wait_ms_NoReset>
		modeacc = 0;
 8003b4c:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <turning_table2+0x218>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <turning_table2+0x21c>)
 8003b54:	ed93 7a00 	vldr	s14, [r3]
 8003b58:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b60:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <turning_table2+0x21c>)
 8003b62:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003b66:	f003 ff7f 	bl	8007a68 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <turning_table2+0x220>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a0f      	ldr	r2, [pc, #60]	; (8003bac <turning_table2+0x224>)
 8003b70:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <turning_table2+0x228>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <turning_table2+0x22c>)
 8003b78:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <turning_table2+0x208>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	ee07 3a90 	vmov	s15, r3
}
 8003b82:	eeb0 0a67 	vmov.f32	s0, s15
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000504 	.word	0x20000504
 8003b90:	200004e4 	.word	0x200004e4
 8003b94:	200004d8 	.word	0x200004d8
 8003b98:	20000805 	.word	0x20000805
 8003b9c:	20000804 	.word	0x20000804
 8003ba0:	20000528 	.word	0x20000528
 8003ba4:	20000264 	.word	0x20000264
 8003ba8:	20000228 	.word	0x20000228
 8003bac:	20000258 	.word	0x20000258
 8003bb0:	2000022c 	.word	0x2000022c
 8003bb4:	2000025c 	.word	0x2000025c

08003bb8 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003bc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8003bc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8003bca:	edc7 1a02 	vstr	s3, [r7, #8]
 8003bce:	ed87 2a01 	vstr	s4, [r7, #4]
 8003bd2:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bda:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003bde:	edd7 7a03 	vldr	s15, [r7, #12]
 8003be2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003be6:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003bea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003bee:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003bf2:	ed97 7a00 	vldr	s14, [r7]
 8003bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003bfe:	edd7 7a00 	vldr	s15, [r7]
 8003c02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	d505      	bpl.n	8003c18 <slalom_table2+0x60>
 8003c0c:	edd7 7a00 	vldr	s15, [r7]
 8003c10:	eef1 7a67 	vneg.f32	s15, s15
 8003c14:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003c18:	4a5e      	ldr	r2, [pc, #376]	; (8003d94 <slalom_table2+0x1dc>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c1e:	4a5d      	ldr	r2, [pc, #372]	; (8003d94 <slalom_table2+0x1dc>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c24:	4a5b      	ldr	r2, [pc, #364]	; (8003d94 <slalom_table2+0x1dc>)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c2a:	4a5a      	ldr	r2, [pc, #360]	; (8003d94 <slalom_table2+0x1dc>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003c30:	4a58      	ldr	r2, [pc, #352]	; (8003d94 <slalom_table2+0x1dc>)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c42:	db03      	blt.n	8003c4c <slalom_table2+0x94>
 8003c44:	4a54      	ldr	r2, [pc, #336]	; (8003d98 <slalom_table2+0x1e0>)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6053      	str	r3, [r2, #4]
 8003c4a:	e006      	b.n	8003c5a <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003c4c:	edd7 7a00 	vldr	s15, [r7]
 8003c50:	eef1 7a67 	vneg.f32	s15, s15
 8003c54:	4b50      	ldr	r3, [pc, #320]	; (8003d98 <slalom_table2+0x1e0>)
 8003c56:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003c5a:	4a4f      	ldr	r2, [pc, #316]	; (8003d98 <slalom_table2+0x1e0>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003c60:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <slalom_table2+0x1e0>)
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003c68:	4a4c      	ldr	r2, [pc, #304]	; (8003d9c <slalom_table2+0x1e4>)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003c6e:	4b4b      	ldr	r3, [pc, #300]	; (8003d9c <slalom_table2+0x1e4>)
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003c76:	4b49      	ldr	r3, [pc, #292]	; (8003d9c <slalom_table2+0x1e4>)
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003c7e:	4b48      	ldr	r3, [pc, #288]	; (8003da0 <slalom_table2+0x1e8>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003c84:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <slalom_table2+0x1ec>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003c8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c96:	dd0e      	ble.n	8003cb6 <slalom_table2+0xfe>
 8003c98:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca8:	dd05      	ble.n	8003cb6 <slalom_table2+0xfe>
 8003caa:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <slalom_table2+0x1ec>)
 8003cac:	2205      	movs	r2, #5
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	4a39      	ldr	r2, [pc, #228]	; (8003d98 <slalom_table2+0x1e0>)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003cb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	dd14      	ble.n	8003cee <slalom_table2+0x136>
 8003cc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cc8:	eef1 7a67 	vneg.f32	s15, s15
 8003ccc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd8:	d509      	bpl.n	8003cee <slalom_table2+0x136>
 8003cda:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <slalom_table2+0x1ec>)
 8003cdc:	2206      	movs	r2, #6
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	edd7 7a00 	vldr	s15, [r7]
 8003ce4:	eef1 7a67 	vneg.f32	s15, s15
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <slalom_table2+0x1e0>)
 8003cea:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	d514      	bpl.n	8003d26 <slalom_table2+0x16e>
 8003cfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d00:	eef1 7a67 	vneg.f32	s15, s15
 8003d04:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	dd09      	ble.n	8003d26 <slalom_table2+0x16e>
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <slalom_table2+0x1ec>)
 8003d14:	2205      	movs	r2, #5
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	edd7 7a00 	vldr	s15, [r7]
 8003d1c:	eef1 7a67 	vneg.f32	s15, s15
 8003d20:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <slalom_table2+0x1e0>)
 8003d22:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	d50e      	bpl.n	8003d52 <slalom_table2+0x19a>
 8003d34:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d38:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	d505      	bpl.n	8003d52 <slalom_table2+0x19a>
 8003d46:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <slalom_table2+0x1ec>)
 8003d48:	2206      	movs	r2, #6
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <slalom_table2+0x1e0>)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <slalom_table2+0x1f0>)
 8003d54:	2204      	movs	r2, #4
 8003d56:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003d58:	f003 fe78 	bl	8007a4c <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003d5c:	bf00      	nop
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <slalom_table2+0x1ec>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d1fa      	bne.n	8003d5e <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003d68:	4b10      	ldr	r3, [pc, #64]	; (8003dac <slalom_table2+0x1f4>)
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <slalom_table2+0x1f4>)
 8003d78:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003d7c:	f003 fe74 	bl	8007a68 <pl_DriveMotor_stop>

	return turning.velocity;
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <slalom_table2+0x1e0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	ee07 3a90 	vmov	s15, r3
}
 8003d88:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000504 	.word	0x20000504
 8003d98:	200004e4 	.word	0x200004e4
 8003d9c:	200004d8 	.word	0x200004d8
 8003da0:	20000805 	.word	0x20000805
 8003da4:	20000804 	.word	0x20000804
 8003da8:	20000528 	.word	0x20000528
 8003dac:	20000264 	.word	0x20000264

08003db0 <no_angle>:

void no_angle(void){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <no_angle+0x88>)
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <no_angle+0x88>)
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <no_angle+0x88>)
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <no_angle+0x8c>)
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <no_angle+0x8c>)
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <no_angle+0x8c>)
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <no_angle+0x90>)
 8003de6:	2203      	movs	r2, #3
 8003de8:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003dea:	f003 fe2f 	bl	8007a4c <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003dee:	e002      	b.n	8003df6 <no_angle+0x46>
		HAL_Delay(1);
 8003df0:	2001      	movs	r0, #1
 8003df2:	f013 fd41 	bl	8017878 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <no_angle+0x94>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003dfe:	ddf7      	ble.n	8003df0 <no_angle+0x40>
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <no_angle+0x94>)
 8003e02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e0a:	ddf1      	ble.n	8003df0 <no_angle+0x40>
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <no_angle+0x94>)
 8003e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e12:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e16:	ddeb      	ble.n	8003df0 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <no_angle+0x90>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e1e:	f003 fe23 	bl	8007a68 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <no_angle+0x98>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <no_angle+0x9c>)
 8003e28:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <no_angle+0xa0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <no_angle+0xa4>)
 8003e30:	6013      	str	r3, [r2, #0]

}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	200004e4 	.word	0x200004e4
 8003e3c:	200004d8 	.word	0x200004d8
 8003e40:	20000528 	.word	0x20000528
 8003e44:	200002b8 	.word	0x200002b8
 8003e48:	20000228 	.word	0x20000228
 8003e4c:	20000258 	.word	0x20000258
 8003e50:	2000022c 	.word	0x2000022c
 8003e54:	2000025c 	.word	0x2000025c

08003e58 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003e58:	b5b0      	push	{r4, r5, r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e62:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e66:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003e6a:	4a3d      	ldr	r2, [pc, #244]	; (8003f60 <mollifier_slalom_table+0x108>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003e70:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <mollifier_slalom_table+0x108>)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003e76:	4a3a      	ldr	r2, [pc, #232]	; (8003f60 <mollifier_slalom_table+0x108>)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003e7c:	4b39      	ldr	r3, [pc, #228]	; (8003f64 <mollifier_slalom_table+0x10c>)
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e84:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <mollifier_slalom_table+0x10c>)
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003e8c:	4a36      	ldr	r2, [pc, #216]	; (8003f68 <mollifier_slalom_table+0x110>)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003e92:	4b35      	ldr	r3, [pc, #212]	; (8003f68 <mollifier_slalom_table+0x110>)
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e9a:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <mollifier_slalom_table+0x110>)
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003ea2:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <mollifier_slalom_table+0x114>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <mollifier_slalom_table+0x118>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003eae:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eb2:	eef0 7ae7 	vabs.f32	s15, s15
 8003eb6:	ee17 0a90 	vmov	r0, s15
 8003eba:	f7fc fb6d 	bl	8000598 <__aeabi_f2d>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4614      	mov	r4, r2
 8003ec4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003ec8:	a321      	add	r3, pc, #132	; (adr r3, 8003f50 <mollifier_slalom_table+0xf8>)
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	4620      	mov	r0, r4
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	f7fc fce3 	bl	800089c <__aeabi_ddiv>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	a31e      	add	r3, pc, #120	; (adr r3, 8003f58 <mollifier_slalom_table+0x100>)
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f7fc fbb0 	bl	8000648 <__aeabi_dmul>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4614      	mov	r4, r2
 8003eee:	461d      	mov	r5, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7fc fb51 	bl	8000598 <__aeabi_f2d>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4620      	mov	r0, r4
 8003efc:	4629      	mov	r1, r5
 8003efe:	f7fc fccd 	bl	800089c <__aeabi_ddiv>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7fc fe75 	bl	8000bf8 <__aeabi_d2f>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <mollifier_slalom_table+0x11c>)
 8003f12:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f14:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <mollifier_slalom_table+0x120>)
 8003f16:	2206      	movs	r2, #6
 8003f18:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f1a:	f003 fd97 	bl	8007a4c <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f1e:	bf00      	nop
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <mollifier_slalom_table+0x118>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d1fa      	bne.n	8003f20 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <mollifier_slalom_table+0x124>)
 8003f2c:	ed93 7a00 	vldr	s14, [r3]
 8003f30:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <mollifier_slalom_table+0x124>)
 8003f3a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003f3e:	f003 fd93 	bl	8007a68 <pl_DriveMotor_stop>

}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w
 8003f50:	f9db22d1 	.word	0xf9db22d1
 8003f54:	3fdc6a7e 	.word	0x3fdc6a7e
 8003f58:	362cef38 	.word	0x362cef38
 8003f5c:	3fd78b56 	.word	0x3fd78b56
 8003f60:	20000518 	.word	0x20000518
 8003f64:	200004e4 	.word	0x200004e4
 8003f68:	200004d8 	.word	0x200004d8
 8003f6c:	20000805 	.word	0x20000805
 8003f70:	20000804 	.word	0x20000804
 8003f74:	20000800 	.word	0x20000800
 8003f78:	20000528 	.word	0x20000528
 8003f7c:	20000264 	.word	0x20000264

08003f80 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <no_frontwall_straight+0x70>)
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003f8c:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <no_frontwall_straight+0x70>)
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <no_frontwall_straight+0x70>)
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003f9c:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <no_frontwall_straight+0x74>)
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <no_frontwall_straight+0x74>)
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <no_frontwall_straight+0x74>)
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <no_frontwall_straight+0x78>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <no_frontwall_straight+0x7c>)
 8003fbc:	2205      	movs	r2, #5
 8003fbe:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003fc0:	f003 fd44 	bl	8007a4c <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8003fc4:	2096      	movs	r0, #150	; 0x96
 8003fc6:	f004 f81b 	bl	8008000 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <no_frontwall_straight+0x78>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <no_frontwall_straight+0x7c>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003fd6:	f003 fd47 	bl	8007a68 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <no_frontwall_straight+0x80>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <no_frontwall_straight+0x84>)
 8003fe0:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <no_frontwall_straight+0x88>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <no_frontwall_straight+0x8c>)
 8003fe8:	6013      	str	r3, [r2, #0]

}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	200004e4 	.word	0x200004e4
 8003ff4:	200004d8 	.word	0x200004d8
 8003ff8:	20000591 	.word	0x20000591
 8003ffc:	20000528 	.word	0x20000528
 8004000:	20000228 	.word	0x20000228
 8004004:	20000258 	.word	0x20000258
 8004008:	2000022c 	.word	0x2000022c
 800400c:	2000025c 	.word	0x2000025c

08004010 <straight_table_ff>:




float straight_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	ed87 0a05 	vstr	s0, [r7, #20]
 800401a:	edc7 0a04 	vstr	s1, [r7, #16]
 800401e:	ed87 1a03 	vstr	s2, [r7, #12]
 8004022:	edc7 1a02 	vstr	s3, [r7, #8]
 8004026:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 800402a:	edd7 7a03 	vldr	s15, [r7, #12]
 800402e:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8004032:	edd7 7a04 	vldr	s15, [r7, #16]
 8004036:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800403a:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800403e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004042:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8004046:	ed97 7a01 	vldr	s14, [r7, #4]
 800404a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800404e:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8004052:	edd7 7a01 	vldr	s15, [r7, #4]
 8004056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	d505      	bpl.n	800406c <straight_table_ff+0x5c>
 8004060:	edd7 7a01 	vldr	s15, [r7, #4]
 8004064:	eef1 7a67 	vneg.f32	s15, s15
 8004068:	edc7 7a01 	vstr	s15, [r7, #4]
	Ksp = 0;//3//P項の制御量直進*****************************************************
 800406c:	4b76      	ldr	r3, [pc, #472]	; (8004248 <straight_table_ff+0x238>)
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
	Ksi = 0;//5//43//I項の制御量直進*****************************************************
 8004074:	4b75      	ldr	r3, [pc, #468]	; (800424c <straight_table_ff+0x23c>)
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
	Ksd = 0;//D項の制御量直進*****************************************************
 800407c:	4b74      	ldr	r3, [pc, #464]	; (8004250 <straight_table_ff+0x240>)
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
	Ktp = 0;//295//P項の制御量旋回*****************************************************
 8004084:	4b73      	ldr	r3, [pc, #460]	; (8004254 <straight_table_ff+0x244>)
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
	Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 800408c:	4b72      	ldr	r3, [pc, #456]	; (8004258 <straight_table_ff+0x248>)
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
	Ktd = 0;
 8004094:	4b71      	ldr	r3, [pc, #452]	; (800425c <straight_table_ff+0x24c>)
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	601a      	str	r2, [r3, #0]


	Trapezoid_straight.displacement = input_displacement;
 800409c:	4a70      	ldr	r2, [pc, #448]	; (8004260 <straight_table_ff+0x250>)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80040a2:	4a6f      	ldr	r2, [pc, #444]	; (8004260 <straight_table_ff+0x250>)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80040a8:	4a6d      	ldr	r2, [pc, #436]	; (8004260 <straight_table_ff+0x250>)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80040ae:	4a6c      	ldr	r2, [pc, #432]	; (8004260 <straight_table_ff+0x250>)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80040b4:	4a6a      	ldr	r2, [pc, #424]	; (8004260 <straight_table_ff+0x250>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80040ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80040be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c6:	db03      	blt.n	80040d0 <straight_table_ff+0xc0>
 80040c8:	4a66      	ldr	r2, [pc, #408]	; (8004264 <straight_table_ff+0x254>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6053      	str	r3, [r2, #4]
 80040ce:	e006      	b.n	80040de <straight_table_ff+0xce>
	}else{straight.acceleration = -input_acceleration;}
 80040d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80040d4:	eef1 7a67 	vneg.f32	s15, s15
 80040d8:	4b62      	ldr	r3, [pc, #392]	; (8004264 <straight_table_ff+0x254>)
 80040da:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 80040de:	4a61      	ldr	r2, [pc, #388]	; (8004264 <straight_table_ff+0x254>)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 80040e4:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <straight_table_ff+0x254>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80040ec:	4b5e      	ldr	r3, [pc, #376]	; (8004268 <straight_table_ff+0x258>)
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 80040f4:	4b5c      	ldr	r3, [pc, #368]	; (8004268 <straight_table_ff+0x258>)
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80040fc:	4b5a      	ldr	r3, [pc, #360]	; (8004268 <straight_table_ff+0x258>)
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004104:	4b59      	ldr	r3, [pc, #356]	; (800426c <straight_table_ff+0x25c>)
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800410a:	4b59      	ldr	r3, [pc, #356]	; (8004270 <straight_table_ff+0x260>)
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004110:	edd7 7a05 	vldr	s15, [r7, #20]
 8004114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411c:	dd0e      	ble.n	800413c <straight_table_ff+0x12c>
 800411e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004122:	edd7 7a05 	vldr	s15, [r7, #20]
 8004126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412e:	dd05      	ble.n	800413c <straight_table_ff+0x12c>
 8004130:	4b4f      	ldr	r3, [pc, #316]	; (8004270 <straight_table_ff+0x260>)
 8004132:	2205      	movs	r2, #5
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	4a4b      	ldr	r2, [pc, #300]	; (8004264 <straight_table_ff+0x254>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800413c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004148:	dd14      	ble.n	8004174 <straight_table_ff+0x164>
 800414a:	edd7 7a05 	vldr	s15, [r7, #20]
 800414e:	eef1 7a67 	vneg.f32	s15, s15
 8004152:	ed97 7a07 	vldr	s14, [r7, #28]
 8004156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	d509      	bpl.n	8004174 <straight_table_ff+0x164>
 8004160:	4b43      	ldr	r3, [pc, #268]	; (8004270 <straight_table_ff+0x260>)
 8004162:	2206      	movs	r2, #6
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	edd7 7a01 	vldr	s15, [r7, #4]
 800416a:	eef1 7a67 	vneg.f32	s15, s15
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <straight_table_ff+0x254>)
 8004170:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004174:	edd7 7a05 	vldr	s15, [r7, #20]
 8004178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004180:	d514      	bpl.n	80041ac <straight_table_ff+0x19c>
 8004182:	edd7 7a05 	vldr	s15, [r7, #20]
 8004186:	eef1 7a67 	vneg.f32	s15, s15
 800418a:	ed97 7a07 	vldr	s14, [r7, #28]
 800418e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004196:	dd09      	ble.n	80041ac <straight_table_ff+0x19c>
 8004198:	4b35      	ldr	r3, [pc, #212]	; (8004270 <straight_table_ff+0x260>)
 800419a:	2205      	movs	r2, #5
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	edd7 7a01 	vldr	s15, [r7, #4]
 80041a2:	eef1 7a67 	vneg.f32	s15, s15
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <straight_table_ff+0x254>)
 80041a8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80041ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80041b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b8:	d50e      	bpl.n	80041d8 <straight_table_ff+0x1c8>
 80041ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80041be:	edd7 7a05 	vldr	s15, [r7, #20]
 80041c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ca:	d505      	bpl.n	80041d8 <straight_table_ff+0x1c8>
 80041cc:	4b28      	ldr	r3, [pc, #160]	; (8004270 <straight_table_ff+0x260>)
 80041ce:	2206      	movs	r2, #6
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	4a24      	ldr	r2, [pc, #144]	; (8004264 <straight_table_ff+0x254>)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80041d8:	4b26      	ldr	r3, [pc, #152]	; (8004274 <straight_table_ff+0x264>)
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80041de:	f003 fc35 	bl	8007a4c <pl_DriveMotor_start>


	while (g_acc_flag!=4){
 80041e2:	bf00      	nop
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <straight_table_ff+0x260>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d1fa      	bne.n	80041e4 <straight_table_ff+0x1d4>


	}
	if(input_end_velocity==0){//BREAK
 80041ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80041f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fa:	d105      	bne.n	8004208 <straight_table_ff+0x1f8>
		wait_ms_NoReset(100);
 80041fc:	2064      	movs	r0, #100	; 0x64
 80041fe:	f003 feff 	bl	8008000 <wait_ms_NoReset>
		modeacc = 0;
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <straight_table_ff+0x264>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <straight_table_ff+0x268>)
 800420a:	ed93 7a00 	vldr	s14, [r3]
 800420e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <straight_table_ff+0x268>)
 8004218:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <straight_table_ff+0x26c>)
 800421e:	ed93 7a00 	vldr	s14, [r3]
 8004222:	edd7 7a05 	vldr	s15, [r7, #20]
 8004226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800422a:	4b14      	ldr	r3, [pc, #80]	; (800427c <straight_table_ff+0x26c>)
 800422c:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004230:	f003 fc1a 	bl	8007a68 <pl_DriveMotor_stop>



	return straight.velocity;
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <straight_table_ff+0x254>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	ee07 3a90 	vmov	s15, r3



}
 800423c:	eeb0 0a67 	vmov.f32	s0, s15
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000554 	.word	0x20000554
 800424c:	20000558 	.word	0x20000558
 8004250:	2000055c 	.word	0x2000055c
 8004254:	20000560 	.word	0x20000560
 8004258:	20000564 	.word	0x20000564
 800425c:	20000568 	.word	0x20000568
 8004260:	200004f0 	.word	0x200004f0
 8004264:	200004d8 	.word	0x200004d8
 8004268:	200004e4 	.word	0x200004e4
 800426c:	20000805 	.word	0x20000805
 8004270:	20000804 	.word	0x20000804
 8004274:	20000528 	.word	0x20000528
 8004278:	20000220 	.word	0x20000220
 800427c:	20000224 	.word	0x20000224

08004280 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004280:	b5b0      	push	{r4, r5, r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6178      	str	r0, [r7, #20]
 8004288:	ed87 0a04 	vstr	s0, [r7, #16]
 800428c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	ed87 1a01 	vstr	s2, [r7, #4]
 8004296:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 800429a:	edd7 7a04 	vldr	s15, [r7, #16]
 800429e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	db7c      	blt.n	80043a2 <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7fc f975 	bl	8000598 <__aeabi_f2d>
 80042ae:	a3c8      	add	r3, pc, #800	; (adr r3, 80045d0 <feedforward_const_accel+0x350>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fc f9c8 	bl	8000648 <__aeabi_dmul>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	4bc6      	ldr	r3, [pc, #792]	; (80045e0 <feedforward_const_accel+0x360>)
 80042c6:	f7fc fae9 	bl	800089c <__aeabi_ddiv>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80042d2:	a3b5      	add	r3, pc, #724	; (adr r3, 80045a8 <feedforward_const_accel+0x328>)
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f7fc fae0 	bl	800089c <__aeabi_ddiv>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4610      	mov	r0, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042ec:	f7fc fad6 	bl	800089c <__aeabi_ddiv>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	a3ad      	add	r3, pc, #692	; (adr r3, 80045b0 <feedforward_const_accel+0x330>)
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f7fb ffed 	bl	80002dc <__adddf3>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	a3ab      	add	r3, pc, #684	; (adr r3, 80045b8 <feedforward_const_accel+0x338>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f7fc f99a 	bl	8000648 <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	a3a8      	add	r3, pc, #672	; (adr r3, 80045c0 <feedforward_const_accel+0x340>)
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	f7fc fabb 	bl	800089c <__aeabi_ddiv>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4614      	mov	r4, r2
 800432c:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800432e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004332:	eddf 6aac 	vldr	s13, [pc, #688]	; 80045e4 <feedforward_const_accel+0x364>
 8004336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800433a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80045e8 <feedforward_const_accel+0x368>
 800433e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004342:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004346:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800434a:	ee16 0a90 	vmov	r0, s13
 800434e:	f7fc f923 	bl	8000598 <__aeabi_f2d>
 8004352:	a39d      	add	r3, pc, #628	; (adr r3, 80045c8 <feedforward_const_accel+0x348>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f7fc f976 	bl	8000648 <__aeabi_dmul>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	a390      	add	r3, pc, #576	; (adr r3, 80045a8 <feedforward_const_accel+0x328>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fc fa97 	bl	800089c <__aeabi_ddiv>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800437e:	f7fc fa8d 	bl	800089c <__aeabi_ddiv>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4620      	mov	r0, r4
 8004388:	4629      	mov	r1, r5
 800438a:	f7fb ffa7 	bl	80002dc <__adddf3>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	f7fc fc2f 	bl	8000bf8 <__aeabi_d2f>
 800439a:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e07b      	b.n	800449a <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7fc f8f8 	bl	8000598 <__aeabi_f2d>
 80043a8:	a389      	add	r3, pc, #548	; (adr r3, 80045d0 <feedforward_const_accel+0x350>)
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f7fc f94b 	bl	8000648 <__aeabi_dmul>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	4b88      	ldr	r3, [pc, #544]	; (80045e0 <feedforward_const_accel+0x360>)
 80043c0:	f7fc fa6c 	bl	800089c <__aeabi_ddiv>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80043cc:	a376      	add	r3, pc, #472	; (adr r3, 80045a8 <feedforward_const_accel+0x328>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fc fa63 	bl	800089c <__aeabi_ddiv>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043e6:	f7fc fa59 	bl	800089c <__aeabi_ddiv>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	a36f      	add	r3, pc, #444	; (adr r3, 80045b0 <feedforward_const_accel+0x330>)
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f7fb ff6e 	bl	80002d8 <__aeabi_dsub>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	a36c      	add	r3, pc, #432	; (adr r3, 80045b8 <feedforward_const_accel+0x338>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f7fc f91d 	bl	8000648 <__aeabi_dmul>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	a36a      	add	r3, pc, #424	; (adr r3, 80045c0 <feedforward_const_accel+0x340>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc fa3e 	bl	800089c <__aeabi_ddiv>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4614      	mov	r4, r2
 8004426:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004428:	ed97 7a04 	vldr	s14, [r7, #16]
 800442c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80045e4 <feedforward_const_accel+0x364>
 8004430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004434:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80045e8 <feedforward_const_accel+0x368>
 8004438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800443c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004440:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004444:	ee16 0a90 	vmov	r0, s13
 8004448:	f7fc f8a6 	bl	8000598 <__aeabi_f2d>
 800444c:	a35e      	add	r3, pc, #376	; (adr r3, 80045c8 <feedforward_const_accel+0x348>)
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f7fc f8f9 	bl	8000648 <__aeabi_dmul>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	a352      	add	r3, pc, #328	; (adr r3, 80045a8 <feedforward_const_accel+0x328>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f7fc fa1a 	bl	800089c <__aeabi_ddiv>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004478:	f7fc fa10 	bl	800089c <__aeabi_ddiv>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4620      	mov	r0, r4
 8004482:	4629      	mov	r1, r5
 8004484:	f7fb ff2a 	bl	80002dc <__adddf3>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	f7fc fbb2 	bl	8000bf8 <__aeabi_d2f>
 8004494:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 800449a:	edd7 7a01 	vldr	s15, [r7, #4]
 800449e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a6:	f2c0 80a1 	blt.w	80045ec <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80044aa:	6838      	ldr	r0, [r7, #0]
 80044ac:	f7fc f874 	bl	8000598 <__aeabi_f2d>
 80044b0:	a349      	add	r3, pc, #292	; (adr r3, 80045d8 <feedforward_const_accel+0x358>)
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f7fc f8c7 	bl	8000648 <__aeabi_dmul>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	4b46      	ldr	r3, [pc, #280]	; (80045e0 <feedforward_const_accel+0x360>)
 80044c8:	f7fc f9e8 	bl	800089c <__aeabi_ddiv>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80044d4:	a334      	add	r3, pc, #208	; (adr r3, 80045a8 <feedforward_const_accel+0x328>)
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f7fc f9df 	bl	800089c <__aeabi_ddiv>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044ee:	f7fc f9d5 	bl	800089c <__aeabi_ddiv>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	a32d      	add	r3, pc, #180	; (adr r3, 80045b0 <feedforward_const_accel+0x330>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fb feec 	bl	80002dc <__adddf3>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	a32a      	add	r3, pc, #168	; (adr r3, 80045b8 <feedforward_const_accel+0x338>)
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	f7fc f899 	bl	8000648 <__aeabi_dmul>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	a328      	add	r3, pc, #160	; (adr r3, 80045c0 <feedforward_const_accel+0x340>)
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f7fc f9ba 	bl	800089c <__aeabi_ddiv>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4614      	mov	r4, r2
 800452e:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004530:	ed97 7a01 	vldr	s14, [r7, #4]
 8004534:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80045e4 <feedforward_const_accel+0x364>
 8004538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800453c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80045e8 <feedforward_const_accel+0x368>
 8004540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004544:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004548:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800454c:	ee16 0a90 	vmov	r0, s13
 8004550:	f7fc f822 	bl	8000598 <__aeabi_f2d>
 8004554:	a31c      	add	r3, pc, #112	; (adr r3, 80045c8 <feedforward_const_accel+0x348>)
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f7fc f875 	bl	8000648 <__aeabi_dmul>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	a310      	add	r3, pc, #64	; (adr r3, 80045a8 <feedforward_const_accel+0x328>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f7fc f996 	bl	800089c <__aeabi_ddiv>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004580:	f7fc f98c 	bl	800089c <__aeabi_ddiv>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4620      	mov	r0, r4
 800458a:	4629      	mov	r1, r5
 800458c:	f7fb fea6 	bl	80002dc <__adddf3>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4610      	mov	r0, r2
 8004596:	4619      	mov	r1, r3
 8004598:	f7fc fb2e 	bl	8000bf8 <__aeabi_d2f>
 800459c:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 80045a2:	e09f      	b.n	80046e4 <feedforward_const_accel+0x464>
 80045a4:	f3af 8000 	nop.w
 80045a8:	99e4ac6e 	.word	0x99e4ac6e
 80045ac:	3f9a9a29 	.word	0x3f9a9a29
 80045b0:	eb1c432d 	.word	0xeb1c432d
 80045b4:	3f1a36e2 	.word	0x3f1a36e2
 80045b8:	51eb851f 	.word	0x51eb851f
 80045bc:	3ff11eb8 	.word	0x3ff11eb8
 80045c0:	b7952d23 	.word	0xb7952d23
 80045c4:	3f569c23 	.word	0x3f569c23
 80045c8:	761b0f50 	.word	0x761b0f50
 80045cc:	3f66bf29 	.word	0x3f66bf29
 80045d0:	7df8b79b 	.word	0x7df8b79b
 80045d4:	3ed5fdfc 	.word	0x3ed5fdfc
 80045d8:	1db94e6b 	.word	0x1db94e6b
 80045dc:	3eb5cf75 	.word	0x3eb5cf75
 80045e0:	408f4000 	.word	0x408f4000
 80045e4:	447a0000 	.word	0x447a0000
 80045e8:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80045ec:	6838      	ldr	r0, [r7, #0]
 80045ee:	f7fb ffd3 	bl	8000598 <__aeabi_f2d>
 80045f2:	a34c      	add	r3, pc, #304	; (adr r3, 8004724 <feedforward_const_accel+0x4a4>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fc f826 	bl	8000648 <__aeabi_dmul>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	4b43      	ldr	r3, [pc, #268]	; (8004718 <feedforward_const_accel+0x498>)
 800460a:	f7fc f947 	bl	800089c <__aeabi_ddiv>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004616:	a336      	add	r3, pc, #216	; (adr r3, 80046f0 <feedforward_const_accel+0x470>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f7fc f93e 	bl	800089c <__aeabi_ddiv>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4610      	mov	r0, r2
 8004626:	4619      	mov	r1, r3
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004630:	f7fc f934 	bl	800089c <__aeabi_ddiv>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	a32e      	add	r3, pc, #184	; (adr r3, 80046f8 <feedforward_const_accel+0x478>)
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f7fb fe49 	bl	80002d8 <__aeabi_dsub>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	a32c      	add	r3, pc, #176	; (adr r3, 8004700 <feedforward_const_accel+0x480>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb fff8 	bl	8000648 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	a329      	add	r3, pc, #164	; (adr r3, 8004708 <feedforward_const_accel+0x488>)
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fc f919 	bl	800089c <__aeabi_ddiv>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4614      	mov	r4, r2
 8004670:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004672:	ed97 7a01 	vldr	s14, [r7, #4]
 8004676:	eddf 6a29 	vldr	s13, [pc, #164]	; 800471c <feedforward_const_accel+0x49c>
 800467a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800467e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004720 <feedforward_const_accel+0x4a0>
 8004682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004686:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800468a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800468e:	ee16 0a90 	vmov	r0, s13
 8004692:	f7fb ff81 	bl	8000598 <__aeabi_f2d>
 8004696:	a31e      	add	r3, pc, #120	; (adr r3, 8004710 <feedforward_const_accel+0x490>)
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f7fb ffd4 	bl	8000648 <__aeabi_dmul>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	a311      	add	r3, pc, #68	; (adr r3, 80046f0 <feedforward_const_accel+0x470>)
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f7fc f8f5 	bl	800089c <__aeabi_ddiv>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046c2:	f7fc f8eb 	bl	800089c <__aeabi_ddiv>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f7fb fe05 	bl	80002dc <__adddf3>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	f7fc fa8d 	bl	8000bf8 <__aeabi_d2f>
 80046de:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bdb0      	pop	{r4, r5, r7, pc}
 80046ec:	f3af 8000 	nop.w
 80046f0:	99e4ac6e 	.word	0x99e4ac6e
 80046f4:	3f9a9a29 	.word	0x3f9a9a29
 80046f8:	eb1c432d 	.word	0xeb1c432d
 80046fc:	3f1a36e2 	.word	0x3f1a36e2
 8004700:	51eb851f 	.word	0x51eb851f
 8004704:	3ff11eb8 	.word	0x3ff11eb8
 8004708:	b7952d23 	.word	0xb7952d23
 800470c:	3f569c23 	.word	0x3f569c23
 8004710:	761b0f50 	.word	0x761b0f50
 8004714:	3f66bf29 	.word	0x3f66bf29
 8004718:	408f4000 	.word	0x408f4000
 800471c:	447a0000 	.word	0x447a0000
 8004720:	421c0000 	.word	0x421c0000
 8004724:	1db94e6b 	.word	0x1db94e6b
 8004728:	3eb5cf75 	.word	0x3eb5cf75

0800472c <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <PID_Init+0x44>)
 8004732:	4a10      	ldr	r2, [pc, #64]	; (8004774 <PID_Init+0x48>)
 8004734:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <PID_Init+0x4c>)
 8004738:	4a10      	ldr	r2, [pc, #64]	; (800477c <PID_Init+0x50>)
 800473a:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <PID_Init+0x54>)
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <PID_Init+0x58>)
 8004746:	4a10      	ldr	r2, [pc, #64]	; (8004788 <PID_Init+0x5c>)
 8004748:	601a      	str	r2, [r3, #0]
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <PID_Init+0x60>)
 800474c:	4a10      	ldr	r2, [pc, #64]	; (8004790 <PID_Init+0x64>)
 800474e:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004750:	4b10      	ldr	r3, [pc, #64]	; (8004794 <PID_Init+0x68>)
 8004752:	4a11      	ldr	r2, [pc, #68]	; (8004798 <PID_Init+0x6c>)
 8004754:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004756:	4b11      	ldr	r3, [pc, #68]	; (800479c <PID_Init+0x70>)
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <PID_Init+0x74>)
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	609a      	str	r2, [r3, #8]

}
 8004766:	bf00      	nop
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	20000554 	.word	0x20000554
 8004774:	40466666 	.word	0x40466666
 8004778:	20000558 	.word	0x20000558
 800477c:	3da3d70a 	.word	0x3da3d70a
 8004780:	2000055c 	.word	0x2000055c
 8004784:	20000560 	.word	0x20000560
 8004788:	3fcccccd 	.word	0x3fcccccd
 800478c:	20000564 	.word	0x20000564
 8004790:	3d4ccccd 	.word	0x3d4ccccd
 8004794:	20000568 	.word	0x20000568
 8004798:	3b03126f 	.word	0x3b03126f
 800479c:	20000534 	.word	0x20000534
 80047a0:	20000544 	.word	0x20000544

080047a4 <clear_Ierror>:

void clear_Ierror(void) {
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <clear_Ierror+0x20>)
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <clear_Ierror+0x24>)
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	609a      	str	r2, [r3, #8]
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000534 	.word	0x20000534
 80047c8:	20000544 	.word	0x20000544

080047cc <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80047da:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 80047ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80047ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f6:	d101      	bne.n	80047fc <EncoderGyro_PID+0x30>
		reset_speed();
 80047f8:	f7fc fc0e 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 80047fc:	4b70      	ldr	r3, [pc, #448]	; (80049c0 <EncoderGyro_PID+0x1f4>)
 80047fe:	edd3 7a00 	vldr	s15, [r3]
 8004802:	eef0 7ae7 	vabs.f32	s15, s15
 8004806:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80049c4 <EncoderGyro_PID+0x1f8>
 800480a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	d520      	bpl.n	8004856 <EncoderGyro_PID+0x8a>
 8004814:	edd7 7a01 	vldr	s15, [r7, #4]
 8004818:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80049c8 <EncoderGyro_PID+0x1fc>
 800481c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	db17      	blt.n	8004856 <EncoderGyro_PID+0x8a>
 8004826:	4b69      	ldr	r3, [pc, #420]	; (80049cc <EncoderGyro_PID+0x200>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d013      	beq.n	8004856 <EncoderGyro_PID+0x8a>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 800482e:	4b68      	ldr	r3, [pc, #416]	; (80049d0 <EncoderGyro_PID+0x204>)
 8004830:	ed93 7a00 	vldr	s14, [r3]
 8004834:	4b67      	ldr	r3, [pc, #412]	; (80049d4 <EncoderGyro_PID+0x208>)
 8004836:	edd3 7a00 	vldr	s15, [r3]
 800483a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800483e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004846:	ed97 7a01 	vldr	s14, [r7, #4]
 800484a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800484e:	4b62      	ldr	r3, [pc, #392]	; (80049d8 <EncoderGyro_PID+0x20c>)
 8004850:	edc3 7a00 	vstr	s15, [r3]
 8004854:	e01a      	b.n	800488c <EncoderGyro_PID+0xc0>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004856:	4b61      	ldr	r3, [pc, #388]	; (80049dc <EncoderGyro_PID+0x210>)
 8004858:	ed93 7a00 	vldr	s14, [r3]
 800485c:	4b60      	ldr	r3, [pc, #384]	; (80049e0 <EncoderGyro_PID+0x214>)
 800485e:	edd3 7a00 	vldr	s15, [r3]
 8004862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004866:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800486a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800486e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004876:	4b58      	ldr	r3, [pc, #352]	; (80049d8 <EncoderGyro_PID+0x20c>)
 8004878:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 800487c:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <EncoderGyro_PID+0x218>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a54      	ldr	r2, [pc, #336]	; (80049d4 <EncoderGyro_PID+0x208>)
 8004882:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 8004884:	4b58      	ldr	r3, [pc, #352]	; (80049e8 <EncoderGyro_PID+0x21c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a51      	ldr	r2, [pc, #324]	; (80049d0 <EncoderGyro_PID+0x204>)
 800488a:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 800488c:	4b52      	ldr	r3, [pc, #328]	; (80049d8 <EncoderGyro_PID+0x20c>)
 800488e:	ed93 7a00 	vldr	s14, [r3]
 8004892:	4b51      	ldr	r3, [pc, #324]	; (80049d8 <EncoderGyro_PID+0x20c>)
 8004894:	edd3 7a01 	vldr	s15, [r3, #4]
 8004898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800489c:	4b4e      	ldr	r3, [pc, #312]	; (80049d8 <EncoderGyro_PID+0x20c>)
 800489e:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80048a2:	4b4d      	ldr	r3, [pc, #308]	; (80049d8 <EncoderGyro_PID+0x20c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a4c      	ldr	r2, [pc, #304]	; (80049d8 <EncoderGyro_PID+0x20c>)
 80048a8:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80048aa:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <EncoderGyro_PID+0x20c>)
 80048ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80048b0:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <EncoderGyro_PID+0x20c>)
 80048b2:	edd3 7a00 	vldr	s15, [r3]
 80048b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ba:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <EncoderGyro_PID+0x20c>)
 80048bc:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80048c0:	4b45      	ldr	r3, [pc, #276]	; (80049d8 <EncoderGyro_PID+0x20c>)
 80048c2:	ed93 7a00 	vldr	s14, [r3]
 80048c6:	4b49      	ldr	r3, [pc, #292]	; (80049ec <EncoderGyro_PID+0x220>)
 80048c8:	edd3 7a00 	vldr	s15, [r3]
 80048cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048d0:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <EncoderGyro_PID+0x20c>)
 80048d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80048d6:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <EncoderGyro_PID+0x224>)
 80048d8:	edd3 7a00 	vldr	s15, [r3]
 80048dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048e4:	4b3c      	ldr	r3, [pc, #240]	; (80049d8 <EncoderGyro_PID+0x20c>)
 80048e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80048ea:	4b42      	ldr	r3, [pc, #264]	; (80049f4 <EncoderGyro_PID+0x228>)
 80048ec:	edd3 7a00 	vldr	s15, [r3]
 80048f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f8:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 80048fc:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <EncoderGyro_PID+0x1f4>)
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	ed97 7a00 	vldr	s14, [r7]
 8004906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <EncoderGyro_PID+0x22c>)
 800490c:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004910:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004912:	ed93 7a00 	vldr	s14, [r3]
 8004916:	4b38      	ldr	r3, [pc, #224]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004918:	edd3 7a01 	vldr	s15, [r3, #4]
 800491c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004920:	4b35      	ldr	r3, [pc, #212]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004922:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a33      	ldr	r2, [pc, #204]	; (80049f8 <EncoderGyro_PID+0x22c>)
 800492c:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004930:	ed93 7a02 	vldr	s14, [r3, #8]
 8004934:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004936:	edd3 7a00 	vldr	s15, [r3]
 800493a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493e:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004940:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004944:	4b2c      	ldr	r3, [pc, #176]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004946:	ed93 7a00 	vldr	s14, [r3]
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <EncoderGyro_PID+0x230>)
 800494c:	edd3 7a00 	vldr	s15, [r3]
 8004950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <EncoderGyro_PID+0x22c>)
 8004956:	edd3 6a02 	vldr	s13, [r3, #8]
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <EncoderGyro_PID+0x234>)
 800495c:	edd3 7a00 	vldr	s15, [r3]
 8004960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004964:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004968:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <EncoderGyro_PID+0x22c>)
 800496a:	edd3 6a03 	vldr	s13, [r3, #12]
 800496e:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <EncoderGyro_PID+0x238>)
 8004970:	edd3 7a00 	vldr	s15, [r3]
 8004974:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497c:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004980:	edd7 7a05 	vldr	s15, [r7, #20]
 8004984:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004a08 <EncoderGyro_PID+0x23c>
 8004988:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800498c:	4b1f      	ldr	r3, [pc, #124]	; (8004a0c <EncoderGyro_PID+0x240>)
 800498e:	edd3 7a00 	vldr	s15, [r3]
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 800499c:	edd7 7a04 	vldr	s15, [r7, #16]
 80049a0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004a08 <EncoderGyro_PID+0x23c>
 80049a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049a8:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <EncoderGyro_PID+0x240>)
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	edc3 7a00 	vstr	s15, [r3]

}
 80049b8:	bf00      	nop
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000268 	.word	0x20000268
 80049c4:	42f00000 	.word	0x42f00000
 80049c8:	42c80000 	.word	0x42c80000
 80049cc:	20000528 	.word	0x20000528
 80049d0:	2000025c 	.word	0x2000025c
 80049d4:	20000258 	.word	0x20000258
 80049d8:	20000534 	.word	0x20000534
 80049dc:	2000022c 	.word	0x2000022c
 80049e0:	20000228 	.word	0x20000228
 80049e4:	20000238 	.word	0x20000238
 80049e8:	2000023c 	.word	0x2000023c
 80049ec:	20000554 	.word	0x20000554
 80049f0:	20000558 	.word	0x20000558
 80049f4:	2000055c 	.word	0x2000055c
 80049f8:	20000544 	.word	0x20000544
 80049fc:	20000560 	.word	0x20000560
 8004a00:	20000564 	.word	0x20000564
 8004a04:	20000568 	.word	0x20000568
 8004a08:	44d1e000 	.word	0x44d1e000
 8004a0c:	200004d4 	.word	0x200004d4

08004a10 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004a14:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <init_WallControl+0x104>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <init_WallControl+0x108>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004a20:	4b3e      	ldr	r3, [pc, #248]	; (8004b1c <init_WallControl+0x10c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004a26:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <init_WallControl+0x110>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004a2c:	4b3d      	ldr	r3, [pc, #244]	; (8004b24 <init_WallControl+0x114>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <init_WallControl+0x118>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004a38:	4b3c      	ldr	r3, [pc, #240]	; (8004b2c <init_WallControl+0x11c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004a3e:	4b3c      	ldr	r3, [pc, #240]	; (8004b30 <init_WallControl+0x120>)
 8004a40:	4a3c      	ldr	r2, [pc, #240]	; (8004b34 <init_WallControl+0x124>)
 8004a42:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004a44:	4b3c      	ldr	r3, [pc, #240]	; (8004b38 <init_WallControl+0x128>)
 8004a46:	4a3d      	ldr	r2, [pc, #244]	; (8004b3c <init_WallControl+0x12c>)
 8004a48:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004a4a:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <init_WallControl+0x130>)
 8004a4c:	4a3d      	ldr	r2, [pc, #244]	; (8004b44 <init_WallControl+0x134>)
 8004a4e:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004a50:	4b3d      	ldr	r3, [pc, #244]	; (8004b48 <init_WallControl+0x138>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004a56:	4b3d      	ldr	r3, [pc, #244]	; (8004b4c <init_WallControl+0x13c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004a5c:	4b3c      	ldr	r3, [pc, #240]	; (8004b50 <init_WallControl+0x140>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004a62:	4b3c      	ldr	r3, [pc, #240]	; (8004b54 <init_WallControl+0x144>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004a68:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <init_WallControl+0x148>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <init_WallControl+0x14c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004a74:	4b3a      	ldr	r3, [pc, #232]	; (8004b60 <init_WallControl+0x150>)
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004a7c:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <init_WallControl+0x154>)
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004a84:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <init_WallControl+0x158>)
 8004a86:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004a8a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004a8c:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <init_WallControl+0x15c>)
 8004a8e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004a92:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004a94:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <init_WallControl+0x160>)
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <init_WallControl+0x164>)
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004aa4:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <init_WallControl+0x168>)
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004aac:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <init_WallControl+0x16c>)
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004ab4:	4b32      	ldr	r3, [pc, #200]	; (8004b80 <init_WallControl+0x170>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004aba:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <init_WallControl+0x174>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004ac0:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <init_WallControl+0x178>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004ac6:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <init_WallControl+0x17c>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004acc:	4b30      	ldr	r3, [pc, #192]	; (8004b90 <init_WallControl+0x180>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <init_WallControl+0x184>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004ad8:	4b2f      	ldr	r3, [pc, #188]	; (8004b98 <init_WallControl+0x188>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <init_WallControl+0x18c>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004ae4:	4b2e      	ldr	r3, [pc, #184]	; (8004ba0 <init_WallControl+0x190>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004aea:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <init_WallControl+0x194>)
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <init_WallControl+0x198>)
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004afa:	4b2c      	ldr	r3, [pc, #176]	; (8004bac <init_WallControl+0x19c>)
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004b02:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <init_WallControl+0x1a0>)
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	20000590 	.word	0x20000590
 8004b18:	20000591 	.word	0x20000591
 8004b1c:	20000593 	.word	0x20000593
 8004b20:	20000592 	.word	0x20000592
 8004b24:	20000595 	.word	0x20000595
 8004b28:	20000596 	.word	0x20000596
 8004b2c:	20000597 	.word	0x20000597
 8004b30:	20000598 	.word	0x20000598
 8004b34:	44d2a000 	.word	0x44d2a000
 8004b38:	2000059c 	.word	0x2000059c
 8004b3c:	44b56000 	.word	0x44b56000
 8004b40:	200005a0 	.word	0x200005a0
 8004b44:	420c0000 	.word	0x420c0000
 8004b48:	200005b8 	.word	0x200005b8
 8004b4c:	200005b4 	.word	0x200005b4
 8004b50:	200005c0 	.word	0x200005c0
 8004b54:	200005bc 	.word	0x200005bc
 8004b58:	200005c8 	.word	0x200005c8
 8004b5c:	200005c4 	.word	0x200005c4
 8004b60:	200005d0 	.word	0x200005d0
 8004b64:	200005cc 	.word	0x200005cc
 8004b68:	200005d8 	.word	0x200005d8
 8004b6c:	200005d4 	.word	0x200005d4
 8004b70:	200005e0 	.word	0x200005e0
 8004b74:	200005dc 	.word	0x200005dc
 8004b78:	200005e8 	.word	0x200005e8
 8004b7c:	200005e4 	.word	0x200005e4
 8004b80:	200005ec 	.word	0x200005ec
 8004b84:	200005ed 	.word	0x200005ed
 8004b88:	200005ee 	.word	0x200005ee
 8004b8c:	200005ef 	.word	0x200005ef
 8004b90:	200005f0 	.word	0x200005f0
 8004b94:	200005f1 	.word	0x200005f1
 8004b98:	200005f2 	.word	0x200005f2
 8004b9c:	200005f3 	.word	0x200005f3
 8004ba0:	200005f4 	.word	0x200005f4
 8004ba4:	200005f8 	.word	0x200005f8
 8004ba8:	200005fc 	.word	0x200005fc
 8004bac:	20000600 	.word	0x20000600
 8004bb0:	20000604 	.word	0x20000604
 8004bb4:	00000000 	.word	0x00000000

08004bb8 <calWallConrol>:


float calWallConrol(void) {
 8004bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bbc:	b0aa      	sub	sp, #168	; 0xa8
 8004bbe:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004bc0:	4b9b      	ldr	r3, [pc, #620]	; (8004e30 <calWallConrol+0x278>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d13d      	bne.n	8004c44 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004bc8:	4b9a      	ldr	r3, [pc, #616]	; (8004e34 <calWallConrol+0x27c>)
 8004bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004bce:	4b9a      	ldr	r3, [pc, #616]	; (8004e38 <calWallConrol+0x280>)
 8004bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 2000) {
 8004bd4:	4b99      	ldr	r3, [pc, #612]	; (8004e3c <calWallConrol+0x284>)
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004e40 <calWallConrol+0x288>
 8004bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	dd06      	ble.n	8004bf6 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 2000;
 8004be8:	4b96      	ldr	r3, [pc, #600]	; (8004e44 <calWallConrol+0x28c>)
 8004bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 2000;
 8004bee:	4b96      	ldr	r3, [pc, #600]	; (8004e48 <calWallConrol+0x290>)
 8004bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bf4:	e048      	b.n	8004c88 <calWallConrol+0xd0>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004bf6:	4b91      	ldr	r3, [pc, #580]	; (8004e3c <calWallConrol+0x284>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fb fccc 	bl	8000598 <__aeabi_f2d>
 8004c00:	a385      	add	r3, pc, #532	; (adr r3, 8004e18 <calWallConrol+0x260>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	f7fb fd1f 	bl	8000648 <__aeabi_dmul>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	f7fb fff1 	bl	8000bf8 <__aeabi_d2f>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004c1c:	4b87      	ldr	r3, [pc, #540]	; (8004e3c <calWallConrol+0x284>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fb fcb9 	bl	8000598 <__aeabi_f2d>
 8004c26:	a37e      	add	r3, pc, #504	; (adr r3, 8004e20 <calWallConrol+0x268>)
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f7fb fd0c 	bl	8000648 <__aeabi_dmul>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	f7fb ffde 	bl	8000bf8 <__aeabi_d2f>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c42:	e021      	b.n	8004c88 <calWallConrol+0xd0>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004c44:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <calWallConrol+0x294>)
 8004c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004c4a:	4b81      	ldr	r3, [pc, #516]	; (8004e50 <calWallConrol+0x298>)
 8004c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004c50:	4b7a      	ldr	r3, [pc, #488]	; (8004e3c <calWallConrol+0x284>)
 8004c52:	edd3 7a00 	vldr	s15, [r3]
 8004c56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c5e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004c62:	4b76      	ldr	r3, [pc, #472]	; (8004e3c <calWallConrol+0x284>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fb fc96 	bl	8000598 <__aeabi_f2d>
 8004c6c:	a36e      	add	r3, pc, #440	; (adr r3, 8004e28 <calWallConrol+0x270>)
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f7fb fce9 	bl	8000648 <__aeabi_dmul>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f7fb ffbb 	bl	8000bf8 <__aeabi_d2f>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004c88:	4b72      	ldr	r3, [pc, #456]	; (8004e54 <calWallConrol+0x29c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8004c90:	da03      	bge.n	8004c9a <calWallConrol+0xe2>
		sensorWall_L = SENSOR_L_MIN;
 8004c92:	4b71      	ldr	r3, [pc, #452]	; (8004e58 <calWallConrol+0x2a0>)
 8004c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c98:	e011      	b.n	8004cbe <calWallConrol+0x106>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004c9a:	4b6e      	ldr	r3, [pc, #440]	; (8004e54 <calWallConrol+0x29c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	dd03      	ble.n	8004cae <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MAX;
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	; (8004e5c <calWallConrol+0x2a4>)
 8004ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cac:	e007      	b.n	8004cbe <calWallConrol+0x106>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004cae:	4b69      	ldr	r3, [pc, #420]	; (8004e54 <calWallConrol+0x29c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cba:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004cbe:	4b65      	ldr	r3, [pc, #404]	; (8004e54 <calWallConrol+0x29c>)
 8004cc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004cc4:	f240 2289 	movw	r2, #649	; 0x289
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	dc03      	bgt.n	8004cd4 <calWallConrol+0x11c>
		sensorWall_R = SENSOR_R_MIN;
 8004ccc:	4b64      	ldr	r3, [pc, #400]	; (8004e60 <calWallConrol+0x2a8>)
 8004cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cd2:	e012      	b.n	8004cfa <calWallConrol+0x142>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004cd4:	4b5f      	ldr	r3, [pc, #380]	; (8004e54 <calWallConrol+0x29c>)
 8004cd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004cda:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004cde:	dd03      	ble.n	8004ce8 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MAX;
 8004ce0:	4b60      	ldr	r3, [pc, #384]	; (8004e64 <calWallConrol+0x2ac>)
 8004ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ce6:	e008      	b.n	8004cfa <calWallConrol+0x142>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004ce8:	4b5a      	ldr	r3, [pc, #360]	; (8004e54 <calWallConrol+0x29c>)
 8004cea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cf6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004d08:	4b57      	ldr	r3, [pc, #348]	; (8004e68 <calWallConrol+0x2b0>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d11c      	bne.n	8004d4a <calWallConrol+0x192>
		g_WallControlStatus = 0;
 8004d10:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <calWallConrol+0x2b4>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <calWallConrol+0x2b8>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004d1c:	4b55      	ldr	r3, [pc, #340]	; (8004e74 <calWallConrol+0x2bc>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004d22:	4b55      	ldr	r3, [pc, #340]	; (8004e78 <calWallConrol+0x2c0>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004d28:	4b54      	ldr	r3, [pc, #336]	; (8004e7c <calWallConrol+0x2c4>)
 8004d2a:	4a55      	ldr	r2, [pc, #340]	; (8004e80 <calWallConrol+0x2c8>)
 8004d2c:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004d2e:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <calWallConrol+0x2cc>)
 8004d30:	4a55      	ldr	r2, [pc, #340]	; (8004e88 <calWallConrol+0x2d0>)
 8004d32:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004d34:	4b55      	ldr	r3, [pc, #340]	; (8004e8c <calWallConrol+0x2d4>)
 8004d36:	4a56      	ldr	r2, [pc, #344]	; (8004e90 <calWallConrol+0x2d8>)
 8004d38:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004d42:	f002 f89d 	bl	8006e80 <pl_yellow_LED_off>
 8004d46:	f001 ba46 	b.w	80061d6 <calWallConrol+0x161e>

	} else if (g_WallControl_mode == 1) {
 8004d4a:	4b47      	ldr	r3, [pc, #284]	; (8004e68 <calWallConrol+0x2b0>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	f040 82eb 	bne.w	800532a <calWallConrol+0x772>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004d54:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <calWallConrol+0x2b4>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 809b 	beq.w	8004e98 <calWallConrol+0x2e0>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004d62:	4b3c      	ldr	r3, [pc, #240]	; (8004e54 <calWallConrol+0x29c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004d6a:	db16      	blt.n	8004d9a <calWallConrol+0x1e2>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004d6c:	4b49      	ldr	r3, [pc, #292]	; (8004e94 <calWallConrol+0x2dc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fbff 	bl	8000574 <__aeabi_i2d>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4690      	mov	r8, r2
 8004d7c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004d80:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004d84:	f7fb fc08 	bl	8000598 <__aeabi_f2d>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	4649      	mov	r1, r9
 8004d90:	f7fb feea 	bl	8000b68 <__aeabi_dcmpgt>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d037      	beq.n	8004e0a <calWallConrol+0x252>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004d9a:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <calWallConrol+0x2b4>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	4b32      	ldr	r3, [pc, #200]	; (8004e6c <calWallConrol+0x2b4>)
 8004da4:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004da6:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <calWallConrol+0x2c4>)
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004db4:	e021      	b.n	8004dfa <calWallConrol+0x242>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004db6:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <calWallConrol+0x29c>)
 8004db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc8:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <calWallConrol+0x2c4>)
 8004dca:	edd3 7a00 	vldr	s15, [r3]
 8004dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd6:	dd0b      	ble.n	8004df0 <calWallConrol+0x238>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <calWallConrol+0x29c>)
 8004dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <calWallConrol+0x2c4>)
 8004dec:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004df4:	3301      	adds	r3, #1
 8004df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dfe:	2b13      	cmp	r3, #19
 8004e00:	ddd9      	ble.n	8004db6 <calWallConrol+0x1fe>
					}
				}
				g_skewer_displacement = 0;
 8004e02:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <calWallConrol+0x2d4>)
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <calWallConrol+0x2bc>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e064      	b.n	8004edc <calWallConrol+0x324>
 8004e12:	bf00      	nop
 8004e14:	f3af 8000 	nop.w
 8004e18:	9999999a 	.word	0x9999999a
 8004e1c:	3fd99999 	.word	0x3fd99999
 8004e20:	47ae147b 	.word	0x47ae147b
 8004e24:	bf847ae1 	.word	0xbf847ae1
 8004e28:	bc6a7efa 	.word	0xbc6a7efa
 8004e2c:	3f789374 	.word	0x3f789374
 8004e30:	20000808 	.word	0x20000808
 8004e34:	43340000 	.word	0x43340000
 8004e38:	43020000 	.word	0x43020000
 8004e3c:	200004d8 	.word	0x200004d8
 8004e40:	44fa0000 	.word	0x44fa0000
 8004e44:	44480000 	.word	0x44480000
 8004e48:	c1a00000 	.word	0xc1a00000
 8004e4c:	431d0000 	.word	0x431d0000
 8004e50:	42dc0000 	.word	0x42dc0000
 8004e54:	200002b8 	.word	0x200002b8
 8004e58:	44390000 	.word	0x44390000
 8004e5c:	450fc000 	.word	0x450fc000
 8004e60:	44228000 	.word	0x44228000
 8004e64:	44e10000 	.word	0x44e10000
 8004e68:	20000590 	.word	0x20000590
 8004e6c:	20000593 	.word	0x20000593
 8004e70:	20000595 	.word	0x20000595
 8004e74:	20000596 	.word	0x20000596
 8004e78:	20000597 	.word	0x20000597
 8004e7c:	20000598 	.word	0x20000598
 8004e80:	44d2a000 	.word	0x44d2a000
 8004e84:	2000059c 	.word	0x2000059c
 8004e88:	44b56000 	.word	0x44b56000
 8004e8c:	200005a0 	.word	0x200005a0
 8004e90:	420c0000 	.word	0x420c0000
 8004e94:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004e98:	4bbd      	ldr	r3, [pc, #756]	; (8005190 <calWallConrol+0x5d8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004ea0:	dd1c      	ble.n	8004edc <calWallConrol+0x324>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004ea2:	4bbc      	ldr	r3, [pc, #752]	; (8005194 <calWallConrol+0x5dc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb fb64 	bl	8000574 <__aeabi_i2d>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004eb6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004eba:	f7fb fb6d 	bl	8000598 <__aeabi_f2d>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f7fb fe31 	bl	8000b2c <__aeabi_dcmplt>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <calWallConrol+0x324>
				g_WallControlStatus = g_WallControlStatus + 1;
 8004ed0:	4bb1      	ldr	r3, [pc, #708]	; (8005198 <calWallConrol+0x5e0>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	4baf      	ldr	r3, [pc, #700]	; (8005198 <calWallConrol+0x5e0>)
 8004eda:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8004edc:	4bae      	ldr	r3, [pc, #696]	; (8005198 <calWallConrol+0x5e0>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d05b      	beq.n	8004fa4 <calWallConrol+0x3ec>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8004eec:	4ba8      	ldr	r3, [pc, #672]	; (8005190 <calWallConrol+0x5d8>)
 8004eee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ef2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004ef6:	db17      	blt.n	8004f28 <calWallConrol+0x370>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004ef8:	4ba6      	ldr	r3, [pc, #664]	; (8005194 <calWallConrol+0x5dc>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fb fb39 	bl	8000574 <__aeabi_i2d>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	613a      	str	r2, [r7, #16]
 8004f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f0c:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8004f0e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004f12:	f7fb fb41 	bl	8000598 <__aeabi_f2d>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004f1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f1e:	f7fb fe23 	bl	8000b68 <__aeabi_dcmpgt>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d039      	beq.n	8004f9c <calWallConrol+0x3e4>
				g_WallControlStatus = g_WallControlStatus - 2;
 8004f28:	4b9b      	ldr	r3, [pc, #620]	; (8005198 <calWallConrol+0x5e0>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	3b02      	subs	r3, #2
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	4b99      	ldr	r3, [pc, #612]	; (8005198 <calWallConrol+0x5e0>)
 8004f32:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8004f34:	4b99      	ldr	r3, [pc, #612]	; (800519c <calWallConrol+0x5e4>)
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f42:	e023      	b.n	8004f8c <calWallConrol+0x3d4>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8004f44:	4a92      	ldr	r2, [pc, #584]	; (8005190 <calWallConrol+0x5d8>)
 8004f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4a:	3350      	adds	r3, #80	; 0x50
 8004f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f58:	4b90      	ldr	r3, [pc, #576]	; (800519c <calWallConrol+0x5e4>)
 8004f5a:	edd3 7a00 	vldr	s15, [r3]
 8004f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f66:	dd0c      	ble.n	8004f82 <calWallConrol+0x3ca>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8004f68:	4a89      	ldr	r2, [pc, #548]	; (8005190 <calWallConrol+0x5d8>)
 8004f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f6e:	3350      	adds	r3, #80	; 0x50
 8004f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f74:	ee07 3a90 	vmov	s15, r3
 8004f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7c:	4b87      	ldr	r3, [pc, #540]	; (800519c <calWallConrol+0x5e4>)
 8004f7e:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f86:	3301      	adds	r3, #1
 8004f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f90:	2b13      	cmp	r3, #19
 8004f92:	ddd7      	ble.n	8004f44 <calWallConrol+0x38c>
					}
				}
				g_skewer_displacement = 0;
 8004f94:	4b82      	ldr	r3, [pc, #520]	; (80051a0 <calWallConrol+0x5e8>)
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8004f9c:	4b81      	ldr	r3, [pc, #516]	; (80051a4 <calWallConrol+0x5ec>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e023      	b.n	8004fec <calWallConrol+0x434>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8004fa4:	4b7a      	ldr	r3, [pc, #488]	; (8005190 <calWallConrol+0x5d8>)
 8004fa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004faa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004fae:	dd1d      	ble.n	8004fec <calWallConrol+0x434>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004fb0:	4b78      	ldr	r3, [pc, #480]	; (8005194 <calWallConrol+0x5dc>)
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fb fadd 	bl	8000574 <__aeabi_i2d>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	60ba      	str	r2, [r7, #8]
 8004fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fc4:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8004fc6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004fca:	f7fb fae5 	bl	8000598 <__aeabi_f2d>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fd6:	f7fb fda9 	bl	8000b2c <__aeabi_dcmplt>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <calWallConrol+0x434>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8004fe0:	4b6d      	ldr	r3, [pc, #436]	; (8005198 <calWallConrol+0x5e0>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	4b6b      	ldr	r3, [pc, #428]	; (8005198 <calWallConrol+0x5e0>)
 8004fea:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8004fec:	4b6a      	ldr	r3, [pc, #424]	; (8005198 <calWallConrol+0x5e0>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	f201 80f0 	bhi.w	80061d6 <calWallConrol+0x161e>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <calWallConrol+0x444>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	0800500d 	.word	0x0800500d
 8005000:	08005113 	.word	0x08005113
 8005004:	080051c1 	.word	0x080051c1
 8005008:	0800522b 	.word	0x0800522b
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 800500c:	4b64      	ldr	r3, [pc, #400]	; (80051a0 <calWallConrol+0x5e8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb fac1 	bl	8000598 <__aeabi_f2d>
 8005016:	4604      	mov	r4, r0
 8005018:	460d      	mov	r5, r1
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <calWallConrol+0x5f0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb faba 	bl	8000598 <__aeabi_f2d>
 8005024:	a356      	add	r3, pc, #344	; (adr r3, 8005180 <calWallConrol+0x5c8>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f7fb fb0d 	bl	8000648 <__aeabi_dmul>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4620      	mov	r0, r4
 8005034:	4629      	mov	r1, r5
 8005036:	f7fb f951 	bl	80002dc <__adddf3>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	f7fb fdd9 	bl	8000bf8 <__aeabi_d2f>
 8005046:	4603      	mov	r3, r0
 8005048:	4a55      	ldr	r2, [pc, #340]	; (80051a0 <calWallConrol+0x5e8>)
 800504a:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 800504c:	4b54      	ldr	r3, [pc, #336]	; (80051a0 <calWallConrol+0x5e8>)
 800504e:	edd3 7a00 	vldr	s15, [r3]
 8005052:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80051ac <calWallConrol+0x5f4>
 8005056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505e:	d52e      	bpl.n	80050be <calWallConrol+0x506>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <calWallConrol+0x5f8>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80051b4 <calWallConrol+0x5fc>
 800506a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800506e:	eef1 6a67 	vneg.f32	s13, s15
 8005072:	4b4f      	ldr	r3, [pc, #316]	; (80051b0 <calWallConrol+0x5f8>)
 8005074:	edd3 7a00 	vldr	s15, [r3]
 8005078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 800507c:	4b47      	ldr	r3, [pc, #284]	; (800519c <calWallConrol+0x5e4>)
 800507e:	edd3 7a00 	vldr	s15, [r3]
 8005082:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80051bc <calWallConrol+0x604>
 8005086:	ee37 6ae6 	vsub.f32	s12, s15, s13
 800508a:	4b44      	ldr	r3, [pc, #272]	; (800519c <calWallConrol+0x5e4>)
 800508c:	edd3 6a00 	vldr	s13, [r3]
 8005090:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005098:	ee17 0a90 	vmov	r0, s15
 800509c:	f7fb fa7c 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 80050a0:	a339      	add	r3, pc, #228	; (adr r3, 8005188 <calWallConrol+0x5d0>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb facf 	bl	8000648 <__aeabi_dmul>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	f7fb fda1 	bl	8000bf8 <__aeabi_d2f>
 80050b6:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 80050b8:	4a3f      	ldr	r2, [pc, #252]	; (80051b8 <calWallConrol+0x600>)
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	e003      	b.n	80050c6 <calWallConrol+0x50e>
			} else {
				wall_normal.error = 0;
 80050be:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <calWallConrol+0x600>)
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80050c6:	4b3c      	ldr	r3, [pc, #240]	; (80051b8 <calWallConrol+0x600>)
 80050c8:	ed93 7a00 	vldr	s14, [r3]
 80050cc:	4b3a      	ldr	r3, [pc, #232]	; (80051b8 <calWallConrol+0x600>)
 80050ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80050d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d6:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <calWallConrol+0x600>)
 80050d8:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <calWallConrol+0x600>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a35      	ldr	r2, [pc, #212]	; (80051b8 <calWallConrol+0x600>)
 80050e2:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80050e4:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <calWallConrol+0x600>)
 80050e6:	ed93 7a00 	vldr	s14, [r3]
 80050ea:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80050ee:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80050f2:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <calWallConrol+0x600>)
 80050f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80050f8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80050fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005104:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8005108:	2000      	movs	r0, #0
 800510a:	f001 fef3 	bl	8006ef4 <pl_yellow_LED_count>
			break;
 800510e:	f001 b862 	b.w	80061d6 <calWallConrol+0x161e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005112:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005116:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80051b4 <calWallConrol+0x5fc>
 800511a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800511e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005122:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8005126:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800512a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 800512e:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <calWallConrol+0x600>)
 8005130:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005134:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <calWallConrol+0x600>)
 8005136:	ed93 7a00 	vldr	s14, [r3]
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <calWallConrol+0x600>)
 800513c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005144:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <calWallConrol+0x600>)
 8005146:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800514a:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <calWallConrol+0x600>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <calWallConrol+0x600>)
 8005150:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005152:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <calWallConrol+0x600>)
 8005154:	ed93 7a00 	vldr	s14, [r3]
 8005158:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800515c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <calWallConrol+0x600>)
 8005162:	edd3 6a02 	vldr	s13, [r3, #8]
 8005166:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800516a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800516e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005172:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8005176:	2080      	movs	r0, #128	; 0x80
 8005178:	f001 febc 	bl	8006ef4 <pl_yellow_LED_count>
			break;
 800517c:	f001 b82b 	b.w	80061d6 <calWallConrol+0x161e>
 8005180:	d2f1a9fc 	.word	0xd2f1a9fc
 8005184:	3f50624d 	.word	0x3f50624d
 8005188:	66666666 	.word	0x66666666
 800518c:	3fe66666 	.word	0x3fe66666
 8005190:	200002b8 	.word	0x200002b8
 8005194:	20000448 	.word	0x20000448
 8005198:	20000593 	.word	0x20000593
 800519c:	2000059c 	.word	0x2000059c
 80051a0:	200005a0 	.word	0x200005a0
 80051a4:	20000597 	.word	0x20000597
 80051a8:	200004d8 	.word	0x200004d8
 80051ac:	420c0000 	.word	0x420c0000
 80051b0:	20000598 	.word	0x20000598
 80051b4:	44d2a000 	.word	0x44d2a000
 80051b8:	2000056c 	.word	0x2000056c
 80051bc:	44b56000 	.word	0x44b56000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80051c0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80051c4:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80051bc <calWallConrol+0x604>
 80051c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 80051d0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80051d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80051d8:	4ba9      	ldr	r3, [pc, #676]	; (8005480 <calWallConrol+0x8c8>)
 80051da:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80051de:	4ba8      	ldr	r3, [pc, #672]	; (8005480 <calWallConrol+0x8c8>)
 80051e0:	ed93 7a00 	vldr	s14, [r3]
 80051e4:	4ba6      	ldr	r3, [pc, #664]	; (8005480 <calWallConrol+0x8c8>)
 80051e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80051ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ee:	4ba4      	ldr	r3, [pc, #656]	; (8005480 <calWallConrol+0x8c8>)
 80051f0:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80051f4:	4ba2      	ldr	r3, [pc, #648]	; (8005480 <calWallConrol+0x8c8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4aa1      	ldr	r2, [pc, #644]	; (8005480 <calWallConrol+0x8c8>)
 80051fa:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80051fc:	4ba0      	ldr	r3, [pc, #640]	; (8005480 <calWallConrol+0x8c8>)
 80051fe:	ed93 7a00 	vldr	s14, [r3]
 8005202:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005206:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800520a:	4b9d      	ldr	r3, [pc, #628]	; (8005480 <calWallConrol+0x8c8>)
 800520c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005210:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005214:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800521c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 8005220:	2001      	movs	r0, #1
 8005222:	f001 fe67 	bl	8006ef4 <pl_yellow_LED_count>
			break;
 8005226:	f000 bfd6 	b.w	80061d6 <calWallConrol+0x161e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 800522a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800522e:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8005484 <calWallConrol+0x8cc>
 8005232:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005236:	eef1 6a67 	vneg.f32	s13, s15
 800523a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800523e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 8005242:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005246:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005488 <calWallConrol+0x8d0>
 800524a:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 800524e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005252:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 8005256:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 800525a:	4b89      	ldr	r3, [pc, #548]	; (8005480 <calWallConrol+0x8c8>)
 800525c:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005260:	4b87      	ldr	r3, [pc, #540]	; (8005480 <calWallConrol+0x8c8>)
 8005262:	ed93 7a00 	vldr	s14, [r3]
 8005266:	4b86      	ldr	r3, [pc, #536]	; (8005480 <calWallConrol+0x8c8>)
 8005268:	edd3 7a01 	vldr	s15, [r3, #4]
 800526c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005270:	4b83      	ldr	r3, [pc, #524]	; (8005480 <calWallConrol+0x8c8>)
 8005272:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005276:	4b82      	ldr	r3, [pc, #520]	; (8005480 <calWallConrol+0x8c8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a81      	ldr	r2, [pc, #516]	; (8005480 <calWallConrol+0x8c8>)
 800527c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800527e:	4b80      	ldr	r3, [pc, #512]	; (8005480 <calWallConrol+0x8c8>)
 8005280:	ed93 7a00 	vldr	s14, [r3]
 8005284:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005288:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800528c:	4b7c      	ldr	r3, [pc, #496]	; (8005480 <calWallConrol+0x8c8>)
 800528e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005292:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005296:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800529a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 80052a2:	2081      	movs	r0, #129	; 0x81
 80052a4:	f001 fe26 	bl	8006ef4 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 80052a8:	4b78      	ldr	r3, [pc, #480]	; (800548c <calWallConrol+0x8d4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fb f961 	bl	8000574 <__aeabi_i2d>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	603a      	str	r2, [r7, #0]
 80052b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052bc:	607b      	str	r3, [r7, #4]
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	4b73      	ldr	r3, [pc, #460]	; (8005490 <calWallConrol+0x8d8>)
 80052c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052c8:	f7fb fc30 	bl	8000b2c <__aeabi_dcmplt>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01a      	beq.n	8005308 <calWallConrol+0x750>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 80052d2:	4b6e      	ldr	r3, [pc, #440]	; (800548c <calWallConrol+0x8d4>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb f94c 	bl	8000574 <__aeabi_i2d>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4692      	mov	sl, r2
 80052e2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	4b69      	ldr	r3, [pc, #420]	; (8005490 <calWallConrol+0x8d8>)
 80052ec:	4650      	mov	r0, sl
 80052ee:	4659      	mov	r1, fp
 80052f0:	f7fb fc1c 	bl	8000b2c <__aeabi_dcmplt>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <calWallConrol+0x750>
				StabilityCount_reset++;
 80052fa:	4b66      	ldr	r3, [pc, #408]	; (8005494 <calWallConrol+0x8dc>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b64      	ldr	r3, [pc, #400]	; (8005494 <calWallConrol+0x8dc>)
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e002      	b.n	800530e <calWallConrol+0x756>
			} else {
				StabilityCount_reset = 0;
 8005308:	4b62      	ldr	r3, [pc, #392]	; (8005494 <calWallConrol+0x8dc>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 800530e:	4b61      	ldr	r3, [pc, #388]	; (8005494 <calWallConrol+0x8dc>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b18      	cmp	r3, #24
 8005314:	f240 875e 	bls.w	80061d4 <calWallConrol+0x161c>
				Gyro.sigma_error = 0;
 8005318:	4b5f      	ldr	r3, [pc, #380]	; (8005498 <calWallConrol+0x8e0>)
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005320:	4b5c      	ldr	r3, [pc, #368]	; (8005494 <calWallConrol+0x8dc>)
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005326:	f000 bf55 	b.w	80061d4 <calWallConrol+0x161c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 800532a:	4b5c      	ldr	r3, [pc, #368]	; (800549c <calWallConrol+0x8e4>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	f000 8751 	beq.w	80061d6 <calWallConrol+0x161e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005334:	4b59      	ldr	r3, [pc, #356]	; (800549c <calWallConrol+0x8e4>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b03      	cmp	r3, #3
 800533a:	f040 874c 	bne.w	80061d6 <calWallConrol+0x161e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 2000) {
 800533e:	4b58      	ldr	r3, [pc, #352]	; (80054a0 <calWallConrol+0x8e8>)
 8005340:	edd3 7a00 	vldr	s15, [r3]
 8005344:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80054a4 <calWallConrol+0x8ec>
 8005348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800534c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005350:	dd05      	ble.n	800535e <calWallConrol+0x7a6>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 2000;
 8005352:	4b55      	ldr	r3, [pc, #340]	; (80054a8 <calWallConrol+0x8f0>)
 8005354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 2000;
 8005358:	4b54      	ldr	r3, [pc, #336]	; (80054ac <calWallConrol+0x8f4>)
 800535a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800535c:	e024      	b.n	80053a8 <calWallConrol+0x7f0>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 800535e:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <calWallConrol+0x8e8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb f918 	bl	8000598 <__aeabi_f2d>
 8005368:	a341      	add	r3, pc, #260	; (adr r3, 8005470 <calWallConrol+0x8b8>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fb f96b 	bl	8000648 <__aeabi_dmul>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	f7fb fc3d 	bl	8000bf8 <__aeabi_d2f>
 800537e:	4603      	mov	r3, r0
 8005380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 8005384:	4b46      	ldr	r3, [pc, #280]	; (80054a0 <calWallConrol+0x8e8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fb f905 	bl	8000598 <__aeabi_f2d>
 800538e:	a33a      	add	r3, pc, #232	; (adr r3, 8005478 <calWallConrol+0x8c0>)
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb f958 	bl	8000648 <__aeabi_dmul>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4610      	mov	r0, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	f7fb fc2a 	bl	8000bf8 <__aeabi_d2f>
 80053a4:	4603      	mov	r3, r0
 80053a6:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 80053a8:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <calWallConrol+0x8f8>)
 80053aa:	edd3 7a00 	vldr	s15, [r3]
 80053ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ba:	dd12      	ble.n	80053e2 <calWallConrol+0x82a>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 80053bc:	4b3c      	ldr	r3, [pc, #240]	; (80054b0 <calWallConrol+0x8f8>)
 80053be:	edd3 7a00 	vldr	s15, [r3]
 80053c2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80053c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	d808      	bhi.n	80053e2 <calWallConrol+0x82a>
			coefficientR[0] = COEFFICIENT_R0_0;
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <calWallConrol+0x8fc>)
 80053d2:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 80053d4:	4b38      	ldr	r3, [pc, #224]	; (80054b8 <calWallConrol+0x900>)
 80053d6:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 80053d8:	4b38      	ldr	r3, [pc, #224]	; (80054bc <calWallConrol+0x904>)
 80053da:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <calWallConrol+0x908>)
 80053de:	657b      	str	r3, [r7, #84]	; 0x54
 80053e0:	e0a5      	b.n	800552e <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 80053e2:	4b33      	ldr	r3, [pc, #204]	; (80054b0 <calWallConrol+0x8f8>)
 80053e4:	edd3 7a00 	vldr	s15, [r3]
 80053e8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80054c4 <calWallConrol+0x90c>
 80053ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f4:	dd12      	ble.n	800541c <calWallConrol+0x864>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 80053f6:	4b2e      	ldr	r3, [pc, #184]	; (80054b0 <calWallConrol+0x8f8>)
 80053f8:	edd3 7a00 	vldr	s15, [r3]
 80053fc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80054c8 <calWallConrol+0x910>
 8005400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005408:	d808      	bhi.n	800541c <calWallConrol+0x864>
			coefficientR[0] = COEFFICIENT_R1_0;
 800540a:	4b30      	ldr	r3, [pc, #192]	; (80054cc <calWallConrol+0x914>)
 800540c:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 800540e:	4b30      	ldr	r3, [pc, #192]	; (80054d0 <calWallConrol+0x918>)
 8005410:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 8005412:	4b30      	ldr	r3, [pc, #192]	; (80054d4 <calWallConrol+0x91c>)
 8005414:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <calWallConrol+0x920>)
 8005418:	657b      	str	r3, [r7, #84]	; 0x54
 800541a:	e088      	b.n	800552e <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <calWallConrol+0x8f8>)
 800541e:	edd3 7a00 	vldr	s15, [r3]
 8005422:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80054dc <calWallConrol+0x924>
 8005426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542e:	dd12      	ble.n	8005456 <calWallConrol+0x89e>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005430:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <calWallConrol+0x8f8>)
 8005432:	edd3 7a00 	vldr	s15, [r3]
 8005436:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80054e0 <calWallConrol+0x928>
 800543a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005442:	d808      	bhi.n	8005456 <calWallConrol+0x89e>
			coefficientR[0] = COEFFICIENT_R2_0;
 8005444:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <calWallConrol+0x92c>)
 8005446:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005448:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <calWallConrol+0x930>)
 800544a:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 800544c:	4b27      	ldr	r3, [pc, #156]	; (80054ec <calWallConrol+0x934>)
 800544e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005450:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <calWallConrol+0x938>)
 8005452:	657b      	str	r3, [r7, #84]	; 0x54
 8005454:	e06b      	b.n	800552e <calWallConrol+0x976>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 8005456:	4b27      	ldr	r3, [pc, #156]	; (80054f4 <calWallConrol+0x93c>)
 8005458:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800545c:	2b5a      	cmp	r3, #90	; 0x5a
 800545e:	dd4d      	ble.n	80054fc <calWallConrol+0x944>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005460:	4b25      	ldr	r3, [pc, #148]	; (80054f8 <calWallConrol+0x940>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	f043 0302 	orr.w	r3, r3, #2
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <calWallConrol+0x940>)
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e04c      	b.n	800550a <calWallConrol+0x952>
 8005470:	66666666 	.word	0x66666666
 8005474:	3fee6666 	.word	0x3fee6666
 8005478:	47ae147b 	.word	0x47ae147b
 800547c:	bfb47ae1 	.word	0xbfb47ae1
 8005480:	2000056c 	.word	0x2000056c
 8005484:	44d2a000 	.word	0x44d2a000
 8005488:	44b56000 	.word	0x44b56000
 800548c:	20000448 	.word	0x20000448
 8005490:	403e0000 	.word	0x403e0000
 8005494:	20000595 	.word	0x20000595
 8005498:	20000544 	.word	0x20000544
 800549c:	20000590 	.word	0x20000590
 80054a0:	200004d8 	.word	0x200004d8
 80054a4:	44fa0000 	.word	0x44fa0000
 80054a8:	44ed8000 	.word	0x44ed8000
 80054ac:	c3200000 	.word	0xc3200000
 80054b0:	200005dc 	.word	0x200005dc
 80054b4:	4414c13c 	.word	0x4414c13c
 80054b8:	421e1fdd 	.word	0x421e1fdd
 80054bc:	beb05045 	.word	0xbeb05045
 80054c0:	3e051eb8 	.word	0x3e051eb8
 80054c4:	420c0000 	.word	0x420c0000
 80054c8:	42700000 	.word	0x42700000
 80054cc:	45b20ce1 	.word	0x45b20ce1
 80054d0:	c393746d 	.word	0xc393746d
 80054d4:	40afa404 	.word	0x40afa404
 80054d8:	bd0f0328 	.word	0xbd0f0328
 80054dc:	42c80000 	.word	0x42c80000
 80054e0:	42f00000 	.word	0x42f00000
 80054e4:	46e1460a 	.word	0x46e1460a
 80054e8:	c43ee954 	.word	0xc43ee954
 80054ec:	40d673d9 	.word	0x40d673d9
 80054f0:	bc9d4952 	.word	0xbc9d4952
 80054f4:	200002b8 	.word	0x200002b8
 80054f8:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80054fc:	4b79      	ldr	r3, [pc, #484]	; (80056e4 <calWallConrol+0xb2c>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f023 0302 	bic.w	r3, r3, #2
 8005504:	b2da      	uxtb	r2, r3
 8005506:	4b77      	ldr	r3, [pc, #476]	; (80056e4 <calWallConrol+0xb2c>)
 8005508:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 800550a:	4b77      	ldr	r3, [pc, #476]	; (80056e8 <calWallConrol+0xb30>)
 800550c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005518:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 800552e:	4b6f      	ldr	r3, [pc, #444]	; (80056ec <calWallConrol+0xb34>)
 8005530:	edd3 7a00 	vldr	s15, [r3]
 8005534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	dd12      	ble.n	8005568 <calWallConrol+0x9b0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 8005542:	4b6a      	ldr	r3, [pc, #424]	; (80056ec <calWallConrol+0xb34>)
 8005544:	edd3 7a00 	vldr	s15, [r3]
 8005548:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800554c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005554:	d808      	bhi.n	8005568 <calWallConrol+0x9b0>
			coefficientL[0] = COEFFICIENT_L0_0;
 8005556:	4b66      	ldr	r3, [pc, #408]	; (80056f0 <calWallConrol+0xb38>)
 8005558:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 800555a:	4b66      	ldr	r3, [pc, #408]	; (80056f4 <calWallConrol+0xb3c>)
 800555c:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 800555e:	4b66      	ldr	r3, [pc, #408]	; (80056f8 <calWallConrol+0xb40>)
 8005560:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 8005562:	4b66      	ldr	r3, [pc, #408]	; (80056fc <calWallConrol+0xb44>)
 8005564:	647b      	str	r3, [r7, #68]	; 0x44
 8005566:	e05d      	b.n	8005624 <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 8005568:	4b60      	ldr	r3, [pc, #384]	; (80056ec <calWallConrol+0xb34>)
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005700 <calWallConrol+0xb48>
 8005572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557a:	dd12      	ble.n	80055a2 <calWallConrol+0x9ea>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 800557c:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <calWallConrol+0xb34>)
 800557e:	edd3 7a00 	vldr	s15, [r3]
 8005582:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005704 <calWallConrol+0xb4c>
 8005586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	d808      	bhi.n	80055a2 <calWallConrol+0x9ea>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005590:	4b5d      	ldr	r3, [pc, #372]	; (8005708 <calWallConrol+0xb50>)
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 8005594:	4b5d      	ldr	r3, [pc, #372]	; (800570c <calWallConrol+0xb54>)
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005598:	4b5d      	ldr	r3, [pc, #372]	; (8005710 <calWallConrol+0xb58>)
 800559a:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 800559c:	4b5d      	ldr	r3, [pc, #372]	; (8005714 <calWallConrol+0xb5c>)
 800559e:	647b      	str	r3, [r7, #68]	; 0x44
 80055a0:	e040      	b.n	8005624 <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 80055a2:	4b52      	ldr	r3, [pc, #328]	; (80056ec <calWallConrol+0xb34>)
 80055a4:	edd3 7a00 	vldr	s15, [r3]
 80055a8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005718 <calWallConrol+0xb60>
 80055ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b4:	dd12      	ble.n	80055dc <calWallConrol+0xa24>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 80055b6:	4b4d      	ldr	r3, [pc, #308]	; (80056ec <calWallConrol+0xb34>)
 80055b8:	edd3 7a00 	vldr	s15, [r3]
 80055bc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800571c <calWallConrol+0xb64>
 80055c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c8:	d808      	bhi.n	80055dc <calWallConrol+0xa24>
			coefficientL[0] = COEFFICIENT_L2_0;
 80055ca:	4b55      	ldr	r3, [pc, #340]	; (8005720 <calWallConrol+0xb68>)
 80055cc:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 80055ce:	4b55      	ldr	r3, [pc, #340]	; (8005724 <calWallConrol+0xb6c>)
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 80055d2:	4b55      	ldr	r3, [pc, #340]	; (8005728 <calWallConrol+0xb70>)
 80055d4:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 80055d6:	4b55      	ldr	r3, [pc, #340]	; (800572c <calWallConrol+0xb74>)
 80055d8:	647b      	str	r3, [r7, #68]	; 0x44
 80055da:	e023      	b.n	8005624 <calWallConrol+0xa6c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 80055dc:	4b42      	ldr	r3, [pc, #264]	; (80056e8 <calWallConrol+0xb30>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b5a      	cmp	r3, #90	; 0x5a
 80055e2:	dd07      	ble.n	80055f4 <calWallConrol+0xa3c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80055e4:	4b3f      	ldr	r3, [pc, #252]	; (80056e4 <calWallConrol+0xb2c>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <calWallConrol+0xb2c>)
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e006      	b.n	8005602 <calWallConrol+0xa4a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80055f4:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <calWallConrol+0xb2c>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <calWallConrol+0xb2c>)
 8005600:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 8005602:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <calWallConrol+0xb30>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800560e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 8005624:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005628:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800562c:	4b40      	ldr	r3, [pc, #256]	; (8005730 <calWallConrol+0xb78>)
 800562e:	edd3 7a00 	vldr	s15, [r3]
 8005632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005636:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800563a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800563e:	4b3c      	ldr	r3, [pc, #240]	; (8005730 <calWallConrol+0xb78>)
 8005640:	edd3 7a00 	vldr	s15, [r3]
 8005644:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005648:	4b39      	ldr	r3, [pc, #228]	; (8005730 <calWallConrol+0xb78>)
 800564a:	edd3 7a00 	vldr	s15, [r3]
 800564e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8005652:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 8005656:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800565a:	4b35      	ldr	r3, [pc, #212]	; (8005730 <calWallConrol+0xb78>)
 800565c:	edd3 7a00 	vldr	s15, [r3]
 8005660:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005664:	4b32      	ldr	r3, [pc, #200]	; (8005730 <calWallConrol+0xb78>)
 8005666:	edd3 7a00 	vldr	s15, [r3]
 800566a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 800566e:	4b30      	ldr	r3, [pc, #192]	; (8005730 <calWallConrol+0xb78>)
 8005670:	edd3 7a00 	vldr	s15, [r3]
 8005674:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 8005678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800567c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 8005680:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 8005684:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005688:	4b18      	ldr	r3, [pc, #96]	; (80056ec <calWallConrol+0xb34>)
 800568a:	edd3 7a00 	vldr	s15, [r3]
 800568e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005692:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005696:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <calWallConrol+0xb34>)
 800569c:	edd3 7a00 	vldr	s15, [r3]
 80056a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80056a4:	4b11      	ldr	r3, [pc, #68]	; (80056ec <calWallConrol+0xb34>)
 80056a6:	edd3 7a00 	vldr	s15, [r3]
 80056aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80056ae:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 80056b2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <calWallConrol+0xb34>)
 80056b8:	edd3 7a00 	vldr	s15, [r3]
 80056bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <calWallConrol+0xb34>)
 80056c2:	edd3 7a00 	vldr	s15, [r3]
 80056c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 80056ca:	4b08      	ldr	r3, [pc, #32]	; (80056ec <calWallConrol+0xb34>)
 80056cc:	edd3 7a00 	vldr	s15, [r3]
 80056d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 80056d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056d8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 80056dc:	230b      	movs	r3, #11
 80056de:	67bb      	str	r3, [r7, #120]	; 0x78
 80056e0:	e041      	b.n	8005766 <calWallConrol+0xbae>
 80056e2:	bf00      	nop
 80056e4:	20000593 	.word	0x20000593
 80056e8:	200002b8 	.word	0x200002b8
 80056ec:	200005e0 	.word	0x200005e0
 80056f0:	4423732b 	.word	0x4423732b
 80056f4:	421079e6 	.word	0x421079e6
 80056f8:	bdf88e7f 	.word	0xbdf88e7f
 80056fc:	3e11c34f 	.word	0x3e11c34f
 8005700:	420c0000 	.word	0x420c0000
 8005704:	42700000 	.word	0x42700000
 8005708:	45e16e07 	.word	0x45e16e07
 800570c:	c39f206f 	.word	0xc39f206f
 8005710:	40a20d2f 	.word	0x40a20d2f
 8005714:	bce5a3f5 	.word	0xbce5a3f5
 8005718:	42c80000 	.word	0x42c80000
 800571c:	42f00000 	.word	0x42f00000
 8005720:	459f8cbb 	.word	0x459f8cbb
 8005724:	c2f1ade0 	.word	0xc2f1ade0
 8005728:	3f6ae698 	.word	0x3f6ae698
 800572c:	bafba882 	.word	0xbafba882
 8005730:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8005734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005736:	3b01      	subs	r3, #1
 8005738:	4a9c      	ldr	r2, [pc, #624]	; (80059ac <calWallConrol+0xdf4>)
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	499a      	ldr	r1, [pc, #616]	; (80059ac <calWallConrol+0xdf4>)
 8005742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 800574a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800574c:	3b01      	subs	r3, #1
 800574e:	4a98      	ldr	r2, [pc, #608]	; (80059b0 <calWallConrol+0xdf8>)
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4996      	ldr	r1, [pc, #600]	; (80059b0 <calWallConrol+0xdf8>)
 8005758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005762:	3b01      	subs	r3, #1
 8005764:	67bb      	str	r3, [r7, #120]	; 0x78
 8005766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005768:	2b00      	cmp	r3, #0
 800576a:	dce3      	bgt.n	8005734 <calWallConrol+0xb7c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 800576c:	4a8f      	ldr	r2, [pc, #572]	; (80059ac <calWallConrol+0xdf4>)
 800576e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005770:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8005772:	4a8f      	ldr	r2, [pc, #572]	; (80059b0 <calWallConrol+0xdf8>)
 8005774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005776:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005778:	4b8c      	ldr	r3, [pc, #560]	; (80059ac <calWallConrol+0xdf4>)
 800577a:	ed93 7a00 	vldr	s14, [r3]
 800577e:	4b8b      	ldr	r3, [pc, #556]	; (80059ac <calWallConrol+0xdf4>)
 8005780:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005788:	4b8a      	ldr	r3, [pc, #552]	; (80059b4 <calWallConrol+0xdfc>)
 800578a:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 800578e:	4b88      	ldr	r3, [pc, #544]	; (80059b0 <calWallConrol+0xdf8>)
 8005790:	ed93 7a00 	vldr	s14, [r3]
 8005794:	4b86      	ldr	r3, [pc, #536]	; (80059b0 <calWallConrol+0xdf8>)
 8005796:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800579a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800579e:	4b86      	ldr	r3, [pc, #536]	; (80059b8 <calWallConrol+0xe00>)
 80057a0:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 80057a4:	4b85      	ldr	r3, [pc, #532]	; (80059bc <calWallConrol+0xe04>)
 80057a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80057aa:	2b5a      	cmp	r3, #90	; 0x5a
 80057ac:	dd1a      	ble.n	80057e4 <calWallConrol+0xc2c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 80057ae:	4b84      	ldr	r3, [pc, #528]	; (80059c0 <calWallConrol+0xe08>)
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057ba:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <calWallConrol+0xdfc>)
 80057bc:	edd3 7a00 	vldr	s15, [r3]
 80057c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057c4:	eef0 7ae7 	vabs.f32	s15, s15
 80057c8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80059c4 <calWallConrol+0xe0c>
 80057cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	d506      	bpl.n	80057e4 <calWallConrol+0xc2c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80057d6:	4b7c      	ldr	r3, [pc, #496]	; (80059c8 <calWallConrol+0xe10>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	f043 0302 	orr.w	r3, r3, #2
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	4b79      	ldr	r3, [pc, #484]	; (80059c8 <calWallConrol+0xe10>)
 80057e2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 80057e4:	4b75      	ldr	r3, [pc, #468]	; (80059bc <calWallConrol+0xe04>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b5a      	cmp	r3, #90	; 0x5a
 80057ea:	dd1a      	ble.n	8005822 <calWallConrol+0xc6a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80057ec:	4b74      	ldr	r3, [pc, #464]	; (80059c0 <calWallConrol+0xe08>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057f8:	4b6f      	ldr	r3, [pc, #444]	; (80059b8 <calWallConrol+0xe00>)
 80057fa:	edd3 7a00 	vldr	s15, [r3]
 80057fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005802:	eef0 7ae7 	vabs.f32	s15, s15
 8005806:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80059c4 <calWallConrol+0xe0c>
 800580a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800580e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005812:	d506      	bpl.n	8005822 <calWallConrol+0xc6a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005814:	4b6c      	ldr	r3, [pc, #432]	; (80059c8 <calWallConrol+0xe10>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	b2da      	uxtb	r2, r3
 800581e:	4b6a      	ldr	r3, [pc, #424]	; (80059c8 <calWallConrol+0xe10>)
 8005820:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005822:	4b66      	ldr	r3, [pc, #408]	; (80059bc <calWallConrol+0xe04>)
 8005824:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005828:	2b59      	cmp	r3, #89	; 0x59
 800582a:	dd13      	ble.n	8005854 <calWallConrol+0xc9c>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800582c:	4b64      	ldr	r3, [pc, #400]	; (80059c0 <calWallConrol+0xe08>)
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005838:	4b5e      	ldr	r3, [pc, #376]	; (80059b4 <calWallConrol+0xdfc>)
 800583a:	edd3 7a00 	vldr	s15, [r3]
 800583e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005842:	eef0 7ae7 	vabs.f32	s15, s15
 8005846:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80059c4 <calWallConrol+0xe0c>
 800584a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800584e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005852:	dd06      	ble.n	8005862 <calWallConrol+0xcaa>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005854:	4b5c      	ldr	r3, [pc, #368]	; (80059c8 <calWallConrol+0xe10>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f023 0302 	bic.w	r3, r3, #2
 800585c:	b2da      	uxtb	r2, r3
 800585e:	4b5a      	ldr	r3, [pc, #360]	; (80059c8 <calWallConrol+0xe10>)
 8005860:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005862:	4b56      	ldr	r3, [pc, #344]	; (80059bc <calWallConrol+0xe04>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b59      	cmp	r3, #89	; 0x59
 8005868:	dd13      	ble.n	8005892 <calWallConrol+0xcda>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 800586a:	4b55      	ldr	r3, [pc, #340]	; (80059c0 <calWallConrol+0xe08>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005876:	4b50      	ldr	r3, [pc, #320]	; (80059b8 <calWallConrol+0xe00>)
 8005878:	edd3 7a00 	vldr	s15, [r3]
 800587c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005880:	eef0 7ae7 	vabs.f32	s15, s15
 8005884:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80059c4 <calWallConrol+0xe0c>
 8005888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800588c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005890:	dd06      	ble.n	80058a0 <calWallConrol+0xce8>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005892:	4b4d      	ldr	r3, [pc, #308]	; (80059c8 <calWallConrol+0xe10>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	4b4a      	ldr	r3, [pc, #296]	; (80059c8 <calWallConrol+0xe10>)
 800589e:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 80058a0:	4b49      	ldr	r3, [pc, #292]	; (80059c8 <calWallConrol+0xe10>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	f200 813d 	bhi.w	8005b24 <calWallConrol+0xf6c>
 80058aa:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <calWallConrol+0xcf8>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058c1 	.word	0x080058c1
 80058b4:	08005915 	.word	0x08005915
 80058b8:	080059d9 	.word	0x080059d9
 80058bc:	08005a6f 	.word	0x08005a6f
		case 0:			//両壁なし
			PID_wall = 0;
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 80058c8:	2000      	movs	r0, #0
 80058ca:	f001 fa91 	bl	8006df0 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 80058ce:	2000      	movs	r0, #0
 80058d0:	f001 fac4 	bl	8006e5c <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 80058d4:	4b39      	ldr	r3, [pc, #228]	; (80059bc <calWallConrol+0xe04>)
 80058d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058e2:	4b3a      	ldr	r3, [pc, #232]	; (80059cc <calWallConrol+0xe14>)
 80058e4:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 80058e8:	4b34      	ldr	r3, [pc, #208]	; (80059bc <calWallConrol+0xe04>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	ee07 3a90 	vmov	s15, r3
 80058f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058f4:	4b36      	ldr	r3, [pc, #216]	; (80059d0 <calWallConrol+0xe18>)
 80058f6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 80058fa:	4b36      	ldr	r3, [pc, #216]	; (80059d4 <calWallConrol+0xe1c>)
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005902:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <calWallConrol+0xe1c>)
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 800590a:	4b32      	ldr	r3, [pc, #200]	; (80059d4 <calWallConrol+0xe1c>)
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	605a      	str	r2, [r3, #4]
			break;
 8005912:	e107      	b.n	8005b24 <calWallConrol+0xf6c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005914:	2000      	movs	r0, #0
 8005916:	f001 fa6b 	bl	8006df0 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 800591a:	2001      	movs	r0, #1
 800591c:	f001 fa9e 	bl	8006e5c <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005920:	4b26      	ldr	r3, [pc, #152]	; (80059bc <calWallConrol+0xe04>)
 8005922:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800592e:	4b27      	ldr	r3, [pc, #156]	; (80059cc <calWallConrol+0xe14>)
 8005930:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <calWallConrol+0xe18>)
 8005936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005938:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800593a:	4b20      	ldr	r3, [pc, #128]	; (80059bc <calWallConrol+0xe04>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005946:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800594a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800594e:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005952:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <calWallConrol+0xe04>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800595e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <calWallConrol+0xe1c>)
 8005964:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005968:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <calWallConrol+0xe1c>)
 800596a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 800596e:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <calWallConrol+0xe1c>)
 8005970:	edd3 7a01 	vldr	s15, [r3, #4]
 8005974:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005978:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <calWallConrol+0xe1c>)
 800597a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 800597e:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <calWallConrol+0xe1c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <calWallConrol+0xe1c>)
 8005984:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005986:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <calWallConrol+0xe1c>)
 8005988:	ed93 7a00 	vldr	s14, [r3]
 800598c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005990:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <calWallConrol+0xe1c>)
 8005996:	edd3 6a02 	vldr	s13, [r3, #8]
 800599a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800599e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80059a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059a6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80059aa:	e0bb      	b.n	8005b24 <calWallConrol+0xf6c>
 80059ac:	20000608 	.word	0x20000608
 80059b0:	20000638 	.word	0x20000638
 80059b4:	200006c8 	.word	0x200006c8
 80059b8:	200006cc 	.word	0x200006cc
 80059bc:	200002b8 	.word	0x200002b8
 80059c0:	20000448 	.word	0x20000448
 80059c4:	42a00000 	.word	0x42a00000
 80059c8:	20000593 	.word	0x20000593
 80059cc:	200005ac 	.word	0x200005ac
 80059d0:	200005b0 	.word	0x200005b0
 80059d4:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 80059d8:	2001      	movs	r0, #1
 80059da:	f001 fa09 	bl	8006df0 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 80059de:	2000      	movs	r0, #0
 80059e0:	f001 fa3c 	bl	8006e5c <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80059e4:	4aa4      	ldr	r2, [pc, #656]	; (8005c78 <calWallConrol+0x10c0>)
 80059e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059e8:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 80059ea:	4ba4      	ldr	r3, [pc, #656]	; (8005c7c <calWallConrol+0x10c4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f6:	4ba2      	ldr	r3, [pc, #648]	; (8005c80 <calWallConrol+0x10c8>)
 80059f8:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 80059fc:	4b9f      	ldr	r3, [pc, #636]	; (8005c7c <calWallConrol+0x10c4>)
 80059fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a0a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005a0e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005a12:	4b9a      	ldr	r3, [pc, #616]	; (8005c7c <calWallConrol+0x10c4>)
 8005a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005a24:	4b97      	ldr	r3, [pc, #604]	; (8005c84 <calWallConrol+0x10cc>)
 8005a26:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005a2a:	4b96      	ldr	r3, [pc, #600]	; (8005c84 <calWallConrol+0x10cc>)
 8005a2c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005a30:	4b94      	ldr	r3, [pc, #592]	; (8005c84 <calWallConrol+0x10cc>)
 8005a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a36:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005a3a:	4b92      	ldr	r3, [pc, #584]	; (8005c84 <calWallConrol+0x10cc>)
 8005a3c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005a40:	4b90      	ldr	r3, [pc, #576]	; (8005c84 <calWallConrol+0x10cc>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a8f      	ldr	r2, [pc, #572]	; (8005c84 <calWallConrol+0x10cc>)
 8005a46:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005a48:	4b8e      	ldr	r3, [pc, #568]	; (8005c84 <calWallConrol+0x10cc>)
 8005a4a:	ed93 7a00 	vldr	s14, [r3]
 8005a4e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005a52:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005a56:	4b8b      	ldr	r3, [pc, #556]	; (8005c84 <calWallConrol+0x10cc>)
 8005a58:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a5c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a68:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005a6c:	e05a      	b.n	8005b24 <calWallConrol+0xf6c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f001 f9be 	bl	8006df0 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005a74:	2001      	movs	r0, #1
 8005a76:	f001 f9f1 	bl	8006e5c <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005a7a:	4a7f      	ldr	r2, [pc, #508]	; (8005c78 <calWallConrol+0x10c0>)
 8005a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005a80:	4a7f      	ldr	r2, [pc, #508]	; (8005c80 <calWallConrol+0x10c8>)
 8005a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a84:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005a86:	4b7d      	ldr	r3, [pc, #500]	; (8005c7c <calWallConrol+0x10c4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a92:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a9a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005a9e:	4b77      	ldr	r3, [pc, #476]	; (8005c7c <calWallConrol+0x10c4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005aae:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <calWallConrol+0x10c4>)
 8005ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005abc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005ac0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005ac4:	4b6d      	ldr	r3, [pc, #436]	; (8005c7c <calWallConrol+0x10c4>)
 8005ac6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005ad2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005ada:	4b6a      	ldr	r3, [pc, #424]	; (8005c84 <calWallConrol+0x10cc>)
 8005adc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005ae0:	4b68      	ldr	r3, [pc, #416]	; (8005c84 <calWallConrol+0x10cc>)
 8005ae2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005ae6:	4b67      	ldr	r3, [pc, #412]	; (8005c84 <calWallConrol+0x10cc>)
 8005ae8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005aec:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005af0:	4b64      	ldr	r3, [pc, #400]	; (8005c84 <calWallConrol+0x10cc>)
 8005af2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005af6:	4b63      	ldr	r3, [pc, #396]	; (8005c84 <calWallConrol+0x10cc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a62      	ldr	r2, [pc, #392]	; (8005c84 <calWallConrol+0x10cc>)
 8005afc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005afe:	4b61      	ldr	r3, [pc, #388]	; (8005c84 <calWallConrol+0x10cc>)
 8005b00:	ed93 7a00 	vldr	s14, [r3]
 8005b04:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005b08:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005b0c:	4b5d      	ldr	r3, [pc, #372]	; (8005c84 <calWallConrol+0x10cc>)
 8005b0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b12:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b1e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005b22:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005b24:	4b58      	ldr	r3, [pc, #352]	; (8005c88 <calWallConrol+0x10d0>)
 8005b26:	edd3 7a00 	vldr	s15, [r3]
 8005b2a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005c8c <calWallConrol+0x10d4>
 8005b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b36:	dd04      	ble.n	8005b42 <calWallConrol+0xf8a>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005b38:	4b55      	ldr	r3, [pc, #340]	; (8005c90 <calWallConrol+0x10d8>)
 8005b3a:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 8005b3c:	4b55      	ldr	r3, [pc, #340]	; (8005c94 <calWallConrol+0x10dc>)
 8005b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b40:	e023      	b.n	8005b8a <calWallConrol+0xfd2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005b42:	4b51      	ldr	r3, [pc, #324]	; (8005c88 <calWallConrol+0x10d0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fa fd26 	bl	8000598 <__aeabi_f2d>
 8005b4c:	a346      	add	r3, pc, #280	; (adr r3, 8005c68 <calWallConrol+0x10b0>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f7fa fd79 	bl	8000648 <__aeabi_dmul>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f7fb f84b 	bl	8000bf8 <__aeabi_d2f>
 8005b62:	4603      	mov	r3, r0
 8005b64:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005b66:	4b48      	ldr	r3, [pc, #288]	; (8005c88 <calWallConrol+0x10d0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fa fd14 	bl	8000598 <__aeabi_f2d>
 8005b70:	a33f      	add	r3, pc, #252	; (adr r3, 8005c70 <calWallConrol+0x10b8>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa fd67 	bl	8000648 <__aeabi_dmul>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4619      	mov	r1, r3
 8005b82:	f7fb f839 	bl	8000bf8 <__aeabi_d2f>
 8005b86:	4603      	mov	r3, r0
 8005b88:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005b8a:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <calWallConrol+0x10e0>)
 8005b8c:	edd3 7a00 	vldr	s15, [r3]
 8005b90:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9c:	dd12      	ble.n	8005bc4 <calWallConrol+0x100c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005b9e:	4b3e      	ldr	r3, [pc, #248]	; (8005c98 <calWallConrol+0x10e0>)
 8005ba0:	edd3 7a00 	vldr	s15, [r3]
 8005ba4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005c9c <calWallConrol+0x10e4>
 8005ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	d808      	bhi.n	8005bc4 <calWallConrol+0x100c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005bb2:	4b3b      	ldr	r3, [pc, #236]	; (8005ca0 <calWallConrol+0x10e8>)
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005bb6:	4b3b      	ldr	r3, [pc, #236]	; (8005ca4 <calWallConrol+0x10ec>)
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005bba:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <calWallConrol+0x10f0>)
 8005bbc:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005bbe:	4b3b      	ldr	r3, [pc, #236]	; (8005cac <calWallConrol+0x10f4>)
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc2:	e025      	b.n	8005c10 <calWallConrol+0x1058>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <calWallConrol+0x10c4>)
 8005bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bca:	2b82      	cmp	r3, #130	; 0x82
 8005bcc:	dd07      	ble.n	8005bde <calWallConrol+0x1026>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005bce:	4b38      	ldr	r3, [pc, #224]	; (8005cb0 <calWallConrol+0x10f8>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	f043 0302 	orr.w	r3, r3, #2
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	4b35      	ldr	r3, [pc, #212]	; (8005cb0 <calWallConrol+0x10f8>)
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e006      	b.n	8005bec <calWallConrol+0x1034>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005bde:	4b34      	ldr	r3, [pc, #208]	; (8005cb0 <calWallConrol+0x10f8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	f023 0302 	bic.w	r3, r3, #2
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	4b31      	ldr	r3, [pc, #196]	; (8005cb0 <calWallConrol+0x10f8>)
 8005bea:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005bec:	4b23      	ldr	r3, [pc, #140]	; (8005c7c <calWallConrol+0x10c4>)
 8005bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bfa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005c10:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <calWallConrol+0x10fc>)
 8005c12:	edd3 7a00 	vldr	s15, [r3]
 8005c16:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c22:	dd12      	ble.n	8005c4a <calWallConrol+0x1092>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005c24:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <calWallConrol+0x10fc>)
 8005c26:	edd3 7a00 	vldr	s15, [r3]
 8005c2a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005c9c <calWallConrol+0x10e4>
 8005c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c36:	d808      	bhi.n	8005c4a <calWallConrol+0x1092>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <calWallConrol+0x1100>)
 8005c3a:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005c3c:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <calWallConrol+0x1104>)
 8005c3e:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <calWallConrol+0x1108>)
 8005c42:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005c44:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <calWallConrol+0x110c>)
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	e056      	b.n	8005cf8 <calWallConrol+0x1140>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <calWallConrol+0x10c4>)
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4e:	2b82      	cmp	r3, #130	; 0x82
 8005c50:	dd3a      	ble.n	8005cc8 <calWallConrol+0x1110>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <calWallConrol+0x10f8>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <calWallConrol+0x10f8>)
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	e039      	b.n	8005cd6 <calWallConrol+0x111e>
 8005c62:	bf00      	nop
 8005c64:	f3af 8000 	nop.w
 8005c68:	9999999a 	.word	0x9999999a
 8005c6c:	3fe99999 	.word	0x3fe99999
 8005c70:	47ae147b 	.word	0x47ae147b
 8005c74:	bfb47ae1 	.word	0xbfb47ae1
 8005c78:	200005ac 	.word	0x200005ac
 8005c7c:	200002b8 	.word	0x200002b8
 8005c80:	200005b0 	.word	0x200005b0
 8005c84:	20000578 	.word	0x20000578
 8005c88:	200004d8 	.word	0x200004d8
 8005c8c:	44fa0000 	.word	0x44fa0000
 8005c90:	44c80000 	.word	0x44c80000
 8005c94:	c3200000 	.word	0xc3200000
 8005c98:	200005dc 	.word	0x200005dc
 8005c9c:	42a00000 	.word	0x42a00000
 8005ca0:	438d4c33 	.word	0x438d4c33
 8005ca4:	bfa66ddb 	.word	0xbfa66ddb
 8005ca8:	3d2e0737 	.word	0x3d2e0737
 8005cac:	39c521de 	.word	0x39c521de
 8005cb0:	20000594 	.word	0x20000594
 8005cb4:	200005e0 	.word	0x200005e0
 8005cb8:	43774cf8 	.word	0x43774cf8
 8005cbc:	3e27920b 	.word	0x3e27920b
 8005cc0:	bd0ad094 	.word	0xbd0ad094
 8005cc4:	3a5f1fa4 	.word	0x3a5f1fa4
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005cc8:	4bb5      	ldr	r3, [pc, #724]	; (8005fa0 <calWallConrol+0x13e8>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4bb3      	ldr	r3, [pc, #716]	; (8005fa0 <calWallConrol+0x13e8>)
 8005cd4:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005cd6:	4bb3      	ldr	r3, [pc, #716]	; (8005fa4 <calWallConrol+0x13ec>)
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce2:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005cf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005cfc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005d00:	4ba9      	ldr	r3, [pc, #676]	; (8005fa8 <calWallConrol+0x13f0>)
 8005d02:	edd3 7a00 	vldr	s15, [r3]
 8005d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005d0e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005d12:	4ba5      	ldr	r3, [pc, #660]	; (8005fa8 <calWallConrol+0x13f0>)
 8005d14:	edd3 7a00 	vldr	s15, [r3]
 8005d18:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005d1c:	4ba2      	ldr	r3, [pc, #648]	; (8005fa8 <calWallConrol+0x13f0>)
 8005d1e:	edd3 7a00 	vldr	s15, [r3]
 8005d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005d26:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005d2a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005d2e:	4b9e      	ldr	r3, [pc, #632]	; (8005fa8 <calWallConrol+0x13f0>)
 8005d30:	edd3 7a00 	vldr	s15, [r3]
 8005d34:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005d38:	4b9b      	ldr	r3, [pc, #620]	; (8005fa8 <calWallConrol+0x13f0>)
 8005d3a:	edd3 7a00 	vldr	s15, [r3]
 8005d3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005d42:	4b99      	ldr	r3, [pc, #612]	; (8005fa8 <calWallConrol+0x13f0>)
 8005d44:	edd3 7a00 	vldr	s15, [r3]
 8005d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d50:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005d54:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5c:	4b93      	ldr	r3, [pc, #588]	; (8005fac <calWallConrol+0x13f4>)
 8005d5e:	edd3 7a00 	vldr	s15, [r3]
 8005d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d66:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005d6a:	edd7 6a08 	vldr	s13, [r7, #32]
 8005d6e:	4b8f      	ldr	r3, [pc, #572]	; (8005fac <calWallConrol+0x13f4>)
 8005d70:	edd3 7a00 	vldr	s15, [r3]
 8005d74:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005d78:	4b8c      	ldr	r3, [pc, #560]	; (8005fac <calWallConrol+0x13f4>)
 8005d7a:	edd3 7a00 	vldr	s15, [r3]
 8005d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005d82:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005d86:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005d8a:	4b88      	ldr	r3, [pc, #544]	; (8005fac <calWallConrol+0x13f4>)
 8005d8c:	edd3 7a00 	vldr	s15, [r3]
 8005d90:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005d94:	4b85      	ldr	r3, [pc, #532]	; (8005fac <calWallConrol+0x13f4>)
 8005d96:	edd3 7a00 	vldr	s15, [r3]
 8005d9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005d9e:	4b83      	ldr	r3, [pc, #524]	; (8005fac <calWallConrol+0x13f4>)
 8005da0:	edd3 7a00 	vldr	s15, [r3]
 8005da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005db0:	230b      	movs	r3, #11
 8005db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005db4:	e018      	b.n	8005de8 <calWallConrol+0x1230>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db8:	3b01      	subs	r3, #1
 8005dba:	4a7d      	ldr	r2, [pc, #500]	; (8005fb0 <calWallConrol+0x13f8>)
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	497b      	ldr	r1, [pc, #492]	; (8005fb0 <calWallConrol+0x13f8>)
 8005dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4a78      	ldr	r2, [pc, #480]	; (8005fb4 <calWallConrol+0x13fc>)
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	4976      	ldr	r1, [pc, #472]	; (8005fb4 <calWallConrol+0x13fc>)
 8005dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de4:	3b01      	subs	r3, #1
 8005de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dce3      	bgt.n	8005db6 <calWallConrol+0x11fe>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005dee:	4a70      	ldr	r2, [pc, #448]	; (8005fb0 <calWallConrol+0x13f8>)
 8005df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005df2:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005df4:	4a6f      	ldr	r2, [pc, #444]	; (8005fb4 <calWallConrol+0x13fc>)
 8005df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005df8:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005dfa:	4b6d      	ldr	r3, [pc, #436]	; (8005fb0 <calWallConrol+0x13f8>)
 8005dfc:	ed93 7a00 	vldr	s14, [r3]
 8005e00:	4b6b      	ldr	r3, [pc, #428]	; (8005fb0 <calWallConrol+0x13f8>)
 8005e02:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e0a:	4b6b      	ldr	r3, [pc, #428]	; (8005fb8 <calWallConrol+0x1400>)
 8005e0c:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005e10:	4b68      	ldr	r3, [pc, #416]	; (8005fb4 <calWallConrol+0x13fc>)
 8005e12:	ed93 7a00 	vldr	s14, [r3]
 8005e16:	4b67      	ldr	r3, [pc, #412]	; (8005fb4 <calWallConrol+0x13fc>)
 8005e18:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e20:	4b66      	ldr	r3, [pc, #408]	; (8005fbc <calWallConrol+0x1404>)
 8005e22:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005e26:	4b5f      	ldr	r3, [pc, #380]	; (8005fa4 <calWallConrol+0x13ec>)
 8005e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e2c:	2b82      	cmp	r3, #130	; 0x82
 8005e2e:	dd1a      	ble.n	8005e66 <calWallConrol+0x12ae>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005e30:	4b63      	ldr	r3, [pc, #396]	; (8005fc0 <calWallConrol+0x1408>)
 8005e32:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e3c:	4b5e      	ldr	r3, [pc, #376]	; (8005fb8 <calWallConrol+0x1400>)
 8005e3e:	edd3 7a00 	vldr	s15, [r3]
 8005e42:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005e46:	eef0 7ae7 	vabs.f32	s15, s15
 8005e4a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005fc4 <calWallConrol+0x140c>
 8005e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e56:	d506      	bpl.n	8005e66 <calWallConrol+0x12ae>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005e58:	4b51      	ldr	r3, [pc, #324]	; (8005fa0 <calWallConrol+0x13e8>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	4b4f      	ldr	r3, [pc, #316]	; (8005fa0 <calWallConrol+0x13e8>)
 8005e64:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005e66:	4b4f      	ldr	r3, [pc, #316]	; (8005fa4 <calWallConrol+0x13ec>)
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	2b82      	cmp	r3, #130	; 0x82
 8005e6c:	dd1a      	ble.n	8005ea4 <calWallConrol+0x12ec>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005e6e:	4b54      	ldr	r3, [pc, #336]	; (8005fc0 <calWallConrol+0x1408>)
 8005e70:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e7a:	4b50      	ldr	r3, [pc, #320]	; (8005fbc <calWallConrol+0x1404>)
 8005e7c:	edd3 7a00 	vldr	s15, [r3]
 8005e80:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005e84:	eef0 7ae7 	vabs.f32	s15, s15
 8005e88:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005fc4 <calWallConrol+0x140c>
 8005e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e94:	d506      	bpl.n	8005ea4 <calWallConrol+0x12ec>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005e96:	4b42      	ldr	r3, [pc, #264]	; (8005fa0 <calWallConrol+0x13e8>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <calWallConrol+0x13e8>)
 8005ea2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005ea4:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <calWallConrol+0x13ec>)
 8005ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eaa:	2b81      	cmp	r3, #129	; 0x81
 8005eac:	dd13      	ble.n	8005ed6 <calWallConrol+0x131e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005eae:	4b44      	ldr	r3, [pc, #272]	; (8005fc0 <calWallConrol+0x1408>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eba:	4b3f      	ldr	r3, [pc, #252]	; (8005fb8 <calWallConrol+0x1400>)
 8005ebc:	edd3 7a00 	vldr	s15, [r3]
 8005ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005ec4:	eef0 7ae7 	vabs.f32	s15, s15
 8005ec8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005fc4 <calWallConrol+0x140c>
 8005ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed4:	dd06      	ble.n	8005ee4 <calWallConrol+0x132c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005ed6:	4b32      	ldr	r3, [pc, #200]	; (8005fa0 <calWallConrol+0x13e8>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f023 0302 	bic.w	r3, r3, #2
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	4b2f      	ldr	r3, [pc, #188]	; (8005fa0 <calWallConrol+0x13e8>)
 8005ee2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8005ee4:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <calWallConrol+0x13ec>)
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee8:	2b81      	cmp	r3, #129	; 0x81
 8005eea:	dd13      	ble.n	8005f14 <calWallConrol+0x135c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005eec:	4b34      	ldr	r3, [pc, #208]	; (8005fc0 <calWallConrol+0x1408>)
 8005eee:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ef8:	4b30      	ldr	r3, [pc, #192]	; (8005fbc <calWallConrol+0x1404>)
 8005efa:	edd3 7a00 	vldr	s15, [r3]
 8005efe:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005f02:	eef0 7ae7 	vabs.f32	s15, s15
 8005f06:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005fc4 <calWallConrol+0x140c>
 8005f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f12:	dd06      	ble.n	8005f22 <calWallConrol+0x136a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005f14:	4b22      	ldr	r3, [pc, #136]	; (8005fa0 <calWallConrol+0x13e8>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <calWallConrol+0x13e8>)
 8005f20:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8005f22:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <calWallConrol+0x13e8>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	f200 8155 	bhi.w	80061d6 <calWallConrol+0x161e>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <calWallConrol+0x137c>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005fd9 	.word	0x08005fd9
 8005f3c:	08006079 	.word	0x08006079
 8005f40:	08006117 	.word	0x08006117
		case 0:			//両壁なし
			PID_wall += 0;
 8005f44:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005f48:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005fc8 <calWallConrol+0x1410>
 8005f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f50:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8005f54:	2000      	movs	r0, #0
 8005f56:	f000 ff5d 	bl	8006e14 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	f000 ff6c 	bl	8006e38 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005f60:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <calWallConrol+0x13ec>)
 8005f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f6e:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <calWallConrol+0x1414>)
 8005f70:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005f74:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <calWallConrol+0x13ec>)
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f80:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <calWallConrol+0x1418>)
 8005f82:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <calWallConrol+0x141c>)
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <calWallConrol+0x141c>)
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8005f96:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <calWallConrol+0x141c>)
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	605a      	str	r2, [r3, #4]
			break;
 8005f9e:	e11a      	b.n	80061d6 <calWallConrol+0x161e>
 8005fa0:	20000594 	.word	0x20000594
 8005fa4:	200002b8 	.word	0x200002b8
 8005fa8:	200005dc 	.word	0x200005dc
 8005fac:	200005e0 	.word	0x200005e0
 8005fb0:	20000668 	.word	0x20000668
 8005fb4:	20000698 	.word	0x20000698
 8005fb8:	200006d0 	.word	0x200006d0
 8005fbc:	200006d4 	.word	0x200006d4
 8005fc0:	20000448 	.word	0x20000448
 8005fc4:	42a00000 	.word	0x42a00000
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	200005a4 	.word	0x200005a4
 8005fd0:	200005a8 	.word	0x200005a8
 8005fd4:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f000 ff1b 	bl	8006e14 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005fde:	2001      	movs	r0, #1
 8005fe0:	f000 ff2a 	bl	8006e38 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005fe4:	4b87      	ldr	r3, [pc, #540]	; (8006204 <calWallConrol+0x164c>)
 8005fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff2:	4b85      	ldr	r3, [pc, #532]	; (8006208 <calWallConrol+0x1650>)
 8005ff4:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005ff8:	4a84      	ldr	r2, [pc, #528]	; (800620c <calWallConrol+0x1654>)
 8005ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ffc:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8005ffe:	4b81      	ldr	r3, [pc, #516]	; (8006204 <calWallConrol+0x164c>)
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800600a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800600e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006012:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8006016:	4b7b      	ldr	r3, [pc, #492]	; (8006204 <calWallConrol+0x164c>)
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006022:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8006026:	4b7a      	ldr	r3, [pc, #488]	; (8006210 <calWallConrol+0x1658>)
 8006028:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 800602c:	4b78      	ldr	r3, [pc, #480]	; (8006210 <calWallConrol+0x1658>)
 800602e:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006032:	4b77      	ldr	r3, [pc, #476]	; (8006210 <calWallConrol+0x1658>)
 8006034:	edd3 7a01 	vldr	s15, [r3, #4]
 8006038:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 800603c:	4b74      	ldr	r3, [pc, #464]	; (8006210 <calWallConrol+0x1658>)
 800603e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006042:	4b73      	ldr	r3, [pc, #460]	; (8006210 <calWallConrol+0x1658>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a72      	ldr	r2, [pc, #456]	; (8006210 <calWallConrol+0x1658>)
 8006048:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800604a:	4b71      	ldr	r3, [pc, #452]	; (8006210 <calWallConrol+0x1658>)
 800604c:	ed93 7a00 	vldr	s14, [r3]
 8006050:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006054:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006058:	4b6d      	ldr	r3, [pc, #436]	; (8006210 <calWallConrol+0x1658>)
 800605a:	edd3 6a02 	vldr	s13, [r3, #8]
 800605e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006066:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800606a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800606e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006072:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006076:	e0ae      	b.n	80061d6 <calWallConrol+0x161e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006078:	2001      	movs	r0, #1
 800607a:	f000 fecb 	bl	8006e14 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 800607e:	2000      	movs	r0, #0
 8006080:	f000 feda 	bl	8006e38 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006084:	4a60      	ldr	r2, [pc, #384]	; (8006208 <calWallConrol+0x1650>)
 8006086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006088:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 800608a:	4b5e      	ldr	r3, [pc, #376]	; (8006204 <calWallConrol+0x164c>)
 800608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006096:	4b5d      	ldr	r3, [pc, #372]	; (800620c <calWallConrol+0x1654>)
 8006098:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 800609c:	4b59      	ldr	r3, [pc, #356]	; (8006204 <calWallConrol+0x164c>)
 800609e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80060ae:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80060b2:	4b54      	ldr	r3, [pc, #336]	; (8006204 <calWallConrol+0x164c>)
 80060b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 80060c4:	4b52      	ldr	r3, [pc, #328]	; (8006210 <calWallConrol+0x1658>)
 80060c6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80060ca:	4b51      	ldr	r3, [pc, #324]	; (8006210 <calWallConrol+0x1658>)
 80060cc:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80060d0:	4b4f      	ldr	r3, [pc, #316]	; (8006210 <calWallConrol+0x1658>)
 80060d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80060d6:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80060da:	4b4d      	ldr	r3, [pc, #308]	; (8006210 <calWallConrol+0x1658>)
 80060dc:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80060e0:	4b4b      	ldr	r3, [pc, #300]	; (8006210 <calWallConrol+0x1658>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a4a      	ldr	r2, [pc, #296]	; (8006210 <calWallConrol+0x1658>)
 80060e6:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80060e8:	4b49      	ldr	r3, [pc, #292]	; (8006210 <calWallConrol+0x1658>)
 80060ea:	ed93 7a00 	vldr	s14, [r3]
 80060ee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80060f2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80060f6:	4b46      	ldr	r3, [pc, #280]	; (8006210 <calWallConrol+0x1658>)
 80060f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80060fc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006104:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006108:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800610c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006110:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006114:	e05f      	b.n	80061d6 <calWallConrol+0x161e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8006116:	2001      	movs	r0, #1
 8006118:	f000 fe7c 	bl	8006e14 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 800611c:	2001      	movs	r0, #1
 800611e:	f000 fe8b 	bl	8006e38 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006122:	4a39      	ldr	r2, [pc, #228]	; (8006208 <calWallConrol+0x1650>)
 8006124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006126:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006128:	4a38      	ldr	r2, [pc, #224]	; (800620c <calWallConrol+0x1654>)
 800612a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800612c:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 800612e:	4b35      	ldr	r3, [pc, #212]	; (8006204 <calWallConrol+0x164c>)
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800613a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800613e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006142:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8006146:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <calWallConrol+0x164c>)
 8006148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006156:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <calWallConrol+0x164c>)
 8006158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006164:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006168:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800616c:	4b25      	ldr	r3, [pc, #148]	; (8006204 <calWallConrol+0x164c>)
 800616e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800617a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800617e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006182:	4b23      	ldr	r3, [pc, #140]	; (8006210 <calWallConrol+0x1658>)
 8006184:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006188:	4b21      	ldr	r3, [pc, #132]	; (8006210 <calWallConrol+0x1658>)
 800618a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <calWallConrol+0x1658>)
 8006190:	edd3 7a01 	vldr	s15, [r3, #4]
 8006194:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006198:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <calWallConrol+0x1658>)
 800619a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800619e:	4b1c      	ldr	r3, [pc, #112]	; (8006210 <calWallConrol+0x1658>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <calWallConrol+0x1658>)
 80061a4:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80061a6:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <calWallConrol+0x1658>)
 80061a8:	ed93 7a00 	vldr	s14, [r3]
 80061ac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80061b0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80061b4:	4b16      	ldr	r3, [pc, #88]	; (8006210 <calWallConrol+0x1658>)
 80061b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80061ba:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80061be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c2:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80061c6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80061ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ce:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80061d2:	e000      	b.n	80061d6 <calWallConrol+0x161e>
			break;
 80061d4:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 80061d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80061da:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006214 <calWallConrol+0x165c>
 80061de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <calWallConrol+0x1660>)
 80061e4:	edd3 7a00 	vldr	s15, [r3]
 80061e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ec:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 80061f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061f2:	ee07 3a90 	vmov	s15, r3
}
 80061f6:	eeb0 0a67 	vmov.f32	s0, s15
 80061fa:	37a8      	adds	r7, #168	; 0xa8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006202:	bf00      	nop
 8006204:	200002b8 	.word	0x200002b8
 8006208:	200005a4 	.word	0x200005a4
 800620c:	200005a8 	.word	0x200005a8
 8006210:	20000584 	.word	0x20000584
 8006214:	44d1e000 	.word	0x44d1e000
 8006218:	200004d4 	.word	0x200004d4
 800621c:	00000000 	.word	0x00000000

08006220 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8006226:	4b98      	ldr	r3, [pc, #608]	; (8006488 <interrupt_WallCut+0x268>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b01      	cmp	r3, #1
 800622c:	f040 8537 	bne.w	8006c9e <interrupt_WallCut+0xa7e>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006230:	4b96      	ldr	r3, [pc, #600]	; (800648c <interrupt_WallCut+0x26c>)
 8006232:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800623a:	dd03      	ble.n	8006244 <interrupt_WallCut+0x24>
			front_wall_break_90 = 1;
 800623c:	4b94      	ldr	r3, [pc, #592]	; (8006490 <interrupt_WallCut+0x270>)
 800623e:	2201      	movs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	e002      	b.n	800624a <interrupt_WallCut+0x2a>
		} else {
			front_wall_break_90 = 0;
 8006244:	4b92      	ldr	r3, [pc, #584]	; (8006490 <interrupt_WallCut+0x270>)
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 800624a:	4b90      	ldr	r3, [pc, #576]	; (800648c <interrupt_WallCut+0x26c>)
 800624c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006250:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006254:	dd03      	ble.n	800625e <interrupt_WallCut+0x3e>
			front_wall_break_45 = 1;
 8006256:	4b8f      	ldr	r3, [pc, #572]	; (8006494 <interrupt_WallCut+0x274>)
 8006258:	2201      	movs	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e002      	b.n	8006264 <interrupt_WallCut+0x44>
		} else {
			front_wall_break_45 = 0;
 800625e:	4b8d      	ldr	r3, [pc, #564]	; (8006494 <interrupt_WallCut+0x274>)
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 8006264:	4b89      	ldr	r3, [pc, #548]	; (800648c <interrupt_WallCut+0x26c>)
 8006266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800626a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800626e:	dd03      	ble.n	8006278 <interrupt_WallCut+0x58>
			front_wall_break_45slant = 1;
 8006270:	4b89      	ldr	r3, [pc, #548]	; (8006498 <interrupt_WallCut+0x278>)
 8006272:	2201      	movs	r2, #1
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	e002      	b.n	800627e <interrupt_WallCut+0x5e>
		} else {
			front_wall_break_45slant = 0;
 8006278:	4b87      	ldr	r3, [pc, #540]	; (8006498 <interrupt_WallCut+0x278>)
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 800627e:	4b83      	ldr	r3, [pc, #524]	; (800648c <interrupt_WallCut+0x26c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006286:	da30      	bge.n	80062ea <interrupt_WallCut+0xca>
			NoWallCountL90++;
 8006288:	4b84      	ldr	r3, [pc, #528]	; (800649c <interrupt_WallCut+0x27c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	4a83      	ldr	r2, [pc, #524]	; (800649c <interrupt_WallCut+0x27c>)
 8006290:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006292:	4b83      	ldr	r3, [pc, #524]	; (80064a0 <interrupt_WallCut+0x280>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fa f97e 	bl	8000598 <__aeabi_f2d>
 800629c:	4604      	mov	r4, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	4b80      	ldr	r3, [pc, #512]	; (80064a4 <interrupt_WallCut+0x284>)
 80062a2:	ed93 7a00 	vldr	s14, [r3]
 80062a6:	4b80      	ldr	r3, [pc, #512]	; (80064a8 <interrupt_WallCut+0x288>)
 80062a8:	edd3 7a00 	vldr	s15, [r3]
 80062ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062b8:	ee16 0a90 	vmov	r0, s13
 80062bc:	f7fa f96c 	bl	8000598 <__aeabi_f2d>
 80062c0:	a36f      	add	r3, pc, #444	; (adr r3, 8006480 <interrupt_WallCut+0x260>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7fa f9bf 	bl	8000648 <__aeabi_dmul>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa f803 	bl	80002dc <__adddf3>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4610      	mov	r0, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	f7fa fc8b 	bl	8000bf8 <__aeabi_d2f>
 80062e2:	4603      	mov	r3, r0
 80062e4:	4a6e      	ldr	r2, [pc, #440]	; (80064a0 <interrupt_WallCut+0x280>)
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	e006      	b.n	80062f8 <interrupt_WallCut+0xd8>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 80062ea:	4b6c      	ldr	r3, [pc, #432]	; (800649c <interrupt_WallCut+0x27c>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 80062f0:	4b6b      	ldr	r3, [pc, #428]	; (80064a0 <interrupt_WallCut+0x280>)
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 80062f8:	4b64      	ldr	r3, [pc, #400]	; (800648c <interrupt_WallCut+0x26c>)
 80062fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80062fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006302:	da30      	bge.n	8006366 <interrupt_WallCut+0x146>
			NoWallCountR90++;
 8006304:	4b69      	ldr	r3, [pc, #420]	; (80064ac <interrupt_WallCut+0x28c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3301      	adds	r3, #1
 800630a:	4a68      	ldr	r2, [pc, #416]	; (80064ac <interrupt_WallCut+0x28c>)
 800630c:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800630e:	4b68      	ldr	r3, [pc, #416]	; (80064b0 <interrupt_WallCut+0x290>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f7fa f940 	bl	8000598 <__aeabi_f2d>
 8006318:	4604      	mov	r4, r0
 800631a:	460d      	mov	r5, r1
 800631c:	4b61      	ldr	r3, [pc, #388]	; (80064a4 <interrupt_WallCut+0x284>)
 800631e:	ed93 7a00 	vldr	s14, [r3]
 8006322:	4b61      	ldr	r3, [pc, #388]	; (80064a8 <interrupt_WallCut+0x288>)
 8006324:	edd3 7a00 	vldr	s15, [r3]
 8006328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800632c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006330:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006334:	ee16 0a90 	vmov	r0, s13
 8006338:	f7fa f92e 	bl	8000598 <__aeabi_f2d>
 800633c:	a350      	add	r3, pc, #320	; (adr r3, 8006480 <interrupt_WallCut+0x260>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f7fa f981 	bl	8000648 <__aeabi_dmul>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4620      	mov	r0, r4
 800634c:	4629      	mov	r1, r5
 800634e:	f7f9 ffc5 	bl	80002dc <__adddf3>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4610      	mov	r0, r2
 8006358:	4619      	mov	r1, r3
 800635a:	f7fa fc4d 	bl	8000bf8 <__aeabi_d2f>
 800635e:	4603      	mov	r3, r0
 8006360:	4a53      	ldr	r2, [pc, #332]	; (80064b0 <interrupt_WallCut+0x290>)
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e006      	b.n	8006374 <interrupt_WallCut+0x154>
		} else {
			NoWallCountR90 = 0;
 8006366:	4b51      	ldr	r3, [pc, #324]	; (80064ac <interrupt_WallCut+0x28c>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 800636c:	4b50      	ldr	r3, [pc, #320]	; (80064b0 <interrupt_WallCut+0x290>)
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006374:	4b4f      	ldr	r3, [pc, #316]	; (80064b4 <interrupt_WallCut+0x294>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800637c:	da03      	bge.n	8006386 <interrupt_WallCut+0x166>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 800637e:	4b43      	ldr	r3, [pc, #268]	; (800648c <interrupt_WallCut+0x26c>)
 8006380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006382:	2b70      	cmp	r3, #112	; 0x70
 8006384:	dd37      	ble.n	80063f6 <interrupt_WallCut+0x1d6>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 8006386:	4b4c      	ldr	r3, [pc, #304]	; (80064b8 <interrupt_WallCut+0x298>)
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 800638e:	4b4b      	ldr	r3, [pc, #300]	; (80064bc <interrupt_WallCut+0x29c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	4a49      	ldr	r2, [pc, #292]	; (80064bc <interrupt_WallCut+0x29c>)
 8006396:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006398:	4b49      	ldr	r3, [pc, #292]	; (80064c0 <interrupt_WallCut+0x2a0>)
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800639e:	4b49      	ldr	r3, [pc, #292]	; (80064c4 <interrupt_WallCut+0x2a4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fa f8f8 	bl	8000598 <__aeabi_f2d>
 80063a8:	4604      	mov	r4, r0
 80063aa:	460d      	mov	r5, r1
 80063ac:	4b3d      	ldr	r3, [pc, #244]	; (80064a4 <interrupt_WallCut+0x284>)
 80063ae:	ed93 7a00 	vldr	s14, [r3]
 80063b2:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <interrupt_WallCut+0x288>)
 80063b4:	edd3 7a00 	vldr	s15, [r3]
 80063b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063c4:	ee16 0a90 	vmov	r0, s13
 80063c8:	f7fa f8e6 	bl	8000598 <__aeabi_f2d>
 80063cc:	a32c      	add	r3, pc, #176	; (adr r3, 8006480 <interrupt_WallCut+0x260>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f7fa f939 	bl	8000648 <__aeabi_dmul>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4620      	mov	r0, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	f7f9 ff7d 	bl	80002dc <__adddf3>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	f7fa fc05 	bl	8000bf8 <__aeabi_d2f>
 80063ee:	4603      	mov	r3, r0
 80063f0:	4a34      	ldr	r2, [pc, #208]	; (80064c4 <interrupt_WallCut+0x2a4>)
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e09c      	b.n	8006530 <interrupt_WallCut+0x310>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 80063f6:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <interrupt_WallCut+0x2a0>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d168      	bne.n	80064d0 <interrupt_WallCut+0x2b0>
				for (int i = 0; i <= 19; i++) {
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e01f      	b.n	8006444 <interrupt_WallCut+0x224>
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006404:	4a21      	ldr	r2, [pc, #132]	; (800648c <interrupt_WallCut+0x26c>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3314      	adds	r3, #20
 800640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006416:	4b28      	ldr	r3, [pc, #160]	; (80064b8 <interrupt_WallCut+0x298>)
 8006418:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 800641c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006424:	dd0b      	ble.n	800643e <interrupt_WallCut+0x21e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006426:	4a19      	ldr	r2, [pc, #100]	; (800648c <interrupt_WallCut+0x26c>)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3314      	adds	r3, #20
 800642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006438:	4b1f      	ldr	r3, [pc, #124]	; (80064b8 <interrupt_WallCut+0x298>)
 800643a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3301      	adds	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b13      	cmp	r3, #19
 8006448:	dddc      	ble.n	8006404 <interrupt_WallCut+0x1e4>
					}
				}
				NoWallCountL45 = 0;
 800644a:	4b1c      	ldr	r3, [pc, #112]	; (80064bc <interrupt_WallCut+0x29c>)
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006450:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <interrupt_WallCut+0x2a0>)
 8006452:	2201      	movs	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 8006456:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <interrupt_WallCut+0x298>)
 8006458:	edd3 7a00 	vldr	s15, [r3]
 800645c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80064c8 <interrupt_WallCut+0x2a8>
 8006460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006464:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80064cc <interrupt_WallCut+0x2ac>
 8006468:	ee67 6a87 	vmul.f32	s13, s15, s14
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <interrupt_WallCut+0x298>)
 800646e:	ed93 7a00 	vldr	s14, [r3]
 8006472:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 8006476:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <interrupt_WallCut+0x2a4>)
 8006478:	edc3 7a00 	vstr	s15, [r3]
 800647c:	e058      	b.n	8006530 <interrupt_WallCut+0x310>
 800647e:	bf00      	nop
 8006480:	d2f1a9fc 	.word	0xd2f1a9fc
 8006484:	3f50624d 	.word	0x3f50624d
 8006488:	20000592 	.word	0x20000592
 800648c:	200002b8 	.word	0x200002b8
 8006490:	200005f2 	.word	0x200005f2
 8006494:	200005f3 	.word	0x200005f3
 8006498:	200005f4 	.word	0x200005f4
 800649c:	200005b8 	.word	0x200005b8
 80064a0:	200005d0 	.word	0x200005d0
 80064a4:	20000258 	.word	0x20000258
 80064a8:	2000025c 	.word	0x2000025c
 80064ac:	200005b4 	.word	0x200005b4
 80064b0:	200005cc 	.word	0x200005cc
 80064b4:	2000045c 	.word	0x2000045c
 80064b8:	200005f8 	.word	0x200005f8
 80064bc:	200005c0 	.word	0x200005c0
 80064c0:	200005ec 	.word	0x200005ec
 80064c4:	200005d8 	.word	0x200005d8
 80064c8:	43f68000 	.word	0x43f68000
 80064cc:	00000000 	.word	0x00000000
			} else {
				NoWallCountL45++;
 80064d0:	4bab      	ldr	r3, [pc, #684]	; (8006780 <interrupt_WallCut+0x560>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	4aaa      	ldr	r2, [pc, #680]	; (8006780 <interrupt_WallCut+0x560>)
 80064d8:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80064da:	4baa      	ldr	r3, [pc, #680]	; (8006784 <interrupt_WallCut+0x564>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fa f85a 	bl	8000598 <__aeabi_f2d>
 80064e4:	4604      	mov	r4, r0
 80064e6:	460d      	mov	r5, r1
 80064e8:	4ba7      	ldr	r3, [pc, #668]	; (8006788 <interrupt_WallCut+0x568>)
 80064ea:	ed93 7a00 	vldr	s14, [r3]
 80064ee:	4ba7      	ldr	r3, [pc, #668]	; (800678c <interrupt_WallCut+0x56c>)
 80064f0:	edd3 7a00 	vldr	s15, [r3]
 80064f4:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80064f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80064fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006500:	ee16 0a90 	vmov	r0, s13
 8006504:	f7fa f848 	bl	8000598 <__aeabi_f2d>
 8006508:	a39b      	add	r3, pc, #620	; (adr r3, 8006778 <interrupt_WallCut+0x558>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f7fa f89b 	bl	8000648 <__aeabi_dmul>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006516:	4620      	mov	r0, r4
 8006518:	4629      	mov	r1, r5
 800651a:	f7f9 fedf 	bl	80002dc <__adddf3>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4610      	mov	r0, r2
 8006524:	4619      	mov	r1, r3
 8006526:	f7fa fb67 	bl	8000bf8 <__aeabi_d2f>
 800652a:	4603      	mov	r3, r0
 800652c:	4a95      	ldr	r2, [pc, #596]	; (8006784 <interrupt_WallCut+0x564>)
 800652e:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006530:	4b97      	ldr	r3, [pc, #604]	; (8006790 <interrupt_WallCut+0x570>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006538:	da04      	bge.n	8006544 <interrupt_WallCut+0x324>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 800653a:	4b96      	ldr	r3, [pc, #600]	; (8006794 <interrupt_WallCut+0x574>)
 800653c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006540:	2bc8      	cmp	r3, #200	; 0xc8
 8006542:	dd37      	ble.n	80065b4 <interrupt_WallCut+0x394>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 8006544:	4b94      	ldr	r3, [pc, #592]	; (8006798 <interrupt_WallCut+0x578>)
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 800654c:	4b93      	ldr	r3, [pc, #588]	; (800679c <interrupt_WallCut+0x57c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	4a92      	ldr	r2, [pc, #584]	; (800679c <interrupt_WallCut+0x57c>)
 8006554:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 8006556:	4b92      	ldr	r3, [pc, #584]	; (80067a0 <interrupt_WallCut+0x580>)
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800655c:	4b91      	ldr	r3, [pc, #580]	; (80067a4 <interrupt_WallCut+0x584>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f7fa f819 	bl	8000598 <__aeabi_f2d>
 8006566:	4604      	mov	r4, r0
 8006568:	460d      	mov	r5, r1
 800656a:	4b87      	ldr	r3, [pc, #540]	; (8006788 <interrupt_WallCut+0x568>)
 800656c:	ed93 7a00 	vldr	s14, [r3]
 8006570:	4b86      	ldr	r3, [pc, #536]	; (800678c <interrupt_WallCut+0x56c>)
 8006572:	edd3 7a00 	vldr	s15, [r3]
 8006576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800657a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800657e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006582:	ee16 0a90 	vmov	r0, s13
 8006586:	f7fa f807 	bl	8000598 <__aeabi_f2d>
 800658a:	a37b      	add	r3, pc, #492	; (adr r3, 8006778 <interrupt_WallCut+0x558>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7fa f85a 	bl	8000648 <__aeabi_dmul>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4620      	mov	r0, r4
 800659a:	4629      	mov	r1, r5
 800659c:	f7f9 fe9e 	bl	80002dc <__adddf3>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	f7fa fb26 	bl	8000bf8 <__aeabi_d2f>
 80065ac:	4603      	mov	r3, r0
 80065ae:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <interrupt_WallCut+0x584>)
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e073      	b.n	800669c <interrupt_WallCut+0x47c>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 80065b4:	4b7a      	ldr	r3, [pc, #488]	; (80067a0 <interrupt_WallCut+0x580>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d13f      	bne.n	800663c <interrupt_WallCut+0x41c>
				for (int i = 0; i <= 19; i++) {
 80065bc:	2300      	movs	r3, #0
 80065be:	60bb      	str	r3, [r7, #8]
 80065c0:	e01f      	b.n	8006602 <interrupt_WallCut+0x3e2>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80065c2:	4a74      	ldr	r2, [pc, #464]	; (8006794 <interrupt_WallCut+0x574>)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	333c      	adds	r3, #60	; 0x3c
 80065c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065cc:	ee07 3a90 	vmov	s15, r3
 80065d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d4:	4b70      	ldr	r3, [pc, #448]	; (8006798 <interrupt_WallCut+0x578>)
 80065d6:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80065da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e2:	dd0b      	ble.n	80065fc <interrupt_WallCut+0x3dc>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80065e4:	4a6b      	ldr	r2, [pc, #428]	; (8006794 <interrupt_WallCut+0x574>)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	333c      	adds	r3, #60	; 0x3c
 80065ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80065f6:	4b68      	ldr	r3, [pc, #416]	; (8006798 <interrupt_WallCut+0x578>)
 80065f8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	3301      	adds	r3, #1
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b13      	cmp	r3, #19
 8006606:	dddc      	ble.n	80065c2 <interrupt_WallCut+0x3a2>
					}
				}
				NoWallCountR45 = 0;
 8006608:	4b64      	ldr	r3, [pc, #400]	; (800679c <interrupt_WallCut+0x57c>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 800660e:	4b64      	ldr	r3, [pc, #400]	; (80067a0 <interrupt_WallCut+0x580>)
 8006610:	2201      	movs	r2, #1
 8006612:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 8006614:	4b60      	ldr	r3, [pc, #384]	; (8006798 <interrupt_WallCut+0x578>)
 8006616:	edd3 7a00 	vldr	s15, [r3]
 800661a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80067a8 <interrupt_WallCut+0x588>
 800661e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006622:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80067ac <interrupt_WallCut+0x58c>
 8006626:	ee67 6a87 	vmul.f32	s13, s15, s14
 800662a:	4b5b      	ldr	r3, [pc, #364]	; (8006798 <interrupt_WallCut+0x578>)
 800662c:	ed93 7a00 	vldr	s14, [r3]
 8006630:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 8006634:	4b5b      	ldr	r3, [pc, #364]	; (80067a4 <interrupt_WallCut+0x584>)
 8006636:	edc3 7a00 	vstr	s15, [r3]
 800663a:	e02f      	b.n	800669c <interrupt_WallCut+0x47c>
			} else {
				NoWallCountR45++;
 800663c:	4b57      	ldr	r3, [pc, #348]	; (800679c <interrupt_WallCut+0x57c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	4a56      	ldr	r2, [pc, #344]	; (800679c <interrupt_WallCut+0x57c>)
 8006644:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006646:	4b57      	ldr	r3, [pc, #348]	; (80067a4 <interrupt_WallCut+0x584>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f7f9 ffa4 	bl	8000598 <__aeabi_f2d>
 8006650:	4604      	mov	r4, r0
 8006652:	460d      	mov	r5, r1
 8006654:	4b4c      	ldr	r3, [pc, #304]	; (8006788 <interrupt_WallCut+0x568>)
 8006656:	ed93 7a00 	vldr	s14, [r3]
 800665a:	4b4c      	ldr	r3, [pc, #304]	; (800678c <interrupt_WallCut+0x56c>)
 800665c:	edd3 7a00 	vldr	s15, [r3]
 8006660:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006664:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006668:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800666c:	ee16 0a90 	vmov	r0, s13
 8006670:	f7f9 ff92 	bl	8000598 <__aeabi_f2d>
 8006674:	a340      	add	r3, pc, #256	; (adr r3, 8006778 <interrupt_WallCut+0x558>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f7f9 ffe5 	bl	8000648 <__aeabi_dmul>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	f7f9 fe29 	bl	80002dc <__adddf3>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	f7fa fab1 	bl	8000bf8 <__aeabi_d2f>
 8006696:	4603      	mov	r3, r0
 8006698:	4a42      	ldr	r2, [pc, #264]	; (80067a4 <interrupt_WallCut+0x584>)
 800669a:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 800669c:	4b3c      	ldr	r3, [pc, #240]	; (8006790 <interrupt_WallCut+0x570>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80066a4:	db5f      	blt.n	8006766 <interrupt_WallCut+0x546>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 80066a6:	4b42      	ldr	r3, [pc, #264]	; (80067b0 <interrupt_WallCut+0x590>)
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 80066ae:	4b41      	ldr	r3, [pc, #260]	; (80067b4 <interrupt_WallCut+0x594>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	4a3f      	ldr	r2, [pc, #252]	; (80067b4 <interrupt_WallCut+0x594>)
 80066b6:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 80066b8:	2000      	movs	r0, #0
 80066ba:	f000 fcdd 	bl	8007078 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 80066be:	4b3e      	ldr	r3, [pc, #248]	; (80067b8 <interrupt_WallCut+0x598>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80066c4:	4b3d      	ldr	r3, [pc, #244]	; (80067bc <interrupt_WallCut+0x59c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7f9 ff65 	bl	8000598 <__aeabi_f2d>
 80066ce:	4604      	mov	r4, r0
 80066d0:	460d      	mov	r5, r1
 80066d2:	4b2d      	ldr	r3, [pc, #180]	; (8006788 <interrupt_WallCut+0x568>)
 80066d4:	ed93 7a00 	vldr	s14, [r3]
 80066d8:	4b2c      	ldr	r3, [pc, #176]	; (800678c <interrupt_WallCut+0x56c>)
 80066da:	edd3 7a00 	vldr	s15, [r3]
 80066de:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 80066e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066ea:	ee16 0a90 	vmov	r0, s13
 80066ee:	f7f9 ff53 	bl	8000598 <__aeabi_f2d>
 80066f2:	a321      	add	r3, pc, #132	; (adr r3, 8006778 <interrupt_WallCut+0x558>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f7f9 ffa6 	bl	8000648 <__aeabi_dmul>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006700:	4620      	mov	r0, r4
 8006702:	4629      	mov	r1, r5
 8006704:	f7f9 fdea 	bl	80002dc <__adddf3>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4610      	mov	r0, r2
 800670e:	4619      	mov	r1, r3
 8006710:	f7fa fa72 	bl	8000bf8 <__aeabi_d2f>
 8006714:	4603      	mov	r3, r0
 8006716:	4a29      	ldr	r2, [pc, #164]	; (80067bc <interrupt_WallCut+0x59c>)
 8006718:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 800671a:	4b29      	ldr	r3, [pc, #164]	; (80067c0 <interrupt_WallCut+0x5a0>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b01      	cmp	r3, #1
 8006720:	f040 8131 	bne.w	8006986 <interrupt_WallCut+0x766>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006724:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <interrupt_WallCut+0x5a4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f7f9 ff35 	bl	8000598 <__aeabi_f2d>
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
 8006732:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <interrupt_WallCut+0x5a8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f7f9 ff2e 	bl	8000598 <__aeabi_f2d>
 800673c:	a30e      	add	r3, pc, #56	; (adr r3, 8006778 <interrupt_WallCut+0x558>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 ff81 	bl	8000648 <__aeabi_dmul>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4620      	mov	r0, r4
 800674c:	4629      	mov	r1, r5
 800674e:	f7f9 fdc5 	bl	80002dc <__adddf3>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4610      	mov	r0, r2
 8006758:	4619      	mov	r1, r3
 800675a:	f7fa fa4d 	bl	8000bf8 <__aeabi_d2f>
 800675e:	4603      	mov	r3, r0
 8006760:	4a18      	ldr	r2, [pc, #96]	; (80067c4 <interrupt_WallCut+0x5a4>)
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e10f      	b.n	8006986 <interrupt_WallCut+0x766>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <interrupt_WallCut+0x598>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 80b4 	bne.w	80068d8 <interrupt_WallCut+0x6b8>
				for (int i = 0; i <= 19; i++) {
 8006770:	2300      	movs	r3, #0
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	e04a      	b.n	800680c <interrupt_WallCut+0x5ec>
 8006776:	bf00      	nop
 8006778:	d2f1a9fc 	.word	0xd2f1a9fc
 800677c:	3f50624d 	.word	0x3f50624d
 8006780:	200005c0 	.word	0x200005c0
 8006784:	200005d8 	.word	0x200005d8
 8006788:	20000258 	.word	0x20000258
 800678c:	2000025c 	.word	0x2000025c
 8006790:	2000045c 	.word	0x2000045c
 8006794:	200002b8 	.word	0x200002b8
 8006798:	200005fc 	.word	0x200005fc
 800679c:	200005bc 	.word	0x200005bc
 80067a0:	200005ed 	.word	0x200005ed
 80067a4:	200005d4 	.word	0x200005d4
 80067a8:	44484000 	.word	0x44484000
 80067ac:	00000000 	.word	0x00000000
 80067b0:	20000600 	.word	0x20000600
 80067b4:	200005c8 	.word	0x200005c8
 80067b8:	200005ee 	.word	0x200005ee
 80067bc:	200005e8 	.word	0x200005e8
 80067c0:	200005f0 	.word	0x200005f0
 80067c4:	200005e0 	.word	0x200005e0
 80067c8:	200004d8 	.word	0x200004d8
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80067cc:	4aac      	ldr	r2, [pc, #688]	; (8006a80 <interrupt_WallCut+0x860>)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3314      	adds	r3, #20
 80067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067de:	4ba9      	ldr	r3, [pc, #676]	; (8006a84 <interrupt_WallCut+0x864>)
 80067e0:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 80067e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ec:	dd0b      	ble.n	8006806 <interrupt_WallCut+0x5e6>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80067ee:	4aa4      	ldr	r2, [pc, #656]	; (8006a80 <interrupt_WallCut+0x860>)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3314      	adds	r3, #20
 80067f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f8:	ee07 3a90 	vmov	s15, r3
 80067fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006800:	4ba0      	ldr	r3, [pc, #640]	; (8006a84 <interrupt_WallCut+0x864>)
 8006802:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3301      	adds	r3, #1
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b13      	cmp	r3, #19
 8006810:	dddc      	ble.n	80067cc <interrupt_WallCut+0x5ac>
					}
				}
				NoWallCountL45slant = 0;
 8006812:	4b9d      	ldr	r3, [pc, #628]	; (8006a88 <interrupt_WallCut+0x868>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006818:	4b9c      	ldr	r3, [pc, #624]	; (8006a8c <interrupt_WallCut+0x86c>)
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 800681e:	2001      	movs	r0, #1
 8006820:	f000 fc2a 	bl	8007078 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006824:	4b97      	ldr	r3, [pc, #604]	; (8006a84 <interrupt_WallCut+0x864>)
 8006826:	edd3 7a00 	vldr	s15, [r3]
 800682a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8006a90 <interrupt_WallCut+0x870>
 800682e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683a:	db26      	blt.n	800688a <interrupt_WallCut+0x66a>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800683c:	4b91      	ldr	r3, [pc, #580]	; (8006a84 <interrupt_WallCut+0x864>)
 800683e:	edd3 7a00 	vldr	s15, [r3]
 8006842:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006a90 <interrupt_WallCut+0x870>
 8006846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800684a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8006a94 <interrupt_WallCut+0x874>
 800684e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006852:	4b8c      	ldr	r3, [pc, #560]	; (8006a84 <interrupt_WallCut+0x864>)
 8006854:	ed93 7a00 	vldr	s14, [r3]
 8006858:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 800685c:	4b8e      	ldr	r3, [pc, #568]	; (8006a98 <interrupt_WallCut+0x878>)
 800685e:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006862:	4b88      	ldr	r3, [pc, #544]	; (8006a84 <interrupt_WallCut+0x864>)
 8006864:	edd3 7a00 	vldr	s15, [r3]
 8006868:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8006a90 <interrupt_WallCut+0x870>
 800686c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006870:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006a94 <interrupt_WallCut+0x874>
 8006874:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006878:	4b82      	ldr	r3, [pc, #520]	; (8006a84 <interrupt_WallCut+0x864>)
 800687a:	ed93 7a00 	vldr	s14, [r3]
 800687e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8006882:	4b86      	ldr	r3, [pc, #536]	; (8006a9c <interrupt_WallCut+0x87c>)
 8006884:	edc3 7a00 	vstr	s15, [r3]
 8006888:	e07a      	b.n	8006980 <interrupt_WallCut+0x760>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800688a:	4b7e      	ldr	r3, [pc, #504]	; (8006a84 <interrupt_WallCut+0x864>)
 800688c:	edd3 7a00 	vldr	s15, [r3]
 8006890:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8006a90 <interrupt_WallCut+0x870>
 8006894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006898:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006a94 <interrupt_WallCut+0x874>
 800689c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80068a0:	4b78      	ldr	r3, [pc, #480]	; (8006a84 <interrupt_WallCut+0x864>)
 80068a2:	ed93 7a00 	vldr	s14, [r3]
 80068a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 80068aa:	4b7b      	ldr	r3, [pc, #492]	; (8006a98 <interrupt_WallCut+0x878>)
 80068ac:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80068b0:	4b74      	ldr	r3, [pc, #464]	; (8006a84 <interrupt_WallCut+0x864>)
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8006a90 <interrupt_WallCut+0x870>
 80068ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068be:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006a94 <interrupt_WallCut+0x874>
 80068c2:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80068c6:	4b6f      	ldr	r3, [pc, #444]	; (8006a84 <interrupt_WallCut+0x864>)
 80068c8:	ed93 7a00 	vldr	s14, [r3]
 80068cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 80068d0:	4b72      	ldr	r3, [pc, #456]	; (8006a9c <interrupt_WallCut+0x87c>)
 80068d2:	edc3 7a00 	vstr	s15, [r3]
 80068d6:	e053      	b.n	8006980 <interrupt_WallCut+0x760>
				}

			} else {
				NoWallCountL45slant++;
 80068d8:	4b6b      	ldr	r3, [pc, #428]	; (8006a88 <interrupt_WallCut+0x868>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	4a6a      	ldr	r2, [pc, #424]	; (8006a88 <interrupt_WallCut+0x868>)
 80068e0:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80068e2:	4b6e      	ldr	r3, [pc, #440]	; (8006a9c <interrupt_WallCut+0x87c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7f9 fe56 	bl	8000598 <__aeabi_f2d>
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	4b6b      	ldr	r3, [pc, #428]	; (8006aa0 <interrupt_WallCut+0x880>)
 80068f2:	ed93 7a00 	vldr	s14, [r3]
 80068f6:	4b6b      	ldr	r3, [pc, #428]	; (8006aa4 <interrupt_WallCut+0x884>)
 80068f8:	edd3 7a00 	vldr	s15, [r3]
 80068fc:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006900:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006904:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006908:	ee16 0a90 	vmov	r0, s13
 800690c:	f7f9 fe44 	bl	8000598 <__aeabi_f2d>
 8006910:	a359      	add	r3, pc, #356	; (adr r3, 8006a78 <interrupt_WallCut+0x858>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7f9 fe97 	bl	8000648 <__aeabi_dmul>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7f9 fcdb 	bl	80002dc <__adddf3>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4610      	mov	r0, r2
 800692c:	4619      	mov	r1, r3
 800692e:	f7fa f963 	bl	8000bf8 <__aeabi_d2f>
 8006932:	4603      	mov	r3, r0
 8006934:	4a59      	ldr	r2, [pc, #356]	; (8006a9c <interrupt_WallCut+0x87c>)
 8006936:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006938:	4b5b      	ldr	r3, [pc, #364]	; (8006aa8 <interrupt_WallCut+0x888>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d11f      	bne.n	8006980 <interrupt_WallCut+0x760>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006940:	4b55      	ldr	r3, [pc, #340]	; (8006a98 <interrupt_WallCut+0x878>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f7f9 fe27 	bl	8000598 <__aeabi_f2d>
 800694a:	4604      	mov	r4, r0
 800694c:	460d      	mov	r5, r1
 800694e:	4b57      	ldr	r3, [pc, #348]	; (8006aac <interrupt_WallCut+0x88c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f7f9 fe20 	bl	8000598 <__aeabi_f2d>
 8006958:	a347      	add	r3, pc, #284	; (adr r3, 8006a78 <interrupt_WallCut+0x858>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fe73 	bl	8000648 <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7f9 fcb7 	bl	80002dc <__adddf3>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4610      	mov	r0, r2
 8006974:	4619      	mov	r1, r3
 8006976:	f7fa f93f 	bl	8000bf8 <__aeabi_d2f>
 800697a:	4603      	mov	r3, r0
 800697c:	4a46      	ldr	r2, [pc, #280]	; (8006a98 <interrupt_WallCut+0x878>)
 800697e:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006980:	4b49      	ldr	r3, [pc, #292]	; (8006aa8 <interrupt_WallCut+0x888>)
 8006982:	2201      	movs	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006986:	4b4a      	ldr	r3, [pc, #296]	; (8006ab0 <interrupt_WallCut+0x890>)
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f113 0fef 	cmn.w	r3, #239	; 0xef
 800698e:	db6a      	blt.n	8006a66 <interrupt_WallCut+0x846>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006990:	4b48      	ldr	r3, [pc, #288]	; (8006ab4 <interrupt_WallCut+0x894>)
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006998:	4b47      	ldr	r3, [pc, #284]	; (8006ab8 <interrupt_WallCut+0x898>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3301      	adds	r3, #1
 800699e:	4a46      	ldr	r2, [pc, #280]	; (8006ab8 <interrupt_WallCut+0x898>)
 80069a0:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 80069a2:	2000      	movs	r0, #0
 80069a4:	f000 fb56 	bl	8007054 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 80069a8:	4b44      	ldr	r3, [pc, #272]	; (8006abc <interrupt_WallCut+0x89c>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80069ae:	4b44      	ldr	r3, [pc, #272]	; (8006ac0 <interrupt_WallCut+0x8a0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7f9 fdf0 	bl	8000598 <__aeabi_f2d>
 80069b8:	4604      	mov	r4, r0
 80069ba:	460d      	mov	r5, r1
 80069bc:	4b38      	ldr	r3, [pc, #224]	; (8006aa0 <interrupt_WallCut+0x880>)
 80069be:	ed93 7a00 	vldr	s14, [r3]
 80069c2:	4b38      	ldr	r3, [pc, #224]	; (8006aa4 <interrupt_WallCut+0x884>)
 80069c4:	edd3 7a00 	vldr	s15, [r3]
 80069c8:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 80069cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80069d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069d4:	ee16 0a90 	vmov	r0, s13
 80069d8:	f7f9 fdde 	bl	8000598 <__aeabi_f2d>
 80069dc:	a326      	add	r3, pc, #152	; (adr r3, 8006a78 <interrupt_WallCut+0x858>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f7f9 fe31 	bl	8000648 <__aeabi_dmul>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7f9 fc75 	bl	80002dc <__adddf3>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f7fa f8fd 	bl	8000bf8 <__aeabi_d2f>
 80069fe:	4603      	mov	r3, r0
 8006a00:	4a2f      	ldr	r2, [pc, #188]	; (8006ac0 <interrupt_WallCut+0x8a0>)
 8006a02:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006a04:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <interrupt_WallCut+0x8a4>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	f040 81a8 	bne.w	8006d5e <interrupt_WallCut+0xb3e>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006a0e:	4b2e      	ldr	r3, [pc, #184]	; (8006ac8 <interrupt_WallCut+0x8a8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 fdc0 	bl	8000598 <__aeabi_f2d>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <interrupt_WallCut+0x880>)
 8006a1e:	ed93 7a00 	vldr	s14, [r3]
 8006a22:	4b20      	ldr	r3, [pc, #128]	; (8006aa4 <interrupt_WallCut+0x884>)
 8006a24:	edd3 7a00 	vldr	s15, [r3]
 8006a28:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006a2c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a34:	ee16 0a90 	vmov	r0, s13
 8006a38:	f7f9 fdae 	bl	8000598 <__aeabi_f2d>
 8006a3c:	a30e      	add	r3, pc, #56	; (adr r3, 8006a78 <interrupt_WallCut+0x858>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fe01 	bl	8000648 <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7f9 fc45 	bl	80002dc <__adddf3>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f7fa f8cd 	bl	8000bf8 <__aeabi_d2f>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <interrupt_WallCut+0x8a8>)
 8006a62:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006a64:	e17b      	b.n	8006d5e <interrupt_WallCut+0xb3e>
			if (NoWallCountR45slant_flag == 0) {
 8006a66:	4b15      	ldr	r3, [pc, #84]	; (8006abc <interrupt_WallCut+0x89c>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 80b4 	bne.w	8006bd8 <interrupt_WallCut+0x9b8>
				for (int i = 0; i <= 19; i++) {
 8006a70:	2300      	movs	r3, #0
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	e04a      	b.n	8006b0c <interrupt_WallCut+0x8ec>
 8006a76:	bf00      	nop
 8006a78:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a7c:	3f50624d 	.word	0x3f50624d
 8006a80:	200002b8 	.word	0x200002b8
 8006a84:	20000600 	.word	0x20000600
 8006a88:	200005c8 	.word	0x200005c8
 8006a8c:	200005ee 	.word	0x200005ee
 8006a90:	455ac000 	.word	0x455ac000
 8006a94:	00000000 	.word	0x00000000
 8006a98:	200005e0 	.word	0x200005e0
 8006a9c:	200005e8 	.word	0x200005e8
 8006aa0:	20000258 	.word	0x20000258
 8006aa4:	2000025c 	.word	0x2000025c
 8006aa8:	200005f0 	.word	0x200005f0
 8006aac:	200004d8 	.word	0x200004d8
 8006ab0:	2000045c 	.word	0x2000045c
 8006ab4:	20000604 	.word	0x20000604
 8006ab8:	200005c4 	.word	0x200005c4
 8006abc:	200005ef 	.word	0x200005ef
 8006ac0:	200005e4 	.word	0x200005e4
 8006ac4:	200005f1 	.word	0x200005f1
 8006ac8:	200005dc 	.word	0x200005dc
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006acc:	4aa8      	ldr	r2, [pc, #672]	; (8006d70 <interrupt_WallCut+0xb50>)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	333c      	adds	r3, #60	; 0x3c
 8006ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ade:	4ba5      	ldr	r3, [pc, #660]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006ae0:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006ae4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aec:	dd0b      	ble.n	8006b06 <interrupt_WallCut+0x8e6>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006aee:	4aa0      	ldr	r2, [pc, #640]	; (8006d70 <interrupt_WallCut+0xb50>)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	333c      	adds	r3, #60	; 0x3c
 8006af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006b00:	4b9c      	ldr	r3, [pc, #624]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006b02:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b13      	cmp	r3, #19
 8006b10:	dddc      	ble.n	8006acc <interrupt_WallCut+0x8ac>
				NoWallCountR45slant = 0;
 8006b12:	4b99      	ldr	r3, [pc, #612]	; (8006d78 <interrupt_WallCut+0xb58>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006b18:	4b98      	ldr	r3, [pc, #608]	; (8006d7c <interrupt_WallCut+0xb5c>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006b1e:	2001      	movs	r0, #1
 8006b20:	f000 fa98 	bl	8007054 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006b24:	4b93      	ldr	r3, [pc, #588]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006b26:	edd3 7a00 	vldr	s15, [r3]
 8006b2a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006d80 <interrupt_WallCut+0xb60>
 8006b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3a:	db26      	blt.n	8006b8a <interrupt_WallCut+0x96a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006b3c:	4b8d      	ldr	r3, [pc, #564]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006b3e:	edd3 7a00 	vldr	s15, [r3]
 8006b42:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8006d80 <interrupt_WallCut+0xb60>
 8006b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b4a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8006d84 <interrupt_WallCut+0xb64>
 8006b4e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006b52:	4b88      	ldr	r3, [pc, #544]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006b54:	ed93 7a00 	vldr	s14, [r3]
 8006b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006b5c:	4b8a      	ldr	r3, [pc, #552]	; (8006d88 <interrupt_WallCut+0xb68>)
 8006b5e:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006b62:	4b84      	ldr	r3, [pc, #528]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006b64:	edd3 7a00 	vldr	s15, [r3]
 8006b68:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8006d80 <interrupt_WallCut+0xb60>
 8006b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b70:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006d84 <interrupt_WallCut+0xb64>
 8006b74:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006b78:	4b7e      	ldr	r3, [pc, #504]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006b7a:	ed93 7a00 	vldr	s14, [r3]
 8006b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006b82:	4b82      	ldr	r3, [pc, #520]	; (8006d8c <interrupt_WallCut+0xb6c>)
 8006b84:	edc3 7a00 	vstr	s15, [r3]
 8006b88:	e085      	b.n	8006c96 <interrupt_WallCut+0xa76>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006b8a:	4b7a      	ldr	r3, [pc, #488]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006b8c:	edd3 7a00 	vldr	s15, [r3]
 8006b90:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8006d80 <interrupt_WallCut+0xb60>
 8006b94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b98:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006d84 <interrupt_WallCut+0xb64>
 8006b9c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006ba0:	4b74      	ldr	r3, [pc, #464]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006ba2:	ed93 7a00 	vldr	s14, [r3]
 8006ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006baa:	4b77      	ldr	r3, [pc, #476]	; (8006d88 <interrupt_WallCut+0xb68>)
 8006bac:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006bb0:	4b70      	ldr	r3, [pc, #448]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006bb2:	edd3 7a00 	vldr	s15, [r3]
 8006bb6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8006d80 <interrupt_WallCut+0xb60>
 8006bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bbe:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8006d84 <interrupt_WallCut+0xb64>
 8006bc2:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006bc6:	4b6b      	ldr	r3, [pc, #428]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006bc8:	ed93 7a00 	vldr	s14, [r3]
 8006bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006bd0:	4b6e      	ldr	r3, [pc, #440]	; (8006d8c <interrupt_WallCut+0xb6c>)
 8006bd2:	edc3 7a00 	vstr	s15, [r3]
 8006bd6:	e05e      	b.n	8006c96 <interrupt_WallCut+0xa76>
				NoWallCountR45slant++;
 8006bd8:	4b67      	ldr	r3, [pc, #412]	; (8006d78 <interrupt_WallCut+0xb58>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	4a66      	ldr	r2, [pc, #408]	; (8006d78 <interrupt_WallCut+0xb58>)
 8006be0:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006be2:	4b6a      	ldr	r3, [pc, #424]	; (8006d8c <interrupt_WallCut+0xb6c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7f9 fcd6 	bl	8000598 <__aeabi_f2d>
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	4b67      	ldr	r3, [pc, #412]	; (8006d90 <interrupt_WallCut+0xb70>)
 8006bf2:	ed93 7a00 	vldr	s14, [r3]
 8006bf6:	4b67      	ldr	r3, [pc, #412]	; (8006d94 <interrupt_WallCut+0xb74>)
 8006bf8:	edd3 7a00 	vldr	s15, [r3]
 8006bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006c00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c08:	ee16 0a90 	vmov	r0, s13
 8006c0c:	f7f9 fcc4 	bl	8000598 <__aeabi_f2d>
 8006c10:	a355      	add	r3, pc, #340	; (adr r3, 8006d68 <interrupt_WallCut+0xb48>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fd17 	bl	8000648 <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fb5b 	bl	80002dc <__adddf3>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7f9 ffe3 	bl	8000bf8 <__aeabi_d2f>
 8006c32:	4603      	mov	r3, r0
 8006c34:	4a55      	ldr	r2, [pc, #340]	; (8006d8c <interrupt_WallCut+0xb6c>)
 8006c36:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006c38:	4b57      	ldr	r3, [pc, #348]	; (8006d98 <interrupt_WallCut+0xb78>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d12a      	bne.n	8006c96 <interrupt_WallCut+0xa76>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006c40:	4b51      	ldr	r3, [pc, #324]	; (8006d88 <interrupt_WallCut+0xb68>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7f9 fca7 	bl	8000598 <__aeabi_f2d>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	4b50      	ldr	r3, [pc, #320]	; (8006d90 <interrupt_WallCut+0xb70>)
 8006c50:	ed93 7a00 	vldr	s14, [r3]
 8006c54:	4b4f      	ldr	r3, [pc, #316]	; (8006d94 <interrupt_WallCut+0xb74>)
 8006c56:	edd3 7a00 	vldr	s15, [r3]
 8006c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006c5e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c66:	ee16 0a90 	vmov	r0, s13
 8006c6a:	f7f9 fc95 	bl	8000598 <__aeabi_f2d>
 8006c6e:	a33e      	add	r3, pc, #248	; (adr r3, 8006d68 <interrupt_WallCut+0xb48>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f7f9 fce8 	bl	8000648 <__aeabi_dmul>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4629      	mov	r1, r5
 8006c80:	f7f9 fb2c 	bl	80002dc <__adddf3>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f7f9 ffb4 	bl	8000bf8 <__aeabi_d2f>
 8006c90:	4603      	mov	r3, r0
 8006c92:	4a3d      	ldr	r2, [pc, #244]	; (8006d88 <interrupt_WallCut+0xb68>)
 8006c94:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006c96:	4b40      	ldr	r3, [pc, #256]	; (8006d98 <interrupt_WallCut+0xb78>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
}
 8006c9c:	e05f      	b.n	8006d5e <interrupt_WallCut+0xb3e>
		NoWallCountL90 = 0;
 8006c9e:	4b3f      	ldr	r3, [pc, #252]	; (8006d9c <interrupt_WallCut+0xb7c>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006ca4:	4b3e      	ldr	r3, [pc, #248]	; (8006da0 <interrupt_WallCut+0xb80>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006caa:	4b3e      	ldr	r3, [pc, #248]	; (8006da4 <interrupt_WallCut+0xb84>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006cb0:	4b3d      	ldr	r3, [pc, #244]	; (8006da8 <interrupt_WallCut+0xb88>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006cb6:	4b3d      	ldr	r3, [pc, #244]	; (8006dac <interrupt_WallCut+0xb8c>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006cbc:	4b2e      	ldr	r3, [pc, #184]	; (8006d78 <interrupt_WallCut+0xb58>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006cc2:	4b3b      	ldr	r3, [pc, #236]	; (8006db0 <interrupt_WallCut+0xb90>)
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006cca:	4b3a      	ldr	r3, [pc, #232]	; (8006db4 <interrupt_WallCut+0xb94>)
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006cd2:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <interrupt_WallCut+0xb98>)
 8006cd4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006cd8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006cda:	4b38      	ldr	r3, [pc, #224]	; (8006dbc <interrupt_WallCut+0xb9c>)
 8006cdc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006ce0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006ce2:	4b37      	ldr	r3, [pc, #220]	; (8006dc0 <interrupt_WallCut+0xba0>)
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006cea:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <interrupt_WallCut+0xb68>)
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006cf2:	4b34      	ldr	r3, [pc, #208]	; (8006dc4 <interrupt_WallCut+0xba4>)
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006cfa:	4b24      	ldr	r3, [pc, #144]	; (8006d8c <interrupt_WallCut+0xb6c>)
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006d02:	4b31      	ldr	r3, [pc, #196]	; (8006dc8 <interrupt_WallCut+0xba8>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006d08:	4b30      	ldr	r3, [pc, #192]	; (8006dcc <interrupt_WallCut+0xbac>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006d0e:	4b30      	ldr	r3, [pc, #192]	; (8006dd0 <interrupt_WallCut+0xbb0>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006d14:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <interrupt_WallCut+0xb5c>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <interrupt_WallCut+0xbb4>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006d20:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <interrupt_WallCut+0xb78>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006d26:	4b2c      	ldr	r3, [pc, #176]	; (8006dd8 <interrupt_WallCut+0xbb8>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006d2c:	4b2b      	ldr	r3, [pc, #172]	; (8006ddc <interrupt_WallCut+0xbbc>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006d32:	4b2b      	ldr	r3, [pc, #172]	; (8006de0 <interrupt_WallCut+0xbc0>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006d38:	4b29      	ldr	r3, [pc, #164]	; (8006de0 <interrupt_WallCut+0xbc0>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006d3e:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <interrupt_WallCut+0xbc4>)
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006d46:	4b28      	ldr	r3, [pc, #160]	; (8006de8 <interrupt_WallCut+0xbc8>)
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006d4e:	4b27      	ldr	r3, [pc, #156]	; (8006dec <interrupt_WallCut+0xbcc>)
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <interrupt_WallCut+0xb54>)
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bdb0      	pop	{r4, r5, r7, pc}
 8006d66:	bf00      	nop
 8006d68:	d2f1a9fc 	.word	0xd2f1a9fc
 8006d6c:	3f50624d 	.word	0x3f50624d
 8006d70:	200002b8 	.word	0x200002b8
 8006d74:	20000604 	.word	0x20000604
 8006d78:	200005c4 	.word	0x200005c4
 8006d7c:	200005ef 	.word	0x200005ef
 8006d80:	455ac000 	.word	0x455ac000
 8006d84:	00000000 	.word	0x00000000
 8006d88:	200005dc 	.word	0x200005dc
 8006d8c:	200005e4 	.word	0x200005e4
 8006d90:	20000258 	.word	0x20000258
 8006d94:	2000025c 	.word	0x2000025c
 8006d98:	200005f1 	.word	0x200005f1
 8006d9c:	200005b8 	.word	0x200005b8
 8006da0:	200005b4 	.word	0x200005b4
 8006da4:	200005c0 	.word	0x200005c0
 8006da8:	200005bc 	.word	0x200005bc
 8006dac:	200005c8 	.word	0x200005c8
 8006db0:	200005d0 	.word	0x200005d0
 8006db4:	200005cc 	.word	0x200005cc
 8006db8:	200005d8 	.word	0x200005d8
 8006dbc:	200005d4 	.word	0x200005d4
 8006dc0:	200005e0 	.word	0x200005e0
 8006dc4:	200005e8 	.word	0x200005e8
 8006dc8:	200005ec 	.word	0x200005ec
 8006dcc:	200005ed 	.word	0x200005ed
 8006dd0:	200005ee 	.word	0x200005ee
 8006dd4:	200005f0 	.word	0x200005f0
 8006dd8:	200005f2 	.word	0x200005f2
 8006ddc:	200005f3 	.word	0x200005f3
 8006de0:	200005f4 	.word	0x200005f4
 8006de4:	200005f8 	.word	0x200005f8
 8006de8:	200005fc 	.word	0x200005fc
 8006dec:	20000600 	.word	0x20000600

08006df0 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e06:	f013 fef3 	bl	801abf0 <HAL_GPIO_WritePin>
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	2140      	movs	r1, #64	; 0x40
 8006e24:	4803      	ldr	r0, [pc, #12]	; (8006e34 <pl_yellow_LED_3+0x20>)
 8006e26:	f013 fee3 	bl	801abf0 <HAL_GPIO_WritePin>
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	48000800 	.word	0x48000800

08006e38 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e4a:	4803      	ldr	r0, [pc, #12]	; (8006e58 <pl_yellow_LED_6+0x20>)
 8006e4c:	f013 fed0 	bl	801abf0 <HAL_GPIO_WritePin>
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	48000400 	.word	0x48000400

08006e5c <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e6e:	4803      	ldr	r0, [pc, #12]	; (8006e7c <pl_yellow_LED_8+0x20>)
 8006e70:	f013 febe 	bl	801abf0 <HAL_GPIO_WritePin>
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	48000400 	.word	0x48000400

08006e80 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006e84:	2200      	movs	r2, #0
 8006e86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e8e:	f013 feaf 	bl	801abf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006e92:	2200      	movs	r2, #0
 8006e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e9c:	f013 fea8 	bl	801abf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2140      	movs	r1, #64	; 0x40
 8006ea4:	4811      	ldr	r0, [pc, #68]	; (8006eec <pl_yellow_LED_off+0x6c>)
 8006ea6:	f013 fea3 	bl	801abf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006eb0:	480f      	ldr	r0, [pc, #60]	; (8006ef0 <pl_yellow_LED_off+0x70>)
 8006eb2:	f013 fe9d 	bl	801abf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ebc:	480c      	ldr	r0, [pc, #48]	; (8006ef0 <pl_yellow_LED_off+0x70>)
 8006ebe:	f013 fe97 	bl	801abf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ec8:	4809      	ldr	r0, [pc, #36]	; (8006ef0 <pl_yellow_LED_off+0x70>)
 8006eca:	f013 fe91 	bl	801abf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ed4:	4806      	ldr	r0, [pc, #24]	; (8006ef0 <pl_yellow_LED_off+0x70>)
 8006ed6:	f013 fe8b 	bl	801abf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006eda:	2200      	movs	r2, #0
 8006edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ee0:	4803      	ldr	r0, [pc, #12]	; (8006ef0 <pl_yellow_LED_off+0x70>)
 8006ee2:	f013 fe85 	bl	801abf0 <HAL_GPIO_WritePin>
}
 8006ee6:	bf00      	nop
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	48000800 	.word	0x48000800
 8006ef0:	48000400 	.word	0x48000400

08006ef4 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f3c:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006f44:	2201      	movs	r2, #1
 8006f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f4e:	f013 fe4f 	bl	801abf0 <HAL_GPIO_WritePin>
 8006f52:	e006      	b.n	8006f62 <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006f54:	2200      	movs	r2, #0
 8006f56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f5e:	f013 fe47 	bl	801abf0 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f72:	f013 fe3d 	bl	801abf0 <HAL_GPIO_WritePin>
 8006f76:	e006      	b.n	8006f86 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f82:	f013 fe35 	bl	801abf0 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8006f86:	7b7b      	ldrb	r3, [r7, #13]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2140      	movs	r1, #64	; 0x40
 8006f90:	482e      	ldr	r0, [pc, #184]	; (800704c <pl_yellow_LED_count+0x158>)
 8006f92:	f013 fe2d 	bl	801abf0 <HAL_GPIO_WritePin>
 8006f96:	e004      	b.n	8006fa2 <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2140      	movs	r1, #64	; 0x40
 8006f9c:	482b      	ldr	r0, [pc, #172]	; (800704c <pl_yellow_LED_count+0x158>)
 8006f9e:	f013 fe27 	bl	801abf0 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8006fa2:	7b3b      	ldrb	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d006      	beq.n	8006fb6 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fae:	4828      	ldr	r0, [pc, #160]	; (8007050 <pl_yellow_LED_count+0x15c>)
 8006fb0:	f013 fe1e 	bl	801abf0 <HAL_GPIO_WritePin>
 8006fb4:	e005      	b.n	8006fc2 <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fbc:	4824      	ldr	r0, [pc, #144]	; (8007050 <pl_yellow_LED_count+0x15c>)
 8006fbe:	f013 fe17 	bl	801abf0 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d006      	beq.n	8006fd6 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fce:	4820      	ldr	r0, [pc, #128]	; (8007050 <pl_yellow_LED_count+0x15c>)
 8006fd0:	f013 fe0e 	bl	801abf0 <HAL_GPIO_WritePin>
 8006fd4:	e005      	b.n	8006fe2 <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fdc:	481c      	ldr	r0, [pc, #112]	; (8007050 <pl_yellow_LED_count+0x15c>)
 8006fde:	f013 fe07 	bl	801abf0 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8006fe2:	7abb      	ldrb	r3, [r7, #10]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d006      	beq.n	8006ff6 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fee:	4818      	ldr	r0, [pc, #96]	; (8007050 <pl_yellow_LED_count+0x15c>)
 8006ff0:	f013 fdfe 	bl	801abf0 <HAL_GPIO_WritePin>
 8006ff4:	e005      	b.n	8007002 <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ffc:	4814      	ldr	r0, [pc, #80]	; (8007050 <pl_yellow_LED_count+0x15c>)
 8006ffe:	f013 fdf7 	bl	801abf0 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8007002:	7a7b      	ldrb	r3, [r7, #9]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d006      	beq.n	8007016 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8007008:	2201      	movs	r2, #1
 800700a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800700e:	4810      	ldr	r0, [pc, #64]	; (8007050 <pl_yellow_LED_count+0x15c>)
 8007010:	f013 fdee 	bl	801abf0 <HAL_GPIO_WritePin>
 8007014:	e005      	b.n	8007022 <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007016:	2200      	movs	r2, #0
 8007018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800701c:	480c      	ldr	r0, [pc, #48]	; (8007050 <pl_yellow_LED_count+0x15c>)
 800701e:	f013 fde7 	bl	801abf0 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8007022:	7a3b      	ldrb	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007028:	2201      	movs	r2, #1
 800702a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800702e:	4808      	ldr	r0, [pc, #32]	; (8007050 <pl_yellow_LED_count+0x15c>)
 8007030:	f013 fdde 	bl	801abf0 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8007034:	e005      	b.n	8007042 <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007036:	2200      	movs	r2, #0
 8007038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800703c:	4804      	ldr	r0, [pc, #16]	; (8007050 <pl_yellow_LED_count+0x15c>)
 800703e:	f013 fdd7 	bl	801abf0 <HAL_GPIO_WritePin>
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	48000800 	.word	0x48000800
 8007050:	48000400 	.word	0x48000400

08007054 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007066:	4803      	ldr	r0, [pc, #12]	; (8007074 <pl_r_blue_LED+0x20>)
 8007068:	f013 fdc2 	bl	801abf0 <HAL_GPIO_WritePin>
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	48000800 	.word	0x48000800

08007078 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	2104      	movs	r1, #4
 8007088:	4803      	ldr	r0, [pc, #12]	; (8007098 <pl_l_blue_LED+0x20>)
 800708a:	f013 fdb1 	bl	801abf0 <HAL_GPIO_WritePin>
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	48000400 	.word	0x48000400

0800709c <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	460a      	mov	r2, r1
 80070a6:	80fb      	strh	r3, [r7, #6]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80070ac:	2200      	movs	r2, #0
 80070ae:	2110      	movs	r1, #16
 80070b0:	4833      	ldr	r0, [pc, #204]	; (8007180 <encoder_read_byte_R+0xe4>)
 80070b2:	f013 fd9d 	bl	801abf0 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070bc:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80070be:	2300      	movs	r3, #0
 80070c0:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	e00d      	b.n	80070e4 <encoder_read_byte_R+0x48>
 80070c8:	88fa      	ldrh	r2, [r7, #6]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	fa42 f303 	asr.w	r3, r2, r3
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	8bfb      	ldrh	r3, [r7, #30]
 80070da:	4413      	add	r3, r2
 80070dc:	83fb      	strh	r3, [r7, #30]
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	3301      	adds	r3, #1
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b0e      	cmp	r3, #14
 80070e8:	ddee      	ble.n	80070c8 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 80070ea:	8bfb      	ldrh	r3, [r7, #30]
 80070ec:	03db      	lsls	r3, r3, #15
 80070ee:	b21a      	sxth	r2, r3
 80070f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	b21b      	sxth	r3, r3
 80070f8:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	0a1b      	lsrs	r3, r3, #8
 80070fe:	b29b      	uxth	r3, r3
 8007100:	b2db      	uxtb	r3, r3
 8007102:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 800710a:	f107 0110 	add.w	r1, r7, #16
 800710e:	2364      	movs	r3, #100	; 0x64
 8007110:	2202      	movs	r2, #2
 8007112:	481c      	ldr	r0, [pc, #112]	; (8007184 <encoder_read_byte_R+0xe8>)
 8007114:	f014 fe4f 	bl	801bdb6 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007118:	2201      	movs	r2, #1
 800711a:	2110      	movs	r1, #16
 800711c:	4818      	ldr	r0, [pc, #96]	; (8007180 <encoder_read_byte_R+0xe4>)
 800711e:	f013 fd67 	bl	801abf0 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e002      	b.n	800712e <encoder_read_byte_R+0x92>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	3301      	adds	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b95      	cmp	r3, #149	; 0x95
 8007132:	ddf9      	ble.n	8007128 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007134:	2200      	movs	r2, #0
 8007136:	2110      	movs	r1, #16
 8007138:	4811      	ldr	r0, [pc, #68]	; (8007180 <encoder_read_byte_R+0xe4>)
 800713a:	f013 fd59 	bl	801abf0 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 800713e:	88bb      	ldrh	r3, [r7, #4]
 8007140:	0a1b      	lsrs	r3, r3, #8
 8007142:	b29b      	uxth	r3, r3
 8007144:	b2db      	uxtb	r3, r3
 8007146:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007148:	88bb      	ldrh	r3, [r7, #4]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800714e:	f107 010c 	add.w	r1, r7, #12
 8007152:	2364      	movs	r3, #100	; 0x64
 8007154:	2202      	movs	r2, #2
 8007156:	480b      	ldr	r0, [pc, #44]	; (8007184 <encoder_read_byte_R+0xe8>)
 8007158:	f014 ff9b 	bl	801c092 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 800715c:	7b3b      	ldrb	r3, [r7, #12]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	b21a      	sxth	r2, r3
 8007162:	7b7b      	ldrb	r3, [r7, #13]
 8007164:	b21b      	sxth	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b21b      	sxth	r3, r3
 800716a:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800716c:	2201      	movs	r2, #1
 800716e:	2110      	movs	r1, #16
 8007170:	4803      	ldr	r0, [pc, #12]	; (8007180 <encoder_read_byte_R+0xe4>)
 8007172:	f013 fd3d 	bl	801abf0 <HAL_GPIO_WritePin>

	return data;
 8007176:	88bb      	ldrh	r3, [r7, #4]

}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	48000400 	.word	0x48000400
 8007184:	2000d9e0 	.word	0x2000d9e0

08007188 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	460a      	mov	r2, r1
 8007192:	80fb      	strh	r3, [r7, #6]
 8007194:	4613      	mov	r3, r2
 8007196:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007198:	2200      	movs	r2, #0
 800719a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800719e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071a2:	f013 fd25 	bl	801abf0 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071ac:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e00d      	b.n	80071d4 <encoder_read_byte_L+0x4c>
 80071b8:	88fa      	ldrh	r2, [r7, #6]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	fa42 f303 	asr.w	r3, r2, r3
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	8bfb      	ldrh	r3, [r7, #30]
 80071ca:	4413      	add	r3, r2
 80071cc:	83fb      	strh	r3, [r7, #30]
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	3301      	adds	r3, #1
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b0e      	cmp	r3, #14
 80071d8:	ddee      	ble.n	80071b8 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 80071da:	8bfb      	ldrh	r3, [r7, #30]
 80071dc:	03db      	lsls	r3, r3, #15
 80071de:	b21a      	sxth	r2, r3
 80071e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	b21b      	sxth	r3, r3
 80071e8:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80071ea:	88fb      	ldrh	r3, [r7, #6]
 80071ec:	0a1b      	lsrs	r3, r3, #8
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 80071f4:	88fb      	ldrh	r3, [r7, #6]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 80071fa:	f107 0110 	add.w	r1, r7, #16
 80071fe:	2364      	movs	r3, #100	; 0x64
 8007200:	2202      	movs	r2, #2
 8007202:	481e      	ldr	r0, [pc, #120]	; (800727c <encoder_read_byte_L+0xf4>)
 8007204:	f014 fdd7 	bl	801bdb6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007208:	2201      	movs	r2, #1
 800720a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800720e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007212:	f013 fced 	bl	801abf0 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	e002      	b.n	8007222 <encoder_read_byte_L+0x9a>
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3301      	adds	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b95      	cmp	r3, #149	; 0x95
 8007226:	ddf9      	ble.n	800721c <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800722e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007232:	f013 fcdd 	bl	801abf0 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007236:	88bb      	ldrh	r3, [r7, #4]
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	b29b      	uxth	r3, r3
 800723c:	b2db      	uxtb	r3, r3
 800723e:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007240:	88bb      	ldrh	r3, [r7, #4]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007246:	f107 010c 	add.w	r1, r7, #12
 800724a:	2364      	movs	r3, #100	; 0x64
 800724c:	2202      	movs	r2, #2
 800724e:	480b      	ldr	r0, [pc, #44]	; (800727c <encoder_read_byte_L+0xf4>)
 8007250:	f014 ff1f 	bl	801c092 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007254:	7b3b      	ldrb	r3, [r7, #12]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	b21a      	sxth	r2, r3
 800725a:	7b7b      	ldrb	r3, [r7, #13]
 800725c:	b21b      	sxth	r3, r3
 800725e:	4313      	orrs	r3, r2
 8007260:	b21b      	sxth	r3, r3
 8007262:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007264:	2201      	movs	r2, #1
 8007266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800726a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800726e:	f013 fcbf 	bl	801abf0 <HAL_GPIO_WritePin>

	return data;
 8007272:	88bb      	ldrh	r3, [r7, #4]

}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	2000d9e0 	.word	0x2000d9e0

08007280 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007284:	2100      	movs	r1, #0
 8007286:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800728a:	f7ff ff07 	bl	800709c <encoder_read_byte_R>
 800728e:	4603      	mov	r3, r0
 8007290:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800729c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80072e4 <AS5047_DataUpdate+0x64>
 80072a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80072a4:	eddf 6a10 	vldr	s13, [pc, #64]	; 80072e8 <AS5047_DataUpdate+0x68>
 80072a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072ac:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <AS5047_DataUpdate+0x6c>)
 80072ae:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80072b2:	2100      	movs	r1, #0
 80072b4:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80072b8:	f7ff ff66 	bl	8007188 <encoder_read_byte_L>
 80072bc:	4603      	mov	r3, r0
 80072be:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80072e4 <AS5047_DataUpdate+0x64>
 80072ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80072d2:	eddf 6a05 	vldr	s13, [pc, #20]	; 80072e8 <AS5047_DataUpdate+0x68>
 80072d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <AS5047_DataUpdate+0x70>)
 80072dc:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 80072e0:	bf00      	nop
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	43b40000 	.word	0x43b40000
 80072e8:	46800000 	.word	0x46800000
 80072ec:	200006d8 	.word	0x200006d8
 80072f0:	200006dc 	.word	0x200006dc

080072f4 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
		  record_out();
 80072f8:	f000 f91a 	bl	8007530 <record_out>
		  maze_display();
 80072fc:	f00d f826 	bl	801434c <maze_display>
		  flash_record_init();
 8007300:	f000 f9c2 	bl	8007688 <flash_record_init>
		  record_in();
 8007304:	f000 f858 	bl	80073b8 <record_in>
}
 8007308:	bf00      	nop
 800730a:	bd80      	pop	{r7, pc}

0800730c <eraseFlash>:


void eraseFlash( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 8007316:	2301      	movs	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 800731a:	23fe      	movs	r3, #254	; 0xfe
 800731c:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 800731e:	2301      	movs	r3, #1
 8007320:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 8007326:	1d3a      	adds	r2, r7, #4
 8007328:	f107 0308 	add.w	r3, r7, #8
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f013 f9b6 	bl	801a6a0 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007334:	bf00      	nop
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 800733c:	b5b0      	push	{r4, r5, r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 800734a:	f013 f8bd 	bl	801a4c8 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <writeFlash+0x1c>
 8007354:	f7ff ffda 	bl	800730c <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e00f      	b.n	800737e <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	17da      	asrs	r2, r3, #31
 8007362:	461c      	mov	r4, r3
 8007364:	4615      	mov	r5, r2
 8007366:	4622      	mov	r2, r4
 8007368:	462b      	mov	r3, r5
 800736a:	6979      	ldr	r1, [r7, #20]
 800736c:	2000      	movs	r0, #0
 800736e:	f013 f855 	bl	801a41c <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	3320      	adds	r3, #32
 8007376:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	3308      	adds	r3, #8
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4413      	add	r3, r2
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	429a      	cmp	r2, r3
 8007388:	d3e9      	bcc.n	800735e <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 800738a:	f013 f8bf 	bl	801a50c <HAL_FLASH_Lock>

}
 800738e:	bf00      	nop
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bdb0      	pop	{r4, r5, r7, pc}

08007396 <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4619      	mov	r1, r3
 80073a8:	68b8      	ldr	r0, [r7, #8]
 80073aa:	f017 fd37 	bl	801ee1c <memcpy>

}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <record_in>:


void record_in(void) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
	int t = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80073c2:	4b58      	ldr	r3, [pc, #352]	; (8007524 <record_in+0x16c>)
 80073c4:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 80073c6:	e017      	b.n	80073f8 <record_in+0x40>
		record.row[t] = wall.row[t];
 80073c8:	4a57      	ldr	r2, [pc, #348]	; (8007528 <record_in+0x170>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80073d0:	4a56      	ldr	r2, [pc, #344]	; (800752c <record_in+0x174>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 80073d8:	4a53      	ldr	r2, [pc, #332]	; (8007528 <record_in+0x170>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	330c      	adds	r3, #12
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	88d9      	ldrh	r1, [r3, #6]
 80073e4:	4a51      	ldr	r2, [pc, #324]	; (800752c <record_in+0x174>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	330c      	adds	r3, #12
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	4413      	add	r3, r2
 80073ee:	460a      	mov	r2, r1
 80073f0:	80da      	strh	r2, [r3, #6]
		t++;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3301      	adds	r3, #1
 80073f6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b0e      	cmp	r3, #14
 80073fc:	dde4      	ble.n	80073c8 <record_in+0x10>
	}
	t = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007402:	e01c      	b.n	800743e <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 8007404:	4a48      	ldr	r2, [pc, #288]	; (8007528 <record_in+0x170>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	331c      	adds	r3, #28
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	4413      	add	r3, r2
 800740e:	8899      	ldrh	r1, [r3, #4]
 8007410:	4a46      	ldr	r2, [pc, #280]	; (800752c <record_in+0x174>)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	331c      	adds	r3, #28
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	4413      	add	r3, r2
 800741a:	460a      	mov	r2, r1
 800741c:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 800741e:	4a42      	ldr	r2, [pc, #264]	; (8007528 <record_in+0x170>)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	332c      	adds	r3, #44	; 0x2c
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	4413      	add	r3, r2
 8007428:	8859      	ldrh	r1, [r3, #2]
 800742a:	4a40      	ldr	r2, [pc, #256]	; (800752c <record_in+0x174>)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	332c      	adds	r3, #44	; 0x2c
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	4413      	add	r3, r2
 8007434:	460a      	mov	r2, r1
 8007436:	805a      	strh	r2, [r3, #2]
		t++;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3301      	adds	r3, #1
 800743c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b0e      	cmp	r3, #14
 8007442:	dddf      	ble.n	8007404 <record_in+0x4c>
	}
	t = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8007448:	4b38      	ldr	r3, [pc, #224]	; (800752c <record_in+0x174>)
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	4619      	mov	r1, r3
 800744e:	2301      	movs	r3, #1
 8007450:	2201      	movs	r2, #1
 8007452:	6838      	ldr	r0, [r7, #0]
 8007454:	f7ff ff72 	bl	800733c <writeFlash>
	address+=16;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	3310      	adds	r3, #16
 800745c:	603b      	str	r3, [r7, #0]
	t=1;
 800745e:	2301      	movs	r3, #1
 8007460:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 8007462:	e00f      	b.n	8007484 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 8007464:	4a31      	ldr	r2, [pc, #196]	; (800752c <record_in+0x174>)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800746c:	4619      	mov	r1, r3
 800746e:	2300      	movs	r3, #0
 8007470:	2201      	movs	r2, #1
 8007472:	6838      	ldr	r0, [r7, #0]
 8007474:	f7ff ff62 	bl	800733c <writeFlash>
	address+=16;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	3310      	adds	r3, #16
 800747c:	603b      	str	r3, [r7, #0]
	t++;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3301      	adds	r3, #1
 8007482:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b0e      	cmp	r3, #14
 8007488:	ddec      	ble.n	8007464 <record_in+0xac>
	}

	t=0;
 800748a:	2300      	movs	r3, #0
 800748c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800748e:	e011      	b.n	80074b4 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 8007490:	4a26      	ldr	r2, [pc, #152]	; (800752c <record_in+0x174>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	330c      	adds	r3, #12
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4413      	add	r3, r2
 800749a:	88db      	ldrh	r3, [r3, #6]
 800749c:	4619      	mov	r1, r3
 800749e:	2300      	movs	r3, #0
 80074a0:	2201      	movs	r2, #1
 80074a2:	6838      	ldr	r0, [r7, #0]
 80074a4:	f7ff ff4a 	bl	800733c <writeFlash>
	address+=16;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	3310      	adds	r3, #16
 80074ac:	603b      	str	r3, [r7, #0]
	t++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3301      	adds	r3, #1
 80074b2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b0e      	cmp	r3, #14
 80074b8:	ddea      	ble.n	8007490 <record_in+0xd8>
	}

	t=0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074be:	e011      	b.n	80074e4 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80074c0:	4a1a      	ldr	r2, [pc, #104]	; (800752c <record_in+0x174>)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	331c      	adds	r3, #28
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	4413      	add	r3, r2
 80074ca:	889b      	ldrh	r3, [r3, #4]
 80074cc:	4619      	mov	r1, r3
 80074ce:	2300      	movs	r3, #0
 80074d0:	2201      	movs	r2, #1
 80074d2:	6838      	ldr	r0, [r7, #0]
 80074d4:	f7ff ff32 	bl	800733c <writeFlash>
	address+=16;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	3310      	adds	r3, #16
 80074dc:	603b      	str	r3, [r7, #0]
	t++;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3301      	adds	r3, #1
 80074e2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b0e      	cmp	r3, #14
 80074e8:	ddea      	ble.n	80074c0 <record_in+0x108>
	}

	t=0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074ee:	e011      	b.n	8007514 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 80074f0:	4a0e      	ldr	r2, [pc, #56]	; (800752c <record_in+0x174>)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	332c      	adds	r3, #44	; 0x2c
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	4619      	mov	r1, r3
 80074fe:	2300      	movs	r3, #0
 8007500:	2201      	movs	r2, #1
 8007502:	6838      	ldr	r0, [r7, #0]
 8007504:	f7ff ff1a 	bl	800733c <writeFlash>
	address+=16;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	3310      	adds	r3, #16
 800750c:	603b      	str	r3, [r7, #0]
	t++;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3301      	adds	r3, #1
 8007512:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b0e      	cmp	r3, #14
 8007518:	ddea      	ble.n	80074f0 <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 800751a:	bf00      	nop
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	0807f000 	.word	0x0807f000
 8007528:	20000c3c 	.word	0x20000c3c
 800752c:	20000cb4 	.word	0x20000cb4

08007530 <record_out>:


void record_out(void) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 8007536:	2300      	movs	r3, #0
 8007538:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 800753a:	4b50      	ldr	r3, [pc, #320]	; (800767c <record_out+0x14c>)
 800753c:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 800753e:	e00e      	b.n	800755e <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	4a4e      	ldr	r2, [pc, #312]	; (8007680 <record_out+0x150>)
 8007546:	4413      	add	r3, r2
 8007548:	2202      	movs	r2, #2
 800754a:	4619      	mov	r1, r3
 800754c:	6838      	ldr	r0, [r7, #0]
 800754e:	f7ff ff22 	bl	8007396 <loadFlash>
	address+=16;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	3310      	adds	r3, #16
 8007556:	603b      	str	r3, [r7, #0]
	t++;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3301      	adds	r3, #1
 800755c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b0e      	cmp	r3, #14
 8007562:	dded      	ble.n	8007540 <record_out+0x10>
	}

	t=0;
 8007564:	2300      	movs	r3, #0
 8007566:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007568:	e010      	b.n	800758c <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	330c      	adds	r3, #12
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	4a43      	ldr	r2, [pc, #268]	; (8007680 <record_out+0x150>)
 8007572:	4413      	add	r3, r2
 8007574:	3306      	adds	r3, #6
 8007576:	2202      	movs	r2, #2
 8007578:	4619      	mov	r1, r3
 800757a:	6838      	ldr	r0, [r7, #0]
 800757c:	f7ff ff0b 	bl	8007396 <loadFlash>
	address+=16;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	3310      	adds	r3, #16
 8007584:	603b      	str	r3, [r7, #0]
	t++;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3301      	adds	r3, #1
 800758a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b0e      	cmp	r3, #14
 8007590:	ddeb      	ble.n	800756a <record_out+0x3a>
	}

	t=0;
 8007592:	2300      	movs	r3, #0
 8007594:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007596:	e010      	b.n	80075ba <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	331c      	adds	r3, #28
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	4a38      	ldr	r2, [pc, #224]	; (8007680 <record_out+0x150>)
 80075a0:	4413      	add	r3, r2
 80075a2:	3304      	adds	r3, #4
 80075a4:	2202      	movs	r2, #2
 80075a6:	4619      	mov	r1, r3
 80075a8:	6838      	ldr	r0, [r7, #0]
 80075aa:	f7ff fef4 	bl	8007396 <loadFlash>
		address+=16;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	3310      	adds	r3, #16
 80075b2:	603b      	str	r3, [r7, #0]
		t++;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3301      	adds	r3, #1
 80075b8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b0e      	cmp	r3, #14
 80075be:	ddeb      	ble.n	8007598 <record_out+0x68>
	}

	t=0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075c4:	e010      	b.n	80075e8 <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	332c      	adds	r3, #44	; 0x2c
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	4a2c      	ldr	r2, [pc, #176]	; (8007680 <record_out+0x150>)
 80075ce:	4413      	add	r3, r2
 80075d0:	3302      	adds	r3, #2
 80075d2:	2202      	movs	r2, #2
 80075d4:	4619      	mov	r1, r3
 80075d6:	6838      	ldr	r0, [r7, #0]
 80075d8:	f7ff fedd 	bl	8007396 <loadFlash>
		address+=16;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	3310      	adds	r3, #16
 80075e0:	603b      	str	r3, [r7, #0]
		t++;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3301      	adds	r3, #1
 80075e6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b0e      	cmp	r3, #14
 80075ec:	ddeb      	ble.n	80075c6 <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075f2:	e017      	b.n	8007624 <record_out+0xf4>
		wall.row[t] = record.row[t];
 80075f4:	4a22      	ldr	r2, [pc, #136]	; (8007680 <record_out+0x150>)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80075fc:	4a21      	ldr	r2, [pc, #132]	; (8007684 <record_out+0x154>)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8007604:	4a1e      	ldr	r2, [pc, #120]	; (8007680 <record_out+0x150>)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	330c      	adds	r3, #12
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	4413      	add	r3, r2
 800760e:	88d9      	ldrh	r1, [r3, #6]
 8007610:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <record_out+0x154>)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	330c      	adds	r3, #12
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	460a      	mov	r2, r1
 800761c:	80da      	strh	r2, [r3, #6]
		t++;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3301      	adds	r3, #1
 8007622:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b0e      	cmp	r3, #14
 8007628:	dde4      	ble.n	80075f4 <record_out+0xc4>
	}
	t = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800762e:	e01c      	b.n	800766a <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <record_out+0x150>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	331c      	adds	r3, #28
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	4413      	add	r3, r2
 800763a:	8899      	ldrh	r1, [r3, #4]
 800763c:	4a11      	ldr	r2, [pc, #68]	; (8007684 <record_out+0x154>)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	331c      	adds	r3, #28
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	4413      	add	r3, r2
 8007646:	460a      	mov	r2, r1
 8007648:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 800764a:	4a0d      	ldr	r2, [pc, #52]	; (8007680 <record_out+0x150>)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	332c      	adds	r3, #44	; 0x2c
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	8859      	ldrh	r1, [r3, #2]
 8007656:	4a0b      	ldr	r2, [pc, #44]	; (8007684 <record_out+0x154>)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	332c      	adds	r3, #44	; 0x2c
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4413      	add	r3, r2
 8007660:	460a      	mov	r2, r1
 8007662:	805a      	strh	r2, [r3, #2]
		t++;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3301      	adds	r3, #1
 8007668:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b0e      	cmp	r3, #14
 800766e:	dddf      	ble.n	8007630 <record_out+0x100>
	}

	t = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	607b      	str	r3, [r7, #4]

}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	0807f000 	.word	0x0807f000
 8007680:	20000cb4 	.word	0x20000cb4
 8007684:	20000c3c 	.word	0x20000c3c

08007688 <flash_record_init>:

void flash_record_init(void){
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
	int t = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007692:	e013      	b.n	80076bc <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 8007694:	4a1e      	ldr	r2, [pc, #120]	; (8007710 <flash_record_init+0x88>)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f240 11e3 	movw	r1, #483	; 0x1e3
 800769c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	b299      	uxth	r1, r3
 80076a8:	4a19      	ldr	r2, [pc, #100]	; (8007710 <flash_record_init+0x88>)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	330c      	adds	r3, #12
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	460a      	mov	r2, r1
 80076b4:	80da      	strh	r2, [r3, #6]
		t++;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3301      	adds	r3, #1
 80076ba:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b0e      	cmp	r3, #14
 80076c0:	dde8      	ble.n	8007694 <flash_record_init+0xc>
	}
	t = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076c6:	e018      	b.n	80076fa <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	b299      	uxth	r1, r3
 80076d0:	4a0f      	ldr	r2, [pc, #60]	; (8007710 <flash_record_init+0x88>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	331c      	adds	r3, #28
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	4413      	add	r3, r2
 80076da:	460a      	mov	r2, r1
 80076dc:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	b299      	uxth	r1, r3
 80076e6:	4a0a      	ldr	r2, [pc, #40]	; (8007710 <flash_record_init+0x88>)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	332c      	adds	r3, #44	; 0x2c
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4413      	add	r3, r2
 80076f0:	460a      	mov	r2, r1
 80076f2:	805a      	strh	r2, [r3, #2]
		t++;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3301      	adds	r3, #1
 80076f8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b0e      	cmp	r3, #14
 80076fe:	dde3      	ble.n	80076c8 <flash_record_init+0x40>
	}

}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20000c3c 	.word	0x20000c3c

08007714 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800771e:	2200      	movs	r2, #0
 8007720:	2110      	movs	r1, #16
 8007722:	4810      	ldr	r0, [pc, #64]	; (8007764 <gyro_read_byte+0x50>)
 8007724:	f013 fa64 	bl	801abf0 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800772e:	b2db      	uxtb	r3, r3
 8007730:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007732:	f107 010f 	add.w	r1, r7, #15
 8007736:	2364      	movs	r3, #100	; 0x64
 8007738:	2201      	movs	r2, #1
 800773a:	480b      	ldr	r0, [pc, #44]	; (8007768 <gyro_read_byte+0x54>)
 800773c:	f014 fb3b 	bl	801bdb6 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8007740:	f107 010e 	add.w	r1, r7, #14
 8007744:	2364      	movs	r3, #100	; 0x64
 8007746:	2201      	movs	r2, #1
 8007748:	4807      	ldr	r0, [pc, #28]	; (8007768 <gyro_read_byte+0x54>)
 800774a:	f014 fca2 	bl	801c092 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800774e:	2201      	movs	r2, #1
 8007750:	2110      	movs	r1, #16
 8007752:	4804      	ldr	r0, [pc, #16]	; (8007764 <gyro_read_byte+0x50>)
 8007754:	f013 fa4c 	bl	801abf0 <HAL_GPIO_WritePin>

	return val;
 8007758:	7bbb      	ldrb	r3, [r7, #14]

}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	48000800 	.word	0x48000800
 8007768:	2000d97c 	.word	0x2000d97c

0800776c <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	460a      	mov	r2, r1
 8007776:	71fb      	strb	r3, [r7, #7]
 8007778:	4613      	mov	r3, r2
 800777a:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007782:	b2db      	uxtb	r3, r3
 8007784:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8007786:	2200      	movs	r2, #0
 8007788:	2110      	movs	r1, #16
 800778a:	480c      	ldr	r0, [pc, #48]	; (80077bc <gyro_write_byte+0x50>)
 800778c:	f013 fa30 	bl	801abf0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007790:	f107 010f 	add.w	r1, r7, #15
 8007794:	2364      	movs	r3, #100	; 0x64
 8007796:	2201      	movs	r2, #1
 8007798:	4809      	ldr	r0, [pc, #36]	; (80077c0 <gyro_write_byte+0x54>)
 800779a:	f014 fb0c 	bl	801bdb6 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 800779e:	1db9      	adds	r1, r7, #6
 80077a0:	2364      	movs	r3, #100	; 0x64
 80077a2:	2201      	movs	r2, #1
 80077a4:	4806      	ldr	r0, [pc, #24]	; (80077c0 <gyro_write_byte+0x54>)
 80077a6:	f014 fb06 	bl	801bdb6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80077aa:	2201      	movs	r2, #1
 80077ac:	2110      	movs	r1, #16
 80077ae:	4803      	ldr	r0, [pc, #12]	; (80077bc <gyro_write_byte+0x50>)
 80077b0:	f013 fa1e 	bl	801abf0 <HAL_GPIO_WritePin>

}
 80077b4:	bf00      	nop
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	48000800 	.word	0x48000800
 80077c0:	2000d97c 	.word	0x2000d97c

080077c4 <pl_gyro_init>:

void pl_gyro_init(void)

{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 80077ce:	2075      	movs	r0, #117	; 0x75
 80077d0:	f7ff ffa0 	bl	8007714 <gyro_read_byte>
 80077d4:	4603      	mov	r3, r0
 80077d6:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	4619      	mov	r1, r3
 80077dc:	481b      	ldr	r0, [pc, #108]	; (800784c <pl_gyro_init+0x88>)
 80077de:	f017 ff9d 	bl	801f71c <iprintf>

// recheck

	if (who_am_i != 0x98) {
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	2b98      	cmp	r3, #152	; 0x98
 80077e6:	d00e      	beq.n	8007806 <pl_gyro_init+0x42>

		HAL_Delay(100);
 80077e8:	2064      	movs	r0, #100	; 0x64
 80077ea:	f010 f845 	bl	8017878 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 80077ee:	2075      	movs	r0, #117	; 0x75
 80077f0:	f7ff ff90 	bl	8007714 <gyro_read_byte>
 80077f4:	4603      	mov	r3, r0
 80077f6:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	2b98      	cmp	r3, #152	; 0x98
 80077fc:	d003      	beq.n	8007806 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 80077fe:	4814      	ldr	r0, [pc, #80]	; (8007850 <pl_gyro_init+0x8c>)
 8007800:	f017 ff8c 	bl	801f71c <iprintf>
 8007804:	e7fb      	b.n	80077fe <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8007806:	2100      	movs	r1, #0
 8007808:	206b      	movs	r0, #107	; 0x6b
 800780a:	f7ff ffaf 	bl	800776c <gyro_write_byte>

	HAL_Delay(50);
 800780e:	2032      	movs	r0, #50	; 0x32
 8007810:	f010 f832 	bl	8017878 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007814:	2100      	movs	r1, #0
 8007816:	206c      	movs	r0, #108	; 0x6c
 8007818:	f7ff ffa8 	bl	800776c <gyro_write_byte>

	HAL_Delay(50);
 800781c:	2032      	movs	r0, #50	; 0x32
 800781e:	f010 f82b 	bl	8017878 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8007822:	2118      	movs	r1, #24
 8007824:	201b      	movs	r0, #27
 8007826:	f7ff ffa1 	bl	800776c <gyro_write_byte>

	HAL_Delay(50);
 800782a:	2032      	movs	r0, #50	; 0x32
 800782c:	f010 f824 	bl	8017878 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8007830:	2118      	movs	r1, #24
 8007832:	201c      	movs	r0, #28
 8007834:	f7ff ff9a 	bl	800776c <gyro_write_byte>

	HAL_Delay(50);
 8007838:	2032      	movs	r0, #50	; 0x32
 800783a:	f010 f81d 	bl	8017878 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 800783e:	4b05      	ldr	r3, [pc, #20]	; (8007854 <pl_gyro_init+0x90>)
 8007840:	2201      	movs	r2, #1
 8007842:	701a      	strb	r2, [r3, #0]

}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	08021eb8 	.word	0x08021eb8
 8007850:	08021ecc 	.word	0x08021ecc
 8007854:	200006e0 	.word	0x200006e0

08007858 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007858:	b590      	push	{r4, r7, lr}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff ff55 	bl	8007714 <gyro_read_byte>
 800786a:	4603      	mov	r3, r0
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	3301      	adds	r3, #1
 8007874:	b2db      	uxtb	r3, r3
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff ff4c 	bl	8007714 <gyro_read_byte>
 800787c:	4603      	mov	r3, r0
 800787e:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007880:	4323      	orrs	r3, r4
 8007882:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007884:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007890:	eddf 6a06 	vldr	s13, [pc, #24]	; 80078ac <ICM20602_GYRO_READ+0x54>
 8007894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007898:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	ee07 3a90 	vmov	s15, r3

}
 80078a2:	eeb0 0a67 	vmov.f32	s0, s15
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd90      	pop	{r4, r7, pc}
 80078ac:	41833333 	.word	0x41833333

080078b0 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff ff29 	bl	8007714 <gyro_read_byte>
 80078c2:	4603      	mov	r3, r0
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	3301      	adds	r3, #1
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff ff20 	bl	8007714 <gyro_read_byte>
 80078d4:	4603      	mov	r3, r0
 80078d6:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80078d8:	4323      	orrs	r3, r4
 80078da:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 80078dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078e8:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007904 <ICM20602_ACCEL_READ+0x54>
 80078ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078f0:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	ee07 3a90 	vmov	s15, r3

}
 80078fa:	eeb0 0a67 	vmov.f32	s0, s15
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	bd90      	pop	{r4, r7, pc}
 8007904:	45000000 	.word	0x45000000

08007908 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 800790c:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <ICM20602_DataUpdate+0x40>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d117      	bne.n	8007944 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007914:	2045      	movs	r0, #69	; 0x45
 8007916:	f7ff ff9f 	bl	8007858 <ICM20602_GYRO_READ>
 800791a:	eef0 7a40 	vmov.f32	s15, s0
 800791e:	4b0b      	ldr	r3, [pc, #44]	; (800794c <ICM20602_DataUpdate+0x44>)
 8007920:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007924:	2047      	movs	r0, #71	; 0x47
 8007926:	f7ff ff97 	bl	8007858 <ICM20602_GYRO_READ>
 800792a:	eef0 7a40 	vmov.f32	s15, s0
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <ICM20602_DataUpdate+0x44>)
 8007930:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007934:	203b      	movs	r0, #59	; 0x3b
 8007936:	f7ff ffbb 	bl	80078b0 <ICM20602_ACCEL_READ>
 800793a:	eef0 7a40 	vmov.f32	s15, s0
 800793e:	4b03      	ldr	r3, [pc, #12]	; (800794c <ICM20602_DataUpdate+0x44>)
 8007940:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8007944:	bf00      	nop
 8007946:	bd80      	pop	{r7, pc}
 8007948:	200006e0 	.word	0x200006e0
 800794c:	200006e4 	.word	0x200006e4

08007950 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007954:	480f      	ldr	r0, [pc, #60]	; (8007994 <pl_motor_init+0x44>)
 8007956:	f015 f8f3 	bl	801cb40 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 800795a:	480e      	ldr	r0, [pc, #56]	; (8007994 <pl_motor_init+0x44>)
 800795c:	f00f f97a 	bl	8016c54 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007960:	480d      	ldr	r0, [pc, #52]	; (8007998 <pl_motor_init+0x48>)
 8007962:	f015 f8ed 	bl	801cb40 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8007966:	480c      	ldr	r0, [pc, #48]	; (8007998 <pl_motor_init+0x48>)
 8007968:	f00f f974 	bl	8016c54 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 800796c:	2001      	movs	r0, #1
 800796e:	f000 f81f 	bl	80079b0 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8007972:	4b08      	ldr	r3, [pc, #32]	; (8007994 <pl_motor_init+0x44>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	225a      	movs	r2, #90	; 0x5a
 8007978:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 800797a:	2001      	movs	r0, #1
 800797c:	f000 f840 	bl	8007a00 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007980:	4b04      	ldr	r3, [pc, #16]	; (8007994 <pl_motor_init+0x44>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	225a      	movs	r2, #90	; 0x5a
 8007986:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8007988:	4b03      	ldr	r3, [pc, #12]	; (8007998 <pl_motor_init+0x48>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	221e      	movs	r2, #30
 800798e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007990:	bf00      	nop
 8007992:	bd80      	pop	{r7, pc}
 8007994:	2000da94 	.word	0x2000da94
 8007998:	2000dae0 	.word	0x2000dae0

0800799c <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d819      	bhi.n	80079f2 <pl_L_DriveMotor_mode+0x42>
 80079be:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <pl_L_DriveMotor_mode+0x14>)
 80079c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	080079d5 	.word	0x080079d5
 80079cc:	080079e3 	.word	0x080079e3
 80079d0:	080079f1 	.word	0x080079f1
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 80079d4:	2200      	movs	r2, #0
 80079d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80079da:	4808      	ldr	r0, [pc, #32]	; (80079fc <pl_L_DriveMotor_mode+0x4c>)
 80079dc:	f013 f908 	bl	801abf0 <HAL_GPIO_WritePin>
break;
 80079e0:	e007      	b.n	80079f2 <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 80079e2:	2201      	movs	r2, #1
 80079e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80079e8:	4804      	ldr	r0, [pc, #16]	; (80079fc <pl_L_DriveMotor_mode+0x4c>)
 80079ea:	f013 f901 	bl	801abf0 <HAL_GPIO_WritePin>
break;
 80079ee:	e000      	b.n	80079f2 <pl_L_DriveMotor_mode+0x42>
break;
 80079f0:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	48000800 	.word	0x48000800

08007a00 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d817      	bhi.n	8007a3e <pl_R_DriveMotor_mode+0x3e>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <pl_R_DriveMotor_mode+0x14>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a3d 	.word	0x08007a3d
 8007a18:	08007a25 	.word	0x08007a25
 8007a1c:	08007a31 	.word	0x08007a31
 8007a20:	08007a3d 	.word	0x08007a3d
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007a24:	2201      	movs	r2, #1
 8007a26:	2180      	movs	r1, #128	; 0x80
 8007a28:	4807      	ldr	r0, [pc, #28]	; (8007a48 <pl_R_DriveMotor_mode+0x48>)
 8007a2a:	f013 f8e1 	bl	801abf0 <HAL_GPIO_WritePin>
break;
 8007a2e:	e006      	b.n	8007a3e <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007a30:	2200      	movs	r2, #0
 8007a32:	2180      	movs	r1, #128	; 0x80
 8007a34:	4804      	ldr	r0, [pc, #16]	; (8007a48 <pl_R_DriveMotor_mode+0x48>)
 8007a36:	f013 f8db 	bl	801abf0 <HAL_GPIO_WritePin>
break;
 8007a3a:	e000      	b.n	8007a3e <pl_R_DriveMotor_mode+0x3e>
break;
 8007a3c:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	48000400 	.word	0x48000400

08007a4c <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007a50:	2108      	movs	r1, #8
 8007a52:	4804      	ldr	r0, [pc, #16]	; (8007a64 <pl_DriveMotor_start+0x18>)
 8007a54:	f015 f93c 	bl	801ccd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4802      	ldr	r0, [pc, #8]	; (8007a64 <pl_DriveMotor_start+0x18>)
 8007a5c:	f015 f938 	bl	801ccd0 <HAL_TIM_PWM_Start>
}
 8007a60:	bf00      	nop
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	2000da94 	.word	0x2000da94

08007a68 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007a6c:	2108      	movs	r1, #8
 8007a6e:	4804      	ldr	r0, [pc, #16]	; (8007a80 <pl_DriveMotor_stop+0x18>)
 8007a70:	f015 fa3a 	bl	801cee8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007a74:	2100      	movs	r1, #0
 8007a76:	4802      	ldr	r0, [pc, #8]	; (8007a80 <pl_DriveMotor_stop+0x18>)
 8007a78:	f015 fa36 	bl	801cee8 <HAL_TIM_PWM_Stop>
}
 8007a7c:	bf00      	nop
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	2000da94 	.word	0x2000da94

08007a84 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8007a8e:	4b07      	ldr	r3, [pc, #28]	; (8007aac <pl_DriveMotor_duty+0x28>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <pl_DriveMotor_duty+0x28>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	2000da94 	.word	0x2000da94

08007ab0 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4802      	ldr	r0, [pc, #8]	; (8007ac0 <pl_FunMotor_start+0x10>)
 8007ab8:	f015 f90a 	bl	801ccd0 <HAL_TIM_PWM_Start>
}
 8007abc:	bf00      	nop
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	2000dae0 	.word	0x2000dae0

08007ac4 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4802      	ldr	r0, [pc, #8]	; (8007ad4 <pl_FunMotor_stop+0x10>)
 8007acc:	f015 fa0c 	bl	801cee8 <HAL_TIM_PWM_Stop>
}
 8007ad0:	bf00      	nop
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	2000dae0 	.word	0x2000dae0

08007ad8 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ae6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007b1c <pl_FunMotor_duty+0x44>
 8007aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007af2:	ee17 3a90 	vmov	r3, s15
 8007af6:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007af8:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <pl_FunMotor_duty+0x48>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2264      	movs	r2, #100	; 0x64
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <pl_FunMotor_duty+0x48>)
 8007b02:	2264      	movs	r2, #100	; 0x64
 8007b04:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007b06:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <pl_FunMotor_duty+0x48>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	42c80000 	.word	0x42c80000
 8007b20:	2000dae0 	.word	0x2000dae0

08007b24 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
	AD_step=0;
 8007b28:	4b04      	ldr	r3, [pc, #16]	; (8007b3c <pl_sensor_init+0x18>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007b2e:	217f      	movs	r1, #127	; 0x7f
 8007b30:	4803      	ldr	r0, [pc, #12]	; (8007b40 <pl_sensor_init+0x1c>)
 8007b32:	f011 ff1b 	bl	801996c <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007b36:	bf00      	nop
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000708 	.word	0x20000708
 8007b40:	20000734 	.word	0x20000734
 8007b44:	00000000 	.word	0x00000000

08007b48 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007b4e:	483c      	ldr	r0, [pc, #240]	; (8007c40 <pl_getbatt+0xf8>)
 8007b50:	f010 fafa 	bl	8018148 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007b54:	2132      	movs	r1, #50	; 0x32
 8007b56:	483a      	ldr	r0, [pc, #232]	; (8007c40 <pl_getbatt+0xf8>)
 8007b58:	f010 fbf4 	bl	8018344 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007b5c:	4838      	ldr	r0, [pc, #224]	; (8007c40 <pl_getbatt+0xf8>)
 8007b5e:	f010 fe10 	bl	8018782 <HAL_ADC_GetValue>
 8007b62:	4603      	mov	r3, r0
 8007b64:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007b66:	4836      	ldr	r0, [pc, #216]	; (8007c40 <pl_getbatt+0xf8>)
 8007b68:	f010 fbb8 	bl	80182dc <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b76:	ee17 0a90 	vmov	r0, s15
 8007b7a:	f7f8 fd0d 	bl	8000598 <__aeabi_f2d>
 8007b7e:	a326      	add	r3, pc, #152	; (adr r3, 8007c18 <pl_getbatt+0xd0>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fd60 	bl	8000648 <__aeabi_dmul>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4619      	mov	r1, r3
 8007b90:	a323      	add	r3, pc, #140	; (adr r3, 8007c20 <pl_getbatt+0xd8>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fe81 	bl	800089c <__aeabi_ddiv>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f04f 0200 	mov.w	r2, #0
 8007ba6:	4b27      	ldr	r3, [pc, #156]	; (8007c44 <pl_getbatt+0xfc>)
 8007ba8:	f7f8 fd4e 	bl	8000648 <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	4b23      	ldr	r3, [pc, #140]	; (8007c48 <pl_getbatt+0x100>)
 8007bba:	f7f8 fe6f 	bl	800089c <__aeabi_ddiv>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	a318      	add	r3, pc, #96	; (adr r3, 8007c28 <pl_getbatt+0xe0>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fd3c 	bl	8000648 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	a315      	add	r3, pc, #84	; (adr r3, 8007c30 <pl_getbatt+0xe8>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fd33 	bl	8000648 <__aeabi_dmul>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4610      	mov	r0, r2
 8007be8:	4619      	mov	r1, r3
 8007bea:	a313      	add	r3, pc, #76	; (adr r3, 8007c38 <pl_getbatt+0xf0>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fe54 	bl	800089c <__aeabi_ddiv>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	f7f8 fffc 	bl	8000bf8 <__aeabi_d2f>
 8007c00:	4603      	mov	r3, r0
 8007c02:	603b      	str	r3, [r7, #0]
return batt;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	ee07 3a90 	vmov	s15, r3
}
 8007c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	f3af 8000 	nop.w
 8007c18:	66666666 	.word	0x66666666
 8007c1c:	400a6666 	.word	0x400a6666
 8007c20:	00000000 	.word	0x00000000
 8007c24:	40affe00 	.word	0x40affe00
 8007c28:	66666666 	.word	0x66666666
 8007c2c:	3ff26666 	.word	0x3ff26666
 8007c30:	9999999a 	.word	0x9999999a
 8007c34:	400d9999 	.word	0x400d9999
 8007c38:	ae147ae1 	.word	0xae147ae1
 8007c3c:	400ee147 	.word	0x400ee147
 8007c40:	20000734 	.word	0x20000734
 8007c44:	40340000 	.word	0x40340000
 8007c48:	40240000 	.word	0x40240000
 8007c4c:	00000000 	.word	0x00000000

08007c50 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007c56:	4882      	ldr	r0, [pc, #520]	; (8007e60 <pl_callback_getSensor+0x210>)
 8007c58:	f010 fd32 	bl	80186c0 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007c5c:	4b81      	ldr	r3, [pc, #516]	; (8007e64 <pl_callback_getSensor+0x214>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	f200 80d9 	bhi.w	8007e18 <pl_callback_getSensor+0x1c8>
 8007c66:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <pl_callback_getSensor+0x1c>)
 8007c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6c:	08007c81 	.word	0x08007c81
 8007c70:	08007cb9 	.word	0x08007cb9
 8007c74:	08007d19 	.word	0x08007d19
 8007c78:	08007d59 	.word	0x08007d59
 8007c7c:	08007e19 	.word	0x08007e19
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007c80:	2201      	movs	r2, #1
 8007c82:	2102      	movs	r1, #2
 8007c84:	4878      	ldr	r0, [pc, #480]	; (8007e68 <pl_callback_getSensor+0x218>)
 8007c86:	f012 ffb3 	bl	801abf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2110      	movs	r1, #16
 8007c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c92:	f012 ffad 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c96:	2200      	movs	r2, #0
 8007c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c9c:	4873      	ldr	r0, [pc, #460]	; (8007e6c <pl_callback_getSensor+0x21c>)
 8007c9e:	f012 ffa7 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007ca6:	e002      	b.n	8007cae <pl_callback_getSensor+0x5e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3301      	adds	r3, #1
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cb4:	ddf8      	ble.n	8007ca8 <pl_callback_getSensor+0x58>
		break;
 8007cb6:	e0af      	b.n	8007e18 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007cb8:	4b6d      	ldr	r3, [pc, #436]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007cba:	885a      	ldrh	r2, [r3, #2]
 8007cbc:	4b6d      	ldr	r3, [pc, #436]	; (8007e74 <pl_callback_getSensor+0x224>)
 8007cbe:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007cc0:	4b6b      	ldr	r3, [pc, #428]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007cc2:	889a      	ldrh	r2, [r3, #4]
 8007cc4:	4b6b      	ldr	r3, [pc, #428]	; (8007e74 <pl_callback_getSensor+0x224>)
 8007cc6:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007cc8:	4b69      	ldr	r3, [pc, #420]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007cca:	88da      	ldrh	r2, [r3, #6]
 8007ccc:	4b6a      	ldr	r3, [pc, #424]	; (8007e78 <pl_callback_getSensor+0x228>)
 8007cce:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007cd0:	4b67      	ldr	r3, [pc, #412]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007cd2:	891a      	ldrh	r2, [r3, #8]
 8007cd4:	4b68      	ldr	r3, [pc, #416]	; (8007e78 <pl_callback_getSensor+0x228>)
 8007cd6:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007cd8:	4b65      	ldr	r3, [pc, #404]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007cda:	895a      	ldrh	r2, [r3, #10]
 8007cdc:	4b66      	ldr	r3, [pc, #408]	; (8007e78 <pl_callback_getSensor+0x228>)
 8007cde:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	4860      	ldr	r0, [pc, #384]	; (8007e68 <pl_callback_getSensor+0x218>)
 8007ce6:	f012 ff83 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007cea:	2201      	movs	r2, #1
 8007cec:	2110      	movs	r1, #16
 8007cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cf2:	f012 ff7d 	bl	801abf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cfc:	485b      	ldr	r0, [pc, #364]	; (8007e6c <pl_callback_getSensor+0x21c>)
 8007cfe:	f012 ff77 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007d06:	e002      	b.n	8007d0e <pl_callback_getSensor+0xbe>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	607b      	str	r3, [r7, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d14:	ddf8      	ble.n	8007d08 <pl_callback_getSensor+0xb8>
		break;
 8007d16:	e07f      	b.n	8007e18 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007d18:	4b55      	ldr	r3, [pc, #340]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007d1a:	88da      	ldrh	r2, [r3, #6]
 8007d1c:	4b55      	ldr	r3, [pc, #340]	; (8007e74 <pl_callback_getSensor+0x224>)
 8007d1e:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007d20:	2200      	movs	r2, #0
 8007d22:	2102      	movs	r1, #2
 8007d24:	4850      	ldr	r0, [pc, #320]	; (8007e68 <pl_callback_getSensor+0x218>)
 8007d26:	f012 ff63 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2110      	movs	r1, #16
 8007d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d32:	f012 ff5d 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007d36:	2201      	movs	r2, #1
 8007d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d3c:	484b      	ldr	r0, [pc, #300]	; (8007e6c <pl_callback_getSensor+0x21c>)
 8007d3e:	f012 ff57 	bl	801abf0 <HAL_GPIO_WritePin>
		j=0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007d46:	e002      	b.n	8007d4e <pl_callback_getSensor+0xfe>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	607b      	str	r3, [r7, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d54:	ddf8      	ble.n	8007d48 <pl_callback_getSensor+0xf8>
		break;
 8007d56:	e05f      	b.n	8007e18 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007d58:	4b45      	ldr	r3, [pc, #276]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007d5a:	885a      	ldrh	r2, [r3, #2]
 8007d5c:	4b46      	ldr	r3, [pc, #280]	; (8007e78 <pl_callback_getSensor+0x228>)
 8007d5e:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007d60:	4b43      	ldr	r3, [pc, #268]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007d62:	889a      	ldrh	r2, [r3, #4]
 8007d64:	4b44      	ldr	r3, [pc, #272]	; (8007e78 <pl_callback_getSensor+0x228>)
 8007d66:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007d68:	4b41      	ldr	r3, [pc, #260]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007d6a:	891a      	ldrh	r2, [r3, #8]
 8007d6c:	4b41      	ldr	r3, [pc, #260]	; (8007e74 <pl_callback_getSensor+0x224>)
 8007d6e:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007d70:	4b3f      	ldr	r3, [pc, #252]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007d72:	895a      	ldrh	r2, [r3, #10]
 8007d74:	4b3f      	ldr	r3, [pc, #252]	; (8007e74 <pl_callback_getSensor+0x224>)
 8007d76:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2102      	movs	r1, #2
 8007d7c:	483a      	ldr	r0, [pc, #232]	; (8007e68 <pl_callback_getSensor+0x218>)
 8007d7e:	f012 ff37 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007d82:	2200      	movs	r2, #0
 8007d84:	2110      	movs	r1, #16
 8007d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d8a:	f012 ff31 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d94:	4835      	ldr	r0, [pc, #212]	; (8007e6c <pl_callback_getSensor+0x21c>)
 8007d96:	f012 ff2b 	bl	801abf0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007d9e:	e002      	b.n	8007da6 <pl_callback_getSensor+0x156>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3301      	adds	r3, #1
 8007da4:	607b      	str	r3, [r7, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b32      	cmp	r3, #50	; 0x32
 8007daa:	ddf9      	ble.n	8007da0 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007dac:	4b30      	ldr	r3, [pc, #192]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007db2:	887b      	ldrh	r3, [r7, #2]
 8007db4:	ee07 3a90 	vmov	s15, r3
 8007db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbc:	ee17 0a90 	vmov	r0, s15
 8007dc0:	f7f8 fbea 	bl	8000598 <__aeabi_f2d>
 8007dc4:	a320      	add	r3, pc, #128	; (adr r3, 8007e48 <pl_callback_getSensor+0x1f8>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fc3d 	bl	8000648 <__aeabi_dmul>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	a31e      	add	r3, pc, #120	; (adr r3, 8007e50 <pl_callback_getSensor+0x200>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f7f8 fd5e 	bl	800089c <__aeabi_ddiv>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4610      	mov	r0, r2
 8007de6:	4619      	mov	r1, r3
 8007de8:	a31b      	add	r3, pc, #108	; (adr r3, 8007e58 <pl_callback_getSensor+0x208>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	f7f8 fc2b 	bl	8000648 <__aeabi_dmul>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4610      	mov	r0, r2
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f04f 0200 	mov.w	r2, #0
 8007dfe:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <pl_callback_getSensor+0x22c>)
 8007e00:	f7f8 fd4c 	bl	800089c <__aeabi_ddiv>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	f7f8 fef4 	bl	8000bf8 <__aeabi_d2f>
 8007e10:	4603      	mov	r3, r0
 8007e12:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <pl_callback_getSensor+0x230>)
 8007e14:	6013      	str	r3, [r2, #0]
		break;
 8007e16:	bf00      	nop

		break;
	}


	AD_step++;
 8007e18:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <pl_callback_getSensor+0x214>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <pl_callback_getSensor+0x214>)
 8007e22:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <pl_callback_getSensor+0x214>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d005      	beq.n	8007e38 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007e2c:	2206      	movs	r2, #6
 8007e2e:	4910      	ldr	r1, [pc, #64]	; (8007e70 <pl_callback_getSensor+0x220>)
 8007e30:	480b      	ldr	r0, [pc, #44]	; (8007e60 <pl_callback_getSensor+0x210>)
 8007e32:	f010 fb7b 	bl	801852c <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007e36:	e002      	b.n	8007e3e <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <pl_callback_getSensor+0x214>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	66666666 	.word	0x66666666
 8007e4c:	400a6666 	.word	0x400a6666
 8007e50:	00000000 	.word	0x00000000
 8007e54:	40affe00 	.word	0x40affe00
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	4062c000 	.word	0x4062c000
 8007e60:	20000734 	.word	0x20000734
 8007e64:	20000708 	.word	0x20000708
 8007e68:	48000400 	.word	0x48000400
 8007e6c:	48000800 	.word	0x48000800
 8007e70:	200006fc 	.word	0x200006fc
 8007e74:	2000070c 	.word	0x2000070c
 8007e78:	20000718 	.word	0x20000718
 8007e7c:	40490000 	.word	0x40490000
 8007e80:	20000724 	.word	0x20000724

08007e84 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007e88:	2206      	movs	r2, #6
 8007e8a:	4903      	ldr	r1, [pc, #12]	; (8007e98 <pl_interupt_getSensor+0x14>)
 8007e8c:	4803      	ldr	r0, [pc, #12]	; (8007e9c <pl_interupt_getSensor+0x18>)
 8007e8e:	f010 fb4d 	bl	801852c <HAL_ADC_Start_DMA>

}
 8007e92:	bf00      	nop
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	200006fc 	.word	0x200006fc
 8007e9c:	20000734 	.word	0x20000734

08007ea0 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
	count_mode=0;
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <pl_timer_init+0x1c>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <pl_timer_init+0x20>)
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007eb2:	4804      	ldr	r0, [pc, #16]	; (8007ec4 <pl_timer_init+0x24>)
 8007eb4:	f014 fe44 	bl	801cb40 <HAL_TIM_Base_Start_IT>
}
 8007eb8:	bf00      	nop
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20000730 	.word	0x20000730
 8007ec0:	2000072c 	.word	0x2000072c
 8007ec4:	2000da48 	.word	0x2000da48

08007ec8 <interrupt_timer>:

void interrupt_timer(void){
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
	g_timCount++;
 8007ecc:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <interrupt_timer+0x48>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	4a0f      	ldr	r2, [pc, #60]	; (8007f10 <interrupt_timer+0x48>)
 8007ed4:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <interrupt_timer+0x4c>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d112      	bne.n	8007f04 <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007ede:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <interrupt_timer+0x50>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7f8 fb58 	bl	8000598 <__aeabi_f2d>
 8007ee8:	a307      	add	r3, pc, #28	; (adr r3, 8007f08 <interrupt_timer+0x40>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 f9f5 	bl	80002dc <__adddf3>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f7f8 fe7d 	bl	8000bf8 <__aeabi_d2f>
 8007efe:	4603      	mov	r3, r0
 8007f00:	4a05      	ldr	r2, [pc, #20]	; (8007f18 <interrupt_timer+0x50>)
 8007f02:	6013      	str	r3, [r2, #0]
	}

}
 8007f04:	bf00      	nop
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f0c:	3f50624d 	.word	0x3f50624d
 8007f10:	20000728 	.word	0x20000728
 8007f14:	20000730 	.word	0x20000730
 8007f18:	2000072c 	.word	0x2000072c

08007f1c <tic_timer>:

void tic_timer(void){
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
	count_mode=1;
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <tic_timer+0x1c>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <tic_timer+0x20>)
 8007f28:	f04f 0200 	mov.w	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
}
 8007f2e:	bf00      	nop
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	20000730 	.word	0x20000730
 8007f3c:	2000072c 	.word	0x2000072c

08007f40 <toc_timer>:

float toc_timer(void){
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8007f46:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <toc_timer+0x30>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8007f4c:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <toc_timer+0x34>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007f52:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <toc_timer+0x30>)
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
	return timer;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	ee07 3a90 	vmov	s15, r3
}
 8007f60:	eeb0 0a67 	vmov.f32	s0, s15
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	2000072c 	.word	0x2000072c
 8007f74:	20000730 	.word	0x20000730

08007f78 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8007f78:	b5b0      	push	{r4, r5, r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007f80:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <wait_ms+0x80>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <wait_ms+0x84>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007f8e:	bf00      	nop
 8007f90:	4b19      	ldr	r3, [pc, #100]	; (8007ff8 <wait_ms+0x80>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9c:	ee17 0a90 	vmov	r0, s15
 8007fa0:	f7f8 fafa 	bl	8000598 <__aeabi_f2d>
 8007fa4:	a312      	add	r3, pc, #72	; (adr r3, 8007ff0 <wait_ms+0x78>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 fb4d 	bl	8000648 <__aeabi_dmul>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	a30e      	add	r3, pc, #56	; (adr r3, 8007ff0 <wait_ms+0x78>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 fc6e 	bl	800089c <__aeabi_ddiv>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	461d      	mov	r5, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7f8 fac3 	bl	8000554 <__aeabi_ui2d>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	f7f8 fda9 	bl	8000b2c <__aeabi_dcmplt>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1d7      	bne.n	8007f90 <wait_ms+0x18>
        }

}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8007fea:	bf00      	nop
 8007fec:	f3af 8000 	nop.w
 8007ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007ff4:	3f50624d 	.word	0x3f50624d
 8007ff8:	20000728 	.word	0x20000728
 8007ffc:	2000da48 	.word	0x2000da48

08008000 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8008000:	b5b0      	push	{r4, r5, r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008008:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <wait_ms_NoReset+0x78>)
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 800800e:	bf00      	nop
 8008010:	4b19      	ldr	r3, [pc, #100]	; (8008078 <wait_ms_NoReset+0x78>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	ee07 3a90 	vmov	s15, r3
 8008018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801c:	ee17 0a90 	vmov	r0, s15
 8008020:	f7f8 faba 	bl	8000598 <__aeabi_f2d>
 8008024:	a312      	add	r3, pc, #72	; (adr r3, 8008070 <wait_ms_NoReset+0x70>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f7f8 fb0d 	bl	8000648 <__aeabi_dmul>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4610      	mov	r0, r2
 8008034:	4619      	mov	r1, r3
 8008036:	a30e      	add	r3, pc, #56	; (adr r3, 8008070 <wait_ms_NoReset+0x70>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f7f8 fc2e 	bl	800089c <__aeabi_ddiv>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4614      	mov	r4, r2
 8008046:	461d      	mov	r5, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7f8 fa83 	bl	8000554 <__aeabi_ui2d>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4620      	mov	r0, r4
 8008054:	4629      	mov	r1, r5
 8008056:	f7f8 fd69 	bl	8000b2c <__aeabi_dcmplt>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1d7      	bne.n	8008010 <wait_ms_NoReset+0x10>
        }

}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bdb0      	pop	{r4, r5, r7, pc}
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w
 8008070:	d2f1a9fc 	.word	0xd2f1a9fc
 8008074:	3f50624d 	.word	0x3f50624d
 8008078:	20000728 	.word	0x20000728

0800807c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08c      	sub	sp, #48	; 0x30
 8008080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800808e:	1d3b      	adds	r3, r7, #4
 8008090:	2220      	movs	r2, #32
 8008092:	2100      	movs	r1, #0
 8008094:	4618      	mov	r0, r3
 8008096:	f016 fecf 	bl	801ee38 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800809a:	4b56      	ldr	r3, [pc, #344]	; (80081f4 <MX_ADC1_Init+0x178>)
 800809c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80080a2:	4b54      	ldr	r3, [pc, #336]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80080a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80080aa:	4b52      	ldr	r3, [pc, #328]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80080b0:	4b50      	ldr	r3, [pc, #320]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80080b6:	4b4f      	ldr	r3, [pc, #316]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80080bc:	4b4d      	ldr	r3, [pc, #308]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080be:	2201      	movs	r2, #1
 80080c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80080c2:	4b4c      	ldr	r3, [pc, #304]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080c4:	2208      	movs	r2, #8
 80080c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80080c8:	4b4a      	ldr	r3, [pc, #296]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80080ce:	4b49      	ldr	r3, [pc, #292]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80080d4:	4b47      	ldr	r3, [pc, #284]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080d6:	2206      	movs	r2, #6
 80080d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80080da:	4b46      	ldr	r3, [pc, #280]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80080e2:	4b44      	ldr	r3, [pc, #272]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80080e8:	4b42      	ldr	r3, [pc, #264]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80080ee:	4b41      	ldr	r3, [pc, #260]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80080f6:	4b3f      	ldr	r3, [pc, #252]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80080fc:	4b3d      	ldr	r3, [pc, #244]	; (80081f4 <MX_ADC1_Init+0x178>)
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008104:	483b      	ldr	r0, [pc, #236]	; (80081f4 <MX_ADC1_Init+0x178>)
 8008106:	f00f fe6b 	bl	8017de0 <HAL_ADC_Init>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008110:	f001 fecb 	bl	8009eaa <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008114:	2300      	movs	r3, #0
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800811c:	4619      	mov	r1, r3
 800811e:	4835      	ldr	r0, [pc, #212]	; (80081f4 <MX_ADC1_Init+0x178>)
 8008120:	f011 fcb8 	bl	8019a94 <HAL_ADCEx_MultiModeConfigChannel>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800812a:	f001 febe 	bl	8009eaa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800812e:	4b32      	ldr	r3, [pc, #200]	; (80081f8 <MX_ADC1_Init+0x17c>)
 8008130:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008132:	2306      	movs	r3, #6
 8008134:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8008136:	2301      	movs	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800813a:	237f      	movs	r3, #127	; 0x7f
 800813c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800813e:	2304      	movs	r3, #4
 8008140:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008146:	1d3b      	adds	r3, r7, #4
 8008148:	4619      	mov	r1, r3
 800814a:	482a      	ldr	r0, [pc, #168]	; (80081f4 <MX_ADC1_Init+0x178>)
 800814c:	f010 fd7e 	bl	8018c4c <HAL_ADC_ConfigChannel>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008156:	f001 fea8 	bl	8009eaa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800815a:	4b28      	ldr	r3, [pc, #160]	; (80081fc <MX_ADC1_Init+0x180>)
 800815c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800815e:	230c      	movs	r3, #12
 8008160:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4823      	ldr	r0, [pc, #140]	; (80081f4 <MX_ADC1_Init+0x178>)
 8008168:	f010 fd70 	bl	8018c4c <HAL_ADC_ConfigChannel>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008172:	f001 fe9a 	bl	8009eaa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008176:	4b22      	ldr	r3, [pc, #136]	; (8008200 <MX_ADC1_Init+0x184>)
 8008178:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800817a:	2312      	movs	r3, #18
 800817c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800817e:	1d3b      	adds	r3, r7, #4
 8008180:	4619      	mov	r1, r3
 8008182:	481c      	ldr	r0, [pc, #112]	; (80081f4 <MX_ADC1_Init+0x178>)
 8008184:	f010 fd62 	bl	8018c4c <HAL_ADC_ConfigChannel>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800818e:	f001 fe8c 	bl	8009eaa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <MX_ADC1_Init+0x188>)
 8008194:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008196:	2318      	movs	r3, #24
 8008198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800819a:	1d3b      	adds	r3, r7, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4815      	ldr	r0, [pc, #84]	; (80081f4 <MX_ADC1_Init+0x178>)
 80081a0:	f010 fd54 	bl	8018c4c <HAL_ADC_ConfigChannel>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80081aa:	f001 fe7e 	bl	8009eaa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80081ae:	4b16      	ldr	r3, [pc, #88]	; (8008208 <MX_ADC1_Init+0x18c>)
 80081b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80081b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081b8:	1d3b      	adds	r3, r7, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	480d      	ldr	r0, [pc, #52]	; (80081f4 <MX_ADC1_Init+0x178>)
 80081be:	f010 fd45 	bl	8018c4c <HAL_ADC_ConfigChannel>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80081c8:	f001 fe6f 	bl	8009eaa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <MX_ADC1_Init+0x190>)
 80081ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80081d0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80081d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081d6:	1d3b      	adds	r3, r7, #4
 80081d8:	4619      	mov	r1, r3
 80081da:	4806      	ldr	r0, [pc, #24]	; (80081f4 <MX_ADC1_Init+0x178>)
 80081dc:	f010 fd36 	bl	8018c4c <HAL_ADC_ConfigChannel>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80081e6:	f001 fe60 	bl	8009eaa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80081ea:	bf00      	nop
 80081ec:	3730      	adds	r7, #48	; 0x30
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000734 	.word	0x20000734
 80081f8:	2e300800 	.word	0x2e300800
 80081fc:	3ef08000 	.word	0x3ef08000
 8008200:	10c00010 	.word	0x10c00010
 8008204:	0c900008 	.word	0x0c900008
 8008208:	08600004 	.word	0x08600004
 800820c:	04300002 	.word	0x04300002

08008210 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b09e      	sub	sp, #120	; 0x78
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008218:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	605a      	str	r2, [r3, #4]
 8008222:	609a      	str	r2, [r3, #8]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008228:	f107 0314 	add.w	r3, r7, #20
 800822c:	2250      	movs	r2, #80	; 0x50
 800822e:	2100      	movs	r1, #0
 8008230:	4618      	mov	r0, r3
 8008232:	f016 fe01 	bl	801ee38 <memset>
  if(adcHandle->Instance==ADC1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800823e:	f040 8082 	bne.w	8008346 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008246:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008248:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800824c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800824e:	f107 0314 	add.w	r3, r7, #20
 8008252:	4618      	mov	r0, r3
 8008254:	f013 fac8 	bl	801b7e8 <HAL_RCCEx_PeriphCLKConfig>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800825e:	f001 fe24 	bl	8009eaa <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008262:	4b3b      	ldr	r3, [pc, #236]	; (8008350 <HAL_ADC_MspInit+0x140>)
 8008264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008266:	4a3a      	ldr	r2, [pc, #232]	; (8008350 <HAL_ADC_MspInit+0x140>)
 8008268:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800826c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800826e:	4b38      	ldr	r3, [pc, #224]	; (8008350 <HAL_ADC_MspInit+0x140>)
 8008270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800827a:	4b35      	ldr	r3, [pc, #212]	; (8008350 <HAL_ADC_MspInit+0x140>)
 800827c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827e:	4a34      	ldr	r2, [pc, #208]	; (8008350 <HAL_ADC_MspInit+0x140>)
 8008280:	f043 0301 	orr.w	r3, r3, #1
 8008284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008286:	4b32      	ldr	r3, [pc, #200]	; (8008350 <HAL_ADC_MspInit+0x140>)
 8008288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008292:	4b2f      	ldr	r3, [pc, #188]	; (8008350 <HAL_ADC_MspInit+0x140>)
 8008294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008296:	4a2e      	ldr	r2, [pc, #184]	; (8008350 <HAL_ADC_MspInit+0x140>)
 8008298:	f043 0302 	orr.w	r3, r3, #2
 800829c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800829e:	4b2c      	ldr	r3, [pc, #176]	; (8008350 <HAL_ADC_MspInit+0x140>)
 80082a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	60bb      	str	r3, [r7, #8]
 80082a8:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 80082aa:	230f      	movs	r3, #15
 80082ac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082ae:	2303      	movs	r3, #3
 80082b0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80082ba:	4619      	mov	r1, r3
 80082bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082c0:	f012 fb14 	bl	801a8ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80082c4:	f241 0301 	movw	r3, #4097	; 0x1001
 80082c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082ca:	2303      	movs	r3, #3
 80082cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80082d6:	4619      	mov	r1, r3
 80082d8:	481e      	ldr	r0, [pc, #120]	; (8008354 <HAL_ADC_MspInit+0x144>)
 80082da:	f012 fb07 	bl	801a8ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80082de:	4b1e      	ldr	r3, [pc, #120]	; (8008358 <HAL_ADC_MspInit+0x148>)
 80082e0:	4a1e      	ldr	r2, [pc, #120]	; (800835c <HAL_ADC_MspInit+0x14c>)
 80082e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80082e4:	4b1c      	ldr	r3, [pc, #112]	; (8008358 <HAL_ADC_MspInit+0x148>)
 80082e6:	2205      	movs	r2, #5
 80082e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80082ea:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <HAL_ADC_MspInit+0x148>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80082f0:	4b19      	ldr	r3, [pc, #100]	; (8008358 <HAL_ADC_MspInit+0x148>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80082f6:	4b18      	ldr	r3, [pc, #96]	; (8008358 <HAL_ADC_MspInit+0x148>)
 80082f8:	2280      	movs	r2, #128	; 0x80
 80082fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80082fc:	4b16      	ldr	r3, [pc, #88]	; (8008358 <HAL_ADC_MspInit+0x148>)
 80082fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008302:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008304:	4b14      	ldr	r3, [pc, #80]	; (8008358 <HAL_ADC_MspInit+0x148>)
 8008306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800830a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800830c:	4b12      	ldr	r3, [pc, #72]	; (8008358 <HAL_ADC_MspInit+0x148>)
 800830e:	2220      	movs	r2, #32
 8008310:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <HAL_ADC_MspInit+0x148>)
 8008314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008318:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800831a:	480f      	ldr	r0, [pc, #60]	; (8008358 <HAL_ADC_MspInit+0x148>)
 800831c:	f011 fdb2 	bl	8019e84 <HAL_DMA_Init>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8008326:	f001 fdc0 	bl	8009eaa <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a0a      	ldr	r2, [pc, #40]	; (8008358 <HAL_ADC_MspInit+0x148>)
 800832e:	655a      	str	r2, [r3, #84]	; 0x54
 8008330:	4a09      	ldr	r2, [pc, #36]	; (8008358 <HAL_ADC_MspInit+0x148>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8008336:	2200      	movs	r2, #0
 8008338:	2100      	movs	r1, #0
 800833a:	2012      	movs	r0, #18
 800833c:	f011 fd6d 	bl	8019e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008340:	2012      	movs	r0, #18
 8008342:	f011 fd84 	bl	8019e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008346:	bf00      	nop
 8008348:	3778      	adds	r7, #120	; 0x78
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40021000 	.word	0x40021000
 8008354:	48000400 	.word	0x48000400
 8008358:	200007a0 	.word	0x200007a0
 800835c:	40020008 	.word	0x40020008

08008360 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008368:	f7ff fc72 	bl	8007c50 <pl_callback_getSensor>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008374:	b084      	sub	sp, #16
 8008376:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	f107 0420 	add.w	r4, r7, #32
 8008382:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008386:	edd7 7a08 	vldr	s15, [r7, #32]
 800838a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800838e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008392:	f2c0 819d 	blt.w	80086d0 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008396:	4bcd      	ldr	r3, [pc, #820]	; (80086cc <cal_table+0x358>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b06      	cmp	r3, #6
 800839e:	f200 833a 	bhi.w	8008a16 <cal_table+0x6a2>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <cal_table+0x34>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	08008a09 	.word	0x08008a09
 80083ac:	080083c5 	.word	0x080083c5
 80083b0:	08008537 	.word	0x08008537
 80083b4:	08008655 	.word	0x08008655
 80083b8:	08008a09 	.word	0x08008a09
 80083bc:	08008681 	.word	0x08008681
 80083c0:	080086a7 	.word	0x080086a7
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80083c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c6:	ed93 7a00 	vldr	s14, [r3]
 80083ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d6:	db0a      	blt.n	80083ee <cal_table+0x7a>
				target->velocity = input.count_velocity;
 80083d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80083de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e0:	f04f 0200 	mov.w	r2, #0
 80083e4:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80083e6:	4bb9      	ldr	r3, [pc, #740]	; (80086cc <cal_table+0x358>)
 80083e8:	2202      	movs	r2, #2
 80083ea:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 80083ec:	e313      	b.n	8008a16 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 80083ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80083f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f4:	edd3 7a00 	vldr	s15, [r3]
 80083f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	edd3 7a00 	vldr	s15, [r3]
 8008402:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008406:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800840a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800840e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008412:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008416:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800841a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800841e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008422:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008426:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800842a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800842e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008432:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800843a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843e:	d900      	bls.n	8008442 <cal_table+0xce>
		break;
 8008440:	e2e9      	b.n	8008a16 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	edd3 7a00 	vldr	s15, [r3]
 8008448:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800844c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844e:	edd3 7a00 	vldr	s15, [r3]
 8008452:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008456:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800845a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800845e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008462:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008466:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800846a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800846e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008472:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008476:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800847a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800847e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008486:	edd7 7a08 	vldr	s15, [r7, #32]
 800848a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800848e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008490:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8008494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008498:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800849c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f8 f879 	bl	8000598 <__aeabi_f2d>
 80084a6:	4604      	mov	r4, r0
 80084a8:	460d      	mov	r5, r1
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7f8 f873 	bl	8000598 <__aeabi_f2d>
 80084b2:	f04f 0200 	mov.w	r2, #0
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	f7f8 f8c5 	bl	8000648 <__aeabi_dmul>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4690      	mov	r8, r2
 80084c4:	4699      	mov	r9, r3
 80084c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80084ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80084ce:	ee17 0a90 	vmov	r0, s15
 80084d2:	f7f8 f861 	bl	8000598 <__aeabi_f2d>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f8 f8b3 	bl	8000648 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4620      	mov	r0, r4
 80084e8:	4629      	mov	r1, r5
 80084ea:	f7f7 fef5 	bl	80002d8 <__aeabi_dsub>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4610      	mov	r0, r2
 80084f4:	4619      	mov	r1, r3
 80084f6:	f7f8 fb7f 	bl	8000bf8 <__aeabi_d2f>
 80084fa:	4602      	mov	r2, r0
 80084fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fe:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	ed93 7a00 	vldr	s14, [r3]
 8008506:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800850a:	edd7 7a01 	vldr	s15, [r7, #4]
 800850e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851c:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008520:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008524:	eef1 7a67 	vneg.f32	s15, s15
 8008528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800852e:	4b67      	ldr	r3, [pc, #412]	; (80086cc <cal_table+0x358>)
 8008530:	2203      	movs	r2, #3
 8008532:	701a      	strb	r2, [r3, #0]
		break;
 8008534:	e26f      	b.n	8008a16 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 8008536:	ed97 7a08 	vldr	s14, [r7, #32]
 800853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008540:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008544:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008548:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800854c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008550:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008554:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008558:	ee66 7a27 	vmul.f32	s15, s12, s15
 800855c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008560:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008564:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008568:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800856c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008578:	d900      	bls.n	800857c <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 800857a:	e24c      	b.n	8008a16 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800857c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008582:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008586:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800858a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800858e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008592:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008596:	ee66 7a27 	vmul.f32	s15, s12, s15
 800859a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800859e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80085a2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80085a6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80085aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80085ae:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80085b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80085b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80085ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085bc:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80085c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c4:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80085c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f7 ffe3 	bl	8000598 <__aeabi_f2d>
 80085d2:	4604      	mov	r4, r0
 80085d4:	460d      	mov	r5, r1
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	4618      	mov	r0, r3
 80085da:	f7f7 ffdd 	bl	8000598 <__aeabi_f2d>
 80085de:	f04f 0200 	mov.w	r2, #0
 80085e2:	f04f 0300 	mov.w	r3, #0
 80085e6:	f7f8 f82f 	bl	8000648 <__aeabi_dmul>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4690      	mov	r8, r2
 80085f0:	4699      	mov	r9, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7f7 ffd0 	bl	8000598 <__aeabi_f2d>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4640      	mov	r0, r8
 80085fe:	4649      	mov	r1, r9
 8008600:	f7f8 f822 	bl	8000648 <__aeabi_dmul>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4620      	mov	r0, r4
 800860a:	4629      	mov	r1, r5
 800860c:	f7f7 fe64 	bl	80002d8 <__aeabi_dsub>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4610      	mov	r0, r2
 8008616:	4619      	mov	r1, r3
 8008618:	f7f8 faee 	bl	8000bf8 <__aeabi_d2f>
 800861c:	4602      	mov	r2, r0
 800861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008620:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	ed93 7a00 	vldr	s14, [r3]
 8008628:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800862c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 800863e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008642:	eef1 7a67 	vneg.f32	s15, s15
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800864c:	4b1f      	ldr	r3, [pc, #124]	; (80086cc <cal_table+0x358>)
 800864e:	2203      	movs	r2, #3
 8008650:	701a      	strb	r2, [r3, #0]
		break;
 8008652:	e1e0      	b.n	8008a16 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8008654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008656:	ed93 7a00 	vldr	s14, [r3]
 800865a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800865e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008666:	d900      	bls.n	800866a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008668:	e1d5      	b.n	8008a16 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800866a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800866c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008672:	f04f 0200 	mov.w	r2, #0
 8008676:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008678:	4b14      	ldr	r3, [pc, #80]	; (80086cc <cal_table+0x358>)
 800867a:	2204      	movs	r2, #4
 800867c:	701a      	strb	r2, [r3, #0]
		break;
 800867e:	e1ca      	b.n	8008a16 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008682:	ed93 7a02 	vldr	s14, [r3, #8]
 8008686:	edd7 7a08 	vldr	s15, [r7, #32]
 800868a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800868e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008692:	da00      	bge.n	8008696 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008694:	e1bf      	b.n	8008a16 <cal_table+0x6a2>
			target->acceleration = 0;
 8008696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800869e:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <cal_table+0x358>)
 80086a0:	2204      	movs	r2, #4
 80086a2:	701a      	strb	r2, [r3, #0]
		break;
 80086a4:	e1b7      	b.n	8008a16 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80086ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80086b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b8:	da00      	bge.n	80086bc <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80086ba:	e1ac      	b.n	8008a16 <cal_table+0x6a2>
			target->acceleration = 0;
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80086c4:	4b01      	ldr	r3, [pc, #4]	; (80086cc <cal_table+0x358>)
 80086c6:	2204      	movs	r2, #4
 80086c8:	701a      	strb	r2, [r3, #0]
		break;
 80086ca:	e1a4      	b.n	8008a16 <cal_table+0x6a2>
 80086cc:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 80086d0:	4bce      	ldr	r3, [pc, #824]	; (8008a0c <cal_table+0x698>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b06      	cmp	r3, #6
 80086d8:	f200 819d 	bhi.w	8008a16 <cal_table+0x6a2>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <cal_table+0x370>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	08008a15 	.word	0x08008a15
 80086e8:	08008701 	.word	0x08008701
 80086ec:	08008873 	.word	0x08008873
 80086f0:	08008989 	.word	0x08008989
 80086f4:	080089b5 	.word	0x080089b5
 80086f8:	080089bd 	.word	0x080089bd
 80086fc:	080089e3 	.word	0x080089e3
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	ed93 7a00 	vldr	s14, [r3]
 8008706:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800870a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800870e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008712:	d80a      	bhi.n	800872a <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8008714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	f04f 0200 	mov.w	r2, #0
 8008720:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008722:	4bba      	ldr	r3, [pc, #744]	; (8008a0c <cal_table+0x698>)
 8008724:	2202      	movs	r2, #2
 8008726:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008728:	e175      	b.n	8008a16 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800872a:	edd7 7a08 	vldr	s15, [r7, #32]
 800872e:	eeb1 7a67 	vneg.f32	s14, s15
 8008732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008734:	edd3 7a00 	vldr	s15, [r3]
 8008738:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	edd3 7a00 	vldr	s15, [r3]
 8008742:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008746:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800874a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800874e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008752:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008756:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800875a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800875e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008762:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008766:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800876a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800876e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008772:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877e:	d900      	bls.n	8008782 <cal_table+0x40e>
		break;
 8008780:	e149      	b.n	8008a16 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8008782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008784:	edd3 7a00 	vldr	s15, [r3]
 8008788:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	edd3 7a00 	vldr	s15, [r3]
 8008792:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008796:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800879a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800879e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087a2:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80087a6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80087aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087b2:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 80087b6:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80087ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80087be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80087c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80087c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80087ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d4:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 80087d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087dc:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80087e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7f7 fed7 	bl	8000598 <__aeabi_f2d>
 80087ea:	4604      	mov	r4, r0
 80087ec:	460d      	mov	r5, r1
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f7 fed1 	bl	8000598 <__aeabi_f2d>
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	f04f 0300 	mov.w	r3, #0
 80087fe:	f7f7 ff23 	bl	8000648 <__aeabi_dmul>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4690      	mov	r8, r2
 8008808:	4699      	mov	r9, r3
 800880a:	edd7 7a01 	vldr	s15, [r7, #4]
 800880e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008812:	ee17 0a90 	vmov	r0, s15
 8008816:	f7f7 febf 	bl	8000598 <__aeabi_f2d>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4640      	mov	r0, r8
 8008820:	4649      	mov	r1, r9
 8008822:	f7f7 ff11 	bl	8000648 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fd55 	bl	80002dc <__adddf3>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f7f8 f9dd 	bl	8000bf8 <__aeabi_d2f>
 800883e:	4602      	mov	r2, r0
 8008840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008842:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8008844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008846:	ed93 7a00 	vldr	s14, [r3]
 800884a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800884e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008852:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800885a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008860:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8008864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008868:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 800886a:	4b68      	ldr	r3, [pc, #416]	; (8008a0c <cal_table+0x698>)
 800886c:	2203      	movs	r2, #3
 800886e:	701a      	strb	r2, [r3, #0]
		break;
 8008870:	e0d1      	b.n	8008a16 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	ed93 7a02 	vldr	s14, [r3, #8]
 8008878:	edd7 7a08 	vldr	s15, [r7, #32]
 800887c:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008880:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008884:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008888:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 800888c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008890:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008894:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008898:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800889c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80088a0:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80088a4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088a8:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80088ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b4:	d900      	bls.n	80088b8 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 80088b6:	e0ae      	b.n	8008a16 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80088be:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80088c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80088c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80088ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80088ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80088d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80088da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80088de:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80088e2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088e6:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80088ea:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80088ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80088f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80088f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f8:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80088fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008900:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	4618      	mov	r0, r3
 800890a:	f7f7 fe45 	bl	8000598 <__aeabi_f2d>
 800890e:	4604      	mov	r4, r0
 8008910:	460d      	mov	r5, r1
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	4618      	mov	r0, r3
 8008916:	f7f7 fe3f 	bl	8000598 <__aeabi_f2d>
 800891a:	f04f 0200 	mov.w	r2, #0
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	f7f7 fe91 	bl	8000648 <__aeabi_dmul>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4690      	mov	r8, r2
 800892c:	4699      	mov	r9, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7f7 fe32 	bl	8000598 <__aeabi_f2d>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4640      	mov	r0, r8
 800893a:	4649      	mov	r1, r9
 800893c:	f7f7 fe84 	bl	8000648 <__aeabi_dmul>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f7f7 fcc8 	bl	80002dc <__adddf3>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4610      	mov	r0, r2
 8008952:	4619      	mov	r1, r3
 8008954:	f7f8 f950 	bl	8000bf8 <__aeabi_d2f>
 8008958:	4602      	mov	r2, r0
 800895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895c:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	ed93 7a00 	vldr	s14, [r3]
 8008964:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008968:	edd7 7a01 	vldr	s15, [r7, #4]
 800896c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008976:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 800897a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897e:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008980:	4b22      	ldr	r3, [pc, #136]	; (8008a0c <cal_table+0x698>)
 8008982:	2203      	movs	r2, #3
 8008984:	701a      	strb	r2, [r3, #0]
		break;
 8008986:	e046      	b.n	8008a16 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898a:	ed93 7a00 	vldr	s14, [r3]
 800898e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899a:	da00      	bge.n	800899e <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800899c:	e03b      	b.n	8008a16 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800899e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80089a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a6:	f04f 0200 	mov.w	r2, #0
 80089aa:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80089ac:	4b17      	ldr	r3, [pc, #92]	; (8008a0c <cal_table+0x698>)
 80089ae:	2204      	movs	r2, #4
 80089b0:	701a      	strb	r2, [r3, #0]
		break;
 80089b2:	e030      	b.n	8008a16 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 80089b4:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <cal_table+0x69c>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	701a      	strb	r2, [r3, #0]
		break;
 80089ba:	e02c      	b.n	8008a16 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80089bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089be:	ed93 7a02 	vldr	s14, [r3, #8]
 80089c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80089c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ce:	d900      	bls.n	80089d2 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80089d0:	e021      	b.n	8008a16 <cal_table+0x6a2>
			target->acceleration = 0;
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80089da:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <cal_table+0x698>)
 80089dc:	2204      	movs	r2, #4
 80089de:	701a      	strb	r2, [r3, #0]
		break;
 80089e0:	e019      	b.n	8008a16 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80089e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80089ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	d900      	bls.n	80089f8 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80089f6:	e00e      	b.n	8008a16 <cal_table+0x6a2>
			target->acceleration = 0;
 80089f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fa:	f04f 0200 	mov.w	r2, #0
 80089fe:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a00:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <cal_table+0x698>)
 8008a02:	2204      	movs	r2, #4
 8008a04:	701a      	strb	r2, [r3, #0]
		break;
 8008a06:	e006      	b.n	8008a16 <cal_table+0x6a2>
		break;
 8008a08:	bf00      	nop
 8008a0a:	e004      	b.n	8008a16 <cal_table+0x6a2>
 8008a0c:	20000804 	.word	0x20000804
 8008a10:	20000805 	.word	0x20000805
		break;
 8008a14:	bf00      	nop
	}

}

}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008a20:	b004      	add	sp, #16
 8008a22:	4770      	bx	lr
 8008a24:	0000      	movs	r0, r0
	...

08008a28 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a2c:	b08c      	sub	sp, #48	; 0x30
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	eef0 6a40 	vmov.f32	s13, s0
 8008a34:	eeb0 7a60 	vmov.f32	s14, s1
 8008a38:	eef0 7a41 	vmov.f32	s15, s2
 8008a3c:	6138      	str	r0, [r7, #16]
 8008a3e:	edc7 6a05 	vstr	s13, [r7, #20]
 8008a42:	ed87 7a06 	vstr	s14, [r7, #24]
 8008a46:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 8008a4a:	4be7      	ldr	r3, [pc, #924]	; (8008de8 <cal_mollifier_table+0x3c0>)
 8008a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 8008a4e:	4be7      	ldr	r3, [pc, #924]	; (8008dec <cal_mollifier_table+0x3c4>)
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8008a52:	4be7      	ldr	r3, [pc, #924]	; (8008df0 <cal_mollifier_table+0x3c8>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7f7 fd9e 	bl	8000598 <__aeabi_f2d>
 8008a5c:	a3da      	add	r3, pc, #872	; (adr r3, 8008dc8 <cal_mollifier_table+0x3a0>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f7f7 fc3b 	bl	80002dc <__adddf3>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7f8 f8c3 	bl	8000bf8 <__aeabi_d2f>
 8008a72:	4603      	mov	r3, r0
 8008a74:	4ade      	ldr	r2, [pc, #888]	; (8008df0 <cal_mollifier_table+0x3c8>)
 8008a76:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a7c:	eef0 7ae7 	vabs.f32	s15, s15
 8008a80:	ee17 0a90 	vmov	r0, s15
 8008a84:	f7f7 fd88 	bl	8000598 <__aeabi_f2d>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	f7f7 fc26 	bl	80002dc <__adddf3>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4610      	mov	r0, r2
 8008a96:	4619      	mov	r1, r3
 8008a98:	a3cd      	add	r3, pc, #820	; (adr r3, 8008dd0 <cal_mollifier_table+0x3a8>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fefd 	bl	800089c <__aeabi_ddiv>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	a3cb      	add	r3, pc, #812	; (adr r3, 8008dd8 <cal_mollifier_table+0x3b0>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f7f7 fdca 	bl	8000648 <__aeabi_dmul>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4614      	mov	r4, r2
 8008aba:	461d      	mov	r5, r3
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f7 fd6a 	bl	8000598 <__aeabi_f2d>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	4629      	mov	r1, r5
 8008acc:	f7f7 fee6 	bl	800089c <__aeabi_ddiv>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	f7f8 f88e 	bl	8000bf8 <__aeabi_d2f>
 8008adc:	4603      	mov	r3, r0
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008ae0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ae4:	eef1 7a67 	vneg.f32	s15, s15
 8008ae8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008aec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008af0:	4bbf      	ldr	r3, [pc, #764]	; (8008df0 <cal_mollifier_table+0x3c8>)
 8008af2:	edd3 7a00 	vldr	s15, [r3]
 8008af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afe:	f140 8698 	bpl.w	8009832 <cal_mollifier_table+0xe0a>
 8008b02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008b0e:	4bb8      	ldr	r3, [pc, #736]	; (8008df0 <cal_mollifier_table+0x3c8>)
 8008b10:	edd3 7a00 	vldr	s15, [r3]
 8008b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1c:	f340 8689 	ble.w	8009832 <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008b26:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b32:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	ee17 0a90 	vmov	r0, s15
 8008b3e:	f7f7 fd2b 	bl	8000598 <__aeabi_f2d>
 8008b42:	a3a3      	add	r3, pc, #652	; (adr r3, 8008dd0 <cal_mollifier_table+0x3a8>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	f7f7 fea8 	bl	800089c <__aeabi_ddiv>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4614      	mov	r4, r2
 8008b52:	461d      	mov	r5, r3
 8008b54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b58:	eeb1 7a67 	vneg.f32	s14, s15
 8008b5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b64:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008b68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008b6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b74:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008b78:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008b7c:	4b9c      	ldr	r3, [pc, #624]	; (8008df0 <cal_mollifier_table+0x3c8>)
 8008b7e:	ed93 6a00 	vldr	s12, [r3]
 8008b82:	4b9b      	ldr	r3, [pc, #620]	; (8008df0 <cal_mollifier_table+0x3c8>)
 8008b84:	edd3 7a00 	vldr	s15, [r3]
 8008b88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008b8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008b90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008b94:	ee16 0a90 	vmov	r0, s13
 8008b98:	f7f7 fcfe 	bl	8000598 <__aeabi_f2d>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	ec43 2b10 	vmov	d0, r2, r3
 8008ba4:	f018 ff44 	bl	8021a30 <exp>
 8008ba8:	ec53 2b10 	vmov	r2, r3, d0
 8008bac:	4620      	mov	r0, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f7f7 fd4a 	bl	8000648 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4619      	mov	r1, r3
 8008bbc:	f7f8 f81c 	bl	8000bf8 <__aeabi_d2f>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008bc6:	4b8a      	ldr	r3, [pc, #552]	; (8008df0 <cal_mollifier_table+0x3c8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7f7 fce4 	bl	8000598 <__aeabi_f2d>
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bd8:	eef1 7a67 	vneg.f32	s15, s15
 8008bdc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008be0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008be4:	ee16 0a90 	vmov	r0, s13
 8008be8:	f7f7 fcd6 	bl	8000598 <__aeabi_f2d>
 8008bec:	a37c      	add	r3, pc, #496	; (adr r3, 8008de0 <cal_mollifier_table+0x3b8>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fe53 	bl	800089c <__aeabi_ddiv>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4690      	mov	r8, r2
 8008bfc:	4699      	mov	r9, r3
 8008bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c00:	f7f7 fcca 	bl	8000598 <__aeabi_f2d>
 8008c04:	a370      	add	r3, pc, #448	; (adr r3, 8008dc8 <cal_mollifier_table+0x3a0>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f7f7 fd1d 	bl	8000648 <__aeabi_dmul>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4640      	mov	r0, r8
 8008c14:	4649      	mov	r1, r9
 8008c16:	f7f7 fb61 	bl	80002dc <__adddf3>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 ff83 	bl	8000b2c <__aeabi_dcmplt>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 8163 	beq.w	8008ef4 <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008c2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	ee17 0a90 	vmov	r0, s15
 8008c46:	f7f7 fca7 	bl	8000598 <__aeabi_f2d>
 8008c4a:	a361      	add	r3, pc, #388	; (adr r3, 8008dd0 <cal_mollifier_table+0x3a8>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f7f7 fe24 	bl	800089c <__aeabi_ddiv>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008c5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c60:	eeb1 7a67 	vneg.f32	s14, s15
 8008c64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c74:	ee16 0a90 	vmov	r0, s13
 8008c78:	f7f7 fc8e 	bl	8000598 <__aeabi_f2d>
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	460d      	mov	r5, r1
 8008c80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c84:	eef1 7a67 	vneg.f32	s15, s15
 8008c88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c90:	ee16 0a90 	vmov	r0, s13
 8008c94:	f7f7 fc80 	bl	8000598 <__aeabi_f2d>
 8008c98:	a351      	add	r3, pc, #324	; (adr r3, 8008de0 <cal_mollifier_table+0x3b8>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f7 fdfd 	bl	800089c <__aeabi_ddiv>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 fccd 	bl	8000648 <__aeabi_dmul>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4690      	mov	r8, r2
 8008cb4:	4699      	mov	r9, r3
 8008cb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008cbe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008cc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cc6:	ee16 0a90 	vmov	r0, s13
 8008cca:	f7f7 fc65 	bl	8000598 <__aeabi_f2d>
 8008cce:	4604      	mov	r4, r0
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cd6:	eef1 7a67 	vneg.f32	s15, s15
 8008cda:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008cde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ce2:	ee16 0a90 	vmov	r0, s13
 8008ce6:	f7f7 fc57 	bl	8000598 <__aeabi_f2d>
 8008cea:	a33d      	add	r3, pc, #244	; (adr r3, 8008de0 <cal_mollifier_table+0x3b8>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f7f7 fdd4 	bl	800089c <__aeabi_ddiv>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4692      	mov	sl, r2
 8008cfa:	469b      	mov	fp, r3
 8008cfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d08:	ee16 0a90 	vmov	r0, s13
 8008d0c:	f7f7 fc44 	bl	8000598 <__aeabi_f2d>
 8008d10:	a333      	add	r3, pc, #204	; (adr r3, 8008de0 <cal_mollifier_table+0x3b8>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fdc1 	bl	800089c <__aeabi_ddiv>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4650      	mov	r0, sl
 8008d20:	4659      	mov	r1, fp
 8008d22:	f7f7 fc91 	bl	8000648 <__aeabi_dmul>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f7f7 fad5 	bl	80002dc <__adddf3>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4640      	mov	r0, r8
 8008d38:	4649      	mov	r1, r9
 8008d3a:	f7f7 fdaf 	bl	800089c <__aeabi_ddiv>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4690      	mov	r8, r2
 8008d44:	4699      	mov	r9, r3
 8008d46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d4e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d56:	ee16 0a90 	vmov	r0, s13
 8008d5a:	f7f7 fc1d 	bl	8000598 <__aeabi_f2d>
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d66:	eef1 7a67 	vneg.f32	s15, s15
 8008d6a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d72:	ee16 0a90 	vmov	r0, s13
 8008d76:	f7f7 fc0f 	bl	8000598 <__aeabi_f2d>
 8008d7a:	a319      	add	r3, pc, #100	; (adr r3, 8008de0 <cal_mollifier_table+0x3b8>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f7f7 fd8c 	bl	800089c <__aeabi_ddiv>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4692      	mov	sl, r2
 8008d8a:	469b      	mov	fp, r3
 8008d8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d98:	ee16 0a90 	vmov	r0, s13
 8008d9c:	f7f7 fbfc 	bl	8000598 <__aeabi_f2d>
 8008da0:	a30f      	add	r3, pc, #60	; (adr r3, 8008de0 <cal_mollifier_table+0x3b8>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fd79 	bl	800089c <__aeabi_ddiv>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	4650      	mov	r0, sl
 8008db0:	4659      	mov	r1, fp
 8008db2:	f7f7 fc49 	bl	8000648 <__aeabi_dmul>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fa8d 	bl	80002dc <__adddf3>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	e016      	b.n	8008df4 <cal_mollifier_table+0x3cc>
 8008dc6:	bf00      	nop
 8008dc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8008dcc:	3f50624d 	.word	0x3f50624d
 8008dd0:	f9db22d1 	.word	0xf9db22d1
 8008dd4:	3fdc6a7e 	.word	0x3fdc6a7e
 8008dd8:	362cef38 	.word	0x362cef38
 8008ddc:	3fd78b56 	.word	0x3fd78b56
 8008de0:	04189375 	.word	0x04189375
 8008de4:	3ff50e56 	.word	0x3ff50e56
 8008de8:	41700000 	.word	0x41700000
 8008dec:	c1700000 	.word	0xc1700000
 8008df0:	20000800 	.word	0x20000800
 8008df4:	460b      	mov	r3, r1
 8008df6:	4640      	mov	r0, r8
 8008df8:	4649      	mov	r1, r9
 8008dfa:	f7f7 fd4f 	bl	800089c <__aeabi_ddiv>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e06:	f7f7 fc1f 	bl	8000648 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4692      	mov	sl, r2
 8008e10:	469b      	mov	fp, r3
 8008e12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e16:	eeb1 7a67 	vneg.f32	s14, s15
 8008e1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e22:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e2a:	ee16 0a90 	vmov	r0, s13
 8008e2e:	f7f7 fbb3 	bl	8000598 <__aeabi_f2d>
 8008e32:	4604      	mov	r4, r0
 8008e34:	460d      	mov	r5, r1
 8008e36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e3e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e46:	ee16 0a90 	vmov	r0, s13
 8008e4a:	f7f7 fba5 	bl	8000598 <__aeabi_f2d>
 8008e4e:	4680      	mov	r8, r0
 8008e50:	4689      	mov	r9, r1
 8008e52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e56:	eef1 7a67 	vneg.f32	s15, s15
 8008e5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e62:	ee16 0a90 	vmov	r0, s13
 8008e66:	f7f7 fb97 	bl	8000598 <__aeabi_f2d>
 8008e6a:	a3e1      	add	r3, pc, #900	; (adr r3, 80091f0 <cal_mollifier_table+0x7c8>)
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	f7f7 fd14 	bl	800089c <__aeabi_ddiv>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008e7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e88:	ee16 0a90 	vmov	r0, s13
 8008e8c:	f7f7 fb84 	bl	8000598 <__aeabi_f2d>
 8008e90:	a3d7      	add	r3, pc, #860	; (adr r3, 80091f0 <cal_mollifier_table+0x7c8>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fd01 	bl	800089c <__aeabi_ddiv>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ea2:	f7f7 fbd1 	bl	8000648 <__aeabi_dmul>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f7f7 fa15 	bl	80002dc <__adddf3>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7f7 fcef 	bl	800089c <__aeabi_ddiv>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	ec43 2b17 	vmov	d7, r2, r3
 8008ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8008eca:	eef0 0a67 	vmov.f32	s1, s15
 8008ece:	f018 fdaf 	bl	8021a30 <exp>
 8008ed2:	ec53 2b10 	vmov	r2, r3, d0
 8008ed6:	4650      	mov	r0, sl
 8008ed8:	4659      	mov	r1, fp
 8008eda:	f7f7 fbb5 	bl	8000648 <__aeabi_dmul>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f7f7 fe87 	bl	8000bf8 <__aeabi_d2f>
 8008eea:	4602      	mov	r2, r0
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008ef0:	f000 bcb4 	b.w	800985c <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008ef4:	4bc0      	ldr	r3, [pc, #768]	; (80091f8 <cal_mollifier_table+0x7d0>)
 8008ef6:	edd3 7a00 	vldr	s15, [r3]
 8008efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f02:	f140 817b 	bpl.w	80091fc <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008f06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008f0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1a:	ee17 0a90 	vmov	r0, s15
 8008f1e:	f7f7 fb3b 	bl	8000598 <__aeabi_f2d>
 8008f22:	a3af      	add	r3, pc, #700	; (adr r3, 80091e0 <cal_mollifier_table+0x7b8>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 fcb8 	bl	800089c <__aeabi_ddiv>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008f34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f38:	eeb1 7a67 	vneg.f32	s14, s15
 8008f3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f4c:	ee16 0a90 	vmov	r0, s13
 8008f50:	f7f7 fb22 	bl	8000598 <__aeabi_f2d>
 8008f54:	4604      	mov	r4, r0
 8008f56:	460d      	mov	r5, r1
 8008f58:	4ba7      	ldr	r3, [pc, #668]	; (80091f8 <cal_mollifier_table+0x7d0>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7f7 fb1b 	bl	8000598 <__aeabi_f2d>
 8008f62:	4680      	mov	r8, r0
 8008f64:	4689      	mov	r9, r1
 8008f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f68:	f7f7 fb16 	bl	8000598 <__aeabi_f2d>
 8008f6c:	a39e      	add	r3, pc, #632	; (adr r3, 80091e8 <cal_mollifier_table+0x7c0>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 fb69 	bl	8000648 <__aeabi_dmul>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	f7f7 f9ab 	bl	80002d8 <__aeabi_dsub>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4620      	mov	r0, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	f7f7 fb5d 	bl	8000648 <__aeabi_dmul>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	e9c7 2300 	strd	r2, r3, [r7]
 8008f96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f9e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008fa2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fa6:	ee16 0a90 	vmov	r0, s13
 8008faa:	f7f7 faf5 	bl	8000598 <__aeabi_f2d>
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	4b91      	ldr	r3, [pc, #580]	; (80091f8 <cal_mollifier_table+0x7d0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7f7 faee 	bl	8000598 <__aeabi_f2d>
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	460d      	mov	r5, r1
 8008fc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fc2:	f7f7 fae9 	bl	8000598 <__aeabi_f2d>
 8008fc6:	a388      	add	r3, pc, #544	; (adr r3, 80091e8 <cal_mollifier_table+0x7c0>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f7f7 fb3c 	bl	8000648 <__aeabi_dmul>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 f97e 	bl	80002d8 <__aeabi_dsub>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4692      	mov	sl, r2
 8008fe2:	469b      	mov	fp, r3
 8008fe4:	4b84      	ldr	r3, [pc, #528]	; (80091f8 <cal_mollifier_table+0x7d0>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7f7 fad5 	bl	8000598 <__aeabi_f2d>
 8008fee:	4604      	mov	r4, r0
 8008ff0:	460d      	mov	r5, r1
 8008ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ff4:	f7f7 fad0 	bl	8000598 <__aeabi_f2d>
 8008ff8:	a37b      	add	r3, pc, #492	; (adr r3, 80091e8 <cal_mollifier_table+0x7c0>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f7f7 fb23 	bl	8000648 <__aeabi_dmul>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 f965 	bl	80002d8 <__aeabi_dsub>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4650      	mov	r0, sl
 8009014:	4659      	mov	r1, fp
 8009016:	f7f7 fb17 	bl	8000648 <__aeabi_dmul>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4640      	mov	r0, r8
 8009020:	4649      	mov	r1, r9
 8009022:	f7f7 f959 	bl	80002d8 <__aeabi_dsub>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800902e:	f7f7 fc35 	bl	800089c <__aeabi_ddiv>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	e9c7 2300 	strd	r2, r3, [r7]
 800903a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800903e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009042:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009046:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800904a:	ee16 0a90 	vmov	r0, s13
 800904e:	f7f7 faa3 	bl	8000598 <__aeabi_f2d>
 8009052:	4680      	mov	r8, r0
 8009054:	4689      	mov	r9, r1
 8009056:	4b68      	ldr	r3, [pc, #416]	; (80091f8 <cal_mollifier_table+0x7d0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4618      	mov	r0, r3
 800905c:	f7f7 fa9c 	bl	8000598 <__aeabi_f2d>
 8009060:	4604      	mov	r4, r0
 8009062:	460d      	mov	r5, r1
 8009064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009066:	f7f7 fa97 	bl	8000598 <__aeabi_f2d>
 800906a:	a35f      	add	r3, pc, #380	; (adr r3, 80091e8 <cal_mollifier_table+0x7c0>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f7f7 faea 	bl	8000648 <__aeabi_dmul>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4620      	mov	r0, r4
 800907a:	4629      	mov	r1, r5
 800907c:	f7f7 f92c 	bl	80002d8 <__aeabi_dsub>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4692      	mov	sl, r2
 8009086:	469b      	mov	fp, r3
 8009088:	4b5b      	ldr	r3, [pc, #364]	; (80091f8 <cal_mollifier_table+0x7d0>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	f7f7 fa83 	bl	8000598 <__aeabi_f2d>
 8009092:	4604      	mov	r4, r0
 8009094:	460d      	mov	r5, r1
 8009096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009098:	f7f7 fa7e 	bl	8000598 <__aeabi_f2d>
 800909c:	a352      	add	r3, pc, #328	; (adr r3, 80091e8 <cal_mollifier_table+0x7c0>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 fad1 	bl	8000648 <__aeabi_dmul>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	f7f7 f913 	bl	80002d8 <__aeabi_dsub>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4650      	mov	r0, sl
 80090b8:	4659      	mov	r1, fp
 80090ba:	f7f7 fac5 	bl	8000648 <__aeabi_dmul>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	f7f7 f907 	bl	80002d8 <__aeabi_dsub>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090d2:	f7f7 fbe3 	bl	800089c <__aeabi_ddiv>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090de:	f7f7 fab3 	bl	8000648 <__aeabi_dmul>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80090ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090ee:	eeb1 7a67 	vneg.f32	s14, s15
 80090f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80090fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009102:	ee16 0a90 	vmov	r0, s13
 8009106:	f7f7 fa47 	bl	8000598 <__aeabi_f2d>
 800910a:	4680      	mov	r8, r0
 800910c:	4689      	mov	r9, r1
 800910e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009112:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009116:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800911a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800911e:	ee16 0a90 	vmov	r0, s13
 8009122:	f7f7 fa39 	bl	8000598 <__aeabi_f2d>
 8009126:	4682      	mov	sl, r0
 8009128:	468b      	mov	fp, r1
 800912a:	4b33      	ldr	r3, [pc, #204]	; (80091f8 <cal_mollifier_table+0x7d0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4618      	mov	r0, r3
 8009130:	f7f7 fa32 	bl	8000598 <__aeabi_f2d>
 8009134:	4604      	mov	r4, r0
 8009136:	460d      	mov	r5, r1
 8009138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800913a:	f7f7 fa2d 	bl	8000598 <__aeabi_f2d>
 800913e:	a32a      	add	r3, pc, #168	; (adr r3, 80091e8 <cal_mollifier_table+0x7c0>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fa80 	bl	8000648 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 f8c2 	bl	80002d8 <__aeabi_dsub>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	e9c7 2300 	strd	r2, r3, [r7]
 800915c:	4b26      	ldr	r3, [pc, #152]	; (80091f8 <cal_mollifier_table+0x7d0>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f7f7 fa19 	bl	8000598 <__aeabi_f2d>
 8009166:	4604      	mov	r4, r0
 8009168:	460d      	mov	r5, r1
 800916a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800916c:	f7f7 fa14 	bl	8000598 <__aeabi_f2d>
 8009170:	a31d      	add	r3, pc, #116	; (adr r3, 80091e8 <cal_mollifier_table+0x7c0>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	f7f7 fa67 	bl	8000648 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4620      	mov	r0, r4
 8009180:	4629      	mov	r1, r5
 8009182:	f7f7 f8a9 	bl	80002d8 <__aeabi_dsub>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800918e:	f7f7 fa5b 	bl	8000648 <__aeabi_dmul>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4650      	mov	r0, sl
 8009198:	4659      	mov	r1, fp
 800919a:	f7f7 f89d 	bl	80002d8 <__aeabi_dsub>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4640      	mov	r0, r8
 80091a4:	4649      	mov	r1, r9
 80091a6:	f7f7 fb79 	bl	800089c <__aeabi_ddiv>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	ec43 2b17 	vmov	d7, r2, r3
 80091b2:	eeb0 0a47 	vmov.f32	s0, s14
 80091b6:	eef0 0a67 	vmov.f32	s1, s15
 80091ba:	f018 fc39 	bl	8021a30 <exp>
 80091be:	ec53 2b10 	vmov	r2, r3, d0
 80091c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091c6:	f7f7 fa3f 	bl	8000648 <__aeabi_dmul>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4610      	mov	r0, r2
 80091d0:	4619      	mov	r1, r3
 80091d2:	f7f7 fd11 	bl	8000bf8 <__aeabi_d2f>
 80091d6:	4602      	mov	r2, r0
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80091dc:	e33e      	b.n	800985c <cal_mollifier_table+0xe34>
 80091de:	bf00      	nop
 80091e0:	f9db22d1 	.word	0xf9db22d1
 80091e4:	3fdc6a7e 	.word	0x3fdc6a7e
 80091e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80091ec:	3f50624d 	.word	0x3f50624d
 80091f0:	04189375 	.word	0x04189375
 80091f4:	3ff50e56 	.word	0x3ff50e56
 80091f8:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 80091fc:	4bd4      	ldr	r3, [pc, #848]	; (8009550 <cal_mollifier_table+0xb28>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f7f7 f9c9 	bl	8000598 <__aeabi_f2d>
 8009206:	4604      	mov	r4, r0
 8009208:	460d      	mov	r5, r1
 800920a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800920e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009212:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009216:	ee16 0a90 	vmov	r0, s13
 800921a:	f7f7 f9bd 	bl	8000598 <__aeabi_f2d>
 800921e:	a3c6      	add	r3, pc, #792	; (adr r3, 8009538 <cal_mollifier_table+0xb10>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f7 fb3a 	bl	800089c <__aeabi_ddiv>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4690      	mov	r8, r2
 800922e:	4699      	mov	r9, r3
 8009230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009232:	f7f7 f9b1 	bl	8000598 <__aeabi_f2d>
 8009236:	a3c2      	add	r3, pc, #776	; (adr r3, 8009540 <cal_mollifier_table+0xb18>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f7 fa04 	bl	8000648 <__aeabi_dmul>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4640      	mov	r0, r8
 8009246:	4649      	mov	r1, r9
 8009248:	f7f7 f848 	bl	80002dc <__adddf3>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4620      	mov	r0, r4
 8009252:	4629      	mov	r1, r5
 8009254:	f7f7 fc6a 	bl	8000b2c <__aeabi_dcmplt>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 817a 	beq.w	8009554 <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009260:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009264:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800926c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009274:	ee17 0a90 	vmov	r0, s15
 8009278:	f7f7 f98e 	bl	8000598 <__aeabi_f2d>
 800927c:	a3b2      	add	r3, pc, #712	; (adr r3, 8009548 <cal_mollifier_table+0xb20>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f7 fb0b 	bl	800089c <__aeabi_ddiv>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800928e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009292:	eeb1 7a67 	vneg.f32	s14, s15
 8009296:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800929a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80092a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092a6:	ee16 0a90 	vmov	r0, s13
 80092aa:	f7f7 f975 	bl	8000598 <__aeabi_f2d>
 80092ae:	4604      	mov	r4, r0
 80092b0:	460d      	mov	r5, r1
 80092b2:	4ba7      	ldr	r3, [pc, #668]	; (8009550 <cal_mollifier_table+0xb28>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f7 f96e 	bl	8000598 <__aeabi_f2d>
 80092bc:	4680      	mov	r8, r0
 80092be:	4689      	mov	r9, r1
 80092c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092c2:	f7f7 f969 	bl	8000598 <__aeabi_f2d>
 80092c6:	a39e      	add	r3, pc, #632	; (adr r3, 8009540 <cal_mollifier_table+0xb18>)
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f7f7 f9bc 	bl	8000648 <__aeabi_dmul>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4640      	mov	r0, r8
 80092d6:	4649      	mov	r1, r9
 80092d8:	f7f6 fffe 	bl	80002d8 <__aeabi_dsub>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4620      	mov	r0, r4
 80092e2:	4629      	mov	r1, r5
 80092e4:	f7f7 f9b0 	bl	8000648 <__aeabi_dmul>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	e9c7 2300 	strd	r2, r3, [r7]
 80092f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80092fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009300:	ee16 0a90 	vmov	r0, s13
 8009304:	f7f7 f948 	bl	8000598 <__aeabi_f2d>
 8009308:	4680      	mov	r8, r0
 800930a:	4689      	mov	r9, r1
 800930c:	4b90      	ldr	r3, [pc, #576]	; (8009550 <cal_mollifier_table+0xb28>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	f7f7 f941 	bl	8000598 <__aeabi_f2d>
 8009316:	4604      	mov	r4, r0
 8009318:	460d      	mov	r5, r1
 800931a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800931c:	f7f7 f93c 	bl	8000598 <__aeabi_f2d>
 8009320:	a387      	add	r3, pc, #540	; (adr r3, 8009540 <cal_mollifier_table+0xb18>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f7 f98f 	bl	8000648 <__aeabi_dmul>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4620      	mov	r0, r4
 8009330:	4629      	mov	r1, r5
 8009332:	f7f6 ffd1 	bl	80002d8 <__aeabi_dsub>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4692      	mov	sl, r2
 800933c:	469b      	mov	fp, r3
 800933e:	4b84      	ldr	r3, [pc, #528]	; (8009550 <cal_mollifier_table+0xb28>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f7f7 f928 	bl	8000598 <__aeabi_f2d>
 8009348:	4604      	mov	r4, r0
 800934a:	460d      	mov	r5, r1
 800934c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800934e:	f7f7 f923 	bl	8000598 <__aeabi_f2d>
 8009352:	a37b      	add	r3, pc, #492	; (adr r3, 8009540 <cal_mollifier_table+0xb18>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f7 f976 	bl	8000648 <__aeabi_dmul>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4620      	mov	r0, r4
 8009362:	4629      	mov	r1, r5
 8009364:	f7f6 ffb8 	bl	80002d8 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4650      	mov	r0, sl
 800936e:	4659      	mov	r1, fp
 8009370:	f7f7 f96a 	bl	8000648 <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4640      	mov	r0, r8
 800937a:	4649      	mov	r1, r9
 800937c:	f7f6 ffac 	bl	80002d8 <__aeabi_dsub>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009388:	f7f7 fa88 	bl	800089c <__aeabi_ddiv>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	e9c7 2300 	strd	r2, r3, [r7]
 8009394:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009398:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800939c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80093a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093a4:	ee16 0a90 	vmov	r0, s13
 80093a8:	f7f7 f8f6 	bl	8000598 <__aeabi_f2d>
 80093ac:	4680      	mov	r8, r0
 80093ae:	4689      	mov	r9, r1
 80093b0:	4b67      	ldr	r3, [pc, #412]	; (8009550 <cal_mollifier_table+0xb28>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7f7 f8ef 	bl	8000598 <__aeabi_f2d>
 80093ba:	4604      	mov	r4, r0
 80093bc:	460d      	mov	r5, r1
 80093be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093c0:	f7f7 f8ea 	bl	8000598 <__aeabi_f2d>
 80093c4:	a35e      	add	r3, pc, #376	; (adr r3, 8009540 <cal_mollifier_table+0xb18>)
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	f7f7 f93d 	bl	8000648 <__aeabi_dmul>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4620      	mov	r0, r4
 80093d4:	4629      	mov	r1, r5
 80093d6:	f7f6 ff7f 	bl	80002d8 <__aeabi_dsub>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4692      	mov	sl, r2
 80093e0:	469b      	mov	fp, r3
 80093e2:	4b5b      	ldr	r3, [pc, #364]	; (8009550 <cal_mollifier_table+0xb28>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7f7 f8d6 	bl	8000598 <__aeabi_f2d>
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093f2:	f7f7 f8d1 	bl	8000598 <__aeabi_f2d>
 80093f6:	a352      	add	r3, pc, #328	; (adr r3, 8009540 <cal_mollifier_table+0xb18>)
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f7f7 f924 	bl	8000648 <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4620      	mov	r0, r4
 8009406:	4629      	mov	r1, r5
 8009408:	f7f6 ff66 	bl	80002d8 <__aeabi_dsub>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4650      	mov	r0, sl
 8009412:	4659      	mov	r1, fp
 8009414:	f7f7 f918 	bl	8000648 <__aeabi_dmul>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4640      	mov	r0, r8
 800941e:	4649      	mov	r1, r9
 8009420:	f7f6 ff5a 	bl	80002d8 <__aeabi_dsub>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800942c:	f7f7 fa36 	bl	800089c <__aeabi_ddiv>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009438:	f7f7 f906 	bl	8000648 <__aeabi_dmul>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009444:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009448:	eeb1 7a67 	vneg.f32	s14, s15
 800944c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009454:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009458:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800945c:	ee16 0a90 	vmov	r0, s13
 8009460:	f7f7 f89a 	bl	8000598 <__aeabi_f2d>
 8009464:	4680      	mov	r8, r0
 8009466:	4689      	mov	r9, r1
 8009468:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800946c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009470:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009474:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009478:	ee16 0a90 	vmov	r0, s13
 800947c:	f7f7 f88c 	bl	8000598 <__aeabi_f2d>
 8009480:	4682      	mov	sl, r0
 8009482:	468b      	mov	fp, r1
 8009484:	4b32      	ldr	r3, [pc, #200]	; (8009550 <cal_mollifier_table+0xb28>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f7f7 f885 	bl	8000598 <__aeabi_f2d>
 800948e:	4604      	mov	r4, r0
 8009490:	460d      	mov	r5, r1
 8009492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009494:	f7f7 f880 	bl	8000598 <__aeabi_f2d>
 8009498:	a329      	add	r3, pc, #164	; (adr r3, 8009540 <cal_mollifier_table+0xb18>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f7 f8d3 	bl	8000648 <__aeabi_dmul>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4620      	mov	r0, r4
 80094a8:	4629      	mov	r1, r5
 80094aa:	f7f6 ff15 	bl	80002d8 <__aeabi_dsub>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	e9c7 2300 	strd	r2, r3, [r7]
 80094b6:	4b26      	ldr	r3, [pc, #152]	; (8009550 <cal_mollifier_table+0xb28>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f7 f86c 	bl	8000598 <__aeabi_f2d>
 80094c0:	4604      	mov	r4, r0
 80094c2:	460d      	mov	r5, r1
 80094c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094c6:	f7f7 f867 	bl	8000598 <__aeabi_f2d>
 80094ca:	a31d      	add	r3, pc, #116	; (adr r3, 8009540 <cal_mollifier_table+0xb18>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f7f7 f8ba 	bl	8000648 <__aeabi_dmul>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7f6 fefc 	bl	80002d8 <__aeabi_dsub>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094e8:	f7f7 f8ae 	bl	8000648 <__aeabi_dmul>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4650      	mov	r0, sl
 80094f2:	4659      	mov	r1, fp
 80094f4:	f7f6 fef0 	bl	80002d8 <__aeabi_dsub>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4640      	mov	r0, r8
 80094fe:	4649      	mov	r1, r9
 8009500:	f7f7 f9cc 	bl	800089c <__aeabi_ddiv>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	ec43 2b17 	vmov	d7, r2, r3
 800950c:	eeb0 0a47 	vmov.f32	s0, s14
 8009510:	eef0 0a67 	vmov.f32	s1, s15
 8009514:	f018 fa8c 	bl	8021a30 <exp>
 8009518:	ec53 2b10 	vmov	r2, r3, d0
 800951c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009520:	f7f7 f892 	bl	8000648 <__aeabi_dmul>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4610      	mov	r0, r2
 800952a:	4619      	mov	r1, r3
 800952c:	f7f7 fb64 	bl	8000bf8 <__aeabi_d2f>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009536:	e191      	b.n	800985c <cal_mollifier_table+0xe34>
 8009538:	04189375 	.word	0x04189375
 800953c:	3ff50e56 	.word	0x3ff50e56
 8009540:	d2f1a9fc 	.word	0xd2f1a9fc
 8009544:	3f50624d 	.word	0x3f50624d
 8009548:	f9db22d1 	.word	0xf9db22d1
 800954c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009550:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 800955a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800955e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009566:	edd7 7a05 	vldr	s15, [r7, #20]
 800956a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800956e:	ee17 0a90 	vmov	r0, s15
 8009572:	f7f7 f811 	bl	8000598 <__aeabi_f2d>
 8009576:	a3c0      	add	r3, pc, #768	; (adr r3, 8009878 <cal_mollifier_table+0xe50>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f7f7 f98e 	bl	800089c <__aeabi_ddiv>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009588:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800958c:	eeb1 7a67 	vneg.f32	s14, s15
 8009590:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009598:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800959c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095a0:	ee16 0a90 	vmov	r0, s13
 80095a4:	f7f6 fff8 	bl	8000598 <__aeabi_f2d>
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	4bb0      	ldr	r3, [pc, #704]	; (8009870 <cal_mollifier_table+0xe48>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7f6 fff1 	bl	8000598 <__aeabi_f2d>
 80095b6:	4680      	mov	r8, r0
 80095b8:	4689      	mov	r9, r1
 80095ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095bc:	f7f6 ffec 	bl	8000598 <__aeabi_f2d>
 80095c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8009868 <cal_mollifier_table+0xe40>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f7f7 f83f 	bl	8000648 <__aeabi_dmul>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4640      	mov	r0, r8
 80095d0:	4649      	mov	r1, r9
 80095d2:	f7f6 fe81 	bl	80002d8 <__aeabi_dsub>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4620      	mov	r0, r4
 80095dc:	4629      	mov	r1, r5
 80095de:	f7f7 f833 	bl	8000648 <__aeabi_dmul>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	e9c7 2300 	strd	r2, r3, [r7]
 80095ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095fa:	ee16 0a90 	vmov	r0, s13
 80095fe:	f7f6 ffcb 	bl	8000598 <__aeabi_f2d>
 8009602:	4680      	mov	r8, r0
 8009604:	4689      	mov	r9, r1
 8009606:	4b9a      	ldr	r3, [pc, #616]	; (8009870 <cal_mollifier_table+0xe48>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f7f6 ffc4 	bl	8000598 <__aeabi_f2d>
 8009610:	4604      	mov	r4, r0
 8009612:	460d      	mov	r5, r1
 8009614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009616:	f7f6 ffbf 	bl	8000598 <__aeabi_f2d>
 800961a:	a393      	add	r3, pc, #588	; (adr r3, 8009868 <cal_mollifier_table+0xe40>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f7f7 f812 	bl	8000648 <__aeabi_dmul>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4620      	mov	r0, r4
 800962a:	4629      	mov	r1, r5
 800962c:	f7f6 fe54 	bl	80002d8 <__aeabi_dsub>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4692      	mov	sl, r2
 8009636:	469b      	mov	fp, r3
 8009638:	4b8d      	ldr	r3, [pc, #564]	; (8009870 <cal_mollifier_table+0xe48>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f7f6 ffab 	bl	8000598 <__aeabi_f2d>
 8009642:	4604      	mov	r4, r0
 8009644:	460d      	mov	r5, r1
 8009646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009648:	f7f6 ffa6 	bl	8000598 <__aeabi_f2d>
 800964c:	a386      	add	r3, pc, #536	; (adr r3, 8009868 <cal_mollifier_table+0xe40>)
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	f7f6 fff9 	bl	8000648 <__aeabi_dmul>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4620      	mov	r0, r4
 800965c:	4629      	mov	r1, r5
 800965e:	f7f6 fe3b 	bl	80002d8 <__aeabi_dsub>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	4650      	mov	r0, sl
 8009668:	4659      	mov	r1, fp
 800966a:	f7f6 ffed 	bl	8000648 <__aeabi_dmul>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4640      	mov	r0, r8
 8009674:	4649      	mov	r1, r9
 8009676:	f7f6 fe2f 	bl	80002d8 <__aeabi_dsub>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009682:	f7f7 f90b 	bl	800089c <__aeabi_ddiv>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	e9c7 2300 	strd	r2, r3, [r7]
 800968e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009692:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009696:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800969a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800969e:	ee16 0a90 	vmov	r0, s13
 80096a2:	f7f6 ff79 	bl	8000598 <__aeabi_f2d>
 80096a6:	4680      	mov	r8, r0
 80096a8:	4689      	mov	r9, r1
 80096aa:	4b71      	ldr	r3, [pc, #452]	; (8009870 <cal_mollifier_table+0xe48>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f6 ff72 	bl	8000598 <__aeabi_f2d>
 80096b4:	4604      	mov	r4, r0
 80096b6:	460d      	mov	r5, r1
 80096b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ba:	f7f6 ff6d 	bl	8000598 <__aeabi_f2d>
 80096be:	a36a      	add	r3, pc, #424	; (adr r3, 8009868 <cal_mollifier_table+0xe40>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f7f6 ffc0 	bl	8000648 <__aeabi_dmul>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4620      	mov	r0, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	f7f6 fe02 	bl	80002d8 <__aeabi_dsub>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4692      	mov	sl, r2
 80096da:	469b      	mov	fp, r3
 80096dc:	4b64      	ldr	r3, [pc, #400]	; (8009870 <cal_mollifier_table+0xe48>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7f6 ff59 	bl	8000598 <__aeabi_f2d>
 80096e6:	4604      	mov	r4, r0
 80096e8:	460d      	mov	r5, r1
 80096ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ec:	f7f6 ff54 	bl	8000598 <__aeabi_f2d>
 80096f0:	a35d      	add	r3, pc, #372	; (adr r3, 8009868 <cal_mollifier_table+0xe40>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 ffa7 	bl	8000648 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f6 fde9 	bl	80002d8 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4650      	mov	r0, sl
 800970c:	4659      	mov	r1, fp
 800970e:	f7f6 ff9b 	bl	8000648 <__aeabi_dmul>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4640      	mov	r0, r8
 8009718:	4649      	mov	r1, r9
 800971a:	f7f6 fddd 	bl	80002d8 <__aeabi_dsub>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009726:	f7f7 f8b9 	bl	800089c <__aeabi_ddiv>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009732:	f7f6 ff89 	bl	8000648 <__aeabi_dmul>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800973e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009742:	eeb1 7a67 	vneg.f32	s14, s15
 8009746:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800974a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009752:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009756:	ee16 0a90 	vmov	r0, s13
 800975a:	f7f6 ff1d 	bl	8000598 <__aeabi_f2d>
 800975e:	4680      	mov	r8, r0
 8009760:	4689      	mov	r9, r1
 8009762:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009766:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800976a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800976e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009772:	ee16 0a90 	vmov	r0, s13
 8009776:	f7f6 ff0f 	bl	8000598 <__aeabi_f2d>
 800977a:	4682      	mov	sl, r0
 800977c:	468b      	mov	fp, r1
 800977e:	4b3c      	ldr	r3, [pc, #240]	; (8009870 <cal_mollifier_table+0xe48>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4618      	mov	r0, r3
 8009784:	f7f6 ff08 	bl	8000598 <__aeabi_f2d>
 8009788:	4604      	mov	r4, r0
 800978a:	460d      	mov	r5, r1
 800978c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800978e:	f7f6 ff03 	bl	8000598 <__aeabi_f2d>
 8009792:	a335      	add	r3, pc, #212	; (adr r3, 8009868 <cal_mollifier_table+0xe40>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 ff56 	bl	8000648 <__aeabi_dmul>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4620      	mov	r0, r4
 80097a2:	4629      	mov	r1, r5
 80097a4:	f7f6 fd98 	bl	80002d8 <__aeabi_dsub>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	e9c7 2300 	strd	r2, r3, [r7]
 80097b0:	4b2f      	ldr	r3, [pc, #188]	; (8009870 <cal_mollifier_table+0xe48>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7f6 feef 	bl	8000598 <__aeabi_f2d>
 80097ba:	4604      	mov	r4, r0
 80097bc:	460d      	mov	r5, r1
 80097be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097c0:	f7f6 feea 	bl	8000598 <__aeabi_f2d>
 80097c4:	a328      	add	r3, pc, #160	; (adr r3, 8009868 <cal_mollifier_table+0xe40>)
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	f7f6 ff3d 	bl	8000648 <__aeabi_dmul>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4620      	mov	r0, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	f7f6 fd7f 	bl	80002d8 <__aeabi_dsub>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097e2:	f7f6 ff31 	bl	8000648 <__aeabi_dmul>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4650      	mov	r0, sl
 80097ec:	4659      	mov	r1, fp
 80097ee:	f7f6 fd73 	bl	80002d8 <__aeabi_dsub>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4640      	mov	r0, r8
 80097f8:	4649      	mov	r1, r9
 80097fa:	f7f7 f84f 	bl	800089c <__aeabi_ddiv>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	ec43 2b17 	vmov	d7, r2, r3
 8009806:	eeb0 0a47 	vmov.f32	s0, s14
 800980a:	eef0 0a67 	vmov.f32	s1, s15
 800980e:	f018 f90f 	bl	8021a30 <exp>
 8009812:	ec53 2b10 	vmov	r2, r3, d0
 8009816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800981a:	f7f6 ff15 	bl	8000648 <__aeabi_dmul>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4610      	mov	r0, r2
 8009824:	4619      	mov	r1, r3
 8009826:	f7f7 f9e7 	bl	8000bf8 <__aeabi_d2f>
 800982a:	4602      	mov	r2, r0
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009830:	e014      	b.n	800985c <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	ed93 7a00 	vldr	s14, [r3]
 8009846:	edd7 7a08 	vldr	s15, [r7, #32]
 800984a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <cal_mollifier_table+0xe4c>)
 8009856:	2204      	movs	r2, #4
 8009858:	701a      	strb	r2, [r3, #0]
		}

}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	3730      	adds	r7, #48	; 0x30
 8009860:	46bd      	mov	sp, r7
 8009862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009866:	bf00      	nop
 8009868:	d2f1a9fc 	.word	0xd2f1a9fc
 800986c:	3f50624d 	.word	0x3f50624d
 8009870:	20000800 	.word	0x20000800
 8009874:	20000804 	.word	0x20000804
 8009878:	f9db22d1 	.word	0xf9db22d1
 800987c:	3fdc6a7e 	.word	0x3fdc6a7e

08009880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009886:	4b12      	ldr	r3, [pc, #72]	; (80098d0 <MX_DMA_Init+0x50>)
 8009888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800988a:	4a11      	ldr	r2, [pc, #68]	; (80098d0 <MX_DMA_Init+0x50>)
 800988c:	f043 0304 	orr.w	r3, r3, #4
 8009890:	6493      	str	r3, [r2, #72]	; 0x48
 8009892:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <MX_DMA_Init+0x50>)
 8009894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	607b      	str	r3, [r7, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800989e:	4b0c      	ldr	r3, [pc, #48]	; (80098d0 <MX_DMA_Init+0x50>)
 80098a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a2:	4a0b      	ldr	r2, [pc, #44]	; (80098d0 <MX_DMA_Init+0x50>)
 80098a4:	f043 0301 	orr.w	r3, r3, #1
 80098a8:	6493      	str	r3, [r2, #72]	; 0x48
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <MX_DMA_Init+0x50>)
 80098ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80098b6:	2200      	movs	r2, #0
 80098b8:	2100      	movs	r1, #0
 80098ba:	200b      	movs	r0, #11
 80098bc:	f010 faad 	bl	8019e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80098c0:	200b      	movs	r0, #11
 80098c2:	f010 fac4 	bl	8019e4e <HAL_NVIC_EnableIRQ>

}
 80098c6:	bf00      	nop
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	40021000 	.word	0x40021000

080098d4 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 80098d4:	b480      	push	{r7}
 80098d6:	af00      	add	r7, sp, #0
	error_mode=0;
 80098d8:	4b11      	ldr	r3, [pc, #68]	; (8009920 <init_FailSafe+0x4c>)
 80098da:	2200      	movs	r2, #0
 80098dc:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 80098de:	4b11      	ldr	r3, [pc, #68]	; (8009924 <init_FailSafe+0x50>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80098e4:	4b10      	ldr	r3, [pc, #64]	; (8009928 <init_FailSafe+0x54>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 80098ea:	4b10      	ldr	r3, [pc, #64]	; (800992c <init_FailSafe+0x58>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 80098f0:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <init_FailSafe+0x5c>)
 80098f2:	4a10      	ldr	r2, [pc, #64]	; (8009934 <init_FailSafe+0x60>)
 80098f4:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 80098f6:	4b10      	ldr	r3, [pc, #64]	; (8009938 <init_FailSafe+0x64>)
 80098f8:	4a10      	ldr	r2, [pc, #64]	; (800993c <init_FailSafe+0x68>)
 80098fa:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 80098fc:	4b10      	ldr	r3, [pc, #64]	; (8009940 <init_FailSafe+0x6c>)
 80098fe:	4a0d      	ldr	r2, [pc, #52]	; (8009934 <init_FailSafe+0x60>)
 8009900:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 8009902:	4b10      	ldr	r3, [pc, #64]	; (8009944 <init_FailSafe+0x70>)
 8009904:	4a10      	ldr	r2, [pc, #64]	; (8009948 <init_FailSafe+0x74>)
 8009906:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009908:	4b10      	ldr	r3, [pc, #64]	; (800994c <init_FailSafe+0x78>)
 800990a:	4a11      	ldr	r2, [pc, #68]	; (8009950 <init_FailSafe+0x7c>)
 800990c:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 800990e:	4b11      	ldr	r3, [pc, #68]	; (8009954 <init_FailSafe+0x80>)
 8009910:	4a0f      	ldr	r2, [pc, #60]	; (8009950 <init_FailSafe+0x7c>)
 8009912:	601a      	str	r2, [r3, #0]
}
 8009914:	bf00      	nop
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	20000807 	.word	0x20000807
 8009924:	20000806 	.word	0x20000806
 8009928:	20000808 	.word	0x20000808
 800992c:	20000824 	.word	0x20000824
 8009930:	2000080c 	.word	0x2000080c
 8009934:	44bb8000 	.word	0x44bb8000
 8009938:	20000810 	.word	0x20000810
 800993c:	44480000 	.word	0x44480000
 8009940:	20000814 	.word	0x20000814
 8009944:	20000818 	.word	0x20000818
 8009948:	455ac000 	.word	0x455ac000
 800994c:	2000081c 	.word	0x2000081c
 8009950:	44ed8000 	.word	0x44ed8000
 8009954:	20000820 	.word	0x20000820

08009958 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 800995e:	4b6e      	ldr	r3, [pc, #440]	; (8009b18 <interrupt_FailSafe+0x1c0>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8009966:	4b6d      	ldr	r3, [pc, #436]	; (8009b1c <interrupt_FailSafe+0x1c4>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 800996c:	4b6c      	ldr	r3, [pc, #432]	; (8009b20 <interrupt_FailSafe+0x1c8>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 8009972:	4b6c      	ldr	r3, [pc, #432]	; (8009b24 <interrupt_FailSafe+0x1cc>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	607b      	str	r3, [r7, #4]
 8009978:	e008      	b.n	800998c <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 800997a:	4b6b      	ldr	r3, [pc, #428]	; (8009b28 <interrupt_FailSafe+0x1d0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009980:	4b6a      	ldr	r3, [pc, #424]	; (8009b2c <interrupt_FailSafe+0x1d4>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009986:	4b6a      	ldr	r3, [pc, #424]	; (8009b30 <interrupt_FailSafe+0x1d8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 800998c:	4b69      	ldr	r3, [pc, #420]	; (8009b34 <interrupt_FailSafe+0x1dc>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d062      	beq.n	8009a5a <interrupt_FailSafe+0x102>
 8009994:	4b67      	ldr	r3, [pc, #412]	; (8009b34 <interrupt_FailSafe+0x1dc>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d05e      	beq.n	8009a5a <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 800999c:	4b66      	ldr	r3, [pc, #408]	; (8009b38 <interrupt_FailSafe+0x1e0>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d15a      	bne.n	8009a5a <interrupt_FailSafe+0x102>
 80099a4:	4b65      	ldr	r3, [pc, #404]	; (8009b3c <interrupt_FailSafe+0x1e4>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d156      	bne.n	8009a5a <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 80099ac:	4b64      	ldr	r3, [pc, #400]	; (8009b40 <interrupt_FailSafe+0x1e8>)
 80099ae:	ed93 7a00 	vldr	s14, [r3]
 80099b2:	4b64      	ldr	r3, [pc, #400]	; (8009b44 <interrupt_FailSafe+0x1ec>)
 80099b4:	edd3 7a00 	vldr	s15, [r3]
 80099b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099bc:	eef0 7ae7 	vabs.f32	s15, s15
 80099c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80099c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099cc:	d809      	bhi.n	80099e2 <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80099ce:	f7fe f879 	bl	8007ac4 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 80099d2:	2001      	movs	r0, #1
 80099d4:	f7fd fa8e 	bl	8006ef4 <pl_yellow_LED_count>
						error_mode = 1;
 80099d8:	4b58      	ldr	r3, [pc, #352]	; (8009b3c <interrupt_FailSafe+0x1e4>)
 80099da:	2201      	movs	r2, #1
 80099dc:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80099de:	f7fa fee1 	bl	80047a4 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 80099e2:	4b59      	ldr	r3, [pc, #356]	; (8009b48 <interrupt_FailSafe+0x1f0>)
 80099e4:	edd3 7a00 	vldr	s15, [r3]
 80099e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80099ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f4:	d809      	bhi.n	8009a0a <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80099f6:	f7fe f865 	bl	8007ac4 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 80099fa:	2002      	movs	r0, #2
 80099fc:	f7fd fa7a 	bl	8006ef4 <pl_yellow_LED_count>
						error_mode = 1;
 8009a00:	4b4e      	ldr	r3, [pc, #312]	; (8009b3c <interrupt_FailSafe+0x1e4>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009a06:	f7fa fecd 	bl	80047a4 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 8009a0a:	4b50      	ldr	r3, [pc, #320]	; (8009b4c <interrupt_FailSafe+0x1f4>)
 8009a0c:	ed93 7a00 	vldr	s14, [r3]
 8009a10:	4b4f      	ldr	r3, [pc, #316]	; (8009b50 <interrupt_FailSafe+0x1f8>)
 8009a12:	edd3 6a00 	vldr	s13, [r3]
 8009a16:	4b4f      	ldr	r3, [pc, #316]	; (8009b54 <interrupt_FailSafe+0x1fc>)
 8009a18:	edd3 7a00 	vldr	s15, [r3]
 8009a1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009a20:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009a24:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a2c:	eef0 7ae7 	vabs.f32	s15, s15
 8009a30:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3c:	d80d      	bhi.n	8009a5a <interrupt_FailSafe+0x102>
 8009a3e:	4b3d      	ldr	r3, [pc, #244]	; (8009b34 <interrupt_FailSafe+0x1dc>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d109      	bne.n	8009a5a <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009a46:	f7fe f83d 	bl	8007ac4 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009a4a:	2004      	movs	r0, #4
 8009a4c:	f7fd fa52 	bl	8006ef4 <pl_yellow_LED_count>
						error_mode = 1;
 8009a50:	4b3a      	ldr	r3, [pc, #232]	; (8009b3c <interrupt_FailSafe+0x1e4>)
 8009a52:	2201      	movs	r2, #1
 8009a54:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009a56:	f7fa fea5 	bl	80047a4 <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009a5a:	4b38      	ldr	r3, [pc, #224]	; (8009b3c <interrupt_FailSafe+0x1e4>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d153      	bne.n	8009b0a <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8009a62:	4b3d      	ldr	r3, [pc, #244]	; (8009b58 <interrupt_FailSafe+0x200>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009a68:	4b3c      	ldr	r3, [pc, #240]	; (8009b5c <interrupt_FailSafe+0x204>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	4a3b      	ldr	r2, [pc, #236]	; (8009b5c <interrupt_FailSafe+0x204>)
 8009a70:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8009a72:	4b3a      	ldr	r3, [pc, #232]	; (8009b5c <interrupt_FailSafe+0x204>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a7a:	dc05      	bgt.n	8009a88 <interrupt_FailSafe+0x130>
			init_WallControl();
 8009a7c:	f7fa ffc8 	bl	8004a10 <init_WallControl>
			modeacc=100;//エラー用
 8009a80:	4b2c      	ldr	r3, [pc, #176]	; (8009b34 <interrupt_FailSafe+0x1dc>)
 8009a82:	2264      	movs	r2, #100	; 0x64
 8009a84:	701a      	strb	r2, [r3, #0]
 8009a86:	e009      	b.n	8009a9c <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009a88:	2000      	movs	r0, #0
 8009a8a:	f7fd ff87 	bl	800799c <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 8009a8e:	f7fd ffeb 	bl	8007a68 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 8009a92:	f7fe f817 	bl	8007ac4 <pl_FunMotor_stop>
			modeacc=0;
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <interrupt_FailSafe+0x1dc>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8009a9c:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <interrupt_FailSafe+0x208>)
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa2:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009aa4:	4b2f      	ldr	r3, [pc, #188]	; (8009b64 <interrupt_FailSafe+0x20c>)
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8009aac:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <interrupt_FailSafe+0x210>)
 8009aae:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab2:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8009ab4:	4b2d      	ldr	r3, [pc, #180]	; (8009b6c <interrupt_FailSafe+0x214>)
 8009ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aba:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 8009abc:	4b2c      	ldr	r3, [pc, #176]	; (8009b70 <interrupt_FailSafe+0x218>)
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac2:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8009ac4:	4b2b      	ldr	r3, [pc, #172]	; (8009b74 <interrupt_FailSafe+0x21c>)
 8009ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aca:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 8009acc:	4b2a      	ldr	r3, [pc, #168]	; (8009b78 <interrupt_FailSafe+0x220>)
 8009ace:	4a2b      	ldr	r2, [pc, #172]	; (8009b7c <interrupt_FailSafe+0x224>)
 8009ad0:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 8009ad2:	4b2b      	ldr	r3, [pc, #172]	; (8009b80 <interrupt_FailSafe+0x228>)
 8009ad4:	4a29      	ldr	r2, [pc, #164]	; (8009b7c <interrupt_FailSafe+0x224>)
 8009ad6:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009ad8:	4b2a      	ldr	r3, [pc, #168]	; (8009b84 <interrupt_FailSafe+0x22c>)
 8009ada:	4a2b      	ldr	r2, [pc, #172]	; (8009b88 <interrupt_FailSafe+0x230>)
 8009adc:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 8009ade:	4b2b      	ldr	r3, [pc, #172]	; (8009b8c <interrupt_FailSafe+0x234>)
 8009ae0:	4a29      	ldr	r2, [pc, #164]	; (8009b88 <interrupt_FailSafe+0x230>)
 8009ae2:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009ae4:	4b2a      	ldr	r3, [pc, #168]	; (8009b90 <interrupt_FailSafe+0x238>)
 8009ae6:	4a2b      	ldr	r2, [pc, #172]	; (8009b94 <interrupt_FailSafe+0x23c>)
 8009ae8:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 8009aea:	4b2b      	ldr	r3, [pc, #172]	; (8009b98 <interrupt_FailSafe+0x240>)
 8009aec:	4a29      	ldr	r2, [pc, #164]	; (8009b94 <interrupt_FailSafe+0x23c>)
 8009aee:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009af0:	4b2a      	ldr	r3, [pc, #168]	; (8009b9c <interrupt_FailSafe+0x244>)
 8009af2:	4a28      	ldr	r2, [pc, #160]	; (8009b94 <interrupt_FailSafe+0x23c>)
 8009af4:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009af6:	4b2a      	ldr	r3, [pc, #168]	; (8009ba0 <interrupt_FailSafe+0x248>)
 8009af8:	4a26      	ldr	r2, [pc, #152]	; (8009b94 <interrupt_FailSafe+0x23c>)
 8009afa:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009afc:	4b29      	ldr	r3, [pc, #164]	; (8009ba4 <interrupt_FailSafe+0x24c>)
 8009afe:	2204      	movs	r2, #4
 8009b00:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009b02:	4b29      	ldr	r3, [pc, #164]	; (8009ba8 <interrupt_FailSafe+0x250>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009b08:	e002      	b.n	8009b10 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009b0a:	4b14      	ldr	r3, [pc, #80]	; (8009b5c <interrupt_FailSafe+0x204>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]
}
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	20000808 	.word	0x20000808
 8009b1c:	2000080c 	.word	0x2000080c
 8009b20:	20000810 	.word	0x20000810
 8009b24:	20000814 	.word	0x20000814
 8009b28:	20000818 	.word	0x20000818
 8009b2c:	2000081c 	.word	0x2000081c
 8009b30:	20000820 	.word	0x20000820
 8009b34:	20000528 	.word	0x20000528
 8009b38:	20000806 	.word	0x20000806
 8009b3c:	20000807 	.word	0x20000807
 8009b40:	200004e4 	.word	0x200004e4
 8009b44:	20000268 	.word	0x20000268
 8009b48:	20000274 	.word	0x20000274
 8009b4c:	200004d8 	.word	0x200004d8
 8009b50:	2000025c 	.word	0x2000025c
 8009b54:	20000258 	.word	0x20000258
 8009b58:	2000d96c 	.word	0x2000d96c
 8009b5c:	20000824 	.word	0x20000824
 8009b60:	200005b8 	.word	0x200005b8
 8009b64:	200005b4 	.word	0x200005b4
 8009b68:	200005c0 	.word	0x200005c0
 8009b6c:	200005bc 	.word	0x200005bc
 8009b70:	200005c8 	.word	0x200005c8
 8009b74:	200005c4 	.word	0x200005c4
 8009b78:	200005d0 	.word	0x200005d0
 8009b7c:	42480000 	.word	0x42480000
 8009b80:	200005cc 	.word	0x200005cc
 8009b84:	200005d8 	.word	0x200005d8
 8009b88:	41a00000 	.word	0x41a00000
 8009b8c:	200005d4 	.word	0x200005d4
 8009b90:	200005e0 	.word	0x200005e0
 8009b94:	420c0000 	.word	0x420c0000
 8009b98:	200005dc 	.word	0x200005dc
 8009b9c:	200005e8 	.word	0x200005e8
 8009ba0:	200005e4 	.word	0x200005e4
 8009ba4:	20000804 	.word	0x20000804
 8009ba8:	20000592 	.word	0x20000592

08009bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08a      	sub	sp, #40	; 0x28
 8009bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bb2:	f107 0314 	add.w	r3, r7, #20
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	605a      	str	r2, [r3, #4]
 8009bbc:	609a      	str	r2, [r3, #8]
 8009bbe:	60da      	str	r2, [r3, #12]
 8009bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009bc2:	4b3a      	ldr	r3, [pc, #232]	; (8009cac <MX_GPIO_Init+0x100>)
 8009bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc6:	4a39      	ldr	r2, [pc, #228]	; (8009cac <MX_GPIO_Init+0x100>)
 8009bc8:	f043 0304 	orr.w	r3, r3, #4
 8009bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bce:	4b37      	ldr	r3, [pc, #220]	; (8009cac <MX_GPIO_Init+0x100>)
 8009bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd2:	f003 0304 	and.w	r3, r3, #4
 8009bd6:	613b      	str	r3, [r7, #16]
 8009bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009bda:	4b34      	ldr	r3, [pc, #208]	; (8009cac <MX_GPIO_Init+0x100>)
 8009bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bde:	4a33      	ldr	r2, [pc, #204]	; (8009cac <MX_GPIO_Init+0x100>)
 8009be0:	f043 0320 	orr.w	r3, r3, #32
 8009be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009be6:	4b31      	ldr	r3, [pc, #196]	; (8009cac <MX_GPIO_Init+0x100>)
 8009be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bf2:	4b2e      	ldr	r3, [pc, #184]	; (8009cac <MX_GPIO_Init+0x100>)
 8009bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf6:	4a2d      	ldr	r2, [pc, #180]	; (8009cac <MX_GPIO_Init+0x100>)
 8009bf8:	f043 0301 	orr.w	r3, r3, #1
 8009bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bfe:	4b2b      	ldr	r3, [pc, #172]	; (8009cac <MX_GPIO_Init+0x100>)
 8009c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	60bb      	str	r3, [r7, #8]
 8009c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c0a:	4b28      	ldr	r3, [pc, #160]	; (8009cac <MX_GPIO_Init+0x100>)
 8009c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c0e:	4a27      	ldr	r2, [pc, #156]	; (8009cac <MX_GPIO_Init+0x100>)
 8009c10:	f043 0302 	orr.w	r3, r3, #2
 8009c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c16:	4b25      	ldr	r3, [pc, #148]	; (8009cac <MX_GPIO_Init+0x100>)
 8009c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	607b      	str	r3, [r7, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009c22:	2200      	movs	r2, #0
 8009c24:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009c28:	4821      	ldr	r0, [pc, #132]	; (8009cb0 <MX_GPIO_Init+0x104>)
 8009c2a:	f010 ffe1 	bl	801abf0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f648 1110 	movw	r1, #35088	; 0x8910
 8009c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c38:	f010 ffda 	bl	801abf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009c42:	481c      	ldr	r0, [pc, #112]	; (8009cb4 <MX_GPIO_Init+0x108>)
 8009c44:	f010 ffd4 	bl	801abf0 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009c48:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009c4c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c56:	2300      	movs	r3, #0
 8009c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c5a:	f107 0314 	add.w	r3, r7, #20
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4813      	ldr	r0, [pc, #76]	; (8009cb0 <MX_GPIO_Init+0x104>)
 8009c62:	f010 fe43 	bl	801a8ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009c66:	f648 1310 	movw	r3, #35088	; 0x8910
 8009c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c70:	2300      	movs	r3, #0
 8009c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c74:	2300      	movs	r3, #0
 8009c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c78:	f107 0314 	add.w	r3, r7, #20
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c82:	f010 fe33 	bl	801a8ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009c86:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009c8a:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c94:	2300      	movs	r3, #0
 8009c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c98:	f107 0314 	add.w	r3, r7, #20
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4805      	ldr	r0, [pc, #20]	; (8009cb4 <MX_GPIO_Init+0x108>)
 8009ca0:	f010 fe24 	bl	801a8ec <HAL_GPIO_Init>

}
 8009ca4:	bf00      	nop
 8009ca6:	3728      	adds	r7, #40	; 0x28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	40021000 	.word	0x40021000
 8009cb0:	48000800 	.word	0x48000800
 8009cb4:	48000400 	.word	0x48000400

08009cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009cb8:	b590      	push	{r4, r7, lr}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009cbe:	f00d fd63 	bl	8017788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009cc2:	f000 f8a7 	bl	8009e14 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009cc6:	f7ff fddb 	bl	8009880 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009cca:	f7ff ff6f 	bl	8009bac <MX_GPIO_Init>
  MX_ADC1_Init();
 8009cce:	f7fe f9d5 	bl	800807c <MX_ADC1_Init>
  MX_SPI1_Init();
 8009cd2:	f00c fbc9 	bl	8016468 <MX_SPI1_Init>
  MX_TIM6_Init();
 8009cd6:	f00c fe35 	bl	8016944 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009cda:	f00c fe69 	bl	80169b0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009cde:	f00d fc85 	bl	80175ec <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_SPI3_Init();
 8009ce2:	f00c fbff 	bl	80164e4 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009ce6:	f00c ff03 	bl	8016af0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009cea:	f7fe f8d9 	bl	8007ea0 <pl_timer_init>
  pl_gyro_init();
 8009cee:	f7fd fd69 	bl	80077c4 <pl_gyro_init>
  pl_sensor_init();
 8009cf2:	f7fd ff17 	bl	8007b24 <pl_sensor_init>
  reset_distance();
 8009cf6:	f7f7 f951 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009cfa:	f7f7 fce5 	bl	80016c8 <reset_gyro>
  reset_speed();
 8009cfe:	f7f7 f98b 	bl	8001018 <reset_speed>
  record_reset();
 8009d02:	f00c f93f 	bl	8015f84 <record_reset>
  pl_motor_init();
 8009d06:	f7fd fe23 	bl	8007950 <pl_motor_init>
  PID_Init();
 8009d0a:	f7fa fd0f 	bl	800472c <PID_Init>
  init_WallControl();
 8009d0e:	f7fa fe7f 	bl	8004a10 <init_WallControl>
  Control_mode_Init();
 8009d12:	f7f8 f83b 	bl	8001d8c <Control_mode_Init>
  init_FailSafe();
 8009d16:	f7ff fddd 	bl	80098d4 <init_FailSafe>
  input_parameter();
 8009d1a:	f00d f8c9 	bl	8016eb0 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <main+0x148>)
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009d28:	4b35      	ldr	r3, [pc, #212]	; (8009e00 <main+0x148>)
 8009d2a:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d2c:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009d2e:	4b34      	ldr	r3, [pc, #208]	; (8009e00 <main+0x148>)
 8009d30:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d32:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009d34:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <main+0x148>)
 8009d36:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d38:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009d3a:	4b31      	ldr	r3, [pc, #196]	; (8009e00 <main+0x148>)
 8009d3c:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d3e:	9301      	str	r3, [sp, #4]
 8009d40:	9200      	str	r2, [sp, #0]
 8009d42:	4623      	mov	r3, r4
 8009d44:	4602      	mov	r2, r0
 8009d46:	482f      	ldr	r0, [pc, #188]	; (8009e04 <main+0x14c>)
 8009d48:	f015 fce8 	bl	801f71c <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d4c:	4b2e      	ldr	r3, [pc, #184]	; (8009e08 <main+0x150>)
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009d52:	4b2d      	ldr	r3, [pc, #180]	; (8009e08 <main+0x150>)
 8009d54:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d56:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009d58:	4b2b      	ldr	r3, [pc, #172]	; (8009e08 <main+0x150>)
 8009d5a:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d5c:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009d5e:	4b2a      	ldr	r3, [pc, #168]	; (8009e08 <main+0x150>)
 8009d60:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d62:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009d64:	4b28      	ldr	r3, [pc, #160]	; (8009e08 <main+0x150>)
 8009d66:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d68:	9301      	str	r3, [sp, #4]
 8009d6a:	9200      	str	r2, [sp, #0]
 8009d6c:	4623      	mov	r3, r4
 8009d6e:	4602      	mov	r2, r0
 8009d70:	4826      	ldr	r0, [pc, #152]	; (8009e0c <main+0x154>)
 8009d72:	f015 fcd3 	bl	801f71c <iprintf>
	battcheak();
 8009d76:	f7f7 feb3 	bl	8001ae0 <battcheak>

//起動cheak
	int yellow_count=1;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009d7e:	2300      	movs	r3, #0
 8009d80:	607b      	str	r3, [r7, #4]
 8009d82:	e00d      	b.n	8009da0 <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fd f8b3 	bl	8006ef4 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009d8e:	2032      	movs	r0, #50	; 0x32
 8009d90:	f00d fd72 	bl	8017878 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	607b      	str	r3, [r7, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b07      	cmp	r3, #7
 8009da4:	ddee      	ble.n	8009d84 <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009da6:	2300      	movs	r3, #0
 8009da8:	603b      	str	r3, [r7, #0]
 8009daa:	e00f      	b.n	8009dcc <main+0x114>
			pl_yellow_LED_count(yellow_count);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fd f89f 	bl	8006ef4 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009db6:	2032      	movs	r0, #50	; 0x32
 8009db8:	f00d fd5e 	bl	8017878 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	0fda      	lsrs	r2, r3, #31
 8009dc0:	4413      	add	r3, r2
 8009dc2:	105b      	asrs	r3, r3, #1
 8009dc4:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b08      	cmp	r3, #8
 8009dd0:	ddec      	ble.n	8009dac <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f00a fcbe 	bl	8014758 <mode_decision>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009de0:	f7f7 f8dc 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009de4:	f7f7 fc70 	bl	80016c8 <reset_gyro>
	  		reset_speed();
 8009de8:	f7f7 f916 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	4618      	mov	r0, r3
 8009df2:	f00a fdab 	bl	801494c <mode_execution>

	  		error_mode = 0;
 8009df6:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <main+0x158>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009dfc:	e7e9      	b.n	8009dd2 <main+0x11a>
 8009dfe:	bf00      	nop
 8009e00:	2000070c 	.word	0x2000070c
 8009e04:	08021ed8 	.word	0x08021ed8
 8009e08:	20000718 	.word	0x20000718
 8009e0c:	08021f04 	.word	0x08021f04
 8009e10:	20000807 	.word	0x20000807

08009e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b094      	sub	sp, #80	; 0x50
 8009e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009e1a:	f107 0318 	add.w	r3, r7, #24
 8009e1e:	2238      	movs	r2, #56	; 0x38
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f015 f808 	bl	801ee38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009e28:	1d3b      	adds	r3, r7, #4
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	605a      	str	r2, [r3, #4]
 8009e30:	609a      	str	r2, [r3, #8]
 8009e32:	60da      	str	r2, [r3, #12]
 8009e34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009e36:	2000      	movs	r0, #0
 8009e38:	f010 fef2 	bl	801ac20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e44:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009e46:	2302      	movs	r3, #2
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009e4e:	2304      	movs	r3, #4
 8009e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009e52:	2355      	movs	r3, #85	; 0x55
 8009e54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009e56:	2302      	movs	r3, #2
 8009e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009e5e:	2302      	movs	r3, #2
 8009e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e62:	f107 0318 	add.w	r3, r7, #24
 8009e66:	4618      	mov	r0, r3
 8009e68:	f010 ff8e 	bl	801ad88 <HAL_RCC_OscConfig>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009e72:	f000 f81a 	bl	8009eaa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e76:	230f      	movs	r3, #15
 8009e78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009e82:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009e8e:	1d3b      	adds	r3, r7, #4
 8009e90:	2104      	movs	r1, #4
 8009e92:	4618      	mov	r0, r3
 8009e94:	f011 fa90 	bl	801b3b8 <HAL_RCC_ClockConfig>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009e9e:	f000 f804 	bl	8009eaa <Error_Handler>
  }
}
 8009ea2:	bf00      	nop
 8009ea4:	3750      	adds	r7, #80	; 0x50
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009eae:	b672      	cpsid	i
}
 8009eb0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009eb2:	e7fe      	b.n	8009eb2 <Error_Handler+0x8>

08009eb4 <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	ed87 0a03 	vstr	s0, [r7, #12]
 8009ebe:	edc7 0a02 	vstr	s1, [r7, #8]
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	71fb      	strb	r3, [r7, #7]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	71bb      	strb	r3, [r7, #6]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009ed4:	f7fa f854 	bl	8003f80 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ed8:	2003      	movs	r0, #3
 8009eda:	f7fd fd91 	bl	8007a00 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ede:	2003      	movs	r0, #3
 8009ee0:	f7fd fd66 	bl	80079b0 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009ee4:	2032      	movs	r0, #50	; 0x32
 8009ee6:	f7fe f88b 	bl	8008000 <wait_ms_NoReset>
	}
	if(left_wall){
 8009eea:	79bb      	ldrb	r3, [r7, #6]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d02c      	beq.n	8009f4a <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009ef0:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ef4:	edd7 1a03 	vldr	s3, [r7, #12]
 8009ef8:	ed9f 1a50 	vldr	s2, [pc, #320]	; 800a03c <backTurn_controlWall+0x188>
 8009efc:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800a03c <backTurn_controlWall+0x188>
 8009f00:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800a040 <backTurn_controlWall+0x18c>
 8009f04:	f7f9 fd40 	bl	8003988 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f08:	2003      	movs	r0, #3
 8009f0a:	f7fd fd79 	bl	8007a00 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f0e:	2003      	movs	r0, #3
 8009f10:	f7fd fd4e 	bl	80079b0 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f14:	2032      	movs	r0, #50	; 0x32
 8009f16:	f7fe f873 	bl	8008000 <wait_ms_NoReset>
		no_frontwall_straight();
 8009f1a:	f7fa f831 	bl	8003f80 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f1e:	2003      	movs	r0, #3
 8009f20:	f7fd fd6e 	bl	8007a00 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f24:	2003      	movs	r0, #3
 8009f26:	f7fd fd43 	bl	80079b0 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009f2a:	2032      	movs	r0, #50	; 0x32
 8009f2c:	f7fe f868 	bl	8008000 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f30:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f34:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f38:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800a03c <backTurn_controlWall+0x188>
 8009f3c:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800a03c <backTurn_controlWall+0x188>
 8009f40:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800a040 <backTurn_controlWall+0x18c>
 8009f44:	f7f9 fd20 	bl	8003988 <turning_table2>
 8009f48:	e06a      	b.n	800a020 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009f4a:	79bb      	ldrb	r3, [r7, #6]
 8009f4c:	f083 0301 	eor.w	r3, r3, #1
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d037      	beq.n	8009fc6 <backTurn_controlWall+0x112>
 8009f56:	797b      	ldrb	r3, [r7, #5]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d034      	beq.n	8009fc6 <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009f5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f60:	eef1 7a67 	vneg.f32	s15, s15
 8009f64:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f68:	eef0 1a67 	vmov.f32	s3, s15
 8009f6c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800a03c <backTurn_controlWall+0x188>
 8009f70:	eddf 0a32 	vldr	s1, [pc, #200]	; 800a03c <backTurn_controlWall+0x188>
 8009f74:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800a044 <backTurn_controlWall+0x190>
 8009f78:	f7f9 fd06 	bl	8003988 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f7c:	2003      	movs	r0, #3
 8009f7e:	f7fd fd3f 	bl	8007a00 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f82:	2003      	movs	r0, #3
 8009f84:	f7fd fd14 	bl	80079b0 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f88:	2032      	movs	r0, #50	; 0x32
 8009f8a:	f7fe f839 	bl	8008000 <wait_ms_NoReset>
		no_frontwall_straight();
 8009f8e:	f7f9 fff7 	bl	8003f80 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f92:	2003      	movs	r0, #3
 8009f94:	f7fd fd34 	bl	8007a00 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f98:	2003      	movs	r0, #3
 8009f9a:	f7fd fd09 	bl	80079b0 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009f9e:	2032      	movs	r0, #50	; 0x32
 8009fa0:	f7fe f82e 	bl	8008000 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fa8:	eef1 7a67 	vneg.f32	s15, s15
 8009fac:	ed97 2a02 	vldr	s4, [r7, #8]
 8009fb0:	eef0 1a67 	vmov.f32	s3, s15
 8009fb4:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800a03c <backTurn_controlWall+0x188>
 8009fb8:	eddf 0a20 	vldr	s1, [pc, #128]	; 800a03c <backTurn_controlWall+0x188>
 8009fbc:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800a044 <backTurn_controlWall+0x190>
 8009fc0:	f7f9 fce2 	bl	8003988 <turning_table2>
 8009fc4:	e02c      	b.n	800a020 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 8009fc6:	79bb      	ldrb	r3, [r7, #6]
 8009fc8:	f083 0301 	eor.w	r3, r3, #1
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d026      	beq.n	800a020 <backTurn_controlWall+0x16c>
 8009fd2:	797b      	ldrb	r3, [r7, #5]
 8009fd4:	f083 0301 	eor.w	r3, r3, #1
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d020      	beq.n	800a020 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009fde:	ed97 2a02 	vldr	s4, [r7, #8]
 8009fe2:	edd7 1a03 	vldr	s3, [r7, #12]
 8009fe6:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800a03c <backTurn_controlWall+0x188>
 8009fea:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a03c <backTurn_controlWall+0x188>
 8009fee:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a040 <backTurn_controlWall+0x18c>
 8009ff2:	f7f9 fcc9 	bl	8003988 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ff6:	2003      	movs	r0, #3
 8009ff8:	f7fd fd02 	bl	8007a00 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ffc:	2003      	movs	r0, #3
 8009ffe:	f7fd fcd7 	bl	80079b0 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a002:	2032      	movs	r0, #50	; 0x32
 800a004:	f7fd fffc 	bl	8008000 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a008:	ed97 2a02 	vldr	s4, [r7, #8]
 800a00c:	edd7 1a03 	vldr	s3, [r7, #12]
 800a010:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800a03c <backTurn_controlWall+0x188>
 800a014:	eddf 0a09 	vldr	s1, [pc, #36]	; 800a03c <backTurn_controlWall+0x188>
 800a018:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a040 <backTurn_controlWall+0x18c>
 800a01c:	f7f9 fcb4 	bl	8003988 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a020:	2003      	movs	r0, #3
 800a022:	f7fd fced 	bl	8007a00 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a026:	2003      	movs	r0, #3
 800a028:	f7fd fcc2 	bl	80079b0 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 800a02c:	2032      	movs	r0, #50	; 0x32
 800a02e:	f7fd ffe7 	bl	8008000 <wait_ms_NoReset>

}
 800a032:	bf00      	nop
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	00000000 	.word	0x00000000
 800a040:	42b40000 	.word	0x42b40000
 800a044:	c2b40000 	.word	0xc2b40000

0800a048 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a048:	b084      	sub	sp, #16
 800a04a:	b5b0      	push	{r4, r5, r7, lr}
 800a04c:	ed2d 8b02 	vpush	{d8}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a05c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a060:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a064:	2b01      	cmp	r3, #1
 800a066:	f040 80f5 	bne.w	800a254 <slalomR+0x20c>
		highspeed_mode = 0;
 800a06a:	4bcd      	ldr	r3, [pc, #820]	; (800a3a0 <slalomR+0x358>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a070:	2301      	movs	r3, #1
 800a072:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a074:	2300      	movs	r3, #0
 800a076:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a080:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a084:	2b00      	cmp	r3, #0
 800a086:	d11f      	bne.n	800a0c8 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a088:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a08c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a090:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a094:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a09c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a0a0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a0a4:	eddf 5abf 	vldr	s11, [pc, #764]	; 800a3a4 <slalomR+0x35c>
 800a0a8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	eeb0 2a47 	vmov.f32	s4, s14
 800a0b2:	eef0 1a46 	vmov.f32	s3, s12
 800a0b6:	eeb0 1a66 	vmov.f32	s2, s13
 800a0ba:	eddf 0abb 	vldr	s1, [pc, #748]	; 800a3a8 <slalomR+0x360>
 800a0be:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800a3ac <slalomR+0x364>
 800a0c2:	f7f8 ff53 	bl	8002f6c <straight_table2>
 800a0c6:	e01e      	b.n	800a106 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a0c8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a0cc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a0d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0dc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a0e0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a0e4:	eddf 5aaf 	vldr	s11, [pc, #700]	; 800a3a4 <slalomR+0x35c>
 800a0e8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	eeb0 2a47 	vmov.f32	s4, s14
 800a0f2:	eef0 1a46 	vmov.f32	s3, s12
 800a0f6:	eeb0 1a66 	vmov.f32	s2, s13
 800a0fa:	eddf 0aab 	vldr	s1, [pc, #684]	; 800a3a8 <slalomR+0x360>
 800a0fe:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a3b0 <slalomR+0x368>
 800a102:	f7f8 ff33 	bl	8002f6c <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a106:	2301      	movs	r3, #1
 800a108:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a10e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	d127      	bne.n	800a166 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a116:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a11a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a11e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a122:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a126:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a12a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a12e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a132:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a13a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a13e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a142:	eddf 4a98 	vldr	s9, [pc, #608]	; 800a3a4 <slalomR+0x35c>
 800a146:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	eeb0 2a47 	vmov.f32	s4, s14
 800a150:	eef0 1a45 	vmov.f32	s3, s10
 800a154:	eeb0 1a65 	vmov.f32	s2, s11
 800a158:	eef0 0a46 	vmov.f32	s1, s12
 800a15c:	eeb0 0a66 	vmov.f32	s0, s13
 800a160:	f7f8 ff04 	bl	8002f6c <straight_table2>
 800a164:	e022      	b.n	800a1ac <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a166:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a16a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a16e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a172:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a176:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a17a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a17e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a182:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a186:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a18a:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a3a4 <slalomR+0x35c>
 800a18e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	eeb0 2a47 	vmov.f32	s4, s14
 800a198:	eef0 1a45 	vmov.f32	s3, s10
 800a19c:	eeb0 1a65 	vmov.f32	s2, s11
 800a1a0:	eef0 0a46 	vmov.f32	s1, s12
 800a1a4:	eeb0 0a66 	vmov.f32	s0, s13
 800a1a8:	f7f8 fee0 	bl	8002f6c <straight_table2>
		}
		if(mollifier_mode == ON){
 800a1ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d10c      	bne.n	800a1ce <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a1b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a1bc:	eeb0 1a47 	vmov.f32	s2, s14
 800a1c0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800a3b4 <slalomR+0x36c>
 800a1c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a1c8:	f7f9 fe46 	bl	8003e58 <mollifier_slalom_table>
 800a1cc:	e015      	b.n	800a1fa <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a1ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a1d6:	eef1 7a67 	vneg.f32	s15, s15
 800a1da:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a1de:	eef0 2a66 	vmov.f32	s5, s13
 800a1e2:	eeb0 2a67 	vmov.f32	s4, s15
 800a1e6:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a3a8 <slalomR+0x360>
 800a1ea:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a3a8 <slalomR+0x360>
 800a1ee:	eddf 0a71 	vldr	s1, [pc, #452]	; 800a3b4 <slalomR+0x36c>
 800a1f2:	eeb0 0a47 	vmov.f32	s0, s14
 800a1f6:	f7f9 fcdf 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a202:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a206:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a3a4 <slalomR+0x35c>
 800a20a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a20e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a212:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a216:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a21a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a21e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a222:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a226:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a22a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a3a4 <slalomR+0x35c>
 800a22e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	eeb0 2a47 	vmov.f32	s4, s14
 800a238:	eef0 1a65 	vmov.f32	s3, s11
 800a23c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a3a8 <slalomR+0x360>
 800a240:	eef0 0a46 	vmov.f32	s1, s12
 800a244:	eeb0 0a66 	vmov.f32	s0, s13
 800a248:	f7f8 fe90 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800a24c:	4b54      	ldr	r3, [pc, #336]	; (800a3a0 <slalomR+0x358>)
 800a24e:	2200      	movs	r2, #0
 800a250:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a252:	e09c      	b.n	800a38e <slalomR+0x346>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a254:	2300      	movs	r3, #0
 800a256:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a258:	2300      	movs	r3, #0
 800a25a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a25c:	2301      	movs	r3, #1
 800a25e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a260:	2300      	movs	r3, #0
 800a262:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a264:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a268:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a26c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a270:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a274:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a278:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a27c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a280:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a284:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a288:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a3a4 <slalomR+0x35c>
 800a28c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	eeb0 2a47 	vmov.f32	s4, s14
 800a296:	eef0 1a45 	vmov.f32	s3, s10
 800a29a:	eeb0 1a65 	vmov.f32	s2, s11
 800a29e:	eef0 0a46 	vmov.f32	s1, s12
 800a2a2:	eeb0 0a66 	vmov.f32	s0, s13
 800a2a6:	f7f8 fe61 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800a2aa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d10c      	bne.n	800a2cc <slalomR+0x284>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a2b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a2ba:	eeb0 1a47 	vmov.f32	s2, s14
 800a2be:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a3b4 <slalomR+0x36c>
 800a2c2:	eeb0 0a67 	vmov.f32	s0, s15
 800a2c6:	f7f9 fdc7 	bl	8003e58 <mollifier_slalom_table>
 800a2ca:	e015      	b.n	800a2f8 <slalomR+0x2b0>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a2cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a2d4:	eef1 7a67 	vneg.f32	s15, s15
 800a2d8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a2dc:	eef0 2a66 	vmov.f32	s5, s13
 800a2e0:	eeb0 2a67 	vmov.f32	s4, s15
 800a2e4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a3a8 <slalomR+0x360>
 800a2e8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a3a8 <slalomR+0x360>
 800a2ec:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a3b4 <slalomR+0x36c>
 800a2f0:	eeb0 0a47 	vmov.f32	s0, s14
 800a2f4:	f7f9 fc60 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a300:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a304:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a308:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a30c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a310:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a314:	edd7 7a01 	vldr	s15, [r7, #4]
 800a318:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a31c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a320:	eef0 7ae7 	vabs.f32	s15, s15
 800a324:	ee17 0a90 	vmov	r0, s15
 800a328:	f7f6 f936 	bl	8000598 <__aeabi_f2d>
 800a32c:	f04f 0200 	mov.w	r2, #0
 800a330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a334:	f7f6 fab2 	bl	800089c <__aeabi_ddiv>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4614      	mov	r4, r2
 800a33e:	461d      	mov	r5, r3
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	4618      	mov	r0, r3
 800a344:	f7f6 f928 	bl	8000598 <__aeabi_f2d>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4620      	mov	r0, r4
 800a34e:	4629      	mov	r1, r5
 800a350:	f7f6 faa4 	bl	800089c <__aeabi_ddiv>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4610      	mov	r0, r2
 800a35a:	4619      	mov	r1, r3
 800a35c:	f04f 0200 	mov.w	r2, #0
 800a360:	4b15      	ldr	r3, [pc, #84]	; (800a3b8 <slalomR+0x370>)
 800a362:	f7f5 ffbb 	bl	80002dc <__adddf3>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a36a:	4610      	mov	r0, r2
 800a36c:	4619      	mov	r1, r3
 800a36e:	f7f6 fc43 	bl	8000bf8 <__aeabi_d2f>
 800a372:	4603      	mov	r3, r0
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	ee02 3a10 	vmov	s4, r3
 800a37a:	edd7 1a01 	vldr	s3, [r7, #4]
 800a37e:	ed97 1a01 	vldr	s2, [r7, #4]
 800a382:	eef0 0a68 	vmov.f32	s1, s17
 800a386:	eeb0 0a48 	vmov.f32	s0, s16
 800a38a:	f7f8 fdef 	bl	8002f6c <straight_table2>
}
 800a38e:	bf00      	nop
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	ecbd 8b02 	vpop	{d8}
 800a398:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a39c:	b004      	add	sp, #16
 800a39e:	4770      	bx	lr
 800a3a0:	20000808 	.word	0x20000808
 800a3a4:	42340000 	.word	0x42340000
 800a3a8:	00000000 	.word	0x00000000
 800a3ac:	431b8000 	.word	0x431b8000
 800a3b0:	43138000 	.word	0x43138000
 800a3b4:	c2b40000 	.word	0xc2b40000
 800a3b8:	408f4000 	.word	0x408f4000

0800a3bc <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a3bc:	b084      	sub	sp, #16
 800a3be:	b5b0      	push	{r4, r5, r7, lr}
 800a3c0:	ed2d 8b02 	vpush	{d8}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a3cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a3d0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a3d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	f040 80f3 	bne.w	800a5c4 <slalomL+0x208>
		highspeed_mode = 0;
 800a3de:	4bcb      	ldr	r3, [pc, #812]	; (800a70c <slalomL+0x350>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a3f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d11f      	bne.n	800a43c <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3fc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a400:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a404:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a408:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a40c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a410:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a414:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a418:	eddf 5abd 	vldr	s11, [pc, #756]	; 800a710 <slalomL+0x354>
 800a41c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	eeb0 2a47 	vmov.f32	s4, s14
 800a426:	eef0 1a46 	vmov.f32	s3, s12
 800a42a:	eeb0 1a66 	vmov.f32	s2, s13
 800a42e:	eddf 0ab9 	vldr	s1, [pc, #740]	; 800a714 <slalomL+0x358>
 800a432:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a718 <slalomL+0x35c>
 800a436:	f7f8 fd99 	bl	8002f6c <straight_table2>
 800a43a:	e01e      	b.n	800a47a <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a43c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a440:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a444:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a448:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a44c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a450:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a454:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a458:	eddf 5aad 	vldr	s11, [pc, #692]	; 800a710 <slalomL+0x354>
 800a45c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	eeb0 2a47 	vmov.f32	s4, s14
 800a466:	eef0 1a46 	vmov.f32	s3, s12
 800a46a:	eeb0 1a66 	vmov.f32	s2, s13
 800a46e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800a714 <slalomL+0x358>
 800a472:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800a71c <slalomL+0x360>
 800a476:	f7f8 fd79 	bl	8002f6c <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a47a:	2300      	movs	r3, #0
 800a47c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a47e:	2301      	movs	r3, #1
 800a480:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a482:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a486:	2b00      	cmp	r3, #0
 800a488:	d127      	bne.n	800a4da <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a48a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a48e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a492:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a496:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a49a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a49e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4ae:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a4b2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4b6:	eddf 4a96 	vldr	s9, [pc, #600]	; 800a710 <slalomL+0x354>
 800a4ba:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	eeb0 2a47 	vmov.f32	s4, s14
 800a4c4:	eef0 1a45 	vmov.f32	s3, s10
 800a4c8:	eeb0 1a65 	vmov.f32	s2, s11
 800a4cc:	eef0 0a46 	vmov.f32	s1, s12
 800a4d0:	eeb0 0a66 	vmov.f32	s0, s13
 800a4d4:	f7f8 fd4a 	bl	8002f6c <straight_table2>
 800a4d8:	e022      	b.n	800a520 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4da:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a4de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a4e6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4f6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a4fa:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4fe:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a710 <slalomL+0x354>
 800a502:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	eeb0 2a47 	vmov.f32	s4, s14
 800a50c:	eef0 1a45 	vmov.f32	s3, s10
 800a510:	eeb0 1a65 	vmov.f32	s2, s11
 800a514:	eef0 0a46 	vmov.f32	s1, s12
 800a518:	eeb0 0a66 	vmov.f32	s0, s13
 800a51c:	f7f8 fd26 	bl	8002f6c <straight_table2>
		}
		if(mollifier_mode == ON){
 800a520:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a524:	2b01      	cmp	r3, #1
 800a526:	d10c      	bne.n	800a542 <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a528:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a52c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a530:	eeb0 1a47 	vmov.f32	s2, s14
 800a534:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800a720 <slalomL+0x364>
 800a538:	eeb0 0a67 	vmov.f32	s0, s15
 800a53c:	f7f9 fc8c 	bl	8003e58 <mollifier_slalom_table>
 800a540:	e013      	b.n	800a56a <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a542:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a546:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a54a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a54e:	eef0 2a66 	vmov.f32	s5, s13
 800a552:	eeb0 2a47 	vmov.f32	s4, s14
 800a556:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a714 <slalomL+0x358>
 800a55a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a714 <slalomL+0x358>
 800a55e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a720 <slalomL+0x364>
 800a562:	eeb0 0a67 	vmov.f32	s0, s15
 800a566:	f7f9 fb27 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a56a:	2300      	movs	r3, #0
 800a56c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a572:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a576:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a710 <slalomL+0x354>
 800a57a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a57e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a582:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a586:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a58a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a58e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a592:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a596:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a59a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a710 <slalomL+0x354>
 800a59e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	eeb0 2a47 	vmov.f32	s4, s14
 800a5a8:	eef0 1a65 	vmov.f32	s3, s11
 800a5ac:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a714 <slalomL+0x358>
 800a5b0:	eef0 0a46 	vmov.f32	s1, s12
 800a5b4:	eeb0 0a66 	vmov.f32	s0, s13
 800a5b8:	f7f8 fcd8 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800a5bc:	4b53      	ldr	r3, [pc, #332]	; (800a70c <slalomL+0x350>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a5c2:	e09a      	b.n	800a6fa <slalomL+0x33e>
		wallmode.WallControlMode=0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5d4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a5d8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a5dc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a5e0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5f0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a5f4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5f8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a710 <slalomL+0x354>
 800a5fc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	eeb0 2a47 	vmov.f32	s4, s14
 800a606:	eef0 1a45 	vmov.f32	s3, s10
 800a60a:	eeb0 1a65 	vmov.f32	s2, s11
 800a60e:	eef0 0a46 	vmov.f32	s1, s12
 800a612:	eeb0 0a66 	vmov.f32	s0, s13
 800a616:	f7f8 fca9 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800a61a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d10c      	bne.n	800a63c <slalomL+0x280>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a622:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a626:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a62a:	eeb0 1a47 	vmov.f32	s2, s14
 800a62e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a720 <slalomL+0x364>
 800a632:	eeb0 0a67 	vmov.f32	s0, s15
 800a636:	f7f9 fc0f 	bl	8003e58 <mollifier_slalom_table>
 800a63a:	e013      	b.n	800a664 <slalomL+0x2a8>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a63c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a640:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a644:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a648:	eef0 2a66 	vmov.f32	s5, s13
 800a64c:	eeb0 2a47 	vmov.f32	s4, s14
 800a650:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a714 <slalomL+0x358>
 800a654:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a714 <slalomL+0x358>
 800a658:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a720 <slalomL+0x364>
 800a65c:	eeb0 0a67 	vmov.f32	s0, s15
 800a660:	f7f9 faaa 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=0;
 800a664:	2300      	movs	r3, #0
 800a666:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a66c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a670:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a674:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a678:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a67c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a680:	edd7 7a01 	vldr	s15, [r7, #4]
 800a684:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a68c:	eef0 7ae7 	vabs.f32	s15, s15
 800a690:	ee17 0a90 	vmov	r0, s15
 800a694:	f7f5 ff80 	bl	8000598 <__aeabi_f2d>
 800a698:	f04f 0200 	mov.w	r2, #0
 800a69c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6a0:	f7f6 f8fc 	bl	800089c <__aeabi_ddiv>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	461d      	mov	r5, r3
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7f5 ff72 	bl	8000598 <__aeabi_f2d>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f7f6 f8ee 	bl	800089c <__aeabi_ddiv>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	f04f 0200 	mov.w	r2, #0
 800a6cc:	4b15      	ldr	r3, [pc, #84]	; (800a724 <slalomL+0x368>)
 800a6ce:	f7f5 fe05 	bl	80002dc <__adddf3>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	4619      	mov	r1, r3
 800a6da:	f7f6 fa8d 	bl	8000bf8 <__aeabi_d2f>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	ee02 3a10 	vmov	s4, r3
 800a6e6:	edd7 1a01 	vldr	s3, [r7, #4]
 800a6ea:	ed97 1a01 	vldr	s2, [r7, #4]
 800a6ee:	eef0 0a68 	vmov.f32	s1, s17
 800a6f2:	eeb0 0a48 	vmov.f32	s0, s16
 800a6f6:	f7f8 fc39 	bl	8002f6c <straight_table2>
}
 800a6fa:	bf00      	nop
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	ecbd 8b02 	vpop	{d8}
 800a704:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a708:	b004      	add	sp, #16
 800a70a:	4770      	bx	lr
 800a70c:	20000808 	.word	0x20000808
 800a710:	42340000 	.word	0x42340000
 800a714:	00000000 	.word	0x00000000
 800a718:	431b8000 	.word	0x431b8000
 800a71c:	43138000 	.word	0x43138000
 800a720:	42b40000 	.word	0x42b40000
 800a724:	408f4000 	.word	0x408f4000

0800a728 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a728:	b084      	sub	sp, #16
 800a72a:	b5b0      	push	{r4, r5, r7, lr}
 800a72c:	ed2d 8b02 	vpush	{d8}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a73c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a740:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a744:	2b01      	cmp	r3, #1
 800a746:	f040 80a5 	bne.w	800a894 <turn90R+0x16c>
		highspeed_mode = 1;
 800a74a:	4ba5      	ldr	r3, [pc, #660]	; (800a9e0 <turn90R+0x2b8>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a750:	2301      	movs	r3, #1
 800a752:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a754:	2300      	movs	r3, #0
 800a756:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a760:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a764:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a768:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a76c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a770:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a774:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a778:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a77c:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a9e4 <turn90R+0x2bc>
 800a780:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	eeb0 2a47 	vmov.f32	s4, s14
 800a78a:	eef0 1a46 	vmov.f32	s3, s12
 800a78e:	eeb0 1a66 	vmov.f32	s2, s13
 800a792:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a9e8 <turn90R+0x2c0>
 800a796:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a9ec <turn90R+0x2c4>
 800a79a:	f7f8 fbe7 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a7aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a7ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a7b2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a7b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7c2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a7c6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7ca:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a9e4 <turn90R+0x2bc>
 800a7ce:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	eeb0 2a47 	vmov.f32	s4, s14
 800a7d8:	eef0 1a45 	vmov.f32	s3, s10
 800a7dc:	eeb0 1a65 	vmov.f32	s2, s11
 800a7e0:	eef0 0a46 	vmov.f32	s1, s12
 800a7e4:	eeb0 0a66 	vmov.f32	s0, s13
 800a7e8:	f7f8 fbc0 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800a7ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d10c      	bne.n	800a80e <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a7f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a7fc:	eeb0 1a47 	vmov.f32	s2, s14
 800a800:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a9f0 <turn90R+0x2c8>
 800a804:	eeb0 0a67 	vmov.f32	s0, s15
 800a808:	f7f9 fb26 	bl	8003e58 <mollifier_slalom_table>
 800a80c:	e015      	b.n	800a83a <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a80e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a812:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a816:	eef1 7a67 	vneg.f32	s15, s15
 800a81a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a81e:	eef0 2a66 	vmov.f32	s5, s13
 800a822:	eeb0 2a67 	vmov.f32	s4, s15
 800a826:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a9e8 <turn90R+0x2c0>
 800a82a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a9e8 <turn90R+0x2c0>
 800a82e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a9f0 <turn90R+0x2c8>
 800a832:	eeb0 0a47 	vmov.f32	s0, s14
 800a836:	f7f9 f9bf 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a83e:	2300      	movs	r3, #0
 800a840:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a842:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a846:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a9f4 <turn90R+0x2cc>
 800a84a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a84e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a852:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a856:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a85a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a85e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a862:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a866:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a86a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a9e4 <turn90R+0x2bc>
 800a86e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	eeb0 2a47 	vmov.f32	s4, s14
 800a878:	eef0 1a65 	vmov.f32	s3, s11
 800a87c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a9e8 <turn90R+0x2c0>
 800a880:	eef0 0a46 	vmov.f32	s1, s12
 800a884:	eeb0 0a66 	vmov.f32	s0, s13
 800a888:	f7f8 fb70 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800a88c:	4b54      	ldr	r3, [pc, #336]	; (800a9e0 <turn90R+0x2b8>)
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a892:	e09c      	b.n	800a9ce <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a894:	2300      	movs	r3, #0
 800a896:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a898:	2300      	movs	r3, #0
 800a89a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a89c:	2302      	movs	r3, #2
 800a89e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a8a8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a8ac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a8b0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a8b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8c0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a8c4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8c8:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a9e4 <turn90R+0x2bc>
 800a8cc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	eeb0 2a47 	vmov.f32	s4, s14
 800a8d6:	eef0 1a45 	vmov.f32	s3, s10
 800a8da:	eeb0 1a65 	vmov.f32	s2, s11
 800a8de:	eef0 0a46 	vmov.f32	s1, s12
 800a8e2:	eeb0 0a66 	vmov.f32	s0, s13
 800a8e6:	f7f8 fb41 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800a8ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d10c      	bne.n	800a90c <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a8f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8fa:	eeb0 1a47 	vmov.f32	s2, s14
 800a8fe:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a9f0 <turn90R+0x2c8>
 800a902:	eeb0 0a67 	vmov.f32	s0, s15
 800a906:	f7f9 faa7 	bl	8003e58 <mollifier_slalom_table>
 800a90a:	e015      	b.n	800a938 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a90c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a910:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a914:	eef1 7a67 	vneg.f32	s15, s15
 800a918:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a91c:	eef0 2a66 	vmov.f32	s5, s13
 800a920:	eeb0 2a67 	vmov.f32	s4, s15
 800a924:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a9e8 <turn90R+0x2c0>
 800a928:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a9e8 <turn90R+0x2c0>
 800a92c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a9f0 <turn90R+0x2c8>
 800a930:	eeb0 0a47 	vmov.f32	s0, s14
 800a934:	f7f9 f940 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a938:	2301      	movs	r3, #1
 800a93a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a940:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a944:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a948:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a94c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a950:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a954:	edd7 7a01 	vldr	s15, [r7, #4]
 800a958:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a95c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a960:	eef0 7ae7 	vabs.f32	s15, s15
 800a964:	ee17 0a90 	vmov	r0, s15
 800a968:	f7f5 fe16 	bl	8000598 <__aeabi_f2d>
 800a96c:	f04f 0200 	mov.w	r2, #0
 800a970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a974:	f7f5 ff92 	bl	800089c <__aeabi_ddiv>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4614      	mov	r4, r2
 800a97e:	461d      	mov	r5, r3
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	4618      	mov	r0, r3
 800a984:	f7f5 fe08 	bl	8000598 <__aeabi_f2d>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 ff84 	bl	800089c <__aeabi_ddiv>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4610      	mov	r0, r2
 800a99a:	4619      	mov	r1, r3
 800a99c:	f04f 0200 	mov.w	r2, #0
 800a9a0:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <turn90R+0x2d0>)
 800a9a2:	f7f5 fc9b 	bl	80002dc <__adddf3>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	f7f6 f923 	bl	8000bf8 <__aeabi_d2f>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	ee02 3a10 	vmov	s4, r3
 800a9ba:	edd7 1a01 	vldr	s3, [r7, #4]
 800a9be:	ed97 1a01 	vldr	s2, [r7, #4]
 800a9c2:	eef0 0a68 	vmov.f32	s1, s17
 800a9c6:	eeb0 0a48 	vmov.f32	s0, s16
 800a9ca:	f7f8 facf 	bl	8002f6c <straight_table2>
}
 800a9ce:	bf00      	nop
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	ecbd 8b02 	vpop	{d8}
 800a9d8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a9dc:	b004      	add	sp, #16
 800a9de:	4770      	bx	lr
 800a9e0:	20000808 	.word	0x20000808
 800a9e4:	42340000 	.word	0x42340000
 800a9e8:	00000000 	.word	0x00000000
 800a9ec:	42cd0000 	.word	0x42cd0000
 800a9f0:	c2b40000 	.word	0xc2b40000
 800a9f4:	42b40000 	.word	0x42b40000
 800a9f8:	408f4000 	.word	0x408f4000

0800a9fc <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	b5b0      	push	{r4, r5, r7, lr}
 800aa00:	ed2d 8b02 	vpush	{d8}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aa0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aa10:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800aa14:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	f040 80a3 	bne.w	800ab64 <turn90L+0x168>
		highspeed_mode = 1;
 800aa1e:	4ba3      	ldr	r3, [pc, #652]	; (800acac <turn90L+0x2b0>)
 800aa20:	2201      	movs	r2, #1
 800aa22:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aa24:	2301      	movs	r3, #1
 800aa26:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa34:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa38:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa48:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa4c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa50:	eddf 5a97 	vldr	s11, [pc, #604]	; 800acb0 <turn90L+0x2b4>
 800aa54:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	eeb0 2a47 	vmov.f32	s4, s14
 800aa5e:	eef0 1a46 	vmov.f32	s3, s12
 800aa62:	eeb0 1a66 	vmov.f32	s2, s13
 800aa66:	eddf 0a93 	vldr	s1, [pc, #588]	; 800acb4 <turn90L+0x2b8>
 800aa6a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800acb8 <turn90L+0x2bc>
 800aa6e:	f7f8 fa7d 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aa76:	2302      	movs	r3, #2
 800aa78:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa7a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa7e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa82:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa86:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa96:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa9a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa9e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800acb0 <turn90L+0x2b4>
 800aaa2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	eeb0 2a47 	vmov.f32	s4, s14
 800aaac:	eef0 1a45 	vmov.f32	s3, s10
 800aab0:	eeb0 1a65 	vmov.f32	s2, s11
 800aab4:	eef0 0a46 	vmov.f32	s1, s12
 800aab8:	eeb0 0a66 	vmov.f32	s0, s13
 800aabc:	f7f8 fa56 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800aac0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d10c      	bne.n	800aae2 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800aac8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aacc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aad0:	eeb0 1a47 	vmov.f32	s2, s14
 800aad4:	eddf 0a79 	vldr	s1, [pc, #484]	; 800acbc <turn90L+0x2c0>
 800aad8:	eeb0 0a67 	vmov.f32	s0, s15
 800aadc:	f7f9 f9bc 	bl	8003e58 <mollifier_slalom_table>
 800aae0:	e013      	b.n	800ab0a <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800aae2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aae6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aaea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aaee:	eef0 2a66 	vmov.f32	s5, s13
 800aaf2:	eeb0 2a47 	vmov.f32	s4, s14
 800aaf6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800acb4 <turn90L+0x2b8>
 800aafa:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800acb4 <turn90L+0x2b8>
 800aafe:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800acbc <turn90L+0x2c0>
 800ab02:	eeb0 0a67 	vmov.f32	s0, s15
 800ab06:	f7f9 f857 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ab16:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800acbc <turn90L+0x2c0>
 800ab1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab22:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab32:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ab36:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab3a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800acb0 <turn90L+0x2b4>
 800ab3e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	eeb0 2a47 	vmov.f32	s4, s14
 800ab48:	eef0 1a65 	vmov.f32	s3, s11
 800ab4c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800acb4 <turn90L+0x2b8>
 800ab50:	eef0 0a46 	vmov.f32	s1, s12
 800ab54:	eeb0 0a66 	vmov.f32	s0, s13
 800ab58:	f7f8 fa08 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800ab5c:	4b53      	ldr	r3, [pc, #332]	; (800acac <turn90L+0x2b0>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ab62:	e09a      	b.n	800ac9a <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ab64:	2300      	movs	r3, #0
 800ab66:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab74:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab78:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab7c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab80:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab90:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab94:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab98:	eddf 4a45 	vldr	s9, [pc, #276]	; 800acb0 <turn90L+0x2b4>
 800ab9c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	eeb0 2a47 	vmov.f32	s4, s14
 800aba6:	eef0 1a45 	vmov.f32	s3, s10
 800abaa:	eeb0 1a65 	vmov.f32	s2, s11
 800abae:	eef0 0a46 	vmov.f32	s1, s12
 800abb2:	eeb0 0a66 	vmov.f32	s0, s13
 800abb6:	f7f8 f9d9 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800abba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d10c      	bne.n	800abdc <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800abc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abc6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abca:	eeb0 1a47 	vmov.f32	s2, s14
 800abce:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800acbc <turn90L+0x2c0>
 800abd2:	eeb0 0a67 	vmov.f32	s0, s15
 800abd6:	f7f9 f93f 	bl	8003e58 <mollifier_slalom_table>
 800abda:	e013      	b.n	800ac04 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800abdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abe0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abe4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800abe8:	eef0 2a66 	vmov.f32	s5, s13
 800abec:	eeb0 2a47 	vmov.f32	s4, s14
 800abf0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800acb4 <turn90L+0x2b8>
 800abf4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800acb4 <turn90L+0x2b8>
 800abf8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800acbc <turn90L+0x2c0>
 800abfc:	eeb0 0a67 	vmov.f32	s0, s15
 800ac00:	f7f8 ffda 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ac04:	2301      	movs	r3, #1
 800ac06:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac0c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ac10:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ac14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac20:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac2c:	eef0 7ae7 	vabs.f32	s15, s15
 800ac30:	ee17 0a90 	vmov	r0, s15
 800ac34:	f7f5 fcb0 	bl	8000598 <__aeabi_f2d>
 800ac38:	f04f 0200 	mov.w	r2, #0
 800ac3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac40:	f7f5 fe2c 	bl	800089c <__aeabi_ddiv>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4614      	mov	r4, r2
 800ac4a:	461d      	mov	r5, r3
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f5 fca2 	bl	8000598 <__aeabi_f2d>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4620      	mov	r0, r4
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	f7f5 fe1e 	bl	800089c <__aeabi_ddiv>
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	4610      	mov	r0, r2
 800ac66:	4619      	mov	r1, r3
 800ac68:	f04f 0200 	mov.w	r2, #0
 800ac6c:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <turn90L+0x2c4>)
 800ac6e:	f7f5 fb35 	bl	80002dc <__adddf3>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac76:	4610      	mov	r0, r2
 800ac78:	4619      	mov	r1, r3
 800ac7a:	f7f5 ffbd 	bl	8000bf8 <__aeabi_d2f>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	ee02 3a10 	vmov	s4, r3
 800ac86:	edd7 1a01 	vldr	s3, [r7, #4]
 800ac8a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ac8e:	eef0 0a68 	vmov.f32	s1, s17
 800ac92:	eeb0 0a48 	vmov.f32	s0, s16
 800ac96:	f7f8 f969 	bl	8002f6c <straight_table2>
}
 800ac9a:	bf00      	nop
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	ecbd 8b02 	vpop	{d8}
 800aca4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800aca8:	b004      	add	sp, #16
 800acaa:	4770      	bx	lr
 800acac:	20000808 	.word	0x20000808
 800acb0:	42340000 	.word	0x42340000
 800acb4:	00000000 	.word	0x00000000
 800acb8:	42cd0000 	.word	0x42cd0000
 800acbc:	42b40000 	.word	0x42b40000
 800acc0:	408f4000 	.word	0x408f4000

0800acc4 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800acc4:	b084      	sub	sp, #16
 800acc6:	b5b0      	push	{r4, r5, r7, lr}
 800acc8:	ed2d 8b02 	vpush	{d8}
 800accc:	b084      	sub	sp, #16
 800acce:	af00      	add	r7, sp, #0
 800acd0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800acd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800acd8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800acdc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	f040 80a5 	bne.w	800ae30 <turn180R+0x16c>
		highspeed_mode = 1;
 800ace6:	4ba5      	ldr	r3, [pc, #660]	; (800af7c <turn180R+0x2b8>)
 800ace8:	2201      	movs	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800acec:	2301      	movs	r3, #1
 800acee:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800acf0:	2300      	movs	r3, #0
 800acf2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acfc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ad00:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad10:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ad14:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ad18:	eddf 5a99 	vldr	s11, [pc, #612]	; 800af80 <turn180R+0x2bc>
 800ad1c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	eeb0 2a47 	vmov.f32	s4, s14
 800ad26:	eef0 1a46 	vmov.f32	s3, s12
 800ad2a:	eeb0 1a66 	vmov.f32	s2, s13
 800ad2e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800af84 <turn180R+0x2c0>
 800ad32:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800af88 <turn180R+0x2c4>
 800ad36:	f7f8 f919 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad42:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad46:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad4a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad4e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad5e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad62:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad66:	eddf 4a86 	vldr	s9, [pc, #536]	; 800af80 <turn180R+0x2bc>
 800ad6a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	eeb0 2a47 	vmov.f32	s4, s14
 800ad74:	eef0 1a45 	vmov.f32	s3, s10
 800ad78:	eeb0 1a65 	vmov.f32	s2, s11
 800ad7c:	eef0 0a46 	vmov.f32	s1, s12
 800ad80:	eeb0 0a66 	vmov.f32	s0, s13
 800ad84:	f7f8 f8f2 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800ad88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d10c      	bne.n	800adaa <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ad90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad98:	eeb0 1a47 	vmov.f32	s2, s14
 800ad9c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800af8c <turn180R+0x2c8>
 800ada0:	eeb0 0a67 	vmov.f32	s0, s15
 800ada4:	f7f9 f858 	bl	8003e58 <mollifier_slalom_table>
 800ada8:	e015      	b.n	800add6 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800adaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800adb2:	eef1 7a67 	vneg.f32	s15, s15
 800adb6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800adba:	eef0 2a66 	vmov.f32	s5, s13
 800adbe:	eeb0 2a67 	vmov.f32	s4, s15
 800adc2:	eddf 1a70 	vldr	s3, [pc, #448]	; 800af84 <turn180R+0x2c0>
 800adc6:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800af84 <turn180R+0x2c0>
 800adca:	eddf 0a70 	vldr	s1, [pc, #448]	; 800af8c <turn180R+0x2c8>
 800adce:	eeb0 0a47 	vmov.f32	s0, s14
 800add2:	f7f8 fef1 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800add6:	2300      	movs	r3, #0
 800add8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ade2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800af90 <turn180R+0x2cc>
 800ade6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800adea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800adee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adfe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ae02:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ae06:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800af80 <turn180R+0x2bc>
 800ae0a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	eeb0 2a47 	vmov.f32	s4, s14
 800ae14:	eef0 1a65 	vmov.f32	s3, s11
 800ae18:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800af84 <turn180R+0x2c0>
 800ae1c:	eef0 0a46 	vmov.f32	s1, s12
 800ae20:	eeb0 0a66 	vmov.f32	s0, s13
 800ae24:	f7f8 f8a2 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800ae28:	4b54      	ldr	r3, [pc, #336]	; (800af7c <turn180R+0x2b8>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ae2e:	e09c      	b.n	800af6a <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ae30:	2300      	movs	r3, #0
 800ae32:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ae38:	2302      	movs	r3, #2
 800ae3a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae40:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae44:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae48:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae4c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae5c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae60:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae64:	eddf 4a46 	vldr	s9, [pc, #280]	; 800af80 <turn180R+0x2bc>
 800ae68:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	eeb0 2a47 	vmov.f32	s4, s14
 800ae72:	eef0 1a45 	vmov.f32	s3, s10
 800ae76:	eeb0 1a65 	vmov.f32	s2, s11
 800ae7a:	eef0 0a46 	vmov.f32	s1, s12
 800ae7e:	eeb0 0a66 	vmov.f32	s0, s13
 800ae82:	f7f8 f873 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800ae86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d10c      	bne.n	800aea8 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ae8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae92:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae96:	eeb0 1a47 	vmov.f32	s2, s14
 800ae9a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800af8c <turn180R+0x2c8>
 800ae9e:	eeb0 0a67 	vmov.f32	s0, s15
 800aea2:	f7f8 ffd9 	bl	8003e58 <mollifier_slalom_table>
 800aea6:	e015      	b.n	800aed4 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800aea8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aeac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aeb0:	eef1 7a67 	vneg.f32	s15, s15
 800aeb4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aeb8:	eef0 2a66 	vmov.f32	s5, s13
 800aebc:	eeb0 2a67 	vmov.f32	s4, s15
 800aec0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800af84 <turn180R+0x2c0>
 800aec4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800af84 <turn180R+0x2c0>
 800aec8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800af8c <turn180R+0x2c8>
 800aecc:	eeb0 0a47 	vmov.f32	s0, s14
 800aed0:	f7f8 fe72 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800aed4:	2301      	movs	r3, #1
 800aed6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aedc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800aee0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800aee4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aee8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aeec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aef0:	edd7 7a01 	vldr	s15, [r7, #4]
 800aef4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aefc:	eef0 7ae7 	vabs.f32	s15, s15
 800af00:	ee17 0a90 	vmov	r0, s15
 800af04:	f7f5 fb48 	bl	8000598 <__aeabi_f2d>
 800af08:	f04f 0200 	mov.w	r2, #0
 800af0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af10:	f7f5 fcc4 	bl	800089c <__aeabi_ddiv>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4614      	mov	r4, r2
 800af1a:	461d      	mov	r5, r3
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	4618      	mov	r0, r3
 800af20:	f7f5 fb3a 	bl	8000598 <__aeabi_f2d>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4620      	mov	r0, r4
 800af2a:	4629      	mov	r1, r5
 800af2c:	f7f5 fcb6 	bl	800089c <__aeabi_ddiv>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4610      	mov	r0, r2
 800af36:	4619      	mov	r1, r3
 800af38:	f04f 0200 	mov.w	r2, #0
 800af3c:	4b15      	ldr	r3, [pc, #84]	; (800af94 <turn180R+0x2d0>)
 800af3e:	f7f5 f9cd 	bl	80002dc <__adddf3>
 800af42:	4602      	mov	r2, r0
 800af44:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af46:	4610      	mov	r0, r2
 800af48:	4619      	mov	r1, r3
 800af4a:	f7f5 fe55 	bl	8000bf8 <__aeabi_d2f>
 800af4e:	4603      	mov	r3, r0
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	ee02 3a10 	vmov	s4, r3
 800af56:	edd7 1a01 	vldr	s3, [r7, #4]
 800af5a:	ed97 1a01 	vldr	s2, [r7, #4]
 800af5e:	eef0 0a68 	vmov.f32	s1, s17
 800af62:	eeb0 0a48 	vmov.f32	s0, s16
 800af66:	f7f8 f801 	bl	8002f6c <straight_table2>
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	ecbd 8b02 	vpop	{d8}
 800af74:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800af78:	b004      	add	sp, #16
 800af7a:	4770      	bx	lr
 800af7c:	20000808 	.word	0x20000808
 800af80:	42340000 	.word	0x42340000
 800af84:	00000000 	.word	0x00000000
 800af88:	42cd0000 	.word	0x42cd0000
 800af8c:	c3340000 	.word	0xc3340000
 800af90:	42b40000 	.word	0x42b40000
 800af94:	408f4000 	.word	0x408f4000

0800af98 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800af98:	b084      	sub	sp, #16
 800af9a:	b5b0      	push	{r4, r5, r7, lr}
 800af9c:	ed2d 8b02 	vpush	{d8}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800afa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800afac:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800afb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	f040 80a3 	bne.w	800b100 <turn180L+0x168>
		highspeed_mode = 1;
 800afba:	4ba3      	ldr	r3, [pc, #652]	; (800b248 <turn180L+0x2b0>)
 800afbc:	2201      	movs	r2, #1
 800afbe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800afc0:	2301      	movs	r3, #1
 800afc2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800afc4:	2300      	movs	r3, #0
 800afc6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800afcc:	2300      	movs	r3, #0
 800afce:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afd0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800afd4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afe4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afe8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afec:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b24c <turn180L+0x2b4>
 800aff0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	eeb0 2a47 	vmov.f32	s4, s14
 800affa:	eef0 1a46 	vmov.f32	s3, s12
 800affe:	eeb0 1a66 	vmov.f32	s2, s13
 800b002:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b250 <turn180L+0x2b8>
 800b006:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b254 <turn180L+0x2bc>
 800b00a:	f7f7 ffaf 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800b00e:	2300      	movs	r3, #0
 800b010:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b012:	2302      	movs	r3, #2
 800b014:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b016:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b01a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b01e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b022:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b026:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b02a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b02e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b032:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b036:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b03a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b24c <turn180L+0x2b4>
 800b03e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	eeb0 2a47 	vmov.f32	s4, s14
 800b048:	eef0 1a45 	vmov.f32	s3, s10
 800b04c:	eeb0 1a65 	vmov.f32	s2, s11
 800b050:	eef0 0a46 	vmov.f32	s1, s12
 800b054:	eeb0 0a66 	vmov.f32	s0, s13
 800b058:	f7f7 ff88 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800b05c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b060:	2b01      	cmp	r3, #1
 800b062:	d10c      	bne.n	800b07e <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b064:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b068:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b06c:	eeb0 1a47 	vmov.f32	s2, s14
 800b070:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b258 <turn180L+0x2c0>
 800b074:	eeb0 0a67 	vmov.f32	s0, s15
 800b078:	f7f8 feee 	bl	8003e58 <mollifier_slalom_table>
 800b07c:	e013      	b.n	800b0a6 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b07e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b082:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b086:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b08a:	eef0 2a66 	vmov.f32	s5, s13
 800b08e:	eeb0 2a47 	vmov.f32	s4, s14
 800b092:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b250 <turn180L+0x2b8>
 800b096:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b250 <turn180L+0x2b8>
 800b09a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b258 <turn180L+0x2c0>
 800b09e:	eeb0 0a67 	vmov.f32	s0, s15
 800b0a2:	f7f8 fd89 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b0ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b0b2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b25c <turn180L+0x2c4>
 800b0b6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b0ba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0be:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0ce:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b0d2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b0d6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b24c <turn180L+0x2b4>
 800b0da:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	eeb0 2a47 	vmov.f32	s4, s14
 800b0e4:	eef0 1a65 	vmov.f32	s3, s11
 800b0e8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b250 <turn180L+0x2b8>
 800b0ec:	eef0 0a46 	vmov.f32	s1, s12
 800b0f0:	eeb0 0a66 	vmov.f32	s0, s13
 800b0f4:	f7f7 ff3a 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800b0f8:	4b53      	ldr	r3, [pc, #332]	; (800b248 <turn180L+0x2b0>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b0fe:	e09a      	b.n	800b236 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b100:	2300      	movs	r3, #0
 800b102:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b104:	2300      	movs	r3, #0
 800b106:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b108:	2302      	movs	r3, #2
 800b10a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b110:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b114:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b118:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b11c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b120:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b124:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b12c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b130:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b134:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b24c <turn180L+0x2b4>
 800b138:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	eeb0 2a47 	vmov.f32	s4, s14
 800b142:	eef0 1a45 	vmov.f32	s3, s10
 800b146:	eeb0 1a65 	vmov.f32	s2, s11
 800b14a:	eef0 0a46 	vmov.f32	s1, s12
 800b14e:	eeb0 0a66 	vmov.f32	s0, s13
 800b152:	f7f7 ff0b 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800b156:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d10c      	bne.n	800b178 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b15e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b162:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b166:	eeb0 1a47 	vmov.f32	s2, s14
 800b16a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b258 <turn180L+0x2c0>
 800b16e:	eeb0 0a67 	vmov.f32	s0, s15
 800b172:	f7f8 fe71 	bl	8003e58 <mollifier_slalom_table>
 800b176:	e013      	b.n	800b1a0 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b178:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b17c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b180:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b184:	eef0 2a66 	vmov.f32	s5, s13
 800b188:	eeb0 2a47 	vmov.f32	s4, s14
 800b18c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b250 <turn180L+0x2b8>
 800b190:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b250 <turn180L+0x2b8>
 800b194:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b258 <turn180L+0x2c0>
 800b198:	eeb0 0a67 	vmov.f32	s0, s15
 800b19c:	f7f8 fd0c 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1a8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b1ac:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b1b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1c8:	eef0 7ae7 	vabs.f32	s15, s15
 800b1cc:	ee17 0a90 	vmov	r0, s15
 800b1d0:	f7f5 f9e2 	bl	8000598 <__aeabi_f2d>
 800b1d4:	f04f 0200 	mov.w	r2, #0
 800b1d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1dc:	f7f5 fb5e 	bl	800089c <__aeabi_ddiv>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	461d      	mov	r5, r3
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7f5 f9d4 	bl	8000598 <__aeabi_f2d>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 fb50 	bl	800089c <__aeabi_ddiv>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4610      	mov	r0, r2
 800b202:	4619      	mov	r1, r3
 800b204:	f04f 0200 	mov.w	r2, #0
 800b208:	4b15      	ldr	r3, [pc, #84]	; (800b260 <turn180L+0x2c8>)
 800b20a:	f7f5 f867 	bl	80002dc <__adddf3>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b212:	4610      	mov	r0, r2
 800b214:	4619      	mov	r1, r3
 800b216:	f7f5 fcef 	bl	8000bf8 <__aeabi_d2f>
 800b21a:	4603      	mov	r3, r0
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	ee02 3a10 	vmov	s4, r3
 800b222:	edd7 1a01 	vldr	s3, [r7, #4]
 800b226:	ed97 1a01 	vldr	s2, [r7, #4]
 800b22a:	eef0 0a68 	vmov.f32	s1, s17
 800b22e:	eeb0 0a48 	vmov.f32	s0, s16
 800b232:	f7f7 fe9b 	bl	8002f6c <straight_table2>
}
 800b236:	bf00      	nop
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	ecbd 8b02 	vpop	{d8}
 800b240:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b244:	b004      	add	sp, #16
 800b246:	4770      	bx	lr
 800b248:	20000808 	.word	0x20000808
 800b24c:	42340000 	.word	0x42340000
 800b250:	00000000 	.word	0x00000000
 800b254:	42cd0000 	.word	0x42cd0000
 800b258:	43340000 	.word	0x43340000
 800b25c:	42b40000 	.word	0x42b40000
 800b260:	408f4000 	.word	0x408f4000
 800b264:	00000000 	.word	0x00000000

0800b268 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b268:	b084      	sub	sp, #16
 800b26a:	b5b0      	push	{r4, r5, r7, lr}
 800b26c:	ed2d 8b02 	vpush	{d8}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b27c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b280:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b284:	2b01      	cmp	r3, #1
 800b286:	f040 80ae 	bne.w	800b3e6 <turn45inR+0x17e>
		highspeed_mode = 1;
 800b28a:	4bdd      	ldr	r3, [pc, #884]	; (800b600 <turn45inR+0x398>)
 800b28c:	2201      	movs	r2, #1
 800b28e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b290:	2301      	movs	r3, #1
 800b292:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b294:	2300      	movs	r3, #0
 800b296:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b298:	2300      	movs	r3, #0
 800b29a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b2a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b2a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b2b8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b2bc:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b604 <turn45inR+0x39c>
 800b2c0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	eeb0 2a47 	vmov.f32	s4, s14
 800b2ca:	eef0 1a46 	vmov.f32	s3, s12
 800b2ce:	eeb0 1a66 	vmov.f32	s2, s13
 800b2d2:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b610 <turn45inR+0x3a8>
 800b2d6:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b608 <turn45inR+0x3a0>
 800b2da:	f7f7 fe47 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2ee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2f2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b302:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b306:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b30a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b604 <turn45inR+0x39c>
 800b30e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	eeb0 2a47 	vmov.f32	s4, s14
 800b318:	eef0 1a45 	vmov.f32	s3, s10
 800b31c:	eeb0 1a65 	vmov.f32	s2, s11
 800b320:	eef0 0a46 	vmov.f32	s1, s12
 800b324:	eeb0 0a66 	vmov.f32	s0, s13
 800b328:	f7f7 fe20 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800b32c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b330:	2b01      	cmp	r3, #1
 800b332:	d10c      	bne.n	800b34e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b334:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b338:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b33c:	eeb0 1a47 	vmov.f32	s2, s14
 800b340:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b614 <turn45inR+0x3ac>
 800b344:	eeb0 0a67 	vmov.f32	s0, s15
 800b348:	f7f8 fd86 	bl	8003e58 <mollifier_slalom_table>
 800b34c:	e015      	b.n	800b37a <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b34e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b352:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b356:	eef1 7a67 	vneg.f32	s15, s15
 800b35a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b35e:	eef0 2a66 	vmov.f32	s5, s13
 800b362:	eeb0 2a67 	vmov.f32	s4, s15
 800b366:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b610 <turn45inR+0x3a8>
 800b36a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b610 <turn45inR+0x3a8>
 800b36e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b614 <turn45inR+0x3ac>
 800b372:	eeb0 0a47 	vmov.f32	s0, s14
 800b376:	f7f8 fc1f 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b37e:	2300      	movs	r3, #0
 800b380:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	4618      	mov	r0, r3
 800b386:	f7f5 f907 	bl	8000598 <__aeabi_f2d>
 800b38a:	a39b      	add	r3, pc, #620	; (adr r3, 800b5f8 <turn45inR+0x390>)
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f7f4 ffa4 	bl	80002dc <__adddf3>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4610      	mov	r0, r2
 800b39a:	4619      	mov	r1, r3
 800b39c:	f7f5 fc2c 	bl	8000bf8 <__aeabi_d2f>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b3a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3b6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b3ba:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b3be:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b604 <turn45inR+0x39c>
 800b3c2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	eeb0 2a47 	vmov.f32	s4, s14
 800b3cc:	eef0 1a46 	vmov.f32	s3, s12
 800b3d0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b610 <turn45inR+0x3a8>
 800b3d4:	eef0 0a66 	vmov.f32	s1, s13
 800b3d8:	ee00 3a10 	vmov	s0, r3
 800b3dc:	f7f7 fdc6 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800b3e0:	4b87      	ldr	r3, [pc, #540]	; (800b600 <turn45inR+0x398>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b3e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f040 809d 	bne.w	800b52a <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b400:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b404:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b408:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b40c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b410:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b414:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b41c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b420:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b424:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b604 <turn45inR+0x39c>
 800b428:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	eeb0 2a47 	vmov.f32	s4, s14
 800b432:	eef0 1a45 	vmov.f32	s3, s10
 800b436:	eeb0 1a65 	vmov.f32	s2, s11
 800b43a:	eef0 0a46 	vmov.f32	s1, s12
 800b43e:	eeb0 0a66 	vmov.f32	s0, s13
 800b442:	f7f7 fd93 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800b446:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d10c      	bne.n	800b468 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b44e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b452:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b456:	eeb0 1a47 	vmov.f32	s2, s14
 800b45a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b614 <turn45inR+0x3ac>
 800b45e:	eeb0 0a67 	vmov.f32	s0, s15
 800b462:	f7f8 fcf9 	bl	8003e58 <mollifier_slalom_table>
 800b466:	e015      	b.n	800b494 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b468:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b46c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b470:	eef1 7a67 	vneg.f32	s15, s15
 800b474:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b478:	eef0 2a66 	vmov.f32	s5, s13
 800b47c:	eeb0 2a67 	vmov.f32	s4, s15
 800b480:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b610 <turn45inR+0x3a8>
 800b484:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b610 <turn45inR+0x3a8>
 800b488:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b614 <turn45inR+0x3ac>
 800b48c:	eeb0 0a47 	vmov.f32	s0, s14
 800b490:	f7f8 fb92 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b494:	2303      	movs	r3, #3
 800b496:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b49c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b4a0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b4a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b4b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4bc:	eef0 7ae7 	vabs.f32	s15, s15
 800b4c0:	ee17 0a90 	vmov	r0, s15
 800b4c4:	f7f5 f868 	bl	8000598 <__aeabi_f2d>
 800b4c8:	f04f 0200 	mov.w	r2, #0
 800b4cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4d0:	f7f5 f9e4 	bl	800089c <__aeabi_ddiv>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4614      	mov	r4, r2
 800b4da:	461d      	mov	r5, r3
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7f5 f85a 	bl	8000598 <__aeabi_f2d>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	f7f5 f9d6 	bl	800089c <__aeabi_ddiv>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	f04f 0200 	mov.w	r2, #0
 800b4fc:	4b43      	ldr	r3, [pc, #268]	; (800b60c <turn45inR+0x3a4>)
 800b4fe:	f7f4 feed 	bl	80002dc <__adddf3>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b506:	4610      	mov	r0, r2
 800b508:	4619      	mov	r1, r3
 800b50a:	f7f5 fb75 	bl	8000bf8 <__aeabi_d2f>
 800b50e:	4603      	mov	r3, r0
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	ee02 3a10 	vmov	s4, r3
 800b516:	edd7 1a01 	vldr	s3, [r7, #4]
 800b51a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b51e:	eef0 0a68 	vmov.f32	s1, s17
 800b522:	eeb0 0a48 	vmov.f32	s0, s16
 800b526:	f7f7 fd21 	bl	8002f6c <straight_table2>

	}
	if (test_mode >= 2) {
 800b52a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b52e:	2b01      	cmp	r3, #1
 800b530:	f240 80d0 	bls.w	800b6d4 <turn45inR+0x46c>

		highspeed_mode = 1;
 800b534:	4b32      	ldr	r3, [pc, #200]	; (800b600 <turn45inR+0x398>)
 800b536:	2201      	movs	r2, #1
 800b538:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b53a:	2301      	movs	r3, #1
 800b53c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b53e:	2300      	movs	r3, #0
 800b540:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b546:	2300      	movs	r3, #0
 800b548:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b54a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b54e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b552:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b556:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b55a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b55e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b562:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b566:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b604 <turn45inR+0x39c>
 800b56a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	eeb0 2a47 	vmov.f32	s4, s14
 800b574:	eef0 1a46 	vmov.f32	s3, s12
 800b578:	eeb0 1a66 	vmov.f32	s2, s13
 800b57c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b610 <turn45inR+0x3a8>
 800b580:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b608 <turn45inR+0x3a0>
 800b584:	f7f7 fcf2 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800b588:	2300      	movs	r3, #0
 800b58a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b58c:	2302      	movs	r3, #2
 800b58e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b590:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b594:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b598:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b59c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b5a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5ac:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b5b0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b5b4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b604 <turn45inR+0x39c>
 800b5b8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	eeb0 2a47 	vmov.f32	s4, s14
 800b5c2:	eef0 1a45 	vmov.f32	s3, s10
 800b5c6:	eeb0 1a65 	vmov.f32	s2, s11
 800b5ca:	eef0 0a46 	vmov.f32	s1, s12
 800b5ce:	eeb0 0a66 	vmov.f32	s0, s13
 800b5d2:	f7f7 fccb 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800b5d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d11c      	bne.n	800b618 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b5de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5e6:	eeb0 1a47 	vmov.f32	s2, s14
 800b5ea:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b614 <turn45inR+0x3ac>
 800b5ee:	eeb0 0a67 	vmov.f32	s0, s15
 800b5f2:	f7f8 fc31 	bl	8003e58 <mollifier_slalom_table>
 800b5f6:	e025      	b.n	800b644 <turn45inR+0x3dc>
 800b5f8:	c022ec18 	.word	0xc022ec18
 800b5fc:	405fd1de 	.word	0x405fd1de
 800b600:	20000808 	.word	0x20000808
 800b604:	42340000 	.word	0x42340000
 800b608:	42cd0000 	.word	0x42cd0000
 800b60c:	408f4000 	.word	0x408f4000
 800b610:	00000000 	.word	0x00000000
 800b614:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b618:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b61c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b620:	eef1 7a67 	vneg.f32	s15, s15
 800b624:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b628:	eef0 2a66 	vmov.f32	s5, s13
 800b62c:	eeb0 2a67 	vmov.f32	s4, s15
 800b630:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b610 <turn45inR+0x3a8>
 800b634:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b610 <turn45inR+0x3a8>
 800b638:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b614 <turn45inR+0x3ac>
 800b63c:	eeb0 0a47 	vmov.f32	s0, s14
 800b640:	f7f8 faba 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b644:	2300      	movs	r3, #0
 800b646:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b64c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b650:	3b02      	subs	r3, #2
 800b652:	4618      	mov	r0, r3
 800b654:	f7f4 ff8e 	bl	8000574 <__aeabi_i2d>
 800b658:	a325      	add	r3, pc, #148	; (adr r3, 800b6f0 <turn45inR+0x488>)
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	f7f4 fff3 	bl	8000648 <__aeabi_dmul>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4614      	mov	r4, r2
 800b668:	461d      	mov	r5, r3
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f4 ff93 	bl	8000598 <__aeabi_f2d>
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	4620      	mov	r0, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	f7f4 fe2f 	bl	80002dc <__adddf3>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4610      	mov	r0, r2
 800b684:	4619      	mov	r1, r3
 800b686:	f7f5 fab7 	bl	8000bf8 <__aeabi_d2f>
 800b68a:	4603      	mov	r3, r0
 800b68c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b690:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b694:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b698:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b69c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6a4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b6a8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b6ac:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b6e8 <turn45inR+0x480>
 800b6b0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	eeb0 2a47 	vmov.f32	s4, s14
 800b6ba:	eef0 1a65 	vmov.f32	s3, s11
 800b6be:	eeb0 1a46 	vmov.f32	s2, s12
 800b6c2:	eef0 0a66 	vmov.f32	s1, s13
 800b6c6:	ee00 3a10 	vmov	s0, r3
 800b6ca:	f7f7 fc4f 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800b6ce:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <turn45inR+0x484>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	701a      	strb	r2, [r3, #0]
	}

}
 800b6d4:	bf00      	nop
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	ecbd 8b02 	vpop	{d8}
 800b6de:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b6e2:	b004      	add	sp, #16
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	42340000 	.word	0x42340000
 800b6ec:	20000808 	.word	0x20000808
 800b6f0:	c022ec18 	.word	0xc022ec18
 800b6f4:	404fd1de 	.word	0x404fd1de

0800b6f8 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	b5b0      	push	{r4, r5, r7, lr}
 800b6fc:	ed2d 8b02 	vpush	{d8}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b70c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b710:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b714:	2b01      	cmp	r3, #1
 800b716:	f040 80ac 	bne.w	800b872 <turn45inL+0x17a>
		highspeed_mode = 1;
 800b71a:	4bdb      	ldr	r3, [pc, #876]	; (800ba88 <turn45inL+0x390>)
 800b71c:	2201      	movs	r2, #1
 800b71e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b720:	2301      	movs	r3, #1
 800b722:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b724:	2300      	movs	r3, #0
 800b726:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b728:	2300      	movs	r3, #0
 800b72a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b730:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b734:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b738:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b73c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b740:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b744:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b748:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b74c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800ba98 <turn45inL+0x3a0>
 800b750:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	eeb0 2a47 	vmov.f32	s4, s14
 800b75a:	eef0 1a46 	vmov.f32	s3, s12
 800b75e:	eeb0 1a66 	vmov.f32	s2, s13
 800b762:	eddf 0acc 	vldr	s1, [pc, #816]	; 800ba94 <turn45inL+0x39c>
 800b766:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800ba8c <turn45inL+0x394>
 800b76a:	f7f7 fbff 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800b76e:	2300      	movs	r3, #0
 800b770:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b772:	2302      	movs	r3, #2
 800b774:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b776:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b77a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b77e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b782:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b786:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b78a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b78e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b792:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b796:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b79a:	eddf 4abf 	vldr	s9, [pc, #764]	; 800ba98 <turn45inL+0x3a0>
 800b79e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	eeb0 2a47 	vmov.f32	s4, s14
 800b7a8:	eef0 1a45 	vmov.f32	s3, s10
 800b7ac:	eeb0 1a65 	vmov.f32	s2, s11
 800b7b0:	eef0 0a46 	vmov.f32	s1, s12
 800b7b4:	eeb0 0a66 	vmov.f32	s0, s13
 800b7b8:	f7f7 fbd8 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800b7bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d10c      	bne.n	800b7de <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b7c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7cc:	eeb0 1a47 	vmov.f32	s2, s14
 800b7d0:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800ba98 <turn45inL+0x3a0>
 800b7d4:	eeb0 0a67 	vmov.f32	s0, s15
 800b7d8:	f7f8 fb3e 	bl	8003e58 <mollifier_slalom_table>
 800b7dc:	e013      	b.n	800b806 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b7de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7e6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7ea:	eef0 2a66 	vmov.f32	s5, s13
 800b7ee:	eeb0 2a47 	vmov.f32	s4, s14
 800b7f2:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800ba94 <turn45inL+0x39c>
 800b7f6:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800ba94 <turn45inL+0x39c>
 800b7fa:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800ba98 <turn45inL+0x3a0>
 800b7fe:	eeb0 0a67 	vmov.f32	s0, s15
 800b802:	f7f8 f9d9 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b806:	2300      	movs	r3, #0
 800b808:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	4618      	mov	r0, r3
 800b812:	f7f4 fec1 	bl	8000598 <__aeabi_f2d>
 800b816:	a39a      	add	r3, pc, #616	; (adr r3, 800ba80 <turn45inL+0x388>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	f7f4 fd5e 	bl	80002dc <__adddf3>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4610      	mov	r0, r2
 800b826:	4619      	mov	r1, r3
 800b828:	f7f5 f9e6 	bl	8000bf8 <__aeabi_d2f>
 800b82c:	4603      	mov	r3, r0
 800b82e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b832:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b836:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b83a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b83e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b842:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b846:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b84a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800ba98 <turn45inL+0x3a0>
 800b84e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	eeb0 2a47 	vmov.f32	s4, s14
 800b858:	eef0 1a46 	vmov.f32	s3, s12
 800b85c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800ba94 <turn45inL+0x39c>
 800b860:	eef0 0a66 	vmov.f32	s1, s13
 800b864:	ee00 3a10 	vmov	s0, r3
 800b868:	f7f7 fb80 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800b86c:	4b86      	ldr	r3, [pc, #536]	; (800ba88 <turn45inL+0x390>)
 800b86e:	2200      	movs	r2, #0
 800b870:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b872:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b876:	2b00      	cmp	r3, #0
 800b878:	f040 809b 	bne.w	800b9b2 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b87c:	2300      	movs	r3, #0
 800b87e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b880:	2300      	movs	r3, #0
 800b882:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b884:	2302      	movs	r3, #2
 800b886:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b888:	2300      	movs	r3, #0
 800b88a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b88c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b890:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b894:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b898:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b89c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8a8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b8ac:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b8b0:	eddf 4a79 	vldr	s9, [pc, #484]	; 800ba98 <turn45inL+0x3a0>
 800b8b4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	eeb0 2a47 	vmov.f32	s4, s14
 800b8be:	eef0 1a45 	vmov.f32	s3, s10
 800b8c2:	eeb0 1a65 	vmov.f32	s2, s11
 800b8c6:	eef0 0a46 	vmov.f32	s1, s12
 800b8ca:	eeb0 0a66 	vmov.f32	s0, s13
 800b8ce:	f7f7 fb4d 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800b8d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d10c      	bne.n	800b8f4 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b8da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8de:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8e2:	eeb0 1a47 	vmov.f32	s2, s14
 800b8e6:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800ba98 <turn45inL+0x3a0>
 800b8ea:	eeb0 0a67 	vmov.f32	s0, s15
 800b8ee:	f7f8 fab3 	bl	8003e58 <mollifier_slalom_table>
 800b8f2:	e013      	b.n	800b91c <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b8f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b900:	eef0 2a66 	vmov.f32	s5, s13
 800b904:	eeb0 2a47 	vmov.f32	s4, s14
 800b908:	eddf 1a62 	vldr	s3, [pc, #392]	; 800ba94 <turn45inL+0x39c>
 800b90c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800ba94 <turn45inL+0x39c>
 800b910:	eddf 0a61 	vldr	s1, [pc, #388]	; 800ba98 <turn45inL+0x3a0>
 800b914:	eeb0 0a67 	vmov.f32	s0, s15
 800b918:	f7f8 f94e 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b91c:	2303      	movs	r3, #3
 800b91e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b920:	2300      	movs	r3, #0
 800b922:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b924:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b928:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b92c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b930:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b934:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b938:	edd7 7a01 	vldr	s15, [r7, #4]
 800b93c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b940:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b944:	eef0 7ae7 	vabs.f32	s15, s15
 800b948:	ee17 0a90 	vmov	r0, s15
 800b94c:	f7f4 fe24 	bl	8000598 <__aeabi_f2d>
 800b950:	f04f 0200 	mov.w	r2, #0
 800b954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b958:	f7f4 ffa0 	bl	800089c <__aeabi_ddiv>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4614      	mov	r4, r2
 800b962:	461d      	mov	r5, r3
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	4618      	mov	r0, r3
 800b968:	f7f4 fe16 	bl	8000598 <__aeabi_f2d>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4620      	mov	r0, r4
 800b972:	4629      	mov	r1, r5
 800b974:	f7f4 ff92 	bl	800089c <__aeabi_ddiv>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4610      	mov	r0, r2
 800b97e:	4619      	mov	r1, r3
 800b980:	f04f 0200 	mov.w	r2, #0
 800b984:	4b42      	ldr	r3, [pc, #264]	; (800ba90 <turn45inL+0x398>)
 800b986:	f7f4 fca9 	bl	80002dc <__adddf3>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b98e:	4610      	mov	r0, r2
 800b990:	4619      	mov	r1, r3
 800b992:	f7f5 f931 	bl	8000bf8 <__aeabi_d2f>
 800b996:	4603      	mov	r3, r0
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	ee02 3a10 	vmov	s4, r3
 800b99e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b9a2:	ed97 1a01 	vldr	s2, [r7, #4]
 800b9a6:	eef0 0a68 	vmov.f32	s1, s17
 800b9aa:	eeb0 0a48 	vmov.f32	s0, s16
 800b9ae:	f7f7 fadd 	bl	8002f6c <straight_table2>

	}
	if (test_mode >= 2) {
 800b9b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	f240 80cc 	bls.w	800bb54 <turn45inL+0x45c>

		highspeed_mode = 1;
 800b9bc:	4b32      	ldr	r3, [pc, #200]	; (800ba88 <turn45inL+0x390>)
 800b9be:	2201      	movs	r2, #1
 800b9c0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9d2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9e6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b9ea:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9ee:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ba98 <turn45inL+0x3a0>
 800b9f2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	eeb0 2a47 	vmov.f32	s4, s14
 800b9fc:	eef0 1a46 	vmov.f32	s3, s12
 800ba00:	eeb0 1a66 	vmov.f32	s2, s13
 800ba04:	eddf 0a23 	vldr	s1, [pc, #140]	; 800ba94 <turn45inL+0x39c>
 800ba08:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800ba8c <turn45inL+0x394>
 800ba0c:	f7f7 faae 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ba14:	2302      	movs	r3, #2
 800ba16:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba1c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba20:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ba24:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba34:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ba38:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba3c:	eddf 4a16 	vldr	s9, [pc, #88]	; 800ba98 <turn45inL+0x3a0>
 800ba40:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	eeb0 2a47 	vmov.f32	s4, s14
 800ba4a:	eef0 1a45 	vmov.f32	s3, s10
 800ba4e:	eeb0 1a65 	vmov.f32	s2, s11
 800ba52:	eef0 0a46 	vmov.f32	s1, s12
 800ba56:	eeb0 0a66 	vmov.f32	s0, s13
 800ba5a:	f7f7 fa87 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800ba5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d11a      	bne.n	800ba9c <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ba66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba6e:	eeb0 1a47 	vmov.f32	s2, s14
 800ba72:	eddf 0a09 	vldr	s1, [pc, #36]	; 800ba98 <turn45inL+0x3a0>
 800ba76:	eeb0 0a67 	vmov.f32	s0, s15
 800ba7a:	f7f8 f9ed 	bl	8003e58 <mollifier_slalom_table>
 800ba7e:	e021      	b.n	800bac4 <turn45inL+0x3cc>
 800ba80:	c022ec18 	.word	0xc022ec18
 800ba84:	405fd1de 	.word	0x405fd1de
 800ba88:	20000808 	.word	0x20000808
 800ba8c:	42cd0000 	.word	0x42cd0000
 800ba90:	408f4000 	.word	0x408f4000
 800ba94:	00000000 	.word	0x00000000
 800ba98:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ba9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baa0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800baa4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800baa8:	eef0 2a66 	vmov.f32	s5, s13
 800baac:	eeb0 2a47 	vmov.f32	s4, s14
 800bab0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800ba94 <turn45inL+0x39c>
 800bab4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800ba94 <turn45inL+0x39c>
 800bab8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ba98 <turn45inL+0x3a0>
 800babc:	eeb0 0a67 	vmov.f32	s0, s15
 800bac0:	f7f8 f87a 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bac8:	2300      	movs	r3, #0
 800baca:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bacc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bad0:	3b02      	subs	r3, #2
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7f4 fd4e 	bl	8000574 <__aeabi_i2d>
 800bad8:	a325      	add	r3, pc, #148	; (adr r3, 800bb70 <turn45inL+0x478>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f7f4 fdb3 	bl	8000648 <__aeabi_dmul>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4614      	mov	r4, r2
 800bae8:	461d      	mov	r5, r3
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	4618      	mov	r0, r3
 800baee:	f7f4 fd53 	bl	8000598 <__aeabi_f2d>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4620      	mov	r0, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f4 fbef 	bl	80002dc <__adddf3>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	4610      	mov	r0, r2
 800bb04:	4619      	mov	r1, r3
 800bb06:	f7f5 f877 	bl	8000bf8 <__aeabi_d2f>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb10:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bb14:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb24:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bb28:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb2c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bb68 <turn45inL+0x470>
 800bb30:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	eeb0 2a47 	vmov.f32	s4, s14
 800bb3a:	eef0 1a65 	vmov.f32	s3, s11
 800bb3e:	eeb0 1a46 	vmov.f32	s2, s12
 800bb42:	eef0 0a66 	vmov.f32	s1, s13
 800bb46:	ee00 3a10 	vmov	s0, r3
 800bb4a:	f7f7 fa0f 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800bb4e:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <turn45inL+0x474>)
 800bb50:	2200      	movs	r2, #0
 800bb52:	701a      	strb	r2, [r3, #0]
	}

}
 800bb54:	bf00      	nop
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	ecbd 8b02 	vpop	{d8}
 800bb5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bb62:	b004      	add	sp, #16
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	42340000 	.word	0x42340000
 800bb6c:	20000808 	.word	0x20000808
 800bb70:	c022ec18 	.word	0xc022ec18
 800bb74:	404fd1de 	.word	0x404fd1de

0800bb78 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bb78:	b084      	sub	sp, #16
 800bb7a:	b5b0      	push	{r4, r5, r7, lr}
 800bb7c:	ed2d 8b02 	vpush	{d8}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bb88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb8c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bb90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	f040 80ae 	bne.w	800bcf6 <turn135inR+0x17e>
		highspeed_mode = 1;
 800bb9a:	4bdd      	ldr	r3, [pc, #884]	; (800bf10 <turn135inR+0x398>)
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bba0:	2301      	movs	r3, #1
 800bba2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bbb0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bbb4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbb8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbc4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bbc8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bbcc:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bf14 <turn135inR+0x39c>
 800bbd0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	eeb0 2a47 	vmov.f32	s4, s14
 800bbda:	eef0 1a46 	vmov.f32	s3, s12
 800bbde:	eeb0 1a66 	vmov.f32	s2, s13
 800bbe2:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bf20 <turn135inR+0x3a8>
 800bbe6:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bf18 <turn135inR+0x3a0>
 800bbea:	f7f7 f9bf 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbf6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbfa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbfe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bc02:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc12:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bc16:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc1a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bf14 <turn135inR+0x39c>
 800bc1e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	eeb0 2a47 	vmov.f32	s4, s14
 800bc28:	eef0 1a45 	vmov.f32	s3, s10
 800bc2c:	eeb0 1a65 	vmov.f32	s2, s11
 800bc30:	eef0 0a46 	vmov.f32	s1, s12
 800bc34:	eeb0 0a66 	vmov.f32	s0, s13
 800bc38:	f7f7 f998 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800bc3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d10c      	bne.n	800bc5e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bc44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc4c:	eeb0 1a47 	vmov.f32	s2, s14
 800bc50:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bf24 <turn135inR+0x3ac>
 800bc54:	eeb0 0a67 	vmov.f32	s0, s15
 800bc58:	f7f8 f8fe 	bl	8003e58 <mollifier_slalom_table>
 800bc5c:	e015      	b.n	800bc8a <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc66:	eef1 7a67 	vneg.f32	s15, s15
 800bc6a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc6e:	eef0 2a66 	vmov.f32	s5, s13
 800bc72:	eeb0 2a67 	vmov.f32	s4, s15
 800bc76:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bf20 <turn135inR+0x3a8>
 800bc7a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bf20 <turn135inR+0x3a8>
 800bc7e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bf24 <turn135inR+0x3ac>
 800bc82:	eeb0 0a47 	vmov.f32	s0, s14
 800bc86:	f7f7 ff97 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7f4 fc7f 	bl	8000598 <__aeabi_f2d>
 800bc9a:	a39b      	add	r3, pc, #620	; (adr r3, 800bf08 <turn135inR+0x390>)
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	f7f4 fb1c 	bl	80002dc <__adddf3>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4619      	mov	r1, r3
 800bcac:	f7f4 ffa4 	bl	8000bf8 <__aeabi_d2f>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bcb6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bcba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcc6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bcca:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bcce:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bf14 <turn135inR+0x39c>
 800bcd2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	eeb0 2a47 	vmov.f32	s4, s14
 800bcdc:	eef0 1a46 	vmov.f32	s3, s12
 800bce0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bf20 <turn135inR+0x3a8>
 800bce4:	eef0 0a66 	vmov.f32	s1, s13
 800bce8:	ee00 3a10 	vmov	s0, r3
 800bcec:	f7f7 f93e 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800bcf0:	4b87      	ldr	r3, [pc, #540]	; (800bf10 <turn135inR+0x398>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bcf6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f040 809d 	bne.w	800be3a <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bd00:	2300      	movs	r3, #0
 800bd02:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bd08:	2302      	movs	r3, #2
 800bd0a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd10:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd14:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bd18:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bd1c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd2c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd30:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd34:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bf14 <turn135inR+0x39c>
 800bd38:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	eeb0 2a47 	vmov.f32	s4, s14
 800bd42:	eef0 1a45 	vmov.f32	s3, s10
 800bd46:	eeb0 1a65 	vmov.f32	s2, s11
 800bd4a:	eef0 0a46 	vmov.f32	s1, s12
 800bd4e:	eeb0 0a66 	vmov.f32	s0, s13
 800bd52:	f7f7 f90b 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800bd56:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d10c      	bne.n	800bd78 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bd5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd62:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd66:	eeb0 1a47 	vmov.f32	s2, s14
 800bd6a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bf24 <turn135inR+0x3ac>
 800bd6e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd72:	f7f8 f871 	bl	8003e58 <mollifier_slalom_table>
 800bd76:	e015      	b.n	800bda4 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bd78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd80:	eef1 7a67 	vneg.f32	s15, s15
 800bd84:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd88:	eef0 2a66 	vmov.f32	s5, s13
 800bd8c:	eeb0 2a67 	vmov.f32	s4, s15
 800bd90:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bf20 <turn135inR+0x3a8>
 800bd94:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bf20 <turn135inR+0x3a8>
 800bd98:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bf24 <turn135inR+0x3ac>
 800bd9c:	eeb0 0a47 	vmov.f32	s0, s14
 800bda0:	f7f7 ff0a 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bda4:	2303      	movs	r3, #3
 800bda6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bdac:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bdb0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bdb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdc0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bdc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bdc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdcc:	eef0 7ae7 	vabs.f32	s15, s15
 800bdd0:	ee17 0a90 	vmov	r0, s15
 800bdd4:	f7f4 fbe0 	bl	8000598 <__aeabi_f2d>
 800bdd8:	f04f 0200 	mov.w	r2, #0
 800bddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bde0:	f7f4 fd5c 	bl	800089c <__aeabi_ddiv>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4614      	mov	r4, r2
 800bdea:	461d      	mov	r5, r3
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7f4 fbd2 	bl	8000598 <__aeabi_f2d>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	f7f4 fd4e 	bl	800089c <__aeabi_ddiv>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4610      	mov	r0, r2
 800be06:	4619      	mov	r1, r3
 800be08:	f04f 0200 	mov.w	r2, #0
 800be0c:	4b43      	ldr	r3, [pc, #268]	; (800bf1c <turn135inR+0x3a4>)
 800be0e:	f7f4 fa65 	bl	80002dc <__adddf3>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800be16:	4610      	mov	r0, r2
 800be18:	4619      	mov	r1, r3
 800be1a:	f7f4 feed 	bl	8000bf8 <__aeabi_d2f>
 800be1e:	4603      	mov	r3, r0
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	ee02 3a10 	vmov	s4, r3
 800be26:	edd7 1a01 	vldr	s3, [r7, #4]
 800be2a:	ed97 1a01 	vldr	s2, [r7, #4]
 800be2e:	eef0 0a68 	vmov.f32	s1, s17
 800be32:	eeb0 0a48 	vmov.f32	s0, s16
 800be36:	f7f7 f899 	bl	8002f6c <straight_table2>

	}
	if (test_mode >= 2) {
 800be3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be3e:	2b01      	cmp	r3, #1
 800be40:	f240 80d0 	bls.w	800bfe4 <turn135inR+0x46c>

		highspeed_mode = 1;
 800be44:	4b32      	ldr	r3, [pc, #200]	; (800bf10 <turn135inR+0x398>)
 800be46:	2201      	movs	r2, #1
 800be48:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800be4a:	2301      	movs	r3, #1
 800be4c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be4e:	2300      	movs	r3, #0
 800be50:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800be56:	2300      	movs	r3, #0
 800be58:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be5a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be5e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be6e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be72:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be76:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bf14 <turn135inR+0x39c>
 800be7a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	eeb0 2a47 	vmov.f32	s4, s14
 800be84:	eef0 1a46 	vmov.f32	s3, s12
 800be88:	eeb0 1a66 	vmov.f32	s2, s13
 800be8c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bf20 <turn135inR+0x3a8>
 800be90:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bf18 <turn135inR+0x3a0>
 800be94:	f7f7 f86a 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800be98:	2300      	movs	r3, #0
 800be9a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800be9c:	2302      	movs	r3, #2
 800be9e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bea0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bea4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bea8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800beac:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800beb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800beb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800beb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bebc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bec0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bec4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bf14 <turn135inR+0x39c>
 800bec8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	eeb0 2a47 	vmov.f32	s4, s14
 800bed2:	eef0 1a45 	vmov.f32	s3, s10
 800bed6:	eeb0 1a65 	vmov.f32	s2, s11
 800beda:	eef0 0a46 	vmov.f32	s1, s12
 800bede:	eeb0 0a66 	vmov.f32	s0, s13
 800bee2:	f7f7 f843 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800bee6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800beea:	2b01      	cmp	r3, #1
 800beec:	d11c      	bne.n	800bf28 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800beee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bef2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bef6:	eeb0 1a47 	vmov.f32	s2, s14
 800befa:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bf24 <turn135inR+0x3ac>
 800befe:	eeb0 0a67 	vmov.f32	s0, s15
 800bf02:	f7f7 ffa9 	bl	8003e58 <mollifier_slalom_table>
 800bf06:	e025      	b.n	800bf54 <turn135inR+0x3dc>
 800bf08:	c022ec18 	.word	0xc022ec18
 800bf0c:	405fd1de 	.word	0x405fd1de
 800bf10:	20000808 	.word	0x20000808
 800bf14:	42340000 	.word	0x42340000
 800bf18:	42cd0000 	.word	0x42cd0000
 800bf1c:	408f4000 	.word	0x408f4000
 800bf20:	00000000 	.word	0x00000000
 800bf24:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bf28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bf30:	eef1 7a67 	vneg.f32	s15, s15
 800bf34:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf38:	eef0 2a66 	vmov.f32	s5, s13
 800bf3c:	eeb0 2a67 	vmov.f32	s4, s15
 800bf40:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bf20 <turn135inR+0x3a8>
 800bf44:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bf20 <turn135inR+0x3a8>
 800bf48:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bf24 <turn135inR+0x3ac>
 800bf4c:	eeb0 0a47 	vmov.f32	s0, s14
 800bf50:	f7f7 fe32 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf5c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf60:	3b02      	subs	r3, #2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7f4 fb06 	bl	8000574 <__aeabi_i2d>
 800bf68:	a325      	add	r3, pc, #148	; (adr r3, 800c000 <turn135inR+0x488>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 fb6b 	bl	8000648 <__aeabi_dmul>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	4614      	mov	r4, r2
 800bf78:	461d      	mov	r5, r3
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7f4 fb0b 	bl	8000598 <__aeabi_f2d>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4620      	mov	r0, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	f7f4 f9a7 	bl	80002dc <__adddf3>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	4610      	mov	r0, r2
 800bf94:	4619      	mov	r1, r3
 800bf96:	f7f4 fe2f 	bl	8000bf8 <__aeabi_d2f>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bfa0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bfa4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bfa8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bfac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfb4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bfb8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bfbc:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bff8 <turn135inR+0x480>
 800bfc0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	eeb0 2a47 	vmov.f32	s4, s14
 800bfca:	eef0 1a65 	vmov.f32	s3, s11
 800bfce:	eeb0 1a46 	vmov.f32	s2, s12
 800bfd2:	eef0 0a66 	vmov.f32	s1, s13
 800bfd6:	ee00 3a10 	vmov	s0, r3
 800bfda:	f7f6 ffc7 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800bfde:	4b07      	ldr	r3, [pc, #28]	; (800bffc <turn135inR+0x484>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	701a      	strb	r2, [r3, #0]
	}

}
 800bfe4:	bf00      	nop
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	ecbd 8b02 	vpop	{d8}
 800bfee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bff2:	b004      	add	sp, #16
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	42340000 	.word	0x42340000
 800bffc:	20000808 	.word	0x20000808
 800c000:	c022ec18 	.word	0xc022ec18
 800c004:	404fd1de 	.word	0x404fd1de

0800c008 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c008:	b084      	sub	sp, #16
 800c00a:	b5b0      	push	{r4, r5, r7, lr}
 800c00c:	ed2d 8b02 	vpush	{d8}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c01c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c020:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c024:	2b01      	cmp	r3, #1
 800c026:	f040 80ac 	bne.w	800c182 <turn135inL+0x17a>
		highspeed_mode = 1;
 800c02a:	4bdb      	ldr	r3, [pc, #876]	; (800c398 <turn135inL+0x390>)
 800c02c:	2201      	movs	r2, #1
 800c02e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c030:	2301      	movs	r3, #1
 800c032:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c034:	2300      	movs	r3, #0
 800c036:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c038:	2300      	movs	r3, #0
 800c03a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c040:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c044:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c048:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c04c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c050:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c054:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c058:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c05c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c39c <turn135inL+0x394>
 800c060:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	eeb0 2a47 	vmov.f32	s4, s14
 800c06a:	eef0 1a46 	vmov.f32	s3, s12
 800c06e:	eeb0 1a66 	vmov.f32	s2, s13
 800c072:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c3a8 <turn135inL+0x3a0>
 800c076:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c3a0 <turn135inL+0x398>
 800c07a:	f7f6 ff77 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800c07e:	2300      	movs	r3, #0
 800c080:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c082:	2302      	movs	r3, #2
 800c084:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c086:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c08a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c08e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c092:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c096:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c09a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c09e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0a2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c0a6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0aa:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c39c <turn135inL+0x394>
 800c0ae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	eeb0 2a47 	vmov.f32	s4, s14
 800c0b8:	eef0 1a45 	vmov.f32	s3, s10
 800c0bc:	eeb0 1a65 	vmov.f32	s2, s11
 800c0c0:	eef0 0a46 	vmov.f32	s1, s12
 800c0c4:	eeb0 0a66 	vmov.f32	s0, s13
 800c0c8:	f7f6 ff50 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800c0cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d10c      	bne.n	800c0ee <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c0d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0dc:	eeb0 1a47 	vmov.f32	s2, s14
 800c0e0:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c3ac <turn135inL+0x3a4>
 800c0e4:	eeb0 0a67 	vmov.f32	s0, s15
 800c0e8:	f7f7 feb6 	bl	8003e58 <mollifier_slalom_table>
 800c0ec:	e013      	b.n	800c116 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c0ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0f6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0fa:	eef0 2a66 	vmov.f32	s5, s13
 800c0fe:	eeb0 2a47 	vmov.f32	s4, s14
 800c102:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c3a8 <turn135inL+0x3a0>
 800c106:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c3a8 <turn135inL+0x3a0>
 800c10a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c3ac <turn135inL+0x3a4>
 800c10e:	eeb0 0a67 	vmov.f32	s0, s15
 800c112:	f7f7 fd51 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c116:	2300      	movs	r3, #0
 800c118:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	4618      	mov	r0, r3
 800c122:	f7f4 fa39 	bl	8000598 <__aeabi_f2d>
 800c126:	a39a      	add	r3, pc, #616	; (adr r3, 800c390 <turn135inL+0x388>)
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	f7f4 f8d6 	bl	80002dc <__adddf3>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4610      	mov	r0, r2
 800c136:	4619      	mov	r1, r3
 800c138:	f7f4 fd5e 	bl	8000bf8 <__aeabi_d2f>
 800c13c:	4603      	mov	r3, r0
 800c13e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c142:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c146:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c14a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c14e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c152:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c156:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c15a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c39c <turn135inL+0x394>
 800c15e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	eeb0 2a47 	vmov.f32	s4, s14
 800c168:	eef0 1a46 	vmov.f32	s3, s12
 800c16c:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c3a8 <turn135inL+0x3a0>
 800c170:	eef0 0a66 	vmov.f32	s1, s13
 800c174:	ee00 3a10 	vmov	s0, r3
 800c178:	f7f6 fef8 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800c17c:	4b86      	ldr	r3, [pc, #536]	; (800c398 <turn135inL+0x390>)
 800c17e:	2200      	movs	r2, #0
 800c180:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c182:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c186:	2b00      	cmp	r3, #0
 800c188:	f040 809b 	bne.w	800c2c2 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c18c:	2300      	movs	r3, #0
 800c18e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c190:	2300      	movs	r3, #0
 800c192:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c194:	2302      	movs	r3, #2
 800c196:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c198:	2300      	movs	r3, #0
 800c19a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c19c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c1a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c1a4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c1a8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1b8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c1bc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1c0:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c39c <turn135inL+0x394>
 800c1c4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	eeb0 2a47 	vmov.f32	s4, s14
 800c1ce:	eef0 1a45 	vmov.f32	s3, s10
 800c1d2:	eeb0 1a65 	vmov.f32	s2, s11
 800c1d6:	eef0 0a46 	vmov.f32	s1, s12
 800c1da:	eeb0 0a66 	vmov.f32	s0, s13
 800c1de:	f7f6 fec5 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800c1e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d10c      	bne.n	800c204 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c1ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1f2:	eeb0 1a47 	vmov.f32	s2, s14
 800c1f6:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c3ac <turn135inL+0x3a4>
 800c1fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c1fe:	f7f7 fe2b 	bl	8003e58 <mollifier_slalom_table>
 800c202:	e013      	b.n	800c22c <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c204:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c208:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c20c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c210:	eef0 2a66 	vmov.f32	s5, s13
 800c214:	eeb0 2a47 	vmov.f32	s4, s14
 800c218:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c3a8 <turn135inL+0x3a0>
 800c21c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c3a8 <turn135inL+0x3a0>
 800c220:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c3ac <turn135inL+0x3a4>
 800c224:	eeb0 0a67 	vmov.f32	s0, s15
 800c228:	f7f7 fcc6 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c230:	2300      	movs	r3, #0
 800c232:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c234:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c238:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c23c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c240:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c244:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c248:	edd7 7a01 	vldr	s15, [r7, #4]
 800c24c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c250:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c254:	eef0 7ae7 	vabs.f32	s15, s15
 800c258:	ee17 0a90 	vmov	r0, s15
 800c25c:	f7f4 f99c 	bl	8000598 <__aeabi_f2d>
 800c260:	f04f 0200 	mov.w	r2, #0
 800c264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c268:	f7f4 fb18 	bl	800089c <__aeabi_ddiv>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4614      	mov	r4, r2
 800c272:	461d      	mov	r5, r3
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	4618      	mov	r0, r3
 800c278:	f7f4 f98e 	bl	8000598 <__aeabi_f2d>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	4620      	mov	r0, r4
 800c282:	4629      	mov	r1, r5
 800c284:	f7f4 fb0a 	bl	800089c <__aeabi_ddiv>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4610      	mov	r0, r2
 800c28e:	4619      	mov	r1, r3
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	4b43      	ldr	r3, [pc, #268]	; (800c3a4 <turn135inL+0x39c>)
 800c296:	f7f4 f821 	bl	80002dc <__adddf3>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c29e:	4610      	mov	r0, r2
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	f7f4 fca9 	bl	8000bf8 <__aeabi_d2f>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	ee02 3a10 	vmov	s4, r3
 800c2ae:	edd7 1a01 	vldr	s3, [r7, #4]
 800c2b2:	ed97 1a01 	vldr	s2, [r7, #4]
 800c2b6:	eef0 0a68 	vmov.f32	s1, s17
 800c2ba:	eeb0 0a48 	vmov.f32	s0, s16
 800c2be:	f7f6 fe55 	bl	8002f6c <straight_table2>

	}
	if (test_mode >= 2) {
 800c2c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	f240 80ce 	bls.w	800c468 <turn135inL+0x460>

		highspeed_mode = 1;
 800c2cc:	4b32      	ldr	r3, [pc, #200]	; (800c398 <turn135inL+0x390>)
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2e2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2e6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2f6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c2fa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2fe:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c39c <turn135inL+0x394>
 800c302:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	eeb0 2a47 	vmov.f32	s4, s14
 800c30c:	eef0 1a46 	vmov.f32	s3, s12
 800c310:	eeb0 1a66 	vmov.f32	s2, s13
 800c314:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c3a8 <turn135inL+0x3a0>
 800c318:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c3a0 <turn135inL+0x398>
 800c31c:	f7f6 fe26 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800c320:	2300      	movs	r3, #0
 800c322:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c324:	2302      	movs	r3, #2
 800c326:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c328:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c32c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c330:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c334:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c338:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c33c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c340:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c344:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c348:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c34c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c39c <turn135inL+0x394>
 800c350:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	eeb0 2a47 	vmov.f32	s4, s14
 800c35a:	eef0 1a45 	vmov.f32	s3, s10
 800c35e:	eeb0 1a65 	vmov.f32	s2, s11
 800c362:	eef0 0a46 	vmov.f32	s1, s12
 800c366:	eeb0 0a66 	vmov.f32	s0, s13
 800c36a:	f7f6 fdff 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800c36e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c372:	2b01      	cmp	r3, #1
 800c374:	d11c      	bne.n	800c3b0 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c376:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c37a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c37e:	eeb0 1a47 	vmov.f32	s2, s14
 800c382:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c3ac <turn135inL+0x3a4>
 800c386:	eeb0 0a67 	vmov.f32	s0, s15
 800c38a:	f7f7 fd65 	bl	8003e58 <mollifier_slalom_table>
 800c38e:	e023      	b.n	800c3d8 <turn135inL+0x3d0>
 800c390:	c022ec18 	.word	0xc022ec18
 800c394:	405fd1de 	.word	0x405fd1de
 800c398:	20000808 	.word	0x20000808
 800c39c:	42340000 	.word	0x42340000
 800c3a0:	42cd0000 	.word	0x42cd0000
 800c3a4:	408f4000 	.word	0x408f4000
 800c3a8:	00000000 	.word	0x00000000
 800c3ac:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c3b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3b8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c3bc:	eef0 2a66 	vmov.f32	s5, s13
 800c3c0:	eeb0 2a47 	vmov.f32	s4, s14
 800c3c4:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c3a8 <turn135inL+0x3a0>
 800c3c8:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c3a8 <turn135inL+0x3a0>
 800c3cc:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c3ac <turn135inL+0x3a4>
 800c3d0:	eeb0 0a67 	vmov.f32	s0, s15
 800c3d4:	f7f7 fbf0 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3e4:	3b02      	subs	r3, #2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7f4 f8c4 	bl	8000574 <__aeabi_i2d>
 800c3ec:	a326      	add	r3, pc, #152	; (adr r3, 800c488 <turn135inL+0x480>)
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f7f4 f929 	bl	8000648 <__aeabi_dmul>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4614      	mov	r4, r2
 800c3fc:	461d      	mov	r5, r3
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	4618      	mov	r0, r3
 800c402:	f7f4 f8c9 	bl	8000598 <__aeabi_f2d>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	4620      	mov	r0, r4
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7f3 ff65 	bl	80002dc <__adddf3>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	4610      	mov	r0, r2
 800c418:	4619      	mov	r1, r3
 800c41a:	f7f4 fbed 	bl	8000bf8 <__aeabi_d2f>
 800c41e:	4603      	mov	r3, r0
 800c420:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c424:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c428:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c42c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c430:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c434:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c438:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c43c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c440:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c480 <turn135inL+0x478>
 800c444:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	eeb0 2a47 	vmov.f32	s4, s14
 800c44e:	eef0 1a65 	vmov.f32	s3, s11
 800c452:	eeb0 1a46 	vmov.f32	s2, s12
 800c456:	eef0 0a66 	vmov.f32	s1, s13
 800c45a:	ee00 3a10 	vmov	s0, r3
 800c45e:	f7f6 fd85 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <turn135inL+0x47c>)
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
	}

}
 800c468:	bf00      	nop
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	ecbd 8b02 	vpop	{d8}
 800c472:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c476:	b004      	add	sp, #16
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	f3af 8000 	nop.w
 800c480:	42340000 	.word	0x42340000
 800c484:	20000808 	.word	0x20000808
 800c488:	c022ec18 	.word	0xc022ec18
 800c48c:	404fd1de 	.word	0x404fd1de

0800c490 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c490:	b084      	sub	sp, #16
 800c492:	b5b0      	push	{r4, r5, r7, lr}
 800c494:	ed2d 8b02 	vpush	{d8}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c4a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c4a4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c4a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	f040 80a5 	bne.w	800c5fc <turn45outR+0x16c>
		highspeed_mode = 1;
 800c4b2:	4be9      	ldr	r3, [pc, #932]	; (800c858 <turn45outR+0x3c8>)
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4c8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4cc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4dc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4e0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4e4:	eddf 5add 	vldr	s11, [pc, #884]	; 800c85c <turn45outR+0x3cc>
 800c4e8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	eeb0 2a47 	vmov.f32	s4, s14
 800c4f2:	eef0 1a46 	vmov.f32	s3, s12
 800c4f6:	eeb0 1a66 	vmov.f32	s2, s13
 800c4fa:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c860 <turn45outR+0x3d0>
 800c4fe:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c864 <turn45outR+0x3d4>
 800c502:	f7f6 fd33 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800c506:	2300      	movs	r3, #0
 800c508:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c50a:	2303      	movs	r3, #3
 800c50c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c50e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c512:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c516:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c51a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c51e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c522:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c52a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c52e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c532:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c85c <turn45outR+0x3cc>
 800c536:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	eeb0 2a47 	vmov.f32	s4, s14
 800c540:	eef0 1a45 	vmov.f32	s3, s10
 800c544:	eeb0 1a65 	vmov.f32	s2, s11
 800c548:	eef0 0a46 	vmov.f32	s1, s12
 800c54c:	eeb0 0a66 	vmov.f32	s0, s13
 800c550:	f7f6 fd0c 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800c554:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d10c      	bne.n	800c576 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c55c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c560:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c564:	eeb0 1a47 	vmov.f32	s2, s14
 800c568:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c868 <turn45outR+0x3d8>
 800c56c:	eeb0 0a67 	vmov.f32	s0, s15
 800c570:	f7f7 fc72 	bl	8003e58 <mollifier_slalom_table>
 800c574:	e015      	b.n	800c5a2 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c576:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c57a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c57e:	eef1 7a67 	vneg.f32	s15, s15
 800c582:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c586:	eef0 2a66 	vmov.f32	s5, s13
 800c58a:	eeb0 2a67 	vmov.f32	s4, s15
 800c58e:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c860 <turn45outR+0x3d0>
 800c592:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c860 <turn45outR+0x3d0>
 800c596:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c868 <turn45outR+0x3d8>
 800c59a:	eeb0 0a47 	vmov.f32	s0, s14
 800c59e:	f7f7 fb0b 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c5aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c5ae:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c86c <turn45outR+0x3dc>
 800c5b2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c5b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5ba:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5ca:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c5ce:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c5d2:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c85c <turn45outR+0x3cc>
 800c5d6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	eeb0 2a47 	vmov.f32	s4, s14
 800c5e0:	eef0 1a65 	vmov.f32	s3, s11
 800c5e4:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c860 <turn45outR+0x3d0>
 800c5e8:	eef0 0a46 	vmov.f32	s1, s12
 800c5ec:	eeb0 0a66 	vmov.f32	s0, s13
 800c5f0:	f7f6 fcbc 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800c5f4:	4b98      	ldr	r3, [pc, #608]	; (800c858 <turn45outR+0x3c8>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c5fa:	e123      	b.n	800c844 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c5fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c600:	2b01      	cmp	r3, #1
 800c602:	f240 8082 	bls.w	800c70a <turn45outR+0x27a>
		highspeed_mode = 1;
 800c606:	4b94      	ldr	r3, [pc, #592]	; (800c858 <turn45outR+0x3c8>)
 800c608:	2201      	movs	r2, #1
 800c60a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c610:	2300      	movs	r3, #0
 800c612:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c614:	2303      	movs	r3, #3
 800c616:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c618:	2300      	movs	r3, #0
 800c61a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c61c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c620:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c624:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c628:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c62c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c630:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c634:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c638:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c63c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c640:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c85c <turn45outR+0x3cc>
 800c644:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	eeb0 2a47 	vmov.f32	s4, s14
 800c64e:	eef0 1a45 	vmov.f32	s3, s10
 800c652:	eeb0 1a65 	vmov.f32	s2, s11
 800c656:	eef0 0a46 	vmov.f32	s1, s12
 800c65a:	eeb0 0a66 	vmov.f32	s0, s13
 800c65e:	f7f6 fc85 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800c662:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c666:	2b01      	cmp	r3, #1
 800c668:	d10c      	bne.n	800c684 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c66a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c66e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c672:	eeb0 1a47 	vmov.f32	s2, s14
 800c676:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c868 <turn45outR+0x3d8>
 800c67a:	eeb0 0a67 	vmov.f32	s0, s15
 800c67e:	f7f7 fbeb 	bl	8003e58 <mollifier_slalom_table>
 800c682:	e015      	b.n	800c6b0 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c684:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c688:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c68c:	eef1 7a67 	vneg.f32	s15, s15
 800c690:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c694:	eef0 2a66 	vmov.f32	s5, s13
 800c698:	eeb0 2a67 	vmov.f32	s4, s15
 800c69c:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c860 <turn45outR+0x3d0>
 800c6a0:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c860 <turn45outR+0x3d0>
 800c6a4:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c868 <turn45outR+0x3d8>
 800c6a8:	eeb0 0a47 	vmov.f32	s0, s14
 800c6ac:	f7f7 fa84 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c6bc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c86c <turn45outR+0x3dc>
 800c6c0:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c6c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6c8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6d8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c6dc:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6e0:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c85c <turn45outR+0x3cc>
 800c6e4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	eeb0 2a47 	vmov.f32	s4, s14
 800c6ee:	eef0 1a65 	vmov.f32	s3, s11
 800c6f2:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c860 <turn45outR+0x3d0>
 800c6f6:	eef0 0a46 	vmov.f32	s1, s12
 800c6fa:	eeb0 0a66 	vmov.f32	s0, s13
 800c6fe:	f7f6 fc35 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800c702:	4b55      	ldr	r3, [pc, #340]	; (800c858 <turn45outR+0x3c8>)
 800c704:	2200      	movs	r2, #0
 800c706:	701a      	strb	r2, [r3, #0]
}
 800c708:	e09c      	b.n	800c844 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c70a:	2300      	movs	r3, #0
 800c70c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c70e:	2300      	movs	r3, #0
 800c710:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c712:	2303      	movs	r3, #3
 800c714:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c716:	2300      	movs	r3, #0
 800c718:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c71a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c71e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c722:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c726:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c72a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c72e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c732:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c736:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c73a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c73e:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c85c <turn45outR+0x3cc>
 800c742:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	eeb0 2a47 	vmov.f32	s4, s14
 800c74c:	eef0 1a45 	vmov.f32	s3, s10
 800c750:	eeb0 1a65 	vmov.f32	s2, s11
 800c754:	eef0 0a46 	vmov.f32	s1, s12
 800c758:	eeb0 0a66 	vmov.f32	s0, s13
 800c75c:	f7f6 fc06 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800c760:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c764:	2b01      	cmp	r3, #1
 800c766:	d10c      	bne.n	800c782 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c768:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c76c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c770:	eeb0 1a47 	vmov.f32	s2, s14
 800c774:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c868 <turn45outR+0x3d8>
 800c778:	eeb0 0a67 	vmov.f32	s0, s15
 800c77c:	f7f7 fb6c 	bl	8003e58 <mollifier_slalom_table>
 800c780:	e015      	b.n	800c7ae <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c782:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c786:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c78a:	eef1 7a67 	vneg.f32	s15, s15
 800c78e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c792:	eef0 2a66 	vmov.f32	s5, s13
 800c796:	eeb0 2a67 	vmov.f32	s4, s15
 800c79a:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c860 <turn45outR+0x3d0>
 800c79e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c860 <turn45outR+0x3d0>
 800c7a2:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c868 <turn45outR+0x3d8>
 800c7a6:	eeb0 0a47 	vmov.f32	s0, s14
 800c7aa:	f7f7 fa05 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c7b6:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c7ba:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c7be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7d6:	eef0 7ae7 	vabs.f32	s15, s15
 800c7da:	ee17 0a90 	vmov	r0, s15
 800c7de:	f7f3 fedb 	bl	8000598 <__aeabi_f2d>
 800c7e2:	f04f 0200 	mov.w	r2, #0
 800c7e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7ea:	f7f4 f857 	bl	800089c <__aeabi_ddiv>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4614      	mov	r4, r2
 800c7f4:	461d      	mov	r5, r3
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7f3 fecd 	bl	8000598 <__aeabi_f2d>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4620      	mov	r0, r4
 800c804:	4629      	mov	r1, r5
 800c806:	f7f4 f849 	bl	800089c <__aeabi_ddiv>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4610      	mov	r0, r2
 800c810:	4619      	mov	r1, r3
 800c812:	f04f 0200 	mov.w	r2, #0
 800c816:	4b16      	ldr	r3, [pc, #88]	; (800c870 <turn45outR+0x3e0>)
 800c818:	f7f3 fd60 	bl	80002dc <__adddf3>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c820:	4610      	mov	r0, r2
 800c822:	4619      	mov	r1, r3
 800c824:	f7f4 f9e8 	bl	8000bf8 <__aeabi_d2f>
 800c828:	4603      	mov	r3, r0
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	ee02 3a10 	vmov	s4, r3
 800c830:	edd7 1a01 	vldr	s3, [r7, #4]
 800c834:	ed97 1a01 	vldr	s2, [r7, #4]
 800c838:	eef0 0a68 	vmov.f32	s1, s17
 800c83c:	eeb0 0a48 	vmov.f32	s0, s16
 800c840:	f7f6 fb94 	bl	8002f6c <straight_table2>
}
 800c844:	bf00      	nop
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	ecbd 8b02 	vpop	{d8}
 800c84e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c852:	b004      	add	sp, #16
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	20000808 	.word	0x20000808
 800c85c:	42340000 	.word	0x42340000
 800c860:	00000000 	.word	0x00000000
 800c864:	42c4477b 	.word	0x42c4477b
 800c868:	c2340000 	.word	0xc2340000
 800c86c:	42b40000 	.word	0x42b40000
 800c870:	408f4000 	.word	0x408f4000

0800c874 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c874:	b084      	sub	sp, #16
 800c876:	b5b0      	push	{r4, r5, r7, lr}
 800c878:	ed2d 8b02 	vpush	{d8}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c888:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c88c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c890:	2b01      	cmp	r3, #1
 800c892:	f040 80a3 	bne.w	800c9dc <turn45outL+0x168>
			highspeed_mode = 1;
 800c896:	4be5      	ldr	r3, [pc, #916]	; (800cc2c <turn45outL+0x3b8>)
 800c898:	2201      	movs	r2, #1
 800c89a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c8ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c8b0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8c0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c8c4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c8c8:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800cc30 <turn45outL+0x3bc>
 800c8cc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	eeb0 2a47 	vmov.f32	s4, s14
 800c8d6:	eef0 1a46 	vmov.f32	s3, s12
 800c8da:	eeb0 1a66 	vmov.f32	s2, s13
 800c8de:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800cc34 <turn45outL+0x3c0>
 800c8e2:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cc38 <turn45outL+0x3c4>
 800c8e6:	f7f6 fb41 	bl	8002f6c <straight_table2>
			wallmode.WallControlMode=0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c8ee:	2304      	movs	r3, #4
 800c8f0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c8fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c8fe:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c902:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c906:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c90a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c90e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c912:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c916:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800cc30 <turn45outL+0x3bc>
 800c91a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	eeb0 2a47 	vmov.f32	s4, s14
 800c924:	eef0 1a45 	vmov.f32	s3, s10
 800c928:	eeb0 1a65 	vmov.f32	s2, s11
 800c92c:	eef0 0a46 	vmov.f32	s1, s12
 800c930:	eeb0 0a66 	vmov.f32	s0, s13
 800c934:	f7f6 fb1a 	bl	8002f6c <straight_table2>
			if(mollifier_mode == ON){
 800c938:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d10c      	bne.n	800c95a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c940:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c944:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c948:	eeb0 1a47 	vmov.f32	s2, s14
 800c94c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800cc30 <turn45outL+0x3bc>
 800c950:	eeb0 0a67 	vmov.f32	s0, s15
 800c954:	f7f7 fa80 	bl	8003e58 <mollifier_slalom_table>
 800c958:	e013      	b.n	800c982 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c95a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c95e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c962:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c966:	eef0 2a66 	vmov.f32	s5, s13
 800c96a:	eeb0 2a47 	vmov.f32	s4, s14
 800c96e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800cc34 <turn45outL+0x3c0>
 800c972:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800cc34 <turn45outL+0x3c0>
 800c976:	eddf 0aae 	vldr	s1, [pc, #696]	; 800cc30 <turn45outL+0x3bc>
 800c97a:	eeb0 0a67 	vmov.f32	s0, s15
 800c97e:	f7f7 f91b 	bl	8003bb8 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c982:	2300      	movs	r3, #0
 800c984:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c986:	2300      	movs	r3, #0
 800c988:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c98a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c98e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cc3c <turn45outL+0x3c8>
 800c992:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c996:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c99a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c99e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9aa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c9ae:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c9b2:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800cc30 <turn45outL+0x3bc>
 800c9b6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	eeb0 2a47 	vmov.f32	s4, s14
 800c9c0:	eef0 1a65 	vmov.f32	s3, s11
 800c9c4:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800cc34 <turn45outL+0x3c0>
 800c9c8:	eef0 0a46 	vmov.f32	s1, s12
 800c9cc:	eeb0 0a66 	vmov.f32	s0, s13
 800c9d0:	f7f6 facc 	bl	8002f6c <straight_table2>
			highspeed_mode = 0;
 800c9d4:	4b95      	ldr	r3, [pc, #596]	; (800cc2c <turn45outL+0x3b8>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c9da:	e11e      	b.n	800cc1a <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c9dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d97f      	bls.n	800cae4 <turn45outL+0x270>
		highspeed_mode = 1;
 800c9e4:	4b91      	ldr	r3, [pc, #580]	; (800cc2c <turn45outL+0x3b8>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c9f2:	2304      	movs	r3, #4
 800c9f4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9fa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c9fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca02:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ca06:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca12:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca16:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ca1a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca1e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800cc30 <turn45outL+0x3bc>
 800ca22:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	eeb0 2a47 	vmov.f32	s4, s14
 800ca2c:	eef0 1a45 	vmov.f32	s3, s10
 800ca30:	eeb0 1a65 	vmov.f32	s2, s11
 800ca34:	eef0 0a46 	vmov.f32	s1, s12
 800ca38:	eeb0 0a66 	vmov.f32	s0, s13
 800ca3c:	f7f6 fa96 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800ca40:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d10c      	bne.n	800ca62 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ca48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca50:	eeb0 1a47 	vmov.f32	s2, s14
 800ca54:	eddf 0a76 	vldr	s1, [pc, #472]	; 800cc30 <turn45outL+0x3bc>
 800ca58:	eeb0 0a67 	vmov.f32	s0, s15
 800ca5c:	f7f7 f9fc 	bl	8003e58 <mollifier_slalom_table>
 800ca60:	e013      	b.n	800ca8a <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ca62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca66:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca6a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca6e:	eef0 2a66 	vmov.f32	s5, s13
 800ca72:	eeb0 2a47 	vmov.f32	s4, s14
 800ca76:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800cc34 <turn45outL+0x3c0>
 800ca7a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800cc34 <turn45outL+0x3c0>
 800ca7e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800cc30 <turn45outL+0x3bc>
 800ca82:	eeb0 0a67 	vmov.f32	s0, s15
 800ca86:	f7f7 f897 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=0;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca92:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca96:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800cc3c <turn45outL+0x3c8>
 800ca9a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800caa2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800caa6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800caaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cab2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cab6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800caba:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800cc30 <turn45outL+0x3bc>
 800cabe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	eeb0 2a47 	vmov.f32	s4, s14
 800cac8:	eef0 1a65 	vmov.f32	s3, s11
 800cacc:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800cc34 <turn45outL+0x3c0>
 800cad0:	eef0 0a46 	vmov.f32	s1, s12
 800cad4:	eeb0 0a66 	vmov.f32	s0, s13
 800cad8:	f7f6 fa48 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800cadc:	4b53      	ldr	r3, [pc, #332]	; (800cc2c <turn45outL+0x3b8>)
 800cade:	2200      	movs	r2, #0
 800cae0:	701a      	strb	r2, [r3, #0]
}
 800cae2:	e09a      	b.n	800cc1a <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cae4:	2300      	movs	r3, #0
 800cae6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cae8:	2300      	movs	r3, #0
 800caea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800caec:	2304      	movs	r3, #4
 800caee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800caf4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800caf8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cafc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb00:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb10:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb14:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb18:	eddf 4a45 	vldr	s9, [pc, #276]	; 800cc30 <turn45outL+0x3bc>
 800cb1c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	eeb0 2a47 	vmov.f32	s4, s14
 800cb26:	eef0 1a45 	vmov.f32	s3, s10
 800cb2a:	eeb0 1a65 	vmov.f32	s2, s11
 800cb2e:	eef0 0a46 	vmov.f32	s1, s12
 800cb32:	eeb0 0a66 	vmov.f32	s0, s13
 800cb36:	f7f6 fa19 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800cb3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d10c      	bne.n	800cb5c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cb42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb4a:	eeb0 1a47 	vmov.f32	s2, s14
 800cb4e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800cc30 <turn45outL+0x3bc>
 800cb52:	eeb0 0a67 	vmov.f32	s0, s15
 800cb56:	f7f7 f97f 	bl	8003e58 <mollifier_slalom_table>
 800cb5a:	e013      	b.n	800cb84 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cb5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb60:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb64:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb68:	eef0 2a66 	vmov.f32	s5, s13
 800cb6c:	eeb0 2a47 	vmov.f32	s4, s14
 800cb70:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cc34 <turn45outL+0x3c0>
 800cb74:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cc34 <turn45outL+0x3c0>
 800cb78:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cc30 <turn45outL+0x3bc>
 800cb7c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb80:	f7f7 f81a 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cb84:	2301      	movs	r3, #1
 800cb86:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb8c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cb90:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cb94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cba0:	edd7 7a01 	vldr	s15, [r7, #4]
 800cba4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbac:	eef0 7ae7 	vabs.f32	s15, s15
 800cbb0:	ee17 0a90 	vmov	r0, s15
 800cbb4:	f7f3 fcf0 	bl	8000598 <__aeabi_f2d>
 800cbb8:	f04f 0200 	mov.w	r2, #0
 800cbbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbc0:	f7f3 fe6c 	bl	800089c <__aeabi_ddiv>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4614      	mov	r4, r2
 800cbca:	461d      	mov	r5, r3
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7f3 fce2 	bl	8000598 <__aeabi_f2d>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4620      	mov	r0, r4
 800cbda:	4629      	mov	r1, r5
 800cbdc:	f7f3 fe5e 	bl	800089c <__aeabi_ddiv>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	f04f 0200 	mov.w	r2, #0
 800cbec:	4b14      	ldr	r3, [pc, #80]	; (800cc40 <turn45outL+0x3cc>)
 800cbee:	f7f3 fb75 	bl	80002dc <__adddf3>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	f7f3 fffd 	bl	8000bf8 <__aeabi_d2f>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	ee02 3a10 	vmov	s4, r3
 800cc06:	edd7 1a01 	vldr	s3, [r7, #4]
 800cc0a:	ed97 1a01 	vldr	s2, [r7, #4]
 800cc0e:	eef0 0a68 	vmov.f32	s1, s17
 800cc12:	eeb0 0a48 	vmov.f32	s0, s16
 800cc16:	f7f6 f9a9 	bl	8002f6c <straight_table2>
}
 800cc1a:	bf00      	nop
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	ecbd 8b02 	vpop	{d8}
 800cc24:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cc28:	b004      	add	sp, #16
 800cc2a:	4770      	bx	lr
 800cc2c:	20000808 	.word	0x20000808
 800cc30:	42340000 	.word	0x42340000
 800cc34:	00000000 	.word	0x00000000
 800cc38:	42c4477b 	.word	0x42c4477b
 800cc3c:	42b40000 	.word	0x42b40000
 800cc40:	408f4000 	.word	0x408f4000

0800cc44 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cc44:	b084      	sub	sp, #16
 800cc46:	b5b0      	push	{r4, r5, r7, lr}
 800cc48:	ed2d 8b02 	vpush	{d8}
 800cc4c:	b084      	sub	sp, #16
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cc54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc58:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cc5c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	f040 80a5 	bne.w	800cdb0 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cc66:	4be9      	ldr	r3, [pc, #932]	; (800d00c <turn135outR+0x3c8>)
 800cc68:	2201      	movs	r2, #1
 800cc6a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc7c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc80:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc90:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc94:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc98:	eddf 5add 	vldr	s11, [pc, #884]	; 800d010 <turn135outR+0x3cc>
 800cc9c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	eeb0 2a47 	vmov.f32	s4, s14
 800cca6:	eef0 1a46 	vmov.f32	s3, s12
 800ccaa:	eeb0 1a66 	vmov.f32	s2, s13
 800ccae:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800d014 <turn135outR+0x3d0>
 800ccb2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d018 <turn135outR+0x3d4>
 800ccb6:	f7f6 f959 	bl	8002f6c <straight_table2>
			wallmode.WallControlMode=0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800ccbe:	2303      	movs	r3, #3
 800ccc0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ccc2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ccc6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ccca:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ccce:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ccd2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccd6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccde:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cce2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cce6:	eddf 4aca 	vldr	s9, [pc, #808]	; 800d010 <turn135outR+0x3cc>
 800ccea:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	eeb0 2a47 	vmov.f32	s4, s14
 800ccf4:	eef0 1a45 	vmov.f32	s3, s10
 800ccf8:	eeb0 1a65 	vmov.f32	s2, s11
 800ccfc:	eef0 0a46 	vmov.f32	s1, s12
 800cd00:	eeb0 0a66 	vmov.f32	s0, s13
 800cd04:	f7f6 f932 	bl	8002f6c <straight_table2>
			if(mollifier_mode == ON){
 800cd08:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d10c      	bne.n	800cd2a <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cd10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd14:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cd18:	eeb0 1a47 	vmov.f32	s2, s14
 800cd1c:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d01c <turn135outR+0x3d8>
 800cd20:	eeb0 0a67 	vmov.f32	s0, s15
 800cd24:	f7f7 f898 	bl	8003e58 <mollifier_slalom_table>
 800cd28:	e015      	b.n	800cd56 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cd2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cd32:	eef1 7a67 	vneg.f32	s15, s15
 800cd36:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cd3a:	eef0 2a66 	vmov.f32	s5, s13
 800cd3e:	eeb0 2a67 	vmov.f32	s4, s15
 800cd42:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800d014 <turn135outR+0x3d0>
 800cd46:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800d014 <turn135outR+0x3d0>
 800cd4a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d01c <turn135outR+0x3d8>
 800cd4e:	eeb0 0a47 	vmov.f32	s0, s14
 800cd52:	f7f6 ff31 	bl	8003bb8 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cd56:	2300      	movs	r3, #0
 800cd58:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd5e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd62:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d020 <turn135outR+0x3dc>
 800cd66:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd6a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd6e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd7e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd82:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd86:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800d010 <turn135outR+0x3cc>
 800cd8a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	eeb0 2a47 	vmov.f32	s4, s14
 800cd94:	eef0 1a65 	vmov.f32	s3, s11
 800cd98:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800d014 <turn135outR+0x3d0>
 800cd9c:	eef0 0a46 	vmov.f32	s1, s12
 800cda0:	eeb0 0a66 	vmov.f32	s0, s13
 800cda4:	f7f6 f8e2 	bl	8002f6c <straight_table2>
			highspeed_mode = 0;
 800cda8:	4b98      	ldr	r3, [pc, #608]	; (800d00c <turn135outR+0x3c8>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cdae:	e123      	b.n	800cff8 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cdb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	f240 8082 	bls.w	800cebe <turn135outR+0x27a>
		highspeed_mode = 1;
 800cdba:	4b94      	ldr	r3, [pc, #592]	; (800d00c <turn135outR+0x3c8>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cdc8:	2303      	movs	r3, #3
 800cdca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdd0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cdd4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdd8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cddc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cde0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cde4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cde8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cdf0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdf4:	eddf 4a86 	vldr	s9, [pc, #536]	; 800d010 <turn135outR+0x3cc>
 800cdf8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	eeb0 2a47 	vmov.f32	s4, s14
 800ce02:	eef0 1a45 	vmov.f32	s3, s10
 800ce06:	eeb0 1a65 	vmov.f32	s2, s11
 800ce0a:	eef0 0a46 	vmov.f32	s1, s12
 800ce0e:	eeb0 0a66 	vmov.f32	s0, s13
 800ce12:	f7f6 f8ab 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800ce16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d10c      	bne.n	800ce38 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ce1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce26:	eeb0 1a47 	vmov.f32	s2, s14
 800ce2a:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d01c <turn135outR+0x3d8>
 800ce2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce32:	f7f7 f811 	bl	8003e58 <mollifier_slalom_table>
 800ce36:	e015      	b.n	800ce64 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ce38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce3c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ce40:	eef1 7a67 	vneg.f32	s15, s15
 800ce44:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce48:	eef0 2a66 	vmov.f32	s5, s13
 800ce4c:	eeb0 2a67 	vmov.f32	s4, s15
 800ce50:	eddf 1a70 	vldr	s3, [pc, #448]	; 800d014 <turn135outR+0x3d0>
 800ce54:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800d014 <turn135outR+0x3d0>
 800ce58:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d01c <turn135outR+0x3d8>
 800ce5c:	eeb0 0a47 	vmov.f32	s0, s14
 800ce60:	f7f6 feaa 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=0;
 800ce64:	2300      	movs	r3, #0
 800ce66:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce6c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce70:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d020 <turn135outR+0x3dc>
 800ce74:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce78:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce7c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce8c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce90:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce94:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800d010 <turn135outR+0x3cc>
 800ce98:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	eeb0 2a47 	vmov.f32	s4, s14
 800cea2:	eef0 1a65 	vmov.f32	s3, s11
 800cea6:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800d014 <turn135outR+0x3d0>
 800ceaa:	eef0 0a46 	vmov.f32	s1, s12
 800ceae:	eeb0 0a66 	vmov.f32	s0, s13
 800ceb2:	f7f6 f85b 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800ceb6:	4b55      	ldr	r3, [pc, #340]	; (800d00c <turn135outR+0x3c8>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	701a      	strb	r2, [r3, #0]
}
 800cebc:	e09c      	b.n	800cff8 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cebe:	2300      	movs	r3, #0
 800cec0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cec6:	2303      	movs	r3, #3
 800cec8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cece:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ced2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ced6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ceda:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cede:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cee2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceea:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ceee:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cef2:	eddf 4a47 	vldr	s9, [pc, #284]	; 800d010 <turn135outR+0x3cc>
 800cef6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	eeb0 2a47 	vmov.f32	s4, s14
 800cf00:	eef0 1a45 	vmov.f32	s3, s10
 800cf04:	eeb0 1a65 	vmov.f32	s2, s11
 800cf08:	eef0 0a46 	vmov.f32	s1, s12
 800cf0c:	eeb0 0a66 	vmov.f32	s0, s13
 800cf10:	f7f6 f82c 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800cf14:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d10c      	bne.n	800cf36 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cf1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf24:	eeb0 1a47 	vmov.f32	s2, s14
 800cf28:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d01c <turn135outR+0x3d8>
 800cf2c:	eeb0 0a67 	vmov.f32	s0, s15
 800cf30:	f7f6 ff92 	bl	8003e58 <mollifier_slalom_table>
 800cf34:	e015      	b.n	800cf62 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cf36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf3a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cf3e:	eef1 7a67 	vneg.f32	s15, s15
 800cf42:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf46:	eef0 2a66 	vmov.f32	s5, s13
 800cf4a:	eeb0 2a67 	vmov.f32	s4, s15
 800cf4e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800d014 <turn135outR+0x3d0>
 800cf52:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800d014 <turn135outR+0x3d0>
 800cf56:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d01c <turn135outR+0x3d8>
 800cf5a:	eeb0 0a47 	vmov.f32	s0, s14
 800cf5e:	f7f6 fe2b 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cf62:	2301      	movs	r3, #1
 800cf64:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf66:	2300      	movs	r3, #0
 800cf68:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf6a:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cf6e:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cf72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf7e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf8a:	eef0 7ae7 	vabs.f32	s15, s15
 800cf8e:	ee17 0a90 	vmov	r0, s15
 800cf92:	f7f3 fb01 	bl	8000598 <__aeabi_f2d>
 800cf96:	f04f 0200 	mov.w	r2, #0
 800cf9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf9e:	f7f3 fc7d 	bl	800089c <__aeabi_ddiv>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4614      	mov	r4, r2
 800cfa8:	461d      	mov	r5, r3
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f3 faf3 	bl	8000598 <__aeabi_f2d>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	4629      	mov	r1, r5
 800cfba:	f7f3 fc6f 	bl	800089c <__aeabi_ddiv>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	4610      	mov	r0, r2
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	f04f 0200 	mov.w	r2, #0
 800cfca:	4b16      	ldr	r3, [pc, #88]	; (800d024 <turn135outR+0x3e0>)
 800cfcc:	f7f3 f986 	bl	80002dc <__adddf3>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	f7f3 fe0e 	bl	8000bf8 <__aeabi_d2f>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	ee02 3a10 	vmov	s4, r3
 800cfe4:	edd7 1a01 	vldr	s3, [r7, #4]
 800cfe8:	ed97 1a01 	vldr	s2, [r7, #4]
 800cfec:	eef0 0a68 	vmov.f32	s1, s17
 800cff0:	eeb0 0a48 	vmov.f32	s0, s16
 800cff4:	f7f5 ffba 	bl	8002f6c <straight_table2>
}
 800cff8:	bf00      	nop
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	ecbd 8b02 	vpop	{d8}
 800d002:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d006:	b004      	add	sp, #16
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	20000808 	.word	0x20000808
 800d010:	42340000 	.word	0x42340000
 800d014:	00000000 	.word	0x00000000
 800d018:	42c4477b 	.word	0x42c4477b
 800d01c:	c3070000 	.word	0xc3070000
 800d020:	42b40000 	.word	0x42b40000
 800d024:	408f4000 	.word	0x408f4000

0800d028 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d028:	b084      	sub	sp, #16
 800d02a:	b5b0      	push	{r4, r5, r7, lr}
 800d02c:	ed2d 8b02 	vpush	{d8}
 800d030:	b084      	sub	sp, #16
 800d032:	af00      	add	r7, sp, #0
 800d034:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d03c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d040:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d044:	2b01      	cmp	r3, #1
 800d046:	f040 80a3 	bne.w	800d190 <turn135outL+0x168>
		highspeed_mode = 1;
 800d04a:	4be5      	ldr	r3, [pc, #916]	; (800d3e0 <turn135outL+0x3b8>)
 800d04c:	2201      	movs	r2, #1
 800d04e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d050:	2300      	movs	r3, #0
 800d052:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d054:	2300      	movs	r3, #0
 800d056:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d058:	2300      	movs	r3, #0
 800d05a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d060:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d064:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d068:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d06c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d070:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d074:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d078:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d07c:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d3e4 <turn135outL+0x3bc>
 800d080:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	eeb0 2a47 	vmov.f32	s4, s14
 800d08a:	eef0 1a46 	vmov.f32	s3, s12
 800d08e:	eeb0 1a66 	vmov.f32	s2, s13
 800d092:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d3e8 <turn135outL+0x3c0>
 800d096:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d3ec <turn135outL+0x3c4>
 800d09a:	f7f5 ff67 	bl	8002f6c <straight_table2>
		wallmode.WallControlMode=0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d0a2:	2304      	movs	r3, #4
 800d0a4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d0aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d0ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d0b2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0c2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d0c6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0ca:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d3e4 <turn135outL+0x3bc>
 800d0ce:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	eeb0 2a47 	vmov.f32	s4, s14
 800d0d8:	eef0 1a45 	vmov.f32	s3, s10
 800d0dc:	eeb0 1a65 	vmov.f32	s2, s11
 800d0e0:	eef0 0a46 	vmov.f32	s1, s12
 800d0e4:	eeb0 0a66 	vmov.f32	s0, s13
 800d0e8:	f7f5 ff40 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800d0ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d10c      	bne.n	800d10e <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d0f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0fc:	eeb0 1a47 	vmov.f32	s2, s14
 800d100:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d3f0 <turn135outL+0x3c8>
 800d104:	eeb0 0a67 	vmov.f32	s0, s15
 800d108:	f7f6 fea6 	bl	8003e58 <mollifier_slalom_table>
 800d10c:	e013      	b.n	800d136 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d10e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d112:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d116:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d11a:	eef0 2a66 	vmov.f32	s5, s13
 800d11e:	eeb0 2a47 	vmov.f32	s4, s14
 800d122:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d3e8 <turn135outL+0x3c0>
 800d126:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d3e8 <turn135outL+0x3c0>
 800d12a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d3f0 <turn135outL+0x3c8>
 800d12e:	eeb0 0a67 	vmov.f32	s0, s15
 800d132:	f7f6 fd41 	bl	8003bb8 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d136:	2300      	movs	r3, #0
 800d138:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d13e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d142:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d3f4 <turn135outL+0x3cc>
 800d146:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d14a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d14e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d152:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d156:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d15a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d15e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d162:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d166:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d3e4 <turn135outL+0x3bc>
 800d16a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	eeb0 2a47 	vmov.f32	s4, s14
 800d174:	eef0 1a65 	vmov.f32	s3, s11
 800d178:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d3e8 <turn135outL+0x3c0>
 800d17c:	eef0 0a46 	vmov.f32	s1, s12
 800d180:	eeb0 0a66 	vmov.f32	s0, s13
 800d184:	f7f5 fef2 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800d188:	4b95      	ldr	r3, [pc, #596]	; (800d3e0 <turn135outL+0x3b8>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d18e:	e11e      	b.n	800d3ce <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d190:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d194:	2b01      	cmp	r3, #1
 800d196:	d97f      	bls.n	800d298 <turn135outL+0x270>
		highspeed_mode = 1;
 800d198:	4b91      	ldr	r3, [pc, #580]	; (800d3e0 <turn135outL+0x3b8>)
 800d19a:	2201      	movs	r2, #1
 800d19c:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d1a6:	2304      	movs	r3, #4
 800d1a8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1ae:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d1b2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d1b6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d1ba:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1ca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1ce:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1d2:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d3e4 <turn135outL+0x3bc>
 800d1d6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	eeb0 2a47 	vmov.f32	s4, s14
 800d1e0:	eef0 1a45 	vmov.f32	s3, s10
 800d1e4:	eeb0 1a65 	vmov.f32	s2, s11
 800d1e8:	eef0 0a46 	vmov.f32	s1, s12
 800d1ec:	eeb0 0a66 	vmov.f32	s0, s13
 800d1f0:	f7f5 febc 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800d1f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d10c      	bne.n	800d216 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d1fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d200:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d204:	eeb0 1a47 	vmov.f32	s2, s14
 800d208:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d3f0 <turn135outL+0x3c8>
 800d20c:	eeb0 0a67 	vmov.f32	s0, s15
 800d210:	f7f6 fe22 	bl	8003e58 <mollifier_slalom_table>
 800d214:	e013      	b.n	800d23e <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d216:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d21a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d21e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d222:	eef0 2a66 	vmov.f32	s5, s13
 800d226:	eeb0 2a47 	vmov.f32	s4, s14
 800d22a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d3e8 <turn135outL+0x3c0>
 800d22e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d3e8 <turn135outL+0x3c0>
 800d232:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d3f0 <turn135outL+0x3c8>
 800d236:	eeb0 0a67 	vmov.f32	s0, s15
 800d23a:	f7f6 fcbd 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=0;
 800d23e:	2300      	movs	r3, #0
 800d240:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d242:	2300      	movs	r3, #0
 800d244:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d246:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d24a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d3f4 <turn135outL+0x3cc>
 800d24e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d252:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d256:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d25a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d25e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d262:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d266:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d26a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d26e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d3e4 <turn135outL+0x3bc>
 800d272:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	eeb0 2a47 	vmov.f32	s4, s14
 800d27c:	eef0 1a65 	vmov.f32	s3, s11
 800d280:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d3e8 <turn135outL+0x3c0>
 800d284:	eef0 0a46 	vmov.f32	s1, s12
 800d288:	eeb0 0a66 	vmov.f32	s0, s13
 800d28c:	f7f5 fe6e 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800d290:	4b53      	ldr	r3, [pc, #332]	; (800d3e0 <turn135outL+0x3b8>)
 800d292:	2200      	movs	r2, #0
 800d294:	701a      	strb	r2, [r3, #0]
}
 800d296:	e09a      	b.n	800d3ce <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d298:	2300      	movs	r3, #0
 800d29a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d2a0:	2304      	movs	r3, #4
 800d2a2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2a8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d2ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d2b0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d2b4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2c4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d2c8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2cc:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d3e4 <turn135outL+0x3bc>
 800d2d0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	eeb0 2a47 	vmov.f32	s4, s14
 800d2da:	eef0 1a45 	vmov.f32	s3, s10
 800d2de:	eeb0 1a65 	vmov.f32	s2, s11
 800d2e2:	eef0 0a46 	vmov.f32	s1, s12
 800d2e6:	eeb0 0a66 	vmov.f32	s0, s13
 800d2ea:	f7f5 fe3f 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800d2ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d10c      	bne.n	800d310 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d2f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2fe:	eeb0 1a47 	vmov.f32	s2, s14
 800d302:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d3f0 <turn135outL+0x3c8>
 800d306:	eeb0 0a67 	vmov.f32	s0, s15
 800d30a:	f7f6 fda5 	bl	8003e58 <mollifier_slalom_table>
 800d30e:	e013      	b.n	800d338 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d310:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d314:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d318:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d31c:	eef0 2a66 	vmov.f32	s5, s13
 800d320:	eeb0 2a47 	vmov.f32	s4, s14
 800d324:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d3e8 <turn135outL+0x3c0>
 800d328:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d3e8 <turn135outL+0x3c0>
 800d32c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d3f0 <turn135outL+0x3c8>
 800d330:	eeb0 0a67 	vmov.f32	s0, s15
 800d334:	f7f6 fc40 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d338:	2301      	movs	r3, #1
 800d33a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d340:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d344:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d348:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d34c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d350:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d354:	edd7 7a01 	vldr	s15, [r7, #4]
 800d358:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d35c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d360:	eef0 7ae7 	vabs.f32	s15, s15
 800d364:	ee17 0a90 	vmov	r0, s15
 800d368:	f7f3 f916 	bl	8000598 <__aeabi_f2d>
 800d36c:	f04f 0200 	mov.w	r2, #0
 800d370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d374:	f7f3 fa92 	bl	800089c <__aeabi_ddiv>
 800d378:	4602      	mov	r2, r0
 800d37a:	460b      	mov	r3, r1
 800d37c:	4614      	mov	r4, r2
 800d37e:	461d      	mov	r5, r3
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	4618      	mov	r0, r3
 800d384:	f7f3 f908 	bl	8000598 <__aeabi_f2d>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	4620      	mov	r0, r4
 800d38e:	4629      	mov	r1, r5
 800d390:	f7f3 fa84 	bl	800089c <__aeabi_ddiv>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	4610      	mov	r0, r2
 800d39a:	4619      	mov	r1, r3
 800d39c:	f04f 0200 	mov.w	r2, #0
 800d3a0:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <turn135outL+0x3d0>)
 800d3a2:	f7f2 ff9b 	bl	80002dc <__adddf3>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	f7f3 fc23 	bl	8000bf8 <__aeabi_d2f>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	ee02 3a10 	vmov	s4, r3
 800d3ba:	edd7 1a01 	vldr	s3, [r7, #4]
 800d3be:	ed97 1a01 	vldr	s2, [r7, #4]
 800d3c2:	eef0 0a68 	vmov.f32	s1, s17
 800d3c6:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ca:	f7f5 fdcf 	bl	8002f6c <straight_table2>
}
 800d3ce:	bf00      	nop
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	ecbd 8b02 	vpop	{d8}
 800d3d8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d3dc:	b004      	add	sp, #16
 800d3de:	4770      	bx	lr
 800d3e0:	20000808 	.word	0x20000808
 800d3e4:	42340000 	.word	0x42340000
 800d3e8:	00000000 	.word	0x00000000
 800d3ec:	42c4477b 	.word	0x42c4477b
 800d3f0:	43070000 	.word	0x43070000
 800d3f4:	42b40000 	.word	0x42b40000
 800d3f8:	408f4000 	.word	0x408f4000
 800d3fc:	00000000 	.word	0x00000000

0800d400 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d400:	b084      	sub	sp, #16
 800d402:	b5b0      	push	{r4, r5, r7, lr}
 800d404:	ed2d 8b02 	vpush	{d8}
 800d408:	b084      	sub	sp, #16
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d414:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d418:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	f040 80af 	bne.w	800d580 <V90R+0x180>
			highspeed_mode = 1;
 800d422:	4bc1      	ldr	r3, [pc, #772]	; (800d728 <V90R+0x328>)
 800d424:	2201      	movs	r2, #1
 800d426:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d428:	2300      	movs	r3, #0
 800d42a:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d430:	2300      	movs	r3, #0
 800d432:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d434:	2300      	movs	r3, #0
 800d436:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d438:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d43c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d440:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d444:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d44c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d450:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d454:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d72c <V90R+0x32c>
 800d458:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	eeb0 2a47 	vmov.f32	s4, s14
 800d462:	eef0 1a46 	vmov.f32	s3, s12
 800d466:	eeb0 1a66 	vmov.f32	s2, s13
 800d46a:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d734 <V90R+0x334>
 800d46e:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d730 <V90R+0x330>
 800d472:	f7f5 fd7b 	bl	8002f6c <straight_table2>
			wallmode.WallControlMode=0;
 800d476:	2300      	movs	r3, #0
 800d478:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d47a:	2303      	movs	r3, #3
 800d47c:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d47e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d482:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d486:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d48a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d48e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d492:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d49a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d49e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4a2:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d72c <V90R+0x32c>
 800d4a6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	eeb0 2a47 	vmov.f32	s4, s14
 800d4b0:	eef0 1a45 	vmov.f32	s3, s10
 800d4b4:	eeb0 1a65 	vmov.f32	s2, s11
 800d4b8:	eef0 0a46 	vmov.f32	s1, s12
 800d4bc:	eeb0 0a66 	vmov.f32	s0, s13
 800d4c0:	f7f5 fd54 	bl	8002f6c <straight_table2>
			if(mollifier_mode == ON){
 800d4c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d10c      	bne.n	800d4e6 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d4cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d4d4:	eeb0 1a47 	vmov.f32	s2, s14
 800d4d8:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d738 <V90R+0x338>
 800d4dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d4e0:	f7f6 fcba 	bl	8003e58 <mollifier_slalom_table>
 800d4e4:	e015      	b.n	800d512 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d4e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d4ee:	eef1 7a67 	vneg.f32	s15, s15
 800d4f2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d4f6:	eef0 2a66 	vmov.f32	s5, s13
 800d4fa:	eeb0 2a67 	vmov.f32	s4, s15
 800d4fe:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d734 <V90R+0x334>
 800d502:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d734 <V90R+0x334>
 800d506:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d738 <V90R+0x338>
 800d50a:	eeb0 0a47 	vmov.f32	s0, s14
 800d50e:	f7f6 fb53 	bl	8003bb8 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d512:	2300      	movs	r3, #0
 800d514:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7f3 f83b 	bl	8000598 <__aeabi_f2d>
 800d522:	a37f      	add	r3, pc, #508	; (adr r3, 800d720 <V90R+0x320>)
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	f7f2 fed8 	bl	80002dc <__adddf3>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	4610      	mov	r0, r2
 800d532:	4619      	mov	r1, r3
 800d534:	f7f3 fb60 	bl	8000bf8 <__aeabi_d2f>
 800d538:	4603      	mov	r3, r0
 800d53a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d53e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d542:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d546:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d54a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d54e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d552:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d556:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d72c <V90R+0x32c>
 800d55a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	eeb0 2a47 	vmov.f32	s4, s14
 800d564:	eef0 1a46 	vmov.f32	s3, s12
 800d568:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d734 <V90R+0x334>
 800d56c:	eef0 0a66 	vmov.f32	s1, s13
 800d570:	ee00 3a10 	vmov	s0, r3
 800d574:	f7f5 fcfa 	bl	8002f6c <straight_table2>
			highspeed_mode = 0;
 800d578:	4b6b      	ldr	r3, [pc, #428]	; (800d728 <V90R+0x328>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d57e:	e13e      	b.n	800d7fe <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d580:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d584:	2b01      	cmp	r3, #1
 800d586:	f240 808c 	bls.w	800d6a2 <V90R+0x2a2>
		highspeed_mode = 1;
 800d58a:	4b67      	ldr	r3, [pc, #412]	; (800d728 <V90R+0x328>)
 800d58c:	2201      	movs	r2, #1
 800d58e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d590:	2300      	movs	r3, #0
 800d592:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d594:	2300      	movs	r3, #0
 800d596:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d598:	2303      	movs	r3, #3
 800d59a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5a0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d5a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d5a8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d5ac:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5bc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d5c0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5c4:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d72c <V90R+0x32c>
 800d5c8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	eeb0 2a47 	vmov.f32	s4, s14
 800d5d2:	eef0 1a45 	vmov.f32	s3, s10
 800d5d6:	eeb0 1a65 	vmov.f32	s2, s11
 800d5da:	eef0 0a46 	vmov.f32	s1, s12
 800d5de:	eeb0 0a66 	vmov.f32	s0, s13
 800d5e2:	f7f5 fcc3 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800d5e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d10c      	bne.n	800d608 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d5ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d5f6:	eeb0 1a47 	vmov.f32	s2, s14
 800d5fa:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d738 <V90R+0x338>
 800d5fe:	eeb0 0a67 	vmov.f32	s0, s15
 800d602:	f7f6 fc29 	bl	8003e58 <mollifier_slalom_table>
 800d606:	e015      	b.n	800d634 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d608:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d60c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d610:	eef1 7a67 	vneg.f32	s15, s15
 800d614:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d618:	eef0 2a66 	vmov.f32	s5, s13
 800d61c:	eeb0 2a67 	vmov.f32	s4, s15
 800d620:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d734 <V90R+0x334>
 800d624:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d734 <V90R+0x334>
 800d628:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d738 <V90R+0x338>
 800d62c:	eeb0 0a47 	vmov.f32	s0, s14
 800d630:	f7f6 fac2 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=0;
 800d634:	2300      	movs	r3, #0
 800d636:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f2 ffaa 	bl	8000598 <__aeabi_f2d>
 800d644:	a336      	add	r3, pc, #216	; (adr r3, 800d720 <V90R+0x320>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	f7f2 fe47 	bl	80002dc <__adddf3>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4610      	mov	r0, r2
 800d654:	4619      	mov	r1, r3
 800d656:	f7f3 facf 	bl	8000bf8 <__aeabi_d2f>
 800d65a:	4603      	mov	r3, r0
 800d65c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d660:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d664:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d668:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d66c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d670:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d674:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d678:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d72c <V90R+0x32c>
 800d67c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	eeb0 2a47 	vmov.f32	s4, s14
 800d686:	eef0 1a46 	vmov.f32	s3, s12
 800d68a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d734 <V90R+0x334>
 800d68e:	eef0 0a66 	vmov.f32	s1, s13
 800d692:	ee00 3a10 	vmov	s0, r3
 800d696:	f7f5 fc69 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800d69a:	4b23      	ldr	r3, [pc, #140]	; (800d728 <V90R+0x328>)
 800d69c:	2200      	movs	r2, #0
 800d69e:	701a      	strb	r2, [r3, #0]
}
 800d6a0:	e0ad      	b.n	800d7fe <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6b2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d6b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d6ba:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d6be:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6ce:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d6d2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6d6:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d72c <V90R+0x32c>
 800d6da:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	eeb0 2a47 	vmov.f32	s4, s14
 800d6e4:	eef0 1a45 	vmov.f32	s3, s10
 800d6e8:	eeb0 1a65 	vmov.f32	s2, s11
 800d6ec:	eef0 0a46 	vmov.f32	s1, s12
 800d6f0:	eeb0 0a66 	vmov.f32	s0, s13
 800d6f4:	f7f5 fc3a 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800d6f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d11d      	bne.n	800d73c <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d700:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d704:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d708:	eeb0 1a47 	vmov.f32	s2, s14
 800d70c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d738 <V90R+0x338>
 800d710:	eeb0 0a67 	vmov.f32	s0, s15
 800d714:	f7f6 fba0 	bl	8003e58 <mollifier_slalom_table>
 800d718:	e026      	b.n	800d768 <V90R+0x368>
 800d71a:	bf00      	nop
 800d71c:	f3af 8000 	nop.w
 800d720:	c022ec18 	.word	0xc022ec18
 800d724:	405fd1de 	.word	0x405fd1de
 800d728:	20000808 	.word	0x20000808
 800d72c:	42340000 	.word	0x42340000
 800d730:	42c4477b 	.word	0x42c4477b
 800d734:	00000000 	.word	0x00000000
 800d738:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d73c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d740:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d744:	eef1 7a67 	vneg.f32	s15, s15
 800d748:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d74c:	eef0 2a66 	vmov.f32	s5, s13
 800d750:	eeb0 2a67 	vmov.f32	s4, s15
 800d754:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d734 <V90R+0x334>
 800d758:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d734 <V90R+0x334>
 800d75c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d738 <V90R+0x338>
 800d760:	eeb0 0a47 	vmov.f32	s0, s14
 800d764:	f7f6 fa28 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d768:	2303      	movs	r3, #3
 800d76a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d770:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d774:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d778:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d77c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d780:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d784:	edd7 7a01 	vldr	s15, [r7, #4]
 800d788:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d78c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d790:	eef0 7ae7 	vabs.f32	s15, s15
 800d794:	ee17 0a90 	vmov	r0, s15
 800d798:	f7f2 fefe 	bl	8000598 <__aeabi_f2d>
 800d79c:	f04f 0200 	mov.w	r2, #0
 800d7a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7a4:	f7f3 f87a 	bl	800089c <__aeabi_ddiv>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	461d      	mov	r5, r3
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7f2 fef0 	bl	8000598 <__aeabi_f2d>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	4620      	mov	r0, r4
 800d7be:	4629      	mov	r1, r5
 800d7c0:	f7f3 f86c 	bl	800089c <__aeabi_ddiv>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4610      	mov	r0, r2
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	f04f 0200 	mov.w	r2, #0
 800d7d0:	4b0f      	ldr	r3, [pc, #60]	; (800d810 <V90R+0x410>)
 800d7d2:	f7f2 fd83 	bl	80002dc <__adddf3>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d7da:	4610      	mov	r0, r2
 800d7dc:	4619      	mov	r1, r3
 800d7de:	f7f3 fa0b 	bl	8000bf8 <__aeabi_d2f>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	ee02 3a10 	vmov	s4, r3
 800d7ea:	edd7 1a01 	vldr	s3, [r7, #4]
 800d7ee:	ed97 1a01 	vldr	s2, [r7, #4]
 800d7f2:	eef0 0a68 	vmov.f32	s1, s17
 800d7f6:	eeb0 0a48 	vmov.f32	s0, s16
 800d7fa:	f7f5 fbb7 	bl	8002f6c <straight_table2>
}
 800d7fe:	bf00      	nop
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	ecbd 8b02 	vpop	{d8}
 800d808:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d80c:	b004      	add	sp, #16
 800d80e:	4770      	bx	lr
 800d810:	408f4000 	.word	0x408f4000
 800d814:	00000000 	.word	0x00000000

0800d818 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d818:	b084      	sub	sp, #16
 800d81a:	b5b0      	push	{r4, r5, r7, lr}
 800d81c:	ed2d 8b02 	vpush	{d8}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d82c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d830:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d834:	2b01      	cmp	r3, #1
 800d836:	f040 80ad 	bne.w	800d994 <V90L+0x17c>
				highspeed_mode = 1;
 800d83a:	4bbf      	ldr	r3, [pc, #764]	; (800db38 <V90L+0x320>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d840:	2300      	movs	r3, #0
 800d842:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d844:	2300      	movs	r3, #0
 800d846:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d848:	2300      	movs	r3, #0
 800d84a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d850:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d854:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d858:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d85c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d860:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d864:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d868:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d86c:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800db3c <V90L+0x324>
 800d870:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	eeb0 2a47 	vmov.f32	s4, s14
 800d87a:	eef0 1a46 	vmov.f32	s3, s12
 800d87e:	eeb0 1a66 	vmov.f32	s2, s13
 800d882:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800db44 <V90L+0x32c>
 800d886:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800db40 <V90L+0x328>
 800d88a:	f7f5 fb6f 	bl	8002f6c <straight_table2>
				wallmode.WallControlMode=0;
 800d88e:	2300      	movs	r3, #0
 800d890:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d892:	2304      	movs	r3, #4
 800d894:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d896:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d89a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d89e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d8a2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d8a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8b2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d8b6:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d8ba:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800db3c <V90L+0x324>
 800d8be:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	eeb0 2a47 	vmov.f32	s4, s14
 800d8c8:	eef0 1a45 	vmov.f32	s3, s10
 800d8cc:	eeb0 1a65 	vmov.f32	s2, s11
 800d8d0:	eef0 0a46 	vmov.f32	s1, s12
 800d8d4:	eeb0 0a66 	vmov.f32	s0, s13
 800d8d8:	f7f5 fb48 	bl	8002f6c <straight_table2>
				if(mollifier_mode == ON){
 800d8dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d10c      	bne.n	800d8fe <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d8e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8ec:	eeb0 1a47 	vmov.f32	s2, s14
 800d8f0:	eddf 0a95 	vldr	s1, [pc, #596]	; 800db48 <V90L+0x330>
 800d8f4:	eeb0 0a67 	vmov.f32	s0, s15
 800d8f8:	f7f6 faae 	bl	8003e58 <mollifier_slalom_table>
 800d8fc:	e013      	b.n	800d926 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d8fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d902:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d906:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d90a:	eef0 2a66 	vmov.f32	s5, s13
 800d90e:	eeb0 2a47 	vmov.f32	s4, s14
 800d912:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800db44 <V90L+0x32c>
 800d916:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800db44 <V90L+0x32c>
 800d91a:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800db48 <V90L+0x330>
 800d91e:	eeb0 0a67 	vmov.f32	s0, s15
 800d922:	f7f6 f949 	bl	8003bb8 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d926:	2300      	movs	r3, #0
 800d928:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	4618      	mov	r0, r3
 800d932:	f7f2 fe31 	bl	8000598 <__aeabi_f2d>
 800d936:	a37e      	add	r3, pc, #504	; (adr r3, 800db30 <V90L+0x318>)
 800d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93c:	f7f2 fcce 	bl	80002dc <__adddf3>
 800d940:	4602      	mov	r2, r0
 800d942:	460b      	mov	r3, r1
 800d944:	4610      	mov	r0, r2
 800d946:	4619      	mov	r1, r3
 800d948:	f7f3 f956 	bl	8000bf8 <__aeabi_d2f>
 800d94c:	4603      	mov	r3, r0
 800d94e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d952:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d956:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d95a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d95e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d962:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d966:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d96a:	eddf 5a74 	vldr	s11, [pc, #464]	; 800db3c <V90L+0x324>
 800d96e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	eeb0 2a47 	vmov.f32	s4, s14
 800d978:	eef0 1a46 	vmov.f32	s3, s12
 800d97c:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800db44 <V90L+0x32c>
 800d980:	eef0 0a66 	vmov.f32	s1, s13
 800d984:	ee00 3a10 	vmov	s0, r3
 800d988:	f7f5 faf0 	bl	8002f6c <straight_table2>
				highspeed_mode = 0;
 800d98c:	4b6a      	ldr	r3, [pc, #424]	; (800db38 <V90L+0x320>)
 800d98e:	2200      	movs	r2, #0
 800d990:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d992:	e13a      	b.n	800dc0a <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d994:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d998:	2b01      	cmp	r3, #1
 800d99a:	f240 808a 	bls.w	800dab2 <V90L+0x29a>
		highspeed_mode = 1;
 800d99e:	4b66      	ldr	r3, [pc, #408]	; (800db38 <V90L+0x320>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d9ac:	2304      	movs	r3, #4
 800d9ae:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d9b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d9bc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d9c0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d9c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9d0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d9d4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9d8:	eddf 4a58 	vldr	s9, [pc, #352]	; 800db3c <V90L+0x324>
 800d9dc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	eeb0 2a47 	vmov.f32	s4, s14
 800d9e6:	eef0 1a45 	vmov.f32	s3, s10
 800d9ea:	eeb0 1a65 	vmov.f32	s2, s11
 800d9ee:	eef0 0a46 	vmov.f32	s1, s12
 800d9f2:	eeb0 0a66 	vmov.f32	s0, s13
 800d9f6:	f7f5 fab9 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800d9fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d10c      	bne.n	800da1c <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800da02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da06:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da0a:	eeb0 1a47 	vmov.f32	s2, s14
 800da0e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800db48 <V90L+0x330>
 800da12:	eeb0 0a67 	vmov.f32	s0, s15
 800da16:	f7f6 fa1f 	bl	8003e58 <mollifier_slalom_table>
 800da1a:	e013      	b.n	800da44 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800da1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da24:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800da28:	eef0 2a66 	vmov.f32	s5, s13
 800da2c:	eeb0 2a47 	vmov.f32	s4, s14
 800da30:	eddf 1a44 	vldr	s3, [pc, #272]	; 800db44 <V90L+0x32c>
 800da34:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800db44 <V90L+0x32c>
 800da38:	eddf 0a43 	vldr	s1, [pc, #268]	; 800db48 <V90L+0x330>
 800da3c:	eeb0 0a67 	vmov.f32	s0, s15
 800da40:	f7f6 f8ba 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=0;
 800da44:	2300      	movs	r3, #0
 800da46:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da48:	2300      	movs	r3, #0
 800da4a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4e:	4618      	mov	r0, r3
 800da50:	f7f2 fda2 	bl	8000598 <__aeabi_f2d>
 800da54:	a336      	add	r3, pc, #216	; (adr r3, 800db30 <V90L+0x318>)
 800da56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5a:	f7f2 fc3f 	bl	80002dc <__adddf3>
 800da5e:	4602      	mov	r2, r0
 800da60:	460b      	mov	r3, r1
 800da62:	4610      	mov	r0, r2
 800da64:	4619      	mov	r1, r3
 800da66:	f7f3 f8c7 	bl	8000bf8 <__aeabi_d2f>
 800da6a:	4603      	mov	r3, r0
 800da6c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da70:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da74:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da80:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800da84:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da88:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800db3c <V90L+0x324>
 800da8c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	eeb0 2a47 	vmov.f32	s4, s14
 800da96:	eef0 1a46 	vmov.f32	s3, s12
 800da9a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800db44 <V90L+0x32c>
 800da9e:	eef0 0a66 	vmov.f32	s1, s13
 800daa2:	ee00 3a10 	vmov	s0, r3
 800daa6:	f7f5 fa61 	bl	8002f6c <straight_table2>
		highspeed_mode = 0;
 800daaa:	4b23      	ldr	r3, [pc, #140]	; (800db38 <V90L+0x320>)
 800daac:	2200      	movs	r2, #0
 800daae:	701a      	strb	r2, [r3, #0]
}
 800dab0:	e0ab      	b.n	800dc0a <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800dab2:	2300      	movs	r3, #0
 800dab4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800daba:	2304      	movs	r3, #4
 800dabc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dac2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dac6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800daca:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dace:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dad2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dad6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dada:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dade:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dae2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dae6:	eddf 4a15 	vldr	s9, [pc, #84]	; 800db3c <V90L+0x324>
 800daea:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	eeb0 2a47 	vmov.f32	s4, s14
 800daf4:	eef0 1a45 	vmov.f32	s3, s10
 800daf8:	eeb0 1a65 	vmov.f32	s2, s11
 800dafc:	eef0 0a46 	vmov.f32	s1, s12
 800db00:	eeb0 0a66 	vmov.f32	s0, s13
 800db04:	f7f5 fa32 	bl	8002f6c <straight_table2>
		if(mollifier_mode == ON){
 800db08:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d11d      	bne.n	800db4c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800db10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db14:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db18:	eeb0 1a47 	vmov.f32	s2, s14
 800db1c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800db48 <V90L+0x330>
 800db20:	eeb0 0a67 	vmov.f32	s0, s15
 800db24:	f7f6 f998 	bl	8003e58 <mollifier_slalom_table>
 800db28:	e024      	b.n	800db74 <V90L+0x35c>
 800db2a:	bf00      	nop
 800db2c:	f3af 8000 	nop.w
 800db30:	c022ec18 	.word	0xc022ec18
 800db34:	405fd1de 	.word	0x405fd1de
 800db38:	20000808 	.word	0x20000808
 800db3c:	42340000 	.word	0x42340000
 800db40:	42d4477b 	.word	0x42d4477b
 800db44:	00000000 	.word	0x00000000
 800db48:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800db4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db50:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db54:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db58:	eef0 2a66 	vmov.f32	s5, s13
 800db5c:	eeb0 2a47 	vmov.f32	s4, s14
 800db60:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800db44 <V90L+0x32c>
 800db64:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800db44 <V90L+0x32c>
 800db68:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800db48 <V90L+0x330>
 800db6c:	eeb0 0a67 	vmov.f32	s0, s15
 800db70:	f7f6 f822 	bl	8003bb8 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800db74:	2303      	movs	r3, #3
 800db76:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800db78:	2300      	movs	r3, #0
 800db7a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800db7c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800db80:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800db84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db90:	edd7 7a01 	vldr	s15, [r7, #4]
 800db94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800db98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db9c:	eef0 7ae7 	vabs.f32	s15, s15
 800dba0:	ee17 0a90 	vmov	r0, s15
 800dba4:	f7f2 fcf8 	bl	8000598 <__aeabi_f2d>
 800dba8:	f04f 0200 	mov.w	r2, #0
 800dbac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dbb0:	f7f2 fe74 	bl	800089c <__aeabi_ddiv>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4614      	mov	r4, r2
 800dbba:	461d      	mov	r5, r3
 800dbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f2 fcea 	bl	8000598 <__aeabi_f2d>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	4620      	mov	r0, r4
 800dbca:	4629      	mov	r1, r5
 800dbcc:	f7f2 fe66 	bl	800089c <__aeabi_ddiv>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	f04f 0200 	mov.w	r2, #0
 800dbdc:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <V90L+0x404>)
 800dbde:	f7f2 fb7d 	bl	80002dc <__adddf3>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	4619      	mov	r1, r3
 800dbea:	f7f3 f805 	bl	8000bf8 <__aeabi_d2f>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	ee02 3a10 	vmov	s4, r3
 800dbf6:	edd7 1a01 	vldr	s3, [r7, #4]
 800dbfa:	ed97 1a01 	vldr	s2, [r7, #4]
 800dbfe:	eef0 0a68 	vmov.f32	s1, s17
 800dc02:	eeb0 0a48 	vmov.f32	s0, s16
 800dc06:	f7f5 f9b1 	bl	8002f6c <straight_table2>
}
 800dc0a:	bf00      	nop
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	ecbd 8b02 	vpop	{d8}
 800dc14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dc18:	b004      	add	sp, #16
 800dc1a:	4770      	bx	lr
 800dc1c:	408f4000 	.word	0x408f4000

0800dc20 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dc20:	b084      	sub	sp, #16
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b086      	sub	sp, #24
 800dc26:	af04      	add	r7, sp, #16
 800dc28:	f107 0c10 	add.w	ip, r7, #16
 800dc2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dc30:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dc34:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d116      	bne.n	800dc6a <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	f7f9 fead 	bl	800799c <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc42:	2003      	movs	r0, #3
 800dc44:	f7f9 feb4 	bl	80079b0 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dc48:	ed97 0a01 	vldr	s0, [r7, #4]
 800dc4c:	f7f9 ff44 	bl	8007ad8 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800dc50:	f7f9 ff2e 	bl	8007ab0 <pl_FunMotor_start>
		HAL_Delay(600);
 800dc54:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dc58:	f009 fe0e 	bl	8017878 <HAL_Delay>
		reset_gyro();
 800dc5c:	f7f3 fd34 	bl	80016c8 <reset_gyro>
		reset_speed();
 800dc60:	f7f3 f9da 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc64:	f7f6 fd9e 	bl	80047a4 <clear_Ierror>
 800dc68:	e00b      	b.n	800dc82 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800dc6a:	2001      	movs	r0, #1
 800dc6c:	f7f9 fe96 	bl	800799c <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc70:	2003      	movs	r0, #3
 800dc72:	f7f9 fe9d 	bl	80079b0 <pl_L_DriveMotor_mode>
		reset_gyro();
 800dc76:	f7f3 fd27 	bl	80016c8 <reset_gyro>
		reset_speed();
 800dc7a:	f7f3 f9cd 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc7e:	f7f6 fd91 	bl	80047a4 <clear_Ierror>

	}
	record_mode=2;
 800dc82:	4ba8      	ldr	r3, [pc, #672]	; (800df24 <testturning+0x304>)
 800dc84:	2202      	movs	r2, #2
 800dc86:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800dc88:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d110      	bne.n	800dcb2 <testturning+0x92>
 800dc90:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc94:	9303      	str	r3, [sp, #12]
 800dc96:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dc9a:	9302      	str	r3, [sp, #8]
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	f107 0318 	add.w	r3, r7, #24
 800dca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcaa:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800df28 <testturning+0x308>
 800dcae:	f7fc f9cb 	bl	800a048 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800dcb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d110      	bne.n	800dcdc <testturning+0xbc>
 800dcba:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcbe:	9303      	str	r3, [sp, #12]
 800dcc0:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dcc4:	9302      	str	r3, [sp, #8]
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	9301      	str	r3, [sp, #4]
 800dcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcd4:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800df28 <testturning+0x308>
 800dcd8:	f7fc fb70 	bl	800a3bc <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800dcdc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d10d      	bne.n	800dd00 <testturning+0xe0>
 800dce4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dce8:	9302      	str	r3, [sp, #8]
 800dcea:	2301      	movs	r3, #1
 800dcec:	9301      	str	r3, [sp, #4]
 800dcee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcf8:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800df28 <testturning+0x308>
 800dcfc:	f7fc fd14 	bl	800a728 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800dd00:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd04:	2b03      	cmp	r3, #3
 800dd06:	d10d      	bne.n	800dd24 <testturning+0x104>
 800dd08:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd0c:	9302      	str	r3, [sp, #8]
 800dd0e:	2301      	movs	r3, #1
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dd1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd1c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800df28 <testturning+0x308>
 800dd20:	f7fc fe6c 	bl	800a9fc <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800dd24:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd28:	2b04      	cmp	r3, #4
 800dd2a:	d10d      	bne.n	800dd48 <testturning+0x128>
 800dd2c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd30:	9302      	str	r3, [sp, #8]
 800dd32:	2301      	movs	r3, #1
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd40:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800df28 <testturning+0x308>
 800dd44:	f7fc ffbe 	bl	800acc4 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800dd48:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd4c:	2b05      	cmp	r3, #5
 800dd4e:	d10e      	bne.n	800dd6e <testturning+0x14e>
 800dd50:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd54:	9302      	str	r3, [sp, #8]
 800dd56:	2301      	movs	r3, #1
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dd64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd66:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800df28 <testturning+0x308>
 800dd6a:	f7fd f915 	bl	800af98 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dd6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd72:	2b06      	cmp	r3, #6
 800dd74:	d10e      	bne.n	800dd94 <testturning+0x174>
 800dd76:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd7a:	9302      	str	r3, [sp, #8]
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	9301      	str	r3, [sp, #4]
 800dd80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dd8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd8c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800df28 <testturning+0x308>
 800dd90:	f7fd fa6a 	bl	800b268 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800dd94:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd98:	2b07      	cmp	r3, #7
 800dd9a:	d10e      	bne.n	800ddba <testturning+0x19a>
 800dd9c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dda0:	9302      	str	r3, [sp, #8]
 800dda2:	2301      	movs	r3, #1
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ddb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddb2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800df28 <testturning+0x308>
 800ddb6:	f7fd fc9f 	bl	800b6f8 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800ddba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddbe:	2b08      	cmp	r3, #8
 800ddc0:	d10e      	bne.n	800dde0 <testturning+0x1c0>
 800ddc2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddc6:	9302      	str	r3, [sp, #8]
 800ddc8:	2301      	movs	r3, #1
 800ddca:	9301      	str	r3, [sp, #4]
 800ddcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ddd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddd8:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800df28 <testturning+0x308>
 800dddc:	f7fd fecc 	bl	800bb78 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800dde0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dde4:	2b09      	cmp	r3, #9
 800dde6:	d10e      	bne.n	800de06 <testturning+0x1e6>
 800dde8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddec:	9302      	str	r3, [sp, #8]
 800ddee:	2301      	movs	r3, #1
 800ddf0:	9301      	str	r3, [sp, #4]
 800ddf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ddfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddfe:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800df28 <testturning+0x308>
 800de02:	f7fe f901 	bl	800c008 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800de06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de0a:	2b0a      	cmp	r3, #10
 800de0c:	d10e      	bne.n	800de2c <testturning+0x20c>
 800de0e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de12:	9302      	str	r3, [sp, #8]
 800de14:	2301      	movs	r3, #1
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800de22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de24:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800df28 <testturning+0x308>
 800de28:	f7fe fb32 	bl	800c490 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800de2c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de30:	2b0b      	cmp	r3, #11
 800de32:	d10e      	bne.n	800de52 <testturning+0x232>
 800de34:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de38:	9302      	str	r3, [sp, #8]
 800de3a:	2301      	movs	r3, #1
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800de48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de4a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800df28 <testturning+0x308>
 800de4e:	f7fe fd11 	bl	800c874 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800de52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de56:	2b0c      	cmp	r3, #12
 800de58:	d10e      	bne.n	800de78 <testturning+0x258>
 800de5a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de5e:	9302      	str	r3, [sp, #8]
 800de60:	2301      	movs	r3, #1
 800de62:	9301      	str	r3, [sp, #4]
 800de64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de70:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800df28 <testturning+0x308>
 800de74:	f7fe fee6 	bl	800cc44 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800de78:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de7c:	2b0d      	cmp	r3, #13
 800de7e:	d10e      	bne.n	800de9e <testturning+0x27e>
 800de80:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de84:	9302      	str	r3, [sp, #8]
 800de86:	2301      	movs	r3, #1
 800de88:	9301      	str	r3, [sp, #4]
 800de8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800de94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de96:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800df28 <testturning+0x308>
 800de9a:	f7ff f8c5 	bl	800d028 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800de9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dea2:	2b0e      	cmp	r3, #14
 800dea4:	d10e      	bne.n	800dec4 <testturning+0x2a4>
 800dea6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800deaa:	9302      	str	r3, [sp, #8]
 800deac:	2301      	movs	r3, #1
 800deae:	9301      	str	r3, [sp, #4]
 800deb0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800deba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800debc:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800df28 <testturning+0x308>
 800dec0:	f7ff fa9e 	bl	800d400 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800dec4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dec8:	2b0f      	cmp	r3, #15
 800deca:	d10e      	bne.n	800deea <testturning+0x2ca>
 800decc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ded0:	9302      	str	r3, [sp, #8]
 800ded2:	2301      	movs	r3, #1
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800dee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dee2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800df28 <testturning+0x308>
 800dee6:	f7ff fc97 	bl	800d818 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800deea:	4b0e      	ldr	r3, [pc, #56]	; (800df24 <testturning+0x304>)
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800def0:	2003      	movs	r0, #3
 800def2:	f7f9 fd85 	bl	8007a00 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800def6:	2003      	movs	r0, #3
 800def8:	f7f9 fd5a 	bl	80079b0 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800defc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df00:	f7fa f87e 	bl	8008000 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800df04:	f7f9 fdde 	bl	8007ac4 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800df08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df0c:	f7fa f878 	bl	8008000 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800df10:	2000      	movs	r0, #0
 800df12:	f7f9 fd43 	bl	800799c <pl_DriveMotor_standby>

}
 800df16:	bf00      	nop
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df20:	b004      	add	sp, #16
 800df22:	4770      	bx	lr
 800df24:	2000d96c 	.word	0x2000d96c
 800df28:	c2c80000 	.word	0xc2c80000

0800df2c <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800df2c:	b480      	push	{r7}
 800df2e:	b085      	sub	sp, #20
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	2b03      	cmp	r3, #3
 800df3e:	d823      	bhi.n	800df88 <update_coordinate+0x5c>
 800df40:	a201      	add	r2, pc, #4	; (adr r2, 800df48 <update_coordinate+0x1c>)
 800df42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df46:	bf00      	nop
 800df48:	0800df59 	.word	0x0800df59
 800df4c:	0800df65 	.word	0x0800df65
 800df50:	0800df71 	.word	0x0800df71
 800df54:	0800df7d 	.word	0x0800df7d
	case 1://北
		*y += 1;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	601a      	str	r2, [r3, #0]
		break;
 800df62:	e011      	b.n	800df88 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	1c5a      	adds	r2, r3, #1
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	601a      	str	r2, [r3, #0]
		break;
 800df6e:	e00b      	b.n	800df88 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	1e5a      	subs	r2, r3, #1
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	601a      	str	r2, [r3, #0]
		break;
 800df7a:	e005      	b.n	800df88 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	1e5a      	subs	r2, r3, #1
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	601a      	str	r2, [r3, #0]
		break;
 800df86:	bf00      	nop
	}



}
 800df88:	bf00      	nop
 800df8a:	3714      	adds	r7, #20
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800df94:	b084      	sub	sp, #16
 800df96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df98:	b091      	sub	sp, #68	; 0x44
 800df9a:	af04      	add	r7, sp, #16
 800df9c:	ed87 0a03 	vstr	s0, [r7, #12]
 800dfa0:	edc7 0a02 	vstr	s1, [r7, #8]
 800dfa4:	ed87 1a01 	vstr	s2, [r7, #4]
 800dfa8:	edc7 1a00 	vstr	s3, [r7]
 800dfac:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800dfb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800dfb4:	4b7d      	ldr	r3, [pc, #500]	; (800e1ac <AdatiWayReturn+0x218>)
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800dfba:	2001      	movs	r0, #1
 800dfbc:	f7f9 fcee 	bl	800799c <pl_DriveMotor_standby>
	HAL_Delay(500);
 800dfc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dfc4:	f009 fc58 	bl	8017878 <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	623b      	str	r3, [r7, #32]
	int y=0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dfe4:	4b72      	ldr	r3, [pc, #456]	; (800e1b0 <AdatiWayReturn+0x21c>)
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	2b95      	cmp	r3, #149	; 0x95
 800dfea:	bfcc      	ite	gt
 800dfec:	2301      	movgt	r3, #1
 800dfee:	2300      	movle	r3, #0
 800dff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dff4:	4b6e      	ldr	r3, [pc, #440]	; (800e1b0 <AdatiWayReturn+0x21c>)
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dffc:	4293      	cmp	r3, r2
 800dffe:	bfcc      	ite	gt
 800e000:	2301      	movgt	r3, #1
 800e002:	2300      	movle	r3, #0
 800e004:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e008:	4b69      	ldr	r3, [pc, #420]	; (800e1b0 <AdatiWayReturn+0x21c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e010:	4293      	cmp	r3, r2
 800e012:	bfcc      	ite	gt
 800e014:	2301      	movgt	r3, #1
 800e016:	2300      	movle	r3, #0
 800e018:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e01c:	6a38      	ldr	r0, [r7, #32]
 800e01e:	69f9      	ldr	r1, [r7, #28]
 800e020:	69ba      	ldr	r2, [r7, #24]
 800e022:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e026:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	4623      	mov	r3, r4
 800e034:	f002 fb7a 	bl	801072c <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800e038:	f005 fde6 	bl	8013c08 <create_StepCountMap_queue>
	HAL_Delay(100);
 800e03c:	2064      	movs	r0, #100	; 0x64
 800e03e:	f009 fc1b 	bl	8017878 <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e042:	6978      	ldr	r0, [r7, #20]
 800e044:	ed97 2a01 	vldr	s4, [r7, #4]
 800e048:	edd7 1a03 	vldr	s3, [r7, #12]
 800e04c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e050:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e1b4 <AdatiWayReturn+0x220>
 800e054:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e1b8 <AdatiWayReturn+0x224>
 800e058:	f7f4 ff88 	bl	8002f6c <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e05c:	69ba      	ldr	r2, [r7, #24]
 800e05e:	f107 011c 	add.w	r1, r7, #28
 800e062:	f107 0320 	add.w	r3, r7, #32
 800e066:	4618      	mov	r0, r3
 800e068:	f7ff ff60 	bl	800df2c <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e06c:	4b50      	ldr	r3, [pc, #320]	; (800e1b0 <AdatiWayReturn+0x21c>)
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	2b95      	cmp	r3, #149	; 0x95
 800e072:	bfcc      	ite	gt
 800e074:	2301      	movgt	r3, #1
 800e076:	2300      	movle	r3, #0
 800e078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e07c:	4b4c      	ldr	r3, [pc, #304]	; (800e1b0 <AdatiWayReturn+0x21c>)
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e084:	4293      	cmp	r3, r2
 800e086:	bfcc      	ite	gt
 800e088:	2301      	movgt	r3, #1
 800e08a:	2300      	movle	r3, #0
 800e08c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e090:	4b47      	ldr	r3, [pc, #284]	; (800e1b0 <AdatiWayReturn+0x21c>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e098:	4293      	cmp	r3, r2
 800e09a:	bfcc      	ite	gt
 800e09c:	2301      	movgt	r3, #1
 800e09e:	2300      	movle	r3, #0
 800e0a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e0b0:	6978      	ldr	r0, [r7, #20]
 800e0b2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e0b6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e0ba:	ed97 1a03 	vldr	s2, [r7, #12]
 800e0be:	edd7 0a03 	vldr	s1, [r7, #12]
 800e0c2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e0c6:	f7f4 ff51 	bl	8002f6c <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e0ca:	6a38      	ldr	r0, [r7, #32]
 800e0cc:	69f9      	ldr	r1, [r7, #28]
 800e0ce:	69ba      	ldr	r2, [r7, #24]
 800e0d0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e0d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	4623      	mov	r3, r4
 800e0e2:	f002 fb23 	bl	801072c <update_wall>
		if(Dijkstra_mode==2){
 800e0e6:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d104      	bne.n	800e0f8 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800e0ee:	f004 feeb 	bl	8012ec8 <route_Dijkstra>
					create_StepCountMap_unknown();
 800e0f2:	f005 fbbd 	bl	8013870 <create_StepCountMap_unknown>
 800e0f6:	e001      	b.n	800e0fc <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800e0f8:	f005 fd86 	bl	8013c08 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	69fa      	ldr	r2, [r7, #28]
 800e100:	69b9      	ldr	r1, [r7, #24]
 800e102:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e106:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e10a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e10e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e112:	9102      	str	r1, [sp, #8]
 800e114:	9201      	str	r2, [sp, #4]
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	4633      	mov	r3, r6
 800e11a:	462a      	mov	r2, r5
 800e11c:	4621      	mov	r1, r4
 800e11e:	f003 f87f 	bl	8011220 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <AdatiWayReturn+0x19a>
 800e12a:	23ff      	movs	r3, #255	; 0xff
 800e12c:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e12e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <AdatiWayReturn+0x1a6>
 800e136:	23ff      	movs	r3, #255	; 0xff
 800e138:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e13a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <AdatiWayReturn+0x1b2>
 800e142:	23ff      	movs	r3, #255	; 0xff
 800e144:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e146:	6a38      	ldr	r0, [r7, #32]
 800e148:	69fc      	ldr	r4, [r7, #28]
 800e14a:	69bd      	ldr	r5, [r7, #24]
 800e14c:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e14e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e150:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e152:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e154:	9102      	str	r1, [sp, #8]
 800e156:	9201      	str	r2, [sp, #4]
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	4633      	mov	r3, r6
 800e15c:	462a      	mov	r2, r5
 800e15e:	4621      	mov	r1, r4
 800e160:	f002 f890 	bl	8010284 <decision_kitiku>
		mode.WallCutMode=1;
 800e164:	2301      	movs	r3, #1
 800e166:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e168:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e16c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e170:	4619      	mov	r1, r3
 800e172:	6978      	ldr	r0, [r7, #20]
 800e174:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e178:	f7f5 fba2 	bl	80038c0 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d103      	bne.n	800e18a <AdatiWayReturn+0x1f6>
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 827c 	beq.w	800e682 <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e18a:	6a3b      	ldr	r3, [r7, #32]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d003      	beq.n	800e198 <AdatiWayReturn+0x204>
 800e190:	6a3b      	ldr	r3, [r7, #32]
 800e192:	2b02      	cmp	r3, #2
 800e194:	f040 810d 	bne.w	800e3b2 <AdatiWayReturn+0x41e>
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f000 809b 	beq.w	800e2d6 <AdatiWayReturn+0x342>
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	f040 8105 	bne.w	800e3b2 <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e1a8:	e095      	b.n	800e2d6 <AdatiWayReturn+0x342>
 800e1aa:	bf00      	nop
 800e1ac:	20000834 	.word	0x20000834
 800e1b0:	20000470 	.word	0x20000470
 800e1b4:	00000000 	.word	0x00000000
 800e1b8:	42830000 	.word	0x42830000
 800e1bc:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e1cc:	6978      	ldr	r0, [r7, #20]
 800e1ce:	ed97 2a01 	vldr	s4, [r7, #4]
 800e1d2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e1d6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e1da:	edd7 0a03 	vldr	s1, [r7, #12]
 800e1de:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e1bc <AdatiWayReturn+0x228>
 800e1e2:	f7f4 fec3 	bl	8002f6c <straight_table2>

				update_coordinate(&x,&y,direction);
 800e1e6:	69ba      	ldr	r2, [r7, #24]
 800e1e8:	f107 011c 	add.w	r1, r7, #28
 800e1ec:	f107 0320 	add.w	r3, r7, #32
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7ff fe9b 	bl	800df2c <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e1f6:	4b7f      	ldr	r3, [pc, #508]	; (800e3f4 <AdatiWayReturn+0x460>)
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	2b95      	cmp	r3, #149	; 0x95
 800e1fc:	bfcc      	ite	gt
 800e1fe:	2301      	movgt	r3, #1
 800e200:	2300      	movle	r3, #0
 800e202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e206:	4b7b      	ldr	r3, [pc, #492]	; (800e3f4 <AdatiWayReturn+0x460>)
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e20e:	4293      	cmp	r3, r2
 800e210:	bfcc      	ite	gt
 800e212:	2301      	movgt	r3, #1
 800e214:	2300      	movle	r3, #0
 800e216:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e21a:	4b76      	ldr	r3, [pc, #472]	; (800e3f4 <AdatiWayReturn+0x460>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e222:	4293      	cmp	r3, r2
 800e224:	bfcc      	ite	gt
 800e226:	2301      	movgt	r3, #1
 800e228:	2300      	movle	r3, #0
 800e22a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e22e:	2301      	movs	r3, #1
 800e230:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e232:	2301      	movs	r3, #1
 800e234:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e236:	2300      	movs	r3, #0
 800e238:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e23a:	6978      	ldr	r0, [r7, #20]
 800e23c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e240:	edd7 1a03 	vldr	s3, [r7, #12]
 800e244:	ed97 1a03 	vldr	s2, [r7, #12]
 800e248:	edd7 0a03 	vldr	s1, [r7, #12]
 800e24c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e250:	f7f4 fe8c 	bl	8002f6c <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e254:	6a38      	ldr	r0, [r7, #32]
 800e256:	69f9      	ldr	r1, [r7, #28]
 800e258:	69ba      	ldr	r2, [r7, #24]
 800e25a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e25e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e262:	9301      	str	r3, [sp, #4]
 800e264:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	4623      	mov	r3, r4
 800e26c:	f002 fa5e 	bl	801072c <update_wall>
				create_StepCountMap_queue();
 800e270:	f005 fcca 	bl	8013c08 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e274:	6a3b      	ldr	r3, [r7, #32]
 800e276:	69fa      	ldr	r2, [r7, #28]
 800e278:	69b9      	ldr	r1, [r7, #24]
 800e27a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e27e:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e282:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e286:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e28a:	9102      	str	r1, [sp, #8]
 800e28c:	9201      	str	r2, [sp, #4]
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	4633      	mov	r3, r6
 800e292:	462a      	mov	r2, r5
 800e294:	4621      	mov	r1, r4
 800e296:	f002 ffc3 	bl	8011220 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e29a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d001      	beq.n	800e2a6 <AdatiWayReturn+0x312>
 800e2a2:	23ff      	movs	r3, #255	; 0xff
 800e2a4:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e2a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d001      	beq.n	800e2b2 <AdatiWayReturn+0x31e>
 800e2ae:	23ff      	movs	r3, #255	; 0xff
 800e2b0:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e2b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <AdatiWayReturn+0x32a>
 800e2ba:	23ff      	movs	r3, #255	; 0xff
 800e2bc:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e2c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e2c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6978      	ldr	r0, [r7, #20]
 800e2ce:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e2d2:	f7f5 faf5 	bl	80038c0 <End_straight>
			while (front_wall==0) {
 800e2d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2da:	f083 0301 	eor.w	r3, r3, #1
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f47f af6d 	bne.w	800e1c0 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2f2:	6978      	ldr	r0, [r7, #20]
 800e2f4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2f8:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2fc:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e420 <AdatiWayReturn+0x48c>
 800e300:	edd7 0a03 	vldr	s1, [r7, #12]
 800e304:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e3f8 <AdatiWayReturn+0x464>
 800e308:	f7f4 fe30 	bl	8002f6c <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e30c:	2003      	movs	r0, #3
 800e30e:	f7f9 fb77 	bl	8007a00 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e312:	2003      	movs	r0, #3
 800e314:	f7f9 fb4c 	bl	80079b0 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e31c:	f7f9 fe70 	bl	8008000 <wait_ms_NoReset>
			no_safty = 1;
 800e320:	4b36      	ldr	r3, [pc, #216]	; (800e3fc <AdatiWayReturn+0x468>)
 800e322:	2201      	movs	r2, #1
 800e324:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e326:	ed97 2a00 	vldr	s4, [r7]
 800e32a:	edd7 1a02 	vldr	s3, [r7, #8]
 800e32e:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e420 <AdatiWayReturn+0x48c>
 800e332:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e420 <AdatiWayReturn+0x48c>
 800e336:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e400 <AdatiWayReturn+0x46c>
 800e33a:	f7f5 fb25 	bl	8003988 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e33e:	2003      	movs	r0, #3
 800e340:	f7f9 fb5e 	bl	8007a00 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e344:	2003      	movs	r0, #3
 800e346:	f7f9 fb33 	bl	80079b0 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e34a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e34e:	f7f9 fe57 	bl	8008000 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e352:	6978      	ldr	r0, [r7, #20]
 800e354:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e404 <AdatiWayReturn+0x470>
 800e358:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e408 <AdatiWayReturn+0x474>
 800e35c:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e420 <AdatiWayReturn+0x48c>
 800e360:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e420 <AdatiWayReturn+0x48c>
 800e364:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e40c <AdatiWayReturn+0x478>
 800e368:	f7f4 fe00 	bl	8002f6c <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e36c:	2003      	movs	r0, #3
 800e36e:	f7f9 fb47 	bl	8007a00 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e372:	2003      	movs	r0, #3
 800e374:	f7f9 fb1c 	bl	80079b0 <pl_L_DriveMotor_mode>
			no_safty = 0;
 800e378:	4b20      	ldr	r3, [pc, #128]	; (800e3fc <AdatiWayReturn+0x468>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	701a      	strb	r2, [r3, #0]
			wait_ms_NoReset(500);
 800e37e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e382:	f7f9 fe3d 	bl	8008000 <wait_ms_NoReset>
			clear_Ierror();
 800e386:	f7f6 fa0d 	bl	80047a4 <clear_Ierror>
			maze_mode = 0;
 800e38a:	4b21      	ldr	r3, [pc, #132]	; (800e410 <AdatiWayReturn+0x47c>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	3302      	adds	r3, #2
 800e394:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	2b04      	cmp	r3, #4
 800e39a:	dd02      	ble.n	800e3a2 <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	3b04      	subs	r3, #4
 800e3a0:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f300 816e 	bgt.w	800e686 <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e3b0:	e169      	b.n	800e686 <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e3b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d102      	bne.n	800e3c0 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e3ba:	4b16      	ldr	r3, [pc, #88]	; (800e414 <AdatiWayReturn+0x480>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e3c0:	4b14      	ldr	r3, [pc, #80]	; (800e414 <AdatiWayReturn+0x480>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	f040 80f8 	bne.w	800e5ba <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e3ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3cc:	2bff      	cmp	r3, #255	; 0xff
 800e3ce:	d12b      	bne.n	800e428 <AdatiWayReturn+0x494>
 800e3d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3d2:	2bff      	cmp	r3, #255	; 0xff
 800e3d4:	d128      	bne.n	800e428 <AdatiWayReturn+0x494>
 800e3d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3d8:	2bff      	cmp	r3, #255	; 0xff
 800e3da:	d125      	bne.n	800e428 <AdatiWayReturn+0x494>
 800e3dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3de:	2bff      	cmp	r3, #255	; 0xff
 800e3e0:	d122      	bne.n	800e428 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e3e2:	4b0d      	ldr	r3, [pc, #52]	; (800e418 <AdatiWayReturn+0x484>)
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e3e8:	f7f9 fb3e 	bl	8007a68 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	f7f9 fad5 	bl	800799c <pl_DriveMotor_standby>

				break;
 800e3f2:	e14b      	b.n	800e68c <AdatiWayReturn+0x6f8>
 800e3f4:	20000470 	.word	0x20000470
 800e3f8:	42140000 	.word	0x42140000
 800e3fc:	20000806 	.word	0x20000806
 800e400:	43340000 	.word	0x43340000
 800e404:	447a0000 	.word	0x447a0000
 800e408:	c3160000 	.word	0xc3160000
 800e40c:	c1f40000 	.word	0xc1f40000
 800e410:	20000834 	.word	0x20000834
 800e414:	20000838 	.word	0x20000838
 800e418:	20000807 	.word	0x20000807
 800e41c:	42a40000 	.word	0x42a40000
 800e420:	00000000 	.word	0x00000000
 800e424:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e428:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e42a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d81a      	bhi.n	800e466 <AdatiWayReturn+0x4d2>
 800e430:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e434:	429a      	cmp	r2, r3
 800e436:	d816      	bhi.n	800e466 <AdatiWayReturn+0x4d2>
 800e438:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e43a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d812      	bhi.n	800e466 <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e440:	2301      	movs	r3, #1
 800e442:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e444:	2300      	movs	r3, #0
 800e446:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e448:	2300      	movs	r3, #0
 800e44a:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e44c:	6978      	ldr	r0, [r7, #20]
 800e44e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e452:	edd7 1a03 	vldr	s3, [r7, #12]
 800e456:	ed97 1a03 	vldr	s2, [r7, #12]
 800e45a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e45e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e41c <AdatiWayReturn+0x488>
 800e462:	f7f4 fd83 	bl	8002f6c <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e466:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e468:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d219      	bcs.n	800e4a2 <AdatiWayReturn+0x50e>
 800e46e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e472:	429a      	cmp	r2, r3
 800e474:	d815      	bhi.n	800e4a2 <AdatiWayReturn+0x50e>
 800e476:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d811      	bhi.n	800e4a2 <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e47e:	2300      	movs	r3, #0
 800e480:	9303      	str	r3, [sp, #12]
 800e482:	2300      	movs	r3, #0
 800e484:	9302      	str	r3, [sp, #8]
 800e486:	2300      	movs	r3, #0
 800e488:	9301      	str	r3, [sp, #4]
 800e48a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e48c:	9300      	str	r3, [sp, #0]
 800e48e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e494:	ed97 0a03 	vldr	s0, [r7, #12]
 800e498:	f7fb fdd6 	bl	800a048 <slalomR>
				direction++;
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e4a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d219      	bcs.n	800e4de <AdatiWayReturn+0x54a>
 800e4aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d215      	bcs.n	800e4de <AdatiWayReturn+0x54a>
 800e4b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d811      	bhi.n	800e4de <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	9303      	str	r3, [sp, #12]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	9302      	str	r3, [sp, #8]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9301      	str	r3, [sp, #4]
 800e4c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4d0:	ed97 0a03 	vldr	s0, [r7, #12]
 800e4d4:	f7fb ff72 	bl	800a3bc <slalomL>
				direction--;
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e4de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	f080 80ac 	bcs.w	800e640 <AdatiWayReturn+0x6ac>
 800e4e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	f080 80a7 	bcs.w	800e640 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e4f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	f080 80a2 	bcs.w	800e640 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e500:	2300      	movs	r3, #0
 800e502:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e504:	2300      	movs	r3, #0
 800e506:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e508:	6978      	ldr	r0, [r7, #20]
 800e50a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e50e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e512:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e420 <AdatiWayReturn+0x48c>
 800e516:	edd7 0a03 	vldr	s1, [r7, #12]
 800e51a:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e424 <AdatiWayReturn+0x490>
 800e51e:	f7f4 fd25 	bl	8002f6c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e522:	2003      	movs	r0, #3
 800e524:	f7f9 fa6c 	bl	8007a00 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e528:	2003      	movs	r0, #3
 800e52a:	f7f9 fa41 	bl	80079b0 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e52e:	2064      	movs	r0, #100	; 0x64
 800e530:	f7f9 fd66 	bl	8008000 <wait_ms_NoReset>
				no_safty = 1;
 800e534:	4b8a      	ldr	r3, [pc, #552]	; (800e760 <AdatiWayReturn+0x7cc>)
 800e536:	2201      	movs	r2, #1
 800e538:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e53a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e53e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e546:	4618      	mov	r0, r3
 800e548:	edd7 0a00 	vldr	s1, [r7]
 800e54c:	ed97 0a02 	vldr	s0, [r7, #8]
 800e550:	f7fb fcb0 	bl	8009eb4 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				no_safty = 0;
 800e554:	4b82      	ldr	r3, [pc, #520]	; (800e760 <AdatiWayReturn+0x7cc>)
 800e556:	2200      	movs	r2, #0
 800e558:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(100);
 800e55a:	2064      	movs	r0, #100	; 0x64
 800e55c:	f7f9 fd50 	bl	8008000 <wait_ms_NoReset>
				//clear_Ierror();
				mode.WallControlMode=0;
 800e560:	2300      	movs	r3, #0
 800e562:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e564:	6978      	ldr	r0, [r7, #20]
 800e566:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 800e764 <AdatiWayReturn+0x7d0>
 800e56a:	eddf 1a7f 	vldr	s3, [pc, #508]	; 800e768 <AdatiWayReturn+0x7d4>
 800e56e:	ed9f 1a88 	vldr	s2, [pc, #544]	; 800e790 <AdatiWayReturn+0x7fc>
 800e572:	eddf 0a87 	vldr	s1, [pc, #540]	; 800e790 <AdatiWayReturn+0x7fc>
 800e576:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e76c <AdatiWayReturn+0x7d8>
 800e57a:	f7f4 fcf7 	bl	8002f6c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e57e:	2003      	movs	r0, #3
 800e580:	f7f9 fa3e 	bl	8007a00 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e584:	2003      	movs	r0, #3
 800e586:	f7f9 fa13 	bl	80079b0 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e58a:	2064      	movs	r0, #100	; 0x64
 800e58c:	f7f9 fd38 	bl	8008000 <wait_ms_NoReset>
				clear_Ierror();
 800e590:	f7f6 f908 	bl	80047a4 <clear_Ierror>
				mode.WallControlMode=1;
 800e594:	2301      	movs	r3, #1
 800e596:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e598:	6978      	ldr	r0, [r7, #20]
 800e59a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e59e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5a2:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5a6:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800e790 <AdatiWayReturn+0x7fc>
 800e5aa:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800e770 <AdatiWayReturn+0x7dc>
 800e5ae:	f7f4 fcdd 	bl	8002f6c <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	3302      	adds	r3, #2
 800e5b6:	61bb      	str	r3, [r7, #24]
 800e5b8:	e042      	b.n	800e640 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e5c6:	6978      	ldr	r0, [r7, #20]
 800e5c8:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5cc:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5d0:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5d4:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5d8:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800e794 <AdatiWayReturn+0x800>
 800e5dc:	f7f4 fcc6 	bl	8002f6c <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e5e0:	f107 0218 	add.w	r2, r7, #24
 800e5e4:	f107 011c 	add.w	r1, r7, #28
 800e5e8:	f107 0320 	add.w	r3, r7, #32
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f001 febb 	bl	8010368 <compress_kitiku>
			mode.WallCutMode=0;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	2101      	movs	r1, #1
 800e5fa:	6978      	ldr	r0, [r7, #20]
 800e5fc:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800e794 <AdatiWayReturn+0x800>
 800e600:	f7f5 f95e 	bl	80038c0 <End_straight>
			mode.WallControlMode=1;
 800e604:	2301      	movs	r3, #1
 800e606:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e608:	2300      	movs	r3, #0
 800e60a:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e610:	4b58      	ldr	r3, [pc, #352]	; (800e774 <AdatiWayReturn+0x7e0>)
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	4613      	mov	r3, r2
 800e616:	005b      	lsls	r3, r3, #1
 800e618:	4413      	add	r3, r2
 800e61a:	011a      	lsls	r2, r3, #4
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	ee07 3a90 	vmov	s15, r3
 800e622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e626:	6978      	ldr	r0, [r7, #20]
 800e628:	ed97 2a01 	vldr	s4, [r7, #4]
 800e62c:	eddf 1a52 	vldr	s3, [pc, #328]	; 800e778 <AdatiWayReturn+0x7e4>
 800e630:	ed97 1a03 	vldr	s2, [r7, #12]
 800e634:	edd7 0a03 	vldr	s1, [r7, #12]
 800e638:	eeb0 0a67 	vmov.f32	s0, s15
 800e63c:	f7f4 fc96 	bl	8002f6c <straight_table2>

		}

		if (direction >= 5) {
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	2b04      	cmp	r3, #4
 800e644:	dd02      	ble.n	800e64c <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	3b04      	subs	r3, #4
 800e64a:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	dc02      	bgt.n	800e658 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	3304      	adds	r3, #4
 800e656:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e658:	4b48      	ldr	r3, [pc, #288]	; (800e77c <AdatiWayReturn+0x7e8>)
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d014      	beq.n	800e68a <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e660:	4b47      	ldr	r3, [pc, #284]	; (800e780 <AdatiWayReturn+0x7ec>)
 800e662:	edd3 7a00 	vldr	s15, [r3]
 800e666:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e784 <AdatiWayReturn+0x7f0>
 800e66a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e672:	dd05      	ble.n	800e680 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e674:	f7f9 f9f8 	bl	8007a68 <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e678:	2000      	movs	r0, #0
 800e67a:	f7f9 f98f 	bl	800799c <pl_DriveMotor_standby>
						break;
 800e67e:	e005      	b.n	800e68c <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800e680:	e4ec      	b.n	800e05c <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800e682:	bf00      	nop
 800e684:	e002      	b.n	800e68c <AdatiWayReturn+0x6f8>
			break;
 800e686:	bf00      	nop
 800e688:	e000      	b.n	800e68c <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800e68a:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e68c:	4b3b      	ldr	r3, [pc, #236]	; (800e77c <AdatiWayReturn+0x7e8>)
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d101      	bne.n	800e698 <AdatiWayReturn+0x704>
	record_in();
 800e694:	f7f8 fe90 	bl	80073b8 <record_in>
	}
	create_DijkstraMap();
 800e698:	f002 feea 	bl	8011470 <create_DijkstraMap>
	clear_Ierror();
 800e69c:	f7f6 f882 	bl	80047a4 <clear_Ierror>
	reset_gyro();
 800e6a0:	f7f3 f812 	bl	80016c8 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e6a4:	4b38      	ldr	r3, [pc, #224]	; (800e788 <AdatiWayReturn+0x7f4>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e6aa:	6978      	ldr	r0, [r7, #20]
 800e6ac:	ed97 2a01 	vldr	s4, [r7, #4]
 800e6b0:	edd7 1a03 	vldr	s3, [r7, #12]
 800e6b4:	ed97 1a03 	vldr	s2, [r7, #12]
 800e6b8:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e790 <AdatiWayReturn+0x7fc>
 800e6bc:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e770 <AdatiWayReturn+0x7dc>
 800e6c0:	f7f4 fc54 	bl	8002f6c <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e6c4:	69ba      	ldr	r2, [r7, #24]
 800e6c6:	f107 011c 	add.w	r1, r7, #28
 800e6ca:	f107 0320 	add.w	r3, r7, #32
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fc2c 	bl	800df2c <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e6d4:	4b2d      	ldr	r3, [pc, #180]	; (800e78c <AdatiWayReturn+0x7f8>)
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	2b95      	cmp	r3, #149	; 0x95
 800e6da:	bfcc      	ite	gt
 800e6dc:	2301      	movgt	r3, #1
 800e6de:	2300      	movle	r3, #0
 800e6e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e6e4:	4b29      	ldr	r3, [pc, #164]	; (800e78c <AdatiWayReturn+0x7f8>)
 800e6e6:	691b      	ldr	r3, [r3, #16]
 800e6e8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	bfcc      	ite	gt
 800e6f0:	2301      	movgt	r3, #1
 800e6f2:	2300      	movle	r3, #0
 800e6f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e6f8:	4b24      	ldr	r3, [pc, #144]	; (800e78c <AdatiWayReturn+0x7f8>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e700:	4293      	cmp	r3, r2
 800e702:	bfcc      	ite	gt
 800e704:	2301      	movgt	r3, #1
 800e706:	2300      	movle	r3, #0
 800e708:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e70c:	2301      	movs	r3, #1
 800e70e:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e710:	2301      	movs	r3, #1
 800e712:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e714:	2300      	movs	r3, #0
 800e716:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e718:	6978      	ldr	r0, [r7, #20]
 800e71a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e71e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e722:	ed97 1a03 	vldr	s2, [r7, #12]
 800e726:	edd7 0a03 	vldr	s1, [r7, #12]
 800e72a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e72e:	f7f4 fc1d 	bl	8002f6c <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e732:	6a38      	ldr	r0, [r7, #32]
 800e734:	69f9      	ldr	r1, [r7, #28]
 800e736:	69ba      	ldr	r2, [r7, #24]
 800e738:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e73c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	4623      	mov	r3, r4
 800e74a:	f001 ffef 	bl	801072c <update_wall>
		if(Dijkstra_mode==1){
 800e74e:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e752:	2b01      	cmp	r3, #1
 800e754:	d120      	bne.n	800e798 <AdatiWayReturn+0x804>
			route_Dijkstra();//ダイクストラ法のマップを作成
 800e756:	f004 fbb7 	bl	8012ec8 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e75a:	f005 f889 	bl	8013870 <create_StepCountMap_unknown>
 800e75e:	e01d      	b.n	800e79c <AdatiWayReturn+0x808>
 800e760:	20000806 	.word	0x20000806
 800e764:	447a0000 	.word	0x447a0000
 800e768:	c3160000 	.word	0xc3160000
 800e76c:	c1a40000 	.word	0xc1a40000
 800e770:	42830000 	.word	0x42830000
 800e774:	2000082c 	.word	0x2000082c
 800e778:	44610000 	.word	0x44610000
 800e77c:	20000807 	.word	0x20000807
 800e780:	2000072c 	.word	0x2000072c
 800e784:	43700000 	.word	0x43700000
 800e788:	20000834 	.word	0x20000834
 800e78c:	20000470 	.word	0x20000470
 800e790:	00000000 	.word	0x00000000
 800e794:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e798:	f005 fbec 	bl	8013f74 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	69b9      	ldr	r1, [r7, #24]
 800e7a2:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e7a6:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e7aa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e7ae:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e7b2:	9102      	str	r1, [sp, #8]
 800e7b4:	9201      	str	r2, [sp, #4]
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	4633      	mov	r3, r6
 800e7ba:	462a      	mov	r2, r5
 800e7bc:	4621      	mov	r1, r4
 800e7be:	f002 fd2f 	bl	8011220 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e7c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <AdatiWayReturn+0x83a>
 800e7ca:	23ff      	movs	r3, #255	; 0xff
 800e7cc:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e7ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d001      	beq.n	800e7da <AdatiWayReturn+0x846>
 800e7d6:	23ff      	movs	r3, #255	; 0xff
 800e7d8:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e7da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d001      	beq.n	800e7e6 <AdatiWayReturn+0x852>
 800e7e2:	23ff      	movs	r3, #255	; 0xff
 800e7e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e7e6:	6a38      	ldr	r0, [r7, #32]
 800e7e8:	69fc      	ldr	r4, [r7, #28]
 800e7ea:	69bd      	ldr	r5, [r7, #24]
 800e7ec:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e7ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7f2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e7f4:	9102      	str	r1, [sp, #8]
 800e7f6:	9201      	str	r2, [sp, #4]
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	4633      	mov	r3, r6
 800e7fc:	462a      	mov	r2, r5
 800e7fe:	4621      	mov	r1, r4
 800e800:	f001 fd40 	bl	8010284 <decision_kitiku>
		mode.WallCutMode=1;
 800e804:	2301      	movs	r3, #1
 800e806:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e808:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e80c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e810:	4619      	mov	r1, r3
 800e812:	6978      	ldr	r0, [r7, #20]
 800e814:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e818:	f7f5 f852 	bl	80038c0 <End_straight>


			if(x == 0 && y == 0) {
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d165      	bne.n	800e8ee <AdatiWayReturn+0x95a>
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d162      	bne.n	800e8ee <AdatiWayReturn+0x95a>

				mode.WallControlMode=0;
 800e828:	2300      	movs	r3, #0
 800e82a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e830:	2300      	movs	r3, #0
 800e832:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e834:	6978      	ldr	r0, [r7, #20]
 800e836:	ed97 2a01 	vldr	s4, [r7, #4]
 800e83a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e83e:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e790 <AdatiWayReturn+0x7fc>
 800e842:	edd7 0a03 	vldr	s1, [r7, #12]
 800e846:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e794 <AdatiWayReturn+0x800>
 800e84a:	f7f4 fb8f 	bl	8002f6c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e84e:	2003      	movs	r0, #3
 800e850:	f7f9 f8d6 	bl	8007a00 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e854:	2003      	movs	r0, #3
 800e856:	f7f9 f8ab 	bl	80079b0 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e85a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e85e:	f7f9 fbcf 	bl	8008000 <wait_ms_NoReset>
				no_safty = 1;
 800e862:	4bb2      	ldr	r3, [pc, #712]	; (800eb2c <AdatiWayReturn+0xb98>)
 800e864:	2201      	movs	r2, #1
 800e866:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e868:	ed97 2a00 	vldr	s4, [r7]
 800e86c:	edd7 1a02 	vldr	s3, [r7, #8]
 800e870:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 800eb30 <AdatiWayReturn+0xb9c>
 800e874:	eddf 0aae 	vldr	s1, [pc, #696]	; 800eb30 <AdatiWayReturn+0xb9c>
 800e878:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800eb34 <AdatiWayReturn+0xba0>
 800e87c:	f7f5 f884 	bl	8003988 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e880:	2003      	movs	r0, #3
 800e882:	f7f9 f8bd 	bl	8007a00 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e886:	2003      	movs	r0, #3
 800e888:	f7f9 f892 	bl	80079b0 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e88c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e890:	f7f9 fbb6 	bl	8008000 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e894:	6978      	ldr	r0, [r7, #20]
 800e896:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 800eb38 <AdatiWayReturn+0xba4>
 800e89a:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800eb3c <AdatiWayReturn+0xba8>
 800e89e:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 800eb30 <AdatiWayReturn+0xb9c>
 800e8a2:	eddf 0aa3 	vldr	s1, [pc, #652]	; 800eb30 <AdatiWayReturn+0xb9c>
 800e8a6:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e8aa:	f7f4 fb5f 	bl	8002f6c <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8ae:	2003      	movs	r0, #3
 800e8b0:	f7f9 f8a6 	bl	8007a00 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e8b4:	2003      	movs	r0, #3
 800e8b6:	f7f9 f87b 	bl	80079b0 <pl_L_DriveMotor_mode>
				no_safty = 0;
 800e8ba:	4b9c      	ldr	r3, [pc, #624]	; (800eb2c <AdatiWayReturn+0xb98>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(500);
 800e8c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e8c4:	f7f9 fb9c 	bl	8008000 <wait_ms_NoReset>
				clear_Ierror();
 800e8c8:	f7f5 ff6c 	bl	80047a4 <clear_Ierror>

				direction = direction + 2;
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	3302      	adds	r3, #2
 800e8d0:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	2b04      	cmp	r3, #4
 800e8d6:	dd02      	ble.n	800e8de <AdatiWayReturn+0x94a>
					direction = direction-4;
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	3b04      	subs	r3, #4
 800e8dc:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f300 81aa 	bgt.w	800ec3a <AdatiWayReturn+0xca6>
					direction = direction+4;
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e8ec:	e1a5      	b.n	800ec3a <AdatiWayReturn+0xca6>
			}

			if(know_mode==0){
 800e8ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d102      	bne.n	800e8fc <AdatiWayReturn+0x968>
				kitikukan = 0;
 800e8f6:	4b92      	ldr	r3, [pc, #584]	; (800eb40 <AdatiWayReturn+0xbac>)
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	601a      	str	r2, [r3, #0]
			}
			if (kitikukan == OFF) {
 800e8fc:	4b90      	ldr	r3, [pc, #576]	; (800eb40 <AdatiWayReturn+0xbac>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	f040 8146 	bne.w	800eb92 <AdatiWayReturn+0xbfe>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e906:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e908:	2bff      	cmp	r3, #255	; 0xff
 800e90a:	d10c      	bne.n	800e926 <AdatiWayReturn+0x992>
 800e90c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e90e:	2bff      	cmp	r3, #255	; 0xff
 800e910:	d109      	bne.n	800e926 <AdatiWayReturn+0x992>
 800e912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e914:	2bff      	cmp	r3, #255	; 0xff
 800e916:	d106      	bne.n	800e926 <AdatiWayReturn+0x992>
 800e918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e91a:	2bff      	cmp	r3, #255	; 0xff
 800e91c:	d103      	bne.n	800e926 <AdatiWayReturn+0x992>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800e91e:	4b89      	ldr	r3, [pc, #548]	; (800eb44 <AdatiWayReturn+0xbb0>)
 800e920:	2201      	movs	r2, #1
 800e922:	701a      	strb	r2, [r3, #0]
					break;
 800e924:	e18c      	b.n	800ec40 <AdatiWayReturn+0xcac>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800e926:	6a3b      	ldr	r3, [r7, #32]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	db08      	blt.n	800e93e <AdatiWayReturn+0x9aa>
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	db05      	blt.n	800e93e <AdatiWayReturn+0x9aa>
 800e932:	6a3b      	ldr	r3, [r7, #32]
 800e934:	2b0f      	cmp	r3, #15
 800e936:	dc02      	bgt.n	800e93e <AdatiWayReturn+0x9aa>
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	2b0f      	cmp	r3, #15
 800e93c:	dd03      	ble.n	800e946 <AdatiWayReturn+0x9b2>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800e93e:	4b81      	ldr	r3, [pc, #516]	; (800eb44 <AdatiWayReturn+0xbb0>)
 800e940:	2201      	movs	r2, #1
 800e942:	701a      	strb	r2, [r3, #0]
									break;
 800e944:	e17c      	b.n	800ec40 <AdatiWayReturn+0xcac>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e946:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e948:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d81a      	bhi.n	800e984 <AdatiWayReturn+0x9f0>
 800e94e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e952:	429a      	cmp	r2, r3
 800e954:	d816      	bhi.n	800e984 <AdatiWayReturn+0x9f0>
 800e956:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d812      	bhi.n	800e984 <AdatiWayReturn+0x9f0>
					// 直進
					mode.WallControlMode=1;
 800e95e:	2301      	movs	r3, #1
 800e960:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800e962:	2300      	movs	r3, #0
 800e964:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800e966:	2300      	movs	r3, #0
 800e968:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e96a:	6978      	ldr	r0, [r7, #20]
 800e96c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e970:	edd7 1a03 	vldr	s3, [r7, #12]
 800e974:	ed97 1a03 	vldr	s2, [r7, #12]
 800e978:	edd7 0a03 	vldr	s1, [r7, #12]
 800e97c:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800eb48 <AdatiWayReturn+0xbb4>
 800e980:	f7f4 faf4 	bl	8002f6c <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e984:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e986:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e988:	429a      	cmp	r2, r3
 800e98a:	d22c      	bcs.n	800e9e6 <AdatiWayReturn+0xa52>
 800e98c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e98e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e990:	429a      	cmp	r2, r3
 800e992:	d828      	bhi.n	800e9e6 <AdatiWayReturn+0xa52>
 800e994:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e998:	429a      	cmp	r2, r3
 800e99a:	d824      	bhi.n	800e9e6 <AdatiWayReturn+0xa52>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d002      	beq.n	800e9a8 <AdatiWayReturn+0xa14>
 800e9a2:	6a3b      	ldr	r3, [r7, #32]
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d109      	bne.n	800e9bc <AdatiWayReturn+0xa28>
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <AdatiWayReturn+0xa20>
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d103      	bne.n	800e9bc <AdatiWayReturn+0xa28>
						noGoalPillarMode=1;
 800e9b4:	4b65      	ldr	r3, [pc, #404]	; (800eb4c <AdatiWayReturn+0xbb8>)
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	701a      	strb	r2, [r3, #0]
 800e9ba:	e002      	b.n	800e9c2 <AdatiWayReturn+0xa2e>
					}else{
						noGoalPillarMode=0;
 800e9bc:	4b63      	ldr	r3, [pc, #396]	; (800eb4c <AdatiWayReturn+0xbb8>)
 800e9be:	2200      	movs	r2, #0
 800e9c0:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e9c2:	4b63      	ldr	r3, [pc, #396]	; (800eb50 <AdatiWayReturn+0xbbc>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	9203      	str	r2, [sp, #12]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	9202      	str	r2, [sp, #8]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	9201      	str	r2, [sp, #4]
 800e9d0:	699a      	ldr	r2, [r3, #24]
 800e9d2:	9200      	str	r2, [sp, #0]
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9d8:	ed97 0a03 	vldr	s0, [r7, #12]
 800e9dc:	f7fb fb34 	bl	800a048 <slalomR>
					direction++;
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e9e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d22c      	bcs.n	800ea48 <AdatiWayReturn+0xab4>
 800e9ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d228      	bcs.n	800ea48 <AdatiWayReturn+0xab4>
 800e9f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d824      	bhi.n	800ea48 <AdatiWayReturn+0xab4>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d002      	beq.n	800ea0a <AdatiWayReturn+0xa76>
 800ea04:	6a3b      	ldr	r3, [r7, #32]
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	d109      	bne.n	800ea1e <AdatiWayReturn+0xa8a>
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d002      	beq.n	800ea16 <AdatiWayReturn+0xa82>
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d103      	bne.n	800ea1e <AdatiWayReturn+0xa8a>
						noGoalPillarMode=1;
 800ea16:	4b4d      	ldr	r3, [pc, #308]	; (800eb4c <AdatiWayReturn+0xbb8>)
 800ea18:	2201      	movs	r2, #1
 800ea1a:	701a      	strb	r2, [r3, #0]
 800ea1c:	e002      	b.n	800ea24 <AdatiWayReturn+0xa90>
					}else{
						noGoalPillarMode=0;
 800ea1e:	4b4b      	ldr	r3, [pc, #300]	; (800eb4c <AdatiWayReturn+0xbb8>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800ea24:	4b4a      	ldr	r3, [pc, #296]	; (800eb50 <AdatiWayReturn+0xbbc>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	9203      	str	r2, [sp, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	9202      	str	r2, [sp, #8]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	9201      	str	r2, [sp, #4]
 800ea32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea34:	9200      	str	r2, [sp, #0]
 800ea36:	331c      	adds	r3, #28
 800ea38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea3a:	ed97 0a03 	vldr	s0, [r7, #12]
 800ea3e:	f7fb fcbd 	bl	800a3bc <slalomL>
					direction--;
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800ea48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	f080 80e3 	bcs.w	800ec18 <AdatiWayReturn+0xc84>
 800ea52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea56:	429a      	cmp	r2, r3
 800ea58:	f080 80de 	bcs.w	800ec18 <AdatiWayReturn+0xc84>
						&& back_count < left_count){
 800ea5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea60:	429a      	cmp	r2, r3
 800ea62:	f080 80d9 	bcs.w	800ec18 <AdatiWayReturn+0xc84>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800ea66:	2301      	movs	r3, #1
 800ea68:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea72:	6978      	ldr	r0, [r7, #20]
 800ea74:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea78:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea7c:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800eb30 <AdatiWayReturn+0xb9c>
 800ea80:	edd7 0a03 	vldr	s1, [r7, #12]
 800ea84:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800eb64 <AdatiWayReturn+0xbd0>
 800ea88:	f7f4 fa70 	bl	8002f6c <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea8c:	2003      	movs	r0, #3
 800ea8e:	f7f8 ffb7 	bl	8007a00 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea92:	2003      	movs	r0, #3
 800ea94:	f7f8 ff8c 	bl	80079b0 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ea98:	2064      	movs	r0, #100	; 0x64
 800ea9a:	f7f9 fab1 	bl	8008000 <wait_ms_NoReset>
					no_safty = 1;
 800ea9e:	4b23      	ldr	r3, [pc, #140]	; (800eb2c <AdatiWayReturn+0xb98>)
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800eaa4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800eaa8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800eaac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eab0:	4618      	mov	r0, r3
 800eab2:	edd7 0a00 	vldr	s1, [r7]
 800eab6:	ed97 0a02 	vldr	s0, [r7, #8]
 800eaba:	f7fb f9fb 	bl	8009eb4 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					no_safty = 0;
 800eabe:	4b1b      	ldr	r3, [pc, #108]	; (800eb2c <AdatiWayReturn+0xb98>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	701a      	strb	r2, [r3, #0]
					wait_ms_NoReset(100);
 800eac4:	2064      	movs	r0, #100	; 0x64
 800eac6:	f7f9 fa9b 	bl	8008000 <wait_ms_NoReset>
					create_DijkstraMap();
 800eaca:	f002 fcd1 	bl	8011470 <create_DijkstraMap>
					//clear_Ierror();
					mode.WallControlMode=0;
 800eace:	2300      	movs	r3, #0
 800ead0:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ead2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d046      	beq.n	800eb68 <AdatiWayReturn+0xbd4>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800eada:	6978      	ldr	r0, [r7, #20]
 800eadc:	ed9f 2a16 	vldr	s4, [pc, #88]	; 800eb38 <AdatiWayReturn+0xba4>
 800eae0:	eddf 1a16 	vldr	s3, [pc, #88]	; 800eb3c <AdatiWayReturn+0xba8>
 800eae4:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800eb30 <AdatiWayReturn+0xb9c>
 800eae8:	eddf 0a11 	vldr	s1, [pc, #68]	; 800eb30 <AdatiWayReturn+0xb9c>
 800eaec:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800eb54 <AdatiWayReturn+0xbc0>
 800eaf0:	f7f4 fa3c 	bl	8002f6c <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eaf4:	2003      	movs	r0, #3
 800eaf6:	f7f8 ff83 	bl	8007a00 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eafa:	2003      	movs	r0, #3
 800eafc:	f7f8 ff58 	bl	80079b0 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800eb00:	2064      	movs	r0, #100	; 0x64
 800eb02:	f7f9 fa7d 	bl	8008000 <wait_ms_NoReset>

					clear_Ierror();
 800eb06:	f7f5 fe4d 	bl	80047a4 <clear_Ierror>
					mode.WallControlMode=1;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb0e:	6978      	ldr	r0, [r7, #20]
 800eb10:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb14:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb18:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb1c:	eddf 0a04 	vldr	s1, [pc, #16]	; 800eb30 <AdatiWayReturn+0xb9c>
 800eb20:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800eb58 <AdatiWayReturn+0xbc4>
 800eb24:	f7f4 fa22 	bl	8002f6c <straight_table2>
 800eb28:	e02f      	b.n	800eb8a <AdatiWayReturn+0xbf6>
 800eb2a:	bf00      	nop
 800eb2c:	20000806 	.word	0x20000806
 800eb30:	00000000 	.word	0x00000000
 800eb34:	43340000 	.word	0x43340000
 800eb38:	447a0000 	.word	0x447a0000
 800eb3c:	c3160000 	.word	0xc3160000
 800eb40:	20000838 	.word	0x20000838
 800eb44:	20000807 	.word	0x20000807
 800eb48:	42a40000 	.word	0x42a40000
 800eb4c:	20000529 	.word	0x20000529
 800eb50:	2000db2c 	.word	0x2000db2c
 800eb54:	c1a40000 	.word	0xc1a40000
 800eb58:	42830000 	.word	0x42830000
 800eb5c:	00000000 	.word	0x00000000
 800eb60:	42b40000 	.word	0x42b40000
 800eb64:	42140000 	.word	0x42140000
					}else{
						clear_Ierror();
 800eb68:	f7f5 fe1c 	bl	80047a4 <clear_Ierror>
						mode.WallControlMode=1;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	753b      	strb	r3, [r7, #20]
						straight_table2(90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb70:	6978      	ldr	r0, [r7, #20]
 800eb72:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb76:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb7a:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb7e:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800eb5c <AdatiWayReturn+0xbc8>
 800eb82:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800eb60 <AdatiWayReturn+0xbcc>
 800eb86:	f7f4 f9f1 	bl	8002f6c <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	3302      	adds	r3, #2
 800eb8e:	61bb      	str	r3, [r7, #24]
 800eb90:	e042      	b.n	800ec18 <AdatiWayReturn+0xc84>

				}

			} else {
				mode.WallControlMode=1;
 800eb92:	2301      	movs	r3, #1
 800eb94:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800eb96:	2301      	movs	r3, #1
 800eb98:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb9e:	6978      	ldr	r0, [r7, #20]
 800eba0:	ed97 2a01 	vldr	s4, [r7, #4]
 800eba4:	edd7 1a03 	vldr	s3, [r7, #12]
 800eba8:	ed97 1a03 	vldr	s2, [r7, #12]
 800ebac:	edd7 0a03 	vldr	s1, [r7, #12]
 800ebb0:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 800eb64 <AdatiWayReturn+0xbd0>
 800ebb4:	f7f4 f9da 	bl	8002f6c <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800ebb8:	f107 0218 	add.w	r2, r7, #24
 800ebbc:	f107 011c 	add.w	r1, r7, #28
 800ebc0:	f107 0320 	add.w	r3, r7, #32
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f001 fbcf 	bl	8010368 <compress_kitiku>
				mode.WallCutMode=0;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ebce:	2201      	movs	r2, #1
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	6978      	ldr	r0, [r7, #20]
 800ebd4:	ed1f 0a1d 	vldr	s0, [pc, #-116]	; 800eb64 <AdatiWayReturn+0xbd0>
 800ebd8:	f7f4 fe72 	bl	80038c0 <End_straight>
				mode.WallControlMode=1;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ebe8:	4b27      	ldr	r3, [pc, #156]	; (800ec88 <AdatiWayReturn+0xcf4>)
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	4613      	mov	r3, r2
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	4413      	add	r3, r2
 800ebf2:	011a      	lsls	r2, r3, #4
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	ee07 3a90 	vmov	s15, r3
 800ebfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebfe:	6978      	ldr	r0, [r7, #20]
 800ec00:	ed97 2a01 	vldr	s4, [r7, #4]
 800ec04:	eddf 1a21 	vldr	s3, [pc, #132]	; 800ec8c <AdatiWayReturn+0xcf8>
 800ec08:	ed97 1a03 	vldr	s2, [r7, #12]
 800ec0c:	edd7 0a03 	vldr	s1, [r7, #12]
 800ec10:	eeb0 0a67 	vmov.f32	s0, s15
 800ec14:	f7f4 f9aa 	bl	8002f6c <straight_table2>

			}

			if (direction >= 5) {
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	2b04      	cmp	r3, #4
 800ec1c:	dd02      	ble.n	800ec24 <AdatiWayReturn+0xc90>
				direction = direction-4;
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	3b04      	subs	r3, #4
 800ec22:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	dc02      	bgt.n	800ec30 <AdatiWayReturn+0xc9c>
				direction = direction+4;
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	3304      	adds	r3, #4
 800ec2e:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800ec30:	4b17      	ldr	r3, [pc, #92]	; (800ec90 <AdatiWayReturn+0xcfc>)
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d002      	beq.n	800ec3e <AdatiWayReturn+0xcaa>
		update_coordinate(&x,&y,direction);
 800ec38:	e544      	b.n	800e6c4 <AdatiWayReturn+0x730>
				break;
 800ec3a:	bf00      	nop
 800ec3c:	e000      	b.n	800ec40 <AdatiWayReturn+0xcac>
			if(error_mode==1){break;}
 800ec3e:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800ec40:	2000      	movs	r0, #0
 800ec42:	f7f8 feab 	bl	800799c <pl_DriveMotor_standby>
	maze_mode = 0;
 800ec46:	4b13      	ldr	r3, [pc, #76]	; (800ec94 <AdatiWayReturn+0xd00>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800ec4c:	2064      	movs	r0, #100	; 0x64
 800ec4e:	f008 fe13 	bl	8017878 <HAL_Delay>
	maze_display();
 800ec52:	f005 fb7b 	bl	801434c <maze_display>
	create_StepCountMap_queue();
 800ec56:	f004 ffd7 	bl	8013c08 <create_StepCountMap_queue>
	if(walk_count[0] == 255){
 800ec5a:	4b0f      	ldr	r3, [pc, #60]	; (800ec98 <AdatiWayReturn+0xd04>)
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	2bff      	cmp	r3, #255	; 0xff
 800ec60:	d102      	bne.n	800ec68 <AdatiWayReturn+0xcd4>
		error_mode = 1;
 800ec62:	4b0b      	ldr	r3, [pc, #44]	; (800ec90 <AdatiWayReturn+0xcfc>)
 800ec64:	2201      	movs	r2, #1
 800ec66:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800ec68:	4b09      	ldr	r3, [pc, #36]	; (800ec90 <AdatiWayReturn+0xcfc>)
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d102      	bne.n	800ec76 <AdatiWayReturn+0xce2>
		record_in();
 800ec70:	f7f8 fba2 	bl	80073b8 <record_in>
	} else {
		record_out();
	}

}
 800ec74:	e001      	b.n	800ec7a <AdatiWayReturn+0xce6>
		record_out();
 800ec76:	f7f8 fc5b 	bl	8007530 <record_out>
}
 800ec7a:	bf00      	nop
 800ec7c:	3734      	adds	r7, #52	; 0x34
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec84:	b004      	add	sp, #16
 800ec86:	4770      	bx	lr
 800ec88:	2000082c 	.word	0x2000082c
 800ec8c:	447a0000 	.word	0x447a0000
 800ec90:	20000807 	.word	0x20000807
 800ec94:	20000834 	.word	0x20000834
 800ec98:	20000d2c 	.word	0x20000d2c

0800ec9c <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800ec9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec9e:	b08b      	sub	sp, #44	; 0x2c
 800eca0:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	607b      	str	r3, [r7, #4]
	int y = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800ecae:	4b8b      	ldr	r3, [pc, #556]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800ecb4:	f002 fbdc 	bl	8011470 <create_DijkstraMap>
	maze_display_Dijkstra();
 800ecb8:	f005 fc66 	bl	8014588 <maze_display_Dijkstra>
	pass[0] = 1;
 800ecbc:	4b88      	ldr	r3, [pc, #544]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800ecc2:	4639      	mov	r1, r7
 800ecc4:	1d3b      	adds	r3, r7, #4
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7ff f92f 	bl	800df2c <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d002      	beq.n	800ecda <pass_maker_Dijkstra+0x3e>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d13a      	bne.n	800ed50 <pass_maker_Dijkstra+0xb4>
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d002      	beq.n	800ece6 <pass_maker_Dijkstra+0x4a>
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d134      	bne.n	800ed50 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800ece6:	4b7d      	ldr	r3, [pc, #500]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	4b7c      	ldr	r3, [pc, #496]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800ecee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	da05      	bge.n	800ed02 <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800ecf6:	4b79      	ldr	r3, [pc, #484]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	4b77      	ldr	r3, [pc, #476]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ed00:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800ed02:	4b76      	ldr	r3, [pc, #472]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	461a      	mov	r2, r3
 800ed08:	4b75      	ldr	r3, [pc, #468]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800ed0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed0e:	4a73      	ldr	r2, [pc, #460]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ed10:	7812      	ldrb	r2, [r2, #0]
 800ed12:	4611      	mov	r1, r2
 800ed14:	3301      	adds	r3, #1
 800ed16:	4a72      	ldr	r2, [pc, #456]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800ed18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	3302      	adds	r3, #2
 800ed20:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2b05      	cmp	r3, #5
 800ed26:	d101      	bne.n	800ed2c <pass_maker_Dijkstra+0x90>
						direction = 1;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	2b06      	cmp	r3, #6
 800ed30:	d101      	bne.n	800ed36 <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800ed32:	2302      	movs	r3, #2
 800ed34:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d101      	bne.n	800ed40 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800ed3c:	2304      	movs	r3, #4
 800ed3e:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed46:	f040 80c2 	bne.w	800eece <pass_maker_Dijkstra+0x232>
						direction = 3;
 800ed4a:	2303      	movs	r3, #3
 800ed4c:	617b      	str	r3, [r7, #20]
					}
					break;
 800ed4e:	e0be      	b.n	800eece <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	f107 020b 	add.w	r2, r7, #11
 800ed58:	f107 0309 	add.w	r3, r7, #9
 800ed5c:	9301      	str	r3, [sp, #4]
 800ed5e:	f107 030a 	add.w	r3, r7, #10
 800ed62:	9300      	str	r3, [sp, #0]
 800ed64:	4613      	mov	r3, r2
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	f001 ff66 	bl	8010c38 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	683a      	ldr	r2, [r7, #0]
 800ed70:	f107 060c 	add.w	r6, r7, #12
 800ed74:	f107 050e 	add.w	r5, r7, #14
 800ed78:	f107 0410 	add.w	r4, r7, #16
 800ed7c:	f107 0012 	add.w	r0, r7, #18
 800ed80:	6979      	ldr	r1, [r7, #20]
 800ed82:	9102      	str	r1, [sp, #8]
 800ed84:	9201      	str	r2, [sp, #4]
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	4633      	mov	r3, r6
 800ed8a:	462a      	mov	r2, r5
 800ed8c:	4621      	mov	r1, r4
 800ed8e:	f002 fad5 	bl	801133c <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800ed92:	7afb      	ldrb	r3, [r7, #11]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <pass_maker_Dijkstra+0x102>
 800ed98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed9c:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800ed9e:	7abb      	ldrb	r3, [r7, #10]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <pass_maker_Dijkstra+0x10e>
 800eda4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eda8:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800edaa:	7a7b      	ldrb	r3, [r7, #9]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <pass_maker_Dijkstra+0x11a>
 800edb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edb4:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800edb6:	8a7b      	ldrh	r3, [r7, #18]
 800edb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d10e      	bne.n	800edde <pass_maker_Dijkstra+0x142>
 800edc0:	8a3b      	ldrh	r3, [r7, #16]
 800edc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d109      	bne.n	800edde <pass_maker_Dijkstra+0x142>
 800edca:	89bb      	ldrh	r3, [r7, #12]
 800edcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d104      	bne.n	800edde <pass_maker_Dijkstra+0x142>
 800edd4:	89fb      	ldrh	r3, [r7, #14]
 800edd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edda:	4293      	cmp	r3, r2
 800eddc:	d079      	beq.n	800eed2 <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800edde:	8a7a      	ldrh	r2, [r7, #18]
 800ede0:	8a3b      	ldrh	r3, [r7, #16]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d822      	bhi.n	800ee2c <pass_maker_Dijkstra+0x190>
 800ede6:	8a7a      	ldrh	r2, [r7, #18]
 800ede8:	89bb      	ldrh	r3, [r7, #12]
 800edea:	429a      	cmp	r2, r3
 800edec:	d81e      	bhi.n	800ee2c <pass_maker_Dijkstra+0x190>
 800edee:	8a7a      	ldrh	r2, [r7, #18]
 800edf0:	89fb      	ldrh	r3, [r7, #14]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d81a      	bhi.n	800ee2c <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800edf6:	4b39      	ldr	r3, [pc, #228]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	461a      	mov	r2, r3
 800edfc:	4b38      	ldr	r3, [pc, #224]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800edfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	da05      	bge.n	800ee12 <pass_maker_Dijkstra+0x176>
 800ee06:	4b35      	ldr	r3, [pc, #212]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	b2da      	uxtb	r2, r3
 800ee0e:	4b33      	ldr	r3, [pc, #204]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee10:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800ee12:	4b32      	ldr	r3, [pc, #200]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	4b31      	ldr	r3, [pc, #196]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800ee1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee1e:	4a2f      	ldr	r2, [pc, #188]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee20:	7812      	ldrb	r2, [r2, #0]
 800ee22:	4611      	mov	r1, r2
 800ee24:	3302      	adds	r3, #2
 800ee26:	4a2e      	ldr	r2, [pc, #184]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800ee28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ee2c:	8a3a      	ldrh	r2, [r7, #16]
 800ee2e:	8a7b      	ldrh	r3, [r7, #18]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d218      	bcs.n	800ee66 <pass_maker_Dijkstra+0x1ca>
 800ee34:	8a3a      	ldrh	r2, [r7, #16]
 800ee36:	89bb      	ldrh	r3, [r7, #12]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d814      	bhi.n	800ee66 <pass_maker_Dijkstra+0x1ca>
 800ee3c:	8a3a      	ldrh	r2, [r7, #16]
 800ee3e:	89fb      	ldrh	r3, [r7, #14]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d810      	bhi.n	800ee66 <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800ee44:	4b25      	ldr	r3, [pc, #148]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	b2da      	uxtb	r2, r3
 800ee4c:	4b23      	ldr	r3, [pc, #140]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee4e:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800ee50:	4b22      	ldr	r3, [pc, #136]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	4619      	mov	r1, r3
 800ee56:	4b22      	ldr	r3, [pc, #136]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800ee58:	f06f 0201 	mvn.w	r2, #1
 800ee5c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	3301      	adds	r3, #1
 800ee64:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ee66:	89ba      	ldrh	r2, [r7, #12]
 800ee68:	8a7b      	ldrh	r3, [r7, #18]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d218      	bcs.n	800eea0 <pass_maker_Dijkstra+0x204>
 800ee6e:	89ba      	ldrh	r2, [r7, #12]
 800ee70:	8a3b      	ldrh	r3, [r7, #16]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d214      	bcs.n	800eea0 <pass_maker_Dijkstra+0x204>
 800ee76:	89ba      	ldrh	r2, [r7, #12]
 800ee78:	89fb      	ldrh	r3, [r7, #14]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d810      	bhi.n	800eea0 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800ee7e:	4b17      	ldr	r3, [pc, #92]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	3301      	adds	r3, #1
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	4b15      	ldr	r3, [pc, #84]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee88:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800ee8a:	4b14      	ldr	r3, [pc, #80]	; (800eedc <pass_maker_Dijkstra+0x240>)
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4b13      	ldr	r3, [pc, #76]	; (800eee0 <pass_maker_Dijkstra+0x244>)
 800ee92:	f06f 0202 	mvn.w	r2, #2
 800ee96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	3b01      	subs	r3, #1
 800ee9e:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	2b05      	cmp	r3, #5
 800eea4:	d101      	bne.n	800eeaa <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800eea6:	2301      	movs	r3, #1
 800eea8:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2b06      	cmp	r3, #6
 800eeae:	d101      	bne.n	800eeb4 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d101      	bne.n	800eebe <pass_maker_Dijkstra+0x222>
			direction = 4;
 800eeba:	2304      	movs	r3, #4
 800eebc:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec4:	f47f aefd 	bne.w	800ecc2 <pass_maker_Dijkstra+0x26>
			direction = 3;
 800eec8:	2303      	movs	r3, #3
 800eeca:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800eecc:	e6f9      	b.n	800ecc2 <pass_maker_Dijkstra+0x26>
					break;
 800eece:	bf00      	nop
 800eed0:	e000      	b.n	800eed4 <pass_maker_Dijkstra+0x238>
			break;
 800eed2:	bf00      	nop
		}

	}
}
 800eed4:	bf00      	nop
 800eed6:	371c      	adds	r7, #28
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eedc:	20000828 	.word	0x20000828
 800eee0:	2000083c 	.word	0x2000083c
 800eee4:	00000000 	.word	0x00000000

0800eee8 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800eee8:	b5b0      	push	{r4, r5, r7, lr}
 800eeea:	b0e0      	sub	sp, #384	; 0x180
 800eeec:	af50      	add	r7, sp, #320	; 0x140
 800eeee:	ed87 0a05 	vstr	s0, [r7, #20]
 800eef2:	edc7 0a04 	vstr	s1, [r7, #16]
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	4608      	mov	r0, r1
 800eefa:	4611      	mov	r1, r2
 800eefc:	461a      	mov	r2, r3
 800eefe:	ed87 1a01 	vstr	s2, [r7, #4]
 800ef02:	4603      	mov	r3, r0
 800ef04:	72fb      	strb	r3, [r7, #11]
 800ef06:	460b      	mov	r3, r1
 800ef08:	72bb      	strb	r3, [r7, #10]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800ef0e:	f06f 0301 	mvn.w	r3, #1
 800ef12:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800ef14:	2301      	movs	r3, #1
 800ef16:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800ef20:	2300      	movs	r3, #0
 800ef22:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800ef24:	2300      	movs	r3, #0
 800ef26:	633b      	str	r3, [r7, #48]	; 0x30
 800ef28:	e007      	b.n	800ef3a <run_shortest+0x52>
 800ef2a:	4a07      	ldr	r2, [pc, #28]	; (800ef48 <run_shortest+0x60>)
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2e:	2100      	movs	r1, #0
 800ef30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	3301      	adds	r3, #1
 800ef38:	633b      	str	r3, [r7, #48]	; 0x30
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3c:	2bfe      	cmp	r3, #254	; 0xfe
 800ef3e:	ddf4      	ble.n	800ef2a <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800ef40:	2300      	movs	r3, #0
 800ef42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef44:	e077      	b.n	800f036 <run_shortest+0x14e>
 800ef46:	bf00      	nop
 800ef48:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800ef4c:	4aa9      	ldr	r2, [pc, #676]	; (800f1f4 <run_shortest+0x30c>)
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ef54:	4aa8      	ldr	r2, [pc, #672]	; (800f1f8 <run_shortest+0x310>)
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800ef5c:	4aa5      	ldr	r2, [pc, #660]	; (800f1f4 <run_shortest+0x30c>)
 800ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef60:	330c      	adds	r3, #12
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	4413      	add	r3, r2
 800ef66:	88d9      	ldrh	r1, [r3, #6]
 800ef68:	4aa3      	ldr	r2, [pc, #652]	; (800f1f8 <run_shortest+0x310>)
 800ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6c:	330c      	adds	r3, #12
 800ef6e:	005b      	lsls	r3, r3, #1
 800ef70:	4413      	add	r3, r2
 800ef72:	460a      	mov	r2, r1
 800ef74:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800ef76:	4a9f      	ldr	r2, [pc, #636]	; (800f1f4 <run_shortest+0x30c>)
 800ef78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7a:	331c      	adds	r3, #28
 800ef7c:	005b      	lsls	r3, r3, #1
 800ef7e:	4413      	add	r3, r2
 800ef80:	8899      	ldrh	r1, [r3, #4]
 800ef82:	4a9d      	ldr	r2, [pc, #628]	; (800f1f8 <run_shortest+0x310>)
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	331c      	adds	r3, #28
 800ef88:	005b      	lsls	r3, r3, #1
 800ef8a:	4413      	add	r3, r2
 800ef8c:	460a      	mov	r2, r1
 800ef8e:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800ef90:	4a98      	ldr	r2, [pc, #608]	; (800f1f4 <run_shortest+0x30c>)
 800ef92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef94:	332c      	adds	r3, #44	; 0x2c
 800ef96:	005b      	lsls	r3, r3, #1
 800ef98:	4413      	add	r3, r2
 800ef9a:	8859      	ldrh	r1, [r3, #2]
 800ef9c:	4a96      	ldr	r2, [pc, #600]	; (800f1f8 <run_shortest+0x310>)
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	332c      	adds	r3, #44	; 0x2c
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	4413      	add	r3, r2
 800efa6:	460a      	mov	r2, r1
 800efa8:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800efaa:	4a92      	ldr	r2, [pc, #584]	; (800f1f4 <run_shortest+0x30c>)
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	331c      	adds	r3, #28
 800efb0:	005b      	lsls	r3, r3, #1
 800efb2:	4413      	add	r3, r2
 800efb4:	889b      	ldrh	r3, [r3, #4]
 800efb6:	43db      	mvns	r3, r3
 800efb8:	b299      	uxth	r1, r3
 800efba:	4a8e      	ldr	r2, [pc, #568]	; (800f1f4 <run_shortest+0x30c>)
 800efbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbe:	331c      	adds	r3, #28
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	4413      	add	r3, r2
 800efc4:	460a      	mov	r2, r1
 800efc6:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800efc8:	4a8a      	ldr	r2, [pc, #552]	; (800f1f4 <run_shortest+0x30c>)
 800efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efcc:	332c      	adds	r3, #44	; 0x2c
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	4413      	add	r3, r2
 800efd2:	885b      	ldrh	r3, [r3, #2]
 800efd4:	43db      	mvns	r3, r3
 800efd6:	b299      	uxth	r1, r3
 800efd8:	4a86      	ldr	r2, [pc, #536]	; (800f1f4 <run_shortest+0x30c>)
 800efda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efdc:	332c      	adds	r3, #44	; 0x2c
 800efde:	005b      	lsls	r3, r3, #1
 800efe0:	4413      	add	r3, r2
 800efe2:	460a      	mov	r2, r1
 800efe4:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800efe6:	4a83      	ldr	r2, [pc, #524]	; (800f1f4 <run_shortest+0x30c>)
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800efee:	4981      	ldr	r1, [pc, #516]	; (800f1f4 <run_shortest+0x30c>)
 800eff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff2:	331c      	adds	r3, #28
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	440b      	add	r3, r1
 800eff8:	889b      	ldrh	r3, [r3, #4]
 800effa:	4313      	orrs	r3, r2
 800effc:	b299      	uxth	r1, r3
 800effe:	4a7d      	ldr	r2, [pc, #500]	; (800f1f4 <run_shortest+0x30c>)
 800f000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f002:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f006:	4a7b      	ldr	r2, [pc, #492]	; (800f1f4 <run_shortest+0x30c>)
 800f008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00a:	330c      	adds	r3, #12
 800f00c:	005b      	lsls	r3, r3, #1
 800f00e:	4413      	add	r3, r2
 800f010:	88da      	ldrh	r2, [r3, #6]
 800f012:	4978      	ldr	r1, [pc, #480]	; (800f1f4 <run_shortest+0x30c>)
 800f014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f016:	332c      	adds	r3, #44	; 0x2c
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	440b      	add	r3, r1
 800f01c:	885b      	ldrh	r3, [r3, #2]
 800f01e:	4313      	orrs	r3, r2
 800f020:	b299      	uxth	r1, r3
 800f022:	4a74      	ldr	r2, [pc, #464]	; (800f1f4 <run_shortest+0x30c>)
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f026:	330c      	adds	r3, #12
 800f028:	005b      	lsls	r3, r3, #1
 800f02a:	4413      	add	r3, r2
 800f02c:	460a      	mov	r2, r1
 800f02e:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	3301      	adds	r3, #1
 800f034:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f038:	2b0e      	cmp	r3, #14
 800f03a:	dd87      	ble.n	800ef4c <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f03c:	f7ff fe2e 	bl	800ec9c <pass_maker_Dijkstra>

	pass_count = 1;
 800f040:	4b6e      	ldr	r3, [pc, #440]	; (800f1fc <run_shortest+0x314>)
 800f042:	2201      	movs	r2, #1
 800f044:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f046:	7afb      	ldrb	r3, [r7, #11]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	f040 84b5 	bne.w	800f9b8 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f04e:	4b6b      	ldr	r3, [pc, #428]	; (800f1fc <run_shortest+0x314>)
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	461a      	mov	r2, r3
 800f054:	4b6a      	ldr	r3, [pc, #424]	; (800f200 <run_shortest+0x318>)
 800f056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f000 813a 	beq.w	800f2d4 <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f060:	4b66      	ldr	r3, [pc, #408]	; (800f1fc <run_shortest+0x314>)
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	461a      	mov	r2, r3
 800f066:	4b66      	ldr	r3, [pc, #408]	; (800f200 <run_shortest+0x318>)
 800f068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f06c:	f113 0f02 	cmn.w	r3, #2
 800f070:	d131      	bne.n	800f0d6 <run_shortest+0x1ee>
 800f072:	4b62      	ldr	r3, [pc, #392]	; (800f1fc <run_shortest+0x314>)
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	3b01      	subs	r3, #1
 800f078:	4a61      	ldr	r2, [pc, #388]	; (800f200 <run_shortest+0x318>)
 800f07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	dd29      	ble.n	800f0d6 <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f082:	4b5e      	ldr	r3, [pc, #376]	; (800f1fc <run_shortest+0x314>)
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	3301      	adds	r3, #1
 800f088:	4a5d      	ldr	r2, [pc, #372]	; (800f200 <run_shortest+0x318>)
 800f08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	dd21      	ble.n	800f0d6 <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f092:	4b5a      	ldr	r3, [pc, #360]	; (800f1fc <run_shortest+0x314>)
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	3b01      	subs	r3, #1
 800f098:	4a59      	ldr	r2, [pc, #356]	; (800f200 <run_shortest+0x318>)
 800f09a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f09e:	4b57      	ldr	r3, [pc, #348]	; (800f1fc <run_shortest+0x314>)
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	3a01      	subs	r2, #1
 800f0a6:	4956      	ldr	r1, [pc, #344]	; (800f200 <run_shortest+0x318>)
 800f0a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f0ac:	4b53      	ldr	r3, [pc, #332]	; (800f1fc <run_shortest+0x314>)
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	4a53      	ldr	r2, [pc, #332]	; (800f200 <run_shortest+0x318>)
 800f0b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f0b8:	4b50      	ldr	r3, [pc, #320]	; (800f1fc <run_shortest+0x314>)
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	3a01      	subs	r2, #1
 800f0c0:	494f      	ldr	r1, [pc, #316]	; (800f200 <run_shortest+0x318>)
 800f0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f0c6:	4b4d      	ldr	r3, [pc, #308]	; (800f1fc <run_shortest+0x314>)
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4b4c      	ldr	r3, [pc, #304]	; (800f200 <run_shortest+0x318>)
 800f0ce:	f06f 0203 	mvn.w	r2, #3
 800f0d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f0d6:	4b49      	ldr	r3, [pc, #292]	; (800f1fc <run_shortest+0x314>)
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	461a      	mov	r2, r3
 800f0dc:	4b48      	ldr	r3, [pc, #288]	; (800f200 <run_shortest+0x318>)
 800f0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0e2:	f113 0f03 	cmn.w	r3, #3
 800f0e6:	d131      	bne.n	800f14c <run_shortest+0x264>
 800f0e8:	4b44      	ldr	r3, [pc, #272]	; (800f1fc <run_shortest+0x314>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	4a44      	ldr	r2, [pc, #272]	; (800f200 <run_shortest+0x318>)
 800f0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	dd29      	ble.n	800f14c <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f0f8:	4b40      	ldr	r3, [pc, #256]	; (800f1fc <run_shortest+0x314>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	4a40      	ldr	r2, [pc, #256]	; (800f200 <run_shortest+0x318>)
 800f100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f104:	2b00      	cmp	r3, #0
 800f106:	dd21      	ble.n	800f14c <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f108:	4b3c      	ldr	r3, [pc, #240]	; (800f1fc <run_shortest+0x314>)
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	3b01      	subs	r3, #1
 800f10e:	4a3c      	ldr	r2, [pc, #240]	; (800f200 <run_shortest+0x318>)
 800f110:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f114:	4b39      	ldr	r3, [pc, #228]	; (800f1fc <run_shortest+0x314>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	3b01      	subs	r3, #1
 800f11a:	3a01      	subs	r2, #1
 800f11c:	4938      	ldr	r1, [pc, #224]	; (800f200 <run_shortest+0x318>)
 800f11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f122:	4b36      	ldr	r3, [pc, #216]	; (800f1fc <run_shortest+0x314>)
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	3301      	adds	r3, #1
 800f128:	4a35      	ldr	r2, [pc, #212]	; (800f200 <run_shortest+0x318>)
 800f12a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f12e:	4b33      	ldr	r3, [pc, #204]	; (800f1fc <run_shortest+0x314>)
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	3301      	adds	r3, #1
 800f134:	3a01      	subs	r2, #1
 800f136:	4932      	ldr	r1, [pc, #200]	; (800f200 <run_shortest+0x318>)
 800f138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f13c:	4b2f      	ldr	r3, [pc, #188]	; (800f1fc <run_shortest+0x314>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	4619      	mov	r1, r3
 800f142:	4b2f      	ldr	r3, [pc, #188]	; (800f200 <run_shortest+0x318>)
 800f144:	f06f 0204 	mvn.w	r2, #4
 800f148:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f14c:	4b2b      	ldr	r3, [pc, #172]	; (800f1fc <run_shortest+0x314>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	3b01      	subs	r3, #1
 800f152:	4a2b      	ldr	r2, [pc, #172]	; (800f200 <run_shortest+0x318>)
 800f154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	dd43      	ble.n	800f1e4 <run_shortest+0x2fc>
 800f15c:	4b27      	ldr	r3, [pc, #156]	; (800f1fc <run_shortest+0x314>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	461a      	mov	r2, r3
 800f162:	4b27      	ldr	r3, [pc, #156]	; (800f200 <run_shortest+0x318>)
 800f164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f168:	f113 0f02 	cmn.w	r3, #2
 800f16c:	d13a      	bne.n	800f1e4 <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f16e:	4b23      	ldr	r3, [pc, #140]	; (800f1fc <run_shortest+0x314>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	3301      	adds	r3, #1
 800f174:	4a22      	ldr	r2, [pc, #136]	; (800f200 <run_shortest+0x318>)
 800f176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f17a:	f113 0f02 	cmn.w	r3, #2
 800f17e:	d131      	bne.n	800f1e4 <run_shortest+0x2fc>
 800f180:	4b1e      	ldr	r3, [pc, #120]	; (800f1fc <run_shortest+0x314>)
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	3302      	adds	r3, #2
 800f186:	4a1e      	ldr	r2, [pc, #120]	; (800f200 <run_shortest+0x318>)
 800f188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	dd29      	ble.n	800f1e4 <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f190:	4b1a      	ldr	r3, [pc, #104]	; (800f1fc <run_shortest+0x314>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	3b01      	subs	r3, #1
 800f196:	4a1a      	ldr	r2, [pc, #104]	; (800f200 <run_shortest+0x318>)
 800f198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f19c:	4b17      	ldr	r3, [pc, #92]	; (800f1fc <run_shortest+0x314>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	3a01      	subs	r2, #1
 800f1a4:	4916      	ldr	r1, [pc, #88]	; (800f200 <run_shortest+0x318>)
 800f1a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f1aa:	4b14      	ldr	r3, [pc, #80]	; (800f1fc <run_shortest+0x314>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	4b13      	ldr	r3, [pc, #76]	; (800f200 <run_shortest+0x318>)
 800f1b2:	f06f 0205 	mvn.w	r2, #5
 800f1b6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f1ba:	4b10      	ldr	r3, [pc, #64]	; (800f1fc <run_shortest+0x314>)
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	4a0f      	ldr	r2, [pc, #60]	; (800f200 <run_shortest+0x318>)
 800f1c2:	f04f 31ff 	mov.w	r1, #4294967295
 800f1c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f1ca:	4b0c      	ldr	r3, [pc, #48]	; (800f1fc <run_shortest+0x314>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	3302      	adds	r3, #2
 800f1d0:	4a0b      	ldr	r2, [pc, #44]	; (800f200 <run_shortest+0x318>)
 800f1d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1d6:	4b09      	ldr	r3, [pc, #36]	; (800f1fc <run_shortest+0x314>)
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	3302      	adds	r3, #2
 800f1dc:	3a01      	subs	r2, #1
 800f1de:	4908      	ldr	r1, [pc, #32]	; (800f200 <run_shortest+0x318>)
 800f1e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f1e4:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <run_shortest+0x314>)
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	4a05      	ldr	r2, [pc, #20]	; (800f200 <run_shortest+0x318>)
 800f1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	e007      	b.n	800f204 <run_shortest+0x31c>
 800f1f4:	20000c3c 	.word	0x20000c3c
 800f1f8:	20000cb4 	.word	0x20000cb4
 800f1fc:	20000828 	.word	0x20000828
 800f200:	2000083c 	.word	0x2000083c
 800f204:	dd43      	ble.n	800f28e <run_shortest+0x3a6>
 800f206:	4b31      	ldr	r3, [pc, #196]	; (800f2cc <run_shortest+0x3e4>)
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	461a      	mov	r2, r3
 800f20c:	4b30      	ldr	r3, [pc, #192]	; (800f2d0 <run_shortest+0x3e8>)
 800f20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f212:	f113 0f03 	cmn.w	r3, #3
 800f216:	d13a      	bne.n	800f28e <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f218:	4b2c      	ldr	r3, [pc, #176]	; (800f2cc <run_shortest+0x3e4>)
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	3301      	adds	r3, #1
 800f21e:	4a2c      	ldr	r2, [pc, #176]	; (800f2d0 <run_shortest+0x3e8>)
 800f220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f224:	f113 0f03 	cmn.w	r3, #3
 800f228:	d131      	bne.n	800f28e <run_shortest+0x3a6>
 800f22a:	4b28      	ldr	r3, [pc, #160]	; (800f2cc <run_shortest+0x3e4>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	3302      	adds	r3, #2
 800f230:	4a27      	ldr	r2, [pc, #156]	; (800f2d0 <run_shortest+0x3e8>)
 800f232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f236:	2b00      	cmp	r3, #0
 800f238:	dd29      	ble.n	800f28e <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f23a:	4b24      	ldr	r3, [pc, #144]	; (800f2cc <run_shortest+0x3e4>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	3b01      	subs	r3, #1
 800f240:	4a23      	ldr	r2, [pc, #140]	; (800f2d0 <run_shortest+0x3e8>)
 800f242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f246:	4b21      	ldr	r3, [pc, #132]	; (800f2cc <run_shortest+0x3e4>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	3a01      	subs	r2, #1
 800f24e:	4920      	ldr	r1, [pc, #128]	; (800f2d0 <run_shortest+0x3e8>)
 800f250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f254:	4b1d      	ldr	r3, [pc, #116]	; (800f2cc <run_shortest+0x3e4>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	4619      	mov	r1, r3
 800f25a:	4b1d      	ldr	r3, [pc, #116]	; (800f2d0 <run_shortest+0x3e8>)
 800f25c:	f06f 0206 	mvn.w	r2, #6
 800f260:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f264:	4b19      	ldr	r3, [pc, #100]	; (800f2cc <run_shortest+0x3e4>)
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	3301      	adds	r3, #1
 800f26a:	4a19      	ldr	r2, [pc, #100]	; (800f2d0 <run_shortest+0x3e8>)
 800f26c:	f04f 31ff 	mov.w	r1, #4294967295
 800f270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f274:	4b15      	ldr	r3, [pc, #84]	; (800f2cc <run_shortest+0x3e4>)
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	3302      	adds	r3, #2
 800f27a:	4a15      	ldr	r2, [pc, #84]	; (800f2d0 <run_shortest+0x3e8>)
 800f27c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f280:	4b12      	ldr	r3, [pc, #72]	; (800f2cc <run_shortest+0x3e4>)
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	3302      	adds	r3, #2
 800f286:	3a01      	subs	r2, #1
 800f288:	4911      	ldr	r1, [pc, #68]	; (800f2d0 <run_shortest+0x3e8>)
 800f28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f28e:	4b0f      	ldr	r3, [pc, #60]	; (800f2cc <run_shortest+0x3e4>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	461a      	mov	r2, r3
 800f294:	4b0e      	ldr	r3, [pc, #56]	; (800f2d0 <run_shortest+0x3e8>)
 800f296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f29a:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f29e:	4b0b      	ldr	r3, [pc, #44]	; (800f2cc <run_shortest+0x3e4>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	4a0a      	ldr	r2, [pc, #40]	; (800f2d0 <run_shortest+0x3e8>)
 800f2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d107      	bne.n	800f2be <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f2ae:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <run_shortest+0x3e4>)
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	4a06      	ldr	r2, [pc, #24]	; (800f2d0 <run_shortest+0x3e8>)
 800f2b6:	f04f 31ff 	mov.w	r1, #4294967295
 800f2ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f2be:	4b03      	ldr	r3, [pc, #12]	; (800f2cc <run_shortest+0x3e4>)
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	4b01      	ldr	r3, [pc, #4]	; (800f2cc <run_shortest+0x3e4>)
 800f2c8:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f2ca:	e6c0      	b.n	800f04e <run_shortest+0x166>
 800f2cc:	20000828 	.word	0x20000828
 800f2d0:	2000083c 	.word	0x2000083c
			break;
 800f2d4:	bf00      	nop
	}

	pass_count = 1;
 800f2d6:	4b8c      	ldr	r3, [pc, #560]	; (800f508 <run_shortest+0x620>)
 800f2d8:	2201      	movs	r2, #1
 800f2da:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f2dc:	7a7b      	ldrb	r3, [r7, #9]
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	f040 836a 	bne.w	800f9b8 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f2e4:	4b88      	ldr	r3, [pc, #544]	; (800f508 <run_shortest+0x620>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	4b88      	ldr	r3, [pc, #544]	; (800f50c <run_shortest+0x624>)
 800f2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 81f1 	beq.w	800f6d8 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f2f6:	4b84      	ldr	r3, [pc, #528]	; (800f508 <run_shortest+0x620>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	4a83      	ldr	r2, [pc, #524]	; (800f50c <run_shortest+0x624>)
 800f2fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f302:	2b00      	cmp	r3, #0
 800f304:	f340 81dc 	ble.w	800f6c0 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f308:	4b7f      	ldr	r3, [pc, #508]	; (800f508 <run_shortest+0x620>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	461a      	mov	r2, r3
 800f30e:	4b7f      	ldr	r3, [pc, #508]	; (800f50c <run_shortest+0x624>)
 800f310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f314:	f113 0f02 	cmn.w	r3, #2
 800f318:	d009      	beq.n	800f32e <run_shortest+0x446>
 800f31a:	4b7b      	ldr	r3, [pc, #492]	; (800f508 <run_shortest+0x620>)
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	4b7a      	ldr	r3, [pc, #488]	; (800f50c <run_shortest+0x624>)
 800f322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f326:	f113 0f03 	cmn.w	r3, #3
 800f32a:	f040 81c9 	bne.w	800f6c0 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f32e:	4b76      	ldr	r3, [pc, #472]	; (800f508 <run_shortest+0x620>)
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	461a      	mov	r2, r3
 800f334:	4b75      	ldr	r3, [pc, #468]	; (800f50c <run_shortest+0x624>)
 800f336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f33a:	f113 0f02 	cmn.w	r3, #2
 800f33e:	d12d      	bne.n	800f39c <run_shortest+0x4b4>
 800f340:	4b71      	ldr	r3, [pc, #452]	; (800f508 <run_shortest+0x620>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	3301      	adds	r3, #1
 800f346:	4a71      	ldr	r2, [pc, #452]	; (800f50c <run_shortest+0x624>)
 800f348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f34c:	f113 0f03 	cmn.w	r3, #3
 800f350:	d124      	bne.n	800f39c <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f352:	4b6d      	ldr	r3, [pc, #436]	; (800f508 <run_shortest+0x620>)
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	3b01      	subs	r3, #1
 800f358:	4a6c      	ldr	r2, [pc, #432]	; (800f50c <run_shortest+0x624>)
 800f35a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f35e:	4b6a      	ldr	r3, [pc, #424]	; (800f508 <run_shortest+0x620>)
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	3b01      	subs	r3, #1
 800f364:	3a01      	subs	r2, #1
 800f366:	4969      	ldr	r1, [pc, #420]	; (800f50c <run_shortest+0x624>)
 800f368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f36c:	4b66      	ldr	r3, [pc, #408]	; (800f508 <run_shortest+0x620>)
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	3b01      	subs	r3, #1
 800f372:	4a66      	ldr	r2, [pc, #408]	; (800f50c <run_shortest+0x624>)
 800f374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d107      	bne.n	800f38c <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f37c:	4b62      	ldr	r3, [pc, #392]	; (800f508 <run_shortest+0x620>)
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	3b01      	subs	r3, #1
 800f382:	4a62      	ldr	r2, [pc, #392]	; (800f50c <run_shortest+0x624>)
 800f384:	f04f 31ff 	mov.w	r1, #4294967295
 800f388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f38c:	4b5e      	ldr	r3, [pc, #376]	; (800f508 <run_shortest+0x620>)
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	4619      	mov	r1, r3
 800f392:	4b5e      	ldr	r3, [pc, #376]	; (800f50c <run_shortest+0x624>)
 800f394:	f06f 0207 	mvn.w	r2, #7
 800f398:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f39c:	4b5a      	ldr	r3, [pc, #360]	; (800f508 <run_shortest+0x620>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	4b5a      	ldr	r3, [pc, #360]	; (800f50c <run_shortest+0x624>)
 800f3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a8:	f113 0f03 	cmn.w	r3, #3
 800f3ac:	d12d      	bne.n	800f40a <run_shortest+0x522>
 800f3ae:	4b56      	ldr	r3, [pc, #344]	; (800f508 <run_shortest+0x620>)
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	4a55      	ldr	r2, [pc, #340]	; (800f50c <run_shortest+0x624>)
 800f3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ba:	f113 0f02 	cmn.w	r3, #2
 800f3be:	d124      	bne.n	800f40a <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f3c0:	4b51      	ldr	r3, [pc, #324]	; (800f508 <run_shortest+0x620>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	4a51      	ldr	r2, [pc, #324]	; (800f50c <run_shortest+0x624>)
 800f3c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3cc:	4b4e      	ldr	r3, [pc, #312]	; (800f508 <run_shortest+0x620>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	3a01      	subs	r2, #1
 800f3d4:	494d      	ldr	r1, [pc, #308]	; (800f50c <run_shortest+0x624>)
 800f3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f3da:	4b4b      	ldr	r3, [pc, #300]	; (800f508 <run_shortest+0x620>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	3b01      	subs	r3, #1
 800f3e0:	4a4a      	ldr	r2, [pc, #296]	; (800f50c <run_shortest+0x624>)
 800f3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d107      	bne.n	800f3fa <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f3ea:	4b47      	ldr	r3, [pc, #284]	; (800f508 <run_shortest+0x620>)
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	4a46      	ldr	r2, [pc, #280]	; (800f50c <run_shortest+0x624>)
 800f3f2:	f04f 31ff 	mov.w	r1, #4294967295
 800f3f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f3fa:	4b43      	ldr	r3, [pc, #268]	; (800f508 <run_shortest+0x620>)
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	4619      	mov	r1, r3
 800f400:	4b42      	ldr	r3, [pc, #264]	; (800f50c <run_shortest+0x624>)
 800f402:	f06f 0208 	mvn.w	r2, #8
 800f406:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f40a:	4b3f      	ldr	r3, [pc, #252]	; (800f508 <run_shortest+0x620>)
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	461a      	mov	r2, r3
 800f410:	4b3e      	ldr	r3, [pc, #248]	; (800f50c <run_shortest+0x624>)
 800f412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f416:	f113 0f02 	cmn.w	r3, #2
 800f41a:	d135      	bne.n	800f488 <run_shortest+0x5a0>
 800f41c:	4b3a      	ldr	r3, [pc, #232]	; (800f508 <run_shortest+0x620>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	3301      	adds	r3, #1
 800f422:	4a3a      	ldr	r2, [pc, #232]	; (800f50c <run_shortest+0x624>)
 800f424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f428:	f113 0f02 	cmn.w	r3, #2
 800f42c:	d12c      	bne.n	800f488 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f42e:	4b36      	ldr	r3, [pc, #216]	; (800f508 <run_shortest+0x620>)
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	3b01      	subs	r3, #1
 800f434:	4a35      	ldr	r2, [pc, #212]	; (800f50c <run_shortest+0x624>)
 800f436:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f43a:	4b33      	ldr	r3, [pc, #204]	; (800f508 <run_shortest+0x620>)
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	3b01      	subs	r3, #1
 800f440:	3a01      	subs	r2, #1
 800f442:	4932      	ldr	r1, [pc, #200]	; (800f50c <run_shortest+0x624>)
 800f444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f448:	4b2f      	ldr	r3, [pc, #188]	; (800f508 <run_shortest+0x620>)
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	3b01      	subs	r3, #1
 800f44e:	4a2f      	ldr	r2, [pc, #188]	; (800f50c <run_shortest+0x624>)
 800f450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d107      	bne.n	800f468 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f458:	4b2b      	ldr	r3, [pc, #172]	; (800f508 <run_shortest+0x620>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	3b01      	subs	r3, #1
 800f45e:	4a2b      	ldr	r2, [pc, #172]	; (800f50c <run_shortest+0x624>)
 800f460:	f04f 31ff 	mov.w	r1, #4294967295
 800f464:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f468:	4b27      	ldr	r3, [pc, #156]	; (800f508 <run_shortest+0x620>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	4619      	mov	r1, r3
 800f46e:	4b27      	ldr	r3, [pc, #156]	; (800f50c <run_shortest+0x624>)
 800f470:	f06f 0209 	mvn.w	r2, #9
 800f474:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f478:	4b23      	ldr	r3, [pc, #140]	; (800f508 <run_shortest+0x620>)
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	3301      	adds	r3, #1
 800f47e:	4a23      	ldr	r2, [pc, #140]	; (800f50c <run_shortest+0x624>)
 800f480:	f04f 31ff 	mov.w	r1, #4294967295
 800f484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f488:	4b1f      	ldr	r3, [pc, #124]	; (800f508 <run_shortest+0x620>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	461a      	mov	r2, r3
 800f48e:	4b1f      	ldr	r3, [pc, #124]	; (800f50c <run_shortest+0x624>)
 800f490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f494:	f113 0f03 	cmn.w	r3, #3
 800f498:	d140      	bne.n	800f51c <run_shortest+0x634>
 800f49a:	4b1b      	ldr	r3, [pc, #108]	; (800f508 <run_shortest+0x620>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	4a1a      	ldr	r2, [pc, #104]	; (800f50c <run_shortest+0x624>)
 800f4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4a6:	f113 0f03 	cmn.w	r3, #3
 800f4aa:	d137      	bne.n	800f51c <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f4ac:	4b16      	ldr	r3, [pc, #88]	; (800f508 <run_shortest+0x620>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	4a16      	ldr	r2, [pc, #88]	; (800f50c <run_shortest+0x624>)
 800f4b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4b8:	4b13      	ldr	r3, [pc, #76]	; (800f508 <run_shortest+0x620>)
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	3a01      	subs	r2, #1
 800f4c0:	4912      	ldr	r1, [pc, #72]	; (800f50c <run_shortest+0x624>)
 800f4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f4c6:	4b10      	ldr	r3, [pc, #64]	; (800f508 <run_shortest+0x620>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	4a0f      	ldr	r2, [pc, #60]	; (800f50c <run_shortest+0x624>)
 800f4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d107      	bne.n	800f4e6 <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f4d6:	4b0c      	ldr	r3, [pc, #48]	; (800f508 <run_shortest+0x620>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	4a0b      	ldr	r2, [pc, #44]	; (800f50c <run_shortest+0x624>)
 800f4de:	f04f 31ff 	mov.w	r1, #4294967295
 800f4e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f4e6:	4b08      	ldr	r3, [pc, #32]	; (800f508 <run_shortest+0x620>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4b07      	ldr	r3, [pc, #28]	; (800f50c <run_shortest+0x624>)
 800f4ee:	f06f 020a 	mvn.w	r2, #10
 800f4f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f4f6:	4b04      	ldr	r3, [pc, #16]	; (800f508 <run_shortest+0x620>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	4a03      	ldr	r2, [pc, #12]	; (800f50c <run_shortest+0x624>)
 800f4fe:	f04f 31ff 	mov.w	r1, #4294967295
 800f502:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f506:	e009      	b.n	800f51c <run_shortest+0x634>
 800f508:	20000828 	.word	0x20000828
 800f50c:	2000083c 	.word	0x2000083c
						pass_count++;
 800f510:	4b6f      	ldr	r3, [pc, #444]	; (800f6d0 <run_shortest+0x7e8>)
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	3301      	adds	r3, #1
 800f516:	b2da      	uxtb	r2, r3
 800f518:	4b6d      	ldr	r3, [pc, #436]	; (800f6d0 <run_shortest+0x7e8>)
 800f51a:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f51c:	4b6c      	ldr	r3, [pc, #432]	; (800f6d0 <run_shortest+0x7e8>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	461a      	mov	r2, r3
 800f522:	4b6c      	ldr	r3, [pc, #432]	; (800f6d4 <run_shortest+0x7ec>)
 800f524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	dbf1      	blt.n	800f510 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f52c:	4b68      	ldr	r3, [pc, #416]	; (800f6d0 <run_shortest+0x7e8>)
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	3b01      	subs	r3, #1
 800f532:	4a68      	ldr	r2, [pc, #416]	; (800f6d4 <run_shortest+0x7ec>)
 800f534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f538:	f113 0f02 	cmn.w	r3, #2
 800f53c:	d15b      	bne.n	800f5f6 <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f53e:	4b64      	ldr	r3, [pc, #400]	; (800f6d0 <run_shortest+0x7e8>)
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	3b02      	subs	r3, #2
 800f544:	4a63      	ldr	r2, [pc, #396]	; (800f6d4 <run_shortest+0x7ec>)
 800f546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f54a:	f113 0f02 	cmn.w	r3, #2
 800f54e:	d12d      	bne.n	800f5ac <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f550:	4b5f      	ldr	r3, [pc, #380]	; (800f6d0 <run_shortest+0x7e8>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	461a      	mov	r2, r3
 800f556:	4b5f      	ldr	r3, [pc, #380]	; (800f6d4 <run_shortest+0x7ec>)
 800f558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f55c:	4a5c      	ldr	r2, [pc, #368]	; (800f6d0 <run_shortest+0x7e8>)
 800f55e:	7812      	ldrb	r2, [r2, #0]
 800f560:	4611      	mov	r1, r2
 800f562:	3b01      	subs	r3, #1
 800f564:	4a5b      	ldr	r2, [pc, #364]	; (800f6d4 <run_shortest+0x7ec>)
 800f566:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f56a:	4b59      	ldr	r3, [pc, #356]	; (800f6d0 <run_shortest+0x7e8>)
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	461a      	mov	r2, r3
 800f570:	4b58      	ldr	r3, [pc, #352]	; (800f6d4 <run_shortest+0x7ec>)
 800f572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d107      	bne.n	800f58a <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f57a:	4b55      	ldr	r3, [pc, #340]	; (800f6d0 <run_shortest+0x7e8>)
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	4619      	mov	r1, r3
 800f580:	4b54      	ldr	r3, [pc, #336]	; (800f6d4 <run_shortest+0x7ec>)
 800f582:	f04f 32ff 	mov.w	r2, #4294967295
 800f586:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f58a:	4b51      	ldr	r3, [pc, #324]	; (800f6d0 <run_shortest+0x7e8>)
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	3b01      	subs	r3, #1
 800f590:	4a50      	ldr	r2, [pc, #320]	; (800f6d4 <run_shortest+0x7ec>)
 800f592:	f06f 010d 	mvn.w	r1, #13
 800f596:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f59a:	4b4d      	ldr	r3, [pc, #308]	; (800f6d0 <run_shortest+0x7e8>)
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	3b02      	subs	r3, #2
 800f5a0:	4a4c      	ldr	r2, [pc, #304]	; (800f6d4 <run_shortest+0x7ec>)
 800f5a2:	f04f 31ff 	mov.w	r1, #4294967295
 800f5a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f5aa:	e024      	b.n	800f5f6 <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f5ac:	4b48      	ldr	r3, [pc, #288]	; (800f6d0 <run_shortest+0x7e8>)
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	4b48      	ldr	r3, [pc, #288]	; (800f6d4 <run_shortest+0x7ec>)
 800f5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b8:	4a45      	ldr	r2, [pc, #276]	; (800f6d0 <run_shortest+0x7e8>)
 800f5ba:	7812      	ldrb	r2, [r2, #0]
 800f5bc:	4611      	mov	r1, r2
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	4a44      	ldr	r2, [pc, #272]	; (800f6d4 <run_shortest+0x7ec>)
 800f5c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f5c6:	4b42      	ldr	r3, [pc, #264]	; (800f6d0 <run_shortest+0x7e8>)
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	4b41      	ldr	r3, [pc, #260]	; (800f6d4 <run_shortest+0x7ec>)
 800f5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d107      	bne.n	800f5e6 <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f5d6:	4b3e      	ldr	r3, [pc, #248]	; (800f6d0 <run_shortest+0x7e8>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	4619      	mov	r1, r3
 800f5dc:	4b3d      	ldr	r3, [pc, #244]	; (800f6d4 <run_shortest+0x7ec>)
 800f5de:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f5e6:	4b3a      	ldr	r3, [pc, #232]	; (800f6d0 <run_shortest+0x7e8>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	4a39      	ldr	r2, [pc, #228]	; (800f6d4 <run_shortest+0x7ec>)
 800f5ee:	f06f 010b 	mvn.w	r1, #11
 800f5f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f5f6:	4b36      	ldr	r3, [pc, #216]	; (800f6d0 <run_shortest+0x7e8>)
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	4a35      	ldr	r2, [pc, #212]	; (800f6d4 <run_shortest+0x7ec>)
 800f5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f602:	f113 0f03 	cmn.w	r3, #3
 800f606:	d15b      	bne.n	800f6c0 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f608:	4b31      	ldr	r3, [pc, #196]	; (800f6d0 <run_shortest+0x7e8>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	3b02      	subs	r3, #2
 800f60e:	4a31      	ldr	r2, [pc, #196]	; (800f6d4 <run_shortest+0x7ec>)
 800f610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f614:	f113 0f03 	cmn.w	r3, #3
 800f618:	d12d      	bne.n	800f676 <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f61a:	4b2d      	ldr	r3, [pc, #180]	; (800f6d0 <run_shortest+0x7e8>)
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	461a      	mov	r2, r3
 800f620:	4b2c      	ldr	r3, [pc, #176]	; (800f6d4 <run_shortest+0x7ec>)
 800f622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f626:	4a2a      	ldr	r2, [pc, #168]	; (800f6d0 <run_shortest+0x7e8>)
 800f628:	7812      	ldrb	r2, [r2, #0]
 800f62a:	4611      	mov	r1, r2
 800f62c:	3b01      	subs	r3, #1
 800f62e:	4a29      	ldr	r2, [pc, #164]	; (800f6d4 <run_shortest+0x7ec>)
 800f630:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f634:	4b26      	ldr	r3, [pc, #152]	; (800f6d0 <run_shortest+0x7e8>)
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	461a      	mov	r2, r3
 800f63a:	4b26      	ldr	r3, [pc, #152]	; (800f6d4 <run_shortest+0x7ec>)
 800f63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d107      	bne.n	800f654 <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f644:	4b22      	ldr	r3, [pc, #136]	; (800f6d0 <run_shortest+0x7e8>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	4619      	mov	r1, r3
 800f64a:	4b22      	ldr	r3, [pc, #136]	; (800f6d4 <run_shortest+0x7ec>)
 800f64c:	f04f 32ff 	mov.w	r2, #4294967295
 800f650:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f654:	4b1e      	ldr	r3, [pc, #120]	; (800f6d0 <run_shortest+0x7e8>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	3b01      	subs	r3, #1
 800f65a:	4a1e      	ldr	r2, [pc, #120]	; (800f6d4 <run_shortest+0x7ec>)
 800f65c:	f06f 010e 	mvn.w	r1, #14
 800f660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f664:	4b1a      	ldr	r3, [pc, #104]	; (800f6d0 <run_shortest+0x7e8>)
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	3b02      	subs	r3, #2
 800f66a:	4a1a      	ldr	r2, [pc, #104]	; (800f6d4 <run_shortest+0x7ec>)
 800f66c:	f04f 31ff 	mov.w	r1, #4294967295
 800f670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f674:	e024      	b.n	800f6c0 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f676:	4b16      	ldr	r3, [pc, #88]	; (800f6d0 <run_shortest+0x7e8>)
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	461a      	mov	r2, r3
 800f67c:	4b15      	ldr	r3, [pc, #84]	; (800f6d4 <run_shortest+0x7ec>)
 800f67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f682:	4a13      	ldr	r2, [pc, #76]	; (800f6d0 <run_shortest+0x7e8>)
 800f684:	7812      	ldrb	r2, [r2, #0]
 800f686:	4611      	mov	r1, r2
 800f688:	3b01      	subs	r3, #1
 800f68a:	4a12      	ldr	r2, [pc, #72]	; (800f6d4 <run_shortest+0x7ec>)
 800f68c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f690:	4b0f      	ldr	r3, [pc, #60]	; (800f6d0 <run_shortest+0x7e8>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	461a      	mov	r2, r3
 800f696:	4b0f      	ldr	r3, [pc, #60]	; (800f6d4 <run_shortest+0x7ec>)
 800f698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d107      	bne.n	800f6b0 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f6a0:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <run_shortest+0x7e8>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4b0b      	ldr	r3, [pc, #44]	; (800f6d4 <run_shortest+0x7ec>)
 800f6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f6b0:	4b07      	ldr	r3, [pc, #28]	; (800f6d0 <run_shortest+0x7e8>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	3b01      	subs	r3, #1
 800f6b6:	4a07      	ldr	r2, [pc, #28]	; (800f6d4 <run_shortest+0x7ec>)
 800f6b8:	f06f 010c 	mvn.w	r1, #12
 800f6bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f6c0:	4b03      	ldr	r3, [pc, #12]	; (800f6d0 <run_shortest+0x7e8>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	b2da      	uxtb	r2, r3
 800f6c8:	4b01      	ldr	r3, [pc, #4]	; (800f6d0 <run_shortest+0x7e8>)
 800f6ca:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f6cc:	e60a      	b.n	800f2e4 <run_shortest+0x3fc>
 800f6ce:	bf00      	nop
 800f6d0:	20000828 	.word	0x20000828
 800f6d4:	2000083c 	.word	0x2000083c
				break;
 800f6d8:	bf00      	nop
		}

		pass_count = 1;
 800f6da:	4ba3      	ldr	r3, [pc, #652]	; (800f968 <run_shortest+0xa80>)
 800f6dc:	2201      	movs	r2, #1
 800f6de:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f6e0:	4ba1      	ldr	r3, [pc, #644]	; (800f968 <run_shortest+0xa80>)
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	4ba1      	ldr	r3, [pc, #644]	; (800f96c <run_shortest+0xa84>)
 800f6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f000 813f 	beq.w	800f970 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f6f2:	4b9d      	ldr	r3, [pc, #628]	; (800f968 <run_shortest+0xa80>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	4b9c      	ldr	r3, [pc, #624]	; (800f96c <run_shortest+0xa84>)
 800f6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6fe:	f113 0f08 	cmn.w	r3, #8
 800f702:	d01b      	beq.n	800f73c <run_shortest+0x854>
 800f704:	4b98      	ldr	r3, [pc, #608]	; (800f968 <run_shortest+0xa80>)
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	461a      	mov	r2, r3
 800f70a:	4b98      	ldr	r3, [pc, #608]	; (800f96c <run_shortest+0xa84>)
 800f70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f710:	f113 0f09 	cmn.w	r3, #9
 800f714:	d012      	beq.n	800f73c <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f716:	4b94      	ldr	r3, [pc, #592]	; (800f968 <run_shortest+0xa80>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	4b93      	ldr	r3, [pc, #588]	; (800f96c <run_shortest+0xa84>)
 800f71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f722:	f113 0f0a 	cmn.w	r3, #10
 800f726:	d009      	beq.n	800f73c <run_shortest+0x854>
 800f728:	4b8f      	ldr	r3, [pc, #572]	; (800f968 <run_shortest+0xa80>)
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	461a      	mov	r2, r3
 800f72e:	4b8f      	ldr	r3, [pc, #572]	; (800f96c <run_shortest+0xa84>)
 800f730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f734:	f113 0f0b 	cmn.w	r3, #11
 800f738:	f040 810f 	bne.w	800f95a <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f73c:	4b8a      	ldr	r3, [pc, #552]	; (800f968 <run_shortest+0xa80>)
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	461a      	mov	r2, r3
 800f742:	4b8a      	ldr	r3, [pc, #552]	; (800f96c <run_shortest+0xa84>)
 800f744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f748:	f113 0f08 	cmn.w	r3, #8
 800f74c:	d008      	beq.n	800f760 <run_shortest+0x878>
 800f74e:	4b86      	ldr	r3, [pc, #536]	; (800f968 <run_shortest+0xa80>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	461a      	mov	r2, r3
 800f754:	4b85      	ldr	r3, [pc, #532]	; (800f96c <run_shortest+0xa84>)
 800f756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f75a:	f113 0f0a 	cmn.w	r3, #10
 800f75e:	d102      	bne.n	800f766 <run_shortest+0x87e>
					slant_direction = -3;
 800f760:	f06f 0302 	mvn.w	r3, #2
 800f764:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f766:	4b80      	ldr	r3, [pc, #512]	; (800f968 <run_shortest+0xa80>)
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	461a      	mov	r2, r3
 800f76c:	4b7f      	ldr	r3, [pc, #508]	; (800f96c <run_shortest+0xa84>)
 800f76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f772:	f113 0f09 	cmn.w	r3, #9
 800f776:	d008      	beq.n	800f78a <run_shortest+0x8a2>
 800f778:	4b7b      	ldr	r3, [pc, #492]	; (800f968 <run_shortest+0xa80>)
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	461a      	mov	r2, r3
 800f77e:	4b7b      	ldr	r3, [pc, #492]	; (800f96c <run_shortest+0xa84>)
 800f780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f784:	f113 0f0b 	cmn.w	r3, #11
 800f788:	d102      	bne.n	800f790 <run_shortest+0x8a8>
					slant_direction = -2;
 800f78a:	f06f 0301 	mvn.w	r3, #1
 800f78e:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800f790:	4b75      	ldr	r3, [pc, #468]	; (800f968 <run_shortest+0xa80>)
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	3301      	adds	r3, #1
 800f796:	b2da      	uxtb	r2, r3
 800f798:	4b73      	ldr	r3, [pc, #460]	; (800f968 <run_shortest+0xa80>)
 800f79a:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f79c:	4b72      	ldr	r3, [pc, #456]	; (800f968 <run_shortest+0xa80>)
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	4b72      	ldr	r3, [pc, #456]	; (800f96c <run_shortest+0xa84>)
 800f7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ac:	d105      	bne.n	800f7ba <run_shortest+0x8d2>
					pass_count++;
 800f7ae:	4b6e      	ldr	r3, [pc, #440]	; (800f968 <run_shortest+0xa80>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	b2da      	uxtb	r2, r3
 800f7b6:	4b6c      	ldr	r3, [pc, #432]	; (800f968 <run_shortest+0xa80>)
 800f7b8:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f7ba:	4b6b      	ldr	r3, [pc, #428]	; (800f968 <run_shortest+0xa80>)
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	4b6a      	ldr	r3, [pc, #424]	; (800f96c <run_shortest+0xa84>)
 800f7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ca:	d105      	bne.n	800f7d8 <run_shortest+0x8f0>
					pass_count++;
 800f7cc:	4b66      	ldr	r3, [pc, #408]	; (800f968 <run_shortest+0xa80>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	b2da      	uxtb	r2, r3
 800f7d4:	4b64      	ldr	r3, [pc, #400]	; (800f968 <run_shortest+0xa80>)
 800f7d6:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800f7d8:	4b63      	ldr	r3, [pc, #396]	; (800f968 <run_shortest+0xa80>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b63      	ldr	r3, [pc, #396]	; (800f96c <run_shortest+0xa84>)
 800f7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e4:	f113 0f03 	cmn.w	r3, #3
 800f7e8:	f2c0 80ad 	blt.w	800f946 <run_shortest+0xa5e>
					slant_count = pass_count;
 800f7ec:	4b5e      	ldr	r3, [pc, #376]	; (800f968 <run_shortest+0xa80>)
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800f7f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f7f8:	4a5c      	ldr	r2, [pc, #368]	; (800f96c <run_shortest+0xa84>)
 800f7fa:	2133      	movs	r1, #51	; 0x33
 800f7fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800f800:	4b59      	ldr	r3, [pc, #356]	; (800f968 <run_shortest+0xa80>)
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	3301      	adds	r3, #1
 800f806:	b2da      	uxtb	r2, r3
 800f808:	4b57      	ldr	r3, [pc, #348]	; (800f968 <run_shortest+0xa80>)
 800f80a:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800f80c:	e09b      	b.n	800f946 <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f80e:	4b56      	ldr	r3, [pc, #344]	; (800f968 <run_shortest+0xa80>)
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	461a      	mov	r2, r3
 800f814:	4b55      	ldr	r3, [pc, #340]	; (800f96c <run_shortest+0xa84>)
 800f816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81e:	d105      	bne.n	800f82c <run_shortest+0x944>
						pass_count++;
 800f820:	4b51      	ldr	r3, [pc, #324]	; (800f968 <run_shortest+0xa80>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	3301      	adds	r3, #1
 800f826:	b2da      	uxtb	r2, r3
 800f828:	4b4f      	ldr	r3, [pc, #316]	; (800f968 <run_shortest+0xa80>)
 800f82a:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800f82c:	4b4e      	ldr	r3, [pc, #312]	; (800f968 <run_shortest+0xa80>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	461a      	mov	r2, r3
 800f832:	4b4e      	ldr	r3, [pc, #312]	; (800f96c <run_shortest+0xa84>)
 800f834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f838:	f113 0f0c 	cmn.w	r3, #12
 800f83c:	f000 808d 	beq.w	800f95a <run_shortest+0xa72>
 800f840:	4b49      	ldr	r3, [pc, #292]	; (800f968 <run_shortest+0xa80>)
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	461a      	mov	r2, r3
 800f846:	4b49      	ldr	r3, [pc, #292]	; (800f96c <run_shortest+0xa84>)
 800f848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f84c:	f113 0f0d 	cmn.w	r3, #13
 800f850:	f000 8083 	beq.w	800f95a <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800f854:	4b44      	ldr	r3, [pc, #272]	; (800f968 <run_shortest+0xa80>)
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	461a      	mov	r2, r3
 800f85a:	4b44      	ldr	r3, [pc, #272]	; (800f96c <run_shortest+0xa84>)
 800f85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f860:	f113 0f0e 	cmn.w	r3, #14
 800f864:	d079      	beq.n	800f95a <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800f866:	4b40      	ldr	r3, [pc, #256]	; (800f968 <run_shortest+0xa80>)
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	461a      	mov	r2, r3
 800f86c:	4b3f      	ldr	r3, [pc, #252]	; (800f96c <run_shortest+0xa84>)
 800f86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f872:	f113 0f0f 	cmn.w	r3, #15
 800f876:	d070      	beq.n	800f95a <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800f878:	4b3b      	ldr	r3, [pc, #236]	; (800f968 <run_shortest+0xa80>)
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	461a      	mov	r2, r3
 800f87e:	4b3b      	ldr	r3, [pc, #236]	; (800f96c <run_shortest+0xa84>)
 800f880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f886:	429a      	cmp	r2, r3
 800f888:	d127      	bne.n	800f8da <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800f88a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f88e:	4a37      	ldr	r2, [pc, #220]	; (800f96c <run_shortest+0xa84>)
 800f890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f894:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f898:	3a01      	subs	r2, #1
 800f89a:	4934      	ldr	r1, [pc, #208]	; (800f96c <run_shortest+0xa84>)
 800f89c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800f8a0:	4b31      	ldr	r3, [pc, #196]	; (800f968 <run_shortest+0xa80>)
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800f8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8aa:	f113 0f02 	cmn.w	r3, #2
 800f8ae:	d107      	bne.n	800f8c0 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800f8b0:	4b2d      	ldr	r3, [pc, #180]	; (800f968 <run_shortest+0xa80>)
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	4b2d      	ldr	r3, [pc, #180]	; (800f96c <run_shortest+0xa84>)
 800f8b8:	f06f 020f 	mvn.w	r2, #15
 800f8bc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	f113 0f03 	cmn.w	r3, #3
 800f8c6:	d138      	bne.n	800f93a <run_shortest+0xa52>
							pass[pass_count] = -17;
 800f8c8:	4b27      	ldr	r3, [pc, #156]	; (800f968 <run_shortest+0xa80>)
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	4b27      	ldr	r3, [pc, #156]	; (800f96c <run_shortest+0xa84>)
 800f8d0:	f06f 0210 	mvn.w	r2, #16
 800f8d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f8d8:	e02f      	b.n	800f93a <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800f8da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8de:	4a23      	ldr	r2, [pc, #140]	; (800f96c <run_shortest+0xa84>)
 800f8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8e4:	2b31      	cmp	r3, #49	; 0x31
 800f8e6:	dd08      	ble.n	800f8fa <run_shortest+0xa12>
							pass[pass_count] = -1;
 800f8e8:	4b1f      	ldr	r3, [pc, #124]	; (800f968 <run_shortest+0xa80>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	4b1f      	ldr	r3, [pc, #124]	; (800f96c <run_shortest+0xa84>)
 800f8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f8f8:	e009      	b.n	800f90e <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800f8fa:	4b1b      	ldr	r3, [pc, #108]	; (800f968 <run_shortest+0xa80>)
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800f902:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f906:	4a19      	ldr	r2, [pc, #100]	; (800f96c <run_shortest+0xa84>)
 800f908:	2132      	movs	r1, #50	; 0x32
 800f90a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800f90e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f912:	4a16      	ldr	r2, [pc, #88]	; (800f96c <run_shortest+0xa84>)
 800f914:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f918:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f91c:	3201      	adds	r2, #1
 800f91e:	4913      	ldr	r1, [pc, #76]	; (800f96c <run_shortest+0xa84>)
 800f920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	f113 0f02 	cmn.w	r3, #2
 800f92a:	d103      	bne.n	800f934 <run_shortest+0xa4c>
							slant_direction = -3;
 800f92c:	f06f 0302 	mvn.w	r3, #2
 800f930:	63bb      	str	r3, [r7, #56]	; 0x38
 800f932:	e002      	b.n	800f93a <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800f934:	f06f 0301 	mvn.w	r3, #1
 800f938:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800f93a:	4b0b      	ldr	r3, [pc, #44]	; (800f968 <run_shortest+0xa80>)
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	3301      	adds	r3, #1
 800f940:	b2da      	uxtb	r2, r3
 800f942:	4b09      	ldr	r3, [pc, #36]	; (800f968 <run_shortest+0xa80>)
 800f944:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800f946:	4b08      	ldr	r3, [pc, #32]	; (800f968 <run_shortest+0xa80>)
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	461a      	mov	r2, r3
 800f94c:	4b07      	ldr	r3, [pc, #28]	; (800f96c <run_shortest+0xa84>)
 800f94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f952:	f113 0f03 	cmn.w	r3, #3
 800f956:	f6bf af5a 	bge.w	800f80e <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800f95a:	4b03      	ldr	r3, [pc, #12]	; (800f968 <run_shortest+0xa80>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	3301      	adds	r3, #1
 800f960:	b2da      	uxtb	r2, r3
 800f962:	4b01      	ldr	r3, [pc, #4]	; (800f968 <run_shortest+0xa80>)
 800f964:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f966:	e6bb      	b.n	800f6e0 <run_shortest+0x7f8>
 800f968:	20000828 	.word	0x20000828
 800f96c:	2000083c 	.word	0x2000083c
				break;
 800f970:	bf00      	nop
		}
		pass_count=0;
 800f972:	4bb3      	ldr	r3, [pc, #716]	; (800fc40 <run_shortest+0xd58>)
 800f974:	2200      	movs	r2, #0
 800f976:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800f978:	4bb1      	ldr	r3, [pc, #708]	; (800fc40 <run_shortest+0xd58>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	461a      	mov	r2, r3
 800f97e:	4bb1      	ldr	r3, [pc, #708]	; (800fc44 <run_shortest+0xd5c>)
 800f980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f984:	2b32      	cmp	r3, #50	; 0x32
 800f986:	d107      	bne.n	800f998 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800f988:	4bad      	ldr	r3, [pc, #692]	; (800fc40 <run_shortest+0xd58>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	4619      	mov	r1, r3
 800f98e:	4bad      	ldr	r3, [pc, #692]	; (800fc44 <run_shortest+0xd5c>)
 800f990:	f04f 32ff 	mov.w	r2, #4294967295
 800f994:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800f998:	4ba9      	ldr	r3, [pc, #676]	; (800fc40 <run_shortest+0xd58>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	461a      	mov	r2, r3
 800f99e:	4ba9      	ldr	r3, [pc, #676]	; (800fc44 <run_shortest+0xd5c>)
 800f9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d006      	beq.n	800f9b6 <run_shortest+0xace>
				break;
			}
			pass_count++;
 800f9a8:	4ba5      	ldr	r3, [pc, #660]	; (800fc40 <run_shortest+0xd58>)
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	b2da      	uxtb	r2, r3
 800f9b0:	4ba3      	ldr	r3, [pc, #652]	; (800fc40 <run_shortest+0xd58>)
 800f9b2:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800f9b4:	e7e0      	b.n	800f978 <run_shortest+0xa90>
				break;
 800f9b6:	bf00      	nop
		}

	}
}
	int j = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800f9bc:	e00b      	b.n	800f9d6 <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800f9be:	4aa1      	ldr	r2, [pc, #644]	; (800fc44 <run_shortest+0xd5c>)
 800f9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9ca:	489f      	ldr	r0, [pc, #636]	; (800fc48 <run_shortest+0xd60>)
 800f9cc:	f00f fea6 	bl	801f71c <iprintf>
		j++;
 800f9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800f9d6:	4a9b      	ldr	r2, [pc, #620]	; (800fc44 <run_shortest+0xd5c>)
 800f9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d1ed      	bne.n	800f9be <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800f9e6:	e002      	b.n	800f9ee <run_shortest+0xb06>
		pass_count2++;
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800f9ee:	4a95      	ldr	r2, [pc, #596]	; (800fc44 <run_shortest+0xd5c>)
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fa:	d0f5      	beq.n	800f9e8 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800f9fc:	4a91      	ldr	r2, [pc, #580]	; (800fc44 <run_shortest+0xd5c>)
 800f9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa04:	934e      	str	r3, [sp, #312]	; 0x138
 800fa06:	4668      	mov	r0, sp
 800fa08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fa0c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fa10:	4619      	mov	r1, r3
 800fa12:	f00f fa03 	bl	801ee1c <memcpy>
 800fa16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fa1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa1c:	f007 f9a8 	bl	8016d70 <get_center_velocity>
 800fa20:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fa24:	6a38      	ldr	r0, [r7, #32]
 800fa26:	f7f0 fdb7 	bl	8000598 <__aeabi_f2d>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa30:	4886      	ldr	r0, [pc, #536]	; (800fc4c <run_shortest+0xd64>)
 800fa32:	f00f fe73 	bl	801f71c <iprintf>

	HAL_Delay(500);
 800fa36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fa3a:	f007 ff1d 	bl	8017878 <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fa3e:	2001      	movs	r0, #1
 800fa40:	f7f7 ffac 	bl	800799c <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fa44:	2003      	movs	r0, #3
 800fa46:	f7f7 ffdb 	bl	8007a00 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fa4a:	2003      	movs	r0, #3
 800fa4c:	f7f7 ffb0 	bl	80079b0 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fa50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fa54:	f7f8 fad4 	bl	8008000 <wait_ms_NoReset>
	no_safty = 1;
 800fa58:	4b7d      	ldr	r3, [pc, #500]	; (800fc50 <run_shortest+0xd68>)
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fa5e:	4b7c      	ldr	r3, [pc, #496]	; (800fc50 <run_shortest+0xd68>)
 800fa60:	2200      	movs	r2, #0
 800fa62:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fa64:	f7f4 fe9e 	bl	80047a4 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fa68:	7abb      	ldrb	r3, [r7, #10]
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d12d      	bne.n	800faca <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f7f0 fd92 	bl	8000598 <__aeabi_f2d>
 800fa74:	a370      	add	r3, pc, #448	; (adr r3, 800fc38 <run_shortest+0xd50>)
 800fa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7a:	f7f0 fde5 	bl	8000648 <__aeabi_dmul>
 800fa7e:	4602      	mov	r2, r0
 800fa80:	460b      	mov	r3, r1
 800fa82:	4614      	mov	r4, r2
 800fa84:	461d      	mov	r5, r3
 800fa86:	4b73      	ldr	r3, [pc, #460]	; (800fc54 <run_shortest+0xd6c>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f0 fd84 	bl	8000598 <__aeabi_f2d>
 800fa90:	4602      	mov	r2, r0
 800fa92:	460b      	mov	r3, r1
 800fa94:	4620      	mov	r0, r4
 800fa96:	4629      	mov	r1, r5
 800fa98:	f7f0 ff00 	bl	800089c <__aeabi_ddiv>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	460b      	mov	r3, r1
 800faa0:	4610      	mov	r0, r2
 800faa2:	4619      	mov	r1, r3
 800faa4:	f7f1 f8a8 	bl	8000bf8 <__aeabi_d2f>
 800faa8:	4603      	mov	r3, r0
 800faaa:	ee00 3a10 	vmov	s0, r3
 800faae:	f7f8 f813 	bl	8007ad8 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fab2:	f7f7 fffd 	bl	8007ab0 <pl_FunMotor_start>
		HAL_Delay(600);
 800fab6:	f44f 7016 	mov.w	r0, #600	; 0x258
 800faba:	f007 fedd 	bl	8017878 <HAL_Delay>
		reset_gyro();
 800fabe:	f7f1 fe03 	bl	80016c8 <reset_gyro>
		reset_speed();
 800fac2:	f7f1 faa9 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fac6:	f7f4 fe6d 	bl	80047a4 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800faca:	4b63      	ldr	r3, [pc, #396]	; (800fc58 <run_shortest+0xd70>)
 800facc:	2201      	movs	r2, #1
 800face:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fad0:	4b62      	ldr	r3, [pc, #392]	; (800fc5c <run_shortest+0xd74>)
 800fad2:	2201      	movs	r2, #1
 800fad4:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fad6:	4b62      	ldr	r3, [pc, #392]	; (800fc60 <run_shortest+0xd78>)
 800fad8:	2212      	movs	r2, #18
 800fada:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fadc:	4b61      	ldr	r3, [pc, #388]	; (800fc64 <run_shortest+0xd7c>)
 800fade:	2200      	movs	r2, #0
 800fae0:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fae2:	4b57      	ldr	r3, [pc, #348]	; (800fc40 <run_shortest+0xd58>)
 800fae4:	2200      	movs	r2, #0
 800fae6:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fae8:	2301      	movs	r3, #1
 800faea:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800faec:	2300      	movs	r3, #0
 800faee:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800faf0:	2300      	movs	r3, #0
 800faf2:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800faf4:	2300      	movs	r3, #0
 800faf6:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fafc:	e002      	b.n	800fb04 <run_shortest+0xc1c>
		pass_count2++;
 800fafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb00:	3301      	adds	r3, #1
 800fb02:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fb04:	4a4f      	ldr	r2, [pc, #316]	; (800fc44 <run_shortest+0xd5c>)
 800fb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb10:	d0f5      	beq.n	800fafe <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fb12:	4a4c      	ldr	r2, [pc, #304]	; (800fc44 <run_shortest+0xd5c>)
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb1a:	934e      	str	r3, [sp, #312]	; 0x138
 800fb1c:	4668      	mov	r0, sp
 800fb1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fb22:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fb26:	4619      	mov	r1, r3
 800fb28:	f00f f978 	bl	801ee1c <memcpy>
 800fb2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fb30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb32:	f007 f91d 	bl	8016d70 <get_center_velocity>
 800fb36:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fb3a:	edd7 7a08 	vldr	s15, [r7, #32]
 800fb3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fb42:	ee17 0a90 	vmov	r0, s15
 800fb46:	f7f0 fd27 	bl	8000598 <__aeabi_f2d>
 800fb4a:	f04f 0200 	mov.w	r2, #0
 800fb4e:	4b46      	ldr	r3, [pc, #280]	; (800fc68 <run_shortest+0xd80>)
 800fb50:	f7f0 fea4 	bl	800089c <__aeabi_ddiv>
 800fb54:	4602      	mov	r2, r0
 800fb56:	460b      	mov	r3, r1
 800fb58:	4610      	mov	r0, r2
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	f04f 0200 	mov.w	r2, #0
 800fb60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb64:	f7f0 fe9a 	bl	800089c <__aeabi_ddiv>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4610      	mov	r0, r2
 800fb6e:	4619      	mov	r1, r3
 800fb70:	f7f1 f842 	bl	8000bf8 <__aeabi_d2f>
 800fb74:	4603      	mov	r3, r0
 800fb76:	69b8      	ldr	r0, [r7, #24]
 800fb78:	ee02 3a10 	vmov	s4, r3
 800fb7c:	edd7 1a08 	vldr	s3, [r7, #32]
 800fb80:	ed97 1a08 	vldr	s2, [r7, #32]
 800fb84:	eddf 0a39 	vldr	s1, [pc, #228]	; 800fc6c <run_shortest+0xd84>
 800fb88:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fb8c:	f7f3 f9ee 	bl	8002f6c <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fb90:	4b2b      	ldr	r3, [pc, #172]	; (800fc40 <run_shortest+0xd58>)
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	3301      	adds	r3, #1
 800fb96:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fb98:	e002      	b.n	800fba0 <run_shortest+0xcb8>
			pass_count2++;
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fba0:	4a28      	ldr	r2, [pc, #160]	; (800fc44 <run_shortest+0xd5c>)
 800fba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbac:	d0f5      	beq.n	800fb9a <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fbae:	4a25      	ldr	r2, [pc, #148]	; (800fc44 <run_shortest+0xd5c>)
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbb6:	934e      	str	r3, [sp, #312]	; 0x138
 800fbb8:	4668      	mov	r0, sp
 800fbba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fbbe:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	f00f f92a 	bl	801ee1c <memcpy>
 800fbc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fbcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbce:	f007 f8cf 	bl	8016d70 <get_center_velocity>
 800fbd2:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fbd6:	4b1a      	ldr	r3, [pc, #104]	; (800fc40 <run_shortest+0xd58>)
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	4b19      	ldr	r3, [pc, #100]	; (800fc44 <run_shortest+0xd5c>)
 800fbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe6:	d106      	bne.n	800fbf6 <run_shortest+0xd0e>
			pass_count++;
 800fbe8:	4b15      	ldr	r3, [pc, #84]	; (800fc40 <run_shortest+0xd58>)
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	3301      	adds	r3, #1
 800fbee:	b2da      	uxtb	r2, r3
 800fbf0:	4b13      	ldr	r3, [pc, #76]	; (800fc40 <run_shortest+0xd58>)
 800fbf2:	701a      	strb	r2, [r3, #0]
 800fbf4:	e2a1      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fbf6:	4b12      	ldr	r3, [pc, #72]	; (800fc40 <run_shortest+0xd58>)
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	4b11      	ldr	r3, [pc, #68]	; (800fc44 <run_shortest+0xd5c>)
 800fbfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc02:	f113 0f02 	cmn.w	r3, #2
 800fc06:	d133      	bne.n	800fc70 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fc08:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fc0c:	9303      	str	r3, [sp, #12]
 800fc0e:	2301      	movs	r3, #1
 800fc10:	9302      	str	r3, [sp, #8]
 800fc12:	2300      	movs	r3, #0
 800fc14:	9301      	str	r3, [sp, #4]
 800fc16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fc1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc20:	ed97 0a08 	vldr	s0, [r7, #32]
 800fc24:	f7fa fa10 	bl	800a048 <slalomR>

			pass_count++;
 800fc28:	4b05      	ldr	r3, [pc, #20]	; (800fc40 <run_shortest+0xd58>)
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	b2da      	uxtb	r2, r3
 800fc30:	4b03      	ldr	r3, [pc, #12]	; (800fc40 <run_shortest+0xd58>)
 800fc32:	701a      	strb	r2, [r3, #0]
 800fc34:	e281      	b.n	801013a <run_shortest+0x1252>
 800fc36:	bf00      	nop
 800fc38:	cccccccd 	.word	0xcccccccd
 800fc3c:	4010cccc 	.word	0x4010cccc
 800fc40:	20000828 	.word	0x20000828
 800fc44:	2000083c 	.word	0x2000083c
 800fc48:	08021f34 	.word	0x08021f34
 800fc4c:	08021f4c 	.word	0x08021f4c
 800fc50:	20000806 	.word	0x20000806
 800fc54:	200004d4 	.word	0x200004d4
 800fc58:	20000834 	.word	0x20000834
 800fc5c:	20000808 	.word	0x20000808
 800fc60:	2000d96c 	.word	0x2000d96c
 800fc64:	20000830 	.word	0x20000830
 800fc68:	40290000 	.word	0x40290000
 800fc6c:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800fc70:	4baa      	ldr	r3, [pc, #680]	; (800ff1c <run_shortest+0x1034>)
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	461a      	mov	r2, r3
 800fc76:	4baa      	ldr	r3, [pc, #680]	; (800ff20 <run_shortest+0x1038>)
 800fc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc7c:	f113 0f03 	cmn.w	r3, #3
 800fc80:	d116      	bne.n	800fcb0 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fc82:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fc86:	9303      	str	r3, [sp, #12]
 800fc88:	2301      	movs	r3, #1
 800fc8a:	9302      	str	r3, [sp, #8]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	9301      	str	r3, [sp, #4]
 800fc90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fc98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc9a:	ed97 0a08 	vldr	s0, [r7, #32]
 800fc9e:	f7fa fb8d 	bl	800a3bc <slalomL>

			pass_count++;
 800fca2:	4b9e      	ldr	r3, [pc, #632]	; (800ff1c <run_shortest+0x1034>)
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	3301      	adds	r3, #1
 800fca8:	b2da      	uxtb	r2, r3
 800fcaa:	4b9c      	ldr	r3, [pc, #624]	; (800ff1c <run_shortest+0x1034>)
 800fcac:	701a      	strb	r2, [r3, #0]
 800fcae:	e244      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800fcb0:	4b9a      	ldr	r3, [pc, #616]	; (800ff1c <run_shortest+0x1034>)
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	4b9a      	ldr	r3, [pc, #616]	; (800ff20 <run_shortest+0x1038>)
 800fcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcbc:	f113 0f04 	cmn.w	r3, #4
 800fcc0:	d115      	bne.n	800fcee <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800fcc2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fcc6:	9302      	str	r3, [sp, #8]
 800fcc8:	2300      	movs	r3, #0
 800fcca:	9301      	str	r3, [sp, #4]
 800fccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcd0:	9300      	str	r3, [sp, #0]
 800fcd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800fcd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcd8:	ed97 0a08 	vldr	s0, [r7, #32]
 800fcdc:	f7fa fd24 	bl	800a728 <turn90R>
			pass_count++;
 800fce0:	4b8e      	ldr	r3, [pc, #568]	; (800ff1c <run_shortest+0x1034>)
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	3301      	adds	r3, #1
 800fce6:	b2da      	uxtb	r2, r3
 800fce8:	4b8c      	ldr	r3, [pc, #560]	; (800ff1c <run_shortest+0x1034>)
 800fcea:	701a      	strb	r2, [r3, #0]
 800fcec:	e225      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800fcee:	4b8b      	ldr	r3, [pc, #556]	; (800ff1c <run_shortest+0x1034>)
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	4b8a      	ldr	r3, [pc, #552]	; (800ff20 <run_shortest+0x1038>)
 800fcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcfa:	f113 0f05 	cmn.w	r3, #5
 800fcfe:	d115      	bne.n	800fd2c <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800fd00:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd04:	9302      	str	r3, [sp, #8]
 800fd06:	2300      	movs	r3, #0
 800fd08:	9301      	str	r3, [sp, #4]
 800fd0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fd14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd16:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd1a:	f7fa fe6f 	bl	800a9fc <turn90L>
			pass_count++;
 800fd1e:	4b7f      	ldr	r3, [pc, #508]	; (800ff1c <run_shortest+0x1034>)
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	3301      	adds	r3, #1
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	4b7d      	ldr	r3, [pc, #500]	; (800ff1c <run_shortest+0x1034>)
 800fd28:	701a      	strb	r2, [r3, #0]
 800fd2a:	e206      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800fd2c:	4b7b      	ldr	r3, [pc, #492]	; (800ff1c <run_shortest+0x1034>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	461a      	mov	r2, r3
 800fd32:	4b7b      	ldr	r3, [pc, #492]	; (800ff20 <run_shortest+0x1038>)
 800fd34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd38:	f113 0f06 	cmn.w	r3, #6
 800fd3c:	d115      	bne.n	800fd6a <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800fd3e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd42:	9302      	str	r3, [sp, #8]
 800fd44:	2300      	movs	r3, #0
 800fd46:	9301      	str	r3, [sp, #4]
 800fd48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fd52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd54:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd58:	f7fa ffb4 	bl	800acc4 <turn180R>
			pass_count++;
 800fd5c:	4b6f      	ldr	r3, [pc, #444]	; (800ff1c <run_shortest+0x1034>)
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	3301      	adds	r3, #1
 800fd62:	b2da      	uxtb	r2, r3
 800fd64:	4b6d      	ldr	r3, [pc, #436]	; (800ff1c <run_shortest+0x1034>)
 800fd66:	701a      	strb	r2, [r3, #0]
 800fd68:	e1e7      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 800fd6a:	4b6c      	ldr	r3, [pc, #432]	; (800ff1c <run_shortest+0x1034>)
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	461a      	mov	r2, r3
 800fd70:	4b6b      	ldr	r3, [pc, #428]	; (800ff20 <run_shortest+0x1038>)
 800fd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd76:	f113 0f07 	cmn.w	r3, #7
 800fd7a:	d115      	bne.n	800fda8 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800fd7c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd80:	9302      	str	r3, [sp, #8]
 800fd82:	2300      	movs	r3, #0
 800fd84:	9301      	str	r3, [sp, #4]
 800fd86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fd90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd92:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd96:	f7fb f8ff 	bl	800af98 <turn180L>
			pass_count++;
 800fd9a:	4b60      	ldr	r3, [pc, #384]	; (800ff1c <run_shortest+0x1034>)
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	b2da      	uxtb	r2, r3
 800fda2:	4b5e      	ldr	r3, [pc, #376]	; (800ff1c <run_shortest+0x1034>)
 800fda4:	701a      	strb	r2, [r3, #0]
 800fda6:	e1c8      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 800fda8:	4b5c      	ldr	r3, [pc, #368]	; (800ff1c <run_shortest+0x1034>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	461a      	mov	r2, r3
 800fdae:	4b5c      	ldr	r3, [pc, #368]	; (800ff20 <run_shortest+0x1038>)
 800fdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb4:	f113 0f08 	cmn.w	r3, #8
 800fdb8:	d115      	bne.n	800fde6 <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 800fdba:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fdbe:	9302      	str	r3, [sp, #8]
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	9301      	str	r3, [sp, #4]
 800fdc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800fdce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdd0:	ed97 0a08 	vldr	s0, [r7, #32]
 800fdd4:	f7fb fa48 	bl	800b268 <turn45inR>
			pass_count++;
 800fdd8:	4b50      	ldr	r3, [pc, #320]	; (800ff1c <run_shortest+0x1034>)
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	3301      	adds	r3, #1
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	4b4e      	ldr	r3, [pc, #312]	; (800ff1c <run_shortest+0x1034>)
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	e1a9      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 800fde6:	4b4d      	ldr	r3, [pc, #308]	; (800ff1c <run_shortest+0x1034>)
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	461a      	mov	r2, r3
 800fdec:	4b4c      	ldr	r3, [pc, #304]	; (800ff20 <run_shortest+0x1038>)
 800fdee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdf2:	f113 0f09 	cmn.w	r3, #9
 800fdf6:	d115      	bne.n	800fe24 <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 800fdf8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fdfc:	9302      	str	r3, [sp, #8]
 800fdfe:	2300      	movs	r3, #0
 800fe00:	9301      	str	r3, [sp, #4]
 800fe02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800fe0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe0e:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe12:	f7fb fc71 	bl	800b6f8 <turn45inL>
			pass_count++;
 800fe16:	4b41      	ldr	r3, [pc, #260]	; (800ff1c <run_shortest+0x1034>)
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	4b3f      	ldr	r3, [pc, #252]	; (800ff1c <run_shortest+0x1034>)
 800fe20:	701a      	strb	r2, [r3, #0]
 800fe22:	e18a      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 800fe24:	4b3d      	ldr	r3, [pc, #244]	; (800ff1c <run_shortest+0x1034>)
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	461a      	mov	r2, r3
 800fe2a:	4b3d      	ldr	r3, [pc, #244]	; (800ff20 <run_shortest+0x1038>)
 800fe2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe30:	f113 0f0a 	cmn.w	r3, #10
 800fe34:	d115      	bne.n	800fe62 <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 800fe36:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe3a:	9302      	str	r3, [sp, #8]
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	9301      	str	r3, [sp, #4]
 800fe40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800fe4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe4c:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe50:	f7fb fe92 	bl	800bb78 <turn135inR>
			pass_count++;
 800fe54:	4b31      	ldr	r3, [pc, #196]	; (800ff1c <run_shortest+0x1034>)
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	b2da      	uxtb	r2, r3
 800fe5c:	4b2f      	ldr	r3, [pc, #188]	; (800ff1c <run_shortest+0x1034>)
 800fe5e:	701a      	strb	r2, [r3, #0]
 800fe60:	e16b      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 800fe62:	4b2e      	ldr	r3, [pc, #184]	; (800ff1c <run_shortest+0x1034>)
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	461a      	mov	r2, r3
 800fe68:	4b2d      	ldr	r3, [pc, #180]	; (800ff20 <run_shortest+0x1038>)
 800fe6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe6e:	f113 0f0b 	cmn.w	r3, #11
 800fe72:	d115      	bne.n	800fea0 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 800fe74:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe78:	9302      	str	r3, [sp, #8]
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9301      	str	r3, [sp, #4]
 800fe7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fe82:	9300      	str	r3, [sp, #0]
 800fe84:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800fe88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe8a:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe8e:	f7fc f8bb 	bl	800c008 <turn135inL>
			pass_count++;
 800fe92:	4b22      	ldr	r3, [pc, #136]	; (800ff1c <run_shortest+0x1034>)
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	3301      	adds	r3, #1
 800fe98:	b2da      	uxtb	r2, r3
 800fe9a:	4b20      	ldr	r3, [pc, #128]	; (800ff1c <run_shortest+0x1034>)
 800fe9c:	701a      	strb	r2, [r3, #0]
 800fe9e:	e14c      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 800fea0:	4b1e      	ldr	r3, [pc, #120]	; (800ff1c <run_shortest+0x1034>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	461a      	mov	r2, r3
 800fea6:	4b1e      	ldr	r3, [pc, #120]	; (800ff20 <run_shortest+0x1038>)
 800fea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feac:	f113 0f0c 	cmn.w	r3, #12
 800feb0:	d115      	bne.n	800fede <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 800feb2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800feb6:	9302      	str	r3, [sp, #8]
 800feb8:	2300      	movs	r3, #0
 800feba:	9301      	str	r3, [sp, #4]
 800febc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fec8:	ed97 0a08 	vldr	s0, [r7, #32]
 800fecc:	f7fc fae0 	bl	800c490 <turn45outR>
			pass_count++;
 800fed0:	4b12      	ldr	r3, [pc, #72]	; (800ff1c <run_shortest+0x1034>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	3301      	adds	r3, #1
 800fed6:	b2da      	uxtb	r2, r3
 800fed8:	4b10      	ldr	r3, [pc, #64]	; (800ff1c <run_shortest+0x1034>)
 800feda:	701a      	strb	r2, [r3, #0]
 800fedc:	e12d      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 800fede:	4b0f      	ldr	r3, [pc, #60]	; (800ff1c <run_shortest+0x1034>)
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	461a      	mov	r2, r3
 800fee4:	4b0e      	ldr	r3, [pc, #56]	; (800ff20 <run_shortest+0x1038>)
 800fee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feea:	f113 0f0d 	cmn.w	r3, #13
 800feee:	d119      	bne.n	800ff24 <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 800fef0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fef4:	9302      	str	r3, [sp, #8]
 800fef6:	2300      	movs	r3, #0
 800fef8:	9301      	str	r3, [sp, #4]
 800fefa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800ff04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff06:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff0a:	f7fc fcb3 	bl	800c874 <turn45outL>
			pass_count++;
 800ff0e:	4b03      	ldr	r3, [pc, #12]	; (800ff1c <run_shortest+0x1034>)
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	3301      	adds	r3, #1
 800ff14:	b2da      	uxtb	r2, r3
 800ff16:	4b01      	ldr	r3, [pc, #4]	; (800ff1c <run_shortest+0x1034>)
 800ff18:	701a      	strb	r2, [r3, #0]
 800ff1a:	e10e      	b.n	801013a <run_shortest+0x1252>
 800ff1c:	20000828 	.word	0x20000828
 800ff20:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 800ff24:	4ba0      	ldr	r3, [pc, #640]	; (80101a8 <run_shortest+0x12c0>)
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	461a      	mov	r2, r3
 800ff2a:	4ba0      	ldr	r3, [pc, #640]	; (80101ac <run_shortest+0x12c4>)
 800ff2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff30:	f113 0f0e 	cmn.w	r3, #14
 800ff34:	d115      	bne.n	800ff62 <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 800ff36:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff3a:	9302      	str	r3, [sp, #8]
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	9301      	str	r3, [sp, #4]
 800ff40:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ff4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff4c:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff50:	f7fc fe78 	bl	800cc44 <turn135outR>
			pass_count++;
 800ff54:	4b94      	ldr	r3, [pc, #592]	; (80101a8 <run_shortest+0x12c0>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	b2da      	uxtb	r2, r3
 800ff5c:	4b92      	ldr	r3, [pc, #584]	; (80101a8 <run_shortest+0x12c0>)
 800ff5e:	701a      	strb	r2, [r3, #0]
 800ff60:	e0eb      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 800ff62:	4b91      	ldr	r3, [pc, #580]	; (80101a8 <run_shortest+0x12c0>)
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	461a      	mov	r2, r3
 800ff68:	4b90      	ldr	r3, [pc, #576]	; (80101ac <run_shortest+0x12c4>)
 800ff6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff6e:	f113 0f0f 	cmn.w	r3, #15
 800ff72:	d115      	bne.n	800ffa0 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 800ff74:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff78:	9302      	str	r3, [sp, #8]
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800ff88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff8a:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff8e:	f7fd f84b 	bl	800d028 <turn135outL>
			pass_count++;
 800ff92:	4b85      	ldr	r3, [pc, #532]	; (80101a8 <run_shortest+0x12c0>)
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	3301      	adds	r3, #1
 800ff98:	b2da      	uxtb	r2, r3
 800ff9a:	4b83      	ldr	r3, [pc, #524]	; (80101a8 <run_shortest+0x12c0>)
 800ff9c:	701a      	strb	r2, [r3, #0]
 800ff9e:	e0cc      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 800ffa0:	4b81      	ldr	r3, [pc, #516]	; (80101a8 <run_shortest+0x12c0>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	4b81      	ldr	r3, [pc, #516]	; (80101ac <run_shortest+0x12c4>)
 800ffa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffac:	f113 0f10 	cmn.w	r3, #16
 800ffb0:	d115      	bne.n	800ffde <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 800ffb2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffb6:	9302      	str	r3, [sp, #8]
 800ffb8:	2300      	movs	r3, #0
 800ffba:	9301      	str	r3, [sp, #4]
 800ffbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ffc0:	9300      	str	r3, [sp, #0]
 800ffc2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ffc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffc8:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffcc:	f7fd fa18 	bl	800d400 <V90R>
			pass_count++;
 800ffd0:	4b75      	ldr	r3, [pc, #468]	; (80101a8 <run_shortest+0x12c0>)
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	b2da      	uxtb	r2, r3
 800ffd8:	4b73      	ldr	r3, [pc, #460]	; (80101a8 <run_shortest+0x12c0>)
 800ffda:	701a      	strb	r2, [r3, #0]
 800ffdc:	e0ad      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 800ffde:	4b72      	ldr	r3, [pc, #456]	; (80101a8 <run_shortest+0x12c0>)
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	4b71      	ldr	r3, [pc, #452]	; (80101ac <run_shortest+0x12c4>)
 800ffe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffea:	f113 0f11 	cmn.w	r3, #17
 800ffee:	d115      	bne.n	801001c <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 800fff0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fff4:	9302      	str	r3, [sp, #8]
 800fff6:	2300      	movs	r3, #0
 800fff8:	9301      	str	r3, [sp, #4]
 800fffa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800fffe:	9300      	str	r3, [sp, #0]
 8010000:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010006:	ed97 0a08 	vldr	s0, [r7, #32]
 801000a:	f7fd fc05 	bl	800d818 <V90L>
			pass_count++;
 801000e:	4b66      	ldr	r3, [pc, #408]	; (80101a8 <run_shortest+0x12c0>)
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	3301      	adds	r3, #1
 8010014:	b2da      	uxtb	r2, r3
 8010016:	4b64      	ldr	r3, [pc, #400]	; (80101a8 <run_shortest+0x12c0>)
 8010018:	701a      	strb	r2, [r3, #0]
 801001a:	e08e      	b.n	801013a <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 801001c:	4b62      	ldr	r3, [pc, #392]	; (80101a8 <run_shortest+0x12c0>)
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	461a      	mov	r2, r3
 8010022:	4b62      	ldr	r3, [pc, #392]	; (80101ac <run_shortest+0x12c4>)
 8010024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010028:	2b00      	cmp	r3, #0
 801002a:	f340 8086 	ble.w	801013a <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 801002e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010030:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 8010032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010034:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 8010036:	4b5c      	ldr	r3, [pc, #368]	; (80101a8 <run_shortest+0x12c0>)
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d013      	beq.n	8010066 <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 801003e:	4b5a      	ldr	r3, [pc, #360]	; (80101a8 <run_shortest+0x12c0>)
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	3b01      	subs	r3, #1
 8010044:	4a59      	ldr	r2, [pc, #356]	; (80101ac <run_shortest+0x12c4>)
 8010046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801004a:	f113 0f02 	cmn.w	r3, #2
 801004e:	d008      	beq.n	8010062 <run_shortest+0x117a>
 8010050:	4b55      	ldr	r3, [pc, #340]	; (80101a8 <run_shortest+0x12c0>)
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	3b01      	subs	r3, #1
 8010056:	4a55      	ldr	r2, [pc, #340]	; (80101ac <run_shortest+0x12c4>)
 8010058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801005c:	f113 0f03 	cmn.w	r3, #3
 8010060:	d101      	bne.n	8010066 <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 8010062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010064:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8010066:	4b50      	ldr	r3, [pc, #320]	; (80101a8 <run_shortest+0x12c0>)
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	3301      	adds	r3, #1
 801006c:	4a4f      	ldr	r2, [pc, #316]	; (80101ac <run_shortest+0x12c4>)
 801006e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010072:	f113 0f02 	cmn.w	r3, #2
 8010076:	d008      	beq.n	801008a <run_shortest+0x11a2>
 8010078:	4b4b      	ldr	r3, [pc, #300]	; (80101a8 <run_shortest+0x12c0>)
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	3301      	adds	r3, #1
 801007e:	4a4b      	ldr	r2, [pc, #300]	; (80101ac <run_shortest+0x12c4>)
 8010080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010084:	f113 0f03 	cmn.w	r3, #3
 8010088:	d101      	bne.n	801008e <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 801008a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801008c:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 801008e:	4b46      	ldr	r3, [pc, #280]	; (80101a8 <run_shortest+0x12c0>)
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	461a      	mov	r2, r3
 8010094:	4b45      	ldr	r3, [pc, #276]	; (80101ac <run_shortest+0x12c4>)
 8010096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801009a:	2b31      	cmp	r3, #49	; 0x31
 801009c:	dd27      	ble.n	80100ee <run_shortest+0x1206>
				mode.WallControlMode=3;
 801009e:	2303      	movs	r3, #3
 80100a0:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 80100a6:	4b40      	ldr	r3, [pc, #256]	; (80101a8 <run_shortest+0x12c0>)
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	461a      	mov	r2, r3
 80100ac:	4b3f      	ldr	r3, [pc, #252]	; (80101ac <run_shortest+0x12c4>)
 80100ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b2:	3b32      	subs	r3, #50	; 0x32
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7f0 fa5d 	bl	8000574 <__aeabi_i2d>
 80100ba:	a339      	add	r3, pc, #228	; (adr r3, 80101a0 <run_shortest+0x12b8>)
 80100bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c0:	f7f0 fac2 	bl	8000648 <__aeabi_dmul>
 80100c4:	4602      	mov	r2, r0
 80100c6:	460b      	mov	r3, r1
 80100c8:	4610      	mov	r0, r2
 80100ca:	4619      	mov	r1, r3
 80100cc:	f7f0 fd94 	bl	8000bf8 <__aeabi_d2f>
 80100d0:	4603      	mov	r3, r0
 80100d2:	69b8      	ldr	r0, [r7, #24]
 80100d4:	ed97 2a04 	vldr	s4, [r7, #16]
 80100d8:	edd7 1a05 	vldr	s3, [r7, #20]
 80100dc:	ed97 1a08 	vldr	s2, [r7, #32]
 80100e0:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80100e4:	ee00 3a10 	vmov	s0, r3
 80100e8:	f7f2 ff40 	bl	8002f6c <straight_table2>
 80100ec:	e01f      	b.n	801012e <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 80100ee:	2301      	movs	r3, #1
 80100f0:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 80100f6:	4b2c      	ldr	r3, [pc, #176]	; (80101a8 <run_shortest+0x12c0>)
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	461a      	mov	r2, r3
 80100fc:	4b2b      	ldr	r3, [pc, #172]	; (80101ac <run_shortest+0x12c4>)
 80100fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010102:	4613      	mov	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4413      	add	r3, r2
 8010108:	011a      	lsls	r2, r3, #4
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	ee07 3a90 	vmov	s15, r3
 8010110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010114:	69b8      	ldr	r0, [r7, #24]
 8010116:	ed97 2a04 	vldr	s4, [r7, #16]
 801011a:	edd7 1a05 	vldr	s3, [r7, #20]
 801011e:	ed97 1a08 	vldr	s2, [r7, #32]
 8010122:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8010126:	eeb0 0a67 	vmov.f32	s0, s15
 801012a:	f7f2 ff1f 	bl	8002f6c <straight_table2>
			}

			pass_count++;
 801012e:	4b1e      	ldr	r3, [pc, #120]	; (80101a8 <run_shortest+0x12c0>)
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	3301      	adds	r3, #1
 8010134:	b2da      	uxtb	r2, r3
 8010136:	4b1c      	ldr	r3, [pc, #112]	; (80101a8 <run_shortest+0x12c0>)
 8010138:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 801013a:	4b1b      	ldr	r3, [pc, #108]	; (80101a8 <run_shortest+0x12c0>)
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	461a      	mov	r2, r3
 8010140:	4b1a      	ldr	r3, [pc, #104]	; (80101ac <run_shortest+0x12c4>)
 8010142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d000      	beq.n	801014c <run_shortest+0x1264>
		pass_count2=pass_count+1;
 801014a:	e521      	b.n	800fb90 <run_shortest+0xca8>
			break;
 801014c:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 801014e:	2301      	movs	r3, #1
 8010150:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 8010152:	2300      	movs	r3, #0
 8010154:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 8010156:	69b8      	ldr	r0, [r7, #24]
 8010158:	ed97 2a04 	vldr	s4, [r7, #16]
 801015c:	edd7 1a05 	vldr	s3, [r7, #20]
 8010160:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80101b0 <run_shortest+0x12c8>
 8010164:	edd7 0a08 	vldr	s1, [r7, #32]
 8010168:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80101b4 <run_shortest+0x12cc>
 801016c:	f7f2 fefe 	bl	8002f6c <straight_table2>
		HAL_Delay(700);
 8010170:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8010174:	f007 fb80 	bl	8017878 <HAL_Delay>
		pl_FunMotor_stop();
 8010178:	f7f7 fca4 	bl	8007ac4 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 801017c:	4b0e      	ldr	r3, [pc, #56]	; (80101b8 <run_shortest+0x12d0>)
 801017e:	2200      	movs	r2, #0
 8010180:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8010182:	4b0e      	ldr	r3, [pc, #56]	; (80101bc <run_shortest+0x12d4>)
 8010184:	2200      	movs	r2, #0
 8010186:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010188:	4b0d      	ldr	r3, [pc, #52]	; (80101c0 <run_shortest+0x12d8>)
 801018a:	2200      	movs	r2, #0
 801018c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 801018e:	2000      	movs	r0, #0
 8010190:	f7f7 fc04 	bl	800799c <pl_DriveMotor_standby>
	t = 0;
 8010194:	4b0b      	ldr	r3, [pc, #44]	; (80101c4 <run_shortest+0x12dc>)
 8010196:	2200      	movs	r2, #0
 8010198:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 801019a:	e034      	b.n	8010206 <run_shortest+0x131e>
 801019c:	f3af 8000 	nop.w
 80101a0:	c022ec18 	.word	0xc022ec18
 80101a4:	404fd1de 	.word	0x404fd1de
 80101a8:	20000828 	.word	0x20000828
 80101ac:	2000083c 	.word	0x2000083c
 80101b0:	00000000 	.word	0x00000000
 80101b4:	42b40000 	.word	0x42b40000
 80101b8:	20000834 	.word	0x20000834
 80101bc:	20000808 	.word	0x20000808
 80101c0:	2000d96c 	.word	0x2000d96c
 80101c4:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 80101c8:	4b2b      	ldr	r3, [pc, #172]	; (8010278 <run_shortest+0x1390>)
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	4b2a      	ldr	r3, [pc, #168]	; (8010278 <run_shortest+0x1390>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	492a      	ldr	r1, [pc, #168]	; (801027c <run_shortest+0x1394>)
 80101d2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80101d6:	4a2a      	ldr	r2, [pc, #168]	; (8010280 <run_shortest+0x1398>)
 80101d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80101dc:	4b26      	ldr	r3, [pc, #152]	; (8010278 <run_shortest+0x1390>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a25      	ldr	r2, [pc, #148]	; (8010278 <run_shortest+0x1390>)
 80101e2:	6812      	ldr	r2, [r2, #0]
 80101e4:	4925      	ldr	r1, [pc, #148]	; (801027c <run_shortest+0x1394>)
 80101e6:	330c      	adds	r3, #12
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	440b      	add	r3, r1
 80101ec:	88d8      	ldrh	r0, [r3, #6]
 80101ee:	4924      	ldr	r1, [pc, #144]	; (8010280 <run_shortest+0x1398>)
 80101f0:	f102 030c 	add.w	r3, r2, #12
 80101f4:	005b      	lsls	r3, r3, #1
 80101f6:	440b      	add	r3, r1
 80101f8:	4602      	mov	r2, r0
 80101fa:	80da      	strh	r2, [r3, #6]
		t++;
 80101fc:	4b1e      	ldr	r3, [pc, #120]	; (8010278 <run_shortest+0x1390>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3301      	adds	r3, #1
 8010202:	4a1d      	ldr	r2, [pc, #116]	; (8010278 <run_shortest+0x1390>)
 8010204:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 8010206:	4b1c      	ldr	r3, [pc, #112]	; (8010278 <run_shortest+0x1390>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2b0e      	cmp	r3, #14
 801020c:	dddc      	ble.n	80101c8 <run_shortest+0x12e0>
	}
	t = 0;
 801020e:	4b1a      	ldr	r3, [pc, #104]	; (8010278 <run_shortest+0x1390>)
 8010210:	2200      	movs	r2, #0
 8010212:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 8010214:	e026      	b.n	8010264 <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 8010216:	4b18      	ldr	r3, [pc, #96]	; (8010278 <run_shortest+0x1390>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a19      	ldr	r2, [pc, #100]	; (8010280 <run_shortest+0x1398>)
 801021c:	331c      	adds	r3, #28
 801021e:	005b      	lsls	r3, r3, #1
 8010220:	4413      	add	r3, r2
 8010222:	889a      	ldrh	r2, [r3, #4]
 8010224:	4b14      	ldr	r3, [pc, #80]	; (8010278 <run_shortest+0x1390>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	43d2      	mvns	r2, r2
 801022a:	b291      	uxth	r1, r2
 801022c:	4a14      	ldr	r2, [pc, #80]	; (8010280 <run_shortest+0x1398>)
 801022e:	331c      	adds	r3, #28
 8010230:	005b      	lsls	r3, r3, #1
 8010232:	4413      	add	r3, r2
 8010234:	460a      	mov	r2, r1
 8010236:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 8010238:	4b0f      	ldr	r3, [pc, #60]	; (8010278 <run_shortest+0x1390>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	4a10      	ldr	r2, [pc, #64]	; (8010280 <run_shortest+0x1398>)
 801023e:	332c      	adds	r3, #44	; 0x2c
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	4413      	add	r3, r2
 8010244:	885a      	ldrh	r2, [r3, #2]
 8010246:	4b0c      	ldr	r3, [pc, #48]	; (8010278 <run_shortest+0x1390>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	43d2      	mvns	r2, r2
 801024c:	b291      	uxth	r1, r2
 801024e:	4a0c      	ldr	r2, [pc, #48]	; (8010280 <run_shortest+0x1398>)
 8010250:	332c      	adds	r3, #44	; 0x2c
 8010252:	005b      	lsls	r3, r3, #1
 8010254:	4413      	add	r3, r2
 8010256:	460a      	mov	r2, r1
 8010258:	805a      	strh	r2, [r3, #2]
		t++;
 801025a:	4b07      	ldr	r3, [pc, #28]	; (8010278 <run_shortest+0x1390>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	3301      	adds	r3, #1
 8010260:	4a05      	ldr	r2, [pc, #20]	; (8010278 <run_shortest+0x1390>)
 8010262:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 8010264:	4b04      	ldr	r3, [pc, #16]	; (8010278 <run_shortest+0x1390>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2b0e      	cmp	r3, #14
 801026a:	ddd4      	ble.n	8010216 <run_shortest+0x132e>
	}

}
 801026c:	bf00      	nop
 801026e:	bf00      	nop
 8010270:	3740      	adds	r7, #64	; 0x40
 8010272:	46bd      	mov	sp, r7
 8010274:	bdb0      	pop	{r4, r5, r7, pc}
 8010276:	bf00      	nop
 8010278:	20000c38 	.word	0x20000c38
 801027c:	20000cb4 	.word	0x20000cb4
 8010280:	20000c3c 	.word	0x20000c3c

08010284 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 8010284:	b580      	push	{r7, lr}
 8010286:	b08a      	sub	sp, #40	; 0x28
 8010288:	af02      	add	r7, sp, #8
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	60b9      	str	r1, [r7, #8]
 801028e:	607a      	str	r2, [r7, #4]
 8010290:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 8010292:	2301      	movs	r3, #1
 8010294:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 8010296:	2301      	movs	r3, #1
 8010298:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 801029a:	2301      	movs	r3, #1
 801029c:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 80102a6:	f107 0114 	add.w	r1, r7, #20
 80102aa:	f107 0318 	add.w	r3, r7, #24
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fd fe3b 	bl	800df2c <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 80102b6:	69b8      	ldr	r0, [r7, #24]
 80102b8:	6979      	ldr	r1, [r7, #20]
 80102ba:	f107 021e 	add.w	r2, r7, #30
 80102be:	f107 031c 	add.w	r3, r7, #28
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	f107 031d 	add.w	r3, r7, #29
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	4613      	mov	r3, r2
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	f000 fe27 	bl	8010f20 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 80102d2:	7fbb      	ldrb	r3, [r7, #30]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d007      	beq.n	80102e8 <decision_kitiku+0x64>
 80102d8:	7f7b      	ldrb	r3, [r7, #29]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d004      	beq.n	80102e8 <decision_kitiku+0x64>
 80102de:	7f3b      	ldrb	r3, [r7, #28]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d001      	beq.n	80102e8 <decision_kitiku+0x64>
 80102e4:	2301      	movs	r3, #1
 80102e6:	e000      	b.n	80102ea <decision_kitiku+0x66>
 80102e8:	2300      	movs	r3, #0
 80102ea:	77fb      	strb	r3, [r7, #31]
 80102ec:	7ffb      	ldrb	r3, [r7, #31]
 80102ee:	f003 0301 	and.w	r3, r3, #1
 80102f2:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 80102f4:	7ffb      	ldrb	r3, [r7, #31]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d02b      	beq.n	8010352 <decision_kitiku+0xce>
 80102fa:	887a      	ldrh	r2, [r7, #2]
 80102fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80102fe:	429a      	cmp	r2, r3
 8010300:	d827      	bhi.n	8010352 <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 8010302:	887a      	ldrh	r2, [r7, #2]
 8010304:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010306:	429a      	cmp	r2, r3
 8010308:	d823      	bhi.n	8010352 <decision_kitiku+0xce>
 801030a:	887a      	ldrh	r2, [r7, #2]
 801030c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801030e:	429a      	cmp	r2, r3
 8010310:	d81f      	bhi.n	8010352 <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2b01      	cmp	r3, #1
 8010316:	d102      	bne.n	801031e <decision_kitiku+0x9a>
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	2b0d      	cmp	r3, #13
 801031c:	dc11      	bgt.n	8010342 <decision_kitiku+0xbe>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2b02      	cmp	r3, #2
 8010322:	d102      	bne.n	801032a <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b0d      	cmp	r3, #13
 8010328:	dc0b      	bgt.n	8010342 <decision_kitiku+0xbe>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b03      	cmp	r3, #3
 801032e:	d102      	bne.n	8010336 <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	2b01      	cmp	r3, #1
 8010334:	dd05      	ble.n	8010342 <decision_kitiku+0xbe>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b04      	cmp	r3, #4
 801033a:	d106      	bne.n	801034a <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2b01      	cmp	r3, #1
 8010340:	dc03      	bgt.n	801034a <decision_kitiku+0xc6>
			kitikukan = 0;
 8010342:	4b08      	ldr	r3, [pc, #32]	; (8010364 <decision_kitiku+0xe0>)
 8010344:	2200      	movs	r2, #0
 8010346:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010348:	e007      	b.n	801035a <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 801034a:	4b06      	ldr	r3, [pc, #24]	; (8010364 <decision_kitiku+0xe0>)
 801034c:	2201      	movs	r2, #1
 801034e:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010350:	e003      	b.n	801035a <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 8010352:	4b04      	ldr	r3, [pc, #16]	; (8010364 <decision_kitiku+0xe0>)
 8010354:	2200      	movs	r2, #0
 8010356:	601a      	str	r2, [r3, #0]
	}


}
 8010358:	bf00      	nop
 801035a:	bf00      	nop
 801035c:	3720      	adds	r7, #32
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	20000838 	.word	0x20000838

08010368 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 8010368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801036a:	b099      	sub	sp, #100	; 0x64
 801036c:	af04      	add	r7, sp, #16
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 8010374:	4b9f      	ldr	r3, [pc, #636]	; (80105f4 <compress_kitiku+0x28c>)
 8010376:	2201      	movs	r2, #1
 8010378:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 801037a:	4b9f      	ldr	r3, [pc, #636]	; (80105f8 <compress_kitiku+0x290>)
 801037c:	2201      	movs	r2, #1
 801037e:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	637b      	str	r3, [r7, #52]	; 0x34
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	633b      	str	r3, [r7, #48]	; 0x30
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 8010392:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801039a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801039c:	4618      	mov	r0, r3
 801039e:	f7fd fdc5 	bl	800df2c <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 80103a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80103aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ac:	627b      	str	r3, [r7, #36]	; 0x24
 80103ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b0:	623b      	str	r3, [r7, #32]
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b4:	61fb      	str	r3, [r7, #28]
 80103b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b8:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 80103ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80103be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80103c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fd fdb1 	bl	800df2c <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 80103ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80103d2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80103d6:	9301      	str	r3, [sp, #4]
 80103d8:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80103dc:	9300      	str	r3, [sp, #0]
 80103de:	4613      	mov	r3, r2
 80103e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103e2:	f000 fd9d 	bl	8010f20 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 80103e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d009      	beq.n	8010402 <compress_kitiku+0x9a>
 80103ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d005      	beq.n	8010402 <compress_kitiku+0x9a>
 80103f6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <compress_kitiku+0x9a>
 80103fe:	2301      	movs	r3, #1
 8010400:	e000      	b.n	8010404 <compress_kitiku+0x9c>
 8010402:	2300      	movs	r3, #0
 8010404:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010408:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801040c:	f003 0301 	and.w	r3, r3, #1
 8010410:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 8010414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010416:	2b04      	cmp	r3, #4
 8010418:	d102      	bne.n	8010420 <compress_kitiku+0xb8>
 801041a:	2301      	movs	r3, #1
 801041c:	64bb      	str	r3, [r7, #72]	; 0x48
 801041e:	e002      	b.n	8010426 <compress_kitiku+0xbe>
 8010420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010422:	3301      	adds	r3, #1
 8010424:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 8010426:	f107 0120 	add.w	r1, r7, #32
 801042a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801042e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010430:	4618      	mov	r0, r3
 8010432:	f7fd fd7b 	bl	800df2c <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 8010436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010438:	6a39      	ldr	r1, [r7, #32]
 801043a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801043e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010442:	9301      	str	r3, [sp, #4]
 8010444:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	4613      	mov	r3, r2
 801044c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801044e:	f000 fd67 	bl	8010f20 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 8010452:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010456:	2b00      	cmp	r3, #0
 8010458:	d009      	beq.n	801046e <compress_kitiku+0x106>
 801045a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801045e:	2b00      	cmp	r3, #0
 8010460:	d005      	beq.n	801046e <compress_kitiku+0x106>
 8010462:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010466:	2b00      	cmp	r3, #0
 8010468:	d001      	beq.n	801046e <compress_kitiku+0x106>
 801046a:	2301      	movs	r3, #1
 801046c:	e000      	b.n	8010470 <compress_kitiku+0x108>
 801046e:	2300      	movs	r3, #0
 8010470:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010474:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010478:	f003 0301 	and.w	r3, r3, #1
 801047c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010482:	2b01      	cmp	r3, #1
 8010484:	d102      	bne.n	801048c <compress_kitiku+0x124>
 8010486:	2304      	movs	r3, #4
 8010488:	647b      	str	r3, [r7, #68]	; 0x44
 801048a:	e002      	b.n	8010492 <compress_kitiku+0x12a>
 801048c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801048e:	3b01      	subs	r3, #1
 8010490:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 8010492:	f107 0118 	add.w	r1, r7, #24
 8010496:	f107 031c 	add.w	r3, r7, #28
 801049a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801049c:	4618      	mov	r0, r3
 801049e:	f7fd fd45 	bl	800df2c <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 80104a2:	69f8      	ldr	r0, [r7, #28]
 80104a4:	69b9      	ldr	r1, [r7, #24]
 80104a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80104aa:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80104ae:	9301      	str	r3, [sp, #4]
 80104b0:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80104b4:	9300      	str	r3, [sp, #0]
 80104b6:	4613      	mov	r3, r2
 80104b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104ba:	f000 fd31 	bl	8010f20 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 80104be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d009      	beq.n	80104da <compress_kitiku+0x172>
 80104c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d005      	beq.n	80104da <compress_kitiku+0x172>
 80104ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d001      	beq.n	80104da <compress_kitiku+0x172>
 80104d6:	2301      	movs	r3, #1
 80104d8:	e000      	b.n	80104dc <compress_kitiku+0x174>
 80104da:	2300      	movs	r3, #0
 80104dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80104e0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80104e4:	f003 0301 	and.w	r3, r3, #1
 80104e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 80104ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80104ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80104f4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80104f8:	9301      	str	r3, [sp, #4]
 80104fa:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80104fe:	9300      	str	r3, [sp, #0]
 8010500:	4613      	mov	r3, r2
 8010502:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010504:	f000 fb98 	bl	8010c38 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801050c:	f107 0610 	add.w	r6, r7, #16
 8010510:	f107 0512 	add.w	r5, r7, #18
 8010514:	f107 0414 	add.w	r4, r7, #20
 8010518:	f107 0016 	add.w	r0, r7, #22
 801051c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801051e:	9102      	str	r1, [sp, #8]
 8010520:	9201      	str	r2, [sp, #4]
 8010522:	9300      	str	r3, [sp, #0]
 8010524:	4633      	mov	r3, r6
 8010526:	462a      	mov	r2, r5
 8010528:	4621      	mov	r1, r4
 801052a:	f000 fe79 	bl	8011220 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 801052e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010532:	2b00      	cmp	r3, #0
 8010534:	d001      	beq.n	801053a <compress_kitiku+0x1d2>
 8010536:	23ff      	movs	r3, #255	; 0xff
 8010538:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 801053a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <compress_kitiku+0x1de>
 8010542:	23ff      	movs	r3, #255	; 0xff
 8010544:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 8010546:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801054a:	2b00      	cmp	r3, #0
 801054c:	d001      	beq.n	8010552 <compress_kitiku+0x1ea>
 801054e:	23ff      	movs	r3, #255	; 0xff
 8010550:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[16 * x_now + y_now] <= 1) {
 8010552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010554:	011a      	lsls	r2, r3, #4
 8010556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010558:	4413      	add	r3, r2
 801055a:	4a28      	ldr	r2, [pc, #160]	; (80105fc <compress_kitiku+0x294>)
 801055c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010560:	2b01      	cmp	r3, #1
 8010562:	f240 80a9 	bls.w	80106b8 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 8010566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010568:	2b01      	cmp	r3, #1
 801056a:	d103      	bne.n	8010574 <compress_kitiku+0x20c>
 801056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056e:	2b0d      	cmp	r3, #13
 8010570:	f300 80a4 	bgt.w	80106bc <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 8010574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010576:	2b02      	cmp	r3, #2
 8010578:	d103      	bne.n	8010582 <compress_kitiku+0x21a>
 801057a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801057c:	2b0d      	cmp	r3, #13
 801057e:	f300 809f 	bgt.w	80106c0 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 8010582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010584:	2b03      	cmp	r3, #3
 8010586:	d103      	bne.n	8010590 <compress_kitiku+0x228>
 8010588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058a:	2b01      	cmp	r3, #1
 801058c:	f340 809a 	ble.w	80106c4 <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 8010590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010592:	2b04      	cmp	r3, #4
 8010594:	d103      	bne.n	801059e <compress_kitiku+0x236>
 8010596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010598:	2b01      	cmp	r3, #1
 801059a:	f340 8095 	ble.w	80106c8 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 801059e:	8afb      	ldrh	r3, [r7, #22]
 80105a0:	2bff      	cmp	r3, #255	; 0xff
 80105a2:	d10c      	bne.n	80105be <compress_kitiku+0x256>
 80105a4:	8abb      	ldrh	r3, [r7, #20]
 80105a6:	2bff      	cmp	r3, #255	; 0xff
 80105a8:	d109      	bne.n	80105be <compress_kitiku+0x256>
 80105aa:	8a3b      	ldrh	r3, [r7, #16]
 80105ac:	2bff      	cmp	r3, #255	; 0xff
 80105ae:	d106      	bne.n	80105be <compress_kitiku+0x256>
 80105b0:	8a7b      	ldrh	r3, [r7, #18]
 80105b2:	2bff      	cmp	r3, #255	; 0xff
 80105b4:	d103      	bne.n	80105be <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 80105b6:	4b12      	ldr	r3, [pc, #72]	; (8010600 <compress_kitiku+0x298>)
 80105b8:	2201      	movs	r2, #1
 80105ba:	701a      	strb	r2, [r3, #0]
		break;
 80105bc:	e087      	b.n	80106ce <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80105be:	8afa      	ldrh	r2, [r7, #22]
 80105c0:	8abb      	ldrh	r3, [r7, #20]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d81e      	bhi.n	8010604 <compress_kitiku+0x29c>
 80105c6:	8afa      	ldrh	r2, [r7, #22]
 80105c8:	8a3b      	ldrh	r3, [r7, #16]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d81a      	bhi.n	8010604 <compress_kitiku+0x29c>
 80105ce:	8afa      	ldrh	r2, [r7, #22]
 80105d0:	8a7b      	ldrh	r3, [r7, #18]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d816      	bhi.n	8010604 <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 80105d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d005      	beq.n	80105ea <compress_kitiku+0x282>
				kitiku_distance += 2;
 80105de:	4b05      	ldr	r3, [pc, #20]	; (80105f4 <compress_kitiku+0x28c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	3302      	adds	r3, #2
 80105e4:	4a03      	ldr	r2, [pc, #12]	; (80105f4 <compress_kitiku+0x28c>)
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	e00c      	b.n	8010604 <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 80105ea:	4b03      	ldr	r3, [pc, #12]	; (80105f8 <compress_kitiku+0x290>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	701a      	strb	r2, [r3, #0]
				break;
 80105f0:	e06d      	b.n	80106ce <compress_kitiku+0x366>
 80105f2:	bf00      	nop
 80105f4:	2000082c 	.word	0x2000082c
 80105f8:	20000829 	.word	0x20000829
 80105fc:	20000d2c 	.word	0x20000d2c
 8010600:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8010604:	8aba      	ldrh	r2, [r7, #20]
 8010606:	8afb      	ldrh	r3, [r7, #22]
 8010608:	429a      	cmp	r2, r3
 801060a:	d213      	bcs.n	8010634 <compress_kitiku+0x2cc>
 801060c:	8aba      	ldrh	r2, [r7, #20]
 801060e:	8a3b      	ldrh	r3, [r7, #16]
 8010610:	429a      	cmp	r2, r3
 8010612:	d80f      	bhi.n	8010634 <compress_kitiku+0x2cc>
 8010614:	8aba      	ldrh	r2, [r7, #20]
 8010616:	8a7b      	ldrh	r3, [r7, #18]
 8010618:	429a      	cmp	r2, r3
 801061a:	d80b      	bhi.n	8010634 <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 801061c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010620:	2b00      	cmp	r3, #0
 8010622:	d003      	beq.n	801062c <compress_kitiku+0x2c4>
				kitiku = 0;
 8010624:	4b40      	ldr	r3, [pc, #256]	; (8010728 <compress_kitiku+0x3c0>)
 8010626:	2200      	movs	r2, #0
 8010628:	701a      	strb	r2, [r3, #0]
				break;
 801062a:	e050      	b.n	80106ce <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 801062c:	4b3e      	ldr	r3, [pc, #248]	; (8010728 <compress_kitiku+0x3c0>)
 801062e:	2200      	movs	r2, #0
 8010630:	701a      	strb	r2, [r3, #0]
				break;
 8010632:	e04c      	b.n	80106ce <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8010634:	8a3a      	ldrh	r2, [r7, #16]
 8010636:	8afb      	ldrh	r3, [r7, #22]
 8010638:	429a      	cmp	r2, r3
 801063a:	d213      	bcs.n	8010664 <compress_kitiku+0x2fc>
 801063c:	8a3a      	ldrh	r2, [r7, #16]
 801063e:	8abb      	ldrh	r3, [r7, #20]
 8010640:	429a      	cmp	r2, r3
 8010642:	d20f      	bcs.n	8010664 <compress_kitiku+0x2fc>
 8010644:	8a3a      	ldrh	r2, [r7, #16]
 8010646:	8a7b      	ldrh	r3, [r7, #18]
 8010648:	429a      	cmp	r2, r3
 801064a:	d80b      	bhi.n	8010664 <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 801064c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010650:	2b00      	cmp	r3, #0
 8010652:	d003      	beq.n	801065c <compress_kitiku+0x2f4>
				kitiku = 0;
 8010654:	4b34      	ldr	r3, [pc, #208]	; (8010728 <compress_kitiku+0x3c0>)
 8010656:	2200      	movs	r2, #0
 8010658:	701a      	strb	r2, [r3, #0]
				break;
 801065a:	e038      	b.n	80106ce <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 801065c:	4b32      	ldr	r3, [pc, #200]	; (8010728 <compress_kitiku+0x3c0>)
 801065e:	2200      	movs	r2, #0
 8010660:	701a      	strb	r2, [r3, #0]
				break;
 8010662:	e034      	b.n	80106ce <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 8010664:	8a7a      	ldrh	r2, [r7, #18]
 8010666:	8afb      	ldrh	r3, [r7, #22]
 8010668:	429a      	cmp	r2, r3
 801066a:	d20b      	bcs.n	8010684 <compress_kitiku+0x31c>
 801066c:	8a7a      	ldrh	r2, [r7, #18]
 801066e:	8abb      	ldrh	r3, [r7, #20]
 8010670:	429a      	cmp	r2, r3
 8010672:	d207      	bcs.n	8010684 <compress_kitiku+0x31c>
								&& back_count < left_count){
 8010674:	8a7a      	ldrh	r2, [r7, #18]
 8010676:	8a3b      	ldrh	r3, [r7, #16]
 8010678:	429a      	cmp	r2, r3
 801067a:	d203      	bcs.n	8010684 <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 801067c:	4b2a      	ldr	r3, [pc, #168]	; (8010728 <compress_kitiku+0x3c0>)
 801067e:	2200      	movs	r2, #0
 8010680:	701a      	strb	r2, [r3, #0]
			break;
 8010682:	e024      	b.n	80106ce <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 8010684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010686:	2b05      	cmp	r3, #5
 8010688:	d101      	bne.n	801068e <compress_kitiku+0x326>
			direction_now = 1;
 801068a:	2301      	movs	r3, #1
 801068c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 801068e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010690:	2b06      	cmp	r3, #6
 8010692:	d101      	bne.n	8010698 <compress_kitiku+0x330>
			direction_now = 2;
 8010694:	2302      	movs	r3, #2
 8010696:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 8010698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801069a:	2b00      	cmp	r3, #0
 801069c:	d101      	bne.n	80106a2 <compress_kitiku+0x33a>
			direction_now = 4;
 801069e:	2304      	movs	r3, #4
 80106a0:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 80106a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106a8:	d101      	bne.n	80106ae <compress_kitiku+0x346>
			direction_now = 3;
 80106aa:	2303      	movs	r3, #3
 80106ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 80106ae:	4b1e      	ldr	r3, [pc, #120]	; (8010728 <compress_kitiku+0x3c0>)
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00a      	beq.n	80106cc <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 80106b6:	e66c      	b.n	8010392 <compress_kitiku+0x2a>
			break;
 80106b8:	bf00      	nop
 80106ba:	e008      	b.n	80106ce <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 80106bc:	bf00      	nop
 80106be:	e006      	b.n	80106ce <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 80106c0:	bf00      	nop
 80106c2:	e004      	b.n	80106ce <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 80106c4:	bf00      	nop
 80106c6:	e002      	b.n	80106ce <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 80106c8:	bf00      	nop
 80106ca:	e000      	b.n	80106ce <compress_kitiku+0x366>

			break;
 80106cc:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 80106ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106d0:	3302      	adds	r3, #2
 80106d2:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 80106d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106d6:	2b05      	cmp	r3, #5
 80106d8:	d101      	bne.n	80106de <compress_kitiku+0x376>
				direction2 = 1;
 80106da:	2301      	movs	r3, #1
 80106dc:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 80106de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e0:	2b06      	cmp	r3, #6
 80106e2:	d101      	bne.n	80106e8 <compress_kitiku+0x380>
				direction2 = 2;
 80106e4:	2302      	movs	r3, #2
 80106e6:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 80106e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d101      	bne.n	80106f2 <compress_kitiku+0x38a>
				direction2 = 4;
 80106ee:	2304      	movs	r3, #4
 80106f0:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 80106f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f8:	d101      	bne.n	80106fe <compress_kitiku+0x396>
				direction2 = 3;
 80106fa:	2303      	movs	r3, #3
 80106fc:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 80106fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010702:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010708:	4618      	mov	r0, r3
 801070a:	f7fd fc0f 	bl	800df2c <update_coordinate>

	*x=x_now;
 801070e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8010714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801071e:	601a      	str	r2, [r3, #0]

}
 8010720:	bf00      	nop
 8010722:	3754      	adds	r7, #84	; 0x54
 8010724:	46bd      	mov	sp, r7
 8010726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010728:	20000829 	.word	0x20000829

0801072c <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 801072c:	b480      	push	{r7}
 801072e:	b085      	sub	sp, #20
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	60b9      	str	r1, [r7, #8]
 8010736:	607a      	str	r2, [r7, #4]
 8010738:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	3b01      	subs	r3, #1
 801073e:	2b03      	cmp	r3, #3
 8010740:	f200 8272 	bhi.w	8010c28 <update_wall+0x4fc>
 8010744:	a201      	add	r2, pc, #4	; (adr r2, 801074c <update_wall+0x20>)
 8010746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074a:	bf00      	nop
 801074c:	0801075d 	.word	0x0801075d
 8010750:	08010883 	.word	0x08010883
 8010754:	080109b9 	.word	0x080109b9
 8010758:	08010ae7 	.word	0x08010ae7
	case 1:
		if (y <= 14) {
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	2b0e      	cmp	r3, #14
 8010760:	dc2e      	bgt.n	80107c0 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010762:	4a94      	ldr	r2, [pc, #592]	; (80109b4 <update_wall+0x288>)
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	332c      	adds	r3, #44	; 0x2c
 8010768:	005b      	lsls	r3, r3, #1
 801076a:	4413      	add	r3, r2
 801076c:	885b      	ldrh	r3, [r3, #2]
 801076e:	b21a      	sxth	r2, r3
 8010770:	2101      	movs	r1, #1
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	fa01 f303 	lsl.w	r3, r1, r3
 8010778:	b21b      	sxth	r3, r3
 801077a:	4313      	orrs	r3, r2
 801077c:	b21b      	sxth	r3, r3
 801077e:	b299      	uxth	r1, r3
 8010780:	4a8c      	ldr	r2, [pc, #560]	; (80109b4 <update_wall+0x288>)
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	332c      	adds	r3, #44	; 0x2c
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	4413      	add	r3, r2
 801078a:	460a      	mov	r2, r1
 801078c:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 801078e:	78fb      	ldrb	r3, [r7, #3]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d015      	beq.n	80107c0 <update_wall+0x94>
 8010794:	4a87      	ldr	r2, [pc, #540]	; (80109b4 <update_wall+0x288>)
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	330c      	adds	r3, #12
 801079a:	005b      	lsls	r3, r3, #1
 801079c:	4413      	add	r3, r2
 801079e:	88db      	ldrh	r3, [r3, #6]
 80107a0:	b21a      	sxth	r2, r3
 80107a2:	2101      	movs	r1, #1
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	fa01 f303 	lsl.w	r3, r1, r3
 80107aa:	b21b      	sxth	r3, r3
 80107ac:	4313      	orrs	r3, r2
 80107ae:	b21b      	sxth	r3, r3
 80107b0:	b299      	uxth	r1, r3
 80107b2:	4a80      	ldr	r2, [pc, #512]	; (80109b4 <update_wall+0x288>)
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	330c      	adds	r3, #12
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	4413      	add	r3, r2
 80107bc:	460a      	mov	r2, r1
 80107be:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	dd2d      	ble.n	8010822 <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	4a7a      	ldr	r2, [pc, #488]	; (80109b4 <update_wall+0x288>)
 80107cc:	331c      	adds	r3, #28
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	4413      	add	r3, r2
 80107d2:	889b      	ldrh	r3, [r3, #4]
 80107d4:	b21a      	sxth	r2, r3
 80107d6:	2101      	movs	r1, #1
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	fa01 f303 	lsl.w	r3, r1, r3
 80107de:	b21b      	sxth	r3, r3
 80107e0:	4313      	orrs	r3, r2
 80107e2:	b21a      	sxth	r2, r3
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	3b01      	subs	r3, #1
 80107e8:	b291      	uxth	r1, r2
 80107ea:	4a72      	ldr	r2, [pc, #456]	; (80109b4 <update_wall+0x288>)
 80107ec:	331c      	adds	r3, #28
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	4413      	add	r3, r2
 80107f2:	460a      	mov	r2, r1
 80107f4:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 80107f6:	7f3b      	ldrb	r3, [r7, #28]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d012      	beq.n	8010822 <update_wall+0xf6>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	3b01      	subs	r3, #1
 8010800:	4a6c      	ldr	r2, [pc, #432]	; (80109b4 <update_wall+0x288>)
 8010802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010806:	b21a      	sxth	r2, r3
 8010808:	2101      	movs	r1, #1
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	fa01 f303 	lsl.w	r3, r1, r3
 8010810:	b21b      	sxth	r3, r3
 8010812:	4313      	orrs	r3, r2
 8010814:	b21a      	sxth	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	3b01      	subs	r3, #1
 801081a:	b291      	uxth	r1, r2
 801081c:	4a65      	ldr	r2, [pc, #404]	; (80109b4 <update_wall+0x288>)
 801081e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2b0e      	cmp	r3, #14
 8010826:	f300 81f8 	bgt.w	8010c1a <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 801082a:	4a62      	ldr	r2, [pc, #392]	; (80109b4 <update_wall+0x288>)
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	331c      	adds	r3, #28
 8010830:	005b      	lsls	r3, r3, #1
 8010832:	4413      	add	r3, r2
 8010834:	889b      	ldrh	r3, [r3, #4]
 8010836:	b21a      	sxth	r2, r3
 8010838:	2101      	movs	r1, #1
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	fa01 f303 	lsl.w	r3, r1, r3
 8010840:	b21b      	sxth	r3, r3
 8010842:	4313      	orrs	r3, r2
 8010844:	b21b      	sxth	r3, r3
 8010846:	b299      	uxth	r1, r3
 8010848:	4a5a      	ldr	r2, [pc, #360]	; (80109b4 <update_wall+0x288>)
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	331c      	adds	r3, #28
 801084e:	005b      	lsls	r3, r3, #1
 8010850:	4413      	add	r3, r2
 8010852:	460a      	mov	r2, r1
 8010854:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010856:	7e3b      	ldrb	r3, [r7, #24]
 8010858:	2b00      	cmp	r3, #0
 801085a:	f000 81de 	beq.w	8010c1a <update_wall+0x4ee>
 801085e:	4a55      	ldr	r2, [pc, #340]	; (80109b4 <update_wall+0x288>)
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010866:	b21a      	sxth	r2, r3
 8010868:	2101      	movs	r1, #1
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	fa01 f303 	lsl.w	r3, r1, r3
 8010870:	b21b      	sxth	r3, r3
 8010872:	4313      	orrs	r3, r2
 8010874:	b21b      	sxth	r3, r3
 8010876:	b299      	uxth	r1, r3
 8010878:	4a4e      	ldr	r2, [pc, #312]	; (80109b4 <update_wall+0x288>)
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010880:	e1cb      	b.n	8010c1a <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2b0e      	cmp	r3, #14
 8010886:	dc29      	bgt.n	80108dc <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010888:	4a4a      	ldr	r2, [pc, #296]	; (80109b4 <update_wall+0x288>)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	331c      	adds	r3, #28
 801088e:	005b      	lsls	r3, r3, #1
 8010890:	4413      	add	r3, r2
 8010892:	889b      	ldrh	r3, [r3, #4]
 8010894:	b21a      	sxth	r2, r3
 8010896:	2101      	movs	r1, #1
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	fa01 f303 	lsl.w	r3, r1, r3
 801089e:	b21b      	sxth	r3, r3
 80108a0:	4313      	orrs	r3, r2
 80108a2:	b21b      	sxth	r3, r3
 80108a4:	b299      	uxth	r1, r3
 80108a6:	4a43      	ldr	r2, [pc, #268]	; (80109b4 <update_wall+0x288>)
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	331c      	adds	r3, #28
 80108ac:	005b      	lsls	r3, r3, #1
 80108ae:	4413      	add	r3, r2
 80108b0:	460a      	mov	r2, r1
 80108b2:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 80108b4:	78fb      	ldrb	r3, [r7, #3]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d010      	beq.n	80108dc <update_wall+0x1b0>
 80108ba:	4a3e      	ldr	r2, [pc, #248]	; (80109b4 <update_wall+0x288>)
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108c2:	b21a      	sxth	r2, r3
 80108c4:	2101      	movs	r1, #1
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	fa01 f303 	lsl.w	r3, r1, r3
 80108cc:	b21b      	sxth	r3, r3
 80108ce:	4313      	orrs	r3, r2
 80108d0:	b21b      	sxth	r3, r3
 80108d2:	b299      	uxth	r1, r3
 80108d4:	4a37      	ldr	r2, [pc, #220]	; (80109b4 <update_wall+0x288>)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	2b0e      	cmp	r3, #14
 80108e0:	dc2e      	bgt.n	8010940 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80108e2:	4a34      	ldr	r2, [pc, #208]	; (80109b4 <update_wall+0x288>)
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	332c      	adds	r3, #44	; 0x2c
 80108e8:	005b      	lsls	r3, r3, #1
 80108ea:	4413      	add	r3, r2
 80108ec:	885b      	ldrh	r3, [r3, #2]
 80108ee:	b21a      	sxth	r2, r3
 80108f0:	2101      	movs	r1, #1
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	fa01 f303 	lsl.w	r3, r1, r3
 80108f8:	b21b      	sxth	r3, r3
 80108fa:	4313      	orrs	r3, r2
 80108fc:	b21b      	sxth	r3, r3
 80108fe:	b299      	uxth	r1, r3
 8010900:	4a2c      	ldr	r2, [pc, #176]	; (80109b4 <update_wall+0x288>)
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	332c      	adds	r3, #44	; 0x2c
 8010906:	005b      	lsls	r3, r3, #1
 8010908:	4413      	add	r3, r2
 801090a:	460a      	mov	r2, r1
 801090c:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 801090e:	7f3b      	ldrb	r3, [r7, #28]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d015      	beq.n	8010940 <update_wall+0x214>
 8010914:	4a27      	ldr	r2, [pc, #156]	; (80109b4 <update_wall+0x288>)
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	330c      	adds	r3, #12
 801091a:	005b      	lsls	r3, r3, #1
 801091c:	4413      	add	r3, r2
 801091e:	88db      	ldrh	r3, [r3, #6]
 8010920:	b21a      	sxth	r2, r3
 8010922:	2101      	movs	r1, #1
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	fa01 f303 	lsl.w	r3, r1, r3
 801092a:	b21b      	sxth	r3, r3
 801092c:	4313      	orrs	r3, r2
 801092e:	b21b      	sxth	r3, r3
 8010930:	b299      	uxth	r1, r3
 8010932:	4a20      	ldr	r2, [pc, #128]	; (80109b4 <update_wall+0x288>)
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	330c      	adds	r3, #12
 8010938:	005b      	lsls	r3, r3, #1
 801093a:	4413      	add	r3, r2
 801093c:	460a      	mov	r2, r1
 801093e:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	2b00      	cmp	r3, #0
 8010944:	f340 816b 	ble.w	8010c1e <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	3b01      	subs	r3, #1
 801094c:	4a19      	ldr	r2, [pc, #100]	; (80109b4 <update_wall+0x288>)
 801094e:	332c      	adds	r3, #44	; 0x2c
 8010950:	005b      	lsls	r3, r3, #1
 8010952:	4413      	add	r3, r2
 8010954:	885b      	ldrh	r3, [r3, #2]
 8010956:	b21a      	sxth	r2, r3
 8010958:	2101      	movs	r1, #1
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	fa01 f303 	lsl.w	r3, r1, r3
 8010960:	b21b      	sxth	r3, r3
 8010962:	4313      	orrs	r3, r2
 8010964:	b21a      	sxth	r2, r3
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	3b01      	subs	r3, #1
 801096a:	b291      	uxth	r1, r2
 801096c:	4a11      	ldr	r2, [pc, #68]	; (80109b4 <update_wall+0x288>)
 801096e:	332c      	adds	r3, #44	; 0x2c
 8010970:	005b      	lsls	r3, r3, #1
 8010972:	4413      	add	r3, r2
 8010974:	460a      	mov	r2, r1
 8010976:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010978:	7e3b      	ldrb	r3, [r7, #24]
 801097a:	2b00      	cmp	r3, #0
 801097c:	f000 814f 	beq.w	8010c1e <update_wall+0x4f2>
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	3b01      	subs	r3, #1
 8010984:	4a0b      	ldr	r2, [pc, #44]	; (80109b4 <update_wall+0x288>)
 8010986:	330c      	adds	r3, #12
 8010988:	005b      	lsls	r3, r3, #1
 801098a:	4413      	add	r3, r2
 801098c:	88db      	ldrh	r3, [r3, #6]
 801098e:	b21a      	sxth	r2, r3
 8010990:	2101      	movs	r1, #1
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	fa01 f303 	lsl.w	r3, r1, r3
 8010998:	b21b      	sxth	r3, r3
 801099a:	4313      	orrs	r3, r2
 801099c:	b21a      	sxth	r2, r3
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	b291      	uxth	r1, r2
 80109a4:	4a03      	ldr	r2, [pc, #12]	; (80109b4 <update_wall+0x288>)
 80109a6:	330c      	adds	r3, #12
 80109a8:	005b      	lsls	r3, r3, #1
 80109aa:	4413      	add	r3, r2
 80109ac:	460a      	mov	r2, r1
 80109ae:	80da      	strh	r2, [r3, #6]
		}

		break;
 80109b0:	e135      	b.n	8010c1e <update_wall+0x4f2>
 80109b2:	bf00      	nop
 80109b4:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	dd32      	ble.n	8010a24 <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	3b01      	subs	r3, #1
 80109c2:	4a9c      	ldr	r2, [pc, #624]	; (8010c34 <update_wall+0x508>)
 80109c4:	332c      	adds	r3, #44	; 0x2c
 80109c6:	005b      	lsls	r3, r3, #1
 80109c8:	4413      	add	r3, r2
 80109ca:	885b      	ldrh	r3, [r3, #2]
 80109cc:	b21a      	sxth	r2, r3
 80109ce:	2101      	movs	r1, #1
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	fa01 f303 	lsl.w	r3, r1, r3
 80109d6:	b21b      	sxth	r3, r3
 80109d8:	4313      	orrs	r3, r2
 80109da:	b21a      	sxth	r2, r3
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	3b01      	subs	r3, #1
 80109e0:	b291      	uxth	r1, r2
 80109e2:	4a94      	ldr	r2, [pc, #592]	; (8010c34 <update_wall+0x508>)
 80109e4:	332c      	adds	r3, #44	; 0x2c
 80109e6:	005b      	lsls	r3, r3, #1
 80109e8:	4413      	add	r3, r2
 80109ea:	460a      	mov	r2, r1
 80109ec:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 80109ee:	78fb      	ldrb	r3, [r7, #3]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d017      	beq.n	8010a24 <update_wall+0x2f8>
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	3b01      	subs	r3, #1
 80109f8:	4a8e      	ldr	r2, [pc, #568]	; (8010c34 <update_wall+0x508>)
 80109fa:	330c      	adds	r3, #12
 80109fc:	005b      	lsls	r3, r3, #1
 80109fe:	4413      	add	r3, r2
 8010a00:	88db      	ldrh	r3, [r3, #6]
 8010a02:	b21a      	sxth	r2, r3
 8010a04:	2101      	movs	r1, #1
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	fa01 f303 	lsl.w	r3, r1, r3
 8010a0c:	b21b      	sxth	r3, r3
 8010a0e:	4313      	orrs	r3, r2
 8010a10:	b21a      	sxth	r2, r3
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	b291      	uxth	r1, r2
 8010a18:	4a86      	ldr	r2, [pc, #536]	; (8010c34 <update_wall+0x508>)
 8010a1a:	330c      	adds	r3, #12
 8010a1c:	005b      	lsls	r3, r3, #1
 8010a1e:	4413      	add	r3, r2
 8010a20:	460a      	mov	r2, r1
 8010a22:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2b0e      	cmp	r3, #14
 8010a28:	dc29      	bgt.n	8010a7e <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010a2a:	4a82      	ldr	r2, [pc, #520]	; (8010c34 <update_wall+0x508>)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	331c      	adds	r3, #28
 8010a30:	005b      	lsls	r3, r3, #1
 8010a32:	4413      	add	r3, r2
 8010a34:	889b      	ldrh	r3, [r3, #4]
 8010a36:	b21a      	sxth	r2, r3
 8010a38:	2101      	movs	r1, #1
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a40:	b21b      	sxth	r3, r3
 8010a42:	4313      	orrs	r3, r2
 8010a44:	b21b      	sxth	r3, r3
 8010a46:	b299      	uxth	r1, r3
 8010a48:	4a7a      	ldr	r2, [pc, #488]	; (8010c34 <update_wall+0x508>)
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	331c      	adds	r3, #28
 8010a4e:	005b      	lsls	r3, r3, #1
 8010a50:	4413      	add	r3, r2
 8010a52:	460a      	mov	r2, r1
 8010a54:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010a56:	7f3b      	ldrb	r3, [r7, #28]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d010      	beq.n	8010a7e <update_wall+0x352>
 8010a5c:	4a75      	ldr	r2, [pc, #468]	; (8010c34 <update_wall+0x508>)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a64:	b21a      	sxth	r2, r3
 8010a66:	2101      	movs	r1, #1
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8010a6e:	b21b      	sxth	r3, r3
 8010a70:	4313      	orrs	r3, r2
 8010a72:	b21b      	sxth	r3, r3
 8010a74:	b299      	uxth	r1, r3
 8010a76:	4a6f      	ldr	r2, [pc, #444]	; (8010c34 <update_wall+0x508>)
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f340 80ce 	ble.w	8010c22 <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	4a6a      	ldr	r2, [pc, #424]	; (8010c34 <update_wall+0x508>)
 8010a8c:	331c      	adds	r3, #28
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	4413      	add	r3, r2
 8010a92:	889b      	ldrh	r3, [r3, #4]
 8010a94:	b21a      	sxth	r2, r3
 8010a96:	2101      	movs	r1, #1
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8010a9e:	b21b      	sxth	r3, r3
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	b21a      	sxth	r2, r3
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	3b01      	subs	r3, #1
 8010aa8:	b291      	uxth	r1, r2
 8010aaa:	4a62      	ldr	r2, [pc, #392]	; (8010c34 <update_wall+0x508>)
 8010aac:	331c      	adds	r3, #28
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	460a      	mov	r2, r1
 8010ab4:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010ab6:	7e3b      	ldrb	r3, [r7, #24]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 80b2 	beq.w	8010c22 <update_wall+0x4f6>
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	4a5c      	ldr	r2, [pc, #368]	; (8010c34 <update_wall+0x508>)
 8010ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ac8:	b21a      	sxth	r2, r3
 8010aca:	2101      	movs	r1, #1
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	fa01 f303 	lsl.w	r3, r1, r3
 8010ad2:	b21b      	sxth	r3, r3
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	b21a      	sxth	r2, r3
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	3b01      	subs	r3, #1
 8010adc:	b291      	uxth	r1, r2
 8010ade:	4a55      	ldr	r2, [pc, #340]	; (8010c34 <update_wall+0x508>)
 8010ae0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010ae4:	e09d      	b.n	8010c22 <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	dd2d      	ble.n	8010b48 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	3b01      	subs	r3, #1
 8010af0:	4a50      	ldr	r2, [pc, #320]	; (8010c34 <update_wall+0x508>)
 8010af2:	331c      	adds	r3, #28
 8010af4:	005b      	lsls	r3, r3, #1
 8010af6:	4413      	add	r3, r2
 8010af8:	889b      	ldrh	r3, [r3, #4]
 8010afa:	b21a      	sxth	r2, r3
 8010afc:	2101      	movs	r1, #1
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	fa01 f303 	lsl.w	r3, r1, r3
 8010b04:	b21b      	sxth	r3, r3
 8010b06:	4313      	orrs	r3, r2
 8010b08:	b21a      	sxth	r2, r3
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	b291      	uxth	r1, r2
 8010b10:	4a48      	ldr	r2, [pc, #288]	; (8010c34 <update_wall+0x508>)
 8010b12:	331c      	adds	r3, #28
 8010b14:	005b      	lsls	r3, r3, #1
 8010b16:	4413      	add	r3, r2
 8010b18:	460a      	mov	r2, r1
 8010b1a:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010b1c:	78fb      	ldrb	r3, [r7, #3]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d012      	beq.n	8010b48 <update_wall+0x41c>
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	3b01      	subs	r3, #1
 8010b26:	4a43      	ldr	r2, [pc, #268]	; (8010c34 <update_wall+0x508>)
 8010b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b2c:	b21a      	sxth	r2, r3
 8010b2e:	2101      	movs	r1, #1
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	fa01 f303 	lsl.w	r3, r1, r3
 8010b36:	b21b      	sxth	r3, r3
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	b21a      	sxth	r2, r3
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	b291      	uxth	r1, r2
 8010b42:	4a3c      	ldr	r2, [pc, #240]	; (8010c34 <update_wall+0x508>)
 8010b44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	dd32      	ble.n	8010bb4 <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	3b01      	subs	r3, #1
 8010b52:	4a38      	ldr	r2, [pc, #224]	; (8010c34 <update_wall+0x508>)
 8010b54:	332c      	adds	r3, #44	; 0x2c
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	4413      	add	r3, r2
 8010b5a:	885b      	ldrh	r3, [r3, #2]
 8010b5c:	b21a      	sxth	r2, r3
 8010b5e:	2101      	movs	r1, #1
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	fa01 f303 	lsl.w	r3, r1, r3
 8010b66:	b21b      	sxth	r3, r3
 8010b68:	4313      	orrs	r3, r2
 8010b6a:	b21a      	sxth	r2, r3
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	b291      	uxth	r1, r2
 8010b72:	4a30      	ldr	r2, [pc, #192]	; (8010c34 <update_wall+0x508>)
 8010b74:	332c      	adds	r3, #44	; 0x2c
 8010b76:	005b      	lsls	r3, r3, #1
 8010b78:	4413      	add	r3, r2
 8010b7a:	460a      	mov	r2, r1
 8010b7c:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010b7e:	7f3b      	ldrb	r3, [r7, #28]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d017      	beq.n	8010bb4 <update_wall+0x488>
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3b01      	subs	r3, #1
 8010b88:	4a2a      	ldr	r2, [pc, #168]	; (8010c34 <update_wall+0x508>)
 8010b8a:	330c      	adds	r3, #12
 8010b8c:	005b      	lsls	r3, r3, #1
 8010b8e:	4413      	add	r3, r2
 8010b90:	88db      	ldrh	r3, [r3, #6]
 8010b92:	b21a      	sxth	r2, r3
 8010b94:	2101      	movs	r1, #1
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	fa01 f303 	lsl.w	r3, r1, r3
 8010b9c:	b21b      	sxth	r3, r3
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	b21a      	sxth	r2, r3
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	3b01      	subs	r3, #1
 8010ba6:	b291      	uxth	r1, r2
 8010ba8:	4a22      	ldr	r2, [pc, #136]	; (8010c34 <update_wall+0x508>)
 8010baa:	330c      	adds	r3, #12
 8010bac:	005b      	lsls	r3, r3, #1
 8010bae:	4413      	add	r3, r2
 8010bb0:	460a      	mov	r2, r1
 8010bb2:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	2b0e      	cmp	r3, #14
 8010bb8:	dc35      	bgt.n	8010c26 <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010bba:	4a1e      	ldr	r2, [pc, #120]	; (8010c34 <update_wall+0x508>)
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	332c      	adds	r3, #44	; 0x2c
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	4413      	add	r3, r2
 8010bc4:	885b      	ldrh	r3, [r3, #2]
 8010bc6:	b21a      	sxth	r2, r3
 8010bc8:	2101      	movs	r1, #1
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8010bd0:	b21b      	sxth	r3, r3
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	b21b      	sxth	r3, r3
 8010bd6:	b299      	uxth	r1, r3
 8010bd8:	4a16      	ldr	r2, [pc, #88]	; (8010c34 <update_wall+0x508>)
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	332c      	adds	r3, #44	; 0x2c
 8010bde:	005b      	lsls	r3, r3, #1
 8010be0:	4413      	add	r3, r2
 8010be2:	460a      	mov	r2, r1
 8010be4:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010be6:	7e3b      	ldrb	r3, [r7, #24]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d01c      	beq.n	8010c26 <update_wall+0x4fa>
 8010bec:	4a11      	ldr	r2, [pc, #68]	; (8010c34 <update_wall+0x508>)
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	330c      	adds	r3, #12
 8010bf2:	005b      	lsls	r3, r3, #1
 8010bf4:	4413      	add	r3, r2
 8010bf6:	88db      	ldrh	r3, [r3, #6]
 8010bf8:	b21a      	sxth	r2, r3
 8010bfa:	2101      	movs	r1, #1
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8010c02:	b21b      	sxth	r3, r3
 8010c04:	4313      	orrs	r3, r2
 8010c06:	b21b      	sxth	r3, r3
 8010c08:	b299      	uxth	r1, r3
 8010c0a:	4a0a      	ldr	r2, [pc, #40]	; (8010c34 <update_wall+0x508>)
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	330c      	adds	r3, #12
 8010c10:	005b      	lsls	r3, r3, #1
 8010c12:	4413      	add	r3, r2
 8010c14:	460a      	mov	r2, r1
 8010c16:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010c18:	e005      	b.n	8010c26 <update_wall+0x4fa>
		break;
 8010c1a:	bf00      	nop
 8010c1c:	e004      	b.n	8010c28 <update_wall+0x4fc>
		break;
 8010c1e:	bf00      	nop
 8010c20:	e002      	b.n	8010c28 <update_wall+0x4fc>
		break;
 8010c22:	bf00      	nop
 8010c24:	e000      	b.n	8010c28 <update_wall+0x4fc>
		break;
 8010c26:	bf00      	nop

	}


}
 8010c28:	bf00      	nop
 8010c2a:	3714      	adds	r7, #20
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr
 8010c34:	20000c3c 	.word	0x20000c3c

08010c38 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010c38:	b480      	push	{r7}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]
 8010c44:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	2201      	movs	r2, #1
 8010c4a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	2201      	movs	r2, #1
 8010c50:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	2201      	movs	r2, #1
 8010c56:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	2b03      	cmp	r3, #3
 8010c5e:	f200 8156 	bhi.w	8010f0e <get_wall+0x2d6>
 8010c62:	a201      	add	r2, pc, #4	; (adr r2, 8010c68 <get_wall+0x30>)
 8010c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c68:	08010c79 	.word	0x08010c79
 8010c6c:	08010d19 	.word	0x08010d19
 8010c70:	08010dbd 	.word	0x08010dbd
 8010c74:	08010e5d 	.word	0x08010e5d
	case 1:
		if (y <= 14) {
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	2b0e      	cmp	r3, #14
 8010c7c:	dc17      	bgt.n	8010cae <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010c7e:	4aa7      	ldr	r2, [pc, #668]	; (8010f1c <get_wall+0x2e4>)
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	330c      	adds	r3, #12
 8010c84:	005b      	lsls	r3, r3, #1
 8010c86:	4413      	add	r3, r2
 8010c88:	88db      	ldrh	r3, [r3, #6]
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	fa02 f303 	lsl.w	r3, r2, r3
 8010c94:	ea01 0203 	and.w	r2, r1, r3
 8010c98:	2101      	movs	r1, #1
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	bf0c      	ite	eq
 8010ca4:	2301      	moveq	r3, #1
 8010ca6:	2300      	movne	r3, #0
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	dd16      	ble.n	8010ce2 <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	3b01      	subs	r3, #1
 8010cb8:	4a98      	ldr	r2, [pc, #608]	; (8010f1c <get_wall+0x2e4>)
 8010cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8010cc8:	ea01 0203 	and.w	r2, r1, r3
 8010ccc:	2101      	movs	r1, #1
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	bf0c      	ite	eq
 8010cd8:	2301      	moveq	r3, #1
 8010cda:	2300      	movne	r3, #0
 8010cdc:	b2da      	uxtb	r2, r3
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	2b0e      	cmp	r3, #14
 8010ce6:	f300 810b 	bgt.w	8010f00 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010cea:	4a8c      	ldr	r2, [pc, #560]	; (8010f1c <get_wall+0x2e4>)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8010cfc:	ea01 0203 	and.w	r2, r1, r3
 8010d00:	2101      	movs	r1, #1
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	fa01 f303 	lsl.w	r3, r1, r3
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	bf0c      	ite	eq
 8010d0c:	2301      	moveq	r3, #1
 8010d0e:	2300      	movne	r3, #0
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010d16:	e0f3      	b.n	8010f00 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2b0e      	cmp	r3, #14
 8010d1c:	dc15      	bgt.n	8010d4a <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010d1e:	4a7f      	ldr	r2, [pc, #508]	; (8010f1c <get_wall+0x2e4>)
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d26:	4619      	mov	r1, r3
 8010d28:	2201      	movs	r2, #1
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d30:	ea01 0203 	and.w	r2, r1, r3
 8010d34:	2101      	movs	r1, #1
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	fa01 f303 	lsl.w	r3, r1, r3
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	bf0c      	ite	eq
 8010d40:	2301      	moveq	r3, #1
 8010d42:	2300      	movne	r3, #0
 8010d44:	b2da      	uxtb	r2, r3
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	2b0e      	cmp	r3, #14
 8010d4e:	dc17      	bgt.n	8010d80 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010d50:	4a72      	ldr	r2, [pc, #456]	; (8010f1c <get_wall+0x2e4>)
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	330c      	adds	r3, #12
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	4413      	add	r3, r2
 8010d5a:	88db      	ldrh	r3, [r3, #6]
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	2201      	movs	r2, #1
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	fa02 f303 	lsl.w	r3, r2, r3
 8010d66:	ea01 0203 	and.w	r2, r1, r3
 8010d6a:	2101      	movs	r1, #1
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d72:	429a      	cmp	r2, r3
 8010d74:	bf0c      	ite	eq
 8010d76:	2301      	moveq	r3, #1
 8010d78:	2300      	movne	r3, #0
 8010d7a:	b2da      	uxtb	r2, r3
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	f340 80be 	ble.w	8010f04 <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	3b01      	subs	r3, #1
 8010d8c:	4a63      	ldr	r2, [pc, #396]	; (8010f1c <get_wall+0x2e4>)
 8010d8e:	330c      	adds	r3, #12
 8010d90:	005b      	lsls	r3, r3, #1
 8010d92:	4413      	add	r3, r2
 8010d94:	88db      	ldrh	r3, [r3, #6]
 8010d96:	4619      	mov	r1, r3
 8010d98:	2201      	movs	r2, #1
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8010da0:	ea01 0203 	and.w	r2, r1, r3
 8010da4:	2101      	movs	r1, #1
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	fa01 f303 	lsl.w	r3, r1, r3
 8010dac:	429a      	cmp	r2, r3
 8010dae:	bf0c      	ite	eq
 8010db0:	2301      	moveq	r3, #1
 8010db2:	2300      	movne	r3, #0
 8010db4:	b2da      	uxtb	r2, r3
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010dba:	e0a3      	b.n	8010f04 <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	dd18      	ble.n	8010df4 <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	4a55      	ldr	r2, [pc, #340]	; (8010f1c <get_wall+0x2e4>)
 8010dc8:	330c      	adds	r3, #12
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	4413      	add	r3, r2
 8010dce:	88db      	ldrh	r3, [r3, #6]
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8010dda:	ea01 0203 	and.w	r2, r1, r3
 8010dde:	2101      	movs	r1, #1
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	fa01 f303 	lsl.w	r3, r1, r3
 8010de6:	429a      	cmp	r2, r3
 8010de8:	bf0c      	ite	eq
 8010dea:	2301      	moveq	r3, #1
 8010dec:	2300      	movne	r3, #0
 8010dee:	b2da      	uxtb	r2, r3
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2b0e      	cmp	r3, #14
 8010df8:	dc15      	bgt.n	8010e26 <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010dfa:	4a48      	ldr	r2, [pc, #288]	; (8010f1c <get_wall+0x2e4>)
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e02:	4619      	mov	r1, r3
 8010e04:	2201      	movs	r2, #1
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	fa02 f303 	lsl.w	r3, r2, r3
 8010e0c:	ea01 0203 	and.w	r2, r1, r3
 8010e10:	2101      	movs	r1, #1
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	fa01 f303 	lsl.w	r3, r1, r3
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	bf0c      	ite	eq
 8010e1c:	2301      	moveq	r3, #1
 8010e1e:	2300      	movne	r3, #0
 8010e20:	b2da      	uxtb	r2, r3
 8010e22:	69fb      	ldr	r3, [r7, #28]
 8010e24:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	dd6d      	ble.n	8010f08 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	3b01      	subs	r3, #1
 8010e30:	4a3a      	ldr	r2, [pc, #232]	; (8010f1c <get_wall+0x2e4>)
 8010e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e36:	4619      	mov	r1, r3
 8010e38:	2201      	movs	r2, #1
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e40:	ea01 0203 	and.w	r2, r1, r3
 8010e44:	2101      	movs	r1, #1
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	fa01 f303 	lsl.w	r3, r1, r3
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	bf0c      	ite	eq
 8010e50:	2301      	moveq	r3, #1
 8010e52:	2300      	movne	r3, #0
 8010e54:	b2da      	uxtb	r2, r3
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010e5a:	e055      	b.n	8010f08 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	dd16      	ble.n	8010e90 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	3b01      	subs	r3, #1
 8010e66:	4a2d      	ldr	r2, [pc, #180]	; (8010f1c <get_wall+0x2e4>)
 8010e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	2201      	movs	r2, #1
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	fa02 f303 	lsl.w	r3, r2, r3
 8010e76:	ea01 0203 	and.w	r2, r1, r3
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e82:	429a      	cmp	r2, r3
 8010e84:	bf0c      	ite	eq
 8010e86:	2301      	moveq	r3, #1
 8010e88:	2300      	movne	r3, #0
 8010e8a:	b2da      	uxtb	r2, r3
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	dd18      	ble.n	8010ec8 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	3b01      	subs	r3, #1
 8010e9a:	4a20      	ldr	r2, [pc, #128]	; (8010f1c <get_wall+0x2e4>)
 8010e9c:	330c      	adds	r3, #12
 8010e9e:	005b      	lsls	r3, r3, #1
 8010ea0:	4413      	add	r3, r2
 8010ea2:	88db      	ldrh	r3, [r3, #6]
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8010eae:	ea01 0203 	and.w	r2, r1, r3
 8010eb2:	2101      	movs	r1, #1
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	bf0c      	ite	eq
 8010ebe:	2301      	moveq	r3, #1
 8010ec0:	2300      	movne	r3, #0
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	2b0e      	cmp	r3, #14
 8010ecc:	dc1e      	bgt.n	8010f0c <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010ece:	4a13      	ldr	r2, [pc, #76]	; (8010f1c <get_wall+0x2e4>)
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	330c      	adds	r3, #12
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	4413      	add	r3, r2
 8010ed8:	88db      	ldrh	r3, [r3, #6]
 8010eda:	4619      	mov	r1, r3
 8010edc:	2201      	movs	r2, #1
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ee4:	ea01 0203 	and.w	r2, r1, r3
 8010ee8:	2101      	movs	r1, #1
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	fa01 f303 	lsl.w	r3, r1, r3
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	bf0c      	ite	eq
 8010ef4:	2301      	moveq	r3, #1
 8010ef6:	2300      	movne	r3, #0
 8010ef8:	b2da      	uxtb	r2, r3
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010efe:	e005      	b.n	8010f0c <get_wall+0x2d4>
		break;
 8010f00:	bf00      	nop
 8010f02:	e004      	b.n	8010f0e <get_wall+0x2d6>
		break;
 8010f04:	bf00      	nop
 8010f06:	e002      	b.n	8010f0e <get_wall+0x2d6>
		break;
 8010f08:	bf00      	nop
 8010f0a:	e000      	b.n	8010f0e <get_wall+0x2d6>
		break;
 8010f0c:	bf00      	nop
	}

}
 8010f0e:	bf00      	nop
 8010f10:	3714      	adds	r7, #20
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr
 8010f1a:	bf00      	nop
 8010f1c:	20000c3c 	.word	0x20000c3c

08010f20 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	607a      	str	r2, [r7, #4]
 8010f2c:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	2201      	movs	r2, #1
 8010f32:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	2201      	movs	r2, #1
 8010f38:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	3b01      	subs	r3, #1
 8010f44:	2b03      	cmp	r3, #3
 8010f46:	f200 8162 	bhi.w	801120e <get_wall_look+0x2ee>
 8010f4a:	a201      	add	r2, pc, #4	; (adr r2, 8010f50 <get_wall_look+0x30>)
 8010f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f50:	08010f61 	.word	0x08010f61
 8010f54:	08011009 	.word	0x08011009
 8010f58:	080110b1 	.word	0x080110b1
 8010f5c:	08011159 	.word	0x08011159
	case 1:
		if (y <= 14) {
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	2b0e      	cmp	r3, #14
 8010f64:	dc17      	bgt.n	8010f96 <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8010f66:	4aad      	ldr	r2, [pc, #692]	; (801121c <get_wall_look+0x2fc>)
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	332c      	adds	r3, #44	; 0x2c
 8010f6c:	005b      	lsls	r3, r3, #1
 8010f6e:	4413      	add	r3, r2
 8010f70:	885b      	ldrh	r3, [r3, #2]
 8010f72:	4619      	mov	r1, r3
 8010f74:	2201      	movs	r2, #1
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	fa02 f303 	lsl.w	r3, r2, r3
 8010f7c:	ea01 0203 	and.w	r2, r1, r3
 8010f80:	2101      	movs	r1, #1
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	fa01 f303 	lsl.w	r3, r1, r3
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	bf0c      	ite	eq
 8010f8c:	2301      	moveq	r3, #1
 8010f8e:	2300      	movne	r3, #0
 8010f90:	b2da      	uxtb	r2, r3
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	dd18      	ble.n	8010fce <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	4a9e      	ldr	r2, [pc, #632]	; (801121c <get_wall_look+0x2fc>)
 8010fa2:	331c      	adds	r3, #28
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	4413      	add	r3, r2
 8010fa8:	889b      	ldrh	r3, [r3, #4]
 8010faa:	4619      	mov	r1, r3
 8010fac:	2201      	movs	r2, #1
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fb4:	ea01 0203 	and.w	r2, r1, r3
 8010fb8:	2101      	movs	r1, #1
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	bf0c      	ite	eq
 8010fc4:	2301      	moveq	r3, #1
 8010fc6:	2300      	movne	r3, #0
 8010fc8:	b2da      	uxtb	r2, r3
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	2b0e      	cmp	r3, #14
 8010fd2:	f300 8115 	bgt.w	8011200 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8010fd6:	4a91      	ldr	r2, [pc, #580]	; (801121c <get_wall_look+0x2fc>)
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	331c      	adds	r3, #28
 8010fdc:	005b      	lsls	r3, r3, #1
 8010fde:	4413      	add	r3, r2
 8010fe0:	889b      	ldrh	r3, [r3, #4]
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fec:	ea01 0203 	and.w	r2, r1, r3
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	bf0c      	ite	eq
 8010ffc:	2301      	moveq	r3, #1
 8010ffe:	2300      	movne	r3, #0
 8011000:	b2da      	uxtb	r2, r3
 8011002:	69bb      	ldr	r3, [r7, #24]
 8011004:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011006:	e0fb      	b.n	8011200 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2b0e      	cmp	r3, #14
 801100c:	dc17      	bgt.n	801103e <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801100e:	4a83      	ldr	r2, [pc, #524]	; (801121c <get_wall_look+0x2fc>)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	331c      	adds	r3, #28
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	4413      	add	r3, r2
 8011018:	889b      	ldrh	r3, [r3, #4]
 801101a:	4619      	mov	r1, r3
 801101c:	2201      	movs	r2, #1
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	fa02 f303 	lsl.w	r3, r2, r3
 8011024:	ea01 0203 	and.w	r2, r1, r3
 8011028:	2101      	movs	r1, #1
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	fa01 f303 	lsl.w	r3, r1, r3
 8011030:	429a      	cmp	r2, r3
 8011032:	bf0c      	ite	eq
 8011034:	2301      	moveq	r3, #1
 8011036:	2300      	movne	r3, #0
 8011038:	b2da      	uxtb	r2, r3
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	2b0e      	cmp	r3, #14
 8011042:	dc17      	bgt.n	8011074 <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011044:	4a75      	ldr	r2, [pc, #468]	; (801121c <get_wall_look+0x2fc>)
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	332c      	adds	r3, #44	; 0x2c
 801104a:	005b      	lsls	r3, r3, #1
 801104c:	4413      	add	r3, r2
 801104e:	885b      	ldrh	r3, [r3, #2]
 8011050:	4619      	mov	r1, r3
 8011052:	2201      	movs	r2, #1
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	fa02 f303 	lsl.w	r3, r2, r3
 801105a:	ea01 0203 	and.w	r2, r1, r3
 801105e:	2101      	movs	r1, #1
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	fa01 f303 	lsl.w	r3, r1, r3
 8011066:	429a      	cmp	r2, r3
 8011068:	bf0c      	ite	eq
 801106a:	2301      	moveq	r3, #1
 801106c:	2300      	movne	r3, #0
 801106e:	b2da      	uxtb	r2, r3
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	2b00      	cmp	r3, #0
 8011078:	f340 80c4 	ble.w	8011204 <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	3b01      	subs	r3, #1
 8011080:	4a66      	ldr	r2, [pc, #408]	; (801121c <get_wall_look+0x2fc>)
 8011082:	332c      	adds	r3, #44	; 0x2c
 8011084:	005b      	lsls	r3, r3, #1
 8011086:	4413      	add	r3, r2
 8011088:	885b      	ldrh	r3, [r3, #2]
 801108a:	4619      	mov	r1, r3
 801108c:	2201      	movs	r2, #1
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	fa02 f303 	lsl.w	r3, r2, r3
 8011094:	ea01 0203 	and.w	r2, r1, r3
 8011098:	2101      	movs	r1, #1
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	fa01 f303 	lsl.w	r3, r1, r3
 80110a0:	429a      	cmp	r2, r3
 80110a2:	bf0c      	ite	eq
 80110a4:	2301      	moveq	r3, #1
 80110a6:	2300      	movne	r3, #0
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	701a      	strb	r2, [r3, #0]
		}
		break;
 80110ae:	e0a9      	b.n	8011204 <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	dd18      	ble.n	80110e8 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	3b01      	subs	r3, #1
 80110ba:	4a58      	ldr	r2, [pc, #352]	; (801121c <get_wall_look+0x2fc>)
 80110bc:	332c      	adds	r3, #44	; 0x2c
 80110be:	005b      	lsls	r3, r3, #1
 80110c0:	4413      	add	r3, r2
 80110c2:	885b      	ldrh	r3, [r3, #2]
 80110c4:	4619      	mov	r1, r3
 80110c6:	2201      	movs	r2, #1
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	fa02 f303 	lsl.w	r3, r2, r3
 80110ce:	ea01 0203 	and.w	r2, r1, r3
 80110d2:	2101      	movs	r1, #1
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	fa01 f303 	lsl.w	r3, r1, r3
 80110da:	429a      	cmp	r2, r3
 80110dc:	bf0c      	ite	eq
 80110de:	2301      	moveq	r3, #1
 80110e0:	2300      	movne	r3, #0
 80110e2:	b2da      	uxtb	r2, r3
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2b0e      	cmp	r3, #14
 80110ec:	dc17      	bgt.n	801111e <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 80110ee:	4a4b      	ldr	r2, [pc, #300]	; (801121c <get_wall_look+0x2fc>)
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	331c      	adds	r3, #28
 80110f4:	005b      	lsls	r3, r3, #1
 80110f6:	4413      	add	r3, r2
 80110f8:	889b      	ldrh	r3, [r3, #4]
 80110fa:	4619      	mov	r1, r3
 80110fc:	2201      	movs	r2, #1
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	fa02 f303 	lsl.w	r3, r2, r3
 8011104:	ea01 0203 	and.w	r2, r1, r3
 8011108:	2101      	movs	r1, #1
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	fa01 f303 	lsl.w	r3, r1, r3
 8011110:	429a      	cmp	r2, r3
 8011112:	bf0c      	ite	eq
 8011114:	2301      	moveq	r3, #1
 8011116:	2300      	movne	r3, #0
 8011118:	b2da      	uxtb	r2, r3
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2b00      	cmp	r3, #0
 8011122:	dd71      	ble.n	8011208 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	3b01      	subs	r3, #1
 8011128:	4a3c      	ldr	r2, [pc, #240]	; (801121c <get_wall_look+0x2fc>)
 801112a:	331c      	adds	r3, #28
 801112c:	005b      	lsls	r3, r3, #1
 801112e:	4413      	add	r3, r2
 8011130:	889b      	ldrh	r3, [r3, #4]
 8011132:	4619      	mov	r1, r3
 8011134:	2201      	movs	r2, #1
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	fa02 f303 	lsl.w	r3, r2, r3
 801113c:	ea01 0203 	and.w	r2, r1, r3
 8011140:	2101      	movs	r1, #1
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	fa01 f303 	lsl.w	r3, r1, r3
 8011148:	429a      	cmp	r2, r3
 801114a:	bf0c      	ite	eq
 801114c:	2301      	moveq	r3, #1
 801114e:	2300      	movne	r3, #0
 8011150:	b2da      	uxtb	r2, r3
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011156:	e057      	b.n	8011208 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b00      	cmp	r3, #0
 801115c:	dd18      	ble.n	8011190 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	3b01      	subs	r3, #1
 8011162:	4a2e      	ldr	r2, [pc, #184]	; (801121c <get_wall_look+0x2fc>)
 8011164:	331c      	adds	r3, #28
 8011166:	005b      	lsls	r3, r3, #1
 8011168:	4413      	add	r3, r2
 801116a:	889b      	ldrh	r3, [r3, #4]
 801116c:	4619      	mov	r1, r3
 801116e:	2201      	movs	r2, #1
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	fa02 f303 	lsl.w	r3, r2, r3
 8011176:	ea01 0203 	and.w	r2, r1, r3
 801117a:	2101      	movs	r1, #1
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	fa01 f303 	lsl.w	r3, r1, r3
 8011182:	429a      	cmp	r2, r3
 8011184:	bf0c      	ite	eq
 8011186:	2301      	moveq	r3, #1
 8011188:	2300      	movne	r3, #0
 801118a:	b2da      	uxtb	r2, r3
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	2b00      	cmp	r3, #0
 8011194:	dd18      	ble.n	80111c8 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	3b01      	subs	r3, #1
 801119a:	4a20      	ldr	r2, [pc, #128]	; (801121c <get_wall_look+0x2fc>)
 801119c:	332c      	adds	r3, #44	; 0x2c
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	4413      	add	r3, r2
 80111a2:	885b      	ldrh	r3, [r3, #2]
 80111a4:	4619      	mov	r1, r3
 80111a6:	2201      	movs	r2, #1
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	fa02 f303 	lsl.w	r3, r2, r3
 80111ae:	ea01 0203 	and.w	r2, r1, r3
 80111b2:	2101      	movs	r1, #1
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	fa01 f303 	lsl.w	r3, r1, r3
 80111ba:	429a      	cmp	r2, r3
 80111bc:	bf0c      	ite	eq
 80111be:	2301      	moveq	r3, #1
 80111c0:	2300      	movne	r3, #0
 80111c2:	b2da      	uxtb	r2, r3
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	2b0e      	cmp	r3, #14
 80111cc:	dc1e      	bgt.n	801120c <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80111ce:	4a13      	ldr	r2, [pc, #76]	; (801121c <get_wall_look+0x2fc>)
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	332c      	adds	r3, #44	; 0x2c
 80111d4:	005b      	lsls	r3, r3, #1
 80111d6:	4413      	add	r3, r2
 80111d8:	885b      	ldrh	r3, [r3, #2]
 80111da:	4619      	mov	r1, r3
 80111dc:	2201      	movs	r2, #1
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	fa02 f303 	lsl.w	r3, r2, r3
 80111e4:	ea01 0203 	and.w	r2, r1, r3
 80111e8:	2101      	movs	r1, #1
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	fa01 f303 	lsl.w	r3, r1, r3
 80111f0:	429a      	cmp	r2, r3
 80111f2:	bf0c      	ite	eq
 80111f4:	2301      	moveq	r3, #1
 80111f6:	2300      	movne	r3, #0
 80111f8:	b2da      	uxtb	r2, r3
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80111fe:	e005      	b.n	801120c <get_wall_look+0x2ec>
		break;
 8011200:	bf00      	nop
 8011202:	e004      	b.n	801120e <get_wall_look+0x2ee>
		break;
 8011204:	bf00      	nop
 8011206:	e002      	b.n	801120e <get_wall_look+0x2ee>
		break;
 8011208:	bf00      	nop
 801120a:	e000      	b.n	801120e <get_wall_look+0x2ee>
		break;
 801120c:	bf00      	nop
	}

}
 801120e:	bf00      	nop
 8011210:	3714      	adds	r7, #20
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr
 801121a:	bf00      	nop
 801121c:	20000c3c 	.word	0x20000c3c

08011220 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011220:	b480      	push	{r7}
 8011222:	b087      	sub	sp, #28
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
 801122c:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 801122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011230:	2b0e      	cmp	r3, #14
 8011232:	dd02      	ble.n	801123a <search_AroundWalkCount+0x1a>
 8011234:	23ff      	movs	r3, #255	; 0xff
 8011236:	82fb      	strh	r3, [r7, #22]
 8011238:	e008      	b.n	801124c <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[16 * x + y + 1];}
 801123a:	6a3b      	ldr	r3, [r7, #32]
 801123c:	011a      	lsls	r2, r3, #4
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	4413      	add	r3, r2
 8011242:	3301      	adds	r3, #1
 8011244:	4a3c      	ldr	r2, [pc, #240]	; (8011338 <search_AroundWalkCount+0x118>)
 8011246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801124a:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 801124c:	6a3b      	ldr	r3, [r7, #32]
 801124e:	2b0e      	cmp	r3, #14
 8011250:	dd02      	ble.n	8011258 <search_AroundWalkCount+0x38>
 8011252:	23ff      	movs	r3, #255	; 0xff
 8011254:	82bb      	strh	r3, [r7, #20]
 8011256:	e008      	b.n	801126a <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[16 * (x + 1) + y];}
 8011258:	6a3b      	ldr	r3, [r7, #32]
 801125a:	3301      	adds	r3, #1
 801125c:	011a      	lsls	r2, r3, #4
 801125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011260:	4413      	add	r3, r2
 8011262:	4a35      	ldr	r2, [pc, #212]	; (8011338 <search_AroundWalkCount+0x118>)
 8011264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011268:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	2b00      	cmp	r3, #0
 801126e:	dc02      	bgt.n	8011276 <search_AroundWalkCount+0x56>
 8011270:	23ff      	movs	r3, #255	; 0xff
 8011272:	827b      	strh	r3, [r7, #18]
 8011274:	e008      	b.n	8011288 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[16 * x + y - 1];}
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	011a      	lsls	r2, r3, #4
 801127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127c:	4413      	add	r3, r2
 801127e:	3b01      	subs	r3, #1
 8011280:	4a2d      	ldr	r2, [pc, #180]	; (8011338 <search_AroundWalkCount+0x118>)
 8011282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011286:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011288:	6a3b      	ldr	r3, [r7, #32]
 801128a:	2b00      	cmp	r3, #0
 801128c:	dc02      	bgt.n	8011294 <search_AroundWalkCount+0x74>
 801128e:	23ff      	movs	r3, #255	; 0xff
 8011290:	823b      	strh	r3, [r7, #16]
 8011292:	e008      	b.n	80112a6 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[16 * (x - 1) + y];}
 8011294:	6a3b      	ldr	r3, [r7, #32]
 8011296:	3b01      	subs	r3, #1
 8011298:	011a      	lsls	r2, r3, #4
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	4413      	add	r3, r2
 801129e:	4a26      	ldr	r2, [pc, #152]	; (8011338 <search_AroundWalkCount+0x118>)
 80112a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112a4:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80112a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a8:	3b01      	subs	r3, #1
 80112aa:	2b03      	cmp	r3, #3
 80112ac:	d83e      	bhi.n	801132c <search_AroundWalkCount+0x10c>
 80112ae:	a201      	add	r2, pc, #4	; (adr r2, 80112b4 <search_AroundWalkCount+0x94>)
 80112b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b4:	080112c5 	.word	0x080112c5
 80112b8:	080112df 	.word	0x080112df
 80112bc:	080112f9 	.word	0x080112f9
 80112c0:	08011313 	.word	0x08011313
	case 1:
		*front_count = north_count;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	8afa      	ldrh	r2, [r7, #22]
 80112c8:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	8aba      	ldrh	r2, [r7, #20]
 80112ce:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	8a7a      	ldrh	r2, [r7, #18]
 80112d4:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	8a3a      	ldrh	r2, [r7, #16]
 80112da:	801a      	strh	r2, [r3, #0]
		break;
 80112dc:	e026      	b.n	801132c <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	8aba      	ldrh	r2, [r7, #20]
 80112e2:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	8a7a      	ldrh	r2, [r7, #18]
 80112e8:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	8a3a      	ldrh	r2, [r7, #16]
 80112ee:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	8afa      	ldrh	r2, [r7, #22]
 80112f4:	801a      	strh	r2, [r3, #0]
		break;
 80112f6:	e019      	b.n	801132c <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	8a7a      	ldrh	r2, [r7, #18]
 80112fc:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	8a3a      	ldrh	r2, [r7, #16]
 8011302:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	8afa      	ldrh	r2, [r7, #22]
 8011308:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	8aba      	ldrh	r2, [r7, #20]
 801130e:	801a      	strh	r2, [r3, #0]
		break;
 8011310:	e00c      	b.n	801132c <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	8a3a      	ldrh	r2, [r7, #16]
 8011316:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	8afa      	ldrh	r2, [r7, #22]
 801131c:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	8aba      	ldrh	r2, [r7, #20]
 8011322:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	8a7a      	ldrh	r2, [r7, #18]
 8011328:	801a      	strh	r2, [r3, #0]
		break;
 801132a:	bf00      	nop

	}


}
 801132c:	bf00      	nop
 801132e:	371c      	adds	r7, #28
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	20000d2c 	.word	0x20000d2c

0801133c <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 801133c:	b480      	push	{r7}
 801133e:	b087      	sub	sp, #28
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	607a      	str	r2, [r7, #4]
 8011348:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 801134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134c:	2b0e      	cmp	r3, #14
 801134e:	dd03      	ble.n	8011358 <search_AroundDijkstraCount+0x1c>
 8011350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011354:	82fb      	strh	r3, [r7, #22]
 8011356:	e00a      	b.n	801136e <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 8011358:	4944      	ldr	r1, [pc, #272]	; (801146c <search_AroundDijkstraCount+0x130>)
 801135a:	6a3a      	ldr	r2, [r7, #32]
 801135c:	4613      	mov	r3, r2
 801135e:	011b      	lsls	r3, r3, #4
 8011360:	1a9b      	subs	r3, r3, r2
 8011362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011364:	4413      	add	r3, r2
 8011366:	33f0      	adds	r3, #240	; 0xf0
 8011368:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801136c:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 801136e:	6a3b      	ldr	r3, [r7, #32]
 8011370:	2b0e      	cmp	r3, #14
 8011372:	dd03      	ble.n	801137c <search_AroundDijkstraCount+0x40>
 8011374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011378:	82bb      	strh	r3, [r7, #20]
 801137a:	e009      	b.n	8011390 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 801137c:	493b      	ldr	r1, [pc, #236]	; (801146c <search_AroundDijkstraCount+0x130>)
 801137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011380:	4613      	mov	r3, r2
 8011382:	011b      	lsls	r3, r3, #4
 8011384:	1a9b      	subs	r3, r3, r2
 8011386:	6a3a      	ldr	r2, [r7, #32]
 8011388:	4413      	add	r3, r2
 801138a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801138e:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 8011390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011392:	2b00      	cmp	r3, #0
 8011394:	dc03      	bgt.n	801139e <search_AroundDijkstraCount+0x62>
 8011396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801139a:	827b      	strh	r3, [r7, #18]
 801139c:	e00b      	b.n	80113b6 <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 801139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a0:	1e59      	subs	r1, r3, #1
 80113a2:	4832      	ldr	r0, [pc, #200]	; (801146c <search_AroundDijkstraCount+0x130>)
 80113a4:	6a3a      	ldr	r2, [r7, #32]
 80113a6:	4613      	mov	r3, r2
 80113a8:	011b      	lsls	r3, r3, #4
 80113aa:	1a9b      	subs	r3, r3, r2
 80113ac:	440b      	add	r3, r1
 80113ae:	33f0      	adds	r3, #240	; 0xf0
 80113b0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80113b4:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	dc03      	bgt.n	80113c4 <search_AroundDijkstraCount+0x88>
 80113bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113c0:	823b      	strh	r3, [r7, #16]
 80113c2:	e00a      	b.n	80113da <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 80113c4:	6a3b      	ldr	r3, [r7, #32]
 80113c6:	1e59      	subs	r1, r3, #1
 80113c8:	4828      	ldr	r0, [pc, #160]	; (801146c <search_AroundDijkstraCount+0x130>)
 80113ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113cc:	4613      	mov	r3, r2
 80113ce:	011b      	lsls	r3, r3, #4
 80113d0:	1a9b      	subs	r3, r3, r2
 80113d2:	440b      	add	r3, r1
 80113d4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80113d8:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80113da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113dc:	3b01      	subs	r3, #1
 80113de:	2b03      	cmp	r3, #3
 80113e0:	d83e      	bhi.n	8011460 <search_AroundDijkstraCount+0x124>
 80113e2:	a201      	add	r2, pc, #4	; (adr r2, 80113e8 <search_AroundDijkstraCount+0xac>)
 80113e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e8:	080113f9 	.word	0x080113f9
 80113ec:	08011413 	.word	0x08011413
 80113f0:	0801142d 	.word	0x0801142d
 80113f4:	08011447 	.word	0x08011447
	case 1:
		*front_count = north_count;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	8afa      	ldrh	r2, [r7, #22]
 80113fc:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	8aba      	ldrh	r2, [r7, #20]
 8011402:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	8a7a      	ldrh	r2, [r7, #18]
 8011408:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	8a3a      	ldrh	r2, [r7, #16]
 801140e:	801a      	strh	r2, [r3, #0]
		break;
 8011410:	e026      	b.n	8011460 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	8aba      	ldrh	r2, [r7, #20]
 8011416:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	8a7a      	ldrh	r2, [r7, #18]
 801141c:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	8a3a      	ldrh	r2, [r7, #16]
 8011422:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	8afa      	ldrh	r2, [r7, #22]
 8011428:	801a      	strh	r2, [r3, #0]
		break;
 801142a:	e019      	b.n	8011460 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	8a7a      	ldrh	r2, [r7, #18]
 8011430:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	8a3a      	ldrh	r2, [r7, #16]
 8011436:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	8afa      	ldrh	r2, [r7, #22]
 801143c:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	8aba      	ldrh	r2, [r7, #20]
 8011442:	801a      	strh	r2, [r3, #0]
		break;
 8011444:	e00c      	b.n	8011460 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	8a3a      	ldrh	r2, [r7, #16]
 801144a:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	8afa      	ldrh	r2, [r7, #22]
 8011450:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	8aba      	ldrh	r2, [r7, #20]
 8011456:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	8a7a      	ldrh	r2, [r7, #18]
 801145c:	801a      	strh	r2, [r3, #0]
		break;
 801145e:	bf00      	nop

	}


}
 8011460:	bf00      	nop
 8011462:	371c      	adds	r7, #28
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr
 801146c:	20000f2c 	.word	0x20000f2c

08011470 <create_DijkstraMap>:
		}

}


void create_DijkstraMap(void){
 8011470:	b590      	push	{r4, r7, lr}
 8011472:	f5ad 5ddd 	sub.w	sp, sp, #7072	; 0x1ba0
 8011476:	b087      	sub	sp, #28
 8011478:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 801147a:	23b4      	movs	r3, #180	; 0xb4
 801147c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011480:	f102 0216 	add.w	r2, r2, #22
 8011484:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 8011486:	237f      	movs	r3, #127	; 0x7f
 8011488:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801148c:	f102 0214 	add.w	r2, r2, #20
 8011490:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 8011492:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011496:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801149a:	4adf      	ldr	r2, [pc, #892]	; (8011818 <create_DijkstraMap+0x3a8>)
 801149c:	ca07      	ldmia	r2, {r0, r1, r2}
 801149e:	c303      	stmia	r3!, {r0, r1}
 80114a0:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 80114a2:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80114a6:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80114aa:	4adc      	ldr	r2, [pc, #880]	; (801181c <create_DijkstraMap+0x3ac>)
 80114ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80114ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 80114b2:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80114b6:	f103 031c 	add.w	r3, r3, #28
 80114ba:	4618      	mov	r0, r3
 80114bc:	f002 fee2 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_y);
 80114c0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80114c4:	f103 031c 	add.w	r3, r3, #28
 80114c8:	4618      	mov	r0, r3
 80114ca:	f002 fedb 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_matrix);
 80114ce:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80114d2:	3b1c      	subs	r3, #28
 80114d4:	4618      	mov	r0, r3
 80114d6:	f002 fed5 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_direction);
 80114da:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80114de:	3b1c      	subs	r3, #28
 80114e0:	4618      	mov	r0, r3
 80114e2:	f002 fecf 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_cost);
 80114e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80114ea:	3b1c      	subs	r3, #28
 80114ec:	4618      	mov	r0, r3
 80114ee:	f002 fec9 	bl	8014284 <initStack_walk>
	for(int i=0;i<=15;i++){
 80114f2:	2300      	movs	r3, #0
 80114f4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80114f8:	f102 020c 	add.w	r2, r2, #12
 80114fc:	6013      	str	r3, [r2, #0]
 80114fe:	e04a      	b.n	8011596 <create_DijkstraMap+0x126>
		for(int j=0;j<=14;j++){
 8011500:	2300      	movs	r3, #0
 8011502:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011506:	f102 0208 	add.w	r2, r2, #8
 801150a:	6013      	str	r3, [r2, #0]
 801150c:	e031      	b.n	8011572 <create_DijkstraMap+0x102>
			Dijkstra.column_count[i][j]=65535;
 801150e:	49c4      	ldr	r1, [pc, #784]	; (8011820 <create_DijkstraMap+0x3b0>)
 8011510:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011514:	f103 030c 	add.w	r3, r3, #12
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	4613      	mov	r3, r2
 801151c:	011b      	lsls	r3, r3, #4
 801151e:	1a9b      	subs	r3, r3, r2
 8011520:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011524:	f102 0208 	add.w	r2, r2, #8
 8011528:	6812      	ldr	r2, [r2, #0]
 801152a:	4413      	add	r3, r2
 801152c:	33f0      	adds	r3, #240	; 0xf0
 801152e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011532:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 8011536:	49ba      	ldr	r1, [pc, #744]	; (8011820 <create_DijkstraMap+0x3b0>)
 8011538:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801153c:	f103 030c 	add.w	r3, r3, #12
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	4613      	mov	r3, r2
 8011544:	011b      	lsls	r3, r3, #4
 8011546:	1a9b      	subs	r3, r3, r2
 8011548:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801154c:	f102 0208 	add.w	r2, r2, #8
 8011550:	6812      	ldr	r2, [r2, #0]
 8011552:	4413      	add	r3, r2
 8011554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011558:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 801155c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011560:	f103 0308 	add.w	r3, r3, #8
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	3301      	adds	r3, #1
 8011568:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801156c:	f102 0208 	add.w	r2, r2, #8
 8011570:	6013      	str	r3, [r2, #0]
 8011572:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011576:	f103 0308 	add.w	r3, r3, #8
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b0e      	cmp	r3, #14
 801157e:	ddc6      	ble.n	801150e <create_DijkstraMap+0x9e>
	for(int i=0;i<=15;i++){
 8011580:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011584:	f103 030c 	add.w	r3, r3, #12
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	3301      	adds	r3, #1
 801158c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011590:	f102 020c 	add.w	r2, r2, #12
 8011594:	6013      	str	r3, [r2, #0]
 8011596:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801159a:	f103 030c 	add.w	r3, r3, #12
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b0f      	cmp	r3, #15
 80115a2:	ddad      	ble.n	8011500 <create_DijkstraMap+0x90>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 80115a4:	4b9e      	ldr	r3, [pc, #632]	; (8011820 <create_DijkstraMap+0x3b0>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 80115ac:	4b9c      	ldr	r3, [pc, #624]	; (8011820 <create_DijkstraMap+0x3b0>)
 80115ae:	2200      	movs	r2, #0
 80115b0:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 80115b4:	4b9a      	ldr	r3, [pc, #616]	; (8011820 <create_DijkstraMap+0x3b0>)
 80115b6:	2200      	movs	r2, #0
 80115b8:	805a      	strh	r2, [r3, #2]
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 80115ba:	4b99      	ldr	r3, [pc, #612]	; (8011820 <create_DijkstraMap+0x3b0>)
 80115bc:	2200      	movs	r2, #0
 80115be:	841a      	strh	r2, [r3, #32]
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80115c0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80115c4:	f103 031c 	add.w	r3, r3, #28
 80115c8:	2101      	movs	r1, #1
 80115ca:	4618      	mov	r0, r3
 80115cc:	f002 fe6a 	bl	80142a4 <pushStack_walk>
 80115d0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80115d4:	f103 031c 	add.w	r3, r3, #28
 80115d8:	2100      	movs	r1, #0
 80115da:	4618      	mov	r0, r3
 80115dc:	f002 fe62 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80115e0:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80115e4:	3b1c      	subs	r3, #28
 80115e6:	2100      	movs	r1, #0
 80115e8:	4618      	mov	r0, r3
 80115ea:	f002 fe5b 	bl	80142a4 <pushStack_walk>
 80115ee:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80115f2:	3b1c      	subs	r3, #28
 80115f4:	2108      	movs	r1, #8
 80115f6:	4618      	mov	r0, r3
 80115f8:	f002 fe54 	bl	80142a4 <pushStack_walk>
 80115fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011600:	3b1c      	subs	r3, #28
 8011602:	2100      	movs	r1, #0
 8011604:	4618      	mov	r0, r3
 8011606:	f002 fe4d 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 801160a:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801160e:	f103 031c 	add.w	r3, r3, #28
 8011612:	2102      	movs	r1, #2
 8011614:	4618      	mov	r0, r3
 8011616:	f002 fe45 	bl	80142a4 <pushStack_walk>
 801161a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801161e:	f103 031c 	add.w	r3, r3, #28
 8011622:	2100      	movs	r1, #0
 8011624:	4618      	mov	r0, r3
 8011626:	f002 fe3d 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801162a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801162e:	3b1c      	subs	r3, #28
 8011630:	2100      	movs	r1, #0
 8011632:	4618      	mov	r0, r3
 8011634:	f002 fe36 	bl	80142a4 <pushStack_walk>
 8011638:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801163c:	3b1c      	subs	r3, #28
 801163e:	2108      	movs	r1, #8
 8011640:	4618      	mov	r0, r3
 8011642:	f002 fe2f 	bl	80142a4 <pushStack_walk>
 8011646:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801164a:	3b1c      	subs	r3, #28
 801164c:	2100      	movs	r1, #0
 801164e:	4618      	mov	r0, r3
 8011650:	f002 fe28 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011654:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011658:	f103 031c 	add.w	r3, r3, #28
 801165c:	2101      	movs	r1, #1
 801165e:	4618      	mov	r0, r3
 8011660:	f002 fe20 	bl	80142a4 <pushStack_walk>
 8011664:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011668:	f103 031c 	add.w	r3, r3, #28
 801166c:	2100      	movs	r1, #0
 801166e:	4618      	mov	r0, r3
 8011670:	f002 fe18 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011674:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011678:	3b1c      	subs	r3, #28
 801167a:	2101      	movs	r1, #1
 801167c:	4618      	mov	r0, r3
 801167e:	f002 fe11 	bl	80142a4 <pushStack_walk>
 8011682:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011686:	3b1c      	subs	r3, #28
 8011688:	2108      	movs	r1, #8
 801168a:	4618      	mov	r0, r3
 801168c:	f002 fe0a 	bl	80142a4 <pushStack_walk>
 8011690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011694:	3b1c      	subs	r3, #28
 8011696:	2100      	movs	r1, #0
 8011698:	4618      	mov	r0, r3
 801169a:	f002 fe03 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 801169e:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80116a2:	f103 031c 	add.w	r3, r3, #28
 80116a6:	2101      	movs	r1, #1
 80116a8:	4618      	mov	r0, r3
 80116aa:	f002 fdfb 	bl	80142a4 <pushStack_walk>
 80116ae:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80116b2:	f103 031c 	add.w	r3, r3, #28
 80116b6:	2101      	movs	r1, #1
 80116b8:	4618      	mov	r0, r3
 80116ba:	f002 fdf3 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80116be:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80116c2:	3b1c      	subs	r3, #28
 80116c4:	2101      	movs	r1, #1
 80116c6:	4618      	mov	r0, r3
 80116c8:	f002 fdec 	bl	80142a4 <pushStack_walk>
 80116cc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80116d0:	3b1c      	subs	r3, #28
 80116d2:	2108      	movs	r1, #8
 80116d4:	4618      	mov	r0, r3
 80116d6:	f002 fde5 	bl	80142a4 <pushStack_walk>
 80116da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80116de:	3b1c      	subs	r3, #28
 80116e0:	2100      	movs	r1, #0
 80116e2:	4618      	mov	r0, r3
 80116e4:	f002 fdde 	bl	80142a4 <pushStack_walk>



	unsigned short count_number = 1;
 80116e8:	2301      	movs	r3, #1
 80116ea:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80116ee:	f102 0206 	add.w	r2, r2, #6
 80116f2:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 80116f4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80116f8:	f103 031c 	add.w	r3, r3, #28
 80116fc:	4618      	mov	r0, r3
 80116fe:	f002 fdfb 	bl	80142f8 <popStack_walk>
 8011702:	4603      	mov	r3, r0
 8011704:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011708:	f102 0204 	add.w	r2, r2, #4
 801170c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801170e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011712:	f103 031c 	add.w	r3, r3, #28
 8011716:	4618      	mov	r0, r3
 8011718:	f002 fdee 	bl	80142f8 <popStack_walk>
 801171c:	4603      	mov	r3, r0
 801171e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011722:	f102 0202 	add.w	r2, r2, #2
 8011726:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 8011728:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801172c:	3b1c      	subs	r3, #28
 801172e:	4618      	mov	r0, r3
 8011730:	f002 fde2 	bl	80142f8 <popStack_walk>
 8011734:	4603      	mov	r3, r0
 8011736:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801173a:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 801173c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011740:	3b1c      	subs	r3, #28
 8011742:	4618      	mov	r0, r3
 8011744:	f002 fdd8 	bl	80142f8 <popStack_walk>
 8011748:	4603      	mov	r3, r0
 801174a:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 801174e:	f102 021e 	add.w	r2, r2, #30
 8011752:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 8011754:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011758:	3b1c      	subs	r3, #28
 801175a:	4618      	mov	r0, r3
 801175c:	f002 fdcc 	bl	80142f8 <popStack_walk>
 8011760:	4603      	mov	r3, r0
 8011762:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 8011766:	f102 021c 	add.w	r2, r2, #28
 801176a:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801176c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011770:	f103 0304 	add.w	r3, r3, #4
 8011774:	881b      	ldrh	r3, [r3, #0]
 8011776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801177a:	4293      	cmp	r3, r2
 801177c:	f001 8399 	beq.w	8012eb2 <create_DijkstraMap+0x1a42>
 8011780:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011784:	f103 0302 	add.w	r3, r3, #2
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801178e:	4293      	cmp	r3, r2
 8011790:	f001 838f 	beq.w	8012eb2 <create_DijkstraMap+0x1a42>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 8011794:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011798:	881b      	ldrh	r3, [r3, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	f040 85c0 	bne.w	8012320 <create_DijkstraMap+0xeb0>
			if(Ycoordinate <= 13){
 80117a0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80117a4:	f103 0302 	add.w	r3, r3, #2
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	2b0d      	cmp	r3, #13
 80117ac:	f200 80f5 	bhi.w	801199a <create_DijkstraMap+0x52a>
				if(Direction==SLANT_NORTH){
 80117b0:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80117b4:	f103 031e 	add.w	r3, r3, #30
 80117b8:	881b      	ldrh	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d132      	bne.n	8011824 <create_DijkstraMap+0x3b4>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80117be:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80117c2:	f103 031c 	add.w	r3, r3, #28
 80117c6:	881b      	ldrh	r3, [r3, #0]
 80117c8:	3301      	adds	r3, #1
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80117d0:	f102 0212 	add.w	r2, r2, #18
 80117d4:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80117d6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80117da:	f103 0312 	add.w	r3, r3, #18
 80117de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117e2:	2b04      	cmp	r3, #4
 80117e4:	dd05      	ble.n	80117f2 <create_DijkstraMap+0x382>
 80117e6:	2304      	movs	r3, #4
 80117e8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80117ec:	f102 0212 	add.w	r2, r2, #18
 80117f0:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80117f2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80117f6:	f103 0312 	add.w	r3, r3, #18
 80117fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80117fe:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011802:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011806:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801180a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801180e:	f102 0216 	add.w	r2, r2, #22
 8011812:	8013      	strh	r3, [r2, #0]
 8011814:	e016      	b.n	8011844 <create_DijkstraMap+0x3d4>
 8011816:	bf00      	nop
 8011818:	08021f54 	.word	0x08021f54
 801181c:	08021f60 	.word	0x08021f60
 8011820:	20000f2c 	.word	0x20000f2c
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011824:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011828:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801182c:	881b      	ldrh	r3, [r3, #0]
 801182e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011832:	f102 0216 	add.w	r2, r2, #22
 8011836:	8013      	strh	r3, [r2, #0]
 8011838:	2300      	movs	r3, #0
 801183a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801183e:	f102 0212 	add.w	r2, r2, #18
 8011842:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011844:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011848:	f103 0302 	add.w	r3, r3, #2
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	3301      	adds	r3, #1
 8011850:	4a6f      	ldr	r2, [pc, #444]	; (8011a10 <create_DijkstraMap+0x5a0>)
 8011852:	330c      	adds	r3, #12
 8011854:	005b      	lsls	r3, r3, #1
 8011856:	4413      	add	r3, r2
 8011858:	88db      	ldrh	r3, [r3, #6]
 801185a:	461a      	mov	r2, r3
 801185c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011860:	f103 0304 	add.w	r3, r3, #4
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	fa42 f303 	asr.w	r3, r2, r3
 801186a:	f003 0301 	and.w	r3, r3, #1
 801186e:	2b00      	cmp	r3, #0
 8011870:	f040 8093 	bne.w	801199a <create_DijkstraMap+0x52a>
 8011874:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011878:	f103 0304 	add.w	r3, r3, #4
 801187c:	881a      	ldrh	r2, [r3, #0]
 801187e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011882:	f103 0302 	add.w	r3, r3, #2
 8011886:	881b      	ldrh	r3, [r3, #0]
 8011888:	1c59      	adds	r1, r3, #1
 801188a:	4862      	ldr	r0, [pc, #392]	; (8011a14 <create_DijkstraMap+0x5a4>)
 801188c:	4613      	mov	r3, r2
 801188e:	011b      	lsls	r3, r3, #4
 8011890:	1a9b      	subs	r3, r3, r2
 8011892:	440b      	add	r3, r1
 8011894:	33f0      	adds	r3, #240	; 0xf0
 8011896:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801189a:	461c      	mov	r4, r3
 801189c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118a0:	f103 0304 	add.w	r3, r3, #4
 80118a4:	881a      	ldrh	r2, [r3, #0]
 80118a6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118aa:	f103 0302 	add.w	r3, r3, #2
 80118ae:	8819      	ldrh	r1, [r3, #0]
 80118b0:	4858      	ldr	r0, [pc, #352]	; (8011a14 <create_DijkstraMap+0x5a4>)
 80118b2:	4613      	mov	r3, r2
 80118b4:	011b      	lsls	r3, r3, #4
 80118b6:	1a9b      	subs	r3, r3, r2
 80118b8:	440b      	add	r3, r1
 80118ba:	33f0      	adds	r3, #240	; 0xf0
 80118bc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80118c0:	461a      	mov	r2, r3
 80118c2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118c6:	f103 0316 	add.w	r3, r3, #22
 80118ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118ce:	4413      	add	r3, r2
 80118d0:	429c      	cmp	r4, r3
 80118d2:	dd62      	ble.n	801199a <create_DijkstraMap+0x52a>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 80118d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118d8:	f103 0304 	add.w	r3, r3, #4
 80118dc:	881a      	ldrh	r2, [r3, #0]
 80118de:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118e2:	f103 0302 	add.w	r3, r3, #2
 80118e6:	8819      	ldrh	r1, [r3, #0]
 80118e8:	484a      	ldr	r0, [pc, #296]	; (8011a14 <create_DijkstraMap+0x5a4>)
 80118ea:	4613      	mov	r3, r2
 80118ec:	011b      	lsls	r3, r3, #4
 80118ee:	1a9b      	subs	r3, r3, r2
 80118f0:	440b      	add	r3, r1
 80118f2:	33f0      	adds	r3, #240	; 0xf0
 80118f4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80118f8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118fc:	f103 0316 	add.w	r3, r3, #22
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011906:	f102 0204 	add.w	r2, r2, #4
 801190a:	8812      	ldrh	r2, [r2, #0]
 801190c:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011910:	f101 0102 	add.w	r1, r1, #2
 8011914:	8809      	ldrh	r1, [r1, #0]
 8011916:	3101      	adds	r1, #1
 8011918:	4403      	add	r3, r0
 801191a:	b29c      	uxth	r4, r3
 801191c:	483d      	ldr	r0, [pc, #244]	; (8011a14 <create_DijkstraMap+0x5a4>)
 801191e:	4613      	mov	r3, r2
 8011920:	011b      	lsls	r3, r3, #4
 8011922:	1a9b      	subs	r3, r3, r2
 8011924:	440b      	add	r3, r1
 8011926:	33f0      	adds	r3, #240	; 0xf0
 8011928:	4622      	mov	r2, r4
 801192a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 801192e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011932:	f103 0304 	add.w	r3, r3, #4
 8011936:	881a      	ldrh	r2, [r3, #0]
 8011938:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801193c:	f103 031c 	add.w	r3, r3, #28
 8011940:	4611      	mov	r1, r2
 8011942:	4618      	mov	r0, r3
 8011944:	f002 fcae 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011948:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801194c:	f103 0302 	add.w	r3, r3, #2
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	3301      	adds	r3, #1
 8011954:	b29a      	uxth	r2, r3
 8011956:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801195a:	f103 031c 	add.w	r3, r3, #28
 801195e:	4611      	mov	r1, r2
 8011960:	4618      	mov	r0, r3
 8011962:	f002 fc9f 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011966:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801196a:	3b1c      	subs	r3, #28
 801196c:	2100      	movs	r1, #0
 801196e:	4618      	mov	r0, r3
 8011970:	f002 fc98 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011974:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011978:	3b1c      	subs	r3, #28
 801197a:	2100      	movs	r1, #0
 801197c:	4618      	mov	r0, r3
 801197e:	f002 fc91 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011982:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011986:	f103 0312 	add.w	r3, r3, #18
 801198a:	881a      	ldrh	r2, [r3, #0]
 801198c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011990:	3b1c      	subs	r3, #28
 8011992:	4611      	mov	r1, r2
 8011994:	4618      	mov	r0, r3
 8011996:	f002 fc85 	bl	80142a4 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 801199a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801199e:	f103 0302 	add.w	r3, r3, #2
 80119a2:	881b      	ldrh	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f000 80f2 	beq.w	8011b8e <create_DijkstraMap+0x71e>
				if(Direction==SLANT_SOUTH){
 80119aa:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80119ae:	f103 031e 	add.w	r3, r3, #30
 80119b2:	881b      	ldrh	r3, [r3, #0]
 80119b4:	2b04      	cmp	r3, #4
 80119b6:	d12f      	bne.n	8011a18 <create_DijkstraMap+0x5a8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80119b8:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80119bc:	f103 031c 	add.w	r3, r3, #28
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	3301      	adds	r3, #1
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80119ca:	f102 0212 	add.w	r2, r2, #18
 80119ce:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80119d0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119d4:	f103 0312 	add.w	r3, r3, #18
 80119d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80119dc:	2b04      	cmp	r3, #4
 80119de:	dd05      	ble.n	80119ec <create_DijkstraMap+0x57c>
 80119e0:	2304      	movs	r3, #4
 80119e2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80119e6:	f102 0212 	add.w	r2, r2, #18
 80119ea:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80119ec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119f0:	f103 0312 	add.w	r3, r3, #18
 80119f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80119f8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80119fc:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011a00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011a04:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a08:	f102 0216 	add.w	r2, r2, #22
 8011a0c:	8013      	strh	r3, [r2, #0]
 8011a0e:	e013      	b.n	8011a38 <create_DijkstraMap+0x5c8>
 8011a10:	20000c3c 	.word	0x20000c3c
 8011a14:	20000f2c 	.word	0x20000f2c
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011a18:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011a1c:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011a20:	881b      	ldrh	r3, [r3, #0]
 8011a22:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a26:	f102 0216 	add.w	r2, r2, #22
 8011a2a:	8013      	strh	r3, [r2, #0]
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a32:	f102 0212 	add.w	r2, r2, #18
 8011a36:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011a38:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a3c:	f103 0302 	add.w	r3, r3, #2
 8011a40:	881b      	ldrh	r3, [r3, #0]
 8011a42:	3b01      	subs	r3, #1
 8011a44:	4a6f      	ldr	r2, [pc, #444]	; (8011c04 <create_DijkstraMap+0x794>)
 8011a46:	330c      	adds	r3, #12
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	4413      	add	r3, r2
 8011a4c:	88db      	ldrh	r3, [r3, #6]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a54:	f103 0304 	add.w	r3, r3, #4
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	fa42 f303 	asr.w	r3, r2, r3
 8011a5e:	f003 0301 	and.w	r3, r3, #1
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f040 8093 	bne.w	8011b8e <create_DijkstraMap+0x71e>
 8011a68:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a6c:	f103 0304 	add.w	r3, r3, #4
 8011a70:	881a      	ldrh	r2, [r3, #0]
 8011a72:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a76:	f103 0302 	add.w	r3, r3, #2
 8011a7a:	881b      	ldrh	r3, [r3, #0]
 8011a7c:	1e59      	subs	r1, r3, #1
 8011a7e:	4862      	ldr	r0, [pc, #392]	; (8011c08 <create_DijkstraMap+0x798>)
 8011a80:	4613      	mov	r3, r2
 8011a82:	011b      	lsls	r3, r3, #4
 8011a84:	1a9b      	subs	r3, r3, r2
 8011a86:	440b      	add	r3, r1
 8011a88:	33f0      	adds	r3, #240	; 0xf0
 8011a8a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011a8e:	461c      	mov	r4, r3
 8011a90:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a94:	f103 0304 	add.w	r3, r3, #4
 8011a98:	881a      	ldrh	r2, [r3, #0]
 8011a9a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a9e:	f103 0302 	add.w	r3, r3, #2
 8011aa2:	8819      	ldrh	r1, [r3, #0]
 8011aa4:	4858      	ldr	r0, [pc, #352]	; (8011c08 <create_DijkstraMap+0x798>)
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	011b      	lsls	r3, r3, #4
 8011aaa:	1a9b      	subs	r3, r3, r2
 8011aac:	440b      	add	r3, r1
 8011aae:	33f0      	adds	r3, #240	; 0xf0
 8011ab0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011aba:	f103 0316 	add.w	r3, r3, #22
 8011abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	429c      	cmp	r4, r3
 8011ac6:	dd62      	ble.n	8011b8e <create_DijkstraMap+0x71e>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011ac8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011acc:	f103 0304 	add.w	r3, r3, #4
 8011ad0:	881a      	ldrh	r2, [r3, #0]
 8011ad2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ad6:	f103 0302 	add.w	r3, r3, #2
 8011ada:	8819      	ldrh	r1, [r3, #0]
 8011adc:	484a      	ldr	r0, [pc, #296]	; (8011c08 <create_DijkstraMap+0x798>)
 8011ade:	4613      	mov	r3, r2
 8011ae0:	011b      	lsls	r3, r3, #4
 8011ae2:	1a9b      	subs	r3, r3, r2
 8011ae4:	440b      	add	r3, r1
 8011ae6:	33f0      	adds	r3, #240	; 0xf0
 8011ae8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011aec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011af0:	f103 0316 	add.w	r3, r3, #22
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011afa:	f102 0204 	add.w	r2, r2, #4
 8011afe:	8812      	ldrh	r2, [r2, #0]
 8011b00:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011b04:	f101 0102 	add.w	r1, r1, #2
 8011b08:	8809      	ldrh	r1, [r1, #0]
 8011b0a:	3901      	subs	r1, #1
 8011b0c:	4403      	add	r3, r0
 8011b0e:	b29c      	uxth	r4, r3
 8011b10:	483d      	ldr	r0, [pc, #244]	; (8011c08 <create_DijkstraMap+0x798>)
 8011b12:	4613      	mov	r3, r2
 8011b14:	011b      	lsls	r3, r3, #4
 8011b16:	1a9b      	subs	r3, r3, r2
 8011b18:	440b      	add	r3, r1
 8011b1a:	33f0      	adds	r3, #240	; 0xf0
 8011b1c:	4622      	mov	r2, r4
 8011b1e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011b22:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b26:	f103 0304 	add.w	r3, r3, #4
 8011b2a:	881a      	ldrh	r2, [r3, #0]
 8011b2c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011b30:	f103 031c 	add.w	r3, r3, #28
 8011b34:	4611      	mov	r1, r2
 8011b36:	4618      	mov	r0, r3
 8011b38:	f002 fbb4 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011b3c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b40:	f103 0302 	add.w	r3, r3, #2
 8011b44:	881b      	ldrh	r3, [r3, #0]
 8011b46:	3b01      	subs	r3, #1
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011b4e:	f103 031c 	add.w	r3, r3, #28
 8011b52:	4611      	mov	r1, r2
 8011b54:	4618      	mov	r0, r3
 8011b56:	f002 fba5 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011b5a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011b5e:	3b1c      	subs	r3, #28
 8011b60:	2100      	movs	r1, #0
 8011b62:	4618      	mov	r0, r3
 8011b64:	f002 fb9e 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011b68:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011b6c:	3b1c      	subs	r3, #28
 8011b6e:	2104      	movs	r1, #4
 8011b70:	4618      	mov	r0, r3
 8011b72:	f002 fb97 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011b76:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b7a:	f103 0312 	add.w	r3, r3, #18
 8011b7e:	881a      	ldrh	r2, [r3, #0]
 8011b80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011b84:	3b1c      	subs	r3, #28
 8011b86:	4611      	mov	r1, r2
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f002 fb8b 	bl	80142a4 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011b8e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b92:	f103 0304 	add.w	r3, r3, #4
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	2b0e      	cmp	r3, #14
 8011b9a:	f200 81d8 	bhi.w	8011f4e <create_DijkstraMap+0xade>
				if(Direction==SLANT_SOUTH_EAST){
 8011b9e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011ba2:	f103 031e 	add.w	r3, r3, #30
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	2b03      	cmp	r3, #3
 8011baa:	d12f      	bne.n	8011c0c <create_DijkstraMap+0x79c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011bac:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011bb0:	f103 031c 	add.w	r3, r3, #28
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011bbe:	f102 0212 	add.w	r2, r2, #18
 8011bc2:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011bc4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bc8:	f103 0312 	add.w	r3, r3, #18
 8011bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bd0:	2b05      	cmp	r3, #5
 8011bd2:	dd05      	ble.n	8011be0 <create_DijkstraMap+0x770>
 8011bd4:	2305      	movs	r3, #5
 8011bd6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011bda:	f102 0212 	add.w	r2, r2, #18
 8011bde:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011be0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011be4:	f103 0312 	add.w	r3, r3, #18
 8011be8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bec:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011bf0:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011bf4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011bf8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011bfc:	f102 0214 	add.w	r2, r2, #20
 8011c00:	8013      	strh	r3, [r2, #0]
 8011c02:	e013      	b.n	8011c2c <create_DijkstraMap+0x7bc>
 8011c04:	20000c3c 	.word	0x20000c3c
 8011c08:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011c0c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011c10:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011c14:	881b      	ldrh	r3, [r3, #0]
 8011c16:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c1a:	f102 0214 	add.w	r2, r2, #20
 8011c1e:	8013      	strh	r3, [r2, #0]
 8011c20:	2300      	movs	r3, #0
 8011c22:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c26:	f102 0212 	add.w	r2, r2, #18
 8011c2a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011c2c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c30:	f103 0304 	add.w	r3, r3, #4
 8011c34:	881b      	ldrh	r3, [r3, #0]
 8011c36:	4a68      	ldr	r2, [pc, #416]	; (8011dd8 <create_DijkstraMap+0x968>)
 8011c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c42:	f103 0302 	add.w	r3, r3, #2
 8011c46:	881b      	ldrh	r3, [r3, #0]
 8011c48:	fa42 f303 	asr.w	r3, r2, r3
 8011c4c:	f003 0301 	and.w	r3, r3, #1
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	f040 808d 	bne.w	8011d70 <create_DijkstraMap+0x900>
 8011c56:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c5a:	f103 0302 	add.w	r3, r3, #2
 8011c5e:	881a      	ldrh	r2, [r3, #0]
 8011c60:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c64:	f103 0304 	add.w	r3, r3, #4
 8011c68:	8819      	ldrh	r1, [r3, #0]
 8011c6a:	485c      	ldr	r0, [pc, #368]	; (8011ddc <create_DijkstraMap+0x96c>)
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	011b      	lsls	r3, r3, #4
 8011c70:	1a9b      	subs	r3, r3, r2
 8011c72:	440b      	add	r3, r1
 8011c74:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011c78:	461c      	mov	r4, r3
 8011c7a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c7e:	f103 0304 	add.w	r3, r3, #4
 8011c82:	881a      	ldrh	r2, [r3, #0]
 8011c84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c88:	f103 0302 	add.w	r3, r3, #2
 8011c8c:	8819      	ldrh	r1, [r3, #0]
 8011c8e:	4853      	ldr	r0, [pc, #332]	; (8011ddc <create_DijkstraMap+0x96c>)
 8011c90:	4613      	mov	r3, r2
 8011c92:	011b      	lsls	r3, r3, #4
 8011c94:	1a9b      	subs	r3, r3, r2
 8011c96:	440b      	add	r3, r1
 8011c98:	33f0      	adds	r3, #240	; 0xf0
 8011c9a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ca4:	f103 0314 	add.w	r3, r3, #20
 8011ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cac:	4413      	add	r3, r2
 8011cae:	429c      	cmp	r4, r3
 8011cb0:	dd5e      	ble.n	8011d70 <create_DijkstraMap+0x900>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011cb2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cb6:	f103 0304 	add.w	r3, r3, #4
 8011cba:	881a      	ldrh	r2, [r3, #0]
 8011cbc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cc0:	f103 0302 	add.w	r3, r3, #2
 8011cc4:	8819      	ldrh	r1, [r3, #0]
 8011cc6:	4845      	ldr	r0, [pc, #276]	; (8011ddc <create_DijkstraMap+0x96c>)
 8011cc8:	4613      	mov	r3, r2
 8011cca:	011b      	lsls	r3, r3, #4
 8011ccc:	1a9b      	subs	r3, r3, r2
 8011cce:	440b      	add	r3, r1
 8011cd0:	33f0      	adds	r3, #240	; 0xf0
 8011cd2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011cd6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cda:	f103 0314 	add.w	r3, r3, #20
 8011cde:	881b      	ldrh	r3, [r3, #0]
 8011ce0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ce4:	f102 0202 	add.w	r2, r2, #2
 8011ce8:	8812      	ldrh	r2, [r2, #0]
 8011cea:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011cee:	f101 0104 	add.w	r1, r1, #4
 8011cf2:	8809      	ldrh	r1, [r1, #0]
 8011cf4:	4403      	add	r3, r0
 8011cf6:	b29c      	uxth	r4, r3
 8011cf8:	4838      	ldr	r0, [pc, #224]	; (8011ddc <create_DijkstraMap+0x96c>)
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	011b      	lsls	r3, r3, #4
 8011cfe:	1a9b      	subs	r3, r3, r2
 8011d00:	440b      	add	r3, r1
 8011d02:	4622      	mov	r2, r4
 8011d04:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011d08:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d0c:	f103 0304 	add.w	r3, r3, #4
 8011d10:	881a      	ldrh	r2, [r3, #0]
 8011d12:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011d16:	f103 031c 	add.w	r3, r3, #28
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f002 fac1 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011d22:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d26:	f103 0302 	add.w	r3, r3, #2
 8011d2a:	881a      	ldrh	r2, [r3, #0]
 8011d2c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011d30:	f103 031c 	add.w	r3, r3, #28
 8011d34:	4611      	mov	r1, r2
 8011d36:	4618      	mov	r0, r3
 8011d38:	f002 fab4 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011d3c:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011d40:	3b1c      	subs	r3, #28
 8011d42:	2101      	movs	r1, #1
 8011d44:	4618      	mov	r0, r3
 8011d46:	f002 faad 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011d4a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011d4e:	3b1c      	subs	r3, #28
 8011d50:	2103      	movs	r1, #3
 8011d52:	4618      	mov	r0, r3
 8011d54:	f002 faa6 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011d58:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d5c:	f103 0312 	add.w	r3, r3, #18
 8011d60:	881a      	ldrh	r2, [r3, #0]
 8011d62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011d66:	3b1c      	subs	r3, #28
 8011d68:	4611      	mov	r1, r2
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f002 fa9a 	bl	80142a4 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011d70:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011d74:	f103 031e 	add.w	r3, r3, #30
 8011d78:	881b      	ldrh	r3, [r3, #0]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d130      	bne.n	8011de0 <create_DijkstraMap+0x970>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011d7e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011d82:	f103 031c 	add.w	r3, r3, #28
 8011d86:	881b      	ldrh	r3, [r3, #0]
 8011d88:	3301      	adds	r3, #1
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011d90:	f102 0212 	add.w	r2, r2, #18
 8011d94:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011d96:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d9a:	f103 0312 	add.w	r3, r3, #18
 8011d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011da2:	2b05      	cmp	r3, #5
 8011da4:	dd05      	ble.n	8011db2 <create_DijkstraMap+0x942>
 8011da6:	2305      	movs	r3, #5
 8011da8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011dac:	f102 0212 	add.w	r2, r2, #18
 8011db0:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011db2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011db6:	f103 0312 	add.w	r3, r3, #18
 8011dba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011dbe:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011dc2:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011dc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011dca:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011dce:	f102 0214 	add.w	r2, r2, #20
 8011dd2:	8013      	strh	r3, [r2, #0]
 8011dd4:	e014      	b.n	8011e00 <create_DijkstraMap+0x990>
 8011dd6:	bf00      	nop
 8011dd8:	20000c3c 	.word	0x20000c3c
 8011ddc:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011de0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011de4:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011dee:	f102 0214 	add.w	r2, r2, #20
 8011df2:	8013      	strh	r3, [r2, #0]
 8011df4:	2300      	movs	r3, #0
 8011df6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011dfa:	f102 0212 	add.w	r2, r2, #18
 8011dfe:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011e00:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e04:	f103 0304 	add.w	r3, r3, #4
 8011e08:	881b      	ldrh	r3, [r3, #0]
 8011e0a:	4a6e      	ldr	r2, [pc, #440]	; (8011fc4 <create_DijkstraMap+0xb54>)
 8011e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e10:	461a      	mov	r2, r3
 8011e12:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e16:	f103 0302 	add.w	r3, r3, #2
 8011e1a:	881b      	ldrh	r3, [r3, #0]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	fa42 f303 	asr.w	r3, r2, r3
 8011e22:	f003 0301 	and.w	r3, r3, #1
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f040 8091 	bne.w	8011f4e <create_DijkstraMap+0xade>
 8011e2c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e30:	f103 0302 	add.w	r3, r3, #2
 8011e34:	881b      	ldrh	r3, [r3, #0]
 8011e36:	1c5a      	adds	r2, r3, #1
 8011e38:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e3c:	f103 0304 	add.w	r3, r3, #4
 8011e40:	8819      	ldrh	r1, [r3, #0]
 8011e42:	4861      	ldr	r0, [pc, #388]	; (8011fc8 <create_DijkstraMap+0xb58>)
 8011e44:	4613      	mov	r3, r2
 8011e46:	011b      	lsls	r3, r3, #4
 8011e48:	1a9b      	subs	r3, r3, r2
 8011e4a:	440b      	add	r3, r1
 8011e4c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e50:	461c      	mov	r4, r3
 8011e52:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e56:	f103 0304 	add.w	r3, r3, #4
 8011e5a:	881a      	ldrh	r2, [r3, #0]
 8011e5c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e60:	f103 0302 	add.w	r3, r3, #2
 8011e64:	8819      	ldrh	r1, [r3, #0]
 8011e66:	4858      	ldr	r0, [pc, #352]	; (8011fc8 <create_DijkstraMap+0xb58>)
 8011e68:	4613      	mov	r3, r2
 8011e6a:	011b      	lsls	r3, r3, #4
 8011e6c:	1a9b      	subs	r3, r3, r2
 8011e6e:	440b      	add	r3, r1
 8011e70:	33f0      	adds	r3, #240	; 0xf0
 8011e72:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e76:	461a      	mov	r2, r3
 8011e78:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e7c:	f103 0314 	add.w	r3, r3, #20
 8011e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e84:	4413      	add	r3, r2
 8011e86:	429c      	cmp	r4, r3
 8011e88:	dd61      	ble.n	8011f4e <create_DijkstraMap+0xade>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011e8a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e8e:	f103 0304 	add.w	r3, r3, #4
 8011e92:	881a      	ldrh	r2, [r3, #0]
 8011e94:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e98:	f103 0302 	add.w	r3, r3, #2
 8011e9c:	8819      	ldrh	r1, [r3, #0]
 8011e9e:	484a      	ldr	r0, [pc, #296]	; (8011fc8 <create_DijkstraMap+0xb58>)
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	011b      	lsls	r3, r3, #4
 8011ea4:	1a9b      	subs	r3, r3, r2
 8011ea6:	440b      	add	r3, r1
 8011ea8:	33f0      	adds	r3, #240	; 0xf0
 8011eaa:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011eae:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011eb2:	f103 0314 	add.w	r3, r3, #20
 8011eb6:	881b      	ldrh	r3, [r3, #0]
 8011eb8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ebc:	f102 0202 	add.w	r2, r2, #2
 8011ec0:	8812      	ldrh	r2, [r2, #0]
 8011ec2:	3201      	adds	r2, #1
 8011ec4:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011ec8:	f101 0104 	add.w	r1, r1, #4
 8011ecc:	8809      	ldrh	r1, [r1, #0]
 8011ece:	4403      	add	r3, r0
 8011ed0:	b29c      	uxth	r4, r3
 8011ed2:	483d      	ldr	r0, [pc, #244]	; (8011fc8 <create_DijkstraMap+0xb58>)
 8011ed4:	4613      	mov	r3, r2
 8011ed6:	011b      	lsls	r3, r3, #4
 8011ed8:	1a9b      	subs	r3, r3, r2
 8011eda:	440b      	add	r3, r1
 8011edc:	4622      	mov	r2, r4
 8011ede:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011ee2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ee6:	f103 0304 	add.w	r3, r3, #4
 8011eea:	881a      	ldrh	r2, [r3, #0]
 8011eec:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011ef0:	f103 031c 	add.w	r3, r3, #28
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f002 f9d4 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8011efc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f00:	f103 0302 	add.w	r3, r3, #2
 8011f04:	881b      	ldrh	r3, [r3, #0]
 8011f06:	3301      	adds	r3, #1
 8011f08:	b29a      	uxth	r2, r3
 8011f0a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011f0e:	f103 031c 	add.w	r3, r3, #28
 8011f12:	4611      	mov	r1, r2
 8011f14:	4618      	mov	r0, r3
 8011f16:	f002 f9c5 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011f1a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011f1e:	3b1c      	subs	r3, #28
 8011f20:	2101      	movs	r1, #1
 8011f22:	4618      	mov	r0, r3
 8011f24:	f002 f9be 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8011f28:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011f2c:	3b1c      	subs	r3, #28
 8011f2e:	2101      	movs	r1, #1
 8011f30:	4618      	mov	r0, r3
 8011f32:	f002 f9b7 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011f36:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f3a:	f103 0312 	add.w	r3, r3, #18
 8011f3e:	881a      	ldrh	r2, [r3, #0]
 8011f40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011f44:	3b1c      	subs	r3, #28
 8011f46:	4611      	mov	r1, r2
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f002 f9ab 	bl	80142a4 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8011f4e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f52:	f103 0304 	add.w	r3, r3, #4
 8011f56:	881b      	ldrh	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f000 81e1 	beq.w	8012320 <create_DijkstraMap+0xeb0>
				if(Direction==SLANT_SOUTH_WEST){
 8011f5e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011f62:	f103 031e 	add.w	r3, r3, #30
 8011f66:	881b      	ldrh	r3, [r3, #0]
 8011f68:	2b05      	cmp	r3, #5
 8011f6a:	d12f      	bne.n	8011fcc <create_DijkstraMap+0xb5c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011f6c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011f70:	f103 031c 	add.w	r3, r3, #28
 8011f74:	881b      	ldrh	r3, [r3, #0]
 8011f76:	3301      	adds	r3, #1
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f7e:	f102 0212 	add.w	r2, r2, #18
 8011f82:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011f84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f88:	f103 0312 	add.w	r3, r3, #18
 8011f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f90:	2b05      	cmp	r3, #5
 8011f92:	dd05      	ble.n	8011fa0 <create_DijkstraMap+0xb30>
 8011f94:	2305      	movs	r3, #5
 8011f96:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f9a:	f102 0212 	add.w	r2, r2, #18
 8011f9e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011fa0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fa4:	f103 0312 	add.w	r3, r3, #18
 8011fa8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011fac:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011fb0:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011fb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011fb8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fbc:	f102 0214 	add.w	r2, r2, #20
 8011fc0:	8013      	strh	r3, [r2, #0]
 8011fc2:	e013      	b.n	8011fec <create_DijkstraMap+0xb7c>
 8011fc4:	20000c3c 	.word	0x20000c3c
 8011fc8:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011fcc:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011fd0:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011fd4:	881b      	ldrh	r3, [r3, #0]
 8011fd6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fda:	f102 0214 	add.w	r2, r2, #20
 8011fde:	8013      	strh	r3, [r2, #0]
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fe6:	f102 0212 	add.w	r2, r2, #18
 8011fea:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011fec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ff0:	f103 0304 	add.w	r3, r3, #4
 8011ff4:	881b      	ldrh	r3, [r3, #0]
 8011ff6:	3b01      	subs	r3, #1
 8011ff8:	4a69      	ldr	r2, [pc, #420]	; (80121a0 <create_DijkstraMap+0xd30>)
 8011ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ffe:	461a      	mov	r2, r3
 8012000:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012004:	f103 0302 	add.w	r3, r3, #2
 8012008:	881b      	ldrh	r3, [r3, #0]
 801200a:	fa42 f303 	asr.w	r3, r2, r3
 801200e:	f003 0301 	and.w	r3, r3, #1
 8012012:	2b00      	cmp	r3, #0
 8012014:	f040 8091 	bne.w	801213a <create_DijkstraMap+0xcca>
 8012018:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801201c:	f103 0302 	add.w	r3, r3, #2
 8012020:	881a      	ldrh	r2, [r3, #0]
 8012022:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012026:	f103 0304 	add.w	r3, r3, #4
 801202a:	881b      	ldrh	r3, [r3, #0]
 801202c:	1e59      	subs	r1, r3, #1
 801202e:	485d      	ldr	r0, [pc, #372]	; (80121a4 <create_DijkstraMap+0xd34>)
 8012030:	4613      	mov	r3, r2
 8012032:	011b      	lsls	r3, r3, #4
 8012034:	1a9b      	subs	r3, r3, r2
 8012036:	440b      	add	r3, r1
 8012038:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801203c:	461c      	mov	r4, r3
 801203e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012042:	f103 0304 	add.w	r3, r3, #4
 8012046:	881a      	ldrh	r2, [r3, #0]
 8012048:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801204c:	f103 0302 	add.w	r3, r3, #2
 8012050:	8819      	ldrh	r1, [r3, #0]
 8012052:	4854      	ldr	r0, [pc, #336]	; (80121a4 <create_DijkstraMap+0xd34>)
 8012054:	4613      	mov	r3, r2
 8012056:	011b      	lsls	r3, r3, #4
 8012058:	1a9b      	subs	r3, r3, r2
 801205a:	440b      	add	r3, r1
 801205c:	33f0      	adds	r3, #240	; 0xf0
 801205e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012062:	461a      	mov	r2, r3
 8012064:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012068:	f103 0314 	add.w	r3, r3, #20
 801206c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012070:	4413      	add	r3, r2
 8012072:	429c      	cmp	r4, r3
 8012074:	dd61      	ble.n	801213a <create_DijkstraMap+0xcca>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012076:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801207a:	f103 0304 	add.w	r3, r3, #4
 801207e:	881a      	ldrh	r2, [r3, #0]
 8012080:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012084:	f103 0302 	add.w	r3, r3, #2
 8012088:	8819      	ldrh	r1, [r3, #0]
 801208a:	4846      	ldr	r0, [pc, #280]	; (80121a4 <create_DijkstraMap+0xd34>)
 801208c:	4613      	mov	r3, r2
 801208e:	011b      	lsls	r3, r3, #4
 8012090:	1a9b      	subs	r3, r3, r2
 8012092:	440b      	add	r3, r1
 8012094:	33f0      	adds	r3, #240	; 0xf0
 8012096:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801209a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801209e:	f103 0314 	add.w	r3, r3, #20
 80120a2:	881b      	ldrh	r3, [r3, #0]
 80120a4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80120a8:	f102 0202 	add.w	r2, r2, #2
 80120ac:	8812      	ldrh	r2, [r2, #0]
 80120ae:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80120b2:	f101 0104 	add.w	r1, r1, #4
 80120b6:	8809      	ldrh	r1, [r1, #0]
 80120b8:	3901      	subs	r1, #1
 80120ba:	4403      	add	r3, r0
 80120bc:	b29c      	uxth	r4, r3
 80120be:	4839      	ldr	r0, [pc, #228]	; (80121a4 <create_DijkstraMap+0xd34>)
 80120c0:	4613      	mov	r3, r2
 80120c2:	011b      	lsls	r3, r3, #4
 80120c4:	1a9b      	subs	r3, r3, r2
 80120c6:	440b      	add	r3, r1
 80120c8:	4622      	mov	r2, r4
 80120ca:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80120ce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120d2:	f103 0304 	add.w	r3, r3, #4
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	3b01      	subs	r3, #1
 80120da:	b29a      	uxth	r2, r3
 80120dc:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80120e0:	f103 031c 	add.w	r3, r3, #28
 80120e4:	4611      	mov	r1, r2
 80120e6:	4618      	mov	r0, r3
 80120e8:	f002 f8dc 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 80120ec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120f0:	f103 0302 	add.w	r3, r3, #2
 80120f4:	881a      	ldrh	r2, [r3, #0]
 80120f6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80120fa:	f103 031c 	add.w	r3, r3, #28
 80120fe:	4611      	mov	r1, r2
 8012100:	4618      	mov	r0, r3
 8012102:	f002 f8cf 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012106:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801210a:	3b1c      	subs	r3, #28
 801210c:	2101      	movs	r1, #1
 801210e:	4618      	mov	r0, r3
 8012110:	f002 f8c8 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012114:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012118:	3b1c      	subs	r3, #28
 801211a:	2105      	movs	r1, #5
 801211c:	4618      	mov	r0, r3
 801211e:	f002 f8c1 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012122:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012126:	f103 0312 	add.w	r3, r3, #18
 801212a:	881a      	ldrh	r2, [r3, #0]
 801212c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012130:	3b1c      	subs	r3, #28
 8012132:	4611      	mov	r1, r2
 8012134:	4618      	mov	r0, r3
 8012136:	f002 f8b5 	bl	80142a4 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 801213a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801213e:	f103 031e 	add.w	r3, r3, #30
 8012142:	881b      	ldrh	r3, [r3, #0]
 8012144:	2b07      	cmp	r3, #7
 8012146:	d12f      	bne.n	80121a8 <create_DijkstraMap+0xd38>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012148:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801214c:	f103 031c 	add.w	r3, r3, #28
 8012150:	881b      	ldrh	r3, [r3, #0]
 8012152:	3301      	adds	r3, #1
 8012154:	b29b      	uxth	r3, r3
 8012156:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801215a:	f102 0212 	add.w	r2, r2, #18
 801215e:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012160:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012164:	f103 0312 	add.w	r3, r3, #18
 8012168:	f9b3 3000 	ldrsh.w	r3, [r3]
 801216c:	2b05      	cmp	r3, #5
 801216e:	dd05      	ble.n	801217c <create_DijkstraMap+0xd0c>
 8012170:	2305      	movs	r3, #5
 8012172:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012176:	f102 0212 	add.w	r2, r2, #18
 801217a:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 801217c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012180:	f103 0312 	add.w	r3, r3, #18
 8012184:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012188:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801218c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012190:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012194:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012198:	f102 0214 	add.w	r2, r2, #20
 801219c:	8013      	strh	r3, [r2, #0]
 801219e:	e013      	b.n	80121c8 <create_DijkstraMap+0xd58>
 80121a0:	20000c3c 	.word	0x20000c3c
 80121a4:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80121a8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80121ac:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80121b0:	881b      	ldrh	r3, [r3, #0]
 80121b2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121b6:	f102 0214 	add.w	r2, r2, #20
 80121ba:	8013      	strh	r3, [r2, #0]
 80121bc:	2300      	movs	r3, #0
 80121be:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121c2:	f102 0212 	add.w	r2, r2, #18
 80121c6:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80121c8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121cc:	f103 0304 	add.w	r3, r3, #4
 80121d0:	881b      	ldrh	r3, [r3, #0]
 80121d2:	3b01      	subs	r3, #1
 80121d4:	4a73      	ldr	r2, [pc, #460]	; (80123a4 <create_DijkstraMap+0xf34>)
 80121d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80121da:	461a      	mov	r2, r3
 80121dc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121e0:	f103 0302 	add.w	r3, r3, #2
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	3301      	adds	r3, #1
 80121e8:	fa42 f303 	asr.w	r3, r2, r3
 80121ec:	f003 0301 	and.w	r3, r3, #1
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f040 8095 	bne.w	8012320 <create_DijkstraMap+0xeb0>
 80121f6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121fa:	f103 0302 	add.w	r3, r3, #2
 80121fe:	881b      	ldrh	r3, [r3, #0]
 8012200:	1c5a      	adds	r2, r3, #1
 8012202:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012206:	f103 0304 	add.w	r3, r3, #4
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	1e59      	subs	r1, r3, #1
 801220e:	4866      	ldr	r0, [pc, #408]	; (80123a8 <create_DijkstraMap+0xf38>)
 8012210:	4613      	mov	r3, r2
 8012212:	011b      	lsls	r3, r3, #4
 8012214:	1a9b      	subs	r3, r3, r2
 8012216:	440b      	add	r3, r1
 8012218:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801221c:	461c      	mov	r4, r3
 801221e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012222:	f103 0304 	add.w	r3, r3, #4
 8012226:	881a      	ldrh	r2, [r3, #0]
 8012228:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801222c:	f103 0302 	add.w	r3, r3, #2
 8012230:	8819      	ldrh	r1, [r3, #0]
 8012232:	485d      	ldr	r0, [pc, #372]	; (80123a8 <create_DijkstraMap+0xf38>)
 8012234:	4613      	mov	r3, r2
 8012236:	011b      	lsls	r3, r3, #4
 8012238:	1a9b      	subs	r3, r3, r2
 801223a:	440b      	add	r3, r1
 801223c:	33f0      	adds	r3, #240	; 0xf0
 801223e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012242:	461a      	mov	r2, r3
 8012244:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012248:	f103 0314 	add.w	r3, r3, #20
 801224c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012250:	4413      	add	r3, r2
 8012252:	429c      	cmp	r4, r3
 8012254:	dd64      	ble.n	8012320 <create_DijkstraMap+0xeb0>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012256:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801225a:	f103 0304 	add.w	r3, r3, #4
 801225e:	881a      	ldrh	r2, [r3, #0]
 8012260:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012264:	f103 0302 	add.w	r3, r3, #2
 8012268:	8819      	ldrh	r1, [r3, #0]
 801226a:	484f      	ldr	r0, [pc, #316]	; (80123a8 <create_DijkstraMap+0xf38>)
 801226c:	4613      	mov	r3, r2
 801226e:	011b      	lsls	r3, r3, #4
 8012270:	1a9b      	subs	r3, r3, r2
 8012272:	440b      	add	r3, r1
 8012274:	33f0      	adds	r3, #240	; 0xf0
 8012276:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801227a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801227e:	f103 0314 	add.w	r3, r3, #20
 8012282:	881b      	ldrh	r3, [r3, #0]
 8012284:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012288:	f102 0202 	add.w	r2, r2, #2
 801228c:	8812      	ldrh	r2, [r2, #0]
 801228e:	3201      	adds	r2, #1
 8012290:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012294:	f101 0104 	add.w	r1, r1, #4
 8012298:	8809      	ldrh	r1, [r1, #0]
 801229a:	3901      	subs	r1, #1
 801229c:	4403      	add	r3, r0
 801229e:	b29c      	uxth	r4, r3
 80122a0:	4841      	ldr	r0, [pc, #260]	; (80123a8 <create_DijkstraMap+0xf38>)
 80122a2:	4613      	mov	r3, r2
 80122a4:	011b      	lsls	r3, r3, #4
 80122a6:	1a9b      	subs	r3, r3, r2
 80122a8:	440b      	add	r3, r1
 80122aa:	4622      	mov	r2, r4
 80122ac:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80122b0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122b4:	f103 0304 	add.w	r3, r3, #4
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	3b01      	subs	r3, #1
 80122bc:	b29a      	uxth	r2, r3
 80122be:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80122c2:	f103 031c 	add.w	r3, r3, #28
 80122c6:	4611      	mov	r1, r2
 80122c8:	4618      	mov	r0, r3
 80122ca:	f001 ffeb 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 80122ce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122d2:	f103 0302 	add.w	r3, r3, #2
 80122d6:	881b      	ldrh	r3, [r3, #0]
 80122d8:	3301      	adds	r3, #1
 80122da:	b29a      	uxth	r2, r3
 80122dc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80122e0:	f103 031c 	add.w	r3, r3, #28
 80122e4:	4611      	mov	r1, r2
 80122e6:	4618      	mov	r0, r3
 80122e8:	f001 ffdc 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80122ec:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80122f0:	3b1c      	subs	r3, #28
 80122f2:	2101      	movs	r1, #1
 80122f4:	4618      	mov	r0, r3
 80122f6:	f001 ffd5 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80122fa:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80122fe:	3b1c      	subs	r3, #28
 8012300:	2107      	movs	r1, #7
 8012302:	4618      	mov	r0, r3
 8012304:	f001 ffce 	bl	80142a4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012308:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801230c:	f103 0312 	add.w	r3, r3, #18
 8012310:	881a      	ldrh	r2, [r3, #0]
 8012312:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012316:	3b1c      	subs	r3, #28
 8012318:	4611      	mov	r1, r2
 801231a:	4618      	mov	r0, r3
 801231c:	f001 ffc2 	bl	80142a4 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 8012320:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012324:	881b      	ldrh	r3, [r3, #0]
 8012326:	2b01      	cmp	r3, #1
 8012328:	f040 85b6 	bne.w	8012e98 <create_DijkstraMap+0x1a28>
					if(Xcoordinate <= 13){
 801232c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012330:	f103 0304 	add.w	r3, r3, #4
 8012334:	881b      	ldrh	r3, [r3, #0]
 8012336:	2b0d      	cmp	r3, #13
 8012338:	f200 80ed 	bhi.w	8012516 <create_DijkstraMap+0x10a6>
						if(Direction==SLANT_EAST){
 801233c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012340:	f103 031e 	add.w	r3, r3, #30
 8012344:	881b      	ldrh	r3, [r3, #0]
 8012346:	2b02      	cmp	r3, #2
 8012348:	d130      	bne.n	80123ac <create_DijkstraMap+0xf3c>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801234a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801234e:	f103 031c 	add.w	r3, r3, #28
 8012352:	881b      	ldrh	r3, [r3, #0]
 8012354:	3301      	adds	r3, #1
 8012356:	b29b      	uxth	r3, r3
 8012358:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801235c:	f102 0212 	add.w	r2, r2, #18
 8012360:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012362:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012366:	f103 0312 	add.w	r3, r3, #18
 801236a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801236e:	2b04      	cmp	r3, #4
 8012370:	dd05      	ble.n	801237e <create_DijkstraMap+0xf0e>
 8012372:	2304      	movs	r3, #4
 8012374:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012378:	f102 0212 	add.w	r2, r2, #18
 801237c:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 801237e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012382:	f103 0312 	add.w	r3, r3, #18
 8012386:	f9b3 2000 	ldrsh.w	r2, [r3]
 801238a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801238e:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8012392:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012396:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801239a:	f102 0216 	add.w	r2, r2, #22
 801239e:	8013      	strh	r3, [r2, #0]
 80123a0:	e014      	b.n	80123cc <create_DijkstraMap+0xf5c>
 80123a2:	bf00      	nop
 80123a4:	20000c3c 	.word	0x20000c3c
 80123a8:	20000f2c 	.word	0x20000f2c
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80123ac:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80123b0:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123ba:	f102 0216 	add.w	r2, r2, #22
 80123be:	8013      	strh	r3, [r2, #0]
 80123c0:	2300      	movs	r3, #0
 80123c2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123c6:	f102 0212 	add.w	r2, r2, #18
 80123ca:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80123cc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123d0:	f103 0304 	add.w	r3, r3, #4
 80123d4:	881b      	ldrh	r3, [r3, #0]
 80123d6:	3301      	adds	r3, #1
 80123d8:	4a6c      	ldr	r2, [pc, #432]	; (801258c <create_DijkstraMap+0x111c>)
 80123da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123de:	461a      	mov	r2, r3
 80123e0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123e4:	f103 0302 	add.w	r3, r3, #2
 80123e8:	881b      	ldrh	r3, [r3, #0]
 80123ea:	fa42 f303 	asr.w	r3, r2, r3
 80123ee:	f003 0301 	and.w	r3, r3, #1
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	f040 808f 	bne.w	8012516 <create_DijkstraMap+0x10a6>
 80123f8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123fc:	f103 0302 	add.w	r3, r3, #2
 8012400:	881a      	ldrh	r2, [r3, #0]
 8012402:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012406:	f103 0304 	add.w	r3, r3, #4
 801240a:	881b      	ldrh	r3, [r3, #0]
 801240c:	1c59      	adds	r1, r3, #1
 801240e:	4860      	ldr	r0, [pc, #384]	; (8012590 <create_DijkstraMap+0x1120>)
 8012410:	4613      	mov	r3, r2
 8012412:	011b      	lsls	r3, r3, #4
 8012414:	1a9b      	subs	r3, r3, r2
 8012416:	440b      	add	r3, r1
 8012418:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801241c:	461c      	mov	r4, r3
 801241e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012422:	f103 0302 	add.w	r3, r3, #2
 8012426:	881a      	ldrh	r2, [r3, #0]
 8012428:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801242c:	f103 0304 	add.w	r3, r3, #4
 8012430:	8819      	ldrh	r1, [r3, #0]
 8012432:	4857      	ldr	r0, [pc, #348]	; (8012590 <create_DijkstraMap+0x1120>)
 8012434:	4613      	mov	r3, r2
 8012436:	011b      	lsls	r3, r3, #4
 8012438:	1a9b      	subs	r3, r3, r2
 801243a:	440b      	add	r3, r1
 801243c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012440:	461a      	mov	r2, r3
 8012442:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012446:	f103 0316 	add.w	r3, r3, #22
 801244a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801244e:	4413      	add	r3, r2
 8012450:	429c      	cmp	r4, r3
 8012452:	dd60      	ble.n	8012516 <create_DijkstraMap+0x10a6>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012454:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012458:	f103 0302 	add.w	r3, r3, #2
 801245c:	881a      	ldrh	r2, [r3, #0]
 801245e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012462:	f103 0304 	add.w	r3, r3, #4
 8012466:	8819      	ldrh	r1, [r3, #0]
 8012468:	4849      	ldr	r0, [pc, #292]	; (8012590 <create_DijkstraMap+0x1120>)
 801246a:	4613      	mov	r3, r2
 801246c:	011b      	lsls	r3, r3, #4
 801246e:	1a9b      	subs	r3, r3, r2
 8012470:	440b      	add	r3, r1
 8012472:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012476:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801247a:	f103 0316 	add.w	r3, r3, #22
 801247e:	881b      	ldrh	r3, [r3, #0]
 8012480:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012484:	f102 0202 	add.w	r2, r2, #2
 8012488:	8812      	ldrh	r2, [r2, #0]
 801248a:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 801248e:	f101 0104 	add.w	r1, r1, #4
 8012492:	8809      	ldrh	r1, [r1, #0]
 8012494:	3101      	adds	r1, #1
 8012496:	4403      	add	r3, r0
 8012498:	b29c      	uxth	r4, r3
 801249a:	483d      	ldr	r0, [pc, #244]	; (8012590 <create_DijkstraMap+0x1120>)
 801249c:	4613      	mov	r3, r2
 801249e:	011b      	lsls	r3, r3, #4
 80124a0:	1a9b      	subs	r3, r3, r2
 80124a2:	440b      	add	r3, r1
 80124a4:	4622      	mov	r2, r4
 80124a6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 80124aa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124ae:	f103 0304 	add.w	r3, r3, #4
 80124b2:	881b      	ldrh	r3, [r3, #0]
 80124b4:	3301      	adds	r3, #1
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80124bc:	f103 031c 	add.w	r3, r3, #28
 80124c0:	4611      	mov	r1, r2
 80124c2:	4618      	mov	r0, r3
 80124c4:	f001 feee 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80124c8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124cc:	f103 0302 	add.w	r3, r3, #2
 80124d0:	881a      	ldrh	r2, [r3, #0]
 80124d2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80124d6:	f103 031c 	add.w	r3, r3, #28
 80124da:	4611      	mov	r1, r2
 80124dc:	4618      	mov	r0, r3
 80124de:	f001 fee1 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80124e2:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80124e6:	3b1c      	subs	r3, #28
 80124e8:	2101      	movs	r1, #1
 80124ea:	4618      	mov	r0, r3
 80124ec:	f001 feda 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 80124f0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80124f4:	3b1c      	subs	r3, #28
 80124f6:	2102      	movs	r1, #2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f001 fed3 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80124fe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012502:	f103 0312 	add.w	r3, r3, #18
 8012506:	881a      	ldrh	r2, [r3, #0]
 8012508:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801250c:	3b1c      	subs	r3, #28
 801250e:	4611      	mov	r1, r2
 8012510:	4618      	mov	r0, r3
 8012512:	f001 fec7 	bl	80142a4 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 8012516:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801251a:	f103 0304 	add.w	r3, r3, #4
 801251e:	881b      	ldrh	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	f000 80ec 	beq.w	80126fe <create_DijkstraMap+0x128e>
						if(Direction==SLANT_WEST){
 8012526:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801252a:	f103 031e 	add.w	r3, r3, #30
 801252e:	881b      	ldrh	r3, [r3, #0]
 8012530:	2b06      	cmp	r3, #6
 8012532:	d12f      	bne.n	8012594 <create_DijkstraMap+0x1124>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012534:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012538:	f103 031c 	add.w	r3, r3, #28
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	3301      	adds	r3, #1
 8012540:	b29b      	uxth	r3, r3
 8012542:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012546:	f102 0212 	add.w	r2, r2, #18
 801254a:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801254c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012550:	f103 0312 	add.w	r3, r3, #18
 8012554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012558:	2b04      	cmp	r3, #4
 801255a:	dd05      	ble.n	8012568 <create_DijkstraMap+0x10f8>
 801255c:	2304      	movs	r3, #4
 801255e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012562:	f102 0212 	add.w	r2, r2, #18
 8012566:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012568:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801256c:	f103 0312 	add.w	r3, r3, #18
 8012570:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012574:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012578:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801257c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012580:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012584:	f102 0216 	add.w	r2, r2, #22
 8012588:	8013      	strh	r3, [r2, #0]
 801258a:	e013      	b.n	80125b4 <create_DijkstraMap+0x1144>
 801258c:	20000c3c 	.word	0x20000c3c
 8012590:	20000f2c 	.word	0x20000f2c
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012594:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012598:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801259c:	881b      	ldrh	r3, [r3, #0]
 801259e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125a2:	f102 0216 	add.w	r2, r2, #22
 80125a6:	8013      	strh	r3, [r2, #0]
 80125a8:	2300      	movs	r3, #0
 80125aa:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125ae:	f102 0212 	add.w	r2, r2, #18
 80125b2:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80125b4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125b8:	f103 0304 	add.w	r3, r3, #4
 80125bc:	881b      	ldrh	r3, [r3, #0]
 80125be:	3b01      	subs	r3, #1
 80125c0:	4a6c      	ldr	r2, [pc, #432]	; (8012774 <create_DijkstraMap+0x1304>)
 80125c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125c6:	461a      	mov	r2, r3
 80125c8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125cc:	f103 0302 	add.w	r3, r3, #2
 80125d0:	881b      	ldrh	r3, [r3, #0]
 80125d2:	fa42 f303 	asr.w	r3, r2, r3
 80125d6:	f003 0301 	and.w	r3, r3, #1
 80125da:	2b00      	cmp	r3, #0
 80125dc:	f040 808f 	bne.w	80126fe <create_DijkstraMap+0x128e>
 80125e0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125e4:	f103 0302 	add.w	r3, r3, #2
 80125e8:	881a      	ldrh	r2, [r3, #0]
 80125ea:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125ee:	f103 0304 	add.w	r3, r3, #4
 80125f2:	881b      	ldrh	r3, [r3, #0]
 80125f4:	1e59      	subs	r1, r3, #1
 80125f6:	4860      	ldr	r0, [pc, #384]	; (8012778 <create_DijkstraMap+0x1308>)
 80125f8:	4613      	mov	r3, r2
 80125fa:	011b      	lsls	r3, r3, #4
 80125fc:	1a9b      	subs	r3, r3, r2
 80125fe:	440b      	add	r3, r1
 8012600:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012604:	461c      	mov	r4, r3
 8012606:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801260a:	f103 0302 	add.w	r3, r3, #2
 801260e:	881a      	ldrh	r2, [r3, #0]
 8012610:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012614:	f103 0304 	add.w	r3, r3, #4
 8012618:	8819      	ldrh	r1, [r3, #0]
 801261a:	4857      	ldr	r0, [pc, #348]	; (8012778 <create_DijkstraMap+0x1308>)
 801261c:	4613      	mov	r3, r2
 801261e:	011b      	lsls	r3, r3, #4
 8012620:	1a9b      	subs	r3, r3, r2
 8012622:	440b      	add	r3, r1
 8012624:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012628:	461a      	mov	r2, r3
 801262a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801262e:	f103 0316 	add.w	r3, r3, #22
 8012632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012636:	4413      	add	r3, r2
 8012638:	429c      	cmp	r4, r3
 801263a:	dd60      	ble.n	80126fe <create_DijkstraMap+0x128e>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 801263c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012640:	f103 0302 	add.w	r3, r3, #2
 8012644:	881a      	ldrh	r2, [r3, #0]
 8012646:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801264a:	f103 0304 	add.w	r3, r3, #4
 801264e:	8819      	ldrh	r1, [r3, #0]
 8012650:	4849      	ldr	r0, [pc, #292]	; (8012778 <create_DijkstraMap+0x1308>)
 8012652:	4613      	mov	r3, r2
 8012654:	011b      	lsls	r3, r3, #4
 8012656:	1a9b      	subs	r3, r3, r2
 8012658:	440b      	add	r3, r1
 801265a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801265e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012662:	f103 0316 	add.w	r3, r3, #22
 8012666:	881b      	ldrh	r3, [r3, #0]
 8012668:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801266c:	f102 0202 	add.w	r2, r2, #2
 8012670:	8812      	ldrh	r2, [r2, #0]
 8012672:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012676:	f101 0104 	add.w	r1, r1, #4
 801267a:	8809      	ldrh	r1, [r1, #0]
 801267c:	3901      	subs	r1, #1
 801267e:	4403      	add	r3, r0
 8012680:	b29c      	uxth	r4, r3
 8012682:	483d      	ldr	r0, [pc, #244]	; (8012778 <create_DijkstraMap+0x1308>)
 8012684:	4613      	mov	r3, r2
 8012686:	011b      	lsls	r3, r3, #4
 8012688:	1a9b      	subs	r3, r3, r2
 801268a:	440b      	add	r3, r1
 801268c:	4622      	mov	r2, r4
 801268e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 8012692:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012696:	f103 0304 	add.w	r3, r3, #4
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	3b01      	subs	r3, #1
 801269e:	b29a      	uxth	r2, r3
 80126a0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80126a4:	f103 031c 	add.w	r3, r3, #28
 80126a8:	4611      	mov	r1, r2
 80126aa:	4618      	mov	r0, r3
 80126ac:	f001 fdfa 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80126b0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126b4:	f103 0302 	add.w	r3, r3, #2
 80126b8:	881a      	ldrh	r2, [r3, #0]
 80126ba:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80126be:	f103 031c 	add.w	r3, r3, #28
 80126c2:	4611      	mov	r1, r2
 80126c4:	4618      	mov	r0, r3
 80126c6:	f001 fded 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80126ca:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80126ce:	3b1c      	subs	r3, #28
 80126d0:	2101      	movs	r1, #1
 80126d2:	4618      	mov	r0, r3
 80126d4:	f001 fde6 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 80126d8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80126dc:	3b1c      	subs	r3, #28
 80126de:	2106      	movs	r1, #6
 80126e0:	4618      	mov	r0, r3
 80126e2:	f001 fddf 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80126e6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126ea:	f103 0312 	add.w	r3, r3, #18
 80126ee:	881a      	ldrh	r2, [r3, #0]
 80126f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80126f4:	3b1c      	subs	r3, #28
 80126f6:	4611      	mov	r1, r2
 80126f8:	4618      	mov	r0, r3
 80126fa:	f001 fdd3 	bl	80142a4 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 80126fe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012702:	f103 0302 	add.w	r3, r3, #2
 8012706:	881b      	ldrh	r3, [r3, #0]
 8012708:	2b0e      	cmp	r3, #14
 801270a:	f200 81dc 	bhi.w	8012ac6 <create_DijkstraMap+0x1656>
						if(Direction==SLANT_NORTH_WEST){
 801270e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012712:	f103 031e 	add.w	r3, r3, #30
 8012716:	881b      	ldrh	r3, [r3, #0]
 8012718:	2b07      	cmp	r3, #7
 801271a:	d12f      	bne.n	801277c <create_DijkstraMap+0x130c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801271c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012720:	f103 031c 	add.w	r3, r3, #28
 8012724:	881b      	ldrh	r3, [r3, #0]
 8012726:	3301      	adds	r3, #1
 8012728:	b29b      	uxth	r3, r3
 801272a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801272e:	f102 0212 	add.w	r2, r2, #18
 8012732:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012734:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012738:	f103 0312 	add.w	r3, r3, #18
 801273c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012740:	2b05      	cmp	r3, #5
 8012742:	dd05      	ble.n	8012750 <create_DijkstraMap+0x12e0>
 8012744:	2305      	movs	r3, #5
 8012746:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801274a:	f102 0212 	add.w	r2, r2, #18
 801274e:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012750:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012754:	f103 0312 	add.w	r3, r3, #18
 8012758:	f9b3 2000 	ldrsh.w	r2, [r3]
 801275c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012760:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012764:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012768:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801276c:	f102 0214 	add.w	r2, r2, #20
 8012770:	8013      	strh	r3, [r2, #0]
 8012772:	e013      	b.n	801279c <create_DijkstraMap+0x132c>
 8012774:	20000c3c 	.word	0x20000c3c
 8012778:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801277c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012780:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012784:	881b      	ldrh	r3, [r3, #0]
 8012786:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801278a:	f102 0214 	add.w	r2, r2, #20
 801278e:	8013      	strh	r3, [r2, #0]
 8012790:	2300      	movs	r3, #0
 8012792:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012796:	f102 0212 	add.w	r2, r2, #18
 801279a:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 801279c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127a0:	f103 0302 	add.w	r3, r3, #2
 80127a4:	881b      	ldrh	r3, [r3, #0]
 80127a6:	4a69      	ldr	r2, [pc, #420]	; (801294c <create_DijkstraMap+0x14dc>)
 80127a8:	330c      	adds	r3, #12
 80127aa:	005b      	lsls	r3, r3, #1
 80127ac:	4413      	add	r3, r2
 80127ae:	88db      	ldrh	r3, [r3, #6]
 80127b0:	461a      	mov	r2, r3
 80127b2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127b6:	f103 0304 	add.w	r3, r3, #4
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	fa42 f303 	asr.w	r3, r2, r3
 80127c0:	f003 0301 	and.w	r3, r3, #1
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	f040 808d 	bne.w	80128e4 <create_DijkstraMap+0x1474>
 80127ca:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127ce:	f103 0304 	add.w	r3, r3, #4
 80127d2:	881a      	ldrh	r2, [r3, #0]
 80127d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127d8:	f103 0302 	add.w	r3, r3, #2
 80127dc:	8819      	ldrh	r1, [r3, #0]
 80127de:	485c      	ldr	r0, [pc, #368]	; (8012950 <create_DijkstraMap+0x14e0>)
 80127e0:	4613      	mov	r3, r2
 80127e2:	011b      	lsls	r3, r3, #4
 80127e4:	1a9b      	subs	r3, r3, r2
 80127e6:	440b      	add	r3, r1
 80127e8:	33f0      	adds	r3, #240	; 0xf0
 80127ea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80127ee:	461c      	mov	r4, r3
 80127f0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127f4:	f103 0302 	add.w	r3, r3, #2
 80127f8:	881a      	ldrh	r2, [r3, #0]
 80127fa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127fe:	f103 0304 	add.w	r3, r3, #4
 8012802:	8819      	ldrh	r1, [r3, #0]
 8012804:	4852      	ldr	r0, [pc, #328]	; (8012950 <create_DijkstraMap+0x14e0>)
 8012806:	4613      	mov	r3, r2
 8012808:	011b      	lsls	r3, r3, #4
 801280a:	1a9b      	subs	r3, r3, r2
 801280c:	440b      	add	r3, r1
 801280e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012812:	461a      	mov	r2, r3
 8012814:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012818:	f103 0314 	add.w	r3, r3, #20
 801281c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012820:	4413      	add	r3, r2
 8012822:	429c      	cmp	r4, r3
 8012824:	dd5e      	ble.n	80128e4 <create_DijkstraMap+0x1474>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012826:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801282a:	f103 0302 	add.w	r3, r3, #2
 801282e:	881a      	ldrh	r2, [r3, #0]
 8012830:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012834:	f103 0304 	add.w	r3, r3, #4
 8012838:	8819      	ldrh	r1, [r3, #0]
 801283a:	4845      	ldr	r0, [pc, #276]	; (8012950 <create_DijkstraMap+0x14e0>)
 801283c:	4613      	mov	r3, r2
 801283e:	011b      	lsls	r3, r3, #4
 8012840:	1a9b      	subs	r3, r3, r2
 8012842:	440b      	add	r3, r1
 8012844:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012848:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801284c:	f103 0314 	add.w	r3, r3, #20
 8012850:	881b      	ldrh	r3, [r3, #0]
 8012852:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012856:	f102 0204 	add.w	r2, r2, #4
 801285a:	8812      	ldrh	r2, [r2, #0]
 801285c:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012860:	f101 0102 	add.w	r1, r1, #2
 8012864:	8809      	ldrh	r1, [r1, #0]
 8012866:	4403      	add	r3, r0
 8012868:	b29c      	uxth	r4, r3
 801286a:	4839      	ldr	r0, [pc, #228]	; (8012950 <create_DijkstraMap+0x14e0>)
 801286c:	4613      	mov	r3, r2
 801286e:	011b      	lsls	r3, r3, #4
 8012870:	1a9b      	subs	r3, r3, r2
 8012872:	440b      	add	r3, r1
 8012874:	33f0      	adds	r3, #240	; 0xf0
 8012876:	4622      	mov	r2, r4
 8012878:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 801287c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012880:	f103 0304 	add.w	r3, r3, #4
 8012884:	881a      	ldrh	r2, [r3, #0]
 8012886:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801288a:	f103 031c 	add.w	r3, r3, #28
 801288e:	4611      	mov	r1, r2
 8012890:	4618      	mov	r0, r3
 8012892:	f001 fd07 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012896:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801289a:	f103 0302 	add.w	r3, r3, #2
 801289e:	881a      	ldrh	r2, [r3, #0]
 80128a0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80128a4:	f103 031c 	add.w	r3, r3, #28
 80128a8:	4611      	mov	r1, r2
 80128aa:	4618      	mov	r0, r3
 80128ac:	f001 fcfa 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80128b0:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80128b4:	3b1c      	subs	r3, #28
 80128b6:	2100      	movs	r1, #0
 80128b8:	4618      	mov	r0, r3
 80128ba:	f001 fcf3 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80128be:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80128c2:	3b1c      	subs	r3, #28
 80128c4:	2107      	movs	r1, #7
 80128c6:	4618      	mov	r0, r3
 80128c8:	f001 fcec 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80128cc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128d0:	f103 0312 	add.w	r3, r3, #18
 80128d4:	881a      	ldrh	r2, [r3, #0]
 80128d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128da:	3b1c      	subs	r3, #28
 80128dc:	4611      	mov	r1, r2
 80128de:	4618      	mov	r0, r3
 80128e0:	f001 fce0 	bl	80142a4 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 80128e4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80128e8:	f103 031e 	add.w	r3, r3, #30
 80128ec:	881b      	ldrh	r3, [r3, #0]
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d130      	bne.n	8012954 <create_DijkstraMap+0x14e4>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80128f2:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80128f6:	f103 031c 	add.w	r3, r3, #28
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	3301      	adds	r3, #1
 80128fe:	b29b      	uxth	r3, r3
 8012900:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012904:	f102 0212 	add.w	r2, r2, #18
 8012908:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801290a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801290e:	f103 0312 	add.w	r3, r3, #18
 8012912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012916:	2b05      	cmp	r3, #5
 8012918:	dd05      	ble.n	8012926 <create_DijkstraMap+0x14b6>
 801291a:	2305      	movs	r3, #5
 801291c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012920:	f102 0212 	add.w	r2, r2, #18
 8012924:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012926:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801292a:	f103 0312 	add.w	r3, r3, #18
 801292e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012932:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012936:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 801293a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801293e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012942:	f102 0214 	add.w	r2, r2, #20
 8012946:	8013      	strh	r3, [r2, #0]
 8012948:	e014      	b.n	8012974 <create_DijkstraMap+0x1504>
 801294a:	bf00      	nop
 801294c:	20000c3c 	.word	0x20000c3c
 8012950:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012954:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012958:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 801295c:	881b      	ldrh	r3, [r3, #0]
 801295e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012962:	f102 0214 	add.w	r2, r2, #20
 8012966:	8013      	strh	r3, [r2, #0]
 8012968:	2300      	movs	r3, #0
 801296a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801296e:	f102 0212 	add.w	r2, r2, #18
 8012972:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012974:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012978:	f103 0302 	add.w	r3, r3, #2
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	4a6f      	ldr	r2, [pc, #444]	; (8012b3c <create_DijkstraMap+0x16cc>)
 8012980:	330c      	adds	r3, #12
 8012982:	005b      	lsls	r3, r3, #1
 8012984:	4413      	add	r3, r2
 8012986:	88db      	ldrh	r3, [r3, #6]
 8012988:	461a      	mov	r2, r3
 801298a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801298e:	f103 0304 	add.w	r3, r3, #4
 8012992:	881b      	ldrh	r3, [r3, #0]
 8012994:	3301      	adds	r3, #1
 8012996:	fa42 f303 	asr.w	r3, r2, r3
 801299a:	f003 0301 	and.w	r3, r3, #1
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f040 8091 	bne.w	8012ac6 <create_DijkstraMap+0x1656>
 80129a4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129a8:	f103 0304 	add.w	r3, r3, #4
 80129ac:	881b      	ldrh	r3, [r3, #0]
 80129ae:	1c5a      	adds	r2, r3, #1
 80129b0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129b4:	f103 0302 	add.w	r3, r3, #2
 80129b8:	8819      	ldrh	r1, [r3, #0]
 80129ba:	4861      	ldr	r0, [pc, #388]	; (8012b40 <create_DijkstraMap+0x16d0>)
 80129bc:	4613      	mov	r3, r2
 80129be:	011b      	lsls	r3, r3, #4
 80129c0:	1a9b      	subs	r3, r3, r2
 80129c2:	440b      	add	r3, r1
 80129c4:	33f0      	adds	r3, #240	; 0xf0
 80129c6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80129ca:	461c      	mov	r4, r3
 80129cc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129d0:	f103 0302 	add.w	r3, r3, #2
 80129d4:	881a      	ldrh	r2, [r3, #0]
 80129d6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129da:	f103 0304 	add.w	r3, r3, #4
 80129de:	8819      	ldrh	r1, [r3, #0]
 80129e0:	4857      	ldr	r0, [pc, #348]	; (8012b40 <create_DijkstraMap+0x16d0>)
 80129e2:	4613      	mov	r3, r2
 80129e4:	011b      	lsls	r3, r3, #4
 80129e6:	1a9b      	subs	r3, r3, r2
 80129e8:	440b      	add	r3, r1
 80129ea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80129ee:	461a      	mov	r2, r3
 80129f0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129f4:	f103 0314 	add.w	r3, r3, #20
 80129f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129fc:	4413      	add	r3, r2
 80129fe:	429c      	cmp	r4, r3
 8012a00:	dd61      	ble.n	8012ac6 <create_DijkstraMap+0x1656>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012a02:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a06:	f103 0302 	add.w	r3, r3, #2
 8012a0a:	881a      	ldrh	r2, [r3, #0]
 8012a0c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a10:	f103 0304 	add.w	r3, r3, #4
 8012a14:	8819      	ldrh	r1, [r3, #0]
 8012a16:	484a      	ldr	r0, [pc, #296]	; (8012b40 <create_DijkstraMap+0x16d0>)
 8012a18:	4613      	mov	r3, r2
 8012a1a:	011b      	lsls	r3, r3, #4
 8012a1c:	1a9b      	subs	r3, r3, r2
 8012a1e:	440b      	add	r3, r1
 8012a20:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012a24:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a28:	f103 0314 	add.w	r3, r3, #20
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012a32:	f102 0204 	add.w	r2, r2, #4
 8012a36:	8812      	ldrh	r2, [r2, #0]
 8012a38:	3201      	adds	r2, #1
 8012a3a:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012a3e:	f101 0102 	add.w	r1, r1, #2
 8012a42:	8809      	ldrh	r1, [r1, #0]
 8012a44:	4403      	add	r3, r0
 8012a46:	b29c      	uxth	r4, r3
 8012a48:	483d      	ldr	r0, [pc, #244]	; (8012b40 <create_DijkstraMap+0x16d0>)
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	011b      	lsls	r3, r3, #4
 8012a4e:	1a9b      	subs	r3, r3, r2
 8012a50:	440b      	add	r3, r1
 8012a52:	33f0      	adds	r3, #240	; 0xf0
 8012a54:	4622      	mov	r2, r4
 8012a56:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012a5a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a5e:	f103 0304 	add.w	r3, r3, #4
 8012a62:	881b      	ldrh	r3, [r3, #0]
 8012a64:	3301      	adds	r3, #1
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012a6c:	f103 031c 	add.w	r3, r3, #28
 8012a70:	4611      	mov	r1, r2
 8012a72:	4618      	mov	r0, r3
 8012a74:	f001 fc16 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012a78:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a7c:	f103 0302 	add.w	r3, r3, #2
 8012a80:	881a      	ldrh	r2, [r3, #0]
 8012a82:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012a86:	f103 031c 	add.w	r3, r3, #28
 8012a8a:	4611      	mov	r1, r2
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f001 fc09 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012a92:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012a96:	3b1c      	subs	r3, #28
 8012a98:	2100      	movs	r1, #0
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f001 fc02 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012aa0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012aa4:	3b1c      	subs	r3, #28
 8012aa6:	2101      	movs	r1, #1
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f001 fbfb 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012aae:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ab2:	f103 0312 	add.w	r3, r3, #18
 8012ab6:	881a      	ldrh	r2, [r3, #0]
 8012ab8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012abc:	3b1c      	subs	r3, #28
 8012abe:	4611      	mov	r1, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f001 fbef 	bl	80142a4 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012ac6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012aca:	f103 0302 	add.w	r3, r3, #2
 8012ace:	881b      	ldrh	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 81e1 	beq.w	8012e98 <create_DijkstraMap+0x1a28>
						if(Direction==SLANT_SOUTH_WEST){
 8012ad6:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012ada:	f103 031e 	add.w	r3, r3, #30
 8012ade:	881b      	ldrh	r3, [r3, #0]
 8012ae0:	2b05      	cmp	r3, #5
 8012ae2:	d12f      	bne.n	8012b44 <create_DijkstraMap+0x16d4>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012ae4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012ae8:	f103 031c 	add.w	r3, r3, #28
 8012aec:	881b      	ldrh	r3, [r3, #0]
 8012aee:	3301      	adds	r3, #1
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012af6:	f102 0212 	add.w	r2, r2, #18
 8012afa:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012afc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b00:	f103 0312 	add.w	r3, r3, #18
 8012b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b08:	2b05      	cmp	r3, #5
 8012b0a:	dd05      	ble.n	8012b18 <create_DijkstraMap+0x16a8>
 8012b0c:	2305      	movs	r3, #5
 8012b0e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b12:	f102 0212 	add.w	r2, r2, #18
 8012b16:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012b18:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b1c:	f103 0312 	add.w	r3, r3, #18
 8012b20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b24:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012b28:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012b2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012b30:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b34:	f102 0214 	add.w	r2, r2, #20
 8012b38:	8013      	strh	r3, [r2, #0]
 8012b3a:	e013      	b.n	8012b64 <create_DijkstraMap+0x16f4>
 8012b3c:	20000c3c 	.word	0x20000c3c
 8012b40:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012b44:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012b48:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012b4c:	881b      	ldrh	r3, [r3, #0]
 8012b4e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b52:	f102 0214 	add.w	r2, r2, #20
 8012b56:	8013      	strh	r3, [r2, #0]
 8012b58:	2300      	movs	r3, #0
 8012b5a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b5e:	f102 0212 	add.w	r2, r2, #18
 8012b62:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012b64:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b68:	f103 0302 	add.w	r3, r3, #2
 8012b6c:	881b      	ldrh	r3, [r3, #0]
 8012b6e:	3b01      	subs	r3, #1
 8012b70:	4ad3      	ldr	r2, [pc, #844]	; (8012ec0 <create_DijkstraMap+0x1a50>)
 8012b72:	330c      	adds	r3, #12
 8012b74:	005b      	lsls	r3, r3, #1
 8012b76:	4413      	add	r3, r2
 8012b78:	88db      	ldrh	r3, [r3, #6]
 8012b7a:	461a      	mov	r2, r3
 8012b7c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b80:	f103 0304 	add.w	r3, r3, #4
 8012b84:	881b      	ldrh	r3, [r3, #0]
 8012b86:	fa42 f303 	asr.w	r3, r2, r3
 8012b8a:	f003 0301 	and.w	r3, r3, #1
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f040 8091 	bne.w	8012cb6 <create_DijkstraMap+0x1846>
 8012b94:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b98:	f103 0304 	add.w	r3, r3, #4
 8012b9c:	881a      	ldrh	r2, [r3, #0]
 8012b9e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ba2:	f103 0302 	add.w	r3, r3, #2
 8012ba6:	881b      	ldrh	r3, [r3, #0]
 8012ba8:	1e59      	subs	r1, r3, #1
 8012baa:	48c6      	ldr	r0, [pc, #792]	; (8012ec4 <create_DijkstraMap+0x1a54>)
 8012bac:	4613      	mov	r3, r2
 8012bae:	011b      	lsls	r3, r3, #4
 8012bb0:	1a9b      	subs	r3, r3, r2
 8012bb2:	440b      	add	r3, r1
 8012bb4:	33f0      	adds	r3, #240	; 0xf0
 8012bb6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012bba:	461c      	mov	r4, r3
 8012bbc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bc0:	f103 0302 	add.w	r3, r3, #2
 8012bc4:	881a      	ldrh	r2, [r3, #0]
 8012bc6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bca:	f103 0304 	add.w	r3, r3, #4
 8012bce:	8819      	ldrh	r1, [r3, #0]
 8012bd0:	48bc      	ldr	r0, [pc, #752]	; (8012ec4 <create_DijkstraMap+0x1a54>)
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	011b      	lsls	r3, r3, #4
 8012bd6:	1a9b      	subs	r3, r3, r2
 8012bd8:	440b      	add	r3, r1
 8012bda:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012bde:	461a      	mov	r2, r3
 8012be0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012be4:	f103 0314 	add.w	r3, r3, #20
 8012be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012bec:	4413      	add	r3, r2
 8012bee:	429c      	cmp	r4, r3
 8012bf0:	dd61      	ble.n	8012cb6 <create_DijkstraMap+0x1846>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012bf2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bf6:	f103 0302 	add.w	r3, r3, #2
 8012bfa:	881a      	ldrh	r2, [r3, #0]
 8012bfc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c00:	f103 0304 	add.w	r3, r3, #4
 8012c04:	8819      	ldrh	r1, [r3, #0]
 8012c06:	48af      	ldr	r0, [pc, #700]	; (8012ec4 <create_DijkstraMap+0x1a54>)
 8012c08:	4613      	mov	r3, r2
 8012c0a:	011b      	lsls	r3, r3, #4
 8012c0c:	1a9b      	subs	r3, r3, r2
 8012c0e:	440b      	add	r3, r1
 8012c10:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012c14:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c18:	f103 0314 	add.w	r3, r3, #20
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c22:	f102 0204 	add.w	r2, r2, #4
 8012c26:	8812      	ldrh	r2, [r2, #0]
 8012c28:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012c2c:	f101 0102 	add.w	r1, r1, #2
 8012c30:	8809      	ldrh	r1, [r1, #0]
 8012c32:	3901      	subs	r1, #1
 8012c34:	4403      	add	r3, r0
 8012c36:	b29c      	uxth	r4, r3
 8012c38:	48a2      	ldr	r0, [pc, #648]	; (8012ec4 <create_DijkstraMap+0x1a54>)
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	011b      	lsls	r3, r3, #4
 8012c3e:	1a9b      	subs	r3, r3, r2
 8012c40:	440b      	add	r3, r1
 8012c42:	33f0      	adds	r3, #240	; 0xf0
 8012c44:	4622      	mov	r2, r4
 8012c46:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012c4a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c4e:	f103 0304 	add.w	r3, r3, #4
 8012c52:	881a      	ldrh	r2, [r3, #0]
 8012c54:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012c58:	f103 031c 	add.w	r3, r3, #28
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f001 fb20 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012c64:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c68:	f103 0302 	add.w	r3, r3, #2
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012c76:	f103 031c 	add.w	r3, r3, #28
 8012c7a:	4611      	mov	r1, r2
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f001 fb11 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012c82:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012c86:	3b1c      	subs	r3, #28
 8012c88:	2100      	movs	r1, #0
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f001 fb0a 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012c90:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012c94:	3b1c      	subs	r3, #28
 8012c96:	2105      	movs	r1, #5
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f001 fb03 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012c9e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ca2:	f103 0312 	add.w	r3, r3, #18
 8012ca6:	881a      	ldrh	r2, [r3, #0]
 8012ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012cac:	3b1c      	subs	r3, #28
 8012cae:	4611      	mov	r1, r2
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f001 faf7 	bl	80142a4 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012cb6:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012cba:	f103 031e 	add.w	r3, r3, #30
 8012cbe:	881b      	ldrh	r3, [r3, #0]
 8012cc0:	2b03      	cmp	r3, #3
 8012cc2:	d12b      	bne.n	8012d1c <create_DijkstraMap+0x18ac>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012cc4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012cc8:	f103 031c 	add.w	r3, r3, #28
 8012ccc:	881b      	ldrh	r3, [r3, #0]
 8012cce:	3301      	adds	r3, #1
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012cd6:	f102 0212 	add.w	r2, r2, #18
 8012cda:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012cdc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ce0:	f103 0312 	add.w	r3, r3, #18
 8012ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ce8:	2b05      	cmp	r3, #5
 8012cea:	dd05      	ble.n	8012cf8 <create_DijkstraMap+0x1888>
 8012cec:	2305      	movs	r3, #5
 8012cee:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012cf2:	f102 0212 	add.w	r2, r2, #18
 8012cf6:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012cf8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cfc:	f103 0312 	add.w	r3, r3, #18
 8012d00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012d04:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012d08:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012d0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012d10:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d14:	f102 0214 	add.w	r2, r2, #20
 8012d18:	8013      	strh	r3, [r2, #0]
 8012d1a:	e00f      	b.n	8012d3c <create_DijkstraMap+0x18cc>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012d1c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012d20:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d2a:	f102 0214 	add.w	r2, r2, #20
 8012d2e:	8013      	strh	r3, [r2, #0]
 8012d30:	2300      	movs	r3, #0
 8012d32:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d36:	f102 0212 	add.w	r2, r2, #18
 8012d3a:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012d3c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d40:	f103 0302 	add.w	r3, r3, #2
 8012d44:	881b      	ldrh	r3, [r3, #0]
 8012d46:	3b01      	subs	r3, #1
 8012d48:	4a5d      	ldr	r2, [pc, #372]	; (8012ec0 <create_DijkstraMap+0x1a50>)
 8012d4a:	330c      	adds	r3, #12
 8012d4c:	005b      	lsls	r3, r3, #1
 8012d4e:	4413      	add	r3, r2
 8012d50:	88db      	ldrh	r3, [r3, #6]
 8012d52:	461a      	mov	r2, r3
 8012d54:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d58:	f103 0304 	add.w	r3, r3, #4
 8012d5c:	881b      	ldrh	r3, [r3, #0]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	fa42 f303 	asr.w	r3, r2, r3
 8012d64:	f003 0301 	and.w	r3, r3, #1
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f040 8095 	bne.w	8012e98 <create_DijkstraMap+0x1a28>
 8012d6e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d72:	f103 0304 	add.w	r3, r3, #4
 8012d76:	881b      	ldrh	r3, [r3, #0]
 8012d78:	1c5a      	adds	r2, r3, #1
 8012d7a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d7e:	f103 0302 	add.w	r3, r3, #2
 8012d82:	881b      	ldrh	r3, [r3, #0]
 8012d84:	1e59      	subs	r1, r3, #1
 8012d86:	484f      	ldr	r0, [pc, #316]	; (8012ec4 <create_DijkstraMap+0x1a54>)
 8012d88:	4613      	mov	r3, r2
 8012d8a:	011b      	lsls	r3, r3, #4
 8012d8c:	1a9b      	subs	r3, r3, r2
 8012d8e:	440b      	add	r3, r1
 8012d90:	33f0      	adds	r3, #240	; 0xf0
 8012d92:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d96:	461c      	mov	r4, r3
 8012d98:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d9c:	f103 0302 	add.w	r3, r3, #2
 8012da0:	881a      	ldrh	r2, [r3, #0]
 8012da2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012da6:	f103 0304 	add.w	r3, r3, #4
 8012daa:	8819      	ldrh	r1, [r3, #0]
 8012dac:	4845      	ldr	r0, [pc, #276]	; (8012ec4 <create_DijkstraMap+0x1a54>)
 8012dae:	4613      	mov	r3, r2
 8012db0:	011b      	lsls	r3, r3, #4
 8012db2:	1a9b      	subs	r3, r3, r2
 8012db4:	440b      	add	r3, r1
 8012db6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012dba:	461a      	mov	r2, r3
 8012dbc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dc0:	f103 0314 	add.w	r3, r3, #20
 8012dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012dc8:	4413      	add	r3, r2
 8012dca:	429c      	cmp	r4, r3
 8012dcc:	dd64      	ble.n	8012e98 <create_DijkstraMap+0x1a28>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012dce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dd2:	f103 0302 	add.w	r3, r3, #2
 8012dd6:	881a      	ldrh	r2, [r3, #0]
 8012dd8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ddc:	f103 0304 	add.w	r3, r3, #4
 8012de0:	8819      	ldrh	r1, [r3, #0]
 8012de2:	4838      	ldr	r0, [pc, #224]	; (8012ec4 <create_DijkstraMap+0x1a54>)
 8012de4:	4613      	mov	r3, r2
 8012de6:	011b      	lsls	r3, r3, #4
 8012de8:	1a9b      	subs	r3, r3, r2
 8012dea:	440b      	add	r3, r1
 8012dec:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012df0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012df4:	f103 0314 	add.w	r3, r3, #20
 8012df8:	881b      	ldrh	r3, [r3, #0]
 8012dfa:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012dfe:	f102 0204 	add.w	r2, r2, #4
 8012e02:	8812      	ldrh	r2, [r2, #0]
 8012e04:	3201      	adds	r2, #1
 8012e06:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012e0a:	f101 0102 	add.w	r1, r1, #2
 8012e0e:	8809      	ldrh	r1, [r1, #0]
 8012e10:	3901      	subs	r1, #1
 8012e12:	4403      	add	r3, r0
 8012e14:	b29c      	uxth	r4, r3
 8012e16:	482b      	ldr	r0, [pc, #172]	; (8012ec4 <create_DijkstraMap+0x1a54>)
 8012e18:	4613      	mov	r3, r2
 8012e1a:	011b      	lsls	r3, r3, #4
 8012e1c:	1a9b      	subs	r3, r3, r2
 8012e1e:	440b      	add	r3, r1
 8012e20:	33f0      	adds	r3, #240	; 0xf0
 8012e22:	4622      	mov	r2, r4
 8012e24:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8012e28:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e2c:	f103 0304 	add.w	r3, r3, #4
 8012e30:	881b      	ldrh	r3, [r3, #0]
 8012e32:	3301      	adds	r3, #1
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012e3a:	f103 031c 	add.w	r3, r3, #28
 8012e3e:	4611      	mov	r1, r2
 8012e40:	4618      	mov	r0, r3
 8012e42:	f001 fa2f 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8012e46:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e4a:	f103 0302 	add.w	r3, r3, #2
 8012e4e:	881b      	ldrh	r3, [r3, #0]
 8012e50:	3b01      	subs	r3, #1
 8012e52:	b29a      	uxth	r2, r3
 8012e54:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012e58:	f103 031c 	add.w	r3, r3, #28
 8012e5c:	4611      	mov	r1, r2
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f001 fa20 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012e64:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012e68:	3b1c      	subs	r3, #28
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f001 fa19 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012e72:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012e76:	3b1c      	subs	r3, #28
 8012e78:	2103      	movs	r1, #3
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f001 fa12 	bl	80142a4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012e80:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e84:	f103 0312 	add.w	r3, r3, #18
 8012e88:	881a      	ldrh	r2, [r3, #0]
 8012e8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e8e:	3b1c      	subs	r3, #28
 8012e90:	4611      	mov	r1, r2
 8012e92:	4618      	mov	r0, r3
 8012e94:	f001 fa06 	bl	80142a4 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8012e98:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e9c:	f103 0306 	add.w	r3, r3, #6
 8012ea0:	881b      	ldrh	r3, [r3, #0]
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012ea8:	f102 0206 	add.w	r2, r2, #6
 8012eac:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 8012eae:	f7fe bc21 	b.w	80116f4 <create_DijkstraMap+0x284>

		}



}
 8012eb2:	bf00      	nop
 8012eb4:	f507 57dd 	add.w	r7, r7, #7072	; 0x1ba0
 8012eb8:	371c      	adds	r7, #28
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd90      	pop	{r4, r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20000c3c 	.word	0x20000c3c
 8012ec4:	20000f2c 	.word	0x20000f2c

08012ec8 <route_Dijkstra>:





void route_Dijkstra(void){
 8012ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eca:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 8012ece:	b08d      	sub	sp, #52	; 0x34
 8012ed0:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8012ed2:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012ed6:	f103 0314 	add.w	r3, r3, #20
 8012eda:	4618      	mov	r0, r3
 8012edc:	f001 f9d2 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_y);
 8012ee0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012ee4:	f103 0314 	add.w	r3, r3, #20
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f001 f9cb 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_matrix);
 8012eee:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8012ef2:	3b0c      	subs	r3, #12
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f001 f9c5 	bl	8014284 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8012efa:	48c8      	ldr	r0, [pc, #800]	; (801321c <route_Dijkstra+0x354>)
 8012efc:	f001 f9c2 	bl	8014284 <initStack_walk>
	initStack_walk(&g_Goal_y);
 8012f00:	48c7      	ldr	r0, [pc, #796]	; (8013220 <route_Dijkstra+0x358>)
 8012f02:	f001 f9bf 	bl	8014284 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8012f06:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012f0a:	f103 0314 	add.w	r3, r3, #20
 8012f0e:	2100      	movs	r1, #0
 8012f10:	4618      	mov	r0, r3
 8012f12:	f001 f9c7 	bl	80142a4 <pushStack_walk>
 8012f16:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012f1a:	f103 0314 	add.w	r3, r3, #20
 8012f1e:	2100      	movs	r1, #0
 8012f20:	4618      	mov	r0, r3
 8012f22:	f001 f9bf 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 8012f26:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8012f2a:	3b0c      	subs	r3, #12
 8012f2c:	2100      	movs	r1, #0
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f001 f9b8 	bl	80142a4 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 8012f34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	601a      	str	r2, [r3, #0]
	int y = 0;
 8012f40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f44:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]
	int direction = 1;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8012f52:	f102 021c 	add.w	r2, r2, #28
 8012f56:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8012f58:	f107 0120 	add.w	r1, r7, #32
 8012f5c:	3920      	subs	r1, #32
 8012f5e:	f107 0320 	add.w	r3, r7, #32
 8012f62:	3b1c      	subs	r3, #28
 8012f64:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8012f68:	f102 021c 	add.w	r2, r2, #28
 8012f6c:	6812      	ldr	r2, [r2, #0]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fa ffdc 	bl	800df2c <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8012f74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d006      	beq.n	8012f90 <route_Dijkstra+0xc8>
 8012f82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	2b02      	cmp	r3, #2
 8012f8e:	d10f      	bne.n	8012fb0 <route_Dijkstra+0xe8>
 8012f90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	f000 8355 	beq.w	801364a <route_Dijkstra+0x782>
 8012fa0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012fa4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	2b01      	cmp	r3, #1
 8012fac:	f000 834d 	beq.w	801364a <route_Dijkstra+0x782>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 8012fb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012fb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012fb8:	6818      	ldr	r0, [r3, #0]
 8012fba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012fbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012fc2:	6819      	ldr	r1, [r3, #0]
 8012fc4:	f107 0220 	add.w	r2, r7, #32
 8012fc8:	3a15      	subs	r2, #21
 8012fca:	f107 0320 	add.w	r3, r7, #32
 8012fce:	3b17      	subs	r3, #23
 8012fd0:	9301      	str	r3, [sp, #4]
 8012fd2:	f107 0320 	add.w	r3, r7, #32
 8012fd6:	3b16      	subs	r3, #22
 8012fd8:	9300      	str	r3, [sp, #0]
 8012fda:	4613      	mov	r3, r2
 8012fdc:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8012fe0:	f102 021c 	add.w	r2, r2, #28
 8012fe4:	6812      	ldr	r2, [r2, #0]
 8012fe6:	f7fd fe27 	bl	8010c38 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 8012fea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012fee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012ff2:	681c      	ldr	r4, [r3, #0]
 8012ff4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012ff8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012ffc:	681d      	ldr	r5, [r3, #0]
 8012ffe:	f107 0320 	add.w	r3, r7, #32
 8013002:	3b14      	subs	r3, #20
 8013004:	f107 0220 	add.w	r2, r7, #32
 8013008:	3a12      	subs	r2, #18
 801300a:	f107 0120 	add.w	r1, r7, #32
 801300e:	3910      	subs	r1, #16
 8013010:	f107 0020 	add.w	r0, r7, #32
 8013014:	380e      	subs	r0, #14
 8013016:	f507 5604 	add.w	r6, r7, #8448	; 0x2100
 801301a:	f106 061c 	add.w	r6, r6, #28
 801301e:	6836      	ldr	r6, [r6, #0]
 8013020:	9602      	str	r6, [sp, #8]
 8013022:	9501      	str	r5, [sp, #4]
 8013024:	9400      	str	r4, [sp, #0]
 8013026:	f7fe f989 	bl	801133c <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 801302a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801302e:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d006      	beq.n	8013046 <route_Dijkstra+0x17e>
 8013038:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801303c:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013044:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013046:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801304a:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d006      	beq.n	8013062 <route_Dijkstra+0x19a>
 8013054:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013058:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801305c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013060:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013062:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013066:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d006      	beq.n	801307e <route_Dijkstra+0x1b6>
 8013070:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013074:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801307c:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 801307e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013082:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801308c:	4293      	cmp	r3, r2
 801308e:	d11b      	bne.n	80130c8 <route_Dijkstra+0x200>
 8013090:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013094:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013098:	881b      	ldrh	r3, [r3, #0]
 801309a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801309e:	4293      	cmp	r3, r2
 80130a0:	d112      	bne.n	80130c8 <route_Dijkstra+0x200>
 80130a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130aa:	881b      	ldrh	r3, [r3, #0]
 80130ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130b0:	4293      	cmp	r3, r2
 80130b2:	d109      	bne.n	80130c8 <route_Dijkstra+0x200>
 80130b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130b8:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130c2:	4293      	cmp	r3, r2
 80130c4:	f000 82c0 	beq.w	8013648 <route_Dijkstra+0x780>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80130c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130cc:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80130d0:	881a      	ldrh	r2, [r3, #0]
 80130d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80130da:	881b      	ldrh	r3, [r3, #0]
 80130dc:	429a      	cmp	r2, r3
 80130de:	f200 80c7 	bhi.w	8013270 <route_Dijkstra+0x3a8>
 80130e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130e6:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80130ea:	881a      	ldrh	r2, [r3, #0]
 80130ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130f4:	881b      	ldrh	r3, [r3, #0]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	f200 80ba 	bhi.w	8013270 <route_Dijkstra+0x3a8>
 80130fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013100:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013104:	881a      	ldrh	r2, [r3, #0]
 8013106:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801310a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 801310e:	881b      	ldrh	r3, [r3, #0]
 8013110:	429a      	cmp	r2, r3
 8013112:	f200 80ad 	bhi.w	8013270 <route_Dijkstra+0x3a8>
			// 直進
			switch (direction) {		//
 8013116:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801311a:	f103 031c 	add.w	r3, r3, #28
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	3b01      	subs	r3, #1
 8013122:	2b03      	cmp	r3, #3
 8013124:	f200 80a5 	bhi.w	8013272 <route_Dijkstra+0x3aa>
 8013128:	a201      	add	r2, pc, #4	; (adr r2, 8013130 <route_Dijkstra+0x268>)
 801312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801312e:	bf00      	nop
 8013130:	08013141 	.word	0x08013141
 8013134:	08013189 	.word	0x08013189
 8013138:	080131d1 	.word	0x080131d1
 801313c:	08013225 	.word	0x08013225
			case 1:
				pushStack_walk(&stack_x,x);
 8013140:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013144:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	b29a      	uxth	r2, r3
 801314c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013150:	f103 0314 	add.w	r3, r3, #20
 8013154:	4611      	mov	r1, r2
 8013156:	4618      	mov	r0, r3
 8013158:	f001 f8a4 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801315c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013160:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	b29a      	uxth	r2, r3
 8013168:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801316c:	f103 0314 	add.w	r3, r3, #20
 8013170:	4611      	mov	r1, r2
 8013172:	4618      	mov	r0, r3
 8013174:	f001 f896 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013178:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801317c:	3b0c      	subs	r3, #12
 801317e:	2100      	movs	r1, #0
 8013180:	4618      	mov	r0, r3
 8013182:	f001 f88f 	bl	80142a4 <pushStack_walk>
				break;
 8013186:	e074      	b.n	8013272 <route_Dijkstra+0x3aa>
			case 2:
				pushStack_walk(&stack_x,x);
 8013188:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801318c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	b29a      	uxth	r2, r3
 8013194:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013198:	f103 0314 	add.w	r3, r3, #20
 801319c:	4611      	mov	r1, r2
 801319e:	4618      	mov	r0, r3
 80131a0:	f001 f880 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80131a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	b29a      	uxth	r2, r3
 80131b0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80131b4:	f103 0314 	add.w	r3, r3, #20
 80131b8:	4611      	mov	r1, r2
 80131ba:	4618      	mov	r0, r3
 80131bc:	f001 f872 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80131c0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80131c4:	3b0c      	subs	r3, #12
 80131c6:	2101      	movs	r1, #1
 80131c8:	4618      	mov	r0, r3
 80131ca:	f001 f86b 	bl	80142a4 <pushStack_walk>
				break;
 80131ce:	e050      	b.n	8013272 <route_Dijkstra+0x3aa>
			case 3:
				pushStack_walk(&stack_x,x);
 80131d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	b29a      	uxth	r2, r3
 80131dc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80131e0:	f103 0314 	add.w	r3, r3, #20
 80131e4:	4611      	mov	r1, r2
 80131e6:	4618      	mov	r0, r3
 80131e8:	f001 f85c 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80131ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	3b01      	subs	r3, #1
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013200:	f103 0314 	add.w	r3, r3, #20
 8013204:	4611      	mov	r1, r2
 8013206:	4618      	mov	r0, r3
 8013208:	f001 f84c 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801320c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013210:	3b0c      	subs	r3, #12
 8013212:	2100      	movs	r1, #0
 8013214:	4618      	mov	r0, r3
 8013216:	f001 f845 	bl	80142a4 <pushStack_walk>
				break;
 801321a:	e02a      	b.n	8013272 <route_Dijkstra+0x3aa>
 801321c:	200012ec 	.word	0x200012ec
 8013220:	2000186c 	.word	0x2000186c
			case 4:
				pushStack_walk(&stack_x,x-1);
 8013224:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013228:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	b29b      	uxth	r3, r3
 8013230:	3b01      	subs	r3, #1
 8013232:	b29a      	uxth	r2, r3
 8013234:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013238:	f103 0314 	add.w	r3, r3, #20
 801323c:	4611      	mov	r1, r2
 801323e:	4618      	mov	r0, r3
 8013240:	f001 f830 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013244:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013248:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	b29a      	uxth	r2, r3
 8013250:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013254:	f103 0314 	add.w	r3, r3, #20
 8013258:	4611      	mov	r1, r2
 801325a:	4618      	mov	r0, r3
 801325c:	f001 f822 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013260:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013264:	3b0c      	subs	r3, #12
 8013266:	2101      	movs	r1, #1
 8013268:	4618      	mov	r0, r3
 801326a:	f001 f81b 	bl	80142a4 <pushStack_walk>
				break;
 801326e:	e000      	b.n	8013272 <route_Dijkstra+0x3aa>
			}

		}
 8013270:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8013272:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013276:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801327a:	881a      	ldrh	r2, [r3, #0]
 801327c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013280:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013284:	881b      	ldrh	r3, [r3, #0]
 8013286:	429a      	cmp	r2, r3
 8013288:	f080 80cd 	bcs.w	8013426 <route_Dijkstra+0x55e>
 801328c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013290:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013294:	881a      	ldrh	r2, [r3, #0]
 8013296:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801329a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801329e:	881b      	ldrh	r3, [r3, #0]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	f200 80c0 	bhi.w	8013426 <route_Dijkstra+0x55e>
 80132a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80132ae:	881a      	ldrh	r2, [r3, #0]
 80132b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132b4:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80132b8:	881b      	ldrh	r3, [r3, #0]
 80132ba:	429a      	cmp	r2, r3
 80132bc:	f200 80b3 	bhi.w	8013426 <route_Dijkstra+0x55e>
			// 右旋回
			switch (direction) {		//
 80132c0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80132c4:	f103 031c 	add.w	r3, r3, #28
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	3b01      	subs	r3, #1
 80132cc:	2b03      	cmp	r3, #3
 80132ce:	f200 809f 	bhi.w	8013410 <route_Dijkstra+0x548>
 80132d2:	a201      	add	r2, pc, #4	; (adr r2, 80132d8 <route_Dijkstra+0x410>)
 80132d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132d8:	080132e9 	.word	0x080132e9
 80132dc:	08013331 	.word	0x08013331
 80132e0:	0801337d 	.word	0x0801337d
 80132e4:	080133c9 	.word	0x080133c9
			case 1:
				pushStack_walk(&stack_x,x);
 80132e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	b29a      	uxth	r2, r3
 80132f4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80132f8:	f103 0314 	add.w	r3, r3, #20
 80132fc:	4611      	mov	r1, r2
 80132fe:	4618      	mov	r0, r3
 8013300:	f000 ffd0 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013304:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013308:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	b29a      	uxth	r2, r3
 8013310:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013314:	f103 0314 	add.w	r3, r3, #20
 8013318:	4611      	mov	r1, r2
 801331a:	4618      	mov	r0, r3
 801331c:	f000 ffc2 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013320:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013324:	3b0c      	subs	r3, #12
 8013326:	2101      	movs	r1, #1
 8013328:	4618      	mov	r0, r3
 801332a:	f000 ffbb 	bl	80142a4 <pushStack_walk>
				break;
 801332e:	e06f      	b.n	8013410 <route_Dijkstra+0x548>
			case 2:
				pushStack_walk(&stack_x,x);
 8013330:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013334:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	b29a      	uxth	r2, r3
 801333c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013340:	f103 0314 	add.w	r3, r3, #20
 8013344:	4611      	mov	r1, r2
 8013346:	4618      	mov	r0, r3
 8013348:	f000 ffac 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801334c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013350:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	b29b      	uxth	r3, r3
 8013358:	3b01      	subs	r3, #1
 801335a:	b29a      	uxth	r2, r3
 801335c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013360:	f103 0314 	add.w	r3, r3, #20
 8013364:	4611      	mov	r1, r2
 8013366:	4618      	mov	r0, r3
 8013368:	f000 ff9c 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801336c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013370:	3b0c      	subs	r3, #12
 8013372:	2100      	movs	r1, #0
 8013374:	4618      	mov	r0, r3
 8013376:	f000 ff95 	bl	80142a4 <pushStack_walk>
				break;
 801337a:	e049      	b.n	8013410 <route_Dijkstra+0x548>
			case 3:
				pushStack_walk(&stack_x,x-1);
 801337c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013380:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	b29b      	uxth	r3, r3
 8013388:	3b01      	subs	r3, #1
 801338a:	b29a      	uxth	r2, r3
 801338c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013390:	f103 0314 	add.w	r3, r3, #20
 8013394:	4611      	mov	r1, r2
 8013396:	4618      	mov	r0, r3
 8013398:	f000 ff84 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801339c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80133ac:	f103 0314 	add.w	r3, r3, #20
 80133b0:	4611      	mov	r1, r2
 80133b2:	4618      	mov	r0, r3
 80133b4:	f000 ff76 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80133b8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80133bc:	3b0c      	subs	r3, #12
 80133be:	2101      	movs	r1, #1
 80133c0:	4618      	mov	r0, r3
 80133c2:	f000 ff6f 	bl	80142a4 <pushStack_walk>
				break;
 80133c6:	e023      	b.n	8013410 <route_Dijkstra+0x548>
			case 4:
				pushStack_walk(&stack_x,x);
 80133c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	b29a      	uxth	r2, r3
 80133d4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80133d8:	f103 0314 	add.w	r3, r3, #20
 80133dc:	4611      	mov	r1, r2
 80133de:	4618      	mov	r0, r3
 80133e0:	f000 ff60 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80133e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80133f4:	f103 0314 	add.w	r3, r3, #20
 80133f8:	4611      	mov	r1, r2
 80133fa:	4618      	mov	r0, r3
 80133fc:	f000 ff52 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013400:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013404:	3b0c      	subs	r3, #12
 8013406:	2100      	movs	r1, #0
 8013408:	4618      	mov	r0, r3
 801340a:	f000 ff4b 	bl	80142a4 <pushStack_walk>
				break;
 801340e:	bf00      	nop
			}
			direction++;
 8013410:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013414:	f103 031c 	add.w	r3, r3, #28
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	3301      	adds	r3, #1
 801341c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013420:	f102 021c 	add.w	r2, r2, #28
 8013424:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8013426:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801342a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801342e:	881a      	ldrh	r2, [r3, #0]
 8013430:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013434:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013438:	881b      	ldrh	r3, [r3, #0]
 801343a:	429a      	cmp	r2, r3
 801343c:	f080 80cd 	bcs.w	80135da <route_Dijkstra+0x712>
 8013440:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013444:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013448:	881a      	ldrh	r2, [r3, #0]
 801344a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801344e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013452:	881b      	ldrh	r3, [r3, #0]
 8013454:	429a      	cmp	r2, r3
 8013456:	f080 80c0 	bcs.w	80135da <route_Dijkstra+0x712>
 801345a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801345e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013462:	881a      	ldrh	r2, [r3, #0]
 8013464:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013468:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 801346c:	881b      	ldrh	r3, [r3, #0]
 801346e:	429a      	cmp	r2, r3
 8013470:	f200 80b3 	bhi.w	80135da <route_Dijkstra+0x712>
			// 左旋回
			switch (direction) {		//
 8013474:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013478:	f103 031c 	add.w	r3, r3, #28
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	3b01      	subs	r3, #1
 8013480:	2b03      	cmp	r3, #3
 8013482:	f200 809f 	bhi.w	80135c4 <route_Dijkstra+0x6fc>
 8013486:	a201      	add	r2, pc, #4	; (adr r2, 801348c <route_Dijkstra+0x5c4>)
 8013488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801348c:	0801349d 	.word	0x0801349d
 8013490:	080134e9 	.word	0x080134e9
 8013494:	08013531 	.word	0x08013531
 8013498:	08013579 	.word	0x08013579
			case 1:
				pushStack_walk(&stack_x,x-1);
 801349c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	3b01      	subs	r3, #1
 80134aa:	b29a      	uxth	r2, r3
 80134ac:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80134b0:	f103 0314 	add.w	r3, r3, #20
 80134b4:	4611      	mov	r1, r2
 80134b6:	4618      	mov	r0, r3
 80134b8:	f000 fef4 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80134bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80134cc:	f103 0314 	add.w	r3, r3, #20
 80134d0:	4611      	mov	r1, r2
 80134d2:	4618      	mov	r0, r3
 80134d4:	f000 fee6 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80134d8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80134dc:	3b0c      	subs	r3, #12
 80134de:	2101      	movs	r1, #1
 80134e0:	4618      	mov	r0, r3
 80134e2:	f000 fedf 	bl	80142a4 <pushStack_walk>
				break;
 80134e6:	e06d      	b.n	80135c4 <route_Dijkstra+0x6fc>
			case 2:
				pushStack_walk(&stack_x,x);
 80134e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80134f8:	f103 0314 	add.w	r3, r3, #20
 80134fc:	4611      	mov	r1, r2
 80134fe:	4618      	mov	r0, r3
 8013500:	f000 fed0 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013504:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013508:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	b29a      	uxth	r2, r3
 8013510:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013514:	f103 0314 	add.w	r3, r3, #20
 8013518:	4611      	mov	r1, r2
 801351a:	4618      	mov	r0, r3
 801351c:	f000 fec2 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013520:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013524:	3b0c      	subs	r3, #12
 8013526:	2100      	movs	r1, #0
 8013528:	4618      	mov	r0, r3
 801352a:	f000 febb 	bl	80142a4 <pushStack_walk>
				break;
 801352e:	e049      	b.n	80135c4 <route_Dijkstra+0x6fc>
			case 3:
				pushStack_walk(&stack_x,x);
 8013530:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013534:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	b29a      	uxth	r2, r3
 801353c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013540:	f103 0314 	add.w	r3, r3, #20
 8013544:	4611      	mov	r1, r2
 8013546:	4618      	mov	r0, r3
 8013548:	f000 feac 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801354c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013550:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	b29a      	uxth	r2, r3
 8013558:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801355c:	f103 0314 	add.w	r3, r3, #20
 8013560:	4611      	mov	r1, r2
 8013562:	4618      	mov	r0, r3
 8013564:	f000 fe9e 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013568:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801356c:	3b0c      	subs	r3, #12
 801356e:	2101      	movs	r1, #1
 8013570:	4618      	mov	r0, r3
 8013572:	f000 fe97 	bl	80142a4 <pushStack_walk>
				break;
 8013576:	e025      	b.n	80135c4 <route_Dijkstra+0x6fc>
			case 4:
				pushStack_walk(&stack_x,x);
 8013578:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801357c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	b29a      	uxth	r2, r3
 8013584:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013588:	f103 0314 	add.w	r3, r3, #20
 801358c:	4611      	mov	r1, r2
 801358e:	4618      	mov	r0, r3
 8013590:	f000 fe88 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013594:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013598:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	b29b      	uxth	r3, r3
 80135a0:	3b01      	subs	r3, #1
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80135a8:	f103 0314 	add.w	r3, r3, #20
 80135ac:	4611      	mov	r1, r2
 80135ae:	4618      	mov	r0, r3
 80135b0:	f000 fe78 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80135b4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80135b8:	3b0c      	subs	r3, #12
 80135ba:	2100      	movs	r1, #0
 80135bc:	4618      	mov	r0, r3
 80135be:	f000 fe71 	bl	80142a4 <pushStack_walk>
				break;
 80135c2:	bf00      	nop
			}
			direction--;
 80135c4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80135c8:	f103 031c 	add.w	r3, r3, #28
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	3b01      	subs	r3, #1
 80135d0:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80135d4:	f102 021c 	add.w	r2, r2, #28
 80135d8:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 80135da:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80135de:	f103 031c 	add.w	r3, r3, #28
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	2b05      	cmp	r3, #5
 80135e6:	d105      	bne.n	80135f4 <route_Dijkstra+0x72c>
			direction = 1;
 80135e8:	2301      	movs	r3, #1
 80135ea:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80135ee:	f102 021c 	add.w	r2, r2, #28
 80135f2:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 80135f4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80135f8:	f103 031c 	add.w	r3, r3, #28
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	2b06      	cmp	r3, #6
 8013600:	d105      	bne.n	801360e <route_Dijkstra+0x746>
			direction = 2;
 8013602:	2302      	movs	r3, #2
 8013604:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013608:	f102 021c 	add.w	r2, r2, #28
 801360c:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 801360e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013612:	f103 031c 	add.w	r3, r3, #28
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d105      	bne.n	8013628 <route_Dijkstra+0x760>
			direction = 4;
 801361c:	2304      	movs	r3, #4
 801361e:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013622:	f102 021c 	add.w	r2, r2, #28
 8013626:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013628:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801362c:	f103 031c 	add.w	r3, r3, #28
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013636:	f47f ac8f 	bne.w	8012f58 <route_Dijkstra+0x90>
			direction = 3;
 801363a:	2303      	movs	r3, #3
 801363c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013640:	f102 021c 	add.w	r2, r2, #28
 8013644:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 8013646:	e487      	b.n	8012f58 <route_Dijkstra+0x90>
			break;
 8013648:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 801364a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801364e:	f103 0314 	add.w	r3, r3, #20
 8013652:	4618      	mov	r0, r3
 8013654:	f000 fe50 	bl	80142f8 <popStack_walk>
 8013658:	4603      	mov	r3, r0
 801365a:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 801365e:	f102 021a 	add.w	r2, r2, #26
 8013662:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 8013664:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013668:	f103 0314 	add.w	r3, r3, #20
 801366c:	4618      	mov	r0, r3
 801366e:	f000 fe43 	bl	80142f8 <popStack_walk>
 8013672:	4603      	mov	r3, r0
 8013674:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013678:	f102 0218 	add.w	r2, r2, #24
 801367c:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 801367e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013682:	3b0c      	subs	r3, #12
 8013684:	4618      	mov	r0, r3
 8013686:	f000 fe37 	bl	80142f8 <popStack_walk>
 801368a:	4603      	mov	r3, r0
 801368c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013690:	f102 0216 	add.w	r2, r2, #22
 8013694:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013696:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801369a:	f103 031a 	add.w	r3, r3, #26
 801369e:	881b      	ldrh	r3, [r3, #0]
 80136a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136a4:	4293      	cmp	r3, r2
 80136a6:	f000 80d5 	beq.w	8013854 <route_Dijkstra+0x98c>
 80136aa:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136ae:	f103 0318 	add.w	r3, r3, #24
 80136b2:	881b      	ldrh	r3, [r3, #0]
 80136b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136b8:	4293      	cmp	r3, r2
 80136ba:	f000 80cb 	beq.w	8013854 <route_Dijkstra+0x98c>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 80136be:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136c2:	f103 0316 	add.w	r3, r3, #22
 80136c6:	881b      	ldrh	r3, [r3, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d15c      	bne.n	8013786 <route_Dijkstra+0x8be>
 80136cc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136d0:	f103 0318 	add.w	r3, r3, #24
 80136d4:	881b      	ldrh	r3, [r3, #0]
 80136d6:	4a62      	ldr	r2, [pc, #392]	; (8013860 <route_Dijkstra+0x998>)
 80136d8:	332c      	adds	r3, #44	; 0x2c
 80136da:	005b      	lsls	r3, r3, #1
 80136dc:	4413      	add	r3, r2
 80136de:	885b      	ldrh	r3, [r3, #2]
 80136e0:	461a      	mov	r2, r3
 80136e2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136e6:	f103 031a 	add.w	r3, r3, #26
 80136ea:	881b      	ldrh	r3, [r3, #0]
 80136ec:	fa42 f303 	asr.w	r3, r2, r3
 80136f0:	f003 0301 	and.w	r3, r3, #1
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d146      	bne.n	8013786 <route_Dijkstra+0x8be>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 80136f8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136fc:	f103 031a 	add.w	r3, r3, #26
 8013700:	881b      	ldrh	r3, [r3, #0]
 8013702:	011a      	lsls	r2, r3, #4
 8013704:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013708:	f103 0318 	add.w	r3, r3, #24
 801370c:	881b      	ldrh	r3, [r3, #0]
 801370e:	4413      	add	r3, r2
 8013710:	4a54      	ldr	r2, [pc, #336]	; (8013864 <route_Dijkstra+0x99c>)
 8013712:	2100      	movs	r1, #0
 8013714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[(Xcoordinate * 16) + Ycoordinate+1] = 0;
 8013718:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801371c:	f103 031a 	add.w	r3, r3, #26
 8013720:	881b      	ldrh	r3, [r3, #0]
 8013722:	011a      	lsls	r2, r3, #4
 8013724:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013728:	f103 0318 	add.w	r3, r3, #24
 801372c:	881b      	ldrh	r3, [r3, #0]
 801372e:	4413      	add	r3, r2
 8013730:	3301      	adds	r3, #1
 8013732:	4a4c      	ldr	r2, [pc, #304]	; (8013864 <route_Dijkstra+0x99c>)
 8013734:	2100      	movs	r1, #0
 8013736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 801373a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801373e:	f103 031a 	add.w	r3, r3, #26
 8013742:	881b      	ldrh	r3, [r3, #0]
 8013744:	4619      	mov	r1, r3
 8013746:	4848      	ldr	r0, [pc, #288]	; (8013868 <route_Dijkstra+0x9a0>)
 8013748:	f000 fdac 	bl	80142a4 <pushStack_walk>
 801374c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013750:	f103 0318 	add.w	r3, r3, #24
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	4619      	mov	r1, r3
 8013758:	4844      	ldr	r0, [pc, #272]	; (801386c <route_Dijkstra+0x9a4>)
 801375a:	f000 fda3 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 801375e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013762:	f103 031a 	add.w	r3, r3, #26
 8013766:	881b      	ldrh	r3, [r3, #0]
 8013768:	4619      	mov	r1, r3
 801376a:	483f      	ldr	r0, [pc, #252]	; (8013868 <route_Dijkstra+0x9a0>)
 801376c:	f000 fd9a 	bl	80142a4 <pushStack_walk>
 8013770:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013774:	f103 0318 	add.w	r3, r3, #24
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	3301      	adds	r3, #1
 801377c:	b29b      	uxth	r3, r3
 801377e:	4619      	mov	r1, r3
 8013780:	483a      	ldr	r0, [pc, #232]	; (801386c <route_Dijkstra+0x9a4>)
 8013782:	f000 fd8f 	bl	80142a4 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8013786:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801378a:	f103 0316 	add.w	r3, r3, #22
 801378e:	881b      	ldrh	r3, [r3, #0]
 8013790:	2b01      	cmp	r3, #1
 8013792:	f47f af5a 	bne.w	801364a <route_Dijkstra+0x782>
 8013796:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801379a:	f103 031a 	add.w	r3, r3, #26
 801379e:	881b      	ldrh	r3, [r3, #0]
 80137a0:	4a2f      	ldr	r2, [pc, #188]	; (8013860 <route_Dijkstra+0x998>)
 80137a2:	331c      	adds	r3, #28
 80137a4:	005b      	lsls	r3, r3, #1
 80137a6:	4413      	add	r3, r2
 80137a8:	889b      	ldrh	r3, [r3, #4]
 80137aa:	461a      	mov	r2, r3
 80137ac:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137b0:	f103 0318 	add.w	r3, r3, #24
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	fa42 f303 	asr.w	r3, r2, r3
 80137ba:	f003 0301 	and.w	r3, r3, #1
 80137be:	2b00      	cmp	r3, #0
 80137c0:	f47f af43 	bne.w	801364a <route_Dijkstra+0x782>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 80137c4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137c8:	f103 031a 	add.w	r3, r3, #26
 80137cc:	881b      	ldrh	r3, [r3, #0]
 80137ce:	011a      	lsls	r2, r3, #4
 80137d0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137d4:	f103 0318 	add.w	r3, r3, #24
 80137d8:	881b      	ldrh	r3, [r3, #0]
 80137da:	4413      	add	r3, r2
 80137dc:	4a21      	ldr	r2, [pc, #132]	; (8013864 <route_Dijkstra+0x99c>)
 80137de:	2100      	movs	r1, #0
 80137e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[((Xcoordinate+1) * 16) + Ycoordinate] = 0;
 80137e4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137e8:	f103 031a 	add.w	r3, r3, #26
 80137ec:	881b      	ldrh	r3, [r3, #0]
 80137ee:	3301      	adds	r3, #1
 80137f0:	011a      	lsls	r2, r3, #4
 80137f2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137f6:	f103 0318 	add.w	r3, r3, #24
 80137fa:	881b      	ldrh	r3, [r3, #0]
 80137fc:	4413      	add	r3, r2
 80137fe:	4a19      	ldr	r2, [pc, #100]	; (8013864 <route_Dijkstra+0x99c>)
 8013800:	2100      	movs	r1, #0
 8013802:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013806:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801380a:	f103 031a 	add.w	r3, r3, #26
 801380e:	881b      	ldrh	r3, [r3, #0]
 8013810:	4619      	mov	r1, r3
 8013812:	4815      	ldr	r0, [pc, #84]	; (8013868 <route_Dijkstra+0x9a0>)
 8013814:	f000 fd46 	bl	80142a4 <pushStack_walk>
 8013818:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801381c:	f103 0318 	add.w	r3, r3, #24
 8013820:	881b      	ldrh	r3, [r3, #0]
 8013822:	4619      	mov	r1, r3
 8013824:	4811      	ldr	r0, [pc, #68]	; (801386c <route_Dijkstra+0x9a4>)
 8013826:	f000 fd3d 	bl	80142a4 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 801382a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801382e:	f103 031a 	add.w	r3, r3, #26
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	3301      	adds	r3, #1
 8013836:	b29b      	uxth	r3, r3
 8013838:	4619      	mov	r1, r3
 801383a:	480b      	ldr	r0, [pc, #44]	; (8013868 <route_Dijkstra+0x9a0>)
 801383c:	f000 fd32 	bl	80142a4 <pushStack_walk>
 8013840:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013844:	f103 0318 	add.w	r3, r3, #24
 8013848:	881b      	ldrh	r3, [r3, #0]
 801384a:	4619      	mov	r1, r3
 801384c:	4807      	ldr	r0, [pc, #28]	; (801386c <route_Dijkstra+0x9a4>)
 801384e:	f000 fd29 	bl	80142a4 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013852:	e6fa      	b.n	801364a <route_Dijkstra+0x782>
			}
	}


}
 8013854:	bf00      	nop
 8013856:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 801385a:	3724      	adds	r7, #36	; 0x24
 801385c:	46bd      	mov	sp, r7
 801385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013860:	20000c3c 	.word	0x20000c3c
 8013864:	20000d2c 	.word	0x20000d2c
 8013868:	200012ec 	.word	0x200012ec
 801386c:	2000186c 	.word	0x2000186c

08013870 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013870:	b580      	push	{r7, lr}
 8013872:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013876:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013878:	2300      	movs	r3, #0
 801387a:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 801387e:	e00a      	b.n	8013896 <create_StepCountMap_unknown+0x26>
 8013880:	4a39      	ldr	r2, [pc, #228]	; (8013968 <create_StepCountMap_unknown+0xf8>)
 8013882:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013886:	21ff      	movs	r1, #255	; 0xff
 8013888:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801388c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013890:	3301      	adds	r3, #1
 8013892:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013896:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801389a:	2bff      	cmp	r3, #255	; 0xff
 801389c:	ddf0      	ble.n	8013880 <create_StepCountMap_unknown+0x10>

	initStack_walk(&stack_x);
 801389e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80138a2:	4618      	mov	r0, r3
 80138a4:	f000 fcee 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_y);
 80138a8:	463b      	mov	r3, r7
 80138aa:	4618      	mov	r0, r3
 80138ac:	f000 fcea 	bl	8014284 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 80138b0:	482e      	ldr	r0, [pc, #184]	; (801396c <create_StepCountMap_unknown+0xfc>)
 80138b2:	f000 fd21 	bl	80142f8 <popStack_walk>
 80138b6:	4603      	mov	r3, r0
 80138b8:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
			goalY = popStack_walk(&g_Goal_y);
 80138bc:	482c      	ldr	r0, [pc, #176]	; (8013970 <create_StepCountMap_unknown+0x100>)
 80138be:	f000 fd1b 	bl	80142f8 <popStack_walk>
 80138c2:	4603      	mov	r3, r0
 80138c4:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 80138c8:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80138cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d01f      	beq.n	8013914 <create_StepCountMap_unknown+0xa4>
 80138d4:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80138d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138dc:	4293      	cmp	r3, r2
 80138de:	d019      	beq.n	8013914 <create_StepCountMap_unknown+0xa4>
				//printf("stack_end\n");
				break;
			}
			walk_count[(goalX * 16) + goalY] = 0;
 80138e0:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80138e4:	011a      	lsls	r2, r3, #4
 80138e6:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80138ea:	4413      	add	r3, r2
 80138ec:	4a1e      	ldr	r2, [pc, #120]	; (8013968 <create_StepCountMap_unknown+0xf8>)
 80138ee:	2100      	movs	r1, #0
 80138f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 80138f4:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 80138f8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80138fc:	4611      	mov	r1, r2
 80138fe:	4618      	mov	r0, r3
 8013900:	f000 fcd0 	bl	80142a4 <pushStack_walk>
 8013904:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8013908:	463b      	mov	r3, r7
 801390a:	4611      	mov	r1, r2
 801390c:	4618      	mov	r0, r3
 801390e:	f000 fcc9 	bl	80142a4 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013912:	e7cd      	b.n	80138b0 <create_StepCountMap_unknown+0x40>
	}
	if(stack_x.tail == stack_x.head){
 8013914:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013918:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801391c:	685a      	ldr	r2, [r3, #4]
 801391e:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013922:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	429a      	cmp	r2, r3
 801392a:	d10d      	bne.n	8013948 <create_StepCountMap_unknown+0xd8>
		walk_count[0] = 0;
 801392c:	4b0e      	ldr	r3, [pc, #56]	; (8013968 <create_StepCountMap_unknown+0xf8>)
 801392e:	2200      	movs	r2, #0
 8013930:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013932:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013936:	2100      	movs	r1, #0
 8013938:	4618      	mov	r0, r3
 801393a:	f000 fcb3 	bl	80142a4 <pushStack_walk>
 801393e:	463b      	mov	r3, r7
 8013940:	2100      	movs	r1, #0
 8013942:	4618      	mov	r0, r3
 8013944:	f000 fcae 	bl	80142a4 <pushStack_walk>
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013948:	2301      	movs	r3, #1
 801394a:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 801394e:	2301      	movs	r3, #1
 8013950:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013954:	2301      	movs	r3, #1
 8013956:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 801395a:	2301      	movs	r3, #1
 801395c:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013960:	2301      	movs	r3, #1
 8013962:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013966:	e141      	b.n	8013bec <create_StepCountMap_unknown+0x37c>
 8013968:	20000d2c 	.word	0x20000d2c
 801396c:	200012ec 	.word	0x200012ec
 8013970:	2000186c 	.word	0x2000186c

		Xcoordinate = popStack_walk(&stack_x);
 8013974:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013978:	4618      	mov	r0, r3
 801397a:	f000 fcbd 	bl	80142f8 <popStack_walk>
 801397e:	4603      	mov	r3, r0
 8013980:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		Ycoordinate = popStack_walk(&stack_y);
 8013984:	463b      	mov	r3, r7
 8013986:	4618      	mov	r0, r3
 8013988:	f000 fcb6 	bl	80142f8 <popStack_walk>
 801398c:	4603      	mov	r3, r0
 801398e:	f8a7 3b02 	strh.w	r3, [r7, #2818]	; 0xb02
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013992:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801399a:	4293      	cmp	r3, r2
 801399c:	f000 812b 	beq.w	8013bf6 <create_StepCountMap_unknown+0x386>
 80139a0:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139a8:	4293      	cmp	r3, r2
 80139aa:	f000 8124 	beq.w	8013bf6 <create_StepCountMap_unknown+0x386>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 80139ae:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80139b2:	011b      	lsls	r3, r3, #4
 80139b4:	b29a      	uxth	r2, r3
 80139b6:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139ba:	4413      	add	r3, r2
 80139bc:	f8a7 3b00 	strh.w	r3, [r7, #2816]	; 0xb00
		if (Ycoordinate <= 14) {
 80139c0:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139c4:	2b0e      	cmp	r3, #14
 80139c6:	d811      	bhi.n	80139ec <create_StepCountMap_unknown+0x17c>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 80139c8:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139cc:	4a8c      	ldr	r2, [pc, #560]	; (8013c00 <create_StepCountMap_unknown+0x390>)
 80139ce:	330c      	adds	r3, #12
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	4413      	add	r3, r2
 80139d4:	88db      	ldrh	r3, [r3, #6]
 80139d6:	b21a      	sxth	r2, r3
 80139d8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80139dc:	2101      	movs	r1, #1
 80139de:	fa01 f303 	lsl.w	r3, r1, r3
 80139e2:	b21b      	sxth	r3, r3
 80139e4:	4013      	ands	r3, r2
 80139e6:	b21b      	sxth	r3, r3
 80139e8:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 80139ec:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d012      	beq.n	8013a1a <create_StepCountMap_unknown+0x1aa>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80139f4:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139f8:	3b01      	subs	r3, #1
 80139fa:	4a81      	ldr	r2, [pc, #516]	; (8013c00 <create_StepCountMap_unknown+0x390>)
 80139fc:	330c      	adds	r3, #12
 80139fe:	005b      	lsls	r3, r3, #1
 8013a00:	4413      	add	r3, r2
 8013a02:	88db      	ldrh	r3, [r3, #6]
 8013a04:	b21a      	sxth	r2, r3
 8013a06:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a0a:	2101      	movs	r1, #1
 8013a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8013a10:	b21b      	sxth	r3, r3
 8013a12:	4013      	ands	r3, r2
 8013a14:	b21b      	sxth	r3, r3
 8013a16:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8013a1a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a1e:	2b0e      	cmp	r3, #14
 8013a20:	d80f      	bhi.n	8013a42 <create_StepCountMap_unknown+0x1d2>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013a22:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a26:	4a76      	ldr	r2, [pc, #472]	; (8013c00 <create_StepCountMap_unknown+0x390>)
 8013a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a2c:	b21a      	sxth	r2, r3
 8013a2e:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013a32:	2101      	movs	r1, #1
 8013a34:	fa01 f303 	lsl.w	r3, r1, r3
 8013a38:	b21b      	sxth	r3, r3
 8013a3a:	4013      	ands	r3, r2
 8013a3c:	b21b      	sxth	r3, r3
 8013a3e:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8013a42:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d010      	beq.n	8013a6c <create_StepCountMap_unknown+0x1fc>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013a4a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a4e:	3b01      	subs	r3, #1
 8013a50:	4a6b      	ldr	r2, [pc, #428]	; (8013c00 <create_StepCountMap_unknown+0x390>)
 8013a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a56:	b21a      	sxth	r2, r3
 8013a58:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013a5c:	2101      	movs	r1, #1
 8013a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8013a62:	b21b      	sxth	r3, r3
 8013a64:	4013      	ands	r3, r2
 8013a66:	b21b      	sxth	r3, r3
 8013a68:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013a6c:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013a70:	3301      	adds	r3, #1
 8013a72:	4a64      	ldr	r2, [pc, #400]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a78:	2bff      	cmp	r3, #255	; 0xff
 8013a7a:	d125      	bne.n	8013ac8 <create_StepCountMap_unknown+0x258>
 8013a7c:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013a80:	2b0f      	cmp	r3, #15
 8013a82:	d021      	beq.n	8013ac8 <create_StepCountMap_unknown+0x258>
 8013a84:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d11d      	bne.n	8013ac8 <create_StepCountMap_unknown+0x258>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8013a8c:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013a90:	4a5c      	ldr	r2, [pc, #368]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013a92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013a96:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	3201      	adds	r2, #1
 8013a9e:	b291      	uxth	r1, r2
 8013aa0:	4a58      	ldr	r2, [pc, #352]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013aa6:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013aaa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013aae:	4611      	mov	r1, r2
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f000 fbf7 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013ab6:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013aba:	3301      	adds	r3, #1
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	463b      	mov	r3, r7
 8013ac0:	4611      	mov	r1, r2
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f000 fbee 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013ac8:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013acc:	3b01      	subs	r3, #1
 8013ace:	4a4d      	ldr	r2, [pc, #308]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ad4:	2bff      	cmp	r3, #255	; 0xff
 8013ad6:	d125      	bne.n	8013b24 <create_StepCountMap_unknown+0x2b4>
 8013ad8:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d021      	beq.n	8013b24 <create_StepCountMap_unknown+0x2b4>
 8013ae0:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d11d      	bne.n	8013b24 <create_StepCountMap_unknown+0x2b4>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8013ae8:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013aec:	4a45      	ldr	r2, [pc, #276]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013aee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013af2:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013af6:	3b01      	subs	r3, #1
 8013af8:	3201      	adds	r2, #1
 8013afa:	b291      	uxth	r1, r2
 8013afc:	4a41      	ldr	r2, [pc, #260]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013b02:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013b06:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b0a:	4611      	mov	r1, r2
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f000 fbc9 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013b12:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013b16:	3b01      	subs	r3, #1
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	463b      	mov	r3, r7
 8013b1c:	4611      	mov	r1, r2
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f000 fbc0 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013b24:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b28:	3310      	adds	r3, #16
 8013b2a:	4a36      	ldr	r2, [pc, #216]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b30:	2bff      	cmp	r3, #255	; 0xff
 8013b32:	d125      	bne.n	8013b80 <create_StepCountMap_unknown+0x310>
 8013b34:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013b38:	2b0f      	cmp	r3, #15
 8013b3a:	d021      	beq.n	8013b80 <create_StepCountMap_unknown+0x310>
 8013b3c:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d11d      	bne.n	8013b80 <create_StepCountMap_unknown+0x310>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 8013b44:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b48:	4a2e      	ldr	r2, [pc, #184]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013b4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013b4e:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b52:	3310      	adds	r3, #16
 8013b54:	3201      	adds	r2, #1
 8013b56:	b291      	uxth	r1, r2
 8013b58:	4a2a      	ldr	r2, [pc, #168]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013b5e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013b62:	3301      	adds	r3, #1
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b6a:	4611      	mov	r1, r2
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f000 fb99 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013b72:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013b76:	463b      	mov	r3, r7
 8013b78:	4611      	mov	r1, r2
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 fb92 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013b80:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b84:	3b10      	subs	r3, #16
 8013b86:	4a1f      	ldr	r2, [pc, #124]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b8c:	2bff      	cmp	r3, #255	; 0xff
 8013b8e:	d125      	bne.n	8013bdc <create_StepCountMap_unknown+0x36c>
 8013b90:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d021      	beq.n	8013bdc <create_StepCountMap_unknown+0x36c>
 8013b98:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d11d      	bne.n	8013bdc <create_StepCountMap_unknown+0x36c>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8013ba0:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013ba4:	4a17      	ldr	r2, [pc, #92]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013ba6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013baa:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013bae:	3b10      	subs	r3, #16
 8013bb0:	3201      	adds	r2, #1
 8013bb2:	b291      	uxth	r1, r2
 8013bb4:	4a13      	ldr	r2, [pc, #76]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013bb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013bba:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013bbe:	3b01      	subs	r3, #1
 8013bc0:	b29a      	uxth	r2, r3
 8013bc2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f000 fb6b 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013bce:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013bd2:	463b      	mov	r3, r7
 8013bd4:	4611      	mov	r1, r2
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f000 fb64 	bl	80142a4 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8013bdc:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013be0:	4a08      	ldr	r2, [pc, #32]	; (8013c04 <create_StepCountMap_unknown+0x394>)
 8013be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013be6:	3301      	adds	r3, #1
 8013be8:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8013bec:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8013bf0:	2bfe      	cmp	r3, #254	; 0xfe
 8013bf2:	f67f aebf 	bls.w	8013974 <create_StepCountMap_unknown+0x104>

		}

}
 8013bf6:	bf00      	nop
 8013bf8:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	20000c3c 	.word	0x20000c3c
 8013c04:	20000d2c 	.word	0x20000d2c

08013c08 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013c0e:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013c10:	2300      	movs	r3, #0
 8013c12:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013c16:	e00a      	b.n	8013c2e <create_StepCountMap_queue+0x26>
 8013c18:	4a30      	ldr	r2, [pc, #192]	; (8013cdc <create_StepCountMap_queue+0xd4>)
 8013c1a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013c1e:	21ff      	movs	r1, #255	; 0xff
 8013c20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013c24:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013c28:	3301      	adds	r3, #1
 8013c2a:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013c2e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013c32:	2bff      	cmp	r3, #255	; 0xff
 8013c34:	ddf0      	ble.n	8013c18 <create_StepCountMap_queue+0x10>
	initStack_walk(&stack_x);
 8013c36:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f000 fb22 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_y);
 8013c40:	1d3b      	adds	r3, r7, #4
 8013c42:	4618      	mov	r0, r3
 8013c44:	f000 fb1e 	bl	8014284 <initStack_walk>


	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8013c48:	4b24      	ldr	r3, [pc, #144]	; (8013cdc <create_StepCountMap_queue+0xd4>)
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	841a      	strh	r2, [r3, #32]
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 8013c4e:	4b23      	ldr	r3, [pc, #140]	; (8013cdc <create_StepCountMap_queue+0xd4>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 8013c56:	4b21      	ldr	r3, [pc, #132]	; (8013cdc <create_StepCountMap_queue+0xd4>)
 8013c58:	2200      	movs	r2, #0
 8013c5a:	845a      	strh	r2, [r3, #34]	; 0x22
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 8013c5c:	4b1f      	ldr	r3, [pc, #124]	; (8013cdc <create_StepCountMap_queue+0xd4>)
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8013c64:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c68:	2101      	movs	r1, #1
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f000 fb1a 	bl	80142a4 <pushStack_walk>
 8013c70:	1d3b      	adds	r3, r7, #4
 8013c72:	2100      	movs	r1, #0
 8013c74:	4618      	mov	r0, r3
 8013c76:	f000 fb15 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8013c7a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c7e:	2102      	movs	r1, #2
 8013c80:	4618      	mov	r0, r3
 8013c82:	f000 fb0f 	bl	80142a4 <pushStack_walk>
 8013c86:	1d3b      	adds	r3, r7, #4
 8013c88:	2100      	movs	r1, #0
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f000 fb0a 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013c90:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c94:	2101      	movs	r1, #1
 8013c96:	4618      	mov	r0, r3
 8013c98:	f000 fb04 	bl	80142a4 <pushStack_walk>
 8013c9c:	1d3b      	adds	r3, r7, #4
 8013c9e:	2101      	movs	r1, #1
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f000 faff 	bl	80142a4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013ca6:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013caa:	2102      	movs	r1, #2
 8013cac:	4618      	mov	r0, r3
 8013cae:	f000 faf9 	bl	80142a4 <pushStack_walk>
 8013cb2:	1d3b      	adds	r3, r7, #4
 8013cb4:	2101      	movs	r1, #1
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f000 faf4 	bl	80142a4 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013cc8:	2301      	movs	r3, #1
 8013cca:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013cce:	2301      	movs	r3, #1
 8013cd0:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013cda:	e13d      	b.n	8013f58 <create_StepCountMap_queue+0x350>
 8013cdc:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013ce0:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f000 fb07 	bl	80142f8 <popStack_walk>
 8013cea:	4603      	mov	r3, r0
 8013cec:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 8013cf0:	1d3b      	adds	r3, r7, #4
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f000 fb00 	bl	80142f8 <popStack_walk>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013cfe:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d06:	4293      	cmp	r3, r2
 8013d08:	f000 812b 	beq.w	8013f62 <create_StepCountMap_queue+0x35a>
 8013d0c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d14:	4293      	cmp	r3, r2
 8013d16:	f000 8124 	beq.w	8013f62 <create_StepCountMap_queue+0x35a>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8013d1a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d1e:	011b      	lsls	r3, r3, #4
 8013d20:	b29a      	uxth	r2, r3
 8013d22:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d26:	4413      	add	r3, r2
 8013d28:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8013d2c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d30:	2b0e      	cmp	r3, #14
 8013d32:	d811      	bhi.n	8013d58 <create_StepCountMap_queue+0x150>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013d34:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d38:	4a8c      	ldr	r2, [pc, #560]	; (8013f6c <create_StepCountMap_queue+0x364>)
 8013d3a:	330c      	adds	r3, #12
 8013d3c:	005b      	lsls	r3, r3, #1
 8013d3e:	4413      	add	r3, r2
 8013d40:	88db      	ldrh	r3, [r3, #6]
 8013d42:	b21a      	sxth	r2, r3
 8013d44:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d48:	2101      	movs	r1, #1
 8013d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8013d4e:	b21b      	sxth	r3, r3
 8013d50:	4013      	ands	r3, r2
 8013d52:	b21b      	sxth	r3, r3
 8013d54:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8013d58:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d012      	beq.n	8013d86 <create_StepCountMap_queue+0x17e>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013d60:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d64:	3b01      	subs	r3, #1
 8013d66:	4a81      	ldr	r2, [pc, #516]	; (8013f6c <create_StepCountMap_queue+0x364>)
 8013d68:	330c      	adds	r3, #12
 8013d6a:	005b      	lsls	r3, r3, #1
 8013d6c:	4413      	add	r3, r2
 8013d6e:	88db      	ldrh	r3, [r3, #6]
 8013d70:	b21a      	sxth	r2, r3
 8013d72:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d76:	2101      	movs	r1, #1
 8013d78:	fa01 f303 	lsl.w	r3, r1, r3
 8013d7c:	b21b      	sxth	r3, r3
 8013d7e:	4013      	ands	r3, r2
 8013d80:	b21b      	sxth	r3, r3
 8013d82:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8013d86:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d8a:	2b0e      	cmp	r3, #14
 8013d8c:	d80f      	bhi.n	8013dae <create_StepCountMap_queue+0x1a6>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013d8e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d92:	4a76      	ldr	r2, [pc, #472]	; (8013f6c <create_StepCountMap_queue+0x364>)
 8013d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d98:	b21a      	sxth	r2, r3
 8013d9a:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d9e:	2101      	movs	r1, #1
 8013da0:	fa01 f303 	lsl.w	r3, r1, r3
 8013da4:	b21b      	sxth	r3, r3
 8013da6:	4013      	ands	r3, r2
 8013da8:	b21b      	sxth	r3, r3
 8013daa:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8013dae:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d010      	beq.n	8013dd8 <create_StepCountMap_queue+0x1d0>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013db6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013dba:	3b01      	subs	r3, #1
 8013dbc:	4a6b      	ldr	r2, [pc, #428]	; (8013f6c <create_StepCountMap_queue+0x364>)
 8013dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013dc2:	b21a      	sxth	r2, r3
 8013dc4:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013dc8:	2101      	movs	r1, #1
 8013dca:	fa01 f303 	lsl.w	r3, r1, r3
 8013dce:	b21b      	sxth	r3, r3
 8013dd0:	4013      	ands	r3, r2
 8013dd2:	b21b      	sxth	r3, r3
 8013dd4:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013dd8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013ddc:	3301      	adds	r3, #1
 8013dde:	4a64      	ldr	r2, [pc, #400]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013de4:	2bff      	cmp	r3, #255	; 0xff
 8013de6:	d125      	bne.n	8013e34 <create_StepCountMap_queue+0x22c>
 8013de8:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013dec:	2b0f      	cmp	r3, #15
 8013dee:	d021      	beq.n	8013e34 <create_StepCountMap_queue+0x22c>
 8013df0:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d11d      	bne.n	8013e34 <create_StepCountMap_queue+0x22c>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8013df8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013dfc:	4a5c      	ldr	r2, [pc, #368]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013dfe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013e02:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e06:	3301      	adds	r3, #1
 8013e08:	3201      	adds	r2, #1
 8013e0a:	b291      	uxth	r1, r2
 8013e0c:	4a58      	ldr	r2, [pc, #352]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013e12:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8013e16:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013e1a:	4611      	mov	r1, r2
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f000 fa41 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013e22:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013e26:	3301      	adds	r3, #1
 8013e28:	b29a      	uxth	r2, r3
 8013e2a:	1d3b      	adds	r3, r7, #4
 8013e2c:	4611      	mov	r1, r2
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f000 fa38 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013e34:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	4a4d      	ldr	r2, [pc, #308]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e40:	2bff      	cmp	r3, #255	; 0xff
 8013e42:	d125      	bne.n	8013e90 <create_StepCountMap_queue+0x288>
 8013e44:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d021      	beq.n	8013e90 <create_StepCountMap_queue+0x288>
 8013e4c:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d11d      	bne.n	8013e90 <create_StepCountMap_queue+0x288>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8013e54:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e58:	4a45      	ldr	r2, [pc, #276]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013e5a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013e5e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e62:	3b01      	subs	r3, #1
 8013e64:	3201      	adds	r2, #1
 8013e66:	b291      	uxth	r1, r2
 8013e68:	4a41      	ldr	r2, [pc, #260]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013e6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013e6e:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8013e72:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013e76:	4611      	mov	r1, r2
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f000 fa13 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013e7e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013e82:	3b01      	subs	r3, #1
 8013e84:	b29a      	uxth	r2, r3
 8013e86:	1d3b      	adds	r3, r7, #4
 8013e88:	4611      	mov	r1, r2
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f000 fa0a 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013e90:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e94:	3310      	adds	r3, #16
 8013e96:	4a36      	ldr	r2, [pc, #216]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e9c:	2bff      	cmp	r3, #255	; 0xff
 8013e9e:	d125      	bne.n	8013eec <create_StepCountMap_queue+0x2e4>
 8013ea0:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013ea4:	2b0f      	cmp	r3, #15
 8013ea6:	d021      	beq.n	8013eec <create_StepCountMap_queue+0x2e4>
 8013ea8:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d11d      	bne.n	8013eec <create_StepCountMap_queue+0x2e4>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 8013eb0:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013eb4:	4a2e      	ldr	r2, [pc, #184]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013eb6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013eba:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013ebe:	3310      	adds	r3, #16
 8013ec0:	3201      	adds	r2, #1
 8013ec2:	b291      	uxth	r1, r2
 8013ec4:	4a2a      	ldr	r2, [pc, #168]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013ec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013eca:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013ece:	3301      	adds	r3, #1
 8013ed0:	b29a      	uxth	r2, r3
 8013ed2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013ed6:	4611      	mov	r1, r2
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f000 f9e3 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013ede:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8013ee2:	1d3b      	adds	r3, r7, #4
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f000 f9dc 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013eec:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013ef0:	3b10      	subs	r3, #16
 8013ef2:	4a1f      	ldr	r2, [pc, #124]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ef8:	2bff      	cmp	r3, #255	; 0xff
 8013efa:	d125      	bne.n	8013f48 <create_StepCountMap_queue+0x340>
 8013efc:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d021      	beq.n	8013f48 <create_StepCountMap_queue+0x340>
 8013f04:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d11d      	bne.n	8013f48 <create_StepCountMap_queue+0x340>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8013f0c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013f10:	4a17      	ldr	r2, [pc, #92]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013f12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013f16:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013f1a:	3b10      	subs	r3, #16
 8013f1c:	3201      	adds	r2, #1
 8013f1e:	b291      	uxth	r1, r2
 8013f20:	4a13      	ldr	r2, [pc, #76]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013f22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013f26:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013f2a:	3b01      	subs	r3, #1
 8013f2c:	b29a      	uxth	r2, r3
 8013f2e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013f32:	4611      	mov	r1, r2
 8013f34:	4618      	mov	r0, r3
 8013f36:	f000 f9b5 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013f3a:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8013f3e:	1d3b      	adds	r3, r7, #4
 8013f40:	4611      	mov	r1, r2
 8013f42:	4618      	mov	r0, r3
 8013f44:	f000 f9ae 	bl	80142a4 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8013f48:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013f4c:	4a08      	ldr	r2, [pc, #32]	; (8013f70 <create_StepCountMap_queue+0x368>)
 8013f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013f52:	3301      	adds	r3, #1
 8013f54:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8013f58:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8013f5c:	2bfe      	cmp	r3, #254	; 0xfe
 8013f5e:	f67f aebf 	bls.w	8013ce0 <create_StepCountMap_queue+0xd8>

		}

}
 8013f62:	bf00      	nop
 8013f64:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	20000c3c 	.word	0x20000c3c
 8013f70:	20000d2c 	.word	0x20000d2c

08013f74 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8013f74:	b580      	push	{r7, lr}
 8013f76:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013f7a:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013f82:	e00a      	b.n	8013f9a <create_StepCountMapBack_queue+0x26>
 8013f84:	4abd      	ldr	r2, [pc, #756]	; (801427c <create_StepCountMapBack_queue+0x308>)
 8013f86:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f8a:	21ff      	movs	r1, #255	; 0xff
 8013f8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013f90:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f94:	3301      	adds	r3, #1
 8013f96:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013f9a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f9e:	2bff      	cmp	r3, #255	; 0xff
 8013fa0:	ddf0      	ble.n	8013f84 <create_StepCountMapBack_queue+0x10>
	initStack_walk(&stack_x);
 8013fa2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f000 f96c 	bl	8014284 <initStack_walk>
	initStack_walk(&stack_y);
 8013fac:	1d3b      	adds	r3, r7, #4
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f000 f968 	bl	8014284 <initStack_walk>


	walk_count[0] = 0;
 8013fb4:	4bb1      	ldr	r3, [pc, #708]	; (801427c <create_StepCountMapBack_queue+0x308>)
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013fba:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013fbe:	2100      	movs	r1, #0
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f000 f96f 	bl	80142a4 <pushStack_walk>
 8013fc6:	1d3b      	adds	r3, r7, #4
 8013fc8:	2100      	movs	r1, #0
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f000 f96a 	bl	80142a4 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013fdc:	2301      	movs	r3, #1
 8013fde:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013fe8:	2301      	movs	r3, #1
 8013fea:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013fee:	e13b      	b.n	8014268 <create_StepCountMapBack_queue+0x2f4>

		Xcoordinate = popStack_walk(&stack_x);
 8013ff0:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f000 f97f 	bl	80142f8 <popStack_walk>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 8014000:	1d3b      	adds	r3, r7, #4
 8014002:	4618      	mov	r0, r3
 8014004:	f000 f978 	bl	80142f8 <popStack_walk>
 8014008:	4603      	mov	r3, r0
 801400a:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801400e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014016:	4293      	cmp	r3, r2
 8014018:	f000 812b 	beq.w	8014272 <create_StepCountMapBack_queue+0x2fe>
 801401c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014024:	4293      	cmp	r3, r2
 8014026:	f000 8124 	beq.w	8014272 <create_StepCountMapBack_queue+0x2fe>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 801402a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801402e:	011b      	lsls	r3, r3, #4
 8014030:	b29a      	uxth	r2, r3
 8014032:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014036:	4413      	add	r3, r2
 8014038:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 801403c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014040:	2b0e      	cmp	r3, #14
 8014042:	d811      	bhi.n	8014068 <create_StepCountMapBack_queue+0xf4>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014044:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014048:	4a8d      	ldr	r2, [pc, #564]	; (8014280 <create_StepCountMapBack_queue+0x30c>)
 801404a:	330c      	adds	r3, #12
 801404c:	005b      	lsls	r3, r3, #1
 801404e:	4413      	add	r3, r2
 8014050:	88db      	ldrh	r3, [r3, #6]
 8014052:	b21a      	sxth	r2, r3
 8014054:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014058:	2101      	movs	r1, #1
 801405a:	fa01 f303 	lsl.w	r3, r1, r3
 801405e:	b21b      	sxth	r3, r3
 8014060:	4013      	ands	r3, r2
 8014062:	b21b      	sxth	r3, r3
 8014064:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8014068:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801406c:	2b00      	cmp	r3, #0
 801406e:	d012      	beq.n	8014096 <create_StepCountMapBack_queue+0x122>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8014070:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014074:	3b01      	subs	r3, #1
 8014076:	4a82      	ldr	r2, [pc, #520]	; (8014280 <create_StepCountMapBack_queue+0x30c>)
 8014078:	330c      	adds	r3, #12
 801407a:	005b      	lsls	r3, r3, #1
 801407c:	4413      	add	r3, r2
 801407e:	88db      	ldrh	r3, [r3, #6]
 8014080:	b21a      	sxth	r2, r3
 8014082:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014086:	2101      	movs	r1, #1
 8014088:	fa01 f303 	lsl.w	r3, r1, r3
 801408c:	b21b      	sxth	r3, r3
 801408e:	4013      	ands	r3, r2
 8014090:	b21b      	sxth	r3, r3
 8014092:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8014096:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801409a:	2b0e      	cmp	r3, #14
 801409c:	d80f      	bhi.n	80140be <create_StepCountMapBack_queue+0x14a>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 801409e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140a2:	4a77      	ldr	r2, [pc, #476]	; (8014280 <create_StepCountMapBack_queue+0x30c>)
 80140a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140a8:	b21a      	sxth	r2, r3
 80140aa:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80140ae:	2101      	movs	r1, #1
 80140b0:	fa01 f303 	lsl.w	r3, r1, r3
 80140b4:	b21b      	sxth	r3, r3
 80140b6:	4013      	ands	r3, r2
 80140b8:	b21b      	sxth	r3, r3
 80140ba:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 80140be:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d010      	beq.n	80140e8 <create_StepCountMapBack_queue+0x174>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80140c6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140ca:	3b01      	subs	r3, #1
 80140cc:	4a6c      	ldr	r2, [pc, #432]	; (8014280 <create_StepCountMapBack_queue+0x30c>)
 80140ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140d2:	b21a      	sxth	r2, r3
 80140d4:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80140d8:	2101      	movs	r1, #1
 80140da:	fa01 f303 	lsl.w	r3, r1, r3
 80140de:	b21b      	sxth	r3, r3
 80140e0:	4013      	ands	r3, r2
 80140e2:	b21b      	sxth	r3, r3
 80140e4:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 80140e8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80140ec:	3301      	adds	r3, #1
 80140ee:	4a63      	ldr	r2, [pc, #396]	; (801427c <create_StepCountMapBack_queue+0x308>)
 80140f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140f4:	2bff      	cmp	r3, #255	; 0xff
 80140f6:	d125      	bne.n	8014144 <create_StepCountMapBack_queue+0x1d0>
 80140f8:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80140fc:	2b0f      	cmp	r3, #15
 80140fe:	d021      	beq.n	8014144 <create_StepCountMapBack_queue+0x1d0>
 8014100:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8014104:	2b00      	cmp	r3, #0
 8014106:	d11d      	bne.n	8014144 <create_StepCountMapBack_queue+0x1d0>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8014108:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801410c:	4a5b      	ldr	r2, [pc, #364]	; (801427c <create_StepCountMapBack_queue+0x308>)
 801410e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014112:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014116:	3301      	adds	r3, #1
 8014118:	3201      	adds	r2, #1
 801411a:	b291      	uxth	r1, r2
 801411c:	4a57      	ldr	r2, [pc, #348]	; (801427c <create_StepCountMapBack_queue+0x308>)
 801411e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014122:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8014126:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801412a:	4611      	mov	r1, r2
 801412c:	4618      	mov	r0, r3
 801412e:	f000 f8b9 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014132:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014136:	3301      	adds	r3, #1
 8014138:	b29a      	uxth	r2, r3
 801413a:	1d3b      	adds	r3, r7, #4
 801413c:	4611      	mov	r1, r2
 801413e:	4618      	mov	r0, r3
 8014140:	f000 f8b0 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014144:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014148:	3b01      	subs	r3, #1
 801414a:	4a4c      	ldr	r2, [pc, #304]	; (801427c <create_StepCountMapBack_queue+0x308>)
 801414c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014150:	2bff      	cmp	r3, #255	; 0xff
 8014152:	d125      	bne.n	80141a0 <create_StepCountMapBack_queue+0x22c>
 8014154:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014158:	2b00      	cmp	r3, #0
 801415a:	d021      	beq.n	80141a0 <create_StepCountMapBack_queue+0x22c>
 801415c:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8014160:	2b00      	cmp	r3, #0
 8014162:	d11d      	bne.n	80141a0 <create_StepCountMapBack_queue+0x22c>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8014164:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014168:	4a44      	ldr	r2, [pc, #272]	; (801427c <create_StepCountMapBack_queue+0x308>)
 801416a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801416e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014172:	3b01      	subs	r3, #1
 8014174:	3201      	adds	r2, #1
 8014176:	b291      	uxth	r1, r2
 8014178:	4a40      	ldr	r2, [pc, #256]	; (801427c <create_StepCountMapBack_queue+0x308>)
 801417a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801417e:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8014182:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014186:	4611      	mov	r1, r2
 8014188:	4618      	mov	r0, r3
 801418a:	f000 f88b 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 801418e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014192:	3b01      	subs	r3, #1
 8014194:	b29a      	uxth	r2, r3
 8014196:	1d3b      	adds	r3, r7, #4
 8014198:	4611      	mov	r1, r2
 801419a:	4618      	mov	r0, r3
 801419c:	f000 f882 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80141a0:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141a4:	3310      	adds	r3, #16
 80141a6:	4a35      	ldr	r2, [pc, #212]	; (801427c <create_StepCountMapBack_queue+0x308>)
 80141a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141ac:	2bff      	cmp	r3, #255	; 0xff
 80141ae:	d125      	bne.n	80141fc <create_StepCountMapBack_queue+0x288>
 80141b0:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141b4:	2b0f      	cmp	r3, #15
 80141b6:	d021      	beq.n	80141fc <create_StepCountMapBack_queue+0x288>
 80141b8:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d11d      	bne.n	80141fc <create_StepCountMapBack_queue+0x288>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 80141c0:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141c4:	4a2d      	ldr	r2, [pc, #180]	; (801427c <create_StepCountMapBack_queue+0x308>)
 80141c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80141ca:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141ce:	3310      	adds	r3, #16
 80141d0:	3201      	adds	r2, #1
 80141d2:	b291      	uxth	r1, r2
 80141d4:	4a29      	ldr	r2, [pc, #164]	; (801427c <create_StepCountMapBack_queue+0x308>)
 80141d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80141da:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141de:	3301      	adds	r3, #1
 80141e0:	b29a      	uxth	r2, r3
 80141e2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80141e6:	4611      	mov	r1, r2
 80141e8:	4618      	mov	r0, r3
 80141ea:	f000 f85b 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80141ee:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 80141f2:	1d3b      	adds	r3, r7, #4
 80141f4:	4611      	mov	r1, r2
 80141f6:	4618      	mov	r0, r3
 80141f8:	f000 f854 	bl	80142a4 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 80141fc:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014200:	3b10      	subs	r3, #16
 8014202:	4a1e      	ldr	r2, [pc, #120]	; (801427c <create_StepCountMapBack_queue+0x308>)
 8014204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014208:	2bff      	cmp	r3, #255	; 0xff
 801420a:	d125      	bne.n	8014258 <create_StepCountMapBack_queue+0x2e4>
 801420c:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014210:	2b00      	cmp	r3, #0
 8014212:	d021      	beq.n	8014258 <create_StepCountMapBack_queue+0x2e4>
 8014214:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8014218:	2b00      	cmp	r3, #0
 801421a:	d11d      	bne.n	8014258 <create_StepCountMapBack_queue+0x2e4>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 801421c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014220:	4a16      	ldr	r2, [pc, #88]	; (801427c <create_StepCountMapBack_queue+0x308>)
 8014222:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014226:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801422a:	3b10      	subs	r3, #16
 801422c:	3201      	adds	r2, #1
 801422e:	b291      	uxth	r1, r2
 8014230:	4a12      	ldr	r2, [pc, #72]	; (801427c <create_StepCountMapBack_queue+0x308>)
 8014232:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014236:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801423a:	3b01      	subs	r3, #1
 801423c:	b29a      	uxth	r2, r3
 801423e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014242:	4611      	mov	r1, r2
 8014244:	4618      	mov	r0, r3
 8014246:	f000 f82d 	bl	80142a4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801424a:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 801424e:	1d3b      	adds	r3, r7, #4
 8014250:	4611      	mov	r1, r2
 8014252:	4618      	mov	r0, r3
 8014254:	f000 f826 	bl	80142a4 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8014258:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801425c:	4a07      	ldr	r2, [pc, #28]	; (801427c <create_StepCountMapBack_queue+0x308>)
 801425e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014262:	3301      	adds	r3, #1
 8014264:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8014268:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 801426c:	2bfe      	cmp	r3, #254	; 0xfe
 801426e:	f67f aebf 	bls.w	8013ff0 <create_StepCountMapBack_queue+0x7c>

		}

}
 8014272:	bf00      	nop
 8014274:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	20000d2c 	.word	0x20000d2c
 8014280:	20000c3c 	.word	0x20000c3c

08014284 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2200      	movs	r2, #0
 8014290:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2200      	movs	r2, #0
 8014296:	605a      	str	r2, [r3, #4]
}
 8014298:	bf00      	nop
 801429a:	370c      	adds	r7, #12
 801429c:	46bd      	mov	sp, r7
 801429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a2:	4770      	bx	lr

080142a4 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	460b      	mov	r3, r1
 80142ae:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	685a      	ldr	r2, [r3, #4]
 80142b4:	8879      	ldrh	r1, [r7, #2]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	3202      	adds	r2, #2
 80142ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	1c5a      	adds	r2, r3, #1
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80142d0:	d102      	bne.n	80142d8 <pushStack_walk+0x34>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2200      	movs	r2, #0
 80142d6:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	685a      	ldr	r2, [r3, #4]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d103      	bne.n	80142ec <pushStack_walk+0x48>
    	printf("stack_full\n");
 80142e4:	4803      	ldr	r0, [pc, #12]	; (80142f4 <pushStack_walk+0x50>)
 80142e6:	f00b fab5 	bl	801f854 <puts>
        return;
 80142ea:	bf00      	nop
    }
}
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	08021f6c 	.word	0x08021f6c

080142f8 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 80142f8:	b480      	push	{r7}
 80142fa:	b085      	sub	sp, #20
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014300:	2300      	movs	r3, #0
 8014302:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	685a      	ldr	r2, [r3, #4]
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	429a      	cmp	r2, r3
 801430e:	d102      	bne.n	8014316 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014314:	e014      	b.n	8014340 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	3202      	adds	r2, #2
 801431e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014322:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	1c5a      	adds	r2, r3, #1
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8014336:	d102      	bne.n	801433e <popStack_walk+0x46>
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2200      	movs	r2, #0
 801433c:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 801433e:	89fb      	ldrh	r3, [r7, #14]
}
 8014340:	4618      	mov	r0, r3
 8014342:	3714      	adds	r7, #20
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 801434c:	b580      	push	{r7, lr}
 801434e:	b082      	sub	sp, #8
 8014350:	af00      	add	r7, sp, #0

	int tt = 14;
 8014352:	230e      	movs	r3, #14
 8014354:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014356:	2300      	movs	r3, #0
 8014358:	603b      	str	r3, [r7, #0]

	printf(
 801435a:	4881      	ldr	r0, [pc, #516]	; (8014560 <maze_display+0x214>)
 801435c:	f00b fa7a 	bl	801f854 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014360:	230e      	movs	r3, #14
 8014362:	607b      	str	r3, [r7, #4]
 8014364:	e06e      	b.n	8014444 <maze_display+0xf8>

		printf("|%5d", walk_count[tt + 1]);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	3301      	adds	r3, #1
 801436a:	4a7e      	ldr	r2, [pc, #504]	; (8014564 <maze_display+0x218>)
 801436c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014370:	4619      	mov	r1, r3
 8014372:	487d      	ldr	r0, [pc, #500]	; (8014568 <maze_display+0x21c>)
 8014374:	f00b f9d2 	bl	801f71c <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014378:	2300      	movs	r3, #0
 801437a:	603b      	str	r3, [r7, #0]
 801437c:	e030      	b.n	80143e0 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801437e:	4a7b      	ldr	r2, [pc, #492]	; (801456c <maze_display+0x220>)
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014386:	4619      	mov	r1, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	3301      	adds	r3, #1
 801438c:	2201      	movs	r2, #1
 801438e:	fa02 f303 	lsl.w	r3, r2, r3
 8014392:	ea01 0203 	and.w	r2, r1, r3
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	3301      	adds	r3, #1
 801439a:	2101      	movs	r1, #1
 801439c:	fa01 f303 	lsl.w	r3, r1, r3
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d10d      	bne.n	80143c0 <maze_display+0x74>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	1c5a      	adds	r2, r3, #1
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	3301      	adds	r3, #1
 80143ac:	011b      	lsls	r3, r3, #4
 80143ae:	4413      	add	r3, r2
 80143b0:	4a6c      	ldr	r2, [pc, #432]	; (8014564 <maze_display+0x218>)
 80143b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143b6:	4619      	mov	r1, r3
 80143b8:	486b      	ldr	r0, [pc, #428]	; (8014568 <maze_display+0x21c>)
 80143ba:	f00b f9af 	bl	801f71c <iprintf>
 80143be:	e00c      	b.n	80143da <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	1c5a      	adds	r2, r3, #1
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	3301      	adds	r3, #1
 80143c8:	011b      	lsls	r3, r3, #4
 80143ca:	4413      	add	r3, r2
 80143cc:	4a65      	ldr	r2, [pc, #404]	; (8014564 <maze_display+0x218>)
 80143ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143d2:	4619      	mov	r1, r3
 80143d4:	4866      	ldr	r0, [pc, #408]	; (8014570 <maze_display+0x224>)
 80143d6:	f00b f9a1 	bl	801f71c <iprintf>
		for(ss = 0;ss < 15;ss++){
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	3301      	adds	r3, #1
 80143de:	603b      	str	r3, [r7, #0]
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	2b0e      	cmp	r3, #14
 80143e4:	ddcb      	ble.n	801437e <maze_display+0x32>
			}
		}
		printf("|\n");
 80143e6:	4863      	ldr	r0, [pc, #396]	; (8014574 <maze_display+0x228>)
 80143e8:	f00b fa34 	bl	801f854 <puts>
		if (tt <= -1) {
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	db2d      	blt.n	801444e <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80143f2:	2300      	movs	r3, #0
 80143f4:	603b      	str	r3, [r7, #0]
 80143f6:	e01c      	b.n	8014432 <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 80143f8:	4a5c      	ldr	r2, [pc, #368]	; (801456c <maze_display+0x220>)
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	330c      	adds	r3, #12
 80143fe:	005b      	lsls	r3, r3, #1
 8014400:	4413      	add	r3, r2
 8014402:	88db      	ldrh	r3, [r3, #6]
 8014404:	4619      	mov	r1, r3
 8014406:	2201      	movs	r2, #1
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	fa02 f303 	lsl.w	r3, r2, r3
 801440e:	ea01 0203 	and.w	r2, r1, r3
 8014412:	2101      	movs	r1, #1
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	fa01 f303 	lsl.w	r3, r1, r3
 801441a:	429a      	cmp	r2, r3
 801441c:	d103      	bne.n	8014426 <maze_display+0xda>
				printf("+-----");
 801441e:	4856      	ldr	r0, [pc, #344]	; (8014578 <maze_display+0x22c>)
 8014420:	f00b f97c 	bl	801f71c <iprintf>
 8014424:	e002      	b.n	801442c <maze_display+0xe0>
			}else{
				printf("+     ");
 8014426:	4855      	ldr	r0, [pc, #340]	; (801457c <maze_display+0x230>)
 8014428:	f00b f978 	bl	801f71c <iprintf>
		for(ss = 0;ss <= 15;ss++){
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	3301      	adds	r3, #1
 8014430:	603b      	str	r3, [r7, #0]
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	2b0f      	cmp	r3, #15
 8014436:	dddf      	ble.n	80143f8 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014438:	4851      	ldr	r0, [pc, #324]	; (8014580 <maze_display+0x234>)
 801443a:	f00b fa0b 	bl	801f854 <puts>
	for (tt = 14;tt >= -1;tt--){
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	3b01      	subs	r3, #1
 8014442:	607b      	str	r3, [r7, #4]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801444a:	da8c      	bge.n	8014366 <maze_display+0x1a>
 801444c:	e000      	b.n	8014450 <maze_display+0x104>
			break;
 801444e:	bf00      	nop

	}

	printf(
 8014450:	484c      	ldr	r0, [pc, #304]	; (8014584 <maze_display+0x238>)
 8014452:	f00b f9ff 	bl	801f854 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014456:	4842      	ldr	r0, [pc, #264]	; (8014560 <maze_display+0x214>)
 8014458:	f00b f9fc 	bl	801f854 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 801445c:	230e      	movs	r3, #14
 801445e:	607b      	str	r3, [r7, #4]
 8014460:	e070      	b.n	8014544 <maze_display+0x1f8>
		printf("|%5d", walk_count[tt + 1]);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	3301      	adds	r3, #1
 8014466:	4a3f      	ldr	r2, [pc, #252]	; (8014564 <maze_display+0x218>)
 8014468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801446c:	4619      	mov	r1, r3
 801446e:	483e      	ldr	r0, [pc, #248]	; (8014568 <maze_display+0x21c>)
 8014470:	f00b f954 	bl	801f71c <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014474:	2300      	movs	r3, #0
 8014476:	603b      	str	r3, [r7, #0]
 8014478:	e032      	b.n	80144e0 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801447a:	4a3c      	ldr	r2, [pc, #240]	; (801456c <maze_display+0x220>)
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	331c      	adds	r3, #28
 8014480:	005b      	lsls	r3, r3, #1
 8014482:	4413      	add	r3, r2
 8014484:	889b      	ldrh	r3, [r3, #4]
 8014486:	4619      	mov	r1, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	3301      	adds	r3, #1
 801448c:	2201      	movs	r2, #1
 801448e:	fa02 f303 	lsl.w	r3, r2, r3
 8014492:	ea01 0203 	and.w	r2, r1, r3
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	3301      	adds	r3, #1
 801449a:	2101      	movs	r1, #1
 801449c:	fa01 f303 	lsl.w	r3, r1, r3
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d10d      	bne.n	80144c0 <maze_display+0x174>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	1c5a      	adds	r2, r3, #1
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	3301      	adds	r3, #1
 80144ac:	011b      	lsls	r3, r3, #4
 80144ae:	4413      	add	r3, r2
 80144b0:	4a2c      	ldr	r2, [pc, #176]	; (8014564 <maze_display+0x218>)
 80144b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144b6:	4619      	mov	r1, r3
 80144b8:	482b      	ldr	r0, [pc, #172]	; (8014568 <maze_display+0x21c>)
 80144ba:	f00b f92f 	bl	801f71c <iprintf>
 80144be:	e00c      	b.n	80144da <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	1c5a      	adds	r2, r3, #1
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	3301      	adds	r3, #1
 80144c8:	011b      	lsls	r3, r3, #4
 80144ca:	4413      	add	r3, r2
 80144cc:	4a25      	ldr	r2, [pc, #148]	; (8014564 <maze_display+0x218>)
 80144ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144d2:	4619      	mov	r1, r3
 80144d4:	4826      	ldr	r0, [pc, #152]	; (8014570 <maze_display+0x224>)
 80144d6:	f00b f921 	bl	801f71c <iprintf>
		for(ss = 0;ss < 15;ss++){
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	3301      	adds	r3, #1
 80144de:	603b      	str	r3, [r7, #0]
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	2b0e      	cmp	r3, #14
 80144e4:	ddc9      	ble.n	801447a <maze_display+0x12e>
			}
		}
		printf("|\n");
 80144e6:	4823      	ldr	r0, [pc, #140]	; (8014574 <maze_display+0x228>)
 80144e8:	f00b f9b4 	bl	801f854 <puts>
		if (tt <= -1) {
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	db2d      	blt.n	801454e <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80144f2:	2300      	movs	r3, #0
 80144f4:	603b      	str	r3, [r7, #0]
 80144f6:	e01c      	b.n	8014532 <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 80144f8:	4a1c      	ldr	r2, [pc, #112]	; (801456c <maze_display+0x220>)
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	332c      	adds	r3, #44	; 0x2c
 80144fe:	005b      	lsls	r3, r3, #1
 8014500:	4413      	add	r3, r2
 8014502:	885b      	ldrh	r3, [r3, #2]
 8014504:	4619      	mov	r1, r3
 8014506:	2201      	movs	r2, #1
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	fa02 f303 	lsl.w	r3, r2, r3
 801450e:	ea01 0203 	and.w	r2, r1, r3
 8014512:	2101      	movs	r1, #1
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	fa01 f303 	lsl.w	r3, r1, r3
 801451a:	429a      	cmp	r2, r3
 801451c:	d103      	bne.n	8014526 <maze_display+0x1da>
				printf("+-----");
 801451e:	4816      	ldr	r0, [pc, #88]	; (8014578 <maze_display+0x22c>)
 8014520:	f00b f8fc 	bl	801f71c <iprintf>
 8014524:	e002      	b.n	801452c <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014526:	4815      	ldr	r0, [pc, #84]	; (801457c <maze_display+0x230>)
 8014528:	f00b f8f8 	bl	801f71c <iprintf>
		for(ss = 0;ss <= 15;ss++){
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	3301      	adds	r3, #1
 8014530:	603b      	str	r3, [r7, #0]
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	2b0f      	cmp	r3, #15
 8014536:	dddf      	ble.n	80144f8 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8014538:	4811      	ldr	r0, [pc, #68]	; (8014580 <maze_display+0x234>)
 801453a:	f00b f98b 	bl	801f854 <puts>
	for (tt = 14;tt >= -1;tt--){
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	3b01      	subs	r3, #1
 8014542:	607b      	str	r3, [r7, #4]
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801454a:	da8a      	bge.n	8014462 <maze_display+0x116>
 801454c:	e000      	b.n	8014550 <maze_display+0x204>
			break;
 801454e:	bf00      	nop
	}

	printf(
 8014550:	480c      	ldr	r0, [pc, #48]	; (8014584 <maze_display+0x238>)
 8014552:	f00b f97f 	bl	801f854 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8014556:	bf00      	nop
 8014558:	3708      	adds	r7, #8
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	08021f78 	.word	0x08021f78
 8014564:	20000d2c 	.word	0x20000d2c
 8014568:	08021fdc 	.word	0x08021fdc
 801456c:	20000c3c 	.word	0x20000c3c
 8014570:	08021fe4 	.word	0x08021fe4
 8014574:	08021fec 	.word	0x08021fec
 8014578:	08021ff0 	.word	0x08021ff0
 801457c:	08021ff8 	.word	0x08021ff8
 8014580:	08022000 	.word	0x08022000
 8014584:	08022004 	.word	0x08022004

08014588 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0

	int tt = 14;
 801458e:	230e      	movs	r3, #14
 8014590:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014592:	2300      	movs	r3, #0
 8014594:	603b      	str	r3, [r7, #0]

	printf(
 8014596:	4865      	ldr	r0, [pc, #404]	; (801472c <maze_display_Dijkstra+0x1a4>)
 8014598:	f00b f95c 	bl	801f854 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 801459c:	230e      	movs	r3, #14
 801459e:	607b      	str	r3, [r7, #4]
 80145a0:	e06a      	b.n	8014678 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 80145a2:	4863      	ldr	r0, [pc, #396]	; (8014730 <maze_display_Dijkstra+0x1a8>)
 80145a4:	f00b f8ba 	bl	801f71c <iprintf>
		for(ss = 0;ss < 15;ss++){
 80145a8:	2300      	movs	r3, #0
 80145aa:	603b      	str	r3, [r7, #0]
 80145ac:	e027      	b.n	80145fe <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80145ae:	4a61      	ldr	r2, [pc, #388]	; (8014734 <maze_display_Dijkstra+0x1ac>)
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145b6:	4619      	mov	r1, r3
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	3301      	adds	r3, #1
 80145bc:	2201      	movs	r2, #1
 80145be:	fa02 f303 	lsl.w	r3, r2, r3
 80145c2:	ea01 0203 	and.w	r2, r1, r3
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	3301      	adds	r3, #1
 80145ca:	2101      	movs	r1, #1
 80145cc:	fa01 f303 	lsl.w	r3, r1, r3
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d103      	bne.n	80145dc <maze_display_Dijkstra+0x54>
				printf("  |   ");
 80145d4:	4858      	ldr	r0, [pc, #352]	; (8014738 <maze_display_Dijkstra+0x1b0>)
 80145d6:	f00b f8a1 	bl	801f71c <iprintf>
 80145da:	e00d      	b.n	80145f8 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	1c5a      	adds	r2, r3, #1
 80145e0:	4956      	ldr	r1, [pc, #344]	; (801473c <maze_display_Dijkstra+0x1b4>)
 80145e2:	4613      	mov	r3, r2
 80145e4:	011b      	lsls	r3, r3, #4
 80145e6:	1a9b      	subs	r3, r3, r2
 80145e8:	683a      	ldr	r2, [r7, #0]
 80145ea:	4413      	add	r3, r2
 80145ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80145f0:	4619      	mov	r1, r3
 80145f2:	4853      	ldr	r0, [pc, #332]	; (8014740 <maze_display_Dijkstra+0x1b8>)
 80145f4:	f00b f892 	bl	801f71c <iprintf>
		for(ss = 0;ss < 15;ss++){
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	3301      	adds	r3, #1
 80145fc:	603b      	str	r3, [r7, #0]
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	2b0e      	cmp	r3, #14
 8014602:	ddd4      	ble.n	80145ae <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8014604:	484f      	ldr	r0, [pc, #316]	; (8014744 <maze_display_Dijkstra+0x1bc>)
 8014606:	f00b f925 	bl	801f854 <puts>
		if (tt <= -1) {
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2b00      	cmp	r3, #0
 801460e:	db38      	blt.n	8014682 <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014610:	2300      	movs	r3, #0
 8014612:	603b      	str	r3, [r7, #0]
 8014614:	e027      	b.n	8014666 <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014616:	4a47      	ldr	r2, [pc, #284]	; (8014734 <maze_display_Dijkstra+0x1ac>)
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	330c      	adds	r3, #12
 801461c:	005b      	lsls	r3, r3, #1
 801461e:	4413      	add	r3, r2
 8014620:	88db      	ldrh	r3, [r3, #6]
 8014622:	4619      	mov	r1, r3
 8014624:	2201      	movs	r2, #1
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	fa02 f303 	lsl.w	r3, r2, r3
 801462c:	ea01 0203 	and.w	r2, r1, r3
 8014630:	2101      	movs	r1, #1
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	fa01 f303 	lsl.w	r3, r1, r3
 8014638:	429a      	cmp	r2, r3
 801463a:	d103      	bne.n	8014644 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 801463c:	4842      	ldr	r0, [pc, #264]	; (8014748 <maze_display_Dijkstra+0x1c0>)
 801463e:	f00b f86d 	bl	801f71c <iprintf>
 8014642:	e00d      	b.n	8014660 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014644:	493d      	ldr	r1, [pc, #244]	; (801473c <maze_display_Dijkstra+0x1b4>)
 8014646:	683a      	ldr	r2, [r7, #0]
 8014648:	4613      	mov	r3, r2
 801464a:	011b      	lsls	r3, r3, #4
 801464c:	1a9b      	subs	r3, r3, r2
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	4413      	add	r3, r2
 8014652:	33f0      	adds	r3, #240	; 0xf0
 8014654:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014658:	4619      	mov	r1, r3
 801465a:	483c      	ldr	r0, [pc, #240]	; (801474c <maze_display_Dijkstra+0x1c4>)
 801465c:	f00b f85e 	bl	801f71c <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	3301      	adds	r3, #1
 8014664:	603b      	str	r3, [r7, #0]
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	2b0f      	cmp	r3, #15
 801466a:	ddd4      	ble.n	8014616 <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 801466c:	4838      	ldr	r0, [pc, #224]	; (8014750 <maze_display_Dijkstra+0x1c8>)
 801466e:	f00b f8f1 	bl	801f854 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	3b01      	subs	r3, #1
 8014676:	607b      	str	r3, [r7, #4]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467e:	da90      	bge.n	80145a2 <maze_display_Dijkstra+0x1a>
 8014680:	e000      	b.n	8014684 <maze_display_Dijkstra+0xfc>
			break;
 8014682:	bf00      	nop

	}

	printf(
 8014684:	4833      	ldr	r0, [pc, #204]	; (8014754 <maze_display_Dijkstra+0x1cc>)
 8014686:	f00b f8e5 	bl	801f854 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 801468a:	4828      	ldr	r0, [pc, #160]	; (801472c <maze_display_Dijkstra+0x1a4>)
 801468c:	f00b f8e2 	bl	801f854 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014690:	230e      	movs	r3, #14
 8014692:	607b      	str	r3, [r7, #4]
 8014694:	e03c      	b.n	8014710 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 8014696:	4826      	ldr	r0, [pc, #152]	; (8014730 <maze_display_Dijkstra+0x1a8>)
 8014698:	f00b f840 	bl	801f71c <iprintf>
		for(ss = 0;ss < 15;ss++){
 801469c:	2300      	movs	r3, #0
 801469e:	603b      	str	r3, [r7, #0]
 80146a0:	e010      	b.n	80146c4 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	1c5a      	adds	r2, r3, #1
 80146a6:	4925      	ldr	r1, [pc, #148]	; (801473c <maze_display_Dijkstra+0x1b4>)
 80146a8:	4613      	mov	r3, r2
 80146aa:	011b      	lsls	r3, r3, #4
 80146ac:	1a9b      	subs	r3, r3, r2
 80146ae:	683a      	ldr	r2, [r7, #0]
 80146b0:	4413      	add	r3, r2
 80146b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146b6:	4619      	mov	r1, r3
 80146b8:	4821      	ldr	r0, [pc, #132]	; (8014740 <maze_display_Dijkstra+0x1b8>)
 80146ba:	f00b f82f 	bl	801f71c <iprintf>
		for(ss = 0;ss < 15;ss++){
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	3301      	adds	r3, #1
 80146c2:	603b      	str	r3, [r7, #0]
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	2b0e      	cmp	r3, #14
 80146c8:	ddeb      	ble.n	80146a2 <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 80146ca:	481e      	ldr	r0, [pc, #120]	; (8014744 <maze_display_Dijkstra+0x1bc>)
 80146cc:	f00b f8c2 	bl	801f854 <puts>
		if (tt <= -1) {
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	db21      	blt.n	801471a <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80146d6:	2300      	movs	r3, #0
 80146d8:	603b      	str	r3, [r7, #0]
 80146da:	e010      	b.n	80146fe <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 80146dc:	4917      	ldr	r1, [pc, #92]	; (801473c <maze_display_Dijkstra+0x1b4>)
 80146de:	683a      	ldr	r2, [r7, #0]
 80146e0:	4613      	mov	r3, r2
 80146e2:	011b      	lsls	r3, r3, #4
 80146e4:	1a9b      	subs	r3, r3, r2
 80146e6:	687a      	ldr	r2, [r7, #4]
 80146e8:	4413      	add	r3, r2
 80146ea:	33f0      	adds	r3, #240	; 0xf0
 80146ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146f0:	4619      	mov	r1, r3
 80146f2:	4816      	ldr	r0, [pc, #88]	; (801474c <maze_display_Dijkstra+0x1c4>)
 80146f4:	f00b f812 	bl	801f71c <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	3301      	adds	r3, #1
 80146fc:	603b      	str	r3, [r7, #0]
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	2b0f      	cmp	r3, #15
 8014702:	ddeb      	ble.n	80146dc <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 8014704:	4812      	ldr	r0, [pc, #72]	; (8014750 <maze_display_Dijkstra+0x1c8>)
 8014706:	f00b f8a5 	bl	801f854 <puts>
	for (tt = 14;tt >= -1;tt--){
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	3b01      	subs	r3, #1
 801470e:	607b      	str	r3, [r7, #4]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014716:	dabe      	bge.n	8014696 <maze_display_Dijkstra+0x10e>
 8014718:	e000      	b.n	801471c <maze_display_Dijkstra+0x194>
			break;
 801471a:	bf00      	nop

	}

	printf(
 801471c:	480d      	ldr	r0, [pc, #52]	; (8014754 <maze_display_Dijkstra+0x1cc>)
 801471e:	f00b f899 	bl	801f854 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 8014722:	bf00      	nop
 8014724:	3708      	adds	r7, #8
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	08021f78 	.word	0x08021f78
 8014730:	08022068 	.word	0x08022068
 8014734:	20000c3c 	.word	0x20000c3c
 8014738:	08022070 	.word	0x08022070
 801473c:	20000f2c 	.word	0x20000f2c
 8014740:	08022078 	.word	0x08022078
 8014744:	08022080 	.word	0x08022080
 8014748:	08021ff0 	.word	0x08021ff0
 801474c:	08022088 	.word	0x08022088
 8014750:	08022000 	.word	0x08022000
 8014754:	08022004 	.word	0x08022004

08014758 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8014758:	b580      	push	{r7, lr}
 801475a:	b084      	sub	sp, #16
 801475c:	af00      	add	r7, sp, #0
 801475e:	4603      	mov	r3, r0
 8014760:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014762:	2300      	movs	r3, #0
 8014764:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014766:	2300      	movs	r3, #0
 8014768:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 801476a:	2300      	movs	r3, #0
 801476c:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 801476e:	4b71      	ldr	r3, [pc, #452]	; (8014934 <mode_decision+0x1dc>)
 8014770:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8014772:	79fb      	ldrb	r3, [r7, #7]
 8014774:	f003 030f 	and.w	r3, r3, #15
 8014778:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 801477a:	79fb      	ldrb	r3, [r7, #7]
 801477c:	091b      	lsrs	r3, r3, #4
 801477e:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014780:	7bbb      	ldrb	r3, [r7, #14]
 8014782:	011b      	lsls	r3, r3, #4
 8014784:	b2da      	uxtb	r2, r3
 8014786:	7bfb      	ldrb	r3, [r7, #15]
 8014788:	4413      	add	r3, r2
 801478a:	b2db      	uxtb	r3, r3
 801478c:	4618      	mov	r0, r3
 801478e:	f7f2 fbb1 	bl	8006ef4 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8014792:	e07f      	b.n	8014894 <mode_decision+0x13c>
				HAL_Delay(1);
 8014794:	2001      	movs	r0, #1
 8014796:	f003 f86f 	bl	8017878 <HAL_Delay>
				if (E_distanceR >= dis8) {
 801479a:	4b67      	ldr	r3, [pc, #412]	; (8014938 <mode_decision+0x1e0>)
 801479c:	edd3 7a00 	vldr	s15, [r3]
 80147a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80147a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ac:	d813      	bhi.n	80147d6 <mode_decision+0x7e>
					if (main_modeR == 15) {
 80147ae:	7bfb      	ldrb	r3, [r7, #15]
 80147b0:	2b0f      	cmp	r3, #15
 80147b2:	d102      	bne.n	80147ba <mode_decision+0x62>
						main_modeR = 0;
 80147b4:	2300      	movs	r3, #0
 80147b6:	73fb      	strb	r3, [r7, #15]
 80147b8:	e002      	b.n	80147c0 <mode_decision+0x68>
					} else {
						main_modeR++;
 80147ba:	7bfb      	ldrb	r3, [r7, #15]
 80147bc:	3301      	adds	r3, #1
 80147be:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 80147c0:	f7ec fbec 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80147c4:	7bbb      	ldrb	r3, [r7, #14]
 80147c6:	011b      	lsls	r3, r3, #4
 80147c8:	b2da      	uxtb	r2, r3
 80147ca:	7bfb      	ldrb	r3, [r7, #15]
 80147cc:	4413      	add	r3, r2
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7f2 fb8f 	bl	8006ef4 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 80147d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80147da:	eeb1 7a67 	vneg.f32	s14, s15
 80147de:	4b56      	ldr	r3, [pc, #344]	; (8014938 <mode_decision+0x1e0>)
 80147e0:	edd3 7a00 	vldr	s15, [r3]
 80147e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ec:	db13      	blt.n	8014816 <mode_decision+0xbe>
					if (main_modeR == 0) {
 80147ee:	7bfb      	ldrb	r3, [r7, #15]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d102      	bne.n	80147fa <mode_decision+0xa2>
						main_modeR = 15;
 80147f4:	230f      	movs	r3, #15
 80147f6:	73fb      	strb	r3, [r7, #15]
 80147f8:	e002      	b.n	8014800 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 80147fa:	7bfb      	ldrb	r3, [r7, #15]
 80147fc:	3b01      	subs	r3, #1
 80147fe:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014800:	f7ec fbcc 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014804:	7bbb      	ldrb	r3, [r7, #14]
 8014806:	011b      	lsls	r3, r3, #4
 8014808:	b2da      	uxtb	r2, r3
 801480a:	7bfb      	ldrb	r3, [r7, #15]
 801480c:	4413      	add	r3, r2
 801480e:	b2db      	uxtb	r3, r3
 8014810:	4618      	mov	r0, r3
 8014812:	f7f2 fb6f 	bl	8006ef4 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8014816:	4b49      	ldr	r3, [pc, #292]	; (801493c <mode_decision+0x1e4>)
 8014818:	edd3 7a00 	vldr	s15, [r3]
 801481c:	ed97 7a02 	vldr	s14, [r7, #8]
 8014820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014828:	d813      	bhi.n	8014852 <mode_decision+0xfa>
					if (main_modeL == 15) {
 801482a:	7bbb      	ldrb	r3, [r7, #14]
 801482c:	2b0f      	cmp	r3, #15
 801482e:	d102      	bne.n	8014836 <mode_decision+0xde>
						main_modeL = 0;
 8014830:	2300      	movs	r3, #0
 8014832:	73bb      	strb	r3, [r7, #14]
 8014834:	e002      	b.n	801483c <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8014836:	7bbb      	ldrb	r3, [r7, #14]
 8014838:	3301      	adds	r3, #1
 801483a:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 801483c:	f7ec fbae 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014840:	7bbb      	ldrb	r3, [r7, #14]
 8014842:	011b      	lsls	r3, r3, #4
 8014844:	b2da      	uxtb	r2, r3
 8014846:	7bfb      	ldrb	r3, [r7, #15]
 8014848:	4413      	add	r3, r2
 801484a:	b2db      	uxtb	r3, r3
 801484c:	4618      	mov	r0, r3
 801484e:	f7f2 fb51 	bl	8006ef4 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8014852:	edd7 7a02 	vldr	s15, [r7, #8]
 8014856:	eeb1 7a67 	vneg.f32	s14, s15
 801485a:	4b38      	ldr	r3, [pc, #224]	; (801493c <mode_decision+0x1e4>)
 801485c:	edd3 7a00 	vldr	s15, [r3]
 8014860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014868:	da00      	bge.n	801486c <mode_decision+0x114>
 801486a:	e013      	b.n	8014894 <mode_decision+0x13c>
					if (main_modeL == 0) {
 801486c:	7bbb      	ldrb	r3, [r7, #14]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d102      	bne.n	8014878 <mode_decision+0x120>
						main_modeL = 15;
 8014872:	230f      	movs	r3, #15
 8014874:	73bb      	strb	r3, [r7, #14]
 8014876:	e002      	b.n	801487e <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8014878:	7bbb      	ldrb	r3, [r7, #14]
 801487a:	3b01      	subs	r3, #1
 801487c:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 801487e:	f7ec fb8d 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014882:	7bbb      	ldrb	r3, [r7, #14]
 8014884:	011b      	lsls	r3, r3, #4
 8014886:	b2da      	uxtb	r2, r3
 8014888:	7bfb      	ldrb	r3, [r7, #15]
 801488a:	4413      	add	r3, r2
 801488c:	b2db      	uxtb	r3, r3
 801488e:	4618      	mov	r0, r3
 8014890:	f7f2 fb30 	bl	8006ef4 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8014894:	4b2a      	ldr	r3, [pc, #168]	; (8014940 <mode_decision+0x1e8>)
 8014896:	edd3 7a00 	vldr	s15, [r3]
 801489a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8014944 <mode_decision+0x1ec>
 801489e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a6:	f67f af75 	bls.w	8014794 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 80148aa:	f7f2 fae9 	bl	8006e80 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 80148ae:	2001      	movs	r0, #1
 80148b0:	f7f2 fbd0 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80148b4:	2001      	movs	r0, #1
 80148b6:	f7f2 fbdf 	bl	8007078 <pl_l_blue_LED>
			HAL_Delay(1000);
 80148ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80148be:	f002 ffdb 	bl	8017878 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 80148c2:	e011      	b.n	80148e8 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 80148c4:	4b1e      	ldr	r3, [pc, #120]	; (8014940 <mode_decision+0x1e8>)
 80148c6:	edd3 7a00 	vldr	s15, [r3]
 80148ca:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8014944 <mode_decision+0x1ec>
 80148ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d6:	db04      	blt.n	80148e2 <mode_decision+0x18a>
					main_modeL = 0;
 80148d8:	2300      	movs	r3, #0
 80148da:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 80148dc:	2300      	movs	r3, #0
 80148de:	73fb      	strb	r3, [r7, #15]
					break;
 80148e0:	e013      	b.n	801490a <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 80148e2:	2001      	movs	r0, #1
 80148e4:	f002 ffc8 	bl	8017878 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 80148e8:	4b17      	ldr	r3, [pc, #92]	; (8014948 <mode_decision+0x1f0>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80148f0:	dde8      	ble.n	80148c4 <mode_decision+0x16c>
 80148f2:	4b15      	ldr	r3, [pc, #84]	; (8014948 <mode_decision+0x1f0>)
 80148f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80148f8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80148fc:	dde2      	ble.n	80148c4 <mode_decision+0x16c>
 80148fe:	4b12      	ldr	r3, [pc, #72]	; (8014948 <mode_decision+0x1f0>)
 8014900:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014904:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014908:	dddc      	ble.n	80148c4 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 801490a:	2000      	movs	r0, #0
 801490c:	f7f2 fba2 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014910:	2000      	movs	r0, #0
 8014912:	f7f2 fbb1 	bl	8007078 <pl_l_blue_LED>
			pl_yellow_LED_off();
 8014916:	f7f2 fab3 	bl	8006e80 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 801491a:	7bbb      	ldrb	r3, [r7, #14]
 801491c:	011b      	lsls	r3, r3, #4
 801491e:	b25a      	sxtb	r2, r3
 8014920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014924:	4313      	orrs	r3, r2
 8014926:	b25b      	sxtb	r3, r3
 8014928:	737b      	strb	r3, [r7, #13]

return main_mode;
 801492a:	7b7b      	ldrb	r3, [r7, #13]
}
 801492c:	4618      	mov	r0, r3
 801492e:	3710      	adds	r7, #16
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}
 8014934:	41200000 	.word	0x41200000
 8014938:	20000224 	.word	0x20000224
 801493c:	20000220 	.word	0x20000220
 8014940:	20000270 	.word	0x20000270
 8014944:	43c80000 	.word	0x43c80000
 8014948:	200002b8 	.word	0x200002b8

0801494c <mode_execution>:


void mode_execution(unsigned char now_mode){
 801494c:	b590      	push	{r4, r7, lr}
 801494e:	b0d7      	sub	sp, #348	; 0x15c
 8014950:	af52      	add	r7, sp, #328	; 0x148
 8014952:	4603      	mov	r3, r0
 8014954:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014956:	2300      	movs	r3, #0
 8014958:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 801495a:	2300      	movs	r3, #0
 801495c:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 801495e:	79fb      	ldrb	r3, [r7, #7]
 8014960:	f003 030f 	and.w	r3, r3, #15
 8014964:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014966:	79fb      	ldrb	r3, [r7, #7]
 8014968:	091b      	lsrs	r3, r3, #4
 801496a:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 801496c:	7bbb      	ldrb	r3, [r7, #14]
 801496e:	2b0f      	cmp	r3, #15
 8014970:	d854      	bhi.n	8014a1c <mode_execution+0xd0>
 8014972:	a201      	add	r2, pc, #4	; (adr r2, 8014978 <mode_execution+0x2c>)
 8014974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014978:	080149b9 	.word	0x080149b9
 801497c:	080149c3 	.word	0x080149c3
 8014980:	08014a1b 	.word	0x08014a1b
 8014984:	080149cd 	.word	0x080149cd
 8014988:	080149d7 	.word	0x080149d7
 801498c:	080149e1 	.word	0x080149e1
 8014990:	08014a11 	.word	0x08014a11
 8014994:	08014a1b 	.word	0x08014a1b
 8014998:	08014a1b 	.word	0x08014a1b
 801499c:	08014a1b 	.word	0x08014a1b
 80149a0:	08014a1b 	.word	0x08014a1b
 80149a4:	08014a1b 	.word	0x08014a1b
 80149a8:	08014a1b 	.word	0x08014a1b
 80149ac:	08014a1b 	.word	0x08014a1b
 80149b0:	08014a1b 	.word	0x08014a1b
 80149b4:	08014a1b 	.word	0x08014a1b
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 80149b8:	7bfb      	ldrb	r3, [r7, #15]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f000 f836 	bl	8014a2c <mode_PLtest>
	break;
 80149c0:	e02c      	b.n	8014a1c <mode_execution+0xd0>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 80149c2:	7bfb      	ldrb	r3, [r7, #15]
 80149c4:	4618      	mov	r0, r3
 80149c6:	f000 f9f1 	bl	8014dac <mode_Running>
	break;
 80149ca:	e027      	b.n	8014a1c <mode_execution+0xd0>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 80149cc:	7bfb      	ldrb	r3, [r7, #15]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f000 fb6e 	bl	80150b0 <mode_Tuning0>
	break;
 80149d4:	e022      	b.n	8014a1c <mode_execution+0xd0>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 80149d6:	7bfb      	ldrb	r3, [r7, #15]
 80149d8:	4618      	mov	r0, r3
 80149da:	f000 fe87 	bl	80156ec <mode_WallSensorTuning>
	break;
 80149de:	e01d      	b.n	8014a1c <mode_execution+0xd0>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 80149e0:	7bfb      	ldrb	r3, [r7, #15]
 80149e2:	4c10      	ldr	r4, [pc, #64]	; (8014a24 <mode_execution+0xd8>)
 80149e4:	2201      	movs	r2, #1
 80149e6:	9251      	str	r2, [sp, #324]	; 0x144
 80149e8:	2200      	movs	r2, #0
 80149ea:	9250      	str	r2, [sp, #320]	; 0x140
 80149ec:	2201      	movs	r2, #1
 80149ee:	924f      	str	r2, [sp, #316]	; 0x13c
 80149f0:	934e      	str	r3, [sp, #312]	; 0x138
 80149f2:	4668      	mov	r0, sp
 80149f4:	f104 0310 	add.w	r3, r4, #16
 80149f8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80149fc:	4619      	mov	r1, r3
 80149fe:	f00a fa0d 	bl	801ee1c <memcpy>
 8014a02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014a06:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014a28 <mode_execution+0xdc>
 8014a0a:	f7f9 f909 	bl	800dc20 <testturning>
	break;
 8014a0e:	e005      	b.n	8014a1c <mode_execution+0xd0>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8014a10:	7bfb      	ldrb	r3, [r7, #15]
 8014a12:	4618      	mov	r0, r3
 8014a14:	f001 f8a8 	bl	8015b68 <mode_WallSensorTuning_fast>
	break;
 8014a18:	e000      	b.n	8014a1c <mode_execution+0xd0>
	break;
 8014a1a:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8014a1c:	bf00      	nop
 8014a1e:	3714      	adds	r7, #20
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd90      	pop	{r4, r7, pc}
 8014a24:	2000df04 	.word	0x2000df04
 8014a28:	3f028f5c 	.word	0x3f028f5c

08014a2c <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8014a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014a30:	b092      	sub	sp, #72	; 0x48
 8014a32:	af0a      	add	r7, sp, #40	; 0x28
 8014a34:	4603      	mov	r3, r0
 8014a36:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	61fb      	str	r3, [r7, #28]
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8014a40:	7dfb      	ldrb	r3, [r7, #23]
 8014a42:	2b0f      	cmp	r3, #15
 8014a44:	f200 819f 	bhi.w	8014d86 <mode_PLtest+0x35a>
 8014a48:	a201      	add	r2, pc, #4	; (adr r2, 8014a50 <mode_PLtest+0x24>)
 8014a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a4e:	bf00      	nop
 8014a50:	08014d85 	.word	0x08014d85
 8014a54:	08014a91 	.word	0x08014a91
 8014a58:	08014ac3 	.word	0x08014ac3
 8014a5c:	08014b3f 	.word	0x08014b3f
 8014a60:	08014ba3 	.word	0x08014ba3
 8014a64:	08014c23 	.word	0x08014c23
 8014a68:	08014c29 	.word	0x08014c29
 8014a6c:	08014d87 	.word	0x08014d87
 8014a70:	08014d87 	.word	0x08014d87
 8014a74:	08014caf 	.word	0x08014caf
 8014a78:	08014d17 	.word	0x08014d17
 8014a7c:	08014d87 	.word	0x08014d87
 8014a80:	08014d87 	.word	0x08014d87
 8014a84:	08014d87 	.word	0x08014d87
 8014a88:	08014d87 	.word	0x08014d87
 8014a8c:	08014d7f 	.word	0x08014d7f
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014a90:	4bbf      	ldr	r3, [pc, #764]	; (8014d90 <mode_PLtest+0x364>)
 8014a92:	6819      	ldr	r1, [r3, #0]
 8014a94:	4bbe      	ldr	r3, [pc, #760]	; (8014d90 <mode_PLtest+0x364>)
 8014a96:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014a98:	4bbd      	ldr	r3, [pc, #756]	; (8014d90 <mode_PLtest+0x364>)
 8014a9a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8014a9e:	4bbc      	ldr	r3, [pc, #752]	; (8014d90 <mode_PLtest+0x364>)
 8014aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014aa4:	4aba      	ldr	r2, [pc, #744]	; (8014d90 <mode_PLtest+0x364>)
 8014aa6:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8014aaa:	9201      	str	r2, [sp, #4]
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	4623      	mov	r3, r4
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	48b8      	ldr	r0, [pc, #736]	; (8014d94 <mode_PLtest+0x368>)
 8014ab4:	f00a fe32 	bl	801f71c <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8014ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014abc:	f7f3 fa5c 	bl	8007f78 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014ac0:	e7e6      	b.n	8014a90 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8014ac2:	2001      	movs	r0, #1
 8014ac4:	f7f2 fac6 	bl	8007054 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014ac8:	2001      	movs	r0, #1
 8014aca:	f7f2 fad5 	bl	8007078 <pl_l_blue_LED>
		record_mode = 1;
 8014ace:	4bb2      	ldr	r3, [pc, #712]	; (8014d98 <mode_PLtest+0x36c>)
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8014ad4:	f44f 7161 	mov.w	r1, #900	; 0x384
 8014ad8:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014adc:	f7f2 ffd2 	bl	8007a84 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8014ae0:	2001      	movs	r0, #1
 8014ae2:	f7f2 ff8d 	bl	8007a00 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8014ae6:	2001      	movs	r0, #1
 8014ae8:	f7f2 ff62 	bl	80079b0 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8014aec:	f7f2 ffae 	bl	8007a4c <pl_DriveMotor_start>
		wait_ms(2500);
 8014af0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014af4:	f7f3 fa40 	bl	8007f78 <wait_ms>
		pl_DriveMotor_stop();
 8014af8:	f7f2 ffb6 	bl	8007a68 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014afc:	2000      	movs	r0, #0
 8014afe:	f7f2 faa9 	bl	8007054 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014b02:	2000      	movs	r0, #0
 8014b04:	f7f2 fab8 	bl	8007078 <pl_l_blue_LED>
		record_mode = 0;
 8014b08:	4ba3      	ldr	r3, [pc, #652]	; (8014d98 <mode_PLtest+0x36c>)
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014b0e:	e002      	b.n	8014b16 <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014b10:	2001      	movs	r0, #1
 8014b12:	f7f3 fa31 	bl	8007f78 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014b16:	4b9e      	ldr	r3, [pc, #632]	; (8014d90 <mode_PLtest+0x364>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b1e:	ddf7      	ble.n	8014b10 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014b20:	4b9b      	ldr	r3, [pc, #620]	; (8014d90 <mode_PLtest+0x364>)
 8014b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014b26:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b2a:	ddf1      	ble.n	8014b10 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014b2c:	4b98      	ldr	r3, [pc, #608]	; (8014d90 <mode_PLtest+0x364>)
 8014b2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014b32:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b36:	ddeb      	ble.n	8014b10 <mode_PLtest+0xe4>
		}
		record_print();
 8014b38:	f001 fa80 	bl	801603c <record_print>
		break;
 8014b3c:	e123      	b.n	8014d86 <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 8014b3e:	f7ec fdc3 	bl	80016c8 <reset_gyro>
		reset_speed();
 8014b42:	f7ec fa69 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 8014b46:	2001      	movs	r0, #1
 8014b48:	f7f2 fa84 	bl	8007054 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014b4c:	2001      	movs	r0, #1
 8014b4e:	f7f2 fa93 	bl	8007078 <pl_l_blue_LED>
		record_mode = 2;
 8014b52:	4b91      	ldr	r3, [pc, #580]	; (8014d98 <mode_PLtest+0x36c>)
 8014b54:	2202      	movs	r2, #2
 8014b56:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8014b58:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014b5c:	f7f3 fa0c 	bl	8007f78 <wait_ms>
		pl_r_blue_LED(OFF);
 8014b60:	2000      	movs	r0, #0
 8014b62:	f7f2 fa77 	bl	8007054 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014b66:	2000      	movs	r0, #0
 8014b68:	f7f2 fa86 	bl	8007078 <pl_l_blue_LED>
		record_mode = 0;
 8014b6c:	4b8a      	ldr	r3, [pc, #552]	; (8014d98 <mode_PLtest+0x36c>)
 8014b6e:	2200      	movs	r2, #0
 8014b70:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014b72:	e002      	b.n	8014b7a <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014b74:	2001      	movs	r0, #1
 8014b76:	f7f3 f9ff 	bl	8007f78 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014b7a:	4b85      	ldr	r3, [pc, #532]	; (8014d90 <mode_PLtest+0x364>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b82:	ddf7      	ble.n	8014b74 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014b84:	4b82      	ldr	r3, [pc, #520]	; (8014d90 <mode_PLtest+0x364>)
 8014b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014b8a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b8e:	ddf1      	ble.n	8014b74 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014b90:	4b7f      	ldr	r3, [pc, #508]	; (8014d90 <mode_PLtest+0x364>)
 8014b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014b96:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b9a:	ddeb      	ble.n	8014b74 <mode_PLtest+0x148>
		}
		record_print();
 8014b9c:	f001 fa4e 	bl	801603c <record_print>
		break;
 8014ba0:	e0f1      	b.n	8014d86 <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014ba2:	4b7e      	ldr	r3, [pc, #504]	; (8014d9c <mode_PLtest+0x370>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7eb fcf6 	bl	8000598 <__aeabi_f2d>
 8014bac:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014bb0:	4b7a      	ldr	r3, [pc, #488]	; (8014d9c <mode_PLtest+0x370>)
 8014bb2:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7eb fcef 	bl	8000598 <__aeabi_f2d>
 8014bba:	4604      	mov	r4, r0
 8014bbc:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014bbe:	4b77      	ldr	r3, [pc, #476]	; (8014d9c <mode_PLtest+0x370>)
 8014bc0:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7eb fce8 	bl	8000598 <__aeabi_f2d>
 8014bc8:	4680      	mov	r8, r0
 8014bca:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014bcc:	4b73      	ldr	r3, [pc, #460]	; (8014d9c <mode_PLtest+0x370>)
 8014bce:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7eb fce1 	bl	8000598 <__aeabi_f2d>
 8014bd6:	4682      	mov	sl, r0
 8014bd8:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014bda:	4b70      	ldr	r3, [pc, #448]	; (8014d9c <mode_PLtest+0x370>)
 8014bdc:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7eb fcda 	bl	8000598 <__aeabi_f2d>
 8014be4:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014be8:	4b6c      	ldr	r3, [pc, #432]	; (8014d9c <mode_PLtest+0x370>)
 8014bea:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7eb fcd3 	bl	8000598 <__aeabi_f2d>
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014bfa:	ed97 7b00 	vldr	d7, [r7]
 8014bfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014c02:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8014c06:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014c0a:	e9cd 4500 	strd	r4, r5, [sp]
 8014c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014c12:	4863      	ldr	r0, [pc, #396]	; (8014da0 <mode_PLtest+0x374>)
 8014c14:	f00a fd82 	bl	801f71c <iprintf>
			wait_ms(500);
 8014c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014c1c:	f7f3 f9ac 	bl	8007f78 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014c20:	e7bf      	b.n	8014ba2 <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8014c22:	f7f2 fb67 	bl	80072f4 <test_flash>
		break;
 8014c26:	e0ae      	b.n	8014d86 <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 8014c28:	4b5b      	ldr	r3, [pc, #364]	; (8014d98 <mode_PLtest+0x36c>)
 8014c2a:	2206      	movs	r2, #6
 8014c2c:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8014c2e:	2001      	movs	r0, #1
 8014c30:	f7f2 fa10 	bl	8007054 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014c34:	2001      	movs	r0, #1
 8014c36:	f7f2 fa1f 	bl	8007078 <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8014c3a:	f107 0218 	add.w	r2, r7, #24
 8014c3e:	f107 031c 	add.w	r3, r7, #28
 8014c42:	4611      	mov	r1, r2
 8014c44:	4618      	mov	r0, r3
 8014c46:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8014c4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c4e:	f7ed f8b9 	bl	8001dc4 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8014c52:	69fb      	ldr	r3, [r7, #28]
 8014c54:	69ba      	ldr	r2, [r7, #24]
 8014c56:	4611      	mov	r1, r2
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7f2 ff13 	bl	8007a84 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8014c5e:	f7f2 fef5 	bl	8007a4c <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014c62:	e00a      	b.n	8014c7a <mode_PLtest+0x24e>
			wait_ms(1);
 8014c64:	2001      	movs	r0, #1
 8014c66:	f7f3 f987 	bl	8007f78 <wait_ms>
			if(record_rupe_flag==1){
 8014c6a:	4b4e      	ldr	r3, [pc, #312]	; (8014da4 <mode_PLtest+0x378>)
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	d103      	bne.n	8014c7a <mode_PLtest+0x24e>
				record_mode=0;
 8014c72:	4b49      	ldr	r3, [pc, #292]	; (8014d98 <mode_PLtest+0x36c>)
 8014c74:	2200      	movs	r2, #0
 8014c76:	701a      	strb	r2, [r3, #0]
				break;
 8014c78:	e010      	b.n	8014c9c <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014c7a:	4b45      	ldr	r3, [pc, #276]	; (8014d90 <mode_PLtest+0x364>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c82:	ddef      	ble.n	8014c64 <mode_PLtest+0x238>
 8014c84:	4b42      	ldr	r3, [pc, #264]	; (8014d90 <mode_PLtest+0x364>)
 8014c86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014c8a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c8e:	dde9      	ble.n	8014c64 <mode_PLtest+0x238>
 8014c90:	4b3f      	ldr	r3, [pc, #252]	; (8014d90 <mode_PLtest+0x364>)
 8014c92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014c96:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c9a:	dde3      	ble.n	8014c64 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8014c9c:	f7f2 fee4 	bl	8007a68 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014ca0:	2000      	movs	r0, #0
 8014ca2:	f7f2 f9d7 	bl	8007054 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014ca6:	2000      	movs	r0, #0
 8014ca8:	f7f2 f9e6 	bl	8007078 <pl_l_blue_LED>

		break;
 8014cac:	e06b      	b.n	8014d86 <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8014cae:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014cb2:	f7f2 ff11 	bl	8007ad8 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8014cb6:	f7f2 fefb 	bl	8007ab0 <pl_FunMotor_start>
			HAL_Delay(2000);
 8014cba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014cbe:	f002 fddb 	bl	8017878 <HAL_Delay>
			reset_gyro();
 8014cc2:	f7ec fd01 	bl	80016c8 <reset_gyro>
			reset_speed();
 8014cc6:	f7ec f9a7 	bl	8001018 <reset_speed>
			clear_Ierror();
 8014cca:	f7ef fd6b 	bl	80047a4 <clear_Ierror>
			pl_r_blue_LED(ON);
 8014cce:	2001      	movs	r0, #1
 8014cd0:	f7f2 f9c0 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014cd4:	2001      	movs	r0, #1
 8014cd6:	f7f2 f9cf 	bl	8007078 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014cda:	e002      	b.n	8014ce2 <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8014cdc:	2001      	movs	r0, #1
 8014cde:	f002 fdcb 	bl	8017878 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014ce2:	4b2b      	ldr	r3, [pc, #172]	; (8014d90 <mode_PLtest+0x364>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014cea:	ddf7      	ble.n	8014cdc <mode_PLtest+0x2b0>
 8014cec:	4b28      	ldr	r3, [pc, #160]	; (8014d90 <mode_PLtest+0x364>)
 8014cee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014cf2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014cf6:	ddf1      	ble.n	8014cdc <mode_PLtest+0x2b0>
 8014cf8:	4b25      	ldr	r3, [pc, #148]	; (8014d90 <mode_PLtest+0x364>)
 8014cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014cfe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d02:	ddeb      	ble.n	8014cdc <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8014d04:	2000      	movs	r0, #0
 8014d06:	f7f2 f9a5 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014d0a:	2000      	movs	r0, #0
 8014d0c:	f7f2 f9b4 	bl	8007078 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8014d10:	f7f2 fed8 	bl	8007ac4 <pl_FunMotor_stop>
		break;
 8014d14:	e037      	b.n	8014d86 <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8014d16:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8014da8 <mode_PLtest+0x37c>
 8014d1a:	f7f2 fedd 	bl	8007ad8 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8014d1e:	f7f2 fec7 	bl	8007ab0 <pl_FunMotor_start>
			HAL_Delay(2000);
 8014d22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014d26:	f002 fda7 	bl	8017878 <HAL_Delay>
			reset_gyro();
 8014d2a:	f7ec fccd 	bl	80016c8 <reset_gyro>
			reset_speed();
 8014d2e:	f7ec f973 	bl	8001018 <reset_speed>
			clear_Ierror();
 8014d32:	f7ef fd37 	bl	80047a4 <clear_Ierror>
			pl_r_blue_LED(ON);
 8014d36:	2001      	movs	r0, #1
 8014d38:	f7f2 f98c 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014d3c:	2001      	movs	r0, #1
 8014d3e:	f7f2 f99b 	bl	8007078 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014d42:	e002      	b.n	8014d4a <mode_PLtest+0x31e>
				HAL_Delay(1);
 8014d44:	2001      	movs	r0, #1
 8014d46:	f002 fd97 	bl	8017878 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014d4a:	4b11      	ldr	r3, [pc, #68]	; (8014d90 <mode_PLtest+0x364>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d52:	ddf7      	ble.n	8014d44 <mode_PLtest+0x318>
 8014d54:	4b0e      	ldr	r3, [pc, #56]	; (8014d90 <mode_PLtest+0x364>)
 8014d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014d5a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d5e:	ddf1      	ble.n	8014d44 <mode_PLtest+0x318>
 8014d60:	4b0b      	ldr	r3, [pc, #44]	; (8014d90 <mode_PLtest+0x364>)
 8014d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014d66:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d6a:	ddeb      	ble.n	8014d44 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	f7f2 f971 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014d72:	2000      	movs	r0, #0
 8014d74:	f7f2 f980 	bl	8007078 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8014d78:	f7f2 fea4 	bl	8007ac4 <pl_FunMotor_stop>
		break;
 8014d7c:	e003      	b.n	8014d86 <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 8014d7e:	f001 f95d 	bl	801603c <record_print>
		break;
 8014d82:	e000      	b.n	8014d86 <mode_PLtest+0x35a>
		break;
 8014d84:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 8014d86:	bf00      	nop
 8014d88:	3720      	adds	r7, #32
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014d90:	200002b8 	.word	0x200002b8
 8014d94:	08022090 	.word	0x08022090
 8014d98:	2000d96c 	.word	0x2000d96c
 8014d9c:	200006e4 	.word	0x200006e4
 8014da0:	080220bc 	.word	0x080220bc
 8014da4:	2000d978 	.word	0x2000d978
 8014da8:	3f7d70a4 	.word	0x3f7d70a4

08014dac <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8014dac:	b5b0      	push	{r4, r5, r7, lr}
 8014dae:	b0da      	sub	sp, #360	; 0x168
 8014db0:	af54      	add	r7, sp, #336	; 0x150
 8014db2:	4603      	mov	r3, r0
 8014db4:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8014db6:	2003      	movs	r0, #3
 8014db8:	f7f2 fdfa 	bl	80079b0 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8014dbc:	2003      	movs	r0, #3
 8014dbe:	f7f2 fe1f 	bl	8007a00 <pl_R_DriveMotor_mode>
	reset_gyro();
 8014dc2:	f7ec fc81 	bl	80016c8 <reset_gyro>
	reset_speed();
 8014dc6:	f7ec f927 	bl	8001018 <reset_speed>
	reset_distance();
 8014dca:	f7ec f8e7 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8014dce:	f7ef fce9 	bl	80047a4 <clear_Ierror>
	switch (main_modeR) {
 8014dd2:	79fb      	ldrb	r3, [r7, #7]
 8014dd4:	2b0f      	cmp	r3, #15
 8014dd6:	f200 8149 	bhi.w	801506c <mode_Running+0x2c0>
 8014dda:	a201      	add	r2, pc, #4	; (adr r2, 8014de0 <mode_Running+0x34>)
 8014ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014de0:	08014e21 	.word	0x08014e21
 8014de4:	08014ed1 	.word	0x08014ed1
 8014de8:	08014f09 	.word	0x08014f09
 8014dec:	08014f0f 	.word	0x08014f0f
 8014df0:	08014f47 	.word	0x08014f47
 8014df4:	08014f79 	.word	0x08014f79
 8014df8:	08014fab 	.word	0x08014fab
 8014dfc:	08014fdd 	.word	0x08014fdd
 8014e00:	0801500f 	.word	0x0801500f
 8014e04:	08015015 	.word	0x08015015
 8014e08:	0801501b 	.word	0x0801501b
 8014e0c:	08015021 	.word	0x08015021
 8014e10:	08015027 	.word	0x08015027
 8014e14:	0801502d 	.word	0x0801502d
 8014e18:	08015033 	.word	0x08015033
 8014e1c:	08015039 	.word	0x08015039
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 8014e20:	f7fe fef2 	bl	8013c08 <create_StepCountMap_queue>
			maze_display();
 8014e24:	f7ff fa92 	bl	801434c <maze_display>

			create_DijkstraMap();
 8014e28:	f7fc fb22 	bl	8011470 <create_DijkstraMap>
			maze_display_Dijkstra();
 8014e2c:	f7ff fbac 	bl	8014588 <maze_display_Dijkstra>

			route_Dijkstra();
 8014e30:	f7fe f84a 	bl	8012ec8 <route_Dijkstra>
			create_StepCountMap_unknown();
 8014e34:	f7fe fd1c 	bl	8013870 <create_StepCountMap_unknown>
			maze_display();
 8014e38:	f7ff fa88 	bl	801434c <maze_display>

			tic_timer();
 8014e3c:	f7f3 f86e 	bl	8007f1c <tic_timer>
			for(int j=0;j<5000;j++){
 8014e40:	2300      	movs	r3, #0
 8014e42:	617b      	str	r3, [r7, #20]
 8014e44:	e004      	b.n	8014e50 <mode_Running+0xa4>
			create_StepCountMap_queue();
 8014e46:	f7fe fedf 	bl	8013c08 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	3301      	adds	r3, #1
 8014e4e:	617b      	str	r3, [r7, #20]
 8014e50:	697b      	ldr	r3, [r7, #20]
 8014e52:	f241 3287 	movw	r2, #4999	; 0x1387
 8014e56:	4293      	cmp	r3, r2
 8014e58:	ddf5      	ble.n	8014e46 <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 8014e5a:	f7f3 f871 	bl	8007f40 <toc_timer>
 8014e5e:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 8014e62:	f7ff fa73 	bl	801434c <maze_display>
			printf("tim2=%f\n", tim2);
 8014e66:	68f8      	ldr	r0, [r7, #12]
 8014e68:	f7eb fb96 	bl	8000598 <__aeabi_f2d>
 8014e6c:	4602      	mov	r2, r0
 8014e6e:	460b      	mov	r3, r1
 8014e70:	4880      	ldr	r0, [pc, #512]	; (8015074 <mode_Running+0x2c8>)
 8014e72:	f00a fc53 	bl	801f71c <iprintf>
			tic_timer();
 8014e76:	f7f3 f851 	bl	8007f1c <tic_timer>
			create_DijkstraMap();
 8014e7a:	f7fc faf9 	bl	8011470 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 8014e7e:	2300      	movs	r3, #0
 8014e80:	613b      	str	r3, [r7, #16]
 8014e82:	e006      	b.n	8014e92 <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 8014e84:	f7fe f820 	bl	8012ec8 <route_Dijkstra>
			create_StepCountMap_unknown();
 8014e88:	f7fe fcf2 	bl	8013870 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	3301      	adds	r3, #1
 8014e90:	613b      	str	r3, [r7, #16]
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	f241 3287 	movw	r2, #4999	; 0x1387
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	ddf3      	ble.n	8014e84 <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 8014e9c:	f7f3 f850 	bl	8007f40 <toc_timer>
 8014ea0:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8014ea4:	f7ff fa52 	bl	801434c <maze_display>
			maze_display_Dijkstra();
 8014ea8:	f7ff fb6e 	bl	8014588 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8014eac:	68b8      	ldr	r0, [r7, #8]
 8014eae:	f7eb fb73 	bl	8000598 <__aeabi_f2d>
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	460d      	mov	r5, r1
 8014eb6:	68f8      	ldr	r0, [r7, #12]
 8014eb8:	f7eb fb6e 	bl	8000598 <__aeabi_f2d>
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	e9cd 2300 	strd	r2, r3, [sp]
 8014ec4:	4622      	mov	r2, r4
 8014ec6:	462b      	mov	r3, r5
 8014ec8:	486b      	ldr	r0, [pc, #428]	; (8015078 <mode_Running+0x2cc>)
 8014eca:	f00a fc27 	bl	801f71c <iprintf>
		break;
 8014ece:	e0cd      	b.n	801506c <mode_Running+0x2c0>
		case 0b0001://足立法(遅い)
			tic_timer();
 8014ed0:	f7f3 f824 	bl	8007f1c <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8014ed4:	4c69      	ldr	r4, [pc, #420]	; (801507c <mode_Running+0x2d0>)
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	934f      	str	r3, [sp, #316]	; 0x13c
 8014eda:	2301      	movs	r3, #1
 8014edc:	934e      	str	r3, [sp, #312]	; 0x138
 8014ede:	4668      	mov	r0, sp
 8014ee0:	f104 0310 	add.w	r3, r4, #16
 8014ee4:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014ee8:	4619      	mov	r1, r3
 8014eea:	f009 ff97 	bl	801ee1c <memcpy>
 8014eee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014ef2:	eddf 1a63 	vldr	s3, [pc, #396]	; 8015080 <mode_Running+0x2d4>
 8014ef6:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8015084 <mode_Running+0x2d8>
 8014efa:	eddf 0a63 	vldr	s1, [pc, #396]	; 8015088 <mode_Running+0x2dc>
 8014efe:	ed9f 0a63 	vldr	s0, [pc, #396]	; 801508c <mode_Running+0x2e0>
 8014f02:	f7f9 f847 	bl	800df94 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8014f06:	e0b1      	b.n	801506c <mode_Running+0x2c0>
		case 0b0010://Flashから
			record_out();
 8014f08:	f7f2 fb12 	bl	8007530 <record_out>
		break;
 8014f0c:	e0ae      	b.n	801506c <mode_Running+0x2c0>
		case 0b0011://ゴミ
			tic_timer();
 8014f0e:	f7f3 f805 	bl	8007f1c <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8014f12:	4c5a      	ldr	r4, [pc, #360]	; (801507c <mode_Running+0x2d0>)
 8014f14:	2301      	movs	r3, #1
 8014f16:	934f      	str	r3, [sp, #316]	; 0x13c
 8014f18:	2301      	movs	r3, #1
 8014f1a:	934e      	str	r3, [sp, #312]	; 0x138
 8014f1c:	4668      	mov	r0, sp
 8014f1e:	f104 0310 	add.w	r3, r4, #16
 8014f22:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014f26:	4619      	mov	r1, r3
 8014f28:	f009 ff78 	bl	801ee1c <memcpy>
 8014f2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014f30:	eddf 1a53 	vldr	s3, [pc, #332]	; 8015080 <mode_Running+0x2d4>
 8014f34:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8015084 <mode_Running+0x2d8>
 8014f38:	eddf 0a53 	vldr	s1, [pc, #332]	; 8015088 <mode_Running+0x2dc>
 8014f3c:	ed9f 0a53 	vldr	s0, [pc, #332]	; 801508c <mode_Running+0x2e0>
 8014f40:	f7f9 f828 	bl	800df94 <AdatiWayReturn>
		break;
 8014f44:	e092      	b.n	801506c <mode_Running+0x2c0>
		case 0b0100://ゴミ
			record_out();
 8014f46:	f7f2 faf3 	bl	8007530 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	9352      	str	r3, [sp, #328]	; 0x148
 8014f4e:	4a50      	ldr	r2, [pc, #320]	; (8015090 <mode_Running+0x2e4>)
 8014f50:	466b      	mov	r3, sp
 8014f52:	4611      	mov	r1, r2
 8014f54:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f009 ff5f 	bl	801ee1c <memcpy>
 8014f5e:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8015094 <mode_Running+0x2e8>
 8014f62:	2300      	movs	r3, #0
 8014f64:	2200      	movs	r2, #0
 8014f66:	2100      	movs	r1, #0
 8014f68:	2000      	movs	r0, #0
 8014f6a:	eddf 0a45 	vldr	s1, [pc, #276]	; 8015080 <mode_Running+0x2d4>
 8014f6e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8015098 <mode_Running+0x2ec>
 8014f72:	f7f9 ffb9 	bl	800eee8 <run_shortest>
		break;
 8014f76:	e079      	b.n	801506c <mode_Running+0x2c0>
		case 0b0101://
			record_out();
 8014f78:	f7f2 fada 	bl	8007530 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	9352      	str	r3, [sp, #328]	; 0x148
 8014f80:	4a46      	ldr	r2, [pc, #280]	; (801509c <mode_Running+0x2f0>)
 8014f82:	466b      	mov	r3, sp
 8014f84:	4611      	mov	r1, r2
 8014f86:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f009 ff46 	bl	801ee1c <memcpy>
 8014f90:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8015094 <mode_Running+0x2e8>
 8014f94:	2300      	movs	r3, #0
 8014f96:	2200      	movs	r2, #0
 8014f98:	2101      	movs	r1, #1
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015080 <mode_Running+0x2d4>
 8014fa0:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8015098 <mode_Running+0x2ec>
 8014fa4:	f7f9 ffa0 	bl	800eee8 <run_shortest>
		break;
 8014fa8:	e060      	b.n	801506c <mode_Running+0x2c0>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8014faa:	f7f2 fac1 	bl	8007530 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 8014fae:	2301      	movs	r3, #1
 8014fb0:	9352      	str	r3, [sp, #328]	; 0x148
 8014fb2:	4a3a      	ldr	r2, [pc, #232]	; (801509c <mode_Running+0x2f0>)
 8014fb4:	466b      	mov	r3, sp
 8014fb6:	4611      	mov	r1, r2
 8014fb8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f009 ff2d 	bl	801ee1c <memcpy>
 8014fc2:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8015094 <mode_Running+0x2e8>
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	2200      	movs	r2, #0
 8014fca:	2101      	movs	r1, #1
 8014fcc:	2000      	movs	r0, #0
 8014fce:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8015080 <mode_Running+0x2d4>
 8014fd2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8015098 <mode_Running+0x2ec>
 8014fd6:	f7f9 ff87 	bl	800eee8 <run_shortest>
		break;
 8014fda:	e047      	b.n	801506c <mode_Running+0x2c0>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8014fdc:	f7f2 faa8 	bl	8007530 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed600_shortest_mollifier,0.99,1);
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	9352      	str	r3, [sp, #328]	; 0x148
 8014fe4:	4a2d      	ldr	r2, [pc, #180]	; (801509c <mode_Running+0x2f0>)
 8014fe6:	466b      	mov	r3, sp
 8014fe8:	4611      	mov	r1, r2
 8014fea:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f009 ff14 	bl	801ee1c <memcpy>
 8014ff4:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 80150a0 <mode_Running+0x2f4>
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	2201      	movs	r2, #1
 8014ffc:	2101      	movs	r1, #1
 8014ffe:	2000      	movs	r0, #0
 8015000:	eddf 0a28 	vldr	s1, [pc, #160]	; 80150a4 <mode_Running+0x2f8>
 8015004:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8015080 <mode_Running+0x2d4>
 8015008:	f7f9 ff6e 	bl	800eee8 <run_shortest>
		break;
 801500c:	e02e      	b.n	801506c <mode_Running+0x2c0>
		case 0b1000://
			record_out();
 801500e:	f7f2 fa8f 	bl	8007530 <record_out>
			//run_shortest(2000,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed500_shortest,0.3,0);
		break;
 8015012:	e02b      	b.n	801506c <mode_Running+0x2c0>
		case 0b1001:
			record_out();
 8015014:	f7f2 fa8c 	bl	8007530 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015018:	e028      	b.n	801506c <mode_Running+0x2c0>
		case 0b1010:
			record_out();
 801501a:	f7f2 fa89 	bl	8007530 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 801501e:	e025      	b.n	801506c <mode_Running+0x2c0>
		case 0b1011:
			record_out();
 8015020:	f7f2 fa86 	bl	8007530 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015024:	e022      	b.n	801506c <mode_Running+0x2c0>
		case 0b1100:
			record_out();
 8015026:	f7f2 fa83 	bl	8007530 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 801502a:	e01f      	b.n	801506c <mode_Running+0x2c0>
		case 0b1101:
			record_out();
 801502c:	f7f2 fa80 	bl	8007530 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015030:	e01c      	b.n	801506c <mode_Running+0x2c0>
		case 0b1110:
			record_out();
 8015032:	f7f2 fa7d 	bl	8007530 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015036:	e019      	b.n	801506c <mode_Running+0x2c0>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015038:	4c1b      	ldr	r4, [pc, #108]	; (80150a8 <mode_Running+0x2fc>)
 801503a:	2300      	movs	r3, #0
 801503c:	934f      	str	r3, [sp, #316]	; 0x13c
 801503e:	2301      	movs	r3, #1
 8015040:	934e      	str	r3, [sp, #312]	; 0x138
 8015042:	4668      	mov	r0, sp
 8015044:	f104 0310 	add.w	r3, r4, #16
 8015048:	f44f 729c 	mov.w	r2, #312	; 0x138
 801504c:	4619      	mov	r1, r3
 801504e:	f009 fee5 	bl	801ee1c <memcpy>
 8015052:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015056:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8015080 <mode_Running+0x2d4>
 801505a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015084 <mode_Running+0x2d8>
 801505e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8015088 <mode_Running+0x2dc>
 8015062:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80150ac <mode_Running+0x300>
 8015066:	f7f8 ff95 	bl	800df94 <AdatiWayReturn>
		break;
 801506a:	bf00      	nop
	}


}
 801506c:	bf00      	nop
 801506e:	3718      	adds	r7, #24
 8015070:	46bd      	mov	sp, r7
 8015072:	bdb0      	pop	{r4, r5, r7, pc}
 8015074:	08022108 	.word	0x08022108
 8015078:	08022114 	.word	0x08022114
 801507c:	2000db2c 	.word	0x2000db2c
 8015080:	453b8000 	.word	0x453b8000
 8015084:	44fa0000 	.word	0x44fa0000
 8015088:	43c80000 	.word	0x43c80000
 801508c:	43960000 	.word	0x43960000
 8015090:	2000ddbc 	.word	0x2000ddbc
 8015094:	3e99999a 	.word	0x3e99999a
 8015098:	447a0000 	.word	0x447a0000
 801509c:	2000df04 	.word	0x2000df04
 80150a0:	3f7d70a4 	.word	0x3f7d70a4
 80150a4:	461c4000 	.word	0x461c4000
 80150a8:	2000dc74 	.word	0x2000dc74
 80150ac:	437a0000 	.word	0x437a0000

080150b0 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 80150b0:	b590      	push	{r4, r7, lr}
 80150b2:	b0db      	sub	sp, #364	; 0x16c
 80150b4:	af52      	add	r7, sp, #328	; 0x148
 80150b6:	4603      	mov	r3, r0
 80150b8:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 80150ba:	2300      	movs	r3, #0
 80150bc:	613b      	str	r3, [r7, #16]
 80150be:	2300      	movs	r3, #0
 80150c0:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 80150c2:	2300      	movs	r3, #0
 80150c4:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 80150c6:	2300      	movs	r3, #0
 80150c8:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 80150ca:	2300      	movs	r3, #0
 80150cc:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 80150ce:	2300      	movs	r3, #0
 80150d0:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80150d2:	2003      	movs	r0, #3
 80150d4:	f7f2 fc6c 	bl	80079b0 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80150d8:	2003      	movs	r0, #3
 80150da:	f7f2 fc91 	bl	8007a00 <pl_R_DriveMotor_mode>
	reset_gyro();
 80150de:	f7ec faf3 	bl	80016c8 <reset_gyro>
	reset_speed();
 80150e2:	f7eb ff99 	bl	8001018 <reset_speed>
	reset_distance();
 80150e6:	f7eb ff59 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80150ea:	f7ef fb5b 	bl	80047a4 <clear_Ierror>

	switch (main_modeR) {
 80150ee:	79fb      	ldrb	r3, [r7, #7]
 80150f0:	2b0f      	cmp	r3, #15
 80150f2:	f200 82a3 	bhi.w	801563c <mode_Tuning0+0x58c>
 80150f6:	a201      	add	r2, pc, #4	; (adr r2, 80150fc <mode_Tuning0+0x4c>)
 80150f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150fc:	0801513d 	.word	0x0801513d
 8015100:	080151c7 	.word	0x080151c7
 8015104:	080151ed 	.word	0x080151ed
 8015108:	08015213 	.word	0x08015213
 801510c:	08015243 	.word	0x08015243
 8015110:	08015273 	.word	0x08015273
 8015114:	08015299 	.word	0x08015299
 8015118:	080152bf 	.word	0x080152bf
 801511c:	080152e5 	.word	0x080152e5
 8015120:	08015309 	.word	0x08015309
 8015124:	08015389 	.word	0x08015389
 8015128:	0801540f 	.word	0x0801540f
 801512c:	08015435 	.word	0x08015435
 8015130:	080154d5 	.word	0x080154d5
 8015134:	080155a1 	.word	0x080155a1
 8015138:	080155f1 	.word	0x080155f1
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 801513c:	4bca      	ldr	r3, [pc, #808]	; (8015468 <mode_Tuning0+0x3b8>)
 801513e:	2203      	movs	r2, #3
 8015140:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015142:	2300      	movs	r3, #0
 8015144:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 8015146:	6978      	ldr	r0, [r7, #20]
 8015148:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 801546c <mode_Tuning0+0x3bc>
 801514c:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8015470 <mode_Tuning0+0x3c0>
 8015150:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 8015474 <mode_Tuning0+0x3c4>
 8015154:	eddf 0ac7 	vldr	s1, [pc, #796]	; 8015474 <mode_Tuning0+0x3c4>
 8015158:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8015478 <mode_Tuning0+0x3c8>
 801515c:	f7ed ff06 	bl	8002f6c <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015160:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 801547c <mode_Tuning0+0x3cc>
 8015164:	eddf 1ac6 	vldr	s3, [pc, #792]	; 8015480 <mode_Tuning0+0x3d0>
 8015168:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 8015474 <mode_Tuning0+0x3c4>
 801516c:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8015474 <mode_Tuning0+0x3c4>
 8015170:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8015484 <mode_Tuning0+0x3d4>
 8015174:	f7ee fc08 	bl	8003988 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015178:	6978      	ldr	r0, [r7, #20]
 801517a:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 8015488 <mode_Tuning0+0x3d8>
 801517e:	eddf 1ac3 	vldr	s3, [pc, #780]	; 801548c <mode_Tuning0+0x3dc>
 8015182:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8015474 <mode_Tuning0+0x3c4>
 8015186:	eddf 0abb 	vldr	s1, [pc, #748]	; 8015474 <mode_Tuning0+0x3c4>
 801518a:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8015478 <mode_Tuning0+0x3c8>
 801518e:	f7ed feed 	bl	8002f6c <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015192:	ed9f 2aba 	vldr	s4, [pc, #744]	; 801547c <mode_Tuning0+0x3cc>
 8015196:	eddf 1aba 	vldr	s3, [pc, #744]	; 8015480 <mode_Tuning0+0x3d0>
 801519a:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 8015474 <mode_Tuning0+0x3c4>
 801519e:	eddf 0ab5 	vldr	s1, [pc, #724]	; 8015474 <mode_Tuning0+0x3c4>
 80151a2:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015484 <mode_Tuning0+0x3d4>
 80151a6:	f7ee fbef 	bl	8003988 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 80151aa:	6978      	ldr	r0, [r7, #20]
 80151ac:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 8015490 <mode_Tuning0+0x3e0>
 80151b0:	eddf 1ab8 	vldr	s3, [pc, #736]	; 8015494 <mode_Tuning0+0x3e4>
 80151b4:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 8015474 <mode_Tuning0+0x3c4>
 80151b8:	eddf 0aae 	vldr	s1, [pc, #696]	; 8015474 <mode_Tuning0+0x3c4>
 80151bc:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8015478 <mode_Tuning0+0x3c8>
 80151c0:	f7ed fed4 	bl	8002f6c <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 80151c4:	e23a      	b.n	801563c <mode_Tuning0+0x58c>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 80151c6:	4ba8      	ldr	r3, [pc, #672]	; (8015468 <mode_Tuning0+0x3b8>)
 80151c8:	2205      	movs	r2, #5
 80151ca:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	753b      	strb	r3, [r7, #20]
			straight_table2(400, 0, 0, 400, 3000,mode);
 80151d0:	6978      	ldr	r0, [r7, #20]
 80151d2:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8015498 <mode_Tuning0+0x3e8>
 80151d6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8015480 <mode_Tuning0+0x3d0>
 80151da:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8015474 <mode_Tuning0+0x3c4>
 80151de:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8015474 <mode_Tuning0+0x3c4>
 80151e2:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8015480 <mode_Tuning0+0x3d0>
 80151e6:	f7ed fec1 	bl	8002f6c <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 80151ea:	e227      	b.n	801563c <mode_Tuning0+0x58c>
		case 2://壁制御
			record_mode=6;
 80151ec:	4b9e      	ldr	r3, [pc, #632]	; (8015468 <mode_Tuning0+0x3b8>)
 80151ee:	2206      	movs	r2, #6
 80151f0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80151f2:	2301      	movs	r3, #1
 80151f4:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 80151f6:	6978      	ldr	r0, [r7, #20]
 80151f8:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 801549c <mode_Tuning0+0x3ec>
 80151fc:	eddf 1aa8 	vldr	s3, [pc, #672]	; 80154a0 <mode_Tuning0+0x3f0>
 8015200:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8015474 <mode_Tuning0+0x3c4>
 8015204:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8015474 <mode_Tuning0+0x3c4>
 8015208:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 80154a4 <mode_Tuning0+0x3f4>
 801520c:	f7ed feae 	bl	8002f6c <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015210:	e214      	b.n	801563c <mode_Tuning0+0x58c>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8015212:	4ca5      	ldr	r4, [pc, #660]	; (80154a8 <mode_Tuning0+0x3f8>)
 8015214:	2300      	movs	r3, #0
 8015216:	9351      	str	r3, [sp, #324]	; 0x144
 8015218:	2300      	movs	r3, #0
 801521a:	9350      	str	r3, [sp, #320]	; 0x140
 801521c:	2300      	movs	r3, #0
 801521e:	934f      	str	r3, [sp, #316]	; 0x13c
 8015220:	2300      	movs	r3, #0
 8015222:	934e      	str	r3, [sp, #312]	; 0x138
 8015224:	4668      	mov	r0, sp
 8015226:	f104 0310 	add.w	r3, r4, #16
 801522a:	f44f 729c 	mov.w	r2, #312	; 0x138
 801522e:	4619      	mov	r1, r3
 8015230:	f009 fdf4 	bl	801ee1c <memcpy>
 8015234:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015238:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8015474 <mode_Tuning0+0x3c4>
 801523c:	f7f8 fcf0 	bl	800dc20 <testturning>
		break;
 8015240:	e1fc      	b.n	801563c <mode_Tuning0+0x58c>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8015242:	4c99      	ldr	r4, [pc, #612]	; (80154a8 <mode_Tuning0+0x3f8>)
 8015244:	2300      	movs	r3, #0
 8015246:	9351      	str	r3, [sp, #324]	; 0x144
 8015248:	2300      	movs	r3, #0
 801524a:	9350      	str	r3, [sp, #320]	; 0x140
 801524c:	2300      	movs	r3, #0
 801524e:	934f      	str	r3, [sp, #316]	; 0x13c
 8015250:	2301      	movs	r3, #1
 8015252:	934e      	str	r3, [sp, #312]	; 0x138
 8015254:	4668      	mov	r0, sp
 8015256:	f104 0310 	add.w	r3, r4, #16
 801525a:	f44f 729c 	mov.w	r2, #312	; 0x138
 801525e:	4619      	mov	r1, r3
 8015260:	f009 fddc 	bl	801ee1c <memcpy>
 8015264:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015268:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8015474 <mode_Tuning0+0x3c4>
 801526c:	f7f8 fcd8 	bl	800dc20 <testturning>
		break;
 8015270:	e1e4      	b.n	801563c <mode_Tuning0+0x58c>
		case 5://直進(制御なし)
			record_mode=7;
 8015272:	4b7d      	ldr	r3, [pc, #500]	; (8015468 <mode_Tuning0+0x3b8>)
 8015274:	2207      	movs	r2, #7
 8015276:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015278:	2300      	movs	r3, #0
 801527a:	753b      	strb	r3, [r7, #20]
			straight_table2(180, 0, 0, 300, 6000,mode);
 801527c:	6978      	ldr	r0, [r7, #20]
 801527e:	ed9f 2a87 	vldr	s4, [pc, #540]	; 801549c <mode_Tuning0+0x3ec>
 8015282:	eddf 1a87 	vldr	s3, [pc, #540]	; 80154a0 <mode_Tuning0+0x3f0>
 8015286:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8015474 <mode_Tuning0+0x3c4>
 801528a:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8015474 <mode_Tuning0+0x3c4>
 801528e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8015484 <mode_Tuning0+0x3d4>
 8015292:	f7ed fe6b 	bl	8002f6c <straight_table2>
		break;
 8015296:	e1d1      	b.n	801563c <mode_Tuning0+0x58c>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015298:	4b73      	ldr	r3, [pc, #460]	; (8015468 <mode_Tuning0+0x3b8>)
 801529a:	2207      	movs	r2, #7
 801529c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801529e:	2300      	movs	r3, #0
 80152a0:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 80152a2:	6978      	ldr	r0, [r7, #20]
 80152a4:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 801549c <mode_Tuning0+0x3ec>
 80152a8:	eddf 1a80 	vldr	s3, [pc, #512]	; 80154ac <mode_Tuning0+0x3fc>
 80152ac:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8015474 <mode_Tuning0+0x3c4>
 80152b0:	eddf 0a70 	vldr	s1, [pc, #448]	; 8015474 <mode_Tuning0+0x3c4>
 80152b4:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80154b0 <mode_Tuning0+0x400>
 80152b8:	f7ed fe58 	bl	8002f6c <straight_table2>
		break;
 80152bc:	e1be      	b.n	801563c <mode_Tuning0+0x58c>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 80152be:	4b6a      	ldr	r3, [pc, #424]	; (8015468 <mode_Tuning0+0x3b8>)
 80152c0:	2207      	movs	r2, #7
 80152c2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80152c4:	2303      	movs	r3, #3
 80152c6:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 80152c8:	6978      	ldr	r0, [r7, #20]
 80152ca:	ed9f 2a74 	vldr	s4, [pc, #464]	; 801549c <mode_Tuning0+0x3ec>
 80152ce:	eddf 1a6f 	vldr	s3, [pc, #444]	; 801548c <mode_Tuning0+0x3dc>
 80152d2:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8015474 <mode_Tuning0+0x3c4>
 80152d6:	eddf 0a67 	vldr	s1, [pc, #412]	; 8015474 <mode_Tuning0+0x3c4>
 80152da:	ed9f 0a75 	vldr	s0, [pc, #468]	; 80154b0 <mode_Tuning0+0x400>
 80152de:	f7ed fe45 	bl	8002f6c <straight_table2>
		break;
 80152e2:	e1ab      	b.n	801563c <mode_Tuning0+0x58c>
		case 8://宴会芸
			record_mode=2;
 80152e4:	4b60      	ldr	r3, [pc, #384]	; (8015468 <mode_Tuning0+0x3b8>)
 80152e6:	2202      	movs	r2, #2
 80152e8:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80152ea:	2001      	movs	r0, #1
 80152ec:	f7f1 feb2 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80152f0:	2001      	movs	r0, #1
 80152f2:	f7f1 fec1 	bl	8007078 <pl_l_blue_LED>
			no_angle();
 80152f6:	f7ee fd5b 	bl	8003db0 <no_angle>
			pl_r_blue_LED(OFF);
 80152fa:	2000      	movs	r0, #0
 80152fc:	f7f1 feaa 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015300:	2000      	movs	r0, #0
 8015302:	f7f1 feb9 	bl	8007078 <pl_l_blue_LED>
		break;
 8015306:	e199      	b.n	801563c <mode_Tuning0+0x58c>
		case 9://システム同定enc
			record_mode=6;
 8015308:	4b57      	ldr	r3, [pc, #348]	; (8015468 <mode_Tuning0+0x3b8>)
 801530a:	2206      	movs	r2, #6
 801530c:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 801530e:	2001      	movs	r0, #1
 8015310:	f7f1 fea0 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015314:	2001      	movs	r0, #1
 8015316:	f7f1 feaf 	bl	8007078 <pl_l_blue_LED>
			straight_table_ff(90, 0, 300, 300, 500);
 801531a:	ed9f 2a64 	vldr	s4, [pc, #400]	; 80154ac <mode_Tuning0+0x3fc>
 801531e:	eddf 1a60 	vldr	s3, [pc, #384]	; 80154a0 <mode_Tuning0+0x3f0>
 8015322:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 80154a0 <mode_Tuning0+0x3f0>
 8015326:	eddf 0a53 	vldr	s1, [pc, #332]	; 8015474 <mode_Tuning0+0x3c4>
 801532a:	ed9f 0a62 	vldr	s0, [pc, #392]	; 80154b4 <mode_Tuning0+0x404>
 801532e:	f7ee fe6f 	bl	8004010 <straight_table_ff>
			straight_table_ff(90, 300, 600, 600, 1500);
 8015332:	ed9f 2a61 	vldr	s4, [pc, #388]	; 80154b8 <mode_Tuning0+0x408>
 8015336:	eddf 1a61 	vldr	s3, [pc, #388]	; 80154bc <mode_Tuning0+0x40c>
 801533a:	ed9f 1a60 	vldr	s2, [pc, #384]	; 80154bc <mode_Tuning0+0x40c>
 801533e:	eddf 0a58 	vldr	s1, [pc, #352]	; 80154a0 <mode_Tuning0+0x3f0>
 8015342:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80154b4 <mode_Tuning0+0x404>
 8015346:	f7ee fe63 	bl	8004010 <straight_table_ff>
			straight_table_ff(90, 600, 300, 600, 1500);
 801534a:	ed9f 2a5b 	vldr	s4, [pc, #364]	; 80154b8 <mode_Tuning0+0x408>
 801534e:	eddf 1a5b 	vldr	s3, [pc, #364]	; 80154bc <mode_Tuning0+0x40c>
 8015352:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80154a0 <mode_Tuning0+0x3f0>
 8015356:	eddf 0a59 	vldr	s1, [pc, #356]	; 80154bc <mode_Tuning0+0x40c>
 801535a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80154b4 <mode_Tuning0+0x404>
 801535e:	f7ee fe57 	bl	8004010 <straight_table_ff>
			straight_table_ff(90, 300, 0, 300, 500);
 8015362:	ed9f 2a52 	vldr	s4, [pc, #328]	; 80154ac <mode_Tuning0+0x3fc>
 8015366:	eddf 1a4e 	vldr	s3, [pc, #312]	; 80154a0 <mode_Tuning0+0x3f0>
 801536a:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8015474 <mode_Tuning0+0x3c4>
 801536e:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80154a0 <mode_Tuning0+0x3f0>
 8015372:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80154b4 <mode_Tuning0+0x404>
 8015376:	f7ee fe4b 	bl	8004010 <straight_table_ff>
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 801537a:	2000      	movs	r0, #0
 801537c:	f7f1 fe6a 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015380:	2000      	movs	r0, #0
 8015382:	f7f1 fe79 	bl	8007078 <pl_l_blue_LED>
		break;
 8015386:	e159      	b.n	801563c <mode_Tuning0+0x58c>
		case 10://システム同定gyro
			record_mode=6;
 8015388:	4b37      	ldr	r3, [pc, #220]	; (8015468 <mode_Tuning0+0x3b8>)
 801538a:	2206      	movs	r2, #6
 801538c:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 801538e:	2001      	movs	r0, #1
 8015390:	f7f1 fe60 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015394:	2001      	movs	r0, #1
 8015396:	f7f1 fe6f 	bl	8007078 <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 801539a:	f107 020c 	add.w	r2, r7, #12
 801539e:	f107 0310 	add.w	r3, r7, #16
 80153a2:	4611      	mov	r1, r2
 80153a4:	4618      	mov	r0, r3
 80153a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80153aa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80153ae:	f7ec fd09 	bl	8001dc4 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 80153b2:	693b      	ldr	r3, [r7, #16]
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	4611      	mov	r1, r2
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7f2 fb63 	bl	8007a84 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 80153be:	f7f2 fb45 	bl	8007a4c <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80153c2:	e00a      	b.n	80153da <mode_Tuning0+0x32a>
				wait_ms(1);
 80153c4:	2001      	movs	r0, #1
 80153c6:	f7f2 fdd7 	bl	8007f78 <wait_ms>
				if(record_rupe_flag==1){
 80153ca:	4b3d      	ldr	r3, [pc, #244]	; (80154c0 <mode_Tuning0+0x410>)
 80153cc:	781b      	ldrb	r3, [r3, #0]
 80153ce:	2b01      	cmp	r3, #1
 80153d0:	d103      	bne.n	80153da <mode_Tuning0+0x32a>
					record_mode=0;
 80153d2:	4b25      	ldr	r3, [pc, #148]	; (8015468 <mode_Tuning0+0x3b8>)
 80153d4:	2200      	movs	r2, #0
 80153d6:	701a      	strb	r2, [r3, #0]
					break;
 80153d8:	e010      	b.n	80153fc <mode_Tuning0+0x34c>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80153da:	4b3a      	ldr	r3, [pc, #232]	; (80154c4 <mode_Tuning0+0x414>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153e2:	ddef      	ble.n	80153c4 <mode_Tuning0+0x314>
 80153e4:	4b37      	ldr	r3, [pc, #220]	; (80154c4 <mode_Tuning0+0x414>)
 80153e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80153ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153ee:	dde9      	ble.n	80153c4 <mode_Tuning0+0x314>
 80153f0:	4b34      	ldr	r3, [pc, #208]	; (80154c4 <mode_Tuning0+0x414>)
 80153f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80153f6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153fa:	dde3      	ble.n	80153c4 <mode_Tuning0+0x314>
				}
			}
			pl_DriveMotor_stop();
 80153fc:	f7f2 fb34 	bl	8007a68 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015400:	2000      	movs	r0, #0
 8015402:	f7f1 fe27 	bl	8007054 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015406:	2000      	movs	r0, #0
 8015408:	f7f1 fe36 	bl	8007078 <pl_l_blue_LED>
		break;
 801540c:	e116      	b.n	801563c <mode_Tuning0+0x58c>
		case 11:
		record_mode=1;
 801540e:	4b16      	ldr	r3, [pc, #88]	; (8015468 <mode_Tuning0+0x3b8>)
 8015410:	2201      	movs	r2, #1
 8015412:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8015414:	2300      	movs	r3, #0
 8015416:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8015418:	6978      	ldr	r0, [r7, #20]
 801541a:	ed9f 2a20 	vldr	s4, [pc, #128]	; 801549c <mode_Tuning0+0x3ec>
 801541e:	eddf 1a20 	vldr	s3, [pc, #128]	; 80154a0 <mode_Tuning0+0x3f0>
 8015422:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8015474 <mode_Tuning0+0x3c4>
 8015426:	eddf 0a13 	vldr	s1, [pc, #76]	; 8015474 <mode_Tuning0+0x3c4>
 801542a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80154c8 <mode_Tuning0+0x418>
 801542e:	f7ed fd9d 	bl	8002f6c <straight_table2>
		break;
 8015432:	e103      	b.n	801563c <mode_Tuning0+0x58c>
		case 12:
		record_mode=2;
 8015434:	4b0c      	ldr	r3, [pc, #48]	; (8015468 <mode_Tuning0+0x3b8>)
 8015436:	2202      	movs	r2, #2
 8015438:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 801543a:	2300      	movs	r3, #0
 801543c:	61fb      	str	r3, [r7, #28]
 801543e:	e00e      	b.n	801545e <mode_Tuning0+0x3ae>
		turning_table2(90, 0, 0, 930, 11000);
 8015440:	ed9f 2a22 	vldr	s4, [pc, #136]	; 80154cc <mode_Tuning0+0x41c>
 8015444:	eddf 1a22 	vldr	s3, [pc, #136]	; 80154d0 <mode_Tuning0+0x420>
 8015448:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015474 <mode_Tuning0+0x3c4>
 801544c:	eddf 0a09 	vldr	s1, [pc, #36]	; 8015474 <mode_Tuning0+0x3c4>
 8015450:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80154b4 <mode_Tuning0+0x404>
 8015454:	f7ee fa98 	bl	8003988 <turning_table2>
		for(int i=0;i<40;i++){
 8015458:	69fb      	ldr	r3, [r7, #28]
 801545a:	3301      	adds	r3, #1
 801545c:	61fb      	str	r3, [r7, #28]
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	2b27      	cmp	r3, #39	; 0x27
 8015462:	dded      	ble.n	8015440 <mode_Tuning0+0x390>
		}
		break;
 8015464:	e0ea      	b.n	801563c <mode_Tuning0+0x58c>
 8015466:	bf00      	nop
 8015468:	2000d96c 	.word	0x2000d96c
 801546c:	464b2000 	.word	0x464b2000
 8015470:	44c80000 	.word	0x44c80000
 8015474:	00000000 	.word	0x00000000
 8015478:	44070000 	.word	0x44070000
 801547c:	457a0000 	.word	0x457a0000
 8015480:	43c80000 	.word	0x43c80000
 8015484:	43340000 	.word	0x43340000
 8015488:	466a6000 	.word	0x466a6000
 801548c:	44fa0000 	.word	0x44fa0000
 8015490:	469c4000 	.word	0x469c4000
 8015494:	45160000 	.word	0x45160000
 8015498:	453b8000 	.word	0x453b8000
 801549c:	45bb8000 	.word	0x45bb8000
 80154a0:	43960000 	.word	0x43960000
 80154a4:	44340000 	.word	0x44340000
 80154a8:	2000db2c 	.word	0x2000db2c
 80154ac:	43fa0000 	.word	0x43fa0000
 80154b0:	443eeb39 	.word	0x443eeb39
 80154b4:	42b40000 	.word	0x42b40000
 80154b8:	44bb8000 	.word	0x44bb8000
 80154bc:	44160000 	.word	0x44160000
 80154c0:	2000d978 	.word	0x2000d978
 80154c4:	200002b8 	.word	0x200002b8
 80154c8:	420a0000 	.word	0x420a0000
 80154cc:	462be000 	.word	0x462be000
 80154d0:	44688000 	.word	0x44688000
		case 13:
			record_mode=2;
 80154d4:	4b76      	ldr	r3, [pc, #472]	; (80156b0 <mode_Tuning0+0x600>)
 80154d6:	2202      	movs	r2, #2
 80154d8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80154da:	2301      	movs	r3, #1
 80154dc:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80154de:	4b75      	ldr	r3, [pc, #468]	; (80156b4 <mode_Tuning0+0x604>)
 80154e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80154e4:	4b73      	ldr	r3, [pc, #460]	; (80156b4 <mode_Tuning0+0x604>)
 80154e6:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80154ea:	4b72      	ldr	r3, [pc, #456]	; (80156b4 <mode_Tuning0+0x604>)
 80154ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80154f0:	4b70      	ldr	r3, [pc, #448]	; (80156b4 <mode_Tuning0+0x604>)
 80154f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80154f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80154fa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80154fe:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015502:	eddf 5a6d 	vldr	s11, [pc, #436]	; 80156b8 <mode_Tuning0+0x608>
 8015506:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 801550a:	6978      	ldr	r0, [r7, #20]
 801550c:	eeb0 2a47 	vmov.f32	s4, s14
 8015510:	eef0 1a46 	vmov.f32	s3, s12
 8015514:	eeb0 1a66 	vmov.f32	s2, s13
 8015518:	eddf 0a68 	vldr	s1, [pc, #416]	; 80156bc <mode_Tuning0+0x60c>
 801551c:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80156c0 <mode_Tuning0+0x610>
 8015520:	f7ed fd24 	bl	8002f6c <straight_table2>
			for(int i=0;i<40;i++){
 8015524:	2300      	movs	r3, #0
 8015526:	61bb      	str	r3, [r7, #24]
 8015528:	e011      	b.n	801554e <mode_Tuning0+0x49e>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 801552a:	4b62      	ldr	r3, [pc, #392]	; (80156b4 <mode_Tuning0+0x604>)
 801552c:	2200      	movs	r2, #0
 801552e:	9203      	str	r2, [sp, #12]
 8015530:	2200      	movs	r2, #0
 8015532:	9202      	str	r2, [sp, #8]
 8015534:	2200      	movs	r2, #0
 8015536:	9201      	str	r2, [sp, #4]
 8015538:	699a      	ldr	r2, [r3, #24]
 801553a:	9200      	str	r2, [sp, #0]
 801553c:	3308      	adds	r3, #8
 801553e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015540:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80156c4 <mode_Tuning0+0x614>
 8015544:	f7f4 fd80 	bl	800a048 <slalomR>
			for(int i=0;i<40;i++){
 8015548:	69bb      	ldr	r3, [r7, #24]
 801554a:	3301      	adds	r3, #1
 801554c:	61bb      	str	r3, [r7, #24]
 801554e:	69bb      	ldr	r3, [r7, #24]
 8015550:	2b27      	cmp	r3, #39	; 0x27
 8015552:	ddea      	ble.n	801552a <mode_Tuning0+0x47a>
			}
			mode.WallControlMode=0;
 8015554:	2300      	movs	r3, #0
 8015556:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8015558:	4b56      	ldr	r3, [pc, #344]	; (80156b4 <mode_Tuning0+0x604>)
 801555a:	edd3 6a02 	vldr	s13, [r3, #8]
 801555e:	4b55      	ldr	r3, [pc, #340]	; (80156b4 <mode_Tuning0+0x604>)
 8015560:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015564:	4b53      	ldr	r3, [pc, #332]	; (80156b4 <mode_Tuning0+0x604>)
 8015566:	ed93 7a02 	vldr	s14, [r3, #8]
 801556a:	4b52      	ldr	r3, [pc, #328]	; (80156b4 <mode_Tuning0+0x604>)
 801556c:	edd3 7a02 	vldr	s15, [r3, #8]
 8015570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015574:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015578:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 801557c:	eddf 5a4e 	vldr	s11, [pc, #312]	; 80156b8 <mode_Tuning0+0x608>
 8015580:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8015584:	6978      	ldr	r0, [r7, #20]
 8015586:	eeb0 2a47 	vmov.f32	s4, s14
 801558a:	eef0 1a46 	vmov.f32	s3, s12
 801558e:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80156bc <mode_Tuning0+0x60c>
 8015592:	eef0 0a66 	vmov.f32	s1, s13
 8015596:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80156b8 <mode_Tuning0+0x608>
 801559a:	f7ed fce7 	bl	8002f6c <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 801559e:	e04d      	b.n	801563c <mode_Tuning0+0x58c>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 80155a0:	4b49      	ldr	r3, [pc, #292]	; (80156c8 <mode_Tuning0+0x618>)
 80155a2:	2201      	movs	r2, #1
 80155a4:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 80155a6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80156cc <mode_Tuning0+0x61c>
 80155aa:	f7f2 fa95 	bl	8007ad8 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80155ae:	f7f2 fa7f 	bl	8007ab0 <pl_FunMotor_start>
			HAL_Delay(600);
 80155b2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80155b6:	f002 f95f 	bl	8017878 <HAL_Delay>
			reset_gyro();
 80155ba:	f7ec f885 	bl	80016c8 <reset_gyro>
			reset_speed();
 80155be:	f7eb fd2b 	bl	8001018 <reset_speed>
			reset_distance();
 80155c2:	f7eb fceb 	bl	8000f9c <reset_distance>
			clear_Ierror();
 80155c6:	f7ef f8ed 	bl	80047a4 <clear_Ierror>
			record_mode=3;
 80155ca:	4b39      	ldr	r3, [pc, #228]	; (80156b0 <mode_Tuning0+0x600>)
 80155cc:	2203      	movs	r2, #3
 80155ce:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 80155d0:	2301      	movs	r3, #1
 80155d2:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 3000, 12000,mode);
 80155d4:	6978      	ldr	r0, [r7, #20]
 80155d6:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 80156d0 <mode_Tuning0+0x620>
 80155da:	eddf 1a3e 	vldr	s3, [pc, #248]	; 80156d4 <mode_Tuning0+0x624>
 80155de:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80156bc <mode_Tuning0+0x60c>
 80155e2:	eddf 0a36 	vldr	s1, [pc, #216]	; 80156bc <mode_Tuning0+0x60c>
 80155e6:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80156d8 <mode_Tuning0+0x628>
 80155ea:	f7ed fcbf 	bl	8002f6c <straight_table2>
		break;
 80155ee:	e025      	b.n	801563c <mode_Tuning0+0x58c>
		case 15:
			highspeed_mode = 1;
 80155f0:	4b35      	ldr	r3, [pc, #212]	; (80156c8 <mode_Tuning0+0x618>)
 80155f2:	2201      	movs	r2, #1
 80155f4:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 80155f6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80156dc <mode_Tuning0+0x62c>
 80155fa:	f7f2 fa6d 	bl	8007ad8 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 80155fe:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015602:	f002 f939 	bl	8017878 <HAL_Delay>
						reset_gyro();
 8015606:	f7ec f85f 	bl	80016c8 <reset_gyro>
						reset_speed();
 801560a:	f7eb fd05 	bl	8001018 <reset_speed>
						reset_distance();
 801560e:	f7eb fcc5 	bl	8000f9c <reset_distance>
						clear_Ierror();
 8015612:	f7ef f8c7 	bl	80047a4 <clear_Ierror>
						record_mode=3;
 8015616:	4b26      	ldr	r3, [pc, #152]	; (80156b0 <mode_Tuning0+0x600>)
 8015618:	2203      	movs	r2, #3
 801561a:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 801561c:	2301      	movs	r3, #1
 801561e:	753b      	strb	r3, [r7, #20]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 8015620:	6978      	ldr	r0, [r7, #20]
 8015622:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 80156e0 <mode_Tuning0+0x630>
 8015626:	eddf 1a2f 	vldr	s3, [pc, #188]	; 80156e4 <mode_Tuning0+0x634>
 801562a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80156bc <mode_Tuning0+0x60c>
 801562e:	eddf 0a23 	vldr	s1, [pc, #140]	; 80156bc <mode_Tuning0+0x60c>
 8015632:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80156d8 <mode_Tuning0+0x628>
 8015636:	f7ed fc99 	bl	8002f6c <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 801563a:	bf00      	nop
	}
	record_mode=0;
 801563c:	4b1c      	ldr	r3, [pc, #112]	; (80156b0 <mode_Tuning0+0x600>)
 801563e:	2200      	movs	r2, #0
 8015640:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015642:	2003      	movs	r0, #3
 8015644:	f7f2 f9dc 	bl	8007a00 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015648:	2003      	movs	r0, #3
 801564a:	f7f2 f9b1 	bl	80079b0 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801564e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015652:	f7f2 fcd5 	bl	8008000 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015656:	f7f2 fa35 	bl	8007ac4 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 801565a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801565e:	f7f2 fccf 	bl	8008000 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015662:	2000      	movs	r0, #0
 8015664:	f7f2 f99a 	bl	800799c <pl_DriveMotor_standby>
	record_mode=0;
 8015668:	4b11      	ldr	r3, [pc, #68]	; (80156b0 <mode_Tuning0+0x600>)
 801566a:	2200      	movs	r2, #0
 801566c:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801566e:	e002      	b.n	8015676 <mode_Tuning0+0x5c6>
		HAL_Delay(1);
 8015670:	2001      	movs	r0, #1
 8015672:	f002 f901 	bl	8017878 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015676:	4b1c      	ldr	r3, [pc, #112]	; (80156e8 <mode_Tuning0+0x638>)
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801567e:	ddf7      	ble.n	8015670 <mode_Tuning0+0x5c0>
 8015680:	4b19      	ldr	r3, [pc, #100]	; (80156e8 <mode_Tuning0+0x638>)
 8015682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015686:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801568a:	ddf1      	ble.n	8015670 <mode_Tuning0+0x5c0>
 801568c:	4b16      	ldr	r3, [pc, #88]	; (80156e8 <mode_Tuning0+0x638>)
 801568e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015692:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015696:	ddeb      	ble.n	8015670 <mode_Tuning0+0x5c0>
	}
	pl_r_blue_LED(ON);
 8015698:	2001      	movs	r0, #1
 801569a:	f7f1 fcdb 	bl	8007054 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 801569e:	2001      	movs	r0, #1
 80156a0:	f7f1 fcea 	bl	8007078 <pl_l_blue_LED>
	record_print();
 80156a4:	f000 fcca 	bl	801603c <record_print>



}
 80156a8:	bf00      	nop
 80156aa:	3724      	adds	r7, #36	; 0x24
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd90      	pop	{r4, r7, pc}
 80156b0:	2000d96c 	.word	0x2000d96c
 80156b4:	2000db2c 	.word	0x2000db2c
 80156b8:	42340000 	.word	0x42340000
 80156bc:	00000000 	.word	0x00000000
 80156c0:	431b8000 	.word	0x431b8000
 80156c4:	43960000 	.word	0x43960000
 80156c8:	20000808 	.word	0x20000808
 80156cc:	3f7d70a4 	.word	0x3f7d70a4
 80156d0:	463b8000 	.word	0x463b8000
 80156d4:	453b8000 	.word	0x453b8000
 80156d8:	44340000 	.word	0x44340000
 80156dc:	3f733333 	.word	0x3f733333
 80156e0:	45dac000 	.word	0x45dac000
 80156e4:	447a0000 	.word	0x447a0000
 80156e8:	200002b8 	.word	0x200002b8

080156ec <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	4603      	mov	r3, r0
 80156f4:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80156f6:	2300      	movs	r3, #0
 80156f8:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 80156fa:	2300      	movs	r3, #0
 80156fc:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 80156fe:	2300      	movs	r3, #0
 8015700:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8015702:	2300      	movs	r3, #0
 8015704:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8015706:	2001      	movs	r0, #1
 8015708:	f7f2 f948 	bl	800799c <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801570c:	2003      	movs	r0, #3
 801570e:	f7f2 f94f 	bl	80079b0 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015712:	2003      	movs	r0, #3
 8015714:	f7f2 f974 	bl	8007a00 <pl_R_DriveMotor_mode>
	reset_gyro();
 8015718:	f7eb ffd6 	bl	80016c8 <reset_gyro>
	reset_speed();
 801571c:	f7eb fc7c 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015720:	f7ef f840 	bl	80047a4 <clear_Ierror>

	switch (main_modeR) {
 8015724:	79fb      	ldrb	r3, [r7, #7]
 8015726:	2b0f      	cmp	r3, #15
 8015728:	f200 81b0 	bhi.w	8015a8c <mode_WallSensorTuning+0x3a0>
 801572c:	a201      	add	r2, pc, #4	; (adr r2, 8015734 <mode_WallSensorTuning+0x48>)
 801572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015732:	bf00      	nop
 8015734:	08015775 	.word	0x08015775
 8015738:	0801579b 	.word	0x0801579b
 801573c:	080157b3 	.word	0x080157b3
 8015740:	08015829 	.word	0x08015829
 8015744:	0801589f 	.word	0x0801589f
 8015748:	08015915 	.word	0x08015915
 801574c:	08015985 	.word	0x08015985
 8015750:	080159ab 	.word	0x080159ab
 8015754:	080159d1 	.word	0x080159d1
 8015758:	080159f7 	.word	0x080159f7
 801575c:	08015a8d 	.word	0x08015a8d
 8015760:	08015a8d 	.word	0x08015a8d
 8015764:	08015a8d 	.word	0x08015a8d
 8015768:	08015a8d 	.word	0x08015a8d
 801576c:	08015a8d 	.word	0x08015a8d
 8015770:	08015a1d 	.word	0x08015a1d
		case 0://横壁追従制御
			record_mode=16;
 8015774:	4bd2      	ldr	r3, [pc, #840]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 8015776:	2210      	movs	r2, #16
 8015778:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801577a:	2301      	movs	r3, #1
 801577c:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 801577e:	68b8      	ldr	r0, [r7, #8]
 8015780:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8015ac4 <mode_WallSensorTuning+0x3d8>
 8015784:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8015ac8 <mode_WallSensorTuning+0x3dc>
 8015788:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8015acc <mode_WallSensorTuning+0x3e0>
 801578c:	eddf 0acf 	vldr	s1, [pc, #828]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015790:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8015ad0 <mode_WallSensorTuning+0x3e4>
 8015794:	f7ed fbea 	bl	8002f6c <straight_table2>
		break;
 8015798:	e178      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 801579a:	2300      	movs	r3, #0
 801579c:	60fb      	str	r3, [r7, #12]
 801579e:	e004      	b.n	80157aa <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 80157a0:	f7ee fbee 	bl	8003f80 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	3301      	adds	r3, #1
 80157a8:	60fb      	str	r3, [r7, #12]
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	2b14      	cmp	r3, #20
 80157ae:	ddf7      	ble.n	80157a0 <mode_WallSensorTuning+0xb4>
			}
		break;
 80157b0:	e16c      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 80157b2:	4bc3      	ldr	r3, [pc, #780]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 80157b4:	2207      	movs	r2, #7
 80157b6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80157b8:	2300      	movs	r3, #0
 80157ba:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80157bc:	2300      	movs	r3, #0
 80157be:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80157c0:	2300      	movs	r3, #0
 80157c2:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80157c4:	2300      	movs	r3, #0
 80157c6:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 80157c8:	68b8      	ldr	r0, [r7, #8]
 80157ca:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 80157ce:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80157d2:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80157d6:	eddf 0abd 	vldr	s1, [pc, #756]	; 8015acc <mode_WallSensorTuning+0x3e0>
 80157da:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8015adc <mode_WallSensorTuning+0x3f0>
 80157de:	f7ed fbc5 	bl	8002f6c <straight_table2>
			mode.WallCutMode=1;
 80157e2:	2301      	movs	r3, #1
 80157e4:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80157e6:	2300      	movs	r3, #0
 80157e8:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 80157ea:	68b8      	ldr	r0, [r7, #8]
 80157ec:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 80157f0:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80157f4:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80157f8:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80157fc:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015ae0 <mode_WallSensorTuning+0x3f4>
 8015800:	f7ed fbb4 	bl	8002f6c <straight_table2>
			mode.WallControlMode=0;
 8015804:	2300      	movs	r3, #0
 8015806:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015808:	2300      	movs	r3, #0
 801580a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 801580c:	68b8      	ldr	r0, [r7, #8]
 801580e:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 8015812:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015816:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8015acc <mode_WallSensorTuning+0x3e0>
 801581a:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 801581e:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8015ae4 <mode_WallSensorTuning+0x3f8>
 8015822:	f7ed fba3 	bl	8002f6c <straight_table2>
		break;
 8015826:	e131      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8015828:	4ba5      	ldr	r3, [pc, #660]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 801582a:	2208      	movs	r2, #8
 801582c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801582e:	2300      	movs	r3, #0
 8015830:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015832:	2300      	movs	r3, #0
 8015834:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015836:	2300      	movs	r3, #0
 8015838:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 801583a:	2300      	movs	r3, #0
 801583c:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 801583e:	68b8      	ldr	r0, [r7, #8]
 8015840:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 8015844:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015848:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 801584c:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015850:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8015ae8 <mode_WallSensorTuning+0x3fc>
 8015854:	f7ed fb8a 	bl	8002f6c <straight_table2>
			mode.WallCutMode=2;
 8015858:	2302      	movs	r3, #2
 801585a:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801585c:	2300      	movs	r3, #0
 801585e:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8015860:	68b8      	ldr	r0, [r7, #8]
 8015862:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 8015866:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 801586a:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 801586e:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015872:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8015ae0 <mode_WallSensorTuning+0x3f4>
 8015876:	f7ed fb79 	bl	8002f6c <straight_table2>
			mode.WallControlMode=0;
 801587a:	2300      	movs	r3, #0
 801587c:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801587e:	2300      	movs	r3, #0
 8015880:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8015882:	68b8      	ldr	r0, [r7, #8]
 8015884:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 8015888:	eddf 1a93 	vldr	s3, [pc, #588]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 801588c:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015890:	eddf 0a91 	vldr	s1, [pc, #580]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015894:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8015ae4 <mode_WallSensorTuning+0x3f8>
 8015898:	f7ed fb68 	bl	8002f6c <straight_table2>
		break;
 801589c:	e0f6      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 801589e:	4b88      	ldr	r3, [pc, #544]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 80158a0:	2208      	movs	r2, #8
 80158a2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80158a4:	2300      	movs	r3, #0
 80158a6:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80158ac:	2300      	movs	r3, #0
 80158ae:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80158b0:	2300      	movs	r3, #0
 80158b2:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 80158b4:	68b8      	ldr	r0, [r7, #8]
 80158b6:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 80158ba:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80158be:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80158c2:	eddf 0a82 	vldr	s1, [pc, #520]	; 8015acc <mode_WallSensorTuning+0x3e0>
 80158c6:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8015aec <mode_WallSensorTuning+0x400>
 80158ca:	f7ed fb4f 	bl	8002f6c <straight_table2>
			mode.WallCutMode=3;
 80158ce:	2303      	movs	r3, #3
 80158d0:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80158d2:	2300      	movs	r3, #0
 80158d4:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 80158d6:	68b8      	ldr	r0, [r7, #8]
 80158d8:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 80158dc:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80158e0:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80158e4:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80158e8:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8015af0 <mode_WallSensorTuning+0x404>
 80158ec:	f7ed fb3e 	bl	8002f6c <straight_table2>
			mode.WallControlMode=0;
 80158f0:	2300      	movs	r3, #0
 80158f2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80158f4:	2300      	movs	r3, #0
 80158f6:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80158f8:	68b8      	ldr	r0, [r7, #8]
 80158fa:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 80158fe:	eddf 1a76 	vldr	s3, [pc, #472]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015902:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015906:	eddf 0a74 	vldr	s1, [pc, #464]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 801590a:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8015af4 <mode_WallSensorTuning+0x408>
 801590e:	f7ed fb2d 	bl	8002f6c <straight_table2>
		break;
 8015912:	e0bb      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8015914:	2300      	movs	r3, #0
 8015916:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015918:	2300      	movs	r3, #0
 801591a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 801591c:	2300      	movs	r3, #0
 801591e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015920:	2300      	movs	r3, #0
 8015922:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8015924:	68b8      	ldr	r0, [r7, #8]
 8015926:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 801592a:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 801592e:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015932:	eddf 0a66 	vldr	s1, [pc, #408]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015936:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015aec <mode_WallSensorTuning+0x400>
 801593a:	f7ed fb17 	bl	8002f6c <straight_table2>
			mode.WallCutMode=4;
 801593e:	2304      	movs	r3, #4
 8015940:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015942:	2300      	movs	r3, #0
 8015944:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8015946:	68b8      	ldr	r0, [r7, #8]
 8015948:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 801594c:	eddf 1a62 	vldr	s3, [pc, #392]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015950:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015954:	eddf 0a60 	vldr	s1, [pc, #384]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015958:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8015af0 <mode_WallSensorTuning+0x404>
 801595c:	f7ed fb06 	bl	8002f6c <straight_table2>
			mode.WallControlMode=0;
 8015960:	2300      	movs	r3, #0
 8015962:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015964:	2300      	movs	r3, #0
 8015966:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8015968:	68b8      	ldr	r0, [r7, #8]
 801596a:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 801596e:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015972:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015976:	eddf 0a58 	vldr	s1, [pc, #352]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 801597a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8015af4 <mode_WallSensorTuning+0x408>
 801597e:	f7ed faf5 	bl	8002f6c <straight_table2>
		break;
 8015982:	e083      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(制御あり)
			record_mode=9;
 8015984:	4b4e      	ldr	r3, [pc, #312]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 8015986:	2209      	movs	r2, #9
 8015988:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801598a:	2300      	movs	r3, #0
 801598c:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801598e:	68b8      	ldr	r0, [r7, #8]
 8015990:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 8015994:	eddf 1a50 	vldr	s3, [pc, #320]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 8015998:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8015acc <mode_WallSensorTuning+0x3e0>
 801599c:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8015acc <mode_WallSensorTuning+0x3e0>
 80159a0:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8015af8 <mode_WallSensorTuning+0x40c>
 80159a4:	f7ed fae2 	bl	8002f6c <straight_table2>
		break;
 80159a8:	e070      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=10;
 80159aa:	4b45      	ldr	r3, [pc, #276]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 80159ac:	220a      	movs	r2, #10
 80159ae:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80159b0:	2300      	movs	r3, #0
 80159b2:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 80159b4:	68b8      	ldr	r0, [r7, #8]
 80159b6:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015ad4 <mode_WallSensorTuning+0x3e8>
 80159ba:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015ad8 <mode_WallSensorTuning+0x3ec>
 80159be:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8015acc <mode_WallSensorTuning+0x3e0>
 80159c2:	eddf 0a42 	vldr	s1, [pc, #264]	; 8015acc <mode_WallSensorTuning+0x3e0>
 80159c6:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8015af8 <mode_WallSensorTuning+0x40c>
 80159ca:	f7ed facf 	bl	8002f6c <straight_table2>

		break;
 80159ce:	e05d      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 80159d0:	4b3b      	ldr	r3, [pc, #236]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 80159d2:	2207      	movs	r2, #7
 80159d4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80159d6:	2303      	movs	r3, #3
 80159d8:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 15000,mode);
 80159da:	68b8      	ldr	r0, [r7, #8]
 80159dc:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015afc <mode_WallSensorTuning+0x410>
 80159e0:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015b00 <mode_WallSensorTuning+0x414>
 80159e4:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8015acc <mode_WallSensorTuning+0x3e0>
 80159e8:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015acc <mode_WallSensorTuning+0x3e0>
 80159ec:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8015b04 <mode_WallSensorTuning+0x418>
 80159f0:	f7ed fabc 	bl	8002f6c <straight_table2>
		break;
 80159f4:	e04a      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 80159f6:	4b32      	ldr	r3, [pc, #200]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 80159f8:	2208      	movs	r2, #8
 80159fa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80159fc:	2303      	movs	r3, #3
 80159fe:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8015a00:	68b8      	ldr	r0, [r7, #8]
 8015a02:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8015b08 <mode_WallSensorTuning+0x41c>
 8015a06:	eddf 1a41 	vldr	s3, [pc, #260]	; 8015b0c <mode_WallSensorTuning+0x420>
 8015a0a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015a0e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015a12:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8015b10 <mode_WallSensorTuning+0x424>
 8015a16:	f7ed faa9 	bl	8002f6c <straight_table2>
		break;
 8015a1a:	e037      	b.n	8015a8c <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8015a1c:	2305      	movs	r3, #5
 8015a1e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015a20:	2300      	movs	r3, #0
 8015a22:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015a24:	2300      	movs	r3, #0
 8015a26:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015a28:	2300      	movs	r3, #0
 8015a2a:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 8015a2c:	68b8      	ldr	r0, [r7, #8]
 8015a2e:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8015b14 <mode_WallSensorTuning+0x428>
 8015a32:	eddf 1a25 	vldr	s3, [pc, #148]	; 8015ac8 <mode_WallSensorTuning+0x3dc>
 8015a36:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015ac8 <mode_WallSensorTuning+0x3dc>
 8015a3a:	eddf 0a24 	vldr	s1, [pc, #144]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015a3e:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8015b18 <mode_WallSensorTuning+0x42c>
 8015a42:	f7ed fa93 	bl	8002f6c <straight_table2>
			mode.WallCutMode=2;
 8015a46:	2302      	movs	r3, #2
 8015a48:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 8015a4e:	68b8      	ldr	r0, [r7, #8]
 8015a50:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8015b14 <mode_WallSensorTuning+0x428>
 8015a54:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8015ac8 <mode_WallSensorTuning+0x3dc>
 8015a58:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8015ac8 <mode_WallSensorTuning+0x3dc>
 8015a5c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015ac8 <mode_WallSensorTuning+0x3dc>
 8015a60:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015b1c <mode_WallSensorTuning+0x430>
 8015a64:	f7ed fa82 	bl	8002f6c <straight_table2>
			mode.WallControlMode=0;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 8015a70:	68b8      	ldr	r0, [r7, #8]
 8015a72:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8015b14 <mode_WallSensorTuning+0x428>
 8015a76:	eddf 1a14 	vldr	s3, [pc, #80]	; 8015ac8 <mode_WallSensorTuning+0x3dc>
 8015a7a:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8015acc <mode_WallSensorTuning+0x3e0>
 8015a7e:	eddf 0a12 	vldr	s1, [pc, #72]	; 8015ac8 <mode_WallSensorTuning+0x3dc>
 8015a82:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8015b20 <mode_WallSensorTuning+0x434>
 8015a86:	f7ed fa71 	bl	8002f6c <straight_table2>
		break;
 8015a8a:	bf00      	nop
	}
	record_mode=0;
 8015a8c:	4b0c      	ldr	r3, [pc, #48]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 8015a8e:	2200      	movs	r2, #0
 8015a90:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015a92:	2003      	movs	r0, #3
 8015a94:	f7f1 ffb4 	bl	8007a00 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015a98:	2003      	movs	r0, #3
 8015a9a:	f7f1 ff89 	bl	80079b0 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015a9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015aa2:	f7f2 faad 	bl	8008000 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015aa6:	f7f2 f80d 	bl	8007ac4 <pl_FunMotor_stop>
	record_mode=0;
 8015aaa:	4b05      	ldr	r3, [pc, #20]	; (8015ac0 <mode_WallSensorTuning+0x3d4>)
 8015aac:	2200      	movs	r2, #0
 8015aae:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8015ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015ab4:	f7f2 faa4 	bl	8008000 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015ab8:	2000      	movs	r0, #0
 8015aba:	f7f1 ff6f 	bl	800799c <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015abe:	e034      	b.n	8015b2a <mode_WallSensorTuning+0x43e>
 8015ac0:	2000d96c 	.word	0x2000d96c
 8015ac4:	459c4000 	.word	0x459c4000
 8015ac8:	43fa0000 	.word	0x43fa0000
 8015acc:	00000000 	.word	0x00000000
 8015ad0:	44b40000 	.word	0x44b40000
 8015ad4:	453b8000 	.word	0x453b8000
 8015ad8:	43960000 	.word	0x43960000
 8015adc:	431b8000 	.word	0x431b8000
 8015ae0:	41b40000 	.word	0x41b40000
 8015ae4:	42870000 	.word	0x42870000
 8015ae8:	42cd0000 	.word	0x42cd0000
 8015aec:	4329c77b 	.word	0x4329c77b
 8015af0:	41fe8ef6 	.word	0x41fe8ef6
 8015af4:	42beeb39 	.word	0x42beeb39
 8015af8:	43beeb39 	.word	0x43beeb39
 8015afc:	466a6000 	.word	0x466a6000
 8015b00:	44fa0000 	.word	0x44fa0000
 8015b04:	443eeb39 	.word	0x443eeb39
 8015b08:	461c4000 	.word	0x461c4000
 8015b0c:	442f0000 	.word	0x442f0000
 8015b10:	4484977b 	.word	0x4484977b
 8015b14:	44bb8000 	.word	0x44bb8000
 8015b18:	43488000 	.word	0x43488000
 8015b1c:	42340000 	.word	0x42340000
 8015b20:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8015b24:	2001      	movs	r0, #1
 8015b26:	f001 fea7 	bl	8017878 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015b2a:	4b0e      	ldr	r3, [pc, #56]	; (8015b64 <mode_WallSensorTuning+0x478>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b32:	ddf7      	ble.n	8015b24 <mode_WallSensorTuning+0x438>
 8015b34:	4b0b      	ldr	r3, [pc, #44]	; (8015b64 <mode_WallSensorTuning+0x478>)
 8015b36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015b3a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b3e:	ddf1      	ble.n	8015b24 <mode_WallSensorTuning+0x438>
 8015b40:	4b08      	ldr	r3, [pc, #32]	; (8015b64 <mode_WallSensorTuning+0x478>)
 8015b42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015b46:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b4a:	ddeb      	ble.n	8015b24 <mode_WallSensorTuning+0x438>
	}
	pl_r_blue_LED(ON);
 8015b4c:	2001      	movs	r0, #1
 8015b4e:	f7f1 fa81 	bl	8007054 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015b52:	2001      	movs	r0, #1
 8015b54:	f7f1 fa90 	bl	8007078 <pl_l_blue_LED>
	record_print();
 8015b58:	f000 fa70 	bl	801603c <record_print>



}
 8015b5c:	bf00      	nop
 8015b5e:	3710      	adds	r7, #16
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	200002b8 	.word	0x200002b8

08015b68 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	4603      	mov	r3, r0
 8015b70:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8015b72:	2300      	movs	r3, #0
 8015b74:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8015b82:	2001      	movs	r0, #1
 8015b84:	f7f1 ff0a 	bl	800799c <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015b88:	2003      	movs	r0, #3
 8015b8a:	f7f1 ff11 	bl	80079b0 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015b8e:	2003      	movs	r0, #3
 8015b90:	f7f1 ff36 	bl	8007a00 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.56);
 8015b94:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8015ee0 <mode_WallSensorTuning_fast+0x378>
 8015b98:	f7f1 ff9e 	bl	8007ad8 <pl_FunMotor_duty>
	pl_FunMotor_start();
 8015b9c:	f7f1 ff88 	bl	8007ab0 <pl_FunMotor_start>
	HAL_Delay(600);
 8015ba0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015ba4:	f001 fe68 	bl	8017878 <HAL_Delay>
	reset_gyro();
 8015ba8:	f7eb fd8e 	bl	80016c8 <reset_gyro>
	reset_speed();
 8015bac:	f7eb fa34 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015bb0:	f7ee fdf8 	bl	80047a4 <clear_Ierror>
	angle=0;
 8015bb4:	4bcb      	ldr	r3, [pc, #812]	; (8015ee4 <mode_WallSensorTuning_fast+0x37c>)
 8015bb6:	f04f 0200 	mov.w	r2, #0
 8015bba:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8015bbc:	79fb      	ldrb	r3, [r7, #7]
 8015bbe:	2b0f      	cmp	r3, #15
 8015bc0:	f200 8173 	bhi.w	8015eaa <mode_WallSensorTuning_fast+0x342>
 8015bc4:	a201      	add	r2, pc, #4	; (adr r2, 8015bcc <mode_WallSensorTuning_fast+0x64>)
 8015bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bca:	bf00      	nop
 8015bcc:	08015c0d 	.word	0x08015c0d
 8015bd0:	08015eab 	.word	0x08015eab
 8015bd4:	08015eab 	.word	0x08015eab
 8015bd8:	08015c3f 	.word	0x08015c3f
 8015bdc:	08015cb5 	.word	0x08015cb5
 8015be0:	08015d2b 	.word	0x08015d2b
 8015be4:	08015da1 	.word	0x08015da1
 8015be8:	08015dc7 	.word	0x08015dc7
 8015bec:	08015ded 	.word	0x08015ded
 8015bf0:	08015e13 	.word	0x08015e13
 8015bf4:	08015e39 	.word	0x08015e39
 8015bf8:	08015e5f 	.word	0x08015e5f
 8015bfc:	08015e85 	.word	0x08015e85
 8015c00:	08015eab 	.word	0x08015eab
 8015c04:	08015eab 	.word	0x08015eab
 8015c08:	08015eab 	.word	0x08015eab
		case 0://横壁追従制御
			record_mode=15;
 8015c0c:	4bb6      	ldr	r3, [pc, #728]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015c0e:	220f      	movs	r2, #15
 8015c10:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015c12:	2301      	movs	r3, #1
 8015c14:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 8015c16:	4bb5      	ldr	r3, [pc, #724]	; (8015eec <mode_WallSensorTuning_fast+0x384>)
 8015c18:	2201      	movs	r2, #1
 8015c1a:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8015c1c:	68f8      	ldr	r0, [r7, #12]
 8015c1e:	ed9f 2ab4 	vldr	s4, [pc, #720]	; 8015ef0 <mode_WallSensorTuning_fast+0x388>
 8015c22:	eddf 1ab4 	vldr	s3, [pc, #720]	; 8015ef4 <mode_WallSensorTuning_fast+0x38c>
 8015c26:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015c2a:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015c2e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8015efc <mode_WallSensorTuning_fast+0x394>
 8015c32:	f7ed f99b 	bl	8002f6c <straight_table2>
			highspeed_mode=0;
 8015c36:	4bad      	ldr	r3, [pc, #692]	; (8015eec <mode_WallSensorTuning_fast+0x384>)
 8015c38:	2200      	movs	r2, #0
 8015c3a:	701a      	strb	r2, [r3, #0]
		break;
 8015c3c:	e135      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 1://なし
		break;
		case 2://なし
		break;
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8015c3e:	4baa      	ldr	r3, [pc, #680]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015c40:	2208      	movs	r2, #8
 8015c42:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015c44:	2301      	movs	r3, #1
 8015c46:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015c50:	2300      	movs	r3, #0
 8015c52:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 600, 600,15000,mode);
 8015c54:	68f8      	ldr	r0, [r7, #12]
 8015c56:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8015f00 <mode_WallSensorTuning_fast+0x398>
 8015c5a:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015c5e:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015c62:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015c66:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8015f08 <mode_WallSensorTuning_fast+0x3a0>
 8015c6a:	f7ed f97f 	bl	8002f6c <straight_table2>
			mode.WallCutMode=2;
 8015c6e:	2302      	movs	r3, #2
 8015c70:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015c72:	2300      	movs	r3, #0
 8015c74:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 600, 600, 600,15000,mode);
 8015c76:	68f8      	ldr	r0, [r7, #12]
 8015c78:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 8015f00 <mode_WallSensorTuning_fast+0x398>
 8015c7c:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015c80:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015c84:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015c88:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8015f0c <mode_WallSensorTuning_fast+0x3a4>
 8015c8c:	f7ed f96e 	bl	8002f6c <straight_table2>
			mode.WallControlMode=1;
 8015c90:	2301      	movs	r3, #1
 8015c92:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015c94:	2300      	movs	r3, #0
 8015c96:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 600, 0, 600,15000,mode);
 8015c98:	68f8      	ldr	r0, [r7, #12]
 8015c9a:	ed9f 2a99 	vldr	s4, [pc, #612]	; 8015f00 <mode_WallSensorTuning_fast+0x398>
 8015c9e:	eddf 1a99 	vldr	s3, [pc, #612]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015ca2:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015ca6:	eddf 0a97 	vldr	s1, [pc, #604]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015caa:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8015f10 <mode_WallSensorTuning_fast+0x3a8>
 8015cae:	f7ed f95d 	bl	8002f6c <straight_table2>
		break;
 8015cb2:	e0fa      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8015cb4:	4b8c      	ldr	r3, [pc, #560]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015cb6:	2208      	movs	r2, #8
 8015cb8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015cba:	2300      	movs	r3, #0
 8015cbc:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 600, 600,10000,mode);
 8015cca:	68f8      	ldr	r0, [r7, #12]
 8015ccc:	ed9f 2a91 	vldr	s4, [pc, #580]	; 8015f14 <mode_WallSensorTuning_fast+0x3ac>
 8015cd0:	eddf 1a8c 	vldr	s3, [pc, #560]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015cd4:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015cd8:	eddf 0a87 	vldr	s1, [pc, #540]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015cdc:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8015f18 <mode_WallSensorTuning_fast+0x3b0>
 8015ce0:	f7ed f944 	bl	8002f6c <straight_table2>
			mode.WallCutMode=3;
 8015ce4:	2303      	movs	r3, #3
 8015ce6:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8015f14 <mode_WallSensorTuning_fast+0x3ac>
 8015cf2:	eddf 1a84 	vldr	s3, [pc, #528]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015cf6:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015cfa:	eddf 0a82 	vldr	s1, [pc, #520]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015cfe:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8015f1c <mode_WallSensorTuning_fast+0x3b4>
 8015d02:	f7ed f933 	bl	8002f6c <straight_table2>
			mode.WallControlMode=0;
 8015d06:	2300      	movs	r3, #0
 8015d08:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8015d0e:	68f8      	ldr	r0, [r7, #12]
 8015d10:	ed9f 2a80 	vldr	s4, [pc, #512]	; 8015f14 <mode_WallSensorTuning_fast+0x3ac>
 8015d14:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d18:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015d1c:	eddf 0a79 	vldr	s1, [pc, #484]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d20:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8015f20 <mode_WallSensorTuning_fast+0x3b8>
 8015d24:	f7ed f922 	bl	8002f6c <straight_table2>
		break;
 8015d28:	e0bf      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8015d2a:	4b6f      	ldr	r3, [pc, #444]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015d2c:	2208      	movs	r2, #8
 8015d2e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015d30:	2300      	movs	r3, #0
 8015d32:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015d34:	2300      	movs	r3, #0
 8015d36:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 600, 600,10000,mode);
 8015d40:	68f8      	ldr	r0, [r7, #12]
 8015d42:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8015f14 <mode_WallSensorTuning_fast+0x3ac>
 8015d46:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d4a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d4e:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015d52:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8015f18 <mode_WallSensorTuning_fast+0x3b0>
 8015d56:	f7ed f909 	bl	8002f6c <straight_table2>
			mode.WallCutMode=4;
 8015d5a:	2304      	movs	r3, #4
 8015d5c:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8015d62:	68f8      	ldr	r0, [r7, #12]
 8015d64:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8015f14 <mode_WallSensorTuning_fast+0x3ac>
 8015d68:	eddf 1a66 	vldr	s3, [pc, #408]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d6c:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d70:	eddf 0a64 	vldr	s1, [pc, #400]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d74:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8015f1c <mode_WallSensorTuning_fast+0x3b4>
 8015d78:	f7ed f8f8 	bl	8002f6c <straight_table2>
			mode.WallControlMode=0;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015d80:	2300      	movs	r3, #0
 8015d82:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8015d84:	68f8      	ldr	r0, [r7, #12]
 8015d86:	ed9f 2a63 	vldr	s4, [pc, #396]	; 8015f14 <mode_WallSensorTuning_fast+0x3ac>
 8015d8a:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d8e:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015d92:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8015f04 <mode_WallSensorTuning_fast+0x39c>
 8015d96:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8015f20 <mode_WallSensorTuning_fast+0x3b8>
 8015d9a:	f7ed f8e7 	bl	8002f6c <straight_table2>
		break;
 8015d9e:	e084      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 6://斜め直進(制御あり)
			record_mode=7;
 8015da0:	4b51      	ldr	r3, [pc, #324]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015da2:	2207      	movs	r2, #7
 8015da4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015da6:	2300      	movs	r3, #0
 8015da8:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 8015f24 <mode_WallSensorTuning_fast+0x3bc>
 8015db0:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8015f28 <mode_WallSensorTuning_fast+0x3c0>
 8015db4:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015db8:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015dbc:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8015f2c <mode_WallSensorTuning_fast+0x3c4>
 8015dc0:	f7ed f8d4 	bl	8002f6c <straight_table2>
		break;
 8015dc4:	e071      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 8015dc6:	4b48      	ldr	r3, [pc, #288]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015dc8:	2209      	movs	r2, #9
 8015dca:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8015dd0:	68f8      	ldr	r0, [r7, #12]
 8015dd2:	ed9f 2a54 	vldr	s4, [pc, #336]	; 8015f24 <mode_WallSensorTuning_fast+0x3bc>
 8015dd6:	eddf 1a54 	vldr	s3, [pc, #336]	; 8015f28 <mode_WallSensorTuning_fast+0x3c0>
 8015dda:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015dde:	eddf 0a46 	vldr	s1, [pc, #280]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015de2:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015f2c <mode_WallSensorTuning_fast+0x3c4>
 8015de6:	f7ed f8c1 	bl	8002f6c <straight_table2>

		break;
 8015dea:	e05e      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015dec:	4b3e      	ldr	r3, [pc, #248]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015dee:	2207      	movs	r2, #7
 8015df0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015df2:	2303      	movs	r3, #3
 8015df4:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8015df6:	68f8      	ldr	r0, [r7, #12]
 8015df8:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8015f24 <mode_WallSensorTuning_fast+0x3bc>
 8015dfc:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8015f30 <mode_WallSensorTuning_fast+0x3c8>
 8015e00:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e04:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e08:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8015f34 <mode_WallSensorTuning_fast+0x3cc>
 8015e0c:	f7ed f8ae 	bl	8002f6c <straight_table2>
		break;
 8015e10:	e04b      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 9:
			record_mode=8;
 8015e12:	4b35      	ldr	r3, [pc, #212]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015e14:	2208      	movs	r2, #8
 8015e16:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015e18:	2303      	movs	r3, #3
 8015e1a:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8015e1c:	68f8      	ldr	r0, [r7, #12]
 8015e1e:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8015f24 <mode_WallSensorTuning_fast+0x3bc>
 8015e22:	eddf 1a43 	vldr	s3, [pc, #268]	; 8015f30 <mode_WallSensorTuning_fast+0x3c8>
 8015e26:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e2a:	eddf 0a33 	vldr	s1, [pc, #204]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e2e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8015f38 <mode_WallSensorTuning_fast+0x3d0>
 8015e32:	f7ed f89b 	bl	8002f6c <straight_table2>
		break;
 8015e36:	e038      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 10:
			record_mode=10;
 8015e38:	4b2b      	ldr	r3, [pc, #172]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015e3a:	220a      	movs	r2, #10
 8015e3c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015e3e:	2303      	movs	r3, #3
 8015e40:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8015e42:	68f8      	ldr	r0, [r7, #12]
 8015e44:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8015f24 <mode_WallSensorTuning_fast+0x3bc>
 8015e48:	eddf 1a39 	vldr	s3, [pc, #228]	; 8015f30 <mode_WallSensorTuning_fast+0x3c8>
 8015e4c:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e50:	eddf 0a29 	vldr	s1, [pc, #164]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e54:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8015f34 <mode_WallSensorTuning_fast+0x3cc>
 8015e58:	f7ed f888 	bl	8002f6c <straight_table2>
		break;
 8015e5c:	e025      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 11:
			record_mode=11;
 8015e5e:	4b22      	ldr	r3, [pc, #136]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015e60:	220b      	movs	r2, #11
 8015e62:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015e64:	2303      	movs	r3, #3
 8015e66:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8015e68:	68f8      	ldr	r0, [r7, #12]
 8015e6a:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8015f00 <mode_WallSensorTuning_fast+0x398>
 8015e6e:	eddf 1a33 	vldr	s3, [pc, #204]	; 8015f3c <mode_WallSensorTuning_fast+0x3d4>
 8015e72:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e76:	eddf 0a20 	vldr	s1, [pc, #128]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e7a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015f34 <mode_WallSensorTuning_fast+0x3cc>
 8015e7e:	f7ed f875 	bl	8002f6c <straight_table2>
		break;
 8015e82:	e012      	b.n	8015eaa <mode_WallSensorTuning_fast+0x342>
		case 12:
			record_mode=12;
 8015e84:	4b18      	ldr	r3, [pc, #96]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015e86:	220c      	movs	r2, #12
 8015e88:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015e8a:	2303      	movs	r3, #3
 8015e8c:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8015f00 <mode_WallSensorTuning_fast+0x398>
 8015e94:	eddf 1a29 	vldr	s3, [pc, #164]	; 8015f3c <mode_WallSensorTuning_fast+0x3d4>
 8015e98:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015e9c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8015ef8 <mode_WallSensorTuning_fast+0x390>
 8015ea0:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8015f34 <mode_WallSensorTuning_fast+0x3cc>
 8015ea4:	f7ed f862 	bl	8002f6c <straight_table2>
		break;
 8015ea8:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 8015eaa:	4b0f      	ldr	r3, [pc, #60]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015eac:	2200      	movs	r2, #0
 8015eae:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015eb0:	2003      	movs	r0, #3
 8015eb2:	f7f1 fda5 	bl	8007a00 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015eb6:	2003      	movs	r0, #3
 8015eb8:	f7f1 fd7a 	bl	80079b0 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015ebc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015ec0:	f7f2 f89e 	bl	8008000 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015ec4:	f7f1 fdfe 	bl	8007ac4 <pl_FunMotor_stop>
	record_mode=0;
 8015ec8:	4b07      	ldr	r3, [pc, #28]	; (8015ee8 <mode_WallSensorTuning_fast+0x380>)
 8015eca:	2200      	movs	r2, #0
 8015ecc:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8015ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015ed2:	f7f2 f895 	bl	8008000 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015ed6:	2000      	movs	r0, #0
 8015ed8:	f7f1 fd60 	bl	800799c <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015edc:	e033      	b.n	8015f46 <mode_WallSensorTuning_fast+0x3de>
 8015ede:	bf00      	nop
 8015ee0:	3f0f5c29 	.word	0x3f0f5c29
 8015ee4:	20000264 	.word	0x20000264
 8015ee8:	2000d96c 	.word	0x2000d96c
 8015eec:	20000808 	.word	0x20000808
 8015ef0:	46bb8000 	.word	0x46bb8000
 8015ef4:	459c4000 	.word	0x459c4000
 8015ef8:	00000000 	.word	0x00000000
 8015efc:	44e39000 	.word	0x44e39000
 8015f00:	466a6000 	.word	0x466a6000
 8015f04:	44160000 	.word	0x44160000
 8015f08:	42cd0000 	.word	0x42cd0000
 8015f0c:	41b40000 	.word	0x41b40000
 8015f10:	42e10000 	.word	0x42e10000
 8015f14:	461c4000 	.word	0x461c4000
 8015f18:	4321c77b 	.word	0x4321c77b
 8015f1c:	41fe8ef6 	.word	0x41fe8ef6
 8015f20:	42beeb39 	.word	0x42beeb39
 8015f24:	469c4000 	.word	0x469c4000
 8015f28:	44fa0000 	.word	0x44fa0000
 8015f2c:	445ebd17 	.word	0x445ebd17
 8015f30:	455ac000 	.word	0x455ac000
 8015f34:	443eeb39 	.word	0x443eeb39
 8015f38:	4484977b 	.word	0x4484977b
 8015f3c:	453b8000 	.word	0x453b8000
		HAL_Delay(1);
 8015f40:	2001      	movs	r0, #1
 8015f42:	f001 fc99 	bl	8017878 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015f46:	4b0e      	ldr	r3, [pc, #56]	; (8015f80 <mode_WallSensorTuning_fast+0x418>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f4e:	ddf7      	ble.n	8015f40 <mode_WallSensorTuning_fast+0x3d8>
 8015f50:	4b0b      	ldr	r3, [pc, #44]	; (8015f80 <mode_WallSensorTuning_fast+0x418>)
 8015f52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015f56:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f5a:	ddf1      	ble.n	8015f40 <mode_WallSensorTuning_fast+0x3d8>
 8015f5c:	4b08      	ldr	r3, [pc, #32]	; (8015f80 <mode_WallSensorTuning_fast+0x418>)
 8015f5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015f62:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f66:	ddeb      	ble.n	8015f40 <mode_WallSensorTuning_fast+0x3d8>
	}
	pl_r_blue_LED(ON);
 8015f68:	2001      	movs	r0, #1
 8015f6a:	f7f1 f873 	bl	8007054 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015f6e:	2001      	movs	r0, #1
 8015f70:	f7f1 f882 	bl	8007078 <pl_l_blue_LED>
	record_print();
 8015f74:	f000 f862 	bl	801603c <record_print>



}
 8015f78:	bf00      	nop
 8015f7a:	3710      	adds	r7, #16
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}
 8015f80:	200002b8 	.word	0x200002b8

08015f84 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8015f84:	b480      	push	{r7}
 8015f86:	af00      	add	r7, sp, #0
	record_mode = 0;
 8015f88:	4b06      	ldr	r3, [pc, #24]	; (8015fa4 <record_reset+0x20>)
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8015f8e:	4b06      	ldr	r3, [pc, #24]	; (8015fa8 <record_reset+0x24>)
 8015f90:	2200      	movs	r2, #0
 8015f92:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8015f94:	4b05      	ldr	r3, [pc, #20]	; (8015fac <record_reset+0x28>)
 8015f96:	2200      	movs	r2, #0
 8015f98:	701a      	strb	r2, [r3, #0]
}
 8015f9a:	bf00      	nop
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa2:	4770      	bx	lr
 8015fa4:	2000d96c 	.word	0x2000d96c
 8015fa8:	2000d970 	.word	0x2000d970
 8015fac:	2000d978 	.word	0x2000d978

08015fb0 <record_data>:

void record_data(float *input_record_data, int numlen) {
 8015fb0:	b490      	push	{r4, r7}
 8015fb2:	b084      	sub	sp, #16
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
 8015fb8:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8015fba:	2300      	movs	r3, #0
 8015fbc:	60fb      	str	r3, [r7, #12]
 8015fbe:	e013      	b.n	8015fe8 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	009b      	lsls	r3, r3, #2
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8015fc8:	4b18      	ldr	r3, [pc, #96]	; (801602c <record_data+0x7c>)
 8015fca:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8015fcc:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8015fce:	4818      	ldr	r0, [pc, #96]	; (8016030 <record_data+0x80>)
 8015fd0:	68f9      	ldr	r1, [r7, #12]
 8015fd2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8015fd6:	fb04 f101 	mul.w	r1, r4, r1
 8015fda:	440b      	add	r3, r1
 8015fdc:	009b      	lsls	r3, r3, #2
 8015fde:	4403      	add	r3, r0
 8015fe0:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	60fb      	str	r3, [r7, #12]
 8015fe8:	68fa      	ldr	r2, [r7, #12]
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	dbe7      	blt.n	8015fc0 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8015ff0:	4b10      	ldr	r3, [pc, #64]	; (8016034 <record_data+0x84>)
 8015ff2:	781b      	ldrb	r3, [r3, #0]
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	d103      	bne.n	8016000 <record_data+0x50>
		record_end_point = record_time;
 8015ff8:	4b0c      	ldr	r3, [pc, #48]	; (801602c <record_data+0x7c>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	4a0e      	ldr	r2, [pc, #56]	; (8016038 <record_data+0x88>)
 8015ffe:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016000:	4b0a      	ldr	r3, [pc, #40]	; (801602c <record_data+0x7c>)
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	3301      	adds	r3, #1
 8016006:	4a09      	ldr	r2, [pc, #36]	; (801602c <record_data+0x7c>)
 8016008:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 801600a:	4b08      	ldr	r3, [pc, #32]	; (801602c <record_data+0x7c>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016012:	4293      	cmp	r3, r2
 8016014:	dd05      	ble.n	8016022 <record_data+0x72>
		record_time = 0;
 8016016:	4b05      	ldr	r3, [pc, #20]	; (801602c <record_data+0x7c>)
 8016018:	2200      	movs	r2, #0
 801601a:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 801601c:	4b05      	ldr	r3, [pc, #20]	; (8016034 <record_data+0x84>)
 801601e:	2201      	movs	r2, #1
 8016020:	701a      	strb	r2, [r3, #0]
	}

}
 8016022:	bf00      	nop
 8016024:	3710      	adds	r7, #16
 8016026:	46bd      	mov	sp, r7
 8016028:	bc90      	pop	{r4, r7}
 801602a:	4770      	bx	lr
 801602c:	2000d970 	.word	0x2000d970
 8016030:	20001dec 	.word	0x20001dec
 8016034:	2000d978 	.word	0x2000d978
 8016038:	2000d974 	.word	0x2000d974

0801603c <record_print>:

void record_print(void) {
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8016042:	4b3a      	ldr	r3, [pc, #232]	; (801612c <record_print+0xf0>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d12e      	bne.n	80160a8 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 801604a:	2300      	movs	r3, #0
 801604c:	60fb      	str	r3, [r7, #12]
 801604e:	e025      	b.n	801609c <record_print+0x60>

			printf("%d", a);
 8016050:	68f9      	ldr	r1, [r7, #12]
 8016052:	4837      	ldr	r0, [pc, #220]	; (8016130 <record_print+0xf4>)
 8016054:	f009 fb62 	bl	801f71c <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016058:	2300      	movs	r3, #0
 801605a:	607b      	str	r3, [r7, #4]
 801605c:	e015      	b.n	801608a <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 801605e:	4935      	ldr	r1, [pc, #212]	; (8016134 <record_print+0xf8>)
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016066:	fb03 f202 	mul.w	r2, r3, r2
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	4413      	add	r3, r2
 801606e:	009b      	lsls	r3, r3, #2
 8016070:	440b      	add	r3, r1
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	4618      	mov	r0, r3
 8016076:	f7ea fa8f 	bl	8000598 <__aeabi_f2d>
 801607a:	4602      	mov	r2, r0
 801607c:	460b      	mov	r3, r1
 801607e:	482e      	ldr	r0, [pc, #184]	; (8016138 <record_print+0xfc>)
 8016080:	f009 fb4c 	bl	801f71c <iprintf>
					record_count++) {
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	3301      	adds	r3, #1
 8016088:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2b03      	cmp	r3, #3
 801608e:	dde6      	ble.n	801605e <record_print+0x22>
			}
			printf("\n");
 8016090:	200a      	movs	r0, #10
 8016092:	f009 fb5b 	bl	801f74c <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	3301      	adds	r3, #1
 801609a:	60fb      	str	r3, [r7, #12]
 801609c:	4b27      	ldr	r3, [pc, #156]	; (801613c <record_print+0x100>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	68fa      	ldr	r2, [r7, #12]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	dbd4      	blt.n	8016050 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 80160a6:	e03c      	b.n	8016122 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 80160a8:	2300      	movs	r3, #0
 80160aa:	60fb      	str	r3, [r7, #12]
 80160ac:	e034      	b.n	8016118 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 80160ae:	4b24      	ldr	r3, [pc, #144]	; (8016140 <record_print+0x104>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	3301      	adds	r3, #1
 80160b4:	68fa      	ldr	r2, [r7, #12]
 80160b6:	4413      	add	r3, r2
 80160b8:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80160c0:	4293      	cmp	r3, r2
 80160c2:	dd03      	ble.n	80160cc <record_print+0x90>
				time_index -= max_record_time;
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 80160ca:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 80160cc:	68f9      	ldr	r1, [r7, #12]
 80160ce:	4818      	ldr	r0, [pc, #96]	; (8016130 <record_print+0xf4>)
 80160d0:	f009 fb24 	bl	801f71c <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 80160d4:	2300      	movs	r3, #0
 80160d6:	603b      	str	r3, [r7, #0]
 80160d8:	e015      	b.n	8016106 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 80160da:	4916      	ldr	r1, [pc, #88]	; (8016134 <record_print+0xf8>)
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80160e2:	fb03 f202 	mul.w	r2, r3, r2
 80160e6:	68bb      	ldr	r3, [r7, #8]
 80160e8:	4413      	add	r3, r2
 80160ea:	009b      	lsls	r3, r3, #2
 80160ec:	440b      	add	r3, r1
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7ea fa51 	bl	8000598 <__aeabi_f2d>
 80160f6:	4602      	mov	r2, r0
 80160f8:	460b      	mov	r3, r1
 80160fa:	480f      	ldr	r0, [pc, #60]	; (8016138 <record_print+0xfc>)
 80160fc:	f009 fb0e 	bl	801f71c <iprintf>
					record_count++) {
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	3301      	adds	r3, #1
 8016104:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	2b03      	cmp	r3, #3
 801610a:	dde6      	ble.n	80160da <record_print+0x9e>
			printf("\n");
 801610c:	200a      	movs	r0, #10
 801610e:	f009 fb1d 	bl	801f74c <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	3301      	adds	r3, #1
 8016116:	60fb      	str	r3, [r7, #12]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801611e:	4293      	cmp	r3, r2
 8016120:	ddc5      	ble.n	80160ae <record_print+0x72>
}
 8016122:	bf00      	nop
 8016124:	3710      	adds	r7, #16
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	2000d978 	.word	0x2000d978
 8016130:	08022128 	.word	0x08022128
 8016134:	20001dec 	.word	0x20001dec
 8016138:	0802212c 	.word	0x0802212c
 801613c:	2000d970 	.word	0x2000d970
 8016140:	2000d974 	.word	0x2000d974

08016144 <interrupt_record>:

void interrupt_record(void) {
 8016144:	b580      	push	{r7, lr}
 8016146:	b084      	sub	sp, #16
 8016148:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 801614a:	4baf      	ldr	r3, [pc, #700]	; (8016408 <interrupt_record+0x2c4>)
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	2b01      	cmp	r3, #1
 8016150:	d110      	bne.n	8016174 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016152:	4bae      	ldr	r3, [pc, #696]	; (801640c <interrupt_record+0x2c8>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016158:	4bad      	ldr	r3, [pc, #692]	; (8016410 <interrupt_record+0x2cc>)
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 801615e:	4bad      	ldr	r3, [pc, #692]	; (8016414 <interrupt_record+0x2d0>)
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016164:	4bac      	ldr	r3, [pc, #688]	; (8016418 <interrupt_record+0x2d4>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801616a:	463b      	mov	r3, r7
 801616c:	2104      	movs	r1, #4
 801616e:	4618      	mov	r0, r3
 8016170:	f7ff ff1e 	bl	8015fb0 <record_data>
		}
	if (record_mode == 2) {
 8016174:	4ba4      	ldr	r3, [pc, #656]	; (8016408 <interrupt_record+0x2c4>)
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	2b02      	cmp	r3, #2
 801617a:	d11b      	bne.n	80161b4 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 801617c:	4ba7      	ldr	r3, [pc, #668]	; (801641c <interrupt_record+0x2d8>)
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016182:	4ba7      	ldr	r3, [pc, #668]	; (8016420 <interrupt_record+0x2dc>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016188:	4ba6      	ldr	r3, [pc, #664]	; (8016424 <interrupt_record+0x2e0>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 801618e:	4ba6      	ldr	r3, [pc, #664]	; (8016428 <interrupt_record+0x2e4>)
 8016190:	ed93 7a00 	vldr	s14, [r3]
 8016194:	4ba5      	ldr	r3, [pc, #660]	; (801642c <interrupt_record+0x2e8>)
 8016196:	edd3 7a00 	vldr	s15, [r3]
 801619a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801619e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80161a6:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 80161aa:	463b      	mov	r3, r7
 80161ac:	2104      	movs	r1, #4
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7ff fefe 	bl	8015fb0 <record_data>
		}
	if (record_mode == 3) {
 80161b4:	4b94      	ldr	r3, [pc, #592]	; (8016408 <interrupt_record+0x2c4>)
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	2b03      	cmp	r3, #3
 80161ba:	d126      	bne.n	801620a <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 80161bc:	4b99      	ldr	r3, [pc, #612]	; (8016424 <interrupt_record+0x2e0>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 80161c2:	4b98      	ldr	r3, [pc, #608]	; (8016424 <interrupt_record+0x2e0>)
 80161c4:	689b      	ldr	r3, [r3, #8]
 80161c6:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 80161c8:	4b97      	ldr	r3, [pc, #604]	; (8016428 <interrupt_record+0x2e4>)
 80161ca:	ed93 7a00 	vldr	s14, [r3]
 80161ce:	4b97      	ldr	r3, [pc, #604]	; (801642c <interrupt_record+0x2e8>)
 80161d0:	edd3 7a00 	vldr	s15, [r3]
 80161d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80161e0:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 80161e4:	4b92      	ldr	r3, [pc, #584]	; (8016430 <interrupt_record+0x2ec>)
 80161e6:	ed93 7a00 	vldr	s14, [r3]
 80161ea:	4b92      	ldr	r3, [pc, #584]	; (8016434 <interrupt_record+0x2f0>)
 80161ec:	edd3 7a00 	vldr	s15, [r3]
 80161f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80161fc:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016200:	463b      	mov	r3, r7
 8016202:	2104      	movs	r1, #4
 8016204:	4618      	mov	r0, r3
 8016206:	f7ff fed3 	bl	8015fb0 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 801620a:	4b7f      	ldr	r3, [pc, #508]	; (8016408 <interrupt_record+0x2c4>)
 801620c:	781b      	ldrb	r3, [r3, #0]
 801620e:	2b04      	cmp	r3, #4
 8016210:	d126      	bne.n	8016260 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8016212:	4b84      	ldr	r3, [pc, #528]	; (8016424 <interrupt_record+0x2e0>)
 8016214:	689b      	ldr	r3, [r3, #8]
 8016216:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8016218:	4b7e      	ldr	r3, [pc, #504]	; (8016414 <interrupt_record+0x2d0>)
 801621a:	ed93 7a00 	vldr	s14, [r3]
 801621e:	4b7e      	ldr	r3, [pc, #504]	; (8016418 <interrupt_record+0x2d4>)
 8016220:	edd3 7a00 	vldr	s15, [r3]
 8016224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016228:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801622c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016230:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8016234:	4b80      	ldr	r3, [pc, #512]	; (8016438 <interrupt_record+0x2f4>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 801623a:	4b7d      	ldr	r3, [pc, #500]	; (8016430 <interrupt_record+0x2ec>)
 801623c:	ed93 7a00 	vldr	s14, [r3]
 8016240:	4b7c      	ldr	r3, [pc, #496]	; (8016434 <interrupt_record+0x2f0>)
 8016242:	edd3 7a00 	vldr	s15, [r3]
 8016246:	ee37 7a27 	vadd.f32	s14, s14, s15
 801624a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801624e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016252:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016256:	463b      	mov	r3, r7
 8016258:	2104      	movs	r1, #4
 801625a:	4618      	mov	r0, r3
 801625c:	f7ff fea8 	bl	8015fb0 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016260:	4b69      	ldr	r3, [pc, #420]	; (8016408 <interrupt_record+0x2c4>)
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	2b05      	cmp	r3, #5
 8016266:	d110      	bne.n	801628a <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8016268:	4b6e      	ldr	r3, [pc, #440]	; (8016424 <interrupt_record+0x2e0>)
 801626a:	689b      	ldr	r3, [r3, #8]
 801626c:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 801626e:	4b69      	ldr	r3, [pc, #420]	; (8016414 <interrupt_record+0x2d0>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016274:	4b68      	ldr	r3, [pc, #416]	; (8016418 <interrupt_record+0x2d4>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 801627a:	4b6f      	ldr	r3, [pc, #444]	; (8016438 <interrupt_record+0x2f4>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016280:	463b      	mov	r3, r7
 8016282:	2104      	movs	r1, #4
 8016284:	4618      	mov	r0, r3
 8016286:	f7ff fe93 	bl	8015fb0 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 801628a:	4b5f      	ldr	r3, [pc, #380]	; (8016408 <interrupt_record+0x2c4>)
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	2b05      	cmp	r3, #5
 8016290:	d110      	bne.n	80162b4 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 8016292:	4b6a      	ldr	r3, [pc, #424]	; (801643c <interrupt_record+0x2f8>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016298:	4b5e      	ldr	r3, [pc, #376]	; (8016414 <interrupt_record+0x2d0>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 801629e:	4b5e      	ldr	r3, [pc, #376]	; (8016418 <interrupt_record+0x2d4>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80162a4:	4b64      	ldr	r3, [pc, #400]	; (8016438 <interrupt_record+0x2f4>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80162aa:	463b      	mov	r3, r7
 80162ac:	2104      	movs	r1, #4
 80162ae:	4618      	mov	r0, r3
 80162b0:	f7ff fe7e 	bl	8015fb0 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 80162b4:	4b54      	ldr	r3, [pc, #336]	; (8016408 <interrupt_record+0x2c4>)
 80162b6:	781b      	ldrb	r3, [r3, #0]
 80162b8:	2b06      	cmp	r3, #6
 80162ba:	d110      	bne.n	80162de <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 80162bc:	4b59      	ldr	r3, [pc, #356]	; (8016424 <interrupt_record+0x2e0>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 80162c2:	4b5f      	ldr	r3, [pc, #380]	; (8016440 <interrupt_record+0x2fc>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 80162c8:	4b5e      	ldr	r3, [pc, #376]	; (8016444 <interrupt_record+0x300>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 80162ce:	4b5e      	ldr	r3, [pc, #376]	; (8016448 <interrupt_record+0x304>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 80162d4:	463b      	mov	r3, r7
 80162d6:	2104      	movs	r1, #4
 80162d8:	4618      	mov	r0, r3
 80162da:	f7ff fe69 	bl	8015fb0 <record_data>
			}
	if (record_mode == 7) {
 80162de:	4b4a      	ldr	r3, [pc, #296]	; (8016408 <interrupt_record+0x2c4>)
 80162e0:	781b      	ldrb	r3, [r3, #0]
 80162e2:	2b07      	cmp	r3, #7
 80162e4:	d125      	bne.n	8016332 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80162e6:	4b59      	ldr	r3, [pc, #356]	; (801644c <interrupt_record+0x308>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	ee07 3a90 	vmov	s15, r3
 80162ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162f2:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 80162f6:	4b56      	ldr	r3, [pc, #344]	; (8016450 <interrupt_record+0x30c>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	ee07 3a90 	vmov	s15, r3
 80162fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016302:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8016306:	4b51      	ldr	r3, [pc, #324]	; (801644c <interrupt_record+0x308>)
 8016308:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801630c:	ee07 3a90 	vmov	s15, r3
 8016310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016314:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8016318:	4b4d      	ldr	r3, [pc, #308]	; (8016450 <interrupt_record+0x30c>)
 801631a:	691b      	ldr	r3, [r3, #16]
 801631c:	ee07 3a90 	vmov	s15, r3
 8016320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016324:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016328:	463b      	mov	r3, r7
 801632a:	2104      	movs	r1, #4
 801632c:	4618      	mov	r0, r3
 801632e:	f7ff fe3f 	bl	8015fb0 <record_data>
		}
	if (record_mode == 8) {
 8016332:	4b35      	ldr	r3, [pc, #212]	; (8016408 <interrupt_record+0x2c4>)
 8016334:	781b      	ldrb	r3, [r3, #0]
 8016336:	2b08      	cmp	r3, #8
 8016338:	d125      	bne.n	8016386 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 801633a:	4b44      	ldr	r3, [pc, #272]	; (801644c <interrupt_record+0x308>)
 801633c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801633e:	ee07 3a90 	vmov	s15, r3
 8016342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016346:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 801634a:	4b42      	ldr	r3, [pc, #264]	; (8016454 <interrupt_record+0x310>)
 801634c:	685b      	ldr	r3, [r3, #4]
 801634e:	ee07 3a90 	vmov	s15, r3
 8016352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016356:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 801635a:	4b3c      	ldr	r3, [pc, #240]	; (801644c <interrupt_record+0x308>)
 801635c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016360:	ee07 3a90 	vmov	s15, r3
 8016364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016368:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 801636c:	4b39      	ldr	r3, [pc, #228]	; (8016454 <interrupt_record+0x310>)
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	ee07 3a90 	vmov	s15, r3
 8016374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016378:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 801637c:	463b      	mov	r3, r7
 801637e:	2104      	movs	r1, #4
 8016380:	4618      	mov	r0, r3
 8016382:	f7ff fe15 	bl	8015fb0 <record_data>
		}
	if (record_mode == 9) { //90
 8016386:	4b20      	ldr	r3, [pc, #128]	; (8016408 <interrupt_record+0x2c4>)
 8016388:	781b      	ldrb	r3, [r3, #0]
 801638a:	2b09      	cmp	r3, #9
 801638c:	d11b      	bne.n	80163c6 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 801638e:	4b2f      	ldr	r3, [pc, #188]	; (801644c <interrupt_record+0x308>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	ee07 3a90 	vmov	s15, r3
 8016396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801639a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 801639e:	4b2b      	ldr	r3, [pc, #172]	; (801644c <interrupt_record+0x308>)
 80163a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80163a4:	ee07 3a90 	vmov	s15, r3
 80163a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163ac:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80163b0:	4b29      	ldr	r3, [pc, #164]	; (8016458 <interrupt_record+0x314>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80163b6:	4b29      	ldr	r3, [pc, #164]	; (801645c <interrupt_record+0x318>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80163bc:	463b      	mov	r3, r7
 80163be:	2104      	movs	r1, #4
 80163c0:	4618      	mov	r0, r3
 80163c2:	f7ff fdf5 	bl	8015fb0 <record_data>
		}
	if (record_mode == 10) { //90
 80163c6:	4b10      	ldr	r3, [pc, #64]	; (8016408 <interrupt_record+0x2c4>)
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	2b0a      	cmp	r3, #10
 80163cc:	d148      	bne.n	8016460 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 80163ce:	4b1f      	ldr	r3, [pc, #124]	; (801644c <interrupt_record+0x308>)
 80163d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80163d2:	ee07 3a90 	vmov	s15, r3
 80163d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163da:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 80163de:	4b1b      	ldr	r3, [pc, #108]	; (801644c <interrupt_record+0x308>)
 80163e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80163e4:	ee07 3a90 	vmov	s15, r3
 80163e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163ec:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80163f0:	4b19      	ldr	r3, [pc, #100]	; (8016458 <interrupt_record+0x314>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80163f6:	4b19      	ldr	r3, [pc, #100]	; (801645c <interrupt_record+0x318>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80163fc:	463b      	mov	r3, r7
 80163fe:	2104      	movs	r1, #4
 8016400:	4618      	mov	r0, r3
 8016402:	f7ff fdd5 	bl	8015fb0 <record_data>
 8016406:	e02b      	b.n	8016460 <interrupt_record+0x31c>
 8016408:	2000d96c 	.word	0x2000d96c
 801640c:	2000022c 	.word	0x2000022c
 8016410:	20000228 	.word	0x20000228
 8016414:	20000224 	.word	0x20000224
 8016418:	20000220 	.word	0x20000220
 801641c:	200004e4 	.word	0x200004e4
 8016420:	20000268 	.word	0x20000268
 8016424:	200004d8 	.word	0x200004d8
 8016428:	2000025c 	.word	0x2000025c
 801642c:	20000258 	.word	0x20000258
 8016430:	20000254 	.word	0x20000254
 8016434:	20000250 	.word	0x20000250
 8016438:	2000027c 	.word	0x2000027c
 801643c:	2000052c 	.word	0x2000052c
 8016440:	20000238 	.word	0x20000238
 8016444:	2000023c 	.word	0x2000023c
 8016448:	20000278 	.word	0x20000278
 801644c:	200002b8 	.word	0x200002b8
 8016450:	20000448 	.word	0x20000448
 8016454:	2000045c 	.word	0x2000045c
 8016458:	200005e0 	.word	0x200005e0
 801645c:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8016460:	bf00      	nop
 8016462:	3710      	adds	r7, #16
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801646c:	4b1b      	ldr	r3, [pc, #108]	; (80164dc <MX_SPI1_Init+0x74>)
 801646e:	4a1c      	ldr	r2, [pc, #112]	; (80164e0 <MX_SPI1_Init+0x78>)
 8016470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8016472:	4b1a      	ldr	r3, [pc, #104]	; (80164dc <MX_SPI1_Init+0x74>)
 8016474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801647a:	4b18      	ldr	r3, [pc, #96]	; (80164dc <MX_SPI1_Init+0x74>)
 801647c:	2200      	movs	r2, #0
 801647e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8016480:	4b16      	ldr	r3, [pc, #88]	; (80164dc <MX_SPI1_Init+0x74>)
 8016482:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8016486:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016488:	4b14      	ldr	r3, [pc, #80]	; (80164dc <MX_SPI1_Init+0x74>)
 801648a:	2200      	movs	r2, #0
 801648c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801648e:	4b13      	ldr	r3, [pc, #76]	; (80164dc <MX_SPI1_Init+0x74>)
 8016490:	2200      	movs	r2, #0
 8016492:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8016494:	4b11      	ldr	r3, [pc, #68]	; (80164dc <MX_SPI1_Init+0x74>)
 8016496:	f44f 7200 	mov.w	r2, #512	; 0x200
 801649a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 801649c:	4b0f      	ldr	r3, [pc, #60]	; (80164dc <MX_SPI1_Init+0x74>)
 801649e:	2210      	movs	r2, #16
 80164a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80164a2:	4b0e      	ldr	r3, [pc, #56]	; (80164dc <MX_SPI1_Init+0x74>)
 80164a4:	2200      	movs	r2, #0
 80164a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80164a8:	4b0c      	ldr	r3, [pc, #48]	; (80164dc <MX_SPI1_Init+0x74>)
 80164aa:	2200      	movs	r2, #0
 80164ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80164ae:	4b0b      	ldr	r3, [pc, #44]	; (80164dc <MX_SPI1_Init+0x74>)
 80164b0:	2200      	movs	r2, #0
 80164b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80164b4:	4b09      	ldr	r3, [pc, #36]	; (80164dc <MX_SPI1_Init+0x74>)
 80164b6:	2207      	movs	r2, #7
 80164b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80164ba:	4b08      	ldr	r3, [pc, #32]	; (80164dc <MX_SPI1_Init+0x74>)
 80164bc:	2200      	movs	r2, #0
 80164be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80164c0:	4b06      	ldr	r3, [pc, #24]	; (80164dc <MX_SPI1_Init+0x74>)
 80164c2:	2208      	movs	r2, #8
 80164c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80164c6:	4805      	ldr	r0, [pc, #20]	; (80164dc <MX_SPI1_Init+0x74>)
 80164c8:	f005 fbca 	bl	801bc60 <HAL_SPI_Init>
 80164cc:	4603      	mov	r3, r0
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d001      	beq.n	80164d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80164d2:	f7f3 fcea 	bl	8009eaa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80164d6:	bf00      	nop
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	2000d97c 	.word	0x2000d97c
 80164e0:	40013000 	.word	0x40013000

080164e4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80164e8:	4b1b      	ldr	r3, [pc, #108]	; (8016558 <MX_SPI3_Init+0x74>)
 80164ea:	4a1c      	ldr	r2, [pc, #112]	; (801655c <MX_SPI3_Init+0x78>)
 80164ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80164ee:	4b1a      	ldr	r3, [pc, #104]	; (8016558 <MX_SPI3_Init+0x74>)
 80164f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80164f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80164f6:	4b18      	ldr	r3, [pc, #96]	; (8016558 <MX_SPI3_Init+0x74>)
 80164f8:	2200      	movs	r2, #0
 80164fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80164fc:	4b16      	ldr	r3, [pc, #88]	; (8016558 <MX_SPI3_Init+0x74>)
 80164fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8016502:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016504:	4b14      	ldr	r3, [pc, #80]	; (8016558 <MX_SPI3_Init+0x74>)
 8016506:	2200      	movs	r2, #0
 8016508:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 801650a:	4b13      	ldr	r3, [pc, #76]	; (8016558 <MX_SPI3_Init+0x74>)
 801650c:	2201      	movs	r2, #1
 801650e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8016510:	4b11      	ldr	r3, [pc, #68]	; (8016558 <MX_SPI3_Init+0x74>)
 8016512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016516:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8016518:	4b0f      	ldr	r3, [pc, #60]	; (8016558 <MX_SPI3_Init+0x74>)
 801651a:	2208      	movs	r2, #8
 801651c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801651e:	4b0e      	ldr	r3, [pc, #56]	; (8016558 <MX_SPI3_Init+0x74>)
 8016520:	2200      	movs	r2, #0
 8016522:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8016524:	4b0c      	ldr	r3, [pc, #48]	; (8016558 <MX_SPI3_Init+0x74>)
 8016526:	2200      	movs	r2, #0
 8016528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801652a:	4b0b      	ldr	r3, [pc, #44]	; (8016558 <MX_SPI3_Init+0x74>)
 801652c:	2200      	movs	r2, #0
 801652e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8016530:	4b09      	ldr	r3, [pc, #36]	; (8016558 <MX_SPI3_Init+0x74>)
 8016532:	2207      	movs	r2, #7
 8016534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016536:	4b08      	ldr	r3, [pc, #32]	; (8016558 <MX_SPI3_Init+0x74>)
 8016538:	2200      	movs	r2, #0
 801653a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801653c:	4b06      	ldr	r3, [pc, #24]	; (8016558 <MX_SPI3_Init+0x74>)
 801653e:	2200      	movs	r2, #0
 8016540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8016542:	4805      	ldr	r0, [pc, #20]	; (8016558 <MX_SPI3_Init+0x74>)
 8016544:	f005 fb8c 	bl	801bc60 <HAL_SPI_Init>
 8016548:	4603      	mov	r3, r0
 801654a:	2b00      	cmp	r3, #0
 801654c:	d001      	beq.n	8016552 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 801654e:	f7f3 fcac 	bl	8009eaa <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8016552:	bf00      	nop
 8016554:	bd80      	pop	{r7, pc}
 8016556:	bf00      	nop
 8016558:	2000d9e0 	.word	0x2000d9e0
 801655c:	40003c00 	.word	0x40003c00

08016560 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b08c      	sub	sp, #48	; 0x30
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016568:	f107 031c 	add.w	r3, r7, #28
 801656c:	2200      	movs	r2, #0
 801656e:	601a      	str	r2, [r3, #0]
 8016570:	605a      	str	r2, [r3, #4]
 8016572:	609a      	str	r2, [r3, #8]
 8016574:	60da      	str	r2, [r3, #12]
 8016576:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	4a3d      	ldr	r2, [pc, #244]	; (8016674 <HAL_SPI_MspInit+0x114>)
 801657e:	4293      	cmp	r3, r2
 8016580:	d129      	bne.n	80165d6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8016582:	4b3d      	ldr	r3, [pc, #244]	; (8016678 <HAL_SPI_MspInit+0x118>)
 8016584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016586:	4a3c      	ldr	r2, [pc, #240]	; (8016678 <HAL_SPI_MspInit+0x118>)
 8016588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801658c:	6613      	str	r3, [r2, #96]	; 0x60
 801658e:	4b3a      	ldr	r3, [pc, #232]	; (8016678 <HAL_SPI_MspInit+0x118>)
 8016590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016596:	61bb      	str	r3, [r7, #24]
 8016598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801659a:	4b37      	ldr	r3, [pc, #220]	; (8016678 <HAL_SPI_MspInit+0x118>)
 801659c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801659e:	4a36      	ldr	r2, [pc, #216]	; (8016678 <HAL_SPI_MspInit+0x118>)
 80165a0:	f043 0301 	orr.w	r3, r3, #1
 80165a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80165a6:	4b34      	ldr	r3, [pc, #208]	; (8016678 <HAL_SPI_MspInit+0x118>)
 80165a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165aa:	f003 0301 	and.w	r3, r3, #1
 80165ae:	617b      	str	r3, [r7, #20]
 80165b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80165b2:	23e0      	movs	r3, #224	; 0xe0
 80165b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165b6:	2302      	movs	r3, #2
 80165b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165ba:	2300      	movs	r3, #0
 80165bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80165be:	2300      	movs	r3, #0
 80165c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80165c2:	2305      	movs	r3, #5
 80165c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80165c6:	f107 031c 	add.w	r3, r7, #28
 80165ca:	4619      	mov	r1, r3
 80165cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80165d0:	f004 f98c 	bl	801a8ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80165d4:	e049      	b.n	801666a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	4a28      	ldr	r2, [pc, #160]	; (801667c <HAL_SPI_MspInit+0x11c>)
 80165dc:	4293      	cmp	r3, r2
 80165de:	d144      	bne.n	801666a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80165e0:	4b25      	ldr	r3, [pc, #148]	; (8016678 <HAL_SPI_MspInit+0x118>)
 80165e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165e4:	4a24      	ldr	r2, [pc, #144]	; (8016678 <HAL_SPI_MspInit+0x118>)
 80165e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80165ea:	6593      	str	r3, [r2, #88]	; 0x58
 80165ec:	4b22      	ldr	r3, [pc, #136]	; (8016678 <HAL_SPI_MspInit+0x118>)
 80165ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80165f4:	613b      	str	r3, [r7, #16]
 80165f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80165f8:	4b1f      	ldr	r3, [pc, #124]	; (8016678 <HAL_SPI_MspInit+0x118>)
 80165fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165fc:	4a1e      	ldr	r2, [pc, #120]	; (8016678 <HAL_SPI_MspInit+0x118>)
 80165fe:	f043 0304 	orr.w	r3, r3, #4
 8016602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016604:	4b1c      	ldr	r3, [pc, #112]	; (8016678 <HAL_SPI_MspInit+0x118>)
 8016606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016608:	f003 0304 	and.w	r3, r3, #4
 801660c:	60fb      	str	r3, [r7, #12]
 801660e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016610:	4b19      	ldr	r3, [pc, #100]	; (8016678 <HAL_SPI_MspInit+0x118>)
 8016612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016614:	4a18      	ldr	r2, [pc, #96]	; (8016678 <HAL_SPI_MspInit+0x118>)
 8016616:	f043 0302 	orr.w	r3, r3, #2
 801661a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801661c:	4b16      	ldr	r3, [pc, #88]	; (8016678 <HAL_SPI_MspInit+0x118>)
 801661e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016620:	f003 0302 	and.w	r3, r3, #2
 8016624:	60bb      	str	r3, [r7, #8]
 8016626:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8016628:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801662c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801662e:	2302      	movs	r3, #2
 8016630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016632:	2300      	movs	r3, #0
 8016634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016636:	2300      	movs	r3, #0
 8016638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801663a:	2306      	movs	r3, #6
 801663c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801663e:	f107 031c 	add.w	r3, r7, #28
 8016642:	4619      	mov	r1, r3
 8016644:	480e      	ldr	r0, [pc, #56]	; (8016680 <HAL_SPI_MspInit+0x120>)
 8016646:	f004 f951 	bl	801a8ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801664a:	2320      	movs	r3, #32
 801664c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801664e:	2302      	movs	r3, #2
 8016650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016652:	2300      	movs	r3, #0
 8016654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016656:	2300      	movs	r3, #0
 8016658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801665a:	2306      	movs	r3, #6
 801665c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801665e:	f107 031c 	add.w	r3, r7, #28
 8016662:	4619      	mov	r1, r3
 8016664:	4807      	ldr	r0, [pc, #28]	; (8016684 <HAL_SPI_MspInit+0x124>)
 8016666:	f004 f941 	bl	801a8ec <HAL_GPIO_Init>
}
 801666a:	bf00      	nop
 801666c:	3730      	adds	r7, #48	; 0x30
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
 8016672:	bf00      	nop
 8016674:	40013000 	.word	0x40013000
 8016678:	40021000 	.word	0x40021000
 801667c:	40003c00 	.word	0x40003c00
 8016680:	48000800 	.word	0x48000800
 8016684:	48000400 	.word	0x48000400

08016688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801668e:	4b0f      	ldr	r3, [pc, #60]	; (80166cc <HAL_MspInit+0x44>)
 8016690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016692:	4a0e      	ldr	r2, [pc, #56]	; (80166cc <HAL_MspInit+0x44>)
 8016694:	f043 0301 	orr.w	r3, r3, #1
 8016698:	6613      	str	r3, [r2, #96]	; 0x60
 801669a:	4b0c      	ldr	r3, [pc, #48]	; (80166cc <HAL_MspInit+0x44>)
 801669c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801669e:	f003 0301 	and.w	r3, r3, #1
 80166a2:	607b      	str	r3, [r7, #4]
 80166a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80166a6:	4b09      	ldr	r3, [pc, #36]	; (80166cc <HAL_MspInit+0x44>)
 80166a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166aa:	4a08      	ldr	r2, [pc, #32]	; (80166cc <HAL_MspInit+0x44>)
 80166ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80166b0:	6593      	str	r3, [r2, #88]	; 0x58
 80166b2:	4b06      	ldr	r3, [pc, #24]	; (80166cc <HAL_MspInit+0x44>)
 80166b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80166ba:	603b      	str	r3, [r7, #0]
 80166bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80166be:	f004 fb53 	bl	801ad68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80166c2:	bf00      	nop
 80166c4:	3708      	adds	r7, #8
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
 80166ca:	bf00      	nop
 80166cc:	40021000 	.word	0x40021000

080166d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80166d0:	b480      	push	{r7}
 80166d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80166d4:	e7fe      	b.n	80166d4 <NMI_Handler+0x4>

080166d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80166d6:	b480      	push	{r7}
 80166d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80166da:	e7fe      	b.n	80166da <HardFault_Handler+0x4>

080166dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80166dc:	b480      	push	{r7}
 80166de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80166e0:	e7fe      	b.n	80166e0 <MemManage_Handler+0x4>

080166e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80166e2:	b480      	push	{r7}
 80166e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80166e6:	e7fe      	b.n	80166e6 <BusFault_Handler+0x4>

080166e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80166e8:	b480      	push	{r7}
 80166ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80166ec:	e7fe      	b.n	80166ec <UsageFault_Handler+0x4>

080166ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80166ee:	b480      	push	{r7}
 80166f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80166f2:	bf00      	nop
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr

080166fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80166fc:	b480      	push	{r7}
 80166fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016700:	bf00      	nop
 8016702:	46bd      	mov	sp, r7
 8016704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016708:	4770      	bx	lr

0801670a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801670a:	b480      	push	{r7}
 801670c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801670e:	bf00      	nop
 8016710:	46bd      	mov	sp, r7
 8016712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016716:	4770      	bx	lr

08016718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801671c:	f001 f88e 	bl	801783c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016720:	bf00      	nop
 8016722:	bd80      	pop	{r7, pc}

08016724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8016728:	4802      	ldr	r0, [pc, #8]	; (8016734 <DMA1_Channel1_IRQHandler+0x10>)
 801672a:	f003 fd27 	bl	801a17c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801672e:	bf00      	nop
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	200007a0 	.word	0x200007a0

08016738 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 801673c:	4802      	ldr	r0, [pc, #8]	; (8016748 <ADC1_2_IRQHandler+0x10>)
 801673e:	f002 f82d 	bl	801879c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8016742:	bf00      	nop
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	20000734 	.word	0x20000734

0801674c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8016750:	480d      	ldr	r0, [pc, #52]	; (8016788 <TIM6_DAC_IRQHandler+0x3c>)
 8016752:	f006 fc65 	bl	801d020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8016756:	f7f1 fbb7 	bl	8007ec8 <interrupt_timer>
  interupt_calSensor();
 801675a:	f7eb fa3b 	bl	8001bd4 <interupt_calSensor>
  ICM20602_DataUpdate();
 801675e:	f7f1 f8d3 	bl	8007908 <ICM20602_DataUpdate>
  interrupt_calGyro();
 8016762:	f7eb f845 	bl	80017f0 <interrupt_calGyro>
  AS5047_DataUpdate();
 8016766:	f7f0 fd8b 	bl	8007280 <AS5047_DataUpdate>
  interupt_calEncoder();
 801676a:	f7ea fc89 	bl	8001080 <interupt_calEncoder>
  interupt_calFusion();
 801676e:	f7ea fe47 	bl	8001400 <interupt_calFusion>
  interrupt_WallCut();
 8016772:	f7ef fd55 	bl	8006220 <interrupt_WallCut>
  interupt_DriveMotor();
 8016776:	f7eb fbb7 	bl	8001ee8 <interupt_DriveMotor>

  interrupt_FailSafe();
 801677a:	f7f3 f8ed 	bl	8009958 <interrupt_FailSafe>
  interrupt_record();
 801677e:	f7ff fce1 	bl	8016144 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8016782:	bf00      	nop
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	2000da48 	.word	0x2000da48

0801678c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801678c:	b480      	push	{r7}
 801678e:	af00      	add	r7, sp, #0
	return 1;
 8016790:	2301      	movs	r3, #1
}
 8016792:	4618      	mov	r0, r3
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr

0801679c <_kill>:

int _kill(int pid, int sig)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
 80167a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80167a6:	f008 fb0f 	bl	801edc8 <__errno>
 80167aa:	4603      	mov	r3, r0
 80167ac:	2216      	movs	r2, #22
 80167ae:	601a      	str	r2, [r3, #0]
	return -1;
 80167b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}

080167bc <_exit>:

void _exit (int status)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80167c4:	f04f 31ff 	mov.w	r1, #4294967295
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f7ff ffe7 	bl	801679c <_kill>
	while (1) {}		/* Make sure we hang here */
 80167ce:	e7fe      	b.n	80167ce <_exit+0x12>

080167d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b086      	sub	sp, #24
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80167dc:	2300      	movs	r3, #0
 80167de:	617b      	str	r3, [r7, #20]
 80167e0:	e00a      	b.n	80167f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80167e2:	f3af 8000 	nop.w
 80167e6:	4601      	mov	r1, r0
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	1c5a      	adds	r2, r3, #1
 80167ec:	60ba      	str	r2, [r7, #8]
 80167ee:	b2ca      	uxtb	r2, r1
 80167f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	3301      	adds	r3, #1
 80167f6:	617b      	str	r3, [r7, #20]
 80167f8:	697a      	ldr	r2, [r7, #20]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	dbf0      	blt.n	80167e2 <_read+0x12>
	}

return len;
 8016800:	687b      	ldr	r3, [r7, #4]
}
 8016802:	4618      	mov	r0, r3
 8016804:	3718      	adds	r7, #24
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
	...

0801680c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b086      	sub	sp, #24
 8016810:	af00      	add	r7, sp, #0
 8016812:	60f8      	str	r0, [r7, #12]
 8016814:	60b9      	str	r1, [r7, #8]
 8016816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016818:	2300      	movs	r3, #0
 801681a:	617b      	str	r3, [r7, #20]
 801681c:	e00a      	b.n	8016834 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 801681e:	68b9      	ldr	r1, [r7, #8]
 8016820:	1c4b      	adds	r3, r1, #1
 8016822:	60bb      	str	r3, [r7, #8]
 8016824:	2301      	movs	r3, #1
 8016826:	2201      	movs	r2, #1
 8016828:	4807      	ldr	r0, [pc, #28]	; (8016848 <_write+0x3c>)
 801682a:	f007 fc83 	bl	801e134 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801682e:	697b      	ldr	r3, [r7, #20]
 8016830:	3301      	adds	r3, #1
 8016832:	617b      	str	r3, [r7, #20]
 8016834:	697a      	ldr	r2, [r7, #20]
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	429a      	cmp	r2, r3
 801683a:	dbf0      	blt.n	801681e <_write+0x12>
	}
	return len;
 801683c:	687b      	ldr	r3, [r7, #4]
}
 801683e:	4618      	mov	r0, r3
 8016840:	3718      	adds	r7, #24
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	2000e04c 	.word	0x2000e04c

0801684c <_close>:

int _close(int file)
{
 801684c:	b480      	push	{r7}
 801684e:	b083      	sub	sp, #12
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
	return -1;
 8016854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016858:	4618      	mov	r0, r3
 801685a:	370c      	adds	r7, #12
 801685c:	46bd      	mov	sp, r7
 801685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016862:	4770      	bx	lr

08016864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016874:	605a      	str	r2, [r3, #4]
	return 0;
 8016876:	2300      	movs	r3, #0
}
 8016878:	4618      	mov	r0, r3
 801687a:	370c      	adds	r7, #12
 801687c:	46bd      	mov	sp, r7
 801687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016882:	4770      	bx	lr

08016884 <_isatty>:

int _isatty(int file)
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
	return 1;
 801688c:	2301      	movs	r3, #1
}
 801688e:	4618      	mov	r0, r3
 8016890:	370c      	adds	r7, #12
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr

0801689a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801689a:	b480      	push	{r7}
 801689c:	b085      	sub	sp, #20
 801689e:	af00      	add	r7, sp, #0
 80168a0:	60f8      	str	r0, [r7, #12]
 80168a2:	60b9      	str	r1, [r7, #8]
 80168a4:	607a      	str	r2, [r7, #4]
	return 0;
 80168a6:	2300      	movs	r3, #0
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3714      	adds	r7, #20
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr

080168b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b086      	sub	sp, #24
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80168bc:	4a14      	ldr	r2, [pc, #80]	; (8016910 <_sbrk+0x5c>)
 80168be:	4b15      	ldr	r3, [pc, #84]	; (8016914 <_sbrk+0x60>)
 80168c0:	1ad3      	subs	r3, r2, r3
 80168c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80168c4:	697b      	ldr	r3, [r7, #20]
 80168c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80168c8:	4b13      	ldr	r3, [pc, #76]	; (8016918 <_sbrk+0x64>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d102      	bne.n	80168d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80168d0:	4b11      	ldr	r3, [pc, #68]	; (8016918 <_sbrk+0x64>)
 80168d2:	4a12      	ldr	r2, [pc, #72]	; (801691c <_sbrk+0x68>)
 80168d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80168d6:	4b10      	ldr	r3, [pc, #64]	; (8016918 <_sbrk+0x64>)
 80168d8:	681a      	ldr	r2, [r3, #0]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	4413      	add	r3, r2
 80168de:	693a      	ldr	r2, [r7, #16]
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d207      	bcs.n	80168f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80168e4:	f008 fa70 	bl	801edc8 <__errno>
 80168e8:	4603      	mov	r3, r0
 80168ea:	220c      	movs	r2, #12
 80168ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80168ee:	f04f 33ff 	mov.w	r3, #4294967295
 80168f2:	e009      	b.n	8016908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80168f4:	4b08      	ldr	r3, [pc, #32]	; (8016918 <_sbrk+0x64>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80168fa:	4b07      	ldr	r3, [pc, #28]	; (8016918 <_sbrk+0x64>)
 80168fc:	681a      	ldr	r2, [r3, #0]
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	4413      	add	r3, r2
 8016902:	4a05      	ldr	r2, [pc, #20]	; (8016918 <_sbrk+0x64>)
 8016904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016906:	68fb      	ldr	r3, [r7, #12]
}
 8016908:	4618      	mov	r0, r3
 801690a:	3718      	adds	r7, #24
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}
 8016910:	2001c000 	.word	0x2001c000
 8016914:	00000400 	.word	0x00000400
 8016918:	2000da44 	.word	0x2000da44
 801691c:	2000e0f0 	.word	0x2000e0f0

08016920 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8016920:	b480      	push	{r7}
 8016922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8016924:	4b06      	ldr	r3, [pc, #24]	; (8016940 <SystemInit+0x20>)
 8016926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801692a:	4a05      	ldr	r2, [pc, #20]	; (8016940 <SystemInit+0x20>)
 801692c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016934:	bf00      	nop
 8016936:	46bd      	mov	sp, r7
 8016938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693c:	4770      	bx	lr
 801693e:	bf00      	nop
 8016940:	e000ed00 	.word	0xe000ed00

08016944 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b084      	sub	sp, #16
 8016948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801694a:	1d3b      	adds	r3, r7, #4
 801694c:	2200      	movs	r2, #0
 801694e:	601a      	str	r2, [r3, #0]
 8016950:	605a      	str	r2, [r3, #4]
 8016952:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8016954:	4b14      	ldr	r3, [pc, #80]	; (80169a8 <MX_TIM6_Init+0x64>)
 8016956:	4a15      	ldr	r2, [pc, #84]	; (80169ac <MX_TIM6_Init+0x68>)
 8016958:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 801695a:	4b13      	ldr	r3, [pc, #76]	; (80169a8 <MX_TIM6_Init+0x64>)
 801695c:	2254      	movs	r2, #84	; 0x54
 801695e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016960:	4b11      	ldr	r3, [pc, #68]	; (80169a8 <MX_TIM6_Init+0x64>)
 8016962:	2200      	movs	r2, #0
 8016964:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8016966:	4b10      	ldr	r3, [pc, #64]	; (80169a8 <MX_TIM6_Init+0x64>)
 8016968:	f240 32e7 	movw	r2, #999	; 0x3e7
 801696c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801696e:	4b0e      	ldr	r3, [pc, #56]	; (80169a8 <MX_TIM6_Init+0x64>)
 8016970:	2200      	movs	r2, #0
 8016972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8016974:	480c      	ldr	r0, [pc, #48]	; (80169a8 <MX_TIM6_Init+0x64>)
 8016976:	f006 f88b 	bl	801ca90 <HAL_TIM_Base_Init>
 801697a:	4603      	mov	r3, r0
 801697c:	2b00      	cmp	r3, #0
 801697e:	d001      	beq.n	8016984 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8016980:	f7f3 fa93 	bl	8009eaa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016984:	2300      	movs	r3, #0
 8016986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016988:	2300      	movs	r3, #0
 801698a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801698c:	1d3b      	adds	r3, r7, #4
 801698e:	4619      	mov	r1, r3
 8016990:	4805      	ldr	r0, [pc, #20]	; (80169a8 <MX_TIM6_Init+0x64>)
 8016992:	f007 f9f9 	bl	801dd88 <HAL_TIMEx_MasterConfigSynchronization>
 8016996:	4603      	mov	r3, r0
 8016998:	2b00      	cmp	r3, #0
 801699a:	d001      	beq.n	80169a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 801699c:	f7f3 fa85 	bl	8009eaa <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80169a0:	bf00      	nop
 80169a2:	3710      	adds	r7, #16
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}
 80169a8:	2000da48 	.word	0x2000da48
 80169ac:	40001000 	.word	0x40001000

080169b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b098      	sub	sp, #96	; 0x60
 80169b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80169b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80169ba:	2200      	movs	r2, #0
 80169bc:	601a      	str	r2, [r3, #0]
 80169be:	605a      	str	r2, [r3, #4]
 80169c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80169c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80169c6:	2200      	movs	r2, #0
 80169c8:	601a      	str	r2, [r3, #0]
 80169ca:	605a      	str	r2, [r3, #4]
 80169cc:	609a      	str	r2, [r3, #8]
 80169ce:	60da      	str	r2, [r3, #12]
 80169d0:	611a      	str	r2, [r3, #16]
 80169d2:	615a      	str	r2, [r3, #20]
 80169d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80169d6:	1d3b      	adds	r3, r7, #4
 80169d8:	2234      	movs	r2, #52	; 0x34
 80169da:	2100      	movs	r1, #0
 80169dc:	4618      	mov	r0, r3
 80169de:	f008 fa2b 	bl	801ee38 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80169e2:	4b41      	ldr	r3, [pc, #260]	; (8016ae8 <MX_TIM8_Init+0x138>)
 80169e4:	4a41      	ldr	r2, [pc, #260]	; (8016aec <MX_TIM8_Init+0x13c>)
 80169e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80169e8:	4b3f      	ldr	r3, [pc, #252]	; (8016ae8 <MX_TIM8_Init+0x138>)
 80169ea:	2201      	movs	r2, #1
 80169ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80169ee:	4b3e      	ldr	r3, [pc, #248]	; (8016ae8 <MX_TIM8_Init+0x138>)
 80169f0:	2200      	movs	r2, #0
 80169f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80169f4:	4b3c      	ldr	r3, [pc, #240]	; (8016ae8 <MX_TIM8_Init+0x138>)
 80169f6:	f240 628f 	movw	r2, #1679	; 0x68f
 80169fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80169fc:	4b3a      	ldr	r3, [pc, #232]	; (8016ae8 <MX_TIM8_Init+0x138>)
 80169fe:	2200      	movs	r2, #0
 8016a00:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8016a02:	4b39      	ldr	r3, [pc, #228]	; (8016ae8 <MX_TIM8_Init+0x138>)
 8016a04:	2200      	movs	r2, #0
 8016a06:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016a08:	4b37      	ldr	r3, [pc, #220]	; (8016ae8 <MX_TIM8_Init+0x138>)
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8016a0e:	4836      	ldr	r0, [pc, #216]	; (8016ae8 <MX_TIM8_Init+0x138>)
 8016a10:	f006 f906 	bl	801cc20 <HAL_TIM_PWM_Init>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d001      	beq.n	8016a1e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8016a1a:	f7f3 fa46 	bl	8009eaa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8016a22:	2300      	movs	r3, #0
 8016a24:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016a26:	2300      	movs	r3, #0
 8016a28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8016a2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016a2e:	4619      	mov	r1, r3
 8016a30:	482d      	ldr	r0, [pc, #180]	; (8016ae8 <MX_TIM8_Init+0x138>)
 8016a32:	f007 f9a9 	bl	801dd88 <HAL_TIMEx_MasterConfigSynchronization>
 8016a36:	4603      	mov	r3, r0
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d001      	beq.n	8016a40 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8016a3c:	f7f3 fa35 	bl	8009eaa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016a40:	2360      	movs	r3, #96	; 0x60
 8016a42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8016a44:	f240 13a3 	movw	r3, #419	; 0x1a3
 8016a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016a52:	2300      	movs	r3, #0
 8016a54:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016a56:	2300      	movs	r3, #0
 8016a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016a5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016a62:	2200      	movs	r2, #0
 8016a64:	4619      	mov	r1, r3
 8016a66:	4820      	ldr	r0, [pc, #128]	; (8016ae8 <MX_TIM8_Init+0x138>)
 8016a68:	f006 fc5a 	bl	801d320 <HAL_TIM_PWM_ConfigChannel>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d001      	beq.n	8016a76 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8016a72:	f7f3 fa1a 	bl	8009eaa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8016a76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016a7a:	2208      	movs	r2, #8
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	481a      	ldr	r0, [pc, #104]	; (8016ae8 <MX_TIM8_Init+0x138>)
 8016a80:	f006 fc4e 	bl	801d320 <HAL_TIM_PWM_ConfigChannel>
 8016a84:	4603      	mov	r3, r0
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d001      	beq.n	8016a8e <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8016a8a:	f7f3 fa0e 	bl	8009eaa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016a92:	2300      	movs	r3, #0
 8016a94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016a96:	2300      	movs	r3, #0
 8016a98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016aa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8016aac:	2300      	movs	r3, #0
 8016aae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8016ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8016aba:	2300      	movs	r3, #0
 8016abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8016ac6:	1d3b      	adds	r3, r7, #4
 8016ac8:	4619      	mov	r1, r3
 8016aca:	4807      	ldr	r0, [pc, #28]	; (8016ae8 <MX_TIM8_Init+0x138>)
 8016acc:	f007 f9ea 	bl	801dea4 <HAL_TIMEx_ConfigBreakDeadTime>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d001      	beq.n	8016ada <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8016ad6:	f7f3 f9e8 	bl	8009eaa <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8016ada:	4803      	ldr	r0, [pc, #12]	; (8016ae8 <MX_TIM8_Init+0x138>)
 8016adc:	f000 f8da 	bl	8016c94 <HAL_TIM_MspPostInit>

}
 8016ae0:	bf00      	nop
 8016ae2:	3760      	adds	r7, #96	; 0x60
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	2000da94 	.word	0x2000da94
 8016aec:	40013400 	.word	0x40013400

08016af0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b094      	sub	sp, #80	; 0x50
 8016af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8016af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016afa:	2200      	movs	r2, #0
 8016afc:	601a      	str	r2, [r3, #0]
 8016afe:	605a      	str	r2, [r3, #4]
 8016b00:	609a      	str	r2, [r3, #8]
 8016b02:	60da      	str	r2, [r3, #12]
 8016b04:	611a      	str	r2, [r3, #16]
 8016b06:	615a      	str	r2, [r3, #20]
 8016b08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016b0a:	463b      	mov	r3, r7
 8016b0c:	2234      	movs	r2, #52	; 0x34
 8016b0e:	2100      	movs	r1, #0
 8016b10:	4618      	mov	r0, r3
 8016b12:	f008 f991 	bl	801ee38 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8016b16:	4b30      	ldr	r3, [pc, #192]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b18:	4a30      	ldr	r2, [pc, #192]	; (8016bdc <MX_TIM16_Init+0xec>)
 8016b1a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8016b1c:	4b2e      	ldr	r3, [pc, #184]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b1e:	2201      	movs	r2, #1
 8016b20:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016b22:	4b2d      	ldr	r3, [pc, #180]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b24:	2200      	movs	r2, #0
 8016b26:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8016b28:	4b2b      	ldr	r3, [pc, #172]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b2a:	2264      	movs	r2, #100	; 0x64
 8016b2c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016b2e:	4b2a      	ldr	r3, [pc, #168]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b30:	2200      	movs	r2, #0
 8016b32:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8016b34:	4b28      	ldr	r3, [pc, #160]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b36:	2200      	movs	r2, #0
 8016b38:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016b3a:	4b27      	ldr	r3, [pc, #156]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8016b40:	4825      	ldr	r0, [pc, #148]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b42:	f005 ffa5 	bl	801ca90 <HAL_TIM_Base_Init>
 8016b46:	4603      	mov	r3, r0
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d001      	beq.n	8016b50 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8016b4c:	f7f3 f9ad 	bl	8009eaa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8016b50:	4821      	ldr	r0, [pc, #132]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b52:	f006 f865 	bl	801cc20 <HAL_TIM_PWM_Init>
 8016b56:	4603      	mov	r3, r0
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d001      	beq.n	8016b60 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8016b5c:	f7f3 f9a5 	bl	8009eaa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016b60:	2360      	movs	r3, #96	; 0x60
 8016b62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8016b64:	231e      	movs	r3, #30
 8016b66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016b70:	2300      	movs	r3, #0
 8016b72:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016b74:	2300      	movs	r3, #0
 8016b76:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016b7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016b80:	2200      	movs	r2, #0
 8016b82:	4619      	mov	r1, r3
 8016b84:	4814      	ldr	r0, [pc, #80]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016b86:	f006 fbcb 	bl	801d320 <HAL_TIM_PWM_ConfigChannel>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d001      	beq.n	8016b94 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8016b90:	f7f3 f98b 	bl	8009eaa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016b94:	2300      	movs	r3, #0
 8016b96:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016b98:	2300      	movs	r3, #0
 8016b9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016bac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8016bb6:	463b      	mov	r3, r7
 8016bb8:	4619      	mov	r1, r3
 8016bba:	4807      	ldr	r0, [pc, #28]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016bbc:	f007 f972 	bl	801dea4 <HAL_TIMEx_ConfigBreakDeadTime>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d001      	beq.n	8016bca <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8016bc6:	f7f3 f970 	bl	8009eaa <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8016bca:	4803      	ldr	r0, [pc, #12]	; (8016bd8 <MX_TIM16_Init+0xe8>)
 8016bcc:	f000 f862 	bl	8016c94 <HAL_TIM_MspPostInit>

}
 8016bd0:	bf00      	nop
 8016bd2:	3750      	adds	r7, #80	; 0x50
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	2000dae0 	.word	0x2000dae0
 8016bdc:	40014400 	.word	0x40014400

08016be0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b084      	sub	sp, #16
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	4a16      	ldr	r2, [pc, #88]	; (8016c48 <HAL_TIM_Base_MspInit+0x68>)
 8016bee:	4293      	cmp	r3, r2
 8016bf0:	d114      	bne.n	8016c1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8016bf2:	4b16      	ldr	r3, [pc, #88]	; (8016c4c <HAL_TIM_Base_MspInit+0x6c>)
 8016bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016bf6:	4a15      	ldr	r2, [pc, #84]	; (8016c4c <HAL_TIM_Base_MspInit+0x6c>)
 8016bf8:	f043 0310 	orr.w	r3, r3, #16
 8016bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8016bfe:	4b13      	ldr	r3, [pc, #76]	; (8016c4c <HAL_TIM_Base_MspInit+0x6c>)
 8016c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016c02:	f003 0310 	and.w	r3, r3, #16
 8016c06:	60fb      	str	r3, [r7, #12]
 8016c08:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	2103      	movs	r1, #3
 8016c0e:	2036      	movs	r0, #54	; 0x36
 8016c10:	f003 f903 	bl	8019e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8016c14:	2036      	movs	r0, #54	; 0x36
 8016c16:	f003 f91a 	bl	8019e4e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8016c1a:	e010      	b.n	8016c3e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	4a0b      	ldr	r2, [pc, #44]	; (8016c50 <HAL_TIM_Base_MspInit+0x70>)
 8016c22:	4293      	cmp	r3, r2
 8016c24:	d10b      	bne.n	8016c3e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8016c26:	4b09      	ldr	r3, [pc, #36]	; (8016c4c <HAL_TIM_Base_MspInit+0x6c>)
 8016c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c2a:	4a08      	ldr	r2, [pc, #32]	; (8016c4c <HAL_TIM_Base_MspInit+0x6c>)
 8016c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016c30:	6613      	str	r3, [r2, #96]	; 0x60
 8016c32:	4b06      	ldr	r3, [pc, #24]	; (8016c4c <HAL_TIM_Base_MspInit+0x6c>)
 8016c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016c3a:	60bb      	str	r3, [r7, #8]
 8016c3c:	68bb      	ldr	r3, [r7, #8]
}
 8016c3e:	bf00      	nop
 8016c40:	3710      	adds	r7, #16
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	40001000 	.word	0x40001000
 8016c4c:	40021000 	.word	0x40021000
 8016c50:	40014400 	.word	0x40014400

08016c54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8016c54:	b480      	push	{r7}
 8016c56:	b085      	sub	sp, #20
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	4a0a      	ldr	r2, [pc, #40]	; (8016c8c <HAL_TIM_PWM_MspInit+0x38>)
 8016c62:	4293      	cmp	r3, r2
 8016c64:	d10b      	bne.n	8016c7e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8016c66:	4b0a      	ldr	r3, [pc, #40]	; (8016c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8016c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c6a:	4a09      	ldr	r2, [pc, #36]	; (8016c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8016c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016c70:	6613      	str	r3, [r2, #96]	; 0x60
 8016c72:	4b07      	ldr	r3, [pc, #28]	; (8016c90 <HAL_TIM_PWM_MspInit+0x3c>)
 8016c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016c7a:	60fb      	str	r3, [r7, #12]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8016c7e:	bf00      	nop
 8016c80:	3714      	adds	r7, #20
 8016c82:	46bd      	mov	sp, r7
 8016c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c88:	4770      	bx	lr
 8016c8a:	bf00      	nop
 8016c8c:	40013400 	.word	0x40013400
 8016c90:	40021000 	.word	0x40021000

08016c94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b08a      	sub	sp, #40	; 0x28
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016c9c:	f107 0314 	add.w	r3, r7, #20
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	601a      	str	r2, [r3, #0]
 8016ca4:	605a      	str	r2, [r3, #4]
 8016ca6:	609a      	str	r2, [r3, #8]
 8016ca8:	60da      	str	r2, [r3, #12]
 8016caa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	4a2b      	ldr	r2, [pc, #172]	; (8016d60 <HAL_TIM_MspPostInit+0xcc>)
 8016cb2:	4293      	cmp	r3, r2
 8016cb4:	d12d      	bne.n	8016d12 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016cb6:	4b2b      	ldr	r3, [pc, #172]	; (8016d64 <HAL_TIM_MspPostInit+0xd0>)
 8016cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016cba:	4a2a      	ldr	r2, [pc, #168]	; (8016d64 <HAL_TIM_MspPostInit+0xd0>)
 8016cbc:	f043 0302 	orr.w	r3, r3, #2
 8016cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016cc2:	4b28      	ldr	r3, [pc, #160]	; (8016d64 <HAL_TIM_MspPostInit+0xd0>)
 8016cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016cc6:	f003 0302 	and.w	r3, r3, #2
 8016cca:	613b      	str	r3, [r7, #16]
 8016ccc:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8016cce:	2340      	movs	r3, #64	; 0x40
 8016cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016cd2:	2302      	movs	r3, #2
 8016cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016cda:	2300      	movs	r3, #0
 8016cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8016cde:	2305      	movs	r3, #5
 8016ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016ce2:	f107 0314 	add.w	r3, r7, #20
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	481f      	ldr	r0, [pc, #124]	; (8016d68 <HAL_TIM_MspPostInit+0xd4>)
 8016cea:	f003 fdff 	bl	801a8ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8016cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016cf4:	2302      	movs	r3, #2
 8016cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8016d00:	230a      	movs	r3, #10
 8016d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016d04:	f107 0314 	add.w	r3, r7, #20
 8016d08:	4619      	mov	r1, r3
 8016d0a:	4817      	ldr	r0, [pc, #92]	; (8016d68 <HAL_TIM_MspPostInit+0xd4>)
 8016d0c:	f003 fdee 	bl	801a8ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8016d10:	e022      	b.n	8016d58 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	4a15      	ldr	r2, [pc, #84]	; (8016d6c <HAL_TIM_MspPostInit+0xd8>)
 8016d18:	4293      	cmp	r3, r2
 8016d1a:	d11d      	bne.n	8016d58 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016d1c:	4b11      	ldr	r3, [pc, #68]	; (8016d64 <HAL_TIM_MspPostInit+0xd0>)
 8016d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d20:	4a10      	ldr	r2, [pc, #64]	; (8016d64 <HAL_TIM_MspPostInit+0xd0>)
 8016d22:	f043 0301 	orr.w	r3, r3, #1
 8016d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016d28:	4b0e      	ldr	r3, [pc, #56]	; (8016d64 <HAL_TIM_MspPostInit+0xd0>)
 8016d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d2c:	f003 0301 	and.w	r3, r3, #1
 8016d30:	60fb      	str	r3, [r7, #12]
 8016d32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8016d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016d3a:	2302      	movs	r3, #2
 8016d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016d42:	2300      	movs	r3, #0
 8016d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8016d46:	2301      	movs	r3, #1
 8016d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8016d4a:	f107 0314 	add.w	r3, r7, #20
 8016d4e:	4619      	mov	r1, r3
 8016d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016d54:	f003 fdca 	bl	801a8ec <HAL_GPIO_Init>
}
 8016d58:	bf00      	nop
 8016d5a:	3728      	adds	r7, #40	; 0x28
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}
 8016d60:	40013400 	.word	0x40013400
 8016d64:	40021000 	.word	0x40021000
 8016d68:	48000400 	.word	0x48000400
 8016d6c:	40014400 	.word	0x40014400

08016d70 <get_center_velocity>:

parameter_speed speed600_shortest;

parameter_speed speed600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8016d70:	b084      	sub	sp, #16
 8016d72:	b480      	push	{r7}
 8016d74:	b083      	sub	sp, #12
 8016d76:	af00      	add	r7, sp, #0
 8016d78:	f107 0c10 	add.w	ip, r7, #16
 8016d7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8016d80:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016d84:	f113 0f02 	cmn.w	r3, #2
 8016d88:	d102      	bne.n	8016d90 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8016d8a:	69bb      	ldr	r3, [r7, #24]
 8016d8c:	607b      	str	r3, [r7, #4]
 8016d8e:	e083      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8016d90:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016d94:	f113 0f03 	cmn.w	r3, #3
 8016d98:	d102      	bne.n	8016da0 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8016d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d9c:	607b      	str	r3, [r7, #4]
 8016d9e:	e07b      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8016da0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016da4:	f113 0f04 	cmn.w	r3, #4
 8016da8:	d102      	bne.n	8016db0 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8016daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dac:	607b      	str	r3, [r7, #4]
 8016dae:	e073      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8016db0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016db4:	f113 0f05 	cmn.w	r3, #5
 8016db8:	d102      	bne.n	8016dc0 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8016dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016dbc:	607b      	str	r3, [r7, #4]
 8016dbe:	e06b      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8016dc0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016dc4:	f113 0f06 	cmn.w	r3, #6
 8016dc8:	d102      	bne.n	8016dd0 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8016dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016dcc:	607b      	str	r3, [r7, #4]
 8016dce:	e063      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8016dd0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016dd4:	f113 0f07 	cmn.w	r3, #7
 8016dd8:	d102      	bne.n	8016de0 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8016dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016ddc:	607b      	str	r3, [r7, #4]
 8016dde:	e05b      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8016de0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016de4:	f113 0f08 	cmn.w	r3, #8
 8016de8:	d103      	bne.n	8016df2 <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 8016dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016dee:	607b      	str	r3, [r7, #4]
 8016df0:	e052      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8016df2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016df6:	f113 0f09 	cmn.w	r3, #9
 8016dfa:	d103      	bne.n	8016e04 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8016dfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016e00:	607b      	str	r3, [r7, #4]
 8016e02:	e049      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8016e04:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e08:	f113 0f0a 	cmn.w	r3, #10
 8016e0c:	d103      	bne.n	8016e16 <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8016e0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016e12:	607b      	str	r3, [r7, #4]
 8016e14:	e040      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 8016e16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e1a:	f113 0f0b 	cmn.w	r3, #11
 8016e1e:	d103      	bne.n	8016e28 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8016e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016e24:	607b      	str	r3, [r7, #4]
 8016e26:	e037      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8016e28:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e2c:	f113 0f0c 	cmn.w	r3, #12
 8016e30:	d103      	bne.n	8016e3a <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8016e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016e36:	607b      	str	r3, [r7, #4]
 8016e38:	e02e      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8016e3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e3e:	f113 0f0d 	cmn.w	r3, #13
 8016e42:	d103      	bne.n	8016e4c <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8016e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016e48:	607b      	str	r3, [r7, #4]
 8016e4a:	e025      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8016e4c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e50:	f113 0f0e 	cmn.w	r3, #14
 8016e54:	d103      	bne.n	8016e5e <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 8016e56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8016e5a:	607b      	str	r3, [r7, #4]
 8016e5c:	e01c      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8016e5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e62:	f113 0f0f 	cmn.w	r3, #15
 8016e66:	d103      	bne.n	8016e70 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8016e68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8016e6c:	607b      	str	r3, [r7, #4]
 8016e6e:	e013      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8016e70:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e74:	f113 0f10 	cmn.w	r3, #16
 8016e78:	d103      	bne.n	8016e82 <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8016e7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e7e:	607b      	str	r3, [r7, #4]
 8016e80:	e00a      	b.n	8016e98 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 8016e82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e86:	f113 0f11 	cmn.w	r3, #17
 8016e8a:	d103      	bne.n	8016e94 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8016e8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016e90:	607b      	str	r3, [r7, #4]
 8016e92:	e001      	b.n	8016e98 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8016e94:	697b      	ldr	r3, [r7, #20]
 8016e96:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	ee07 3a90 	vmov	s15, r3
}
 8016e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8016ea2:	370c      	adds	r7, #12
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eaa:	b004      	add	sp, #16
 8016eac:	4770      	bx	lr
	...

08016eb0 <input_parameter>:

void input_parameter(void) {
 8016eb0:	b480      	push	{r7}
 8016eb2:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 8016eb4:	4b8f      	ldr	r3, [pc, #572]	; (80170f4 <input_parameter+0x244>)
 8016eb6:	4a90      	ldr	r2, [pc, #576]	; (80170f8 <input_parameter+0x248>)
 8016eb8:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8016eba:	4b8e      	ldr	r3, [pc, #568]	; (80170f4 <input_parameter+0x244>)
 8016ebc:	4a8e      	ldr	r2, [pc, #568]	; (80170f8 <input_parameter+0x248>)
 8016ebe:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8016ec0:	4b8c      	ldr	r3, [pc, #560]	; (80170f4 <input_parameter+0x244>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8016ec4:	4a8b      	ldr	r2, [pc, #556]	; (80170f4 <input_parameter+0x244>)
 8016ec6:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 930; //550
 8016ec8:	4b8a      	ldr	r3, [pc, #552]	; (80170f4 <input_parameter+0x244>)
 8016eca:	4a8c      	ldr	r2, [pc, #560]	; (80170fc <input_parameter+0x24c>)
 8016ecc:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 11000; //10000
 8016ece:	4b89      	ldr	r3, [pc, #548]	; (80170f4 <input_parameter+0x244>)
 8016ed0:	4a8b      	ldr	r2, [pc, #556]	; (8017100 <input_parameter+0x250>)
 8016ed2:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 0.5; //55;
 8016ed4:	4b87      	ldr	r3, [pc, #540]	; (80170f4 <input_parameter+0x244>)
 8016ed6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8016eda:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8016edc:	4b85      	ldr	r3, [pc, #532]	; (80170f4 <input_parameter+0x244>)
 8016ede:	4a89      	ldr	r2, [pc, #548]	; (8017104 <input_parameter+0x254>)
 8016ee0:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8016ee2:	4b84      	ldr	r3, [pc, #528]	; (80170f4 <input_parameter+0x244>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8016ee6:	4a83      	ldr	r2, [pc, #524]	; (80170f4 <input_parameter+0x244>)
 8016ee8:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 930;
 8016eea:	4b82      	ldr	r3, [pc, #520]	; (80170f4 <input_parameter+0x244>)
 8016eec:	4a83      	ldr	r2, [pc, #524]	; (80170fc <input_parameter+0x24c>)
 8016eee:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 11000;
 8016ef0:	4b80      	ldr	r3, [pc, #512]	; (80170f4 <input_parameter+0x244>)
 8016ef2:	4a83      	ldr	r2, [pc, #524]	; (8017100 <input_parameter+0x250>)
 8016ef4:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 0.5; //50;
 8016ef6:	4b7f      	ldr	r3, [pc, #508]	; (80170f4 <input_parameter+0x244>)
 8016ef8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8016efc:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8016efe:	4b7d      	ldr	r3, [pc, #500]	; (80170f4 <input_parameter+0x244>)
 8016f00:	4a81      	ldr	r2, [pc, #516]	; (8017108 <input_parameter+0x258>)
 8016f02:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8016f04:	4b81      	ldr	r3, [pc, #516]	; (801710c <input_parameter+0x25c>)
 8016f06:	4a82      	ldr	r2, [pc, #520]	; (8017110 <input_parameter+0x260>)
 8016f08:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8016f0a:	4b80      	ldr	r3, [pc, #512]	; (801710c <input_parameter+0x25c>)
 8016f0c:	4a80      	ldr	r2, [pc, #512]	; (8017110 <input_parameter+0x260>)
 8016f0e:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8016f10:	4b7e      	ldr	r3, [pc, #504]	; (801710c <input_parameter+0x25c>)
 8016f12:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8016f14:	4a7d      	ldr	r2, [pc, #500]	; (801710c <input_parameter+0x25c>)
 8016f16:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8016f18:	4b7c      	ldr	r3, [pc, #496]	; (801710c <input_parameter+0x25c>)
 8016f1a:	4a7e      	ldr	r2, [pc, #504]	; (8017114 <input_parameter+0x264>)
 8016f1c:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8016f1e:	4b7b      	ldr	r3, [pc, #492]	; (801710c <input_parameter+0x25c>)
 8016f20:	4a7d      	ldr	r2, [pc, #500]	; (8017118 <input_parameter+0x268>)
 8016f22:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8016f24:	4b79      	ldr	r3, [pc, #484]	; (801710c <input_parameter+0x25c>)
 8016f26:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8016f2a:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8016f2c:	4b77      	ldr	r3, [pc, #476]	; (801710c <input_parameter+0x25c>)
 8016f2e:	4a75      	ldr	r2, [pc, #468]	; (8017104 <input_parameter+0x254>)
 8016f30:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8016f32:	4b76      	ldr	r3, [pc, #472]	; (801710c <input_parameter+0x25c>)
 8016f34:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8016f36:	4a75      	ldr	r2, [pc, #468]	; (801710c <input_parameter+0x25c>)
 8016f38:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8016f3a:	4b74      	ldr	r3, [pc, #464]	; (801710c <input_parameter+0x25c>)
 8016f3c:	4a77      	ldr	r2, [pc, #476]	; (801711c <input_parameter+0x26c>)
 8016f3e:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8016f40:	4b72      	ldr	r3, [pc, #456]	; (801710c <input_parameter+0x25c>)
 8016f42:	4a75      	ldr	r2, [pc, #468]	; (8017118 <input_parameter+0x268>)
 8016f44:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8016f46:	4b71      	ldr	r3, [pc, #452]	; (801710c <input_parameter+0x25c>)
 8016f48:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8016f4c:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8016f4e:	4b6f      	ldr	r3, [pc, #444]	; (801710c <input_parameter+0x25c>)
 8016f50:	4a6d      	ldr	r2, [pc, #436]	; (8017108 <input_parameter+0x258>)
 8016f52:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8016f54:	4b67      	ldr	r3, [pc, #412]	; (80170f4 <input_parameter+0x244>)
 8016f56:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8016f58:	4a71      	ldr	r2, [pc, #452]	; (8017120 <input_parameter+0x270>)
 8016f5a:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8016f5c:	4b65      	ldr	r3, [pc, #404]	; (80170f4 <input_parameter+0x244>)
 8016f5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8016f62:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8017124 <input_parameter+0x274>
 8016f66:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8016f6a:	4b6d      	ldr	r3, [pc, #436]	; (8017120 <input_parameter+0x270>)
 8016f6c:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8016f70:	4b60      	ldr	r3, [pc, #384]	; (80170f4 <input_parameter+0x244>)
 8016f72:	689b      	ldr	r3, [r3, #8]
 8016f74:	4a6a      	ldr	r2, [pc, #424]	; (8017120 <input_parameter+0x270>)
 8016f76:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8016f78:	4b5e      	ldr	r3, [pc, #376]	; (80170f4 <input_parameter+0x244>)
 8016f7a:	695b      	ldr	r3, [r3, #20]
 8016f7c:	4a68      	ldr	r2, [pc, #416]	; (8017120 <input_parameter+0x270>)
 8016f7e:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8016f80:	4b5c      	ldr	r3, [pc, #368]	; (80170f4 <input_parameter+0x244>)
 8016f82:	699b      	ldr	r3, [r3, #24]
 8016f84:	4a66      	ldr	r2, [pc, #408]	; (8017120 <input_parameter+0x270>)
 8016f86:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8016f88:	4b5a      	ldr	r3, [pc, #360]	; (80170f4 <input_parameter+0x244>)
 8016f8a:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8016f8e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8016f92:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8016f96:	4b62      	ldr	r3, [pc, #392]	; (8017120 <input_parameter+0x270>)
 8016f98:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8016f9c:	4b55      	ldr	r3, [pc, #340]	; (80170f4 <input_parameter+0x244>)
 8016f9e:	691b      	ldr	r3, [r3, #16]
 8016fa0:	4a5f      	ldr	r2, [pc, #380]	; (8017120 <input_parameter+0x270>)
 8016fa2:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8016fa4:	4b53      	ldr	r3, [pc, #332]	; (80170f4 <input_parameter+0x244>)
 8016fa6:	69db      	ldr	r3, [r3, #28]
 8016fa8:	4a5d      	ldr	r2, [pc, #372]	; (8017120 <input_parameter+0x270>)
 8016faa:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8016fac:	4b51      	ldr	r3, [pc, #324]	; (80170f4 <input_parameter+0x244>)
 8016fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fb0:	4a5b      	ldr	r2, [pc, #364]	; (8017120 <input_parameter+0x270>)
 8016fb2:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8016fb4:	4b4f      	ldr	r3, [pc, #316]	; (80170f4 <input_parameter+0x244>)
 8016fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fb8:	4a59      	ldr	r2, [pc, #356]	; (8017120 <input_parameter+0x270>)
 8016fba:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8016fbc:	4b4d      	ldr	r3, [pc, #308]	; (80170f4 <input_parameter+0x244>)
 8016fbe:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8016fc2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8016fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8016fca:	4b55      	ldr	r3, [pc, #340]	; (8017120 <input_parameter+0x270>)
 8016fcc:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8016fd0:	4b48      	ldr	r3, [pc, #288]	; (80170f4 <input_parameter+0x244>)
 8016fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fd4:	4a52      	ldr	r2, [pc, #328]	; (8017120 <input_parameter+0x270>)
 8016fd6:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8016fd8:	4b51      	ldr	r3, [pc, #324]	; (8017120 <input_parameter+0x270>)
 8016fda:	685b      	ldr	r3, [r3, #4]
 8016fdc:	4a50      	ldr	r2, [pc, #320]	; (8017120 <input_parameter+0x270>)
 8016fde:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8016fe0:	4b4f      	ldr	r3, [pc, #316]	; (8017120 <input_parameter+0x270>)
 8016fe2:	4a51      	ldr	r2, [pc, #324]	; (8017128 <input_parameter+0x278>)
 8016fe4:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8016fe6:	4b4e      	ldr	r3, [pc, #312]	; (8017120 <input_parameter+0x270>)
 8016fe8:	4a50      	ldr	r2, [pc, #320]	; (801712c <input_parameter+0x27c>)
 8016fea:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8016fec:	4b4c      	ldr	r3, [pc, #304]	; (8017120 <input_parameter+0x270>)
 8016fee:	4a50      	ldr	r2, [pc, #320]	; (8017130 <input_parameter+0x280>)
 8016ff0:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8016ff2:	4b4b      	ldr	r3, [pc, #300]	; (8017120 <input_parameter+0x270>)
 8016ff4:	4a4f      	ldr	r2, [pc, #316]	; (8017134 <input_parameter+0x284>)
 8016ff6:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8016ff8:	4b49      	ldr	r3, [pc, #292]	; (8017120 <input_parameter+0x270>)
 8016ffa:	685b      	ldr	r3, [r3, #4]
 8016ffc:	4a48      	ldr	r2, [pc, #288]	; (8017120 <input_parameter+0x270>)
 8016ffe:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8017000:	4b47      	ldr	r3, [pc, #284]	; (8017120 <input_parameter+0x270>)
 8017002:	4a49      	ldr	r2, [pc, #292]	; (8017128 <input_parameter+0x278>)
 8017004:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8017006:	4b46      	ldr	r3, [pc, #280]	; (8017120 <input_parameter+0x270>)
 8017008:	4a48      	ldr	r2, [pc, #288]	; (801712c <input_parameter+0x27c>)
 801700a:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 801700c:	4b44      	ldr	r3, [pc, #272]	; (8017120 <input_parameter+0x270>)
 801700e:	4a4a      	ldr	r2, [pc, #296]	; (8017138 <input_parameter+0x288>)
 8017010:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017012:	4b43      	ldr	r3, [pc, #268]	; (8017120 <input_parameter+0x270>)
 8017014:	4a49      	ldr	r2, [pc, #292]	; (801713c <input_parameter+0x28c>)
 8017016:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017018:	4b41      	ldr	r3, [pc, #260]	; (8017120 <input_parameter+0x270>)
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	4a40      	ldr	r2, [pc, #256]	; (8017120 <input_parameter+0x270>)
 801701e:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017020:	4b3f      	ldr	r3, [pc, #252]	; (8017120 <input_parameter+0x270>)
 8017022:	4a47      	ldr	r2, [pc, #284]	; (8017140 <input_parameter+0x290>)
 8017024:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017026:	4b3e      	ldr	r3, [pc, #248]	; (8017120 <input_parameter+0x270>)
 8017028:	4a46      	ldr	r2, [pc, #280]	; (8017144 <input_parameter+0x294>)
 801702a:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 801702c:	4b3c      	ldr	r3, [pc, #240]	; (8017120 <input_parameter+0x270>)
 801702e:	4a46      	ldr	r2, [pc, #280]	; (8017148 <input_parameter+0x298>)
 8017030:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017032:	4b3b      	ldr	r3, [pc, #236]	; (8017120 <input_parameter+0x270>)
 8017034:	4a45      	ldr	r2, [pc, #276]	; (801714c <input_parameter+0x29c>)
 8017036:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017038:	4b39      	ldr	r3, [pc, #228]	; (8017120 <input_parameter+0x270>)
 801703a:	685b      	ldr	r3, [r3, #4]
 801703c:	4a38      	ldr	r2, [pc, #224]	; (8017120 <input_parameter+0x270>)
 801703e:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017040:	4b37      	ldr	r3, [pc, #220]	; (8017120 <input_parameter+0x270>)
 8017042:	4a43      	ldr	r2, [pc, #268]	; (8017150 <input_parameter+0x2a0>)
 8017044:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017046:	4b36      	ldr	r3, [pc, #216]	; (8017120 <input_parameter+0x270>)
 8017048:	4a3e      	ldr	r2, [pc, #248]	; (8017144 <input_parameter+0x294>)
 801704a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 801704c:	4b34      	ldr	r3, [pc, #208]	; (8017120 <input_parameter+0x270>)
 801704e:	4a41      	ldr	r2, [pc, #260]	; (8017154 <input_parameter+0x2a4>)
 8017050:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017052:	4b33      	ldr	r3, [pc, #204]	; (8017120 <input_parameter+0x270>)
 8017054:	4a40      	ldr	r2, [pc, #256]	; (8017158 <input_parameter+0x2a8>)
 8017056:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017058:	4b31      	ldr	r3, [pc, #196]	; (8017120 <input_parameter+0x270>)
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	4a30      	ldr	r2, [pc, #192]	; (8017120 <input_parameter+0x270>)
 801705e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017062:	4b2f      	ldr	r3, [pc, #188]	; (8017120 <input_parameter+0x270>)
 8017064:	4a30      	ldr	r2, [pc, #192]	; (8017128 <input_parameter+0x278>)
 8017066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 801706a:	4b2d      	ldr	r3, [pc, #180]	; (8017120 <input_parameter+0x270>)
 801706c:	4a2f      	ldr	r2, [pc, #188]	; (801712c <input_parameter+0x27c>)
 801706e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017072:	4b2b      	ldr	r3, [pc, #172]	; (8017120 <input_parameter+0x270>)
 8017074:	4a39      	ldr	r2, [pc, #228]	; (801715c <input_parameter+0x2ac>)
 8017076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 801707a:	4b29      	ldr	r3, [pc, #164]	; (8017120 <input_parameter+0x270>)
 801707c:	4a38      	ldr	r2, [pc, #224]	; (8017160 <input_parameter+0x2b0>)
 801707e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017082:	4b27      	ldr	r3, [pc, #156]	; (8017120 <input_parameter+0x270>)
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	4a26      	ldr	r2, [pc, #152]	; (8017120 <input_parameter+0x270>)
 8017088:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 801708c:	4b24      	ldr	r3, [pc, #144]	; (8017120 <input_parameter+0x270>)
 801708e:	4a26      	ldr	r2, [pc, #152]	; (8017128 <input_parameter+0x278>)
 8017090:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017094:	4b22      	ldr	r3, [pc, #136]	; (8017120 <input_parameter+0x270>)
 8017096:	4a25      	ldr	r2, [pc, #148]	; (801712c <input_parameter+0x27c>)
 8017098:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 801709c:	4b20      	ldr	r3, [pc, #128]	; (8017120 <input_parameter+0x270>)
 801709e:	4a31      	ldr	r2, [pc, #196]	; (8017164 <input_parameter+0x2b4>)
 80170a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 80170a4:	4b1e      	ldr	r3, [pc, #120]	; (8017120 <input_parameter+0x270>)
 80170a6:	4a30      	ldr	r2, [pc, #192]	; (8017168 <input_parameter+0x2b8>)
 80170a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80170ac:	4b1c      	ldr	r3, [pc, #112]	; (8017120 <input_parameter+0x270>)
 80170ae:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 80170b0:	4a1b      	ldr	r2, [pc, #108]	; (8017120 <input_parameter+0x270>)
 80170b2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 80170b6:	4b1a      	ldr	r3, [pc, #104]	; (8017120 <input_parameter+0x270>)
 80170b8:	4a2c      	ldr	r2, [pc, #176]	; (801716c <input_parameter+0x2bc>)
 80170ba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 80170be:	4b18      	ldr	r3, [pc, #96]	; (8017120 <input_parameter+0x270>)
 80170c0:	4a20      	ldr	r2, [pc, #128]	; (8017144 <input_parameter+0x294>)
 80170c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 80170c6:	4b16      	ldr	r3, [pc, #88]	; (8017120 <input_parameter+0x270>)
 80170c8:	4a29      	ldr	r2, [pc, #164]	; (8017170 <input_parameter+0x2c0>)
 80170ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 80170ce:	4b14      	ldr	r3, [pc, #80]	; (8017120 <input_parameter+0x270>)
 80170d0:	4a28      	ldr	r2, [pc, #160]	; (8017174 <input_parameter+0x2c4>)
 80170d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80170d6:	4b12      	ldr	r3, [pc, #72]	; (8017120 <input_parameter+0x270>)
 80170d8:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 80170da:	4a11      	ldr	r2, [pc, #68]	; (8017120 <input_parameter+0x270>)
 80170dc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 80170e0:	4b0f      	ldr	r3, [pc, #60]	; (8017120 <input_parameter+0x270>)
 80170e2:	4a22      	ldr	r2, [pc, #136]	; (801716c <input_parameter+0x2bc>)
 80170e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 80170e8:	4b0d      	ldr	r3, [pc, #52]	; (8017120 <input_parameter+0x270>)
 80170ea:	4a16      	ldr	r2, [pc, #88]	; (8017144 <input_parameter+0x294>)
 80170ec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 80170f0:	4b0b      	ldr	r3, [pc, #44]	; (8017120 <input_parameter+0x270>)
 80170f2:	e041      	b.n	8017178 <input_parameter+0x2c8>
 80170f4:	2000db2c 	.word	0x2000db2c
 80170f8:	43960000 	.word	0x43960000
 80170fc:	44688000 	.word	0x44688000
 8017100:	462be000 	.word	0x462be000
 8017104:	41a00000 	.word	0x41a00000
 8017108:	41980000 	.word	0x41980000
 801710c:	2000dc74 	.word	0x2000dc74
 8017110:	437a0000 	.word	0x437a0000
 8017114:	444f8000 	.word	0x444f8000
 8017118:	460ca000 	.word	0x460ca000
 801711c:	44368000 	.word	0x44368000
 8017120:	2000ddbc 	.word	0x2000ddbc
 8017124:	43480000 	.word	0x43480000
 8017128:	44160000 	.word	0x44160000
 801712c:	461c4000 	.word	0x461c4000
 8017130:	42980000 	.word	0x42980000
 8017134:	42d60000 	.word	0x42d60000
 8017138:	429a0000 	.word	0x429a0000
 801713c:	42ce0000 	.word	0x42ce0000
 8017140:	43d70000 	.word	0x43d70000
 8017144:	45fa0000 	.word	0x45fa0000
 8017148:	42820000 	.word	0x42820000
 801714c:	42a00000 	.word	0x42a00000
 8017150:	43e10000 	.word	0x43e10000
 8017154:	42700000 	.word	0x42700000
 8017158:	428e0000 	.word	0x428e0000
 801715c:	41d80000 	.word	0x41d80000
 8017160:	42b20000 	.word	0x42b20000
 8017164:	42040000 	.word	0x42040000
 8017168:	42b40000 	.word	0x42b40000
 801716c:	44188000 	.word	0x44188000
 8017170:	42860000 	.word	0x42860000
 8017174:	42920000 	.word	0x42920000
 8017178:	4a99      	ldr	r2, [pc, #612]	; (80173e0 <input_parameter+0x530>)
 801717a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 801717e:	4b99      	ldr	r3, [pc, #612]	; (80173e4 <input_parameter+0x534>)
 8017180:	4a99      	ldr	r2, [pc, #612]	; (80173e8 <input_parameter+0x538>)
 8017182:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017186:	4b97      	ldr	r3, [pc, #604]	; (80173e4 <input_parameter+0x534>)
 8017188:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 801718a:	4a96      	ldr	r2, [pc, #600]	; (80173e4 <input_parameter+0x534>)
 801718c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8017190:	4b94      	ldr	r3, [pc, #592]	; (80173e4 <input_parameter+0x534>)
 8017192:	4a96      	ldr	r2, [pc, #600]	; (80173ec <input_parameter+0x53c>)
 8017194:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017198:	4b92      	ldr	r3, [pc, #584]	; (80173e4 <input_parameter+0x534>)
 801719a:	4a95      	ldr	r2, [pc, #596]	; (80173f0 <input_parameter+0x540>)
 801719c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 80171a0:	4b90      	ldr	r3, [pc, #576]	; (80173e4 <input_parameter+0x534>)
 80171a2:	4a94      	ldr	r2, [pc, #592]	; (80173f4 <input_parameter+0x544>)
 80171a4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 80171a8:	4b8e      	ldr	r3, [pc, #568]	; (80173e4 <input_parameter+0x534>)
 80171aa:	4a92      	ldr	r2, [pc, #584]	; (80173f4 <input_parameter+0x544>)
 80171ac:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80171b0:	4b8c      	ldr	r3, [pc, #560]	; (80173e4 <input_parameter+0x534>)
 80171b2:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 80171b4:	4a8b      	ldr	r2, [pc, #556]	; (80173e4 <input_parameter+0x534>)
 80171b6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 80171ba:	4b8a      	ldr	r3, [pc, #552]	; (80173e4 <input_parameter+0x534>)
 80171bc:	4a8b      	ldr	r2, [pc, #556]	; (80173ec <input_parameter+0x53c>)
 80171be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 80171c2:	4b88      	ldr	r3, [pc, #544]	; (80173e4 <input_parameter+0x534>)
 80171c4:	4a8a      	ldr	r2, [pc, #552]	; (80173f0 <input_parameter+0x540>)
 80171c6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 80171ca:	4b86      	ldr	r3, [pc, #536]	; (80173e4 <input_parameter+0x534>)
 80171cc:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 80171d0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 80171d4:	4b83      	ldr	r3, [pc, #524]	; (80173e4 <input_parameter+0x534>)
 80171d6:	4a88      	ldr	r2, [pc, #544]	; (80173f8 <input_parameter+0x548>)
 80171d8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80171dc:	4b81      	ldr	r3, [pc, #516]	; (80173e4 <input_parameter+0x534>)
 80171de:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 80171e0:	4a80      	ldr	r2, [pc, #512]	; (80173e4 <input_parameter+0x534>)
 80171e2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 80171e6:	4b7f      	ldr	r3, [pc, #508]	; (80173e4 <input_parameter+0x534>)
 80171e8:	4a84      	ldr	r2, [pc, #528]	; (80173fc <input_parameter+0x54c>)
 80171ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 80171ee:	4b7d      	ldr	r3, [pc, #500]	; (80173e4 <input_parameter+0x534>)
 80171f0:	4a83      	ldr	r2, [pc, #524]	; (8017400 <input_parameter+0x550>)
 80171f2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 80171f6:	4b7b      	ldr	r3, [pc, #492]	; (80173e4 <input_parameter+0x534>)
 80171f8:	4a82      	ldr	r2, [pc, #520]	; (8017404 <input_parameter+0x554>)
 80171fa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 80171fe:	4b79      	ldr	r3, [pc, #484]	; (80173e4 <input_parameter+0x534>)
 8017200:	4a81      	ldr	r2, [pc, #516]	; (8017408 <input_parameter+0x558>)
 8017202:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017206:	4b77      	ldr	r3, [pc, #476]	; (80173e4 <input_parameter+0x534>)
 8017208:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 801720a:	4a76      	ldr	r2, [pc, #472]	; (80173e4 <input_parameter+0x534>)
 801720c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8017210:	4b74      	ldr	r3, [pc, #464]	; (80173e4 <input_parameter+0x534>)
 8017212:	4a7a      	ldr	r2, [pc, #488]	; (80173fc <input_parameter+0x54c>)
 8017214:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8017218:	4b72      	ldr	r3, [pc, #456]	; (80173e4 <input_parameter+0x534>)
 801721a:	4a79      	ldr	r2, [pc, #484]	; (8017400 <input_parameter+0x550>)
 801721c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8017220:	4b70      	ldr	r3, [pc, #448]	; (80173e4 <input_parameter+0x534>)
 8017222:	4a78      	ldr	r2, [pc, #480]	; (8017404 <input_parameter+0x554>)
 8017224:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8017228:	4b6e      	ldr	r3, [pc, #440]	; (80173e4 <input_parameter+0x534>)
 801722a:	4a78      	ldr	r2, [pc, #480]	; (801740c <input_parameter+0x55c>)
 801722c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017230:	4b6c      	ldr	r3, [pc, #432]	; (80173e4 <input_parameter+0x534>)
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	4a6b      	ldr	r2, [pc, #428]	; (80173e4 <input_parameter+0x534>)
 8017236:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 801723a:	4b6a      	ldr	r3, [pc, #424]	; (80173e4 <input_parameter+0x534>)
 801723c:	4a74      	ldr	r2, [pc, #464]	; (8017410 <input_parameter+0x560>)
 801723e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8017242:	4b68      	ldr	r3, [pc, #416]	; (80173e4 <input_parameter+0x534>)
 8017244:	4a73      	ldr	r2, [pc, #460]	; (8017414 <input_parameter+0x564>)
 8017246:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 801724a:	4b66      	ldr	r3, [pc, #408]	; (80173e4 <input_parameter+0x534>)
 801724c:	4a72      	ldr	r2, [pc, #456]	; (8017418 <input_parameter+0x568>)
 801724e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8017252:	4b64      	ldr	r3, [pc, #400]	; (80173e4 <input_parameter+0x534>)
 8017254:	4a71      	ldr	r2, [pc, #452]	; (801741c <input_parameter+0x56c>)
 8017256:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 801725a:	4b62      	ldr	r3, [pc, #392]	; (80173e4 <input_parameter+0x534>)
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	4a61      	ldr	r2, [pc, #388]	; (80173e4 <input_parameter+0x534>)
 8017260:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8017264:	4b5f      	ldr	r3, [pc, #380]	; (80173e4 <input_parameter+0x534>)
 8017266:	4a6a      	ldr	r2, [pc, #424]	; (8017410 <input_parameter+0x560>)
 8017268:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 801726c:	4b5d      	ldr	r3, [pc, #372]	; (80173e4 <input_parameter+0x534>)
 801726e:	4a69      	ldr	r2, [pc, #420]	; (8017414 <input_parameter+0x564>)
 8017270:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8017274:	4b5b      	ldr	r3, [pc, #364]	; (80173e4 <input_parameter+0x534>)
 8017276:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801727a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 801727e:	4b59      	ldr	r3, [pc, #356]	; (80173e4 <input_parameter+0x534>)
 8017280:	4a67      	ldr	r2, [pc, #412]	; (8017420 <input_parameter+0x570>)
 8017282:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8017286:	4b67      	ldr	r3, [pc, #412]	; (8017424 <input_parameter+0x574>)
 8017288:	4a58      	ldr	r2, [pc, #352]	; (80173ec <input_parameter+0x53c>)
 801728a:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 801728c:	4b65      	ldr	r3, [pc, #404]	; (8017424 <input_parameter+0x574>)
 801728e:	4a57      	ldr	r2, [pc, #348]	; (80173ec <input_parameter+0x53c>)
 8017290:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017292:	4b64      	ldr	r3, [pc, #400]	; (8017424 <input_parameter+0x574>)
 8017294:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8017296:	4a63      	ldr	r2, [pc, #396]	; (8017424 <input_parameter+0x574>)
 8017298:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 801729a:	4b62      	ldr	r3, [pc, #392]	; (8017424 <input_parameter+0x574>)
 801729c:	4a62      	ldr	r2, [pc, #392]	; (8017428 <input_parameter+0x578>)
 801729e:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 80172a0:	4b60      	ldr	r3, [pc, #384]	; (8017424 <input_parameter+0x574>)
 80172a2:	4a62      	ldr	r2, [pc, #392]	; (801742c <input_parameter+0x57c>)
 80172a4:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 80172a6:	4b5f      	ldr	r3, [pc, #380]	; (8017424 <input_parameter+0x574>)
 80172a8:	4a61      	ldr	r2, [pc, #388]	; (8017430 <input_parameter+0x580>)
 80172aa:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 80172ac:	4b5d      	ldr	r3, [pc, #372]	; (8017424 <input_parameter+0x574>)
 80172ae:	4a61      	ldr	r2, [pc, #388]	; (8017434 <input_parameter+0x584>)
 80172b0:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 80172b2:	4b5c      	ldr	r3, [pc, #368]	; (8017424 <input_parameter+0x574>)
 80172b4:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 80172b6:	4a5b      	ldr	r2, [pc, #364]	; (8017424 <input_parameter+0x574>)
 80172b8:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 80172ba:	4b5a      	ldr	r3, [pc, #360]	; (8017424 <input_parameter+0x574>)
 80172bc:	4a5a      	ldr	r2, [pc, #360]	; (8017428 <input_parameter+0x578>)
 80172be:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 80172c0:	4b58      	ldr	r3, [pc, #352]	; (8017424 <input_parameter+0x574>)
 80172c2:	4a5a      	ldr	r2, [pc, #360]	; (801742c <input_parameter+0x57c>)
 80172c4:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 80172c6:	4b57      	ldr	r3, [pc, #348]	; (8017424 <input_parameter+0x574>)
 80172c8:	4a59      	ldr	r2, [pc, #356]	; (8017430 <input_parameter+0x580>)
 80172ca:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 80172cc:	4b55      	ldr	r3, [pc, #340]	; (8017424 <input_parameter+0x574>)
 80172ce:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80172d2:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 80172d4:	4b53      	ldr	r3, [pc, #332]	; (8017424 <input_parameter+0x574>)
 80172d6:	4a45      	ldr	r2, [pc, #276]	; (80173ec <input_parameter+0x53c>)
 80172d8:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 80172da:	4b52      	ldr	r3, [pc, #328]	; (8017424 <input_parameter+0x574>)
 80172dc:	4a56      	ldr	r2, [pc, #344]	; (8017438 <input_parameter+0x588>)
 80172de:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 80172e0:	4b50      	ldr	r3, [pc, #320]	; (8017424 <input_parameter+0x574>)
 80172e2:	4a56      	ldr	r2, [pc, #344]	; (801743c <input_parameter+0x58c>)
 80172e4:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 80172e6:	4b4f      	ldr	r3, [pc, #316]	; (8017424 <input_parameter+0x574>)
 80172e8:	4a55      	ldr	r2, [pc, #340]	; (8017440 <input_parameter+0x590>)
 80172ea:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 80172ec:	4b4d      	ldr	r3, [pc, #308]	; (8017424 <input_parameter+0x574>)
 80172ee:	4a54      	ldr	r2, [pc, #336]	; (8017440 <input_parameter+0x590>)
 80172f0:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 80172f2:	4b4c      	ldr	r3, [pc, #304]	; (8017424 <input_parameter+0x574>)
 80172f4:	4a3d      	ldr	r2, [pc, #244]	; (80173ec <input_parameter+0x53c>)
 80172f6:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 80172f8:	4b4a      	ldr	r3, [pc, #296]	; (8017424 <input_parameter+0x574>)
 80172fa:	4a4f      	ldr	r2, [pc, #316]	; (8017438 <input_parameter+0x588>)
 80172fc:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 80172fe:	4b49      	ldr	r3, [pc, #292]	; (8017424 <input_parameter+0x574>)
 8017300:	4a4e      	ldr	r2, [pc, #312]	; (801743c <input_parameter+0x58c>)
 8017302:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8017304:	4b47      	ldr	r3, [pc, #284]	; (8017424 <input_parameter+0x574>)
 8017306:	4a4e      	ldr	r2, [pc, #312]	; (8017440 <input_parameter+0x590>)
 8017308:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 801730a:	4b46      	ldr	r3, [pc, #280]	; (8017424 <input_parameter+0x574>)
 801730c:	4a42      	ldr	r2, [pc, #264]	; (8017418 <input_parameter+0x568>)
 801730e:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8017310:	4b44      	ldr	r3, [pc, #272]	; (8017424 <input_parameter+0x574>)
 8017312:	4a36      	ldr	r2, [pc, #216]	; (80173ec <input_parameter+0x53c>)
 8017314:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8017316:	4b43      	ldr	r3, [pc, #268]	; (8017424 <input_parameter+0x574>)
 8017318:	4a4a      	ldr	r2, [pc, #296]	; (8017444 <input_parameter+0x594>)
 801731a:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 801731c:	4b41      	ldr	r3, [pc, #260]	; (8017424 <input_parameter+0x574>)
 801731e:	4a4a      	ldr	r2, [pc, #296]	; (8017448 <input_parameter+0x598>)
 8017320:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8017322:	4b40      	ldr	r3, [pc, #256]	; (8017424 <input_parameter+0x574>)
 8017324:	4a49      	ldr	r2, [pc, #292]	; (801744c <input_parameter+0x59c>)
 8017326:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8017328:	4b3e      	ldr	r3, [pc, #248]	; (8017424 <input_parameter+0x574>)
 801732a:	4a49      	ldr	r2, [pc, #292]	; (8017450 <input_parameter+0x5a0>)
 801732c:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 801732e:	4b3d      	ldr	r3, [pc, #244]	; (8017424 <input_parameter+0x574>)
 8017330:	4a2e      	ldr	r2, [pc, #184]	; (80173ec <input_parameter+0x53c>)
 8017332:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8017334:	4b3b      	ldr	r3, [pc, #236]	; (8017424 <input_parameter+0x574>)
 8017336:	4a47      	ldr	r2, [pc, #284]	; (8017454 <input_parameter+0x5a4>)
 8017338:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 801733a:	4b3a      	ldr	r3, [pc, #232]	; (8017424 <input_parameter+0x574>)
 801733c:	4a42      	ldr	r2, [pc, #264]	; (8017448 <input_parameter+0x598>)
 801733e:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8017340:	4b38      	ldr	r3, [pc, #224]	; (8017424 <input_parameter+0x574>)
 8017342:	4a42      	ldr	r2, [pc, #264]	; (801744c <input_parameter+0x59c>)
 8017344:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8017346:	4b37      	ldr	r3, [pc, #220]	; (8017424 <input_parameter+0x574>)
 8017348:	4a43      	ldr	r2, [pc, #268]	; (8017458 <input_parameter+0x5a8>)
 801734a:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 801734c:	4b35      	ldr	r3, [pc, #212]	; (8017424 <input_parameter+0x574>)
 801734e:	4a27      	ldr	r2, [pc, #156]	; (80173ec <input_parameter+0x53c>)
 8017350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8017354:	4b33      	ldr	r3, [pc, #204]	; (8017424 <input_parameter+0x574>)
 8017356:	4a41      	ldr	r2, [pc, #260]	; (801745c <input_parameter+0x5ac>)
 8017358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 801735c:	4b31      	ldr	r3, [pc, #196]	; (8017424 <input_parameter+0x574>)
 801735e:	4a40      	ldr	r2, [pc, #256]	; (8017460 <input_parameter+0x5b0>)
 8017360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8017364:	4b2f      	ldr	r3, [pc, #188]	; (8017424 <input_parameter+0x574>)
 8017366:	4a3f      	ldr	r2, [pc, #252]	; (8017464 <input_parameter+0x5b4>)
 8017368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 801736c:	4b2d      	ldr	r3, [pc, #180]	; (8017424 <input_parameter+0x574>)
 801736e:	4a3e      	ldr	r2, [pc, #248]	; (8017468 <input_parameter+0x5b8>)
 8017370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8017374:	4b2b      	ldr	r3, [pc, #172]	; (8017424 <input_parameter+0x574>)
 8017376:	4a1d      	ldr	r2, [pc, #116]	; (80173ec <input_parameter+0x53c>)
 8017378:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 801737c:	4b29      	ldr	r3, [pc, #164]	; (8017424 <input_parameter+0x574>)
 801737e:	4a3b      	ldr	r2, [pc, #236]	; (801746c <input_parameter+0x5bc>)
 8017380:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8017384:	4b27      	ldr	r3, [pc, #156]	; (8017424 <input_parameter+0x574>)
 8017386:	4a36      	ldr	r2, [pc, #216]	; (8017460 <input_parameter+0x5b0>)
 8017388:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 801738c:	4b25      	ldr	r3, [pc, #148]	; (8017424 <input_parameter+0x574>)
 801738e:	4a38      	ldr	r2, [pc, #224]	; (8017470 <input_parameter+0x5c0>)
 8017390:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8017394:	4b23      	ldr	r3, [pc, #140]	; (8017424 <input_parameter+0x574>)
 8017396:	4a37      	ldr	r2, [pc, #220]	; (8017474 <input_parameter+0x5c4>)
 8017398:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 801739c:	4b21      	ldr	r3, [pc, #132]	; (8017424 <input_parameter+0x574>)
 801739e:	4a13      	ldr	r2, [pc, #76]	; (80173ec <input_parameter+0x53c>)
 80173a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 80173a4:	4b1f      	ldr	r3, [pc, #124]	; (8017424 <input_parameter+0x574>)
 80173a6:	4a34      	ldr	r2, [pc, #208]	; (8017478 <input_parameter+0x5c8>)
 80173a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 80173ac:	4b1d      	ldr	r3, [pc, #116]	; (8017424 <input_parameter+0x574>)
 80173ae:	4a26      	ldr	r2, [pc, #152]	; (8017448 <input_parameter+0x598>)
 80173b0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 80173b4:	4b1b      	ldr	r3, [pc, #108]	; (8017424 <input_parameter+0x574>)
 80173b6:	4a31      	ldr	r2, [pc, #196]	; (801747c <input_parameter+0x5cc>)
 80173b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 80173bc:	4b19      	ldr	r3, [pc, #100]	; (8017424 <input_parameter+0x574>)
 80173be:	4a2d      	ldr	r2, [pc, #180]	; (8017474 <input_parameter+0x5c4>)
 80173c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 80173c4:	4b17      	ldr	r3, [pc, #92]	; (8017424 <input_parameter+0x574>)
 80173c6:	4a09      	ldr	r2, [pc, #36]	; (80173ec <input_parameter+0x53c>)
 80173c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 80173cc:	4b15      	ldr	r3, [pc, #84]	; (8017424 <input_parameter+0x574>)
 80173ce:	4a2c      	ldr	r2, [pc, #176]	; (8017480 <input_parameter+0x5d0>)
 80173d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 80173d4:	4b13      	ldr	r3, [pc, #76]	; (8017424 <input_parameter+0x574>)
 80173d6:	4a1c      	ldr	r2, [pc, #112]	; (8017448 <input_parameter+0x598>)
 80173d8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80173dc:	e052      	b.n	8017484 <input_parameter+0x5d4>
 80173de:	bf00      	nop
 80173e0:	42860000 	.word	0x42860000
 80173e4:	2000ddbc 	.word	0x2000ddbc
 80173e8:	42920000 	.word	0x42920000
 80173ec:	44160000 	.word	0x44160000
 80173f0:	461c4000 	.word	0x461c4000
 80173f4:	42640000 	.word	0x42640000
 80173f8:	42500000 	.word	0x42500000
 80173fc:	44250000 	.word	0x44250000
 8017400:	45fa0000 	.word	0x45fa0000
 8017404:	425c0000 	.word	0x425c0000
 8017408:	42c80000 	.word	0x42c80000
 801740c:	42ce0000 	.word	0x42ce0000
 8017410:	442f0000 	.word	0x442f0000
 8017414:	462be000 	.word	0x462be000
 8017418:	420c0000 	.word	0x420c0000
 801741c:	42600000 	.word	0x42600000
 8017420:	42700000 	.word	0x42700000
 8017424:	2000df04 	.word	0x2000df04
 8017428:	44898000 	.word	0x44898000
 801742c:	476a6000 	.word	0x476a6000
 8017430:	40a00000 	.word	0x40a00000
 8017434:	41e00000 	.word	0x41e00000
 8017438:	446d8000 	.word	0x446d8000
 801743c:	466a6000 	.word	0x466a6000
 8017440:	41f80000 	.word	0x41f80000
 8017444:	44520000 	.word	0x44520000
 8017448:	465ac000 	.word	0x465ac000
 801744c:	40e00000 	.word	0x40e00000
 8017450:	41a00000 	.word	0x41a00000
 8017454:	444d0000 	.word	0x444d0000
 8017458:	41900000 	.word	0x41900000
 801745c:	444f8000 	.word	0x444f8000
 8017460:	463b8000 	.word	0x463b8000
 8017464:	41500000 	.word	0x41500000
 8017468:	42180000 	.word	0x42180000
 801746c:	44608000 	.word	0x44608000
 8017470:	41400000 	.word	0x41400000
 8017474:	42100000 	.word	0x42100000
 8017478:	446b0000 	.word	0x446b0000
 801747c:	41180000 	.word	0x41180000
 8017480:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8017484:	4b43      	ldr	r3, [pc, #268]	; (8017594 <input_parameter+0x6e4>)
 8017486:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801748a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 801748e:	4b41      	ldr	r3, [pc, #260]	; (8017594 <input_parameter+0x6e4>)
 8017490:	4a41      	ldr	r2, [pc, #260]	; (8017598 <input_parameter+0x6e8>)
 8017492:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8017496:	4b3f      	ldr	r3, [pc, #252]	; (8017594 <input_parameter+0x6e4>)
 8017498:	4a40      	ldr	r2, [pc, #256]	; (801759c <input_parameter+0x6ec>)
 801749a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 801749e:	4b3d      	ldr	r3, [pc, #244]	; (8017594 <input_parameter+0x6e4>)
 80174a0:	4a3f      	ldr	r2, [pc, #252]	; (80175a0 <input_parameter+0x6f0>)
 80174a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 80174a6:	4b3b      	ldr	r3, [pc, #236]	; (8017594 <input_parameter+0x6e4>)
 80174a8:	4a3e      	ldr	r2, [pc, #248]	; (80175a4 <input_parameter+0x6f4>)
 80174aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 80174ae:	4b39      	ldr	r3, [pc, #228]	; (8017594 <input_parameter+0x6e4>)
 80174b0:	4a3d      	ldr	r2, [pc, #244]	; (80175a8 <input_parameter+0x6f8>)
 80174b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80174b6:	4b37      	ldr	r3, [pc, #220]	; (8017594 <input_parameter+0x6e4>)
 80174b8:	4a3c      	ldr	r2, [pc, #240]	; (80175ac <input_parameter+0x6fc>)
 80174ba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 80174be:	4b35      	ldr	r3, [pc, #212]	; (8017594 <input_parameter+0x6e4>)
 80174c0:	4a36      	ldr	r2, [pc, #216]	; (801759c <input_parameter+0x6ec>)
 80174c2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 80174c6:	4b33      	ldr	r3, [pc, #204]	; (8017594 <input_parameter+0x6e4>)
 80174c8:	4a39      	ldr	r2, [pc, #228]	; (80175b0 <input_parameter+0x700>)
 80174ca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 80174ce:	4b31      	ldr	r3, [pc, #196]	; (8017594 <input_parameter+0x6e4>)
 80174d0:	4a34      	ldr	r2, [pc, #208]	; (80175a4 <input_parameter+0x6f4>)
 80174d2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 80174d6:	4b2f      	ldr	r3, [pc, #188]	; (8017594 <input_parameter+0x6e4>)
 80174d8:	4a36      	ldr	r2, [pc, #216]	; (80175b4 <input_parameter+0x704>)
 80174da:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80174de:	4b2d      	ldr	r3, [pc, #180]	; (8017594 <input_parameter+0x6e4>)
 80174e0:	4a35      	ldr	r2, [pc, #212]	; (80175b8 <input_parameter+0x708>)
 80174e2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 80174e6:	4b2b      	ldr	r3, [pc, #172]	; (8017594 <input_parameter+0x6e4>)
 80174e8:	4a2c      	ldr	r2, [pc, #176]	; (801759c <input_parameter+0x6ec>)
 80174ea:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 80174ee:	4b29      	ldr	r3, [pc, #164]	; (8017594 <input_parameter+0x6e4>)
 80174f0:	4a32      	ldr	r2, [pc, #200]	; (80175bc <input_parameter+0x70c>)
 80174f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 80174f6:	4b27      	ldr	r3, [pc, #156]	; (8017594 <input_parameter+0x6e4>)
 80174f8:	4a31      	ldr	r2, [pc, #196]	; (80175c0 <input_parameter+0x710>)
 80174fa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 80174fe:	4b25      	ldr	r3, [pc, #148]	; (8017594 <input_parameter+0x6e4>)
 8017500:	4a30      	ldr	r2, [pc, #192]	; (80175c4 <input_parameter+0x714>)
 8017502:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8017506:	4b23      	ldr	r3, [pc, #140]	; (8017594 <input_parameter+0x6e4>)
 8017508:	4a28      	ldr	r2, [pc, #160]	; (80175ac <input_parameter+0x6fc>)
 801750a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 801750e:	4b21      	ldr	r3, [pc, #132]	; (8017594 <input_parameter+0x6e4>)
 8017510:	4a22      	ldr	r2, [pc, #136]	; (801759c <input_parameter+0x6ec>)
 8017512:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8017516:	4b1f      	ldr	r3, [pc, #124]	; (8017594 <input_parameter+0x6e4>)
 8017518:	4a2b      	ldr	r2, [pc, #172]	; (80175c8 <input_parameter+0x718>)
 801751a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 801751e:	4b1d      	ldr	r3, [pc, #116]	; (8017594 <input_parameter+0x6e4>)
 8017520:	4a2a      	ldr	r2, [pc, #168]	; (80175cc <input_parameter+0x71c>)
 8017522:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8017526:	4b1b      	ldr	r3, [pc, #108]	; (8017594 <input_parameter+0x6e4>)
 8017528:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801752c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8017530:	4b18      	ldr	r3, [pc, #96]	; (8017594 <input_parameter+0x6e4>)
 8017532:	4a27      	ldr	r2, [pc, #156]	; (80175d0 <input_parameter+0x720>)
 8017534:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8017538:	4b16      	ldr	r3, [pc, #88]	; (8017594 <input_parameter+0x6e4>)
 801753a:	4a18      	ldr	r2, [pc, #96]	; (801759c <input_parameter+0x6ec>)
 801753c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8017540:	4b14      	ldr	r3, [pc, #80]	; (8017594 <input_parameter+0x6e4>)
 8017542:	4a24      	ldr	r2, [pc, #144]	; (80175d4 <input_parameter+0x724>)
 8017544:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8017548:	4b12      	ldr	r3, [pc, #72]	; (8017594 <input_parameter+0x6e4>)
 801754a:	4a1d      	ldr	r2, [pc, #116]	; (80175c0 <input_parameter+0x710>)
 801754c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8017550:	4b10      	ldr	r3, [pc, #64]	; (8017594 <input_parameter+0x6e4>)
 8017552:	4a21      	ldr	r2, [pc, #132]	; (80175d8 <input_parameter+0x728>)
 8017554:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8017558:	4b0e      	ldr	r3, [pc, #56]	; (8017594 <input_parameter+0x6e4>)
 801755a:	4a20      	ldr	r2, [pc, #128]	; (80175dc <input_parameter+0x72c>)
 801755c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8017560:	4b0c      	ldr	r3, [pc, #48]	; (8017594 <input_parameter+0x6e4>)
 8017562:	4a0e      	ldr	r2, [pc, #56]	; (801759c <input_parameter+0x6ec>)
 8017564:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8017568:	4b0a      	ldr	r3, [pc, #40]	; (8017594 <input_parameter+0x6e4>)
 801756a:	4a1d      	ldr	r2, [pc, #116]	; (80175e0 <input_parameter+0x730>)
 801756c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8017570:	4b08      	ldr	r3, [pc, #32]	; (8017594 <input_parameter+0x6e4>)
 8017572:	4a1c      	ldr	r2, [pc, #112]	; (80175e4 <input_parameter+0x734>)
 8017574:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8017578:	4b06      	ldr	r3, [pc, #24]	; (8017594 <input_parameter+0x6e4>)
 801757a:	4a1b      	ldr	r2, [pc, #108]	; (80175e8 <input_parameter+0x738>)
 801757c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8017580:	4b04      	ldr	r3, [pc, #16]	; (8017594 <input_parameter+0x6e4>)
 8017582:	4a16      	ldr	r2, [pc, #88]	; (80175dc <input_parameter+0x72c>)
 8017584:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



}
 8017588:	bf00      	nop
 801758a:	46bd      	mov	sp, r7
 801758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017590:	4770      	bx	lr
 8017592:	bf00      	nop
 8017594:	2000df04 	.word	0x2000df04
 8017598:	42080000 	.word	0x42080000
 801759c:	44160000 	.word	0x44160000
 80175a0:	44340000 	.word	0x44340000
 80175a4:	463b8000 	.word	0x463b8000
 80175a8:	422c0000 	.word	0x422c0000
 80175ac:	41b00000 	.word	0x41b00000
 80175b0:	443b8000 	.word	0x443b8000
 80175b4:	42200000 	.word	0x42200000
 80175b8:	41c00000 	.word	0x41c00000
 80175bc:	44660000 	.word	0x44660000
 80175c0:	466a6000 	.word	0x466a6000
 80175c4:	40a00000 	.word	0x40a00000
 80175c8:	445e8000 	.word	0x445e8000
 80175cc:	465ac000 	.word	0x465ac000
 80175d0:	42100000 	.word	0x42100000
 80175d4:	446b0000 	.word	0x446b0000
 80175d8:	41880000 	.word	0x41880000
 80175dc:	41a00000 	.word	0x41a00000
 80175e0:	44700000 	.word	0x44700000
 80175e4:	467a0000 	.word	0x467a0000
 80175e8:	41200000 	.word	0x41200000

080175ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80175ec:	b580      	push	{r7, lr}
 80175ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80175f0:	4b22      	ldr	r3, [pc, #136]	; (801767c <MX_USART1_UART_Init+0x90>)
 80175f2:	4a23      	ldr	r2, [pc, #140]	; (8017680 <MX_USART1_UART_Init+0x94>)
 80175f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80175f6:	4b21      	ldr	r3, [pc, #132]	; (801767c <MX_USART1_UART_Init+0x90>)
 80175f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80175fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80175fe:	4b1f      	ldr	r3, [pc, #124]	; (801767c <MX_USART1_UART_Init+0x90>)
 8017600:	2200      	movs	r2, #0
 8017602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8017604:	4b1d      	ldr	r3, [pc, #116]	; (801767c <MX_USART1_UART_Init+0x90>)
 8017606:	2200      	movs	r2, #0
 8017608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801760a:	4b1c      	ldr	r3, [pc, #112]	; (801767c <MX_USART1_UART_Init+0x90>)
 801760c:	2200      	movs	r2, #0
 801760e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8017610:	4b1a      	ldr	r3, [pc, #104]	; (801767c <MX_USART1_UART_Init+0x90>)
 8017612:	220c      	movs	r2, #12
 8017614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017616:	4b19      	ldr	r3, [pc, #100]	; (801767c <MX_USART1_UART_Init+0x90>)
 8017618:	2200      	movs	r2, #0
 801761a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801761c:	4b17      	ldr	r3, [pc, #92]	; (801767c <MX_USART1_UART_Init+0x90>)
 801761e:	2200      	movs	r2, #0
 8017620:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017622:	4b16      	ldr	r3, [pc, #88]	; (801767c <MX_USART1_UART_Init+0x90>)
 8017624:	2200      	movs	r2, #0
 8017626:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017628:	4b14      	ldr	r3, [pc, #80]	; (801767c <MX_USART1_UART_Init+0x90>)
 801762a:	2200      	movs	r2, #0
 801762c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801762e:	4b13      	ldr	r3, [pc, #76]	; (801767c <MX_USART1_UART_Init+0x90>)
 8017630:	2200      	movs	r2, #0
 8017632:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8017634:	4811      	ldr	r0, [pc, #68]	; (801767c <MX_USART1_UART_Init+0x90>)
 8017636:	f006 fd2d 	bl	801e094 <HAL_UART_Init>
 801763a:	4603      	mov	r3, r0
 801763c:	2b00      	cmp	r3, #0
 801763e:	d001      	beq.n	8017644 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8017640:	f7f2 fc33 	bl	8009eaa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017644:	2100      	movs	r1, #0
 8017646:	480d      	ldr	r0, [pc, #52]	; (801767c <MX_USART1_UART_Init+0x90>)
 8017648:	f007 faf4 	bl	801ec34 <HAL_UARTEx_SetTxFifoThreshold>
 801764c:	4603      	mov	r3, r0
 801764e:	2b00      	cmp	r3, #0
 8017650:	d001      	beq.n	8017656 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8017652:	f7f2 fc2a 	bl	8009eaa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017656:	2100      	movs	r1, #0
 8017658:	4808      	ldr	r0, [pc, #32]	; (801767c <MX_USART1_UART_Init+0x90>)
 801765a:	f007 fb29 	bl	801ecb0 <HAL_UARTEx_SetRxFifoThreshold>
 801765e:	4603      	mov	r3, r0
 8017660:	2b00      	cmp	r3, #0
 8017662:	d001      	beq.n	8017668 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8017664:	f7f2 fc21 	bl	8009eaa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8017668:	4804      	ldr	r0, [pc, #16]	; (801767c <MX_USART1_UART_Init+0x90>)
 801766a:	f007 faaa 	bl	801ebc2 <HAL_UARTEx_DisableFifoMode>
 801766e:	4603      	mov	r3, r0
 8017670:	2b00      	cmp	r3, #0
 8017672:	d001      	beq.n	8017678 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8017674:	f7f2 fc19 	bl	8009eaa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8017678:	bf00      	nop
 801767a:	bd80      	pop	{r7, pc}
 801767c:	2000e04c 	.word	0x2000e04c
 8017680:	40013800 	.word	0x40013800

08017684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b09e      	sub	sp, #120	; 0x78
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801768c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017690:	2200      	movs	r2, #0
 8017692:	601a      	str	r2, [r3, #0]
 8017694:	605a      	str	r2, [r3, #4]
 8017696:	609a      	str	r2, [r3, #8]
 8017698:	60da      	str	r2, [r3, #12]
 801769a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801769c:	f107 0314 	add.w	r3, r7, #20
 80176a0:	2250      	movs	r2, #80	; 0x50
 80176a2:	2100      	movs	r1, #0
 80176a4:	4618      	mov	r0, r3
 80176a6:	f007 fbc7 	bl	801ee38 <memset>
  if(uartHandle->Instance==USART1)
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	4a1f      	ldr	r2, [pc, #124]	; (801772c <HAL_UART_MspInit+0xa8>)
 80176b0:	4293      	cmp	r3, r2
 80176b2:	d137      	bne.n	8017724 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80176b4:	2301      	movs	r3, #1
 80176b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80176b8:	2300      	movs	r3, #0
 80176ba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80176bc:	f107 0314 	add.w	r3, r7, #20
 80176c0:	4618      	mov	r0, r3
 80176c2:	f004 f891 	bl	801b7e8 <HAL_RCCEx_PeriphCLKConfig>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d001      	beq.n	80176d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80176cc:	f7f2 fbed 	bl	8009eaa <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80176d0:	4b17      	ldr	r3, [pc, #92]	; (8017730 <HAL_UART_MspInit+0xac>)
 80176d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176d4:	4a16      	ldr	r2, [pc, #88]	; (8017730 <HAL_UART_MspInit+0xac>)
 80176d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80176da:	6613      	str	r3, [r2, #96]	; 0x60
 80176dc:	4b14      	ldr	r3, [pc, #80]	; (8017730 <HAL_UART_MspInit+0xac>)
 80176de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80176e4:	613b      	str	r3, [r7, #16]
 80176e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176e8:	4b11      	ldr	r3, [pc, #68]	; (8017730 <HAL_UART_MspInit+0xac>)
 80176ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176ec:	4a10      	ldr	r2, [pc, #64]	; (8017730 <HAL_UART_MspInit+0xac>)
 80176ee:	f043 0301 	orr.w	r3, r3, #1
 80176f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80176f4:	4b0e      	ldr	r3, [pc, #56]	; (8017730 <HAL_UART_MspInit+0xac>)
 80176f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176f8:	f003 0301 	and.w	r3, r3, #1
 80176fc:	60fb      	str	r3, [r7, #12]
 80176fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8017700:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8017704:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017706:	2302      	movs	r3, #2
 8017708:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801770a:	2300      	movs	r3, #0
 801770c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801770e:	2300      	movs	r3, #0
 8017710:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8017712:	2307      	movs	r3, #7
 8017714:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017716:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801771a:	4619      	mov	r1, r3
 801771c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017720:	f003 f8e4 	bl	801a8ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8017724:	bf00      	nop
 8017726:	3778      	adds	r7, #120	; 0x78
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}
 801772c:	40013800 	.word	0x40013800
 8017730:	40021000 	.word	0x40021000

08017734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8017734:	480d      	ldr	r0, [pc, #52]	; (801776c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8017736:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8017738:	480d      	ldr	r0, [pc, #52]	; (8017770 <LoopForever+0x6>)
  ldr r1, =_edata
 801773a:	490e      	ldr	r1, [pc, #56]	; (8017774 <LoopForever+0xa>)
  ldr r2, =_sidata
 801773c:	4a0e      	ldr	r2, [pc, #56]	; (8017778 <LoopForever+0xe>)
  movs r3, #0
 801773e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8017740:	e002      	b.n	8017748 <LoopCopyDataInit>

08017742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017746:	3304      	adds	r3, #4

08017748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801774a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801774c:	d3f9      	bcc.n	8017742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801774e:	4a0b      	ldr	r2, [pc, #44]	; (801777c <LoopForever+0x12>)
  ldr r4, =_ebss
 8017750:	4c0b      	ldr	r4, [pc, #44]	; (8017780 <LoopForever+0x16>)
  movs r3, #0
 8017752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017754:	e001      	b.n	801775a <LoopFillZerobss>

08017756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017758:	3204      	adds	r2, #4

0801775a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801775a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801775c:	d3fb      	bcc.n	8017756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801775e:	f7ff f8df 	bl	8016920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017762:	f007 fb37 	bl	801edd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8017766:	f7f2 faa7 	bl	8009cb8 <main>

0801776a <LoopForever>:

LoopForever:
    b LoopForever
 801776a:	e7fe      	b.n	801776a <LoopForever>
  ldr   r0, =_estack
 801776c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8017770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017774:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8017778:	08022590 	.word	0x08022590
  ldr r2, =_sbss
 801777c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8017780:	2000e0f0 	.word	0x2000e0f0

08017784 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8017784:	e7fe      	b.n	8017784 <ADC3_IRQHandler>
	...

08017788 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b082      	sub	sp, #8
 801778c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801778e:	2300      	movs	r3, #0
 8017790:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017792:	4b0c      	ldr	r3, [pc, #48]	; (80177c4 <HAL_Init+0x3c>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	4a0b      	ldr	r2, [pc, #44]	; (80177c4 <HAL_Init+0x3c>)
 8017798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801779c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801779e:	2003      	movs	r0, #3
 80177a0:	f002 fb30 	bl	8019e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80177a4:	2000      	movs	r0, #0
 80177a6:	f000 f80f 	bl	80177c8 <HAL_InitTick>
 80177aa:	4603      	mov	r3, r0
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d002      	beq.n	80177b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80177b0:	2301      	movs	r3, #1
 80177b2:	71fb      	strb	r3, [r7, #7]
 80177b4:	e001      	b.n	80177ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80177b6:	f7fe ff67 	bl	8016688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80177ba:	79fb      	ldrb	r3, [r7, #7]

}
 80177bc:	4618      	mov	r0, r3
 80177be:	3708      	adds	r7, #8
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	40022000 	.word	0x40022000

080177c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b084      	sub	sp, #16
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80177d0:	2300      	movs	r3, #0
 80177d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80177d4:	4b16      	ldr	r3, [pc, #88]	; (8017830 <HAL_InitTick+0x68>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d022      	beq.n	8017822 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80177dc:	4b15      	ldr	r3, [pc, #84]	; (8017834 <HAL_InitTick+0x6c>)
 80177de:	681a      	ldr	r2, [r3, #0]
 80177e0:	4b13      	ldr	r3, [pc, #76]	; (8017830 <HAL_InitTick+0x68>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80177e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80177ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80177f0:	4618      	mov	r0, r3
 80177f2:	f002 fb3a 	bl	8019e6a <HAL_SYSTICK_Config>
 80177f6:	4603      	mov	r3, r0
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d10f      	bne.n	801781c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2b0f      	cmp	r3, #15
 8017800:	d809      	bhi.n	8017816 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017802:	2200      	movs	r2, #0
 8017804:	6879      	ldr	r1, [r7, #4]
 8017806:	f04f 30ff 	mov.w	r0, #4294967295
 801780a:	f002 fb06 	bl	8019e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801780e:	4a0a      	ldr	r2, [pc, #40]	; (8017838 <HAL_InitTick+0x70>)
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	6013      	str	r3, [r2, #0]
 8017814:	e007      	b.n	8017826 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8017816:	2301      	movs	r3, #1
 8017818:	73fb      	strb	r3, [r7, #15]
 801781a:	e004      	b.n	8017826 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 801781c:	2301      	movs	r3, #1
 801781e:	73fb      	strb	r3, [r7, #15]
 8017820:	e001      	b.n	8017826 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8017822:	2301      	movs	r3, #1
 8017824:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8017826:	7bfb      	ldrb	r3, [r7, #15]
}
 8017828:	4618      	mov	r0, r3
 801782a:	3710      	adds	r7, #16
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}
 8017830:	20000008 	.word	0x20000008
 8017834:	20000000 	.word	0x20000000
 8017838:	20000004 	.word	0x20000004

0801783c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801783c:	b480      	push	{r7}
 801783e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8017840:	4b05      	ldr	r3, [pc, #20]	; (8017858 <HAL_IncTick+0x1c>)
 8017842:	681a      	ldr	r2, [r3, #0]
 8017844:	4b05      	ldr	r3, [pc, #20]	; (801785c <HAL_IncTick+0x20>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	4413      	add	r3, r2
 801784a:	4a03      	ldr	r2, [pc, #12]	; (8017858 <HAL_IncTick+0x1c>)
 801784c:	6013      	str	r3, [r2, #0]
}
 801784e:	bf00      	nop
 8017850:	46bd      	mov	sp, r7
 8017852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017856:	4770      	bx	lr
 8017858:	2000e0dc 	.word	0x2000e0dc
 801785c:	20000008 	.word	0x20000008

08017860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017860:	b480      	push	{r7}
 8017862:	af00      	add	r7, sp, #0
  return uwTick;
 8017864:	4b03      	ldr	r3, [pc, #12]	; (8017874 <HAL_GetTick+0x14>)
 8017866:	681b      	ldr	r3, [r3, #0]
}
 8017868:	4618      	mov	r0, r3
 801786a:	46bd      	mov	sp, r7
 801786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017870:	4770      	bx	lr
 8017872:	bf00      	nop
 8017874:	2000e0dc 	.word	0x2000e0dc

08017878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b084      	sub	sp, #16
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017880:	f7ff ffee 	bl	8017860 <HAL_GetTick>
 8017884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017890:	d004      	beq.n	801789c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8017892:	4b09      	ldr	r3, [pc, #36]	; (80178b8 <HAL_Delay+0x40>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	68fa      	ldr	r2, [r7, #12]
 8017898:	4413      	add	r3, r2
 801789a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801789c:	bf00      	nop
 801789e:	f7ff ffdf 	bl	8017860 <HAL_GetTick>
 80178a2:	4602      	mov	r2, r0
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	1ad3      	subs	r3, r2, r3
 80178a8:	68fa      	ldr	r2, [r7, #12]
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d8f7      	bhi.n	801789e <HAL_Delay+0x26>
  {
  }
}
 80178ae:	bf00      	nop
 80178b0:	bf00      	nop
 80178b2:	3710      	adds	r7, #16
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd80      	pop	{r7, pc}
 80178b8:	20000008 	.word	0x20000008

080178bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80178bc:	b480      	push	{r7}
 80178be:	b083      	sub	sp, #12
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	689b      	ldr	r3, [r3, #8]
 80178ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	431a      	orrs	r2, r3
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	609a      	str	r2, [r3, #8]
}
 80178d6:	bf00      	nop
 80178d8:	370c      	adds	r7, #12
 80178da:	46bd      	mov	sp, r7
 80178dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e0:	4770      	bx	lr

080178e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80178e2:	b480      	push	{r7}
 80178e4:	b083      	sub	sp, #12
 80178e6:	af00      	add	r7, sp, #0
 80178e8:	6078      	str	r0, [r7, #4]
 80178ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	689b      	ldr	r3, [r3, #8]
 80178f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	431a      	orrs	r2, r3
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	609a      	str	r2, [r3, #8]
}
 80178fc:	bf00      	nop
 80178fe:	370c      	adds	r7, #12
 8017900:	46bd      	mov	sp, r7
 8017902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017906:	4770      	bx	lr

08017908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017908:	b480      	push	{r7}
 801790a:	b083      	sub	sp, #12
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	689b      	ldr	r3, [r3, #8]
 8017914:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8017918:	4618      	mov	r0, r3
 801791a:	370c      	adds	r7, #12
 801791c:	46bd      	mov	sp, r7
 801791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017922:	4770      	bx	lr

08017924 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8017924:	b480      	push	{r7}
 8017926:	b087      	sub	sp, #28
 8017928:	af00      	add	r7, sp, #0
 801792a:	60f8      	str	r0, [r7, #12]
 801792c:	60b9      	str	r1, [r7, #8]
 801792e:	607a      	str	r2, [r7, #4]
 8017930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	3360      	adds	r3, #96	; 0x60
 8017936:	461a      	mov	r2, r3
 8017938:	68bb      	ldr	r3, [r7, #8]
 801793a:	009b      	lsls	r3, r3, #2
 801793c:	4413      	add	r3, r2
 801793e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017940:	697b      	ldr	r3, [r7, #20]
 8017942:	681a      	ldr	r2, [r3, #0]
 8017944:	4b08      	ldr	r3, [pc, #32]	; (8017968 <LL_ADC_SetOffset+0x44>)
 8017946:	4013      	ands	r3, r2
 8017948:	687a      	ldr	r2, [r7, #4]
 801794a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801794e:	683a      	ldr	r2, [r7, #0]
 8017950:	430a      	orrs	r2, r1
 8017952:	4313      	orrs	r3, r2
 8017954:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017958:	697b      	ldr	r3, [r7, #20]
 801795a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 801795c:	bf00      	nop
 801795e:	371c      	adds	r7, #28
 8017960:	46bd      	mov	sp, r7
 8017962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017966:	4770      	bx	lr
 8017968:	03fff000 	.word	0x03fff000

0801796c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 801796c:	b480      	push	{r7}
 801796e:	b085      	sub	sp, #20
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	3360      	adds	r3, #96	; 0x60
 801797a:	461a      	mov	r2, r3
 801797c:	683b      	ldr	r3, [r7, #0]
 801797e:	009b      	lsls	r3, r3, #2
 8017980:	4413      	add	r3, r2
 8017982:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 801798c:	4618      	mov	r0, r3
 801798e:	3714      	adds	r7, #20
 8017990:	46bd      	mov	sp, r7
 8017992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017996:	4770      	bx	lr

08017998 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8017998:	b480      	push	{r7}
 801799a:	b087      	sub	sp, #28
 801799c:	af00      	add	r7, sp, #0
 801799e:	60f8      	str	r0, [r7, #12]
 80179a0:	60b9      	str	r1, [r7, #8]
 80179a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	3360      	adds	r3, #96	; 0x60
 80179a8:	461a      	mov	r2, r3
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	009b      	lsls	r3, r3, #2
 80179ae:	4413      	add	r3, r2
 80179b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	431a      	orrs	r2, r3
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80179c2:	bf00      	nop
 80179c4:	371c      	adds	r7, #28
 80179c6:	46bd      	mov	sp, r7
 80179c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179cc:	4770      	bx	lr

080179ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80179ce:	b480      	push	{r7}
 80179d0:	b087      	sub	sp, #28
 80179d2:	af00      	add	r7, sp, #0
 80179d4:	60f8      	str	r0, [r7, #12]
 80179d6:	60b9      	str	r1, [r7, #8]
 80179d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	3360      	adds	r3, #96	; 0x60
 80179de:	461a      	mov	r2, r3
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	009b      	lsls	r3, r3, #2
 80179e4:	4413      	add	r3, r2
 80179e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	431a      	orrs	r2, r3
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80179f8:	bf00      	nop
 80179fa:	371c      	adds	r7, #28
 80179fc:	46bd      	mov	sp, r7
 80179fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a02:	4770      	bx	lr

08017a04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8017a04:	b480      	push	{r7}
 8017a06:	b087      	sub	sp, #28
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	3360      	adds	r3, #96	; 0x60
 8017a14:	461a      	mov	r2, r3
 8017a16:	68bb      	ldr	r3, [r7, #8]
 8017a18:	009b      	lsls	r3, r3, #2
 8017a1a:	4413      	add	r3, r2
 8017a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	431a      	orrs	r2, r3
 8017a2a:	697b      	ldr	r3, [r7, #20]
 8017a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8017a2e:	bf00      	nop
 8017a30:	371c      	adds	r7, #28
 8017a32:	46bd      	mov	sp, r7
 8017a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a38:	4770      	bx	lr

08017a3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8017a3a:	b480      	push	{r7}
 8017a3c:	b083      	sub	sp, #12
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	6078      	str	r0, [r7, #4]
 8017a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	695b      	ldr	r3, [r3, #20]
 8017a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	431a      	orrs	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	615a      	str	r2, [r3, #20]
}
 8017a54:	bf00      	nop
 8017a56:	370c      	adds	r7, #12
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5e:	4770      	bx	lr

08017a60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017a60:	b480      	push	{r7}
 8017a62:	b083      	sub	sp, #12
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	68db      	ldr	r3, [r3, #12]
 8017a6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d101      	bne.n	8017a78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8017a74:	2301      	movs	r3, #1
 8017a76:	e000      	b.n	8017a7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8017a78:	2300      	movs	r3, #0
}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	370c      	adds	r7, #12
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a84:	4770      	bx	lr

08017a86 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8017a86:	b480      	push	{r7}
 8017a88:	b087      	sub	sp, #28
 8017a8a:	af00      	add	r7, sp, #0
 8017a8c:	60f8      	str	r0, [r7, #12]
 8017a8e:	60b9      	str	r1, [r7, #8]
 8017a90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	3330      	adds	r3, #48	; 0x30
 8017a96:	461a      	mov	r2, r3
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	0a1b      	lsrs	r3, r3, #8
 8017a9c:	009b      	lsls	r3, r3, #2
 8017a9e:	f003 030c 	and.w	r3, r3, #12
 8017aa2:	4413      	add	r3, r2
 8017aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017aa6:	697b      	ldr	r3, [r7, #20]
 8017aa8:	681a      	ldr	r2, [r3, #0]
 8017aaa:	68bb      	ldr	r3, [r7, #8]
 8017aac:	f003 031f 	and.w	r3, r3, #31
 8017ab0:	211f      	movs	r1, #31
 8017ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8017ab6:	43db      	mvns	r3, r3
 8017ab8:	401a      	ands	r2, r3
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	0e9b      	lsrs	r3, r3, #26
 8017abe:	f003 011f 	and.w	r1, r3, #31
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	f003 031f 	and.w	r3, r3, #31
 8017ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8017acc:	431a      	orrs	r2, r3
 8017ace:	697b      	ldr	r3, [r7, #20]
 8017ad0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8017ad2:	bf00      	nop
 8017ad4:	371c      	adds	r7, #28
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017adc:	4770      	bx	lr

08017ade <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017ade:	b480      	push	{r7}
 8017ae0:	b083      	sub	sp, #12
 8017ae2:	af00      	add	r7, sp, #0
 8017ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017aea:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d101      	bne.n	8017af6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8017af2:	2301      	movs	r3, #1
 8017af4:	e000      	b.n	8017af8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8017af6:	2300      	movs	r3, #0
}
 8017af8:	4618      	mov	r0, r3
 8017afa:	370c      	adds	r7, #12
 8017afc:	46bd      	mov	sp, r7
 8017afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b02:	4770      	bx	lr

08017b04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8017b04:	b480      	push	{r7}
 8017b06:	b087      	sub	sp, #28
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	3314      	adds	r3, #20
 8017b14:	461a      	mov	r2, r3
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	0e5b      	lsrs	r3, r3, #25
 8017b1a:	009b      	lsls	r3, r3, #2
 8017b1c:	f003 0304 	and.w	r3, r3, #4
 8017b20:	4413      	add	r3, r2
 8017b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017b24:	697b      	ldr	r3, [r7, #20]
 8017b26:	681a      	ldr	r2, [r3, #0]
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	0d1b      	lsrs	r3, r3, #20
 8017b2c:	f003 031f 	and.w	r3, r3, #31
 8017b30:	2107      	movs	r1, #7
 8017b32:	fa01 f303 	lsl.w	r3, r1, r3
 8017b36:	43db      	mvns	r3, r3
 8017b38:	401a      	ands	r2, r3
 8017b3a:	68bb      	ldr	r3, [r7, #8]
 8017b3c:	0d1b      	lsrs	r3, r3, #20
 8017b3e:	f003 031f 	and.w	r3, r3, #31
 8017b42:	6879      	ldr	r1, [r7, #4]
 8017b44:	fa01 f303 	lsl.w	r3, r1, r3
 8017b48:	431a      	orrs	r2, r3
 8017b4a:	697b      	ldr	r3, [r7, #20]
 8017b4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8017b4e:	bf00      	nop
 8017b50:	371c      	adds	r7, #28
 8017b52:	46bd      	mov	sp, r7
 8017b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b58:	4770      	bx	lr
	...

08017b5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8017b5c:	b480      	push	{r7}
 8017b5e:	b085      	sub	sp, #20
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	60f8      	str	r0, [r7, #12]
 8017b64:	60b9      	str	r1, [r7, #8]
 8017b66:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	4a0f      	ldr	r2, [pc, #60]	; (8017ba8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8017b6c:	4293      	cmp	r3, r2
 8017b6e:	d10a      	bne.n	8017b86 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017b76:	68bb      	ldr	r3, [r7, #8]
 8017b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017b7c:	431a      	orrs	r2, r3
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8017b84:	e00a      	b.n	8017b9c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017b8c:	68bb      	ldr	r3, [r7, #8]
 8017b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017b92:	43db      	mvns	r3, r3
 8017b94:	401a      	ands	r2, r3
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8017b9c:	bf00      	nop
 8017b9e:	3714      	adds	r7, #20
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba6:	4770      	bx	lr
 8017ba8:	407f0000 	.word	0x407f0000

08017bac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017bac:	b480      	push	{r7}
 8017bae:	b083      	sub	sp, #12
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	689b      	ldr	r3, [r3, #8]
 8017bb8:	f003 031f 	and.w	r3, r3, #31
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	370c      	adds	r7, #12
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc6:	4770      	bx	lr

08017bc8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017bc8:	b480      	push	{r7}
 8017bca:	b083      	sub	sp, #12
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	689b      	ldr	r3, [r3, #8]
 8017bd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	370c      	adds	r7, #12
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be2:	4770      	bx	lr

08017be4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8017be4:	b480      	push	{r7}
 8017be6:	b083      	sub	sp, #12
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	689b      	ldr	r3, [r3, #8]
 8017bf0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8017bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017bf8:	687a      	ldr	r2, [r7, #4]
 8017bfa:	6093      	str	r3, [r2, #8]
}
 8017bfc:	bf00      	nop
 8017bfe:	370c      	adds	r7, #12
 8017c00:	46bd      	mov	sp, r7
 8017c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c06:	4770      	bx	lr

08017c08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8017c08:	b480      	push	{r7}
 8017c0a:	b083      	sub	sp, #12
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	689b      	ldr	r3, [r3, #8]
 8017c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017c1c:	d101      	bne.n	8017c22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8017c1e:	2301      	movs	r3, #1
 8017c20:	e000      	b.n	8017c24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8017c22:	2300      	movs	r3, #0
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	370c      	adds	r7, #12
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2e:	4770      	bx	lr

08017c30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8017c30:	b480      	push	{r7}
 8017c32:	b083      	sub	sp, #12
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	689b      	ldr	r3, [r3, #8]
 8017c3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8017c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017c44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8017c4c:	bf00      	nop
 8017c4e:	370c      	adds	r7, #12
 8017c50:	46bd      	mov	sp, r7
 8017c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c56:	4770      	bx	lr

08017c58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8017c58:	b480      	push	{r7}
 8017c5a:	b083      	sub	sp, #12
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	689b      	ldr	r3, [r3, #8]
 8017c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017c6c:	d101      	bne.n	8017c72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8017c6e:	2301      	movs	r3, #1
 8017c70:	e000      	b.n	8017c74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8017c72:	2300      	movs	r3, #0
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	370c      	adds	r7, #12
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7e:	4770      	bx	lr

08017c80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8017c80:	b480      	push	{r7}
 8017c82:	b083      	sub	sp, #12
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	689b      	ldr	r3, [r3, #8]
 8017c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017c94:	f043 0201 	orr.w	r2, r3, #1
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8017c9c:	bf00      	nop
 8017c9e:	370c      	adds	r7, #12
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca6:	4770      	bx	lr

08017ca8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8017ca8:	b480      	push	{r7}
 8017caa:	b083      	sub	sp, #12
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	689b      	ldr	r3, [r3, #8]
 8017cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017cb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017cbc:	f043 0202 	orr.w	r2, r3, #2
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8017cc4:	bf00      	nop
 8017cc6:	370c      	adds	r7, #12
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cce:	4770      	bx	lr

08017cd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8017cd0:	b480      	push	{r7}
 8017cd2:	b083      	sub	sp, #12
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	689b      	ldr	r3, [r3, #8]
 8017cdc:	f003 0301 	and.w	r3, r3, #1
 8017ce0:	2b01      	cmp	r3, #1
 8017ce2:	d101      	bne.n	8017ce8 <LL_ADC_IsEnabled+0x18>
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	e000      	b.n	8017cea <LL_ADC_IsEnabled+0x1a>
 8017ce8:	2300      	movs	r3, #0
}
 8017cea:	4618      	mov	r0, r3
 8017cec:	370c      	adds	r7, #12
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf4:	4770      	bx	lr

08017cf6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8017cf6:	b480      	push	{r7}
 8017cf8:	b083      	sub	sp, #12
 8017cfa:	af00      	add	r7, sp, #0
 8017cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	689b      	ldr	r3, [r3, #8]
 8017d02:	f003 0302 	and.w	r3, r3, #2
 8017d06:	2b02      	cmp	r3, #2
 8017d08:	d101      	bne.n	8017d0e <LL_ADC_IsDisableOngoing+0x18>
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	e000      	b.n	8017d10 <LL_ADC_IsDisableOngoing+0x1a>
 8017d0e:	2300      	movs	r3, #0
}
 8017d10:	4618      	mov	r0, r3
 8017d12:	370c      	adds	r7, #12
 8017d14:	46bd      	mov	sp, r7
 8017d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1a:	4770      	bx	lr

08017d1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8017d1c:	b480      	push	{r7}
 8017d1e:	b083      	sub	sp, #12
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	689b      	ldr	r3, [r3, #8]
 8017d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017d30:	f043 0204 	orr.w	r2, r3, #4
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8017d38:	bf00      	nop
 8017d3a:	370c      	adds	r7, #12
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d42:	4770      	bx	lr

08017d44 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8017d44:	b480      	push	{r7}
 8017d46:	b083      	sub	sp, #12
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	689b      	ldr	r3, [r3, #8]
 8017d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017d58:	f043 0210 	orr.w	r2, r3, #16
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8017d60:	bf00      	nop
 8017d62:	370c      	adds	r7, #12
 8017d64:	46bd      	mov	sp, r7
 8017d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6a:	4770      	bx	lr

08017d6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8017d6c:	b480      	push	{r7}
 8017d6e:	b083      	sub	sp, #12
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	689b      	ldr	r3, [r3, #8]
 8017d78:	f003 0304 	and.w	r3, r3, #4
 8017d7c:	2b04      	cmp	r3, #4
 8017d7e:	d101      	bne.n	8017d84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8017d80:	2301      	movs	r3, #1
 8017d82:	e000      	b.n	8017d86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8017d84:	2300      	movs	r3, #0
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	370c      	adds	r7, #12
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d90:	4770      	bx	lr

08017d92 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8017d92:	b480      	push	{r7}
 8017d94:	b083      	sub	sp, #12
 8017d96:	af00      	add	r7, sp, #0
 8017d98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	689b      	ldr	r3, [r3, #8]
 8017d9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017da2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017da6:	f043 0220 	orr.w	r2, r3, #32
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8017dae:	bf00      	nop
 8017db0:	370c      	adds	r7, #12
 8017db2:	46bd      	mov	sp, r7
 8017db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db8:	4770      	bx	lr

08017dba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8017dba:	b480      	push	{r7}
 8017dbc:	b083      	sub	sp, #12
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	689b      	ldr	r3, [r3, #8]
 8017dc6:	f003 0308 	and.w	r3, r3, #8
 8017dca:	2b08      	cmp	r3, #8
 8017dcc:	d101      	bne.n	8017dd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8017dce:	2301      	movs	r3, #1
 8017dd0:	e000      	b.n	8017dd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8017dd2:	2300      	movs	r3, #0
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	370c      	adds	r7, #12
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dde:	4770      	bx	lr

08017de0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8017de0:	b590      	push	{r4, r7, lr}
 8017de2:	b089      	sub	sp, #36	; 0x24
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017de8:	2300      	movs	r3, #0
 8017dea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8017dec:	2300      	movs	r3, #0
 8017dee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d101      	bne.n	8017dfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8017df6:	2301      	movs	r3, #1
 8017df8:	e1a1      	b.n	801813e <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	695b      	ldr	r3, [r3, #20]
 8017dfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d109      	bne.n	8017e1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	f7f0 fa01 	bl	8008210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2200      	movs	r2, #0
 8017e12:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2200      	movs	r2, #0
 8017e18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	4618      	mov	r0, r3
 8017e22:	f7ff fef1 	bl	8017c08 <LL_ADC_IsDeepPowerDownEnabled>
 8017e26:	4603      	mov	r3, r0
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d004      	beq.n	8017e36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7ff fed7 	bl	8017be4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7ff ff0c 	bl	8017c58 <LL_ADC_IsInternalRegulatorEnabled>
 8017e40:	4603      	mov	r3, r0
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d115      	bne.n	8017e72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7ff fef0 	bl	8017c30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8017e50:	4b9a      	ldr	r3, [pc, #616]	; (80180bc <HAL_ADC_Init+0x2dc>)
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	099b      	lsrs	r3, r3, #6
 8017e56:	4a9a      	ldr	r2, [pc, #616]	; (80180c0 <HAL_ADC_Init+0x2e0>)
 8017e58:	fba2 2303 	umull	r2, r3, r2, r3
 8017e5c:	099b      	lsrs	r3, r3, #6
 8017e5e:	3301      	adds	r3, #1
 8017e60:	005b      	lsls	r3, r3, #1
 8017e62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8017e64:	e002      	b.n	8017e6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8017e66:	68bb      	ldr	r3, [r7, #8]
 8017e68:	3b01      	subs	r3, #1
 8017e6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d1f9      	bne.n	8017e66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7ff feee 	bl	8017c58 <LL_ADC_IsInternalRegulatorEnabled>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d10d      	bne.n	8017e9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e86:	f043 0210 	orr.w	r2, r3, #16
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017e92:	f043 0201 	orr.w	r2, r3, #1
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	f7ff ff62 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 8017ea8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017eae:	f003 0310 	and.w	r3, r3, #16
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	f040 813a 	bne.w	801812c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8017eb8:	697b      	ldr	r3, [r7, #20]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	f040 8136 	bne.w	801812c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ec4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8017ec8:	f043 0202 	orr.w	r2, r3, #2
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f7ff fefb 	bl	8017cd0 <LL_ADC_IsEnabled>
 8017eda:	4603      	mov	r3, r0
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d137      	bne.n	8017f50 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017ee8:	d004      	beq.n	8017ef4 <HAL_ADC_Init+0x114>
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	4a75      	ldr	r2, [pc, #468]	; (80180c4 <HAL_ADC_Init+0x2e4>)
 8017ef0:	4293      	cmp	r3, r2
 8017ef2:	d10f      	bne.n	8017f14 <HAL_ADC_Init+0x134>
 8017ef4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8017ef8:	f7ff feea 	bl	8017cd0 <LL_ADC_IsEnabled>
 8017efc:	4604      	mov	r4, r0
 8017efe:	4871      	ldr	r0, [pc, #452]	; (80180c4 <HAL_ADC_Init+0x2e4>)
 8017f00:	f7ff fee6 	bl	8017cd0 <LL_ADC_IsEnabled>
 8017f04:	4603      	mov	r3, r0
 8017f06:	4323      	orrs	r3, r4
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	bf0c      	ite	eq
 8017f0c:	2301      	moveq	r3, #1
 8017f0e:	2300      	movne	r3, #0
 8017f10:	b2db      	uxtb	r3, r3
 8017f12:	e008      	b.n	8017f26 <HAL_ADC_Init+0x146>
 8017f14:	486c      	ldr	r0, [pc, #432]	; (80180c8 <HAL_ADC_Init+0x2e8>)
 8017f16:	f7ff fedb 	bl	8017cd0 <LL_ADC_IsEnabled>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	bf0c      	ite	eq
 8017f20:	2301      	moveq	r3, #1
 8017f22:	2300      	movne	r3, #0
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d012      	beq.n	8017f50 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017f32:	d004      	beq.n	8017f3e <HAL_ADC_Init+0x15e>
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4a62      	ldr	r2, [pc, #392]	; (80180c4 <HAL_ADC_Init+0x2e4>)
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d101      	bne.n	8017f42 <HAL_ADC_Init+0x162>
 8017f3e:	4a63      	ldr	r2, [pc, #396]	; (80180cc <HAL_ADC_Init+0x2ec>)
 8017f40:	e000      	b.n	8017f44 <HAL_ADC_Init+0x164>
 8017f42:	4a63      	ldr	r2, [pc, #396]	; (80180d0 <HAL_ADC_Init+0x2f0>)
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	4619      	mov	r1, r3
 8017f4a:	4610      	mov	r0, r2
 8017f4c:	f7ff fcb6 	bl	80178bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	7f5b      	ldrb	r3, [r3, #29]
 8017f54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8017f5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8017f60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8017f66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8017f70:	4313      	orrs	r3, r2
 8017f72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f7a:	2b01      	cmp	r3, #1
 8017f7c:	d106      	bne.n	8017f8c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f82:	3b01      	subs	r3, #1
 8017f84:	045b      	lsls	r3, r3, #17
 8017f86:	69ba      	ldr	r2, [r7, #24]
 8017f88:	4313      	orrs	r3, r2
 8017f8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d009      	beq.n	8017fa8 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f98:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fa0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8017fa2:	69ba      	ldr	r2, [r7, #24]
 8017fa4:	4313      	orrs	r3, r2
 8017fa6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	68da      	ldr	r2, [r3, #12]
 8017fae:	4b49      	ldr	r3, [pc, #292]	; (80180d4 <HAL_ADC_Init+0x2f4>)
 8017fb0:	4013      	ands	r3, r2
 8017fb2:	687a      	ldr	r2, [r7, #4]
 8017fb4:	6812      	ldr	r2, [r2, #0]
 8017fb6:	69b9      	ldr	r1, [r7, #24]
 8017fb8:	430b      	orrs	r3, r1
 8017fba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	691b      	ldr	r3, [r3, #16]
 8017fc2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	430a      	orrs	r2, r1
 8017fd0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f7ff fec8 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 8017fdc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7ff fee9 	bl	8017dba <LL_ADC_INJ_IsConversionOngoing>
 8017fe8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d17b      	bne.n	80180e8 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d178      	bne.n	80180e8 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8017ffa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018002:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8018004:	4313      	orrs	r3, r2
 8018006:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	68db      	ldr	r3, [r3, #12]
 801800e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8018012:	f023 0302 	bic.w	r3, r3, #2
 8018016:	687a      	ldr	r2, [r7, #4]
 8018018:	6812      	ldr	r2, [r2, #0]
 801801a:	69b9      	ldr	r1, [r7, #24]
 801801c:	430b      	orrs	r3, r1
 801801e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	691b      	ldr	r3, [r3, #16]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d017      	beq.n	8018058 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	691a      	ldr	r2, [r3, #16]
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018036:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018040:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8018044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018048:	687a      	ldr	r2, [r7, #4]
 801804a:	6911      	ldr	r1, [r2, #16]
 801804c:	687a      	ldr	r2, [r7, #4]
 801804e:	6812      	ldr	r2, [r2, #0]
 8018050:	430b      	orrs	r3, r1
 8018052:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8018056:	e013      	b.n	8018080 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	691a      	ldr	r2, [r3, #16]
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018066:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018070:	687a      	ldr	r2, [r7, #4]
 8018072:	6812      	ldr	r2, [r2, #0]
 8018074:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8018078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801807c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018086:	2b01      	cmp	r3, #1
 8018088:	d126      	bne.n	80180d8 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	691b      	ldr	r3, [r3, #16]
 8018090:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8018094:	f023 0304 	bic.w	r3, r3, #4
 8018098:	687a      	ldr	r2, [r7, #4]
 801809a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801809c:	687a      	ldr	r2, [r7, #4]
 801809e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80180a0:	4311      	orrs	r1, r2
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80180a6:	4311      	orrs	r1, r2
 80180a8:	687a      	ldr	r2, [r7, #4]
 80180aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80180ac:	430a      	orrs	r2, r1
 80180ae:	431a      	orrs	r2, r3
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	f042 0201 	orr.w	r2, r2, #1
 80180b8:	611a      	str	r2, [r3, #16]
 80180ba:	e015      	b.n	80180e8 <HAL_ADC_Init+0x308>
 80180bc:	20000000 	.word	0x20000000
 80180c0:	053e2d63 	.word	0x053e2d63
 80180c4:	50000100 	.word	0x50000100
 80180c8:	50000400 	.word	0x50000400
 80180cc:	50000300 	.word	0x50000300
 80180d0:	50000700 	.word	0x50000700
 80180d4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	691a      	ldr	r2, [r3, #16]
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	f022 0201 	bic.w	r2, r2, #1
 80180e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	695b      	ldr	r3, [r3, #20]
 80180ec:	2b01      	cmp	r3, #1
 80180ee:	d10c      	bne.n	801810a <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180f6:	f023 010f 	bic.w	r1, r3, #15
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	6a1b      	ldr	r3, [r3, #32]
 80180fe:	1e5a      	subs	r2, r3, #1
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	430a      	orrs	r2, r1
 8018106:	631a      	str	r2, [r3, #48]	; 0x30
 8018108:	e007      	b.n	801811a <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	f022 020f 	bic.w	r2, r2, #15
 8018118:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801811e:	f023 0303 	bic.w	r3, r3, #3
 8018122:	f043 0201 	orr.w	r2, r3, #1
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	65da      	str	r2, [r3, #92]	; 0x5c
 801812a:	e007      	b.n	801813c <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018130:	f043 0210 	orr.w	r2, r3, #16
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8018138:	2301      	movs	r3, #1
 801813a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 801813c:	7ffb      	ldrb	r3, [r7, #31]
}
 801813e:	4618      	mov	r0, r3
 8018140:	3724      	adds	r7, #36	; 0x24
 8018142:	46bd      	mov	sp, r7
 8018144:	bd90      	pop	{r4, r7, pc}
 8018146:	bf00      	nop

08018148 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b086      	sub	sp, #24
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018158:	d004      	beq.n	8018164 <HAL_ADC_Start+0x1c>
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	4a5c      	ldr	r2, [pc, #368]	; (80182d0 <HAL_ADC_Start+0x188>)
 8018160:	4293      	cmp	r3, r2
 8018162:	d101      	bne.n	8018168 <HAL_ADC_Start+0x20>
 8018164:	4b5b      	ldr	r3, [pc, #364]	; (80182d4 <HAL_ADC_Start+0x18c>)
 8018166:	e000      	b.n	801816a <HAL_ADC_Start+0x22>
 8018168:	4b5b      	ldr	r3, [pc, #364]	; (80182d8 <HAL_ADC_Start+0x190>)
 801816a:	4618      	mov	r0, r3
 801816c:	f7ff fd1e 	bl	8017bac <LL_ADC_GetMultimode>
 8018170:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	4618      	mov	r0, r3
 8018178:	f7ff fdf8 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 801817c:	4603      	mov	r3, r0
 801817e:	2b00      	cmp	r3, #0
 8018180:	f040 809f 	bne.w	80182c2 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801818a:	2b01      	cmp	r3, #1
 801818c:	d101      	bne.n	8018192 <HAL_ADC_Start+0x4a>
 801818e:	2302      	movs	r3, #2
 8018190:	e09a      	b.n	80182c8 <HAL_ADC_Start+0x180>
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2201      	movs	r2, #1
 8018196:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801819a:	6878      	ldr	r0, [r7, #4]
 801819c:	f001 fa3e 	bl	801961c <ADC_Enable>
 80181a0:	4603      	mov	r3, r0
 80181a2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80181a4:	7dfb      	ldrb	r3, [r7, #23]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	f040 8086 	bne.w	80182b8 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80181b4:	f023 0301 	bic.w	r3, r3, #1
 80181b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	4a42      	ldr	r2, [pc, #264]	; (80182d0 <HAL_ADC_Start+0x188>)
 80181c6:	4293      	cmp	r3, r2
 80181c8:	d002      	beq.n	80181d0 <HAL_ADC_Start+0x88>
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	e001      	b.n	80181d4 <HAL_ADC_Start+0x8c>
 80181d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80181d4:	687a      	ldr	r2, [r7, #4]
 80181d6:	6812      	ldr	r2, [r2, #0]
 80181d8:	4293      	cmp	r3, r2
 80181da:	d002      	beq.n	80181e2 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80181dc:	693b      	ldr	r3, [r7, #16]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d105      	bne.n	80181ee <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80181f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80181fa:	d106      	bne.n	801820a <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018200:	f023 0206 	bic.w	r2, r3, #6
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	661a      	str	r2, [r3, #96]	; 0x60
 8018208:	e002      	b.n	8018210 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	2200      	movs	r2, #0
 801820e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	221c      	movs	r2, #28
 8018216:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	2200      	movs	r2, #0
 801821c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	4a2a      	ldr	r2, [pc, #168]	; (80182d0 <HAL_ADC_Start+0x188>)
 8018226:	4293      	cmp	r3, r2
 8018228:	d002      	beq.n	8018230 <HAL_ADC_Start+0xe8>
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	e001      	b.n	8018234 <HAL_ADC_Start+0xec>
 8018230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	6812      	ldr	r2, [r2, #0]
 8018238:	4293      	cmp	r3, r2
 801823a:	d008      	beq.n	801824e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801823c:	693b      	ldr	r3, [r7, #16]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d005      	beq.n	801824e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018242:	693b      	ldr	r3, [r7, #16]
 8018244:	2b05      	cmp	r3, #5
 8018246:	d002      	beq.n	801824e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018248:	693b      	ldr	r3, [r7, #16]
 801824a:	2b09      	cmp	r3, #9
 801824c:	d114      	bne.n	8018278 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	68db      	ldr	r3, [r3, #12]
 8018254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018258:	2b00      	cmp	r3, #0
 801825a:	d007      	beq.n	801826c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018260:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8018264:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4618      	mov	r0, r3
 8018272:	f7ff fd53 	bl	8017d1c <LL_ADC_REG_StartConversion>
 8018276:	e026      	b.n	80182c6 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801827c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	4a11      	ldr	r2, [pc, #68]	; (80182d0 <HAL_ADC_Start+0x188>)
 801828a:	4293      	cmp	r3, r2
 801828c:	d002      	beq.n	8018294 <HAL_ADC_Start+0x14c>
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	e001      	b.n	8018298 <HAL_ADC_Start+0x150>
 8018294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018298:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	68db      	ldr	r3, [r3, #12]
 801829e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d00f      	beq.n	80182c6 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80182ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80182b6:	e006      	b.n	80182c6 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2200      	movs	r2, #0
 80182bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80182c0:	e001      	b.n	80182c6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80182c2:	2302      	movs	r3, #2
 80182c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80182c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3718      	adds	r7, #24
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}
 80182d0:	50000100 	.word	0x50000100
 80182d4:	50000300 	.word	0x50000300
 80182d8:	50000700 	.word	0x50000700

080182dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b084      	sub	sp, #16
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80182ea:	2b01      	cmp	r3, #1
 80182ec:	d101      	bne.n	80182f2 <HAL_ADC_Stop+0x16>
 80182ee:	2302      	movs	r3, #2
 80182f0:	e023      	b.n	801833a <HAL_ADC_Stop+0x5e>
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	2201      	movs	r2, #1
 80182f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80182fa:	2103      	movs	r1, #3
 80182fc:	6878      	ldr	r0, [r7, #4]
 80182fe:	f001 f8d1 	bl	80194a4 <ADC_ConversionStop>
 8018302:	4603      	mov	r3, r0
 8018304:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8018306:	7bfb      	ldrb	r3, [r7, #15]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d111      	bne.n	8018330 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801830c:	6878      	ldr	r0, [r7, #4]
 801830e:	f001 f9e7 	bl	80196e0 <ADC_Disable>
 8018312:	4603      	mov	r3, r0
 8018314:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8018316:	7bfb      	ldrb	r3, [r7, #15]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d109      	bne.n	8018330 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018320:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018324:	f023 0301 	bic.w	r3, r3, #1
 8018328:	f043 0201 	orr.w	r2, r3, #1
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	2200      	movs	r2, #0
 8018334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8018338:	7bfb      	ldrb	r3, [r7, #15]
}
 801833a:	4618      	mov	r0, r3
 801833c:	3710      	adds	r7, #16
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}
	...

08018344 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b088      	sub	sp, #32
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018356:	d004      	beq.n	8018362 <HAL_ADC_PollForConversion+0x1e>
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	4a70      	ldr	r2, [pc, #448]	; (8018520 <HAL_ADC_PollForConversion+0x1dc>)
 801835e:	4293      	cmp	r3, r2
 8018360:	d101      	bne.n	8018366 <HAL_ADC_PollForConversion+0x22>
 8018362:	4b70      	ldr	r3, [pc, #448]	; (8018524 <HAL_ADC_PollForConversion+0x1e0>)
 8018364:	e000      	b.n	8018368 <HAL_ADC_PollForConversion+0x24>
 8018366:	4b70      	ldr	r3, [pc, #448]	; (8018528 <HAL_ADC_PollForConversion+0x1e4>)
 8018368:	4618      	mov	r0, r3
 801836a:	f7ff fc1f 	bl	8017bac <LL_ADC_GetMultimode>
 801836e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	699b      	ldr	r3, [r3, #24]
 8018374:	2b08      	cmp	r3, #8
 8018376:	d102      	bne.n	801837e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8018378:	2308      	movs	r3, #8
 801837a:	61fb      	str	r3, [r7, #28]
 801837c:	e037      	b.n	80183ee <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801837e:	697b      	ldr	r3, [r7, #20]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d005      	beq.n	8018390 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018384:	697b      	ldr	r3, [r7, #20]
 8018386:	2b05      	cmp	r3, #5
 8018388:	d002      	beq.n	8018390 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801838a:	697b      	ldr	r3, [r7, #20]
 801838c:	2b09      	cmp	r3, #9
 801838e:	d111      	bne.n	80183b4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	68db      	ldr	r3, [r3, #12]
 8018396:	f003 0301 	and.w	r3, r3, #1
 801839a:	2b00      	cmp	r3, #0
 801839c:	d007      	beq.n	80183ae <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183a2:	f043 0220 	orr.w	r2, r3, #32
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80183aa:	2301      	movs	r3, #1
 80183ac:	e0b3      	b.n	8018516 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80183ae:	2304      	movs	r3, #4
 80183b0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80183b2:	e01c      	b.n	80183ee <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80183bc:	d004      	beq.n	80183c8 <HAL_ADC_PollForConversion+0x84>
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	4a57      	ldr	r2, [pc, #348]	; (8018520 <HAL_ADC_PollForConversion+0x1dc>)
 80183c4:	4293      	cmp	r3, r2
 80183c6:	d101      	bne.n	80183cc <HAL_ADC_PollForConversion+0x88>
 80183c8:	4b56      	ldr	r3, [pc, #344]	; (8018524 <HAL_ADC_PollForConversion+0x1e0>)
 80183ca:	e000      	b.n	80183ce <HAL_ADC_PollForConversion+0x8a>
 80183cc:	4b56      	ldr	r3, [pc, #344]	; (8018528 <HAL_ADC_PollForConversion+0x1e4>)
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7ff fbfa 	bl	8017bc8 <LL_ADC_GetMultiDMATransfer>
 80183d4:	4603      	mov	r3, r0
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d007      	beq.n	80183ea <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183de:	f043 0220 	orr.w	r2, r3, #32
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80183e6:	2301      	movs	r3, #1
 80183e8:	e095      	b.n	8018516 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80183ea:	2304      	movs	r3, #4
 80183ec:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80183ee:	f7ff fa37 	bl	8017860 <HAL_GetTick>
 80183f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80183f4:	e021      	b.n	801843a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183fc:	d01d      	beq.n	801843a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80183fe:	f7ff fa2f 	bl	8017860 <HAL_GetTick>
 8018402:	4602      	mov	r2, r0
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	1ad3      	subs	r3, r2, r3
 8018408:	683a      	ldr	r2, [r7, #0]
 801840a:	429a      	cmp	r2, r3
 801840c:	d302      	bcc.n	8018414 <HAL_ADC_PollForConversion+0xd0>
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d112      	bne.n	801843a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	681a      	ldr	r2, [r3, #0]
 801841a:	69fb      	ldr	r3, [r7, #28]
 801841c:	4013      	ands	r3, r2
 801841e:	2b00      	cmp	r3, #0
 8018420:	d10b      	bne.n	801843a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018426:	f043 0204 	orr.w	r2, r3, #4
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	2200      	movs	r2, #0
 8018432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8018436:	2303      	movs	r3, #3
 8018438:	e06d      	b.n	8018516 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	681a      	ldr	r2, [r3, #0]
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	4013      	ands	r3, r2
 8018444:	2b00      	cmp	r3, #0
 8018446:	d0d6      	beq.n	80183f6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801844c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4618      	mov	r0, r3
 801845a:	f7ff fb01 	bl	8017a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 801845e:	4603      	mov	r3, r0
 8018460:	2b00      	cmp	r3, #0
 8018462:	d01c      	beq.n	801849e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	7f5b      	ldrb	r3, [r3, #29]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d118      	bne.n	801849e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	f003 0308 	and.w	r3, r3, #8
 8018476:	2b08      	cmp	r3, #8
 8018478:	d111      	bne.n	801849e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801847e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801848a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801848e:	2b00      	cmp	r3, #0
 8018490:	d105      	bne.n	801849e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018496:	f043 0201 	orr.w	r2, r3, #1
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	4a1f      	ldr	r2, [pc, #124]	; (8018520 <HAL_ADC_PollForConversion+0x1dc>)
 80184a4:	4293      	cmp	r3, r2
 80184a6:	d002      	beq.n	80184ae <HAL_ADC_PollForConversion+0x16a>
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	e001      	b.n	80184b2 <HAL_ADC_PollForConversion+0x16e>
 80184ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80184b2:	687a      	ldr	r2, [r7, #4]
 80184b4:	6812      	ldr	r2, [r2, #0]
 80184b6:	4293      	cmp	r3, r2
 80184b8:	d008      	beq.n	80184cc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80184ba:	697b      	ldr	r3, [r7, #20]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d005      	beq.n	80184cc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	2b05      	cmp	r3, #5
 80184c4:	d002      	beq.n	80184cc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	2b09      	cmp	r3, #9
 80184ca:	d104      	bne.n	80184d6 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	68db      	ldr	r3, [r3, #12]
 80184d2:	61bb      	str	r3, [r7, #24]
 80184d4:	e00d      	b.n	80184f2 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	4a11      	ldr	r2, [pc, #68]	; (8018520 <HAL_ADC_PollForConversion+0x1dc>)
 80184dc:	4293      	cmp	r3, r2
 80184de:	d002      	beq.n	80184e6 <HAL_ADC_PollForConversion+0x1a2>
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	e001      	b.n	80184ea <HAL_ADC_PollForConversion+0x1a6>
 80184e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80184ea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	68db      	ldr	r3, [r3, #12]
 80184f0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80184f2:	69fb      	ldr	r3, [r7, #28]
 80184f4:	2b08      	cmp	r3, #8
 80184f6:	d104      	bne.n	8018502 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	2208      	movs	r2, #8
 80184fe:	601a      	str	r2, [r3, #0]
 8018500:	e008      	b.n	8018514 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8018502:	69bb      	ldr	r3, [r7, #24]
 8018504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018508:	2b00      	cmp	r3, #0
 801850a:	d103      	bne.n	8018514 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	220c      	movs	r2, #12
 8018512:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8018514:	2300      	movs	r3, #0
}
 8018516:	4618      	mov	r0, r3
 8018518:	3720      	adds	r7, #32
 801851a:	46bd      	mov	sp, r7
 801851c:	bd80      	pop	{r7, pc}
 801851e:	bf00      	nop
 8018520:	50000100 	.word	0x50000100
 8018524:	50000300 	.word	0x50000300
 8018528:	50000700 	.word	0x50000700

0801852c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b086      	sub	sp, #24
 8018530:	af00      	add	r7, sp, #0
 8018532:	60f8      	str	r0, [r7, #12]
 8018534:	60b9      	str	r1, [r7, #8]
 8018536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018540:	d004      	beq.n	801854c <HAL_ADC_Start_DMA+0x20>
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	4a57      	ldr	r2, [pc, #348]	; (80186a4 <HAL_ADC_Start_DMA+0x178>)
 8018548:	4293      	cmp	r3, r2
 801854a:	d101      	bne.n	8018550 <HAL_ADC_Start_DMA+0x24>
 801854c:	4b56      	ldr	r3, [pc, #344]	; (80186a8 <HAL_ADC_Start_DMA+0x17c>)
 801854e:	e000      	b.n	8018552 <HAL_ADC_Start_DMA+0x26>
 8018550:	4b56      	ldr	r3, [pc, #344]	; (80186ac <HAL_ADC_Start_DMA+0x180>)
 8018552:	4618      	mov	r0, r3
 8018554:	f7ff fb2a 	bl	8017bac <LL_ADC_GetMultimode>
 8018558:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	4618      	mov	r0, r3
 8018560:	f7ff fc04 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 8018564:	4603      	mov	r3, r0
 8018566:	2b00      	cmp	r3, #0
 8018568:	f040 8094 	bne.w	8018694 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018572:	2b01      	cmp	r3, #1
 8018574:	d101      	bne.n	801857a <HAL_ADC_Start_DMA+0x4e>
 8018576:	2302      	movs	r3, #2
 8018578:	e08f      	b.n	801869a <HAL_ADC_Start_DMA+0x16e>
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	2201      	movs	r2, #1
 801857e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	4a4a      	ldr	r2, [pc, #296]	; (80186b0 <HAL_ADC_Start_DMA+0x184>)
 8018588:	4293      	cmp	r3, r2
 801858a:	d008      	beq.n	801859e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801858c:	693b      	ldr	r3, [r7, #16]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d005      	beq.n	801859e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018592:	693b      	ldr	r3, [r7, #16]
 8018594:	2b05      	cmp	r3, #5
 8018596:	d002      	beq.n	801859e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018598:	693b      	ldr	r3, [r7, #16]
 801859a:	2b09      	cmp	r3, #9
 801859c:	d173      	bne.n	8018686 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801859e:	68f8      	ldr	r0, [r7, #12]
 80185a0:	f001 f83c 	bl	801961c <ADC_Enable>
 80185a4:	4603      	mov	r3, r0
 80185a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80185a8:	7dfb      	ldrb	r3, [r7, #23]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d166      	bne.n	801867c <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80185b6:	f023 0301 	bic.w	r3, r3, #1
 80185ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	4a37      	ldr	r2, [pc, #220]	; (80186a4 <HAL_ADC_Start_DMA+0x178>)
 80185c8:	4293      	cmp	r3, r2
 80185ca:	d002      	beq.n	80185d2 <HAL_ADC_Start_DMA+0xa6>
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	e001      	b.n	80185d6 <HAL_ADC_Start_DMA+0xaa>
 80185d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80185d6:	68fa      	ldr	r2, [r7, #12]
 80185d8:	6812      	ldr	r2, [r2, #0]
 80185da:	4293      	cmp	r3, r2
 80185dc:	d002      	beq.n	80185e4 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80185de:	693b      	ldr	r3, [r7, #16]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d105      	bne.n	80185f0 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d006      	beq.n	801860a <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018600:	f023 0206 	bic.w	r2, r3, #6
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	661a      	str	r2, [r3, #96]	; 0x60
 8018608:	e002      	b.n	8018610 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	2200      	movs	r2, #0
 801860e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018614:	4a27      	ldr	r2, [pc, #156]	; (80186b4 <HAL_ADC_Start_DMA+0x188>)
 8018616:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801861c:	4a26      	ldr	r2, [pc, #152]	; (80186b8 <HAL_ADC_Start_DMA+0x18c>)
 801861e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018624:	4a25      	ldr	r2, [pc, #148]	; (80186bc <HAL_ADC_Start_DMA+0x190>)
 8018626:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	221c      	movs	r2, #28
 801862e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	2200      	movs	r2, #0
 8018634:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	685a      	ldr	r2, [r3, #4]
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	f042 0210 	orr.w	r2, r2, #16
 8018646:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	68da      	ldr	r2, [r3, #12]
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	f042 0201 	orr.w	r2, r2, #1
 8018656:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	3340      	adds	r3, #64	; 0x40
 8018662:	4619      	mov	r1, r3
 8018664:	68ba      	ldr	r2, [r7, #8]
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	f001 fcb4 	bl	8019fd4 <HAL_DMA_Start_IT>
 801866c:	4603      	mov	r3, r0
 801866e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	4618      	mov	r0, r3
 8018676:	f7ff fb51 	bl	8017d1c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 801867a:	e00d      	b.n	8018698 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	2200      	movs	r2, #0
 8018680:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8018684:	e008      	b.n	8018698 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8018686:	2301      	movs	r3, #1
 8018688:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	2200      	movs	r2, #0
 801868e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8018692:	e001      	b.n	8018698 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8018694:	2302      	movs	r3, #2
 8018696:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8018698:	7dfb      	ldrb	r3, [r7, #23]
}
 801869a:	4618      	mov	r0, r3
 801869c:	3718      	adds	r7, #24
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd80      	pop	{r7, pc}
 80186a2:	bf00      	nop
 80186a4:	50000100 	.word	0x50000100
 80186a8:	50000300 	.word	0x50000300
 80186ac:	50000700 	.word	0x50000700
 80186b0:	50000400 	.word	0x50000400
 80186b4:	0801979f 	.word	0x0801979f
 80186b8:	08019877 	.word	0x08019877
 80186bc:	08019893 	.word	0x08019893

080186c0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80186ce:	2b01      	cmp	r3, #1
 80186d0:	d101      	bne.n	80186d6 <HAL_ADC_Stop_DMA+0x16>
 80186d2:	2302      	movs	r3, #2
 80186d4:	e051      	b.n	801877a <HAL_ADC_Stop_DMA+0xba>
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	2201      	movs	r2, #1
 80186da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80186de:	2103      	movs	r1, #3
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f000 fedf 	bl	80194a4 <ADC_ConversionStop>
 80186e6:	4603      	mov	r3, r0
 80186e8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80186ea:	7bfb      	ldrb	r3, [r7, #15]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d13f      	bne.n	8018770 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	68da      	ldr	r2, [r3, #12]
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	f022 0201 	bic.w	r2, r2, #1
 80186fe:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018704:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018708:	b2db      	uxtb	r3, r3
 801870a:	2b02      	cmp	r3, #2
 801870c:	d10f      	bne.n	801872e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018712:	4618      	mov	r0, r3
 8018714:	f001 fcd9 	bl	801a0ca <HAL_DMA_Abort>
 8018718:	4603      	mov	r3, r0
 801871a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 801871c:	7bfb      	ldrb	r3, [r7, #15]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d005      	beq.n	801872e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	685a      	ldr	r2, [r3, #4]
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	f022 0210 	bic.w	r2, r2, #16
 801873c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 801873e:	7bfb      	ldrb	r3, [r7, #15]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d105      	bne.n	8018750 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	f000 ffcb 	bl	80196e0 <ADC_Disable>
 801874a:	4603      	mov	r3, r0
 801874c:	73fb      	strb	r3, [r7, #15]
 801874e:	e002      	b.n	8018756 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8018750:	6878      	ldr	r0, [r7, #4]
 8018752:	f000 ffc5 	bl	80196e0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8018756:	7bfb      	ldrb	r3, [r7, #15]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d109      	bne.n	8018770 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018760:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018764:	f023 0301 	bic.w	r3, r3, #1
 8018768:	f043 0201 	orr.w	r2, r3, #1
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	2200      	movs	r2, #0
 8018774:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8018778:	7bfb      	ldrb	r3, [r7, #15]
}
 801877a:	4618      	mov	r0, r3
 801877c:	3710      	adds	r7, #16
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}

08018782 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8018782:	b480      	push	{r7}
 8018784:	b083      	sub	sp, #12
 8018786:	af00      	add	r7, sp, #0
 8018788:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8018790:	4618      	mov	r0, r3
 8018792:	370c      	adds	r7, #12
 8018794:	46bd      	mov	sp, r7
 8018796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879a:	4770      	bx	lr

0801879c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b08a      	sub	sp, #40	; 0x28
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80187a4:	2300      	movs	r3, #0
 80187a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	685b      	ldr	r3, [r3, #4]
 80187b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80187c0:	d004      	beq.n	80187cc <HAL_ADC_IRQHandler+0x30>
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	4a87      	ldr	r2, [pc, #540]	; (80189e4 <HAL_ADC_IRQHandler+0x248>)
 80187c8:	4293      	cmp	r3, r2
 80187ca:	d101      	bne.n	80187d0 <HAL_ADC_IRQHandler+0x34>
 80187cc:	4b86      	ldr	r3, [pc, #536]	; (80189e8 <HAL_ADC_IRQHandler+0x24c>)
 80187ce:	e000      	b.n	80187d2 <HAL_ADC_IRQHandler+0x36>
 80187d0:	4b86      	ldr	r3, [pc, #536]	; (80189ec <HAL_ADC_IRQHandler+0x250>)
 80187d2:	4618      	mov	r0, r3
 80187d4:	f7ff f9ea 	bl	8017bac <LL_ADC_GetMultimode>
 80187d8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80187da:	69fb      	ldr	r3, [r7, #28]
 80187dc:	f003 0302 	and.w	r3, r3, #2
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d017      	beq.n	8018814 <HAL_ADC_IRQHandler+0x78>
 80187e4:	69bb      	ldr	r3, [r7, #24]
 80187e6:	f003 0302 	and.w	r3, r3, #2
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d012      	beq.n	8018814 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187f2:	f003 0310 	and.w	r3, r3, #16
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d105      	bne.n	8018806 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187fe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f001 f93a 	bl	8019a80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	2202      	movs	r2, #2
 8018812:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8018814:	69fb      	ldr	r3, [r7, #28]
 8018816:	f003 0304 	and.w	r3, r3, #4
 801881a:	2b00      	cmp	r3, #0
 801881c:	d004      	beq.n	8018828 <HAL_ADC_IRQHandler+0x8c>
 801881e:	69bb      	ldr	r3, [r7, #24]
 8018820:	f003 0304 	and.w	r3, r3, #4
 8018824:	2b00      	cmp	r3, #0
 8018826:	d10a      	bne.n	801883e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8018828:	69fb      	ldr	r3, [r7, #28]
 801882a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801882e:	2b00      	cmp	r3, #0
 8018830:	f000 8085 	beq.w	801893e <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8018834:	69bb      	ldr	r3, [r7, #24]
 8018836:	f003 0308 	and.w	r3, r3, #8
 801883a:	2b00      	cmp	r3, #0
 801883c:	d07f      	beq.n	801893e <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018842:	f003 0310 	and.w	r3, r3, #16
 8018846:	2b00      	cmp	r3, #0
 8018848:	d105      	bne.n	8018856 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801884e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	4618      	mov	r0, r3
 801885c:	f7ff f900 	bl	8017a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8018860:	4603      	mov	r3, r0
 8018862:	2b00      	cmp	r3, #0
 8018864:	d064      	beq.n	8018930 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	4a5e      	ldr	r2, [pc, #376]	; (80189e4 <HAL_ADC_IRQHandler+0x248>)
 801886c:	4293      	cmp	r3, r2
 801886e:	d002      	beq.n	8018876 <HAL_ADC_IRQHandler+0xda>
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	e001      	b.n	801887a <HAL_ADC_IRQHandler+0xde>
 8018876:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801887a:	687a      	ldr	r2, [r7, #4]
 801887c:	6812      	ldr	r2, [r2, #0]
 801887e:	4293      	cmp	r3, r2
 8018880:	d008      	beq.n	8018894 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018882:	697b      	ldr	r3, [r7, #20]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d005      	beq.n	8018894 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	2b05      	cmp	r3, #5
 801888c:	d002      	beq.n	8018894 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801888e:	697b      	ldr	r3, [r7, #20]
 8018890:	2b09      	cmp	r3, #9
 8018892:	d104      	bne.n	801889e <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	68db      	ldr	r3, [r3, #12]
 801889a:	623b      	str	r3, [r7, #32]
 801889c:	e00d      	b.n	80188ba <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	4a50      	ldr	r2, [pc, #320]	; (80189e4 <HAL_ADC_IRQHandler+0x248>)
 80188a4:	4293      	cmp	r3, r2
 80188a6:	d002      	beq.n	80188ae <HAL_ADC_IRQHandler+0x112>
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	e001      	b.n	80188b2 <HAL_ADC_IRQHandler+0x116>
 80188ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80188b2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80188b4:	693b      	ldr	r3, [r7, #16]
 80188b6:	68db      	ldr	r3, [r3, #12]
 80188b8:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80188ba:	6a3b      	ldr	r3, [r7, #32]
 80188bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d135      	bne.n	8018930 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	f003 0308 	and.w	r3, r3, #8
 80188ce:	2b08      	cmp	r3, #8
 80188d0:	d12e      	bne.n	8018930 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	4618      	mov	r0, r3
 80188d8:	f7ff fa48 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 80188dc:	4603      	mov	r3, r0
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d11a      	bne.n	8018918 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	685a      	ldr	r2, [r3, #4]
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	f022 020c 	bic.w	r2, r2, #12
 80188f0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018906:	2b00      	cmp	r3, #0
 8018908:	d112      	bne.n	8018930 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801890e:	f043 0201 	orr.w	r2, r3, #1
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	65da      	str	r2, [r3, #92]	; 0x5c
 8018916:	e00b      	b.n	8018930 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801891c:	f043 0210 	orr.w	r2, r3, #16
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018928:	f043 0201 	orr.w	r2, r3, #1
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8018930:	6878      	ldr	r0, [r7, #4]
 8018932:	f7ef fd15 	bl	8008360 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	220c      	movs	r2, #12
 801893c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801893e:	69fb      	ldr	r3, [r7, #28]
 8018940:	f003 0320 	and.w	r3, r3, #32
 8018944:	2b00      	cmp	r3, #0
 8018946:	d004      	beq.n	8018952 <HAL_ADC_IRQHandler+0x1b6>
 8018948:	69bb      	ldr	r3, [r7, #24]
 801894a:	f003 0320 	and.w	r3, r3, #32
 801894e:	2b00      	cmp	r3, #0
 8018950:	d10b      	bne.n	801896a <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8018952:	69fb      	ldr	r3, [r7, #28]
 8018954:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8018958:	2b00      	cmp	r3, #0
 801895a:	f000 80a1 	beq.w	8018aa0 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801895e:	69bb      	ldr	r3, [r7, #24]
 8018960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018964:	2b00      	cmp	r3, #0
 8018966:	f000 809b 	beq.w	8018aa0 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801896e:	f003 0310 	and.w	r3, r3, #16
 8018972:	2b00      	cmp	r3, #0
 8018974:	d105      	bne.n	8018982 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801897a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	4618      	mov	r0, r3
 8018988:	f7ff f8a9 	bl	8017ade <LL_ADC_INJ_IsTriggerSourceSWStart>
 801898c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	4618      	mov	r0, r3
 8018994:	f7ff f864 	bl	8017a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8018998:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	4a11      	ldr	r2, [pc, #68]	; (80189e4 <HAL_ADC_IRQHandler+0x248>)
 80189a0:	4293      	cmp	r3, r2
 80189a2:	d002      	beq.n	80189aa <HAL_ADC_IRQHandler+0x20e>
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	e001      	b.n	80189ae <HAL_ADC_IRQHandler+0x212>
 80189aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80189ae:	687a      	ldr	r2, [r7, #4]
 80189b0:	6812      	ldr	r2, [r2, #0]
 80189b2:	4293      	cmp	r3, r2
 80189b4:	d008      	beq.n	80189c8 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80189b6:	697b      	ldr	r3, [r7, #20]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d005      	beq.n	80189c8 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80189bc:	697b      	ldr	r3, [r7, #20]
 80189be:	2b06      	cmp	r3, #6
 80189c0:	d002      	beq.n	80189c8 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80189c2:	697b      	ldr	r3, [r7, #20]
 80189c4:	2b07      	cmp	r3, #7
 80189c6:	d104      	bne.n	80189d2 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	68db      	ldr	r3, [r3, #12]
 80189ce:	623b      	str	r3, [r7, #32]
 80189d0:	e014      	b.n	80189fc <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	4a03      	ldr	r2, [pc, #12]	; (80189e4 <HAL_ADC_IRQHandler+0x248>)
 80189d8:	4293      	cmp	r3, r2
 80189da:	d009      	beq.n	80189f0 <HAL_ADC_IRQHandler+0x254>
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	e008      	b.n	80189f4 <HAL_ADC_IRQHandler+0x258>
 80189e2:	bf00      	nop
 80189e4:	50000100 	.word	0x50000100
 80189e8:	50000300 	.word	0x50000300
 80189ec:	50000700 	.word	0x50000700
 80189f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80189f4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	68db      	ldr	r3, [r3, #12]
 80189fa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d047      	beq.n	8018a92 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8018a02:	6a3b      	ldr	r3, [r7, #32]
 8018a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d007      	beq.n	8018a1c <HAL_ADC_IRQHandler+0x280>
 8018a0c:	68bb      	ldr	r3, [r7, #8]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d03f      	beq.n	8018a92 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8018a12:	6a3b      	ldr	r3, [r7, #32]
 8018a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d13a      	bne.n	8018a92 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a26:	2b40      	cmp	r3, #64	; 0x40
 8018a28:	d133      	bne.n	8018a92 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8018a2a:	6a3b      	ldr	r3, [r7, #32]
 8018a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d12e      	bne.n	8018a92 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f7ff f9be 	bl	8017dba <LL_ADC_INJ_IsConversionOngoing>
 8018a3e:	4603      	mov	r3, r0
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d11a      	bne.n	8018a7a <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	685a      	ldr	r2, [r3, #4]
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018a52:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d112      	bne.n	8018a92 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a70:	f043 0201 	orr.w	r2, r3, #1
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	65da      	str	r2, [r3, #92]	; 0x5c
 8018a78:	e00b      	b.n	8018a92 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a7e:	f043 0210 	orr.w	r2, r3, #16
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018a8a:	f043 0201 	orr.w	r2, r3, #1
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	f000 ffcc 	bl	8019a30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	2260      	movs	r2, #96	; 0x60
 8018a9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8018aa0:	69fb      	ldr	r3, [r7, #28]
 8018aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d011      	beq.n	8018ace <HAL_ADC_IRQHandler+0x332>
 8018aaa:	69bb      	ldr	r3, [r7, #24]
 8018aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d00c      	beq.n	8018ace <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8018ac0:	6878      	ldr	r0, [r7, #4]
 8018ac2:	f000 f8af 	bl	8018c24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	2280      	movs	r2, #128	; 0x80
 8018acc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8018ace:	69fb      	ldr	r3, [r7, #28]
 8018ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d012      	beq.n	8018afe <HAL_ADC_IRQHandler+0x362>
 8018ad8:	69bb      	ldr	r3, [r7, #24]
 8018ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d00d      	beq.n	8018afe <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8018aee:	6878      	ldr	r0, [r7, #4]
 8018af0:	f000 ffb2 	bl	8019a58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018afc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8018afe:	69fb      	ldr	r3, [r7, #28]
 8018b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d012      	beq.n	8018b2e <HAL_ADC_IRQHandler+0x392>
 8018b08:	69bb      	ldr	r3, [r7, #24]
 8018b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d00d      	beq.n	8018b2e <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f000 ffa4 	bl	8019a6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018b2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8018b2e:	69fb      	ldr	r3, [r7, #28]
 8018b30:	f003 0310 	and.w	r3, r3, #16
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d043      	beq.n	8018bc0 <HAL_ADC_IRQHandler+0x424>
 8018b38:	69bb      	ldr	r3, [r7, #24]
 8018b3a:	f003 0310 	and.w	r3, r3, #16
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d03e      	beq.n	8018bc0 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d102      	bne.n	8018b50 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8018b4e:	e021      	b.n	8018b94 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8018b50:	697b      	ldr	r3, [r7, #20]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d015      	beq.n	8018b82 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018b5e:	d004      	beq.n	8018b6a <HAL_ADC_IRQHandler+0x3ce>
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	4a27      	ldr	r2, [pc, #156]	; (8018c04 <HAL_ADC_IRQHandler+0x468>)
 8018b66:	4293      	cmp	r3, r2
 8018b68:	d101      	bne.n	8018b6e <HAL_ADC_IRQHandler+0x3d2>
 8018b6a:	4b27      	ldr	r3, [pc, #156]	; (8018c08 <HAL_ADC_IRQHandler+0x46c>)
 8018b6c:	e000      	b.n	8018b70 <HAL_ADC_IRQHandler+0x3d4>
 8018b6e:	4b27      	ldr	r3, [pc, #156]	; (8018c0c <HAL_ADC_IRQHandler+0x470>)
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7ff f829 	bl	8017bc8 <LL_ADC_GetMultiDMATransfer>
 8018b76:	4603      	mov	r3, r0
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d00b      	beq.n	8018b94 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8018b80:	e008      	b.n	8018b94 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	68db      	ldr	r3, [r3, #12]
 8018b88:	f003 0301 	and.w	r3, r3, #1
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d001      	beq.n	8018b94 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018b90:	2301      	movs	r3, #1
 8018b92:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8018b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b96:	2b01      	cmp	r3, #1
 8018b98:	d10e      	bne.n	8018bb8 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018baa:	f043 0202 	orr.w	r2, r3, #2
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8018bb2:	6878      	ldr	r0, [r7, #4]
 8018bb4:	f000 f840 	bl	8018c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	2210      	movs	r2, #16
 8018bbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8018bc0:	69fb      	ldr	r3, [r7, #28]
 8018bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d018      	beq.n	8018bfc <HAL_ADC_IRQHandler+0x460>
 8018bca:	69bb      	ldr	r3, [r7, #24]
 8018bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d013      	beq.n	8018bfc <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bd8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018be4:	f043 0208 	orr.w	r2, r3, #8
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018bf4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8018bf6:	6878      	ldr	r0, [r7, #4]
 8018bf8:	f000 ff24 	bl	8019a44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8018bfc:	bf00      	nop
 8018bfe:	3728      	adds	r7, #40	; 0x28
 8018c00:	46bd      	mov	sp, r7
 8018c02:	bd80      	pop	{r7, pc}
 8018c04:	50000100 	.word	0x50000100
 8018c08:	50000300 	.word	0x50000300
 8018c0c:	50000700 	.word	0x50000700

08018c10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8018c10:	b480      	push	{r7}
 8018c12:	b083      	sub	sp, #12
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8018c18:	bf00      	nop
 8018c1a:	370c      	adds	r7, #12
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c22:	4770      	bx	lr

08018c24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8018c24:	b480      	push	{r7}
 8018c26:	b083      	sub	sp, #12
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8018c2c:	bf00      	nop
 8018c2e:	370c      	adds	r7, #12
 8018c30:	46bd      	mov	sp, r7
 8018c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c36:	4770      	bx	lr

08018c38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8018c38:	b480      	push	{r7}
 8018c3a:	b083      	sub	sp, #12
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8018c40:	bf00      	nop
 8018c42:	370c      	adds	r7, #12
 8018c44:	46bd      	mov	sp, r7
 8018c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4a:	4770      	bx	lr

08018c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b0b6      	sub	sp, #216	; 0xd8
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]
 8018c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018c56:	2300      	movs	r3, #0
 8018c58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018c66:	2b01      	cmp	r3, #1
 8018c68:	d102      	bne.n	8018c70 <HAL_ADC_ConfigChannel+0x24>
 8018c6a:	2302      	movs	r3, #2
 8018c6c:	f000 bc04 	b.w	8019478 <HAL_ADC_ConfigChannel+0x82c>
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2201      	movs	r2, #1
 8018c74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f7ff f875 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 8018c82:	4603      	mov	r3, r0
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	f040 83e8 	bne.w	801945a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	6818      	ldr	r0, [r3, #0]
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	6859      	ldr	r1, [r3, #4]
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	461a      	mov	r2, r3
 8018c98:	f7fe fef5 	bl	8017a86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7ff f863 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 8018ca6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7ff f883 	bl	8017dba <LL_ADC_INJ_IsConversionOngoing>
 8018cb4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8018cb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	f040 81d9 	bne.w	8019074 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8018cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	f040 81d4 	bne.w	8019074 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	689b      	ldr	r3, [r3, #8]
 8018cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018cd4:	d10f      	bne.n	8018cf6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	6818      	ldr	r0, [r3, #0]
 8018cda:	683b      	ldr	r3, [r7, #0]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	2200      	movs	r2, #0
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	f7fe ff0f 	bl	8017b04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7fe fea3 	bl	8017a3a <LL_ADC_SetSamplingTimeCommonConfig>
 8018cf4:	e00e      	b.n	8018d14 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	6818      	ldr	r0, [r3, #0]
 8018cfa:	683b      	ldr	r3, [r7, #0]
 8018cfc:	6819      	ldr	r1, [r3, #0]
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	689b      	ldr	r3, [r3, #8]
 8018d02:	461a      	mov	r2, r3
 8018d04:	f7fe fefe 	bl	8017b04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	2100      	movs	r1, #0
 8018d0e:	4618      	mov	r0, r3
 8018d10:	f7fe fe93 	bl	8017a3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	695a      	ldr	r2, [r3, #20]
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	68db      	ldr	r3, [r3, #12]
 8018d1e:	08db      	lsrs	r3, r3, #3
 8018d20:	f003 0303 	and.w	r3, r3, #3
 8018d24:	005b      	lsls	r3, r3, #1
 8018d26:	fa02 f303 	lsl.w	r3, r2, r3
 8018d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	691b      	ldr	r3, [r3, #16]
 8018d32:	2b04      	cmp	r3, #4
 8018d34:	d022      	beq.n	8018d7c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	6818      	ldr	r0, [r3, #0]
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	6919      	ldr	r1, [r3, #16]
 8018d3e:	683b      	ldr	r3, [r7, #0]
 8018d40:	681a      	ldr	r2, [r3, #0]
 8018d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018d46:	f7fe fded 	bl	8017924 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	6818      	ldr	r0, [r3, #0]
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	6919      	ldr	r1, [r3, #16]
 8018d52:	683b      	ldr	r3, [r7, #0]
 8018d54:	699b      	ldr	r3, [r3, #24]
 8018d56:	461a      	mov	r2, r3
 8018d58:	f7fe fe39 	bl	80179ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	6818      	ldr	r0, [r3, #0]
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	6919      	ldr	r1, [r3, #16]
 8018d64:	683b      	ldr	r3, [r7, #0]
 8018d66:	7f1b      	ldrb	r3, [r3, #28]
 8018d68:	2b01      	cmp	r3, #1
 8018d6a:	d102      	bne.n	8018d72 <HAL_ADC_ConfigChannel+0x126>
 8018d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018d70:	e000      	b.n	8018d74 <HAL_ADC_ConfigChannel+0x128>
 8018d72:	2300      	movs	r3, #0
 8018d74:	461a      	mov	r2, r3
 8018d76:	f7fe fe45 	bl	8017a04 <LL_ADC_SetOffsetSaturation>
 8018d7a:	e17b      	b.n	8019074 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	2100      	movs	r1, #0
 8018d82:	4618      	mov	r0, r3
 8018d84:	f7fe fdf2 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018d88:	4603      	mov	r3, r0
 8018d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d10a      	bne.n	8018da8 <HAL_ADC_ConfigChannel+0x15c>
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	2100      	movs	r1, #0
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f7fe fde7 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	0e9b      	lsrs	r3, r3, #26
 8018da2:	f003 021f 	and.w	r2, r3, #31
 8018da6:	e01e      	b.n	8018de6 <HAL_ADC_ConfigChannel+0x19a>
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	2100      	movs	r1, #0
 8018dae:	4618      	mov	r0, r3
 8018db0:	f7fe fddc 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018db4:	4603      	mov	r3, r0
 8018db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018dba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018dbe:	fa93 f3a3 	rbit	r3, r3
 8018dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8018dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018dca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8018dce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d101      	bne.n	8018dda <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8018dd6:	2320      	movs	r3, #32
 8018dd8:	e004      	b.n	8018de4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8018dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018dde:	fab3 f383 	clz	r3, r3
 8018de2:	b2db      	uxtb	r3, r3
 8018de4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8018de6:	683b      	ldr	r3, [r7, #0]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d105      	bne.n	8018dfe <HAL_ADC_ConfigChannel+0x1b2>
 8018df2:	683b      	ldr	r3, [r7, #0]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	0e9b      	lsrs	r3, r3, #26
 8018df8:	f003 031f 	and.w	r3, r3, #31
 8018dfc:	e018      	b.n	8018e30 <HAL_ADC_ConfigChannel+0x1e4>
 8018dfe:	683b      	ldr	r3, [r7, #0]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018e06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018e0a:	fa93 f3a3 	rbit	r3, r3
 8018e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8018e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8018e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d101      	bne.n	8018e26 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8018e22:	2320      	movs	r3, #32
 8018e24:	e004      	b.n	8018e30 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8018e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018e2a:	fab3 f383 	clz	r3, r3
 8018e2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018e30:	429a      	cmp	r2, r3
 8018e32:	d106      	bne.n	8018e42 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	2200      	movs	r2, #0
 8018e3a:	2100      	movs	r1, #0
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	f7fe fdab 	bl	8017998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	2101      	movs	r1, #1
 8018e48:	4618      	mov	r0, r3
 8018e4a:	f7fe fd8f 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018e4e:	4603      	mov	r3, r0
 8018e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d10a      	bne.n	8018e6e <HAL_ADC_ConfigChannel+0x222>
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	2101      	movs	r1, #1
 8018e5e:	4618      	mov	r0, r3
 8018e60:	f7fe fd84 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018e64:	4603      	mov	r3, r0
 8018e66:	0e9b      	lsrs	r3, r3, #26
 8018e68:	f003 021f 	and.w	r2, r3, #31
 8018e6c:	e01e      	b.n	8018eac <HAL_ADC_ConfigChannel+0x260>
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	2101      	movs	r1, #1
 8018e74:	4618      	mov	r0, r3
 8018e76:	f7fe fd79 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e84:	fa93 f3a3 	rbit	r3, r3
 8018e88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8018e8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8018e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d101      	bne.n	8018ea0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8018e9c:	2320      	movs	r3, #32
 8018e9e:	e004      	b.n	8018eaa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8018ea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018ea4:	fab3 f383 	clz	r3, r3
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d105      	bne.n	8018ec4 <HAL_ADC_ConfigChannel+0x278>
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	0e9b      	lsrs	r3, r3, #26
 8018ebe:	f003 031f 	and.w	r3, r3, #31
 8018ec2:	e018      	b.n	8018ef6 <HAL_ADC_ConfigChannel+0x2aa>
 8018ec4:	683b      	ldr	r3, [r7, #0]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018ed0:	fa93 f3a3 	rbit	r3, r3
 8018ed4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8018ed8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8018ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d101      	bne.n	8018eec <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8018ee8:	2320      	movs	r3, #32
 8018eea:	e004      	b.n	8018ef6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8018eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ef0:	fab3 f383 	clz	r3, r3
 8018ef4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8018ef6:	429a      	cmp	r2, r3
 8018ef8:	d106      	bne.n	8018f08 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	2200      	movs	r2, #0
 8018f00:	2101      	movs	r1, #1
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7fe fd48 	bl	8017998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	2102      	movs	r1, #2
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f7fe fd2c 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018f14:	4603      	mov	r3, r0
 8018f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d10a      	bne.n	8018f34 <HAL_ADC_ConfigChannel+0x2e8>
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	2102      	movs	r1, #2
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7fe fd21 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	0e9b      	lsrs	r3, r3, #26
 8018f2e:	f003 021f 	and.w	r2, r3, #31
 8018f32:	e01e      	b.n	8018f72 <HAL_ADC_ConfigChannel+0x326>
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	2102      	movs	r1, #2
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f7fe fd16 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018f40:	4603      	mov	r3, r0
 8018f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018f4a:	fa93 f3a3 	rbit	r3, r3
 8018f4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8018f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8018f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d101      	bne.n	8018f66 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8018f62:	2320      	movs	r3, #32
 8018f64:	e004      	b.n	8018f70 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8018f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f6a:	fab3 f383 	clz	r3, r3
 8018f6e:	b2db      	uxtb	r3, r3
 8018f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8018f72:	683b      	ldr	r3, [r7, #0]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d105      	bne.n	8018f8a <HAL_ADC_ConfigChannel+0x33e>
 8018f7e:	683b      	ldr	r3, [r7, #0]
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	0e9b      	lsrs	r3, r3, #26
 8018f84:	f003 031f 	and.w	r3, r3, #31
 8018f88:	e016      	b.n	8018fb8 <HAL_ADC_ConfigChannel+0x36c>
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018f96:	fa93 f3a3 	rbit	r3, r3
 8018f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8018f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8018fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d101      	bne.n	8018fae <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8018faa:	2320      	movs	r3, #32
 8018fac:	e004      	b.n	8018fb8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8018fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018fb2:	fab3 f383 	clz	r3, r3
 8018fb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8018fb8:	429a      	cmp	r2, r3
 8018fba:	d106      	bne.n	8018fca <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	2102      	movs	r1, #2
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7fe fce7 	bl	8017998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	2103      	movs	r1, #3
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7fe fccb 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d10a      	bne.n	8018ff6 <HAL_ADC_ConfigChannel+0x3aa>
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	2103      	movs	r1, #3
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7fe fcc0 	bl	801796c <LL_ADC_GetOffsetChannel>
 8018fec:	4603      	mov	r3, r0
 8018fee:	0e9b      	lsrs	r3, r3, #26
 8018ff0:	f003 021f 	and.w	r2, r3, #31
 8018ff4:	e017      	b.n	8019026 <HAL_ADC_ConfigChannel+0x3da>
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	2103      	movs	r1, #3
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f7fe fcb5 	bl	801796c <LL_ADC_GetOffsetChannel>
 8019002:	4603      	mov	r3, r0
 8019004:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019008:	fa93 f3a3 	rbit	r3, r3
 801900c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801900e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019010:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8019012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019014:	2b00      	cmp	r3, #0
 8019016:	d101      	bne.n	801901c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8019018:	2320      	movs	r3, #32
 801901a:	e003      	b.n	8019024 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801901c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801901e:	fab3 f383 	clz	r3, r3
 8019022:	b2db      	uxtb	r3, r3
 8019024:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801902e:	2b00      	cmp	r3, #0
 8019030:	d105      	bne.n	801903e <HAL_ADC_ConfigChannel+0x3f2>
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	0e9b      	lsrs	r3, r3, #26
 8019038:	f003 031f 	and.w	r3, r3, #31
 801903c:	e011      	b.n	8019062 <HAL_ADC_ConfigChannel+0x416>
 801903e:	683b      	ldr	r3, [r7, #0]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019046:	fa93 f3a3 	rbit	r3, r3
 801904a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801904c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801904e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8019050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019052:	2b00      	cmp	r3, #0
 8019054:	d101      	bne.n	801905a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8019056:	2320      	movs	r3, #32
 8019058:	e003      	b.n	8019062 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801905a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801905c:	fab3 f383 	clz	r3, r3
 8019060:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8019062:	429a      	cmp	r2, r3
 8019064:	d106      	bne.n	8019074 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	2200      	movs	r2, #0
 801906c:	2103      	movs	r1, #3
 801906e:	4618      	mov	r0, r3
 8019070:	f7fe fc92 	bl	8017998 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	4618      	mov	r0, r3
 801907a:	f7fe fe29 	bl	8017cd0 <LL_ADC_IsEnabled>
 801907e:	4603      	mov	r3, r0
 8019080:	2b00      	cmp	r3, #0
 8019082:	f040 813d 	bne.w	8019300 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	6818      	ldr	r0, [r3, #0]
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	6819      	ldr	r1, [r3, #0]
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	68db      	ldr	r3, [r3, #12]
 8019092:	461a      	mov	r2, r3
 8019094:	f7fe fd62 	bl	8017b5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8019098:	683b      	ldr	r3, [r7, #0]
 801909a:	68db      	ldr	r3, [r3, #12]
 801909c:	4aa2      	ldr	r2, [pc, #648]	; (8019328 <HAL_ADC_ConfigChannel+0x6dc>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	f040 812e 	bne.w	8019300 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d10b      	bne.n	80190cc <HAL_ADC_ConfigChannel+0x480>
 80190b4:	683b      	ldr	r3, [r7, #0]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	0e9b      	lsrs	r3, r3, #26
 80190ba:	3301      	adds	r3, #1
 80190bc:	f003 031f 	and.w	r3, r3, #31
 80190c0:	2b09      	cmp	r3, #9
 80190c2:	bf94      	ite	ls
 80190c4:	2301      	movls	r3, #1
 80190c6:	2300      	movhi	r3, #0
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	e019      	b.n	8019100 <HAL_ADC_ConfigChannel+0x4b4>
 80190cc:	683b      	ldr	r3, [r7, #0]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80190d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80190d4:	fa93 f3a3 	rbit	r3, r3
 80190d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80190da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80190dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80190de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d101      	bne.n	80190e8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80190e4:	2320      	movs	r3, #32
 80190e6:	e003      	b.n	80190f0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80190e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80190ea:	fab3 f383 	clz	r3, r3
 80190ee:	b2db      	uxtb	r3, r3
 80190f0:	3301      	adds	r3, #1
 80190f2:	f003 031f 	and.w	r3, r3, #31
 80190f6:	2b09      	cmp	r3, #9
 80190f8:	bf94      	ite	ls
 80190fa:	2301      	movls	r3, #1
 80190fc:	2300      	movhi	r3, #0
 80190fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019100:	2b00      	cmp	r3, #0
 8019102:	d079      	beq.n	80191f8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8019104:	683b      	ldr	r3, [r7, #0]
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801910c:	2b00      	cmp	r3, #0
 801910e:	d107      	bne.n	8019120 <HAL_ADC_ConfigChannel+0x4d4>
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	0e9b      	lsrs	r3, r3, #26
 8019116:	3301      	adds	r3, #1
 8019118:	069b      	lsls	r3, r3, #26
 801911a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801911e:	e015      	b.n	801914c <HAL_ADC_ConfigChannel+0x500>
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019128:	fa93 f3a3 	rbit	r3, r3
 801912c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801912e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019130:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8019132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019134:	2b00      	cmp	r3, #0
 8019136:	d101      	bne.n	801913c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8019138:	2320      	movs	r3, #32
 801913a:	e003      	b.n	8019144 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801913c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801913e:	fab3 f383 	clz	r3, r3
 8019142:	b2db      	uxtb	r3, r3
 8019144:	3301      	adds	r3, #1
 8019146:	069b      	lsls	r3, r3, #26
 8019148:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019154:	2b00      	cmp	r3, #0
 8019156:	d109      	bne.n	801916c <HAL_ADC_ConfigChannel+0x520>
 8019158:	683b      	ldr	r3, [r7, #0]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	0e9b      	lsrs	r3, r3, #26
 801915e:	3301      	adds	r3, #1
 8019160:	f003 031f 	and.w	r3, r3, #31
 8019164:	2101      	movs	r1, #1
 8019166:	fa01 f303 	lsl.w	r3, r1, r3
 801916a:	e017      	b.n	801919c <HAL_ADC_ConfigChannel+0x550>
 801916c:	683b      	ldr	r3, [r7, #0]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019174:	fa93 f3a3 	rbit	r3, r3
 8019178:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801917a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801917c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801917e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019180:	2b00      	cmp	r3, #0
 8019182:	d101      	bne.n	8019188 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8019184:	2320      	movs	r3, #32
 8019186:	e003      	b.n	8019190 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8019188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801918a:	fab3 f383 	clz	r3, r3
 801918e:	b2db      	uxtb	r3, r3
 8019190:	3301      	adds	r3, #1
 8019192:	f003 031f 	and.w	r3, r3, #31
 8019196:	2101      	movs	r1, #1
 8019198:	fa01 f303 	lsl.w	r3, r1, r3
 801919c:	ea42 0103 	orr.w	r1, r2, r3
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d10a      	bne.n	80191c2 <HAL_ADC_ConfigChannel+0x576>
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	0e9b      	lsrs	r3, r3, #26
 80191b2:	3301      	adds	r3, #1
 80191b4:	f003 021f 	and.w	r2, r3, #31
 80191b8:	4613      	mov	r3, r2
 80191ba:	005b      	lsls	r3, r3, #1
 80191bc:	4413      	add	r3, r2
 80191be:	051b      	lsls	r3, r3, #20
 80191c0:	e018      	b.n	80191f4 <HAL_ADC_ConfigChannel+0x5a8>
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80191c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ca:	fa93 f3a3 	rbit	r3, r3
 80191ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80191d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80191d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d101      	bne.n	80191de <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80191da:	2320      	movs	r3, #32
 80191dc:	e003      	b.n	80191e6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80191de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191e0:	fab3 f383 	clz	r3, r3
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	3301      	adds	r3, #1
 80191e8:	f003 021f 	and.w	r2, r3, #31
 80191ec:	4613      	mov	r3, r2
 80191ee:	005b      	lsls	r3, r3, #1
 80191f0:	4413      	add	r3, r2
 80191f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80191f4:	430b      	orrs	r3, r1
 80191f6:	e07e      	b.n	80192f6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019200:	2b00      	cmp	r3, #0
 8019202:	d107      	bne.n	8019214 <HAL_ADC_ConfigChannel+0x5c8>
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	0e9b      	lsrs	r3, r3, #26
 801920a:	3301      	adds	r3, #1
 801920c:	069b      	lsls	r3, r3, #26
 801920e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019212:	e015      	b.n	8019240 <HAL_ADC_ConfigChannel+0x5f4>
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801921c:	fa93 f3a3 	rbit	r3, r3
 8019220:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8019222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019224:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8019226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019228:	2b00      	cmp	r3, #0
 801922a:	d101      	bne.n	8019230 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801922c:	2320      	movs	r3, #32
 801922e:	e003      	b.n	8019238 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8019230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019232:	fab3 f383 	clz	r3, r3
 8019236:	b2db      	uxtb	r3, r3
 8019238:	3301      	adds	r3, #1
 801923a:	069b      	lsls	r3, r3, #26
 801923c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019240:	683b      	ldr	r3, [r7, #0]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019248:	2b00      	cmp	r3, #0
 801924a:	d109      	bne.n	8019260 <HAL_ADC_ConfigChannel+0x614>
 801924c:	683b      	ldr	r3, [r7, #0]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	0e9b      	lsrs	r3, r3, #26
 8019252:	3301      	adds	r3, #1
 8019254:	f003 031f 	and.w	r3, r3, #31
 8019258:	2101      	movs	r1, #1
 801925a:	fa01 f303 	lsl.w	r3, r1, r3
 801925e:	e017      	b.n	8019290 <HAL_ADC_ConfigChannel+0x644>
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019266:	6a3b      	ldr	r3, [r7, #32]
 8019268:	fa93 f3a3 	rbit	r3, r3
 801926c:	61fb      	str	r3, [r7, #28]
  return result;
 801926e:	69fb      	ldr	r3, [r7, #28]
 8019270:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8019272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019274:	2b00      	cmp	r3, #0
 8019276:	d101      	bne.n	801927c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8019278:	2320      	movs	r3, #32
 801927a:	e003      	b.n	8019284 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801927e:	fab3 f383 	clz	r3, r3
 8019282:	b2db      	uxtb	r3, r3
 8019284:	3301      	adds	r3, #1
 8019286:	f003 031f 	and.w	r3, r3, #31
 801928a:	2101      	movs	r1, #1
 801928c:	fa01 f303 	lsl.w	r3, r1, r3
 8019290:	ea42 0103 	orr.w	r1, r2, r3
 8019294:	683b      	ldr	r3, [r7, #0]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801929c:	2b00      	cmp	r3, #0
 801929e:	d10d      	bne.n	80192bc <HAL_ADC_ConfigChannel+0x670>
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	0e9b      	lsrs	r3, r3, #26
 80192a6:	3301      	adds	r3, #1
 80192a8:	f003 021f 	and.w	r2, r3, #31
 80192ac:	4613      	mov	r3, r2
 80192ae:	005b      	lsls	r3, r3, #1
 80192b0:	4413      	add	r3, r2
 80192b2:	3b1e      	subs	r3, #30
 80192b4:	051b      	lsls	r3, r3, #20
 80192b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80192ba:	e01b      	b.n	80192f4 <HAL_ADC_ConfigChannel+0x6a8>
 80192bc:	683b      	ldr	r3, [r7, #0]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80192c2:	697b      	ldr	r3, [r7, #20]
 80192c4:	fa93 f3a3 	rbit	r3, r3
 80192c8:	613b      	str	r3, [r7, #16]
  return result;
 80192ca:	693b      	ldr	r3, [r7, #16]
 80192cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80192ce:	69bb      	ldr	r3, [r7, #24]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d101      	bne.n	80192d8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80192d4:	2320      	movs	r3, #32
 80192d6:	e003      	b.n	80192e0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80192d8:	69bb      	ldr	r3, [r7, #24]
 80192da:	fab3 f383 	clz	r3, r3
 80192de:	b2db      	uxtb	r3, r3
 80192e0:	3301      	adds	r3, #1
 80192e2:	f003 021f 	and.w	r2, r3, #31
 80192e6:	4613      	mov	r3, r2
 80192e8:	005b      	lsls	r3, r3, #1
 80192ea:	4413      	add	r3, r2
 80192ec:	3b1e      	subs	r3, #30
 80192ee:	051b      	lsls	r3, r3, #20
 80192f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80192f4:	430b      	orrs	r3, r1
 80192f6:	683a      	ldr	r2, [r7, #0]
 80192f8:	6892      	ldr	r2, [r2, #8]
 80192fa:	4619      	mov	r1, r3
 80192fc:	f7fe fc02 	bl	8017b04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8019300:	683b      	ldr	r3, [r7, #0]
 8019302:	681a      	ldr	r2, [r3, #0]
 8019304:	4b09      	ldr	r3, [pc, #36]	; (801932c <HAL_ADC_ConfigChannel+0x6e0>)
 8019306:	4013      	ands	r3, r2
 8019308:	2b00      	cmp	r3, #0
 801930a:	f000 80af 	beq.w	801946c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019316:	d004      	beq.n	8019322 <HAL_ADC_ConfigChannel+0x6d6>
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	4a04      	ldr	r2, [pc, #16]	; (8019330 <HAL_ADC_ConfigChannel+0x6e4>)
 801931e:	4293      	cmp	r3, r2
 8019320:	d10a      	bne.n	8019338 <HAL_ADC_ConfigChannel+0x6ec>
 8019322:	4b04      	ldr	r3, [pc, #16]	; (8019334 <HAL_ADC_ConfigChannel+0x6e8>)
 8019324:	e009      	b.n	801933a <HAL_ADC_ConfigChannel+0x6ee>
 8019326:	bf00      	nop
 8019328:	407f0000 	.word	0x407f0000
 801932c:	80080000 	.word	0x80080000
 8019330:	50000100 	.word	0x50000100
 8019334:	50000300 	.word	0x50000300
 8019338:	4b51      	ldr	r3, [pc, #324]	; (8019480 <HAL_ADC_ConfigChannel+0x834>)
 801933a:	4618      	mov	r0, r3
 801933c:	f7fe fae4 	bl	8017908 <LL_ADC_GetCommonPathInternalCh>
 8019340:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8019344:	683b      	ldr	r3, [r7, #0]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	4a4e      	ldr	r2, [pc, #312]	; (8019484 <HAL_ADC_ConfigChannel+0x838>)
 801934a:	4293      	cmp	r3, r2
 801934c:	d004      	beq.n	8019358 <HAL_ADC_ConfigChannel+0x70c>
 801934e:	683b      	ldr	r3, [r7, #0]
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	4a4d      	ldr	r2, [pc, #308]	; (8019488 <HAL_ADC_ConfigChannel+0x83c>)
 8019354:	4293      	cmp	r3, r2
 8019356:	d134      	bne.n	80193c2 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8019358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801935c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019360:	2b00      	cmp	r3, #0
 8019362:	d12e      	bne.n	80193c2 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801936c:	d17e      	bne.n	801946c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019376:	d004      	beq.n	8019382 <HAL_ADC_ConfigChannel+0x736>
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	4a43      	ldr	r2, [pc, #268]	; (801948c <HAL_ADC_ConfigChannel+0x840>)
 801937e:	4293      	cmp	r3, r2
 8019380:	d101      	bne.n	8019386 <HAL_ADC_ConfigChannel+0x73a>
 8019382:	4a43      	ldr	r2, [pc, #268]	; (8019490 <HAL_ADC_ConfigChannel+0x844>)
 8019384:	e000      	b.n	8019388 <HAL_ADC_ConfigChannel+0x73c>
 8019386:	4a3e      	ldr	r2, [pc, #248]	; (8019480 <HAL_ADC_ConfigChannel+0x834>)
 8019388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801938c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019390:	4619      	mov	r1, r3
 8019392:	4610      	mov	r0, r2
 8019394:	f7fe faa5 	bl	80178e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019398:	4b3e      	ldr	r3, [pc, #248]	; (8019494 <HAL_ADC_ConfigChannel+0x848>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	099b      	lsrs	r3, r3, #6
 801939e:	4a3e      	ldr	r2, [pc, #248]	; (8019498 <HAL_ADC_ConfigChannel+0x84c>)
 80193a0:	fba2 2303 	umull	r2, r3, r2, r3
 80193a4:	099b      	lsrs	r3, r3, #6
 80193a6:	1c5a      	adds	r2, r3, #1
 80193a8:	4613      	mov	r3, r2
 80193aa:	005b      	lsls	r3, r3, #1
 80193ac:	4413      	add	r3, r2
 80193ae:	009b      	lsls	r3, r3, #2
 80193b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80193b2:	e002      	b.n	80193ba <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	3b01      	subs	r3, #1
 80193b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d1f9      	bne.n	80193b4 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80193c0:	e054      	b.n	801946c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	4a35      	ldr	r2, [pc, #212]	; (801949c <HAL_ADC_ConfigChannel+0x850>)
 80193c8:	4293      	cmp	r3, r2
 80193ca:	d120      	bne.n	801940e <HAL_ADC_ConfigChannel+0x7c2>
 80193cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80193d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d11a      	bne.n	801940e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80193e0:	d144      	bne.n	801946c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80193ea:	d004      	beq.n	80193f6 <HAL_ADC_ConfigChannel+0x7aa>
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	4a26      	ldr	r2, [pc, #152]	; (801948c <HAL_ADC_ConfigChannel+0x840>)
 80193f2:	4293      	cmp	r3, r2
 80193f4:	d101      	bne.n	80193fa <HAL_ADC_ConfigChannel+0x7ae>
 80193f6:	4a26      	ldr	r2, [pc, #152]	; (8019490 <HAL_ADC_ConfigChannel+0x844>)
 80193f8:	e000      	b.n	80193fc <HAL_ADC_ConfigChannel+0x7b0>
 80193fa:	4a21      	ldr	r2, [pc, #132]	; (8019480 <HAL_ADC_ConfigChannel+0x834>)
 80193fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019404:	4619      	mov	r1, r3
 8019406:	4610      	mov	r0, r2
 8019408:	f7fe fa6b 	bl	80178e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801940c:	e02e      	b.n	801946c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801940e:	683b      	ldr	r3, [r7, #0]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	4a23      	ldr	r2, [pc, #140]	; (80194a0 <HAL_ADC_ConfigChannel+0x854>)
 8019414:	4293      	cmp	r3, r2
 8019416:	d129      	bne.n	801946c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8019418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801941c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019420:	2b00      	cmp	r3, #0
 8019422:	d123      	bne.n	801946c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	4a18      	ldr	r2, [pc, #96]	; (801948c <HAL_ADC_ConfigChannel+0x840>)
 801942a:	4293      	cmp	r3, r2
 801942c:	d01e      	beq.n	801946c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019436:	d004      	beq.n	8019442 <HAL_ADC_ConfigChannel+0x7f6>
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	4a13      	ldr	r2, [pc, #76]	; (801948c <HAL_ADC_ConfigChannel+0x840>)
 801943e:	4293      	cmp	r3, r2
 8019440:	d101      	bne.n	8019446 <HAL_ADC_ConfigChannel+0x7fa>
 8019442:	4a13      	ldr	r2, [pc, #76]	; (8019490 <HAL_ADC_ConfigChannel+0x844>)
 8019444:	e000      	b.n	8019448 <HAL_ADC_ConfigChannel+0x7fc>
 8019446:	4a0e      	ldr	r2, [pc, #56]	; (8019480 <HAL_ADC_ConfigChannel+0x834>)
 8019448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801944c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8019450:	4619      	mov	r1, r3
 8019452:	4610      	mov	r0, r2
 8019454:	f7fe fa45 	bl	80178e2 <LL_ADC_SetCommonPathInternalCh>
 8019458:	e008      	b.n	801946c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801945e:	f043 0220 	orr.w	r2, r3, #32
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019466:	2301      	movs	r3, #1
 8019468:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	2200      	movs	r2, #0
 8019470:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019474:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8019478:	4618      	mov	r0, r3
 801947a:	37d8      	adds	r7, #216	; 0xd8
 801947c:	46bd      	mov	sp, r7
 801947e:	bd80      	pop	{r7, pc}
 8019480:	50000700 	.word	0x50000700
 8019484:	c3210000 	.word	0xc3210000
 8019488:	90c00010 	.word	0x90c00010
 801948c:	50000100 	.word	0x50000100
 8019490:	50000300 	.word	0x50000300
 8019494:	20000000 	.word	0x20000000
 8019498:	053e2d63 	.word	0x053e2d63
 801949c:	c7520000 	.word	0xc7520000
 80194a0:	cb840000 	.word	0xcb840000

080194a4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b088      	sub	sp, #32
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80194ae:	2300      	movs	r3, #0
 80194b0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80194b2:	683b      	ldr	r3, [r7, #0]
 80194b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7fe fc56 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 80194c0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	4618      	mov	r0, r3
 80194c8:	f7fe fc77 	bl	8017dba <LL_ADC_INJ_IsConversionOngoing>
 80194cc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80194ce:	693b      	ldr	r3, [r7, #16]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d103      	bne.n	80194dc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	f000 8098 	beq.w	801960c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	68db      	ldr	r3, [r3, #12]
 80194e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d02a      	beq.n	8019540 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	7f5b      	ldrb	r3, [r3, #29]
 80194ee:	2b01      	cmp	r3, #1
 80194f0:	d126      	bne.n	8019540 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	7f1b      	ldrb	r3, [r3, #28]
 80194f6:	2b01      	cmp	r3, #1
 80194f8:	d122      	bne.n	8019540 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80194fa:	2301      	movs	r3, #1
 80194fc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80194fe:	e014      	b.n	801952a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8019500:	69fb      	ldr	r3, [r7, #28]
 8019502:	4a45      	ldr	r2, [pc, #276]	; (8019618 <ADC_ConversionStop+0x174>)
 8019504:	4293      	cmp	r3, r2
 8019506:	d90d      	bls.n	8019524 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801950c:	f043 0210 	orr.w	r2, r3, #16
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019518:	f043 0201 	orr.w	r2, r3, #1
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8019520:	2301      	movs	r3, #1
 8019522:	e074      	b.n	801960e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8019524:	69fb      	ldr	r3, [r7, #28]
 8019526:	3301      	adds	r3, #1
 8019528:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019534:	2b40      	cmp	r3, #64	; 0x40
 8019536:	d1e3      	bne.n	8019500 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	2240      	movs	r2, #64	; 0x40
 801953e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8019540:	69bb      	ldr	r3, [r7, #24]
 8019542:	2b02      	cmp	r3, #2
 8019544:	d014      	beq.n	8019570 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	4618      	mov	r0, r3
 801954c:	f7fe fc0e 	bl	8017d6c <LL_ADC_REG_IsConversionOngoing>
 8019550:	4603      	mov	r3, r0
 8019552:	2b00      	cmp	r3, #0
 8019554:	d00c      	beq.n	8019570 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	4618      	mov	r0, r3
 801955c:	f7fe fbcb 	bl	8017cf6 <LL_ADC_IsDisableOngoing>
 8019560:	4603      	mov	r3, r0
 8019562:	2b00      	cmp	r3, #0
 8019564:	d104      	bne.n	8019570 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	4618      	mov	r0, r3
 801956c:	f7fe fbea 	bl	8017d44 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8019570:	69bb      	ldr	r3, [r7, #24]
 8019572:	2b01      	cmp	r3, #1
 8019574:	d014      	beq.n	80195a0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	4618      	mov	r0, r3
 801957c:	f7fe fc1d 	bl	8017dba <LL_ADC_INJ_IsConversionOngoing>
 8019580:	4603      	mov	r3, r0
 8019582:	2b00      	cmp	r3, #0
 8019584:	d00c      	beq.n	80195a0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	4618      	mov	r0, r3
 801958c:	f7fe fbb3 	bl	8017cf6 <LL_ADC_IsDisableOngoing>
 8019590:	4603      	mov	r3, r0
 8019592:	2b00      	cmp	r3, #0
 8019594:	d104      	bne.n	80195a0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	4618      	mov	r0, r3
 801959c:	f7fe fbf9 	bl	8017d92 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80195a0:	69bb      	ldr	r3, [r7, #24]
 80195a2:	2b02      	cmp	r3, #2
 80195a4:	d005      	beq.n	80195b2 <ADC_ConversionStop+0x10e>
 80195a6:	69bb      	ldr	r3, [r7, #24]
 80195a8:	2b03      	cmp	r3, #3
 80195aa:	d105      	bne.n	80195b8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80195ac:	230c      	movs	r3, #12
 80195ae:	617b      	str	r3, [r7, #20]
        break;
 80195b0:	e005      	b.n	80195be <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80195b2:	2308      	movs	r3, #8
 80195b4:	617b      	str	r3, [r7, #20]
        break;
 80195b6:	e002      	b.n	80195be <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80195b8:	2304      	movs	r3, #4
 80195ba:	617b      	str	r3, [r7, #20]
        break;
 80195bc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80195be:	f7fe f94f 	bl	8017860 <HAL_GetTick>
 80195c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80195c4:	e01b      	b.n	80195fe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80195c6:	f7fe f94b 	bl	8017860 <HAL_GetTick>
 80195ca:	4602      	mov	r2, r0
 80195cc:	68bb      	ldr	r3, [r7, #8]
 80195ce:	1ad3      	subs	r3, r2, r3
 80195d0:	2b05      	cmp	r3, #5
 80195d2:	d914      	bls.n	80195fe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	689a      	ldr	r2, [r3, #8]
 80195da:	697b      	ldr	r3, [r7, #20]
 80195dc:	4013      	ands	r3, r2
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d00d      	beq.n	80195fe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195e6:	f043 0210 	orr.w	r2, r3, #16
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80195f2:	f043 0201 	orr.w	r2, r3, #1
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80195fa:	2301      	movs	r3, #1
 80195fc:	e007      	b.n	801960e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	689a      	ldr	r2, [r3, #8]
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	4013      	ands	r3, r2
 8019608:	2b00      	cmp	r3, #0
 801960a:	d1dc      	bne.n	80195c6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801960c:	2300      	movs	r3, #0
}
 801960e:	4618      	mov	r0, r3
 8019610:	3720      	adds	r7, #32
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	a33fffff 	.word	0xa33fffff

0801961c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b084      	sub	sp, #16
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	4618      	mov	r0, r3
 801962a:	f7fe fb51 	bl	8017cd0 <LL_ADC_IsEnabled>
 801962e:	4603      	mov	r3, r0
 8019630:	2b00      	cmp	r3, #0
 8019632:	d14d      	bne.n	80196d0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	689a      	ldr	r2, [r3, #8]
 801963a:	4b28      	ldr	r3, [pc, #160]	; (80196dc <ADC_Enable+0xc0>)
 801963c:	4013      	ands	r3, r2
 801963e:	2b00      	cmp	r3, #0
 8019640:	d00d      	beq.n	801965e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019646:	f043 0210 	orr.w	r2, r3, #16
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019652:	f043 0201 	orr.w	r2, r3, #1
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801965a:	2301      	movs	r3, #1
 801965c:	e039      	b.n	80196d2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	4618      	mov	r0, r3
 8019664:	f7fe fb0c 	bl	8017c80 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8019668:	f7fe f8fa 	bl	8017860 <HAL_GetTick>
 801966c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801966e:	e028      	b.n	80196c2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	4618      	mov	r0, r3
 8019676:	f7fe fb2b 	bl	8017cd0 <LL_ADC_IsEnabled>
 801967a:	4603      	mov	r3, r0
 801967c:	2b00      	cmp	r3, #0
 801967e:	d104      	bne.n	801968a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	4618      	mov	r0, r3
 8019686:	f7fe fafb 	bl	8017c80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801968a:	f7fe f8e9 	bl	8017860 <HAL_GetTick>
 801968e:	4602      	mov	r2, r0
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	1ad3      	subs	r3, r2, r3
 8019694:	2b02      	cmp	r3, #2
 8019696:	d914      	bls.n	80196c2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	f003 0301 	and.w	r3, r3, #1
 80196a2:	2b01      	cmp	r3, #1
 80196a4:	d00d      	beq.n	80196c2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196aa:	f043 0210 	orr.w	r2, r3, #16
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80196b6:	f043 0201 	orr.w	r2, r3, #1
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80196be:	2301      	movs	r3, #1
 80196c0:	e007      	b.n	80196d2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	f003 0301 	and.w	r3, r3, #1
 80196cc:	2b01      	cmp	r3, #1
 80196ce:	d1cf      	bne.n	8019670 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80196d0:	2300      	movs	r3, #0
}
 80196d2:	4618      	mov	r0, r3
 80196d4:	3710      	adds	r7, #16
 80196d6:	46bd      	mov	sp, r7
 80196d8:	bd80      	pop	{r7, pc}
 80196da:	bf00      	nop
 80196dc:	8000003f 	.word	0x8000003f

080196e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b084      	sub	sp, #16
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	4618      	mov	r0, r3
 80196ee:	f7fe fb02 	bl	8017cf6 <LL_ADC_IsDisableOngoing>
 80196f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	4618      	mov	r0, r3
 80196fa:	f7fe fae9 	bl	8017cd0 <LL_ADC_IsEnabled>
 80196fe:	4603      	mov	r3, r0
 8019700:	2b00      	cmp	r3, #0
 8019702:	d047      	beq.n	8019794 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d144      	bne.n	8019794 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	689b      	ldr	r3, [r3, #8]
 8019710:	f003 030d 	and.w	r3, r3, #13
 8019714:	2b01      	cmp	r3, #1
 8019716:	d10c      	bne.n	8019732 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	4618      	mov	r0, r3
 801971e:	f7fe fac3 	bl	8017ca8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	2203      	movs	r2, #3
 8019728:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801972a:	f7fe f899 	bl	8017860 <HAL_GetTick>
 801972e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019730:	e029      	b.n	8019786 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019736:	f043 0210 	orr.w	r2, r3, #16
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019742:	f043 0201 	orr.w	r2, r3, #1
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801974a:	2301      	movs	r3, #1
 801974c:	e023      	b.n	8019796 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801974e:	f7fe f887 	bl	8017860 <HAL_GetTick>
 8019752:	4602      	mov	r2, r0
 8019754:	68bb      	ldr	r3, [r7, #8]
 8019756:	1ad3      	subs	r3, r2, r3
 8019758:	2b02      	cmp	r3, #2
 801975a:	d914      	bls.n	8019786 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	689b      	ldr	r3, [r3, #8]
 8019762:	f003 0301 	and.w	r3, r3, #1
 8019766:	2b00      	cmp	r3, #0
 8019768:	d00d      	beq.n	8019786 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801976e:	f043 0210 	orr.w	r2, r3, #16
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801977a:	f043 0201 	orr.w	r2, r3, #1
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8019782:	2301      	movs	r3, #1
 8019784:	e007      	b.n	8019796 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	689b      	ldr	r3, [r3, #8]
 801978c:	f003 0301 	and.w	r3, r3, #1
 8019790:	2b00      	cmp	r3, #0
 8019792:	d1dc      	bne.n	801974e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8019794:	2300      	movs	r3, #0
}
 8019796:	4618      	mov	r0, r3
 8019798:	3710      	adds	r7, #16
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}

0801979e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801979e:	b580      	push	{r7, lr}
 80197a0:	b084      	sub	sp, #16
 80197a2:	af00      	add	r7, sp, #0
 80197a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197aa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d14b      	bne.n	8019850 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	f003 0308 	and.w	r3, r3, #8
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d021      	beq.n	8019816 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	4618      	mov	r0, r3
 80197d8:	f7fe f942 	bl	8017a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 80197dc:	4603      	mov	r3, r0
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d032      	beq.n	8019848 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	68db      	ldr	r3, [r3, #12]
 80197e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d12b      	bne.n	8019848 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019804:	2b00      	cmp	r3, #0
 8019806:	d11f      	bne.n	8019848 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801980c:	f043 0201 	orr.w	r2, r3, #1
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	65da      	str	r2, [r3, #92]	; 0x5c
 8019814:	e018      	b.n	8019848 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	68db      	ldr	r3, [r3, #12]
 801981c:	f003 0302 	and.w	r3, r3, #2
 8019820:	2b00      	cmp	r3, #0
 8019822:	d111      	bne.n	8019848 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019828:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019838:	2b00      	cmp	r3, #0
 801983a:	d105      	bne.n	8019848 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019840:	f043 0201 	orr.w	r2, r3, #1
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019848:	68f8      	ldr	r0, [r7, #12]
 801984a:	f7ee fd89 	bl	8008360 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801984e:	e00e      	b.n	801986e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019854:	f003 0310 	and.w	r3, r3, #16
 8019858:	2b00      	cmp	r3, #0
 801985a:	d003      	beq.n	8019864 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801985c:	68f8      	ldr	r0, [r7, #12]
 801985e:	f7ff f9eb 	bl	8018c38 <HAL_ADC_ErrorCallback>
}
 8019862:	e004      	b.n	801986e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801986a:	6878      	ldr	r0, [r7, #4]
 801986c:	4798      	blx	r3
}
 801986e:	bf00      	nop
 8019870:	3710      	adds	r7, #16
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}

08019876 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8019876:	b580      	push	{r7, lr}
 8019878:	b084      	sub	sp, #16
 801987a:	af00      	add	r7, sp, #0
 801987c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019882:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8019884:	68f8      	ldr	r0, [r7, #12]
 8019886:	f7ff f9c3 	bl	8018c10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801988a:	bf00      	nop
 801988c:	3710      	adds	r7, #16
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}

08019892 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8019892:	b580      	push	{r7, lr}
 8019894:	b084      	sub	sp, #16
 8019896:	af00      	add	r7, sp, #0
 8019898:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801989e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80198b0:	f043 0204 	orr.w	r2, r3, #4
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80198b8:	68f8      	ldr	r0, [r7, #12]
 80198ba:	f7ff f9bd 	bl	8018c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80198be:	bf00      	nop
 80198c0:	3710      	adds	r7, #16
 80198c2:	46bd      	mov	sp, r7
 80198c4:	bd80      	pop	{r7, pc}

080198c6 <LL_ADC_IsEnabled>:
{
 80198c6:	b480      	push	{r7}
 80198c8:	b083      	sub	sp, #12
 80198ca:	af00      	add	r7, sp, #0
 80198cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	689b      	ldr	r3, [r3, #8]
 80198d2:	f003 0301 	and.w	r3, r3, #1
 80198d6:	2b01      	cmp	r3, #1
 80198d8:	d101      	bne.n	80198de <LL_ADC_IsEnabled+0x18>
 80198da:	2301      	movs	r3, #1
 80198dc:	e000      	b.n	80198e0 <LL_ADC_IsEnabled+0x1a>
 80198de:	2300      	movs	r3, #0
}
 80198e0:	4618      	mov	r0, r3
 80198e2:	370c      	adds	r7, #12
 80198e4:	46bd      	mov	sp, r7
 80198e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ea:	4770      	bx	lr

080198ec <LL_ADC_StartCalibration>:
{
 80198ec:	b480      	push	{r7}
 80198ee:	b083      	sub	sp, #12
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	689b      	ldr	r3, [r3, #8]
 80198fa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80198fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019902:	683a      	ldr	r2, [r7, #0]
 8019904:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8019908:	4313      	orrs	r3, r2
 801990a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	609a      	str	r2, [r3, #8]
}
 8019912:	bf00      	nop
 8019914:	370c      	adds	r7, #12
 8019916:	46bd      	mov	sp, r7
 8019918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801991c:	4770      	bx	lr

0801991e <LL_ADC_IsCalibrationOnGoing>:
{
 801991e:	b480      	push	{r7}
 8019920:	b083      	sub	sp, #12
 8019922:	af00      	add	r7, sp, #0
 8019924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	689b      	ldr	r3, [r3, #8]
 801992a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801992e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019932:	d101      	bne.n	8019938 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8019934:	2301      	movs	r3, #1
 8019936:	e000      	b.n	801993a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8019938:	2300      	movs	r3, #0
}
 801993a:	4618      	mov	r0, r3
 801993c:	370c      	adds	r7, #12
 801993e:	46bd      	mov	sp, r7
 8019940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019944:	4770      	bx	lr

08019946 <LL_ADC_REG_IsConversionOngoing>:
{
 8019946:	b480      	push	{r7}
 8019948:	b083      	sub	sp, #12
 801994a:	af00      	add	r7, sp, #0
 801994c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	689b      	ldr	r3, [r3, #8]
 8019952:	f003 0304 	and.w	r3, r3, #4
 8019956:	2b04      	cmp	r3, #4
 8019958:	d101      	bne.n	801995e <LL_ADC_REG_IsConversionOngoing+0x18>
 801995a:	2301      	movs	r3, #1
 801995c:	e000      	b.n	8019960 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801995e:	2300      	movs	r3, #0
}
 8019960:	4618      	mov	r0, r3
 8019962:	370c      	adds	r7, #12
 8019964:	46bd      	mov	sp, r7
 8019966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801996a:	4770      	bx	lr

0801996c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801996c:	b580      	push	{r7, lr}
 801996e:	b084      	sub	sp, #16
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
 8019974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8019976:	2300      	movs	r3, #0
 8019978:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019980:	2b01      	cmp	r3, #1
 8019982:	d101      	bne.n	8019988 <HAL_ADCEx_Calibration_Start+0x1c>
 8019984:	2302      	movs	r3, #2
 8019986:	e04d      	b.n	8019a24 <HAL_ADCEx_Calibration_Start+0xb8>
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	2201      	movs	r2, #1
 801998c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f7ff fea5 	bl	80196e0 <ADC_Disable>
 8019996:	4603      	mov	r3, r0
 8019998:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801999a:	7bfb      	ldrb	r3, [r7, #15]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d136      	bne.n	8019a0e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80199a8:	f023 0302 	bic.w	r3, r3, #2
 80199ac:	f043 0202 	orr.w	r2, r3, #2
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	6839      	ldr	r1, [r7, #0]
 80199ba:	4618      	mov	r0, r3
 80199bc:	f7ff ff96 	bl	80198ec <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80199c0:	e014      	b.n	80199ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	3301      	adds	r3, #1
 80199c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80199c8:	68bb      	ldr	r3, [r7, #8]
 80199ca:	4a18      	ldr	r2, [pc, #96]	; (8019a2c <HAL_ADCEx_Calibration_Start+0xc0>)
 80199cc:	4293      	cmp	r3, r2
 80199ce:	d90d      	bls.n	80199ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199d4:	f023 0312 	bic.w	r3, r3, #18
 80199d8:	f043 0210 	orr.w	r2, r3, #16
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	2200      	movs	r2, #0
 80199e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80199e8:	2301      	movs	r3, #1
 80199ea:	e01b      	b.n	8019a24 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	4618      	mov	r0, r3
 80199f2:	f7ff ff94 	bl	801991e <LL_ADC_IsCalibrationOnGoing>
 80199f6:	4603      	mov	r3, r0
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d1e2      	bne.n	80199c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a00:	f023 0303 	bic.w	r3, r3, #3
 8019a04:	f043 0201 	orr.w	r2, r3, #1
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8019a0c:	e005      	b.n	8019a1a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a12:	f043 0210 	orr.w	r2, r3, #16
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a24:	4618      	mov	r0, r3
 8019a26:	3710      	adds	r7, #16
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	bd80      	pop	{r7, pc}
 8019a2c:	0004de01 	.word	0x0004de01

08019a30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019a30:	b480      	push	{r7}
 8019a32:	b083      	sub	sp, #12
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8019a38:	bf00      	nop
 8019a3a:	370c      	adds	r7, #12
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a42:	4770      	bx	lr

08019a44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8019a44:	b480      	push	{r7}
 8019a46:	b083      	sub	sp, #12
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8019a4c:	bf00      	nop
 8019a4e:	370c      	adds	r7, #12
 8019a50:	46bd      	mov	sp, r7
 8019a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a56:	4770      	bx	lr

08019a58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8019a58:	b480      	push	{r7}
 8019a5a:	b083      	sub	sp, #12
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8019a60:	bf00      	nop
 8019a62:	370c      	adds	r7, #12
 8019a64:	46bd      	mov	sp, r7
 8019a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a6a:	4770      	bx	lr

08019a6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8019a6c:	b480      	push	{r7}
 8019a6e:	b083      	sub	sp, #12
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8019a74:	bf00      	nop
 8019a76:	370c      	adds	r7, #12
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a7e:	4770      	bx	lr

08019a80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8019a80:	b480      	push	{r7}
 8019a82:	b083      	sub	sp, #12
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8019a88:	bf00      	nop
 8019a8a:	370c      	adds	r7, #12
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a92:	4770      	bx	lr

08019a94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8019a94:	b590      	push	{r4, r7, lr}
 8019a96:	b0a1      	sub	sp, #132	; 0x84
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	6078      	str	r0, [r7, #4]
 8019a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019aaa:	2b01      	cmp	r3, #1
 8019aac:	d101      	bne.n	8019ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8019aae:	2302      	movs	r3, #2
 8019ab0:	e0cb      	b.n	8019c4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	2201      	movs	r2, #1
 8019ab6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8019aba:	2300      	movs	r3, #0
 8019abc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8019abe:	2300      	movs	r3, #0
 8019ac0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019aca:	d102      	bne.n	8019ad2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8019acc:	4b61      	ldr	r3, [pc, #388]	; (8019c54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019ace:	60bb      	str	r3, [r7, #8]
 8019ad0:	e001      	b.n	8019ad6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d10b      	bne.n	8019af4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ae0:	f043 0220 	orr.w	r2, r3, #32
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	2200      	movs	r2, #0
 8019aec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8019af0:	2301      	movs	r3, #1
 8019af2:	e0aa      	b.n	8019c4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	4618      	mov	r0, r3
 8019af8:	f7ff ff25 	bl	8019946 <LL_ADC_REG_IsConversionOngoing>
 8019afc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7ff ff1f 	bl	8019946 <LL_ADC_REG_IsConversionOngoing>
 8019b08:	4603      	mov	r3, r0
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	f040 808c 	bne.w	8019c28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8019b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	f040 8088 	bne.w	8019c28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019b20:	d004      	beq.n	8019b2c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	4a4b      	ldr	r2, [pc, #300]	; (8019c54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019b28:	4293      	cmp	r3, r2
 8019b2a:	d101      	bne.n	8019b30 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8019b2c:	4b4a      	ldr	r3, [pc, #296]	; (8019c58 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8019b2e:	e000      	b.n	8019b32 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8019b30:	4b4a      	ldr	r3, [pc, #296]	; (8019c5c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8019b32:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019b34:	683b      	ldr	r3, [r7, #0]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d041      	beq.n	8019bc0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8019b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b3e:	689b      	ldr	r3, [r3, #8]
 8019b40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019b44:	683b      	ldr	r3, [r7, #0]
 8019b46:	6859      	ldr	r1, [r3, #4]
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019b4e:	035b      	lsls	r3, r3, #13
 8019b50:	430b      	orrs	r3, r1
 8019b52:	431a      	orrs	r2, r3
 8019b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019b60:	d004      	beq.n	8019b6c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	4a3b      	ldr	r2, [pc, #236]	; (8019c54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019b68:	4293      	cmp	r3, r2
 8019b6a:	d10f      	bne.n	8019b8c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8019b6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019b70:	f7ff fea9 	bl	80198c6 <LL_ADC_IsEnabled>
 8019b74:	4604      	mov	r4, r0
 8019b76:	4837      	ldr	r0, [pc, #220]	; (8019c54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019b78:	f7ff fea5 	bl	80198c6 <LL_ADC_IsEnabled>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	4323      	orrs	r3, r4
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	bf0c      	ite	eq
 8019b84:	2301      	moveq	r3, #1
 8019b86:	2300      	movne	r3, #0
 8019b88:	b2db      	uxtb	r3, r3
 8019b8a:	e008      	b.n	8019b9e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8019b8c:	4834      	ldr	r0, [pc, #208]	; (8019c60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019b8e:	f7ff fe9a 	bl	80198c6 <LL_ADC_IsEnabled>
 8019b92:	4603      	mov	r3, r0
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	bf0c      	ite	eq
 8019b98:	2301      	moveq	r3, #1
 8019b9a:	2300      	movne	r3, #0
 8019b9c:	b2db      	uxtb	r3, r3
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d04c      	beq.n	8019c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8019ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ba4:	689b      	ldr	r3, [r3, #8]
 8019ba6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019baa:	f023 030f 	bic.w	r3, r3, #15
 8019bae:	683a      	ldr	r2, [r7, #0]
 8019bb0:	6811      	ldr	r1, [r2, #0]
 8019bb2:	683a      	ldr	r2, [r7, #0]
 8019bb4:	6892      	ldr	r2, [r2, #8]
 8019bb6:	430a      	orrs	r2, r1
 8019bb8:	431a      	orrs	r2, r3
 8019bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019bbc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019bbe:	e03d      	b.n	8019c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8019bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019bc2:	689b      	ldr	r3, [r3, #8]
 8019bc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019bca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019bd4:	d004      	beq.n	8019be0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	4a1e      	ldr	r2, [pc, #120]	; (8019c54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019bdc:	4293      	cmp	r3, r2
 8019bde:	d10f      	bne.n	8019c00 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8019be0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019be4:	f7ff fe6f 	bl	80198c6 <LL_ADC_IsEnabled>
 8019be8:	4604      	mov	r4, r0
 8019bea:	481a      	ldr	r0, [pc, #104]	; (8019c54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019bec:	f7ff fe6b 	bl	80198c6 <LL_ADC_IsEnabled>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	4323      	orrs	r3, r4
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	bf0c      	ite	eq
 8019bf8:	2301      	moveq	r3, #1
 8019bfa:	2300      	movne	r3, #0
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	e008      	b.n	8019c12 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8019c00:	4817      	ldr	r0, [pc, #92]	; (8019c60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019c02:	f7ff fe60 	bl	80198c6 <LL_ADC_IsEnabled>
 8019c06:	4603      	mov	r3, r0
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	bf0c      	ite	eq
 8019c0c:	2301      	moveq	r3, #1
 8019c0e:	2300      	movne	r3, #0
 8019c10:	b2db      	uxtb	r3, r3
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d012      	beq.n	8019c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8019c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c18:	689b      	ldr	r3, [r3, #8]
 8019c1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019c1e:	f023 030f 	bic.w	r3, r3, #15
 8019c22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019c24:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019c26:	e009      	b.n	8019c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c2c:	f043 0220 	orr.w	r2, r3, #32
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019c34:	2301      	movs	r3, #1
 8019c36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8019c3a:	e000      	b.n	8019c3e <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019c3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	2200      	movs	r2, #0
 8019c42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019c46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	3784      	adds	r7, #132	; 0x84
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd90      	pop	{r4, r7, pc}
 8019c52:	bf00      	nop
 8019c54:	50000100 	.word	0x50000100
 8019c58:	50000300 	.word	0x50000300
 8019c5c:	50000700 	.word	0x50000700
 8019c60:	50000400 	.word	0x50000400

08019c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019c64:	b480      	push	{r7}
 8019c66:	b085      	sub	sp, #20
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	f003 0307 	and.w	r3, r3, #7
 8019c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019c74:	4b0c      	ldr	r3, [pc, #48]	; (8019ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8019c76:	68db      	ldr	r3, [r3, #12]
 8019c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019c7a:	68ba      	ldr	r2, [r7, #8]
 8019c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8019c80:	4013      	ands	r3, r2
 8019c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019c88:	68bb      	ldr	r3, [r7, #8]
 8019c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8019c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8019c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019c96:	4a04      	ldr	r2, [pc, #16]	; (8019ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	60d3      	str	r3, [r2, #12]
}
 8019c9c:	bf00      	nop
 8019c9e:	3714      	adds	r7, #20
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca6:	4770      	bx	lr
 8019ca8:	e000ed00 	.word	0xe000ed00

08019cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8019cac:	b480      	push	{r7}
 8019cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019cb0:	4b04      	ldr	r3, [pc, #16]	; (8019cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8019cb2:	68db      	ldr	r3, [r3, #12]
 8019cb4:	0a1b      	lsrs	r3, r3, #8
 8019cb6:	f003 0307 	and.w	r3, r3, #7
}
 8019cba:	4618      	mov	r0, r3
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc2:	4770      	bx	lr
 8019cc4:	e000ed00 	.word	0xe000ed00

08019cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019cc8:	b480      	push	{r7}
 8019cca:	b083      	sub	sp, #12
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	4603      	mov	r3, r0
 8019cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	db0b      	blt.n	8019cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019cda:	79fb      	ldrb	r3, [r7, #7]
 8019cdc:	f003 021f 	and.w	r2, r3, #31
 8019ce0:	4907      	ldr	r1, [pc, #28]	; (8019d00 <__NVIC_EnableIRQ+0x38>)
 8019ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ce6:	095b      	lsrs	r3, r3, #5
 8019ce8:	2001      	movs	r0, #1
 8019cea:	fa00 f202 	lsl.w	r2, r0, r2
 8019cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8019cf2:	bf00      	nop
 8019cf4:	370c      	adds	r7, #12
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfc:	4770      	bx	lr
 8019cfe:	bf00      	nop
 8019d00:	e000e100 	.word	0xe000e100

08019d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8019d04:	b480      	push	{r7}
 8019d06:	b083      	sub	sp, #12
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	6039      	str	r1, [r7, #0]
 8019d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	db0a      	blt.n	8019d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	b2da      	uxtb	r2, r3
 8019d1c:	490c      	ldr	r1, [pc, #48]	; (8019d50 <__NVIC_SetPriority+0x4c>)
 8019d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019d22:	0112      	lsls	r2, r2, #4
 8019d24:	b2d2      	uxtb	r2, r2
 8019d26:	440b      	add	r3, r1
 8019d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8019d2c:	e00a      	b.n	8019d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	b2da      	uxtb	r2, r3
 8019d32:	4908      	ldr	r1, [pc, #32]	; (8019d54 <__NVIC_SetPriority+0x50>)
 8019d34:	79fb      	ldrb	r3, [r7, #7]
 8019d36:	f003 030f 	and.w	r3, r3, #15
 8019d3a:	3b04      	subs	r3, #4
 8019d3c:	0112      	lsls	r2, r2, #4
 8019d3e:	b2d2      	uxtb	r2, r2
 8019d40:	440b      	add	r3, r1
 8019d42:	761a      	strb	r2, [r3, #24]
}
 8019d44:	bf00      	nop
 8019d46:	370c      	adds	r7, #12
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4e:	4770      	bx	lr
 8019d50:	e000e100 	.word	0xe000e100
 8019d54:	e000ed00 	.word	0xe000ed00

08019d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019d58:	b480      	push	{r7}
 8019d5a:	b089      	sub	sp, #36	; 0x24
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	60f8      	str	r0, [r7, #12]
 8019d60:	60b9      	str	r1, [r7, #8]
 8019d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	f003 0307 	and.w	r3, r3, #7
 8019d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019d6c:	69fb      	ldr	r3, [r7, #28]
 8019d6e:	f1c3 0307 	rsb	r3, r3, #7
 8019d72:	2b04      	cmp	r3, #4
 8019d74:	bf28      	it	cs
 8019d76:	2304      	movcs	r3, #4
 8019d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019d7a:	69fb      	ldr	r3, [r7, #28]
 8019d7c:	3304      	adds	r3, #4
 8019d7e:	2b06      	cmp	r3, #6
 8019d80:	d902      	bls.n	8019d88 <NVIC_EncodePriority+0x30>
 8019d82:	69fb      	ldr	r3, [r7, #28]
 8019d84:	3b03      	subs	r3, #3
 8019d86:	e000      	b.n	8019d8a <NVIC_EncodePriority+0x32>
 8019d88:	2300      	movs	r3, #0
 8019d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8019d90:	69bb      	ldr	r3, [r7, #24]
 8019d92:	fa02 f303 	lsl.w	r3, r2, r3
 8019d96:	43da      	mvns	r2, r3
 8019d98:	68bb      	ldr	r3, [r7, #8]
 8019d9a:	401a      	ands	r2, r3
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019da0:	f04f 31ff 	mov.w	r1, #4294967295
 8019da4:	697b      	ldr	r3, [r7, #20]
 8019da6:	fa01 f303 	lsl.w	r3, r1, r3
 8019daa:	43d9      	mvns	r1, r3
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019db0:	4313      	orrs	r3, r2
         );
}
 8019db2:	4618      	mov	r0, r3
 8019db4:	3724      	adds	r7, #36	; 0x24
 8019db6:	46bd      	mov	sp, r7
 8019db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dbc:	4770      	bx	lr
	...

08019dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	3b01      	subs	r3, #1
 8019dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019dd0:	d301      	bcc.n	8019dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019dd2:	2301      	movs	r3, #1
 8019dd4:	e00f      	b.n	8019df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019dd6:	4a0a      	ldr	r2, [pc, #40]	; (8019e00 <SysTick_Config+0x40>)
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	3b01      	subs	r3, #1
 8019ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019dde:	210f      	movs	r1, #15
 8019de0:	f04f 30ff 	mov.w	r0, #4294967295
 8019de4:	f7ff ff8e 	bl	8019d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019de8:	4b05      	ldr	r3, [pc, #20]	; (8019e00 <SysTick_Config+0x40>)
 8019dea:	2200      	movs	r2, #0
 8019dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019dee:	4b04      	ldr	r3, [pc, #16]	; (8019e00 <SysTick_Config+0x40>)
 8019df0:	2207      	movs	r2, #7
 8019df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019df4:	2300      	movs	r3, #0
}
 8019df6:	4618      	mov	r0, r3
 8019df8:	3708      	adds	r7, #8
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
 8019dfe:	bf00      	nop
 8019e00:	e000e010 	.word	0xe000e010

08019e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b082      	sub	sp, #8
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	f7ff ff29 	bl	8019c64 <__NVIC_SetPriorityGrouping>
}
 8019e12:	bf00      	nop
 8019e14:	3708      	adds	r7, #8
 8019e16:	46bd      	mov	sp, r7
 8019e18:	bd80      	pop	{r7, pc}

08019e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019e1a:	b580      	push	{r7, lr}
 8019e1c:	b086      	sub	sp, #24
 8019e1e:	af00      	add	r7, sp, #0
 8019e20:	4603      	mov	r3, r0
 8019e22:	60b9      	str	r1, [r7, #8]
 8019e24:	607a      	str	r2, [r7, #4]
 8019e26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019e28:	f7ff ff40 	bl	8019cac <__NVIC_GetPriorityGrouping>
 8019e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019e2e:	687a      	ldr	r2, [r7, #4]
 8019e30:	68b9      	ldr	r1, [r7, #8]
 8019e32:	6978      	ldr	r0, [r7, #20]
 8019e34:	f7ff ff90 	bl	8019d58 <NVIC_EncodePriority>
 8019e38:	4602      	mov	r2, r0
 8019e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e3e:	4611      	mov	r1, r2
 8019e40:	4618      	mov	r0, r3
 8019e42:	f7ff ff5f 	bl	8019d04 <__NVIC_SetPriority>
}
 8019e46:	bf00      	nop
 8019e48:	3718      	adds	r7, #24
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	bd80      	pop	{r7, pc}

08019e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019e4e:	b580      	push	{r7, lr}
 8019e50:	b082      	sub	sp, #8
 8019e52:	af00      	add	r7, sp, #0
 8019e54:	4603      	mov	r3, r0
 8019e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	f7ff ff33 	bl	8019cc8 <__NVIC_EnableIRQ>
}
 8019e62:	bf00      	nop
 8019e64:	3708      	adds	r7, #8
 8019e66:	46bd      	mov	sp, r7
 8019e68:	bd80      	pop	{r7, pc}

08019e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019e6a:	b580      	push	{r7, lr}
 8019e6c:	b082      	sub	sp, #8
 8019e6e:	af00      	add	r7, sp, #0
 8019e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019e72:	6878      	ldr	r0, [r7, #4]
 8019e74:	f7ff ffa4 	bl	8019dc0 <SysTick_Config>
 8019e78:	4603      	mov	r3, r0
}
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	3708      	adds	r7, #8
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	bd80      	pop	{r7, pc}
	...

08019e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b084      	sub	sp, #16
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d101      	bne.n	8019e96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8019e92:	2301      	movs	r3, #1
 8019e94:	e08d      	b.n	8019fb2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	461a      	mov	r2, r3
 8019e9c:	4b47      	ldr	r3, [pc, #284]	; (8019fbc <HAL_DMA_Init+0x138>)
 8019e9e:	429a      	cmp	r2, r3
 8019ea0:	d80f      	bhi.n	8019ec2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	461a      	mov	r2, r3
 8019ea8:	4b45      	ldr	r3, [pc, #276]	; (8019fc0 <HAL_DMA_Init+0x13c>)
 8019eaa:	4413      	add	r3, r2
 8019eac:	4a45      	ldr	r2, [pc, #276]	; (8019fc4 <HAL_DMA_Init+0x140>)
 8019eae:	fba2 2303 	umull	r2, r3, r2, r3
 8019eb2:	091b      	lsrs	r3, r3, #4
 8019eb4:	009a      	lsls	r2, r3, #2
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	4a42      	ldr	r2, [pc, #264]	; (8019fc8 <HAL_DMA_Init+0x144>)
 8019ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8019ec0:	e00e      	b.n	8019ee0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	461a      	mov	r2, r3
 8019ec8:	4b40      	ldr	r3, [pc, #256]	; (8019fcc <HAL_DMA_Init+0x148>)
 8019eca:	4413      	add	r3, r2
 8019ecc:	4a3d      	ldr	r2, [pc, #244]	; (8019fc4 <HAL_DMA_Init+0x140>)
 8019ece:	fba2 2303 	umull	r2, r3, r2, r3
 8019ed2:	091b      	lsrs	r3, r3, #4
 8019ed4:	009a      	lsls	r2, r3, #2
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	4a3c      	ldr	r2, [pc, #240]	; (8019fd0 <HAL_DMA_Init+0x14c>)
 8019ede:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	2202      	movs	r2, #2
 8019ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8019ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019efa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8019f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	691b      	ldr	r3, [r3, #16]
 8019f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	699b      	ldr	r3, [r3, #24]
 8019f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	6a1b      	ldr	r3, [r3, #32]
 8019f22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8019f24:	68fa      	ldr	r2, [r7, #12]
 8019f26:	4313      	orrs	r3, r2
 8019f28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	68fa      	ldr	r2, [r7, #12]
 8019f30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8019f32:	6878      	ldr	r0, [r7, #4]
 8019f34:	f000 fa10 	bl	801a358 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	689b      	ldr	r3, [r3, #8]
 8019f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019f40:	d102      	bne.n	8019f48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	2200      	movs	r2, #0
 8019f46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	685a      	ldr	r2, [r3, #4]
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019f50:	b2d2      	uxtb	r2, r2
 8019f52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f58:	687a      	ldr	r2, [r7, #4]
 8019f5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019f5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	685b      	ldr	r3, [r3, #4]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d010      	beq.n	8019f88 <HAL_DMA_Init+0x104>
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	685b      	ldr	r3, [r3, #4]
 8019f6a:	2b04      	cmp	r3, #4
 8019f6c:	d80c      	bhi.n	8019f88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8019f6e:	6878      	ldr	r0, [r7, #4]
 8019f70:	f000 fa30 	bl	801a3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019f78:	2200      	movs	r2, #0
 8019f7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f80:	687a      	ldr	r2, [r7, #4]
 8019f82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8019f84:	605a      	str	r2, [r3, #4]
 8019f86:	e008      	b.n	8019f9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	2200      	movs	r2, #0
 8019f8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	2200      	movs	r2, #0
 8019f92:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	2200      	movs	r2, #0
 8019f98:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2201      	movs	r2, #1
 8019fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	2200      	movs	r2, #0
 8019fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8019fb0:	2300      	movs	r3, #0
}
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	3710      	adds	r7, #16
 8019fb6:	46bd      	mov	sp, r7
 8019fb8:	bd80      	pop	{r7, pc}
 8019fba:	bf00      	nop
 8019fbc:	40020407 	.word	0x40020407
 8019fc0:	bffdfff8 	.word	0xbffdfff8
 8019fc4:	cccccccd 	.word	0xcccccccd
 8019fc8:	40020000 	.word	0x40020000
 8019fcc:	bffdfbf8 	.word	0xbffdfbf8
 8019fd0:	40020400 	.word	0x40020400

08019fd4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b086      	sub	sp, #24
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	60f8      	str	r0, [r7, #12]
 8019fdc:	60b9      	str	r1, [r7, #8]
 8019fde:	607a      	str	r2, [r7, #4]
 8019fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019fec:	2b01      	cmp	r3, #1
 8019fee:	d101      	bne.n	8019ff4 <HAL_DMA_Start_IT+0x20>
 8019ff0:	2302      	movs	r3, #2
 8019ff2:	e066      	b.n	801a0c2 <HAL_DMA_Start_IT+0xee>
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	2201      	movs	r2, #1
 8019ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a002:	b2db      	uxtb	r3, r3
 801a004:	2b01      	cmp	r3, #1
 801a006:	d155      	bne.n	801a0b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	2202      	movs	r2, #2
 801a00c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	2200      	movs	r2, #0
 801a014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	681a      	ldr	r2, [r3, #0]
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	f022 0201 	bic.w	r2, r2, #1
 801a024:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	687a      	ldr	r2, [r7, #4]
 801a02a:	68b9      	ldr	r1, [r7, #8]
 801a02c:	68f8      	ldr	r0, [r7, #12]
 801a02e:	f000 f954 	bl	801a2da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a036:	2b00      	cmp	r3, #0
 801a038:	d008      	beq.n	801a04c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	681a      	ldr	r2, [r3, #0]
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	f042 020e 	orr.w	r2, r2, #14
 801a048:	601a      	str	r2, [r3, #0]
 801a04a:	e00f      	b.n	801a06c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	681a      	ldr	r2, [r3, #0]
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	f022 0204 	bic.w	r2, r2, #4
 801a05a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	681a      	ldr	r2, [r3, #0]
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	f042 020a 	orr.w	r2, r2, #10
 801a06a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a076:	2b00      	cmp	r3, #0
 801a078:	d007      	beq.n	801a08a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a07e:	681a      	ldr	r2, [r3, #0]
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a088:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d007      	beq.n	801a0a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a096:	681a      	ldr	r2, [r3, #0]
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a09c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a0a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	681a      	ldr	r2, [r3, #0]
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	f042 0201 	orr.w	r2, r2, #1
 801a0b0:	601a      	str	r2, [r3, #0]
 801a0b2:	e005      	b.n	801a0c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801a0bc:	2302      	movs	r3, #2
 801a0be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801a0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	3718      	adds	r7, #24
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bd80      	pop	{r7, pc}

0801a0ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a0ca:	b480      	push	{r7}
 801a0cc:	b085      	sub	sp, #20
 801a0ce:	af00      	add	r7, sp, #0
 801a0d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a0dc:	b2db      	uxtb	r3, r3
 801a0de:	2b02      	cmp	r3, #2
 801a0e0:	d005      	beq.n	801a0ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	2204      	movs	r2, #4
 801a0e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801a0e8:	2301      	movs	r3, #1
 801a0ea:	73fb      	strb	r3, [r7, #15]
 801a0ec:	e037      	b.n	801a15e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	681a      	ldr	r2, [r3, #0]
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	f022 020e 	bic.w	r2, r2, #14
 801a0fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a102:	681a      	ldr	r2, [r3, #0]
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a10c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	681a      	ldr	r2, [r3, #0]
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	f022 0201 	bic.w	r2, r2, #1
 801a11c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a122:	f003 021f 	and.w	r2, r3, #31
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a12a:	2101      	movs	r1, #1
 801a12c:	fa01 f202 	lsl.w	r2, r1, r2
 801a130:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a136:	687a      	ldr	r2, [r7, #4]
 801a138:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a13a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a140:	2b00      	cmp	r3, #0
 801a142:	d00c      	beq.n	801a15e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a148:	681a      	ldr	r2, [r3, #0]
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a14e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a152:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a158:	687a      	ldr	r2, [r7, #4]
 801a15a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a15c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	2201      	movs	r2, #1
 801a162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2200      	movs	r2, #0
 801a16a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801a16e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a170:	4618      	mov	r0, r3
 801a172:	3714      	adds	r7, #20
 801a174:	46bd      	mov	sp, r7
 801a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17a:	4770      	bx	lr

0801a17c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b084      	sub	sp, #16
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a198:	f003 031f 	and.w	r3, r3, #31
 801a19c:	2204      	movs	r2, #4
 801a19e:	409a      	lsls	r2, r3
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	4013      	ands	r3, r2
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d026      	beq.n	801a1f6 <HAL_DMA_IRQHandler+0x7a>
 801a1a8:	68bb      	ldr	r3, [r7, #8]
 801a1aa:	f003 0304 	and.w	r3, r3, #4
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d021      	beq.n	801a1f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	f003 0320 	and.w	r3, r3, #32
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d107      	bne.n	801a1d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	681a      	ldr	r2, [r3, #0]
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	f022 0204 	bic.w	r2, r2, #4
 801a1ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1d4:	f003 021f 	and.w	r2, r3, #31
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1dc:	2104      	movs	r1, #4
 801a1de:	fa01 f202 	lsl.w	r2, r1, r2
 801a1e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d071      	beq.n	801a2d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1f0:	6878      	ldr	r0, [r7, #4]
 801a1f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801a1f4:	e06c      	b.n	801a2d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1fa:	f003 031f 	and.w	r3, r3, #31
 801a1fe:	2202      	movs	r2, #2
 801a200:	409a      	lsls	r2, r3
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	4013      	ands	r3, r2
 801a206:	2b00      	cmp	r3, #0
 801a208:	d02e      	beq.n	801a268 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	f003 0302 	and.w	r3, r3, #2
 801a210:	2b00      	cmp	r3, #0
 801a212:	d029      	beq.n	801a268 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	f003 0320 	and.w	r3, r3, #32
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d10b      	bne.n	801a23a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	681a      	ldr	r2, [r3, #0]
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	f022 020a 	bic.w	r2, r2, #10
 801a230:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2201      	movs	r2, #1
 801a236:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a23e:	f003 021f 	and.w	r2, r3, #31
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a246:	2102      	movs	r1, #2
 801a248:	fa01 f202 	lsl.w	r2, r1, r2
 801a24c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	2200      	movs	r2, #0
 801a252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d038      	beq.n	801a2d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a262:	6878      	ldr	r0, [r7, #4]
 801a264:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801a266:	e033      	b.n	801a2d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a26c:	f003 031f 	and.w	r3, r3, #31
 801a270:	2208      	movs	r2, #8
 801a272:	409a      	lsls	r2, r3
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	4013      	ands	r3, r2
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d02a      	beq.n	801a2d2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801a27c:	68bb      	ldr	r3, [r7, #8]
 801a27e:	f003 0308 	and.w	r3, r3, #8
 801a282:	2b00      	cmp	r3, #0
 801a284:	d025      	beq.n	801a2d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	681a      	ldr	r2, [r3, #0]
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	f022 020e 	bic.w	r2, r2, #14
 801a294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a29a:	f003 021f 	and.w	r2, r3, #31
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2a2:	2101      	movs	r1, #1
 801a2a4:	fa01 f202 	lsl.w	r2, r1, r2
 801a2a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	2201      	movs	r2, #1
 801a2ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	2201      	movs	r2, #1
 801a2b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d004      	beq.n	801a2d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2cc:	6878      	ldr	r0, [r7, #4]
 801a2ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801a2d0:	bf00      	nop
 801a2d2:	bf00      	nop
}
 801a2d4:	3710      	adds	r7, #16
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	bd80      	pop	{r7, pc}

0801a2da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801a2da:	b480      	push	{r7}
 801a2dc:	b085      	sub	sp, #20
 801a2de:	af00      	add	r7, sp, #0
 801a2e0:	60f8      	str	r0, [r7, #12]
 801a2e2:	60b9      	str	r1, [r7, #8]
 801a2e4:	607a      	str	r2, [r7, #4]
 801a2e6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a2ec:	68fa      	ldr	r2, [r7, #12]
 801a2ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a2f0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d004      	beq.n	801a304 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2fe:	68fa      	ldr	r2, [r7, #12]
 801a300:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a302:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a308:	f003 021f 	and.w	r2, r3, #31
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a310:	2101      	movs	r1, #1
 801a312:	fa01 f202 	lsl.w	r2, r1, r2
 801a316:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	683a      	ldr	r2, [r7, #0]
 801a31e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	689b      	ldr	r3, [r3, #8]
 801a324:	2b10      	cmp	r3, #16
 801a326:	d108      	bne.n	801a33a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	687a      	ldr	r2, [r7, #4]
 801a32e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	68ba      	ldr	r2, [r7, #8]
 801a336:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801a338:	e007      	b.n	801a34a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	68ba      	ldr	r2, [r7, #8]
 801a340:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	687a      	ldr	r2, [r7, #4]
 801a348:	60da      	str	r2, [r3, #12]
}
 801a34a:	bf00      	nop
 801a34c:	3714      	adds	r7, #20
 801a34e:	46bd      	mov	sp, r7
 801a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a354:	4770      	bx	lr
	...

0801a358 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a358:	b480      	push	{r7}
 801a35a:	b087      	sub	sp, #28
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	461a      	mov	r2, r3
 801a366:	4b16      	ldr	r3, [pc, #88]	; (801a3c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801a368:	429a      	cmp	r2, r3
 801a36a:	d802      	bhi.n	801a372 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801a36c:	4b15      	ldr	r3, [pc, #84]	; (801a3c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801a36e:	617b      	str	r3, [r7, #20]
 801a370:	e001      	b.n	801a376 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801a372:	4b15      	ldr	r3, [pc, #84]	; (801a3c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801a374:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801a376:	697b      	ldr	r3, [r7, #20]
 801a378:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	b2db      	uxtb	r3, r3
 801a380:	3b08      	subs	r3, #8
 801a382:	4a12      	ldr	r2, [pc, #72]	; (801a3cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801a384:	fba2 2303 	umull	r2, r3, r2, r3
 801a388:	091b      	lsrs	r3, r3, #4
 801a38a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a390:	089b      	lsrs	r3, r3, #2
 801a392:	009a      	lsls	r2, r3, #2
 801a394:	693b      	ldr	r3, [r7, #16]
 801a396:	4413      	add	r3, r2
 801a398:	461a      	mov	r2, r3
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	4a0b      	ldr	r2, [pc, #44]	; (801a3d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801a3a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	f003 031f 	and.w	r3, r3, #31
 801a3aa:	2201      	movs	r2, #1
 801a3ac:	409a      	lsls	r2, r3
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 801a3b2:	bf00      	nop
 801a3b4:	371c      	adds	r7, #28
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3bc:	4770      	bx	lr
 801a3be:	bf00      	nop
 801a3c0:	40020407 	.word	0x40020407
 801a3c4:	40020800 	.word	0x40020800
 801a3c8:	40020820 	.word	0x40020820
 801a3cc:	cccccccd 	.word	0xcccccccd
 801a3d0:	40020880 	.word	0x40020880

0801a3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a3d4:	b480      	push	{r7}
 801a3d6:	b085      	sub	sp, #20
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	685b      	ldr	r3, [r3, #4]
 801a3e0:	b2db      	uxtb	r3, r3
 801a3e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801a3e4:	68fa      	ldr	r2, [r7, #12]
 801a3e6:	4b0b      	ldr	r3, [pc, #44]	; (801a414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801a3e8:	4413      	add	r3, r2
 801a3ea:	009b      	lsls	r3, r3, #2
 801a3ec:	461a      	mov	r2, r3
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	4a08      	ldr	r2, [pc, #32]	; (801a418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801a3f6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	3b01      	subs	r3, #1
 801a3fc:	f003 031f 	and.w	r3, r3, #31
 801a400:	2201      	movs	r2, #1
 801a402:	409a      	lsls	r2, r3
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801a408:	bf00      	nop
 801a40a:	3714      	adds	r7, #20
 801a40c:	46bd      	mov	sp, r7
 801a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a412:	4770      	bx	lr
 801a414:	1000823f 	.word	0x1000823f
 801a418:	40020940 	.word	0x40020940

0801a41c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b086      	sub	sp, #24
 801a420:	af00      	add	r7, sp, #0
 801a422:	60f8      	str	r0, [r7, #12]
 801a424:	60b9      	str	r1, [r7, #8]
 801a426:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801a42a:	2300      	movs	r3, #0
 801a42c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a42e:	4b24      	ldr	r3, [pc, #144]	; (801a4c0 <HAL_FLASH_Program+0xa4>)
 801a430:	781b      	ldrb	r3, [r3, #0]
 801a432:	2b01      	cmp	r3, #1
 801a434:	d101      	bne.n	801a43a <HAL_FLASH_Program+0x1e>
 801a436:	2302      	movs	r3, #2
 801a438:	e03e      	b.n	801a4b8 <HAL_FLASH_Program+0x9c>
 801a43a:	4b21      	ldr	r3, [pc, #132]	; (801a4c0 <HAL_FLASH_Program+0xa4>)
 801a43c:	2201      	movs	r2, #1
 801a43e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a444:	f000 f87c 	bl	801a540 <FLASH_WaitForLastOperation>
 801a448:	4603      	mov	r3, r0
 801a44a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801a44c:	7dfb      	ldrb	r3, [r7, #23]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d12e      	bne.n	801a4b0 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a452:	4b1b      	ldr	r3, [pc, #108]	; (801a4c0 <HAL_FLASH_Program+0xa4>)
 801a454:	2200      	movs	r2, #0
 801a456:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d107      	bne.n	801a46e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801a45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a462:	68b8      	ldr	r0, [r7, #8]
 801a464:	f000 f8c0 	bl	801a5e8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801a468:	2301      	movs	r3, #1
 801a46a:	613b      	str	r3, [r7, #16]
 801a46c:	e010      	b.n	801a490 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	2b01      	cmp	r3, #1
 801a472:	d002      	beq.n	801a47a <HAL_FLASH_Program+0x5e>
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	2b02      	cmp	r3, #2
 801a478:	d10a      	bne.n	801a490 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801a47a:	683b      	ldr	r3, [r7, #0]
 801a47c:	4619      	mov	r1, r3
 801a47e:	68b8      	ldr	r0, [r7, #8]
 801a480:	f000 f8d8 	bl	801a634 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	2b02      	cmp	r3, #2
 801a488:	d102      	bne.n	801a490 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801a48a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a48e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a494:	f000 f854 	bl	801a540 <FLASH_WaitForLastOperation>
 801a498:	4603      	mov	r3, r0
 801a49a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801a49c:	693b      	ldr	r3, [r7, #16]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d006      	beq.n	801a4b0 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801a4a2:	4b08      	ldr	r3, [pc, #32]	; (801a4c4 <HAL_FLASH_Program+0xa8>)
 801a4a4:	695a      	ldr	r2, [r3, #20]
 801a4a6:	693b      	ldr	r3, [r7, #16]
 801a4a8:	43db      	mvns	r3, r3
 801a4aa:	4906      	ldr	r1, [pc, #24]	; (801a4c4 <HAL_FLASH_Program+0xa8>)
 801a4ac:	4013      	ands	r3, r2
 801a4ae:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a4b0:	4b03      	ldr	r3, [pc, #12]	; (801a4c0 <HAL_FLASH_Program+0xa4>)
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801a4b6:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	3718      	adds	r7, #24
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bd80      	pop	{r7, pc}
 801a4c0:	2000000c 	.word	0x2000000c
 801a4c4:	40022000 	.word	0x40022000

0801a4c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801a4c8:	b480      	push	{r7}
 801a4ca:	b083      	sub	sp, #12
 801a4cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a4d2:	4b0b      	ldr	r3, [pc, #44]	; (801a500 <HAL_FLASH_Unlock+0x38>)
 801a4d4:	695b      	ldr	r3, [r3, #20]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	da0b      	bge.n	801a4f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801a4da:	4b09      	ldr	r3, [pc, #36]	; (801a500 <HAL_FLASH_Unlock+0x38>)
 801a4dc:	4a09      	ldr	r2, [pc, #36]	; (801a504 <HAL_FLASH_Unlock+0x3c>)
 801a4de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801a4e0:	4b07      	ldr	r3, [pc, #28]	; (801a500 <HAL_FLASH_Unlock+0x38>)
 801a4e2:	4a09      	ldr	r2, [pc, #36]	; (801a508 <HAL_FLASH_Unlock+0x40>)
 801a4e4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a4e6:	4b06      	ldr	r3, [pc, #24]	; (801a500 <HAL_FLASH_Unlock+0x38>)
 801a4e8:	695b      	ldr	r3, [r3, #20]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	da01      	bge.n	801a4f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801a4f2:	79fb      	ldrb	r3, [r7, #7]
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	370c      	adds	r7, #12
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4fe:	4770      	bx	lr
 801a500:	40022000 	.word	0x40022000
 801a504:	45670123 	.word	0x45670123
 801a508:	cdef89ab 	.word	0xcdef89ab

0801a50c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801a50c:	b480      	push	{r7}
 801a50e:	b083      	sub	sp, #12
 801a510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801a512:	2301      	movs	r3, #1
 801a514:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801a516:	4b09      	ldr	r3, [pc, #36]	; (801a53c <HAL_FLASH_Lock+0x30>)
 801a518:	695b      	ldr	r3, [r3, #20]
 801a51a:	4a08      	ldr	r2, [pc, #32]	; (801a53c <HAL_FLASH_Lock+0x30>)
 801a51c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801a520:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a522:	4b06      	ldr	r3, [pc, #24]	; (801a53c <HAL_FLASH_Lock+0x30>)
 801a524:	695b      	ldr	r3, [r3, #20]
 801a526:	2b00      	cmp	r3, #0
 801a528:	da01      	bge.n	801a52e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801a52a:	2300      	movs	r3, #0
 801a52c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801a52e:	79fb      	ldrb	r3, [r7, #7]
}
 801a530:	4618      	mov	r0, r3
 801a532:	370c      	adds	r7, #12
 801a534:	46bd      	mov	sp, r7
 801a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a53a:	4770      	bx	lr
 801a53c:	40022000 	.word	0x40022000

0801a540 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801a540:	b580      	push	{r7, lr}
 801a542:	b084      	sub	sp, #16
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801a548:	f7fd f98a 	bl	8017860 <HAL_GetTick>
 801a54c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a54e:	e009      	b.n	801a564 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801a550:	f7fd f986 	bl	8017860 <HAL_GetTick>
 801a554:	4602      	mov	r2, r0
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	1ad3      	subs	r3, r2, r3
 801a55a:	687a      	ldr	r2, [r7, #4]
 801a55c:	429a      	cmp	r2, r3
 801a55e:	d201      	bcs.n	801a564 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801a560:	2303      	movs	r3, #3
 801a562:	e038      	b.n	801a5d6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a564:	4b1e      	ldr	r3, [pc, #120]	; (801a5e0 <FLASH_WaitForLastOperation+0xa0>)
 801a566:	691b      	ldr	r3, [r3, #16]
 801a568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a56c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a570:	d0ee      	beq.n	801a550 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801a572:	4b1b      	ldr	r3, [pc, #108]	; (801a5e0 <FLASH_WaitForLastOperation+0xa0>)
 801a574:	691a      	ldr	r2, [r3, #16]
 801a576:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801a57a:	4013      	ands	r3, r2
 801a57c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801a57e:	68bb      	ldr	r3, [r7, #8]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d01e      	beq.n	801a5c2 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801a584:	4b17      	ldr	r3, [pc, #92]	; (801a5e4 <FLASH_WaitForLastOperation+0xa4>)
 801a586:	685a      	ldr	r2, [r3, #4]
 801a588:	68bb      	ldr	r3, [r7, #8]
 801a58a:	4313      	orrs	r3, r2
 801a58c:	4a15      	ldr	r2, [pc, #84]	; (801a5e4 <FLASH_WaitForLastOperation+0xa4>)
 801a58e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a596:	2b00      	cmp	r3, #0
 801a598:	d007      	beq.n	801a5aa <FLASH_WaitForLastOperation+0x6a>
 801a59a:	4b11      	ldr	r3, [pc, #68]	; (801a5e0 <FLASH_WaitForLastOperation+0xa0>)
 801a59c:	699a      	ldr	r2, [r3, #24]
 801a59e:	68bb      	ldr	r3, [r7, #8]
 801a5a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a5a4:	490e      	ldr	r1, [pc, #56]	; (801a5e0 <FLASH_WaitForLastOperation+0xa0>)
 801a5a6:	4313      	orrs	r3, r2
 801a5a8:	618b      	str	r3, [r1, #24]
 801a5aa:	68bb      	ldr	r3, [r7, #8]
 801a5ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d004      	beq.n	801a5be <FLASH_WaitForLastOperation+0x7e>
 801a5b4:	4a0a      	ldr	r2, [pc, #40]	; (801a5e0 <FLASH_WaitForLastOperation+0xa0>)
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a5bc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801a5be:	2301      	movs	r3, #1
 801a5c0:	e009      	b.n	801a5d6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801a5c2:	4b07      	ldr	r3, [pc, #28]	; (801a5e0 <FLASH_WaitForLastOperation+0xa0>)
 801a5c4:	691b      	ldr	r3, [r3, #16]
 801a5c6:	f003 0301 	and.w	r3, r3, #1
 801a5ca:	2b01      	cmp	r3, #1
 801a5cc:	d102      	bne.n	801a5d4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801a5ce:	4b04      	ldr	r3, [pc, #16]	; (801a5e0 <FLASH_WaitForLastOperation+0xa0>)
 801a5d0:	2201      	movs	r2, #1
 801a5d2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801a5d4:	2300      	movs	r3, #0
}
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	3710      	adds	r7, #16
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	bd80      	pop	{r7, pc}
 801a5de:	bf00      	nop
 801a5e0:	40022000 	.word	0x40022000
 801a5e4:	2000000c 	.word	0x2000000c

0801a5e8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801a5e8:	b480      	push	{r7}
 801a5ea:	b085      	sub	sp, #20
 801a5ec:	af00      	add	r7, sp, #0
 801a5ee:	60f8      	str	r0, [r7, #12]
 801a5f0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801a5f4:	4b0e      	ldr	r3, [pc, #56]	; (801a630 <FLASH_Program_DoubleWord+0x48>)
 801a5f6:	695b      	ldr	r3, [r3, #20]
 801a5f8:	4a0d      	ldr	r2, [pc, #52]	; (801a630 <FLASH_Program_DoubleWord+0x48>)
 801a5fa:	f043 0301 	orr.w	r3, r3, #1
 801a5fe:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	683a      	ldr	r2, [r7, #0]
 801a604:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801a606:	f3bf 8f6f 	isb	sy
}
 801a60a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801a60c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a610:	f04f 0200 	mov.w	r2, #0
 801a614:	f04f 0300 	mov.w	r3, #0
 801a618:	000a      	movs	r2, r1
 801a61a:	2300      	movs	r3, #0
 801a61c:	68f9      	ldr	r1, [r7, #12]
 801a61e:	3104      	adds	r1, #4
 801a620:	4613      	mov	r3, r2
 801a622:	600b      	str	r3, [r1, #0]
}
 801a624:	bf00      	nop
 801a626:	3714      	adds	r7, #20
 801a628:	46bd      	mov	sp, r7
 801a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a62e:	4770      	bx	lr
 801a630:	40022000 	.word	0x40022000

0801a634 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801a634:	b480      	push	{r7}
 801a636:	b089      	sub	sp, #36	; 0x24
 801a638:	af00      	add	r7, sp, #0
 801a63a:	6078      	str	r0, [r7, #4]
 801a63c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801a63e:	2340      	movs	r3, #64	; 0x40
 801a640:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801a646:	683b      	ldr	r3, [r7, #0]
 801a648:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801a64a:	4b14      	ldr	r3, [pc, #80]	; (801a69c <FLASH_Program_Fast+0x68>)
 801a64c:	695b      	ldr	r3, [r3, #20]
 801a64e:	4a13      	ldr	r2, [pc, #76]	; (801a69c <FLASH_Program_Fast+0x68>)
 801a650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a654:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a656:	f3ef 8310 	mrs	r3, PRIMASK
 801a65a:	60fb      	str	r3, [r7, #12]
  return(result);
 801a65c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801a65e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a660:	b672      	cpsid	i
}
 801a662:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801a664:	697b      	ldr	r3, [r7, #20]
 801a666:	681a      	ldr	r2, [r3, #0]
 801a668:	69bb      	ldr	r3, [r7, #24]
 801a66a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801a66c:	69bb      	ldr	r3, [r7, #24]
 801a66e:	3304      	adds	r3, #4
 801a670:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801a672:	697b      	ldr	r3, [r7, #20]
 801a674:	3304      	adds	r3, #4
 801a676:	617b      	str	r3, [r7, #20]
    row_index--;
 801a678:	7ffb      	ldrb	r3, [r7, #31]
 801a67a:	3b01      	subs	r3, #1
 801a67c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801a67e:	7ffb      	ldrb	r3, [r7, #31]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d1ef      	bne.n	801a664 <FLASH_Program_Fast+0x30>
 801a684:	693b      	ldr	r3, [r7, #16]
 801a686:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a688:	68bb      	ldr	r3, [r7, #8]
 801a68a:	f383 8810 	msr	PRIMASK, r3
}
 801a68e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801a690:	bf00      	nop
 801a692:	3724      	adds	r7, #36	; 0x24
 801a694:	46bd      	mov	sp, r7
 801a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a69a:	4770      	bx	lr
 801a69c:	40022000 	.word	0x40022000

0801a6a0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b084      	sub	sp, #16
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	6078      	str	r0, [r7, #4]
 801a6a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a6aa:	4b48      	ldr	r3, [pc, #288]	; (801a7cc <HAL_FLASHEx_Erase+0x12c>)
 801a6ac:	781b      	ldrb	r3, [r3, #0]
 801a6ae:	2b01      	cmp	r3, #1
 801a6b0:	d101      	bne.n	801a6b6 <HAL_FLASHEx_Erase+0x16>
 801a6b2:	2302      	movs	r3, #2
 801a6b4:	e085      	b.n	801a7c2 <HAL_FLASHEx_Erase+0x122>
 801a6b6:	4b45      	ldr	r3, [pc, #276]	; (801a7cc <HAL_FLASHEx_Erase+0x12c>)
 801a6b8:	2201      	movs	r2, #1
 801a6ba:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a6bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a6c0:	f7ff ff3e 	bl	801a540 <FLASH_WaitForLastOperation>
 801a6c4:	4603      	mov	r3, r0
 801a6c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801a6c8:	7bfb      	ldrb	r3, [r7, #15]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d175      	bne.n	801a7ba <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a6ce:	4b3f      	ldr	r3, [pc, #252]	; (801a7cc <HAL_FLASHEx_Erase+0x12c>)
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801a6d4:	4b3e      	ldr	r3, [pc, #248]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d013      	beq.n	801a708 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801a6e0:	4b3b      	ldr	r3, [pc, #236]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d009      	beq.n	801a700 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801a6ec:	4b38      	ldr	r3, [pc, #224]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	4a37      	ldr	r2, [pc, #220]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a6f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a6f6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801a6f8:	4b34      	ldr	r3, [pc, #208]	; (801a7cc <HAL_FLASHEx_Erase+0x12c>)
 801a6fa:	2203      	movs	r2, #3
 801a6fc:	771a      	strb	r2, [r3, #28]
 801a6fe:	e016      	b.n	801a72e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801a700:	4b32      	ldr	r3, [pc, #200]	; (801a7cc <HAL_FLASHEx_Erase+0x12c>)
 801a702:	2201      	movs	r2, #1
 801a704:	771a      	strb	r2, [r3, #28]
 801a706:	e012      	b.n	801a72e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801a708:	4b31      	ldr	r3, [pc, #196]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a710:	2b00      	cmp	r3, #0
 801a712:	d009      	beq.n	801a728 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801a714:	4b2e      	ldr	r3, [pc, #184]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	4a2d      	ldr	r2, [pc, #180]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a71a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a71e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801a720:	4b2a      	ldr	r3, [pc, #168]	; (801a7cc <HAL_FLASHEx_Erase+0x12c>)
 801a722:	2202      	movs	r2, #2
 801a724:	771a      	strb	r2, [r3, #28]
 801a726:	e002      	b.n	801a72e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801a728:	4b28      	ldr	r3, [pc, #160]	; (801a7cc <HAL_FLASHEx_Erase+0x12c>)
 801a72a:	2200      	movs	r2, #0
 801a72c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	2b01      	cmp	r3, #1
 801a734:	d111      	bne.n	801a75a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	685b      	ldr	r3, [r3, #4]
 801a73a:	4618      	mov	r0, r3
 801a73c:	f000 f84a 	bl	801a7d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a744:	f7ff fefc 	bl	801a540 <FLASH_WaitForLastOperation>
 801a748:	4603      	mov	r3, r0
 801a74a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801a74c:	4b20      	ldr	r3, [pc, #128]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a74e:	695b      	ldr	r3, [r3, #20]
 801a750:	4a1f      	ldr	r2, [pc, #124]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a752:	f023 0304 	bic.w	r3, r3, #4
 801a756:	6153      	str	r3, [r2, #20]
 801a758:	e02d      	b.n	801a7b6 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801a75a:	683b      	ldr	r3, [r7, #0]
 801a75c:	f04f 32ff 	mov.w	r2, #4294967295
 801a760:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	689b      	ldr	r3, [r3, #8]
 801a766:	60bb      	str	r3, [r7, #8]
 801a768:	e01d      	b.n	801a7a6 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	685b      	ldr	r3, [r3, #4]
 801a76e:	4619      	mov	r1, r3
 801a770:	68b8      	ldr	r0, [r7, #8]
 801a772:	f000 f84d 	bl	801a810 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a77a:	f7ff fee1 	bl	801a540 <FLASH_WaitForLastOperation>
 801a77e:	4603      	mov	r3, r0
 801a780:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801a782:	4b13      	ldr	r3, [pc, #76]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a784:	695b      	ldr	r3, [r3, #20]
 801a786:	4a12      	ldr	r2, [pc, #72]	; (801a7d0 <HAL_FLASHEx_Erase+0x130>)
 801a788:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801a78c:	f023 0302 	bic.w	r3, r3, #2
 801a790:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801a792:	7bfb      	ldrb	r3, [r7, #15]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d003      	beq.n	801a7a0 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801a798:	683b      	ldr	r3, [r7, #0]
 801a79a:	68ba      	ldr	r2, [r7, #8]
 801a79c:	601a      	str	r2, [r3, #0]
          break;
 801a79e:	e00a      	b.n	801a7b6 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	3301      	adds	r3, #1
 801a7a4:	60bb      	str	r3, [r7, #8]
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	689a      	ldr	r2, [r3, #8]
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	68db      	ldr	r3, [r3, #12]
 801a7ae:	4413      	add	r3, r2
 801a7b0:	68ba      	ldr	r2, [r7, #8]
 801a7b2:	429a      	cmp	r2, r3
 801a7b4:	d3d9      	bcc.n	801a76a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801a7b6:	f000 f84f 	bl	801a858 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a7ba:	4b04      	ldr	r3, [pc, #16]	; (801a7cc <HAL_FLASHEx_Erase+0x12c>)
 801a7bc:	2200      	movs	r2, #0
 801a7be:	701a      	strb	r2, [r3, #0]

  return status;
 801a7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	3710      	adds	r7, #16
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}
 801a7ca:	bf00      	nop
 801a7cc:	2000000c 	.word	0x2000000c
 801a7d0:	40022000 	.word	0x40022000

0801a7d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801a7d4:	b480      	push	{r7}
 801a7d6:	b083      	sub	sp, #12
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	f003 0301 	and.w	r3, r3, #1
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d005      	beq.n	801a7f2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801a7e6:	4b09      	ldr	r3, [pc, #36]	; (801a80c <FLASH_MassErase+0x38>)
 801a7e8:	695b      	ldr	r3, [r3, #20]
 801a7ea:	4a08      	ldr	r2, [pc, #32]	; (801a80c <FLASH_MassErase+0x38>)
 801a7ec:	f043 0304 	orr.w	r3, r3, #4
 801a7f0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801a7f2:	4b06      	ldr	r3, [pc, #24]	; (801a80c <FLASH_MassErase+0x38>)
 801a7f4:	695b      	ldr	r3, [r3, #20]
 801a7f6:	4a05      	ldr	r2, [pc, #20]	; (801a80c <FLASH_MassErase+0x38>)
 801a7f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a7fc:	6153      	str	r3, [r2, #20]
}
 801a7fe:	bf00      	nop
 801a800:	370c      	adds	r7, #12
 801a802:	46bd      	mov	sp, r7
 801a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a808:	4770      	bx	lr
 801a80a:	bf00      	nop
 801a80c:	40022000 	.word	0x40022000

0801a810 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801a810:	b480      	push	{r7}
 801a812:	b083      	sub	sp, #12
 801a814:	af00      	add	r7, sp, #0
 801a816:	6078      	str	r0, [r7, #4]
 801a818:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801a81a:	4b0e      	ldr	r3, [pc, #56]	; (801a854 <FLASH_PageErase+0x44>)
 801a81c:	695b      	ldr	r3, [r3, #20]
 801a81e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	00db      	lsls	r3, r3, #3
 801a826:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801a82a:	490a      	ldr	r1, [pc, #40]	; (801a854 <FLASH_PageErase+0x44>)
 801a82c:	4313      	orrs	r3, r2
 801a82e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801a830:	4b08      	ldr	r3, [pc, #32]	; (801a854 <FLASH_PageErase+0x44>)
 801a832:	695b      	ldr	r3, [r3, #20]
 801a834:	4a07      	ldr	r2, [pc, #28]	; (801a854 <FLASH_PageErase+0x44>)
 801a836:	f043 0302 	orr.w	r3, r3, #2
 801a83a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801a83c:	4b05      	ldr	r3, [pc, #20]	; (801a854 <FLASH_PageErase+0x44>)
 801a83e:	695b      	ldr	r3, [r3, #20]
 801a840:	4a04      	ldr	r2, [pc, #16]	; (801a854 <FLASH_PageErase+0x44>)
 801a842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a846:	6153      	str	r3, [r2, #20]
}
 801a848:	bf00      	nop
 801a84a:	370c      	adds	r7, #12
 801a84c:	46bd      	mov	sp, r7
 801a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a852:	4770      	bx	lr
 801a854:	40022000 	.word	0x40022000

0801a858 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801a858:	b480      	push	{r7}
 801a85a:	b083      	sub	sp, #12
 801a85c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801a85e:	4b21      	ldr	r3, [pc, #132]	; (801a8e4 <FLASH_FlushCaches+0x8c>)
 801a860:	7f1b      	ldrb	r3, [r3, #28]
 801a862:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801a864:	79fb      	ldrb	r3, [r7, #7]
 801a866:	2b01      	cmp	r3, #1
 801a868:	d002      	beq.n	801a870 <FLASH_FlushCaches+0x18>
 801a86a:	79fb      	ldrb	r3, [r7, #7]
 801a86c:	2b03      	cmp	r3, #3
 801a86e:	d117      	bne.n	801a8a0 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801a870:	4b1d      	ldr	r3, [pc, #116]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	4a1c      	ldr	r2, [pc, #112]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a876:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a87a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801a87c:	4b1a      	ldr	r3, [pc, #104]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	4a19      	ldr	r2, [pc, #100]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a886:	6013      	str	r3, [r2, #0]
 801a888:	4b17      	ldr	r3, [pc, #92]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	4a16      	ldr	r2, [pc, #88]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a88e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a892:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801a894:	4b14      	ldr	r3, [pc, #80]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	4a13      	ldr	r2, [pc, #76]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a89a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a89e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801a8a0:	79fb      	ldrb	r3, [r7, #7]
 801a8a2:	2b02      	cmp	r3, #2
 801a8a4:	d002      	beq.n	801a8ac <FLASH_FlushCaches+0x54>
 801a8a6:	79fb      	ldrb	r3, [r7, #7]
 801a8a8:	2b03      	cmp	r3, #3
 801a8aa:	d111      	bne.n	801a8d0 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801a8ac:	4b0e      	ldr	r3, [pc, #56]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	4a0d      	ldr	r2, [pc, #52]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a8b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a8b6:	6013      	str	r3, [r2, #0]
 801a8b8:	4b0b      	ldr	r3, [pc, #44]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	4a0a      	ldr	r2, [pc, #40]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a8be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a8c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801a8c4:	4b08      	ldr	r3, [pc, #32]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	4a07      	ldr	r2, [pc, #28]	; (801a8e8 <FLASH_FlushCaches+0x90>)
 801a8ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a8ce:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801a8d0:	4b04      	ldr	r3, [pc, #16]	; (801a8e4 <FLASH_FlushCaches+0x8c>)
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	771a      	strb	r2, [r3, #28]
}
 801a8d6:	bf00      	nop
 801a8d8:	370c      	adds	r7, #12
 801a8da:	46bd      	mov	sp, r7
 801a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e0:	4770      	bx	lr
 801a8e2:	bf00      	nop
 801a8e4:	2000000c 	.word	0x2000000c
 801a8e8:	40022000 	.word	0x40022000

0801a8ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801a8ec:	b480      	push	{r7}
 801a8ee:	b087      	sub	sp, #28
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
 801a8f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801a8fa:	e15a      	b.n	801abb2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801a8fc:	683b      	ldr	r3, [r7, #0]
 801a8fe:	681a      	ldr	r2, [r3, #0]
 801a900:	2101      	movs	r1, #1
 801a902:	697b      	ldr	r3, [r7, #20]
 801a904:	fa01 f303 	lsl.w	r3, r1, r3
 801a908:	4013      	ands	r3, r2
 801a90a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	f000 814c 	beq.w	801abac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	685b      	ldr	r3, [r3, #4]
 801a918:	f003 0303 	and.w	r3, r3, #3
 801a91c:	2b01      	cmp	r3, #1
 801a91e:	d005      	beq.n	801a92c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a920:	683b      	ldr	r3, [r7, #0]
 801a922:	685b      	ldr	r3, [r3, #4]
 801a924:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801a928:	2b02      	cmp	r3, #2
 801a92a:	d130      	bne.n	801a98e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	689b      	ldr	r3, [r3, #8]
 801a930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801a932:	697b      	ldr	r3, [r7, #20]
 801a934:	005b      	lsls	r3, r3, #1
 801a936:	2203      	movs	r2, #3
 801a938:	fa02 f303 	lsl.w	r3, r2, r3
 801a93c:	43db      	mvns	r3, r3
 801a93e:	693a      	ldr	r2, [r7, #16]
 801a940:	4013      	ands	r3, r2
 801a942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801a944:	683b      	ldr	r3, [r7, #0]
 801a946:	68da      	ldr	r2, [r3, #12]
 801a948:	697b      	ldr	r3, [r7, #20]
 801a94a:	005b      	lsls	r3, r3, #1
 801a94c:	fa02 f303 	lsl.w	r3, r2, r3
 801a950:	693a      	ldr	r2, [r7, #16]
 801a952:	4313      	orrs	r3, r2
 801a954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	693a      	ldr	r2, [r7, #16]
 801a95a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	685b      	ldr	r3, [r3, #4]
 801a960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801a962:	2201      	movs	r2, #1
 801a964:	697b      	ldr	r3, [r7, #20]
 801a966:	fa02 f303 	lsl.w	r3, r2, r3
 801a96a:	43db      	mvns	r3, r3
 801a96c:	693a      	ldr	r2, [r7, #16]
 801a96e:	4013      	ands	r3, r2
 801a970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801a972:	683b      	ldr	r3, [r7, #0]
 801a974:	685b      	ldr	r3, [r3, #4]
 801a976:	091b      	lsrs	r3, r3, #4
 801a978:	f003 0201 	and.w	r2, r3, #1
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	fa02 f303 	lsl.w	r3, r2, r3
 801a982:	693a      	ldr	r2, [r7, #16]
 801a984:	4313      	orrs	r3, r2
 801a986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	693a      	ldr	r2, [r7, #16]
 801a98c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801a98e:	683b      	ldr	r3, [r7, #0]
 801a990:	685b      	ldr	r3, [r3, #4]
 801a992:	f003 0303 	and.w	r3, r3, #3
 801a996:	2b03      	cmp	r3, #3
 801a998:	d017      	beq.n	801a9ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	68db      	ldr	r3, [r3, #12]
 801a99e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801a9a0:	697b      	ldr	r3, [r7, #20]
 801a9a2:	005b      	lsls	r3, r3, #1
 801a9a4:	2203      	movs	r2, #3
 801a9a6:	fa02 f303 	lsl.w	r3, r2, r3
 801a9aa:	43db      	mvns	r3, r3
 801a9ac:	693a      	ldr	r2, [r7, #16]
 801a9ae:	4013      	ands	r3, r2
 801a9b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801a9b2:	683b      	ldr	r3, [r7, #0]
 801a9b4:	689a      	ldr	r2, [r3, #8]
 801a9b6:	697b      	ldr	r3, [r7, #20]
 801a9b8:	005b      	lsls	r3, r3, #1
 801a9ba:	fa02 f303 	lsl.w	r3, r2, r3
 801a9be:	693a      	ldr	r2, [r7, #16]
 801a9c0:	4313      	orrs	r3, r2
 801a9c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	693a      	ldr	r2, [r7, #16]
 801a9c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	685b      	ldr	r3, [r3, #4]
 801a9ce:	f003 0303 	and.w	r3, r3, #3
 801a9d2:	2b02      	cmp	r3, #2
 801a9d4:	d123      	bne.n	801aa1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801a9d6:	697b      	ldr	r3, [r7, #20]
 801a9d8:	08da      	lsrs	r2, r3, #3
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	3208      	adds	r2, #8
 801a9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a9e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801a9e4:	697b      	ldr	r3, [r7, #20]
 801a9e6:	f003 0307 	and.w	r3, r3, #7
 801a9ea:	009b      	lsls	r3, r3, #2
 801a9ec:	220f      	movs	r2, #15
 801a9ee:	fa02 f303 	lsl.w	r3, r2, r3
 801a9f2:	43db      	mvns	r3, r3
 801a9f4:	693a      	ldr	r2, [r7, #16]
 801a9f6:	4013      	ands	r3, r2
 801a9f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801a9fa:	683b      	ldr	r3, [r7, #0]
 801a9fc:	691a      	ldr	r2, [r3, #16]
 801a9fe:	697b      	ldr	r3, [r7, #20]
 801aa00:	f003 0307 	and.w	r3, r3, #7
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	fa02 f303 	lsl.w	r3, r2, r3
 801aa0a:	693a      	ldr	r2, [r7, #16]
 801aa0c:	4313      	orrs	r3, r2
 801aa0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801aa10:	697b      	ldr	r3, [r7, #20]
 801aa12:	08da      	lsrs	r2, r3, #3
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	3208      	adds	r2, #8
 801aa18:	6939      	ldr	r1, [r7, #16]
 801aa1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801aa24:	697b      	ldr	r3, [r7, #20]
 801aa26:	005b      	lsls	r3, r3, #1
 801aa28:	2203      	movs	r2, #3
 801aa2a:	fa02 f303 	lsl.w	r3, r2, r3
 801aa2e:	43db      	mvns	r3, r3
 801aa30:	693a      	ldr	r2, [r7, #16]
 801aa32:	4013      	ands	r3, r2
 801aa34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801aa36:	683b      	ldr	r3, [r7, #0]
 801aa38:	685b      	ldr	r3, [r3, #4]
 801aa3a:	f003 0203 	and.w	r2, r3, #3
 801aa3e:	697b      	ldr	r3, [r7, #20]
 801aa40:	005b      	lsls	r3, r3, #1
 801aa42:	fa02 f303 	lsl.w	r3, r2, r3
 801aa46:	693a      	ldr	r2, [r7, #16]
 801aa48:	4313      	orrs	r3, r2
 801aa4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	693a      	ldr	r2, [r7, #16]
 801aa50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	685b      	ldr	r3, [r3, #4]
 801aa56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	f000 80a6 	beq.w	801abac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801aa60:	4b5b      	ldr	r3, [pc, #364]	; (801abd0 <HAL_GPIO_Init+0x2e4>)
 801aa62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa64:	4a5a      	ldr	r2, [pc, #360]	; (801abd0 <HAL_GPIO_Init+0x2e4>)
 801aa66:	f043 0301 	orr.w	r3, r3, #1
 801aa6a:	6613      	str	r3, [r2, #96]	; 0x60
 801aa6c:	4b58      	ldr	r3, [pc, #352]	; (801abd0 <HAL_GPIO_Init+0x2e4>)
 801aa6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa70:	f003 0301 	and.w	r3, r3, #1
 801aa74:	60bb      	str	r3, [r7, #8]
 801aa76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801aa78:	4a56      	ldr	r2, [pc, #344]	; (801abd4 <HAL_GPIO_Init+0x2e8>)
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	089b      	lsrs	r3, r3, #2
 801aa7e:	3302      	adds	r3, #2
 801aa80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801aa86:	697b      	ldr	r3, [r7, #20]
 801aa88:	f003 0303 	and.w	r3, r3, #3
 801aa8c:	009b      	lsls	r3, r3, #2
 801aa8e:	220f      	movs	r2, #15
 801aa90:	fa02 f303 	lsl.w	r3, r2, r3
 801aa94:	43db      	mvns	r3, r3
 801aa96:	693a      	ldr	r2, [r7, #16]
 801aa98:	4013      	ands	r3, r2
 801aa9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801aaa2:	d01f      	beq.n	801aae4 <HAL_GPIO_Init+0x1f8>
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	4a4c      	ldr	r2, [pc, #304]	; (801abd8 <HAL_GPIO_Init+0x2ec>)
 801aaa8:	4293      	cmp	r3, r2
 801aaaa:	d019      	beq.n	801aae0 <HAL_GPIO_Init+0x1f4>
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	4a4b      	ldr	r2, [pc, #300]	; (801abdc <HAL_GPIO_Init+0x2f0>)
 801aab0:	4293      	cmp	r3, r2
 801aab2:	d013      	beq.n	801aadc <HAL_GPIO_Init+0x1f0>
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	4a4a      	ldr	r2, [pc, #296]	; (801abe0 <HAL_GPIO_Init+0x2f4>)
 801aab8:	4293      	cmp	r3, r2
 801aaba:	d00d      	beq.n	801aad8 <HAL_GPIO_Init+0x1ec>
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	4a49      	ldr	r2, [pc, #292]	; (801abe4 <HAL_GPIO_Init+0x2f8>)
 801aac0:	4293      	cmp	r3, r2
 801aac2:	d007      	beq.n	801aad4 <HAL_GPIO_Init+0x1e8>
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	4a48      	ldr	r2, [pc, #288]	; (801abe8 <HAL_GPIO_Init+0x2fc>)
 801aac8:	4293      	cmp	r3, r2
 801aaca:	d101      	bne.n	801aad0 <HAL_GPIO_Init+0x1e4>
 801aacc:	2305      	movs	r3, #5
 801aace:	e00a      	b.n	801aae6 <HAL_GPIO_Init+0x1fa>
 801aad0:	2306      	movs	r3, #6
 801aad2:	e008      	b.n	801aae6 <HAL_GPIO_Init+0x1fa>
 801aad4:	2304      	movs	r3, #4
 801aad6:	e006      	b.n	801aae6 <HAL_GPIO_Init+0x1fa>
 801aad8:	2303      	movs	r3, #3
 801aada:	e004      	b.n	801aae6 <HAL_GPIO_Init+0x1fa>
 801aadc:	2302      	movs	r3, #2
 801aade:	e002      	b.n	801aae6 <HAL_GPIO_Init+0x1fa>
 801aae0:	2301      	movs	r3, #1
 801aae2:	e000      	b.n	801aae6 <HAL_GPIO_Init+0x1fa>
 801aae4:	2300      	movs	r3, #0
 801aae6:	697a      	ldr	r2, [r7, #20]
 801aae8:	f002 0203 	and.w	r2, r2, #3
 801aaec:	0092      	lsls	r2, r2, #2
 801aaee:	4093      	lsls	r3, r2
 801aaf0:	693a      	ldr	r2, [r7, #16]
 801aaf2:	4313      	orrs	r3, r2
 801aaf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801aaf6:	4937      	ldr	r1, [pc, #220]	; (801abd4 <HAL_GPIO_Init+0x2e8>)
 801aaf8:	697b      	ldr	r3, [r7, #20]
 801aafa:	089b      	lsrs	r3, r3, #2
 801aafc:	3302      	adds	r3, #2
 801aafe:	693a      	ldr	r2, [r7, #16]
 801ab00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801ab04:	4b39      	ldr	r3, [pc, #228]	; (801abec <HAL_GPIO_Init+0x300>)
 801ab06:	689b      	ldr	r3, [r3, #8]
 801ab08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	43db      	mvns	r3, r3
 801ab0e:	693a      	ldr	r2, [r7, #16]
 801ab10:	4013      	ands	r3, r2
 801ab12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ab14:	683b      	ldr	r3, [r7, #0]
 801ab16:	685b      	ldr	r3, [r3, #4]
 801ab18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d003      	beq.n	801ab28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801ab20:	693a      	ldr	r2, [r7, #16]
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	4313      	orrs	r3, r2
 801ab26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801ab28:	4a30      	ldr	r2, [pc, #192]	; (801abec <HAL_GPIO_Init+0x300>)
 801ab2a:	693b      	ldr	r3, [r7, #16]
 801ab2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801ab2e:	4b2f      	ldr	r3, [pc, #188]	; (801abec <HAL_GPIO_Init+0x300>)
 801ab30:	68db      	ldr	r3, [r3, #12]
 801ab32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	43db      	mvns	r3, r3
 801ab38:	693a      	ldr	r2, [r7, #16]
 801ab3a:	4013      	ands	r3, r2
 801ab3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ab3e:	683b      	ldr	r3, [r7, #0]
 801ab40:	685b      	ldr	r3, [r3, #4]
 801ab42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d003      	beq.n	801ab52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801ab4a:	693a      	ldr	r2, [r7, #16]
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	4313      	orrs	r3, r2
 801ab50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801ab52:	4a26      	ldr	r2, [pc, #152]	; (801abec <HAL_GPIO_Init+0x300>)
 801ab54:	693b      	ldr	r3, [r7, #16]
 801ab56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801ab58:	4b24      	ldr	r3, [pc, #144]	; (801abec <HAL_GPIO_Init+0x300>)
 801ab5a:	685b      	ldr	r3, [r3, #4]
 801ab5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	43db      	mvns	r3, r3
 801ab62:	693a      	ldr	r2, [r7, #16]
 801ab64:	4013      	ands	r3, r2
 801ab66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ab68:	683b      	ldr	r3, [r7, #0]
 801ab6a:	685b      	ldr	r3, [r3, #4]
 801ab6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d003      	beq.n	801ab7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801ab74:	693a      	ldr	r2, [r7, #16]
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	4313      	orrs	r3, r2
 801ab7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801ab7c:	4a1b      	ldr	r2, [pc, #108]	; (801abec <HAL_GPIO_Init+0x300>)
 801ab7e:	693b      	ldr	r3, [r7, #16]
 801ab80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801ab82:	4b1a      	ldr	r3, [pc, #104]	; (801abec <HAL_GPIO_Init+0x300>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	43db      	mvns	r3, r3
 801ab8c:	693a      	ldr	r2, [r7, #16]
 801ab8e:	4013      	ands	r3, r2
 801ab90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	685b      	ldr	r3, [r3, #4]
 801ab96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d003      	beq.n	801aba6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801ab9e:	693a      	ldr	r2, [r7, #16]
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	4313      	orrs	r3, r2
 801aba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801aba6:	4a11      	ldr	r2, [pc, #68]	; (801abec <HAL_GPIO_Init+0x300>)
 801aba8:	693b      	ldr	r3, [r7, #16]
 801abaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801abac:	697b      	ldr	r3, [r7, #20]
 801abae:	3301      	adds	r3, #1
 801abb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801abb2:	683b      	ldr	r3, [r7, #0]
 801abb4:	681a      	ldr	r2, [r3, #0]
 801abb6:	697b      	ldr	r3, [r7, #20]
 801abb8:	fa22 f303 	lsr.w	r3, r2, r3
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	f47f ae9d 	bne.w	801a8fc <HAL_GPIO_Init+0x10>
  }
}
 801abc2:	bf00      	nop
 801abc4:	bf00      	nop
 801abc6:	371c      	adds	r7, #28
 801abc8:	46bd      	mov	sp, r7
 801abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abce:	4770      	bx	lr
 801abd0:	40021000 	.word	0x40021000
 801abd4:	40010000 	.word	0x40010000
 801abd8:	48000400 	.word	0x48000400
 801abdc:	48000800 	.word	0x48000800
 801abe0:	48000c00 	.word	0x48000c00
 801abe4:	48001000 	.word	0x48001000
 801abe8:	48001400 	.word	0x48001400
 801abec:	40010400 	.word	0x40010400

0801abf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801abf0:	b480      	push	{r7}
 801abf2:	b083      	sub	sp, #12
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
 801abf8:	460b      	mov	r3, r1
 801abfa:	807b      	strh	r3, [r7, #2]
 801abfc:	4613      	mov	r3, r2
 801abfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ac00:	787b      	ldrb	r3, [r7, #1]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d003      	beq.n	801ac0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801ac06:	887a      	ldrh	r2, [r7, #2]
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801ac0c:	e002      	b.n	801ac14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801ac0e:	887a      	ldrh	r2, [r7, #2]
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ac14:	bf00      	nop
 801ac16:	370c      	adds	r7, #12
 801ac18:	46bd      	mov	sp, r7
 801ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac1e:	4770      	bx	lr

0801ac20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801ac20:	b480      	push	{r7}
 801ac22:	b085      	sub	sp, #20
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d141      	bne.n	801acb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801ac2e:	4b4b      	ldr	r3, [pc, #300]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ac36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac3a:	d131      	bne.n	801aca0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ac3c:	4b47      	ldr	r3, [pc, #284]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ac42:	4a46      	ldr	r2, [pc, #280]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ac48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801ac4c:	4b43      	ldr	r3, [pc, #268]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ac54:	4a41      	ldr	r2, [pc, #260]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ac5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801ac5c:	4b40      	ldr	r3, [pc, #256]	; (801ad60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	2232      	movs	r2, #50	; 0x32
 801ac62:	fb02 f303 	mul.w	r3, r2, r3
 801ac66:	4a3f      	ldr	r2, [pc, #252]	; (801ad64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801ac68:	fba2 2303 	umull	r2, r3, r2, r3
 801ac6c:	0c9b      	lsrs	r3, r3, #18
 801ac6e:	3301      	adds	r3, #1
 801ac70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ac72:	e002      	b.n	801ac7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	3b01      	subs	r3, #1
 801ac78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ac7a:	4b38      	ldr	r3, [pc, #224]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac7c:	695b      	ldr	r3, [r3, #20]
 801ac7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ac82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac86:	d102      	bne.n	801ac8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d1f2      	bne.n	801ac74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801ac8e:	4b33      	ldr	r3, [pc, #204]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac90:	695b      	ldr	r3, [r3, #20]
 801ac92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ac96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac9a:	d158      	bne.n	801ad4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801ac9c:	2303      	movs	r3, #3
 801ac9e:	e057      	b.n	801ad50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801aca0:	4b2e      	ldr	r3, [pc, #184]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801aca6:	4a2d      	ldr	r2, [pc, #180]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801acac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801acb0:	e04d      	b.n	801ad4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801acb8:	d141      	bne.n	801ad3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801acba:	4b28      	ldr	r3, [pc, #160]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801acc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801acc6:	d131      	bne.n	801ad2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801acc8:	4b24      	ldr	r3, [pc, #144]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801acce:	4a23      	ldr	r2, [pc, #140]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801acd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801acd8:	4b20      	ldr	r3, [pc, #128]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ace0:	4a1e      	ldr	r2, [pc, #120]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ace2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ace6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801ace8:	4b1d      	ldr	r3, [pc, #116]	; (801ad60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	2232      	movs	r2, #50	; 0x32
 801acee:	fb02 f303 	mul.w	r3, r2, r3
 801acf2:	4a1c      	ldr	r2, [pc, #112]	; (801ad64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801acf4:	fba2 2303 	umull	r2, r3, r2, r3
 801acf8:	0c9b      	lsrs	r3, r3, #18
 801acfa:	3301      	adds	r3, #1
 801acfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801acfe:	e002      	b.n	801ad06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	3b01      	subs	r3, #1
 801ad04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ad06:	4b15      	ldr	r3, [pc, #84]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad08:	695b      	ldr	r3, [r3, #20]
 801ad0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ad0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ad12:	d102      	bne.n	801ad1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d1f2      	bne.n	801ad00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801ad1a:	4b10      	ldr	r3, [pc, #64]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad1c:	695b      	ldr	r3, [r3, #20]
 801ad1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ad22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ad26:	d112      	bne.n	801ad4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801ad28:	2303      	movs	r3, #3
 801ad2a:	e011      	b.n	801ad50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ad2c:	4b0b      	ldr	r3, [pc, #44]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ad32:	4a0a      	ldr	r2, [pc, #40]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ad38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801ad3c:	e007      	b.n	801ad4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801ad3e:	4b07      	ldr	r3, [pc, #28]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ad46:	4a05      	ldr	r2, [pc, #20]	; (801ad5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801ad4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801ad4e:	2300      	movs	r3, #0
}
 801ad50:	4618      	mov	r0, r3
 801ad52:	3714      	adds	r7, #20
 801ad54:	46bd      	mov	sp, r7
 801ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad5a:	4770      	bx	lr
 801ad5c:	40007000 	.word	0x40007000
 801ad60:	20000000 	.word	0x20000000
 801ad64:	431bde83 	.word	0x431bde83

0801ad68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801ad68:	b480      	push	{r7}
 801ad6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801ad6c:	4b05      	ldr	r3, [pc, #20]	; (801ad84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801ad6e:	689b      	ldr	r3, [r3, #8]
 801ad70:	4a04      	ldr	r2, [pc, #16]	; (801ad84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801ad72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ad76:	6093      	str	r3, [r2, #8]
}
 801ad78:	bf00      	nop
 801ad7a:	46bd      	mov	sp, r7
 801ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad80:	4770      	bx	lr
 801ad82:	bf00      	nop
 801ad84:	40007000 	.word	0x40007000

0801ad88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b088      	sub	sp, #32
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d101      	bne.n	801ad9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801ad96:	2301      	movs	r3, #1
 801ad98:	e306      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	f003 0301 	and.w	r3, r3, #1
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d075      	beq.n	801ae92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ada6:	4b97      	ldr	r3, [pc, #604]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ada8:	689b      	ldr	r3, [r3, #8]
 801adaa:	f003 030c 	and.w	r3, r3, #12
 801adae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801adb0:	4b94      	ldr	r3, [pc, #592]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801adb2:	68db      	ldr	r3, [r3, #12]
 801adb4:	f003 0303 	and.w	r3, r3, #3
 801adb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801adba:	69bb      	ldr	r3, [r7, #24]
 801adbc:	2b0c      	cmp	r3, #12
 801adbe:	d102      	bne.n	801adc6 <HAL_RCC_OscConfig+0x3e>
 801adc0:	697b      	ldr	r3, [r7, #20]
 801adc2:	2b03      	cmp	r3, #3
 801adc4:	d002      	beq.n	801adcc <HAL_RCC_OscConfig+0x44>
 801adc6:	69bb      	ldr	r3, [r7, #24]
 801adc8:	2b08      	cmp	r3, #8
 801adca:	d10b      	bne.n	801ade4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801adcc:	4b8d      	ldr	r3, [pc, #564]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801add4:	2b00      	cmp	r3, #0
 801add6:	d05b      	beq.n	801ae90 <HAL_RCC_OscConfig+0x108>
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	685b      	ldr	r3, [r3, #4]
 801addc:	2b00      	cmp	r3, #0
 801adde:	d157      	bne.n	801ae90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801ade0:	2301      	movs	r3, #1
 801ade2:	e2e1      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	685b      	ldr	r3, [r3, #4]
 801ade8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801adec:	d106      	bne.n	801adfc <HAL_RCC_OscConfig+0x74>
 801adee:	4b85      	ldr	r3, [pc, #532]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	4a84      	ldr	r2, [pc, #528]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801adf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801adf8:	6013      	str	r3, [r2, #0]
 801adfa:	e01d      	b.n	801ae38 <HAL_RCC_OscConfig+0xb0>
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	685b      	ldr	r3, [r3, #4]
 801ae00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801ae04:	d10c      	bne.n	801ae20 <HAL_RCC_OscConfig+0x98>
 801ae06:	4b7f      	ldr	r3, [pc, #508]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	4a7e      	ldr	r2, [pc, #504]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ae10:	6013      	str	r3, [r2, #0]
 801ae12:	4b7c      	ldr	r3, [pc, #496]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	4a7b      	ldr	r2, [pc, #492]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ae1c:	6013      	str	r3, [r2, #0]
 801ae1e:	e00b      	b.n	801ae38 <HAL_RCC_OscConfig+0xb0>
 801ae20:	4b78      	ldr	r3, [pc, #480]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	4a77      	ldr	r2, [pc, #476]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ae2a:	6013      	str	r3, [r2, #0]
 801ae2c:	4b75      	ldr	r3, [pc, #468]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	4a74      	ldr	r2, [pc, #464]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ae36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	685b      	ldr	r3, [r3, #4]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d013      	beq.n	801ae68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ae40:	f7fc fd0e 	bl	8017860 <HAL_GetTick>
 801ae44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801ae46:	e008      	b.n	801ae5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ae48:	f7fc fd0a 	bl	8017860 <HAL_GetTick>
 801ae4c:	4602      	mov	r2, r0
 801ae4e:	693b      	ldr	r3, [r7, #16]
 801ae50:	1ad3      	subs	r3, r2, r3
 801ae52:	2b64      	cmp	r3, #100	; 0x64
 801ae54:	d901      	bls.n	801ae5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801ae56:	2303      	movs	r3, #3
 801ae58:	e2a6      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801ae5a:	4b6a      	ldr	r3, [pc, #424]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d0f0      	beq.n	801ae48 <HAL_RCC_OscConfig+0xc0>
 801ae66:	e014      	b.n	801ae92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ae68:	f7fc fcfa 	bl	8017860 <HAL_GetTick>
 801ae6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801ae6e:	e008      	b.n	801ae82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ae70:	f7fc fcf6 	bl	8017860 <HAL_GetTick>
 801ae74:	4602      	mov	r2, r0
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	1ad3      	subs	r3, r2, r3
 801ae7a:	2b64      	cmp	r3, #100	; 0x64
 801ae7c:	d901      	bls.n	801ae82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801ae7e:	2303      	movs	r3, #3
 801ae80:	e292      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801ae82:	4b60      	ldr	r3, [pc, #384]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d1f0      	bne.n	801ae70 <HAL_RCC_OscConfig+0xe8>
 801ae8e:	e000      	b.n	801ae92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ae90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	f003 0302 	and.w	r3, r3, #2
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d075      	beq.n	801af8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ae9e:	4b59      	ldr	r3, [pc, #356]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801aea0:	689b      	ldr	r3, [r3, #8]
 801aea2:	f003 030c 	and.w	r3, r3, #12
 801aea6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801aea8:	4b56      	ldr	r3, [pc, #344]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801aeaa:	68db      	ldr	r3, [r3, #12]
 801aeac:	f003 0303 	and.w	r3, r3, #3
 801aeb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801aeb2:	69bb      	ldr	r3, [r7, #24]
 801aeb4:	2b0c      	cmp	r3, #12
 801aeb6:	d102      	bne.n	801aebe <HAL_RCC_OscConfig+0x136>
 801aeb8:	697b      	ldr	r3, [r7, #20]
 801aeba:	2b02      	cmp	r3, #2
 801aebc:	d002      	beq.n	801aec4 <HAL_RCC_OscConfig+0x13c>
 801aebe:	69bb      	ldr	r3, [r7, #24]
 801aec0:	2b04      	cmp	r3, #4
 801aec2:	d11f      	bne.n	801af04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801aec4:	4b4f      	ldr	r3, [pc, #316]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d005      	beq.n	801aedc <HAL_RCC_OscConfig+0x154>
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	68db      	ldr	r3, [r3, #12]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d101      	bne.n	801aedc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801aed8:	2301      	movs	r3, #1
 801aeda:	e265      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aedc:	4b49      	ldr	r3, [pc, #292]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801aede:	685b      	ldr	r3, [r3, #4]
 801aee0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	691b      	ldr	r3, [r3, #16]
 801aee8:	061b      	lsls	r3, r3, #24
 801aeea:	4946      	ldr	r1, [pc, #280]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801aeec:	4313      	orrs	r3, r2
 801aeee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801aef0:	4b45      	ldr	r3, [pc, #276]	; (801b008 <HAL_RCC_OscConfig+0x280>)
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	4618      	mov	r0, r3
 801aef6:	f7fc fc67 	bl	80177c8 <HAL_InitTick>
 801aefa:	4603      	mov	r3, r0
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d043      	beq.n	801af88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801af00:	2301      	movs	r3, #1
 801af02:	e251      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	68db      	ldr	r3, [r3, #12]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d023      	beq.n	801af54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801af0c:	4b3d      	ldr	r3, [pc, #244]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	4a3c      	ldr	r2, [pc, #240]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801af12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801af16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af18:	f7fc fca2 	bl	8017860 <HAL_GetTick>
 801af1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801af1e:	e008      	b.n	801af32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801af20:	f7fc fc9e 	bl	8017860 <HAL_GetTick>
 801af24:	4602      	mov	r2, r0
 801af26:	693b      	ldr	r3, [r7, #16]
 801af28:	1ad3      	subs	r3, r2, r3
 801af2a:	2b02      	cmp	r3, #2
 801af2c:	d901      	bls.n	801af32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801af2e:	2303      	movs	r3, #3
 801af30:	e23a      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801af32:	4b34      	ldr	r3, [pc, #208]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d0f0      	beq.n	801af20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801af3e:	4b31      	ldr	r3, [pc, #196]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801af40:	685b      	ldr	r3, [r3, #4]
 801af42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	691b      	ldr	r3, [r3, #16]
 801af4a:	061b      	lsls	r3, r3, #24
 801af4c:	492d      	ldr	r1, [pc, #180]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801af4e:	4313      	orrs	r3, r2
 801af50:	604b      	str	r3, [r1, #4]
 801af52:	e01a      	b.n	801af8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801af54:	4b2b      	ldr	r3, [pc, #172]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	4a2a      	ldr	r2, [pc, #168]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801af5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801af5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af60:	f7fc fc7e 	bl	8017860 <HAL_GetTick>
 801af64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801af66:	e008      	b.n	801af7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801af68:	f7fc fc7a 	bl	8017860 <HAL_GetTick>
 801af6c:	4602      	mov	r2, r0
 801af6e:	693b      	ldr	r3, [r7, #16]
 801af70:	1ad3      	subs	r3, r2, r3
 801af72:	2b02      	cmp	r3, #2
 801af74:	d901      	bls.n	801af7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801af76:	2303      	movs	r3, #3
 801af78:	e216      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801af7a:	4b22      	ldr	r3, [pc, #136]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801af82:	2b00      	cmp	r3, #0
 801af84:	d1f0      	bne.n	801af68 <HAL_RCC_OscConfig+0x1e0>
 801af86:	e000      	b.n	801af8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801af88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	f003 0308 	and.w	r3, r3, #8
 801af92:	2b00      	cmp	r3, #0
 801af94:	d041      	beq.n	801b01a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	695b      	ldr	r3, [r3, #20]
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d01c      	beq.n	801afd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801af9e:	4b19      	ldr	r3, [pc, #100]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801afa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801afa4:	4a17      	ldr	r2, [pc, #92]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801afa6:	f043 0301 	orr.w	r3, r3, #1
 801afaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801afae:	f7fc fc57 	bl	8017860 <HAL_GetTick>
 801afb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801afb4:	e008      	b.n	801afc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801afb6:	f7fc fc53 	bl	8017860 <HAL_GetTick>
 801afba:	4602      	mov	r2, r0
 801afbc:	693b      	ldr	r3, [r7, #16]
 801afbe:	1ad3      	subs	r3, r2, r3
 801afc0:	2b02      	cmp	r3, #2
 801afc2:	d901      	bls.n	801afc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801afc4:	2303      	movs	r3, #3
 801afc6:	e1ef      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801afc8:	4b0e      	ldr	r3, [pc, #56]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801afca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801afce:	f003 0302 	and.w	r3, r3, #2
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d0ef      	beq.n	801afb6 <HAL_RCC_OscConfig+0x22e>
 801afd6:	e020      	b.n	801b01a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801afd8:	4b0a      	ldr	r3, [pc, #40]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801afda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801afde:	4a09      	ldr	r2, [pc, #36]	; (801b004 <HAL_RCC_OscConfig+0x27c>)
 801afe0:	f023 0301 	bic.w	r3, r3, #1
 801afe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801afe8:	f7fc fc3a 	bl	8017860 <HAL_GetTick>
 801afec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801afee:	e00d      	b.n	801b00c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801aff0:	f7fc fc36 	bl	8017860 <HAL_GetTick>
 801aff4:	4602      	mov	r2, r0
 801aff6:	693b      	ldr	r3, [r7, #16]
 801aff8:	1ad3      	subs	r3, r2, r3
 801affa:	2b02      	cmp	r3, #2
 801affc:	d906      	bls.n	801b00c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801affe:	2303      	movs	r3, #3
 801b000:	e1d2      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
 801b002:	bf00      	nop
 801b004:	40021000 	.word	0x40021000
 801b008:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b00c:	4b8c      	ldr	r3, [pc, #560]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b00e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b012:	f003 0302 	and.w	r3, r3, #2
 801b016:	2b00      	cmp	r3, #0
 801b018:	d1ea      	bne.n	801aff0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	f003 0304 	and.w	r3, r3, #4
 801b022:	2b00      	cmp	r3, #0
 801b024:	f000 80a6 	beq.w	801b174 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b028:	2300      	movs	r3, #0
 801b02a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801b02c:	4b84      	ldr	r3, [pc, #528]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b02e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b034:	2b00      	cmp	r3, #0
 801b036:	d101      	bne.n	801b03c <HAL_RCC_OscConfig+0x2b4>
 801b038:	2301      	movs	r3, #1
 801b03a:	e000      	b.n	801b03e <HAL_RCC_OscConfig+0x2b6>
 801b03c:	2300      	movs	r3, #0
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d00d      	beq.n	801b05e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b042:	4b7f      	ldr	r3, [pc, #508]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b046:	4a7e      	ldr	r2, [pc, #504]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b04c:	6593      	str	r3, [r2, #88]	; 0x58
 801b04e:	4b7c      	ldr	r3, [pc, #496]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b056:	60fb      	str	r3, [r7, #12]
 801b058:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801b05a:	2301      	movs	r3, #1
 801b05c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b05e:	4b79      	ldr	r3, [pc, #484]	; (801b244 <HAL_RCC_OscConfig+0x4bc>)
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b066:	2b00      	cmp	r3, #0
 801b068:	d118      	bne.n	801b09c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b06a:	4b76      	ldr	r3, [pc, #472]	; (801b244 <HAL_RCC_OscConfig+0x4bc>)
 801b06c:	681b      	ldr	r3, [r3, #0]
 801b06e:	4a75      	ldr	r2, [pc, #468]	; (801b244 <HAL_RCC_OscConfig+0x4bc>)
 801b070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b076:	f7fc fbf3 	bl	8017860 <HAL_GetTick>
 801b07a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b07c:	e008      	b.n	801b090 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b07e:	f7fc fbef 	bl	8017860 <HAL_GetTick>
 801b082:	4602      	mov	r2, r0
 801b084:	693b      	ldr	r3, [r7, #16]
 801b086:	1ad3      	subs	r3, r2, r3
 801b088:	2b02      	cmp	r3, #2
 801b08a:	d901      	bls.n	801b090 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801b08c:	2303      	movs	r3, #3
 801b08e:	e18b      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b090:	4b6c      	ldr	r3, [pc, #432]	; (801b244 <HAL_RCC_OscConfig+0x4bc>)
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d0f0      	beq.n	801b07e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	689b      	ldr	r3, [r3, #8]
 801b0a0:	2b01      	cmp	r3, #1
 801b0a2:	d108      	bne.n	801b0b6 <HAL_RCC_OscConfig+0x32e>
 801b0a4:	4b66      	ldr	r3, [pc, #408]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0aa:	4a65      	ldr	r2, [pc, #404]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0ac:	f043 0301 	orr.w	r3, r3, #1
 801b0b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b0b4:	e024      	b.n	801b100 <HAL_RCC_OscConfig+0x378>
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	689b      	ldr	r3, [r3, #8]
 801b0ba:	2b05      	cmp	r3, #5
 801b0bc:	d110      	bne.n	801b0e0 <HAL_RCC_OscConfig+0x358>
 801b0be:	4b60      	ldr	r3, [pc, #384]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0c4:	4a5e      	ldr	r2, [pc, #376]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0c6:	f043 0304 	orr.w	r3, r3, #4
 801b0ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b0ce:	4b5c      	ldr	r3, [pc, #368]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0d4:	4a5a      	ldr	r2, [pc, #360]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0d6:	f043 0301 	orr.w	r3, r3, #1
 801b0da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b0de:	e00f      	b.n	801b100 <HAL_RCC_OscConfig+0x378>
 801b0e0:	4b57      	ldr	r3, [pc, #348]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0e6:	4a56      	ldr	r2, [pc, #344]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0e8:	f023 0301 	bic.w	r3, r3, #1
 801b0ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b0f0:	4b53      	ldr	r3, [pc, #332]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0f6:	4a52      	ldr	r2, [pc, #328]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b0f8:	f023 0304 	bic.w	r3, r3, #4
 801b0fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	689b      	ldr	r3, [r3, #8]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d016      	beq.n	801b136 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b108:	f7fc fbaa 	bl	8017860 <HAL_GetTick>
 801b10c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b10e:	e00a      	b.n	801b126 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b110:	f7fc fba6 	bl	8017860 <HAL_GetTick>
 801b114:	4602      	mov	r2, r0
 801b116:	693b      	ldr	r3, [r7, #16]
 801b118:	1ad3      	subs	r3, r2, r3
 801b11a:	f241 3288 	movw	r2, #5000	; 0x1388
 801b11e:	4293      	cmp	r3, r2
 801b120:	d901      	bls.n	801b126 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801b122:	2303      	movs	r3, #3
 801b124:	e140      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b126:	4b46      	ldr	r3, [pc, #280]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b12c:	f003 0302 	and.w	r3, r3, #2
 801b130:	2b00      	cmp	r3, #0
 801b132:	d0ed      	beq.n	801b110 <HAL_RCC_OscConfig+0x388>
 801b134:	e015      	b.n	801b162 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b136:	f7fc fb93 	bl	8017860 <HAL_GetTick>
 801b13a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b13c:	e00a      	b.n	801b154 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b13e:	f7fc fb8f 	bl	8017860 <HAL_GetTick>
 801b142:	4602      	mov	r2, r0
 801b144:	693b      	ldr	r3, [r7, #16]
 801b146:	1ad3      	subs	r3, r2, r3
 801b148:	f241 3288 	movw	r2, #5000	; 0x1388
 801b14c:	4293      	cmp	r3, r2
 801b14e:	d901      	bls.n	801b154 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801b150:	2303      	movs	r3, #3
 801b152:	e129      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b154:	4b3a      	ldr	r3, [pc, #232]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b15a:	f003 0302 	and.w	r3, r3, #2
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d1ed      	bne.n	801b13e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801b162:	7ffb      	ldrb	r3, [r7, #31]
 801b164:	2b01      	cmp	r3, #1
 801b166:	d105      	bne.n	801b174 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b168:	4b35      	ldr	r3, [pc, #212]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b16c:	4a34      	ldr	r2, [pc, #208]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b16e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b172:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	f003 0320 	and.w	r3, r3, #32
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d03c      	beq.n	801b1fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	699b      	ldr	r3, [r3, #24]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d01c      	beq.n	801b1c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b188:	4b2d      	ldr	r3, [pc, #180]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b18a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b18e:	4a2c      	ldr	r2, [pc, #176]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b190:	f043 0301 	orr.w	r3, r3, #1
 801b194:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b198:	f7fc fb62 	bl	8017860 <HAL_GetTick>
 801b19c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b19e:	e008      	b.n	801b1b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b1a0:	f7fc fb5e 	bl	8017860 <HAL_GetTick>
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	693b      	ldr	r3, [r7, #16]
 801b1a8:	1ad3      	subs	r3, r2, r3
 801b1aa:	2b02      	cmp	r3, #2
 801b1ac:	d901      	bls.n	801b1b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801b1ae:	2303      	movs	r3, #3
 801b1b0:	e0fa      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b1b2:	4b23      	ldr	r3, [pc, #140]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b1b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1b8:	f003 0302 	and.w	r3, r3, #2
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d0ef      	beq.n	801b1a0 <HAL_RCC_OscConfig+0x418>
 801b1c0:	e01b      	b.n	801b1fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b1c2:	4b1f      	ldr	r3, [pc, #124]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b1c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1c8:	4a1d      	ldr	r2, [pc, #116]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b1ca:	f023 0301 	bic.w	r3, r3, #1
 801b1ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b1d2:	f7fc fb45 	bl	8017860 <HAL_GetTick>
 801b1d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b1d8:	e008      	b.n	801b1ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b1da:	f7fc fb41 	bl	8017860 <HAL_GetTick>
 801b1de:	4602      	mov	r2, r0
 801b1e0:	693b      	ldr	r3, [r7, #16]
 801b1e2:	1ad3      	subs	r3, r2, r3
 801b1e4:	2b02      	cmp	r3, #2
 801b1e6:	d901      	bls.n	801b1ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801b1e8:	2303      	movs	r3, #3
 801b1ea:	e0dd      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b1ec:	4b14      	ldr	r3, [pc, #80]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b1ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1f2:	f003 0302 	and.w	r3, r3, #2
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d1ef      	bne.n	801b1da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	69db      	ldr	r3, [r3, #28]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	f000 80d1 	beq.w	801b3a6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801b204:	4b0e      	ldr	r3, [pc, #56]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b206:	689b      	ldr	r3, [r3, #8]
 801b208:	f003 030c 	and.w	r3, r3, #12
 801b20c:	2b0c      	cmp	r3, #12
 801b20e:	f000 808b 	beq.w	801b328 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	69db      	ldr	r3, [r3, #28]
 801b216:	2b02      	cmp	r3, #2
 801b218:	d15e      	bne.n	801b2d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b21a:	4b09      	ldr	r3, [pc, #36]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	4a08      	ldr	r2, [pc, #32]	; (801b240 <HAL_RCC_OscConfig+0x4b8>)
 801b220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b226:	f7fc fb1b 	bl	8017860 <HAL_GetTick>
 801b22a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b22c:	e00c      	b.n	801b248 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b22e:	f7fc fb17 	bl	8017860 <HAL_GetTick>
 801b232:	4602      	mov	r2, r0
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	1ad3      	subs	r3, r2, r3
 801b238:	2b02      	cmp	r3, #2
 801b23a:	d905      	bls.n	801b248 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801b23c:	2303      	movs	r3, #3
 801b23e:	e0b3      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
 801b240:	40021000 	.word	0x40021000
 801b244:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b248:	4b59      	ldr	r3, [pc, #356]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b250:	2b00      	cmp	r3, #0
 801b252:	d1ec      	bne.n	801b22e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b254:	4b56      	ldr	r3, [pc, #344]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b256:	68da      	ldr	r2, [r3, #12]
 801b258:	4b56      	ldr	r3, [pc, #344]	; (801b3b4 <HAL_RCC_OscConfig+0x62c>)
 801b25a:	4013      	ands	r3, r2
 801b25c:	687a      	ldr	r2, [r7, #4]
 801b25e:	6a11      	ldr	r1, [r2, #32]
 801b260:	687a      	ldr	r2, [r7, #4]
 801b262:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b264:	3a01      	subs	r2, #1
 801b266:	0112      	lsls	r2, r2, #4
 801b268:	4311      	orrs	r1, r2
 801b26a:	687a      	ldr	r2, [r7, #4]
 801b26c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801b26e:	0212      	lsls	r2, r2, #8
 801b270:	4311      	orrs	r1, r2
 801b272:	687a      	ldr	r2, [r7, #4]
 801b274:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801b276:	0852      	lsrs	r2, r2, #1
 801b278:	3a01      	subs	r2, #1
 801b27a:	0552      	lsls	r2, r2, #21
 801b27c:	4311      	orrs	r1, r2
 801b27e:	687a      	ldr	r2, [r7, #4]
 801b280:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b282:	0852      	lsrs	r2, r2, #1
 801b284:	3a01      	subs	r2, #1
 801b286:	0652      	lsls	r2, r2, #25
 801b288:	4311      	orrs	r1, r2
 801b28a:	687a      	ldr	r2, [r7, #4]
 801b28c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b28e:	06d2      	lsls	r2, r2, #27
 801b290:	430a      	orrs	r2, r1
 801b292:	4947      	ldr	r1, [pc, #284]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b294:	4313      	orrs	r3, r2
 801b296:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b298:	4b45      	ldr	r3, [pc, #276]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	4a44      	ldr	r2, [pc, #272]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b29e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b2a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801b2a4:	4b42      	ldr	r3, [pc, #264]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2a6:	68db      	ldr	r3, [r3, #12]
 801b2a8:	4a41      	ldr	r2, [pc, #260]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b2ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b2b0:	f7fc fad6 	bl	8017860 <HAL_GetTick>
 801b2b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b2b6:	e008      	b.n	801b2ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b2b8:	f7fc fad2 	bl	8017860 <HAL_GetTick>
 801b2bc:	4602      	mov	r2, r0
 801b2be:	693b      	ldr	r3, [r7, #16]
 801b2c0:	1ad3      	subs	r3, r2, r3
 801b2c2:	2b02      	cmp	r3, #2
 801b2c4:	d901      	bls.n	801b2ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801b2c6:	2303      	movs	r3, #3
 801b2c8:	e06e      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b2ca:	4b39      	ldr	r3, [pc, #228]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2cc:	681b      	ldr	r3, [r3, #0]
 801b2ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d0f0      	beq.n	801b2b8 <HAL_RCC_OscConfig+0x530>
 801b2d6:	e066      	b.n	801b3a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b2d8:	4b35      	ldr	r3, [pc, #212]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	4a34      	ldr	r2, [pc, #208]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b2e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801b2e4:	4b32      	ldr	r3, [pc, #200]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2e6:	68db      	ldr	r3, [r3, #12]
 801b2e8:	4a31      	ldr	r2, [pc, #196]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2ea:	f023 0303 	bic.w	r3, r3, #3
 801b2ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801b2f0:	4b2f      	ldr	r3, [pc, #188]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2f2:	68db      	ldr	r3, [r3, #12]
 801b2f4:	4a2e      	ldr	r2, [pc, #184]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b2f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801b2fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b2fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b300:	f7fc faae 	bl	8017860 <HAL_GetTick>
 801b304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b306:	e008      	b.n	801b31a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b308:	f7fc faaa 	bl	8017860 <HAL_GetTick>
 801b30c:	4602      	mov	r2, r0
 801b30e:	693b      	ldr	r3, [r7, #16]
 801b310:	1ad3      	subs	r3, r2, r3
 801b312:	2b02      	cmp	r3, #2
 801b314:	d901      	bls.n	801b31a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801b316:	2303      	movs	r3, #3
 801b318:	e046      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b31a:	4b25      	ldr	r3, [pc, #148]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b322:	2b00      	cmp	r3, #0
 801b324:	d1f0      	bne.n	801b308 <HAL_RCC_OscConfig+0x580>
 801b326:	e03e      	b.n	801b3a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	69db      	ldr	r3, [r3, #28]
 801b32c:	2b01      	cmp	r3, #1
 801b32e:	d101      	bne.n	801b334 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801b330:	2301      	movs	r3, #1
 801b332:	e039      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801b334:	4b1e      	ldr	r3, [pc, #120]	; (801b3b0 <HAL_RCC_OscConfig+0x628>)
 801b336:	68db      	ldr	r3, [r3, #12]
 801b338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b33a:	697b      	ldr	r3, [r7, #20]
 801b33c:	f003 0203 	and.w	r2, r3, #3
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	6a1b      	ldr	r3, [r3, #32]
 801b344:	429a      	cmp	r2, r3
 801b346:	d12c      	bne.n	801b3a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b348:	697b      	ldr	r3, [r7, #20]
 801b34a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b352:	3b01      	subs	r3, #1
 801b354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b356:	429a      	cmp	r2, r3
 801b358:	d123      	bne.n	801b3a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b35a:	697b      	ldr	r3, [r7, #20]
 801b35c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b364:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b366:	429a      	cmp	r2, r3
 801b368:	d11b      	bne.n	801b3a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b36a:	697b      	ldr	r3, [r7, #20]
 801b36c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b374:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b376:	429a      	cmp	r2, r3
 801b378:	d113      	bne.n	801b3a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b37a:	697b      	ldr	r3, [r7, #20]
 801b37c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b384:	085b      	lsrs	r3, r3, #1
 801b386:	3b01      	subs	r3, #1
 801b388:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b38a:	429a      	cmp	r2, r3
 801b38c:	d109      	bne.n	801b3a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801b38e:	697b      	ldr	r3, [r7, #20]
 801b390:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b398:	085b      	lsrs	r3, r3, #1
 801b39a:	3b01      	subs	r3, #1
 801b39c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b39e:	429a      	cmp	r2, r3
 801b3a0:	d001      	beq.n	801b3a6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801b3a2:	2301      	movs	r3, #1
 801b3a4:	e000      	b.n	801b3a8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801b3a6:	2300      	movs	r3, #0
}
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	3720      	adds	r7, #32
 801b3ac:	46bd      	mov	sp, r7
 801b3ae:	bd80      	pop	{r7, pc}
 801b3b0:	40021000 	.word	0x40021000
 801b3b4:	019f800c 	.word	0x019f800c

0801b3b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b086      	sub	sp, #24
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
 801b3c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d101      	bne.n	801b3d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	e11e      	b.n	801b60e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b3d0:	4b91      	ldr	r3, [pc, #580]	; (801b618 <HAL_RCC_ClockConfig+0x260>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	f003 030f 	and.w	r3, r3, #15
 801b3d8:	683a      	ldr	r2, [r7, #0]
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d910      	bls.n	801b400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b3de:	4b8e      	ldr	r3, [pc, #568]	; (801b618 <HAL_RCC_ClockConfig+0x260>)
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	f023 020f 	bic.w	r2, r3, #15
 801b3e6:	498c      	ldr	r1, [pc, #560]	; (801b618 <HAL_RCC_ClockConfig+0x260>)
 801b3e8:	683b      	ldr	r3, [r7, #0]
 801b3ea:	4313      	orrs	r3, r2
 801b3ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b3ee:	4b8a      	ldr	r3, [pc, #552]	; (801b618 <HAL_RCC_ClockConfig+0x260>)
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	f003 030f 	and.w	r3, r3, #15
 801b3f6:	683a      	ldr	r2, [r7, #0]
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	d001      	beq.n	801b400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801b3fc:	2301      	movs	r3, #1
 801b3fe:	e106      	b.n	801b60e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	f003 0301 	and.w	r3, r3, #1
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d073      	beq.n	801b4f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	685b      	ldr	r3, [r3, #4]
 801b410:	2b03      	cmp	r3, #3
 801b412:	d129      	bne.n	801b468 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b414:	4b81      	ldr	r3, [pc, #516]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d101      	bne.n	801b424 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801b420:	2301      	movs	r3, #1
 801b422:	e0f4      	b.n	801b60e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801b424:	f000 f99c 	bl	801b760 <RCC_GetSysClockFreqFromPLLSource>
 801b428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801b42a:	693b      	ldr	r3, [r7, #16]
 801b42c:	4a7c      	ldr	r2, [pc, #496]	; (801b620 <HAL_RCC_ClockConfig+0x268>)
 801b42e:	4293      	cmp	r3, r2
 801b430:	d93f      	bls.n	801b4b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b432:	4b7a      	ldr	r3, [pc, #488]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b434:	689b      	ldr	r3, [r3, #8]
 801b436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d009      	beq.n	801b452 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b446:	2b00      	cmp	r3, #0
 801b448:	d033      	beq.n	801b4b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d12f      	bne.n	801b4b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b452:	4b72      	ldr	r3, [pc, #456]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b454:	689b      	ldr	r3, [r3, #8]
 801b456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b45a:	4a70      	ldr	r2, [pc, #448]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801b462:	2380      	movs	r3, #128	; 0x80
 801b464:	617b      	str	r3, [r7, #20]
 801b466:	e024      	b.n	801b4b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	685b      	ldr	r3, [r3, #4]
 801b46c:	2b02      	cmp	r3, #2
 801b46e:	d107      	bne.n	801b480 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b470:	4b6a      	ldr	r3, [pc, #424]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d109      	bne.n	801b490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b47c:	2301      	movs	r3, #1
 801b47e:	e0c6      	b.n	801b60e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b480:	4b66      	ldr	r3, [pc, #408]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d101      	bne.n	801b490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b48c:	2301      	movs	r3, #1
 801b48e:	e0be      	b.n	801b60e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801b490:	f000 f8ce 	bl	801b630 <HAL_RCC_GetSysClockFreq>
 801b494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	4a61      	ldr	r2, [pc, #388]	; (801b620 <HAL_RCC_ClockConfig+0x268>)
 801b49a:	4293      	cmp	r3, r2
 801b49c:	d909      	bls.n	801b4b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b49e:	4b5f      	ldr	r3, [pc, #380]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b4a0:	689b      	ldr	r3, [r3, #8]
 801b4a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b4a6:	4a5d      	ldr	r2, [pc, #372]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801b4ae:	2380      	movs	r3, #128	; 0x80
 801b4b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b4b2:	4b5a      	ldr	r3, [pc, #360]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b4b4:	689b      	ldr	r3, [r3, #8]
 801b4b6:	f023 0203 	bic.w	r2, r3, #3
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	685b      	ldr	r3, [r3, #4]
 801b4be:	4957      	ldr	r1, [pc, #348]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b4c0:	4313      	orrs	r3, r2
 801b4c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b4c4:	f7fc f9cc 	bl	8017860 <HAL_GetTick>
 801b4c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b4ca:	e00a      	b.n	801b4e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b4cc:	f7fc f9c8 	bl	8017860 <HAL_GetTick>
 801b4d0:	4602      	mov	r2, r0
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	1ad3      	subs	r3, r2, r3
 801b4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 801b4da:	4293      	cmp	r3, r2
 801b4dc:	d901      	bls.n	801b4e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801b4de:	2303      	movs	r3, #3
 801b4e0:	e095      	b.n	801b60e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b4e2:	4b4e      	ldr	r3, [pc, #312]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b4e4:	689b      	ldr	r3, [r3, #8]
 801b4e6:	f003 020c 	and.w	r2, r3, #12
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	685b      	ldr	r3, [r3, #4]
 801b4ee:	009b      	lsls	r3, r3, #2
 801b4f0:	429a      	cmp	r2, r3
 801b4f2:	d1eb      	bne.n	801b4cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	f003 0302 	and.w	r3, r3, #2
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d023      	beq.n	801b548 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	f003 0304 	and.w	r3, r3, #4
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d005      	beq.n	801b518 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b50c:	4b43      	ldr	r3, [pc, #268]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b50e:	689b      	ldr	r3, [r3, #8]
 801b510:	4a42      	ldr	r2, [pc, #264]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b516:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	f003 0308 	and.w	r3, r3, #8
 801b520:	2b00      	cmp	r3, #0
 801b522:	d007      	beq.n	801b534 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801b524:	4b3d      	ldr	r3, [pc, #244]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b526:	689b      	ldr	r3, [r3, #8]
 801b528:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b52c:	4a3b      	ldr	r2, [pc, #236]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b52e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b534:	4b39      	ldr	r3, [pc, #228]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b536:	689b      	ldr	r3, [r3, #8]
 801b538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	689b      	ldr	r3, [r3, #8]
 801b540:	4936      	ldr	r1, [pc, #216]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b542:	4313      	orrs	r3, r2
 801b544:	608b      	str	r3, [r1, #8]
 801b546:	e008      	b.n	801b55a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801b548:	697b      	ldr	r3, [r7, #20]
 801b54a:	2b80      	cmp	r3, #128	; 0x80
 801b54c:	d105      	bne.n	801b55a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801b54e:	4b33      	ldr	r3, [pc, #204]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b550:	689b      	ldr	r3, [r3, #8]
 801b552:	4a32      	ldr	r2, [pc, #200]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b554:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b558:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b55a:	4b2f      	ldr	r3, [pc, #188]	; (801b618 <HAL_RCC_ClockConfig+0x260>)
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	f003 030f 	and.w	r3, r3, #15
 801b562:	683a      	ldr	r2, [r7, #0]
 801b564:	429a      	cmp	r2, r3
 801b566:	d21d      	bcs.n	801b5a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b568:	4b2b      	ldr	r3, [pc, #172]	; (801b618 <HAL_RCC_ClockConfig+0x260>)
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	f023 020f 	bic.w	r2, r3, #15
 801b570:	4929      	ldr	r1, [pc, #164]	; (801b618 <HAL_RCC_ClockConfig+0x260>)
 801b572:	683b      	ldr	r3, [r7, #0]
 801b574:	4313      	orrs	r3, r2
 801b576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b578:	f7fc f972 	bl	8017860 <HAL_GetTick>
 801b57c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b57e:	e00a      	b.n	801b596 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b580:	f7fc f96e 	bl	8017860 <HAL_GetTick>
 801b584:	4602      	mov	r2, r0
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	1ad3      	subs	r3, r2, r3
 801b58a:	f241 3288 	movw	r2, #5000	; 0x1388
 801b58e:	4293      	cmp	r3, r2
 801b590:	d901      	bls.n	801b596 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801b592:	2303      	movs	r3, #3
 801b594:	e03b      	b.n	801b60e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b596:	4b20      	ldr	r3, [pc, #128]	; (801b618 <HAL_RCC_ClockConfig+0x260>)
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	f003 030f 	and.w	r3, r3, #15
 801b59e:	683a      	ldr	r2, [r7, #0]
 801b5a0:	429a      	cmp	r2, r3
 801b5a2:	d1ed      	bne.n	801b580 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	f003 0304 	and.w	r3, r3, #4
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d008      	beq.n	801b5c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b5b0:	4b1a      	ldr	r3, [pc, #104]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b5b2:	689b      	ldr	r3, [r3, #8]
 801b5b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	68db      	ldr	r3, [r3, #12]
 801b5bc:	4917      	ldr	r1, [pc, #92]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b5be:	4313      	orrs	r3, r2
 801b5c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	f003 0308 	and.w	r3, r3, #8
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d009      	beq.n	801b5e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b5ce:	4b13      	ldr	r3, [pc, #76]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b5d0:	689b      	ldr	r3, [r3, #8]
 801b5d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	691b      	ldr	r3, [r3, #16]
 801b5da:	00db      	lsls	r3, r3, #3
 801b5dc:	490f      	ldr	r1, [pc, #60]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b5de:	4313      	orrs	r3, r2
 801b5e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801b5e2:	f000 f825 	bl	801b630 <HAL_RCC_GetSysClockFreq>
 801b5e6:	4602      	mov	r2, r0
 801b5e8:	4b0c      	ldr	r3, [pc, #48]	; (801b61c <HAL_RCC_ClockConfig+0x264>)
 801b5ea:	689b      	ldr	r3, [r3, #8]
 801b5ec:	091b      	lsrs	r3, r3, #4
 801b5ee:	f003 030f 	and.w	r3, r3, #15
 801b5f2:	490c      	ldr	r1, [pc, #48]	; (801b624 <HAL_RCC_ClockConfig+0x26c>)
 801b5f4:	5ccb      	ldrb	r3, [r1, r3]
 801b5f6:	f003 031f 	and.w	r3, r3, #31
 801b5fa:	fa22 f303 	lsr.w	r3, r2, r3
 801b5fe:	4a0a      	ldr	r2, [pc, #40]	; (801b628 <HAL_RCC_ClockConfig+0x270>)
 801b600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801b602:	4b0a      	ldr	r3, [pc, #40]	; (801b62c <HAL_RCC_ClockConfig+0x274>)
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	4618      	mov	r0, r3
 801b608:	f7fc f8de 	bl	80177c8 <HAL_InitTick>
 801b60c:	4603      	mov	r3, r0
}
 801b60e:	4618      	mov	r0, r3
 801b610:	3718      	adds	r7, #24
 801b612:	46bd      	mov	sp, r7
 801b614:	bd80      	pop	{r7, pc}
 801b616:	bf00      	nop
 801b618:	40022000 	.word	0x40022000
 801b61c:	40021000 	.word	0x40021000
 801b620:	04c4b400 	.word	0x04c4b400
 801b624:	08022130 	.word	0x08022130
 801b628:	20000000 	.word	0x20000000
 801b62c:	20000004 	.word	0x20000004

0801b630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b630:	b480      	push	{r7}
 801b632:	b087      	sub	sp, #28
 801b634:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801b636:	4b2c      	ldr	r3, [pc, #176]	; (801b6e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b638:	689b      	ldr	r3, [r3, #8]
 801b63a:	f003 030c 	and.w	r3, r3, #12
 801b63e:	2b04      	cmp	r3, #4
 801b640:	d102      	bne.n	801b648 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801b642:	4b2a      	ldr	r3, [pc, #168]	; (801b6ec <HAL_RCC_GetSysClockFreq+0xbc>)
 801b644:	613b      	str	r3, [r7, #16]
 801b646:	e047      	b.n	801b6d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801b648:	4b27      	ldr	r3, [pc, #156]	; (801b6e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b64a:	689b      	ldr	r3, [r3, #8]
 801b64c:	f003 030c 	and.w	r3, r3, #12
 801b650:	2b08      	cmp	r3, #8
 801b652:	d102      	bne.n	801b65a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801b654:	4b25      	ldr	r3, [pc, #148]	; (801b6ec <HAL_RCC_GetSysClockFreq+0xbc>)
 801b656:	613b      	str	r3, [r7, #16]
 801b658:	e03e      	b.n	801b6d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801b65a:	4b23      	ldr	r3, [pc, #140]	; (801b6e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b65c:	689b      	ldr	r3, [r3, #8]
 801b65e:	f003 030c 	and.w	r3, r3, #12
 801b662:	2b0c      	cmp	r3, #12
 801b664:	d136      	bne.n	801b6d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801b666:	4b20      	ldr	r3, [pc, #128]	; (801b6e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b668:	68db      	ldr	r3, [r3, #12]
 801b66a:	f003 0303 	and.w	r3, r3, #3
 801b66e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801b670:	4b1d      	ldr	r3, [pc, #116]	; (801b6e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b672:	68db      	ldr	r3, [r3, #12]
 801b674:	091b      	lsrs	r3, r3, #4
 801b676:	f003 030f 	and.w	r3, r3, #15
 801b67a:	3301      	adds	r3, #1
 801b67c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	2b03      	cmp	r3, #3
 801b682:	d10c      	bne.n	801b69e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b684:	4a19      	ldr	r2, [pc, #100]	; (801b6ec <HAL_RCC_GetSysClockFreq+0xbc>)
 801b686:	68bb      	ldr	r3, [r7, #8]
 801b688:	fbb2 f3f3 	udiv	r3, r2, r3
 801b68c:	4a16      	ldr	r2, [pc, #88]	; (801b6e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b68e:	68d2      	ldr	r2, [r2, #12]
 801b690:	0a12      	lsrs	r2, r2, #8
 801b692:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b696:	fb02 f303 	mul.w	r3, r2, r3
 801b69a:	617b      	str	r3, [r7, #20]
      break;
 801b69c:	e00c      	b.n	801b6b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b69e:	4a13      	ldr	r2, [pc, #76]	; (801b6ec <HAL_RCC_GetSysClockFreq+0xbc>)
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6a6:	4a10      	ldr	r2, [pc, #64]	; (801b6e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b6a8:	68d2      	ldr	r2, [r2, #12]
 801b6aa:	0a12      	lsrs	r2, r2, #8
 801b6ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b6b0:	fb02 f303 	mul.w	r3, r2, r3
 801b6b4:	617b      	str	r3, [r7, #20]
      break;
 801b6b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801b6b8:	4b0b      	ldr	r3, [pc, #44]	; (801b6e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b6ba:	68db      	ldr	r3, [r3, #12]
 801b6bc:	0e5b      	lsrs	r3, r3, #25
 801b6be:	f003 0303 	and.w	r3, r3, #3
 801b6c2:	3301      	adds	r3, #1
 801b6c4:	005b      	lsls	r3, r3, #1
 801b6c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801b6c8:	697a      	ldr	r2, [r7, #20]
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6d0:	613b      	str	r3, [r7, #16]
 801b6d2:	e001      	b.n	801b6d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801b6d8:	693b      	ldr	r3, [r7, #16]
}
 801b6da:	4618      	mov	r0, r3
 801b6dc:	371c      	adds	r7, #28
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6e4:	4770      	bx	lr
 801b6e6:	bf00      	nop
 801b6e8:	40021000 	.word	0x40021000
 801b6ec:	00f42400 	.word	0x00f42400

0801b6f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b6f0:	b480      	push	{r7}
 801b6f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b6f4:	4b03      	ldr	r3, [pc, #12]	; (801b704 <HAL_RCC_GetHCLKFreq+0x14>)
 801b6f6:	681b      	ldr	r3, [r3, #0]
}
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	46bd      	mov	sp, r7
 801b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b700:	4770      	bx	lr
 801b702:	bf00      	nop
 801b704:	20000000 	.word	0x20000000

0801b708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b708:	b580      	push	{r7, lr}
 801b70a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801b70c:	f7ff fff0 	bl	801b6f0 <HAL_RCC_GetHCLKFreq>
 801b710:	4602      	mov	r2, r0
 801b712:	4b06      	ldr	r3, [pc, #24]	; (801b72c <HAL_RCC_GetPCLK1Freq+0x24>)
 801b714:	689b      	ldr	r3, [r3, #8]
 801b716:	0a1b      	lsrs	r3, r3, #8
 801b718:	f003 0307 	and.w	r3, r3, #7
 801b71c:	4904      	ldr	r1, [pc, #16]	; (801b730 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b71e:	5ccb      	ldrb	r3, [r1, r3]
 801b720:	f003 031f 	and.w	r3, r3, #31
 801b724:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b728:	4618      	mov	r0, r3
 801b72a:	bd80      	pop	{r7, pc}
 801b72c:	40021000 	.word	0x40021000
 801b730:	08022140 	.word	0x08022140

0801b734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b734:	b580      	push	{r7, lr}
 801b736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801b738:	f7ff ffda 	bl	801b6f0 <HAL_RCC_GetHCLKFreq>
 801b73c:	4602      	mov	r2, r0
 801b73e:	4b06      	ldr	r3, [pc, #24]	; (801b758 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b740:	689b      	ldr	r3, [r3, #8]
 801b742:	0adb      	lsrs	r3, r3, #11
 801b744:	f003 0307 	and.w	r3, r3, #7
 801b748:	4904      	ldr	r1, [pc, #16]	; (801b75c <HAL_RCC_GetPCLK2Freq+0x28>)
 801b74a:	5ccb      	ldrb	r3, [r1, r3]
 801b74c:	f003 031f 	and.w	r3, r3, #31
 801b750:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b754:	4618      	mov	r0, r3
 801b756:	bd80      	pop	{r7, pc}
 801b758:	40021000 	.word	0x40021000
 801b75c:	08022140 	.word	0x08022140

0801b760 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801b760:	b480      	push	{r7}
 801b762:	b087      	sub	sp, #28
 801b764:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801b766:	4b1e      	ldr	r3, [pc, #120]	; (801b7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b768:	68db      	ldr	r3, [r3, #12]
 801b76a:	f003 0303 	and.w	r3, r3, #3
 801b76e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801b770:	4b1b      	ldr	r3, [pc, #108]	; (801b7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b772:	68db      	ldr	r3, [r3, #12]
 801b774:	091b      	lsrs	r3, r3, #4
 801b776:	f003 030f 	and.w	r3, r3, #15
 801b77a:	3301      	adds	r3, #1
 801b77c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801b77e:	693b      	ldr	r3, [r7, #16]
 801b780:	2b03      	cmp	r3, #3
 801b782:	d10c      	bne.n	801b79e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b784:	4a17      	ldr	r2, [pc, #92]	; (801b7e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	fbb2 f3f3 	udiv	r3, r2, r3
 801b78c:	4a14      	ldr	r2, [pc, #80]	; (801b7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b78e:	68d2      	ldr	r2, [r2, #12]
 801b790:	0a12      	lsrs	r2, r2, #8
 801b792:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b796:	fb02 f303 	mul.w	r3, r2, r3
 801b79a:	617b      	str	r3, [r7, #20]
    break;
 801b79c:	e00c      	b.n	801b7b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b79e:	4a11      	ldr	r2, [pc, #68]	; (801b7e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b7a6:	4a0e      	ldr	r2, [pc, #56]	; (801b7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b7a8:	68d2      	ldr	r2, [r2, #12]
 801b7aa:	0a12      	lsrs	r2, r2, #8
 801b7ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b7b0:	fb02 f303 	mul.w	r3, r2, r3
 801b7b4:	617b      	str	r3, [r7, #20]
    break;
 801b7b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801b7b8:	4b09      	ldr	r3, [pc, #36]	; (801b7e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b7ba:	68db      	ldr	r3, [r3, #12]
 801b7bc:	0e5b      	lsrs	r3, r3, #25
 801b7be:	f003 0303 	and.w	r3, r3, #3
 801b7c2:	3301      	adds	r3, #1
 801b7c4:	005b      	lsls	r3, r3, #1
 801b7c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801b7c8:	697a      	ldr	r2, [r7, #20]
 801b7ca:	68bb      	ldr	r3, [r7, #8]
 801b7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801b7d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801b7d2:	687b      	ldr	r3, [r7, #4]
}
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	371c      	adds	r7, #28
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7de:	4770      	bx	lr
 801b7e0:	40021000 	.word	0x40021000
 801b7e4:	00f42400 	.word	0x00f42400

0801b7e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b086      	sub	sp, #24
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b800:	2b00      	cmp	r3, #0
 801b802:	f000 8098 	beq.w	801b936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b806:	2300      	movs	r3, #0
 801b808:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b80a:	4b43      	ldr	r3, [pc, #268]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b80e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b812:	2b00      	cmp	r3, #0
 801b814:	d10d      	bne.n	801b832 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b816:	4b40      	ldr	r3, [pc, #256]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b81a:	4a3f      	ldr	r2, [pc, #252]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b81c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b820:	6593      	str	r3, [r2, #88]	; 0x58
 801b822:	4b3d      	ldr	r3, [pc, #244]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b82a:	60bb      	str	r3, [r7, #8]
 801b82c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801b82e:	2301      	movs	r3, #1
 801b830:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b832:	4b3a      	ldr	r3, [pc, #232]	; (801b91c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	4a39      	ldr	r2, [pc, #228]	; (801b91c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801b838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b83c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b83e:	f7fc f80f 	bl	8017860 <HAL_GetTick>
 801b842:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b844:	e009      	b.n	801b85a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b846:	f7fc f80b 	bl	8017860 <HAL_GetTick>
 801b84a:	4602      	mov	r2, r0
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	1ad3      	subs	r3, r2, r3
 801b850:	2b02      	cmp	r3, #2
 801b852:	d902      	bls.n	801b85a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801b854:	2303      	movs	r3, #3
 801b856:	74fb      	strb	r3, [r7, #19]
        break;
 801b858:	e005      	b.n	801b866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b85a:	4b30      	ldr	r3, [pc, #192]	; (801b91c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b862:	2b00      	cmp	r3, #0
 801b864:	d0ef      	beq.n	801b846 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801b866:	7cfb      	ldrb	r3, [r7, #19]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d159      	bne.n	801b920 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801b86c:	4b2a      	ldr	r3, [pc, #168]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b876:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801b878:	697b      	ldr	r3, [r7, #20]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d01e      	beq.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b882:	697a      	ldr	r2, [r7, #20]
 801b884:	429a      	cmp	r2, r3
 801b886:	d019      	beq.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801b888:	4b23      	ldr	r3, [pc, #140]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b88e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b892:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801b894:	4b20      	ldr	r3, [pc, #128]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b89a:	4a1f      	ldr	r2, [pc, #124]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b89c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b8a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801b8a4:	4b1c      	ldr	r3, [pc, #112]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b8aa:	4a1b      	ldr	r2, [pc, #108]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b8b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801b8b4:	4a18      	ldr	r2, [pc, #96]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8b6:	697b      	ldr	r3, [r7, #20]
 801b8b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801b8bc:	697b      	ldr	r3, [r7, #20]
 801b8be:	f003 0301 	and.w	r3, r3, #1
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d016      	beq.n	801b8f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b8c6:	f7fb ffcb 	bl	8017860 <HAL_GetTick>
 801b8ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b8cc:	e00b      	b.n	801b8e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b8ce:	f7fb ffc7 	bl	8017860 <HAL_GetTick>
 801b8d2:	4602      	mov	r2, r0
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	1ad3      	subs	r3, r2, r3
 801b8d8:	f241 3288 	movw	r2, #5000	; 0x1388
 801b8dc:	4293      	cmp	r3, r2
 801b8de:	d902      	bls.n	801b8e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801b8e0:	2303      	movs	r3, #3
 801b8e2:	74fb      	strb	r3, [r7, #19]
            break;
 801b8e4:	e006      	b.n	801b8f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b8e6:	4b0c      	ldr	r3, [pc, #48]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b8ec:	f003 0302 	and.w	r3, r3, #2
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d0ec      	beq.n	801b8ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801b8f4:	7cfb      	ldrb	r3, [r7, #19]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d10b      	bne.n	801b912 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b8fa:	4b07      	ldr	r3, [pc, #28]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b908:	4903      	ldr	r1, [pc, #12]	; (801b918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b90a:	4313      	orrs	r3, r2
 801b90c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801b910:	e008      	b.n	801b924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801b912:	7cfb      	ldrb	r3, [r7, #19]
 801b914:	74bb      	strb	r3, [r7, #18]
 801b916:	e005      	b.n	801b924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801b918:	40021000 	.word	0x40021000
 801b91c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b920:	7cfb      	ldrb	r3, [r7, #19]
 801b922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801b924:	7c7b      	ldrb	r3, [r7, #17]
 801b926:	2b01      	cmp	r3, #1
 801b928:	d105      	bne.n	801b936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b92a:	4ba7      	ldr	r3, [pc, #668]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b92e:	4aa6      	ldr	r2, [pc, #664]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b934:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	f003 0301 	and.w	r3, r3, #1
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d00a      	beq.n	801b958 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b942:	4ba1      	ldr	r3, [pc, #644]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b948:	f023 0203 	bic.w	r2, r3, #3
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	685b      	ldr	r3, [r3, #4]
 801b950:	499d      	ldr	r1, [pc, #628]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b952:	4313      	orrs	r3, r2
 801b954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	f003 0302 	and.w	r3, r3, #2
 801b960:	2b00      	cmp	r3, #0
 801b962:	d00a      	beq.n	801b97a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801b964:	4b98      	ldr	r3, [pc, #608]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b96a:	f023 020c 	bic.w	r2, r3, #12
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	689b      	ldr	r3, [r3, #8]
 801b972:	4995      	ldr	r1, [pc, #596]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b974:	4313      	orrs	r3, r2
 801b976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	f003 0304 	and.w	r3, r3, #4
 801b982:	2b00      	cmp	r3, #0
 801b984:	d00a      	beq.n	801b99c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801b986:	4b90      	ldr	r3, [pc, #576]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b98c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	68db      	ldr	r3, [r3, #12]
 801b994:	498c      	ldr	r1, [pc, #560]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b996:	4313      	orrs	r3, r2
 801b998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	f003 0308 	and.w	r3, r3, #8
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d00a      	beq.n	801b9be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801b9a8:	4b87      	ldr	r3, [pc, #540]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b9ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	691b      	ldr	r3, [r3, #16]
 801b9b6:	4984      	ldr	r1, [pc, #528]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9b8:	4313      	orrs	r3, r2
 801b9ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	f003 0310 	and.w	r3, r3, #16
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d00a      	beq.n	801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801b9ca:	4b7f      	ldr	r3, [pc, #508]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b9d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	695b      	ldr	r3, [r3, #20]
 801b9d8:	497b      	ldr	r1, [pc, #492]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9da:	4313      	orrs	r3, r2
 801b9dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	f003 0320 	and.w	r3, r3, #32
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d00a      	beq.n	801ba02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b9ec:	4b76      	ldr	r3, [pc, #472]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b9f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	699b      	ldr	r3, [r3, #24]
 801b9fa:	4973      	ldr	r1, [pc, #460]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9fc:	4313      	orrs	r3, r2
 801b9fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d00a      	beq.n	801ba24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801ba0e:	4b6e      	ldr	r3, [pc, #440]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	69db      	ldr	r3, [r3, #28]
 801ba1c:	496a      	ldr	r1, [pc, #424]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba1e:	4313      	orrs	r3, r2
 801ba20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d00a      	beq.n	801ba46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801ba30:	4b65      	ldr	r3, [pc, #404]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	6a1b      	ldr	r3, [r3, #32]
 801ba3e:	4962      	ldr	r1, [pc, #392]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba40:	4313      	orrs	r3, r2
 801ba42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d00a      	beq.n	801ba68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801ba52:	4b5d      	ldr	r3, [pc, #372]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba60:	4959      	ldr	r1, [pc, #356]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba62:	4313      	orrs	r3, r2
 801ba64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d00a      	beq.n	801ba8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ba74:	4b54      	ldr	r3, [pc, #336]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba7a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba82:	4951      	ldr	r1, [pc, #324]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba84:	4313      	orrs	r3, r2
 801ba86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d015      	beq.n	801bac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ba96:	4b4c      	ldr	r3, [pc, #304]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baa4:	4948      	ldr	r1, [pc, #288]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801baa6:	4313      	orrs	r3, r2
 801baa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bab4:	d105      	bne.n	801bac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bab6:	4b44      	ldr	r3, [pc, #272]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bab8:	68db      	ldr	r3, [r3, #12]
 801baba:	4a43      	ldr	r2, [pc, #268]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801babc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bac0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d015      	beq.n	801bafa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801bace:	4b3e      	ldr	r3, [pc, #248]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bad4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801badc:	493a      	ldr	r1, [pc, #232]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bade:	4313      	orrs	r3, r2
 801bae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801baec:	d105      	bne.n	801bafa <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801baee:	4b36      	ldr	r3, [pc, #216]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801baf0:	68db      	ldr	r3, [r3, #12]
 801baf2:	4a35      	ldr	r2, [pc, #212]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801baf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801baf8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d015      	beq.n	801bb32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801bb06:	4b30      	ldr	r3, [pc, #192]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb14:	492c      	ldr	r1, [pc, #176]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb16:	4313      	orrs	r3, r2
 801bb18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bb24:	d105      	bne.n	801bb32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bb26:	4b28      	ldr	r3, [pc, #160]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb28:	68db      	ldr	r3, [r3, #12]
 801bb2a:	4a27      	ldr	r2, [pc, #156]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bb30:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d015      	beq.n	801bb6a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801bb3e:	4b22      	ldr	r3, [pc, #136]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb4c:	491e      	ldr	r1, [pc, #120]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb4e:	4313      	orrs	r3, r2
 801bb50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bb5c:	d105      	bne.n	801bb6a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bb5e:	4b1a      	ldr	r3, [pc, #104]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb60:	68db      	ldr	r3, [r3, #12]
 801bb62:	4a19      	ldr	r2, [pc, #100]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bb68:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d015      	beq.n	801bba2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801bb76:	4b14      	ldr	r3, [pc, #80]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb84:	4910      	ldr	r1, [pc, #64]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb86:	4313      	orrs	r3, r2
 801bb88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bb94:	d105      	bne.n	801bba2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bb96:	4b0c      	ldr	r3, [pc, #48]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb98:	68db      	ldr	r3, [r3, #12]
 801bb9a:	4a0b      	ldr	r2, [pc, #44]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bba0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d018      	beq.n	801bbe0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801bbae:	4b06      	ldr	r3, [pc, #24]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbbc:	4902      	ldr	r1, [pc, #8]	; (801bbc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbbe:	4313      	orrs	r3, r2
 801bbc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	e001      	b.n	801bbcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801bbc8:	40021000 	.word	0x40021000
 801bbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801bbd2:	d105      	bne.n	801bbe0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bbd4:	4b21      	ldr	r3, [pc, #132]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbd6:	68db      	ldr	r3, [r3, #12]
 801bbd8:	4a20      	ldr	r2, [pc, #128]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d015      	beq.n	801bc18 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801bbec:	4b1b      	ldr	r3, [pc, #108]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbf2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bbfa:	4918      	ldr	r1, [pc, #96]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbfc:	4313      	orrs	r3, r2
 801bbfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bc0a:	d105      	bne.n	801bc18 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bc0c:	4b13      	ldr	r3, [pc, #76]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc0e:	68db      	ldr	r3, [r3, #12]
 801bc10:	4a12      	ldr	r2, [pc, #72]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bc16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d015      	beq.n	801bc50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801bc24:	4b0d      	ldr	r3, [pc, #52]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bc2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc32:	490a      	ldr	r1, [pc, #40]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc34:	4313      	orrs	r3, r2
 801bc36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bc42:	d105      	bne.n	801bc50 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bc44:	4b05      	ldr	r3, [pc, #20]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc46:	68db      	ldr	r3, [r3, #12]
 801bc48:	4a04      	ldr	r2, [pc, #16]	; (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bc4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801bc50:	7cbb      	ldrb	r3, [r7, #18]
}
 801bc52:	4618      	mov	r0, r3
 801bc54:	3718      	adds	r7, #24
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}
 801bc5a:	bf00      	nop
 801bc5c:	40021000 	.word	0x40021000

0801bc60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801bc60:	b580      	push	{r7, lr}
 801bc62:	b084      	sub	sp, #16
 801bc64:	af00      	add	r7, sp, #0
 801bc66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d101      	bne.n	801bc72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801bc6e:	2301      	movs	r3, #1
 801bc70:	e09d      	b.n	801bdae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d108      	bne.n	801bc8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	685b      	ldr	r3, [r3, #4]
 801bc7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801bc82:	d009      	beq.n	801bc98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	2200      	movs	r2, #0
 801bc88:	61da      	str	r2, [r3, #28]
 801bc8a:	e005      	b.n	801bc98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	2200      	movs	r2, #0
 801bc90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	2200      	movs	r2, #0
 801bc96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801bca4:	b2db      	uxtb	r3, r3
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d106      	bne.n	801bcb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	2200      	movs	r2, #0
 801bcae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801bcb2:	6878      	ldr	r0, [r7, #4]
 801bcb4:	f7fa fc54 	bl	8016560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	2202      	movs	r2, #2
 801bcbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	681a      	ldr	r2, [r3, #0]
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801bcce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	68db      	ldr	r3, [r3, #12]
 801bcd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801bcd8:	d902      	bls.n	801bce0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801bcda:	2300      	movs	r3, #0
 801bcdc:	60fb      	str	r3, [r7, #12]
 801bcde:	e002      	b.n	801bce6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801bce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801bce4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	68db      	ldr	r3, [r3, #12]
 801bcea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801bcee:	d007      	beq.n	801bd00 <HAL_SPI_Init+0xa0>
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	68db      	ldr	r3, [r3, #12]
 801bcf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801bcf8:	d002      	beq.n	801bd00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	689b      	ldr	r3, [r3, #8]
 801bd0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801bd10:	431a      	orrs	r2, r3
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	691b      	ldr	r3, [r3, #16]
 801bd16:	f003 0302 	and.w	r3, r3, #2
 801bd1a:	431a      	orrs	r2, r3
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	695b      	ldr	r3, [r3, #20]
 801bd20:	f003 0301 	and.w	r3, r3, #1
 801bd24:	431a      	orrs	r2, r3
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	699b      	ldr	r3, [r3, #24]
 801bd2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bd2e:	431a      	orrs	r2, r3
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	69db      	ldr	r3, [r3, #28]
 801bd34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801bd38:	431a      	orrs	r2, r3
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	6a1b      	ldr	r3, [r3, #32]
 801bd3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bd42:	ea42 0103 	orr.w	r1, r2, r3
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	430a      	orrs	r2, r1
 801bd54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	699b      	ldr	r3, [r3, #24]
 801bd5a:	0c1b      	lsrs	r3, r3, #16
 801bd5c:	f003 0204 	and.w	r2, r3, #4
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd64:	f003 0310 	and.w	r3, r3, #16
 801bd68:	431a      	orrs	r2, r3
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd6e:	f003 0308 	and.w	r3, r3, #8
 801bd72:	431a      	orrs	r2, r3
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	68db      	ldr	r3, [r3, #12]
 801bd78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801bd7c:	ea42 0103 	orr.w	r1, r2, r3
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	430a      	orrs	r2, r1
 801bd8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	69da      	ldr	r2, [r3, #28]
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bd9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	2200      	movs	r2, #0
 801bda2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	2201      	movs	r2, #1
 801bda8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801bdac:	2300      	movs	r3, #0
}
 801bdae:	4618      	mov	r0, r3
 801bdb0:	3710      	adds	r7, #16
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	bd80      	pop	{r7, pc}

0801bdb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bdb6:	b580      	push	{r7, lr}
 801bdb8:	b088      	sub	sp, #32
 801bdba:	af00      	add	r7, sp, #0
 801bdbc:	60f8      	str	r0, [r7, #12]
 801bdbe:	60b9      	str	r1, [r7, #8]
 801bdc0:	603b      	str	r3, [r7, #0]
 801bdc2:	4613      	mov	r3, r2
 801bdc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801bdd0:	2b01      	cmp	r3, #1
 801bdd2:	d101      	bne.n	801bdd8 <HAL_SPI_Transmit+0x22>
 801bdd4:	2302      	movs	r3, #2
 801bdd6:	e158      	b.n	801c08a <HAL_SPI_Transmit+0x2d4>
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	2201      	movs	r2, #1
 801bddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801bde0:	f7fb fd3e 	bl	8017860 <HAL_GetTick>
 801bde4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801bde6:	88fb      	ldrh	r3, [r7, #6]
 801bde8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801bdf0:	b2db      	uxtb	r3, r3
 801bdf2:	2b01      	cmp	r3, #1
 801bdf4:	d002      	beq.n	801bdfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801bdf6:	2302      	movs	r3, #2
 801bdf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 801bdfa:	e13d      	b.n	801c078 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801bdfc:	68bb      	ldr	r3, [r7, #8]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d002      	beq.n	801be08 <HAL_SPI_Transmit+0x52>
 801be02:	88fb      	ldrh	r3, [r7, #6]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d102      	bne.n	801be0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801be08:	2301      	movs	r3, #1
 801be0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801be0c:	e134      	b.n	801c078 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	2203      	movs	r2, #3
 801be12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	2200      	movs	r2, #0
 801be1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	68ba      	ldr	r2, [r7, #8]
 801be20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	88fa      	ldrh	r2, [r7, #6]
 801be26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	88fa      	ldrh	r2, [r7, #6]
 801be2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	2200      	movs	r2, #0
 801be32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	2200      	movs	r2, #0
 801be38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	2200      	movs	r2, #0
 801be40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	2200      	movs	r2, #0
 801be48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	2200      	movs	r2, #0
 801be4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	689b      	ldr	r3, [r3, #8]
 801be54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801be58:	d10f      	bne.n	801be7a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	681a      	ldr	r2, [r3, #0]
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801be68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	681b      	ldr	r3, [r3, #0]
 801be6e:	681a      	ldr	r2, [r3, #0]
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801be78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be84:	2b40      	cmp	r3, #64	; 0x40
 801be86:	d007      	beq.n	801be98 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	681a      	ldr	r2, [r3, #0]
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801be96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	68db      	ldr	r3, [r3, #12]
 801be9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801bea0:	d94b      	bls.n	801bf3a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	685b      	ldr	r3, [r3, #4]
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d002      	beq.n	801beb0 <HAL_SPI_Transmit+0xfa>
 801beaa:	8afb      	ldrh	r3, [r7, #22]
 801beac:	2b01      	cmp	r3, #1
 801beae:	d13e      	bne.n	801bf2e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801beb4:	881a      	ldrh	r2, [r3, #0]
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bec0:	1c9a      	adds	r2, r3, #2
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801beca:	b29b      	uxth	r3, r3
 801becc:	3b01      	subs	r3, #1
 801bece:	b29a      	uxth	r2, r3
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801bed4:	e02b      	b.n	801bf2e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	689b      	ldr	r3, [r3, #8]
 801bedc:	f003 0302 	and.w	r3, r3, #2
 801bee0:	2b02      	cmp	r3, #2
 801bee2:	d112      	bne.n	801bf0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bee8:	881a      	ldrh	r2, [r3, #0]
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bef4:	1c9a      	adds	r2, r3, #2
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801befe:	b29b      	uxth	r3, r3
 801bf00:	3b01      	subs	r3, #1
 801bf02:	b29a      	uxth	r2, r3
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	87da      	strh	r2, [r3, #62]	; 0x3e
 801bf08:	e011      	b.n	801bf2e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801bf0a:	f7fb fca9 	bl	8017860 <HAL_GetTick>
 801bf0e:	4602      	mov	r2, r0
 801bf10:	69bb      	ldr	r3, [r7, #24]
 801bf12:	1ad3      	subs	r3, r2, r3
 801bf14:	683a      	ldr	r2, [r7, #0]
 801bf16:	429a      	cmp	r2, r3
 801bf18:	d803      	bhi.n	801bf22 <HAL_SPI_Transmit+0x16c>
 801bf1a:	683b      	ldr	r3, [r7, #0]
 801bf1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf20:	d102      	bne.n	801bf28 <HAL_SPI_Transmit+0x172>
 801bf22:	683b      	ldr	r3, [r7, #0]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d102      	bne.n	801bf2e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801bf28:	2303      	movs	r3, #3
 801bf2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801bf2c:	e0a4      	b.n	801c078 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801bf2e:	68fb      	ldr	r3, [r7, #12]
 801bf30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d1ce      	bne.n	801bed6 <HAL_SPI_Transmit+0x120>
 801bf38:	e07c      	b.n	801c034 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801bf3a:	68fb      	ldr	r3, [r7, #12]
 801bf3c:	685b      	ldr	r3, [r3, #4]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d002      	beq.n	801bf48 <HAL_SPI_Transmit+0x192>
 801bf42:	8afb      	ldrh	r3, [r7, #22]
 801bf44:	2b01      	cmp	r3, #1
 801bf46:	d170      	bne.n	801c02a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf4c:	b29b      	uxth	r3, r3
 801bf4e:	2b01      	cmp	r3, #1
 801bf50:	d912      	bls.n	801bf78 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf56:	881a      	ldrh	r2, [r3, #0]
 801bf58:	68fb      	ldr	r3, [r7, #12]
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf62:	1c9a      	adds	r2, r3, #2
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801bf68:	68fb      	ldr	r3, [r7, #12]
 801bf6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf6c:	b29b      	uxth	r3, r3
 801bf6e:	3b02      	subs	r3, #2
 801bf70:	b29a      	uxth	r2, r3
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	87da      	strh	r2, [r3, #62]	; 0x3e
 801bf76:	e058      	b.n	801c02a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	330c      	adds	r3, #12
 801bf82:	7812      	ldrb	r2, [r2, #0]
 801bf84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf8a:	1c5a      	adds	r2, r3, #1
 801bf8c:	68fb      	ldr	r3, [r7, #12]
 801bf8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf94:	b29b      	uxth	r3, r3
 801bf96:	3b01      	subs	r3, #1
 801bf98:	b29a      	uxth	r2, r3
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801bf9e:	e044      	b.n	801c02a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	689b      	ldr	r3, [r3, #8]
 801bfa6:	f003 0302 	and.w	r3, r3, #2
 801bfaa:	2b02      	cmp	r3, #2
 801bfac:	d12b      	bne.n	801c006 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bfb2:	b29b      	uxth	r3, r3
 801bfb4:	2b01      	cmp	r3, #1
 801bfb6:	d912      	bls.n	801bfde <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801bfb8:	68fb      	ldr	r3, [r7, #12]
 801bfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bfbc:	881a      	ldrh	r2, [r3, #0]
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bfc8:	1c9a      	adds	r2, r3, #2
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bfd2:	b29b      	uxth	r3, r3
 801bfd4:	3b02      	subs	r3, #2
 801bfd6:	b29a      	uxth	r2, r3
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	87da      	strh	r2, [r3, #62]	; 0x3e
 801bfdc:	e025      	b.n	801c02a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	330c      	adds	r3, #12
 801bfe8:	7812      	ldrb	r2, [r2, #0]
 801bfea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bff0:	1c5a      	adds	r2, r3, #1
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801bff6:	68fb      	ldr	r3, [r7, #12]
 801bff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bffa:	b29b      	uxth	r3, r3
 801bffc:	3b01      	subs	r3, #1
 801bffe:	b29a      	uxth	r2, r3
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c004:	e011      	b.n	801c02a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c006:	f7fb fc2b 	bl	8017860 <HAL_GetTick>
 801c00a:	4602      	mov	r2, r0
 801c00c:	69bb      	ldr	r3, [r7, #24]
 801c00e:	1ad3      	subs	r3, r2, r3
 801c010:	683a      	ldr	r2, [r7, #0]
 801c012:	429a      	cmp	r2, r3
 801c014:	d803      	bhi.n	801c01e <HAL_SPI_Transmit+0x268>
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c01c:	d102      	bne.n	801c024 <HAL_SPI_Transmit+0x26e>
 801c01e:	683b      	ldr	r3, [r7, #0]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d102      	bne.n	801c02a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801c024:	2303      	movs	r3, #3
 801c026:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c028:	e026      	b.n	801c078 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c02e:	b29b      	uxth	r3, r3
 801c030:	2b00      	cmp	r3, #0
 801c032:	d1b5      	bne.n	801bfa0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c034:	69ba      	ldr	r2, [r7, #24]
 801c036:	6839      	ldr	r1, [r7, #0]
 801c038:	68f8      	ldr	r0, [r7, #12]
 801c03a:	f000 fce3 	bl	801ca04 <SPI_EndRxTxTransaction>
 801c03e:	4603      	mov	r3, r0
 801c040:	2b00      	cmp	r3, #0
 801c042:	d002      	beq.n	801c04a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	2220      	movs	r2, #32
 801c048:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	689b      	ldr	r3, [r3, #8]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d10a      	bne.n	801c068 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c052:	2300      	movs	r3, #0
 801c054:	613b      	str	r3, [r7, #16]
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	68db      	ldr	r3, [r3, #12]
 801c05c:	613b      	str	r3, [r7, #16]
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	689b      	ldr	r3, [r3, #8]
 801c064:	613b      	str	r3, [r7, #16]
 801c066:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d002      	beq.n	801c076 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801c070:	2301      	movs	r3, #1
 801c072:	77fb      	strb	r3, [r7, #31]
 801c074:	e000      	b.n	801c078 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801c076:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	2201      	movs	r2, #1
 801c07c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	2200      	movs	r2, #0
 801c084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c088:	7ffb      	ldrb	r3, [r7, #31]
}
 801c08a:	4618      	mov	r0, r3
 801c08c:	3720      	adds	r7, #32
 801c08e:	46bd      	mov	sp, r7
 801c090:	bd80      	pop	{r7, pc}

0801c092 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c092:	b580      	push	{r7, lr}
 801c094:	b088      	sub	sp, #32
 801c096:	af02      	add	r7, sp, #8
 801c098:	60f8      	str	r0, [r7, #12]
 801c09a:	60b9      	str	r1, [r7, #8]
 801c09c:	603b      	str	r3, [r7, #0]
 801c09e:	4613      	mov	r3, r2
 801c0a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	685b      	ldr	r3, [r3, #4]
 801c0aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c0ae:	d112      	bne.n	801c0d6 <HAL_SPI_Receive+0x44>
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	689b      	ldr	r3, [r3, #8]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d10e      	bne.n	801c0d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	2204      	movs	r2, #4
 801c0bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c0c0:	88fa      	ldrh	r2, [r7, #6]
 801c0c2:	683b      	ldr	r3, [r7, #0]
 801c0c4:	9300      	str	r3, [sp, #0]
 801c0c6:	4613      	mov	r3, r2
 801c0c8:	68ba      	ldr	r2, [r7, #8]
 801c0ca:	68b9      	ldr	r1, [r7, #8]
 801c0cc:	68f8      	ldr	r0, [r7, #12]
 801c0ce:	f000 f910 	bl	801c2f2 <HAL_SPI_TransmitReceive>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	e109      	b.n	801c2ea <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c0dc:	2b01      	cmp	r3, #1
 801c0de:	d101      	bne.n	801c0e4 <HAL_SPI_Receive+0x52>
 801c0e0:	2302      	movs	r3, #2
 801c0e2:	e102      	b.n	801c2ea <HAL_SPI_Receive+0x258>
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	2201      	movs	r2, #1
 801c0e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c0ec:	f7fb fbb8 	bl	8017860 <HAL_GetTick>
 801c0f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c0f8:	b2db      	uxtb	r3, r3
 801c0fa:	2b01      	cmp	r3, #1
 801c0fc:	d002      	beq.n	801c104 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c0fe:	2302      	movs	r3, #2
 801c100:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c102:	e0e9      	b.n	801c2d8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801c104:	68bb      	ldr	r3, [r7, #8]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d002      	beq.n	801c110 <HAL_SPI_Receive+0x7e>
 801c10a:	88fb      	ldrh	r3, [r7, #6]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d102      	bne.n	801c116 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c110:	2301      	movs	r3, #1
 801c112:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c114:	e0e0      	b.n	801c2d8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c116:	68fb      	ldr	r3, [r7, #12]
 801c118:	2204      	movs	r2, #4
 801c11a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	2200      	movs	r2, #0
 801c122:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	68ba      	ldr	r2, [r7, #8]
 801c128:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	88fa      	ldrh	r2, [r7, #6]
 801c12e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	88fa      	ldrh	r2, [r7, #6]
 801c136:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	2200      	movs	r2, #0
 801c13e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	2200      	movs	r2, #0
 801c144:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801c146:	68fb      	ldr	r3, [r7, #12]
 801c148:	2200      	movs	r2, #0
 801c14a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	2200      	movs	r2, #0
 801c150:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	2200      	movs	r2, #0
 801c156:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	68db      	ldr	r3, [r3, #12]
 801c15c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c160:	d908      	bls.n	801c174 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	685a      	ldr	r2, [r3, #4]
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c170:	605a      	str	r2, [r3, #4]
 801c172:	e007      	b.n	801c184 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	685a      	ldr	r2, [r3, #4]
 801c17a:	68fb      	ldr	r3, [r7, #12]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c182:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	689b      	ldr	r3, [r3, #8]
 801c188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c18c:	d10f      	bne.n	801c1ae <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	681a      	ldr	r2, [r3, #0]
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c19c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	681a      	ldr	r2, [r3, #0]
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c1ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c1b8:	2b40      	cmp	r3, #64	; 0x40
 801c1ba:	d007      	beq.n	801c1cc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	681a      	ldr	r2, [r3, #0]
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c1ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	68db      	ldr	r3, [r3, #12]
 801c1d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c1d4:	d867      	bhi.n	801c2a6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c1d6:	e030      	b.n	801c23a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	681b      	ldr	r3, [r3, #0]
 801c1dc:	689b      	ldr	r3, [r3, #8]
 801c1de:	f003 0301 	and.w	r3, r3, #1
 801c1e2:	2b01      	cmp	r3, #1
 801c1e4:	d117      	bne.n	801c216 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	f103 020c 	add.w	r2, r3, #12
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1f2:	7812      	ldrb	r2, [r2, #0]
 801c1f4:	b2d2      	uxtb	r2, r2
 801c1f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1fc:	1c5a      	adds	r2, r3, #1
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c208:	b29b      	uxth	r3, r3
 801c20a:	3b01      	subs	r3, #1
 801c20c:	b29a      	uxth	r2, r3
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c214:	e011      	b.n	801c23a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c216:	f7fb fb23 	bl	8017860 <HAL_GetTick>
 801c21a:	4602      	mov	r2, r0
 801c21c:	693b      	ldr	r3, [r7, #16]
 801c21e:	1ad3      	subs	r3, r2, r3
 801c220:	683a      	ldr	r2, [r7, #0]
 801c222:	429a      	cmp	r2, r3
 801c224:	d803      	bhi.n	801c22e <HAL_SPI_Receive+0x19c>
 801c226:	683b      	ldr	r3, [r7, #0]
 801c228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c22c:	d102      	bne.n	801c234 <HAL_SPI_Receive+0x1a2>
 801c22e:	683b      	ldr	r3, [r7, #0]
 801c230:	2b00      	cmp	r3, #0
 801c232:	d102      	bne.n	801c23a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801c234:	2303      	movs	r3, #3
 801c236:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c238:	e04e      	b.n	801c2d8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c240:	b29b      	uxth	r3, r3
 801c242:	2b00      	cmp	r3, #0
 801c244:	d1c8      	bne.n	801c1d8 <HAL_SPI_Receive+0x146>
 801c246:	e034      	b.n	801c2b2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	689b      	ldr	r3, [r3, #8]
 801c24e:	f003 0301 	and.w	r3, r3, #1
 801c252:	2b01      	cmp	r3, #1
 801c254:	d115      	bne.n	801c282 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	68da      	ldr	r2, [r3, #12]
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c260:	b292      	uxth	r2, r2
 801c262:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c264:	68fb      	ldr	r3, [r7, #12]
 801c266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c268:	1c9a      	adds	r2, r3, #2
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c26e:	68fb      	ldr	r3, [r7, #12]
 801c270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c274:	b29b      	uxth	r3, r3
 801c276:	3b01      	subs	r3, #1
 801c278:	b29a      	uxth	r2, r3
 801c27a:	68fb      	ldr	r3, [r7, #12]
 801c27c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c280:	e011      	b.n	801c2a6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c282:	f7fb faed 	bl	8017860 <HAL_GetTick>
 801c286:	4602      	mov	r2, r0
 801c288:	693b      	ldr	r3, [r7, #16]
 801c28a:	1ad3      	subs	r3, r2, r3
 801c28c:	683a      	ldr	r2, [r7, #0]
 801c28e:	429a      	cmp	r2, r3
 801c290:	d803      	bhi.n	801c29a <HAL_SPI_Receive+0x208>
 801c292:	683b      	ldr	r3, [r7, #0]
 801c294:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c298:	d102      	bne.n	801c2a0 <HAL_SPI_Receive+0x20e>
 801c29a:	683b      	ldr	r3, [r7, #0]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d102      	bne.n	801c2a6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801c2a0:	2303      	movs	r3, #3
 801c2a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c2a4:	e018      	b.n	801c2d8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c2ac:	b29b      	uxth	r3, r3
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d1ca      	bne.n	801c248 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c2b2:	693a      	ldr	r2, [r7, #16]
 801c2b4:	6839      	ldr	r1, [r7, #0]
 801c2b6:	68f8      	ldr	r0, [r7, #12]
 801c2b8:	f000 fb4c 	bl	801c954 <SPI_EndRxTransaction>
 801c2bc:	4603      	mov	r3, r0
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d002      	beq.n	801c2c8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	2220      	movs	r2, #32
 801c2c6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d002      	beq.n	801c2d6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801c2d0:	2301      	movs	r3, #1
 801c2d2:	75fb      	strb	r3, [r7, #23]
 801c2d4:	e000      	b.n	801c2d8 <HAL_SPI_Receive+0x246>
  }

error :
 801c2d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	2201      	movs	r2, #1
 801c2dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	2200      	movs	r2, #0
 801c2e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	3718      	adds	r7, #24
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	bd80      	pop	{r7, pc}

0801c2f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c2f2:	b580      	push	{r7, lr}
 801c2f4:	b08a      	sub	sp, #40	; 0x28
 801c2f6:	af00      	add	r7, sp, #0
 801c2f8:	60f8      	str	r0, [r7, #12]
 801c2fa:	60b9      	str	r1, [r7, #8]
 801c2fc:	607a      	str	r2, [r7, #4]
 801c2fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c300:	2301      	movs	r3, #1
 801c302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c304:	2300      	movs	r3, #0
 801c306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c310:	2b01      	cmp	r3, #1
 801c312:	d101      	bne.n	801c318 <HAL_SPI_TransmitReceive+0x26>
 801c314:	2302      	movs	r3, #2
 801c316:	e1fb      	b.n	801c710 <HAL_SPI_TransmitReceive+0x41e>
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	2201      	movs	r2, #1
 801c31c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c320:	f7fb fa9e 	bl	8017860 <HAL_GetTick>
 801c324:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c32c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	685b      	ldr	r3, [r3, #4]
 801c332:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801c334:	887b      	ldrh	r3, [r7, #2]
 801c336:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801c338:	887b      	ldrh	r3, [r7, #2]
 801c33a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c33c:	7efb      	ldrb	r3, [r7, #27]
 801c33e:	2b01      	cmp	r3, #1
 801c340:	d00e      	beq.n	801c360 <HAL_SPI_TransmitReceive+0x6e>
 801c342:	697b      	ldr	r3, [r7, #20]
 801c344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c348:	d106      	bne.n	801c358 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	689b      	ldr	r3, [r3, #8]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d102      	bne.n	801c358 <HAL_SPI_TransmitReceive+0x66>
 801c352:	7efb      	ldrb	r3, [r7, #27]
 801c354:	2b04      	cmp	r3, #4
 801c356:	d003      	beq.n	801c360 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801c358:	2302      	movs	r3, #2
 801c35a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c35e:	e1cd      	b.n	801c6fc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c360:	68bb      	ldr	r3, [r7, #8]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d005      	beq.n	801c372 <HAL_SPI_TransmitReceive+0x80>
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d002      	beq.n	801c372 <HAL_SPI_TransmitReceive+0x80>
 801c36c:	887b      	ldrh	r3, [r7, #2]
 801c36e:	2b00      	cmp	r3, #0
 801c370:	d103      	bne.n	801c37a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801c372:	2301      	movs	r3, #1
 801c374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c378:	e1c0      	b.n	801c6fc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c380:	b2db      	uxtb	r3, r3
 801c382:	2b04      	cmp	r3, #4
 801c384:	d003      	beq.n	801c38e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	2205      	movs	r2, #5
 801c38a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	2200      	movs	r2, #0
 801c392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	687a      	ldr	r2, [r7, #4]
 801c398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	887a      	ldrh	r2, [r7, #2]
 801c39e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	887a      	ldrh	r2, [r7, #2]
 801c3a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	68ba      	ldr	r2, [r7, #8]
 801c3ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	887a      	ldrh	r2, [r7, #2]
 801c3b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	887a      	ldrh	r2, [r7, #2]
 801c3ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	2200      	movs	r2, #0
 801c3c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	2200      	movs	r2, #0
 801c3c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	68db      	ldr	r3, [r3, #12]
 801c3cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c3d0:	d802      	bhi.n	801c3d8 <HAL_SPI_TransmitReceive+0xe6>
 801c3d2:	8a3b      	ldrh	r3, [r7, #16]
 801c3d4:	2b01      	cmp	r3, #1
 801c3d6:	d908      	bls.n	801c3ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	685a      	ldr	r2, [r3, #4]
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c3e6:	605a      	str	r2, [r3, #4]
 801c3e8:	e007      	b.n	801c3fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c3ea:	68fb      	ldr	r3, [r7, #12]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	685a      	ldr	r2, [r3, #4]
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c3f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c404:	2b40      	cmp	r3, #64	; 0x40
 801c406:	d007      	beq.n	801c418 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	681a      	ldr	r2, [r3, #0]
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	68db      	ldr	r3, [r3, #12]
 801c41c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c420:	d97c      	bls.n	801c51c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	685b      	ldr	r3, [r3, #4]
 801c426:	2b00      	cmp	r3, #0
 801c428:	d002      	beq.n	801c430 <HAL_SPI_TransmitReceive+0x13e>
 801c42a:	8a7b      	ldrh	r3, [r7, #18]
 801c42c:	2b01      	cmp	r3, #1
 801c42e:	d169      	bne.n	801c504 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c434:	881a      	ldrh	r2, [r3, #0]
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c440:	1c9a      	adds	r2, r3, #2
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c44a:	b29b      	uxth	r3, r3
 801c44c:	3b01      	subs	r3, #1
 801c44e:	b29a      	uxth	r2, r3
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c454:	e056      	b.n	801c504 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	689b      	ldr	r3, [r3, #8]
 801c45c:	f003 0302 	and.w	r3, r3, #2
 801c460:	2b02      	cmp	r3, #2
 801c462:	d11b      	bne.n	801c49c <HAL_SPI_TransmitReceive+0x1aa>
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c468:	b29b      	uxth	r3, r3
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d016      	beq.n	801c49c <HAL_SPI_TransmitReceive+0x1aa>
 801c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c470:	2b01      	cmp	r3, #1
 801c472:	d113      	bne.n	801c49c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c478:	881a      	ldrh	r2, [r3, #0]
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c484:	1c9a      	adds	r2, r3, #2
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c48e:	b29b      	uxth	r3, r3
 801c490:	3b01      	subs	r3, #1
 801c492:	b29a      	uxth	r2, r3
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c498:	2300      	movs	r3, #0
 801c49a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	689b      	ldr	r3, [r3, #8]
 801c4a2:	f003 0301 	and.w	r3, r3, #1
 801c4a6:	2b01      	cmp	r3, #1
 801c4a8:	d11c      	bne.n	801c4e4 <HAL_SPI_TransmitReceive+0x1f2>
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c4b0:	b29b      	uxth	r3, r3
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d016      	beq.n	801c4e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	68da      	ldr	r2, [r3, #12]
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4c0:	b292      	uxth	r2, r2
 801c4c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4c8:	1c9a      	adds	r2, r3, #2
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c4d4:	b29b      	uxth	r3, r3
 801c4d6:	3b01      	subs	r3, #1
 801c4d8:	b29a      	uxth	r2, r3
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c4e0:	2301      	movs	r3, #1
 801c4e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c4e4:	f7fb f9bc 	bl	8017860 <HAL_GetTick>
 801c4e8:	4602      	mov	r2, r0
 801c4ea:	69fb      	ldr	r3, [r7, #28]
 801c4ec:	1ad3      	subs	r3, r2, r3
 801c4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c4f0:	429a      	cmp	r2, r3
 801c4f2:	d807      	bhi.n	801c504 <HAL_SPI_TransmitReceive+0x212>
 801c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4fa:	d003      	beq.n	801c504 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801c4fc:	2303      	movs	r3, #3
 801c4fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c502:	e0fb      	b.n	801c6fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c508:	b29b      	uxth	r3, r3
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d1a3      	bne.n	801c456 <HAL_SPI_TransmitReceive+0x164>
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c514:	b29b      	uxth	r3, r3
 801c516:	2b00      	cmp	r3, #0
 801c518:	d19d      	bne.n	801c456 <HAL_SPI_TransmitReceive+0x164>
 801c51a:	e0df      	b.n	801c6dc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	685b      	ldr	r3, [r3, #4]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d003      	beq.n	801c52c <HAL_SPI_TransmitReceive+0x23a>
 801c524:	8a7b      	ldrh	r3, [r7, #18]
 801c526:	2b01      	cmp	r3, #1
 801c528:	f040 80cb 	bne.w	801c6c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c530:	b29b      	uxth	r3, r3
 801c532:	2b01      	cmp	r3, #1
 801c534:	d912      	bls.n	801c55c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c53a:	881a      	ldrh	r2, [r3, #0]
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c546:	1c9a      	adds	r2, r3, #2
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c550:	b29b      	uxth	r3, r3
 801c552:	3b02      	subs	r3, #2
 801c554:	b29a      	uxth	r2, r3
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c55a:	e0b2      	b.n	801c6c2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	330c      	adds	r3, #12
 801c566:	7812      	ldrb	r2, [r2, #0]
 801c568:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c56e:	1c5a      	adds	r2, r3, #1
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c578:	b29b      	uxth	r3, r3
 801c57a:	3b01      	subs	r3, #1
 801c57c:	b29a      	uxth	r2, r3
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c582:	e09e      	b.n	801c6c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	689b      	ldr	r3, [r3, #8]
 801c58a:	f003 0302 	and.w	r3, r3, #2
 801c58e:	2b02      	cmp	r3, #2
 801c590:	d134      	bne.n	801c5fc <HAL_SPI_TransmitReceive+0x30a>
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c596:	b29b      	uxth	r3, r3
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d02f      	beq.n	801c5fc <HAL_SPI_TransmitReceive+0x30a>
 801c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c59e:	2b01      	cmp	r3, #1
 801c5a0:	d12c      	bne.n	801c5fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5a6:	b29b      	uxth	r3, r3
 801c5a8:	2b01      	cmp	r3, #1
 801c5aa:	d912      	bls.n	801c5d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5b0:	881a      	ldrh	r2, [r3, #0]
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5bc:	1c9a      	adds	r2, r3, #2
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5c6:	b29b      	uxth	r3, r3
 801c5c8:	3b02      	subs	r3, #2
 801c5ca:	b29a      	uxth	r2, r3
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c5d0:	e012      	b.n	801c5f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	330c      	adds	r3, #12
 801c5dc:	7812      	ldrb	r2, [r2, #0]
 801c5de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5e4:	1c5a      	adds	r2, r3, #1
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5ee:	b29b      	uxth	r3, r3
 801c5f0:	3b01      	subs	r3, #1
 801c5f2:	b29a      	uxth	r2, r3
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	689b      	ldr	r3, [r3, #8]
 801c602:	f003 0301 	and.w	r3, r3, #1
 801c606:	2b01      	cmp	r3, #1
 801c608:	d148      	bne.n	801c69c <HAL_SPI_TransmitReceive+0x3aa>
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c610:	b29b      	uxth	r3, r3
 801c612:	2b00      	cmp	r3, #0
 801c614:	d042      	beq.n	801c69c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c61c:	b29b      	uxth	r3, r3
 801c61e:	2b01      	cmp	r3, #1
 801c620:	d923      	bls.n	801c66a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	68da      	ldr	r2, [r3, #12]
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c62c:	b292      	uxth	r2, r2
 801c62e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c634:	1c9a      	adds	r2, r3, #2
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c640:	b29b      	uxth	r3, r3
 801c642:	3b02      	subs	r3, #2
 801c644:	b29a      	uxth	r2, r3
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c652:	b29b      	uxth	r3, r3
 801c654:	2b01      	cmp	r3, #1
 801c656:	d81f      	bhi.n	801c698 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	685a      	ldr	r2, [r3, #4]
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c666:	605a      	str	r2, [r3, #4]
 801c668:	e016      	b.n	801c698 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c66a:	68fb      	ldr	r3, [r7, #12]
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	f103 020c 	add.w	r2, r3, #12
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c676:	7812      	ldrb	r2, [r2, #0]
 801c678:	b2d2      	uxtb	r2, r2
 801c67a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c680:	1c5a      	adds	r2, r3, #1
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c68c:	b29b      	uxth	r3, r3
 801c68e:	3b01      	subs	r3, #1
 801c690:	b29a      	uxth	r2, r3
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c698:	2301      	movs	r3, #1
 801c69a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c69c:	f7fb f8e0 	bl	8017860 <HAL_GetTick>
 801c6a0:	4602      	mov	r2, r0
 801c6a2:	69fb      	ldr	r3, [r7, #28]
 801c6a4:	1ad3      	subs	r3, r2, r3
 801c6a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c6a8:	429a      	cmp	r2, r3
 801c6aa:	d803      	bhi.n	801c6b4 <HAL_SPI_TransmitReceive+0x3c2>
 801c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6b2:	d102      	bne.n	801c6ba <HAL_SPI_TransmitReceive+0x3c8>
 801c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d103      	bne.n	801c6c2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801c6ba:	2303      	movs	r3, #3
 801c6bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c6c0:	e01c      	b.n	801c6fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c6c6:	b29b      	uxth	r3, r3
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	f47f af5b 	bne.w	801c584 <HAL_SPI_TransmitReceive+0x292>
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c6d4:	b29b      	uxth	r3, r3
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	f47f af54 	bne.w	801c584 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c6dc:	69fa      	ldr	r2, [r7, #28]
 801c6de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c6e0:	68f8      	ldr	r0, [r7, #12]
 801c6e2:	f000 f98f 	bl	801ca04 <SPI_EndRxTxTransaction>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d006      	beq.n	801c6fa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801c6ec:	2301      	movs	r3, #1
 801c6ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	2220      	movs	r2, #32
 801c6f6:	661a      	str	r2, [r3, #96]	; 0x60
 801c6f8:	e000      	b.n	801c6fc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801c6fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	2201      	movs	r2, #1
 801c700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	2200      	movs	r2, #0
 801c708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c70c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801c710:	4618      	mov	r0, r3
 801c712:	3728      	adds	r7, #40	; 0x28
 801c714:	46bd      	mov	sp, r7
 801c716:	bd80      	pop	{r7, pc}

0801c718 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b088      	sub	sp, #32
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	60f8      	str	r0, [r7, #12]
 801c720:	60b9      	str	r1, [r7, #8]
 801c722:	603b      	str	r3, [r7, #0]
 801c724:	4613      	mov	r3, r2
 801c726:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801c728:	f7fb f89a 	bl	8017860 <HAL_GetTick>
 801c72c:	4602      	mov	r2, r0
 801c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c730:	1a9b      	subs	r3, r3, r2
 801c732:	683a      	ldr	r2, [r7, #0]
 801c734:	4413      	add	r3, r2
 801c736:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801c738:	f7fb f892 	bl	8017860 <HAL_GetTick>
 801c73c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801c73e:	4b39      	ldr	r3, [pc, #228]	; (801c824 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	015b      	lsls	r3, r3, #5
 801c744:	0d1b      	lsrs	r3, r3, #20
 801c746:	69fa      	ldr	r2, [r7, #28]
 801c748:	fb02 f303 	mul.w	r3, r2, r3
 801c74c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c74e:	e054      	b.n	801c7fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801c750:	683b      	ldr	r3, [r7, #0]
 801c752:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c756:	d050      	beq.n	801c7fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801c758:	f7fb f882 	bl	8017860 <HAL_GetTick>
 801c75c:	4602      	mov	r2, r0
 801c75e:	69bb      	ldr	r3, [r7, #24]
 801c760:	1ad3      	subs	r3, r2, r3
 801c762:	69fa      	ldr	r2, [r7, #28]
 801c764:	429a      	cmp	r2, r3
 801c766:	d902      	bls.n	801c76e <SPI_WaitFlagStateUntilTimeout+0x56>
 801c768:	69fb      	ldr	r3, [r7, #28]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d13d      	bne.n	801c7ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	685a      	ldr	r2, [r3, #4]
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c77c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	685b      	ldr	r3, [r3, #4]
 801c782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c786:	d111      	bne.n	801c7ac <SPI_WaitFlagStateUntilTimeout+0x94>
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	689b      	ldr	r3, [r3, #8]
 801c78c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c790:	d004      	beq.n	801c79c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	689b      	ldr	r3, [r3, #8]
 801c796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c79a:	d107      	bne.n	801c7ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	681a      	ldr	r2, [r3, #0]
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c7aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c7b4:	d10f      	bne.n	801c7d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	681a      	ldr	r2, [r3, #0]
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c7c4:	601a      	str	r2, [r3, #0]
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	681a      	ldr	r2, [r3, #0]
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c7d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	2201      	movs	r2, #1
 801c7da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	2200      	movs	r2, #0
 801c7e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801c7e6:	2303      	movs	r3, #3
 801c7e8:	e017      	b.n	801c81a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801c7ea:	697b      	ldr	r3, [r7, #20]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d101      	bne.n	801c7f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801c7f4:	697b      	ldr	r3, [r7, #20]
 801c7f6:	3b01      	subs	r3, #1
 801c7f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	689a      	ldr	r2, [r3, #8]
 801c800:	68bb      	ldr	r3, [r7, #8]
 801c802:	4013      	ands	r3, r2
 801c804:	68ba      	ldr	r2, [r7, #8]
 801c806:	429a      	cmp	r2, r3
 801c808:	bf0c      	ite	eq
 801c80a:	2301      	moveq	r3, #1
 801c80c:	2300      	movne	r3, #0
 801c80e:	b2db      	uxtb	r3, r3
 801c810:	461a      	mov	r2, r3
 801c812:	79fb      	ldrb	r3, [r7, #7]
 801c814:	429a      	cmp	r2, r3
 801c816:	d19b      	bne.n	801c750 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801c818:	2300      	movs	r3, #0
}
 801c81a:	4618      	mov	r0, r3
 801c81c:	3720      	adds	r7, #32
 801c81e:	46bd      	mov	sp, r7
 801c820:	bd80      	pop	{r7, pc}
 801c822:	bf00      	nop
 801c824:	20000000 	.word	0x20000000

0801c828 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c828:	b580      	push	{r7, lr}
 801c82a:	b08a      	sub	sp, #40	; 0x28
 801c82c:	af00      	add	r7, sp, #0
 801c82e:	60f8      	str	r0, [r7, #12]
 801c830:	60b9      	str	r1, [r7, #8]
 801c832:	607a      	str	r2, [r7, #4]
 801c834:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801c836:	2300      	movs	r3, #0
 801c838:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801c83a:	f7fb f811 	bl	8017860 <HAL_GetTick>
 801c83e:	4602      	mov	r2, r0
 801c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c842:	1a9b      	subs	r3, r3, r2
 801c844:	683a      	ldr	r2, [r7, #0]
 801c846:	4413      	add	r3, r2
 801c848:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801c84a:	f7fb f809 	bl	8017860 <HAL_GetTick>
 801c84e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	330c      	adds	r3, #12
 801c856:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801c858:	4b3d      	ldr	r3, [pc, #244]	; (801c950 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801c85a:	681a      	ldr	r2, [r3, #0]
 801c85c:	4613      	mov	r3, r2
 801c85e:	009b      	lsls	r3, r3, #2
 801c860:	4413      	add	r3, r2
 801c862:	00da      	lsls	r2, r3, #3
 801c864:	1ad3      	subs	r3, r2, r3
 801c866:	0d1b      	lsrs	r3, r3, #20
 801c868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c86a:	fb02 f303 	mul.w	r3, r2, r3
 801c86e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801c870:	e060      	b.n	801c934 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801c872:	68bb      	ldr	r3, [r7, #8]
 801c874:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801c878:	d107      	bne.n	801c88a <SPI_WaitFifoStateUntilTimeout+0x62>
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d104      	bne.n	801c88a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801c880:	69fb      	ldr	r3, [r7, #28]
 801c882:	781b      	ldrb	r3, [r3, #0]
 801c884:	b2db      	uxtb	r3, r3
 801c886:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801c888:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801c88a:	683b      	ldr	r3, [r7, #0]
 801c88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c890:	d050      	beq.n	801c934 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801c892:	f7fa ffe5 	bl	8017860 <HAL_GetTick>
 801c896:	4602      	mov	r2, r0
 801c898:	6a3b      	ldr	r3, [r7, #32]
 801c89a:	1ad3      	subs	r3, r2, r3
 801c89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c89e:	429a      	cmp	r2, r3
 801c8a0:	d902      	bls.n	801c8a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 801c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d13d      	bne.n	801c924 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	685a      	ldr	r2, [r3, #4]
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c8b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	685b      	ldr	r3, [r3, #4]
 801c8bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c8c0:	d111      	bne.n	801c8e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	689b      	ldr	r3, [r3, #8]
 801c8c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c8ca:	d004      	beq.n	801c8d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	689b      	ldr	r3, [r3, #8]
 801c8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c8d4:	d107      	bne.n	801c8e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	681a      	ldr	r2, [r3, #0]
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c8e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c8ee:	d10f      	bne.n	801c910 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	681a      	ldr	r2, [r3, #0]
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c8fe:	601a      	str	r2, [r3, #0]
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	681a      	ldr	r2, [r3, #0]
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c90e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	2201      	movs	r2, #1
 801c914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	2200      	movs	r2, #0
 801c91c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801c920:	2303      	movs	r3, #3
 801c922:	e010      	b.n	801c946 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801c924:	69bb      	ldr	r3, [r7, #24]
 801c926:	2b00      	cmp	r3, #0
 801c928:	d101      	bne.n	801c92e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801c92a:	2300      	movs	r3, #0
 801c92c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801c92e:	69bb      	ldr	r3, [r7, #24]
 801c930:	3b01      	subs	r3, #1
 801c932:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	689a      	ldr	r2, [r3, #8]
 801c93a:	68bb      	ldr	r3, [r7, #8]
 801c93c:	4013      	ands	r3, r2
 801c93e:	687a      	ldr	r2, [r7, #4]
 801c940:	429a      	cmp	r2, r3
 801c942:	d196      	bne.n	801c872 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801c944:	2300      	movs	r3, #0
}
 801c946:	4618      	mov	r0, r3
 801c948:	3728      	adds	r7, #40	; 0x28
 801c94a:	46bd      	mov	sp, r7
 801c94c:	bd80      	pop	{r7, pc}
 801c94e:	bf00      	nop
 801c950:	20000000 	.word	0x20000000

0801c954 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801c954:	b580      	push	{r7, lr}
 801c956:	b086      	sub	sp, #24
 801c958:	af02      	add	r7, sp, #8
 801c95a:	60f8      	str	r0, [r7, #12]
 801c95c:	60b9      	str	r1, [r7, #8]
 801c95e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	685b      	ldr	r3, [r3, #4]
 801c964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c968:	d111      	bne.n	801c98e <SPI_EndRxTransaction+0x3a>
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	689b      	ldr	r3, [r3, #8]
 801c96e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c972:	d004      	beq.n	801c97e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	689b      	ldr	r3, [r3, #8]
 801c978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c97c:	d107      	bne.n	801c98e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	681a      	ldr	r2, [r3, #0]
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c98c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	9300      	str	r3, [sp, #0]
 801c992:	68bb      	ldr	r3, [r7, #8]
 801c994:	2200      	movs	r2, #0
 801c996:	2180      	movs	r1, #128	; 0x80
 801c998:	68f8      	ldr	r0, [r7, #12]
 801c99a:	f7ff febd 	bl	801c718 <SPI_WaitFlagStateUntilTimeout>
 801c99e:	4603      	mov	r3, r0
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d007      	beq.n	801c9b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c9a8:	f043 0220 	orr.w	r2, r3, #32
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801c9b0:	2303      	movs	r3, #3
 801c9b2:	e023      	b.n	801c9fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	685b      	ldr	r3, [r3, #4]
 801c9b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c9bc:	d11d      	bne.n	801c9fa <SPI_EndRxTransaction+0xa6>
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	689b      	ldr	r3, [r3, #8]
 801c9c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c9c6:	d004      	beq.n	801c9d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	689b      	ldr	r3, [r3, #8]
 801c9cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9d0:	d113      	bne.n	801c9fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	9300      	str	r3, [sp, #0]
 801c9d6:	68bb      	ldr	r3, [r7, #8]
 801c9d8:	2200      	movs	r2, #0
 801c9da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801c9de:	68f8      	ldr	r0, [r7, #12]
 801c9e0:	f7ff ff22 	bl	801c828 <SPI_WaitFifoStateUntilTimeout>
 801c9e4:	4603      	mov	r3, r0
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d007      	beq.n	801c9fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c9ee:	f043 0220 	orr.w	r2, r3, #32
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801c9f6:	2303      	movs	r3, #3
 801c9f8:	e000      	b.n	801c9fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801c9fa:	2300      	movs	r3, #0
}
 801c9fc:	4618      	mov	r0, r3
 801c9fe:	3710      	adds	r7, #16
 801ca00:	46bd      	mov	sp, r7
 801ca02:	bd80      	pop	{r7, pc}

0801ca04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801ca04:	b580      	push	{r7, lr}
 801ca06:	b086      	sub	sp, #24
 801ca08:	af02      	add	r7, sp, #8
 801ca0a:	60f8      	str	r0, [r7, #12]
 801ca0c:	60b9      	str	r1, [r7, #8]
 801ca0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	9300      	str	r3, [sp, #0]
 801ca14:	68bb      	ldr	r3, [r7, #8]
 801ca16:	2200      	movs	r2, #0
 801ca18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ca1c:	68f8      	ldr	r0, [r7, #12]
 801ca1e:	f7ff ff03 	bl	801c828 <SPI_WaitFifoStateUntilTimeout>
 801ca22:	4603      	mov	r3, r0
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d007      	beq.n	801ca38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca2c:	f043 0220 	orr.w	r2, r3, #32
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ca34:	2303      	movs	r3, #3
 801ca36:	e027      	b.n	801ca88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	9300      	str	r3, [sp, #0]
 801ca3c:	68bb      	ldr	r3, [r7, #8]
 801ca3e:	2200      	movs	r2, #0
 801ca40:	2180      	movs	r1, #128	; 0x80
 801ca42:	68f8      	ldr	r0, [r7, #12]
 801ca44:	f7ff fe68 	bl	801c718 <SPI_WaitFlagStateUntilTimeout>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d007      	beq.n	801ca5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca52:	f043 0220 	orr.w	r2, r3, #32
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ca5a:	2303      	movs	r3, #3
 801ca5c:	e014      	b.n	801ca88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	9300      	str	r3, [sp, #0]
 801ca62:	68bb      	ldr	r3, [r7, #8]
 801ca64:	2200      	movs	r2, #0
 801ca66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ca6a:	68f8      	ldr	r0, [r7, #12]
 801ca6c:	f7ff fedc 	bl	801c828 <SPI_WaitFifoStateUntilTimeout>
 801ca70:	4603      	mov	r3, r0
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d007      	beq.n	801ca86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca7a:	f043 0220 	orr.w	r2, r3, #32
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ca82:	2303      	movs	r3, #3
 801ca84:	e000      	b.n	801ca88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801ca86:	2300      	movs	r3, #0
}
 801ca88:	4618      	mov	r0, r3
 801ca8a:	3710      	adds	r7, #16
 801ca8c:	46bd      	mov	sp, r7
 801ca8e:	bd80      	pop	{r7, pc}

0801ca90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b082      	sub	sp, #8
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d101      	bne.n	801caa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ca9e:	2301      	movs	r3, #1
 801caa0:	e049      	b.n	801cb36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801caa8:	b2db      	uxtb	r3, r3
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d106      	bne.n	801cabc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	2200      	movs	r2, #0
 801cab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cab6:	6878      	ldr	r0, [r7, #4]
 801cab8:	f7fa f892 	bl	8016be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	2202      	movs	r2, #2
 801cac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	681a      	ldr	r2, [r3, #0]
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	3304      	adds	r3, #4
 801cacc:	4619      	mov	r1, r3
 801cace:	4610      	mov	r0, r2
 801cad0:	f000 fd6c 	bl	801d5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	2201      	movs	r2, #1
 801cad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	2201      	movs	r2, #1
 801cae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	2201      	movs	r2, #1
 801cae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	2201      	movs	r2, #1
 801caf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	2201      	movs	r2, #1
 801caf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	2201      	movs	r2, #1
 801cb00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	2201      	movs	r2, #1
 801cb08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	2201      	movs	r2, #1
 801cb10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	2201      	movs	r2, #1
 801cb18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	2201      	movs	r2, #1
 801cb20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	2201      	movs	r2, #1
 801cb28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	2201      	movs	r2, #1
 801cb30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cb34:	2300      	movs	r3, #0
}
 801cb36:	4618      	mov	r0, r3
 801cb38:	3708      	adds	r7, #8
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	bd80      	pop	{r7, pc}
	...

0801cb40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cb40:	b480      	push	{r7}
 801cb42:	b085      	sub	sp, #20
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cb4e:	b2db      	uxtb	r3, r3
 801cb50:	2b01      	cmp	r3, #1
 801cb52:	d001      	beq.n	801cb58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cb54:	2301      	movs	r3, #1
 801cb56:	e04f      	b.n	801cbf8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	2202      	movs	r2, #2
 801cb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	68da      	ldr	r2, [r3, #12]
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	f042 0201 	orr.w	r2, r2, #1
 801cb6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	4a23      	ldr	r2, [pc, #140]	; (801cc04 <HAL_TIM_Base_Start_IT+0xc4>)
 801cb76:	4293      	cmp	r3, r2
 801cb78:	d01d      	beq.n	801cbb6 <HAL_TIM_Base_Start_IT+0x76>
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cb82:	d018      	beq.n	801cbb6 <HAL_TIM_Base_Start_IT+0x76>
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	4a1f      	ldr	r2, [pc, #124]	; (801cc08 <HAL_TIM_Base_Start_IT+0xc8>)
 801cb8a:	4293      	cmp	r3, r2
 801cb8c:	d013      	beq.n	801cbb6 <HAL_TIM_Base_Start_IT+0x76>
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	4a1e      	ldr	r2, [pc, #120]	; (801cc0c <HAL_TIM_Base_Start_IT+0xcc>)
 801cb94:	4293      	cmp	r3, r2
 801cb96:	d00e      	beq.n	801cbb6 <HAL_TIM_Base_Start_IT+0x76>
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	4a1c      	ldr	r2, [pc, #112]	; (801cc10 <HAL_TIM_Base_Start_IT+0xd0>)
 801cb9e:	4293      	cmp	r3, r2
 801cba0:	d009      	beq.n	801cbb6 <HAL_TIM_Base_Start_IT+0x76>
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	4a1b      	ldr	r2, [pc, #108]	; (801cc14 <HAL_TIM_Base_Start_IT+0xd4>)
 801cba8:	4293      	cmp	r3, r2
 801cbaa:	d004      	beq.n	801cbb6 <HAL_TIM_Base_Start_IT+0x76>
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	4a19      	ldr	r2, [pc, #100]	; (801cc18 <HAL_TIM_Base_Start_IT+0xd8>)
 801cbb2:	4293      	cmp	r3, r2
 801cbb4:	d115      	bne.n	801cbe2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	689a      	ldr	r2, [r3, #8]
 801cbbc:	4b17      	ldr	r3, [pc, #92]	; (801cc1c <HAL_TIM_Base_Start_IT+0xdc>)
 801cbbe:	4013      	ands	r3, r2
 801cbc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cbc2:	68fb      	ldr	r3, [r7, #12]
 801cbc4:	2b06      	cmp	r3, #6
 801cbc6:	d015      	beq.n	801cbf4 <HAL_TIM_Base_Start_IT+0xb4>
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbce:	d011      	beq.n	801cbf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	681a      	ldr	r2, [r3, #0]
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	f042 0201 	orr.w	r2, r2, #1
 801cbde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cbe0:	e008      	b.n	801cbf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	681a      	ldr	r2, [r3, #0]
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	681b      	ldr	r3, [r3, #0]
 801cbec:	f042 0201 	orr.w	r2, r2, #1
 801cbf0:	601a      	str	r2, [r3, #0]
 801cbf2:	e000      	b.n	801cbf6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cbf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cbf6:	2300      	movs	r3, #0
}
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	3714      	adds	r7, #20
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc02:	4770      	bx	lr
 801cc04:	40012c00 	.word	0x40012c00
 801cc08:	40000400 	.word	0x40000400
 801cc0c:	40000800 	.word	0x40000800
 801cc10:	40013400 	.word	0x40013400
 801cc14:	40014000 	.word	0x40014000
 801cc18:	40015000 	.word	0x40015000
 801cc1c:	00010007 	.word	0x00010007

0801cc20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cc20:	b580      	push	{r7, lr}
 801cc22:	b082      	sub	sp, #8
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d101      	bne.n	801cc32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cc2e:	2301      	movs	r3, #1
 801cc30:	e049      	b.n	801ccc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cc38:	b2db      	uxtb	r3, r3
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d106      	bne.n	801cc4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	2200      	movs	r2, #0
 801cc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cc46:	6878      	ldr	r0, [r7, #4]
 801cc48:	f7fa f804 	bl	8016c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	2202      	movs	r2, #2
 801cc50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	681a      	ldr	r2, [r3, #0]
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	3304      	adds	r3, #4
 801cc5c:	4619      	mov	r1, r3
 801cc5e:	4610      	mov	r0, r2
 801cc60:	f000 fca4 	bl	801d5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	2201      	movs	r2, #1
 801cc68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	2201      	movs	r2, #1
 801cc70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	2201      	movs	r2, #1
 801cc78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	2201      	movs	r2, #1
 801cc80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	2201      	movs	r2, #1
 801cc88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	2201      	movs	r2, #1
 801cc90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	2201      	movs	r2, #1
 801cc98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	2201      	movs	r2, #1
 801cca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	2201      	movs	r2, #1
 801cca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	2201      	movs	r2, #1
 801ccb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	2201      	movs	r2, #1
 801ccb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	2201      	movs	r2, #1
 801ccc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ccc4:	2300      	movs	r3, #0
}
 801ccc6:	4618      	mov	r0, r3
 801ccc8:	3708      	adds	r7, #8
 801ccca:	46bd      	mov	sp, r7
 801cccc:	bd80      	pop	{r7, pc}
	...

0801ccd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ccd0:	b580      	push	{r7, lr}
 801ccd2:	b084      	sub	sp, #16
 801ccd4:	af00      	add	r7, sp, #0
 801ccd6:	6078      	str	r0, [r7, #4]
 801ccd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ccda:	683b      	ldr	r3, [r7, #0]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d109      	bne.n	801ccf4 <HAL_TIM_PWM_Start+0x24>
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801cce6:	b2db      	uxtb	r3, r3
 801cce8:	2b01      	cmp	r3, #1
 801ccea:	bf14      	ite	ne
 801ccec:	2301      	movne	r3, #1
 801ccee:	2300      	moveq	r3, #0
 801ccf0:	b2db      	uxtb	r3, r3
 801ccf2:	e03c      	b.n	801cd6e <HAL_TIM_PWM_Start+0x9e>
 801ccf4:	683b      	ldr	r3, [r7, #0]
 801ccf6:	2b04      	cmp	r3, #4
 801ccf8:	d109      	bne.n	801cd0e <HAL_TIM_PWM_Start+0x3e>
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801cd00:	b2db      	uxtb	r3, r3
 801cd02:	2b01      	cmp	r3, #1
 801cd04:	bf14      	ite	ne
 801cd06:	2301      	movne	r3, #1
 801cd08:	2300      	moveq	r3, #0
 801cd0a:	b2db      	uxtb	r3, r3
 801cd0c:	e02f      	b.n	801cd6e <HAL_TIM_PWM_Start+0x9e>
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	2b08      	cmp	r3, #8
 801cd12:	d109      	bne.n	801cd28 <HAL_TIM_PWM_Start+0x58>
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801cd1a:	b2db      	uxtb	r3, r3
 801cd1c:	2b01      	cmp	r3, #1
 801cd1e:	bf14      	ite	ne
 801cd20:	2301      	movne	r3, #1
 801cd22:	2300      	moveq	r3, #0
 801cd24:	b2db      	uxtb	r3, r3
 801cd26:	e022      	b.n	801cd6e <HAL_TIM_PWM_Start+0x9e>
 801cd28:	683b      	ldr	r3, [r7, #0]
 801cd2a:	2b0c      	cmp	r3, #12
 801cd2c:	d109      	bne.n	801cd42 <HAL_TIM_PWM_Start+0x72>
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801cd34:	b2db      	uxtb	r3, r3
 801cd36:	2b01      	cmp	r3, #1
 801cd38:	bf14      	ite	ne
 801cd3a:	2301      	movne	r3, #1
 801cd3c:	2300      	moveq	r3, #0
 801cd3e:	b2db      	uxtb	r3, r3
 801cd40:	e015      	b.n	801cd6e <HAL_TIM_PWM_Start+0x9e>
 801cd42:	683b      	ldr	r3, [r7, #0]
 801cd44:	2b10      	cmp	r3, #16
 801cd46:	d109      	bne.n	801cd5c <HAL_TIM_PWM_Start+0x8c>
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cd4e:	b2db      	uxtb	r3, r3
 801cd50:	2b01      	cmp	r3, #1
 801cd52:	bf14      	ite	ne
 801cd54:	2301      	movne	r3, #1
 801cd56:	2300      	moveq	r3, #0
 801cd58:	b2db      	uxtb	r3, r3
 801cd5a:	e008      	b.n	801cd6e <HAL_TIM_PWM_Start+0x9e>
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801cd62:	b2db      	uxtb	r3, r3
 801cd64:	2b01      	cmp	r3, #1
 801cd66:	bf14      	ite	ne
 801cd68:	2301      	movne	r3, #1
 801cd6a:	2300      	moveq	r3, #0
 801cd6c:	b2db      	uxtb	r3, r3
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d001      	beq.n	801cd76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801cd72:	2301      	movs	r3, #1
 801cd74:	e0a1      	b.n	801ceba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cd76:	683b      	ldr	r3, [r7, #0]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d104      	bne.n	801cd86 <HAL_TIM_PWM_Start+0xb6>
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	2202      	movs	r2, #2
 801cd80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cd84:	e023      	b.n	801cdce <HAL_TIM_PWM_Start+0xfe>
 801cd86:	683b      	ldr	r3, [r7, #0]
 801cd88:	2b04      	cmp	r3, #4
 801cd8a:	d104      	bne.n	801cd96 <HAL_TIM_PWM_Start+0xc6>
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	2202      	movs	r2, #2
 801cd90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cd94:	e01b      	b.n	801cdce <HAL_TIM_PWM_Start+0xfe>
 801cd96:	683b      	ldr	r3, [r7, #0]
 801cd98:	2b08      	cmp	r3, #8
 801cd9a:	d104      	bne.n	801cda6 <HAL_TIM_PWM_Start+0xd6>
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	2202      	movs	r2, #2
 801cda0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cda4:	e013      	b.n	801cdce <HAL_TIM_PWM_Start+0xfe>
 801cda6:	683b      	ldr	r3, [r7, #0]
 801cda8:	2b0c      	cmp	r3, #12
 801cdaa:	d104      	bne.n	801cdb6 <HAL_TIM_PWM_Start+0xe6>
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	2202      	movs	r2, #2
 801cdb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cdb4:	e00b      	b.n	801cdce <HAL_TIM_PWM_Start+0xfe>
 801cdb6:	683b      	ldr	r3, [r7, #0]
 801cdb8:	2b10      	cmp	r3, #16
 801cdba:	d104      	bne.n	801cdc6 <HAL_TIM_PWM_Start+0xf6>
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2202      	movs	r2, #2
 801cdc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cdc4:	e003      	b.n	801cdce <HAL_TIM_PWM_Start+0xfe>
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	2202      	movs	r2, #2
 801cdca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	2201      	movs	r2, #1
 801cdd4:	6839      	ldr	r1, [r7, #0]
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	f000 ffb0 	bl	801dd3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	4a38      	ldr	r2, [pc, #224]	; (801cec4 <HAL_TIM_PWM_Start+0x1f4>)
 801cde2:	4293      	cmp	r3, r2
 801cde4:	d018      	beq.n	801ce18 <HAL_TIM_PWM_Start+0x148>
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	4a37      	ldr	r2, [pc, #220]	; (801cec8 <HAL_TIM_PWM_Start+0x1f8>)
 801cdec:	4293      	cmp	r3, r2
 801cdee:	d013      	beq.n	801ce18 <HAL_TIM_PWM_Start+0x148>
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	4a35      	ldr	r2, [pc, #212]	; (801cecc <HAL_TIM_PWM_Start+0x1fc>)
 801cdf6:	4293      	cmp	r3, r2
 801cdf8:	d00e      	beq.n	801ce18 <HAL_TIM_PWM_Start+0x148>
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	4a34      	ldr	r2, [pc, #208]	; (801ced0 <HAL_TIM_PWM_Start+0x200>)
 801ce00:	4293      	cmp	r3, r2
 801ce02:	d009      	beq.n	801ce18 <HAL_TIM_PWM_Start+0x148>
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	4a32      	ldr	r2, [pc, #200]	; (801ced4 <HAL_TIM_PWM_Start+0x204>)
 801ce0a:	4293      	cmp	r3, r2
 801ce0c:	d004      	beq.n	801ce18 <HAL_TIM_PWM_Start+0x148>
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	4a31      	ldr	r2, [pc, #196]	; (801ced8 <HAL_TIM_PWM_Start+0x208>)
 801ce14:	4293      	cmp	r3, r2
 801ce16:	d101      	bne.n	801ce1c <HAL_TIM_PWM_Start+0x14c>
 801ce18:	2301      	movs	r3, #1
 801ce1a:	e000      	b.n	801ce1e <HAL_TIM_PWM_Start+0x14e>
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d007      	beq.n	801ce32 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ce30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	4a23      	ldr	r2, [pc, #140]	; (801cec4 <HAL_TIM_PWM_Start+0x1f4>)
 801ce38:	4293      	cmp	r3, r2
 801ce3a:	d01d      	beq.n	801ce78 <HAL_TIM_PWM_Start+0x1a8>
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ce44:	d018      	beq.n	801ce78 <HAL_TIM_PWM_Start+0x1a8>
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	4a24      	ldr	r2, [pc, #144]	; (801cedc <HAL_TIM_PWM_Start+0x20c>)
 801ce4c:	4293      	cmp	r3, r2
 801ce4e:	d013      	beq.n	801ce78 <HAL_TIM_PWM_Start+0x1a8>
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	4a22      	ldr	r2, [pc, #136]	; (801cee0 <HAL_TIM_PWM_Start+0x210>)
 801ce56:	4293      	cmp	r3, r2
 801ce58:	d00e      	beq.n	801ce78 <HAL_TIM_PWM_Start+0x1a8>
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	4a1a      	ldr	r2, [pc, #104]	; (801cec8 <HAL_TIM_PWM_Start+0x1f8>)
 801ce60:	4293      	cmp	r3, r2
 801ce62:	d009      	beq.n	801ce78 <HAL_TIM_PWM_Start+0x1a8>
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	4a18      	ldr	r2, [pc, #96]	; (801cecc <HAL_TIM_PWM_Start+0x1fc>)
 801ce6a:	4293      	cmp	r3, r2
 801ce6c:	d004      	beq.n	801ce78 <HAL_TIM_PWM_Start+0x1a8>
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	4a19      	ldr	r2, [pc, #100]	; (801ced8 <HAL_TIM_PWM_Start+0x208>)
 801ce74:	4293      	cmp	r3, r2
 801ce76:	d115      	bne.n	801cea4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	689a      	ldr	r2, [r3, #8]
 801ce7e:	4b19      	ldr	r3, [pc, #100]	; (801cee4 <HAL_TIM_PWM_Start+0x214>)
 801ce80:	4013      	ands	r3, r2
 801ce82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce84:	68fb      	ldr	r3, [r7, #12]
 801ce86:	2b06      	cmp	r3, #6
 801ce88:	d015      	beq.n	801ceb6 <HAL_TIM_PWM_Start+0x1e6>
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ce90:	d011      	beq.n	801ceb6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	681a      	ldr	r2, [r3, #0]
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	f042 0201 	orr.w	r2, r2, #1
 801cea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cea2:	e008      	b.n	801ceb6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	681a      	ldr	r2, [r3, #0]
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	f042 0201 	orr.w	r2, r2, #1
 801ceb2:	601a      	str	r2, [r3, #0]
 801ceb4:	e000      	b.n	801ceb8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ceb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ceb8:	2300      	movs	r3, #0
}
 801ceba:	4618      	mov	r0, r3
 801cebc:	3710      	adds	r7, #16
 801cebe:	46bd      	mov	sp, r7
 801cec0:	bd80      	pop	{r7, pc}
 801cec2:	bf00      	nop
 801cec4:	40012c00 	.word	0x40012c00
 801cec8:	40013400 	.word	0x40013400
 801cecc:	40014000 	.word	0x40014000
 801ced0:	40014400 	.word	0x40014400
 801ced4:	40014800 	.word	0x40014800
 801ced8:	40015000 	.word	0x40015000
 801cedc:	40000400 	.word	0x40000400
 801cee0:	40000800 	.word	0x40000800
 801cee4:	00010007 	.word	0x00010007

0801cee8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cee8:	b580      	push	{r7, lr}
 801ceea:	b082      	sub	sp, #8
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	6078      	str	r0, [r7, #4]
 801cef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	2200      	movs	r2, #0
 801cef8:	6839      	ldr	r1, [r7, #0]
 801cefa:	4618      	mov	r0, r3
 801cefc:	f000 ff1e 	bl	801dd3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	4a40      	ldr	r2, [pc, #256]	; (801d008 <HAL_TIM_PWM_Stop+0x120>)
 801cf06:	4293      	cmp	r3, r2
 801cf08:	d018      	beq.n	801cf3c <HAL_TIM_PWM_Stop+0x54>
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	4a3f      	ldr	r2, [pc, #252]	; (801d00c <HAL_TIM_PWM_Stop+0x124>)
 801cf10:	4293      	cmp	r3, r2
 801cf12:	d013      	beq.n	801cf3c <HAL_TIM_PWM_Stop+0x54>
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	4a3d      	ldr	r2, [pc, #244]	; (801d010 <HAL_TIM_PWM_Stop+0x128>)
 801cf1a:	4293      	cmp	r3, r2
 801cf1c:	d00e      	beq.n	801cf3c <HAL_TIM_PWM_Stop+0x54>
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	4a3c      	ldr	r2, [pc, #240]	; (801d014 <HAL_TIM_PWM_Stop+0x12c>)
 801cf24:	4293      	cmp	r3, r2
 801cf26:	d009      	beq.n	801cf3c <HAL_TIM_PWM_Stop+0x54>
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	4a3a      	ldr	r2, [pc, #232]	; (801d018 <HAL_TIM_PWM_Stop+0x130>)
 801cf2e:	4293      	cmp	r3, r2
 801cf30:	d004      	beq.n	801cf3c <HAL_TIM_PWM_Stop+0x54>
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	4a39      	ldr	r2, [pc, #228]	; (801d01c <HAL_TIM_PWM_Stop+0x134>)
 801cf38:	4293      	cmp	r3, r2
 801cf3a:	d101      	bne.n	801cf40 <HAL_TIM_PWM_Stop+0x58>
 801cf3c:	2301      	movs	r3, #1
 801cf3e:	e000      	b.n	801cf42 <HAL_TIM_PWM_Stop+0x5a>
 801cf40:	2300      	movs	r3, #0
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d017      	beq.n	801cf76 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	6a1a      	ldr	r2, [r3, #32]
 801cf4c:	f241 1311 	movw	r3, #4369	; 0x1111
 801cf50:	4013      	ands	r3, r2
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d10f      	bne.n	801cf76 <HAL_TIM_PWM_Stop+0x8e>
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	6a1a      	ldr	r2, [r3, #32]
 801cf5c:	f244 4344 	movw	r3, #17476	; 0x4444
 801cf60:	4013      	ands	r3, r2
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d107      	bne.n	801cf76 <HAL_TIM_PWM_Stop+0x8e>
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	681b      	ldr	r3, [r3, #0]
 801cf6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801cf74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	6a1a      	ldr	r2, [r3, #32]
 801cf7c:	f241 1311 	movw	r3, #4369	; 0x1111
 801cf80:	4013      	ands	r3, r2
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	d10f      	bne.n	801cfa6 <HAL_TIM_PWM_Stop+0xbe>
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	6a1a      	ldr	r2, [r3, #32]
 801cf8c:	f244 4344 	movw	r3, #17476	; 0x4444
 801cf90:	4013      	ands	r3, r2
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d107      	bne.n	801cfa6 <HAL_TIM_PWM_Stop+0xbe>
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	681a      	ldr	r2, [r3, #0]
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	f022 0201 	bic.w	r2, r2, #1
 801cfa4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801cfa6:	683b      	ldr	r3, [r7, #0]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d104      	bne.n	801cfb6 <HAL_TIM_PWM_Stop+0xce>
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	2201      	movs	r2, #1
 801cfb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cfb4:	e023      	b.n	801cffe <HAL_TIM_PWM_Stop+0x116>
 801cfb6:	683b      	ldr	r3, [r7, #0]
 801cfb8:	2b04      	cmp	r3, #4
 801cfba:	d104      	bne.n	801cfc6 <HAL_TIM_PWM_Stop+0xde>
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	2201      	movs	r2, #1
 801cfc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cfc4:	e01b      	b.n	801cffe <HAL_TIM_PWM_Stop+0x116>
 801cfc6:	683b      	ldr	r3, [r7, #0]
 801cfc8:	2b08      	cmp	r3, #8
 801cfca:	d104      	bne.n	801cfd6 <HAL_TIM_PWM_Stop+0xee>
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	2201      	movs	r2, #1
 801cfd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cfd4:	e013      	b.n	801cffe <HAL_TIM_PWM_Stop+0x116>
 801cfd6:	683b      	ldr	r3, [r7, #0]
 801cfd8:	2b0c      	cmp	r3, #12
 801cfda:	d104      	bne.n	801cfe6 <HAL_TIM_PWM_Stop+0xfe>
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	2201      	movs	r2, #1
 801cfe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cfe4:	e00b      	b.n	801cffe <HAL_TIM_PWM_Stop+0x116>
 801cfe6:	683b      	ldr	r3, [r7, #0]
 801cfe8:	2b10      	cmp	r3, #16
 801cfea:	d104      	bne.n	801cff6 <HAL_TIM_PWM_Stop+0x10e>
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	2201      	movs	r2, #1
 801cff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cff4:	e003      	b.n	801cffe <HAL_TIM_PWM_Stop+0x116>
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	2201      	movs	r2, #1
 801cffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801cffe:	2300      	movs	r3, #0
}
 801d000:	4618      	mov	r0, r3
 801d002:	3708      	adds	r7, #8
 801d004:	46bd      	mov	sp, r7
 801d006:	bd80      	pop	{r7, pc}
 801d008:	40012c00 	.word	0x40012c00
 801d00c:	40013400 	.word	0x40013400
 801d010:	40014000 	.word	0x40014000
 801d014:	40014400 	.word	0x40014400
 801d018:	40014800 	.word	0x40014800
 801d01c:	40015000 	.word	0x40015000

0801d020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d020:	b580      	push	{r7, lr}
 801d022:	b082      	sub	sp, #8
 801d024:	af00      	add	r7, sp, #0
 801d026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	691b      	ldr	r3, [r3, #16]
 801d02e:	f003 0302 	and.w	r3, r3, #2
 801d032:	2b02      	cmp	r3, #2
 801d034:	d122      	bne.n	801d07c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	68db      	ldr	r3, [r3, #12]
 801d03c:	f003 0302 	and.w	r3, r3, #2
 801d040:	2b02      	cmp	r3, #2
 801d042:	d11b      	bne.n	801d07c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	f06f 0202 	mvn.w	r2, #2
 801d04c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	2201      	movs	r2, #1
 801d052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	699b      	ldr	r3, [r3, #24]
 801d05a:	f003 0303 	and.w	r3, r3, #3
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d003      	beq.n	801d06a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d062:	6878      	ldr	r0, [r7, #4]
 801d064:	f000 fa84 	bl	801d570 <HAL_TIM_IC_CaptureCallback>
 801d068:	e005      	b.n	801d076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d06a:	6878      	ldr	r0, [r7, #4]
 801d06c:	f000 fa76 	bl	801d55c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f000 fa87 	bl	801d584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	2200      	movs	r2, #0
 801d07a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	691b      	ldr	r3, [r3, #16]
 801d082:	f003 0304 	and.w	r3, r3, #4
 801d086:	2b04      	cmp	r3, #4
 801d088:	d122      	bne.n	801d0d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	68db      	ldr	r3, [r3, #12]
 801d090:	f003 0304 	and.w	r3, r3, #4
 801d094:	2b04      	cmp	r3, #4
 801d096:	d11b      	bne.n	801d0d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	f06f 0204 	mvn.w	r2, #4
 801d0a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	2202      	movs	r2, #2
 801d0a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	699b      	ldr	r3, [r3, #24]
 801d0ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d003      	beq.n	801d0be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0b6:	6878      	ldr	r0, [r7, #4]
 801d0b8:	f000 fa5a 	bl	801d570 <HAL_TIM_IC_CaptureCallback>
 801d0bc:	e005      	b.n	801d0ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0be:	6878      	ldr	r0, [r7, #4]
 801d0c0:	f000 fa4c 	bl	801d55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0c4:	6878      	ldr	r0, [r7, #4]
 801d0c6:	f000 fa5d 	bl	801d584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	2200      	movs	r2, #0
 801d0ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	691b      	ldr	r3, [r3, #16]
 801d0d6:	f003 0308 	and.w	r3, r3, #8
 801d0da:	2b08      	cmp	r3, #8
 801d0dc:	d122      	bne.n	801d124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	68db      	ldr	r3, [r3, #12]
 801d0e4:	f003 0308 	and.w	r3, r3, #8
 801d0e8:	2b08      	cmp	r3, #8
 801d0ea:	d11b      	bne.n	801d124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f06f 0208 	mvn.w	r2, #8
 801d0f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	2204      	movs	r2, #4
 801d0fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	69db      	ldr	r3, [r3, #28]
 801d102:	f003 0303 	and.w	r3, r3, #3
 801d106:	2b00      	cmp	r3, #0
 801d108:	d003      	beq.n	801d112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d10a:	6878      	ldr	r0, [r7, #4]
 801d10c:	f000 fa30 	bl	801d570 <HAL_TIM_IC_CaptureCallback>
 801d110:	e005      	b.n	801d11e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d112:	6878      	ldr	r0, [r7, #4]
 801d114:	f000 fa22 	bl	801d55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d118:	6878      	ldr	r0, [r7, #4]
 801d11a:	f000 fa33 	bl	801d584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	2200      	movs	r2, #0
 801d122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	691b      	ldr	r3, [r3, #16]
 801d12a:	f003 0310 	and.w	r3, r3, #16
 801d12e:	2b10      	cmp	r3, #16
 801d130:	d122      	bne.n	801d178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	68db      	ldr	r3, [r3, #12]
 801d138:	f003 0310 	and.w	r3, r3, #16
 801d13c:	2b10      	cmp	r3, #16
 801d13e:	d11b      	bne.n	801d178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	f06f 0210 	mvn.w	r2, #16
 801d148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	2208      	movs	r2, #8
 801d14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	69db      	ldr	r3, [r3, #28]
 801d156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d003      	beq.n	801d166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d15e:	6878      	ldr	r0, [r7, #4]
 801d160:	f000 fa06 	bl	801d570 <HAL_TIM_IC_CaptureCallback>
 801d164:	e005      	b.n	801d172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d166:	6878      	ldr	r0, [r7, #4]
 801d168:	f000 f9f8 	bl	801d55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d16c:	6878      	ldr	r0, [r7, #4]
 801d16e:	f000 fa09 	bl	801d584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	2200      	movs	r2, #0
 801d176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	691b      	ldr	r3, [r3, #16]
 801d17e:	f003 0301 	and.w	r3, r3, #1
 801d182:	2b01      	cmp	r3, #1
 801d184:	d10e      	bne.n	801d1a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	681b      	ldr	r3, [r3, #0]
 801d18a:	68db      	ldr	r3, [r3, #12]
 801d18c:	f003 0301 	and.w	r3, r3, #1
 801d190:	2b01      	cmp	r3, #1
 801d192:	d107      	bne.n	801d1a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	681b      	ldr	r3, [r3, #0]
 801d198:	f06f 0201 	mvn.w	r2, #1
 801d19c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d19e:	6878      	ldr	r0, [r7, #4]
 801d1a0:	f000 f9d2 	bl	801d548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	691b      	ldr	r3, [r3, #16]
 801d1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1ae:	2b80      	cmp	r3, #128	; 0x80
 801d1b0:	d10e      	bne.n	801d1d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	68db      	ldr	r3, [r3, #12]
 801d1b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1bc:	2b80      	cmp	r3, #128	; 0x80
 801d1be:	d107      	bne.n	801d1d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d1c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d1ca:	6878      	ldr	r0, [r7, #4]
 801d1cc:	f000 ff26 	bl	801e01c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	691b      	ldr	r3, [r3, #16]
 801d1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d1de:	d10e      	bne.n	801d1fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	68db      	ldr	r3, [r3, #12]
 801d1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1ea:	2b80      	cmp	r3, #128	; 0x80
 801d1ec:	d107      	bne.n	801d1fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d1f8:	6878      	ldr	r0, [r7, #4]
 801d1fa:	f000 ff19 	bl	801e030 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	691b      	ldr	r3, [r3, #16]
 801d204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d208:	2b40      	cmp	r3, #64	; 0x40
 801d20a:	d10e      	bne.n	801d22a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	68db      	ldr	r3, [r3, #12]
 801d212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d216:	2b40      	cmp	r3, #64	; 0x40
 801d218:	d107      	bne.n	801d22a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d224:	6878      	ldr	r0, [r7, #4]
 801d226:	f000 f9b7 	bl	801d598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	691b      	ldr	r3, [r3, #16]
 801d230:	f003 0320 	and.w	r3, r3, #32
 801d234:	2b20      	cmp	r3, #32
 801d236:	d10e      	bne.n	801d256 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	68db      	ldr	r3, [r3, #12]
 801d23e:	f003 0320 	and.w	r3, r3, #32
 801d242:	2b20      	cmp	r3, #32
 801d244:	d107      	bne.n	801d256 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	681b      	ldr	r3, [r3, #0]
 801d24a:	f06f 0220 	mvn.w	r2, #32
 801d24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d250:	6878      	ldr	r0, [r7, #4]
 801d252:	f000 fed9 	bl	801e008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	691b      	ldr	r3, [r3, #16]
 801d25c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d264:	d10f      	bne.n	801d286 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	68db      	ldr	r3, [r3, #12]
 801d26c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d274:	d107      	bne.n	801d286 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801d27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801d280:	6878      	ldr	r0, [r7, #4]
 801d282:	f000 fedf 	bl	801e044 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	691b      	ldr	r3, [r3, #16]
 801d28c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d294:	d10f      	bne.n	801d2b6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	68db      	ldr	r3, [r3, #12]
 801d29c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d2a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d2a4:	d107      	bne.n	801d2b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801d2ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801d2b0:	6878      	ldr	r0, [r7, #4]
 801d2b2:	f000 fed1 	bl	801e058 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	681b      	ldr	r3, [r3, #0]
 801d2ba:	691b      	ldr	r3, [r3, #16]
 801d2bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d2c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d2c4:	d10f      	bne.n	801d2e6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	681b      	ldr	r3, [r3, #0]
 801d2ca:	68db      	ldr	r3, [r3, #12]
 801d2cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d2d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d2d4:	d107      	bne.n	801d2e6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801d2de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801d2e0:	6878      	ldr	r0, [r7, #4]
 801d2e2:	f000 fec3 	bl	801e06c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	691b      	ldr	r3, [r3, #16]
 801d2ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d2f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d2f4:	d10f      	bne.n	801d316 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	68db      	ldr	r3, [r3, #12]
 801d2fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d304:	d107      	bne.n	801d316 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801d30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801d310:	6878      	ldr	r0, [r7, #4]
 801d312:	f000 feb5 	bl	801e080 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d316:	bf00      	nop
 801d318:	3708      	adds	r7, #8
 801d31a:	46bd      	mov	sp, r7
 801d31c:	bd80      	pop	{r7, pc}
	...

0801d320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b086      	sub	sp, #24
 801d324:	af00      	add	r7, sp, #0
 801d326:	60f8      	str	r0, [r7, #12]
 801d328:	60b9      	str	r1, [r7, #8]
 801d32a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d32c:	2300      	movs	r3, #0
 801d32e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d336:	2b01      	cmp	r3, #1
 801d338:	d101      	bne.n	801d33e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801d33a:	2302      	movs	r3, #2
 801d33c:	e0ff      	b.n	801d53e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	2201      	movs	r2, #1
 801d342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	2b14      	cmp	r3, #20
 801d34a:	f200 80f0 	bhi.w	801d52e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801d34e:	a201      	add	r2, pc, #4	; (adr r2, 801d354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801d350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d354:	0801d3a9 	.word	0x0801d3a9
 801d358:	0801d52f 	.word	0x0801d52f
 801d35c:	0801d52f 	.word	0x0801d52f
 801d360:	0801d52f 	.word	0x0801d52f
 801d364:	0801d3e9 	.word	0x0801d3e9
 801d368:	0801d52f 	.word	0x0801d52f
 801d36c:	0801d52f 	.word	0x0801d52f
 801d370:	0801d52f 	.word	0x0801d52f
 801d374:	0801d42b 	.word	0x0801d42b
 801d378:	0801d52f 	.word	0x0801d52f
 801d37c:	0801d52f 	.word	0x0801d52f
 801d380:	0801d52f 	.word	0x0801d52f
 801d384:	0801d46b 	.word	0x0801d46b
 801d388:	0801d52f 	.word	0x0801d52f
 801d38c:	0801d52f 	.word	0x0801d52f
 801d390:	0801d52f 	.word	0x0801d52f
 801d394:	0801d4ad 	.word	0x0801d4ad
 801d398:	0801d52f 	.word	0x0801d52f
 801d39c:	0801d52f 	.word	0x0801d52f
 801d3a0:	0801d52f 	.word	0x0801d52f
 801d3a4:	0801d4ed 	.word	0x0801d4ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	68b9      	ldr	r1, [r7, #8]
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f000 f99a 	bl	801d6e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	699a      	ldr	r2, [r3, #24]
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	f042 0208 	orr.w	r2, r2, #8
 801d3c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	699a      	ldr	r2, [r3, #24]
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	f022 0204 	bic.w	r2, r2, #4
 801d3d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	6999      	ldr	r1, [r3, #24]
 801d3da:	68bb      	ldr	r3, [r7, #8]
 801d3dc:	691a      	ldr	r2, [r3, #16]
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	430a      	orrs	r2, r1
 801d3e4:	619a      	str	r2, [r3, #24]
      break;
 801d3e6:	e0a5      	b.n	801d534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	68b9      	ldr	r1, [r7, #8]
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	f000 fa14 	bl	801d81c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d3f4:	68fb      	ldr	r3, [r7, #12]
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	699a      	ldr	r2, [r3, #24]
 801d3fa:	68fb      	ldr	r3, [r7, #12]
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	699a      	ldr	r2, [r3, #24]
 801d40a:	68fb      	ldr	r3, [r7, #12]
 801d40c:	681b      	ldr	r3, [r3, #0]
 801d40e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	6999      	ldr	r1, [r3, #24]
 801d41a:	68bb      	ldr	r3, [r7, #8]
 801d41c:	691b      	ldr	r3, [r3, #16]
 801d41e:	021a      	lsls	r2, r3, #8
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	430a      	orrs	r2, r1
 801d426:	619a      	str	r2, [r3, #24]
      break;
 801d428:	e084      	b.n	801d534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	68b9      	ldr	r1, [r7, #8]
 801d430:	4618      	mov	r0, r3
 801d432:	f000 fa87 	bl	801d944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	69da      	ldr	r2, [r3, #28]
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	f042 0208 	orr.w	r2, r2, #8
 801d444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	69da      	ldr	r2, [r3, #28]
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	f022 0204 	bic.w	r2, r2, #4
 801d454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	69d9      	ldr	r1, [r3, #28]
 801d45c:	68bb      	ldr	r3, [r7, #8]
 801d45e:	691a      	ldr	r2, [r3, #16]
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	430a      	orrs	r2, r1
 801d466:	61da      	str	r2, [r3, #28]
      break;
 801d468:	e064      	b.n	801d534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	681b      	ldr	r3, [r3, #0]
 801d46e:	68b9      	ldr	r1, [r7, #8]
 801d470:	4618      	mov	r0, r3
 801d472:	f000 faf9 	bl	801da68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	69da      	ldr	r2, [r3, #28]
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	69da      	ldr	r2, [r3, #28]
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	69d9      	ldr	r1, [r3, #28]
 801d49c:	68bb      	ldr	r3, [r7, #8]
 801d49e:	691b      	ldr	r3, [r3, #16]
 801d4a0:	021a      	lsls	r2, r3, #8
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	430a      	orrs	r2, r1
 801d4a8:	61da      	str	r2, [r3, #28]
      break;
 801d4aa:	e043      	b.n	801d534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	68b9      	ldr	r1, [r7, #8]
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f000 fb6c 	bl	801db90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	f042 0208 	orr.w	r2, r2, #8
 801d4c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	f022 0204 	bic.w	r2, r2, #4
 801d4d6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d4de:	68bb      	ldr	r3, [r7, #8]
 801d4e0:	691a      	ldr	r2, [r3, #16]
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	430a      	orrs	r2, r1
 801d4e8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d4ea:	e023      	b.n	801d534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	681b      	ldr	r3, [r3, #0]
 801d4f0:	68b9      	ldr	r1, [r7, #8]
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	f000 fbb6 	bl	801dc64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d506:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d508:	68fb      	ldr	r3, [r7, #12]
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d516:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d51e:	68bb      	ldr	r3, [r7, #8]
 801d520:	691b      	ldr	r3, [r3, #16]
 801d522:	021a      	lsls	r2, r3, #8
 801d524:	68fb      	ldr	r3, [r7, #12]
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	430a      	orrs	r2, r1
 801d52a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d52c:	e002      	b.n	801d534 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801d52e:	2301      	movs	r3, #1
 801d530:	75fb      	strb	r3, [r7, #23]
      break;
 801d532:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	2200      	movs	r2, #0
 801d538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d53c:	7dfb      	ldrb	r3, [r7, #23]
}
 801d53e:	4618      	mov	r0, r3
 801d540:	3718      	adds	r7, #24
 801d542:	46bd      	mov	sp, r7
 801d544:	bd80      	pop	{r7, pc}
 801d546:	bf00      	nop

0801d548 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d548:	b480      	push	{r7}
 801d54a:	b083      	sub	sp, #12
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801d550:	bf00      	nop
 801d552:	370c      	adds	r7, #12
 801d554:	46bd      	mov	sp, r7
 801d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d55a:	4770      	bx	lr

0801d55c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d55c:	b480      	push	{r7}
 801d55e:	b083      	sub	sp, #12
 801d560:	af00      	add	r7, sp, #0
 801d562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d564:	bf00      	nop
 801d566:	370c      	adds	r7, #12
 801d568:	46bd      	mov	sp, r7
 801d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d56e:	4770      	bx	lr

0801d570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d570:	b480      	push	{r7}
 801d572:	b083      	sub	sp, #12
 801d574:	af00      	add	r7, sp, #0
 801d576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d578:	bf00      	nop
 801d57a:	370c      	adds	r7, #12
 801d57c:	46bd      	mov	sp, r7
 801d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d582:	4770      	bx	lr

0801d584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d584:	b480      	push	{r7}
 801d586:	b083      	sub	sp, #12
 801d588:	af00      	add	r7, sp, #0
 801d58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d58c:	bf00      	nop
 801d58e:	370c      	adds	r7, #12
 801d590:	46bd      	mov	sp, r7
 801d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d596:	4770      	bx	lr

0801d598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d598:	b480      	push	{r7}
 801d59a:	b083      	sub	sp, #12
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d5a0:	bf00      	nop
 801d5a2:	370c      	adds	r7, #12
 801d5a4:	46bd      	mov	sp, r7
 801d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5aa:	4770      	bx	lr

0801d5ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d5ac:	b480      	push	{r7}
 801d5ae:	b085      	sub	sp, #20
 801d5b0:	af00      	add	r7, sp, #0
 801d5b2:	6078      	str	r0, [r7, #4]
 801d5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	4a42      	ldr	r2, [pc, #264]	; (801d6c8 <TIM_Base_SetConfig+0x11c>)
 801d5c0:	4293      	cmp	r3, r2
 801d5c2:	d013      	beq.n	801d5ec <TIM_Base_SetConfig+0x40>
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d5ca:	d00f      	beq.n	801d5ec <TIM_Base_SetConfig+0x40>
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	4a3f      	ldr	r2, [pc, #252]	; (801d6cc <TIM_Base_SetConfig+0x120>)
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	d00b      	beq.n	801d5ec <TIM_Base_SetConfig+0x40>
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	4a3e      	ldr	r2, [pc, #248]	; (801d6d0 <TIM_Base_SetConfig+0x124>)
 801d5d8:	4293      	cmp	r3, r2
 801d5da:	d007      	beq.n	801d5ec <TIM_Base_SetConfig+0x40>
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	4a3d      	ldr	r2, [pc, #244]	; (801d6d4 <TIM_Base_SetConfig+0x128>)
 801d5e0:	4293      	cmp	r3, r2
 801d5e2:	d003      	beq.n	801d5ec <TIM_Base_SetConfig+0x40>
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	4a3c      	ldr	r2, [pc, #240]	; (801d6d8 <TIM_Base_SetConfig+0x12c>)
 801d5e8:	4293      	cmp	r3, r2
 801d5ea:	d108      	bne.n	801d5fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d5f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d5f4:	683b      	ldr	r3, [r7, #0]
 801d5f6:	685b      	ldr	r3, [r3, #4]
 801d5f8:	68fa      	ldr	r2, [r7, #12]
 801d5fa:	4313      	orrs	r3, r2
 801d5fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	4a31      	ldr	r2, [pc, #196]	; (801d6c8 <TIM_Base_SetConfig+0x11c>)
 801d602:	4293      	cmp	r3, r2
 801d604:	d01f      	beq.n	801d646 <TIM_Base_SetConfig+0x9a>
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d60c:	d01b      	beq.n	801d646 <TIM_Base_SetConfig+0x9a>
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	4a2e      	ldr	r2, [pc, #184]	; (801d6cc <TIM_Base_SetConfig+0x120>)
 801d612:	4293      	cmp	r3, r2
 801d614:	d017      	beq.n	801d646 <TIM_Base_SetConfig+0x9a>
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	4a2d      	ldr	r2, [pc, #180]	; (801d6d0 <TIM_Base_SetConfig+0x124>)
 801d61a:	4293      	cmp	r3, r2
 801d61c:	d013      	beq.n	801d646 <TIM_Base_SetConfig+0x9a>
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	4a2c      	ldr	r2, [pc, #176]	; (801d6d4 <TIM_Base_SetConfig+0x128>)
 801d622:	4293      	cmp	r3, r2
 801d624:	d00f      	beq.n	801d646 <TIM_Base_SetConfig+0x9a>
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	4a2c      	ldr	r2, [pc, #176]	; (801d6dc <TIM_Base_SetConfig+0x130>)
 801d62a:	4293      	cmp	r3, r2
 801d62c:	d00b      	beq.n	801d646 <TIM_Base_SetConfig+0x9a>
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	4a2b      	ldr	r2, [pc, #172]	; (801d6e0 <TIM_Base_SetConfig+0x134>)
 801d632:	4293      	cmp	r3, r2
 801d634:	d007      	beq.n	801d646 <TIM_Base_SetConfig+0x9a>
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	4a2a      	ldr	r2, [pc, #168]	; (801d6e4 <TIM_Base_SetConfig+0x138>)
 801d63a:	4293      	cmp	r3, r2
 801d63c:	d003      	beq.n	801d646 <TIM_Base_SetConfig+0x9a>
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	4a25      	ldr	r2, [pc, #148]	; (801d6d8 <TIM_Base_SetConfig+0x12c>)
 801d642:	4293      	cmp	r3, r2
 801d644:	d108      	bne.n	801d658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d64c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d64e:	683b      	ldr	r3, [r7, #0]
 801d650:	68db      	ldr	r3, [r3, #12]
 801d652:	68fa      	ldr	r2, [r7, #12]
 801d654:	4313      	orrs	r3, r2
 801d656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d65e:	683b      	ldr	r3, [r7, #0]
 801d660:	695b      	ldr	r3, [r3, #20]
 801d662:	4313      	orrs	r3, r2
 801d664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	68fa      	ldr	r2, [r7, #12]
 801d66a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d66c:	683b      	ldr	r3, [r7, #0]
 801d66e:	689a      	ldr	r2, [r3, #8]
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d674:	683b      	ldr	r3, [r7, #0]
 801d676:	681a      	ldr	r2, [r3, #0]
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	4a12      	ldr	r2, [pc, #72]	; (801d6c8 <TIM_Base_SetConfig+0x11c>)
 801d680:	4293      	cmp	r3, r2
 801d682:	d013      	beq.n	801d6ac <TIM_Base_SetConfig+0x100>
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	4a13      	ldr	r2, [pc, #76]	; (801d6d4 <TIM_Base_SetConfig+0x128>)
 801d688:	4293      	cmp	r3, r2
 801d68a:	d00f      	beq.n	801d6ac <TIM_Base_SetConfig+0x100>
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	4a13      	ldr	r2, [pc, #76]	; (801d6dc <TIM_Base_SetConfig+0x130>)
 801d690:	4293      	cmp	r3, r2
 801d692:	d00b      	beq.n	801d6ac <TIM_Base_SetConfig+0x100>
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	4a12      	ldr	r2, [pc, #72]	; (801d6e0 <TIM_Base_SetConfig+0x134>)
 801d698:	4293      	cmp	r3, r2
 801d69a:	d007      	beq.n	801d6ac <TIM_Base_SetConfig+0x100>
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	4a11      	ldr	r2, [pc, #68]	; (801d6e4 <TIM_Base_SetConfig+0x138>)
 801d6a0:	4293      	cmp	r3, r2
 801d6a2:	d003      	beq.n	801d6ac <TIM_Base_SetConfig+0x100>
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	4a0c      	ldr	r2, [pc, #48]	; (801d6d8 <TIM_Base_SetConfig+0x12c>)
 801d6a8:	4293      	cmp	r3, r2
 801d6aa:	d103      	bne.n	801d6b4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d6ac:	683b      	ldr	r3, [r7, #0]
 801d6ae:	691a      	ldr	r2, [r3, #16]
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	2201      	movs	r2, #1
 801d6b8:	615a      	str	r2, [r3, #20]
}
 801d6ba:	bf00      	nop
 801d6bc:	3714      	adds	r7, #20
 801d6be:	46bd      	mov	sp, r7
 801d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6c4:	4770      	bx	lr
 801d6c6:	bf00      	nop
 801d6c8:	40012c00 	.word	0x40012c00
 801d6cc:	40000400 	.word	0x40000400
 801d6d0:	40000800 	.word	0x40000800
 801d6d4:	40013400 	.word	0x40013400
 801d6d8:	40015000 	.word	0x40015000
 801d6dc:	40014000 	.word	0x40014000
 801d6e0:	40014400 	.word	0x40014400
 801d6e4:	40014800 	.word	0x40014800

0801d6e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d6e8:	b480      	push	{r7}
 801d6ea:	b087      	sub	sp, #28
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	6078      	str	r0, [r7, #4]
 801d6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	6a1b      	ldr	r3, [r3, #32]
 801d6f6:	f023 0201 	bic.w	r2, r3, #1
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	6a1b      	ldr	r3, [r3, #32]
 801d702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	685b      	ldr	r3, [r3, #4]
 801d708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	699b      	ldr	r3, [r3, #24]
 801d70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d71a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	f023 0303 	bic.w	r3, r3, #3
 801d722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d724:	683b      	ldr	r3, [r7, #0]
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	68fa      	ldr	r2, [r7, #12]
 801d72a:	4313      	orrs	r3, r2
 801d72c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d72e:	697b      	ldr	r3, [r7, #20]
 801d730:	f023 0302 	bic.w	r3, r3, #2
 801d734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d736:	683b      	ldr	r3, [r7, #0]
 801d738:	689b      	ldr	r3, [r3, #8]
 801d73a:	697a      	ldr	r2, [r7, #20]
 801d73c:	4313      	orrs	r3, r2
 801d73e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	4a30      	ldr	r2, [pc, #192]	; (801d804 <TIM_OC1_SetConfig+0x11c>)
 801d744:	4293      	cmp	r3, r2
 801d746:	d013      	beq.n	801d770 <TIM_OC1_SetConfig+0x88>
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	4a2f      	ldr	r2, [pc, #188]	; (801d808 <TIM_OC1_SetConfig+0x120>)
 801d74c:	4293      	cmp	r3, r2
 801d74e:	d00f      	beq.n	801d770 <TIM_OC1_SetConfig+0x88>
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	4a2e      	ldr	r2, [pc, #184]	; (801d80c <TIM_OC1_SetConfig+0x124>)
 801d754:	4293      	cmp	r3, r2
 801d756:	d00b      	beq.n	801d770 <TIM_OC1_SetConfig+0x88>
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	4a2d      	ldr	r2, [pc, #180]	; (801d810 <TIM_OC1_SetConfig+0x128>)
 801d75c:	4293      	cmp	r3, r2
 801d75e:	d007      	beq.n	801d770 <TIM_OC1_SetConfig+0x88>
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	4a2c      	ldr	r2, [pc, #176]	; (801d814 <TIM_OC1_SetConfig+0x12c>)
 801d764:	4293      	cmp	r3, r2
 801d766:	d003      	beq.n	801d770 <TIM_OC1_SetConfig+0x88>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	4a2b      	ldr	r2, [pc, #172]	; (801d818 <TIM_OC1_SetConfig+0x130>)
 801d76c:	4293      	cmp	r3, r2
 801d76e:	d10c      	bne.n	801d78a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d770:	697b      	ldr	r3, [r7, #20]
 801d772:	f023 0308 	bic.w	r3, r3, #8
 801d776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d778:	683b      	ldr	r3, [r7, #0]
 801d77a:	68db      	ldr	r3, [r3, #12]
 801d77c:	697a      	ldr	r2, [r7, #20]
 801d77e:	4313      	orrs	r3, r2
 801d780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d782:	697b      	ldr	r3, [r7, #20]
 801d784:	f023 0304 	bic.w	r3, r3, #4
 801d788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	4a1d      	ldr	r2, [pc, #116]	; (801d804 <TIM_OC1_SetConfig+0x11c>)
 801d78e:	4293      	cmp	r3, r2
 801d790:	d013      	beq.n	801d7ba <TIM_OC1_SetConfig+0xd2>
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	4a1c      	ldr	r2, [pc, #112]	; (801d808 <TIM_OC1_SetConfig+0x120>)
 801d796:	4293      	cmp	r3, r2
 801d798:	d00f      	beq.n	801d7ba <TIM_OC1_SetConfig+0xd2>
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	4a1b      	ldr	r2, [pc, #108]	; (801d80c <TIM_OC1_SetConfig+0x124>)
 801d79e:	4293      	cmp	r3, r2
 801d7a0:	d00b      	beq.n	801d7ba <TIM_OC1_SetConfig+0xd2>
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	4a1a      	ldr	r2, [pc, #104]	; (801d810 <TIM_OC1_SetConfig+0x128>)
 801d7a6:	4293      	cmp	r3, r2
 801d7a8:	d007      	beq.n	801d7ba <TIM_OC1_SetConfig+0xd2>
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	4a19      	ldr	r2, [pc, #100]	; (801d814 <TIM_OC1_SetConfig+0x12c>)
 801d7ae:	4293      	cmp	r3, r2
 801d7b0:	d003      	beq.n	801d7ba <TIM_OC1_SetConfig+0xd2>
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	4a18      	ldr	r2, [pc, #96]	; (801d818 <TIM_OC1_SetConfig+0x130>)
 801d7b6:	4293      	cmp	r3, r2
 801d7b8:	d111      	bne.n	801d7de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d7ba:	693b      	ldr	r3, [r7, #16]
 801d7bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d7c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d7c2:	693b      	ldr	r3, [r7, #16]
 801d7c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d7c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d7ca:	683b      	ldr	r3, [r7, #0]
 801d7cc:	695b      	ldr	r3, [r3, #20]
 801d7ce:	693a      	ldr	r2, [r7, #16]
 801d7d0:	4313      	orrs	r3, r2
 801d7d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d7d4:	683b      	ldr	r3, [r7, #0]
 801d7d6:	699b      	ldr	r3, [r3, #24]
 801d7d8:	693a      	ldr	r2, [r7, #16]
 801d7da:	4313      	orrs	r3, r2
 801d7dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	693a      	ldr	r2, [r7, #16]
 801d7e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	68fa      	ldr	r2, [r7, #12]
 801d7e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d7ea:	683b      	ldr	r3, [r7, #0]
 801d7ec:	685a      	ldr	r2, [r3, #4]
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	697a      	ldr	r2, [r7, #20]
 801d7f6:	621a      	str	r2, [r3, #32]
}
 801d7f8:	bf00      	nop
 801d7fa:	371c      	adds	r7, #28
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d802:	4770      	bx	lr
 801d804:	40012c00 	.word	0x40012c00
 801d808:	40013400 	.word	0x40013400
 801d80c:	40014000 	.word	0x40014000
 801d810:	40014400 	.word	0x40014400
 801d814:	40014800 	.word	0x40014800
 801d818:	40015000 	.word	0x40015000

0801d81c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d81c:	b480      	push	{r7}
 801d81e:	b087      	sub	sp, #28
 801d820:	af00      	add	r7, sp, #0
 801d822:	6078      	str	r0, [r7, #4]
 801d824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	6a1b      	ldr	r3, [r3, #32]
 801d82a:	f023 0210 	bic.w	r2, r3, #16
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	6a1b      	ldr	r3, [r3, #32]
 801d836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	685b      	ldr	r3, [r3, #4]
 801d83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	699b      	ldr	r3, [r3, #24]
 801d842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d84a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d858:	683b      	ldr	r3, [r7, #0]
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	021b      	lsls	r3, r3, #8
 801d85e:	68fa      	ldr	r2, [r7, #12]
 801d860:	4313      	orrs	r3, r2
 801d862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d864:	697b      	ldr	r3, [r7, #20]
 801d866:	f023 0320 	bic.w	r3, r3, #32
 801d86a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d86c:	683b      	ldr	r3, [r7, #0]
 801d86e:	689b      	ldr	r3, [r3, #8]
 801d870:	011b      	lsls	r3, r3, #4
 801d872:	697a      	ldr	r2, [r7, #20]
 801d874:	4313      	orrs	r3, r2
 801d876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	4a2c      	ldr	r2, [pc, #176]	; (801d92c <TIM_OC2_SetConfig+0x110>)
 801d87c:	4293      	cmp	r3, r2
 801d87e:	d007      	beq.n	801d890 <TIM_OC2_SetConfig+0x74>
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	4a2b      	ldr	r2, [pc, #172]	; (801d930 <TIM_OC2_SetConfig+0x114>)
 801d884:	4293      	cmp	r3, r2
 801d886:	d003      	beq.n	801d890 <TIM_OC2_SetConfig+0x74>
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	4a2a      	ldr	r2, [pc, #168]	; (801d934 <TIM_OC2_SetConfig+0x118>)
 801d88c:	4293      	cmp	r3, r2
 801d88e:	d10d      	bne.n	801d8ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d890:	697b      	ldr	r3, [r7, #20]
 801d892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d898:	683b      	ldr	r3, [r7, #0]
 801d89a:	68db      	ldr	r3, [r3, #12]
 801d89c:	011b      	lsls	r3, r3, #4
 801d89e:	697a      	ldr	r2, [r7, #20]
 801d8a0:	4313      	orrs	r3, r2
 801d8a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d8a4:	697b      	ldr	r3, [r7, #20]
 801d8a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d8aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	4a1f      	ldr	r2, [pc, #124]	; (801d92c <TIM_OC2_SetConfig+0x110>)
 801d8b0:	4293      	cmp	r3, r2
 801d8b2:	d013      	beq.n	801d8dc <TIM_OC2_SetConfig+0xc0>
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	4a1e      	ldr	r2, [pc, #120]	; (801d930 <TIM_OC2_SetConfig+0x114>)
 801d8b8:	4293      	cmp	r3, r2
 801d8ba:	d00f      	beq.n	801d8dc <TIM_OC2_SetConfig+0xc0>
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	4a1e      	ldr	r2, [pc, #120]	; (801d938 <TIM_OC2_SetConfig+0x11c>)
 801d8c0:	4293      	cmp	r3, r2
 801d8c2:	d00b      	beq.n	801d8dc <TIM_OC2_SetConfig+0xc0>
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	4a1d      	ldr	r2, [pc, #116]	; (801d93c <TIM_OC2_SetConfig+0x120>)
 801d8c8:	4293      	cmp	r3, r2
 801d8ca:	d007      	beq.n	801d8dc <TIM_OC2_SetConfig+0xc0>
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	4a1c      	ldr	r2, [pc, #112]	; (801d940 <TIM_OC2_SetConfig+0x124>)
 801d8d0:	4293      	cmp	r3, r2
 801d8d2:	d003      	beq.n	801d8dc <TIM_OC2_SetConfig+0xc0>
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	4a17      	ldr	r2, [pc, #92]	; (801d934 <TIM_OC2_SetConfig+0x118>)
 801d8d8:	4293      	cmp	r3, r2
 801d8da:	d113      	bne.n	801d904 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d8dc:	693b      	ldr	r3, [r7, #16]
 801d8de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d8e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d8e4:	693b      	ldr	r3, [r7, #16]
 801d8e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d8ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d8ec:	683b      	ldr	r3, [r7, #0]
 801d8ee:	695b      	ldr	r3, [r3, #20]
 801d8f0:	009b      	lsls	r3, r3, #2
 801d8f2:	693a      	ldr	r2, [r7, #16]
 801d8f4:	4313      	orrs	r3, r2
 801d8f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d8f8:	683b      	ldr	r3, [r7, #0]
 801d8fa:	699b      	ldr	r3, [r3, #24]
 801d8fc:	009b      	lsls	r3, r3, #2
 801d8fe:	693a      	ldr	r2, [r7, #16]
 801d900:	4313      	orrs	r3, r2
 801d902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	693a      	ldr	r2, [r7, #16]
 801d908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	68fa      	ldr	r2, [r7, #12]
 801d90e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d910:	683b      	ldr	r3, [r7, #0]
 801d912:	685a      	ldr	r2, [r3, #4]
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	697a      	ldr	r2, [r7, #20]
 801d91c:	621a      	str	r2, [r3, #32]
}
 801d91e:	bf00      	nop
 801d920:	371c      	adds	r7, #28
 801d922:	46bd      	mov	sp, r7
 801d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d928:	4770      	bx	lr
 801d92a:	bf00      	nop
 801d92c:	40012c00 	.word	0x40012c00
 801d930:	40013400 	.word	0x40013400
 801d934:	40015000 	.word	0x40015000
 801d938:	40014000 	.word	0x40014000
 801d93c:	40014400 	.word	0x40014400
 801d940:	40014800 	.word	0x40014800

0801d944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d944:	b480      	push	{r7}
 801d946:	b087      	sub	sp, #28
 801d948:	af00      	add	r7, sp, #0
 801d94a:	6078      	str	r0, [r7, #4]
 801d94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	6a1b      	ldr	r3, [r3, #32]
 801d952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	6a1b      	ldr	r3, [r3, #32]
 801d95e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	685b      	ldr	r3, [r3, #4]
 801d964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	69db      	ldr	r3, [r3, #28]
 801d96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	f023 0303 	bic.w	r3, r3, #3
 801d97e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d980:	683b      	ldr	r3, [r7, #0]
 801d982:	681b      	ldr	r3, [r3, #0]
 801d984:	68fa      	ldr	r2, [r7, #12]
 801d986:	4313      	orrs	r3, r2
 801d988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d98a:	697b      	ldr	r3, [r7, #20]
 801d98c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d992:	683b      	ldr	r3, [r7, #0]
 801d994:	689b      	ldr	r3, [r3, #8]
 801d996:	021b      	lsls	r3, r3, #8
 801d998:	697a      	ldr	r2, [r7, #20]
 801d99a:	4313      	orrs	r3, r2
 801d99c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	4a2b      	ldr	r2, [pc, #172]	; (801da50 <TIM_OC3_SetConfig+0x10c>)
 801d9a2:	4293      	cmp	r3, r2
 801d9a4:	d007      	beq.n	801d9b6 <TIM_OC3_SetConfig+0x72>
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	4a2a      	ldr	r2, [pc, #168]	; (801da54 <TIM_OC3_SetConfig+0x110>)
 801d9aa:	4293      	cmp	r3, r2
 801d9ac:	d003      	beq.n	801d9b6 <TIM_OC3_SetConfig+0x72>
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	4a29      	ldr	r2, [pc, #164]	; (801da58 <TIM_OC3_SetConfig+0x114>)
 801d9b2:	4293      	cmp	r3, r2
 801d9b4:	d10d      	bne.n	801d9d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d9b6:	697b      	ldr	r3, [r7, #20]
 801d9b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d9be:	683b      	ldr	r3, [r7, #0]
 801d9c0:	68db      	ldr	r3, [r3, #12]
 801d9c2:	021b      	lsls	r3, r3, #8
 801d9c4:	697a      	ldr	r2, [r7, #20]
 801d9c6:	4313      	orrs	r3, r2
 801d9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d9ca:	697b      	ldr	r3, [r7, #20]
 801d9cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	4a1e      	ldr	r2, [pc, #120]	; (801da50 <TIM_OC3_SetConfig+0x10c>)
 801d9d6:	4293      	cmp	r3, r2
 801d9d8:	d013      	beq.n	801da02 <TIM_OC3_SetConfig+0xbe>
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	4a1d      	ldr	r2, [pc, #116]	; (801da54 <TIM_OC3_SetConfig+0x110>)
 801d9de:	4293      	cmp	r3, r2
 801d9e0:	d00f      	beq.n	801da02 <TIM_OC3_SetConfig+0xbe>
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	4a1d      	ldr	r2, [pc, #116]	; (801da5c <TIM_OC3_SetConfig+0x118>)
 801d9e6:	4293      	cmp	r3, r2
 801d9e8:	d00b      	beq.n	801da02 <TIM_OC3_SetConfig+0xbe>
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	4a1c      	ldr	r2, [pc, #112]	; (801da60 <TIM_OC3_SetConfig+0x11c>)
 801d9ee:	4293      	cmp	r3, r2
 801d9f0:	d007      	beq.n	801da02 <TIM_OC3_SetConfig+0xbe>
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	4a1b      	ldr	r2, [pc, #108]	; (801da64 <TIM_OC3_SetConfig+0x120>)
 801d9f6:	4293      	cmp	r3, r2
 801d9f8:	d003      	beq.n	801da02 <TIM_OC3_SetConfig+0xbe>
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	4a16      	ldr	r2, [pc, #88]	; (801da58 <TIM_OC3_SetConfig+0x114>)
 801d9fe:	4293      	cmp	r3, r2
 801da00:	d113      	bne.n	801da2a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801da02:	693b      	ldr	r3, [r7, #16]
 801da04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801da08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801da0a:	693b      	ldr	r3, [r7, #16]
 801da0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801da10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801da12:	683b      	ldr	r3, [r7, #0]
 801da14:	695b      	ldr	r3, [r3, #20]
 801da16:	011b      	lsls	r3, r3, #4
 801da18:	693a      	ldr	r2, [r7, #16]
 801da1a:	4313      	orrs	r3, r2
 801da1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801da1e:	683b      	ldr	r3, [r7, #0]
 801da20:	699b      	ldr	r3, [r3, #24]
 801da22:	011b      	lsls	r3, r3, #4
 801da24:	693a      	ldr	r2, [r7, #16]
 801da26:	4313      	orrs	r3, r2
 801da28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	693a      	ldr	r2, [r7, #16]
 801da2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	68fa      	ldr	r2, [r7, #12]
 801da34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801da36:	683b      	ldr	r3, [r7, #0]
 801da38:	685a      	ldr	r2, [r3, #4]
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	697a      	ldr	r2, [r7, #20]
 801da42:	621a      	str	r2, [r3, #32]
}
 801da44:	bf00      	nop
 801da46:	371c      	adds	r7, #28
 801da48:	46bd      	mov	sp, r7
 801da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da4e:	4770      	bx	lr
 801da50:	40012c00 	.word	0x40012c00
 801da54:	40013400 	.word	0x40013400
 801da58:	40015000 	.word	0x40015000
 801da5c:	40014000 	.word	0x40014000
 801da60:	40014400 	.word	0x40014400
 801da64:	40014800 	.word	0x40014800

0801da68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801da68:	b480      	push	{r7}
 801da6a:	b087      	sub	sp, #28
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	6078      	str	r0, [r7, #4]
 801da70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	6a1b      	ldr	r3, [r3, #32]
 801da76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	6a1b      	ldr	r3, [r3, #32]
 801da82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	685b      	ldr	r3, [r3, #4]
 801da88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	69db      	ldr	r3, [r3, #28]
 801da8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801da96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801da9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801daa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801daa4:	683b      	ldr	r3, [r7, #0]
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	021b      	lsls	r3, r3, #8
 801daaa:	68fa      	ldr	r2, [r7, #12]
 801daac:	4313      	orrs	r3, r2
 801daae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801dab0:	697b      	ldr	r3, [r7, #20]
 801dab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801dab8:	683b      	ldr	r3, [r7, #0]
 801daba:	689b      	ldr	r3, [r3, #8]
 801dabc:	031b      	lsls	r3, r3, #12
 801dabe:	697a      	ldr	r2, [r7, #20]
 801dac0:	4313      	orrs	r3, r2
 801dac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	4a2c      	ldr	r2, [pc, #176]	; (801db78 <TIM_OC4_SetConfig+0x110>)
 801dac8:	4293      	cmp	r3, r2
 801daca:	d007      	beq.n	801dadc <TIM_OC4_SetConfig+0x74>
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	4a2b      	ldr	r2, [pc, #172]	; (801db7c <TIM_OC4_SetConfig+0x114>)
 801dad0:	4293      	cmp	r3, r2
 801dad2:	d003      	beq.n	801dadc <TIM_OC4_SetConfig+0x74>
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	4a2a      	ldr	r2, [pc, #168]	; (801db80 <TIM_OC4_SetConfig+0x118>)
 801dad8:	4293      	cmp	r3, r2
 801dada:	d10d      	bne.n	801daf8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801dadc:	697b      	ldr	r3, [r7, #20]
 801dade:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801dae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801dae4:	683b      	ldr	r3, [r7, #0]
 801dae6:	68db      	ldr	r3, [r3, #12]
 801dae8:	031b      	lsls	r3, r3, #12
 801daea:	697a      	ldr	r2, [r7, #20]
 801daec:	4313      	orrs	r3, r2
 801daee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801daf0:	697b      	ldr	r3, [r7, #20]
 801daf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801daf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	4a1f      	ldr	r2, [pc, #124]	; (801db78 <TIM_OC4_SetConfig+0x110>)
 801dafc:	4293      	cmp	r3, r2
 801dafe:	d013      	beq.n	801db28 <TIM_OC4_SetConfig+0xc0>
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	4a1e      	ldr	r2, [pc, #120]	; (801db7c <TIM_OC4_SetConfig+0x114>)
 801db04:	4293      	cmp	r3, r2
 801db06:	d00f      	beq.n	801db28 <TIM_OC4_SetConfig+0xc0>
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	4a1e      	ldr	r2, [pc, #120]	; (801db84 <TIM_OC4_SetConfig+0x11c>)
 801db0c:	4293      	cmp	r3, r2
 801db0e:	d00b      	beq.n	801db28 <TIM_OC4_SetConfig+0xc0>
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	4a1d      	ldr	r2, [pc, #116]	; (801db88 <TIM_OC4_SetConfig+0x120>)
 801db14:	4293      	cmp	r3, r2
 801db16:	d007      	beq.n	801db28 <TIM_OC4_SetConfig+0xc0>
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	4a1c      	ldr	r2, [pc, #112]	; (801db8c <TIM_OC4_SetConfig+0x124>)
 801db1c:	4293      	cmp	r3, r2
 801db1e:	d003      	beq.n	801db28 <TIM_OC4_SetConfig+0xc0>
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	4a17      	ldr	r2, [pc, #92]	; (801db80 <TIM_OC4_SetConfig+0x118>)
 801db24:	4293      	cmp	r3, r2
 801db26:	d113      	bne.n	801db50 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801db28:	693b      	ldr	r3, [r7, #16]
 801db2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801db2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801db30:	693b      	ldr	r3, [r7, #16]
 801db32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801db36:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801db38:	683b      	ldr	r3, [r7, #0]
 801db3a:	695b      	ldr	r3, [r3, #20]
 801db3c:	019b      	lsls	r3, r3, #6
 801db3e:	693a      	ldr	r2, [r7, #16]
 801db40:	4313      	orrs	r3, r2
 801db42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801db44:	683b      	ldr	r3, [r7, #0]
 801db46:	699b      	ldr	r3, [r3, #24]
 801db48:	019b      	lsls	r3, r3, #6
 801db4a:	693a      	ldr	r2, [r7, #16]
 801db4c:	4313      	orrs	r3, r2
 801db4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	693a      	ldr	r2, [r7, #16]
 801db54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	68fa      	ldr	r2, [r7, #12]
 801db5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801db5c:	683b      	ldr	r3, [r7, #0]
 801db5e:	685a      	ldr	r2, [r3, #4]
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	697a      	ldr	r2, [r7, #20]
 801db68:	621a      	str	r2, [r3, #32]
}
 801db6a:	bf00      	nop
 801db6c:	371c      	adds	r7, #28
 801db6e:	46bd      	mov	sp, r7
 801db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db74:	4770      	bx	lr
 801db76:	bf00      	nop
 801db78:	40012c00 	.word	0x40012c00
 801db7c:	40013400 	.word	0x40013400
 801db80:	40015000 	.word	0x40015000
 801db84:	40014000 	.word	0x40014000
 801db88:	40014400 	.word	0x40014400
 801db8c:	40014800 	.word	0x40014800

0801db90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801db90:	b480      	push	{r7}
 801db92:	b087      	sub	sp, #28
 801db94:	af00      	add	r7, sp, #0
 801db96:	6078      	str	r0, [r7, #4]
 801db98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	6a1b      	ldr	r3, [r3, #32]
 801db9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	6a1b      	ldr	r3, [r3, #32]
 801dbaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	685b      	ldr	r3, [r3, #4]
 801dbb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dbbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dbc4:	683b      	ldr	r3, [r7, #0]
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	68fa      	ldr	r2, [r7, #12]
 801dbca:	4313      	orrs	r3, r2
 801dbcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801dbce:	693b      	ldr	r3, [r7, #16]
 801dbd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801dbd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801dbd6:	683b      	ldr	r3, [r7, #0]
 801dbd8:	689b      	ldr	r3, [r3, #8]
 801dbda:	041b      	lsls	r3, r3, #16
 801dbdc:	693a      	ldr	r2, [r7, #16]
 801dbde:	4313      	orrs	r3, r2
 801dbe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	4a19      	ldr	r2, [pc, #100]	; (801dc4c <TIM_OC5_SetConfig+0xbc>)
 801dbe6:	4293      	cmp	r3, r2
 801dbe8:	d013      	beq.n	801dc12 <TIM_OC5_SetConfig+0x82>
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	4a18      	ldr	r2, [pc, #96]	; (801dc50 <TIM_OC5_SetConfig+0xc0>)
 801dbee:	4293      	cmp	r3, r2
 801dbf0:	d00f      	beq.n	801dc12 <TIM_OC5_SetConfig+0x82>
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	4a17      	ldr	r2, [pc, #92]	; (801dc54 <TIM_OC5_SetConfig+0xc4>)
 801dbf6:	4293      	cmp	r3, r2
 801dbf8:	d00b      	beq.n	801dc12 <TIM_OC5_SetConfig+0x82>
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	4a16      	ldr	r2, [pc, #88]	; (801dc58 <TIM_OC5_SetConfig+0xc8>)
 801dbfe:	4293      	cmp	r3, r2
 801dc00:	d007      	beq.n	801dc12 <TIM_OC5_SetConfig+0x82>
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	4a15      	ldr	r2, [pc, #84]	; (801dc5c <TIM_OC5_SetConfig+0xcc>)
 801dc06:	4293      	cmp	r3, r2
 801dc08:	d003      	beq.n	801dc12 <TIM_OC5_SetConfig+0x82>
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	4a14      	ldr	r2, [pc, #80]	; (801dc60 <TIM_OC5_SetConfig+0xd0>)
 801dc0e:	4293      	cmp	r3, r2
 801dc10:	d109      	bne.n	801dc26 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801dc12:	697b      	ldr	r3, [r7, #20]
 801dc14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dc18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801dc1a:	683b      	ldr	r3, [r7, #0]
 801dc1c:	695b      	ldr	r3, [r3, #20]
 801dc1e:	021b      	lsls	r3, r3, #8
 801dc20:	697a      	ldr	r2, [r7, #20]
 801dc22:	4313      	orrs	r3, r2
 801dc24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	697a      	ldr	r2, [r7, #20]
 801dc2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	68fa      	ldr	r2, [r7, #12]
 801dc30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801dc32:	683b      	ldr	r3, [r7, #0]
 801dc34:	685a      	ldr	r2, [r3, #4]
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	693a      	ldr	r2, [r7, #16]
 801dc3e:	621a      	str	r2, [r3, #32]
}
 801dc40:	bf00      	nop
 801dc42:	371c      	adds	r7, #28
 801dc44:	46bd      	mov	sp, r7
 801dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc4a:	4770      	bx	lr
 801dc4c:	40012c00 	.word	0x40012c00
 801dc50:	40013400 	.word	0x40013400
 801dc54:	40014000 	.word	0x40014000
 801dc58:	40014400 	.word	0x40014400
 801dc5c:	40014800 	.word	0x40014800
 801dc60:	40015000 	.word	0x40015000

0801dc64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801dc64:	b480      	push	{r7}
 801dc66:	b087      	sub	sp, #28
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	6078      	str	r0, [r7, #4]
 801dc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	6a1b      	ldr	r3, [r3, #32]
 801dc72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	6a1b      	ldr	r3, [r3, #32]
 801dc7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	685b      	ldr	r3, [r3, #4]
 801dc84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dc92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dc96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dc98:	683b      	ldr	r3, [r7, #0]
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	021b      	lsls	r3, r3, #8
 801dc9e:	68fa      	ldr	r2, [r7, #12]
 801dca0:	4313      	orrs	r3, r2
 801dca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801dca4:	693b      	ldr	r3, [r7, #16]
 801dca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801dcaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801dcac:	683b      	ldr	r3, [r7, #0]
 801dcae:	689b      	ldr	r3, [r3, #8]
 801dcb0:	051b      	lsls	r3, r3, #20
 801dcb2:	693a      	ldr	r2, [r7, #16]
 801dcb4:	4313      	orrs	r3, r2
 801dcb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	4a1a      	ldr	r2, [pc, #104]	; (801dd24 <TIM_OC6_SetConfig+0xc0>)
 801dcbc:	4293      	cmp	r3, r2
 801dcbe:	d013      	beq.n	801dce8 <TIM_OC6_SetConfig+0x84>
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	4a19      	ldr	r2, [pc, #100]	; (801dd28 <TIM_OC6_SetConfig+0xc4>)
 801dcc4:	4293      	cmp	r3, r2
 801dcc6:	d00f      	beq.n	801dce8 <TIM_OC6_SetConfig+0x84>
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	4a18      	ldr	r2, [pc, #96]	; (801dd2c <TIM_OC6_SetConfig+0xc8>)
 801dccc:	4293      	cmp	r3, r2
 801dcce:	d00b      	beq.n	801dce8 <TIM_OC6_SetConfig+0x84>
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	4a17      	ldr	r2, [pc, #92]	; (801dd30 <TIM_OC6_SetConfig+0xcc>)
 801dcd4:	4293      	cmp	r3, r2
 801dcd6:	d007      	beq.n	801dce8 <TIM_OC6_SetConfig+0x84>
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	4a16      	ldr	r2, [pc, #88]	; (801dd34 <TIM_OC6_SetConfig+0xd0>)
 801dcdc:	4293      	cmp	r3, r2
 801dcde:	d003      	beq.n	801dce8 <TIM_OC6_SetConfig+0x84>
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	4a15      	ldr	r2, [pc, #84]	; (801dd38 <TIM_OC6_SetConfig+0xd4>)
 801dce4:	4293      	cmp	r3, r2
 801dce6:	d109      	bne.n	801dcfc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801dce8:	697b      	ldr	r3, [r7, #20]
 801dcea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801dcee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801dcf0:	683b      	ldr	r3, [r7, #0]
 801dcf2:	695b      	ldr	r3, [r3, #20]
 801dcf4:	029b      	lsls	r3, r3, #10
 801dcf6:	697a      	ldr	r2, [r7, #20]
 801dcf8:	4313      	orrs	r3, r2
 801dcfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	697a      	ldr	r2, [r7, #20]
 801dd00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	68fa      	ldr	r2, [r7, #12]
 801dd06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801dd08:	683b      	ldr	r3, [r7, #0]
 801dd0a:	685a      	ldr	r2, [r3, #4]
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	693a      	ldr	r2, [r7, #16]
 801dd14:	621a      	str	r2, [r3, #32]
}
 801dd16:	bf00      	nop
 801dd18:	371c      	adds	r7, #28
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd20:	4770      	bx	lr
 801dd22:	bf00      	nop
 801dd24:	40012c00 	.word	0x40012c00
 801dd28:	40013400 	.word	0x40013400
 801dd2c:	40014000 	.word	0x40014000
 801dd30:	40014400 	.word	0x40014400
 801dd34:	40014800 	.word	0x40014800
 801dd38:	40015000 	.word	0x40015000

0801dd3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801dd3c:	b480      	push	{r7}
 801dd3e:	b087      	sub	sp, #28
 801dd40:	af00      	add	r7, sp, #0
 801dd42:	60f8      	str	r0, [r7, #12]
 801dd44:	60b9      	str	r1, [r7, #8]
 801dd46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801dd48:	68bb      	ldr	r3, [r7, #8]
 801dd4a:	f003 031f 	and.w	r3, r3, #31
 801dd4e:	2201      	movs	r2, #1
 801dd50:	fa02 f303 	lsl.w	r3, r2, r3
 801dd54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	6a1a      	ldr	r2, [r3, #32]
 801dd5a:	697b      	ldr	r3, [r7, #20]
 801dd5c:	43db      	mvns	r3, r3
 801dd5e:	401a      	ands	r2, r3
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	6a1a      	ldr	r2, [r3, #32]
 801dd68:	68bb      	ldr	r3, [r7, #8]
 801dd6a:	f003 031f 	and.w	r3, r3, #31
 801dd6e:	6879      	ldr	r1, [r7, #4]
 801dd70:	fa01 f303 	lsl.w	r3, r1, r3
 801dd74:	431a      	orrs	r2, r3
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	621a      	str	r2, [r3, #32]
}
 801dd7a:	bf00      	nop
 801dd7c:	371c      	adds	r7, #28
 801dd7e:	46bd      	mov	sp, r7
 801dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd84:	4770      	bx	lr
	...

0801dd88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801dd88:	b480      	push	{r7}
 801dd8a:	b085      	sub	sp, #20
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
 801dd90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dd98:	2b01      	cmp	r3, #1
 801dd9a:	d101      	bne.n	801dda0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801dd9c:	2302      	movs	r3, #2
 801dd9e:	e06f      	b.n	801de80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	2201      	movs	r2, #1
 801dda4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	2202      	movs	r2, #2
 801ddac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	685b      	ldr	r3, [r3, #4]
 801ddb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	689b      	ldr	r3, [r3, #8]
 801ddbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	4a31      	ldr	r2, [pc, #196]	; (801de8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801ddc6:	4293      	cmp	r3, r2
 801ddc8:	d009      	beq.n	801ddde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801ddca:	687b      	ldr	r3, [r7, #4]
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	4a30      	ldr	r2, [pc, #192]	; (801de90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801ddd0:	4293      	cmp	r3, r2
 801ddd2:	d004      	beq.n	801ddde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	4a2e      	ldr	r2, [pc, #184]	; (801de94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801ddda:	4293      	cmp	r3, r2
 801dddc:	d108      	bne.n	801ddf0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801dde4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801dde6:	683b      	ldr	r3, [r7, #0]
 801dde8:	685b      	ldr	r3, [r3, #4]
 801ddea:	68fa      	ldr	r2, [r7, #12]
 801ddec:	4313      	orrs	r3, r2
 801ddee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801ddf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ddfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801ddfc:	683b      	ldr	r3, [r7, #0]
 801ddfe:	681b      	ldr	r3, [r3, #0]
 801de00:	68fa      	ldr	r2, [r7, #12]
 801de02:	4313      	orrs	r3, r2
 801de04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	681b      	ldr	r3, [r3, #0]
 801de0a:	68fa      	ldr	r2, [r7, #12]
 801de0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	4a1e      	ldr	r2, [pc, #120]	; (801de8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801de14:	4293      	cmp	r3, r2
 801de16:	d01d      	beq.n	801de54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801de20:	d018      	beq.n	801de54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	4a1c      	ldr	r2, [pc, #112]	; (801de98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801de28:	4293      	cmp	r3, r2
 801de2a:	d013      	beq.n	801de54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	4a1a      	ldr	r2, [pc, #104]	; (801de9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801de32:	4293      	cmp	r3, r2
 801de34:	d00e      	beq.n	801de54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	4a15      	ldr	r2, [pc, #84]	; (801de90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801de3c:	4293      	cmp	r3, r2
 801de3e:	d009      	beq.n	801de54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	681b      	ldr	r3, [r3, #0]
 801de44:	4a16      	ldr	r2, [pc, #88]	; (801dea0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801de46:	4293      	cmp	r3, r2
 801de48:	d004      	beq.n	801de54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	4a11      	ldr	r2, [pc, #68]	; (801de94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801de50:	4293      	cmp	r3, r2
 801de52:	d10c      	bne.n	801de6e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801de54:	68bb      	ldr	r3, [r7, #8]
 801de56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801de5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801de5c:	683b      	ldr	r3, [r7, #0]
 801de5e:	689b      	ldr	r3, [r3, #8]
 801de60:	68ba      	ldr	r2, [r7, #8]
 801de62:	4313      	orrs	r3, r2
 801de64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	68ba      	ldr	r2, [r7, #8]
 801de6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	2201      	movs	r2, #1
 801de72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	2200      	movs	r2, #0
 801de7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801de7e:	2300      	movs	r3, #0
}
 801de80:	4618      	mov	r0, r3
 801de82:	3714      	adds	r7, #20
 801de84:	46bd      	mov	sp, r7
 801de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de8a:	4770      	bx	lr
 801de8c:	40012c00 	.word	0x40012c00
 801de90:	40013400 	.word	0x40013400
 801de94:	40015000 	.word	0x40015000
 801de98:	40000400 	.word	0x40000400
 801de9c:	40000800 	.word	0x40000800
 801dea0:	40014000 	.word	0x40014000

0801dea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801dea4:	b480      	push	{r7}
 801dea6:	b085      	sub	sp, #20
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
 801deac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801deae:	2300      	movs	r3, #0
 801deb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801deb8:	2b01      	cmp	r3, #1
 801deba:	d101      	bne.n	801dec0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801debc:	2302      	movs	r3, #2
 801debe:	e096      	b.n	801dfee <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	2201      	movs	r2, #1
 801dec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801dece:	683b      	ldr	r3, [r7, #0]
 801ded0:	68db      	ldr	r3, [r3, #12]
 801ded2:	4313      	orrs	r3, r2
 801ded4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801dedc:	683b      	ldr	r3, [r7, #0]
 801dede:	689b      	ldr	r3, [r3, #8]
 801dee0:	4313      	orrs	r3, r2
 801dee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801deea:	683b      	ldr	r3, [r7, #0]
 801deec:	685b      	ldr	r3, [r3, #4]
 801deee:	4313      	orrs	r3, r2
 801def0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801def8:	683b      	ldr	r3, [r7, #0]
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	4313      	orrs	r3, r2
 801defe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801df06:	683b      	ldr	r3, [r7, #0]
 801df08:	691b      	ldr	r3, [r3, #16]
 801df0a:	4313      	orrs	r3, r2
 801df0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801df14:	683b      	ldr	r3, [r7, #0]
 801df16:	695b      	ldr	r3, [r3, #20]
 801df18:	4313      	orrs	r3, r2
 801df1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801df22:	683b      	ldr	r3, [r7, #0]
 801df24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df26:	4313      	orrs	r3, r2
 801df28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801df2a:	68fb      	ldr	r3, [r7, #12]
 801df2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801df30:	683b      	ldr	r3, [r7, #0]
 801df32:	699b      	ldr	r3, [r3, #24]
 801df34:	041b      	lsls	r3, r3, #16
 801df36:	4313      	orrs	r3, r2
 801df38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	4a2f      	ldr	r2, [pc, #188]	; (801dffc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801df40:	4293      	cmp	r3, r2
 801df42:	d009      	beq.n	801df58 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	4a2d      	ldr	r2, [pc, #180]	; (801e000 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801df4a:	4293      	cmp	r3, r2
 801df4c:	d004      	beq.n	801df58 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	4a2c      	ldr	r2, [pc, #176]	; (801e004 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801df54:	4293      	cmp	r3, r2
 801df56:	d106      	bne.n	801df66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801df58:	68fb      	ldr	r3, [r7, #12]
 801df5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801df5e:	683b      	ldr	r3, [r7, #0]
 801df60:	69db      	ldr	r3, [r3, #28]
 801df62:	4313      	orrs	r3, r2
 801df64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	4a24      	ldr	r2, [pc, #144]	; (801dffc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801df6c:	4293      	cmp	r3, r2
 801df6e:	d009      	beq.n	801df84 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	4a22      	ldr	r2, [pc, #136]	; (801e000 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801df76:	4293      	cmp	r3, r2
 801df78:	d004      	beq.n	801df84 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	4a21      	ldr	r2, [pc, #132]	; (801e004 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801df80:	4293      	cmp	r3, r2
 801df82:	d12b      	bne.n	801dfdc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801df8a:	683b      	ldr	r3, [r7, #0]
 801df8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df8e:	051b      	lsls	r3, r3, #20
 801df90:	4313      	orrs	r3, r2
 801df92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801df9a:	683b      	ldr	r3, [r7, #0]
 801df9c:	6a1b      	ldr	r3, [r3, #32]
 801df9e:	4313      	orrs	r3, r2
 801dfa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801dfa8:	683b      	ldr	r3, [r7, #0]
 801dfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfac:	4313      	orrs	r3, r2
 801dfae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	681b      	ldr	r3, [r3, #0]
 801dfb4:	4a11      	ldr	r2, [pc, #68]	; (801dffc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801dfb6:	4293      	cmp	r3, r2
 801dfb8:	d009      	beq.n	801dfce <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	681b      	ldr	r3, [r3, #0]
 801dfbe:	4a10      	ldr	r2, [pc, #64]	; (801e000 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801dfc0:	4293      	cmp	r3, r2
 801dfc2:	d004      	beq.n	801dfce <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	4a0e      	ldr	r2, [pc, #56]	; (801e004 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801dfca:	4293      	cmp	r3, r2
 801dfcc:	d106      	bne.n	801dfdc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801dfce:	68fb      	ldr	r3, [r7, #12]
 801dfd0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801dfd4:	683b      	ldr	r3, [r7, #0]
 801dfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfd8:	4313      	orrs	r3, r2
 801dfda:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	68fa      	ldr	r2, [r7, #12]
 801dfe2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	2200      	movs	r2, #0
 801dfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801dfec:	2300      	movs	r3, #0
}
 801dfee:	4618      	mov	r0, r3
 801dff0:	3714      	adds	r7, #20
 801dff2:	46bd      	mov	sp, r7
 801dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff8:	4770      	bx	lr
 801dffa:	bf00      	nop
 801dffc:	40012c00 	.word	0x40012c00
 801e000:	40013400 	.word	0x40013400
 801e004:	40015000 	.word	0x40015000

0801e008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801e008:	b480      	push	{r7}
 801e00a:	b083      	sub	sp, #12
 801e00c:	af00      	add	r7, sp, #0
 801e00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801e010:	bf00      	nop
 801e012:	370c      	adds	r7, #12
 801e014:	46bd      	mov	sp, r7
 801e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e01a:	4770      	bx	lr

0801e01c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801e01c:	b480      	push	{r7}
 801e01e:	b083      	sub	sp, #12
 801e020:	af00      	add	r7, sp, #0
 801e022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801e024:	bf00      	nop
 801e026:	370c      	adds	r7, #12
 801e028:	46bd      	mov	sp, r7
 801e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e02e:	4770      	bx	lr

0801e030 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e030:	b480      	push	{r7}
 801e032:	b083      	sub	sp, #12
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e038:	bf00      	nop
 801e03a:	370c      	adds	r7, #12
 801e03c:	46bd      	mov	sp, r7
 801e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e042:	4770      	bx	lr

0801e044 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801e044:	b480      	push	{r7}
 801e046:	b083      	sub	sp, #12
 801e048:	af00      	add	r7, sp, #0
 801e04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801e04c:	bf00      	nop
 801e04e:	370c      	adds	r7, #12
 801e050:	46bd      	mov	sp, r7
 801e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e056:	4770      	bx	lr

0801e058 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801e058:	b480      	push	{r7}
 801e05a:	b083      	sub	sp, #12
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801e060:	bf00      	nop
 801e062:	370c      	adds	r7, #12
 801e064:	46bd      	mov	sp, r7
 801e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e06a:	4770      	bx	lr

0801e06c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801e06c:	b480      	push	{r7}
 801e06e:	b083      	sub	sp, #12
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801e074:	bf00      	nop
 801e076:	370c      	adds	r7, #12
 801e078:	46bd      	mov	sp, r7
 801e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e07e:	4770      	bx	lr

0801e080 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801e080:	b480      	push	{r7}
 801e082:	b083      	sub	sp, #12
 801e084:	af00      	add	r7, sp, #0
 801e086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801e088:	bf00      	nop
 801e08a:	370c      	adds	r7, #12
 801e08c:	46bd      	mov	sp, r7
 801e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e092:	4770      	bx	lr

0801e094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e094:	b580      	push	{r7, lr}
 801e096:	b082      	sub	sp, #8
 801e098:	af00      	add	r7, sp, #0
 801e09a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d101      	bne.n	801e0a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e0a2:	2301      	movs	r3, #1
 801e0a4:	e042      	b.n	801e12c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d106      	bne.n	801e0be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	2200      	movs	r2, #0
 801e0b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e0b8:	6878      	ldr	r0, [r7, #4]
 801e0ba:	f7f9 fae3 	bl	8017684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	2224      	movs	r2, #36	; 0x24
 801e0c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	681a      	ldr	r2, [r3, #0]
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	f022 0201 	bic.w	r2, r2, #1
 801e0d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e0d6:	6878      	ldr	r0, [r7, #4]
 801e0d8:	f000 f8c2 	bl	801e260 <UART_SetConfig>
 801e0dc:	4603      	mov	r3, r0
 801e0de:	2b01      	cmp	r3, #1
 801e0e0:	d101      	bne.n	801e0e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801e0e2:	2301      	movs	r3, #1
 801e0e4:	e022      	b.n	801e12c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	d002      	beq.n	801e0f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801e0ee:	6878      	ldr	r0, [r7, #4]
 801e0f0:	f000 fbb2 	bl	801e858 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	685a      	ldr	r2, [r3, #4]
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801e102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	689a      	ldr	r2, [r3, #8]
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801e112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	681a      	ldr	r2, [r3, #0]
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	f042 0201 	orr.w	r2, r2, #1
 801e122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e124:	6878      	ldr	r0, [r7, #4]
 801e126:	f000 fc39 	bl	801e99c <UART_CheckIdleState>
 801e12a:	4603      	mov	r3, r0
}
 801e12c:	4618      	mov	r0, r3
 801e12e:	3708      	adds	r7, #8
 801e130:	46bd      	mov	sp, r7
 801e132:	bd80      	pop	{r7, pc}

0801e134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e134:	b580      	push	{r7, lr}
 801e136:	b08a      	sub	sp, #40	; 0x28
 801e138:	af02      	add	r7, sp, #8
 801e13a:	60f8      	str	r0, [r7, #12]
 801e13c:	60b9      	str	r1, [r7, #8]
 801e13e:	603b      	str	r3, [r7, #0]
 801e140:	4613      	mov	r3, r2
 801e142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e14a:	2b20      	cmp	r3, #32
 801e14c:	f040 8083 	bne.w	801e256 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801e150:	68bb      	ldr	r3, [r7, #8]
 801e152:	2b00      	cmp	r3, #0
 801e154:	d002      	beq.n	801e15c <HAL_UART_Transmit+0x28>
 801e156:	88fb      	ldrh	r3, [r7, #6]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d101      	bne.n	801e160 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801e15c:	2301      	movs	r3, #1
 801e15e:	e07b      	b.n	801e258 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801e166:	2b01      	cmp	r3, #1
 801e168:	d101      	bne.n	801e16e <HAL_UART_Transmit+0x3a>
 801e16a:	2302      	movs	r3, #2
 801e16c:	e074      	b.n	801e258 <HAL_UART_Transmit+0x124>
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	2201      	movs	r2, #1
 801e172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	2200      	movs	r2, #0
 801e17a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	2221      	movs	r2, #33	; 0x21
 801e182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e186:	f7f9 fb6b 	bl	8017860 <HAL_GetTick>
 801e18a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	88fa      	ldrh	r2, [r7, #6]
 801e190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801e194:	68fb      	ldr	r3, [r7, #12]
 801e196:	88fa      	ldrh	r2, [r7, #6]
 801e198:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e19c:	68fb      	ldr	r3, [r7, #12]
 801e19e:	689b      	ldr	r3, [r3, #8]
 801e1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e1a4:	d108      	bne.n	801e1b8 <HAL_UART_Transmit+0x84>
 801e1a6:	68fb      	ldr	r3, [r7, #12]
 801e1a8:	691b      	ldr	r3, [r3, #16]
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d104      	bne.n	801e1b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e1b2:	68bb      	ldr	r3, [r7, #8]
 801e1b4:	61bb      	str	r3, [r7, #24]
 801e1b6:	e003      	b.n	801e1c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801e1b8:	68bb      	ldr	r3, [r7, #8]
 801e1ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e1bc:	2300      	movs	r3, #0
 801e1be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	2200      	movs	r2, #0
 801e1c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801e1c8:	e02c      	b.n	801e224 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e1ca:	683b      	ldr	r3, [r7, #0]
 801e1cc:	9300      	str	r3, [sp, #0]
 801e1ce:	697b      	ldr	r3, [r7, #20]
 801e1d0:	2200      	movs	r2, #0
 801e1d2:	2180      	movs	r1, #128	; 0x80
 801e1d4:	68f8      	ldr	r0, [r7, #12]
 801e1d6:	f000 fc2c 	bl	801ea32 <UART_WaitOnFlagUntilTimeout>
 801e1da:	4603      	mov	r3, r0
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d001      	beq.n	801e1e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801e1e0:	2303      	movs	r3, #3
 801e1e2:	e039      	b.n	801e258 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801e1e4:	69fb      	ldr	r3, [r7, #28]
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d10b      	bne.n	801e202 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e1ea:	69bb      	ldr	r3, [r7, #24]
 801e1ec:	881b      	ldrh	r3, [r3, #0]
 801e1ee:	461a      	mov	r2, r3
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e1f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801e1fa:	69bb      	ldr	r3, [r7, #24]
 801e1fc:	3302      	adds	r3, #2
 801e1fe:	61bb      	str	r3, [r7, #24]
 801e200:	e007      	b.n	801e212 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e202:	69fb      	ldr	r3, [r7, #28]
 801e204:	781a      	ldrb	r2, [r3, #0]
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801e20c:	69fb      	ldr	r3, [r7, #28]
 801e20e:	3301      	adds	r3, #1
 801e210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e218:	b29b      	uxth	r3, r3
 801e21a:	3b01      	subs	r3, #1
 801e21c:	b29a      	uxth	r2, r3
 801e21e:	68fb      	ldr	r3, [r7, #12]
 801e220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e22a:	b29b      	uxth	r3, r3
 801e22c:	2b00      	cmp	r3, #0
 801e22e:	d1cc      	bne.n	801e1ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e230:	683b      	ldr	r3, [r7, #0]
 801e232:	9300      	str	r3, [sp, #0]
 801e234:	697b      	ldr	r3, [r7, #20]
 801e236:	2200      	movs	r2, #0
 801e238:	2140      	movs	r1, #64	; 0x40
 801e23a:	68f8      	ldr	r0, [r7, #12]
 801e23c:	f000 fbf9 	bl	801ea32 <UART_WaitOnFlagUntilTimeout>
 801e240:	4603      	mov	r3, r0
 801e242:	2b00      	cmp	r3, #0
 801e244:	d001      	beq.n	801e24a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801e246:	2303      	movs	r3, #3
 801e248:	e006      	b.n	801e258 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e24a:	68fb      	ldr	r3, [r7, #12]
 801e24c:	2220      	movs	r2, #32
 801e24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801e252:	2300      	movs	r3, #0
 801e254:	e000      	b.n	801e258 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801e256:	2302      	movs	r3, #2
  }
}
 801e258:	4618      	mov	r0, r3
 801e25a:	3720      	adds	r7, #32
 801e25c:	46bd      	mov	sp, r7
 801e25e:	bd80      	pop	{r7, pc}

0801e260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e264:	b08c      	sub	sp, #48	; 0x30
 801e266:	af00      	add	r7, sp, #0
 801e268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e26a:	2300      	movs	r3, #0
 801e26c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e270:	697b      	ldr	r3, [r7, #20]
 801e272:	689a      	ldr	r2, [r3, #8]
 801e274:	697b      	ldr	r3, [r7, #20]
 801e276:	691b      	ldr	r3, [r3, #16]
 801e278:	431a      	orrs	r2, r3
 801e27a:	697b      	ldr	r3, [r7, #20]
 801e27c:	695b      	ldr	r3, [r3, #20]
 801e27e:	431a      	orrs	r2, r3
 801e280:	697b      	ldr	r3, [r7, #20]
 801e282:	69db      	ldr	r3, [r3, #28]
 801e284:	4313      	orrs	r3, r2
 801e286:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e288:	697b      	ldr	r3, [r7, #20]
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	681a      	ldr	r2, [r3, #0]
 801e28e:	4baa      	ldr	r3, [pc, #680]	; (801e538 <UART_SetConfig+0x2d8>)
 801e290:	4013      	ands	r3, r2
 801e292:	697a      	ldr	r2, [r7, #20]
 801e294:	6812      	ldr	r2, [r2, #0]
 801e296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e298:	430b      	orrs	r3, r1
 801e29a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e29c:	697b      	ldr	r3, [r7, #20]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	685b      	ldr	r3, [r3, #4]
 801e2a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801e2a6:	697b      	ldr	r3, [r7, #20]
 801e2a8:	68da      	ldr	r2, [r3, #12]
 801e2aa:	697b      	ldr	r3, [r7, #20]
 801e2ac:	681b      	ldr	r3, [r3, #0]
 801e2ae:	430a      	orrs	r2, r1
 801e2b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e2b2:	697b      	ldr	r3, [r7, #20]
 801e2b4:	699b      	ldr	r3, [r3, #24]
 801e2b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e2b8:	697b      	ldr	r3, [r7, #20]
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	4a9f      	ldr	r2, [pc, #636]	; (801e53c <UART_SetConfig+0x2dc>)
 801e2be:	4293      	cmp	r3, r2
 801e2c0:	d004      	beq.n	801e2cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e2c2:	697b      	ldr	r3, [r7, #20]
 801e2c4:	6a1b      	ldr	r3, [r3, #32]
 801e2c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e2c8:	4313      	orrs	r3, r2
 801e2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e2cc:	697b      	ldr	r3, [r7, #20]
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	689b      	ldr	r3, [r3, #8]
 801e2d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801e2d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801e2da:	697a      	ldr	r2, [r7, #20]
 801e2dc:	6812      	ldr	r2, [r2, #0]
 801e2de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e2e0:	430b      	orrs	r3, r1
 801e2e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801e2e4:	697b      	ldr	r3, [r7, #20]
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2ea:	f023 010f 	bic.w	r1, r3, #15
 801e2ee:	697b      	ldr	r3, [r7, #20]
 801e2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e2f2:	697b      	ldr	r3, [r7, #20]
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	430a      	orrs	r2, r1
 801e2f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e2fa:	697b      	ldr	r3, [r7, #20]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	4a90      	ldr	r2, [pc, #576]	; (801e540 <UART_SetConfig+0x2e0>)
 801e300:	4293      	cmp	r3, r2
 801e302:	d125      	bne.n	801e350 <UART_SetConfig+0xf0>
 801e304:	4b8f      	ldr	r3, [pc, #572]	; (801e544 <UART_SetConfig+0x2e4>)
 801e306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e30a:	f003 0303 	and.w	r3, r3, #3
 801e30e:	2b03      	cmp	r3, #3
 801e310:	d81a      	bhi.n	801e348 <UART_SetConfig+0xe8>
 801e312:	a201      	add	r2, pc, #4	; (adr r2, 801e318 <UART_SetConfig+0xb8>)
 801e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e318:	0801e329 	.word	0x0801e329
 801e31c:	0801e339 	.word	0x0801e339
 801e320:	0801e331 	.word	0x0801e331
 801e324:	0801e341 	.word	0x0801e341
 801e328:	2301      	movs	r3, #1
 801e32a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e32e:	e116      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e330:	2302      	movs	r3, #2
 801e332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e336:	e112      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e338:	2304      	movs	r3, #4
 801e33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e33e:	e10e      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e340:	2308      	movs	r3, #8
 801e342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e346:	e10a      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e348:	2310      	movs	r3, #16
 801e34a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e34e:	e106      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e350:	697b      	ldr	r3, [r7, #20]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	4a7c      	ldr	r2, [pc, #496]	; (801e548 <UART_SetConfig+0x2e8>)
 801e356:	4293      	cmp	r3, r2
 801e358:	d138      	bne.n	801e3cc <UART_SetConfig+0x16c>
 801e35a:	4b7a      	ldr	r3, [pc, #488]	; (801e544 <UART_SetConfig+0x2e4>)
 801e35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e360:	f003 030c 	and.w	r3, r3, #12
 801e364:	2b0c      	cmp	r3, #12
 801e366:	d82d      	bhi.n	801e3c4 <UART_SetConfig+0x164>
 801e368:	a201      	add	r2, pc, #4	; (adr r2, 801e370 <UART_SetConfig+0x110>)
 801e36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e36e:	bf00      	nop
 801e370:	0801e3a5 	.word	0x0801e3a5
 801e374:	0801e3c5 	.word	0x0801e3c5
 801e378:	0801e3c5 	.word	0x0801e3c5
 801e37c:	0801e3c5 	.word	0x0801e3c5
 801e380:	0801e3b5 	.word	0x0801e3b5
 801e384:	0801e3c5 	.word	0x0801e3c5
 801e388:	0801e3c5 	.word	0x0801e3c5
 801e38c:	0801e3c5 	.word	0x0801e3c5
 801e390:	0801e3ad 	.word	0x0801e3ad
 801e394:	0801e3c5 	.word	0x0801e3c5
 801e398:	0801e3c5 	.word	0x0801e3c5
 801e39c:	0801e3c5 	.word	0x0801e3c5
 801e3a0:	0801e3bd 	.word	0x0801e3bd
 801e3a4:	2300      	movs	r3, #0
 801e3a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3aa:	e0d8      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e3ac:	2302      	movs	r3, #2
 801e3ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3b2:	e0d4      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e3b4:	2304      	movs	r3, #4
 801e3b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3ba:	e0d0      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e3bc:	2308      	movs	r3, #8
 801e3be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3c2:	e0cc      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e3c4:	2310      	movs	r3, #16
 801e3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3ca:	e0c8      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e3cc:	697b      	ldr	r3, [r7, #20]
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	4a5e      	ldr	r2, [pc, #376]	; (801e54c <UART_SetConfig+0x2ec>)
 801e3d2:	4293      	cmp	r3, r2
 801e3d4:	d125      	bne.n	801e422 <UART_SetConfig+0x1c2>
 801e3d6:	4b5b      	ldr	r3, [pc, #364]	; (801e544 <UART_SetConfig+0x2e4>)
 801e3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e3dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801e3e0:	2b30      	cmp	r3, #48	; 0x30
 801e3e2:	d016      	beq.n	801e412 <UART_SetConfig+0x1b2>
 801e3e4:	2b30      	cmp	r3, #48	; 0x30
 801e3e6:	d818      	bhi.n	801e41a <UART_SetConfig+0x1ba>
 801e3e8:	2b20      	cmp	r3, #32
 801e3ea:	d00a      	beq.n	801e402 <UART_SetConfig+0x1a2>
 801e3ec:	2b20      	cmp	r3, #32
 801e3ee:	d814      	bhi.n	801e41a <UART_SetConfig+0x1ba>
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d002      	beq.n	801e3fa <UART_SetConfig+0x19a>
 801e3f4:	2b10      	cmp	r3, #16
 801e3f6:	d008      	beq.n	801e40a <UART_SetConfig+0x1aa>
 801e3f8:	e00f      	b.n	801e41a <UART_SetConfig+0x1ba>
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e400:	e0ad      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e402:	2302      	movs	r3, #2
 801e404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e408:	e0a9      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e40a:	2304      	movs	r3, #4
 801e40c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e410:	e0a5      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e412:	2308      	movs	r3, #8
 801e414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e418:	e0a1      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e41a:	2310      	movs	r3, #16
 801e41c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e420:	e09d      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e422:	697b      	ldr	r3, [r7, #20]
 801e424:	681b      	ldr	r3, [r3, #0]
 801e426:	4a4a      	ldr	r2, [pc, #296]	; (801e550 <UART_SetConfig+0x2f0>)
 801e428:	4293      	cmp	r3, r2
 801e42a:	d125      	bne.n	801e478 <UART_SetConfig+0x218>
 801e42c:	4b45      	ldr	r3, [pc, #276]	; (801e544 <UART_SetConfig+0x2e4>)
 801e42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e432:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e436:	2bc0      	cmp	r3, #192	; 0xc0
 801e438:	d016      	beq.n	801e468 <UART_SetConfig+0x208>
 801e43a:	2bc0      	cmp	r3, #192	; 0xc0
 801e43c:	d818      	bhi.n	801e470 <UART_SetConfig+0x210>
 801e43e:	2b80      	cmp	r3, #128	; 0x80
 801e440:	d00a      	beq.n	801e458 <UART_SetConfig+0x1f8>
 801e442:	2b80      	cmp	r3, #128	; 0x80
 801e444:	d814      	bhi.n	801e470 <UART_SetConfig+0x210>
 801e446:	2b00      	cmp	r3, #0
 801e448:	d002      	beq.n	801e450 <UART_SetConfig+0x1f0>
 801e44a:	2b40      	cmp	r3, #64	; 0x40
 801e44c:	d008      	beq.n	801e460 <UART_SetConfig+0x200>
 801e44e:	e00f      	b.n	801e470 <UART_SetConfig+0x210>
 801e450:	2300      	movs	r3, #0
 801e452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e456:	e082      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e458:	2302      	movs	r3, #2
 801e45a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e45e:	e07e      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e460:	2304      	movs	r3, #4
 801e462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e466:	e07a      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e468:	2308      	movs	r3, #8
 801e46a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e46e:	e076      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e470:	2310      	movs	r3, #16
 801e472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e476:	e072      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e478:	697b      	ldr	r3, [r7, #20]
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	4a35      	ldr	r2, [pc, #212]	; (801e554 <UART_SetConfig+0x2f4>)
 801e47e:	4293      	cmp	r3, r2
 801e480:	d12a      	bne.n	801e4d8 <UART_SetConfig+0x278>
 801e482:	4b30      	ldr	r3, [pc, #192]	; (801e544 <UART_SetConfig+0x2e4>)
 801e484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e48c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e490:	d01a      	beq.n	801e4c8 <UART_SetConfig+0x268>
 801e492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e496:	d81b      	bhi.n	801e4d0 <UART_SetConfig+0x270>
 801e498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e49c:	d00c      	beq.n	801e4b8 <UART_SetConfig+0x258>
 801e49e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e4a2:	d815      	bhi.n	801e4d0 <UART_SetConfig+0x270>
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d003      	beq.n	801e4b0 <UART_SetConfig+0x250>
 801e4a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e4ac:	d008      	beq.n	801e4c0 <UART_SetConfig+0x260>
 801e4ae:	e00f      	b.n	801e4d0 <UART_SetConfig+0x270>
 801e4b0:	2300      	movs	r3, #0
 801e4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4b6:	e052      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e4b8:	2302      	movs	r3, #2
 801e4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4be:	e04e      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e4c0:	2304      	movs	r3, #4
 801e4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4c6:	e04a      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e4c8:	2308      	movs	r3, #8
 801e4ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4ce:	e046      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e4d0:	2310      	movs	r3, #16
 801e4d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4d6:	e042      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e4d8:	697b      	ldr	r3, [r7, #20]
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	4a17      	ldr	r2, [pc, #92]	; (801e53c <UART_SetConfig+0x2dc>)
 801e4de:	4293      	cmp	r3, r2
 801e4e0:	d13a      	bne.n	801e558 <UART_SetConfig+0x2f8>
 801e4e2:	4b18      	ldr	r3, [pc, #96]	; (801e544 <UART_SetConfig+0x2e4>)
 801e4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e4e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801e4ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e4f0:	d01a      	beq.n	801e528 <UART_SetConfig+0x2c8>
 801e4f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e4f6:	d81b      	bhi.n	801e530 <UART_SetConfig+0x2d0>
 801e4f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e4fc:	d00c      	beq.n	801e518 <UART_SetConfig+0x2b8>
 801e4fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e502:	d815      	bhi.n	801e530 <UART_SetConfig+0x2d0>
 801e504:	2b00      	cmp	r3, #0
 801e506:	d003      	beq.n	801e510 <UART_SetConfig+0x2b0>
 801e508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e50c:	d008      	beq.n	801e520 <UART_SetConfig+0x2c0>
 801e50e:	e00f      	b.n	801e530 <UART_SetConfig+0x2d0>
 801e510:	2300      	movs	r3, #0
 801e512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e516:	e022      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e518:	2302      	movs	r3, #2
 801e51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e51e:	e01e      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e520:	2304      	movs	r3, #4
 801e522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e526:	e01a      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e528:	2308      	movs	r3, #8
 801e52a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e52e:	e016      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e530:	2310      	movs	r3, #16
 801e532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e536:	e012      	b.n	801e55e <UART_SetConfig+0x2fe>
 801e538:	cfff69f3 	.word	0xcfff69f3
 801e53c:	40008000 	.word	0x40008000
 801e540:	40013800 	.word	0x40013800
 801e544:	40021000 	.word	0x40021000
 801e548:	40004400 	.word	0x40004400
 801e54c:	40004800 	.word	0x40004800
 801e550:	40004c00 	.word	0x40004c00
 801e554:	40005000 	.word	0x40005000
 801e558:	2310      	movs	r3, #16
 801e55a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e55e:	697b      	ldr	r3, [r7, #20]
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	4aae      	ldr	r2, [pc, #696]	; (801e81c <UART_SetConfig+0x5bc>)
 801e564:	4293      	cmp	r3, r2
 801e566:	f040 8097 	bne.w	801e698 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e56a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e56e:	2b08      	cmp	r3, #8
 801e570:	d823      	bhi.n	801e5ba <UART_SetConfig+0x35a>
 801e572:	a201      	add	r2, pc, #4	; (adr r2, 801e578 <UART_SetConfig+0x318>)
 801e574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e578:	0801e59d 	.word	0x0801e59d
 801e57c:	0801e5bb 	.word	0x0801e5bb
 801e580:	0801e5a5 	.word	0x0801e5a5
 801e584:	0801e5bb 	.word	0x0801e5bb
 801e588:	0801e5ab 	.word	0x0801e5ab
 801e58c:	0801e5bb 	.word	0x0801e5bb
 801e590:	0801e5bb 	.word	0x0801e5bb
 801e594:	0801e5bb 	.word	0x0801e5bb
 801e598:	0801e5b3 	.word	0x0801e5b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e59c:	f7fd f8b4 	bl	801b708 <HAL_RCC_GetPCLK1Freq>
 801e5a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e5a2:	e010      	b.n	801e5c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e5a4:	4b9e      	ldr	r3, [pc, #632]	; (801e820 <UART_SetConfig+0x5c0>)
 801e5a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e5a8:	e00d      	b.n	801e5c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e5aa:	f7fd f841 	bl	801b630 <HAL_RCC_GetSysClockFreq>
 801e5ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e5b0:	e009      	b.n	801e5c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e5b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e5b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e5b8:	e005      	b.n	801e5c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801e5ba:	2300      	movs	r3, #0
 801e5bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e5be:	2301      	movs	r3, #1
 801e5c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e5c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	f000 8130 	beq.w	801e82e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801e5ce:	697b      	ldr	r3, [r7, #20]
 801e5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5d2:	4a94      	ldr	r2, [pc, #592]	; (801e824 <UART_SetConfig+0x5c4>)
 801e5d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e5d8:	461a      	mov	r2, r3
 801e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5dc:	fbb3 f3f2 	udiv	r3, r3, r2
 801e5e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e5e2:	697b      	ldr	r3, [r7, #20]
 801e5e4:	685a      	ldr	r2, [r3, #4]
 801e5e6:	4613      	mov	r3, r2
 801e5e8:	005b      	lsls	r3, r3, #1
 801e5ea:	4413      	add	r3, r2
 801e5ec:	69ba      	ldr	r2, [r7, #24]
 801e5ee:	429a      	cmp	r2, r3
 801e5f0:	d305      	bcc.n	801e5fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801e5f2:	697b      	ldr	r3, [r7, #20]
 801e5f4:	685b      	ldr	r3, [r3, #4]
 801e5f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e5f8:	69ba      	ldr	r2, [r7, #24]
 801e5fa:	429a      	cmp	r2, r3
 801e5fc:	d903      	bls.n	801e606 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801e5fe:	2301      	movs	r3, #1
 801e600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e604:	e113      	b.n	801e82e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e608:	2200      	movs	r2, #0
 801e60a:	60bb      	str	r3, [r7, #8]
 801e60c:	60fa      	str	r2, [r7, #12]
 801e60e:	697b      	ldr	r3, [r7, #20]
 801e610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e612:	4a84      	ldr	r2, [pc, #528]	; (801e824 <UART_SetConfig+0x5c4>)
 801e614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e618:	b29b      	uxth	r3, r3
 801e61a:	2200      	movs	r2, #0
 801e61c:	603b      	str	r3, [r7, #0]
 801e61e:	607a      	str	r2, [r7, #4]
 801e620:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e624:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801e628:	f7e2 fb36 	bl	8000c98 <__aeabi_uldivmod>
 801e62c:	4602      	mov	r2, r0
 801e62e:	460b      	mov	r3, r1
 801e630:	4610      	mov	r0, r2
 801e632:	4619      	mov	r1, r3
 801e634:	f04f 0200 	mov.w	r2, #0
 801e638:	f04f 0300 	mov.w	r3, #0
 801e63c:	020b      	lsls	r3, r1, #8
 801e63e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801e642:	0202      	lsls	r2, r0, #8
 801e644:	6979      	ldr	r1, [r7, #20]
 801e646:	6849      	ldr	r1, [r1, #4]
 801e648:	0849      	lsrs	r1, r1, #1
 801e64a:	2000      	movs	r0, #0
 801e64c:	460c      	mov	r4, r1
 801e64e:	4605      	mov	r5, r0
 801e650:	eb12 0804 	adds.w	r8, r2, r4
 801e654:	eb43 0905 	adc.w	r9, r3, r5
 801e658:	697b      	ldr	r3, [r7, #20]
 801e65a:	685b      	ldr	r3, [r3, #4]
 801e65c:	2200      	movs	r2, #0
 801e65e:	469a      	mov	sl, r3
 801e660:	4693      	mov	fp, r2
 801e662:	4652      	mov	r2, sl
 801e664:	465b      	mov	r3, fp
 801e666:	4640      	mov	r0, r8
 801e668:	4649      	mov	r1, r9
 801e66a:	f7e2 fb15 	bl	8000c98 <__aeabi_uldivmod>
 801e66e:	4602      	mov	r2, r0
 801e670:	460b      	mov	r3, r1
 801e672:	4613      	mov	r3, r2
 801e674:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e676:	6a3b      	ldr	r3, [r7, #32]
 801e678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e67c:	d308      	bcc.n	801e690 <UART_SetConfig+0x430>
 801e67e:	6a3b      	ldr	r3, [r7, #32]
 801e680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e684:	d204      	bcs.n	801e690 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801e686:	697b      	ldr	r3, [r7, #20]
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	6a3a      	ldr	r2, [r7, #32]
 801e68c:	60da      	str	r2, [r3, #12]
 801e68e:	e0ce      	b.n	801e82e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801e690:	2301      	movs	r3, #1
 801e692:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e696:	e0ca      	b.n	801e82e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e698:	697b      	ldr	r3, [r7, #20]
 801e69a:	69db      	ldr	r3, [r3, #28]
 801e69c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e6a0:	d166      	bne.n	801e770 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801e6a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e6a6:	2b08      	cmp	r3, #8
 801e6a8:	d827      	bhi.n	801e6fa <UART_SetConfig+0x49a>
 801e6aa:	a201      	add	r2, pc, #4	; (adr r2, 801e6b0 <UART_SetConfig+0x450>)
 801e6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e6b0:	0801e6d5 	.word	0x0801e6d5
 801e6b4:	0801e6dd 	.word	0x0801e6dd
 801e6b8:	0801e6e5 	.word	0x0801e6e5
 801e6bc:	0801e6fb 	.word	0x0801e6fb
 801e6c0:	0801e6eb 	.word	0x0801e6eb
 801e6c4:	0801e6fb 	.word	0x0801e6fb
 801e6c8:	0801e6fb 	.word	0x0801e6fb
 801e6cc:	0801e6fb 	.word	0x0801e6fb
 801e6d0:	0801e6f3 	.word	0x0801e6f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e6d4:	f7fd f818 	bl	801b708 <HAL_RCC_GetPCLK1Freq>
 801e6d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e6da:	e014      	b.n	801e706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e6dc:	f7fd f82a 	bl	801b734 <HAL_RCC_GetPCLK2Freq>
 801e6e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e6e2:	e010      	b.n	801e706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e6e4:	4b4e      	ldr	r3, [pc, #312]	; (801e820 <UART_SetConfig+0x5c0>)
 801e6e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e6e8:	e00d      	b.n	801e706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e6ea:	f7fc ffa1 	bl	801b630 <HAL_RCC_GetSysClockFreq>
 801e6ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e6f0:	e009      	b.n	801e706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e6f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e6f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e6f8:	e005      	b.n	801e706 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801e6fa:	2300      	movs	r3, #0
 801e6fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e6fe:	2301      	movs	r3, #1
 801e700:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e708:	2b00      	cmp	r3, #0
 801e70a:	f000 8090 	beq.w	801e82e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e70e:	697b      	ldr	r3, [r7, #20]
 801e710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e712:	4a44      	ldr	r2, [pc, #272]	; (801e824 <UART_SetConfig+0x5c4>)
 801e714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e718:	461a      	mov	r2, r3
 801e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e71c:	fbb3 f3f2 	udiv	r3, r3, r2
 801e720:	005a      	lsls	r2, r3, #1
 801e722:	697b      	ldr	r3, [r7, #20]
 801e724:	685b      	ldr	r3, [r3, #4]
 801e726:	085b      	lsrs	r3, r3, #1
 801e728:	441a      	add	r2, r3
 801e72a:	697b      	ldr	r3, [r7, #20]
 801e72c:	685b      	ldr	r3, [r3, #4]
 801e72e:	fbb2 f3f3 	udiv	r3, r2, r3
 801e732:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e734:	6a3b      	ldr	r3, [r7, #32]
 801e736:	2b0f      	cmp	r3, #15
 801e738:	d916      	bls.n	801e768 <UART_SetConfig+0x508>
 801e73a:	6a3b      	ldr	r3, [r7, #32]
 801e73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e740:	d212      	bcs.n	801e768 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e742:	6a3b      	ldr	r3, [r7, #32]
 801e744:	b29b      	uxth	r3, r3
 801e746:	f023 030f 	bic.w	r3, r3, #15
 801e74a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e74c:	6a3b      	ldr	r3, [r7, #32]
 801e74e:	085b      	lsrs	r3, r3, #1
 801e750:	b29b      	uxth	r3, r3
 801e752:	f003 0307 	and.w	r3, r3, #7
 801e756:	b29a      	uxth	r2, r3
 801e758:	8bfb      	ldrh	r3, [r7, #30]
 801e75a:	4313      	orrs	r3, r2
 801e75c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801e75e:	697b      	ldr	r3, [r7, #20]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	8bfa      	ldrh	r2, [r7, #30]
 801e764:	60da      	str	r2, [r3, #12]
 801e766:	e062      	b.n	801e82e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801e768:	2301      	movs	r3, #1
 801e76a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e76e:	e05e      	b.n	801e82e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e770:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e774:	2b08      	cmp	r3, #8
 801e776:	d828      	bhi.n	801e7ca <UART_SetConfig+0x56a>
 801e778:	a201      	add	r2, pc, #4	; (adr r2, 801e780 <UART_SetConfig+0x520>)
 801e77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e77e:	bf00      	nop
 801e780:	0801e7a5 	.word	0x0801e7a5
 801e784:	0801e7ad 	.word	0x0801e7ad
 801e788:	0801e7b5 	.word	0x0801e7b5
 801e78c:	0801e7cb 	.word	0x0801e7cb
 801e790:	0801e7bb 	.word	0x0801e7bb
 801e794:	0801e7cb 	.word	0x0801e7cb
 801e798:	0801e7cb 	.word	0x0801e7cb
 801e79c:	0801e7cb 	.word	0x0801e7cb
 801e7a0:	0801e7c3 	.word	0x0801e7c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e7a4:	f7fc ffb0 	bl	801b708 <HAL_RCC_GetPCLK1Freq>
 801e7a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e7aa:	e014      	b.n	801e7d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e7ac:	f7fc ffc2 	bl	801b734 <HAL_RCC_GetPCLK2Freq>
 801e7b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e7b2:	e010      	b.n	801e7d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e7b4:	4b1a      	ldr	r3, [pc, #104]	; (801e820 <UART_SetConfig+0x5c0>)
 801e7b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e7b8:	e00d      	b.n	801e7d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e7ba:	f7fc ff39 	bl	801b630 <HAL_RCC_GetSysClockFreq>
 801e7be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e7c0:	e009      	b.n	801e7d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e7c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e7c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e7c8:	e005      	b.n	801e7d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e7ce:	2301      	movs	r3, #1
 801e7d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e7d4:	bf00      	nop
    }

    if (pclk != 0U)
 801e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d028      	beq.n	801e82e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e7dc:	697b      	ldr	r3, [r7, #20]
 801e7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7e0:	4a10      	ldr	r2, [pc, #64]	; (801e824 <UART_SetConfig+0x5c4>)
 801e7e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e7e6:	461a      	mov	r2, r3
 801e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7ea:	fbb3 f2f2 	udiv	r2, r3, r2
 801e7ee:	697b      	ldr	r3, [r7, #20]
 801e7f0:	685b      	ldr	r3, [r3, #4]
 801e7f2:	085b      	lsrs	r3, r3, #1
 801e7f4:	441a      	add	r2, r3
 801e7f6:	697b      	ldr	r3, [r7, #20]
 801e7f8:	685b      	ldr	r3, [r3, #4]
 801e7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 801e7fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e800:	6a3b      	ldr	r3, [r7, #32]
 801e802:	2b0f      	cmp	r3, #15
 801e804:	d910      	bls.n	801e828 <UART_SetConfig+0x5c8>
 801e806:	6a3b      	ldr	r3, [r7, #32]
 801e808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e80c:	d20c      	bcs.n	801e828 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e80e:	6a3b      	ldr	r3, [r7, #32]
 801e810:	b29a      	uxth	r2, r3
 801e812:	697b      	ldr	r3, [r7, #20]
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	60da      	str	r2, [r3, #12]
 801e818:	e009      	b.n	801e82e <UART_SetConfig+0x5ce>
 801e81a:	bf00      	nop
 801e81c:	40008000 	.word	0x40008000
 801e820:	00f42400 	.word	0x00f42400
 801e824:	08022148 	.word	0x08022148
      }
      else
      {
        ret = HAL_ERROR;
 801e828:	2301      	movs	r3, #1
 801e82a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801e82e:	697b      	ldr	r3, [r7, #20]
 801e830:	2201      	movs	r2, #1
 801e832:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801e836:	697b      	ldr	r3, [r7, #20]
 801e838:	2201      	movs	r2, #1
 801e83a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e83e:	697b      	ldr	r3, [r7, #20]
 801e840:	2200      	movs	r2, #0
 801e842:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801e844:	697b      	ldr	r3, [r7, #20]
 801e846:	2200      	movs	r2, #0
 801e848:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801e84a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801e84e:	4618      	mov	r0, r3
 801e850:	3730      	adds	r7, #48	; 0x30
 801e852:	46bd      	mov	sp, r7
 801e854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801e858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e858:	b480      	push	{r7}
 801e85a:	b083      	sub	sp, #12
 801e85c:	af00      	add	r7, sp, #0
 801e85e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e864:	f003 0301 	and.w	r3, r3, #1
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d00a      	beq.n	801e882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	685b      	ldr	r3, [r3, #4]
 801e872:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	430a      	orrs	r2, r1
 801e880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e886:	f003 0302 	and.w	r3, r3, #2
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d00a      	beq.n	801e8a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e88e:	687b      	ldr	r3, [r7, #4]
 801e890:	681b      	ldr	r3, [r3, #0]
 801e892:	685b      	ldr	r3, [r3, #4]
 801e894:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801e898:	687b      	ldr	r3, [r7, #4]
 801e89a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	430a      	orrs	r2, r1
 801e8a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8a8:	f003 0304 	and.w	r3, r3, #4
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d00a      	beq.n	801e8c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	681b      	ldr	r3, [r3, #0]
 801e8b4:	685b      	ldr	r3, [r3, #4]
 801e8b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	681b      	ldr	r3, [r3, #0]
 801e8c2:	430a      	orrs	r2, r1
 801e8c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e8c6:	687b      	ldr	r3, [r7, #4]
 801e8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8ca:	f003 0308 	and.w	r3, r3, #8
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d00a      	beq.n	801e8e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	685b      	ldr	r3, [r3, #4]
 801e8d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	430a      	orrs	r2, r1
 801e8e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8ec:	f003 0310 	and.w	r3, r3, #16
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d00a      	beq.n	801e90a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	689b      	ldr	r3, [r3, #8]
 801e8fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	681b      	ldr	r3, [r3, #0]
 801e906:	430a      	orrs	r2, r1
 801e908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e90e:	f003 0320 	and.w	r3, r3, #32
 801e912:	2b00      	cmp	r3, #0
 801e914:	d00a      	beq.n	801e92c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	681b      	ldr	r3, [r3, #0]
 801e91a:	689b      	ldr	r3, [r3, #8]
 801e91c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	430a      	orrs	r2, r1
 801e92a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e92c:	687b      	ldr	r3, [r7, #4]
 801e92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e934:	2b00      	cmp	r3, #0
 801e936:	d01a      	beq.n	801e96e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	685b      	ldr	r3, [r3, #4]
 801e93e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	430a      	orrs	r2, r1
 801e94c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e956:	d10a      	bne.n	801e96e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	685b      	ldr	r3, [r3, #4]
 801e95e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	681b      	ldr	r3, [r3, #0]
 801e96a:	430a      	orrs	r2, r1
 801e96c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e976:	2b00      	cmp	r3, #0
 801e978:	d00a      	beq.n	801e990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	685b      	ldr	r3, [r3, #4]
 801e980:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	430a      	orrs	r2, r1
 801e98e:	605a      	str	r2, [r3, #4]
  }
}
 801e990:	bf00      	nop
 801e992:	370c      	adds	r7, #12
 801e994:	46bd      	mov	sp, r7
 801e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99a:	4770      	bx	lr

0801e99c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e99c:	b580      	push	{r7, lr}
 801e99e:	b086      	sub	sp, #24
 801e9a0:	af02      	add	r7, sp, #8
 801e9a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	2200      	movs	r2, #0
 801e9a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e9ac:	f7f8 ff58 	bl	8017860 <HAL_GetTick>
 801e9b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	f003 0308 	and.w	r3, r3, #8
 801e9bc:	2b08      	cmp	r3, #8
 801e9be:	d10e      	bne.n	801e9de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e9c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e9c4:	9300      	str	r3, [sp, #0]
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	2200      	movs	r2, #0
 801e9ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e9ce:	6878      	ldr	r0, [r7, #4]
 801e9d0:	f000 f82f 	bl	801ea32 <UART_WaitOnFlagUntilTimeout>
 801e9d4:	4603      	mov	r3, r0
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d001      	beq.n	801e9de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e9da:	2303      	movs	r3, #3
 801e9dc:	e025      	b.n	801ea2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	681b      	ldr	r3, [r3, #0]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	f003 0304 	and.w	r3, r3, #4
 801e9e8:	2b04      	cmp	r3, #4
 801e9ea:	d10e      	bne.n	801ea0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e9ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e9f0:	9300      	str	r3, [sp, #0]
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	2200      	movs	r2, #0
 801e9f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801e9fa:	6878      	ldr	r0, [r7, #4]
 801e9fc:	f000 f819 	bl	801ea32 <UART_WaitOnFlagUntilTimeout>
 801ea00:	4603      	mov	r3, r0
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d001      	beq.n	801ea0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ea06:	2303      	movs	r3, #3
 801ea08:	e00f      	b.n	801ea2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	2220      	movs	r2, #32
 801ea0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	2220      	movs	r2, #32
 801ea16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	2200      	movs	r2, #0
 801ea1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	2200      	movs	r2, #0
 801ea24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ea28:	2300      	movs	r3, #0
}
 801ea2a:	4618      	mov	r0, r3
 801ea2c:	3710      	adds	r7, #16
 801ea2e:	46bd      	mov	sp, r7
 801ea30:	bd80      	pop	{r7, pc}

0801ea32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ea32:	b580      	push	{r7, lr}
 801ea34:	b09c      	sub	sp, #112	; 0x70
 801ea36:	af00      	add	r7, sp, #0
 801ea38:	60f8      	str	r0, [r7, #12]
 801ea3a:	60b9      	str	r1, [r7, #8]
 801ea3c:	603b      	str	r3, [r7, #0]
 801ea3e:	4613      	mov	r3, r2
 801ea40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ea42:	e0a9      	b.n	801eb98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ea44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ea46:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea4a:	f000 80a5 	beq.w	801eb98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ea4e:	f7f8 ff07 	bl	8017860 <HAL_GetTick>
 801ea52:	4602      	mov	r2, r0
 801ea54:	683b      	ldr	r3, [r7, #0]
 801ea56:	1ad3      	subs	r3, r2, r3
 801ea58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ea5a:	429a      	cmp	r2, r3
 801ea5c:	d302      	bcc.n	801ea64 <UART_WaitOnFlagUntilTimeout+0x32>
 801ea5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	d140      	bne.n	801eae6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ea64:	68fb      	ldr	r3, [r7, #12]
 801ea66:	681b      	ldr	r3, [r3, #0]
 801ea68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea6c:	e853 3f00 	ldrex	r3, [r3]
 801ea70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ea72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ea78:	667b      	str	r3, [r7, #100]	; 0x64
 801ea7a:	68fb      	ldr	r3, [r7, #12]
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	461a      	mov	r2, r3
 801ea80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ea82:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ea84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ea88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ea8a:	e841 2300 	strex	r3, r2, [r1]
 801ea8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ea90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	d1e6      	bne.n	801ea64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea96:	68fb      	ldr	r3, [r7, #12]
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	3308      	adds	r3, #8
 801ea9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eaa0:	e853 3f00 	ldrex	r3, [r3]
 801eaa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801eaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eaa8:	f023 0301 	bic.w	r3, r3, #1
 801eaac:	663b      	str	r3, [r7, #96]	; 0x60
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	681b      	ldr	r3, [r3, #0]
 801eab2:	3308      	adds	r3, #8
 801eab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801eab6:	64ba      	str	r2, [r7, #72]	; 0x48
 801eab8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eaba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801eabc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801eabe:	e841 2300 	strex	r3, r2, [r1]
 801eac2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801eac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d1e5      	bne.n	801ea96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801eaca:	68fb      	ldr	r3, [r7, #12]
 801eacc:	2220      	movs	r2, #32
 801eace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801ead2:	68fb      	ldr	r3, [r7, #12]
 801ead4:	2220      	movs	r2, #32
 801ead6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801eada:	68fb      	ldr	r3, [r7, #12]
 801eadc:	2200      	movs	r2, #0
 801eade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801eae2:	2303      	movs	r3, #3
 801eae4:	e069      	b.n	801ebba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801eae6:	68fb      	ldr	r3, [r7, #12]
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	f003 0304 	and.w	r3, r3, #4
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d051      	beq.n	801eb98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801eaf4:	68fb      	ldr	r3, [r7, #12]
 801eaf6:	681b      	ldr	r3, [r3, #0]
 801eaf8:	69db      	ldr	r3, [r3, #28]
 801eafa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801eafe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801eb02:	d149      	bne.n	801eb98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801eb04:	68fb      	ldr	r3, [r7, #12]
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eb0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801eb0e:	68fb      	ldr	r3, [r7, #12]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb16:	e853 3f00 	ldrex	r3, [r3]
 801eb1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801eb22:	66fb      	str	r3, [r7, #108]	; 0x6c
 801eb24:	68fb      	ldr	r3, [r7, #12]
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	461a      	mov	r2, r3
 801eb2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb2c:	637b      	str	r3, [r7, #52]	; 0x34
 801eb2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eb30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801eb32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801eb34:	e841 2300 	strex	r3, r2, [r1]
 801eb38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801eb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d1e6      	bne.n	801eb0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eb40:	68fb      	ldr	r3, [r7, #12]
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	3308      	adds	r3, #8
 801eb46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eb48:	697b      	ldr	r3, [r7, #20]
 801eb4a:	e853 3f00 	ldrex	r3, [r3]
 801eb4e:	613b      	str	r3, [r7, #16]
   return(result);
 801eb50:	693b      	ldr	r3, [r7, #16]
 801eb52:	f023 0301 	bic.w	r3, r3, #1
 801eb56:	66bb      	str	r3, [r7, #104]	; 0x68
 801eb58:	68fb      	ldr	r3, [r7, #12]
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	3308      	adds	r3, #8
 801eb5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eb60:	623a      	str	r2, [r7, #32]
 801eb62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eb64:	69f9      	ldr	r1, [r7, #28]
 801eb66:	6a3a      	ldr	r2, [r7, #32]
 801eb68:	e841 2300 	strex	r3, r2, [r1]
 801eb6c:	61bb      	str	r3, [r7, #24]
   return(result);
 801eb6e:	69bb      	ldr	r3, [r7, #24]
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d1e5      	bne.n	801eb40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	2220      	movs	r2, #32
 801eb78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801eb7c:	68fb      	ldr	r3, [r7, #12]
 801eb7e:	2220      	movs	r2, #32
 801eb80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801eb84:	68fb      	ldr	r3, [r7, #12]
 801eb86:	2220      	movs	r2, #32
 801eb88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	2200      	movs	r2, #0
 801eb90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801eb94:	2303      	movs	r3, #3
 801eb96:	e010      	b.n	801ebba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801eb98:	68fb      	ldr	r3, [r7, #12]
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	69da      	ldr	r2, [r3, #28]
 801eb9e:	68bb      	ldr	r3, [r7, #8]
 801eba0:	4013      	ands	r3, r2
 801eba2:	68ba      	ldr	r2, [r7, #8]
 801eba4:	429a      	cmp	r2, r3
 801eba6:	bf0c      	ite	eq
 801eba8:	2301      	moveq	r3, #1
 801ebaa:	2300      	movne	r3, #0
 801ebac:	b2db      	uxtb	r3, r3
 801ebae:	461a      	mov	r2, r3
 801ebb0:	79fb      	ldrb	r3, [r7, #7]
 801ebb2:	429a      	cmp	r2, r3
 801ebb4:	f43f af46 	beq.w	801ea44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ebb8:	2300      	movs	r3, #0
}
 801ebba:	4618      	mov	r0, r3
 801ebbc:	3770      	adds	r7, #112	; 0x70
 801ebbe:	46bd      	mov	sp, r7
 801ebc0:	bd80      	pop	{r7, pc}

0801ebc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ebc2:	b480      	push	{r7}
 801ebc4:	b085      	sub	sp, #20
 801ebc6:	af00      	add	r7, sp, #0
 801ebc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ebd0:	2b01      	cmp	r3, #1
 801ebd2:	d101      	bne.n	801ebd8 <HAL_UARTEx_DisableFifoMode+0x16>
 801ebd4:	2302      	movs	r3, #2
 801ebd6:	e027      	b.n	801ec28 <HAL_UARTEx_DisableFifoMode+0x66>
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	2201      	movs	r2, #1
 801ebdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	2224      	movs	r2, #36	; 0x24
 801ebe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	681b      	ldr	r3, [r3, #0]
 801ebf4:	681a      	ldr	r2, [r3, #0]
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	681b      	ldr	r3, [r3, #0]
 801ebfa:	f022 0201 	bic.w	r2, r2, #1
 801ebfe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ec00:	68fb      	ldr	r3, [r7, #12]
 801ec02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801ec06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	2200      	movs	r2, #0
 801ec0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	681b      	ldr	r3, [r3, #0]
 801ec12:	68fa      	ldr	r2, [r7, #12]
 801ec14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ec16:	687b      	ldr	r3, [r7, #4]
 801ec18:	2220      	movs	r2, #32
 801ec1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	2200      	movs	r2, #0
 801ec22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ec26:	2300      	movs	r3, #0
}
 801ec28:	4618      	mov	r0, r3
 801ec2a:	3714      	adds	r7, #20
 801ec2c:	46bd      	mov	sp, r7
 801ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec32:	4770      	bx	lr

0801ec34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ec34:	b580      	push	{r7, lr}
 801ec36:	b084      	sub	sp, #16
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	6078      	str	r0, [r7, #4]
 801ec3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ec44:	2b01      	cmp	r3, #1
 801ec46:	d101      	bne.n	801ec4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ec48:	2302      	movs	r3, #2
 801ec4a:	e02d      	b.n	801eca8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	2201      	movs	r2, #1
 801ec50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	2224      	movs	r2, #36	; 0x24
 801ec58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	681b      	ldr	r3, [r3, #0]
 801ec68:	681a      	ldr	r2, [r3, #0]
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	f022 0201 	bic.w	r2, r2, #1
 801ec72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	681b      	ldr	r3, [r3, #0]
 801ec78:	689b      	ldr	r3, [r3, #8]
 801ec7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	683a      	ldr	r2, [r7, #0]
 801ec84:	430a      	orrs	r2, r1
 801ec86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ec88:	6878      	ldr	r0, [r7, #4]
 801ec8a:	f000 f84f 	bl	801ed2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	68fa      	ldr	r2, [r7, #12]
 801ec94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	2220      	movs	r2, #32
 801ec9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	2200      	movs	r2, #0
 801eca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801eca6:	2300      	movs	r3, #0
}
 801eca8:	4618      	mov	r0, r3
 801ecaa:	3710      	adds	r7, #16
 801ecac:	46bd      	mov	sp, r7
 801ecae:	bd80      	pop	{r7, pc}

0801ecb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ecb0:	b580      	push	{r7, lr}
 801ecb2:	b084      	sub	sp, #16
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	6078      	str	r0, [r7, #4]
 801ecb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ecc0:	2b01      	cmp	r3, #1
 801ecc2:	d101      	bne.n	801ecc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ecc4:	2302      	movs	r3, #2
 801ecc6:	e02d      	b.n	801ed24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ecc8:	687b      	ldr	r3, [r7, #4]
 801ecca:	2201      	movs	r2, #1
 801eccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	2224      	movs	r2, #36	; 0x24
 801ecd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	681b      	ldr	r3, [r3, #0]
 801ece4:	681a      	ldr	r2, [r3, #0]
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	f022 0201 	bic.w	r2, r2, #1
 801ecee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	689b      	ldr	r3, [r3, #8]
 801ecf6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	681b      	ldr	r3, [r3, #0]
 801ecfe:	683a      	ldr	r2, [r7, #0]
 801ed00:	430a      	orrs	r2, r1
 801ed02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ed04:	6878      	ldr	r0, [r7, #4]
 801ed06:	f000 f811 	bl	801ed2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	68fa      	ldr	r2, [r7, #12]
 801ed10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	2220      	movs	r2, #32
 801ed16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	2200      	movs	r2, #0
 801ed1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ed22:	2300      	movs	r3, #0
}
 801ed24:	4618      	mov	r0, r3
 801ed26:	3710      	adds	r7, #16
 801ed28:	46bd      	mov	sp, r7
 801ed2a:	bd80      	pop	{r7, pc}

0801ed2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ed2c:	b480      	push	{r7}
 801ed2e:	b085      	sub	sp, #20
 801ed30:	af00      	add	r7, sp, #0
 801ed32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ed34:	687b      	ldr	r3, [r7, #4]
 801ed36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d108      	bne.n	801ed4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	2201      	movs	r2, #1
 801ed40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	2201      	movs	r2, #1
 801ed48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ed4c:	e031      	b.n	801edb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ed4e:	2308      	movs	r3, #8
 801ed50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ed52:	2308      	movs	r3, #8
 801ed54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	681b      	ldr	r3, [r3, #0]
 801ed5a:	689b      	ldr	r3, [r3, #8]
 801ed5c:	0e5b      	lsrs	r3, r3, #25
 801ed5e:	b2db      	uxtb	r3, r3
 801ed60:	f003 0307 	and.w	r3, r3, #7
 801ed64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	681b      	ldr	r3, [r3, #0]
 801ed6a:	689b      	ldr	r3, [r3, #8]
 801ed6c:	0f5b      	lsrs	r3, r3, #29
 801ed6e:	b2db      	uxtb	r3, r3
 801ed70:	f003 0307 	and.w	r3, r3, #7
 801ed74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ed76:	7bbb      	ldrb	r3, [r7, #14]
 801ed78:	7b3a      	ldrb	r2, [r7, #12]
 801ed7a:	4911      	ldr	r1, [pc, #68]	; (801edc0 <UARTEx_SetNbDataToProcess+0x94>)
 801ed7c:	5c8a      	ldrb	r2, [r1, r2]
 801ed7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ed82:	7b3a      	ldrb	r2, [r7, #12]
 801ed84:	490f      	ldr	r1, [pc, #60]	; (801edc4 <UARTEx_SetNbDataToProcess+0x98>)
 801ed86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ed88:	fb93 f3f2 	sdiv	r3, r3, r2
 801ed8c:	b29a      	uxth	r2, r3
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ed94:	7bfb      	ldrb	r3, [r7, #15]
 801ed96:	7b7a      	ldrb	r2, [r7, #13]
 801ed98:	4909      	ldr	r1, [pc, #36]	; (801edc0 <UARTEx_SetNbDataToProcess+0x94>)
 801ed9a:	5c8a      	ldrb	r2, [r1, r2]
 801ed9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801eda0:	7b7a      	ldrb	r2, [r7, #13]
 801eda2:	4908      	ldr	r1, [pc, #32]	; (801edc4 <UARTEx_SetNbDataToProcess+0x98>)
 801eda4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801eda6:	fb93 f3f2 	sdiv	r3, r3, r2
 801edaa:	b29a      	uxth	r2, r3
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801edb2:	bf00      	nop
 801edb4:	3714      	adds	r7, #20
 801edb6:	46bd      	mov	sp, r7
 801edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edbc:	4770      	bx	lr
 801edbe:	bf00      	nop
 801edc0:	08022160 	.word	0x08022160
 801edc4:	08022168 	.word	0x08022168

0801edc8 <__errno>:
 801edc8:	4b01      	ldr	r3, [pc, #4]	; (801edd0 <__errno+0x8>)
 801edca:	6818      	ldr	r0, [r3, #0]
 801edcc:	4770      	bx	lr
 801edce:	bf00      	nop
 801edd0:	2000002c 	.word	0x2000002c

0801edd4 <__libc_init_array>:
 801edd4:	b570      	push	{r4, r5, r6, lr}
 801edd6:	4d0d      	ldr	r5, [pc, #52]	; (801ee0c <__libc_init_array+0x38>)
 801edd8:	4c0d      	ldr	r4, [pc, #52]	; (801ee10 <__libc_init_array+0x3c>)
 801edda:	1b64      	subs	r4, r4, r5
 801eddc:	10a4      	asrs	r4, r4, #2
 801edde:	2600      	movs	r6, #0
 801ede0:	42a6      	cmp	r6, r4
 801ede2:	d109      	bne.n	801edf8 <__libc_init_array+0x24>
 801ede4:	4d0b      	ldr	r5, [pc, #44]	; (801ee14 <__libc_init_array+0x40>)
 801ede6:	4c0c      	ldr	r4, [pc, #48]	; (801ee18 <__libc_init_array+0x44>)
 801ede8:	f003 f828 	bl	8021e3c <_init>
 801edec:	1b64      	subs	r4, r4, r5
 801edee:	10a4      	asrs	r4, r4, #2
 801edf0:	2600      	movs	r6, #0
 801edf2:	42a6      	cmp	r6, r4
 801edf4:	d105      	bne.n	801ee02 <__libc_init_array+0x2e>
 801edf6:	bd70      	pop	{r4, r5, r6, pc}
 801edf8:	f855 3b04 	ldr.w	r3, [r5], #4
 801edfc:	4798      	blx	r3
 801edfe:	3601      	adds	r6, #1
 801ee00:	e7ee      	b.n	801ede0 <__libc_init_array+0xc>
 801ee02:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee06:	4798      	blx	r3
 801ee08:	3601      	adds	r6, #1
 801ee0a:	e7f2      	b.n	801edf2 <__libc_init_array+0x1e>
 801ee0c:	08022588 	.word	0x08022588
 801ee10:	08022588 	.word	0x08022588
 801ee14:	08022588 	.word	0x08022588
 801ee18:	0802258c 	.word	0x0802258c

0801ee1c <memcpy>:
 801ee1c:	440a      	add	r2, r1
 801ee1e:	4291      	cmp	r1, r2
 801ee20:	f100 33ff 	add.w	r3, r0, #4294967295
 801ee24:	d100      	bne.n	801ee28 <memcpy+0xc>
 801ee26:	4770      	bx	lr
 801ee28:	b510      	push	{r4, lr}
 801ee2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ee2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ee32:	4291      	cmp	r1, r2
 801ee34:	d1f9      	bne.n	801ee2a <memcpy+0xe>
 801ee36:	bd10      	pop	{r4, pc}

0801ee38 <memset>:
 801ee38:	4402      	add	r2, r0
 801ee3a:	4603      	mov	r3, r0
 801ee3c:	4293      	cmp	r3, r2
 801ee3e:	d100      	bne.n	801ee42 <memset+0xa>
 801ee40:	4770      	bx	lr
 801ee42:	f803 1b01 	strb.w	r1, [r3], #1
 801ee46:	e7f9      	b.n	801ee3c <memset+0x4>

0801ee48 <__cvt>:
 801ee48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ee4c:	ec55 4b10 	vmov	r4, r5, d0
 801ee50:	2d00      	cmp	r5, #0
 801ee52:	460e      	mov	r6, r1
 801ee54:	4619      	mov	r1, r3
 801ee56:	462b      	mov	r3, r5
 801ee58:	bfbb      	ittet	lt
 801ee5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ee5e:	461d      	movlt	r5, r3
 801ee60:	2300      	movge	r3, #0
 801ee62:	232d      	movlt	r3, #45	; 0x2d
 801ee64:	700b      	strb	r3, [r1, #0]
 801ee66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ee6c:	4691      	mov	r9, r2
 801ee6e:	f023 0820 	bic.w	r8, r3, #32
 801ee72:	bfbc      	itt	lt
 801ee74:	4622      	movlt	r2, r4
 801ee76:	4614      	movlt	r4, r2
 801ee78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ee7c:	d005      	beq.n	801ee8a <__cvt+0x42>
 801ee7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ee82:	d100      	bne.n	801ee86 <__cvt+0x3e>
 801ee84:	3601      	adds	r6, #1
 801ee86:	2102      	movs	r1, #2
 801ee88:	e000      	b.n	801ee8c <__cvt+0x44>
 801ee8a:	2103      	movs	r1, #3
 801ee8c:	ab03      	add	r3, sp, #12
 801ee8e:	9301      	str	r3, [sp, #4]
 801ee90:	ab02      	add	r3, sp, #8
 801ee92:	9300      	str	r3, [sp, #0]
 801ee94:	ec45 4b10 	vmov	d0, r4, r5
 801ee98:	4653      	mov	r3, sl
 801ee9a:	4632      	mov	r2, r6
 801ee9c:	f000 fe30 	bl	801fb00 <_dtoa_r>
 801eea0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801eea4:	4607      	mov	r7, r0
 801eea6:	d102      	bne.n	801eeae <__cvt+0x66>
 801eea8:	f019 0f01 	tst.w	r9, #1
 801eeac:	d022      	beq.n	801eef4 <__cvt+0xac>
 801eeae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801eeb2:	eb07 0906 	add.w	r9, r7, r6
 801eeb6:	d110      	bne.n	801eeda <__cvt+0x92>
 801eeb8:	783b      	ldrb	r3, [r7, #0]
 801eeba:	2b30      	cmp	r3, #48	; 0x30
 801eebc:	d10a      	bne.n	801eed4 <__cvt+0x8c>
 801eebe:	2200      	movs	r2, #0
 801eec0:	2300      	movs	r3, #0
 801eec2:	4620      	mov	r0, r4
 801eec4:	4629      	mov	r1, r5
 801eec6:	f7e1 fe27 	bl	8000b18 <__aeabi_dcmpeq>
 801eeca:	b918      	cbnz	r0, 801eed4 <__cvt+0x8c>
 801eecc:	f1c6 0601 	rsb	r6, r6, #1
 801eed0:	f8ca 6000 	str.w	r6, [sl]
 801eed4:	f8da 3000 	ldr.w	r3, [sl]
 801eed8:	4499      	add	r9, r3
 801eeda:	2200      	movs	r2, #0
 801eedc:	2300      	movs	r3, #0
 801eede:	4620      	mov	r0, r4
 801eee0:	4629      	mov	r1, r5
 801eee2:	f7e1 fe19 	bl	8000b18 <__aeabi_dcmpeq>
 801eee6:	b108      	cbz	r0, 801eeec <__cvt+0xa4>
 801eee8:	f8cd 900c 	str.w	r9, [sp, #12]
 801eeec:	2230      	movs	r2, #48	; 0x30
 801eeee:	9b03      	ldr	r3, [sp, #12]
 801eef0:	454b      	cmp	r3, r9
 801eef2:	d307      	bcc.n	801ef04 <__cvt+0xbc>
 801eef4:	9b03      	ldr	r3, [sp, #12]
 801eef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eef8:	1bdb      	subs	r3, r3, r7
 801eefa:	4638      	mov	r0, r7
 801eefc:	6013      	str	r3, [r2, #0]
 801eefe:	b004      	add	sp, #16
 801ef00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef04:	1c59      	adds	r1, r3, #1
 801ef06:	9103      	str	r1, [sp, #12]
 801ef08:	701a      	strb	r2, [r3, #0]
 801ef0a:	e7f0      	b.n	801eeee <__cvt+0xa6>

0801ef0c <__exponent>:
 801ef0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ef0e:	4603      	mov	r3, r0
 801ef10:	2900      	cmp	r1, #0
 801ef12:	bfb8      	it	lt
 801ef14:	4249      	neglt	r1, r1
 801ef16:	f803 2b02 	strb.w	r2, [r3], #2
 801ef1a:	bfb4      	ite	lt
 801ef1c:	222d      	movlt	r2, #45	; 0x2d
 801ef1e:	222b      	movge	r2, #43	; 0x2b
 801ef20:	2909      	cmp	r1, #9
 801ef22:	7042      	strb	r2, [r0, #1]
 801ef24:	dd2a      	ble.n	801ef7c <__exponent+0x70>
 801ef26:	f10d 0407 	add.w	r4, sp, #7
 801ef2a:	46a4      	mov	ip, r4
 801ef2c:	270a      	movs	r7, #10
 801ef2e:	46a6      	mov	lr, r4
 801ef30:	460a      	mov	r2, r1
 801ef32:	fb91 f6f7 	sdiv	r6, r1, r7
 801ef36:	fb07 1516 	mls	r5, r7, r6, r1
 801ef3a:	3530      	adds	r5, #48	; 0x30
 801ef3c:	2a63      	cmp	r2, #99	; 0x63
 801ef3e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ef42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ef46:	4631      	mov	r1, r6
 801ef48:	dcf1      	bgt.n	801ef2e <__exponent+0x22>
 801ef4a:	3130      	adds	r1, #48	; 0x30
 801ef4c:	f1ae 0502 	sub.w	r5, lr, #2
 801ef50:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ef54:	1c44      	adds	r4, r0, #1
 801ef56:	4629      	mov	r1, r5
 801ef58:	4561      	cmp	r1, ip
 801ef5a:	d30a      	bcc.n	801ef72 <__exponent+0x66>
 801ef5c:	f10d 0209 	add.w	r2, sp, #9
 801ef60:	eba2 020e 	sub.w	r2, r2, lr
 801ef64:	4565      	cmp	r5, ip
 801ef66:	bf88      	it	hi
 801ef68:	2200      	movhi	r2, #0
 801ef6a:	4413      	add	r3, r2
 801ef6c:	1a18      	subs	r0, r3, r0
 801ef6e:	b003      	add	sp, #12
 801ef70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef72:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef76:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ef7a:	e7ed      	b.n	801ef58 <__exponent+0x4c>
 801ef7c:	2330      	movs	r3, #48	; 0x30
 801ef7e:	3130      	adds	r1, #48	; 0x30
 801ef80:	7083      	strb	r3, [r0, #2]
 801ef82:	70c1      	strb	r1, [r0, #3]
 801ef84:	1d03      	adds	r3, r0, #4
 801ef86:	e7f1      	b.n	801ef6c <__exponent+0x60>

0801ef88 <_printf_float>:
 801ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef8c:	ed2d 8b02 	vpush	{d8}
 801ef90:	b08d      	sub	sp, #52	; 0x34
 801ef92:	460c      	mov	r4, r1
 801ef94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ef98:	4616      	mov	r6, r2
 801ef9a:	461f      	mov	r7, r3
 801ef9c:	4605      	mov	r5, r0
 801ef9e:	f001 fd55 	bl	8020a4c <_localeconv_r>
 801efa2:	f8d0 a000 	ldr.w	sl, [r0]
 801efa6:	4650      	mov	r0, sl
 801efa8:	f7e1 f93a 	bl	8000220 <strlen>
 801efac:	2300      	movs	r3, #0
 801efae:	930a      	str	r3, [sp, #40]	; 0x28
 801efb0:	6823      	ldr	r3, [r4, #0]
 801efb2:	9305      	str	r3, [sp, #20]
 801efb4:	f8d8 3000 	ldr.w	r3, [r8]
 801efb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801efbc:	3307      	adds	r3, #7
 801efbe:	f023 0307 	bic.w	r3, r3, #7
 801efc2:	f103 0208 	add.w	r2, r3, #8
 801efc6:	f8c8 2000 	str.w	r2, [r8]
 801efca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801efd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801efd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801efda:	9307      	str	r3, [sp, #28]
 801efdc:	f8cd 8018 	str.w	r8, [sp, #24]
 801efe0:	ee08 0a10 	vmov	s16, r0
 801efe4:	4b9f      	ldr	r3, [pc, #636]	; (801f264 <_printf_float+0x2dc>)
 801efe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801efea:	f04f 32ff 	mov.w	r2, #4294967295
 801efee:	f7e1 fdc5 	bl	8000b7c <__aeabi_dcmpun>
 801eff2:	bb88      	cbnz	r0, 801f058 <_printf_float+0xd0>
 801eff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801eff8:	4b9a      	ldr	r3, [pc, #616]	; (801f264 <_printf_float+0x2dc>)
 801effa:	f04f 32ff 	mov.w	r2, #4294967295
 801effe:	f7e1 fd9f 	bl	8000b40 <__aeabi_dcmple>
 801f002:	bb48      	cbnz	r0, 801f058 <_printf_float+0xd0>
 801f004:	2200      	movs	r2, #0
 801f006:	2300      	movs	r3, #0
 801f008:	4640      	mov	r0, r8
 801f00a:	4649      	mov	r1, r9
 801f00c:	f7e1 fd8e 	bl	8000b2c <__aeabi_dcmplt>
 801f010:	b110      	cbz	r0, 801f018 <_printf_float+0x90>
 801f012:	232d      	movs	r3, #45	; 0x2d
 801f014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f018:	4b93      	ldr	r3, [pc, #588]	; (801f268 <_printf_float+0x2e0>)
 801f01a:	4894      	ldr	r0, [pc, #592]	; (801f26c <_printf_float+0x2e4>)
 801f01c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f020:	bf94      	ite	ls
 801f022:	4698      	movls	r8, r3
 801f024:	4680      	movhi	r8, r0
 801f026:	2303      	movs	r3, #3
 801f028:	6123      	str	r3, [r4, #16]
 801f02a:	9b05      	ldr	r3, [sp, #20]
 801f02c:	f023 0204 	bic.w	r2, r3, #4
 801f030:	6022      	str	r2, [r4, #0]
 801f032:	f04f 0900 	mov.w	r9, #0
 801f036:	9700      	str	r7, [sp, #0]
 801f038:	4633      	mov	r3, r6
 801f03a:	aa0b      	add	r2, sp, #44	; 0x2c
 801f03c:	4621      	mov	r1, r4
 801f03e:	4628      	mov	r0, r5
 801f040:	f000 f9d8 	bl	801f3f4 <_printf_common>
 801f044:	3001      	adds	r0, #1
 801f046:	f040 8090 	bne.w	801f16a <_printf_float+0x1e2>
 801f04a:	f04f 30ff 	mov.w	r0, #4294967295
 801f04e:	b00d      	add	sp, #52	; 0x34
 801f050:	ecbd 8b02 	vpop	{d8}
 801f054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f058:	4642      	mov	r2, r8
 801f05a:	464b      	mov	r3, r9
 801f05c:	4640      	mov	r0, r8
 801f05e:	4649      	mov	r1, r9
 801f060:	f7e1 fd8c 	bl	8000b7c <__aeabi_dcmpun>
 801f064:	b140      	cbz	r0, 801f078 <_printf_float+0xf0>
 801f066:	464b      	mov	r3, r9
 801f068:	2b00      	cmp	r3, #0
 801f06a:	bfbc      	itt	lt
 801f06c:	232d      	movlt	r3, #45	; 0x2d
 801f06e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f072:	487f      	ldr	r0, [pc, #508]	; (801f270 <_printf_float+0x2e8>)
 801f074:	4b7f      	ldr	r3, [pc, #508]	; (801f274 <_printf_float+0x2ec>)
 801f076:	e7d1      	b.n	801f01c <_printf_float+0x94>
 801f078:	6863      	ldr	r3, [r4, #4]
 801f07a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f07e:	9206      	str	r2, [sp, #24]
 801f080:	1c5a      	adds	r2, r3, #1
 801f082:	d13f      	bne.n	801f104 <_printf_float+0x17c>
 801f084:	2306      	movs	r3, #6
 801f086:	6063      	str	r3, [r4, #4]
 801f088:	9b05      	ldr	r3, [sp, #20]
 801f08a:	6861      	ldr	r1, [r4, #4]
 801f08c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f090:	2300      	movs	r3, #0
 801f092:	9303      	str	r3, [sp, #12]
 801f094:	ab0a      	add	r3, sp, #40	; 0x28
 801f096:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f09a:	ab09      	add	r3, sp, #36	; 0x24
 801f09c:	ec49 8b10 	vmov	d0, r8, r9
 801f0a0:	9300      	str	r3, [sp, #0]
 801f0a2:	6022      	str	r2, [r4, #0]
 801f0a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f0a8:	4628      	mov	r0, r5
 801f0aa:	f7ff fecd 	bl	801ee48 <__cvt>
 801f0ae:	9b06      	ldr	r3, [sp, #24]
 801f0b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f0b2:	2b47      	cmp	r3, #71	; 0x47
 801f0b4:	4680      	mov	r8, r0
 801f0b6:	d108      	bne.n	801f0ca <_printf_float+0x142>
 801f0b8:	1cc8      	adds	r0, r1, #3
 801f0ba:	db02      	blt.n	801f0c2 <_printf_float+0x13a>
 801f0bc:	6863      	ldr	r3, [r4, #4]
 801f0be:	4299      	cmp	r1, r3
 801f0c0:	dd41      	ble.n	801f146 <_printf_float+0x1be>
 801f0c2:	f1ab 0b02 	sub.w	fp, fp, #2
 801f0c6:	fa5f fb8b 	uxtb.w	fp, fp
 801f0ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f0ce:	d820      	bhi.n	801f112 <_printf_float+0x18a>
 801f0d0:	3901      	subs	r1, #1
 801f0d2:	465a      	mov	r2, fp
 801f0d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f0d8:	9109      	str	r1, [sp, #36]	; 0x24
 801f0da:	f7ff ff17 	bl	801ef0c <__exponent>
 801f0de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f0e0:	1813      	adds	r3, r2, r0
 801f0e2:	2a01      	cmp	r2, #1
 801f0e4:	4681      	mov	r9, r0
 801f0e6:	6123      	str	r3, [r4, #16]
 801f0e8:	dc02      	bgt.n	801f0f0 <_printf_float+0x168>
 801f0ea:	6822      	ldr	r2, [r4, #0]
 801f0ec:	07d2      	lsls	r2, r2, #31
 801f0ee:	d501      	bpl.n	801f0f4 <_printf_float+0x16c>
 801f0f0:	3301      	adds	r3, #1
 801f0f2:	6123      	str	r3, [r4, #16]
 801f0f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	d09c      	beq.n	801f036 <_printf_float+0xae>
 801f0fc:	232d      	movs	r3, #45	; 0x2d
 801f0fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f102:	e798      	b.n	801f036 <_printf_float+0xae>
 801f104:	9a06      	ldr	r2, [sp, #24]
 801f106:	2a47      	cmp	r2, #71	; 0x47
 801f108:	d1be      	bne.n	801f088 <_printf_float+0x100>
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d1bc      	bne.n	801f088 <_printf_float+0x100>
 801f10e:	2301      	movs	r3, #1
 801f110:	e7b9      	b.n	801f086 <_printf_float+0xfe>
 801f112:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f116:	d118      	bne.n	801f14a <_printf_float+0x1c2>
 801f118:	2900      	cmp	r1, #0
 801f11a:	6863      	ldr	r3, [r4, #4]
 801f11c:	dd0b      	ble.n	801f136 <_printf_float+0x1ae>
 801f11e:	6121      	str	r1, [r4, #16]
 801f120:	b913      	cbnz	r3, 801f128 <_printf_float+0x1a0>
 801f122:	6822      	ldr	r2, [r4, #0]
 801f124:	07d0      	lsls	r0, r2, #31
 801f126:	d502      	bpl.n	801f12e <_printf_float+0x1a6>
 801f128:	3301      	adds	r3, #1
 801f12a:	440b      	add	r3, r1
 801f12c:	6123      	str	r3, [r4, #16]
 801f12e:	65a1      	str	r1, [r4, #88]	; 0x58
 801f130:	f04f 0900 	mov.w	r9, #0
 801f134:	e7de      	b.n	801f0f4 <_printf_float+0x16c>
 801f136:	b913      	cbnz	r3, 801f13e <_printf_float+0x1b6>
 801f138:	6822      	ldr	r2, [r4, #0]
 801f13a:	07d2      	lsls	r2, r2, #31
 801f13c:	d501      	bpl.n	801f142 <_printf_float+0x1ba>
 801f13e:	3302      	adds	r3, #2
 801f140:	e7f4      	b.n	801f12c <_printf_float+0x1a4>
 801f142:	2301      	movs	r3, #1
 801f144:	e7f2      	b.n	801f12c <_printf_float+0x1a4>
 801f146:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f14c:	4299      	cmp	r1, r3
 801f14e:	db05      	blt.n	801f15c <_printf_float+0x1d4>
 801f150:	6823      	ldr	r3, [r4, #0]
 801f152:	6121      	str	r1, [r4, #16]
 801f154:	07d8      	lsls	r0, r3, #31
 801f156:	d5ea      	bpl.n	801f12e <_printf_float+0x1a6>
 801f158:	1c4b      	adds	r3, r1, #1
 801f15a:	e7e7      	b.n	801f12c <_printf_float+0x1a4>
 801f15c:	2900      	cmp	r1, #0
 801f15e:	bfd4      	ite	le
 801f160:	f1c1 0202 	rsble	r2, r1, #2
 801f164:	2201      	movgt	r2, #1
 801f166:	4413      	add	r3, r2
 801f168:	e7e0      	b.n	801f12c <_printf_float+0x1a4>
 801f16a:	6823      	ldr	r3, [r4, #0]
 801f16c:	055a      	lsls	r2, r3, #21
 801f16e:	d407      	bmi.n	801f180 <_printf_float+0x1f8>
 801f170:	6923      	ldr	r3, [r4, #16]
 801f172:	4642      	mov	r2, r8
 801f174:	4631      	mov	r1, r6
 801f176:	4628      	mov	r0, r5
 801f178:	47b8      	blx	r7
 801f17a:	3001      	adds	r0, #1
 801f17c:	d12c      	bne.n	801f1d8 <_printf_float+0x250>
 801f17e:	e764      	b.n	801f04a <_printf_float+0xc2>
 801f180:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f184:	f240 80e0 	bls.w	801f348 <_printf_float+0x3c0>
 801f188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f18c:	2200      	movs	r2, #0
 801f18e:	2300      	movs	r3, #0
 801f190:	f7e1 fcc2 	bl	8000b18 <__aeabi_dcmpeq>
 801f194:	2800      	cmp	r0, #0
 801f196:	d034      	beq.n	801f202 <_printf_float+0x27a>
 801f198:	4a37      	ldr	r2, [pc, #220]	; (801f278 <_printf_float+0x2f0>)
 801f19a:	2301      	movs	r3, #1
 801f19c:	4631      	mov	r1, r6
 801f19e:	4628      	mov	r0, r5
 801f1a0:	47b8      	blx	r7
 801f1a2:	3001      	adds	r0, #1
 801f1a4:	f43f af51 	beq.w	801f04a <_printf_float+0xc2>
 801f1a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f1ac:	429a      	cmp	r2, r3
 801f1ae:	db02      	blt.n	801f1b6 <_printf_float+0x22e>
 801f1b0:	6823      	ldr	r3, [r4, #0]
 801f1b2:	07d8      	lsls	r0, r3, #31
 801f1b4:	d510      	bpl.n	801f1d8 <_printf_float+0x250>
 801f1b6:	ee18 3a10 	vmov	r3, s16
 801f1ba:	4652      	mov	r2, sl
 801f1bc:	4631      	mov	r1, r6
 801f1be:	4628      	mov	r0, r5
 801f1c0:	47b8      	blx	r7
 801f1c2:	3001      	adds	r0, #1
 801f1c4:	f43f af41 	beq.w	801f04a <_printf_float+0xc2>
 801f1c8:	f04f 0800 	mov.w	r8, #0
 801f1cc:	f104 091a 	add.w	r9, r4, #26
 801f1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1d2:	3b01      	subs	r3, #1
 801f1d4:	4543      	cmp	r3, r8
 801f1d6:	dc09      	bgt.n	801f1ec <_printf_float+0x264>
 801f1d8:	6823      	ldr	r3, [r4, #0]
 801f1da:	079b      	lsls	r3, r3, #30
 801f1dc:	f100 8105 	bmi.w	801f3ea <_printf_float+0x462>
 801f1e0:	68e0      	ldr	r0, [r4, #12]
 801f1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1e4:	4298      	cmp	r0, r3
 801f1e6:	bfb8      	it	lt
 801f1e8:	4618      	movlt	r0, r3
 801f1ea:	e730      	b.n	801f04e <_printf_float+0xc6>
 801f1ec:	2301      	movs	r3, #1
 801f1ee:	464a      	mov	r2, r9
 801f1f0:	4631      	mov	r1, r6
 801f1f2:	4628      	mov	r0, r5
 801f1f4:	47b8      	blx	r7
 801f1f6:	3001      	adds	r0, #1
 801f1f8:	f43f af27 	beq.w	801f04a <_printf_float+0xc2>
 801f1fc:	f108 0801 	add.w	r8, r8, #1
 801f200:	e7e6      	b.n	801f1d0 <_printf_float+0x248>
 801f202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f204:	2b00      	cmp	r3, #0
 801f206:	dc39      	bgt.n	801f27c <_printf_float+0x2f4>
 801f208:	4a1b      	ldr	r2, [pc, #108]	; (801f278 <_printf_float+0x2f0>)
 801f20a:	2301      	movs	r3, #1
 801f20c:	4631      	mov	r1, r6
 801f20e:	4628      	mov	r0, r5
 801f210:	47b8      	blx	r7
 801f212:	3001      	adds	r0, #1
 801f214:	f43f af19 	beq.w	801f04a <_printf_float+0xc2>
 801f218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f21c:	4313      	orrs	r3, r2
 801f21e:	d102      	bne.n	801f226 <_printf_float+0x29e>
 801f220:	6823      	ldr	r3, [r4, #0]
 801f222:	07d9      	lsls	r1, r3, #31
 801f224:	d5d8      	bpl.n	801f1d8 <_printf_float+0x250>
 801f226:	ee18 3a10 	vmov	r3, s16
 801f22a:	4652      	mov	r2, sl
 801f22c:	4631      	mov	r1, r6
 801f22e:	4628      	mov	r0, r5
 801f230:	47b8      	blx	r7
 801f232:	3001      	adds	r0, #1
 801f234:	f43f af09 	beq.w	801f04a <_printf_float+0xc2>
 801f238:	f04f 0900 	mov.w	r9, #0
 801f23c:	f104 0a1a 	add.w	sl, r4, #26
 801f240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f242:	425b      	negs	r3, r3
 801f244:	454b      	cmp	r3, r9
 801f246:	dc01      	bgt.n	801f24c <_printf_float+0x2c4>
 801f248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f24a:	e792      	b.n	801f172 <_printf_float+0x1ea>
 801f24c:	2301      	movs	r3, #1
 801f24e:	4652      	mov	r2, sl
 801f250:	4631      	mov	r1, r6
 801f252:	4628      	mov	r0, r5
 801f254:	47b8      	blx	r7
 801f256:	3001      	adds	r0, #1
 801f258:	f43f aef7 	beq.w	801f04a <_printf_float+0xc2>
 801f25c:	f109 0901 	add.w	r9, r9, #1
 801f260:	e7ee      	b.n	801f240 <_printf_float+0x2b8>
 801f262:	bf00      	nop
 801f264:	7fefffff 	.word	0x7fefffff
 801f268:	08022174 	.word	0x08022174
 801f26c:	08022178 	.word	0x08022178
 801f270:	08022180 	.word	0x08022180
 801f274:	0802217c 	.word	0x0802217c
 801f278:	08022184 	.word	0x08022184
 801f27c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f27e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f280:	429a      	cmp	r2, r3
 801f282:	bfa8      	it	ge
 801f284:	461a      	movge	r2, r3
 801f286:	2a00      	cmp	r2, #0
 801f288:	4691      	mov	r9, r2
 801f28a:	dc37      	bgt.n	801f2fc <_printf_float+0x374>
 801f28c:	f04f 0b00 	mov.w	fp, #0
 801f290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f294:	f104 021a 	add.w	r2, r4, #26
 801f298:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f29a:	9305      	str	r3, [sp, #20]
 801f29c:	eba3 0309 	sub.w	r3, r3, r9
 801f2a0:	455b      	cmp	r3, fp
 801f2a2:	dc33      	bgt.n	801f30c <_printf_float+0x384>
 801f2a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f2a8:	429a      	cmp	r2, r3
 801f2aa:	db3b      	blt.n	801f324 <_printf_float+0x39c>
 801f2ac:	6823      	ldr	r3, [r4, #0]
 801f2ae:	07da      	lsls	r2, r3, #31
 801f2b0:	d438      	bmi.n	801f324 <_printf_float+0x39c>
 801f2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2b4:	9a05      	ldr	r2, [sp, #20]
 801f2b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f2b8:	1a9a      	subs	r2, r3, r2
 801f2ba:	eba3 0901 	sub.w	r9, r3, r1
 801f2be:	4591      	cmp	r9, r2
 801f2c0:	bfa8      	it	ge
 801f2c2:	4691      	movge	r9, r2
 801f2c4:	f1b9 0f00 	cmp.w	r9, #0
 801f2c8:	dc35      	bgt.n	801f336 <_printf_float+0x3ae>
 801f2ca:	f04f 0800 	mov.w	r8, #0
 801f2ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f2d2:	f104 0a1a 	add.w	sl, r4, #26
 801f2d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f2da:	1a9b      	subs	r3, r3, r2
 801f2dc:	eba3 0309 	sub.w	r3, r3, r9
 801f2e0:	4543      	cmp	r3, r8
 801f2e2:	f77f af79 	ble.w	801f1d8 <_printf_float+0x250>
 801f2e6:	2301      	movs	r3, #1
 801f2e8:	4652      	mov	r2, sl
 801f2ea:	4631      	mov	r1, r6
 801f2ec:	4628      	mov	r0, r5
 801f2ee:	47b8      	blx	r7
 801f2f0:	3001      	adds	r0, #1
 801f2f2:	f43f aeaa 	beq.w	801f04a <_printf_float+0xc2>
 801f2f6:	f108 0801 	add.w	r8, r8, #1
 801f2fa:	e7ec      	b.n	801f2d6 <_printf_float+0x34e>
 801f2fc:	4613      	mov	r3, r2
 801f2fe:	4631      	mov	r1, r6
 801f300:	4642      	mov	r2, r8
 801f302:	4628      	mov	r0, r5
 801f304:	47b8      	blx	r7
 801f306:	3001      	adds	r0, #1
 801f308:	d1c0      	bne.n	801f28c <_printf_float+0x304>
 801f30a:	e69e      	b.n	801f04a <_printf_float+0xc2>
 801f30c:	2301      	movs	r3, #1
 801f30e:	4631      	mov	r1, r6
 801f310:	4628      	mov	r0, r5
 801f312:	9205      	str	r2, [sp, #20]
 801f314:	47b8      	blx	r7
 801f316:	3001      	adds	r0, #1
 801f318:	f43f ae97 	beq.w	801f04a <_printf_float+0xc2>
 801f31c:	9a05      	ldr	r2, [sp, #20]
 801f31e:	f10b 0b01 	add.w	fp, fp, #1
 801f322:	e7b9      	b.n	801f298 <_printf_float+0x310>
 801f324:	ee18 3a10 	vmov	r3, s16
 801f328:	4652      	mov	r2, sl
 801f32a:	4631      	mov	r1, r6
 801f32c:	4628      	mov	r0, r5
 801f32e:	47b8      	blx	r7
 801f330:	3001      	adds	r0, #1
 801f332:	d1be      	bne.n	801f2b2 <_printf_float+0x32a>
 801f334:	e689      	b.n	801f04a <_printf_float+0xc2>
 801f336:	9a05      	ldr	r2, [sp, #20]
 801f338:	464b      	mov	r3, r9
 801f33a:	4442      	add	r2, r8
 801f33c:	4631      	mov	r1, r6
 801f33e:	4628      	mov	r0, r5
 801f340:	47b8      	blx	r7
 801f342:	3001      	adds	r0, #1
 801f344:	d1c1      	bne.n	801f2ca <_printf_float+0x342>
 801f346:	e680      	b.n	801f04a <_printf_float+0xc2>
 801f348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f34a:	2a01      	cmp	r2, #1
 801f34c:	dc01      	bgt.n	801f352 <_printf_float+0x3ca>
 801f34e:	07db      	lsls	r3, r3, #31
 801f350:	d538      	bpl.n	801f3c4 <_printf_float+0x43c>
 801f352:	2301      	movs	r3, #1
 801f354:	4642      	mov	r2, r8
 801f356:	4631      	mov	r1, r6
 801f358:	4628      	mov	r0, r5
 801f35a:	47b8      	blx	r7
 801f35c:	3001      	adds	r0, #1
 801f35e:	f43f ae74 	beq.w	801f04a <_printf_float+0xc2>
 801f362:	ee18 3a10 	vmov	r3, s16
 801f366:	4652      	mov	r2, sl
 801f368:	4631      	mov	r1, r6
 801f36a:	4628      	mov	r0, r5
 801f36c:	47b8      	blx	r7
 801f36e:	3001      	adds	r0, #1
 801f370:	f43f ae6b 	beq.w	801f04a <_printf_float+0xc2>
 801f374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f378:	2200      	movs	r2, #0
 801f37a:	2300      	movs	r3, #0
 801f37c:	f7e1 fbcc 	bl	8000b18 <__aeabi_dcmpeq>
 801f380:	b9d8      	cbnz	r0, 801f3ba <_printf_float+0x432>
 801f382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f384:	f108 0201 	add.w	r2, r8, #1
 801f388:	3b01      	subs	r3, #1
 801f38a:	4631      	mov	r1, r6
 801f38c:	4628      	mov	r0, r5
 801f38e:	47b8      	blx	r7
 801f390:	3001      	adds	r0, #1
 801f392:	d10e      	bne.n	801f3b2 <_printf_float+0x42a>
 801f394:	e659      	b.n	801f04a <_printf_float+0xc2>
 801f396:	2301      	movs	r3, #1
 801f398:	4652      	mov	r2, sl
 801f39a:	4631      	mov	r1, r6
 801f39c:	4628      	mov	r0, r5
 801f39e:	47b8      	blx	r7
 801f3a0:	3001      	adds	r0, #1
 801f3a2:	f43f ae52 	beq.w	801f04a <_printf_float+0xc2>
 801f3a6:	f108 0801 	add.w	r8, r8, #1
 801f3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3ac:	3b01      	subs	r3, #1
 801f3ae:	4543      	cmp	r3, r8
 801f3b0:	dcf1      	bgt.n	801f396 <_printf_float+0x40e>
 801f3b2:	464b      	mov	r3, r9
 801f3b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f3b8:	e6dc      	b.n	801f174 <_printf_float+0x1ec>
 801f3ba:	f04f 0800 	mov.w	r8, #0
 801f3be:	f104 0a1a 	add.w	sl, r4, #26
 801f3c2:	e7f2      	b.n	801f3aa <_printf_float+0x422>
 801f3c4:	2301      	movs	r3, #1
 801f3c6:	4642      	mov	r2, r8
 801f3c8:	e7df      	b.n	801f38a <_printf_float+0x402>
 801f3ca:	2301      	movs	r3, #1
 801f3cc:	464a      	mov	r2, r9
 801f3ce:	4631      	mov	r1, r6
 801f3d0:	4628      	mov	r0, r5
 801f3d2:	47b8      	blx	r7
 801f3d4:	3001      	adds	r0, #1
 801f3d6:	f43f ae38 	beq.w	801f04a <_printf_float+0xc2>
 801f3da:	f108 0801 	add.w	r8, r8, #1
 801f3de:	68e3      	ldr	r3, [r4, #12]
 801f3e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f3e2:	1a5b      	subs	r3, r3, r1
 801f3e4:	4543      	cmp	r3, r8
 801f3e6:	dcf0      	bgt.n	801f3ca <_printf_float+0x442>
 801f3e8:	e6fa      	b.n	801f1e0 <_printf_float+0x258>
 801f3ea:	f04f 0800 	mov.w	r8, #0
 801f3ee:	f104 0919 	add.w	r9, r4, #25
 801f3f2:	e7f4      	b.n	801f3de <_printf_float+0x456>

0801f3f4 <_printf_common>:
 801f3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3f8:	4616      	mov	r6, r2
 801f3fa:	4699      	mov	r9, r3
 801f3fc:	688a      	ldr	r2, [r1, #8]
 801f3fe:	690b      	ldr	r3, [r1, #16]
 801f400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f404:	4293      	cmp	r3, r2
 801f406:	bfb8      	it	lt
 801f408:	4613      	movlt	r3, r2
 801f40a:	6033      	str	r3, [r6, #0]
 801f40c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f410:	4607      	mov	r7, r0
 801f412:	460c      	mov	r4, r1
 801f414:	b10a      	cbz	r2, 801f41a <_printf_common+0x26>
 801f416:	3301      	adds	r3, #1
 801f418:	6033      	str	r3, [r6, #0]
 801f41a:	6823      	ldr	r3, [r4, #0]
 801f41c:	0699      	lsls	r1, r3, #26
 801f41e:	bf42      	ittt	mi
 801f420:	6833      	ldrmi	r3, [r6, #0]
 801f422:	3302      	addmi	r3, #2
 801f424:	6033      	strmi	r3, [r6, #0]
 801f426:	6825      	ldr	r5, [r4, #0]
 801f428:	f015 0506 	ands.w	r5, r5, #6
 801f42c:	d106      	bne.n	801f43c <_printf_common+0x48>
 801f42e:	f104 0a19 	add.w	sl, r4, #25
 801f432:	68e3      	ldr	r3, [r4, #12]
 801f434:	6832      	ldr	r2, [r6, #0]
 801f436:	1a9b      	subs	r3, r3, r2
 801f438:	42ab      	cmp	r3, r5
 801f43a:	dc26      	bgt.n	801f48a <_printf_common+0x96>
 801f43c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f440:	1e13      	subs	r3, r2, #0
 801f442:	6822      	ldr	r2, [r4, #0]
 801f444:	bf18      	it	ne
 801f446:	2301      	movne	r3, #1
 801f448:	0692      	lsls	r2, r2, #26
 801f44a:	d42b      	bmi.n	801f4a4 <_printf_common+0xb0>
 801f44c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f450:	4649      	mov	r1, r9
 801f452:	4638      	mov	r0, r7
 801f454:	47c0      	blx	r8
 801f456:	3001      	adds	r0, #1
 801f458:	d01e      	beq.n	801f498 <_printf_common+0xa4>
 801f45a:	6823      	ldr	r3, [r4, #0]
 801f45c:	68e5      	ldr	r5, [r4, #12]
 801f45e:	6832      	ldr	r2, [r6, #0]
 801f460:	f003 0306 	and.w	r3, r3, #6
 801f464:	2b04      	cmp	r3, #4
 801f466:	bf08      	it	eq
 801f468:	1aad      	subeq	r5, r5, r2
 801f46a:	68a3      	ldr	r3, [r4, #8]
 801f46c:	6922      	ldr	r2, [r4, #16]
 801f46e:	bf0c      	ite	eq
 801f470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f474:	2500      	movne	r5, #0
 801f476:	4293      	cmp	r3, r2
 801f478:	bfc4      	itt	gt
 801f47a:	1a9b      	subgt	r3, r3, r2
 801f47c:	18ed      	addgt	r5, r5, r3
 801f47e:	2600      	movs	r6, #0
 801f480:	341a      	adds	r4, #26
 801f482:	42b5      	cmp	r5, r6
 801f484:	d11a      	bne.n	801f4bc <_printf_common+0xc8>
 801f486:	2000      	movs	r0, #0
 801f488:	e008      	b.n	801f49c <_printf_common+0xa8>
 801f48a:	2301      	movs	r3, #1
 801f48c:	4652      	mov	r2, sl
 801f48e:	4649      	mov	r1, r9
 801f490:	4638      	mov	r0, r7
 801f492:	47c0      	blx	r8
 801f494:	3001      	adds	r0, #1
 801f496:	d103      	bne.n	801f4a0 <_printf_common+0xac>
 801f498:	f04f 30ff 	mov.w	r0, #4294967295
 801f49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4a0:	3501      	adds	r5, #1
 801f4a2:	e7c6      	b.n	801f432 <_printf_common+0x3e>
 801f4a4:	18e1      	adds	r1, r4, r3
 801f4a6:	1c5a      	adds	r2, r3, #1
 801f4a8:	2030      	movs	r0, #48	; 0x30
 801f4aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f4ae:	4422      	add	r2, r4
 801f4b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f4b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f4b8:	3302      	adds	r3, #2
 801f4ba:	e7c7      	b.n	801f44c <_printf_common+0x58>
 801f4bc:	2301      	movs	r3, #1
 801f4be:	4622      	mov	r2, r4
 801f4c0:	4649      	mov	r1, r9
 801f4c2:	4638      	mov	r0, r7
 801f4c4:	47c0      	blx	r8
 801f4c6:	3001      	adds	r0, #1
 801f4c8:	d0e6      	beq.n	801f498 <_printf_common+0xa4>
 801f4ca:	3601      	adds	r6, #1
 801f4cc:	e7d9      	b.n	801f482 <_printf_common+0x8e>
	...

0801f4d0 <_printf_i>:
 801f4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f4d4:	7e0f      	ldrb	r7, [r1, #24]
 801f4d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f4d8:	2f78      	cmp	r7, #120	; 0x78
 801f4da:	4691      	mov	r9, r2
 801f4dc:	4680      	mov	r8, r0
 801f4de:	460c      	mov	r4, r1
 801f4e0:	469a      	mov	sl, r3
 801f4e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f4e6:	d807      	bhi.n	801f4f8 <_printf_i+0x28>
 801f4e8:	2f62      	cmp	r7, #98	; 0x62
 801f4ea:	d80a      	bhi.n	801f502 <_printf_i+0x32>
 801f4ec:	2f00      	cmp	r7, #0
 801f4ee:	f000 80d8 	beq.w	801f6a2 <_printf_i+0x1d2>
 801f4f2:	2f58      	cmp	r7, #88	; 0x58
 801f4f4:	f000 80a3 	beq.w	801f63e <_printf_i+0x16e>
 801f4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f4fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f500:	e03a      	b.n	801f578 <_printf_i+0xa8>
 801f502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f506:	2b15      	cmp	r3, #21
 801f508:	d8f6      	bhi.n	801f4f8 <_printf_i+0x28>
 801f50a:	a101      	add	r1, pc, #4	; (adr r1, 801f510 <_printf_i+0x40>)
 801f50c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f510:	0801f569 	.word	0x0801f569
 801f514:	0801f57d 	.word	0x0801f57d
 801f518:	0801f4f9 	.word	0x0801f4f9
 801f51c:	0801f4f9 	.word	0x0801f4f9
 801f520:	0801f4f9 	.word	0x0801f4f9
 801f524:	0801f4f9 	.word	0x0801f4f9
 801f528:	0801f57d 	.word	0x0801f57d
 801f52c:	0801f4f9 	.word	0x0801f4f9
 801f530:	0801f4f9 	.word	0x0801f4f9
 801f534:	0801f4f9 	.word	0x0801f4f9
 801f538:	0801f4f9 	.word	0x0801f4f9
 801f53c:	0801f689 	.word	0x0801f689
 801f540:	0801f5ad 	.word	0x0801f5ad
 801f544:	0801f66b 	.word	0x0801f66b
 801f548:	0801f4f9 	.word	0x0801f4f9
 801f54c:	0801f4f9 	.word	0x0801f4f9
 801f550:	0801f6ab 	.word	0x0801f6ab
 801f554:	0801f4f9 	.word	0x0801f4f9
 801f558:	0801f5ad 	.word	0x0801f5ad
 801f55c:	0801f4f9 	.word	0x0801f4f9
 801f560:	0801f4f9 	.word	0x0801f4f9
 801f564:	0801f673 	.word	0x0801f673
 801f568:	682b      	ldr	r3, [r5, #0]
 801f56a:	1d1a      	adds	r2, r3, #4
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	602a      	str	r2, [r5, #0]
 801f570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f578:	2301      	movs	r3, #1
 801f57a:	e0a3      	b.n	801f6c4 <_printf_i+0x1f4>
 801f57c:	6820      	ldr	r0, [r4, #0]
 801f57e:	6829      	ldr	r1, [r5, #0]
 801f580:	0606      	lsls	r6, r0, #24
 801f582:	f101 0304 	add.w	r3, r1, #4
 801f586:	d50a      	bpl.n	801f59e <_printf_i+0xce>
 801f588:	680e      	ldr	r6, [r1, #0]
 801f58a:	602b      	str	r3, [r5, #0]
 801f58c:	2e00      	cmp	r6, #0
 801f58e:	da03      	bge.n	801f598 <_printf_i+0xc8>
 801f590:	232d      	movs	r3, #45	; 0x2d
 801f592:	4276      	negs	r6, r6
 801f594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f598:	485e      	ldr	r0, [pc, #376]	; (801f714 <_printf_i+0x244>)
 801f59a:	230a      	movs	r3, #10
 801f59c:	e019      	b.n	801f5d2 <_printf_i+0x102>
 801f59e:	680e      	ldr	r6, [r1, #0]
 801f5a0:	602b      	str	r3, [r5, #0]
 801f5a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f5a6:	bf18      	it	ne
 801f5a8:	b236      	sxthne	r6, r6
 801f5aa:	e7ef      	b.n	801f58c <_printf_i+0xbc>
 801f5ac:	682b      	ldr	r3, [r5, #0]
 801f5ae:	6820      	ldr	r0, [r4, #0]
 801f5b0:	1d19      	adds	r1, r3, #4
 801f5b2:	6029      	str	r1, [r5, #0]
 801f5b4:	0601      	lsls	r1, r0, #24
 801f5b6:	d501      	bpl.n	801f5bc <_printf_i+0xec>
 801f5b8:	681e      	ldr	r6, [r3, #0]
 801f5ba:	e002      	b.n	801f5c2 <_printf_i+0xf2>
 801f5bc:	0646      	lsls	r6, r0, #25
 801f5be:	d5fb      	bpl.n	801f5b8 <_printf_i+0xe8>
 801f5c0:	881e      	ldrh	r6, [r3, #0]
 801f5c2:	4854      	ldr	r0, [pc, #336]	; (801f714 <_printf_i+0x244>)
 801f5c4:	2f6f      	cmp	r7, #111	; 0x6f
 801f5c6:	bf0c      	ite	eq
 801f5c8:	2308      	moveq	r3, #8
 801f5ca:	230a      	movne	r3, #10
 801f5cc:	2100      	movs	r1, #0
 801f5ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f5d2:	6865      	ldr	r5, [r4, #4]
 801f5d4:	60a5      	str	r5, [r4, #8]
 801f5d6:	2d00      	cmp	r5, #0
 801f5d8:	bfa2      	ittt	ge
 801f5da:	6821      	ldrge	r1, [r4, #0]
 801f5dc:	f021 0104 	bicge.w	r1, r1, #4
 801f5e0:	6021      	strge	r1, [r4, #0]
 801f5e2:	b90e      	cbnz	r6, 801f5e8 <_printf_i+0x118>
 801f5e4:	2d00      	cmp	r5, #0
 801f5e6:	d04d      	beq.n	801f684 <_printf_i+0x1b4>
 801f5e8:	4615      	mov	r5, r2
 801f5ea:	fbb6 f1f3 	udiv	r1, r6, r3
 801f5ee:	fb03 6711 	mls	r7, r3, r1, r6
 801f5f2:	5dc7      	ldrb	r7, [r0, r7]
 801f5f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f5f8:	4637      	mov	r7, r6
 801f5fa:	42bb      	cmp	r3, r7
 801f5fc:	460e      	mov	r6, r1
 801f5fe:	d9f4      	bls.n	801f5ea <_printf_i+0x11a>
 801f600:	2b08      	cmp	r3, #8
 801f602:	d10b      	bne.n	801f61c <_printf_i+0x14c>
 801f604:	6823      	ldr	r3, [r4, #0]
 801f606:	07de      	lsls	r6, r3, #31
 801f608:	d508      	bpl.n	801f61c <_printf_i+0x14c>
 801f60a:	6923      	ldr	r3, [r4, #16]
 801f60c:	6861      	ldr	r1, [r4, #4]
 801f60e:	4299      	cmp	r1, r3
 801f610:	bfde      	ittt	le
 801f612:	2330      	movle	r3, #48	; 0x30
 801f614:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f618:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f61c:	1b52      	subs	r2, r2, r5
 801f61e:	6122      	str	r2, [r4, #16]
 801f620:	f8cd a000 	str.w	sl, [sp]
 801f624:	464b      	mov	r3, r9
 801f626:	aa03      	add	r2, sp, #12
 801f628:	4621      	mov	r1, r4
 801f62a:	4640      	mov	r0, r8
 801f62c:	f7ff fee2 	bl	801f3f4 <_printf_common>
 801f630:	3001      	adds	r0, #1
 801f632:	d14c      	bne.n	801f6ce <_printf_i+0x1fe>
 801f634:	f04f 30ff 	mov.w	r0, #4294967295
 801f638:	b004      	add	sp, #16
 801f63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f63e:	4835      	ldr	r0, [pc, #212]	; (801f714 <_printf_i+0x244>)
 801f640:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f644:	6829      	ldr	r1, [r5, #0]
 801f646:	6823      	ldr	r3, [r4, #0]
 801f648:	f851 6b04 	ldr.w	r6, [r1], #4
 801f64c:	6029      	str	r1, [r5, #0]
 801f64e:	061d      	lsls	r5, r3, #24
 801f650:	d514      	bpl.n	801f67c <_printf_i+0x1ac>
 801f652:	07df      	lsls	r7, r3, #31
 801f654:	bf44      	itt	mi
 801f656:	f043 0320 	orrmi.w	r3, r3, #32
 801f65a:	6023      	strmi	r3, [r4, #0]
 801f65c:	b91e      	cbnz	r6, 801f666 <_printf_i+0x196>
 801f65e:	6823      	ldr	r3, [r4, #0]
 801f660:	f023 0320 	bic.w	r3, r3, #32
 801f664:	6023      	str	r3, [r4, #0]
 801f666:	2310      	movs	r3, #16
 801f668:	e7b0      	b.n	801f5cc <_printf_i+0xfc>
 801f66a:	6823      	ldr	r3, [r4, #0]
 801f66c:	f043 0320 	orr.w	r3, r3, #32
 801f670:	6023      	str	r3, [r4, #0]
 801f672:	2378      	movs	r3, #120	; 0x78
 801f674:	4828      	ldr	r0, [pc, #160]	; (801f718 <_printf_i+0x248>)
 801f676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f67a:	e7e3      	b.n	801f644 <_printf_i+0x174>
 801f67c:	0659      	lsls	r1, r3, #25
 801f67e:	bf48      	it	mi
 801f680:	b2b6      	uxthmi	r6, r6
 801f682:	e7e6      	b.n	801f652 <_printf_i+0x182>
 801f684:	4615      	mov	r5, r2
 801f686:	e7bb      	b.n	801f600 <_printf_i+0x130>
 801f688:	682b      	ldr	r3, [r5, #0]
 801f68a:	6826      	ldr	r6, [r4, #0]
 801f68c:	6961      	ldr	r1, [r4, #20]
 801f68e:	1d18      	adds	r0, r3, #4
 801f690:	6028      	str	r0, [r5, #0]
 801f692:	0635      	lsls	r5, r6, #24
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	d501      	bpl.n	801f69c <_printf_i+0x1cc>
 801f698:	6019      	str	r1, [r3, #0]
 801f69a:	e002      	b.n	801f6a2 <_printf_i+0x1d2>
 801f69c:	0670      	lsls	r0, r6, #25
 801f69e:	d5fb      	bpl.n	801f698 <_printf_i+0x1c8>
 801f6a0:	8019      	strh	r1, [r3, #0]
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	6123      	str	r3, [r4, #16]
 801f6a6:	4615      	mov	r5, r2
 801f6a8:	e7ba      	b.n	801f620 <_printf_i+0x150>
 801f6aa:	682b      	ldr	r3, [r5, #0]
 801f6ac:	1d1a      	adds	r2, r3, #4
 801f6ae:	602a      	str	r2, [r5, #0]
 801f6b0:	681d      	ldr	r5, [r3, #0]
 801f6b2:	6862      	ldr	r2, [r4, #4]
 801f6b4:	2100      	movs	r1, #0
 801f6b6:	4628      	mov	r0, r5
 801f6b8:	f7e0 fdba 	bl	8000230 <memchr>
 801f6bc:	b108      	cbz	r0, 801f6c2 <_printf_i+0x1f2>
 801f6be:	1b40      	subs	r0, r0, r5
 801f6c0:	6060      	str	r0, [r4, #4]
 801f6c2:	6863      	ldr	r3, [r4, #4]
 801f6c4:	6123      	str	r3, [r4, #16]
 801f6c6:	2300      	movs	r3, #0
 801f6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f6cc:	e7a8      	b.n	801f620 <_printf_i+0x150>
 801f6ce:	6923      	ldr	r3, [r4, #16]
 801f6d0:	462a      	mov	r2, r5
 801f6d2:	4649      	mov	r1, r9
 801f6d4:	4640      	mov	r0, r8
 801f6d6:	47d0      	blx	sl
 801f6d8:	3001      	adds	r0, #1
 801f6da:	d0ab      	beq.n	801f634 <_printf_i+0x164>
 801f6dc:	6823      	ldr	r3, [r4, #0]
 801f6de:	079b      	lsls	r3, r3, #30
 801f6e0:	d413      	bmi.n	801f70a <_printf_i+0x23a>
 801f6e2:	68e0      	ldr	r0, [r4, #12]
 801f6e4:	9b03      	ldr	r3, [sp, #12]
 801f6e6:	4298      	cmp	r0, r3
 801f6e8:	bfb8      	it	lt
 801f6ea:	4618      	movlt	r0, r3
 801f6ec:	e7a4      	b.n	801f638 <_printf_i+0x168>
 801f6ee:	2301      	movs	r3, #1
 801f6f0:	4632      	mov	r2, r6
 801f6f2:	4649      	mov	r1, r9
 801f6f4:	4640      	mov	r0, r8
 801f6f6:	47d0      	blx	sl
 801f6f8:	3001      	adds	r0, #1
 801f6fa:	d09b      	beq.n	801f634 <_printf_i+0x164>
 801f6fc:	3501      	adds	r5, #1
 801f6fe:	68e3      	ldr	r3, [r4, #12]
 801f700:	9903      	ldr	r1, [sp, #12]
 801f702:	1a5b      	subs	r3, r3, r1
 801f704:	42ab      	cmp	r3, r5
 801f706:	dcf2      	bgt.n	801f6ee <_printf_i+0x21e>
 801f708:	e7eb      	b.n	801f6e2 <_printf_i+0x212>
 801f70a:	2500      	movs	r5, #0
 801f70c:	f104 0619 	add.w	r6, r4, #25
 801f710:	e7f5      	b.n	801f6fe <_printf_i+0x22e>
 801f712:	bf00      	nop
 801f714:	08022186 	.word	0x08022186
 801f718:	08022197 	.word	0x08022197

0801f71c <iprintf>:
 801f71c:	b40f      	push	{r0, r1, r2, r3}
 801f71e:	4b0a      	ldr	r3, [pc, #40]	; (801f748 <iprintf+0x2c>)
 801f720:	b513      	push	{r0, r1, r4, lr}
 801f722:	681c      	ldr	r4, [r3, #0]
 801f724:	b124      	cbz	r4, 801f730 <iprintf+0x14>
 801f726:	69a3      	ldr	r3, [r4, #24]
 801f728:	b913      	cbnz	r3, 801f730 <iprintf+0x14>
 801f72a:	4620      	mov	r0, r4
 801f72c:	f001 f8f0 	bl	8020910 <__sinit>
 801f730:	ab05      	add	r3, sp, #20
 801f732:	9a04      	ldr	r2, [sp, #16]
 801f734:	68a1      	ldr	r1, [r4, #8]
 801f736:	9301      	str	r3, [sp, #4]
 801f738:	4620      	mov	r0, r4
 801f73a:	f001 fe9f 	bl	802147c <_vfiprintf_r>
 801f73e:	b002      	add	sp, #8
 801f740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f744:	b004      	add	sp, #16
 801f746:	4770      	bx	lr
 801f748:	2000002c 	.word	0x2000002c

0801f74c <putchar>:
 801f74c:	4b09      	ldr	r3, [pc, #36]	; (801f774 <putchar+0x28>)
 801f74e:	b513      	push	{r0, r1, r4, lr}
 801f750:	681c      	ldr	r4, [r3, #0]
 801f752:	4601      	mov	r1, r0
 801f754:	b134      	cbz	r4, 801f764 <putchar+0x18>
 801f756:	69a3      	ldr	r3, [r4, #24]
 801f758:	b923      	cbnz	r3, 801f764 <putchar+0x18>
 801f75a:	9001      	str	r0, [sp, #4]
 801f75c:	4620      	mov	r0, r4
 801f75e:	f001 f8d7 	bl	8020910 <__sinit>
 801f762:	9901      	ldr	r1, [sp, #4]
 801f764:	68a2      	ldr	r2, [r4, #8]
 801f766:	4620      	mov	r0, r4
 801f768:	b002      	add	sp, #8
 801f76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f76e:	f001 bfb5 	b.w	80216dc <_putc_r>
 801f772:	bf00      	nop
 801f774:	2000002c 	.word	0x2000002c

0801f778 <_puts_r>:
 801f778:	b570      	push	{r4, r5, r6, lr}
 801f77a:	460e      	mov	r6, r1
 801f77c:	4605      	mov	r5, r0
 801f77e:	b118      	cbz	r0, 801f788 <_puts_r+0x10>
 801f780:	6983      	ldr	r3, [r0, #24]
 801f782:	b90b      	cbnz	r3, 801f788 <_puts_r+0x10>
 801f784:	f001 f8c4 	bl	8020910 <__sinit>
 801f788:	69ab      	ldr	r3, [r5, #24]
 801f78a:	68ac      	ldr	r4, [r5, #8]
 801f78c:	b913      	cbnz	r3, 801f794 <_puts_r+0x1c>
 801f78e:	4628      	mov	r0, r5
 801f790:	f001 f8be 	bl	8020910 <__sinit>
 801f794:	4b2c      	ldr	r3, [pc, #176]	; (801f848 <_puts_r+0xd0>)
 801f796:	429c      	cmp	r4, r3
 801f798:	d120      	bne.n	801f7dc <_puts_r+0x64>
 801f79a:	686c      	ldr	r4, [r5, #4]
 801f79c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f79e:	07db      	lsls	r3, r3, #31
 801f7a0:	d405      	bmi.n	801f7ae <_puts_r+0x36>
 801f7a2:	89a3      	ldrh	r3, [r4, #12]
 801f7a4:	0598      	lsls	r0, r3, #22
 801f7a6:	d402      	bmi.n	801f7ae <_puts_r+0x36>
 801f7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7aa:	f001 f954 	bl	8020a56 <__retarget_lock_acquire_recursive>
 801f7ae:	89a3      	ldrh	r3, [r4, #12]
 801f7b0:	0719      	lsls	r1, r3, #28
 801f7b2:	d51d      	bpl.n	801f7f0 <_puts_r+0x78>
 801f7b4:	6923      	ldr	r3, [r4, #16]
 801f7b6:	b1db      	cbz	r3, 801f7f0 <_puts_r+0x78>
 801f7b8:	3e01      	subs	r6, #1
 801f7ba:	68a3      	ldr	r3, [r4, #8]
 801f7bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f7c0:	3b01      	subs	r3, #1
 801f7c2:	60a3      	str	r3, [r4, #8]
 801f7c4:	bb39      	cbnz	r1, 801f816 <_puts_r+0x9e>
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	da38      	bge.n	801f83c <_puts_r+0xc4>
 801f7ca:	4622      	mov	r2, r4
 801f7cc:	210a      	movs	r1, #10
 801f7ce:	4628      	mov	r0, r5
 801f7d0:	f000 f848 	bl	801f864 <__swbuf_r>
 801f7d4:	3001      	adds	r0, #1
 801f7d6:	d011      	beq.n	801f7fc <_puts_r+0x84>
 801f7d8:	250a      	movs	r5, #10
 801f7da:	e011      	b.n	801f800 <_puts_r+0x88>
 801f7dc:	4b1b      	ldr	r3, [pc, #108]	; (801f84c <_puts_r+0xd4>)
 801f7de:	429c      	cmp	r4, r3
 801f7e0:	d101      	bne.n	801f7e6 <_puts_r+0x6e>
 801f7e2:	68ac      	ldr	r4, [r5, #8]
 801f7e4:	e7da      	b.n	801f79c <_puts_r+0x24>
 801f7e6:	4b1a      	ldr	r3, [pc, #104]	; (801f850 <_puts_r+0xd8>)
 801f7e8:	429c      	cmp	r4, r3
 801f7ea:	bf08      	it	eq
 801f7ec:	68ec      	ldreq	r4, [r5, #12]
 801f7ee:	e7d5      	b.n	801f79c <_puts_r+0x24>
 801f7f0:	4621      	mov	r1, r4
 801f7f2:	4628      	mov	r0, r5
 801f7f4:	f000 f888 	bl	801f908 <__swsetup_r>
 801f7f8:	2800      	cmp	r0, #0
 801f7fa:	d0dd      	beq.n	801f7b8 <_puts_r+0x40>
 801f7fc:	f04f 35ff 	mov.w	r5, #4294967295
 801f800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f802:	07da      	lsls	r2, r3, #31
 801f804:	d405      	bmi.n	801f812 <_puts_r+0x9a>
 801f806:	89a3      	ldrh	r3, [r4, #12]
 801f808:	059b      	lsls	r3, r3, #22
 801f80a:	d402      	bmi.n	801f812 <_puts_r+0x9a>
 801f80c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f80e:	f001 f923 	bl	8020a58 <__retarget_lock_release_recursive>
 801f812:	4628      	mov	r0, r5
 801f814:	bd70      	pop	{r4, r5, r6, pc}
 801f816:	2b00      	cmp	r3, #0
 801f818:	da04      	bge.n	801f824 <_puts_r+0xac>
 801f81a:	69a2      	ldr	r2, [r4, #24]
 801f81c:	429a      	cmp	r2, r3
 801f81e:	dc06      	bgt.n	801f82e <_puts_r+0xb6>
 801f820:	290a      	cmp	r1, #10
 801f822:	d004      	beq.n	801f82e <_puts_r+0xb6>
 801f824:	6823      	ldr	r3, [r4, #0]
 801f826:	1c5a      	adds	r2, r3, #1
 801f828:	6022      	str	r2, [r4, #0]
 801f82a:	7019      	strb	r1, [r3, #0]
 801f82c:	e7c5      	b.n	801f7ba <_puts_r+0x42>
 801f82e:	4622      	mov	r2, r4
 801f830:	4628      	mov	r0, r5
 801f832:	f000 f817 	bl	801f864 <__swbuf_r>
 801f836:	3001      	adds	r0, #1
 801f838:	d1bf      	bne.n	801f7ba <_puts_r+0x42>
 801f83a:	e7df      	b.n	801f7fc <_puts_r+0x84>
 801f83c:	6823      	ldr	r3, [r4, #0]
 801f83e:	250a      	movs	r5, #10
 801f840:	1c5a      	adds	r2, r3, #1
 801f842:	6022      	str	r2, [r4, #0]
 801f844:	701d      	strb	r5, [r3, #0]
 801f846:	e7db      	b.n	801f800 <_puts_r+0x88>
 801f848:	08022258 	.word	0x08022258
 801f84c:	08022278 	.word	0x08022278
 801f850:	08022238 	.word	0x08022238

0801f854 <puts>:
 801f854:	4b02      	ldr	r3, [pc, #8]	; (801f860 <puts+0xc>)
 801f856:	4601      	mov	r1, r0
 801f858:	6818      	ldr	r0, [r3, #0]
 801f85a:	f7ff bf8d 	b.w	801f778 <_puts_r>
 801f85e:	bf00      	nop
 801f860:	2000002c 	.word	0x2000002c

0801f864 <__swbuf_r>:
 801f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f866:	460e      	mov	r6, r1
 801f868:	4614      	mov	r4, r2
 801f86a:	4605      	mov	r5, r0
 801f86c:	b118      	cbz	r0, 801f876 <__swbuf_r+0x12>
 801f86e:	6983      	ldr	r3, [r0, #24]
 801f870:	b90b      	cbnz	r3, 801f876 <__swbuf_r+0x12>
 801f872:	f001 f84d 	bl	8020910 <__sinit>
 801f876:	4b21      	ldr	r3, [pc, #132]	; (801f8fc <__swbuf_r+0x98>)
 801f878:	429c      	cmp	r4, r3
 801f87a:	d12b      	bne.n	801f8d4 <__swbuf_r+0x70>
 801f87c:	686c      	ldr	r4, [r5, #4]
 801f87e:	69a3      	ldr	r3, [r4, #24]
 801f880:	60a3      	str	r3, [r4, #8]
 801f882:	89a3      	ldrh	r3, [r4, #12]
 801f884:	071a      	lsls	r2, r3, #28
 801f886:	d52f      	bpl.n	801f8e8 <__swbuf_r+0x84>
 801f888:	6923      	ldr	r3, [r4, #16]
 801f88a:	b36b      	cbz	r3, 801f8e8 <__swbuf_r+0x84>
 801f88c:	6923      	ldr	r3, [r4, #16]
 801f88e:	6820      	ldr	r0, [r4, #0]
 801f890:	1ac0      	subs	r0, r0, r3
 801f892:	6963      	ldr	r3, [r4, #20]
 801f894:	b2f6      	uxtb	r6, r6
 801f896:	4283      	cmp	r3, r0
 801f898:	4637      	mov	r7, r6
 801f89a:	dc04      	bgt.n	801f8a6 <__swbuf_r+0x42>
 801f89c:	4621      	mov	r1, r4
 801f89e:	4628      	mov	r0, r5
 801f8a0:	f000 ffa2 	bl	80207e8 <_fflush_r>
 801f8a4:	bb30      	cbnz	r0, 801f8f4 <__swbuf_r+0x90>
 801f8a6:	68a3      	ldr	r3, [r4, #8]
 801f8a8:	3b01      	subs	r3, #1
 801f8aa:	60a3      	str	r3, [r4, #8]
 801f8ac:	6823      	ldr	r3, [r4, #0]
 801f8ae:	1c5a      	adds	r2, r3, #1
 801f8b0:	6022      	str	r2, [r4, #0]
 801f8b2:	701e      	strb	r6, [r3, #0]
 801f8b4:	6963      	ldr	r3, [r4, #20]
 801f8b6:	3001      	adds	r0, #1
 801f8b8:	4283      	cmp	r3, r0
 801f8ba:	d004      	beq.n	801f8c6 <__swbuf_r+0x62>
 801f8bc:	89a3      	ldrh	r3, [r4, #12]
 801f8be:	07db      	lsls	r3, r3, #31
 801f8c0:	d506      	bpl.n	801f8d0 <__swbuf_r+0x6c>
 801f8c2:	2e0a      	cmp	r6, #10
 801f8c4:	d104      	bne.n	801f8d0 <__swbuf_r+0x6c>
 801f8c6:	4621      	mov	r1, r4
 801f8c8:	4628      	mov	r0, r5
 801f8ca:	f000 ff8d 	bl	80207e8 <_fflush_r>
 801f8ce:	b988      	cbnz	r0, 801f8f4 <__swbuf_r+0x90>
 801f8d0:	4638      	mov	r0, r7
 801f8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f8d4:	4b0a      	ldr	r3, [pc, #40]	; (801f900 <__swbuf_r+0x9c>)
 801f8d6:	429c      	cmp	r4, r3
 801f8d8:	d101      	bne.n	801f8de <__swbuf_r+0x7a>
 801f8da:	68ac      	ldr	r4, [r5, #8]
 801f8dc:	e7cf      	b.n	801f87e <__swbuf_r+0x1a>
 801f8de:	4b09      	ldr	r3, [pc, #36]	; (801f904 <__swbuf_r+0xa0>)
 801f8e0:	429c      	cmp	r4, r3
 801f8e2:	bf08      	it	eq
 801f8e4:	68ec      	ldreq	r4, [r5, #12]
 801f8e6:	e7ca      	b.n	801f87e <__swbuf_r+0x1a>
 801f8e8:	4621      	mov	r1, r4
 801f8ea:	4628      	mov	r0, r5
 801f8ec:	f000 f80c 	bl	801f908 <__swsetup_r>
 801f8f0:	2800      	cmp	r0, #0
 801f8f2:	d0cb      	beq.n	801f88c <__swbuf_r+0x28>
 801f8f4:	f04f 37ff 	mov.w	r7, #4294967295
 801f8f8:	e7ea      	b.n	801f8d0 <__swbuf_r+0x6c>
 801f8fa:	bf00      	nop
 801f8fc:	08022258 	.word	0x08022258
 801f900:	08022278 	.word	0x08022278
 801f904:	08022238 	.word	0x08022238

0801f908 <__swsetup_r>:
 801f908:	4b32      	ldr	r3, [pc, #200]	; (801f9d4 <__swsetup_r+0xcc>)
 801f90a:	b570      	push	{r4, r5, r6, lr}
 801f90c:	681d      	ldr	r5, [r3, #0]
 801f90e:	4606      	mov	r6, r0
 801f910:	460c      	mov	r4, r1
 801f912:	b125      	cbz	r5, 801f91e <__swsetup_r+0x16>
 801f914:	69ab      	ldr	r3, [r5, #24]
 801f916:	b913      	cbnz	r3, 801f91e <__swsetup_r+0x16>
 801f918:	4628      	mov	r0, r5
 801f91a:	f000 fff9 	bl	8020910 <__sinit>
 801f91e:	4b2e      	ldr	r3, [pc, #184]	; (801f9d8 <__swsetup_r+0xd0>)
 801f920:	429c      	cmp	r4, r3
 801f922:	d10f      	bne.n	801f944 <__swsetup_r+0x3c>
 801f924:	686c      	ldr	r4, [r5, #4]
 801f926:	89a3      	ldrh	r3, [r4, #12]
 801f928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f92c:	0719      	lsls	r1, r3, #28
 801f92e:	d42c      	bmi.n	801f98a <__swsetup_r+0x82>
 801f930:	06dd      	lsls	r5, r3, #27
 801f932:	d411      	bmi.n	801f958 <__swsetup_r+0x50>
 801f934:	2309      	movs	r3, #9
 801f936:	6033      	str	r3, [r6, #0]
 801f938:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f93c:	81a3      	strh	r3, [r4, #12]
 801f93e:	f04f 30ff 	mov.w	r0, #4294967295
 801f942:	e03e      	b.n	801f9c2 <__swsetup_r+0xba>
 801f944:	4b25      	ldr	r3, [pc, #148]	; (801f9dc <__swsetup_r+0xd4>)
 801f946:	429c      	cmp	r4, r3
 801f948:	d101      	bne.n	801f94e <__swsetup_r+0x46>
 801f94a:	68ac      	ldr	r4, [r5, #8]
 801f94c:	e7eb      	b.n	801f926 <__swsetup_r+0x1e>
 801f94e:	4b24      	ldr	r3, [pc, #144]	; (801f9e0 <__swsetup_r+0xd8>)
 801f950:	429c      	cmp	r4, r3
 801f952:	bf08      	it	eq
 801f954:	68ec      	ldreq	r4, [r5, #12]
 801f956:	e7e6      	b.n	801f926 <__swsetup_r+0x1e>
 801f958:	0758      	lsls	r0, r3, #29
 801f95a:	d512      	bpl.n	801f982 <__swsetup_r+0x7a>
 801f95c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f95e:	b141      	cbz	r1, 801f972 <__swsetup_r+0x6a>
 801f960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f964:	4299      	cmp	r1, r3
 801f966:	d002      	beq.n	801f96e <__swsetup_r+0x66>
 801f968:	4630      	mov	r0, r6
 801f96a:	f001 fc7d 	bl	8021268 <_free_r>
 801f96e:	2300      	movs	r3, #0
 801f970:	6363      	str	r3, [r4, #52]	; 0x34
 801f972:	89a3      	ldrh	r3, [r4, #12]
 801f974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f978:	81a3      	strh	r3, [r4, #12]
 801f97a:	2300      	movs	r3, #0
 801f97c:	6063      	str	r3, [r4, #4]
 801f97e:	6923      	ldr	r3, [r4, #16]
 801f980:	6023      	str	r3, [r4, #0]
 801f982:	89a3      	ldrh	r3, [r4, #12]
 801f984:	f043 0308 	orr.w	r3, r3, #8
 801f988:	81a3      	strh	r3, [r4, #12]
 801f98a:	6923      	ldr	r3, [r4, #16]
 801f98c:	b94b      	cbnz	r3, 801f9a2 <__swsetup_r+0x9a>
 801f98e:	89a3      	ldrh	r3, [r4, #12]
 801f990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f998:	d003      	beq.n	801f9a2 <__swsetup_r+0x9a>
 801f99a:	4621      	mov	r1, r4
 801f99c:	4630      	mov	r0, r6
 801f99e:	f001 f881 	bl	8020aa4 <__smakebuf_r>
 801f9a2:	89a0      	ldrh	r0, [r4, #12]
 801f9a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f9a8:	f010 0301 	ands.w	r3, r0, #1
 801f9ac:	d00a      	beq.n	801f9c4 <__swsetup_r+0xbc>
 801f9ae:	2300      	movs	r3, #0
 801f9b0:	60a3      	str	r3, [r4, #8]
 801f9b2:	6963      	ldr	r3, [r4, #20]
 801f9b4:	425b      	negs	r3, r3
 801f9b6:	61a3      	str	r3, [r4, #24]
 801f9b8:	6923      	ldr	r3, [r4, #16]
 801f9ba:	b943      	cbnz	r3, 801f9ce <__swsetup_r+0xc6>
 801f9bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f9c0:	d1ba      	bne.n	801f938 <__swsetup_r+0x30>
 801f9c2:	bd70      	pop	{r4, r5, r6, pc}
 801f9c4:	0781      	lsls	r1, r0, #30
 801f9c6:	bf58      	it	pl
 801f9c8:	6963      	ldrpl	r3, [r4, #20]
 801f9ca:	60a3      	str	r3, [r4, #8]
 801f9cc:	e7f4      	b.n	801f9b8 <__swsetup_r+0xb0>
 801f9ce:	2000      	movs	r0, #0
 801f9d0:	e7f7      	b.n	801f9c2 <__swsetup_r+0xba>
 801f9d2:	bf00      	nop
 801f9d4:	2000002c 	.word	0x2000002c
 801f9d8:	08022258 	.word	0x08022258
 801f9dc:	08022278 	.word	0x08022278
 801f9e0:	08022238 	.word	0x08022238

0801f9e4 <quorem>:
 801f9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9e8:	6903      	ldr	r3, [r0, #16]
 801f9ea:	690c      	ldr	r4, [r1, #16]
 801f9ec:	42a3      	cmp	r3, r4
 801f9ee:	4607      	mov	r7, r0
 801f9f0:	f2c0 8081 	blt.w	801faf6 <quorem+0x112>
 801f9f4:	3c01      	subs	r4, #1
 801f9f6:	f101 0814 	add.w	r8, r1, #20
 801f9fa:	f100 0514 	add.w	r5, r0, #20
 801f9fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fa02:	9301      	str	r3, [sp, #4]
 801fa04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fa08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fa0c:	3301      	adds	r3, #1
 801fa0e:	429a      	cmp	r2, r3
 801fa10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fa14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fa18:	fbb2 f6f3 	udiv	r6, r2, r3
 801fa1c:	d331      	bcc.n	801fa82 <quorem+0x9e>
 801fa1e:	f04f 0e00 	mov.w	lr, #0
 801fa22:	4640      	mov	r0, r8
 801fa24:	46ac      	mov	ip, r5
 801fa26:	46f2      	mov	sl, lr
 801fa28:	f850 2b04 	ldr.w	r2, [r0], #4
 801fa2c:	b293      	uxth	r3, r2
 801fa2e:	fb06 e303 	mla	r3, r6, r3, lr
 801fa32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fa36:	b29b      	uxth	r3, r3
 801fa38:	ebaa 0303 	sub.w	r3, sl, r3
 801fa3c:	f8dc a000 	ldr.w	sl, [ip]
 801fa40:	0c12      	lsrs	r2, r2, #16
 801fa42:	fa13 f38a 	uxtah	r3, r3, sl
 801fa46:	fb06 e202 	mla	r2, r6, r2, lr
 801fa4a:	9300      	str	r3, [sp, #0]
 801fa4c:	9b00      	ldr	r3, [sp, #0]
 801fa4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fa52:	b292      	uxth	r2, r2
 801fa54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fa58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fa5c:	f8bd 3000 	ldrh.w	r3, [sp]
 801fa60:	4581      	cmp	r9, r0
 801fa62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fa66:	f84c 3b04 	str.w	r3, [ip], #4
 801fa6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fa6e:	d2db      	bcs.n	801fa28 <quorem+0x44>
 801fa70:	f855 300b 	ldr.w	r3, [r5, fp]
 801fa74:	b92b      	cbnz	r3, 801fa82 <quorem+0x9e>
 801fa76:	9b01      	ldr	r3, [sp, #4]
 801fa78:	3b04      	subs	r3, #4
 801fa7a:	429d      	cmp	r5, r3
 801fa7c:	461a      	mov	r2, r3
 801fa7e:	d32e      	bcc.n	801fade <quorem+0xfa>
 801fa80:	613c      	str	r4, [r7, #16]
 801fa82:	4638      	mov	r0, r7
 801fa84:	f001 fad8 	bl	8021038 <__mcmp>
 801fa88:	2800      	cmp	r0, #0
 801fa8a:	db24      	blt.n	801fad6 <quorem+0xf2>
 801fa8c:	3601      	adds	r6, #1
 801fa8e:	4628      	mov	r0, r5
 801fa90:	f04f 0c00 	mov.w	ip, #0
 801fa94:	f858 2b04 	ldr.w	r2, [r8], #4
 801fa98:	f8d0 e000 	ldr.w	lr, [r0]
 801fa9c:	b293      	uxth	r3, r2
 801fa9e:	ebac 0303 	sub.w	r3, ip, r3
 801faa2:	0c12      	lsrs	r2, r2, #16
 801faa4:	fa13 f38e 	uxtah	r3, r3, lr
 801faa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801faac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fab0:	b29b      	uxth	r3, r3
 801fab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fab6:	45c1      	cmp	r9, r8
 801fab8:	f840 3b04 	str.w	r3, [r0], #4
 801fabc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fac0:	d2e8      	bcs.n	801fa94 <quorem+0xb0>
 801fac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801faca:	b922      	cbnz	r2, 801fad6 <quorem+0xf2>
 801facc:	3b04      	subs	r3, #4
 801face:	429d      	cmp	r5, r3
 801fad0:	461a      	mov	r2, r3
 801fad2:	d30a      	bcc.n	801faea <quorem+0x106>
 801fad4:	613c      	str	r4, [r7, #16]
 801fad6:	4630      	mov	r0, r6
 801fad8:	b003      	add	sp, #12
 801fada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fade:	6812      	ldr	r2, [r2, #0]
 801fae0:	3b04      	subs	r3, #4
 801fae2:	2a00      	cmp	r2, #0
 801fae4:	d1cc      	bne.n	801fa80 <quorem+0x9c>
 801fae6:	3c01      	subs	r4, #1
 801fae8:	e7c7      	b.n	801fa7a <quorem+0x96>
 801faea:	6812      	ldr	r2, [r2, #0]
 801faec:	3b04      	subs	r3, #4
 801faee:	2a00      	cmp	r2, #0
 801faf0:	d1f0      	bne.n	801fad4 <quorem+0xf0>
 801faf2:	3c01      	subs	r4, #1
 801faf4:	e7eb      	b.n	801face <quorem+0xea>
 801faf6:	2000      	movs	r0, #0
 801faf8:	e7ee      	b.n	801fad8 <quorem+0xf4>
 801fafa:	0000      	movs	r0, r0
 801fafc:	0000      	movs	r0, r0
	...

0801fb00 <_dtoa_r>:
 801fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb04:	ed2d 8b04 	vpush	{d8-d9}
 801fb08:	ec57 6b10 	vmov	r6, r7, d0
 801fb0c:	b093      	sub	sp, #76	; 0x4c
 801fb0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801fb10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fb14:	9106      	str	r1, [sp, #24]
 801fb16:	ee10 aa10 	vmov	sl, s0
 801fb1a:	4604      	mov	r4, r0
 801fb1c:	9209      	str	r2, [sp, #36]	; 0x24
 801fb1e:	930c      	str	r3, [sp, #48]	; 0x30
 801fb20:	46bb      	mov	fp, r7
 801fb22:	b975      	cbnz	r5, 801fb42 <_dtoa_r+0x42>
 801fb24:	2010      	movs	r0, #16
 801fb26:	f000 fffd 	bl	8020b24 <malloc>
 801fb2a:	4602      	mov	r2, r0
 801fb2c:	6260      	str	r0, [r4, #36]	; 0x24
 801fb2e:	b920      	cbnz	r0, 801fb3a <_dtoa_r+0x3a>
 801fb30:	4ba7      	ldr	r3, [pc, #668]	; (801fdd0 <_dtoa_r+0x2d0>)
 801fb32:	21ea      	movs	r1, #234	; 0xea
 801fb34:	48a7      	ldr	r0, [pc, #668]	; (801fdd4 <_dtoa_r+0x2d4>)
 801fb36:	f001 fe7f 	bl	8021838 <__assert_func>
 801fb3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fb3e:	6005      	str	r5, [r0, #0]
 801fb40:	60c5      	str	r5, [r0, #12]
 801fb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb44:	6819      	ldr	r1, [r3, #0]
 801fb46:	b151      	cbz	r1, 801fb5e <_dtoa_r+0x5e>
 801fb48:	685a      	ldr	r2, [r3, #4]
 801fb4a:	604a      	str	r2, [r1, #4]
 801fb4c:	2301      	movs	r3, #1
 801fb4e:	4093      	lsls	r3, r2
 801fb50:	608b      	str	r3, [r1, #8]
 801fb52:	4620      	mov	r0, r4
 801fb54:	f001 f82e 	bl	8020bb4 <_Bfree>
 801fb58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb5a:	2200      	movs	r2, #0
 801fb5c:	601a      	str	r2, [r3, #0]
 801fb5e:	1e3b      	subs	r3, r7, #0
 801fb60:	bfaa      	itet	ge
 801fb62:	2300      	movge	r3, #0
 801fb64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801fb68:	f8c8 3000 	strge.w	r3, [r8]
 801fb6c:	4b9a      	ldr	r3, [pc, #616]	; (801fdd8 <_dtoa_r+0x2d8>)
 801fb6e:	bfbc      	itt	lt
 801fb70:	2201      	movlt	r2, #1
 801fb72:	f8c8 2000 	strlt.w	r2, [r8]
 801fb76:	ea33 030b 	bics.w	r3, r3, fp
 801fb7a:	d11b      	bne.n	801fbb4 <_dtoa_r+0xb4>
 801fb7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fb7e:	f242 730f 	movw	r3, #9999	; 0x270f
 801fb82:	6013      	str	r3, [r2, #0]
 801fb84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fb88:	4333      	orrs	r3, r6
 801fb8a:	f000 8592 	beq.w	80206b2 <_dtoa_r+0xbb2>
 801fb8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fb90:	b963      	cbnz	r3, 801fbac <_dtoa_r+0xac>
 801fb92:	4b92      	ldr	r3, [pc, #584]	; (801fddc <_dtoa_r+0x2dc>)
 801fb94:	e022      	b.n	801fbdc <_dtoa_r+0xdc>
 801fb96:	4b92      	ldr	r3, [pc, #584]	; (801fde0 <_dtoa_r+0x2e0>)
 801fb98:	9301      	str	r3, [sp, #4]
 801fb9a:	3308      	adds	r3, #8
 801fb9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fb9e:	6013      	str	r3, [r2, #0]
 801fba0:	9801      	ldr	r0, [sp, #4]
 801fba2:	b013      	add	sp, #76	; 0x4c
 801fba4:	ecbd 8b04 	vpop	{d8-d9}
 801fba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbac:	4b8b      	ldr	r3, [pc, #556]	; (801fddc <_dtoa_r+0x2dc>)
 801fbae:	9301      	str	r3, [sp, #4]
 801fbb0:	3303      	adds	r3, #3
 801fbb2:	e7f3      	b.n	801fb9c <_dtoa_r+0x9c>
 801fbb4:	2200      	movs	r2, #0
 801fbb6:	2300      	movs	r3, #0
 801fbb8:	4650      	mov	r0, sl
 801fbba:	4659      	mov	r1, fp
 801fbbc:	f7e0 ffac 	bl	8000b18 <__aeabi_dcmpeq>
 801fbc0:	ec4b ab19 	vmov	d9, sl, fp
 801fbc4:	4680      	mov	r8, r0
 801fbc6:	b158      	cbz	r0, 801fbe0 <_dtoa_r+0xe0>
 801fbc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fbca:	2301      	movs	r3, #1
 801fbcc:	6013      	str	r3, [r2, #0]
 801fbce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	f000 856b 	beq.w	80206ac <_dtoa_r+0xbac>
 801fbd6:	4883      	ldr	r0, [pc, #524]	; (801fde4 <_dtoa_r+0x2e4>)
 801fbd8:	6018      	str	r0, [r3, #0]
 801fbda:	1e43      	subs	r3, r0, #1
 801fbdc:	9301      	str	r3, [sp, #4]
 801fbde:	e7df      	b.n	801fba0 <_dtoa_r+0xa0>
 801fbe0:	ec4b ab10 	vmov	d0, sl, fp
 801fbe4:	aa10      	add	r2, sp, #64	; 0x40
 801fbe6:	a911      	add	r1, sp, #68	; 0x44
 801fbe8:	4620      	mov	r0, r4
 801fbea:	f001 facb 	bl	8021184 <__d2b>
 801fbee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801fbf2:	ee08 0a10 	vmov	s16, r0
 801fbf6:	2d00      	cmp	r5, #0
 801fbf8:	f000 8084 	beq.w	801fd04 <_dtoa_r+0x204>
 801fbfc:	ee19 3a90 	vmov	r3, s19
 801fc00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fc04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801fc08:	4656      	mov	r6, sl
 801fc0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801fc0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fc12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fc16:	4b74      	ldr	r3, [pc, #464]	; (801fde8 <_dtoa_r+0x2e8>)
 801fc18:	2200      	movs	r2, #0
 801fc1a:	4630      	mov	r0, r6
 801fc1c:	4639      	mov	r1, r7
 801fc1e:	f7e0 fb5b 	bl	80002d8 <__aeabi_dsub>
 801fc22:	a365      	add	r3, pc, #404	; (adr r3, 801fdb8 <_dtoa_r+0x2b8>)
 801fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc28:	f7e0 fd0e 	bl	8000648 <__aeabi_dmul>
 801fc2c:	a364      	add	r3, pc, #400	; (adr r3, 801fdc0 <_dtoa_r+0x2c0>)
 801fc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc32:	f7e0 fb53 	bl	80002dc <__adddf3>
 801fc36:	4606      	mov	r6, r0
 801fc38:	4628      	mov	r0, r5
 801fc3a:	460f      	mov	r7, r1
 801fc3c:	f7e0 fc9a 	bl	8000574 <__aeabi_i2d>
 801fc40:	a361      	add	r3, pc, #388	; (adr r3, 801fdc8 <_dtoa_r+0x2c8>)
 801fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc46:	f7e0 fcff 	bl	8000648 <__aeabi_dmul>
 801fc4a:	4602      	mov	r2, r0
 801fc4c:	460b      	mov	r3, r1
 801fc4e:	4630      	mov	r0, r6
 801fc50:	4639      	mov	r1, r7
 801fc52:	f7e0 fb43 	bl	80002dc <__adddf3>
 801fc56:	4606      	mov	r6, r0
 801fc58:	460f      	mov	r7, r1
 801fc5a:	f7e0 ffa5 	bl	8000ba8 <__aeabi_d2iz>
 801fc5e:	2200      	movs	r2, #0
 801fc60:	9000      	str	r0, [sp, #0]
 801fc62:	2300      	movs	r3, #0
 801fc64:	4630      	mov	r0, r6
 801fc66:	4639      	mov	r1, r7
 801fc68:	f7e0 ff60 	bl	8000b2c <__aeabi_dcmplt>
 801fc6c:	b150      	cbz	r0, 801fc84 <_dtoa_r+0x184>
 801fc6e:	9800      	ldr	r0, [sp, #0]
 801fc70:	f7e0 fc80 	bl	8000574 <__aeabi_i2d>
 801fc74:	4632      	mov	r2, r6
 801fc76:	463b      	mov	r3, r7
 801fc78:	f7e0 ff4e 	bl	8000b18 <__aeabi_dcmpeq>
 801fc7c:	b910      	cbnz	r0, 801fc84 <_dtoa_r+0x184>
 801fc7e:	9b00      	ldr	r3, [sp, #0]
 801fc80:	3b01      	subs	r3, #1
 801fc82:	9300      	str	r3, [sp, #0]
 801fc84:	9b00      	ldr	r3, [sp, #0]
 801fc86:	2b16      	cmp	r3, #22
 801fc88:	d85a      	bhi.n	801fd40 <_dtoa_r+0x240>
 801fc8a:	9a00      	ldr	r2, [sp, #0]
 801fc8c:	4b57      	ldr	r3, [pc, #348]	; (801fdec <_dtoa_r+0x2ec>)
 801fc8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc96:	ec51 0b19 	vmov	r0, r1, d9
 801fc9a:	f7e0 ff47 	bl	8000b2c <__aeabi_dcmplt>
 801fc9e:	2800      	cmp	r0, #0
 801fca0:	d050      	beq.n	801fd44 <_dtoa_r+0x244>
 801fca2:	9b00      	ldr	r3, [sp, #0]
 801fca4:	3b01      	subs	r3, #1
 801fca6:	9300      	str	r3, [sp, #0]
 801fca8:	2300      	movs	r3, #0
 801fcaa:	930b      	str	r3, [sp, #44]	; 0x2c
 801fcac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fcae:	1b5d      	subs	r5, r3, r5
 801fcb0:	1e6b      	subs	r3, r5, #1
 801fcb2:	9305      	str	r3, [sp, #20]
 801fcb4:	bf45      	ittet	mi
 801fcb6:	f1c5 0301 	rsbmi	r3, r5, #1
 801fcba:	9304      	strmi	r3, [sp, #16]
 801fcbc:	2300      	movpl	r3, #0
 801fcbe:	2300      	movmi	r3, #0
 801fcc0:	bf4c      	ite	mi
 801fcc2:	9305      	strmi	r3, [sp, #20]
 801fcc4:	9304      	strpl	r3, [sp, #16]
 801fcc6:	9b00      	ldr	r3, [sp, #0]
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	db3d      	blt.n	801fd48 <_dtoa_r+0x248>
 801fccc:	9b05      	ldr	r3, [sp, #20]
 801fcce:	9a00      	ldr	r2, [sp, #0]
 801fcd0:	920a      	str	r2, [sp, #40]	; 0x28
 801fcd2:	4413      	add	r3, r2
 801fcd4:	9305      	str	r3, [sp, #20]
 801fcd6:	2300      	movs	r3, #0
 801fcd8:	9307      	str	r3, [sp, #28]
 801fcda:	9b06      	ldr	r3, [sp, #24]
 801fcdc:	2b09      	cmp	r3, #9
 801fcde:	f200 8089 	bhi.w	801fdf4 <_dtoa_r+0x2f4>
 801fce2:	2b05      	cmp	r3, #5
 801fce4:	bfc4      	itt	gt
 801fce6:	3b04      	subgt	r3, #4
 801fce8:	9306      	strgt	r3, [sp, #24]
 801fcea:	9b06      	ldr	r3, [sp, #24]
 801fcec:	f1a3 0302 	sub.w	r3, r3, #2
 801fcf0:	bfcc      	ite	gt
 801fcf2:	2500      	movgt	r5, #0
 801fcf4:	2501      	movle	r5, #1
 801fcf6:	2b03      	cmp	r3, #3
 801fcf8:	f200 8087 	bhi.w	801fe0a <_dtoa_r+0x30a>
 801fcfc:	e8df f003 	tbb	[pc, r3]
 801fd00:	59383a2d 	.word	0x59383a2d
 801fd04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801fd08:	441d      	add	r5, r3
 801fd0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801fd0e:	2b20      	cmp	r3, #32
 801fd10:	bfc1      	itttt	gt
 801fd12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801fd16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801fd1a:	fa0b f303 	lslgt.w	r3, fp, r3
 801fd1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801fd22:	bfda      	itte	le
 801fd24:	f1c3 0320 	rsble	r3, r3, #32
 801fd28:	fa06 f003 	lslle.w	r0, r6, r3
 801fd2c:	4318      	orrgt	r0, r3
 801fd2e:	f7e0 fc11 	bl	8000554 <__aeabi_ui2d>
 801fd32:	2301      	movs	r3, #1
 801fd34:	4606      	mov	r6, r0
 801fd36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801fd3a:	3d01      	subs	r5, #1
 801fd3c:	930e      	str	r3, [sp, #56]	; 0x38
 801fd3e:	e76a      	b.n	801fc16 <_dtoa_r+0x116>
 801fd40:	2301      	movs	r3, #1
 801fd42:	e7b2      	b.n	801fcaa <_dtoa_r+0x1aa>
 801fd44:	900b      	str	r0, [sp, #44]	; 0x2c
 801fd46:	e7b1      	b.n	801fcac <_dtoa_r+0x1ac>
 801fd48:	9b04      	ldr	r3, [sp, #16]
 801fd4a:	9a00      	ldr	r2, [sp, #0]
 801fd4c:	1a9b      	subs	r3, r3, r2
 801fd4e:	9304      	str	r3, [sp, #16]
 801fd50:	4253      	negs	r3, r2
 801fd52:	9307      	str	r3, [sp, #28]
 801fd54:	2300      	movs	r3, #0
 801fd56:	930a      	str	r3, [sp, #40]	; 0x28
 801fd58:	e7bf      	b.n	801fcda <_dtoa_r+0x1da>
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	9308      	str	r3, [sp, #32]
 801fd5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	dc55      	bgt.n	801fe10 <_dtoa_r+0x310>
 801fd64:	2301      	movs	r3, #1
 801fd66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801fd6a:	461a      	mov	r2, r3
 801fd6c:	9209      	str	r2, [sp, #36]	; 0x24
 801fd6e:	e00c      	b.n	801fd8a <_dtoa_r+0x28a>
 801fd70:	2301      	movs	r3, #1
 801fd72:	e7f3      	b.n	801fd5c <_dtoa_r+0x25c>
 801fd74:	2300      	movs	r3, #0
 801fd76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd78:	9308      	str	r3, [sp, #32]
 801fd7a:	9b00      	ldr	r3, [sp, #0]
 801fd7c:	4413      	add	r3, r2
 801fd7e:	9302      	str	r3, [sp, #8]
 801fd80:	3301      	adds	r3, #1
 801fd82:	2b01      	cmp	r3, #1
 801fd84:	9303      	str	r3, [sp, #12]
 801fd86:	bfb8      	it	lt
 801fd88:	2301      	movlt	r3, #1
 801fd8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fd8c:	2200      	movs	r2, #0
 801fd8e:	6042      	str	r2, [r0, #4]
 801fd90:	2204      	movs	r2, #4
 801fd92:	f102 0614 	add.w	r6, r2, #20
 801fd96:	429e      	cmp	r6, r3
 801fd98:	6841      	ldr	r1, [r0, #4]
 801fd9a:	d93d      	bls.n	801fe18 <_dtoa_r+0x318>
 801fd9c:	4620      	mov	r0, r4
 801fd9e:	f000 fec9 	bl	8020b34 <_Balloc>
 801fda2:	9001      	str	r0, [sp, #4]
 801fda4:	2800      	cmp	r0, #0
 801fda6:	d13b      	bne.n	801fe20 <_dtoa_r+0x320>
 801fda8:	4b11      	ldr	r3, [pc, #68]	; (801fdf0 <_dtoa_r+0x2f0>)
 801fdaa:	4602      	mov	r2, r0
 801fdac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801fdb0:	e6c0      	b.n	801fb34 <_dtoa_r+0x34>
 801fdb2:	2301      	movs	r3, #1
 801fdb4:	e7df      	b.n	801fd76 <_dtoa_r+0x276>
 801fdb6:	bf00      	nop
 801fdb8:	636f4361 	.word	0x636f4361
 801fdbc:	3fd287a7 	.word	0x3fd287a7
 801fdc0:	8b60c8b3 	.word	0x8b60c8b3
 801fdc4:	3fc68a28 	.word	0x3fc68a28
 801fdc8:	509f79fb 	.word	0x509f79fb
 801fdcc:	3fd34413 	.word	0x3fd34413
 801fdd0:	080221b5 	.word	0x080221b5
 801fdd4:	080221cc 	.word	0x080221cc
 801fdd8:	7ff00000 	.word	0x7ff00000
 801fddc:	080221b1 	.word	0x080221b1
 801fde0:	080221a8 	.word	0x080221a8
 801fde4:	08022185 	.word	0x08022185
 801fde8:	3ff80000 	.word	0x3ff80000
 801fdec:	08022320 	.word	0x08022320
 801fdf0:	08022227 	.word	0x08022227
 801fdf4:	2501      	movs	r5, #1
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	9306      	str	r3, [sp, #24]
 801fdfa:	9508      	str	r5, [sp, #32]
 801fdfc:	f04f 33ff 	mov.w	r3, #4294967295
 801fe00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801fe04:	2200      	movs	r2, #0
 801fe06:	2312      	movs	r3, #18
 801fe08:	e7b0      	b.n	801fd6c <_dtoa_r+0x26c>
 801fe0a:	2301      	movs	r3, #1
 801fe0c:	9308      	str	r3, [sp, #32]
 801fe0e:	e7f5      	b.n	801fdfc <_dtoa_r+0x2fc>
 801fe10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801fe16:	e7b8      	b.n	801fd8a <_dtoa_r+0x28a>
 801fe18:	3101      	adds	r1, #1
 801fe1a:	6041      	str	r1, [r0, #4]
 801fe1c:	0052      	lsls	r2, r2, #1
 801fe1e:	e7b8      	b.n	801fd92 <_dtoa_r+0x292>
 801fe20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fe22:	9a01      	ldr	r2, [sp, #4]
 801fe24:	601a      	str	r2, [r3, #0]
 801fe26:	9b03      	ldr	r3, [sp, #12]
 801fe28:	2b0e      	cmp	r3, #14
 801fe2a:	f200 809d 	bhi.w	801ff68 <_dtoa_r+0x468>
 801fe2e:	2d00      	cmp	r5, #0
 801fe30:	f000 809a 	beq.w	801ff68 <_dtoa_r+0x468>
 801fe34:	9b00      	ldr	r3, [sp, #0]
 801fe36:	2b00      	cmp	r3, #0
 801fe38:	dd32      	ble.n	801fea0 <_dtoa_r+0x3a0>
 801fe3a:	4ab7      	ldr	r2, [pc, #732]	; (8020118 <_dtoa_r+0x618>)
 801fe3c:	f003 030f 	and.w	r3, r3, #15
 801fe40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801fe44:	e9d3 8900 	ldrd	r8, r9, [r3]
 801fe48:	9b00      	ldr	r3, [sp, #0]
 801fe4a:	05d8      	lsls	r0, r3, #23
 801fe4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801fe50:	d516      	bpl.n	801fe80 <_dtoa_r+0x380>
 801fe52:	4bb2      	ldr	r3, [pc, #712]	; (802011c <_dtoa_r+0x61c>)
 801fe54:	ec51 0b19 	vmov	r0, r1, d9
 801fe58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801fe5c:	f7e0 fd1e 	bl	800089c <__aeabi_ddiv>
 801fe60:	f007 070f 	and.w	r7, r7, #15
 801fe64:	4682      	mov	sl, r0
 801fe66:	468b      	mov	fp, r1
 801fe68:	2503      	movs	r5, #3
 801fe6a:	4eac      	ldr	r6, [pc, #688]	; (802011c <_dtoa_r+0x61c>)
 801fe6c:	b957      	cbnz	r7, 801fe84 <_dtoa_r+0x384>
 801fe6e:	4642      	mov	r2, r8
 801fe70:	464b      	mov	r3, r9
 801fe72:	4650      	mov	r0, sl
 801fe74:	4659      	mov	r1, fp
 801fe76:	f7e0 fd11 	bl	800089c <__aeabi_ddiv>
 801fe7a:	4682      	mov	sl, r0
 801fe7c:	468b      	mov	fp, r1
 801fe7e:	e028      	b.n	801fed2 <_dtoa_r+0x3d2>
 801fe80:	2502      	movs	r5, #2
 801fe82:	e7f2      	b.n	801fe6a <_dtoa_r+0x36a>
 801fe84:	07f9      	lsls	r1, r7, #31
 801fe86:	d508      	bpl.n	801fe9a <_dtoa_r+0x39a>
 801fe88:	4640      	mov	r0, r8
 801fe8a:	4649      	mov	r1, r9
 801fe8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fe90:	f7e0 fbda 	bl	8000648 <__aeabi_dmul>
 801fe94:	3501      	adds	r5, #1
 801fe96:	4680      	mov	r8, r0
 801fe98:	4689      	mov	r9, r1
 801fe9a:	107f      	asrs	r7, r7, #1
 801fe9c:	3608      	adds	r6, #8
 801fe9e:	e7e5      	b.n	801fe6c <_dtoa_r+0x36c>
 801fea0:	f000 809b 	beq.w	801ffda <_dtoa_r+0x4da>
 801fea4:	9b00      	ldr	r3, [sp, #0]
 801fea6:	4f9d      	ldr	r7, [pc, #628]	; (802011c <_dtoa_r+0x61c>)
 801fea8:	425e      	negs	r6, r3
 801feaa:	4b9b      	ldr	r3, [pc, #620]	; (8020118 <_dtoa_r+0x618>)
 801feac:	f006 020f 	and.w	r2, r6, #15
 801feb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801feb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feb8:	ec51 0b19 	vmov	r0, r1, d9
 801febc:	f7e0 fbc4 	bl	8000648 <__aeabi_dmul>
 801fec0:	1136      	asrs	r6, r6, #4
 801fec2:	4682      	mov	sl, r0
 801fec4:	468b      	mov	fp, r1
 801fec6:	2300      	movs	r3, #0
 801fec8:	2502      	movs	r5, #2
 801feca:	2e00      	cmp	r6, #0
 801fecc:	d17a      	bne.n	801ffc4 <_dtoa_r+0x4c4>
 801fece:	2b00      	cmp	r3, #0
 801fed0:	d1d3      	bne.n	801fe7a <_dtoa_r+0x37a>
 801fed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	f000 8082 	beq.w	801ffde <_dtoa_r+0x4de>
 801feda:	4b91      	ldr	r3, [pc, #580]	; (8020120 <_dtoa_r+0x620>)
 801fedc:	2200      	movs	r2, #0
 801fede:	4650      	mov	r0, sl
 801fee0:	4659      	mov	r1, fp
 801fee2:	f7e0 fe23 	bl	8000b2c <__aeabi_dcmplt>
 801fee6:	2800      	cmp	r0, #0
 801fee8:	d079      	beq.n	801ffde <_dtoa_r+0x4de>
 801feea:	9b03      	ldr	r3, [sp, #12]
 801feec:	2b00      	cmp	r3, #0
 801feee:	d076      	beq.n	801ffde <_dtoa_r+0x4de>
 801fef0:	9b02      	ldr	r3, [sp, #8]
 801fef2:	2b00      	cmp	r3, #0
 801fef4:	dd36      	ble.n	801ff64 <_dtoa_r+0x464>
 801fef6:	9b00      	ldr	r3, [sp, #0]
 801fef8:	4650      	mov	r0, sl
 801fefa:	4659      	mov	r1, fp
 801fefc:	1e5f      	subs	r7, r3, #1
 801fefe:	2200      	movs	r2, #0
 801ff00:	4b88      	ldr	r3, [pc, #544]	; (8020124 <_dtoa_r+0x624>)
 801ff02:	f7e0 fba1 	bl	8000648 <__aeabi_dmul>
 801ff06:	9e02      	ldr	r6, [sp, #8]
 801ff08:	4682      	mov	sl, r0
 801ff0a:	468b      	mov	fp, r1
 801ff0c:	3501      	adds	r5, #1
 801ff0e:	4628      	mov	r0, r5
 801ff10:	f7e0 fb30 	bl	8000574 <__aeabi_i2d>
 801ff14:	4652      	mov	r2, sl
 801ff16:	465b      	mov	r3, fp
 801ff18:	f7e0 fb96 	bl	8000648 <__aeabi_dmul>
 801ff1c:	4b82      	ldr	r3, [pc, #520]	; (8020128 <_dtoa_r+0x628>)
 801ff1e:	2200      	movs	r2, #0
 801ff20:	f7e0 f9dc 	bl	80002dc <__adddf3>
 801ff24:	46d0      	mov	r8, sl
 801ff26:	46d9      	mov	r9, fp
 801ff28:	4682      	mov	sl, r0
 801ff2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801ff2e:	2e00      	cmp	r6, #0
 801ff30:	d158      	bne.n	801ffe4 <_dtoa_r+0x4e4>
 801ff32:	4b7e      	ldr	r3, [pc, #504]	; (802012c <_dtoa_r+0x62c>)
 801ff34:	2200      	movs	r2, #0
 801ff36:	4640      	mov	r0, r8
 801ff38:	4649      	mov	r1, r9
 801ff3a:	f7e0 f9cd 	bl	80002d8 <__aeabi_dsub>
 801ff3e:	4652      	mov	r2, sl
 801ff40:	465b      	mov	r3, fp
 801ff42:	4680      	mov	r8, r0
 801ff44:	4689      	mov	r9, r1
 801ff46:	f7e0 fe0f 	bl	8000b68 <__aeabi_dcmpgt>
 801ff4a:	2800      	cmp	r0, #0
 801ff4c:	f040 8295 	bne.w	802047a <_dtoa_r+0x97a>
 801ff50:	4652      	mov	r2, sl
 801ff52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ff56:	4640      	mov	r0, r8
 801ff58:	4649      	mov	r1, r9
 801ff5a:	f7e0 fde7 	bl	8000b2c <__aeabi_dcmplt>
 801ff5e:	2800      	cmp	r0, #0
 801ff60:	f040 8289 	bne.w	8020476 <_dtoa_r+0x976>
 801ff64:	ec5b ab19 	vmov	sl, fp, d9
 801ff68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff6a:	2b00      	cmp	r3, #0
 801ff6c:	f2c0 8148 	blt.w	8020200 <_dtoa_r+0x700>
 801ff70:	9a00      	ldr	r2, [sp, #0]
 801ff72:	2a0e      	cmp	r2, #14
 801ff74:	f300 8144 	bgt.w	8020200 <_dtoa_r+0x700>
 801ff78:	4b67      	ldr	r3, [pc, #412]	; (8020118 <_dtoa_r+0x618>)
 801ff7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ff7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ff82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	f280 80d5 	bge.w	8020134 <_dtoa_r+0x634>
 801ff8a:	9b03      	ldr	r3, [sp, #12]
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	f300 80d1 	bgt.w	8020134 <_dtoa_r+0x634>
 801ff92:	f040 826f 	bne.w	8020474 <_dtoa_r+0x974>
 801ff96:	4b65      	ldr	r3, [pc, #404]	; (802012c <_dtoa_r+0x62c>)
 801ff98:	2200      	movs	r2, #0
 801ff9a:	4640      	mov	r0, r8
 801ff9c:	4649      	mov	r1, r9
 801ff9e:	f7e0 fb53 	bl	8000648 <__aeabi_dmul>
 801ffa2:	4652      	mov	r2, sl
 801ffa4:	465b      	mov	r3, fp
 801ffa6:	f7e0 fdd5 	bl	8000b54 <__aeabi_dcmpge>
 801ffaa:	9e03      	ldr	r6, [sp, #12]
 801ffac:	4637      	mov	r7, r6
 801ffae:	2800      	cmp	r0, #0
 801ffb0:	f040 8245 	bne.w	802043e <_dtoa_r+0x93e>
 801ffb4:	9d01      	ldr	r5, [sp, #4]
 801ffb6:	2331      	movs	r3, #49	; 0x31
 801ffb8:	f805 3b01 	strb.w	r3, [r5], #1
 801ffbc:	9b00      	ldr	r3, [sp, #0]
 801ffbe:	3301      	adds	r3, #1
 801ffc0:	9300      	str	r3, [sp, #0]
 801ffc2:	e240      	b.n	8020446 <_dtoa_r+0x946>
 801ffc4:	07f2      	lsls	r2, r6, #31
 801ffc6:	d505      	bpl.n	801ffd4 <_dtoa_r+0x4d4>
 801ffc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ffcc:	f7e0 fb3c 	bl	8000648 <__aeabi_dmul>
 801ffd0:	3501      	adds	r5, #1
 801ffd2:	2301      	movs	r3, #1
 801ffd4:	1076      	asrs	r6, r6, #1
 801ffd6:	3708      	adds	r7, #8
 801ffd8:	e777      	b.n	801feca <_dtoa_r+0x3ca>
 801ffda:	2502      	movs	r5, #2
 801ffdc:	e779      	b.n	801fed2 <_dtoa_r+0x3d2>
 801ffde:	9f00      	ldr	r7, [sp, #0]
 801ffe0:	9e03      	ldr	r6, [sp, #12]
 801ffe2:	e794      	b.n	801ff0e <_dtoa_r+0x40e>
 801ffe4:	9901      	ldr	r1, [sp, #4]
 801ffe6:	4b4c      	ldr	r3, [pc, #304]	; (8020118 <_dtoa_r+0x618>)
 801ffe8:	4431      	add	r1, r6
 801ffea:	910d      	str	r1, [sp, #52]	; 0x34
 801ffec:	9908      	ldr	r1, [sp, #32]
 801ffee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801fff2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801fff6:	2900      	cmp	r1, #0
 801fff8:	d043      	beq.n	8020082 <_dtoa_r+0x582>
 801fffa:	494d      	ldr	r1, [pc, #308]	; (8020130 <_dtoa_r+0x630>)
 801fffc:	2000      	movs	r0, #0
 801fffe:	f7e0 fc4d 	bl	800089c <__aeabi_ddiv>
 8020002:	4652      	mov	r2, sl
 8020004:	465b      	mov	r3, fp
 8020006:	f7e0 f967 	bl	80002d8 <__aeabi_dsub>
 802000a:	9d01      	ldr	r5, [sp, #4]
 802000c:	4682      	mov	sl, r0
 802000e:	468b      	mov	fp, r1
 8020010:	4649      	mov	r1, r9
 8020012:	4640      	mov	r0, r8
 8020014:	f7e0 fdc8 	bl	8000ba8 <__aeabi_d2iz>
 8020018:	4606      	mov	r6, r0
 802001a:	f7e0 faab 	bl	8000574 <__aeabi_i2d>
 802001e:	4602      	mov	r2, r0
 8020020:	460b      	mov	r3, r1
 8020022:	4640      	mov	r0, r8
 8020024:	4649      	mov	r1, r9
 8020026:	f7e0 f957 	bl	80002d8 <__aeabi_dsub>
 802002a:	3630      	adds	r6, #48	; 0x30
 802002c:	f805 6b01 	strb.w	r6, [r5], #1
 8020030:	4652      	mov	r2, sl
 8020032:	465b      	mov	r3, fp
 8020034:	4680      	mov	r8, r0
 8020036:	4689      	mov	r9, r1
 8020038:	f7e0 fd78 	bl	8000b2c <__aeabi_dcmplt>
 802003c:	2800      	cmp	r0, #0
 802003e:	d163      	bne.n	8020108 <_dtoa_r+0x608>
 8020040:	4642      	mov	r2, r8
 8020042:	464b      	mov	r3, r9
 8020044:	4936      	ldr	r1, [pc, #216]	; (8020120 <_dtoa_r+0x620>)
 8020046:	2000      	movs	r0, #0
 8020048:	f7e0 f946 	bl	80002d8 <__aeabi_dsub>
 802004c:	4652      	mov	r2, sl
 802004e:	465b      	mov	r3, fp
 8020050:	f7e0 fd6c 	bl	8000b2c <__aeabi_dcmplt>
 8020054:	2800      	cmp	r0, #0
 8020056:	f040 80b5 	bne.w	80201c4 <_dtoa_r+0x6c4>
 802005a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802005c:	429d      	cmp	r5, r3
 802005e:	d081      	beq.n	801ff64 <_dtoa_r+0x464>
 8020060:	4b30      	ldr	r3, [pc, #192]	; (8020124 <_dtoa_r+0x624>)
 8020062:	2200      	movs	r2, #0
 8020064:	4650      	mov	r0, sl
 8020066:	4659      	mov	r1, fp
 8020068:	f7e0 faee 	bl	8000648 <__aeabi_dmul>
 802006c:	4b2d      	ldr	r3, [pc, #180]	; (8020124 <_dtoa_r+0x624>)
 802006e:	4682      	mov	sl, r0
 8020070:	468b      	mov	fp, r1
 8020072:	4640      	mov	r0, r8
 8020074:	4649      	mov	r1, r9
 8020076:	2200      	movs	r2, #0
 8020078:	f7e0 fae6 	bl	8000648 <__aeabi_dmul>
 802007c:	4680      	mov	r8, r0
 802007e:	4689      	mov	r9, r1
 8020080:	e7c6      	b.n	8020010 <_dtoa_r+0x510>
 8020082:	4650      	mov	r0, sl
 8020084:	4659      	mov	r1, fp
 8020086:	f7e0 fadf 	bl	8000648 <__aeabi_dmul>
 802008a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802008c:	9d01      	ldr	r5, [sp, #4]
 802008e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020090:	4682      	mov	sl, r0
 8020092:	468b      	mov	fp, r1
 8020094:	4649      	mov	r1, r9
 8020096:	4640      	mov	r0, r8
 8020098:	f7e0 fd86 	bl	8000ba8 <__aeabi_d2iz>
 802009c:	4606      	mov	r6, r0
 802009e:	f7e0 fa69 	bl	8000574 <__aeabi_i2d>
 80200a2:	3630      	adds	r6, #48	; 0x30
 80200a4:	4602      	mov	r2, r0
 80200a6:	460b      	mov	r3, r1
 80200a8:	4640      	mov	r0, r8
 80200aa:	4649      	mov	r1, r9
 80200ac:	f7e0 f914 	bl	80002d8 <__aeabi_dsub>
 80200b0:	f805 6b01 	strb.w	r6, [r5], #1
 80200b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80200b6:	429d      	cmp	r5, r3
 80200b8:	4680      	mov	r8, r0
 80200ba:	4689      	mov	r9, r1
 80200bc:	f04f 0200 	mov.w	r2, #0
 80200c0:	d124      	bne.n	802010c <_dtoa_r+0x60c>
 80200c2:	4b1b      	ldr	r3, [pc, #108]	; (8020130 <_dtoa_r+0x630>)
 80200c4:	4650      	mov	r0, sl
 80200c6:	4659      	mov	r1, fp
 80200c8:	f7e0 f908 	bl	80002dc <__adddf3>
 80200cc:	4602      	mov	r2, r0
 80200ce:	460b      	mov	r3, r1
 80200d0:	4640      	mov	r0, r8
 80200d2:	4649      	mov	r1, r9
 80200d4:	f7e0 fd48 	bl	8000b68 <__aeabi_dcmpgt>
 80200d8:	2800      	cmp	r0, #0
 80200da:	d173      	bne.n	80201c4 <_dtoa_r+0x6c4>
 80200dc:	4652      	mov	r2, sl
 80200de:	465b      	mov	r3, fp
 80200e0:	4913      	ldr	r1, [pc, #76]	; (8020130 <_dtoa_r+0x630>)
 80200e2:	2000      	movs	r0, #0
 80200e4:	f7e0 f8f8 	bl	80002d8 <__aeabi_dsub>
 80200e8:	4602      	mov	r2, r0
 80200ea:	460b      	mov	r3, r1
 80200ec:	4640      	mov	r0, r8
 80200ee:	4649      	mov	r1, r9
 80200f0:	f7e0 fd1c 	bl	8000b2c <__aeabi_dcmplt>
 80200f4:	2800      	cmp	r0, #0
 80200f6:	f43f af35 	beq.w	801ff64 <_dtoa_r+0x464>
 80200fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80200fc:	1e6b      	subs	r3, r5, #1
 80200fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8020100:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020104:	2b30      	cmp	r3, #48	; 0x30
 8020106:	d0f8      	beq.n	80200fa <_dtoa_r+0x5fa>
 8020108:	9700      	str	r7, [sp, #0]
 802010a:	e049      	b.n	80201a0 <_dtoa_r+0x6a0>
 802010c:	4b05      	ldr	r3, [pc, #20]	; (8020124 <_dtoa_r+0x624>)
 802010e:	f7e0 fa9b 	bl	8000648 <__aeabi_dmul>
 8020112:	4680      	mov	r8, r0
 8020114:	4689      	mov	r9, r1
 8020116:	e7bd      	b.n	8020094 <_dtoa_r+0x594>
 8020118:	08022320 	.word	0x08022320
 802011c:	080222f8 	.word	0x080222f8
 8020120:	3ff00000 	.word	0x3ff00000
 8020124:	40240000 	.word	0x40240000
 8020128:	401c0000 	.word	0x401c0000
 802012c:	40140000 	.word	0x40140000
 8020130:	3fe00000 	.word	0x3fe00000
 8020134:	9d01      	ldr	r5, [sp, #4]
 8020136:	4656      	mov	r6, sl
 8020138:	465f      	mov	r7, fp
 802013a:	4642      	mov	r2, r8
 802013c:	464b      	mov	r3, r9
 802013e:	4630      	mov	r0, r6
 8020140:	4639      	mov	r1, r7
 8020142:	f7e0 fbab 	bl	800089c <__aeabi_ddiv>
 8020146:	f7e0 fd2f 	bl	8000ba8 <__aeabi_d2iz>
 802014a:	4682      	mov	sl, r0
 802014c:	f7e0 fa12 	bl	8000574 <__aeabi_i2d>
 8020150:	4642      	mov	r2, r8
 8020152:	464b      	mov	r3, r9
 8020154:	f7e0 fa78 	bl	8000648 <__aeabi_dmul>
 8020158:	4602      	mov	r2, r0
 802015a:	460b      	mov	r3, r1
 802015c:	4630      	mov	r0, r6
 802015e:	4639      	mov	r1, r7
 8020160:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8020164:	f7e0 f8b8 	bl	80002d8 <__aeabi_dsub>
 8020168:	f805 6b01 	strb.w	r6, [r5], #1
 802016c:	9e01      	ldr	r6, [sp, #4]
 802016e:	9f03      	ldr	r7, [sp, #12]
 8020170:	1bae      	subs	r6, r5, r6
 8020172:	42b7      	cmp	r7, r6
 8020174:	4602      	mov	r2, r0
 8020176:	460b      	mov	r3, r1
 8020178:	d135      	bne.n	80201e6 <_dtoa_r+0x6e6>
 802017a:	f7e0 f8af 	bl	80002dc <__adddf3>
 802017e:	4642      	mov	r2, r8
 8020180:	464b      	mov	r3, r9
 8020182:	4606      	mov	r6, r0
 8020184:	460f      	mov	r7, r1
 8020186:	f7e0 fcef 	bl	8000b68 <__aeabi_dcmpgt>
 802018a:	b9d0      	cbnz	r0, 80201c2 <_dtoa_r+0x6c2>
 802018c:	4642      	mov	r2, r8
 802018e:	464b      	mov	r3, r9
 8020190:	4630      	mov	r0, r6
 8020192:	4639      	mov	r1, r7
 8020194:	f7e0 fcc0 	bl	8000b18 <__aeabi_dcmpeq>
 8020198:	b110      	cbz	r0, 80201a0 <_dtoa_r+0x6a0>
 802019a:	f01a 0f01 	tst.w	sl, #1
 802019e:	d110      	bne.n	80201c2 <_dtoa_r+0x6c2>
 80201a0:	4620      	mov	r0, r4
 80201a2:	ee18 1a10 	vmov	r1, s16
 80201a6:	f000 fd05 	bl	8020bb4 <_Bfree>
 80201aa:	2300      	movs	r3, #0
 80201ac:	9800      	ldr	r0, [sp, #0]
 80201ae:	702b      	strb	r3, [r5, #0]
 80201b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201b2:	3001      	adds	r0, #1
 80201b4:	6018      	str	r0, [r3, #0]
 80201b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	f43f acf1 	beq.w	801fba0 <_dtoa_r+0xa0>
 80201be:	601d      	str	r5, [r3, #0]
 80201c0:	e4ee      	b.n	801fba0 <_dtoa_r+0xa0>
 80201c2:	9f00      	ldr	r7, [sp, #0]
 80201c4:	462b      	mov	r3, r5
 80201c6:	461d      	mov	r5, r3
 80201c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80201cc:	2a39      	cmp	r2, #57	; 0x39
 80201ce:	d106      	bne.n	80201de <_dtoa_r+0x6de>
 80201d0:	9a01      	ldr	r2, [sp, #4]
 80201d2:	429a      	cmp	r2, r3
 80201d4:	d1f7      	bne.n	80201c6 <_dtoa_r+0x6c6>
 80201d6:	9901      	ldr	r1, [sp, #4]
 80201d8:	2230      	movs	r2, #48	; 0x30
 80201da:	3701      	adds	r7, #1
 80201dc:	700a      	strb	r2, [r1, #0]
 80201de:	781a      	ldrb	r2, [r3, #0]
 80201e0:	3201      	adds	r2, #1
 80201e2:	701a      	strb	r2, [r3, #0]
 80201e4:	e790      	b.n	8020108 <_dtoa_r+0x608>
 80201e6:	4ba6      	ldr	r3, [pc, #664]	; (8020480 <_dtoa_r+0x980>)
 80201e8:	2200      	movs	r2, #0
 80201ea:	f7e0 fa2d 	bl	8000648 <__aeabi_dmul>
 80201ee:	2200      	movs	r2, #0
 80201f0:	2300      	movs	r3, #0
 80201f2:	4606      	mov	r6, r0
 80201f4:	460f      	mov	r7, r1
 80201f6:	f7e0 fc8f 	bl	8000b18 <__aeabi_dcmpeq>
 80201fa:	2800      	cmp	r0, #0
 80201fc:	d09d      	beq.n	802013a <_dtoa_r+0x63a>
 80201fe:	e7cf      	b.n	80201a0 <_dtoa_r+0x6a0>
 8020200:	9a08      	ldr	r2, [sp, #32]
 8020202:	2a00      	cmp	r2, #0
 8020204:	f000 80d7 	beq.w	80203b6 <_dtoa_r+0x8b6>
 8020208:	9a06      	ldr	r2, [sp, #24]
 802020a:	2a01      	cmp	r2, #1
 802020c:	f300 80ba 	bgt.w	8020384 <_dtoa_r+0x884>
 8020210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020212:	2a00      	cmp	r2, #0
 8020214:	f000 80b2 	beq.w	802037c <_dtoa_r+0x87c>
 8020218:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802021c:	9e07      	ldr	r6, [sp, #28]
 802021e:	9d04      	ldr	r5, [sp, #16]
 8020220:	9a04      	ldr	r2, [sp, #16]
 8020222:	441a      	add	r2, r3
 8020224:	9204      	str	r2, [sp, #16]
 8020226:	9a05      	ldr	r2, [sp, #20]
 8020228:	2101      	movs	r1, #1
 802022a:	441a      	add	r2, r3
 802022c:	4620      	mov	r0, r4
 802022e:	9205      	str	r2, [sp, #20]
 8020230:	f000 fd78 	bl	8020d24 <__i2b>
 8020234:	4607      	mov	r7, r0
 8020236:	2d00      	cmp	r5, #0
 8020238:	dd0c      	ble.n	8020254 <_dtoa_r+0x754>
 802023a:	9b05      	ldr	r3, [sp, #20]
 802023c:	2b00      	cmp	r3, #0
 802023e:	dd09      	ble.n	8020254 <_dtoa_r+0x754>
 8020240:	42ab      	cmp	r3, r5
 8020242:	9a04      	ldr	r2, [sp, #16]
 8020244:	bfa8      	it	ge
 8020246:	462b      	movge	r3, r5
 8020248:	1ad2      	subs	r2, r2, r3
 802024a:	9204      	str	r2, [sp, #16]
 802024c:	9a05      	ldr	r2, [sp, #20]
 802024e:	1aed      	subs	r5, r5, r3
 8020250:	1ad3      	subs	r3, r2, r3
 8020252:	9305      	str	r3, [sp, #20]
 8020254:	9b07      	ldr	r3, [sp, #28]
 8020256:	b31b      	cbz	r3, 80202a0 <_dtoa_r+0x7a0>
 8020258:	9b08      	ldr	r3, [sp, #32]
 802025a:	2b00      	cmp	r3, #0
 802025c:	f000 80af 	beq.w	80203be <_dtoa_r+0x8be>
 8020260:	2e00      	cmp	r6, #0
 8020262:	dd13      	ble.n	802028c <_dtoa_r+0x78c>
 8020264:	4639      	mov	r1, r7
 8020266:	4632      	mov	r2, r6
 8020268:	4620      	mov	r0, r4
 802026a:	f000 fe1b 	bl	8020ea4 <__pow5mult>
 802026e:	ee18 2a10 	vmov	r2, s16
 8020272:	4601      	mov	r1, r0
 8020274:	4607      	mov	r7, r0
 8020276:	4620      	mov	r0, r4
 8020278:	f000 fd6a 	bl	8020d50 <__multiply>
 802027c:	ee18 1a10 	vmov	r1, s16
 8020280:	4680      	mov	r8, r0
 8020282:	4620      	mov	r0, r4
 8020284:	f000 fc96 	bl	8020bb4 <_Bfree>
 8020288:	ee08 8a10 	vmov	s16, r8
 802028c:	9b07      	ldr	r3, [sp, #28]
 802028e:	1b9a      	subs	r2, r3, r6
 8020290:	d006      	beq.n	80202a0 <_dtoa_r+0x7a0>
 8020292:	ee18 1a10 	vmov	r1, s16
 8020296:	4620      	mov	r0, r4
 8020298:	f000 fe04 	bl	8020ea4 <__pow5mult>
 802029c:	ee08 0a10 	vmov	s16, r0
 80202a0:	2101      	movs	r1, #1
 80202a2:	4620      	mov	r0, r4
 80202a4:	f000 fd3e 	bl	8020d24 <__i2b>
 80202a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202aa:	2b00      	cmp	r3, #0
 80202ac:	4606      	mov	r6, r0
 80202ae:	f340 8088 	ble.w	80203c2 <_dtoa_r+0x8c2>
 80202b2:	461a      	mov	r2, r3
 80202b4:	4601      	mov	r1, r0
 80202b6:	4620      	mov	r0, r4
 80202b8:	f000 fdf4 	bl	8020ea4 <__pow5mult>
 80202bc:	9b06      	ldr	r3, [sp, #24]
 80202be:	2b01      	cmp	r3, #1
 80202c0:	4606      	mov	r6, r0
 80202c2:	f340 8081 	ble.w	80203c8 <_dtoa_r+0x8c8>
 80202c6:	f04f 0800 	mov.w	r8, #0
 80202ca:	6933      	ldr	r3, [r6, #16]
 80202cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80202d0:	6918      	ldr	r0, [r3, #16]
 80202d2:	f000 fcd7 	bl	8020c84 <__hi0bits>
 80202d6:	f1c0 0020 	rsb	r0, r0, #32
 80202da:	9b05      	ldr	r3, [sp, #20]
 80202dc:	4418      	add	r0, r3
 80202de:	f010 001f 	ands.w	r0, r0, #31
 80202e2:	f000 8092 	beq.w	802040a <_dtoa_r+0x90a>
 80202e6:	f1c0 0320 	rsb	r3, r0, #32
 80202ea:	2b04      	cmp	r3, #4
 80202ec:	f340 808a 	ble.w	8020404 <_dtoa_r+0x904>
 80202f0:	f1c0 001c 	rsb	r0, r0, #28
 80202f4:	9b04      	ldr	r3, [sp, #16]
 80202f6:	4403      	add	r3, r0
 80202f8:	9304      	str	r3, [sp, #16]
 80202fa:	9b05      	ldr	r3, [sp, #20]
 80202fc:	4403      	add	r3, r0
 80202fe:	4405      	add	r5, r0
 8020300:	9305      	str	r3, [sp, #20]
 8020302:	9b04      	ldr	r3, [sp, #16]
 8020304:	2b00      	cmp	r3, #0
 8020306:	dd07      	ble.n	8020318 <_dtoa_r+0x818>
 8020308:	ee18 1a10 	vmov	r1, s16
 802030c:	461a      	mov	r2, r3
 802030e:	4620      	mov	r0, r4
 8020310:	f000 fe22 	bl	8020f58 <__lshift>
 8020314:	ee08 0a10 	vmov	s16, r0
 8020318:	9b05      	ldr	r3, [sp, #20]
 802031a:	2b00      	cmp	r3, #0
 802031c:	dd05      	ble.n	802032a <_dtoa_r+0x82a>
 802031e:	4631      	mov	r1, r6
 8020320:	461a      	mov	r2, r3
 8020322:	4620      	mov	r0, r4
 8020324:	f000 fe18 	bl	8020f58 <__lshift>
 8020328:	4606      	mov	r6, r0
 802032a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802032c:	2b00      	cmp	r3, #0
 802032e:	d06e      	beq.n	802040e <_dtoa_r+0x90e>
 8020330:	ee18 0a10 	vmov	r0, s16
 8020334:	4631      	mov	r1, r6
 8020336:	f000 fe7f 	bl	8021038 <__mcmp>
 802033a:	2800      	cmp	r0, #0
 802033c:	da67      	bge.n	802040e <_dtoa_r+0x90e>
 802033e:	9b00      	ldr	r3, [sp, #0]
 8020340:	3b01      	subs	r3, #1
 8020342:	ee18 1a10 	vmov	r1, s16
 8020346:	9300      	str	r3, [sp, #0]
 8020348:	220a      	movs	r2, #10
 802034a:	2300      	movs	r3, #0
 802034c:	4620      	mov	r0, r4
 802034e:	f000 fc53 	bl	8020bf8 <__multadd>
 8020352:	9b08      	ldr	r3, [sp, #32]
 8020354:	ee08 0a10 	vmov	s16, r0
 8020358:	2b00      	cmp	r3, #0
 802035a:	f000 81b1 	beq.w	80206c0 <_dtoa_r+0xbc0>
 802035e:	2300      	movs	r3, #0
 8020360:	4639      	mov	r1, r7
 8020362:	220a      	movs	r2, #10
 8020364:	4620      	mov	r0, r4
 8020366:	f000 fc47 	bl	8020bf8 <__multadd>
 802036a:	9b02      	ldr	r3, [sp, #8]
 802036c:	2b00      	cmp	r3, #0
 802036e:	4607      	mov	r7, r0
 8020370:	f300 808e 	bgt.w	8020490 <_dtoa_r+0x990>
 8020374:	9b06      	ldr	r3, [sp, #24]
 8020376:	2b02      	cmp	r3, #2
 8020378:	dc51      	bgt.n	802041e <_dtoa_r+0x91e>
 802037a:	e089      	b.n	8020490 <_dtoa_r+0x990>
 802037c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802037e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020382:	e74b      	b.n	802021c <_dtoa_r+0x71c>
 8020384:	9b03      	ldr	r3, [sp, #12]
 8020386:	1e5e      	subs	r6, r3, #1
 8020388:	9b07      	ldr	r3, [sp, #28]
 802038a:	42b3      	cmp	r3, r6
 802038c:	bfbf      	itttt	lt
 802038e:	9b07      	ldrlt	r3, [sp, #28]
 8020390:	9607      	strlt	r6, [sp, #28]
 8020392:	1af2      	sublt	r2, r6, r3
 8020394:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8020396:	bfb6      	itet	lt
 8020398:	189b      	addlt	r3, r3, r2
 802039a:	1b9e      	subge	r6, r3, r6
 802039c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802039e:	9b03      	ldr	r3, [sp, #12]
 80203a0:	bfb8      	it	lt
 80203a2:	2600      	movlt	r6, #0
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	bfb7      	itett	lt
 80203a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80203ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80203b0:	1a9d      	sublt	r5, r3, r2
 80203b2:	2300      	movlt	r3, #0
 80203b4:	e734      	b.n	8020220 <_dtoa_r+0x720>
 80203b6:	9e07      	ldr	r6, [sp, #28]
 80203b8:	9d04      	ldr	r5, [sp, #16]
 80203ba:	9f08      	ldr	r7, [sp, #32]
 80203bc:	e73b      	b.n	8020236 <_dtoa_r+0x736>
 80203be:	9a07      	ldr	r2, [sp, #28]
 80203c0:	e767      	b.n	8020292 <_dtoa_r+0x792>
 80203c2:	9b06      	ldr	r3, [sp, #24]
 80203c4:	2b01      	cmp	r3, #1
 80203c6:	dc18      	bgt.n	80203fa <_dtoa_r+0x8fa>
 80203c8:	f1ba 0f00 	cmp.w	sl, #0
 80203cc:	d115      	bne.n	80203fa <_dtoa_r+0x8fa>
 80203ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80203d2:	b993      	cbnz	r3, 80203fa <_dtoa_r+0x8fa>
 80203d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80203d8:	0d1b      	lsrs	r3, r3, #20
 80203da:	051b      	lsls	r3, r3, #20
 80203dc:	b183      	cbz	r3, 8020400 <_dtoa_r+0x900>
 80203de:	9b04      	ldr	r3, [sp, #16]
 80203e0:	3301      	adds	r3, #1
 80203e2:	9304      	str	r3, [sp, #16]
 80203e4:	9b05      	ldr	r3, [sp, #20]
 80203e6:	3301      	adds	r3, #1
 80203e8:	9305      	str	r3, [sp, #20]
 80203ea:	f04f 0801 	mov.w	r8, #1
 80203ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	f47f af6a 	bne.w	80202ca <_dtoa_r+0x7ca>
 80203f6:	2001      	movs	r0, #1
 80203f8:	e76f      	b.n	80202da <_dtoa_r+0x7da>
 80203fa:	f04f 0800 	mov.w	r8, #0
 80203fe:	e7f6      	b.n	80203ee <_dtoa_r+0x8ee>
 8020400:	4698      	mov	r8, r3
 8020402:	e7f4      	b.n	80203ee <_dtoa_r+0x8ee>
 8020404:	f43f af7d 	beq.w	8020302 <_dtoa_r+0x802>
 8020408:	4618      	mov	r0, r3
 802040a:	301c      	adds	r0, #28
 802040c:	e772      	b.n	80202f4 <_dtoa_r+0x7f4>
 802040e:	9b03      	ldr	r3, [sp, #12]
 8020410:	2b00      	cmp	r3, #0
 8020412:	dc37      	bgt.n	8020484 <_dtoa_r+0x984>
 8020414:	9b06      	ldr	r3, [sp, #24]
 8020416:	2b02      	cmp	r3, #2
 8020418:	dd34      	ble.n	8020484 <_dtoa_r+0x984>
 802041a:	9b03      	ldr	r3, [sp, #12]
 802041c:	9302      	str	r3, [sp, #8]
 802041e:	9b02      	ldr	r3, [sp, #8]
 8020420:	b96b      	cbnz	r3, 802043e <_dtoa_r+0x93e>
 8020422:	4631      	mov	r1, r6
 8020424:	2205      	movs	r2, #5
 8020426:	4620      	mov	r0, r4
 8020428:	f000 fbe6 	bl	8020bf8 <__multadd>
 802042c:	4601      	mov	r1, r0
 802042e:	4606      	mov	r6, r0
 8020430:	ee18 0a10 	vmov	r0, s16
 8020434:	f000 fe00 	bl	8021038 <__mcmp>
 8020438:	2800      	cmp	r0, #0
 802043a:	f73f adbb 	bgt.w	801ffb4 <_dtoa_r+0x4b4>
 802043e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020440:	9d01      	ldr	r5, [sp, #4]
 8020442:	43db      	mvns	r3, r3
 8020444:	9300      	str	r3, [sp, #0]
 8020446:	f04f 0800 	mov.w	r8, #0
 802044a:	4631      	mov	r1, r6
 802044c:	4620      	mov	r0, r4
 802044e:	f000 fbb1 	bl	8020bb4 <_Bfree>
 8020452:	2f00      	cmp	r7, #0
 8020454:	f43f aea4 	beq.w	80201a0 <_dtoa_r+0x6a0>
 8020458:	f1b8 0f00 	cmp.w	r8, #0
 802045c:	d005      	beq.n	802046a <_dtoa_r+0x96a>
 802045e:	45b8      	cmp	r8, r7
 8020460:	d003      	beq.n	802046a <_dtoa_r+0x96a>
 8020462:	4641      	mov	r1, r8
 8020464:	4620      	mov	r0, r4
 8020466:	f000 fba5 	bl	8020bb4 <_Bfree>
 802046a:	4639      	mov	r1, r7
 802046c:	4620      	mov	r0, r4
 802046e:	f000 fba1 	bl	8020bb4 <_Bfree>
 8020472:	e695      	b.n	80201a0 <_dtoa_r+0x6a0>
 8020474:	2600      	movs	r6, #0
 8020476:	4637      	mov	r7, r6
 8020478:	e7e1      	b.n	802043e <_dtoa_r+0x93e>
 802047a:	9700      	str	r7, [sp, #0]
 802047c:	4637      	mov	r7, r6
 802047e:	e599      	b.n	801ffb4 <_dtoa_r+0x4b4>
 8020480:	40240000 	.word	0x40240000
 8020484:	9b08      	ldr	r3, [sp, #32]
 8020486:	2b00      	cmp	r3, #0
 8020488:	f000 80ca 	beq.w	8020620 <_dtoa_r+0xb20>
 802048c:	9b03      	ldr	r3, [sp, #12]
 802048e:	9302      	str	r3, [sp, #8]
 8020490:	2d00      	cmp	r5, #0
 8020492:	dd05      	ble.n	80204a0 <_dtoa_r+0x9a0>
 8020494:	4639      	mov	r1, r7
 8020496:	462a      	mov	r2, r5
 8020498:	4620      	mov	r0, r4
 802049a:	f000 fd5d 	bl	8020f58 <__lshift>
 802049e:	4607      	mov	r7, r0
 80204a0:	f1b8 0f00 	cmp.w	r8, #0
 80204a4:	d05b      	beq.n	802055e <_dtoa_r+0xa5e>
 80204a6:	6879      	ldr	r1, [r7, #4]
 80204a8:	4620      	mov	r0, r4
 80204aa:	f000 fb43 	bl	8020b34 <_Balloc>
 80204ae:	4605      	mov	r5, r0
 80204b0:	b928      	cbnz	r0, 80204be <_dtoa_r+0x9be>
 80204b2:	4b87      	ldr	r3, [pc, #540]	; (80206d0 <_dtoa_r+0xbd0>)
 80204b4:	4602      	mov	r2, r0
 80204b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80204ba:	f7ff bb3b 	b.w	801fb34 <_dtoa_r+0x34>
 80204be:	693a      	ldr	r2, [r7, #16]
 80204c0:	3202      	adds	r2, #2
 80204c2:	0092      	lsls	r2, r2, #2
 80204c4:	f107 010c 	add.w	r1, r7, #12
 80204c8:	300c      	adds	r0, #12
 80204ca:	f7fe fca7 	bl	801ee1c <memcpy>
 80204ce:	2201      	movs	r2, #1
 80204d0:	4629      	mov	r1, r5
 80204d2:	4620      	mov	r0, r4
 80204d4:	f000 fd40 	bl	8020f58 <__lshift>
 80204d8:	9b01      	ldr	r3, [sp, #4]
 80204da:	f103 0901 	add.w	r9, r3, #1
 80204de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80204e2:	4413      	add	r3, r2
 80204e4:	9305      	str	r3, [sp, #20]
 80204e6:	f00a 0301 	and.w	r3, sl, #1
 80204ea:	46b8      	mov	r8, r7
 80204ec:	9304      	str	r3, [sp, #16]
 80204ee:	4607      	mov	r7, r0
 80204f0:	4631      	mov	r1, r6
 80204f2:	ee18 0a10 	vmov	r0, s16
 80204f6:	f7ff fa75 	bl	801f9e4 <quorem>
 80204fa:	4641      	mov	r1, r8
 80204fc:	9002      	str	r0, [sp, #8]
 80204fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020502:	ee18 0a10 	vmov	r0, s16
 8020506:	f000 fd97 	bl	8021038 <__mcmp>
 802050a:	463a      	mov	r2, r7
 802050c:	9003      	str	r0, [sp, #12]
 802050e:	4631      	mov	r1, r6
 8020510:	4620      	mov	r0, r4
 8020512:	f000 fdad 	bl	8021070 <__mdiff>
 8020516:	68c2      	ldr	r2, [r0, #12]
 8020518:	f109 3bff 	add.w	fp, r9, #4294967295
 802051c:	4605      	mov	r5, r0
 802051e:	bb02      	cbnz	r2, 8020562 <_dtoa_r+0xa62>
 8020520:	4601      	mov	r1, r0
 8020522:	ee18 0a10 	vmov	r0, s16
 8020526:	f000 fd87 	bl	8021038 <__mcmp>
 802052a:	4602      	mov	r2, r0
 802052c:	4629      	mov	r1, r5
 802052e:	4620      	mov	r0, r4
 8020530:	9207      	str	r2, [sp, #28]
 8020532:	f000 fb3f 	bl	8020bb4 <_Bfree>
 8020536:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802053a:	ea43 0102 	orr.w	r1, r3, r2
 802053e:	9b04      	ldr	r3, [sp, #16]
 8020540:	430b      	orrs	r3, r1
 8020542:	464d      	mov	r5, r9
 8020544:	d10f      	bne.n	8020566 <_dtoa_r+0xa66>
 8020546:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802054a:	d02a      	beq.n	80205a2 <_dtoa_r+0xaa2>
 802054c:	9b03      	ldr	r3, [sp, #12]
 802054e:	2b00      	cmp	r3, #0
 8020550:	dd02      	ble.n	8020558 <_dtoa_r+0xa58>
 8020552:	9b02      	ldr	r3, [sp, #8]
 8020554:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020558:	f88b a000 	strb.w	sl, [fp]
 802055c:	e775      	b.n	802044a <_dtoa_r+0x94a>
 802055e:	4638      	mov	r0, r7
 8020560:	e7ba      	b.n	80204d8 <_dtoa_r+0x9d8>
 8020562:	2201      	movs	r2, #1
 8020564:	e7e2      	b.n	802052c <_dtoa_r+0xa2c>
 8020566:	9b03      	ldr	r3, [sp, #12]
 8020568:	2b00      	cmp	r3, #0
 802056a:	db04      	blt.n	8020576 <_dtoa_r+0xa76>
 802056c:	9906      	ldr	r1, [sp, #24]
 802056e:	430b      	orrs	r3, r1
 8020570:	9904      	ldr	r1, [sp, #16]
 8020572:	430b      	orrs	r3, r1
 8020574:	d122      	bne.n	80205bc <_dtoa_r+0xabc>
 8020576:	2a00      	cmp	r2, #0
 8020578:	ddee      	ble.n	8020558 <_dtoa_r+0xa58>
 802057a:	ee18 1a10 	vmov	r1, s16
 802057e:	2201      	movs	r2, #1
 8020580:	4620      	mov	r0, r4
 8020582:	f000 fce9 	bl	8020f58 <__lshift>
 8020586:	4631      	mov	r1, r6
 8020588:	ee08 0a10 	vmov	s16, r0
 802058c:	f000 fd54 	bl	8021038 <__mcmp>
 8020590:	2800      	cmp	r0, #0
 8020592:	dc03      	bgt.n	802059c <_dtoa_r+0xa9c>
 8020594:	d1e0      	bne.n	8020558 <_dtoa_r+0xa58>
 8020596:	f01a 0f01 	tst.w	sl, #1
 802059a:	d0dd      	beq.n	8020558 <_dtoa_r+0xa58>
 802059c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80205a0:	d1d7      	bne.n	8020552 <_dtoa_r+0xa52>
 80205a2:	2339      	movs	r3, #57	; 0x39
 80205a4:	f88b 3000 	strb.w	r3, [fp]
 80205a8:	462b      	mov	r3, r5
 80205aa:	461d      	mov	r5, r3
 80205ac:	3b01      	subs	r3, #1
 80205ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80205b2:	2a39      	cmp	r2, #57	; 0x39
 80205b4:	d071      	beq.n	802069a <_dtoa_r+0xb9a>
 80205b6:	3201      	adds	r2, #1
 80205b8:	701a      	strb	r2, [r3, #0]
 80205ba:	e746      	b.n	802044a <_dtoa_r+0x94a>
 80205bc:	2a00      	cmp	r2, #0
 80205be:	dd07      	ble.n	80205d0 <_dtoa_r+0xad0>
 80205c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80205c4:	d0ed      	beq.n	80205a2 <_dtoa_r+0xaa2>
 80205c6:	f10a 0301 	add.w	r3, sl, #1
 80205ca:	f88b 3000 	strb.w	r3, [fp]
 80205ce:	e73c      	b.n	802044a <_dtoa_r+0x94a>
 80205d0:	9b05      	ldr	r3, [sp, #20]
 80205d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80205d6:	4599      	cmp	r9, r3
 80205d8:	d047      	beq.n	802066a <_dtoa_r+0xb6a>
 80205da:	ee18 1a10 	vmov	r1, s16
 80205de:	2300      	movs	r3, #0
 80205e0:	220a      	movs	r2, #10
 80205e2:	4620      	mov	r0, r4
 80205e4:	f000 fb08 	bl	8020bf8 <__multadd>
 80205e8:	45b8      	cmp	r8, r7
 80205ea:	ee08 0a10 	vmov	s16, r0
 80205ee:	f04f 0300 	mov.w	r3, #0
 80205f2:	f04f 020a 	mov.w	r2, #10
 80205f6:	4641      	mov	r1, r8
 80205f8:	4620      	mov	r0, r4
 80205fa:	d106      	bne.n	802060a <_dtoa_r+0xb0a>
 80205fc:	f000 fafc 	bl	8020bf8 <__multadd>
 8020600:	4680      	mov	r8, r0
 8020602:	4607      	mov	r7, r0
 8020604:	f109 0901 	add.w	r9, r9, #1
 8020608:	e772      	b.n	80204f0 <_dtoa_r+0x9f0>
 802060a:	f000 faf5 	bl	8020bf8 <__multadd>
 802060e:	4639      	mov	r1, r7
 8020610:	4680      	mov	r8, r0
 8020612:	2300      	movs	r3, #0
 8020614:	220a      	movs	r2, #10
 8020616:	4620      	mov	r0, r4
 8020618:	f000 faee 	bl	8020bf8 <__multadd>
 802061c:	4607      	mov	r7, r0
 802061e:	e7f1      	b.n	8020604 <_dtoa_r+0xb04>
 8020620:	9b03      	ldr	r3, [sp, #12]
 8020622:	9302      	str	r3, [sp, #8]
 8020624:	9d01      	ldr	r5, [sp, #4]
 8020626:	ee18 0a10 	vmov	r0, s16
 802062a:	4631      	mov	r1, r6
 802062c:	f7ff f9da 	bl	801f9e4 <quorem>
 8020630:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020634:	9b01      	ldr	r3, [sp, #4]
 8020636:	f805 ab01 	strb.w	sl, [r5], #1
 802063a:	1aea      	subs	r2, r5, r3
 802063c:	9b02      	ldr	r3, [sp, #8]
 802063e:	4293      	cmp	r3, r2
 8020640:	dd09      	ble.n	8020656 <_dtoa_r+0xb56>
 8020642:	ee18 1a10 	vmov	r1, s16
 8020646:	2300      	movs	r3, #0
 8020648:	220a      	movs	r2, #10
 802064a:	4620      	mov	r0, r4
 802064c:	f000 fad4 	bl	8020bf8 <__multadd>
 8020650:	ee08 0a10 	vmov	s16, r0
 8020654:	e7e7      	b.n	8020626 <_dtoa_r+0xb26>
 8020656:	9b02      	ldr	r3, [sp, #8]
 8020658:	2b00      	cmp	r3, #0
 802065a:	bfc8      	it	gt
 802065c:	461d      	movgt	r5, r3
 802065e:	9b01      	ldr	r3, [sp, #4]
 8020660:	bfd8      	it	le
 8020662:	2501      	movle	r5, #1
 8020664:	441d      	add	r5, r3
 8020666:	f04f 0800 	mov.w	r8, #0
 802066a:	ee18 1a10 	vmov	r1, s16
 802066e:	2201      	movs	r2, #1
 8020670:	4620      	mov	r0, r4
 8020672:	f000 fc71 	bl	8020f58 <__lshift>
 8020676:	4631      	mov	r1, r6
 8020678:	ee08 0a10 	vmov	s16, r0
 802067c:	f000 fcdc 	bl	8021038 <__mcmp>
 8020680:	2800      	cmp	r0, #0
 8020682:	dc91      	bgt.n	80205a8 <_dtoa_r+0xaa8>
 8020684:	d102      	bne.n	802068c <_dtoa_r+0xb8c>
 8020686:	f01a 0f01 	tst.w	sl, #1
 802068a:	d18d      	bne.n	80205a8 <_dtoa_r+0xaa8>
 802068c:	462b      	mov	r3, r5
 802068e:	461d      	mov	r5, r3
 8020690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020694:	2a30      	cmp	r2, #48	; 0x30
 8020696:	d0fa      	beq.n	802068e <_dtoa_r+0xb8e>
 8020698:	e6d7      	b.n	802044a <_dtoa_r+0x94a>
 802069a:	9a01      	ldr	r2, [sp, #4]
 802069c:	429a      	cmp	r2, r3
 802069e:	d184      	bne.n	80205aa <_dtoa_r+0xaaa>
 80206a0:	9b00      	ldr	r3, [sp, #0]
 80206a2:	3301      	adds	r3, #1
 80206a4:	9300      	str	r3, [sp, #0]
 80206a6:	2331      	movs	r3, #49	; 0x31
 80206a8:	7013      	strb	r3, [r2, #0]
 80206aa:	e6ce      	b.n	802044a <_dtoa_r+0x94a>
 80206ac:	4b09      	ldr	r3, [pc, #36]	; (80206d4 <_dtoa_r+0xbd4>)
 80206ae:	f7ff ba95 	b.w	801fbdc <_dtoa_r+0xdc>
 80206b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	f47f aa6e 	bne.w	801fb96 <_dtoa_r+0x96>
 80206ba:	4b07      	ldr	r3, [pc, #28]	; (80206d8 <_dtoa_r+0xbd8>)
 80206bc:	f7ff ba8e 	b.w	801fbdc <_dtoa_r+0xdc>
 80206c0:	9b02      	ldr	r3, [sp, #8]
 80206c2:	2b00      	cmp	r3, #0
 80206c4:	dcae      	bgt.n	8020624 <_dtoa_r+0xb24>
 80206c6:	9b06      	ldr	r3, [sp, #24]
 80206c8:	2b02      	cmp	r3, #2
 80206ca:	f73f aea8 	bgt.w	802041e <_dtoa_r+0x91e>
 80206ce:	e7a9      	b.n	8020624 <_dtoa_r+0xb24>
 80206d0:	08022227 	.word	0x08022227
 80206d4:	08022184 	.word	0x08022184
 80206d8:	080221a8 	.word	0x080221a8

080206dc <__sflush_r>:
 80206dc:	898a      	ldrh	r2, [r1, #12]
 80206de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206e2:	4605      	mov	r5, r0
 80206e4:	0710      	lsls	r0, r2, #28
 80206e6:	460c      	mov	r4, r1
 80206e8:	d458      	bmi.n	802079c <__sflush_r+0xc0>
 80206ea:	684b      	ldr	r3, [r1, #4]
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	dc05      	bgt.n	80206fc <__sflush_r+0x20>
 80206f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	dc02      	bgt.n	80206fc <__sflush_r+0x20>
 80206f6:	2000      	movs	r0, #0
 80206f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80206fe:	2e00      	cmp	r6, #0
 8020700:	d0f9      	beq.n	80206f6 <__sflush_r+0x1a>
 8020702:	2300      	movs	r3, #0
 8020704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020708:	682f      	ldr	r7, [r5, #0]
 802070a:	602b      	str	r3, [r5, #0]
 802070c:	d032      	beq.n	8020774 <__sflush_r+0x98>
 802070e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020710:	89a3      	ldrh	r3, [r4, #12]
 8020712:	075a      	lsls	r2, r3, #29
 8020714:	d505      	bpl.n	8020722 <__sflush_r+0x46>
 8020716:	6863      	ldr	r3, [r4, #4]
 8020718:	1ac0      	subs	r0, r0, r3
 802071a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802071c:	b10b      	cbz	r3, 8020722 <__sflush_r+0x46>
 802071e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020720:	1ac0      	subs	r0, r0, r3
 8020722:	2300      	movs	r3, #0
 8020724:	4602      	mov	r2, r0
 8020726:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020728:	6a21      	ldr	r1, [r4, #32]
 802072a:	4628      	mov	r0, r5
 802072c:	47b0      	blx	r6
 802072e:	1c43      	adds	r3, r0, #1
 8020730:	89a3      	ldrh	r3, [r4, #12]
 8020732:	d106      	bne.n	8020742 <__sflush_r+0x66>
 8020734:	6829      	ldr	r1, [r5, #0]
 8020736:	291d      	cmp	r1, #29
 8020738:	d82c      	bhi.n	8020794 <__sflush_r+0xb8>
 802073a:	4a2a      	ldr	r2, [pc, #168]	; (80207e4 <__sflush_r+0x108>)
 802073c:	40ca      	lsrs	r2, r1
 802073e:	07d6      	lsls	r6, r2, #31
 8020740:	d528      	bpl.n	8020794 <__sflush_r+0xb8>
 8020742:	2200      	movs	r2, #0
 8020744:	6062      	str	r2, [r4, #4]
 8020746:	04d9      	lsls	r1, r3, #19
 8020748:	6922      	ldr	r2, [r4, #16]
 802074a:	6022      	str	r2, [r4, #0]
 802074c:	d504      	bpl.n	8020758 <__sflush_r+0x7c>
 802074e:	1c42      	adds	r2, r0, #1
 8020750:	d101      	bne.n	8020756 <__sflush_r+0x7a>
 8020752:	682b      	ldr	r3, [r5, #0]
 8020754:	b903      	cbnz	r3, 8020758 <__sflush_r+0x7c>
 8020756:	6560      	str	r0, [r4, #84]	; 0x54
 8020758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802075a:	602f      	str	r7, [r5, #0]
 802075c:	2900      	cmp	r1, #0
 802075e:	d0ca      	beq.n	80206f6 <__sflush_r+0x1a>
 8020760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020764:	4299      	cmp	r1, r3
 8020766:	d002      	beq.n	802076e <__sflush_r+0x92>
 8020768:	4628      	mov	r0, r5
 802076a:	f000 fd7d 	bl	8021268 <_free_r>
 802076e:	2000      	movs	r0, #0
 8020770:	6360      	str	r0, [r4, #52]	; 0x34
 8020772:	e7c1      	b.n	80206f8 <__sflush_r+0x1c>
 8020774:	6a21      	ldr	r1, [r4, #32]
 8020776:	2301      	movs	r3, #1
 8020778:	4628      	mov	r0, r5
 802077a:	47b0      	blx	r6
 802077c:	1c41      	adds	r1, r0, #1
 802077e:	d1c7      	bne.n	8020710 <__sflush_r+0x34>
 8020780:	682b      	ldr	r3, [r5, #0]
 8020782:	2b00      	cmp	r3, #0
 8020784:	d0c4      	beq.n	8020710 <__sflush_r+0x34>
 8020786:	2b1d      	cmp	r3, #29
 8020788:	d001      	beq.n	802078e <__sflush_r+0xb2>
 802078a:	2b16      	cmp	r3, #22
 802078c:	d101      	bne.n	8020792 <__sflush_r+0xb6>
 802078e:	602f      	str	r7, [r5, #0]
 8020790:	e7b1      	b.n	80206f6 <__sflush_r+0x1a>
 8020792:	89a3      	ldrh	r3, [r4, #12]
 8020794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020798:	81a3      	strh	r3, [r4, #12]
 802079a:	e7ad      	b.n	80206f8 <__sflush_r+0x1c>
 802079c:	690f      	ldr	r7, [r1, #16]
 802079e:	2f00      	cmp	r7, #0
 80207a0:	d0a9      	beq.n	80206f6 <__sflush_r+0x1a>
 80207a2:	0793      	lsls	r3, r2, #30
 80207a4:	680e      	ldr	r6, [r1, #0]
 80207a6:	bf08      	it	eq
 80207a8:	694b      	ldreq	r3, [r1, #20]
 80207aa:	600f      	str	r7, [r1, #0]
 80207ac:	bf18      	it	ne
 80207ae:	2300      	movne	r3, #0
 80207b0:	eba6 0807 	sub.w	r8, r6, r7
 80207b4:	608b      	str	r3, [r1, #8]
 80207b6:	f1b8 0f00 	cmp.w	r8, #0
 80207ba:	dd9c      	ble.n	80206f6 <__sflush_r+0x1a>
 80207bc:	6a21      	ldr	r1, [r4, #32]
 80207be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80207c0:	4643      	mov	r3, r8
 80207c2:	463a      	mov	r2, r7
 80207c4:	4628      	mov	r0, r5
 80207c6:	47b0      	blx	r6
 80207c8:	2800      	cmp	r0, #0
 80207ca:	dc06      	bgt.n	80207da <__sflush_r+0xfe>
 80207cc:	89a3      	ldrh	r3, [r4, #12]
 80207ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80207d2:	81a3      	strh	r3, [r4, #12]
 80207d4:	f04f 30ff 	mov.w	r0, #4294967295
 80207d8:	e78e      	b.n	80206f8 <__sflush_r+0x1c>
 80207da:	4407      	add	r7, r0
 80207dc:	eba8 0800 	sub.w	r8, r8, r0
 80207e0:	e7e9      	b.n	80207b6 <__sflush_r+0xda>
 80207e2:	bf00      	nop
 80207e4:	20400001 	.word	0x20400001

080207e8 <_fflush_r>:
 80207e8:	b538      	push	{r3, r4, r5, lr}
 80207ea:	690b      	ldr	r3, [r1, #16]
 80207ec:	4605      	mov	r5, r0
 80207ee:	460c      	mov	r4, r1
 80207f0:	b913      	cbnz	r3, 80207f8 <_fflush_r+0x10>
 80207f2:	2500      	movs	r5, #0
 80207f4:	4628      	mov	r0, r5
 80207f6:	bd38      	pop	{r3, r4, r5, pc}
 80207f8:	b118      	cbz	r0, 8020802 <_fflush_r+0x1a>
 80207fa:	6983      	ldr	r3, [r0, #24]
 80207fc:	b90b      	cbnz	r3, 8020802 <_fflush_r+0x1a>
 80207fe:	f000 f887 	bl	8020910 <__sinit>
 8020802:	4b14      	ldr	r3, [pc, #80]	; (8020854 <_fflush_r+0x6c>)
 8020804:	429c      	cmp	r4, r3
 8020806:	d11b      	bne.n	8020840 <_fflush_r+0x58>
 8020808:	686c      	ldr	r4, [r5, #4]
 802080a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802080e:	2b00      	cmp	r3, #0
 8020810:	d0ef      	beq.n	80207f2 <_fflush_r+0xa>
 8020812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020814:	07d0      	lsls	r0, r2, #31
 8020816:	d404      	bmi.n	8020822 <_fflush_r+0x3a>
 8020818:	0599      	lsls	r1, r3, #22
 802081a:	d402      	bmi.n	8020822 <_fflush_r+0x3a>
 802081c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802081e:	f000 f91a 	bl	8020a56 <__retarget_lock_acquire_recursive>
 8020822:	4628      	mov	r0, r5
 8020824:	4621      	mov	r1, r4
 8020826:	f7ff ff59 	bl	80206dc <__sflush_r>
 802082a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802082c:	07da      	lsls	r2, r3, #31
 802082e:	4605      	mov	r5, r0
 8020830:	d4e0      	bmi.n	80207f4 <_fflush_r+0xc>
 8020832:	89a3      	ldrh	r3, [r4, #12]
 8020834:	059b      	lsls	r3, r3, #22
 8020836:	d4dd      	bmi.n	80207f4 <_fflush_r+0xc>
 8020838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802083a:	f000 f90d 	bl	8020a58 <__retarget_lock_release_recursive>
 802083e:	e7d9      	b.n	80207f4 <_fflush_r+0xc>
 8020840:	4b05      	ldr	r3, [pc, #20]	; (8020858 <_fflush_r+0x70>)
 8020842:	429c      	cmp	r4, r3
 8020844:	d101      	bne.n	802084a <_fflush_r+0x62>
 8020846:	68ac      	ldr	r4, [r5, #8]
 8020848:	e7df      	b.n	802080a <_fflush_r+0x22>
 802084a:	4b04      	ldr	r3, [pc, #16]	; (802085c <_fflush_r+0x74>)
 802084c:	429c      	cmp	r4, r3
 802084e:	bf08      	it	eq
 8020850:	68ec      	ldreq	r4, [r5, #12]
 8020852:	e7da      	b.n	802080a <_fflush_r+0x22>
 8020854:	08022258 	.word	0x08022258
 8020858:	08022278 	.word	0x08022278
 802085c:	08022238 	.word	0x08022238

08020860 <std>:
 8020860:	2300      	movs	r3, #0
 8020862:	b510      	push	{r4, lr}
 8020864:	4604      	mov	r4, r0
 8020866:	e9c0 3300 	strd	r3, r3, [r0]
 802086a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802086e:	6083      	str	r3, [r0, #8]
 8020870:	8181      	strh	r1, [r0, #12]
 8020872:	6643      	str	r3, [r0, #100]	; 0x64
 8020874:	81c2      	strh	r2, [r0, #14]
 8020876:	6183      	str	r3, [r0, #24]
 8020878:	4619      	mov	r1, r3
 802087a:	2208      	movs	r2, #8
 802087c:	305c      	adds	r0, #92	; 0x5c
 802087e:	f7fe fadb 	bl	801ee38 <memset>
 8020882:	4b05      	ldr	r3, [pc, #20]	; (8020898 <std+0x38>)
 8020884:	6263      	str	r3, [r4, #36]	; 0x24
 8020886:	4b05      	ldr	r3, [pc, #20]	; (802089c <std+0x3c>)
 8020888:	62a3      	str	r3, [r4, #40]	; 0x28
 802088a:	4b05      	ldr	r3, [pc, #20]	; (80208a0 <std+0x40>)
 802088c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802088e:	4b05      	ldr	r3, [pc, #20]	; (80208a4 <std+0x44>)
 8020890:	6224      	str	r4, [r4, #32]
 8020892:	6323      	str	r3, [r4, #48]	; 0x30
 8020894:	bd10      	pop	{r4, pc}
 8020896:	bf00      	nop
 8020898:	0802178d 	.word	0x0802178d
 802089c:	080217af 	.word	0x080217af
 80208a0:	080217e7 	.word	0x080217e7
 80208a4:	0802180b 	.word	0x0802180b

080208a8 <_cleanup_r>:
 80208a8:	4901      	ldr	r1, [pc, #4]	; (80208b0 <_cleanup_r+0x8>)
 80208aa:	f000 b8af 	b.w	8020a0c <_fwalk_reent>
 80208ae:	bf00      	nop
 80208b0:	080207e9 	.word	0x080207e9

080208b4 <__sfmoreglue>:
 80208b4:	b570      	push	{r4, r5, r6, lr}
 80208b6:	2268      	movs	r2, #104	; 0x68
 80208b8:	1e4d      	subs	r5, r1, #1
 80208ba:	4355      	muls	r5, r2
 80208bc:	460e      	mov	r6, r1
 80208be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80208c2:	f000 fd3d 	bl	8021340 <_malloc_r>
 80208c6:	4604      	mov	r4, r0
 80208c8:	b140      	cbz	r0, 80208dc <__sfmoreglue+0x28>
 80208ca:	2100      	movs	r1, #0
 80208cc:	e9c0 1600 	strd	r1, r6, [r0]
 80208d0:	300c      	adds	r0, #12
 80208d2:	60a0      	str	r0, [r4, #8]
 80208d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80208d8:	f7fe faae 	bl	801ee38 <memset>
 80208dc:	4620      	mov	r0, r4
 80208de:	bd70      	pop	{r4, r5, r6, pc}

080208e0 <__sfp_lock_acquire>:
 80208e0:	4801      	ldr	r0, [pc, #4]	; (80208e8 <__sfp_lock_acquire+0x8>)
 80208e2:	f000 b8b8 	b.w	8020a56 <__retarget_lock_acquire_recursive>
 80208e6:	bf00      	nop
 80208e8:	2000e0e1 	.word	0x2000e0e1

080208ec <__sfp_lock_release>:
 80208ec:	4801      	ldr	r0, [pc, #4]	; (80208f4 <__sfp_lock_release+0x8>)
 80208ee:	f000 b8b3 	b.w	8020a58 <__retarget_lock_release_recursive>
 80208f2:	bf00      	nop
 80208f4:	2000e0e1 	.word	0x2000e0e1

080208f8 <__sinit_lock_acquire>:
 80208f8:	4801      	ldr	r0, [pc, #4]	; (8020900 <__sinit_lock_acquire+0x8>)
 80208fa:	f000 b8ac 	b.w	8020a56 <__retarget_lock_acquire_recursive>
 80208fe:	bf00      	nop
 8020900:	2000e0e2 	.word	0x2000e0e2

08020904 <__sinit_lock_release>:
 8020904:	4801      	ldr	r0, [pc, #4]	; (802090c <__sinit_lock_release+0x8>)
 8020906:	f000 b8a7 	b.w	8020a58 <__retarget_lock_release_recursive>
 802090a:	bf00      	nop
 802090c:	2000e0e2 	.word	0x2000e0e2

08020910 <__sinit>:
 8020910:	b510      	push	{r4, lr}
 8020912:	4604      	mov	r4, r0
 8020914:	f7ff fff0 	bl	80208f8 <__sinit_lock_acquire>
 8020918:	69a3      	ldr	r3, [r4, #24]
 802091a:	b11b      	cbz	r3, 8020924 <__sinit+0x14>
 802091c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020920:	f7ff bff0 	b.w	8020904 <__sinit_lock_release>
 8020924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020928:	6523      	str	r3, [r4, #80]	; 0x50
 802092a:	4b13      	ldr	r3, [pc, #76]	; (8020978 <__sinit+0x68>)
 802092c:	4a13      	ldr	r2, [pc, #76]	; (802097c <__sinit+0x6c>)
 802092e:	681b      	ldr	r3, [r3, #0]
 8020930:	62a2      	str	r2, [r4, #40]	; 0x28
 8020932:	42a3      	cmp	r3, r4
 8020934:	bf04      	itt	eq
 8020936:	2301      	moveq	r3, #1
 8020938:	61a3      	streq	r3, [r4, #24]
 802093a:	4620      	mov	r0, r4
 802093c:	f000 f820 	bl	8020980 <__sfp>
 8020940:	6060      	str	r0, [r4, #4]
 8020942:	4620      	mov	r0, r4
 8020944:	f000 f81c 	bl	8020980 <__sfp>
 8020948:	60a0      	str	r0, [r4, #8]
 802094a:	4620      	mov	r0, r4
 802094c:	f000 f818 	bl	8020980 <__sfp>
 8020950:	2200      	movs	r2, #0
 8020952:	60e0      	str	r0, [r4, #12]
 8020954:	2104      	movs	r1, #4
 8020956:	6860      	ldr	r0, [r4, #4]
 8020958:	f7ff ff82 	bl	8020860 <std>
 802095c:	68a0      	ldr	r0, [r4, #8]
 802095e:	2201      	movs	r2, #1
 8020960:	2109      	movs	r1, #9
 8020962:	f7ff ff7d 	bl	8020860 <std>
 8020966:	68e0      	ldr	r0, [r4, #12]
 8020968:	2202      	movs	r2, #2
 802096a:	2112      	movs	r1, #18
 802096c:	f7ff ff78 	bl	8020860 <std>
 8020970:	2301      	movs	r3, #1
 8020972:	61a3      	str	r3, [r4, #24]
 8020974:	e7d2      	b.n	802091c <__sinit+0xc>
 8020976:	bf00      	nop
 8020978:	08022170 	.word	0x08022170
 802097c:	080208a9 	.word	0x080208a9

08020980 <__sfp>:
 8020980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020982:	4607      	mov	r7, r0
 8020984:	f7ff ffac 	bl	80208e0 <__sfp_lock_acquire>
 8020988:	4b1e      	ldr	r3, [pc, #120]	; (8020a04 <__sfp+0x84>)
 802098a:	681e      	ldr	r6, [r3, #0]
 802098c:	69b3      	ldr	r3, [r6, #24]
 802098e:	b913      	cbnz	r3, 8020996 <__sfp+0x16>
 8020990:	4630      	mov	r0, r6
 8020992:	f7ff ffbd 	bl	8020910 <__sinit>
 8020996:	3648      	adds	r6, #72	; 0x48
 8020998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802099c:	3b01      	subs	r3, #1
 802099e:	d503      	bpl.n	80209a8 <__sfp+0x28>
 80209a0:	6833      	ldr	r3, [r6, #0]
 80209a2:	b30b      	cbz	r3, 80209e8 <__sfp+0x68>
 80209a4:	6836      	ldr	r6, [r6, #0]
 80209a6:	e7f7      	b.n	8020998 <__sfp+0x18>
 80209a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80209ac:	b9d5      	cbnz	r5, 80209e4 <__sfp+0x64>
 80209ae:	4b16      	ldr	r3, [pc, #88]	; (8020a08 <__sfp+0x88>)
 80209b0:	60e3      	str	r3, [r4, #12]
 80209b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80209b6:	6665      	str	r5, [r4, #100]	; 0x64
 80209b8:	f000 f84c 	bl	8020a54 <__retarget_lock_init_recursive>
 80209bc:	f7ff ff96 	bl	80208ec <__sfp_lock_release>
 80209c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80209c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80209c8:	6025      	str	r5, [r4, #0]
 80209ca:	61a5      	str	r5, [r4, #24]
 80209cc:	2208      	movs	r2, #8
 80209ce:	4629      	mov	r1, r5
 80209d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80209d4:	f7fe fa30 	bl	801ee38 <memset>
 80209d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80209dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80209e0:	4620      	mov	r0, r4
 80209e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80209e4:	3468      	adds	r4, #104	; 0x68
 80209e6:	e7d9      	b.n	802099c <__sfp+0x1c>
 80209e8:	2104      	movs	r1, #4
 80209ea:	4638      	mov	r0, r7
 80209ec:	f7ff ff62 	bl	80208b4 <__sfmoreglue>
 80209f0:	4604      	mov	r4, r0
 80209f2:	6030      	str	r0, [r6, #0]
 80209f4:	2800      	cmp	r0, #0
 80209f6:	d1d5      	bne.n	80209a4 <__sfp+0x24>
 80209f8:	f7ff ff78 	bl	80208ec <__sfp_lock_release>
 80209fc:	230c      	movs	r3, #12
 80209fe:	603b      	str	r3, [r7, #0]
 8020a00:	e7ee      	b.n	80209e0 <__sfp+0x60>
 8020a02:	bf00      	nop
 8020a04:	08022170 	.word	0x08022170
 8020a08:	ffff0001 	.word	0xffff0001

08020a0c <_fwalk_reent>:
 8020a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020a10:	4606      	mov	r6, r0
 8020a12:	4688      	mov	r8, r1
 8020a14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020a18:	2700      	movs	r7, #0
 8020a1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020a1e:	f1b9 0901 	subs.w	r9, r9, #1
 8020a22:	d505      	bpl.n	8020a30 <_fwalk_reent+0x24>
 8020a24:	6824      	ldr	r4, [r4, #0]
 8020a26:	2c00      	cmp	r4, #0
 8020a28:	d1f7      	bne.n	8020a1a <_fwalk_reent+0xe>
 8020a2a:	4638      	mov	r0, r7
 8020a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a30:	89ab      	ldrh	r3, [r5, #12]
 8020a32:	2b01      	cmp	r3, #1
 8020a34:	d907      	bls.n	8020a46 <_fwalk_reent+0x3a>
 8020a36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020a3a:	3301      	adds	r3, #1
 8020a3c:	d003      	beq.n	8020a46 <_fwalk_reent+0x3a>
 8020a3e:	4629      	mov	r1, r5
 8020a40:	4630      	mov	r0, r6
 8020a42:	47c0      	blx	r8
 8020a44:	4307      	orrs	r7, r0
 8020a46:	3568      	adds	r5, #104	; 0x68
 8020a48:	e7e9      	b.n	8020a1e <_fwalk_reent+0x12>
	...

08020a4c <_localeconv_r>:
 8020a4c:	4800      	ldr	r0, [pc, #0]	; (8020a50 <_localeconv_r+0x4>)
 8020a4e:	4770      	bx	lr
 8020a50:	20000180 	.word	0x20000180

08020a54 <__retarget_lock_init_recursive>:
 8020a54:	4770      	bx	lr

08020a56 <__retarget_lock_acquire_recursive>:
 8020a56:	4770      	bx	lr

08020a58 <__retarget_lock_release_recursive>:
 8020a58:	4770      	bx	lr

08020a5a <__swhatbuf_r>:
 8020a5a:	b570      	push	{r4, r5, r6, lr}
 8020a5c:	460e      	mov	r6, r1
 8020a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a62:	2900      	cmp	r1, #0
 8020a64:	b096      	sub	sp, #88	; 0x58
 8020a66:	4614      	mov	r4, r2
 8020a68:	461d      	mov	r5, r3
 8020a6a:	da08      	bge.n	8020a7e <__swhatbuf_r+0x24>
 8020a6c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020a70:	2200      	movs	r2, #0
 8020a72:	602a      	str	r2, [r5, #0]
 8020a74:	061a      	lsls	r2, r3, #24
 8020a76:	d410      	bmi.n	8020a9a <__swhatbuf_r+0x40>
 8020a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020a7c:	e00e      	b.n	8020a9c <__swhatbuf_r+0x42>
 8020a7e:	466a      	mov	r2, sp
 8020a80:	f000 ff1a 	bl	80218b8 <_fstat_r>
 8020a84:	2800      	cmp	r0, #0
 8020a86:	dbf1      	blt.n	8020a6c <__swhatbuf_r+0x12>
 8020a88:	9a01      	ldr	r2, [sp, #4]
 8020a8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020a8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020a92:	425a      	negs	r2, r3
 8020a94:	415a      	adcs	r2, r3
 8020a96:	602a      	str	r2, [r5, #0]
 8020a98:	e7ee      	b.n	8020a78 <__swhatbuf_r+0x1e>
 8020a9a:	2340      	movs	r3, #64	; 0x40
 8020a9c:	2000      	movs	r0, #0
 8020a9e:	6023      	str	r3, [r4, #0]
 8020aa0:	b016      	add	sp, #88	; 0x58
 8020aa2:	bd70      	pop	{r4, r5, r6, pc}

08020aa4 <__smakebuf_r>:
 8020aa4:	898b      	ldrh	r3, [r1, #12]
 8020aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020aa8:	079d      	lsls	r5, r3, #30
 8020aaa:	4606      	mov	r6, r0
 8020aac:	460c      	mov	r4, r1
 8020aae:	d507      	bpl.n	8020ac0 <__smakebuf_r+0x1c>
 8020ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020ab4:	6023      	str	r3, [r4, #0]
 8020ab6:	6123      	str	r3, [r4, #16]
 8020ab8:	2301      	movs	r3, #1
 8020aba:	6163      	str	r3, [r4, #20]
 8020abc:	b002      	add	sp, #8
 8020abe:	bd70      	pop	{r4, r5, r6, pc}
 8020ac0:	ab01      	add	r3, sp, #4
 8020ac2:	466a      	mov	r2, sp
 8020ac4:	f7ff ffc9 	bl	8020a5a <__swhatbuf_r>
 8020ac8:	9900      	ldr	r1, [sp, #0]
 8020aca:	4605      	mov	r5, r0
 8020acc:	4630      	mov	r0, r6
 8020ace:	f000 fc37 	bl	8021340 <_malloc_r>
 8020ad2:	b948      	cbnz	r0, 8020ae8 <__smakebuf_r+0x44>
 8020ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ad8:	059a      	lsls	r2, r3, #22
 8020ada:	d4ef      	bmi.n	8020abc <__smakebuf_r+0x18>
 8020adc:	f023 0303 	bic.w	r3, r3, #3
 8020ae0:	f043 0302 	orr.w	r3, r3, #2
 8020ae4:	81a3      	strh	r3, [r4, #12]
 8020ae6:	e7e3      	b.n	8020ab0 <__smakebuf_r+0xc>
 8020ae8:	4b0d      	ldr	r3, [pc, #52]	; (8020b20 <__smakebuf_r+0x7c>)
 8020aea:	62b3      	str	r3, [r6, #40]	; 0x28
 8020aec:	89a3      	ldrh	r3, [r4, #12]
 8020aee:	6020      	str	r0, [r4, #0]
 8020af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020af4:	81a3      	strh	r3, [r4, #12]
 8020af6:	9b00      	ldr	r3, [sp, #0]
 8020af8:	6163      	str	r3, [r4, #20]
 8020afa:	9b01      	ldr	r3, [sp, #4]
 8020afc:	6120      	str	r0, [r4, #16]
 8020afe:	b15b      	cbz	r3, 8020b18 <__smakebuf_r+0x74>
 8020b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020b04:	4630      	mov	r0, r6
 8020b06:	f000 fee9 	bl	80218dc <_isatty_r>
 8020b0a:	b128      	cbz	r0, 8020b18 <__smakebuf_r+0x74>
 8020b0c:	89a3      	ldrh	r3, [r4, #12]
 8020b0e:	f023 0303 	bic.w	r3, r3, #3
 8020b12:	f043 0301 	orr.w	r3, r3, #1
 8020b16:	81a3      	strh	r3, [r4, #12]
 8020b18:	89a0      	ldrh	r0, [r4, #12]
 8020b1a:	4305      	orrs	r5, r0
 8020b1c:	81a5      	strh	r5, [r4, #12]
 8020b1e:	e7cd      	b.n	8020abc <__smakebuf_r+0x18>
 8020b20:	080208a9 	.word	0x080208a9

08020b24 <malloc>:
 8020b24:	4b02      	ldr	r3, [pc, #8]	; (8020b30 <malloc+0xc>)
 8020b26:	4601      	mov	r1, r0
 8020b28:	6818      	ldr	r0, [r3, #0]
 8020b2a:	f000 bc09 	b.w	8021340 <_malloc_r>
 8020b2e:	bf00      	nop
 8020b30:	2000002c 	.word	0x2000002c

08020b34 <_Balloc>:
 8020b34:	b570      	push	{r4, r5, r6, lr}
 8020b36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020b38:	4604      	mov	r4, r0
 8020b3a:	460d      	mov	r5, r1
 8020b3c:	b976      	cbnz	r6, 8020b5c <_Balloc+0x28>
 8020b3e:	2010      	movs	r0, #16
 8020b40:	f7ff fff0 	bl	8020b24 <malloc>
 8020b44:	4602      	mov	r2, r0
 8020b46:	6260      	str	r0, [r4, #36]	; 0x24
 8020b48:	b920      	cbnz	r0, 8020b54 <_Balloc+0x20>
 8020b4a:	4b18      	ldr	r3, [pc, #96]	; (8020bac <_Balloc+0x78>)
 8020b4c:	4818      	ldr	r0, [pc, #96]	; (8020bb0 <_Balloc+0x7c>)
 8020b4e:	2166      	movs	r1, #102	; 0x66
 8020b50:	f000 fe72 	bl	8021838 <__assert_func>
 8020b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020b58:	6006      	str	r6, [r0, #0]
 8020b5a:	60c6      	str	r6, [r0, #12]
 8020b5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020b5e:	68f3      	ldr	r3, [r6, #12]
 8020b60:	b183      	cbz	r3, 8020b84 <_Balloc+0x50>
 8020b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b64:	68db      	ldr	r3, [r3, #12]
 8020b66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020b6a:	b9b8      	cbnz	r0, 8020b9c <_Balloc+0x68>
 8020b6c:	2101      	movs	r1, #1
 8020b6e:	fa01 f605 	lsl.w	r6, r1, r5
 8020b72:	1d72      	adds	r2, r6, #5
 8020b74:	0092      	lsls	r2, r2, #2
 8020b76:	4620      	mov	r0, r4
 8020b78:	f000 fb60 	bl	802123c <_calloc_r>
 8020b7c:	b160      	cbz	r0, 8020b98 <_Balloc+0x64>
 8020b7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020b82:	e00e      	b.n	8020ba2 <_Balloc+0x6e>
 8020b84:	2221      	movs	r2, #33	; 0x21
 8020b86:	2104      	movs	r1, #4
 8020b88:	4620      	mov	r0, r4
 8020b8a:	f000 fb57 	bl	802123c <_calloc_r>
 8020b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b90:	60f0      	str	r0, [r6, #12]
 8020b92:	68db      	ldr	r3, [r3, #12]
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d1e4      	bne.n	8020b62 <_Balloc+0x2e>
 8020b98:	2000      	movs	r0, #0
 8020b9a:	bd70      	pop	{r4, r5, r6, pc}
 8020b9c:	6802      	ldr	r2, [r0, #0]
 8020b9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020ba2:	2300      	movs	r3, #0
 8020ba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020ba8:	e7f7      	b.n	8020b9a <_Balloc+0x66>
 8020baa:	bf00      	nop
 8020bac:	080221b5 	.word	0x080221b5
 8020bb0:	08022298 	.word	0x08022298

08020bb4 <_Bfree>:
 8020bb4:	b570      	push	{r4, r5, r6, lr}
 8020bb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020bb8:	4605      	mov	r5, r0
 8020bba:	460c      	mov	r4, r1
 8020bbc:	b976      	cbnz	r6, 8020bdc <_Bfree+0x28>
 8020bbe:	2010      	movs	r0, #16
 8020bc0:	f7ff ffb0 	bl	8020b24 <malloc>
 8020bc4:	4602      	mov	r2, r0
 8020bc6:	6268      	str	r0, [r5, #36]	; 0x24
 8020bc8:	b920      	cbnz	r0, 8020bd4 <_Bfree+0x20>
 8020bca:	4b09      	ldr	r3, [pc, #36]	; (8020bf0 <_Bfree+0x3c>)
 8020bcc:	4809      	ldr	r0, [pc, #36]	; (8020bf4 <_Bfree+0x40>)
 8020bce:	218a      	movs	r1, #138	; 0x8a
 8020bd0:	f000 fe32 	bl	8021838 <__assert_func>
 8020bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020bd8:	6006      	str	r6, [r0, #0]
 8020bda:	60c6      	str	r6, [r0, #12]
 8020bdc:	b13c      	cbz	r4, 8020bee <_Bfree+0x3a>
 8020bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020be0:	6862      	ldr	r2, [r4, #4]
 8020be2:	68db      	ldr	r3, [r3, #12]
 8020be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020be8:	6021      	str	r1, [r4, #0]
 8020bea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020bee:	bd70      	pop	{r4, r5, r6, pc}
 8020bf0:	080221b5 	.word	0x080221b5
 8020bf4:	08022298 	.word	0x08022298

08020bf8 <__multadd>:
 8020bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020bfc:	690d      	ldr	r5, [r1, #16]
 8020bfe:	4607      	mov	r7, r0
 8020c00:	460c      	mov	r4, r1
 8020c02:	461e      	mov	r6, r3
 8020c04:	f101 0c14 	add.w	ip, r1, #20
 8020c08:	2000      	movs	r0, #0
 8020c0a:	f8dc 3000 	ldr.w	r3, [ip]
 8020c0e:	b299      	uxth	r1, r3
 8020c10:	fb02 6101 	mla	r1, r2, r1, r6
 8020c14:	0c1e      	lsrs	r6, r3, #16
 8020c16:	0c0b      	lsrs	r3, r1, #16
 8020c18:	fb02 3306 	mla	r3, r2, r6, r3
 8020c1c:	b289      	uxth	r1, r1
 8020c1e:	3001      	adds	r0, #1
 8020c20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020c24:	4285      	cmp	r5, r0
 8020c26:	f84c 1b04 	str.w	r1, [ip], #4
 8020c2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020c2e:	dcec      	bgt.n	8020c0a <__multadd+0x12>
 8020c30:	b30e      	cbz	r6, 8020c76 <__multadd+0x7e>
 8020c32:	68a3      	ldr	r3, [r4, #8]
 8020c34:	42ab      	cmp	r3, r5
 8020c36:	dc19      	bgt.n	8020c6c <__multadd+0x74>
 8020c38:	6861      	ldr	r1, [r4, #4]
 8020c3a:	4638      	mov	r0, r7
 8020c3c:	3101      	adds	r1, #1
 8020c3e:	f7ff ff79 	bl	8020b34 <_Balloc>
 8020c42:	4680      	mov	r8, r0
 8020c44:	b928      	cbnz	r0, 8020c52 <__multadd+0x5a>
 8020c46:	4602      	mov	r2, r0
 8020c48:	4b0c      	ldr	r3, [pc, #48]	; (8020c7c <__multadd+0x84>)
 8020c4a:	480d      	ldr	r0, [pc, #52]	; (8020c80 <__multadd+0x88>)
 8020c4c:	21b5      	movs	r1, #181	; 0xb5
 8020c4e:	f000 fdf3 	bl	8021838 <__assert_func>
 8020c52:	6922      	ldr	r2, [r4, #16]
 8020c54:	3202      	adds	r2, #2
 8020c56:	f104 010c 	add.w	r1, r4, #12
 8020c5a:	0092      	lsls	r2, r2, #2
 8020c5c:	300c      	adds	r0, #12
 8020c5e:	f7fe f8dd 	bl	801ee1c <memcpy>
 8020c62:	4621      	mov	r1, r4
 8020c64:	4638      	mov	r0, r7
 8020c66:	f7ff ffa5 	bl	8020bb4 <_Bfree>
 8020c6a:	4644      	mov	r4, r8
 8020c6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020c70:	3501      	adds	r5, #1
 8020c72:	615e      	str	r6, [r3, #20]
 8020c74:	6125      	str	r5, [r4, #16]
 8020c76:	4620      	mov	r0, r4
 8020c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c7c:	08022227 	.word	0x08022227
 8020c80:	08022298 	.word	0x08022298

08020c84 <__hi0bits>:
 8020c84:	0c03      	lsrs	r3, r0, #16
 8020c86:	041b      	lsls	r3, r3, #16
 8020c88:	b9d3      	cbnz	r3, 8020cc0 <__hi0bits+0x3c>
 8020c8a:	0400      	lsls	r0, r0, #16
 8020c8c:	2310      	movs	r3, #16
 8020c8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020c92:	bf04      	itt	eq
 8020c94:	0200      	lsleq	r0, r0, #8
 8020c96:	3308      	addeq	r3, #8
 8020c98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020c9c:	bf04      	itt	eq
 8020c9e:	0100      	lsleq	r0, r0, #4
 8020ca0:	3304      	addeq	r3, #4
 8020ca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020ca6:	bf04      	itt	eq
 8020ca8:	0080      	lsleq	r0, r0, #2
 8020caa:	3302      	addeq	r3, #2
 8020cac:	2800      	cmp	r0, #0
 8020cae:	db05      	blt.n	8020cbc <__hi0bits+0x38>
 8020cb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020cb4:	f103 0301 	add.w	r3, r3, #1
 8020cb8:	bf08      	it	eq
 8020cba:	2320      	moveq	r3, #32
 8020cbc:	4618      	mov	r0, r3
 8020cbe:	4770      	bx	lr
 8020cc0:	2300      	movs	r3, #0
 8020cc2:	e7e4      	b.n	8020c8e <__hi0bits+0xa>

08020cc4 <__lo0bits>:
 8020cc4:	6803      	ldr	r3, [r0, #0]
 8020cc6:	f013 0207 	ands.w	r2, r3, #7
 8020cca:	4601      	mov	r1, r0
 8020ccc:	d00b      	beq.n	8020ce6 <__lo0bits+0x22>
 8020cce:	07da      	lsls	r2, r3, #31
 8020cd0:	d423      	bmi.n	8020d1a <__lo0bits+0x56>
 8020cd2:	0798      	lsls	r0, r3, #30
 8020cd4:	bf49      	itett	mi
 8020cd6:	085b      	lsrmi	r3, r3, #1
 8020cd8:	089b      	lsrpl	r3, r3, #2
 8020cda:	2001      	movmi	r0, #1
 8020cdc:	600b      	strmi	r3, [r1, #0]
 8020cde:	bf5c      	itt	pl
 8020ce0:	600b      	strpl	r3, [r1, #0]
 8020ce2:	2002      	movpl	r0, #2
 8020ce4:	4770      	bx	lr
 8020ce6:	b298      	uxth	r0, r3
 8020ce8:	b9a8      	cbnz	r0, 8020d16 <__lo0bits+0x52>
 8020cea:	0c1b      	lsrs	r3, r3, #16
 8020cec:	2010      	movs	r0, #16
 8020cee:	b2da      	uxtb	r2, r3
 8020cf0:	b90a      	cbnz	r2, 8020cf6 <__lo0bits+0x32>
 8020cf2:	3008      	adds	r0, #8
 8020cf4:	0a1b      	lsrs	r3, r3, #8
 8020cf6:	071a      	lsls	r2, r3, #28
 8020cf8:	bf04      	itt	eq
 8020cfa:	091b      	lsreq	r3, r3, #4
 8020cfc:	3004      	addeq	r0, #4
 8020cfe:	079a      	lsls	r2, r3, #30
 8020d00:	bf04      	itt	eq
 8020d02:	089b      	lsreq	r3, r3, #2
 8020d04:	3002      	addeq	r0, #2
 8020d06:	07da      	lsls	r2, r3, #31
 8020d08:	d403      	bmi.n	8020d12 <__lo0bits+0x4e>
 8020d0a:	085b      	lsrs	r3, r3, #1
 8020d0c:	f100 0001 	add.w	r0, r0, #1
 8020d10:	d005      	beq.n	8020d1e <__lo0bits+0x5a>
 8020d12:	600b      	str	r3, [r1, #0]
 8020d14:	4770      	bx	lr
 8020d16:	4610      	mov	r0, r2
 8020d18:	e7e9      	b.n	8020cee <__lo0bits+0x2a>
 8020d1a:	2000      	movs	r0, #0
 8020d1c:	4770      	bx	lr
 8020d1e:	2020      	movs	r0, #32
 8020d20:	4770      	bx	lr
	...

08020d24 <__i2b>:
 8020d24:	b510      	push	{r4, lr}
 8020d26:	460c      	mov	r4, r1
 8020d28:	2101      	movs	r1, #1
 8020d2a:	f7ff ff03 	bl	8020b34 <_Balloc>
 8020d2e:	4602      	mov	r2, r0
 8020d30:	b928      	cbnz	r0, 8020d3e <__i2b+0x1a>
 8020d32:	4b05      	ldr	r3, [pc, #20]	; (8020d48 <__i2b+0x24>)
 8020d34:	4805      	ldr	r0, [pc, #20]	; (8020d4c <__i2b+0x28>)
 8020d36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020d3a:	f000 fd7d 	bl	8021838 <__assert_func>
 8020d3e:	2301      	movs	r3, #1
 8020d40:	6144      	str	r4, [r0, #20]
 8020d42:	6103      	str	r3, [r0, #16]
 8020d44:	bd10      	pop	{r4, pc}
 8020d46:	bf00      	nop
 8020d48:	08022227 	.word	0x08022227
 8020d4c:	08022298 	.word	0x08022298

08020d50 <__multiply>:
 8020d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d54:	4691      	mov	r9, r2
 8020d56:	690a      	ldr	r2, [r1, #16]
 8020d58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020d5c:	429a      	cmp	r2, r3
 8020d5e:	bfb8      	it	lt
 8020d60:	460b      	movlt	r3, r1
 8020d62:	460c      	mov	r4, r1
 8020d64:	bfbc      	itt	lt
 8020d66:	464c      	movlt	r4, r9
 8020d68:	4699      	movlt	r9, r3
 8020d6a:	6927      	ldr	r7, [r4, #16]
 8020d6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020d70:	68a3      	ldr	r3, [r4, #8]
 8020d72:	6861      	ldr	r1, [r4, #4]
 8020d74:	eb07 060a 	add.w	r6, r7, sl
 8020d78:	42b3      	cmp	r3, r6
 8020d7a:	b085      	sub	sp, #20
 8020d7c:	bfb8      	it	lt
 8020d7e:	3101      	addlt	r1, #1
 8020d80:	f7ff fed8 	bl	8020b34 <_Balloc>
 8020d84:	b930      	cbnz	r0, 8020d94 <__multiply+0x44>
 8020d86:	4602      	mov	r2, r0
 8020d88:	4b44      	ldr	r3, [pc, #272]	; (8020e9c <__multiply+0x14c>)
 8020d8a:	4845      	ldr	r0, [pc, #276]	; (8020ea0 <__multiply+0x150>)
 8020d8c:	f240 115d 	movw	r1, #349	; 0x15d
 8020d90:	f000 fd52 	bl	8021838 <__assert_func>
 8020d94:	f100 0514 	add.w	r5, r0, #20
 8020d98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020d9c:	462b      	mov	r3, r5
 8020d9e:	2200      	movs	r2, #0
 8020da0:	4543      	cmp	r3, r8
 8020da2:	d321      	bcc.n	8020de8 <__multiply+0x98>
 8020da4:	f104 0314 	add.w	r3, r4, #20
 8020da8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020dac:	f109 0314 	add.w	r3, r9, #20
 8020db0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8020db4:	9202      	str	r2, [sp, #8]
 8020db6:	1b3a      	subs	r2, r7, r4
 8020db8:	3a15      	subs	r2, #21
 8020dba:	f022 0203 	bic.w	r2, r2, #3
 8020dbe:	3204      	adds	r2, #4
 8020dc0:	f104 0115 	add.w	r1, r4, #21
 8020dc4:	428f      	cmp	r7, r1
 8020dc6:	bf38      	it	cc
 8020dc8:	2204      	movcc	r2, #4
 8020dca:	9201      	str	r2, [sp, #4]
 8020dcc:	9a02      	ldr	r2, [sp, #8]
 8020dce:	9303      	str	r3, [sp, #12]
 8020dd0:	429a      	cmp	r2, r3
 8020dd2:	d80c      	bhi.n	8020dee <__multiply+0x9e>
 8020dd4:	2e00      	cmp	r6, #0
 8020dd6:	dd03      	ble.n	8020de0 <__multiply+0x90>
 8020dd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d05a      	beq.n	8020e96 <__multiply+0x146>
 8020de0:	6106      	str	r6, [r0, #16]
 8020de2:	b005      	add	sp, #20
 8020de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020de8:	f843 2b04 	str.w	r2, [r3], #4
 8020dec:	e7d8      	b.n	8020da0 <__multiply+0x50>
 8020dee:	f8b3 a000 	ldrh.w	sl, [r3]
 8020df2:	f1ba 0f00 	cmp.w	sl, #0
 8020df6:	d024      	beq.n	8020e42 <__multiply+0xf2>
 8020df8:	f104 0e14 	add.w	lr, r4, #20
 8020dfc:	46a9      	mov	r9, r5
 8020dfe:	f04f 0c00 	mov.w	ip, #0
 8020e02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8020e06:	f8d9 1000 	ldr.w	r1, [r9]
 8020e0a:	fa1f fb82 	uxth.w	fp, r2
 8020e0e:	b289      	uxth	r1, r1
 8020e10:	fb0a 110b 	mla	r1, sl, fp, r1
 8020e14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8020e18:	f8d9 2000 	ldr.w	r2, [r9]
 8020e1c:	4461      	add	r1, ip
 8020e1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020e22:	fb0a c20b 	mla	r2, sl, fp, ip
 8020e26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8020e2a:	b289      	uxth	r1, r1
 8020e2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020e30:	4577      	cmp	r7, lr
 8020e32:	f849 1b04 	str.w	r1, [r9], #4
 8020e36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020e3a:	d8e2      	bhi.n	8020e02 <__multiply+0xb2>
 8020e3c:	9a01      	ldr	r2, [sp, #4]
 8020e3e:	f845 c002 	str.w	ip, [r5, r2]
 8020e42:	9a03      	ldr	r2, [sp, #12]
 8020e44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020e48:	3304      	adds	r3, #4
 8020e4a:	f1b9 0f00 	cmp.w	r9, #0
 8020e4e:	d020      	beq.n	8020e92 <__multiply+0x142>
 8020e50:	6829      	ldr	r1, [r5, #0]
 8020e52:	f104 0c14 	add.w	ip, r4, #20
 8020e56:	46ae      	mov	lr, r5
 8020e58:	f04f 0a00 	mov.w	sl, #0
 8020e5c:	f8bc b000 	ldrh.w	fp, [ip]
 8020e60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8020e64:	fb09 220b 	mla	r2, r9, fp, r2
 8020e68:	4492      	add	sl, r2
 8020e6a:	b289      	uxth	r1, r1
 8020e6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8020e70:	f84e 1b04 	str.w	r1, [lr], #4
 8020e74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8020e78:	f8be 1000 	ldrh.w	r1, [lr]
 8020e7c:	0c12      	lsrs	r2, r2, #16
 8020e7e:	fb09 1102 	mla	r1, r9, r2, r1
 8020e82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8020e86:	4567      	cmp	r7, ip
 8020e88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8020e8c:	d8e6      	bhi.n	8020e5c <__multiply+0x10c>
 8020e8e:	9a01      	ldr	r2, [sp, #4]
 8020e90:	50a9      	str	r1, [r5, r2]
 8020e92:	3504      	adds	r5, #4
 8020e94:	e79a      	b.n	8020dcc <__multiply+0x7c>
 8020e96:	3e01      	subs	r6, #1
 8020e98:	e79c      	b.n	8020dd4 <__multiply+0x84>
 8020e9a:	bf00      	nop
 8020e9c:	08022227 	.word	0x08022227
 8020ea0:	08022298 	.word	0x08022298

08020ea4 <__pow5mult>:
 8020ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ea8:	4615      	mov	r5, r2
 8020eaa:	f012 0203 	ands.w	r2, r2, #3
 8020eae:	4606      	mov	r6, r0
 8020eb0:	460f      	mov	r7, r1
 8020eb2:	d007      	beq.n	8020ec4 <__pow5mult+0x20>
 8020eb4:	4c25      	ldr	r4, [pc, #148]	; (8020f4c <__pow5mult+0xa8>)
 8020eb6:	3a01      	subs	r2, #1
 8020eb8:	2300      	movs	r3, #0
 8020eba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020ebe:	f7ff fe9b 	bl	8020bf8 <__multadd>
 8020ec2:	4607      	mov	r7, r0
 8020ec4:	10ad      	asrs	r5, r5, #2
 8020ec6:	d03d      	beq.n	8020f44 <__pow5mult+0xa0>
 8020ec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020eca:	b97c      	cbnz	r4, 8020eec <__pow5mult+0x48>
 8020ecc:	2010      	movs	r0, #16
 8020ece:	f7ff fe29 	bl	8020b24 <malloc>
 8020ed2:	4602      	mov	r2, r0
 8020ed4:	6270      	str	r0, [r6, #36]	; 0x24
 8020ed6:	b928      	cbnz	r0, 8020ee4 <__pow5mult+0x40>
 8020ed8:	4b1d      	ldr	r3, [pc, #116]	; (8020f50 <__pow5mult+0xac>)
 8020eda:	481e      	ldr	r0, [pc, #120]	; (8020f54 <__pow5mult+0xb0>)
 8020edc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020ee0:	f000 fcaa 	bl	8021838 <__assert_func>
 8020ee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020ee8:	6004      	str	r4, [r0, #0]
 8020eea:	60c4      	str	r4, [r0, #12]
 8020eec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020ef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020ef4:	b94c      	cbnz	r4, 8020f0a <__pow5mult+0x66>
 8020ef6:	f240 2171 	movw	r1, #625	; 0x271
 8020efa:	4630      	mov	r0, r6
 8020efc:	f7ff ff12 	bl	8020d24 <__i2b>
 8020f00:	2300      	movs	r3, #0
 8020f02:	f8c8 0008 	str.w	r0, [r8, #8]
 8020f06:	4604      	mov	r4, r0
 8020f08:	6003      	str	r3, [r0, #0]
 8020f0a:	f04f 0900 	mov.w	r9, #0
 8020f0e:	07eb      	lsls	r3, r5, #31
 8020f10:	d50a      	bpl.n	8020f28 <__pow5mult+0x84>
 8020f12:	4639      	mov	r1, r7
 8020f14:	4622      	mov	r2, r4
 8020f16:	4630      	mov	r0, r6
 8020f18:	f7ff ff1a 	bl	8020d50 <__multiply>
 8020f1c:	4639      	mov	r1, r7
 8020f1e:	4680      	mov	r8, r0
 8020f20:	4630      	mov	r0, r6
 8020f22:	f7ff fe47 	bl	8020bb4 <_Bfree>
 8020f26:	4647      	mov	r7, r8
 8020f28:	106d      	asrs	r5, r5, #1
 8020f2a:	d00b      	beq.n	8020f44 <__pow5mult+0xa0>
 8020f2c:	6820      	ldr	r0, [r4, #0]
 8020f2e:	b938      	cbnz	r0, 8020f40 <__pow5mult+0x9c>
 8020f30:	4622      	mov	r2, r4
 8020f32:	4621      	mov	r1, r4
 8020f34:	4630      	mov	r0, r6
 8020f36:	f7ff ff0b 	bl	8020d50 <__multiply>
 8020f3a:	6020      	str	r0, [r4, #0]
 8020f3c:	f8c0 9000 	str.w	r9, [r0]
 8020f40:	4604      	mov	r4, r0
 8020f42:	e7e4      	b.n	8020f0e <__pow5mult+0x6a>
 8020f44:	4638      	mov	r0, r7
 8020f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f4a:	bf00      	nop
 8020f4c:	080223e8 	.word	0x080223e8
 8020f50:	080221b5 	.word	0x080221b5
 8020f54:	08022298 	.word	0x08022298

08020f58 <__lshift>:
 8020f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f5c:	460c      	mov	r4, r1
 8020f5e:	6849      	ldr	r1, [r1, #4]
 8020f60:	6923      	ldr	r3, [r4, #16]
 8020f62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020f66:	68a3      	ldr	r3, [r4, #8]
 8020f68:	4607      	mov	r7, r0
 8020f6a:	4691      	mov	r9, r2
 8020f6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020f70:	f108 0601 	add.w	r6, r8, #1
 8020f74:	42b3      	cmp	r3, r6
 8020f76:	db0b      	blt.n	8020f90 <__lshift+0x38>
 8020f78:	4638      	mov	r0, r7
 8020f7a:	f7ff fddb 	bl	8020b34 <_Balloc>
 8020f7e:	4605      	mov	r5, r0
 8020f80:	b948      	cbnz	r0, 8020f96 <__lshift+0x3e>
 8020f82:	4602      	mov	r2, r0
 8020f84:	4b2a      	ldr	r3, [pc, #168]	; (8021030 <__lshift+0xd8>)
 8020f86:	482b      	ldr	r0, [pc, #172]	; (8021034 <__lshift+0xdc>)
 8020f88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020f8c:	f000 fc54 	bl	8021838 <__assert_func>
 8020f90:	3101      	adds	r1, #1
 8020f92:	005b      	lsls	r3, r3, #1
 8020f94:	e7ee      	b.n	8020f74 <__lshift+0x1c>
 8020f96:	2300      	movs	r3, #0
 8020f98:	f100 0114 	add.w	r1, r0, #20
 8020f9c:	f100 0210 	add.w	r2, r0, #16
 8020fa0:	4618      	mov	r0, r3
 8020fa2:	4553      	cmp	r3, sl
 8020fa4:	db37      	blt.n	8021016 <__lshift+0xbe>
 8020fa6:	6920      	ldr	r0, [r4, #16]
 8020fa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020fac:	f104 0314 	add.w	r3, r4, #20
 8020fb0:	f019 091f 	ands.w	r9, r9, #31
 8020fb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020fb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020fbc:	d02f      	beq.n	802101e <__lshift+0xc6>
 8020fbe:	f1c9 0e20 	rsb	lr, r9, #32
 8020fc2:	468a      	mov	sl, r1
 8020fc4:	f04f 0c00 	mov.w	ip, #0
 8020fc8:	681a      	ldr	r2, [r3, #0]
 8020fca:	fa02 f209 	lsl.w	r2, r2, r9
 8020fce:	ea42 020c 	orr.w	r2, r2, ip
 8020fd2:	f84a 2b04 	str.w	r2, [sl], #4
 8020fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8020fda:	4298      	cmp	r0, r3
 8020fdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8020fe0:	d8f2      	bhi.n	8020fc8 <__lshift+0x70>
 8020fe2:	1b03      	subs	r3, r0, r4
 8020fe4:	3b15      	subs	r3, #21
 8020fe6:	f023 0303 	bic.w	r3, r3, #3
 8020fea:	3304      	adds	r3, #4
 8020fec:	f104 0215 	add.w	r2, r4, #21
 8020ff0:	4290      	cmp	r0, r2
 8020ff2:	bf38      	it	cc
 8020ff4:	2304      	movcc	r3, #4
 8020ff6:	f841 c003 	str.w	ip, [r1, r3]
 8020ffa:	f1bc 0f00 	cmp.w	ip, #0
 8020ffe:	d001      	beq.n	8021004 <__lshift+0xac>
 8021000:	f108 0602 	add.w	r6, r8, #2
 8021004:	3e01      	subs	r6, #1
 8021006:	4638      	mov	r0, r7
 8021008:	612e      	str	r6, [r5, #16]
 802100a:	4621      	mov	r1, r4
 802100c:	f7ff fdd2 	bl	8020bb4 <_Bfree>
 8021010:	4628      	mov	r0, r5
 8021012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021016:	f842 0f04 	str.w	r0, [r2, #4]!
 802101a:	3301      	adds	r3, #1
 802101c:	e7c1      	b.n	8020fa2 <__lshift+0x4a>
 802101e:	3904      	subs	r1, #4
 8021020:	f853 2b04 	ldr.w	r2, [r3], #4
 8021024:	f841 2f04 	str.w	r2, [r1, #4]!
 8021028:	4298      	cmp	r0, r3
 802102a:	d8f9      	bhi.n	8021020 <__lshift+0xc8>
 802102c:	e7ea      	b.n	8021004 <__lshift+0xac>
 802102e:	bf00      	nop
 8021030:	08022227 	.word	0x08022227
 8021034:	08022298 	.word	0x08022298

08021038 <__mcmp>:
 8021038:	b530      	push	{r4, r5, lr}
 802103a:	6902      	ldr	r2, [r0, #16]
 802103c:	690c      	ldr	r4, [r1, #16]
 802103e:	1b12      	subs	r2, r2, r4
 8021040:	d10e      	bne.n	8021060 <__mcmp+0x28>
 8021042:	f100 0314 	add.w	r3, r0, #20
 8021046:	3114      	adds	r1, #20
 8021048:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802104c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021050:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021054:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021058:	42a5      	cmp	r5, r4
 802105a:	d003      	beq.n	8021064 <__mcmp+0x2c>
 802105c:	d305      	bcc.n	802106a <__mcmp+0x32>
 802105e:	2201      	movs	r2, #1
 8021060:	4610      	mov	r0, r2
 8021062:	bd30      	pop	{r4, r5, pc}
 8021064:	4283      	cmp	r3, r0
 8021066:	d3f3      	bcc.n	8021050 <__mcmp+0x18>
 8021068:	e7fa      	b.n	8021060 <__mcmp+0x28>
 802106a:	f04f 32ff 	mov.w	r2, #4294967295
 802106e:	e7f7      	b.n	8021060 <__mcmp+0x28>

08021070 <__mdiff>:
 8021070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021074:	460c      	mov	r4, r1
 8021076:	4606      	mov	r6, r0
 8021078:	4611      	mov	r1, r2
 802107a:	4620      	mov	r0, r4
 802107c:	4690      	mov	r8, r2
 802107e:	f7ff ffdb 	bl	8021038 <__mcmp>
 8021082:	1e05      	subs	r5, r0, #0
 8021084:	d110      	bne.n	80210a8 <__mdiff+0x38>
 8021086:	4629      	mov	r1, r5
 8021088:	4630      	mov	r0, r6
 802108a:	f7ff fd53 	bl	8020b34 <_Balloc>
 802108e:	b930      	cbnz	r0, 802109e <__mdiff+0x2e>
 8021090:	4b3a      	ldr	r3, [pc, #232]	; (802117c <__mdiff+0x10c>)
 8021092:	4602      	mov	r2, r0
 8021094:	f240 2132 	movw	r1, #562	; 0x232
 8021098:	4839      	ldr	r0, [pc, #228]	; (8021180 <__mdiff+0x110>)
 802109a:	f000 fbcd 	bl	8021838 <__assert_func>
 802109e:	2301      	movs	r3, #1
 80210a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80210a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210a8:	bfa4      	itt	ge
 80210aa:	4643      	movge	r3, r8
 80210ac:	46a0      	movge	r8, r4
 80210ae:	4630      	mov	r0, r6
 80210b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80210b4:	bfa6      	itte	ge
 80210b6:	461c      	movge	r4, r3
 80210b8:	2500      	movge	r5, #0
 80210ba:	2501      	movlt	r5, #1
 80210bc:	f7ff fd3a 	bl	8020b34 <_Balloc>
 80210c0:	b920      	cbnz	r0, 80210cc <__mdiff+0x5c>
 80210c2:	4b2e      	ldr	r3, [pc, #184]	; (802117c <__mdiff+0x10c>)
 80210c4:	4602      	mov	r2, r0
 80210c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80210ca:	e7e5      	b.n	8021098 <__mdiff+0x28>
 80210cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80210d0:	6926      	ldr	r6, [r4, #16]
 80210d2:	60c5      	str	r5, [r0, #12]
 80210d4:	f104 0914 	add.w	r9, r4, #20
 80210d8:	f108 0514 	add.w	r5, r8, #20
 80210dc:	f100 0e14 	add.w	lr, r0, #20
 80210e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80210e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80210e8:	f108 0210 	add.w	r2, r8, #16
 80210ec:	46f2      	mov	sl, lr
 80210ee:	2100      	movs	r1, #0
 80210f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80210f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80210f8:	fa1f f883 	uxth.w	r8, r3
 80210fc:	fa11 f18b 	uxtah	r1, r1, fp
 8021100:	0c1b      	lsrs	r3, r3, #16
 8021102:	eba1 0808 	sub.w	r8, r1, r8
 8021106:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802110a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802110e:	fa1f f888 	uxth.w	r8, r8
 8021112:	1419      	asrs	r1, r3, #16
 8021114:	454e      	cmp	r6, r9
 8021116:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802111a:	f84a 3b04 	str.w	r3, [sl], #4
 802111e:	d8e7      	bhi.n	80210f0 <__mdiff+0x80>
 8021120:	1b33      	subs	r3, r6, r4
 8021122:	3b15      	subs	r3, #21
 8021124:	f023 0303 	bic.w	r3, r3, #3
 8021128:	3304      	adds	r3, #4
 802112a:	3415      	adds	r4, #21
 802112c:	42a6      	cmp	r6, r4
 802112e:	bf38      	it	cc
 8021130:	2304      	movcc	r3, #4
 8021132:	441d      	add	r5, r3
 8021134:	4473      	add	r3, lr
 8021136:	469e      	mov	lr, r3
 8021138:	462e      	mov	r6, r5
 802113a:	4566      	cmp	r6, ip
 802113c:	d30e      	bcc.n	802115c <__mdiff+0xec>
 802113e:	f10c 0203 	add.w	r2, ip, #3
 8021142:	1b52      	subs	r2, r2, r5
 8021144:	f022 0203 	bic.w	r2, r2, #3
 8021148:	3d03      	subs	r5, #3
 802114a:	45ac      	cmp	ip, r5
 802114c:	bf38      	it	cc
 802114e:	2200      	movcc	r2, #0
 8021150:	441a      	add	r2, r3
 8021152:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021156:	b17b      	cbz	r3, 8021178 <__mdiff+0x108>
 8021158:	6107      	str	r7, [r0, #16]
 802115a:	e7a3      	b.n	80210a4 <__mdiff+0x34>
 802115c:	f856 8b04 	ldr.w	r8, [r6], #4
 8021160:	fa11 f288 	uxtah	r2, r1, r8
 8021164:	1414      	asrs	r4, r2, #16
 8021166:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802116a:	b292      	uxth	r2, r2
 802116c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021170:	f84e 2b04 	str.w	r2, [lr], #4
 8021174:	1421      	asrs	r1, r4, #16
 8021176:	e7e0      	b.n	802113a <__mdiff+0xca>
 8021178:	3f01      	subs	r7, #1
 802117a:	e7ea      	b.n	8021152 <__mdiff+0xe2>
 802117c:	08022227 	.word	0x08022227
 8021180:	08022298 	.word	0x08022298

08021184 <__d2b>:
 8021184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021188:	4689      	mov	r9, r1
 802118a:	2101      	movs	r1, #1
 802118c:	ec57 6b10 	vmov	r6, r7, d0
 8021190:	4690      	mov	r8, r2
 8021192:	f7ff fccf 	bl	8020b34 <_Balloc>
 8021196:	4604      	mov	r4, r0
 8021198:	b930      	cbnz	r0, 80211a8 <__d2b+0x24>
 802119a:	4602      	mov	r2, r0
 802119c:	4b25      	ldr	r3, [pc, #148]	; (8021234 <__d2b+0xb0>)
 802119e:	4826      	ldr	r0, [pc, #152]	; (8021238 <__d2b+0xb4>)
 80211a0:	f240 310a 	movw	r1, #778	; 0x30a
 80211a4:	f000 fb48 	bl	8021838 <__assert_func>
 80211a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80211ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80211b0:	bb35      	cbnz	r5, 8021200 <__d2b+0x7c>
 80211b2:	2e00      	cmp	r6, #0
 80211b4:	9301      	str	r3, [sp, #4]
 80211b6:	d028      	beq.n	802120a <__d2b+0x86>
 80211b8:	4668      	mov	r0, sp
 80211ba:	9600      	str	r6, [sp, #0]
 80211bc:	f7ff fd82 	bl	8020cc4 <__lo0bits>
 80211c0:	9900      	ldr	r1, [sp, #0]
 80211c2:	b300      	cbz	r0, 8021206 <__d2b+0x82>
 80211c4:	9a01      	ldr	r2, [sp, #4]
 80211c6:	f1c0 0320 	rsb	r3, r0, #32
 80211ca:	fa02 f303 	lsl.w	r3, r2, r3
 80211ce:	430b      	orrs	r3, r1
 80211d0:	40c2      	lsrs	r2, r0
 80211d2:	6163      	str	r3, [r4, #20]
 80211d4:	9201      	str	r2, [sp, #4]
 80211d6:	9b01      	ldr	r3, [sp, #4]
 80211d8:	61a3      	str	r3, [r4, #24]
 80211da:	2b00      	cmp	r3, #0
 80211dc:	bf14      	ite	ne
 80211de:	2202      	movne	r2, #2
 80211e0:	2201      	moveq	r2, #1
 80211e2:	6122      	str	r2, [r4, #16]
 80211e4:	b1d5      	cbz	r5, 802121c <__d2b+0x98>
 80211e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80211ea:	4405      	add	r5, r0
 80211ec:	f8c9 5000 	str.w	r5, [r9]
 80211f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80211f4:	f8c8 0000 	str.w	r0, [r8]
 80211f8:	4620      	mov	r0, r4
 80211fa:	b003      	add	sp, #12
 80211fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021204:	e7d5      	b.n	80211b2 <__d2b+0x2e>
 8021206:	6161      	str	r1, [r4, #20]
 8021208:	e7e5      	b.n	80211d6 <__d2b+0x52>
 802120a:	a801      	add	r0, sp, #4
 802120c:	f7ff fd5a 	bl	8020cc4 <__lo0bits>
 8021210:	9b01      	ldr	r3, [sp, #4]
 8021212:	6163      	str	r3, [r4, #20]
 8021214:	2201      	movs	r2, #1
 8021216:	6122      	str	r2, [r4, #16]
 8021218:	3020      	adds	r0, #32
 802121a:	e7e3      	b.n	80211e4 <__d2b+0x60>
 802121c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021220:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021224:	f8c9 0000 	str.w	r0, [r9]
 8021228:	6918      	ldr	r0, [r3, #16]
 802122a:	f7ff fd2b 	bl	8020c84 <__hi0bits>
 802122e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021232:	e7df      	b.n	80211f4 <__d2b+0x70>
 8021234:	08022227 	.word	0x08022227
 8021238:	08022298 	.word	0x08022298

0802123c <_calloc_r>:
 802123c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802123e:	fba1 2402 	umull	r2, r4, r1, r2
 8021242:	b94c      	cbnz	r4, 8021258 <_calloc_r+0x1c>
 8021244:	4611      	mov	r1, r2
 8021246:	9201      	str	r2, [sp, #4]
 8021248:	f000 f87a 	bl	8021340 <_malloc_r>
 802124c:	9a01      	ldr	r2, [sp, #4]
 802124e:	4605      	mov	r5, r0
 8021250:	b930      	cbnz	r0, 8021260 <_calloc_r+0x24>
 8021252:	4628      	mov	r0, r5
 8021254:	b003      	add	sp, #12
 8021256:	bd30      	pop	{r4, r5, pc}
 8021258:	220c      	movs	r2, #12
 802125a:	6002      	str	r2, [r0, #0]
 802125c:	2500      	movs	r5, #0
 802125e:	e7f8      	b.n	8021252 <_calloc_r+0x16>
 8021260:	4621      	mov	r1, r4
 8021262:	f7fd fde9 	bl	801ee38 <memset>
 8021266:	e7f4      	b.n	8021252 <_calloc_r+0x16>

08021268 <_free_r>:
 8021268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802126a:	2900      	cmp	r1, #0
 802126c:	d044      	beq.n	80212f8 <_free_r+0x90>
 802126e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021272:	9001      	str	r0, [sp, #4]
 8021274:	2b00      	cmp	r3, #0
 8021276:	f1a1 0404 	sub.w	r4, r1, #4
 802127a:	bfb8      	it	lt
 802127c:	18e4      	addlt	r4, r4, r3
 802127e:	f000 fb61 	bl	8021944 <__malloc_lock>
 8021282:	4a1e      	ldr	r2, [pc, #120]	; (80212fc <_free_r+0x94>)
 8021284:	9801      	ldr	r0, [sp, #4]
 8021286:	6813      	ldr	r3, [r2, #0]
 8021288:	b933      	cbnz	r3, 8021298 <_free_r+0x30>
 802128a:	6063      	str	r3, [r4, #4]
 802128c:	6014      	str	r4, [r2, #0]
 802128e:	b003      	add	sp, #12
 8021290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021294:	f000 bb5c 	b.w	8021950 <__malloc_unlock>
 8021298:	42a3      	cmp	r3, r4
 802129a:	d908      	bls.n	80212ae <_free_r+0x46>
 802129c:	6825      	ldr	r5, [r4, #0]
 802129e:	1961      	adds	r1, r4, r5
 80212a0:	428b      	cmp	r3, r1
 80212a2:	bf01      	itttt	eq
 80212a4:	6819      	ldreq	r1, [r3, #0]
 80212a6:	685b      	ldreq	r3, [r3, #4]
 80212a8:	1949      	addeq	r1, r1, r5
 80212aa:	6021      	streq	r1, [r4, #0]
 80212ac:	e7ed      	b.n	802128a <_free_r+0x22>
 80212ae:	461a      	mov	r2, r3
 80212b0:	685b      	ldr	r3, [r3, #4]
 80212b2:	b10b      	cbz	r3, 80212b8 <_free_r+0x50>
 80212b4:	42a3      	cmp	r3, r4
 80212b6:	d9fa      	bls.n	80212ae <_free_r+0x46>
 80212b8:	6811      	ldr	r1, [r2, #0]
 80212ba:	1855      	adds	r5, r2, r1
 80212bc:	42a5      	cmp	r5, r4
 80212be:	d10b      	bne.n	80212d8 <_free_r+0x70>
 80212c0:	6824      	ldr	r4, [r4, #0]
 80212c2:	4421      	add	r1, r4
 80212c4:	1854      	adds	r4, r2, r1
 80212c6:	42a3      	cmp	r3, r4
 80212c8:	6011      	str	r1, [r2, #0]
 80212ca:	d1e0      	bne.n	802128e <_free_r+0x26>
 80212cc:	681c      	ldr	r4, [r3, #0]
 80212ce:	685b      	ldr	r3, [r3, #4]
 80212d0:	6053      	str	r3, [r2, #4]
 80212d2:	4421      	add	r1, r4
 80212d4:	6011      	str	r1, [r2, #0]
 80212d6:	e7da      	b.n	802128e <_free_r+0x26>
 80212d8:	d902      	bls.n	80212e0 <_free_r+0x78>
 80212da:	230c      	movs	r3, #12
 80212dc:	6003      	str	r3, [r0, #0]
 80212de:	e7d6      	b.n	802128e <_free_r+0x26>
 80212e0:	6825      	ldr	r5, [r4, #0]
 80212e2:	1961      	adds	r1, r4, r5
 80212e4:	428b      	cmp	r3, r1
 80212e6:	bf04      	itt	eq
 80212e8:	6819      	ldreq	r1, [r3, #0]
 80212ea:	685b      	ldreq	r3, [r3, #4]
 80212ec:	6063      	str	r3, [r4, #4]
 80212ee:	bf04      	itt	eq
 80212f0:	1949      	addeq	r1, r1, r5
 80212f2:	6021      	streq	r1, [r4, #0]
 80212f4:	6054      	str	r4, [r2, #4]
 80212f6:	e7ca      	b.n	802128e <_free_r+0x26>
 80212f8:	b003      	add	sp, #12
 80212fa:	bd30      	pop	{r4, r5, pc}
 80212fc:	2000e0e4 	.word	0x2000e0e4

08021300 <sbrk_aligned>:
 8021300:	b570      	push	{r4, r5, r6, lr}
 8021302:	4e0e      	ldr	r6, [pc, #56]	; (802133c <sbrk_aligned+0x3c>)
 8021304:	460c      	mov	r4, r1
 8021306:	6831      	ldr	r1, [r6, #0]
 8021308:	4605      	mov	r5, r0
 802130a:	b911      	cbnz	r1, 8021312 <sbrk_aligned+0x12>
 802130c:	f000 fa2e 	bl	802176c <_sbrk_r>
 8021310:	6030      	str	r0, [r6, #0]
 8021312:	4621      	mov	r1, r4
 8021314:	4628      	mov	r0, r5
 8021316:	f000 fa29 	bl	802176c <_sbrk_r>
 802131a:	1c43      	adds	r3, r0, #1
 802131c:	d00a      	beq.n	8021334 <sbrk_aligned+0x34>
 802131e:	1cc4      	adds	r4, r0, #3
 8021320:	f024 0403 	bic.w	r4, r4, #3
 8021324:	42a0      	cmp	r0, r4
 8021326:	d007      	beq.n	8021338 <sbrk_aligned+0x38>
 8021328:	1a21      	subs	r1, r4, r0
 802132a:	4628      	mov	r0, r5
 802132c:	f000 fa1e 	bl	802176c <_sbrk_r>
 8021330:	3001      	adds	r0, #1
 8021332:	d101      	bne.n	8021338 <sbrk_aligned+0x38>
 8021334:	f04f 34ff 	mov.w	r4, #4294967295
 8021338:	4620      	mov	r0, r4
 802133a:	bd70      	pop	{r4, r5, r6, pc}
 802133c:	2000e0e8 	.word	0x2000e0e8

08021340 <_malloc_r>:
 8021340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021344:	1ccd      	adds	r5, r1, #3
 8021346:	f025 0503 	bic.w	r5, r5, #3
 802134a:	3508      	adds	r5, #8
 802134c:	2d0c      	cmp	r5, #12
 802134e:	bf38      	it	cc
 8021350:	250c      	movcc	r5, #12
 8021352:	2d00      	cmp	r5, #0
 8021354:	4607      	mov	r7, r0
 8021356:	db01      	blt.n	802135c <_malloc_r+0x1c>
 8021358:	42a9      	cmp	r1, r5
 802135a:	d905      	bls.n	8021368 <_malloc_r+0x28>
 802135c:	230c      	movs	r3, #12
 802135e:	603b      	str	r3, [r7, #0]
 8021360:	2600      	movs	r6, #0
 8021362:	4630      	mov	r0, r6
 8021364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021368:	4e2e      	ldr	r6, [pc, #184]	; (8021424 <_malloc_r+0xe4>)
 802136a:	f000 faeb 	bl	8021944 <__malloc_lock>
 802136e:	6833      	ldr	r3, [r6, #0]
 8021370:	461c      	mov	r4, r3
 8021372:	bb34      	cbnz	r4, 80213c2 <_malloc_r+0x82>
 8021374:	4629      	mov	r1, r5
 8021376:	4638      	mov	r0, r7
 8021378:	f7ff ffc2 	bl	8021300 <sbrk_aligned>
 802137c:	1c43      	adds	r3, r0, #1
 802137e:	4604      	mov	r4, r0
 8021380:	d14d      	bne.n	802141e <_malloc_r+0xde>
 8021382:	6834      	ldr	r4, [r6, #0]
 8021384:	4626      	mov	r6, r4
 8021386:	2e00      	cmp	r6, #0
 8021388:	d140      	bne.n	802140c <_malloc_r+0xcc>
 802138a:	6823      	ldr	r3, [r4, #0]
 802138c:	4631      	mov	r1, r6
 802138e:	4638      	mov	r0, r7
 8021390:	eb04 0803 	add.w	r8, r4, r3
 8021394:	f000 f9ea 	bl	802176c <_sbrk_r>
 8021398:	4580      	cmp	r8, r0
 802139a:	d13a      	bne.n	8021412 <_malloc_r+0xd2>
 802139c:	6821      	ldr	r1, [r4, #0]
 802139e:	3503      	adds	r5, #3
 80213a0:	1a6d      	subs	r5, r5, r1
 80213a2:	f025 0503 	bic.w	r5, r5, #3
 80213a6:	3508      	adds	r5, #8
 80213a8:	2d0c      	cmp	r5, #12
 80213aa:	bf38      	it	cc
 80213ac:	250c      	movcc	r5, #12
 80213ae:	4629      	mov	r1, r5
 80213b0:	4638      	mov	r0, r7
 80213b2:	f7ff ffa5 	bl	8021300 <sbrk_aligned>
 80213b6:	3001      	adds	r0, #1
 80213b8:	d02b      	beq.n	8021412 <_malloc_r+0xd2>
 80213ba:	6823      	ldr	r3, [r4, #0]
 80213bc:	442b      	add	r3, r5
 80213be:	6023      	str	r3, [r4, #0]
 80213c0:	e00e      	b.n	80213e0 <_malloc_r+0xa0>
 80213c2:	6822      	ldr	r2, [r4, #0]
 80213c4:	1b52      	subs	r2, r2, r5
 80213c6:	d41e      	bmi.n	8021406 <_malloc_r+0xc6>
 80213c8:	2a0b      	cmp	r2, #11
 80213ca:	d916      	bls.n	80213fa <_malloc_r+0xba>
 80213cc:	1961      	adds	r1, r4, r5
 80213ce:	42a3      	cmp	r3, r4
 80213d0:	6025      	str	r5, [r4, #0]
 80213d2:	bf18      	it	ne
 80213d4:	6059      	strne	r1, [r3, #4]
 80213d6:	6863      	ldr	r3, [r4, #4]
 80213d8:	bf08      	it	eq
 80213da:	6031      	streq	r1, [r6, #0]
 80213dc:	5162      	str	r2, [r4, r5]
 80213de:	604b      	str	r3, [r1, #4]
 80213e0:	4638      	mov	r0, r7
 80213e2:	f104 060b 	add.w	r6, r4, #11
 80213e6:	f000 fab3 	bl	8021950 <__malloc_unlock>
 80213ea:	f026 0607 	bic.w	r6, r6, #7
 80213ee:	1d23      	adds	r3, r4, #4
 80213f0:	1af2      	subs	r2, r6, r3
 80213f2:	d0b6      	beq.n	8021362 <_malloc_r+0x22>
 80213f4:	1b9b      	subs	r3, r3, r6
 80213f6:	50a3      	str	r3, [r4, r2]
 80213f8:	e7b3      	b.n	8021362 <_malloc_r+0x22>
 80213fa:	6862      	ldr	r2, [r4, #4]
 80213fc:	42a3      	cmp	r3, r4
 80213fe:	bf0c      	ite	eq
 8021400:	6032      	streq	r2, [r6, #0]
 8021402:	605a      	strne	r2, [r3, #4]
 8021404:	e7ec      	b.n	80213e0 <_malloc_r+0xa0>
 8021406:	4623      	mov	r3, r4
 8021408:	6864      	ldr	r4, [r4, #4]
 802140a:	e7b2      	b.n	8021372 <_malloc_r+0x32>
 802140c:	4634      	mov	r4, r6
 802140e:	6876      	ldr	r6, [r6, #4]
 8021410:	e7b9      	b.n	8021386 <_malloc_r+0x46>
 8021412:	230c      	movs	r3, #12
 8021414:	603b      	str	r3, [r7, #0]
 8021416:	4638      	mov	r0, r7
 8021418:	f000 fa9a 	bl	8021950 <__malloc_unlock>
 802141c:	e7a1      	b.n	8021362 <_malloc_r+0x22>
 802141e:	6025      	str	r5, [r4, #0]
 8021420:	e7de      	b.n	80213e0 <_malloc_r+0xa0>
 8021422:	bf00      	nop
 8021424:	2000e0e4 	.word	0x2000e0e4

08021428 <__sfputc_r>:
 8021428:	6893      	ldr	r3, [r2, #8]
 802142a:	3b01      	subs	r3, #1
 802142c:	2b00      	cmp	r3, #0
 802142e:	b410      	push	{r4}
 8021430:	6093      	str	r3, [r2, #8]
 8021432:	da08      	bge.n	8021446 <__sfputc_r+0x1e>
 8021434:	6994      	ldr	r4, [r2, #24]
 8021436:	42a3      	cmp	r3, r4
 8021438:	db01      	blt.n	802143e <__sfputc_r+0x16>
 802143a:	290a      	cmp	r1, #10
 802143c:	d103      	bne.n	8021446 <__sfputc_r+0x1e>
 802143e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021442:	f7fe ba0f 	b.w	801f864 <__swbuf_r>
 8021446:	6813      	ldr	r3, [r2, #0]
 8021448:	1c58      	adds	r0, r3, #1
 802144a:	6010      	str	r0, [r2, #0]
 802144c:	7019      	strb	r1, [r3, #0]
 802144e:	4608      	mov	r0, r1
 8021450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021454:	4770      	bx	lr

08021456 <__sfputs_r>:
 8021456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021458:	4606      	mov	r6, r0
 802145a:	460f      	mov	r7, r1
 802145c:	4614      	mov	r4, r2
 802145e:	18d5      	adds	r5, r2, r3
 8021460:	42ac      	cmp	r4, r5
 8021462:	d101      	bne.n	8021468 <__sfputs_r+0x12>
 8021464:	2000      	movs	r0, #0
 8021466:	e007      	b.n	8021478 <__sfputs_r+0x22>
 8021468:	f814 1b01 	ldrb.w	r1, [r4], #1
 802146c:	463a      	mov	r2, r7
 802146e:	4630      	mov	r0, r6
 8021470:	f7ff ffda 	bl	8021428 <__sfputc_r>
 8021474:	1c43      	adds	r3, r0, #1
 8021476:	d1f3      	bne.n	8021460 <__sfputs_r+0xa>
 8021478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802147c <_vfiprintf_r>:
 802147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021480:	460d      	mov	r5, r1
 8021482:	b09d      	sub	sp, #116	; 0x74
 8021484:	4614      	mov	r4, r2
 8021486:	4698      	mov	r8, r3
 8021488:	4606      	mov	r6, r0
 802148a:	b118      	cbz	r0, 8021494 <_vfiprintf_r+0x18>
 802148c:	6983      	ldr	r3, [r0, #24]
 802148e:	b90b      	cbnz	r3, 8021494 <_vfiprintf_r+0x18>
 8021490:	f7ff fa3e 	bl	8020910 <__sinit>
 8021494:	4b89      	ldr	r3, [pc, #548]	; (80216bc <_vfiprintf_r+0x240>)
 8021496:	429d      	cmp	r5, r3
 8021498:	d11b      	bne.n	80214d2 <_vfiprintf_r+0x56>
 802149a:	6875      	ldr	r5, [r6, #4]
 802149c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802149e:	07d9      	lsls	r1, r3, #31
 80214a0:	d405      	bmi.n	80214ae <_vfiprintf_r+0x32>
 80214a2:	89ab      	ldrh	r3, [r5, #12]
 80214a4:	059a      	lsls	r2, r3, #22
 80214a6:	d402      	bmi.n	80214ae <_vfiprintf_r+0x32>
 80214a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80214aa:	f7ff fad4 	bl	8020a56 <__retarget_lock_acquire_recursive>
 80214ae:	89ab      	ldrh	r3, [r5, #12]
 80214b0:	071b      	lsls	r3, r3, #28
 80214b2:	d501      	bpl.n	80214b8 <_vfiprintf_r+0x3c>
 80214b4:	692b      	ldr	r3, [r5, #16]
 80214b6:	b9eb      	cbnz	r3, 80214f4 <_vfiprintf_r+0x78>
 80214b8:	4629      	mov	r1, r5
 80214ba:	4630      	mov	r0, r6
 80214bc:	f7fe fa24 	bl	801f908 <__swsetup_r>
 80214c0:	b1c0      	cbz	r0, 80214f4 <_vfiprintf_r+0x78>
 80214c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80214c4:	07dc      	lsls	r4, r3, #31
 80214c6:	d50e      	bpl.n	80214e6 <_vfiprintf_r+0x6a>
 80214c8:	f04f 30ff 	mov.w	r0, #4294967295
 80214cc:	b01d      	add	sp, #116	; 0x74
 80214ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214d2:	4b7b      	ldr	r3, [pc, #492]	; (80216c0 <_vfiprintf_r+0x244>)
 80214d4:	429d      	cmp	r5, r3
 80214d6:	d101      	bne.n	80214dc <_vfiprintf_r+0x60>
 80214d8:	68b5      	ldr	r5, [r6, #8]
 80214da:	e7df      	b.n	802149c <_vfiprintf_r+0x20>
 80214dc:	4b79      	ldr	r3, [pc, #484]	; (80216c4 <_vfiprintf_r+0x248>)
 80214de:	429d      	cmp	r5, r3
 80214e0:	bf08      	it	eq
 80214e2:	68f5      	ldreq	r5, [r6, #12]
 80214e4:	e7da      	b.n	802149c <_vfiprintf_r+0x20>
 80214e6:	89ab      	ldrh	r3, [r5, #12]
 80214e8:	0598      	lsls	r0, r3, #22
 80214ea:	d4ed      	bmi.n	80214c8 <_vfiprintf_r+0x4c>
 80214ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80214ee:	f7ff fab3 	bl	8020a58 <__retarget_lock_release_recursive>
 80214f2:	e7e9      	b.n	80214c8 <_vfiprintf_r+0x4c>
 80214f4:	2300      	movs	r3, #0
 80214f6:	9309      	str	r3, [sp, #36]	; 0x24
 80214f8:	2320      	movs	r3, #32
 80214fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80214fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8021502:	2330      	movs	r3, #48	; 0x30
 8021504:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80216c8 <_vfiprintf_r+0x24c>
 8021508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802150c:	f04f 0901 	mov.w	r9, #1
 8021510:	4623      	mov	r3, r4
 8021512:	469a      	mov	sl, r3
 8021514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021518:	b10a      	cbz	r2, 802151e <_vfiprintf_r+0xa2>
 802151a:	2a25      	cmp	r2, #37	; 0x25
 802151c:	d1f9      	bne.n	8021512 <_vfiprintf_r+0x96>
 802151e:	ebba 0b04 	subs.w	fp, sl, r4
 8021522:	d00b      	beq.n	802153c <_vfiprintf_r+0xc0>
 8021524:	465b      	mov	r3, fp
 8021526:	4622      	mov	r2, r4
 8021528:	4629      	mov	r1, r5
 802152a:	4630      	mov	r0, r6
 802152c:	f7ff ff93 	bl	8021456 <__sfputs_r>
 8021530:	3001      	adds	r0, #1
 8021532:	f000 80aa 	beq.w	802168a <_vfiprintf_r+0x20e>
 8021536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021538:	445a      	add	r2, fp
 802153a:	9209      	str	r2, [sp, #36]	; 0x24
 802153c:	f89a 3000 	ldrb.w	r3, [sl]
 8021540:	2b00      	cmp	r3, #0
 8021542:	f000 80a2 	beq.w	802168a <_vfiprintf_r+0x20e>
 8021546:	2300      	movs	r3, #0
 8021548:	f04f 32ff 	mov.w	r2, #4294967295
 802154c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021550:	f10a 0a01 	add.w	sl, sl, #1
 8021554:	9304      	str	r3, [sp, #16]
 8021556:	9307      	str	r3, [sp, #28]
 8021558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802155c:	931a      	str	r3, [sp, #104]	; 0x68
 802155e:	4654      	mov	r4, sl
 8021560:	2205      	movs	r2, #5
 8021562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021566:	4858      	ldr	r0, [pc, #352]	; (80216c8 <_vfiprintf_r+0x24c>)
 8021568:	f7de fe62 	bl	8000230 <memchr>
 802156c:	9a04      	ldr	r2, [sp, #16]
 802156e:	b9d8      	cbnz	r0, 80215a8 <_vfiprintf_r+0x12c>
 8021570:	06d1      	lsls	r1, r2, #27
 8021572:	bf44      	itt	mi
 8021574:	2320      	movmi	r3, #32
 8021576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802157a:	0713      	lsls	r3, r2, #28
 802157c:	bf44      	itt	mi
 802157e:	232b      	movmi	r3, #43	; 0x2b
 8021580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021584:	f89a 3000 	ldrb.w	r3, [sl]
 8021588:	2b2a      	cmp	r3, #42	; 0x2a
 802158a:	d015      	beq.n	80215b8 <_vfiprintf_r+0x13c>
 802158c:	9a07      	ldr	r2, [sp, #28]
 802158e:	4654      	mov	r4, sl
 8021590:	2000      	movs	r0, #0
 8021592:	f04f 0c0a 	mov.w	ip, #10
 8021596:	4621      	mov	r1, r4
 8021598:	f811 3b01 	ldrb.w	r3, [r1], #1
 802159c:	3b30      	subs	r3, #48	; 0x30
 802159e:	2b09      	cmp	r3, #9
 80215a0:	d94e      	bls.n	8021640 <_vfiprintf_r+0x1c4>
 80215a2:	b1b0      	cbz	r0, 80215d2 <_vfiprintf_r+0x156>
 80215a4:	9207      	str	r2, [sp, #28]
 80215a6:	e014      	b.n	80215d2 <_vfiprintf_r+0x156>
 80215a8:	eba0 0308 	sub.w	r3, r0, r8
 80215ac:	fa09 f303 	lsl.w	r3, r9, r3
 80215b0:	4313      	orrs	r3, r2
 80215b2:	9304      	str	r3, [sp, #16]
 80215b4:	46a2      	mov	sl, r4
 80215b6:	e7d2      	b.n	802155e <_vfiprintf_r+0xe2>
 80215b8:	9b03      	ldr	r3, [sp, #12]
 80215ba:	1d19      	adds	r1, r3, #4
 80215bc:	681b      	ldr	r3, [r3, #0]
 80215be:	9103      	str	r1, [sp, #12]
 80215c0:	2b00      	cmp	r3, #0
 80215c2:	bfbb      	ittet	lt
 80215c4:	425b      	neglt	r3, r3
 80215c6:	f042 0202 	orrlt.w	r2, r2, #2
 80215ca:	9307      	strge	r3, [sp, #28]
 80215cc:	9307      	strlt	r3, [sp, #28]
 80215ce:	bfb8      	it	lt
 80215d0:	9204      	strlt	r2, [sp, #16]
 80215d2:	7823      	ldrb	r3, [r4, #0]
 80215d4:	2b2e      	cmp	r3, #46	; 0x2e
 80215d6:	d10c      	bne.n	80215f2 <_vfiprintf_r+0x176>
 80215d8:	7863      	ldrb	r3, [r4, #1]
 80215da:	2b2a      	cmp	r3, #42	; 0x2a
 80215dc:	d135      	bne.n	802164a <_vfiprintf_r+0x1ce>
 80215de:	9b03      	ldr	r3, [sp, #12]
 80215e0:	1d1a      	adds	r2, r3, #4
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	9203      	str	r2, [sp, #12]
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	bfb8      	it	lt
 80215ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80215ee:	3402      	adds	r4, #2
 80215f0:	9305      	str	r3, [sp, #20]
 80215f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80216d8 <_vfiprintf_r+0x25c>
 80215f6:	7821      	ldrb	r1, [r4, #0]
 80215f8:	2203      	movs	r2, #3
 80215fa:	4650      	mov	r0, sl
 80215fc:	f7de fe18 	bl	8000230 <memchr>
 8021600:	b140      	cbz	r0, 8021614 <_vfiprintf_r+0x198>
 8021602:	2340      	movs	r3, #64	; 0x40
 8021604:	eba0 000a 	sub.w	r0, r0, sl
 8021608:	fa03 f000 	lsl.w	r0, r3, r0
 802160c:	9b04      	ldr	r3, [sp, #16]
 802160e:	4303      	orrs	r3, r0
 8021610:	3401      	adds	r4, #1
 8021612:	9304      	str	r3, [sp, #16]
 8021614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021618:	482c      	ldr	r0, [pc, #176]	; (80216cc <_vfiprintf_r+0x250>)
 802161a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802161e:	2206      	movs	r2, #6
 8021620:	f7de fe06 	bl	8000230 <memchr>
 8021624:	2800      	cmp	r0, #0
 8021626:	d03f      	beq.n	80216a8 <_vfiprintf_r+0x22c>
 8021628:	4b29      	ldr	r3, [pc, #164]	; (80216d0 <_vfiprintf_r+0x254>)
 802162a:	bb1b      	cbnz	r3, 8021674 <_vfiprintf_r+0x1f8>
 802162c:	9b03      	ldr	r3, [sp, #12]
 802162e:	3307      	adds	r3, #7
 8021630:	f023 0307 	bic.w	r3, r3, #7
 8021634:	3308      	adds	r3, #8
 8021636:	9303      	str	r3, [sp, #12]
 8021638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802163a:	443b      	add	r3, r7
 802163c:	9309      	str	r3, [sp, #36]	; 0x24
 802163e:	e767      	b.n	8021510 <_vfiprintf_r+0x94>
 8021640:	fb0c 3202 	mla	r2, ip, r2, r3
 8021644:	460c      	mov	r4, r1
 8021646:	2001      	movs	r0, #1
 8021648:	e7a5      	b.n	8021596 <_vfiprintf_r+0x11a>
 802164a:	2300      	movs	r3, #0
 802164c:	3401      	adds	r4, #1
 802164e:	9305      	str	r3, [sp, #20]
 8021650:	4619      	mov	r1, r3
 8021652:	f04f 0c0a 	mov.w	ip, #10
 8021656:	4620      	mov	r0, r4
 8021658:	f810 2b01 	ldrb.w	r2, [r0], #1
 802165c:	3a30      	subs	r2, #48	; 0x30
 802165e:	2a09      	cmp	r2, #9
 8021660:	d903      	bls.n	802166a <_vfiprintf_r+0x1ee>
 8021662:	2b00      	cmp	r3, #0
 8021664:	d0c5      	beq.n	80215f2 <_vfiprintf_r+0x176>
 8021666:	9105      	str	r1, [sp, #20]
 8021668:	e7c3      	b.n	80215f2 <_vfiprintf_r+0x176>
 802166a:	fb0c 2101 	mla	r1, ip, r1, r2
 802166e:	4604      	mov	r4, r0
 8021670:	2301      	movs	r3, #1
 8021672:	e7f0      	b.n	8021656 <_vfiprintf_r+0x1da>
 8021674:	ab03      	add	r3, sp, #12
 8021676:	9300      	str	r3, [sp, #0]
 8021678:	462a      	mov	r2, r5
 802167a:	4b16      	ldr	r3, [pc, #88]	; (80216d4 <_vfiprintf_r+0x258>)
 802167c:	a904      	add	r1, sp, #16
 802167e:	4630      	mov	r0, r6
 8021680:	f7fd fc82 	bl	801ef88 <_printf_float>
 8021684:	4607      	mov	r7, r0
 8021686:	1c78      	adds	r0, r7, #1
 8021688:	d1d6      	bne.n	8021638 <_vfiprintf_r+0x1bc>
 802168a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802168c:	07d9      	lsls	r1, r3, #31
 802168e:	d405      	bmi.n	802169c <_vfiprintf_r+0x220>
 8021690:	89ab      	ldrh	r3, [r5, #12]
 8021692:	059a      	lsls	r2, r3, #22
 8021694:	d402      	bmi.n	802169c <_vfiprintf_r+0x220>
 8021696:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021698:	f7ff f9de 	bl	8020a58 <__retarget_lock_release_recursive>
 802169c:	89ab      	ldrh	r3, [r5, #12]
 802169e:	065b      	lsls	r3, r3, #25
 80216a0:	f53f af12 	bmi.w	80214c8 <_vfiprintf_r+0x4c>
 80216a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80216a6:	e711      	b.n	80214cc <_vfiprintf_r+0x50>
 80216a8:	ab03      	add	r3, sp, #12
 80216aa:	9300      	str	r3, [sp, #0]
 80216ac:	462a      	mov	r2, r5
 80216ae:	4b09      	ldr	r3, [pc, #36]	; (80216d4 <_vfiprintf_r+0x258>)
 80216b0:	a904      	add	r1, sp, #16
 80216b2:	4630      	mov	r0, r6
 80216b4:	f7fd ff0c 	bl	801f4d0 <_printf_i>
 80216b8:	e7e4      	b.n	8021684 <_vfiprintf_r+0x208>
 80216ba:	bf00      	nop
 80216bc:	08022258 	.word	0x08022258
 80216c0:	08022278 	.word	0x08022278
 80216c4:	08022238 	.word	0x08022238
 80216c8:	080223f4 	.word	0x080223f4
 80216cc:	080223fe 	.word	0x080223fe
 80216d0:	0801ef89 	.word	0x0801ef89
 80216d4:	08021457 	.word	0x08021457
 80216d8:	080223fa 	.word	0x080223fa

080216dc <_putc_r>:
 80216dc:	b570      	push	{r4, r5, r6, lr}
 80216de:	460d      	mov	r5, r1
 80216e0:	4614      	mov	r4, r2
 80216e2:	4606      	mov	r6, r0
 80216e4:	b118      	cbz	r0, 80216ee <_putc_r+0x12>
 80216e6:	6983      	ldr	r3, [r0, #24]
 80216e8:	b90b      	cbnz	r3, 80216ee <_putc_r+0x12>
 80216ea:	f7ff f911 	bl	8020910 <__sinit>
 80216ee:	4b1c      	ldr	r3, [pc, #112]	; (8021760 <_putc_r+0x84>)
 80216f0:	429c      	cmp	r4, r3
 80216f2:	d124      	bne.n	802173e <_putc_r+0x62>
 80216f4:	6874      	ldr	r4, [r6, #4]
 80216f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80216f8:	07d8      	lsls	r0, r3, #31
 80216fa:	d405      	bmi.n	8021708 <_putc_r+0x2c>
 80216fc:	89a3      	ldrh	r3, [r4, #12]
 80216fe:	0599      	lsls	r1, r3, #22
 8021700:	d402      	bmi.n	8021708 <_putc_r+0x2c>
 8021702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021704:	f7ff f9a7 	bl	8020a56 <__retarget_lock_acquire_recursive>
 8021708:	68a3      	ldr	r3, [r4, #8]
 802170a:	3b01      	subs	r3, #1
 802170c:	2b00      	cmp	r3, #0
 802170e:	60a3      	str	r3, [r4, #8]
 8021710:	da05      	bge.n	802171e <_putc_r+0x42>
 8021712:	69a2      	ldr	r2, [r4, #24]
 8021714:	4293      	cmp	r3, r2
 8021716:	db1c      	blt.n	8021752 <_putc_r+0x76>
 8021718:	b2eb      	uxtb	r3, r5
 802171a:	2b0a      	cmp	r3, #10
 802171c:	d019      	beq.n	8021752 <_putc_r+0x76>
 802171e:	6823      	ldr	r3, [r4, #0]
 8021720:	1c5a      	adds	r2, r3, #1
 8021722:	6022      	str	r2, [r4, #0]
 8021724:	701d      	strb	r5, [r3, #0]
 8021726:	b2ed      	uxtb	r5, r5
 8021728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802172a:	07da      	lsls	r2, r3, #31
 802172c:	d405      	bmi.n	802173a <_putc_r+0x5e>
 802172e:	89a3      	ldrh	r3, [r4, #12]
 8021730:	059b      	lsls	r3, r3, #22
 8021732:	d402      	bmi.n	802173a <_putc_r+0x5e>
 8021734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021736:	f7ff f98f 	bl	8020a58 <__retarget_lock_release_recursive>
 802173a:	4628      	mov	r0, r5
 802173c:	bd70      	pop	{r4, r5, r6, pc}
 802173e:	4b09      	ldr	r3, [pc, #36]	; (8021764 <_putc_r+0x88>)
 8021740:	429c      	cmp	r4, r3
 8021742:	d101      	bne.n	8021748 <_putc_r+0x6c>
 8021744:	68b4      	ldr	r4, [r6, #8]
 8021746:	e7d6      	b.n	80216f6 <_putc_r+0x1a>
 8021748:	4b07      	ldr	r3, [pc, #28]	; (8021768 <_putc_r+0x8c>)
 802174a:	429c      	cmp	r4, r3
 802174c:	bf08      	it	eq
 802174e:	68f4      	ldreq	r4, [r6, #12]
 8021750:	e7d1      	b.n	80216f6 <_putc_r+0x1a>
 8021752:	4629      	mov	r1, r5
 8021754:	4622      	mov	r2, r4
 8021756:	4630      	mov	r0, r6
 8021758:	f7fe f884 	bl	801f864 <__swbuf_r>
 802175c:	4605      	mov	r5, r0
 802175e:	e7e3      	b.n	8021728 <_putc_r+0x4c>
 8021760:	08022258 	.word	0x08022258
 8021764:	08022278 	.word	0x08022278
 8021768:	08022238 	.word	0x08022238

0802176c <_sbrk_r>:
 802176c:	b538      	push	{r3, r4, r5, lr}
 802176e:	4d06      	ldr	r5, [pc, #24]	; (8021788 <_sbrk_r+0x1c>)
 8021770:	2300      	movs	r3, #0
 8021772:	4604      	mov	r4, r0
 8021774:	4608      	mov	r0, r1
 8021776:	602b      	str	r3, [r5, #0]
 8021778:	f7f5 f89c 	bl	80168b4 <_sbrk>
 802177c:	1c43      	adds	r3, r0, #1
 802177e:	d102      	bne.n	8021786 <_sbrk_r+0x1a>
 8021780:	682b      	ldr	r3, [r5, #0]
 8021782:	b103      	cbz	r3, 8021786 <_sbrk_r+0x1a>
 8021784:	6023      	str	r3, [r4, #0]
 8021786:	bd38      	pop	{r3, r4, r5, pc}
 8021788:	2000e0ec 	.word	0x2000e0ec

0802178c <__sread>:
 802178c:	b510      	push	{r4, lr}
 802178e:	460c      	mov	r4, r1
 8021790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021794:	f000 f8e2 	bl	802195c <_read_r>
 8021798:	2800      	cmp	r0, #0
 802179a:	bfab      	itete	ge
 802179c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802179e:	89a3      	ldrhlt	r3, [r4, #12]
 80217a0:	181b      	addge	r3, r3, r0
 80217a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80217a6:	bfac      	ite	ge
 80217a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80217aa:	81a3      	strhlt	r3, [r4, #12]
 80217ac:	bd10      	pop	{r4, pc}

080217ae <__swrite>:
 80217ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217b2:	461f      	mov	r7, r3
 80217b4:	898b      	ldrh	r3, [r1, #12]
 80217b6:	05db      	lsls	r3, r3, #23
 80217b8:	4605      	mov	r5, r0
 80217ba:	460c      	mov	r4, r1
 80217bc:	4616      	mov	r6, r2
 80217be:	d505      	bpl.n	80217cc <__swrite+0x1e>
 80217c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80217c4:	2302      	movs	r3, #2
 80217c6:	2200      	movs	r2, #0
 80217c8:	f000 f898 	bl	80218fc <_lseek_r>
 80217cc:	89a3      	ldrh	r3, [r4, #12]
 80217ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80217d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80217d6:	81a3      	strh	r3, [r4, #12]
 80217d8:	4632      	mov	r2, r6
 80217da:	463b      	mov	r3, r7
 80217dc:	4628      	mov	r0, r5
 80217de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80217e2:	f000 b817 	b.w	8021814 <_write_r>

080217e6 <__sseek>:
 80217e6:	b510      	push	{r4, lr}
 80217e8:	460c      	mov	r4, r1
 80217ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80217ee:	f000 f885 	bl	80218fc <_lseek_r>
 80217f2:	1c43      	adds	r3, r0, #1
 80217f4:	89a3      	ldrh	r3, [r4, #12]
 80217f6:	bf15      	itete	ne
 80217f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80217fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80217fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021802:	81a3      	strheq	r3, [r4, #12]
 8021804:	bf18      	it	ne
 8021806:	81a3      	strhne	r3, [r4, #12]
 8021808:	bd10      	pop	{r4, pc}

0802180a <__sclose>:
 802180a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802180e:	f000 b831 	b.w	8021874 <_close_r>
	...

08021814 <_write_r>:
 8021814:	b538      	push	{r3, r4, r5, lr}
 8021816:	4d07      	ldr	r5, [pc, #28]	; (8021834 <_write_r+0x20>)
 8021818:	4604      	mov	r4, r0
 802181a:	4608      	mov	r0, r1
 802181c:	4611      	mov	r1, r2
 802181e:	2200      	movs	r2, #0
 8021820:	602a      	str	r2, [r5, #0]
 8021822:	461a      	mov	r2, r3
 8021824:	f7f4 fff2 	bl	801680c <_write>
 8021828:	1c43      	adds	r3, r0, #1
 802182a:	d102      	bne.n	8021832 <_write_r+0x1e>
 802182c:	682b      	ldr	r3, [r5, #0]
 802182e:	b103      	cbz	r3, 8021832 <_write_r+0x1e>
 8021830:	6023      	str	r3, [r4, #0]
 8021832:	bd38      	pop	{r3, r4, r5, pc}
 8021834:	2000e0ec 	.word	0x2000e0ec

08021838 <__assert_func>:
 8021838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802183a:	4614      	mov	r4, r2
 802183c:	461a      	mov	r2, r3
 802183e:	4b09      	ldr	r3, [pc, #36]	; (8021864 <__assert_func+0x2c>)
 8021840:	681b      	ldr	r3, [r3, #0]
 8021842:	4605      	mov	r5, r0
 8021844:	68d8      	ldr	r0, [r3, #12]
 8021846:	b14c      	cbz	r4, 802185c <__assert_func+0x24>
 8021848:	4b07      	ldr	r3, [pc, #28]	; (8021868 <__assert_func+0x30>)
 802184a:	9100      	str	r1, [sp, #0]
 802184c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021850:	4906      	ldr	r1, [pc, #24]	; (802186c <__assert_func+0x34>)
 8021852:	462b      	mov	r3, r5
 8021854:	f000 f81e 	bl	8021894 <fiprintf>
 8021858:	f000 f89f 	bl	802199a <abort>
 802185c:	4b04      	ldr	r3, [pc, #16]	; (8021870 <__assert_func+0x38>)
 802185e:	461c      	mov	r4, r3
 8021860:	e7f3      	b.n	802184a <__assert_func+0x12>
 8021862:	bf00      	nop
 8021864:	2000002c 	.word	0x2000002c
 8021868:	08022405 	.word	0x08022405
 802186c:	08022412 	.word	0x08022412
 8021870:	08022440 	.word	0x08022440

08021874 <_close_r>:
 8021874:	b538      	push	{r3, r4, r5, lr}
 8021876:	4d06      	ldr	r5, [pc, #24]	; (8021890 <_close_r+0x1c>)
 8021878:	2300      	movs	r3, #0
 802187a:	4604      	mov	r4, r0
 802187c:	4608      	mov	r0, r1
 802187e:	602b      	str	r3, [r5, #0]
 8021880:	f7f4 ffe4 	bl	801684c <_close>
 8021884:	1c43      	adds	r3, r0, #1
 8021886:	d102      	bne.n	802188e <_close_r+0x1a>
 8021888:	682b      	ldr	r3, [r5, #0]
 802188a:	b103      	cbz	r3, 802188e <_close_r+0x1a>
 802188c:	6023      	str	r3, [r4, #0]
 802188e:	bd38      	pop	{r3, r4, r5, pc}
 8021890:	2000e0ec 	.word	0x2000e0ec

08021894 <fiprintf>:
 8021894:	b40e      	push	{r1, r2, r3}
 8021896:	b503      	push	{r0, r1, lr}
 8021898:	4601      	mov	r1, r0
 802189a:	ab03      	add	r3, sp, #12
 802189c:	4805      	ldr	r0, [pc, #20]	; (80218b4 <fiprintf+0x20>)
 802189e:	f853 2b04 	ldr.w	r2, [r3], #4
 80218a2:	6800      	ldr	r0, [r0, #0]
 80218a4:	9301      	str	r3, [sp, #4]
 80218a6:	f7ff fde9 	bl	802147c <_vfiprintf_r>
 80218aa:	b002      	add	sp, #8
 80218ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80218b0:	b003      	add	sp, #12
 80218b2:	4770      	bx	lr
 80218b4:	2000002c 	.word	0x2000002c

080218b8 <_fstat_r>:
 80218b8:	b538      	push	{r3, r4, r5, lr}
 80218ba:	4d07      	ldr	r5, [pc, #28]	; (80218d8 <_fstat_r+0x20>)
 80218bc:	2300      	movs	r3, #0
 80218be:	4604      	mov	r4, r0
 80218c0:	4608      	mov	r0, r1
 80218c2:	4611      	mov	r1, r2
 80218c4:	602b      	str	r3, [r5, #0]
 80218c6:	f7f4 ffcd 	bl	8016864 <_fstat>
 80218ca:	1c43      	adds	r3, r0, #1
 80218cc:	d102      	bne.n	80218d4 <_fstat_r+0x1c>
 80218ce:	682b      	ldr	r3, [r5, #0]
 80218d0:	b103      	cbz	r3, 80218d4 <_fstat_r+0x1c>
 80218d2:	6023      	str	r3, [r4, #0]
 80218d4:	bd38      	pop	{r3, r4, r5, pc}
 80218d6:	bf00      	nop
 80218d8:	2000e0ec 	.word	0x2000e0ec

080218dc <_isatty_r>:
 80218dc:	b538      	push	{r3, r4, r5, lr}
 80218de:	4d06      	ldr	r5, [pc, #24]	; (80218f8 <_isatty_r+0x1c>)
 80218e0:	2300      	movs	r3, #0
 80218e2:	4604      	mov	r4, r0
 80218e4:	4608      	mov	r0, r1
 80218e6:	602b      	str	r3, [r5, #0]
 80218e8:	f7f4 ffcc 	bl	8016884 <_isatty>
 80218ec:	1c43      	adds	r3, r0, #1
 80218ee:	d102      	bne.n	80218f6 <_isatty_r+0x1a>
 80218f0:	682b      	ldr	r3, [r5, #0]
 80218f2:	b103      	cbz	r3, 80218f6 <_isatty_r+0x1a>
 80218f4:	6023      	str	r3, [r4, #0]
 80218f6:	bd38      	pop	{r3, r4, r5, pc}
 80218f8:	2000e0ec 	.word	0x2000e0ec

080218fc <_lseek_r>:
 80218fc:	b538      	push	{r3, r4, r5, lr}
 80218fe:	4d07      	ldr	r5, [pc, #28]	; (802191c <_lseek_r+0x20>)
 8021900:	4604      	mov	r4, r0
 8021902:	4608      	mov	r0, r1
 8021904:	4611      	mov	r1, r2
 8021906:	2200      	movs	r2, #0
 8021908:	602a      	str	r2, [r5, #0]
 802190a:	461a      	mov	r2, r3
 802190c:	f7f4 ffc5 	bl	801689a <_lseek>
 8021910:	1c43      	adds	r3, r0, #1
 8021912:	d102      	bne.n	802191a <_lseek_r+0x1e>
 8021914:	682b      	ldr	r3, [r5, #0]
 8021916:	b103      	cbz	r3, 802191a <_lseek_r+0x1e>
 8021918:	6023      	str	r3, [r4, #0]
 802191a:	bd38      	pop	{r3, r4, r5, pc}
 802191c:	2000e0ec 	.word	0x2000e0ec

08021920 <__ascii_mbtowc>:
 8021920:	b082      	sub	sp, #8
 8021922:	b901      	cbnz	r1, 8021926 <__ascii_mbtowc+0x6>
 8021924:	a901      	add	r1, sp, #4
 8021926:	b142      	cbz	r2, 802193a <__ascii_mbtowc+0x1a>
 8021928:	b14b      	cbz	r3, 802193e <__ascii_mbtowc+0x1e>
 802192a:	7813      	ldrb	r3, [r2, #0]
 802192c:	600b      	str	r3, [r1, #0]
 802192e:	7812      	ldrb	r2, [r2, #0]
 8021930:	1e10      	subs	r0, r2, #0
 8021932:	bf18      	it	ne
 8021934:	2001      	movne	r0, #1
 8021936:	b002      	add	sp, #8
 8021938:	4770      	bx	lr
 802193a:	4610      	mov	r0, r2
 802193c:	e7fb      	b.n	8021936 <__ascii_mbtowc+0x16>
 802193e:	f06f 0001 	mvn.w	r0, #1
 8021942:	e7f8      	b.n	8021936 <__ascii_mbtowc+0x16>

08021944 <__malloc_lock>:
 8021944:	4801      	ldr	r0, [pc, #4]	; (802194c <__malloc_lock+0x8>)
 8021946:	f7ff b886 	b.w	8020a56 <__retarget_lock_acquire_recursive>
 802194a:	bf00      	nop
 802194c:	2000e0e0 	.word	0x2000e0e0

08021950 <__malloc_unlock>:
 8021950:	4801      	ldr	r0, [pc, #4]	; (8021958 <__malloc_unlock+0x8>)
 8021952:	f7ff b881 	b.w	8020a58 <__retarget_lock_release_recursive>
 8021956:	bf00      	nop
 8021958:	2000e0e0 	.word	0x2000e0e0

0802195c <_read_r>:
 802195c:	b538      	push	{r3, r4, r5, lr}
 802195e:	4d07      	ldr	r5, [pc, #28]	; (802197c <_read_r+0x20>)
 8021960:	4604      	mov	r4, r0
 8021962:	4608      	mov	r0, r1
 8021964:	4611      	mov	r1, r2
 8021966:	2200      	movs	r2, #0
 8021968:	602a      	str	r2, [r5, #0]
 802196a:	461a      	mov	r2, r3
 802196c:	f7f4 ff30 	bl	80167d0 <_read>
 8021970:	1c43      	adds	r3, r0, #1
 8021972:	d102      	bne.n	802197a <_read_r+0x1e>
 8021974:	682b      	ldr	r3, [r5, #0]
 8021976:	b103      	cbz	r3, 802197a <_read_r+0x1e>
 8021978:	6023      	str	r3, [r4, #0]
 802197a:	bd38      	pop	{r3, r4, r5, pc}
 802197c:	2000e0ec 	.word	0x2000e0ec

08021980 <__ascii_wctomb>:
 8021980:	b149      	cbz	r1, 8021996 <__ascii_wctomb+0x16>
 8021982:	2aff      	cmp	r2, #255	; 0xff
 8021984:	bf85      	ittet	hi
 8021986:	238a      	movhi	r3, #138	; 0x8a
 8021988:	6003      	strhi	r3, [r0, #0]
 802198a:	700a      	strbls	r2, [r1, #0]
 802198c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021990:	bf98      	it	ls
 8021992:	2001      	movls	r0, #1
 8021994:	4770      	bx	lr
 8021996:	4608      	mov	r0, r1
 8021998:	4770      	bx	lr

0802199a <abort>:
 802199a:	b508      	push	{r3, lr}
 802199c:	2006      	movs	r0, #6
 802199e:	f000 f82b 	bl	80219f8 <raise>
 80219a2:	2001      	movs	r0, #1
 80219a4:	f7f4 ff0a 	bl	80167bc <_exit>

080219a8 <_raise_r>:
 80219a8:	291f      	cmp	r1, #31
 80219aa:	b538      	push	{r3, r4, r5, lr}
 80219ac:	4604      	mov	r4, r0
 80219ae:	460d      	mov	r5, r1
 80219b0:	d904      	bls.n	80219bc <_raise_r+0x14>
 80219b2:	2316      	movs	r3, #22
 80219b4:	6003      	str	r3, [r0, #0]
 80219b6:	f04f 30ff 	mov.w	r0, #4294967295
 80219ba:	bd38      	pop	{r3, r4, r5, pc}
 80219bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80219be:	b112      	cbz	r2, 80219c6 <_raise_r+0x1e>
 80219c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80219c4:	b94b      	cbnz	r3, 80219da <_raise_r+0x32>
 80219c6:	4620      	mov	r0, r4
 80219c8:	f000 f830 	bl	8021a2c <_getpid_r>
 80219cc:	462a      	mov	r2, r5
 80219ce:	4601      	mov	r1, r0
 80219d0:	4620      	mov	r0, r4
 80219d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80219d6:	f000 b817 	b.w	8021a08 <_kill_r>
 80219da:	2b01      	cmp	r3, #1
 80219dc:	d00a      	beq.n	80219f4 <_raise_r+0x4c>
 80219de:	1c59      	adds	r1, r3, #1
 80219e0:	d103      	bne.n	80219ea <_raise_r+0x42>
 80219e2:	2316      	movs	r3, #22
 80219e4:	6003      	str	r3, [r0, #0]
 80219e6:	2001      	movs	r0, #1
 80219e8:	e7e7      	b.n	80219ba <_raise_r+0x12>
 80219ea:	2400      	movs	r4, #0
 80219ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80219f0:	4628      	mov	r0, r5
 80219f2:	4798      	blx	r3
 80219f4:	2000      	movs	r0, #0
 80219f6:	e7e0      	b.n	80219ba <_raise_r+0x12>

080219f8 <raise>:
 80219f8:	4b02      	ldr	r3, [pc, #8]	; (8021a04 <raise+0xc>)
 80219fa:	4601      	mov	r1, r0
 80219fc:	6818      	ldr	r0, [r3, #0]
 80219fe:	f7ff bfd3 	b.w	80219a8 <_raise_r>
 8021a02:	bf00      	nop
 8021a04:	2000002c 	.word	0x2000002c

08021a08 <_kill_r>:
 8021a08:	b538      	push	{r3, r4, r5, lr}
 8021a0a:	4d07      	ldr	r5, [pc, #28]	; (8021a28 <_kill_r+0x20>)
 8021a0c:	2300      	movs	r3, #0
 8021a0e:	4604      	mov	r4, r0
 8021a10:	4608      	mov	r0, r1
 8021a12:	4611      	mov	r1, r2
 8021a14:	602b      	str	r3, [r5, #0]
 8021a16:	f7f4 fec1 	bl	801679c <_kill>
 8021a1a:	1c43      	adds	r3, r0, #1
 8021a1c:	d102      	bne.n	8021a24 <_kill_r+0x1c>
 8021a1e:	682b      	ldr	r3, [r5, #0]
 8021a20:	b103      	cbz	r3, 8021a24 <_kill_r+0x1c>
 8021a22:	6023      	str	r3, [r4, #0]
 8021a24:	bd38      	pop	{r3, r4, r5, pc}
 8021a26:	bf00      	nop
 8021a28:	2000e0ec 	.word	0x2000e0ec

08021a2c <_getpid_r>:
 8021a2c:	f7f4 beae 	b.w	801678c <_getpid>

08021a30 <exp>:
 8021a30:	b538      	push	{r3, r4, r5, lr}
 8021a32:	ed2d 8b02 	vpush	{d8}
 8021a36:	ec55 4b10 	vmov	r4, r5, d0
 8021a3a:	f000 f841 	bl	8021ac0 <__ieee754_exp>
 8021a3e:	eeb0 8a40 	vmov.f32	s16, s0
 8021a42:	eef0 8a60 	vmov.f32	s17, s1
 8021a46:	ec45 4b10 	vmov	d0, r4, r5
 8021a4a:	f000 f9eb 	bl	8021e24 <finite>
 8021a4e:	b168      	cbz	r0, 8021a6c <exp+0x3c>
 8021a50:	a317      	add	r3, pc, #92	; (adr r3, 8021ab0 <exp+0x80>)
 8021a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a56:	4620      	mov	r0, r4
 8021a58:	4629      	mov	r1, r5
 8021a5a:	f7df f885 	bl	8000b68 <__aeabi_dcmpgt>
 8021a5e:	b160      	cbz	r0, 8021a7a <exp+0x4a>
 8021a60:	f7fd f9b2 	bl	801edc8 <__errno>
 8021a64:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8021aa0 <exp+0x70>
 8021a68:	2322      	movs	r3, #34	; 0x22
 8021a6a:	6003      	str	r3, [r0, #0]
 8021a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8021a70:	eef0 0a68 	vmov.f32	s1, s17
 8021a74:	ecbd 8b02 	vpop	{d8}
 8021a78:	bd38      	pop	{r3, r4, r5, pc}
 8021a7a:	a30f      	add	r3, pc, #60	; (adr r3, 8021ab8 <exp+0x88>)
 8021a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a80:	4620      	mov	r0, r4
 8021a82:	4629      	mov	r1, r5
 8021a84:	f7df f852 	bl	8000b2c <__aeabi_dcmplt>
 8021a88:	2800      	cmp	r0, #0
 8021a8a:	d0ef      	beq.n	8021a6c <exp+0x3c>
 8021a8c:	f7fd f99c 	bl	801edc8 <__errno>
 8021a90:	2322      	movs	r3, #34	; 0x22
 8021a92:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8021aa8 <exp+0x78>
 8021a96:	6003      	str	r3, [r0, #0]
 8021a98:	e7e8      	b.n	8021a6c <exp+0x3c>
 8021a9a:	bf00      	nop
 8021a9c:	f3af 8000 	nop.w
 8021aa0:	00000000 	.word	0x00000000
 8021aa4:	7ff00000 	.word	0x7ff00000
	...
 8021ab0:	fefa39ef 	.word	0xfefa39ef
 8021ab4:	40862e42 	.word	0x40862e42
 8021ab8:	d52d3051 	.word	0xd52d3051
 8021abc:	c0874910 	.word	0xc0874910

08021ac0 <__ieee754_exp>:
 8021ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ac4:	ec55 4b10 	vmov	r4, r5, d0
 8021ac8:	49b5      	ldr	r1, [pc, #724]	; (8021da0 <__ieee754_exp+0x2e0>)
 8021aca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021ace:	428b      	cmp	r3, r1
 8021ad0:	ed2d 8b04 	vpush	{d8-d9}
 8021ad4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8021ad8:	d93d      	bls.n	8021b56 <__ieee754_exp+0x96>
 8021ada:	49b2      	ldr	r1, [pc, #712]	; (8021da4 <__ieee754_exp+0x2e4>)
 8021adc:	428b      	cmp	r3, r1
 8021ade:	d918      	bls.n	8021b12 <__ieee754_exp+0x52>
 8021ae0:	ee10 3a10 	vmov	r3, s0
 8021ae4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8021ae8:	4313      	orrs	r3, r2
 8021aea:	d009      	beq.n	8021b00 <__ieee754_exp+0x40>
 8021aec:	ee10 2a10 	vmov	r2, s0
 8021af0:	462b      	mov	r3, r5
 8021af2:	4620      	mov	r0, r4
 8021af4:	4629      	mov	r1, r5
 8021af6:	f7de fbf1 	bl	80002dc <__adddf3>
 8021afa:	4604      	mov	r4, r0
 8021afc:	460d      	mov	r5, r1
 8021afe:	e002      	b.n	8021b06 <__ieee754_exp+0x46>
 8021b00:	b10e      	cbz	r6, 8021b06 <__ieee754_exp+0x46>
 8021b02:	2400      	movs	r4, #0
 8021b04:	2500      	movs	r5, #0
 8021b06:	ecbd 8b04 	vpop	{d8-d9}
 8021b0a:	ec45 4b10 	vmov	d0, r4, r5
 8021b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b12:	a38d      	add	r3, pc, #564	; (adr r3, 8021d48 <__ieee754_exp+0x288>)
 8021b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b18:	ee10 0a10 	vmov	r0, s0
 8021b1c:	4629      	mov	r1, r5
 8021b1e:	f7df f823 	bl	8000b68 <__aeabi_dcmpgt>
 8021b22:	4607      	mov	r7, r0
 8021b24:	b130      	cbz	r0, 8021b34 <__ieee754_exp+0x74>
 8021b26:	ecbd 8b04 	vpop	{d8-d9}
 8021b2a:	2000      	movs	r0, #0
 8021b2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b30:	f000 b96f 	b.w	8021e12 <__math_oflow>
 8021b34:	a386      	add	r3, pc, #536	; (adr r3, 8021d50 <__ieee754_exp+0x290>)
 8021b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b3a:	4620      	mov	r0, r4
 8021b3c:	4629      	mov	r1, r5
 8021b3e:	f7de fff5 	bl	8000b2c <__aeabi_dcmplt>
 8021b42:	2800      	cmp	r0, #0
 8021b44:	f000 808b 	beq.w	8021c5e <__ieee754_exp+0x19e>
 8021b48:	ecbd 8b04 	vpop	{d8-d9}
 8021b4c:	4638      	mov	r0, r7
 8021b4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b52:	f000 b955 	b.w	8021e00 <__math_uflow>
 8021b56:	4a94      	ldr	r2, [pc, #592]	; (8021da8 <__ieee754_exp+0x2e8>)
 8021b58:	4293      	cmp	r3, r2
 8021b5a:	f240 80ac 	bls.w	8021cb6 <__ieee754_exp+0x1f6>
 8021b5e:	4a93      	ldr	r2, [pc, #588]	; (8021dac <__ieee754_exp+0x2ec>)
 8021b60:	4293      	cmp	r3, r2
 8021b62:	d87c      	bhi.n	8021c5e <__ieee754_exp+0x19e>
 8021b64:	4b92      	ldr	r3, [pc, #584]	; (8021db0 <__ieee754_exp+0x2f0>)
 8021b66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b6e:	ee10 0a10 	vmov	r0, s0
 8021b72:	4629      	mov	r1, r5
 8021b74:	f7de fbb0 	bl	80002d8 <__aeabi_dsub>
 8021b78:	4b8e      	ldr	r3, [pc, #568]	; (8021db4 <__ieee754_exp+0x2f4>)
 8021b7a:	00f7      	lsls	r7, r6, #3
 8021b7c:	443b      	add	r3, r7
 8021b7e:	ed93 7b00 	vldr	d7, [r3]
 8021b82:	f1c6 0a01 	rsb	sl, r6, #1
 8021b86:	4680      	mov	r8, r0
 8021b88:	4689      	mov	r9, r1
 8021b8a:	ebaa 0a06 	sub.w	sl, sl, r6
 8021b8e:	eeb0 8a47 	vmov.f32	s16, s14
 8021b92:	eef0 8a67 	vmov.f32	s17, s15
 8021b96:	ec53 2b18 	vmov	r2, r3, d8
 8021b9a:	4640      	mov	r0, r8
 8021b9c:	4649      	mov	r1, r9
 8021b9e:	f7de fb9b 	bl	80002d8 <__aeabi_dsub>
 8021ba2:	4604      	mov	r4, r0
 8021ba4:	460d      	mov	r5, r1
 8021ba6:	4622      	mov	r2, r4
 8021ba8:	462b      	mov	r3, r5
 8021baa:	4620      	mov	r0, r4
 8021bac:	4629      	mov	r1, r5
 8021bae:	f7de fd4b 	bl	8000648 <__aeabi_dmul>
 8021bb2:	a369      	add	r3, pc, #420	; (adr r3, 8021d58 <__ieee754_exp+0x298>)
 8021bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bb8:	4606      	mov	r6, r0
 8021bba:	460f      	mov	r7, r1
 8021bbc:	f7de fd44 	bl	8000648 <__aeabi_dmul>
 8021bc0:	a367      	add	r3, pc, #412	; (adr r3, 8021d60 <__ieee754_exp+0x2a0>)
 8021bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bc6:	f7de fb87 	bl	80002d8 <__aeabi_dsub>
 8021bca:	4632      	mov	r2, r6
 8021bcc:	463b      	mov	r3, r7
 8021bce:	f7de fd3b 	bl	8000648 <__aeabi_dmul>
 8021bd2:	a365      	add	r3, pc, #404	; (adr r3, 8021d68 <__ieee754_exp+0x2a8>)
 8021bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bd8:	f7de fb80 	bl	80002dc <__adddf3>
 8021bdc:	4632      	mov	r2, r6
 8021bde:	463b      	mov	r3, r7
 8021be0:	f7de fd32 	bl	8000648 <__aeabi_dmul>
 8021be4:	a362      	add	r3, pc, #392	; (adr r3, 8021d70 <__ieee754_exp+0x2b0>)
 8021be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bea:	f7de fb75 	bl	80002d8 <__aeabi_dsub>
 8021bee:	4632      	mov	r2, r6
 8021bf0:	463b      	mov	r3, r7
 8021bf2:	f7de fd29 	bl	8000648 <__aeabi_dmul>
 8021bf6:	a360      	add	r3, pc, #384	; (adr r3, 8021d78 <__ieee754_exp+0x2b8>)
 8021bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bfc:	f7de fb6e 	bl	80002dc <__adddf3>
 8021c00:	4632      	mov	r2, r6
 8021c02:	463b      	mov	r3, r7
 8021c04:	f7de fd20 	bl	8000648 <__aeabi_dmul>
 8021c08:	4602      	mov	r2, r0
 8021c0a:	460b      	mov	r3, r1
 8021c0c:	4620      	mov	r0, r4
 8021c0e:	4629      	mov	r1, r5
 8021c10:	f7de fb62 	bl	80002d8 <__aeabi_dsub>
 8021c14:	4602      	mov	r2, r0
 8021c16:	460b      	mov	r3, r1
 8021c18:	4606      	mov	r6, r0
 8021c1a:	460f      	mov	r7, r1
 8021c1c:	4620      	mov	r0, r4
 8021c1e:	4629      	mov	r1, r5
 8021c20:	f7de fd12 	bl	8000648 <__aeabi_dmul>
 8021c24:	ec41 0b19 	vmov	d9, r0, r1
 8021c28:	f1ba 0f00 	cmp.w	sl, #0
 8021c2c:	d15d      	bne.n	8021cea <__ieee754_exp+0x22a>
 8021c2e:	2200      	movs	r2, #0
 8021c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021c34:	4630      	mov	r0, r6
 8021c36:	4639      	mov	r1, r7
 8021c38:	f7de fb4e 	bl	80002d8 <__aeabi_dsub>
 8021c3c:	4602      	mov	r2, r0
 8021c3e:	460b      	mov	r3, r1
 8021c40:	ec51 0b19 	vmov	r0, r1, d9
 8021c44:	f7de fe2a 	bl	800089c <__aeabi_ddiv>
 8021c48:	4622      	mov	r2, r4
 8021c4a:	462b      	mov	r3, r5
 8021c4c:	f7de fb44 	bl	80002d8 <__aeabi_dsub>
 8021c50:	4602      	mov	r2, r0
 8021c52:	460b      	mov	r3, r1
 8021c54:	2000      	movs	r0, #0
 8021c56:	4958      	ldr	r1, [pc, #352]	; (8021db8 <__ieee754_exp+0x2f8>)
 8021c58:	f7de fb3e 	bl	80002d8 <__aeabi_dsub>
 8021c5c:	e74d      	b.n	8021afa <__ieee754_exp+0x3a>
 8021c5e:	4857      	ldr	r0, [pc, #348]	; (8021dbc <__ieee754_exp+0x2fc>)
 8021c60:	a347      	add	r3, pc, #284	; (adr r3, 8021d80 <__ieee754_exp+0x2c0>)
 8021c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c66:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8021c6a:	4629      	mov	r1, r5
 8021c6c:	4620      	mov	r0, r4
 8021c6e:	f7de fceb 	bl	8000648 <__aeabi_dmul>
 8021c72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021c76:	f7de fb31 	bl	80002dc <__adddf3>
 8021c7a:	f7de ff95 	bl	8000ba8 <__aeabi_d2iz>
 8021c7e:	4682      	mov	sl, r0
 8021c80:	f7de fc78 	bl	8000574 <__aeabi_i2d>
 8021c84:	a340      	add	r3, pc, #256	; (adr r3, 8021d88 <__ieee754_exp+0x2c8>)
 8021c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c8a:	4606      	mov	r6, r0
 8021c8c:	460f      	mov	r7, r1
 8021c8e:	f7de fcdb 	bl	8000648 <__aeabi_dmul>
 8021c92:	4602      	mov	r2, r0
 8021c94:	460b      	mov	r3, r1
 8021c96:	4620      	mov	r0, r4
 8021c98:	4629      	mov	r1, r5
 8021c9a:	f7de fb1d 	bl	80002d8 <__aeabi_dsub>
 8021c9e:	a33c      	add	r3, pc, #240	; (adr r3, 8021d90 <__ieee754_exp+0x2d0>)
 8021ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ca4:	4680      	mov	r8, r0
 8021ca6:	4689      	mov	r9, r1
 8021ca8:	4630      	mov	r0, r6
 8021caa:	4639      	mov	r1, r7
 8021cac:	f7de fccc 	bl	8000648 <__aeabi_dmul>
 8021cb0:	ec41 0b18 	vmov	d8, r0, r1
 8021cb4:	e76f      	b.n	8021b96 <__ieee754_exp+0xd6>
 8021cb6:	4a42      	ldr	r2, [pc, #264]	; (8021dc0 <__ieee754_exp+0x300>)
 8021cb8:	4293      	cmp	r3, r2
 8021cba:	d811      	bhi.n	8021ce0 <__ieee754_exp+0x220>
 8021cbc:	a336      	add	r3, pc, #216	; (adr r3, 8021d98 <__ieee754_exp+0x2d8>)
 8021cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cc2:	ee10 0a10 	vmov	r0, s0
 8021cc6:	4629      	mov	r1, r5
 8021cc8:	f7de fb08 	bl	80002dc <__adddf3>
 8021ccc:	4b3a      	ldr	r3, [pc, #232]	; (8021db8 <__ieee754_exp+0x2f8>)
 8021cce:	2200      	movs	r2, #0
 8021cd0:	f7de ff4a 	bl	8000b68 <__aeabi_dcmpgt>
 8021cd4:	b138      	cbz	r0, 8021ce6 <__ieee754_exp+0x226>
 8021cd6:	4b38      	ldr	r3, [pc, #224]	; (8021db8 <__ieee754_exp+0x2f8>)
 8021cd8:	2200      	movs	r2, #0
 8021cda:	4620      	mov	r0, r4
 8021cdc:	4629      	mov	r1, r5
 8021cde:	e70a      	b.n	8021af6 <__ieee754_exp+0x36>
 8021ce0:	f04f 0a00 	mov.w	sl, #0
 8021ce4:	e75f      	b.n	8021ba6 <__ieee754_exp+0xe6>
 8021ce6:	4682      	mov	sl, r0
 8021ce8:	e75d      	b.n	8021ba6 <__ieee754_exp+0xe6>
 8021cea:	4632      	mov	r2, r6
 8021cec:	463b      	mov	r3, r7
 8021cee:	2000      	movs	r0, #0
 8021cf0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8021cf4:	f7de faf0 	bl	80002d8 <__aeabi_dsub>
 8021cf8:	4602      	mov	r2, r0
 8021cfa:	460b      	mov	r3, r1
 8021cfc:	ec51 0b19 	vmov	r0, r1, d9
 8021d00:	f7de fdcc 	bl	800089c <__aeabi_ddiv>
 8021d04:	4602      	mov	r2, r0
 8021d06:	460b      	mov	r3, r1
 8021d08:	ec51 0b18 	vmov	r0, r1, d8
 8021d0c:	f7de fae4 	bl	80002d8 <__aeabi_dsub>
 8021d10:	4642      	mov	r2, r8
 8021d12:	464b      	mov	r3, r9
 8021d14:	f7de fae0 	bl	80002d8 <__aeabi_dsub>
 8021d18:	4602      	mov	r2, r0
 8021d1a:	460b      	mov	r3, r1
 8021d1c:	2000      	movs	r0, #0
 8021d1e:	4926      	ldr	r1, [pc, #152]	; (8021db8 <__ieee754_exp+0x2f8>)
 8021d20:	f7de fada 	bl	80002d8 <__aeabi_dsub>
 8021d24:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8021d28:	4592      	cmp	sl, r2
 8021d2a:	db02      	blt.n	8021d32 <__ieee754_exp+0x272>
 8021d2c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021d30:	e6e3      	b.n	8021afa <__ieee754_exp+0x3a>
 8021d32:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8021d36:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021d3a:	2200      	movs	r2, #0
 8021d3c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8021d40:	f7de fc82 	bl	8000648 <__aeabi_dmul>
 8021d44:	e6d9      	b.n	8021afa <__ieee754_exp+0x3a>
 8021d46:	bf00      	nop
 8021d48:	fefa39ef 	.word	0xfefa39ef
 8021d4c:	40862e42 	.word	0x40862e42
 8021d50:	d52d3051 	.word	0xd52d3051
 8021d54:	c0874910 	.word	0xc0874910
 8021d58:	72bea4d0 	.word	0x72bea4d0
 8021d5c:	3e663769 	.word	0x3e663769
 8021d60:	c5d26bf1 	.word	0xc5d26bf1
 8021d64:	3ebbbd41 	.word	0x3ebbbd41
 8021d68:	af25de2c 	.word	0xaf25de2c
 8021d6c:	3f11566a 	.word	0x3f11566a
 8021d70:	16bebd93 	.word	0x16bebd93
 8021d74:	3f66c16c 	.word	0x3f66c16c
 8021d78:	5555553e 	.word	0x5555553e
 8021d7c:	3fc55555 	.word	0x3fc55555
 8021d80:	652b82fe 	.word	0x652b82fe
 8021d84:	3ff71547 	.word	0x3ff71547
 8021d88:	fee00000 	.word	0xfee00000
 8021d8c:	3fe62e42 	.word	0x3fe62e42
 8021d90:	35793c76 	.word	0x35793c76
 8021d94:	3dea39ef 	.word	0x3dea39ef
 8021d98:	8800759c 	.word	0x8800759c
 8021d9c:	7e37e43c 	.word	0x7e37e43c
 8021da0:	40862e41 	.word	0x40862e41
 8021da4:	7fefffff 	.word	0x7fefffff
 8021da8:	3fd62e42 	.word	0x3fd62e42
 8021dac:	3ff0a2b1 	.word	0x3ff0a2b1
 8021db0:	08022560 	.word	0x08022560
 8021db4:	08022570 	.word	0x08022570
 8021db8:	3ff00000 	.word	0x3ff00000
 8021dbc:	08022550 	.word	0x08022550
 8021dc0:	3defffff 	.word	0x3defffff

08021dc4 <with_errno>:
 8021dc4:	b570      	push	{r4, r5, r6, lr}
 8021dc6:	4604      	mov	r4, r0
 8021dc8:	460d      	mov	r5, r1
 8021dca:	4616      	mov	r6, r2
 8021dcc:	f7fc fffc 	bl	801edc8 <__errno>
 8021dd0:	4629      	mov	r1, r5
 8021dd2:	6006      	str	r6, [r0, #0]
 8021dd4:	4620      	mov	r0, r4
 8021dd6:	bd70      	pop	{r4, r5, r6, pc}

08021dd8 <xflow>:
 8021dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021dda:	4614      	mov	r4, r2
 8021ddc:	461d      	mov	r5, r3
 8021dde:	b108      	cbz	r0, 8021de4 <xflow+0xc>
 8021de0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021de4:	e9cd 2300 	strd	r2, r3, [sp]
 8021de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021dec:	4620      	mov	r0, r4
 8021dee:	4629      	mov	r1, r5
 8021df0:	f7de fc2a 	bl	8000648 <__aeabi_dmul>
 8021df4:	2222      	movs	r2, #34	; 0x22
 8021df6:	b003      	add	sp, #12
 8021df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021dfc:	f7ff bfe2 	b.w	8021dc4 <with_errno>

08021e00 <__math_uflow>:
 8021e00:	b508      	push	{r3, lr}
 8021e02:	2200      	movs	r2, #0
 8021e04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8021e08:	f7ff ffe6 	bl	8021dd8 <xflow>
 8021e0c:	ec41 0b10 	vmov	d0, r0, r1
 8021e10:	bd08      	pop	{r3, pc}

08021e12 <__math_oflow>:
 8021e12:	b508      	push	{r3, lr}
 8021e14:	2200      	movs	r2, #0
 8021e16:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8021e1a:	f7ff ffdd 	bl	8021dd8 <xflow>
 8021e1e:	ec41 0b10 	vmov	d0, r0, r1
 8021e22:	bd08      	pop	{r3, pc}

08021e24 <finite>:
 8021e24:	b082      	sub	sp, #8
 8021e26:	ed8d 0b00 	vstr	d0, [sp]
 8021e2a:	9801      	ldr	r0, [sp, #4]
 8021e2c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8021e30:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021e34:	0fc0      	lsrs	r0, r0, #31
 8021e36:	b002      	add	sp, #8
 8021e38:	4770      	bx	lr
	...

08021e3c <_init>:
 8021e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e3e:	bf00      	nop
 8021e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e42:	bc08      	pop	{r3}
 8021e44:	469e      	mov	lr, r3
 8021e46:	4770      	bx	lr

08021e48 <_fini>:
 8021e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e4a:	bf00      	nop
 8021e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e4e:	bc08      	pop	{r3}
 8021e50:	469e      	mov	lr, r3
 8021e52:	4770      	bx	lr
